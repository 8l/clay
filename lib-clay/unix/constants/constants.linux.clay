

//
// flags for 'open'
//

alias O_RDONLY   = 00;
alias O_WRONLY   = 01;
alias O_RDWR     = 02;
alias O_CREAT    = 0100;
alias O_EXCL     = 0200;
alias O_NOCTTY   = 0400;
alias O_TRUNC    = 01000;
alias O_APPEND   = 02000;
alias O_NONBLOCK = 04000;
alias O_NDELAY   = O_NONBLOCK;
alias O_SYNC     = 010000;
alias O_FSYNC    = O_SYNC;
alias O_ASYNC    = 020000;



//
// flags for 'chmod'
//

alias S_IRWXU = 0700;
alias S_IRUSR = 0400;
alias S_IWUSR = 0200;
alias S_IXUSR = 0100;

alias S_IRWXG = 070;
alias S_IRGRP = 040;
alias S_IWGRP = 020;
alias S_IXGRP = 010;

alias S_IRWXO = 07;
alias S_IROTH = 04;
alias S_IWOTH = 02;
alias S_IXOTH = 01;

alias S_ISUID = 04000;
alias S_ISGID = 02000;
alias S_ISVTX = 01000;



//
// flags for lseek
//

alias SEEK_SET = 0;
alias SEEK_CUR = 1;
alias SEEK_END = 2;



//
// flags for mmap
//

alias PROT_NONE  = 0;
alias PROT_READ  = 1;
alias PROT_WRITE = 2;
alias PROT_EXEC  = 4;

alias MAP_SHARED    = 1;
alias MAP_PRIVATE   = 2;
alias MAP_32BIT     = 64;
alias MAP_ANONYMOUS = 32;
alias MAP_FILE      = 0;
alias MAP_FIXED     = 16;
alias MAP_GROWSDOWN = 256;
alias MAP_LOCKED    = 8192;
alias MAP_NONBLOCK  = 65536;
alias MAP_NORESERVE = 16384;
alias MAP_POPULATE  = 32768;
alias MAP_STACK     = 131072;

alias MAP_FAILED = RawPointer(-1);



//
// flags for msync
//

alias MS_ASYNC      = 1;
alias MS_SYNC       = 4;
alias MS_INVALIDATE = 2;



//
// socket protocol families
//
alias AF_UNSPEC = 0u8;
alias AF_LOCAL = 1u8;
alias AF_INET = 2u8;
alias AF_INET6 = 30u8;



//
// socket protocol families
//
alias PF_UNSPEC = AF_UNSPEC;
alias PF_LOCAL = AF_LOCAL;
alias PF_INET = AF_INET;
alias PF_INET6 = AF_INET6;



//
// IP protocols
//
alias IPPROTO_ICMP   =  1;
alias IPPROTO_IGMP   =  2;
alias IPPROTO_TCP    =  6;
alias IPPROTO_UDP    = 17;
alias IPPROTO_ICMPV6 = 58;



//
// special IPv4 addresses
//
alias INADDR_ANY       = 0x00_00_00_00u32;
alias INADDR_BROADCAST = 0xFF_FF_FF_FFu32;
alias INADDR_LOOPBACK  = 0x7F_00_00_01u32;
alias INADDR_NONE      = 0xFF_FF_FF_FFu32;
alias INADDR_UNSPEC_GROUP    = 0xE0_00_00_00u32;
alias INADDR_ALLHOSTS_GROUP  = 0xE0_00_00_01u32;
alias INADDR_ALLRTRS_GROUP   = 0xE0_00_00_02u32;
alias INADDR_MAX_LOCAL_GROUP = 0xE0_00_00_FFu32;



//
// byte order macros
//
htons(x: UInt16) y: UInt16 {
    var yb = Pointer[UInt8](&y);
    yb[0] = UInt8(shiftRight(x, 8));
    yb[1] = UInt8(bitwiseAnd(x, 0xFFu16));
}
alias ntohs = htons;

htonl(x: UInt32) y: UInt32 {
    var yb = Pointer[UInt8](&y);
    yb[0] = UInt8(           shiftRight(x, 24)          );
    yb[1] = UInt8(bitwiseAnd(shiftRight(x, 16), 0xFFu32));
    yb[2] = UInt8(bitwiseAnd(shiftRight(x,  8), 0xFFu32));
    yb[3] = UInt8(bitwiseAnd(           x,      0xFFu32));
}
alias ntohl = htonl;
