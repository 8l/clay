
// byte streams

// [I | Integer?(I)]
// read(stream, buf:Pointer[Byte], n:I) : SizeT
overloadable read;

// [I | Integer?(I)]
// write(stream, buf:Pointer[Byte], n:I) : Void
overloadable write;

// flush(stream) : Void
overloadable flush;



//
// readByte, readChar, readLine
//

readByte(stream, b:Byte) : Bool {
    var result = read(stream, &b, 1);
    return result == 1;
}

readChar(stream, c:Char) : Bool {
    var ptr = Pointer[Byte](&c);
    var result = read(stream, ptr, 1);
    return result == 1;
}

readLine(stream) : String {
    var v = Vector[Char]();
    var c = Char();
    while (readChar(stream, c)) {
        push(v, c);
        if (c == '\n')
            break;
    }
    return String(v);
}



//
// writeByte
//

overloadable writeByte;

[I | Integer?(I)]
overload writeByte(stream, x:I) {
    var b = Byte(x);
    write(stream, &b, 1);
}

overload writeByte(stream, x:Char) {
    writeByte(stream, Byte(x));
}
