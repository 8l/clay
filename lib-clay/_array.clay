import _core;
import _numeric;
import _range;

//
// Array[T,n]
//

overload init[T,n](a:Array[T,n]) {
    let i = 0;
    while (lesser(i, n)) {
        init(arrayRef(a, i));
        i = add(i, 1);
    }
}

overload copy[T,n](dest:Array[T,n], src:Array[T,n]) {
    let i = 0;
    while (lesser(i, n)) {
        copy(arrayRef(dest, i), arrayRef(src, i));
        i = add(i, 1);
    }
}

overload destroy[T,n](a:Array[T,n]) {
    let i = 0;
    while (lesser(i, n)) {
        destroy(arrayRef(a, i));
        i = add(i, 1);
    }
}

overload equals[T,n](a:Array[T,n], b:Array[T,n]) {
    let i = 0;
    while (lesser(i, n)) {
        if (notEquals(arrayRef(a, i), arrayRef(b, i)))
            return false;
        i = add(i, 1);
    }
    return true;
}

overload lesser[T,n](a:Array[T,n], b:Array[T,n]) {
    let i = 0;
    while (lesser(i, n)) {
        if (lesser(arrayRef(a, i), arrayRef(b, i)))
            return true;
        if (lesser(arrayRef(b, i), arrayRef(a, i)))
            return false;
        i = add(i, 1);
    }
    return false;
}

overload hash[T,n](a:Array[T,n]) {
    let h = 0;
    let i = 0;
    while (lesser(i, n)) {
        h = add(h, hash(arrayRef(a, i)));
        i = add(i, 1);
    }
    return h;
}


//
// size, at
//

overload size[T,n](a:Array[T,n]) {
    return n;
}

overload at[T,n](a:Array[T,n], i) ref {
    return arrayRef(a, i);
}


//
// array coordinates
//

record ArrayCoordinate[T](ptr:Pointer[T]);

overload at[T](c:ArrayCoordinate[T]) ref {
    return c.ptr^;
}

overload begin[T,n](a:Array[T,n]) {
    return ArrayCoordinate(&at(a, 0));
}

overload end[T,n](a:Array[T,n]) {
    return ArrayCoordinate(&at(a, n));
}

overload add[T,I](c:ArrayCoordinate[T], i:I) if (IntegerType(I)) {
    return ArrayCoordinate(c.ptr + i);
}

overload subtract[T,I](c:ArrayCoordinate[T], i:I) if (IntegerType(I)) {
    return ArrayCoordinate(c.ptr - i);
}

overload subtract[T](c1:ArrayCoordinate[T], c2:ArrayCoordinate[T]) {
    return c1.ptr - c2.ptr;
}


//
// array iteration
//

overload iterator[T,n](a:Array[T,n]) {
    return CoordinateRange(begin(a), end(a));
}
