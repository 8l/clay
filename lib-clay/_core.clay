import __primitives__;
export __primitives__;

overloadable to;

overloadable size;
overloadable at;
overloadable begin;
overloadable end;

overloadable zero;
overloadable one;


//
// defaults
//

overload init[T](a:T) {
}

overload destroy[T](a:T) {
}

overload assign[T](dest:T, src:T) {
    if (equals(&dest, &src)) return;
    destroy(dest);
    copy(dest, src);
}

overload notEquals[T](a:T, b:T) {
    return not equals(a, b);
}

overload lesserEquals[T](a:T, b:T) {
    return equals(a, b) or lesser(a, b);
}

overload greater[T](a:T, b:T) {
    return not lesserEquals(a, b);
}

overload greaterEquals[T](a:T, b:T) {
    return not lesser(a, b);
}


//
// swap
//

def swap(a, b) {
    let temp = a;
    a = b;
    b = temp;
}
