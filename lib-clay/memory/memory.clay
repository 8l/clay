
import libc.(malloc, realloc, free);
import memory.platform.(SystemMallocAlignment);



//
// allocateObject, freeObject
//

[T]
callbyname allocateObject(x:T) {
    var ptr = allocateRawMemory(T, 1);
    try {
        ptr^ <-- x;
    }
    catch (e) {
        freeRawMemory(ptr);
        throw e;
    }
    return ptr;
}

[T]
freeObject(ptr:Pointer[T]) {
    destroy(ptr^);
    freeRawMemory(ptr);
}



//
// alignedMalloc, alignedFree
//

alignedMalloc(numBytes:SizeT, alignment:SizeT) {
    var ptr = malloc(numBytes + alignment + TypeSize(UInt8));
    if (null?(ptr))
        return null(UInt8);
    var mask = bitwiseNot(SizeT(alignment) - 1);
    var roundedDown = bitwiseAnd(SizeT(ptr), mask);
    var alignedPtr = Pointer[UInt8](alignment + roundedDown);
    (alignedPtr - 1)^ = Byte(alignedPtr - ptr);
    return alignedPtr;
}

alignedFree(ptr:Pointer[UInt8]) {
    if (null?(ptr))
        return;
    var offset = SizeT((ptr-1)^);
    var originalPtr = ptr - offset;
    free(originalPtr);
}


//
// allocateRawMemoryAligned, freeRawMemoryAligned
//

[T, I, J | Integer?(I) and Integer?(J)]
allocateRawMemoryAligned(static T, count:I, alignment:J) {
    var ptr = alignedMalloc(TypeSize(T) * SizeT(count), SizeT(alignment));
    return Pointer[T](ptr);
}

[T]
freeRawMemoryAligned(ptr:Pointer[T]) {
    alignedFree(Pointer[UInt8](ptr));
}



//
// allocateRawMemory, freeRawMemory
//

[T,I | Integer?(I)]
allocateRawMemory(static T, count:I) {
    var ptr = malloc(TypeSize(T) * SizeT(count));
    return Pointer[T](ptr);
}

[T,I | Integer?(I)]
reallocateRawMemory(ptr:Pointer[T], count:I) {
    var newptr = realloc(RawPointer(ptr), TypeSize(T) * SizeT(count));
    return Pointer[T](newptr);
}

[T]
freeRawMemory(ptr:Pointer[T]) {
    free(RawPointer(ptr));
}

[T,I | Integer?(I) and (TypeAlignment(T) > SystemMallocAlignment)]
overload allocateRawMemory(static T, count:I) {
    return allocateRawMemoryAligned(T, count, TypeAlignment(T));
}

[T | TypeAlignment(T) > SystemMallocAlignment]
overload freeRawMemory(ptr:Pointer[T]) {
    freeRawMemoryAligned(ptr);
}



//
// initializeMemory
//

[T]
initializeMemory(first:Pointer[T], last:Pointer[T]) {
    eachLocationWithCleanup(first, last, initialize);
}



//
// destroyMemory
//

[T | not PODType?(T)]
destroyMemory(first:Pointer[T], last:Pointer[T]) {
    eachLocation(first, last, destroy);
}



//
// copyMemory, copyMemoryBackwards
//

[T | not PODType?(T)]
copyMemory(destFirst:Pointer[T], destLast:Pointer[T], srcFirst:Pointer[T]) {
    var srcPtr = srcFirst;
    eachLocationWithCleanup(destFirst, destLast, x => {
            x <-- srcPtr^;
            srcPtr += 1;
        }
    );
}

[T | not PODType?(T)]
copyMemoryBackwards(destFirst:Pointer[T], destLast:Pointer[T], srcFirst:Pointer[T]) {
    var srcPtr = srcFirst + (destLast - destFirst);
    eachLocationBackwardsWithCleanup(destFirst, destLast, x => {
            srcPtr -= 1;
            x <-- srcPtr^;
        }
    );
}

[T | not PODType?(T)]
copyNonoverlappingMemory(destFirst:Pointer[T], destLast:Pointer[T], srcFirst:Pointer[T]) {
    copyMemory(destFirst, destLast, srcFirst);
}


//
// moveMemory, moveMemoryUnsafe
//

[T | not PODType?(T)]
moveMemory(destFirst:Pointer[T], destLast:Pointer[T], srcFirst:Pointer[T]) {
    var srcPtr = srcFirst;
    eachLocation(destFirst, destLast, x => {
        x <-- move(srcPtr^);
        srcPtr += 1;
    });
}

[T | not PODType?(T)]
moveMemoryUnsafe(destFirst:Pointer[T], destLast:Pointer[T], srcFirst:Pointer[T]) {
    var srcPtr = srcFirst;
    eachLocation(destFirst, destLast, x => {
        x <-- moveUnsafe(srcPtr^);
        srcPtr += 1;
    });
}

[T | not PODType?(T)]
moveNonoverlappingMemory(destFirst:Pointer[T], destLast:Pointer[T], srcFirst:Pointer[T]) {
    moveMemory(destFirst, destLast, srcFirst);
}

[T | not PODType?(T)]
moveNonoverlappingMemoryUnsafe(destFirst:Pointer[T], destLast:Pointer[T], srcFirst:Pointer[T]) {
    moveMemoryUnsafe(destFirst, destLast, srcFirst);
}



//
// moveMemoryBackwardsUnsafe
//

[T | not PODType?(T)]
moveMemoryBackwardsUnsafe(destFirst:Pointer[T], destLast:Pointer[T], srcFirst:Pointer[T]) {
    var srcPtr = srcFirst + (destLast - destFirst);
    eachLocationBackwards(destFirst, destLast, x => {
        srcPtr -= 1;
        x <-- moveUnsafe(srcPtr^);
    });
}



//
// resetMemoryUnsafe
//

[T | not PODType?(T)]
resetMemoryUnsafe(first:Pointer[T], last:Pointer[T]) {
    eachLocation(first, last, resetUnsafe);
}



//
// fillMemory, zeroMemory
//

[T]
fillMemory(first:Pointer[T], last:Pointer[T], value:T) {
    var ptr = &value;
    eachLocationWithCleanup(first, last, x => { x <-- ptr^; });
}

[T]
zeroMemory(first:Pointer[T], last:Pointer[T]) {
    fillMemory(first, last, T(0));
}



//
// assignMemory, moveAssignMemory
//

[T, U | not (T == U and PODType?(T)) and CallDefined?(assign, T, U)]
assignMemory(destFirst:Pointer[T], destLast:Pointer[T], srcFirst:Pointer[U]) {
    var srcPtr = srcFirst;
    eachLocation(destFirst, destLast, x => {
        x = srcPtr^;
        srcPtr += 1;
    });
}

[T, U | not (T == U and PODType?(T)) and CallDefined?(assign, T, U)]
overload assignMemory(first:Pointer[T], last:Pointer[T], value:U) {
    eachLocation(first, last, x ref => { x = value; });
}

[T, U | not (T == U and PODType?(T)) and CallDefined?(assign, T, U)]
moveAssignMemory(destFirst:Pointer[T], destLast:Pointer[T], srcFirst:Pointer[U]) {
    var srcPtr = srcFirst;
    eachLocation(destFirst, destLast, x => {
        x = move(srcPtr^);
        srcPtr += 1;
    });
}

[T | not PODType?(T)]
overload moveAssignMemory(destFirst:Pointer[T], destLast:Pointer[T], srcFirst:Pointer[T]) {
    var srcPtr = srcFirst;
    eachLocation(destFirst, destLast, x => {
        swap(x, srcPtr^);
        srcPtr += 1;
    });
}

[T, U | not (T == U and PODType?(T)) and CallDefined?(assign, T, U)]
assignNonoverlappingMemory(destFirst:Pointer[T], destLast:Pointer[T], srcFirst:Pointer[U])
{
    assignMemory(destFirst, destLast, srcFirst);
}

[T, U | not (T == U and PODType?(T)) and CallDefined?(assign, T, U)]
moveAssignNonoverlappingMemory(destFirst:Pointer[T], destLast:Pointer[T], srcFirst:Pointer[U])
{
    moveAssignMemory(destFirst, destLast, srcFirst);
}



//
// eachLocation, eachLocationBackwards, eachLocationWithCleanup
//

[T]
private eachLocation(_first:Pointer[T], _last:Pointer[T], f) {
    var first, last = _first, _last;
    var ptr = first;
    while (ptr != last) {
        f(ptr^);
        ptr += 1;
    }
}

[T]
private eachLocationBackwards(_first:Pointer[T], _last:Pointer[T], f) {
    var first, last = _first, _last;
    var ptr = last;
    while (ptr != first) {
        ptr -= 1;
        f(ptr^);
    }
}

[T]
private eachLocationWithCleanup(_first:Pointer[T], _last:Pointer[T], f) {
    var first, last = _first, _last;
    var ptr = first;
    try {
        while (ptr != last) {
            f(ptr^);
            ptr += 1;
        }
    }
    catch (e) {
        destroyMemory(first, ptr);
        throw e;
    }
}

[T]
private eachLocationBackwardsWithCleanup(_first:Pointer[T], _last:Pointer[T], f) {
    var first, last = _first, _last;
    var ptr = last;
    try {
        while (ptr != first) {
            ptr -= 1;
            f(ptr^);
        }
    }
    catch (e) {
        destroyMemory(ptr+1, last);
        throw e;
    }
}
