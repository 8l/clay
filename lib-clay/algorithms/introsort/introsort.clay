import algorithms.heaps.*;

introSort(a) {
    introSort(begin(a), end(a));
}

overload introSort(first, last) {
    if (first != last) {
        introSortLoop(first, last, log2(last-first)*2);
        finalInsertionSort(first, last);
    }
}

log2(x) {
    var y = SizeT(x);
    var k = 0;
    while (y != 0) {
        k += 1;
        y = shiftRight(y, 1);
    }
    return k - 1;
}

alias threshold = 32;

introSortLoop(first_, last_, depthLimit_) {
    var first, last, depthLimit = first_, last_, depthLimit_;
    while (last - first > threshold) {
        if (depthLimit == 0) {
            partialSort(first, last, last);
            return;
        }
        depthLimit -= 1;
        var cut = unguardedPartitionPivot(first, last);
        introSortLoop(cut+1, last, depthLimit);
        last = cut;
    }
}

unguardedPartitionPivot(first_, last_) {
    var first, last = first_, last_;
    var mid = first + (last - first)/2;
    moveMedianFirst(first, mid, last-1);
    var cut = unguardedPartition(first + 1, last, first^);
    cut -= 1;
    swap(first^, cut^);
    return cut;
}

moveMedianFirst(a_, b_, c_) {
    var a, b, c = a_, b_, c_;
    if (a^ < b^) {
        if (b^ < c^)
            swap(a^, b^);
        else if (a^ < c^)
            swap(a^, c^);
    }
    else if (a^ < c^)
        return;
    else if (b^ < c^)
        swap(a^, c^);
    else
        swap(a^, b^);
}

unguardedPartition(first_, last_, pivot) {
    var first, last = first_, last_;
    while (true) {
        while (first^ < pivot)
            first += 1;
        last -= 1;
        while (pivot < last^)
            last -= 1;
        if (not (first < last))
            break;
        swap(first^, last^);
        first += 1;
    }
    return first;
}

finalInsertionSort(first_, last_) {
    var first, last = first_, last_;
    if (last - first > threshold) {
        insertionSort(first, first + threshold);
        unguardedInsertionSort(first + threshold, last);
    }
    else {
        insertionSort(first, last);
    }
}

insertionSort(a) {
    insertionSort(begin(a), end(a));
}

overload insertionSort(first_, last_) {
    var first, last = first_, last_;
    if (first == last)
        return;
    var i = first + 1;
    while (i != last) {
        if (i^ < first^) {
            var value = move(i^);
            moveBackward(first, i, i+1);
            first^ = move(value);
        }
        else {
            unguardedLinearInsert(i);
        }
        i += 1;
    }
}

unguardedInsertionSort(first_, last_) {
    var first, last = first_, last_;
    var i = first;
    while (i != last) {
        unguardedLinearInsert(i);
        i += 1;
    }
}

unguardedLinearInsert(last_) {
    var last = last_;
    var value = move(last^);
    var next = last;
    next -= 1;
    while (value < next^) {
        last^ = move(next^);
        last = next;
        next -= 1;
    }
    last^ = move(value);
}

moveBackward(first_, last_, newLast_) {
    var first, last, newLast = first_, last_, newLast_;
    var n = last - first;
    while (last != first) {
        last -= 1;
        newLast -= 1;
        newLast^ = move(last^);
    }
}

heapSort(a) {
    heapSort(begin(a), end(a));
}

overload heapSort(first, last) {
    partialSort(first, last, last);
}

partialSort(first_, middle_, last_) {
    var first, middle, last = first_, middle_, last_;
    heapSelect(first, middle, last);
    sortHeap(first, middle);
}

