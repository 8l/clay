

//
// Range
//

record Range[T] {
    first:T;
    last:T;
}



//
// Range - size, index
//

[T]
overload size(a:Range[T]) = SizeT(a.last - a.first);

[T,I | Integer?(I)]
overload index(a:Range[T], i:I) = T(a.first + i);



//
// Range - iteration
//

[T]
overload iterator(r:Range[T]) = r;

[T]
overload hasNext?(r:Range[T]) = r.first < r.last;

[T]
overload next(r:Range[T]) returned:T {
    returned <-- r.first;
    inc(r.first);
}



//
// range procedure
//

procedure range;

overload range(first, last) = Range(first, last);

[A,B | Integer?(A) and Integer?(B)]
overload range(first:A, last:B) =
    Range(toBiggerNumericType(A, B, first),
          toBiggerNumericType(A, B, last));

[I | Integer?(I)]
overload range(first:I, last:I) = Range(first, last);

[I | Integer?(I)]
overload range(last:I) = Range(I(0), last);



//
// CoordinateRange
//

record CoordinateRange[T] {
    first:T;
    last:T;
}



//
// CoordinateRange - size, index
//

[T]
overload size(a:CoordinateRange[T]) = SizeT(a.last - a.first);

[T,I | Integer?(I)]
overload index(a:CoordinateRange[T], i:I) = ref (a.first + i)^;



//
// CoordinateRange - coordinates
//

[T]
overload begin(a:CoordinateRange[T]) = a.first;

[T]
overload end(a:CoordinateRange[T]) = a.last;



//
// CoordinateRange - iteration
//

[T]
overload iterator(r:CoordinateRange[T]) = r;

[T]
overload hasNext?(r:CoordinateRange[T]) = r.first < r.last;


[T]
overload next(r:CoordinateRange[T]) {
    ref obj = r.first^;
    inc(r.first);
    return ref obj;
}
