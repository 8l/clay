import operators.*;
import pointers.*;
import sharedpointers.*;
import sequences.operators.*;

record SequenceHandle[A] {
    inner : Pointer[A];
}

overloadable sequenceHandle;

[A | Sequence?(A)]
overload sequenceHandle(seq:A) = SequenceHandle(&seq);

[A | SizedSequence?(A)]
static overload SizedSequence?(SequenceHandle[A]) = true;

[A | RandomAccessSequence?(A)]
static overload RandomAccessSequence?(SequenceHandle[A]) = true;

[A | LValueSequence?(A)]
static overload LValueSequence?(SequenceHandle[A]) = true;

[A]
static overload SequenceElementType(SequenceHandle[A])
    = SequenceElementType(A);


[A]
overload iterator(seq:SequenceHandle[A]) = iterator(seq.inner^);

[A | SizedSequence?(A)]
overload size(seq:SequenceHandle[A]) = size(seq.inner^);

[A | RandomAccessSequence?(A)]
overload index(seq:SequenceHandle[A], i) = index(seq.inner^, i);

[A | RandomAccessSequence?(A) and LValueSequence?(A)]
overload index(seq:SequenceHandle[A], i) = ref index(seq.inner^, i);
