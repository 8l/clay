
import libc;
import printer.platform.(formatForInt64, formatForUInt64);


//
// printTo
//

procedure printTo;

overload printTo(stream) {
}

overload printTo(stream, a, b, ...rest) {
    static for (x in a, b, ...rest)
        printTo(stream, x);
}



//
// printTo - Bool
//

overload printTo(stream, x:Bool) {
    if (x)
        printTo(stream, "true");
    else
        printTo(stream, "false");
}



//
// printTo - integers, floats, pointers
//

[I | SignedInteger?(I)]
overload printTo(stream, x:I) {
    printWithSprintf(stream, "%d", Int(x));
}

[I | UnsignedInteger?(I)]
overload printTo(stream, x:I) {
    printWithSprintf(stream, "%u", UInt(x));
}

overload printTo(stream, x:Int64) {
    printWithSprintf(stream, formatForInt64, x);
}

overload printTo(stream, x:UInt64) {
    printWithSprintf(stream, formatForUInt64, x);
}

[F | Float?(F)]
overload printTo(stream, x:F) {
    printWithSprintf(stream, "%f", Double(x));
}

[T]
overload printTo(stream, x:Pointer[T]) {
    printWithSprintf(stream, "%p", x);
}

private printWithSprintf(stream, formatString, value) {
    var buf = Array[CChar, 100]();
    libc.sprintf(&buf[0], cstring(formatString), value);
    var n = libc.strlen(&buf[0]);
    var ptr = Pointer[Byte](&buf[0]);
    write(stream, ptr, SizeT(n));
}



//
// printTo - statics
//

[A]
overload printTo(stream, x:Static[A]) {
    printTo(stream, StaticName(x));
}



//
// printTo - enums
//

[E | Enum?(E)]
overload printTo(stream, x:E) {
    printTo(stream, enumName(x));
}



//
// printTo - tuples, records, arrays, vectors
//

[...T]
overload printTo(stream, x:Tuple[...T]) {
    printReprTo(stream, x);
}

[T | Record?(T)]
overload printTo(stream, x:T) {
    printReprTo(stream, x);
}

[T,n]
overload printTo(stream, x:Array[T,n]) {
    printReprTo(stream, x);
}

[T]
overload printTo(stream, x:Vector[T]) {
    printReprTo(stream, x);
}



//
// printTo - variants
//

[T | Variant?(T)]
overload printTo(stream, x:T) {
    printTo(stream, *x);
}



//
// printTo - Char, String?, ContiguousString?
//

overload printTo(stream, x:Char) {
    write(stream, Pointer[Byte](&x), SizeT(1));
}

[S | String?(S)]
overload printTo(stream, x:S) {
    for (c in x)
        writeByte(stream, c);
}

[S | ContiguousString?(S)]
overload printTo(stream, x:S) {
    write(stream, Pointer[Byte](&x[0]), size(x));
}



//
// printTo - SharedPointer
//

[T]
overload printTo(stream, x:SharedPointer[T]) {
    printReprTo(stream, x);
}



//
// printReprTo
//

procedure printReprTo;



//
// printReprTo - Bool, Numeric?, Pointer[T], Static, Enum

overload printReprTo(stream, x:Bool) {
    printTo(stream, x);
}

[T | Numeric?(T)]
overload printReprTo(stream, x:T) {
    printTo(stream, x);
}

[T]
overload printReprTo(stream, x:Pointer[T]) {
    printTo(stream, x);
}

[A]
overload printReprTo(stream, x:Static[A]) {
    printTo(stream, x);
}

[E | Enum?(E)]
overload printReprTo(stream, x:E) {
    printTo(stream, x);
}



//
// printReprTo - tuples
//

[...T]
overload printReprTo(stream, x:Tuple[...T]) {
    printReprValuesTo(stream, ...tupleElements(x));
}



//
// printReprTo - records
//

[T | Record?(T)]
overload printReprTo(stream, x:T) {
    printTo(stream, T);
    printReprValuesTo(stream, ...recordFields(x));
}



//
// printReprValuesTo
//

printReprValuesTo(stream, ...values) {
    printTo(stream, '(');
    var first = true;
    static for (y in ...values) {
        if (first)
            first = false;
        else
            printTo(stream, ", ");
        printReprTo(stream, y);
    }
    printTo(stream, ')');
}



//
// printReprTo - arrays, vectors
//

[T,n]
overload printReprTo(stream, a:Array[T,n]) {
    printSequenceTo(stream, a);
}

[T]
overload printReprTo(stream, a:Vector[T]) {
    printSequenceTo(stream, a);
}

private printSequenceTo(stream, a) {
    printTo(stream, '[');
    for (i, x in enumerated(a)) {
        if (i != 0)
            printTo(stream, ", ");
        printReprTo(stream, x);
    }
    printTo(stream, ']');
}



//
// printReprTo - variants
//

[T | Variant?(T)]
overload printReprTo(stream, x:T) {
    printReprTo(stream, *x);
}



//
// printReprTo - Char, String?
//

overload printReprTo(stream, x:Char) {
    printTo(stream, '\'');
    printTo(stream, x);
    printTo(stream, '\'');
}

[S | String?(S)]
overload printReprTo(stream, x:S) {
    printTo(stream, '"');
    printTo(stream, x);
    printTo(stream, '"');
}



//
// printReprTo - SharedPointer
//

[T]
overload printReprTo(stream, x:SharedPointer[T]) {
    // FIXME: handle cycles
    printTo(stream, "SharedPointer(");
    if (not null?(x))
        printReprTo(stream, x^);
    printTo(stream, ")");
}



//
// print, println, printlnTo
//

print(...x) {
    printTo(stdout, ...x);
}

println(...x) {
    printTo(stdout, ...x, '\n');
}

printlnTo(stream, ...x) {
    printTo(stream, ...x, '\n');
}
