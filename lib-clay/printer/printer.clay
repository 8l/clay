
import libc;
import printer.platform.(formatForInt64, formatForUInt64);


//
// printTo
//

procedure printTo;

overload printTo(stream) {
}

overload printTo(stream, a, b, ...rest) {
    printTo(stream, a);
    printTo(stream, b, ...rest);
}



//
// printTo - Char, String?, ContiguousString?, Bool
//

overload printTo(stream, x:Char) {
    write(stream, Pointer[Byte](&x), SizeT(1));
}

[S | String?(S)]
overload printTo(stream, x:S) {
    for (c in x)
        writeByte(stream, c);
}

[S | ContiguousString?(S)]
overload printTo(stream, x:S) {
    write(stream, Pointer[Byte](&x[0]), size(x));
}

overload printTo(stream, x:Bool) {
    if (x)
        printTo(stream, "true");
    else
        printTo(stream, "false");
}



//
// printTo - integers, floats
//

[I | SignedInteger?(I)]
overload printTo(stream, x:I) {
    printWithSprintf(stream, "%d", Int(x));
}

[I | UnsignedInteger?(I)]
overload printTo(stream, x:I) {
    printWithSprintf(stream, "%u", UInt(x));
}

overload printTo(stream, x:Int64) {
    printWithSprintf(stream, formatForInt64, x);
}

overload printTo(stream, x:UInt64) {
    printWithSprintf(stream, formatForUInt64, x);
}

[F | Float?(F)]
overload printTo(stream, x:F) {
    printWithSprintf(stream, "%f", Double(x));
}

private printWithSprintf(stream, formatString, value) {
    var buf = Array[CChar, 100]();
    libc.sprintf(&buf[0], cstring(formatString), value);
    var n = libc.strlen(&buf[0]);
    var ptr = Pointer[Byte](&buf[0]);
    write(stream, ptr, SizeT(n));
}


//
// printTo - statics
//

[A]
overload printTo(stream, x:Static[A]) {
    printTo(stream, StaticName(A));
}



//
// print, println, printlnTo
//

print(...x) {
    printTo(stdout, ...x);
}

println(...x) {
    printTo(stdout, ...x, '\n');
}

printlnTo(stream, ...x) {
    printTo(stream, ...x, '\n');
}
