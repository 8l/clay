import streams.buffered.*;
import libc;


//
// printTo - print to a stream
//

overloadable printTo;

overload printTo(stream) {
}

overload printTo(stream, a, b, ...) {
    printTo(stream, a);
    printTo(stream, b, ...);
}

overload printTo(stream, x:Char) {
    write(stream, Pointer[Byte](&x), SizeT(1));
}

[S | String?(S)]
overload printTo(stream, x:S) {
    var b = BufferedOutputStream(stream);
    for (c in x)
        writeByte(b, c);
    flush(b);
}

overload printTo(stream, x:String) {
    write(stream, Pointer[Byte](&x[0]), size(x));
}

overload printTo(stream, x:Bool) {
    if (x)
        printTo(stream, "true");
    else
        printTo(stream, "false");
}

[I | SignedInteger?(I)]
overload printTo(stream, x:I) {
    var buf = Array[CChar, 100]();
    libc.sprintf(&buf[0], cstring("%d"), Int(x));
    var n = libc.strlen(&buf[0]);
    var ptr = Pointer[Byte](&buf[0]);
    write(stream, ptr, SizeT(n));
}

[I | UnsignedInteger?(I)]
overload printTo(stream, x:I) {
    var buf = Array[CChar, 100]();
    libc.sprintf(&buf[0], cstring("%u"), UInt(x));
    var n = libc.strlen(&buf[0]);
    var ptr = Pointer[Byte](&buf[0]);
    write(stream, ptr, SizeT(n));
}

[I | SignedInteger?(I) and TypeSize(I) == 8]
overload printTo(stream, x:I) {
    var buf = Array[CChar, 100]();
    libc.sprintf(&buf[0], cstring("%lld"), Int64(x));
    var n = libc.strlen(&buf[0]);
    var ptr = Pointer[Byte](&buf[0]);
    write(stream, ptr, SizeT(n));
}

[I | UnsignedInteger?(I) and TypeSize(I) == 8]
overload printTo(stream, x:I) {
    var buf = Array[CChar, 100]();
    libc.sprintf(&buf[0], cstring("%llu"), UInt64(x));
    var n = libc.strlen(&buf[0]);
    var ptr = Pointer[Byte](&buf[0]);
    write(stream, ptr, SizeT(n));
}

[F | Float?(F)]
overload printTo(stream, x:F) {
    var buf = Array[CChar, 100]();
    libc.sprintf(&buf[0], cstring("%f"), Double(x));
    var n = libc.strlen(&buf[0]);
    var ptr = Pointer[Byte](&buf[0]);
    write(stream, ptr, SizeT(n));
}

[A]
overload printTo(stream, x:Static[A]) {
    printTo(stream, StaticName(A));
}


//
// print, println, printlnTo
//

print(...) {
    printTo(stdout, ...);
}

println(...) {
    printTo(stdout, ..., '\n');
}

printlnTo(stream, ...) {
    printTo(stream, ..., '\n');
}
