
import libc;
import printer.platform.(formatForInt64, formatForUInt64);


//
// printTo
//

procedure printTo;

overload printTo(stream) {
}

overload printTo(stream, a, b, ...rest) {
    static for (x in a, b, ...rest)
        printTo(stream, x);
}



//
// printTo - Bool
//

overload printTo(stream, x:Bool) {
    if (x)
        printTo(stream, "true");
    else
        printTo(stream, "false");
}



//
// printTo - integers, floats, pointers
//

[I | SignedInteger?(I)]
overload printTo(stream, x:I) {
    printWithSprintf(stream, "%d", Int(x));
}

[I | UnsignedInteger?(I)]
overload printTo(stream, x:I) {
    printWithSprintf(stream, "%u", UInt(x));
}

overload printTo(stream, x:Int64) {
    printWithSprintf(stream, formatForInt64, x);
}

overload printTo(stream, x:UInt64) {
    printWithSprintf(stream, formatForUInt64, x);
}

overload printTo(stream, x:Double) {
    printWithSprintf(stream, "%.16g", Double(x));
}
overload printTo(stream, x:Float) {
    printWithSprintf(stream, "%.7g", Double(x));
}

[T]
overload printTo(stream, x:Pointer[T]) {
    printWithSprintf(stream, "%p", x);
}
[I, O]
overload printTo(stream, x:CodePointer[I, O]) {
    printWithSprintf(stream, "%p", x);
}
[CP | CCodePointer?(CP)]
overload printTo(stream, x:CP) {
    printWithSprintf(stream, "%p", x);
}

printWithSprintf(stream, formatString, value) {
    var buf = Array[CChar, 100]();
    libc.sprintf(&buf[0], cstring(formatString), value);
    var n = libc.strlen(&buf[0]);
    var ptr = Pointer[Byte](&buf[0]);
    write(stream, ptr, SizeT(n));
}



//
// printTo - statics
//

[A]
overload printTo(stream, x:Static[A]) {
    printTo(stream, StaticName(x));
}

[A | Identifier?(A)]
overload printTo(stream, x:Static[A]) {
    printTo(stream, '#', StaticName(x));
}



//
// printTo - enums
//

[E | Enum?(E)]
overload printTo(stream, x:E) {
    printTo(stream, enumName(x));
}



//
// printTo - tuples, records, arrays, vectors
//

[...T]
overload printTo(stream, x:Tuple[...T]) {
    printReprTo(stream, x);
}

[T | Record?(T)]
overload printTo(stream, x:T) {
    printReprTo(stream, x);
}

[T,n]
overload printTo(stream, x:Array[T,n]) {
    printReprTo(stream, x);
}

[T]
overload printTo(stream, x:Vector[T]) {
    printReprTo(stream, x);
}



//
// printTo - variants
//

[T | Variant?(T)]
overload printTo(stream, x:T) {
    printTo(stream, *x);
}



//
// printTo - Char, String?, ContiguousString?
//

overload printTo(stream, x:Char) {
    write(stream, Pointer[Byte](&x), SizeT(1));
}

[S | String?(S)]
overload printTo(stream, x:S) {
    for (c in x)
        writeByte(stream, c);
}

[S | ContiguousString?(S)]
overload printTo(stream, x:S) {
    write(stream, x);
}



//
// printTo - SharedPointer
//

[T]
overload printTo(stream, x:SharedPointer[T]) {
    printReprTo(stream, x);
}



//
// printTo - reference types
//

[T | ReferenceType?(T)]
overload printTo(stream, x:T) {
    printReprTo(stream, x);
}



//
// printTo - HashMap
//

[K,V]
overload printTo(stream, x:HashMap[K,V]) {
    printReprTo(stream, x);
}



//
// printReprTo
//

procedure printReprTo;



//
// printReprTo - Bool, Numeric?, Pointer[T], Static, Enum

overload printReprTo(stream, x:Bool) {
    printTo(stream, x);
}

[T | Numeric?(T)]
overload printReprTo(stream, x:T) {
    printTo(stream, x);
}

[T]
overload printReprTo(stream, x:Pointer[T]) {
    printTo(stream, x);
}

[A]
overload printReprTo(stream, x:Static[A]) {
    printTo(stream, x);
}

[E | Enum?(E)]
overload printReprTo(stream, x:E) {
    printTo(stream, x);
}



//
// printReprTo - tuples
//

[...T]
overload printReprTo(stream, x:Tuple[...T]) {
    printReprValuesTo(stream, ...tupleElements(x));
}



//
// printReprTo - records
//

[T | Record?(T)]
overload printReprTo(stream, x:T) {
    printTo(stream, T);
    printReprValuesTo(stream, ...recordFields(x));
}



//
// printReprValuesTo, printReprElementsTo
//

printReprValuesTo(stream, ...values) {
    printTo(stream, '(');
    var first = true;
    static for (y in ...values) {
        if (first)
            first = false;
        else
            printTo(stream, ", ");
        printReprTo(stream, y);
    }
    printTo(stream, ')');
}

printReprElementsTo(stream, seq) {
    interleave(seq,
        () => { printTo(stream, ", "); },
        x  => { printReprTo(stream, x); },
    );
}



//
// printReprTo - arrays, vectors
//

[T,n]
overload printReprTo(stream, a:Array[T,n]) {
    printSequenceTo(stream, a);
}

[T]
overload printReprTo(stream, a:Vector[T]) {
    printSequenceTo(stream, a);
}

private printSequenceTo(stream, a) {
    printTo(stream, '[');
    printReprElementsTo(stream, a);
    printTo(stream, ']');
}



//
// printReprTo - variants
//

[T | Variant?(T)]
overload printReprTo(stream, x:T) {
    printReprTo(stream, *x);
}



//
// printReprTo - Char, String?
//

overload printReprTo(stream, x:Char) {
    printTo(stream, '\'');
    printTo(stream, x);
    printTo(stream, '\'');
}

[S | String?(S)]
overload printReprTo(stream, x:S) {
    printTo(stream, '"');
    printTo(stream, x);
    printTo(stream, '"');
}



//
// printReprTo - SharedPointer
//

[T]
overload printReprTo(stream, x:SharedPointer[T]) {
    // FIXME: handle cycles
    printTo(stream, "SharedPointer(");
    if (not null?(x))
        printReprTo(stream, x^);
    printTo(stream, ")");
}



//
// printReprTo - reference types
//

[T | ReferenceType?(T)]
overload printReprTo(stream, x:T) {
    // FIXME: handle cycles
    if (null?(x)) {
        printTo(stream, "null");
        return;
    }
    printTo(stream, T);
    printReprValuesTo(stream, ...referenceTypeFields(x));
}



//
// printReprTo - HashMap
//

[K, V]
overload printReprTo(stream, x:HashMap[K,V]) {
    printTo(stream, HashMap[K,V], '(');
    var first = true;
    for (k, v in items(x)) {
        if (first)
            first = false;
        else
            printTo(stream, ", ");
        printReprValuesTo(stream, k, v);
    }
    printTo(stream, ')');
}


//
// printReprTo - UniqueValue
//

[T]
overload printReprTo(stream, v:UniqueValue[T]) {
    if (null?(v))
        printTo(stream, UniqueValue[T], "()");
    else
        printTo(stream, UniqueValue[T], "(", v^, ")");
}


//
// print, println, printlnTo
//

print(...x) {
    printTo(stdout, ...x);
}

println(...x) {
    printTo(stdout, ...x, '\n');
}

printlnTo(stream, ...x) {
    printTo(stream, ...x, '\n');
}



//
// printString, printlnString
//

printString(...x) {
    var s = String();
    printTo(s, ...x);
    return move(s);
}

printlnString(...x) {
    var s = String();
    printlnTo(s, ...x);
    return move(s);
}



//
// printBuffer
//

[S | ByteBuffer?(S)]
printBuffer(buf:S, ...args) {
    var bv = BufferVector(begin(buf), end(buf));
    printTo(bv, ...args);
    return size(bv);
}



//
// observe, observeTo, observeCall -- log intermediate values and forward them
//

observeTo(stream, forward ...x) {
    var captured = captureValues(...x);
    printlnTo(stream, "[observed: ", ...weaveValues(", ", ...capturedRefs(captured)), "]");
    flush(stream);
    return forward ...forwardValues(captured);
}
[tag | Identifier?(tag)]
overload observeTo(stream, static tag, forward ...x) {
    var captured = captureValues(...x);
    printlnTo(stream, "[observed ", tag, ": ", ...weaveValues(", ", ...capturedRefs(captured)), "]");
    flush(stream);
    return forward ...forwardValues(captured);
}
observe(forward ...x) = forward ...observeTo(stderr, ...x);

observeCallTo(stream, forward fn, forward ...args) {
    var capturedFn = captureValue(fn);
    var capturedArgs = captureValues(...args);
    printlnTo(stream, "[observed call ", capturedRef(capturedFn), "(", ...weaveValues(", ", ...capturedRefs(capturedArgs)), ")...");
    flush(stream);
    try {
        var capturedReturn = captureValues(...forwardValue(capturedFn)(...forwardValues(capturedArgs)));
        printlnTo(stream, "  ...returned ", ...capturedRefs(capturedReturn), "]");
        flush(stream);
        return forward ...forwardValues(capturedReturn);
    } catch (ex) {
        printlnTo(stream, "  ...threw ", ex, "]");
        flush(stream);
        throw ex;
    }
}

observeCall(forward fn, forward ...args)
    = forward ...observeCallTo(stderr, fn, ...args);
