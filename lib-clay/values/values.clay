


//
// eachValue, mapValues, foldValues, weaveValues,
// takeValues, dropValues, countValues
//

procedure eachValue;
overload eachValue(fn, forward x, forward ...xs) { fn(x); eachValue(fn, ...xs); }
overload eachValue(fn) { }

procedure mapValues;
overload mapValues(fn, forward x, forward ...xs)
    = forward ...fn(x), ...mapValues(fn, ...xs);
overload mapValues(fn) = ;

procedure foldValues;
overload foldValues(fn, forward x, forward ...xs)
    = fn(x, foldValues(fn, ...xs));
overload foldValues(fn, forward x) = forward x;

procedure weaveValues;
overload weaveValues(between, forward x, forward ...xs)
    = forward x, between, ...weaveValues(between, ...xs);
overload weaveValues(between, forward x, forward y)
    = forward x, between, y;
overload weaveValues(between, forward x) = forward x;
overload weaveValues(between) = ;

procedure takeValues;
[i] overload takeValues(static i, forward x, forward ...xs)
    = forward x, ...takeValues(static i-1, ...xs);
[i | i == 0] overload takeValues(static i, forward ...xs) = ;
[i] overload takeValues(static i) = ;

procedure dropValues;
[i] overload dropValues(static i, forward x, forward ...xs)
    = forward ...dropValues(static i-1, ...xs);
[i | i == 0] overload dropValues(static i, forward ...xs) = forward ...xs;
[i] overload dropValues(static i) = ;

procedure countValues;
overload countValues() = 0;
overload countValues(x, ...xs) = 1 + countValues(...xs);



//
// capture/forward values
// 

// captureValue, forwardValue, capturedRef

private record CapturedLValue[T] {
    ptr : Pointer[T];
}

procedure captureValue;
overload captureValue(rvalue x) = move(x);
overload captureValue(lvalue x) = CapturedLValue(&x);

procedure forwardValue;
overload forwardValue(x) = move(x);
[T] overload forwardValue(x:CapturedLValue[T]) = ref x.ptr^;

procedure capturedRef;
overload capturedRef(x) = ref x;
[T] overload capturedRef(x:CapturedLValue[T]) = ref x.ptr^;

// captureValues, forwardValues, capturedRefs

captureValues(forward ...args) = Tuple(...mapValues(captureValue, ...args));

[...T]
forwardValues(x:Tuple[...T]) =
    forward ...mapValues(forwardValue, ...unpackTupleRef(x));

[...T]
capturedRefs(x:Tuple[...T]) =
    forward ...mapValues(capturedRef, ...unpackTupleRef(x));
