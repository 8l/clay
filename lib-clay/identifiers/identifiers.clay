IdentifierChars(identifier)
    = ..mapValues(
        (#n) => IdentifierSlice(identifier, n, #(n+1)),
        ..staticIntegers(#IdentifierSize(identifier))
    );

IdentifierStartsWith?(identifier, startsWith) = false;
[identifier, startsWith | IdentifierSize(identifier) >= IdentifierSize(startsWith)]
overload IdentifierStartsWith?(#identifier, #startsWith)
      = IdentifierSlice(identifier, #0, #IdentifierSize(startsWith))
        == startsWith;

IdentifierEndsWith?(identifier, endsWith) = false;
[identifier, endsWith | IdentifierSize(identifier) >= IdentifierSize(endsWith)]
overload IdentifierEndsWith?(#identifier, #endsWith)
    = IdentifierSlice(identifier,
          #(IdentifierSize(identifier) - IdentifierSize(endsWith)),
          #IdentifierSize(identifier)
      ) == endsWith;


[identifier, sub, start |
    StringLiteral?(identifier) and StringLiteral?(sub)
]
IdentifierFind(#identifier, #sub, #start)
    = IdentifierFind(identifier, sub, #(start + 1));

[identifier, sub, start |
    StringLiteral?(identifier) and StringLiteral?(sub)
    and IdentifierSize(identifier) < IdentifierSize(sub) + start
]
overload IdentifierFind(#identifier, #sub, #start) = -1;

[identifier, sub, start |
    StringLiteral?(identifier) and StringLiteral?(sub)
    and IdentifierSize(identifier) >= IdentifierSize(sub) + start
    and IdentifierSlice(identifier, #start, #(start + IdentifierSize(sub)))
        == sub
]
overload IdentifierFind(#identifier, #sub, #start) = start;

overload IdentifierFind(identifier, sub) = IdentifierFind(identifier, sub, #0);

IdentifierCapitalize(i)
    = IdentifierConcat(
        IdentifierUpperChar(IdentifierSlice(i, #0, #1)),
        IdentifierSlice(i, #1, #IdentifierSize(i))
    );

IdentifierDecapitalize(i)
    = IdentifierConcat(
        IdentifierLowerChar(IdentifierSlice(i, #0, #1)),
        IdentifierSlice(i, #1, #IdentifierSize(i))
    );

[i | StringLiteral?(i) and IdentifierSize(i) == 1]
IdentifierUpperChar(#i) = i;

overload IdentifierUpperChar(#"a") = "A";
overload IdentifierUpperChar(#"b") = "B";
overload IdentifierUpperChar(#"c") = "C";
overload IdentifierUpperChar(#"d") = "D";
overload IdentifierUpperChar(#"e") = "E";
overload IdentifierUpperChar(#"f") = "F";
overload IdentifierUpperChar(#"g") = "G";
overload IdentifierUpperChar(#"h") = "H";
overload IdentifierUpperChar(#"i") = "I";
overload IdentifierUpperChar(#"j") = "J";
overload IdentifierUpperChar(#"k") = "K";
overload IdentifierUpperChar(#"l") = "L";
overload IdentifierUpperChar(#"m") = "M";
overload IdentifierUpperChar(#"n") = "N";
overload IdentifierUpperChar(#"o") = "O";
overload IdentifierUpperChar(#"p") = "P";
overload IdentifierUpperChar(#"q") = "Q";
overload IdentifierUpperChar(#"r") = "R";
overload IdentifierUpperChar(#"s") = "S";
overload IdentifierUpperChar(#"t") = "T";
overload IdentifierUpperChar(#"u") = "U";
overload IdentifierUpperChar(#"v") = "V";
overload IdentifierUpperChar(#"w") = "W";
overload IdentifierUpperChar(#"x") = "X";
overload IdentifierUpperChar(#"y") = "Y";
overload IdentifierUpperChar(#"z") = "Z";

[i | StringLiteral?(i) and IdentifierSize(i) == 1]
IdentifierLowerChar(#i) = i;

overload IdentifierLowerChar(#"A") = "a";
overload IdentifierLowerChar(#"B") = "b";
overload IdentifierLowerChar(#"C") = "c";
overload IdentifierLowerChar(#"D") = "d";
overload IdentifierLowerChar(#"E") = "e";
overload IdentifierLowerChar(#"F") = "f";
overload IdentifierLowerChar(#"G") = "g";
overload IdentifierLowerChar(#"H") = "h";
overload IdentifierLowerChar(#"I") = "i";
overload IdentifierLowerChar(#"J") = "j";
overload IdentifierLowerChar(#"K") = "k";
overload IdentifierLowerChar(#"L") = "l";
overload IdentifierLowerChar(#"M") = "m";
overload IdentifierLowerChar(#"N") = "n";
overload IdentifierLowerChar(#"O") = "o";
overload IdentifierLowerChar(#"P") = "p";
overload IdentifierLowerChar(#"Q") = "q";
overload IdentifierLowerChar(#"R") = "r";
overload IdentifierLowerChar(#"S") = "s";
overload IdentifierLowerChar(#"T") = "t";
overload IdentifierLowerChar(#"U") = "u";
overload IdentifierLowerChar(#"V") = "v";
overload IdentifierLowerChar(#"W") = "w";
overload IdentifierLowerChar(#"X") = "x";
overload IdentifierLowerChar(#"Y") = "y";
overload IdentifierLowerChar(#"Z") = "z";

define ident;

overload ident(..xx) = IdentifierConcat(..mapValues(ident, ..xx));

[x]
overload ident(#x) = IdentifierStaticName(#x);
[i | StringLiteral?(i)]
overload ident(#i) = i;

overload ident() = "";

