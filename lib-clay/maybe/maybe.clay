
//
// Maybe[T]
//

variant Maybe[T] = Nothing | T;

record Nothing ();



//
// constructors
//

[T]
overload Maybe(x:T) = Maybe[T](x);

[T]
overload Maybe[T]() = Maybe[T](Nothing());

nothing(T) = Maybe[T]();


//
// nothing?
//

nothing?(x) = variantIs?(x, Nothing);


//
// maybe function
//

private procedure maybeValue;
overload maybeValue(forward x, thenFn, ...elseFn) = forward ...thenFn(x);
overload maybeValue(forward n: Nothing, thenFn, elseFn) = forward ...elseFn();
overload maybeValue(forward n: Nothing, thenFn) { }

maybe(forward m, thenFn, forward ...elseFn)
    = forward ...maybeValue(*m, thenFn, ...elseFn);

record ValueMissing ();
instance Exception = ValueMissing;

//
// require function
//

require(forward m, fn) = forward ...maybe(m, fn, () => { throw ValueMissing(); });

