// Auto-Generated by BindingsGenerator

import types.*;
import operators.*;
import numbers.*;
import pointers.*;

private static OpaquePointer = RawPointer;
private static UnknownType = Int;
private static AUnionType = Int;


static __gnuc_va_list = Int;

static va_list = Int;

static DWORD = CULong;

static WINBOOL = Int;

static PWINBOOL = Pointer[Int];

static LPWINBOOL = Pointer[Int];

static BOOL = Int;

static BYTE = CUChar;

static PBOOL = Pointer[Int];

static LPBOOL = Pointer[Int];

static WORD = UShort;

static FLOAT = Float;

static PFLOAT = Pointer[Float];

static PBYTE = Pointer[CUChar];

static LPBYTE = Pointer[CUChar];

static PINT = Pointer[Int];

static LPINT = Pointer[Int];

static PWORD = Pointer[UShort];

static LPWORD = Pointer[UShort];

static LPLONG = Pointer[CLong];

static PDWORD = Pointer[CULong];

static LPDWORD = Pointer[CULong];

static PCVOID = RawPointer;

static LPCVOID = RawPointer;

static INT = Int;

static UINT = UInt;

static PUINT = Pointer[UInt];

static LPUINT = Pointer[UInt];

static size_t = UInt;

static wchar_t = UShort;

external memchr(
    argument0 : RawPointer,
    argument1 : Int,
    argument2 : UInt) : RawPointer;

external memcmp(
    argument0 : RawPointer,
    argument1 : RawPointer,
    argument2 : UInt) : Int;

external memcpy(
    argument0 : RawPointer,
    argument1 : RawPointer,
    argument2 : UInt) : RawPointer;

external memmove(
    argument0 : RawPointer,
    argument1 : RawPointer,
    argument2 : UInt) : RawPointer;

external memset(
    argument0 : RawPointer,
    argument1 : Int,
    argument2 : UInt) : RawPointer;

external strcat(
    argument0 : Pointer[CChar],
    argument1 : Pointer[CChar]) : Pointer[CChar];

external strchr(
    argument0 : Pointer[CChar],
    argument1 : Int) : Pointer[CChar];

external strcmp(
    argument0 : Pointer[CChar],
    argument1 : Pointer[CChar]) : Int;

external strcoll(
    argument0 : Pointer[CChar],
    argument1 : Pointer[CChar]) : Int;

external strcpy(
    argument0 : Pointer[CChar],
    argument1 : Pointer[CChar]) : Pointer[CChar];

external strcspn(
    argument0 : Pointer[CChar],
    argument1 : Pointer[CChar]) : UInt;

external strerror(
    argument0 : Int) : Pointer[CChar];

external strlen(
    argument0 : Pointer[CChar]) : UInt;

external strncat(
    argument0 : Pointer[CChar],
    argument1 : Pointer[CChar],
    argument2 : UInt) : Pointer[CChar];

external strncmp(
    argument0 : Pointer[CChar],
    argument1 : Pointer[CChar],
    argument2 : UInt) : Int;

external strncpy(
    argument0 : Pointer[CChar],
    argument1 : Pointer[CChar],
    argument2 : UInt) : Pointer[CChar];

external strpbrk(
    argument0 : Pointer[CChar],
    argument1 : Pointer[CChar]) : Pointer[CChar];

external strrchr(
    argument0 : Pointer[CChar],
    argument1 : Int) : Pointer[CChar];

external strspn(
    argument0 : Pointer[CChar],
    argument1 : Pointer[CChar]) : UInt;

external strstr(
    argument0 : Pointer[CChar],
    argument1 : Pointer[CChar]) : Pointer[CChar];

external strtok(
    argument0 : Pointer[CChar],
    argument1 : Pointer[CChar]) : Pointer[CChar];

external strxfrm(
    argument0 : Pointer[CChar],
    argument1 : Pointer[CChar],
    argument2 : UInt) : UInt;

external _strerror(
    argument0 : Pointer[CChar]) : Pointer[CChar];

external _memccpy(
    argument0 : RawPointer,
    argument1 : RawPointer,
    argument2 : Int,
    argument3 : UInt) : RawPointer;

external _memicmp(
    argument0 : RawPointer,
    argument1 : RawPointer,
    argument2 : UInt) : Int;

external _strdup(
    argument0 : Pointer[CChar]) : Pointer[CChar];

external _strcmpi(
    argument0 : Pointer[CChar],
    argument1 : Pointer[CChar]) : Int;

external _stricmp(
    argument0 : Pointer[CChar],
    argument1 : Pointer[CChar]) : Int;

external _stricoll(
    argument0 : Pointer[CChar],
    argument1 : Pointer[CChar]) : Int;

external _strlwr(
    argument0 : Pointer[CChar]) : Pointer[CChar];

external _strnicmp(
    argument0 : Pointer[CChar],
    argument1 : Pointer[CChar],
    argument2 : UInt) : Int;

external _strnset(
    argument0 : Pointer[CChar],
    argument1 : Int,
    argument2 : UInt) : Pointer[CChar];

external _strrev(
    argument0 : Pointer[CChar]) : Pointer[CChar];

external _strset(
    argument0 : Pointer[CChar],
    argument1 : Int) : Pointer[CChar];

external _strupr(
    argument0 : Pointer[CChar]) : Pointer[CChar];

external _swab(
    argument0 : Pointer[CChar],
    argument1 : Pointer[CChar],
    argument2 : UInt) : Void;

external _strncoll(
    argument0 : Pointer[CChar],
    argument1 : Pointer[CChar],
    argument2 : UInt) : Int;

external _strnicoll(
    argument0 : Pointer[CChar],
    argument1 : Pointer[CChar],
    argument2 : UInt) : Int;

external memccpy(
    argument0 : RawPointer,
    argument1 : RawPointer,
    argument2 : Int,
    argument3 : UInt) : RawPointer;

external memicmp(
    argument0 : RawPointer,
    argument1 : RawPointer,
    argument2 : UInt) : Int;

external strdup(
    argument0 : Pointer[CChar]) : Pointer[CChar];

external strcmpi(
    argument0 : Pointer[CChar],
    argument1 : Pointer[CChar]) : Int;

external stricmp(
    argument0 : Pointer[CChar],
    argument1 : Pointer[CChar]) : Int;

external strcasecmp(
    argument0 : Pointer[CChar],
    argument1 : Pointer[CChar]) : Int;

external stricoll(
    argument0 : Pointer[CChar],
    argument1 : Pointer[CChar]) : Int;

external strlwr(
    argument0 : Pointer[CChar]) : Pointer[CChar];

external strnicmp(
    argument0 : Pointer[CChar],
    argument1 : Pointer[CChar],
    argument2 : UInt) : Int;

external strncasecmp(
    argument0 : Pointer[CChar],
    argument1 : Pointer[CChar],
    argument2 : UInt) : Int;

external strnset(
    argument0 : Pointer[CChar],
    argument1 : Int,
    argument2 : UInt) : Pointer[CChar];

external strrev(
    argument0 : Pointer[CChar]) : Pointer[CChar];

external strset(
    argument0 : Pointer[CChar],
    argument1 : Int) : Pointer[CChar];

external strupr(
    argument0 : Pointer[CChar]) : Pointer[CChar];

external swab(
    argument0 : Pointer[CChar],
    argument1 : Pointer[CChar],
    argument2 : UInt) : Void;

external wcscat(
    argument0 : Pointer[UShort],
    argument1 : Pointer[UShort]) : Pointer[UShort];

external wcschr(
    argument0 : Pointer[UShort],
    argument1 : UShort) : Pointer[UShort];

external wcscmp(
    argument0 : Pointer[UShort],
    argument1 : Pointer[UShort]) : Int;

external wcscoll(
    argument0 : Pointer[UShort],
    argument1 : Pointer[UShort]) : Int;

external wcscpy(
    argument0 : Pointer[UShort],
    argument1 : Pointer[UShort]) : Pointer[UShort];

external wcscspn(
    argument0 : Pointer[UShort],
    argument1 : Pointer[UShort]) : UInt;

external wcslen(
    argument0 : Pointer[UShort]) : UInt;

external wcsncat(
    argument0 : Pointer[UShort],
    argument1 : Pointer[UShort],
    argument2 : UInt) : Pointer[UShort];

external wcsncmp(
    argument0 : Pointer[UShort],
    argument1 : Pointer[UShort],
    argument2 : UInt) : Int;

external wcsncpy(
    argument0 : Pointer[UShort],
    argument1 : Pointer[UShort],
    argument2 : UInt) : Pointer[UShort];

external wcspbrk(
    argument0 : Pointer[UShort],
    argument1 : Pointer[UShort]) : Pointer[UShort];

external wcsrchr(
    argument0 : Pointer[UShort],
    argument1 : UShort) : Pointer[UShort];

external wcsspn(
    argument0 : Pointer[UShort],
    argument1 : Pointer[UShort]) : UInt;

external wcsstr(
    argument0 : Pointer[UShort],
    argument1 : Pointer[UShort]) : Pointer[UShort];

external wcstok(
    argument0 : Pointer[UShort],
    argument1 : Pointer[UShort]) : Pointer[UShort];

external wcsxfrm(
    argument0 : Pointer[UShort],
    argument1 : Pointer[UShort],
    argument2 : UInt) : UInt;

external _wcsdup(
    argument0 : Pointer[UShort]) : Pointer[UShort];

external _wcsicmp(
    argument0 : Pointer[UShort],
    argument1 : Pointer[UShort]) : Int;

external _wcsicoll(
    argument0 : Pointer[UShort],
    argument1 : Pointer[UShort]) : Int;

external _wcslwr(
    argument0 : Pointer[UShort]) : Pointer[UShort];

external _wcsnicmp(
    argument0 : Pointer[UShort],
    argument1 : Pointer[UShort],
    argument2 : UInt) : Int;

external _wcsnset(
    argument0 : Pointer[UShort],
    argument1 : UShort,
    argument2 : UInt) : Pointer[UShort];

external _wcsrev(
    argument0 : Pointer[UShort]) : Pointer[UShort];

external _wcsset(
    argument0 : Pointer[UShort],
    argument1 : UShort) : Pointer[UShort];

external _wcsupr(
    argument0 : Pointer[UShort]) : Pointer[UShort];

external _wcsncoll(
    argument0 : Pointer[UShort],
    argument1 : Pointer[UShort],
    argument2 : UInt) : Int;

external _wcsnicoll(
    argument0 : Pointer[UShort],
    argument1 : Pointer[UShort],
    argument2 : UInt) : Int;

external wcscmpi(
    __ws1 : Pointer[UShort],
    __ws2 : Pointer[UShort]) : Int;

external wcsdup(
    argument0 : Pointer[UShort]) : Pointer[UShort];

external wcsicmp(
    argument0 : Pointer[UShort],
    argument1 : Pointer[UShort]) : Int;

external wcsicoll(
    argument0 : Pointer[UShort],
    argument1 : Pointer[UShort]) : Int;

external wcslwr(
    argument0 : Pointer[UShort]) : Pointer[UShort];

external wcsnicmp(
    argument0 : Pointer[UShort],
    argument1 : Pointer[UShort],
    argument2 : UInt) : Int;

external wcsnset(
    argument0 : Pointer[UShort],
    argument1 : UShort,
    argument2 : UInt) : Pointer[UShort];

external wcsrev(
    argument0 : Pointer[UShort]) : Pointer[UShort];

external wcsset(
    argument0 : Pointer[UShort],
    argument1 : UShort) : Pointer[UShort];

external wcsupr(
    argument0 : Pointer[UShort]) : Pointer[UShort];

static CHAR = CChar;

static SHORT = Short;

static LONG = CLong;

static CCHAR = CChar;

static PCCHAR = Pointer[CChar];

static UCHAR = CUChar;

static PUCHAR = Pointer[CUChar];

static USHORT = UShort;

static PUSHORT = Pointer[UShort];

static ULONG = CULong;

static PULONG = Pointer[CULong];

static PSZ = Pointer[CChar];

static PVOID = RawPointer;

static LPVOID = RawPointer;

static PVOID64 = RawPointer;

static WCHAR = UShort;

static PWCHAR = Pointer[UShort];

static LPWCH = Pointer[UShort];

static PWCH = Pointer[UShort];

static NWPSTR = Pointer[UShort];

static LPWSTR = Pointer[UShort];

static PWSTR = Pointer[UShort];

static LPCWCH = Pointer[UShort];

static PCWCH = Pointer[UShort];

static LPCWSTR = Pointer[UShort];

static PCWSTR = Pointer[UShort];

static PCHAR = Pointer[CChar];

static LPCH = Pointer[CChar];

static PCH = Pointer[CChar];

static NPSTR = Pointer[CChar];

static LPSTR = Pointer[CChar];

static PSTR = Pointer[CChar];

static LPCCH = Pointer[CChar];

static PCSTR = Pointer[CChar];

static LPCSTR = Pointer[CChar];

static TCHAR = CChar;

static _TCHAR = CChar;

static TBYTE = CChar;

static PTCH = Pointer[CChar];

static PTBYTE = Pointer[CChar];

static LPTCH = Pointer[CChar];

static PTSTR = Pointer[CChar];

static LPTSTR = Pointer[CChar];

static LP = Pointer[CChar];

static PTCHAR = Pointer[CChar];

static LPCTSTR = Pointer[CChar];

static PSHORT = Pointer[Short];

static PLONG = Pointer[CLong];

static HANDLE = RawPointer;

static PHANDLE = Pointer[HANDLE];

static LPHANDLE = Pointer[HANDLE];

static LCID = CULong;

static PLCID = PDWORD;

static LANGID = UShort;

static LONGLONG = Int64;

static DWORDLONG = UInt64;

static PLONGLONG = Pointer[Int64];

static PDWORDLONG = Pointer[UInt64];

static ULONGLONG = UInt64;

static PULONGLONG = Pointer[UInt64];

static USN = Int64;

static BOOLEAN = CUChar;

static PBOOLEAN = Pointer[CUChar];

static FCHAR = CUChar;

static FSHORT = UShort;

static FLONG = CULong;

static LONG32 = Int;

static PLONG32 = Pointer[Int];

static INT32 = Int;

static PINT32 = Pointer[Int];

static ULONG32 = UInt;

static PULONG32 = Pointer[UInt];

static DWORD32 = UInt;

static PDWORD32 = Pointer[UInt];

static UINT32 = UInt;

static PUINT32 = Pointer[UInt];

static INT_PTR = Int;

static PINT_PTR = Pointer[Int];

static UINT_PTR = UInt;

static PUINT_PTR = Pointer[UInt];

static LONG_PTR = CLong;

static PLONG_PTR = Pointer[CLong];

static ULONG_PTR = CULong;

static PULONG_PTR = Pointer[CULong];

static UHALF_PTR = UShort;

static PUHALF_PTR = Pointer[UShort];

static HALF_PTR = Short;

static PHALF_PTR = Pointer[Short];

static HANDLE_PTR = CULong;

static SIZE_T = CULong;

static PSIZE_T = Pointer[CULong];

static SSIZE_T = CLong;

static PSSIZE_T = Pointer[CLong];

static DWORD_PTR = CULong;

static PDWORD_PTR = Pointer[CULong];

static LONG64 = Int64;

static PLONG64 = Pointer[Int64];

static INT64 = Int64;

static PINT64 = Pointer[Int64];

static ULONG64 = UInt64;

static PULONG64 = Pointer[UInt64];

static DWORD64 = UInt64;

static PDWORD64 = Pointer[UInt64];

static UINT64 = UInt64;

static PUINT64 = Pointer[UInt64];

static ACCESS_MASK = CULong;

static PACCESS_MASK = Pointer[CULong];

record _GUID {
    Data1 : CULong;
    Data2 : UShort;
    Data3 : UShort;
    Data4 : Array[CUChar,8];
}

static GUID = _GUID;

static REFGUID = Pointer[_GUID];

static LPGUID = Pointer[_GUID];

record _GENERIC_MAPPING {
    GenericRead : CULong;
    GenericWrite : CULong;
    GenericExecute : CULong;
    GenericAll : CULong;
}

static GENERIC_MAPPING = _GENERIC_MAPPING;

static PGENERIC_MAPPING = Pointer[_GENERIC_MAPPING];

record _ACE_HEADER {
    AceType : CUChar;
    AceFlags : CUChar;
    AceSize : UShort;
}

static ACE_HEADER = _ACE_HEADER;

static PACE_HEADER = Pointer[_ACE_HEADER];

record _ACCESS_ALLOWED_ACE {
    Header : ACE_HEADER;
    Mask : CULong;
    SidStart : CULong;
}

static ACCESS_ALLOWED_ACE = _ACCESS_ALLOWED_ACE;

static PACCESS_ALLOWED_ACE = Pointer[_ACCESS_ALLOWED_ACE];

record _ACCESS_DENIED_ACE {
    Header : ACE_HEADER;
    Mask : CULong;
    SidStart : CULong;
}

static ACCESS_DENIED_ACE = _ACCESS_DENIED_ACE;

static PACCESS_DENIED_ACE = Pointer[_ACCESS_DENIED_ACE];

record _SYSTEM_AUDIT_ACE {
    Header : ACE_HEADER;
    Mask : CULong;
    SidStart : CULong;
}

static SYSTEM_AUDIT_ACE = _SYSTEM_AUDIT_ACE;

static PSYSTEM_AUDIT_ACE = Pointer[SYSTEM_AUDIT_ACE];

record _SYSTEM_ALARM_ACE {
    Header : ACE_HEADER;
    Mask : CULong;
    SidStart : CULong;
}

static SYSTEM_ALARM_ACE = _SYSTEM_ALARM_ACE;

static PSYSTEM_ALARM_ACE = Pointer[_SYSTEM_ALARM_ACE];

record _ACCESS_ALLOWED_OBJECT_ACE {
    Header : ACE_HEADER;
    Mask : CULong;
    Flags : CULong;
    ObjectType : GUID;
    InheritedObjectType : GUID;
    SidStart : CULong;
}

static ACCESS_ALLOWED_OBJECT_ACE = _ACCESS_ALLOWED_OBJECT_ACE;

static PACCESS_ALLOWED_OBJECT_ACE = Pointer[_ACCESS_ALLOWED_OBJECT_ACE];

record _ACCESS_DENIED_OBJECT_ACE {
    Header : ACE_HEADER;
    Mask : CULong;
    Flags : CULong;
    ObjectType : GUID;
    InheritedObjectType : GUID;
    SidStart : CULong;
}

static ACCESS_DENIED_OBJECT_ACE = _ACCESS_DENIED_OBJECT_ACE;

static PACCESS_DENIED_OBJECT_ACE = Pointer[_ACCESS_DENIED_OBJECT_ACE];

record _SYSTEM_AUDIT_OBJECT_ACE {
    Header : ACE_HEADER;
    Mask : CULong;
    Flags : CULong;
    ObjectType : GUID;
    InheritedObjectType : GUID;
    SidStart : CULong;
}

static SYSTEM_AUDIT_OBJECT_ACE = _SYSTEM_AUDIT_OBJECT_ACE;

static PSYSTEM_AUDIT_OBJECT_ACE = Pointer[_SYSTEM_AUDIT_OBJECT_ACE];

record _SYSTEM_ALARM_OBJECT_ACE {
    Header : ACE_HEADER;
    Mask : CULong;
    Flags : CULong;
    ObjectType : GUID;
    InheritedObjectType : GUID;
    SidStart : CULong;
}

static SYSTEM_ALARM_OBJECT_ACE = _SYSTEM_ALARM_OBJECT_ACE;

static PSYSTEM_ALARM_OBJECT_ACE = Pointer[_SYSTEM_ALARM_OBJECT_ACE];

record _ACL {
    AclRevision : CUChar;
    Sbz1 : CUChar;
    AclSize : UShort;
    AceCount : UShort;
    Sbz2 : UShort;
}

static ACL = _ACL;

static PACL = Pointer[_ACL];

record _ACL_REVISION_INFORMATION {
    AclRevision : CULong;
}

static ACL_REVISION_INFORMATION = _ACL_REVISION_INFORMATION;

record _ACL_SIZE_INFORMATION {
    AceCount : CULong;
    AclBytesInUse : CULong;
    AclBytesFree : CULong;
}

static ACL_SIZE_INFORMATION = _ACL_SIZE_INFORMATION;

record _FLOATING_SAVE_AREA {
    ControlWord : CULong;
    StatusWord : CULong;
    TagWord : CULong;
    ErrorOffset : CULong;
    ErrorSelector : CULong;
    DataOffset : CULong;
    DataSelector : CULong;
    RegisterArea : Array[CUChar,80];
    Cr0NpxState : CULong;
}

static FLOATING_SAVE_AREA = _FLOATING_SAVE_AREA;

record _CONTEXT {
    ContextFlags : CULong;
    Dr0 : CULong;
    Dr1 : CULong;
    Dr2 : CULong;
    Dr3 : CULong;
    Dr6 : CULong;
    Dr7 : CULong;
    FloatSave : FLOATING_SAVE_AREA;
    SegGs : CULong;
    SegFs : CULong;
    SegEs : CULong;
    SegDs : CULong;
    Edi : CULong;
    Esi : CULong;
    Ebx : CULong;
    Edx : CULong;
    Ecx : CULong;
    Eax : CULong;
    Ebp : CULong;
    Eip : CULong;
    SegCs : CULong;
    EFlags : CULong;
    Esp : CULong;
    SegSs : CULong;
    ExtendedRegisters : Array[CUChar,512];
}

static CONTEXT = _CONTEXT;

static PCONTEXT = Pointer[CONTEXT];

static LPCONTEXT = Pointer[CONTEXT];

record _EXCEPTION_RECORD {
    ExceptionCode : CULong;
    ExceptionFlags : CULong;
    ExceptionRecord : Pointer[_EXCEPTION_RECORD];
    ExceptionAddress : PVOID;
    NumberParameters : CULong;
    ExceptionInformation : Array[CULong,15];
}

static EXCEPTION_RECORD = _EXCEPTION_RECORD;

static PEXCEPTION_RECORD = Pointer[_EXCEPTION_RECORD];

static LPEXCEPTION_RECORD = Pointer[_EXCEPTION_RECORD];

record _EXCEPTION_POINTERS {
    ExceptionRecord : PEXCEPTION_RECORD;
    ContextRecord : PCONTEXT;
}

static EXCEPTION_POINTERS = _EXCEPTION_POINTERS;

static PEXCEPTION_POINTERS = Pointer[_EXCEPTION_POINTERS];

static LPEXCEPTION_POINTERS = Pointer[_EXCEPTION_POINTERS];

static LARGE_INTEGER = AUnionType;

static PLARGE_INTEGER = OpaquePointer;

static ULARGE_INTEGER = AUnionType;

static PULARGE_INTEGER = OpaquePointer;

record _LUID {
    LowPart : CULong;
    HighPart : CLong;
}

static LUID = _LUID;

static PLUID = Pointer[_LUID];

record _LUID_AND_ATTRIBUTES {
    Luid : LUID;
    Attributes : CULong;
}

static LUID_AND_ATTRIBUTES = _LUID_AND_ATTRIBUTES;

static PLUID_AND_ATTRIBUTES = Pointer[_LUID_AND_ATTRIBUTES];

static LUID_AND_ATTRIBUTES_ARRAY = Array[LUID_AND_ATTRIBUTES,1];

static PLUID_AND_ATTRIBUTES_ARRAY = Pointer[LUID_AND_ATTRIBUTES_ARRAY];

record _PRIVILEGE_SET {
    PrivilegeCount : CULong;
    Control : CULong;
    Privilege : Array[LUID_AND_ATTRIBUTES,1];
}

static PRIVILEGE_SET = _PRIVILEGE_SET;

static PPRIVILEGE_SET = Pointer[_PRIVILEGE_SET];

record _SECURITY_ATTRIBUTES {
    nLength : CULong;
    lpSecurityDescriptor : LPVOID;
    bInheritHandle : Int;
}

static SECURITY_ATTRIBUTES = _SECURITY_ATTRIBUTES;

static PSECURITY_ATTRIBUTES = Pointer[_SECURITY_ATTRIBUTES];

static LPSECURITY_ATTRIBUTES = Pointer[_SECURITY_ATTRIBUTES];

static SecurityAnonymous = 0;
static SecurityIdentification = 1;
static SecurityImpersonation = 2;
static SecurityDelegation = 3;

static SECURITY_IMPERSONATION_LEVEL = Int;

static PSECURITY_IMPERSONATION_LEVEL = Pointer[Int];

static SECURITY_CONTEXT_TRACKING_MODE = CUChar;

static PSECURITY_CONTEXT_TRACKING_MODE = Pointer[CUChar];

record _SECURITY_QUALITY_OF_SERVICE {
    Length : CULong;
    ImpersonationLevel : SECURITY_IMPERSONATION_LEVEL;
    ContextTrackingMode : CUChar;
    EffectiveOnly : CUChar;
}

static SECURITY_QUALITY_OF_SERVICE = _SECURITY_QUALITY_OF_SERVICE;

static PSECURITY_QUALITY_OF_SERVICE = Pointer[_SECURITY_QUALITY_OF_SERVICE];

static PACCESS_TOKEN = PVOID;

record _SE_IMPERSONATION_STATE {
    Token : PACCESS_TOKEN;
    CopyOnOpen : CUChar;
    EffectiveOnly : CUChar;
    Level : SECURITY_IMPERSONATION_LEVEL;
}

static SE_IMPERSONATION_STATE = _SE_IMPERSONATION_STATE;

static PSE_IMPERSONATION_STATE = Pointer[_SE_IMPERSONATION_STATE];

record _SID_IDENTIFIER_AUTHORITY {
    Value : Array[CUChar,6];
}

static SID_IDENTIFIER_AUTHORITY = _SID_IDENTIFIER_AUTHORITY;

static PSID_IDENTIFIER_AUTHORITY = Pointer[_SID_IDENTIFIER_AUTHORITY];

static LPSID_IDENTIFIER_AUTHORITY = Pointer[_SID_IDENTIFIER_AUTHORITY];

static PSID = PVOID;

record _SID {
    Revision : CUChar;
    SubAuthorityCount : CUChar;
    IdentifierAuthority : SID_IDENTIFIER_AUTHORITY;
    SubAuthority : Array[CULong,1];
}

static SID = _SID;

static PISID = Pointer[_SID];

record _SID_AND_ATTRIBUTES {
    Sid : PSID;
    Attributes : CULong;
}

static SID_AND_ATTRIBUTES = _SID_AND_ATTRIBUTES;

static PSID_AND_ATTRIBUTES = Pointer[_SID_AND_ATTRIBUTES];

static SID_AND_ATTRIBUTES_ARRAY = Array[SID_AND_ATTRIBUTES,1];

static PSID_AND_ATTRIBUTES_ARRAY = Pointer[SID_AND_ATTRIBUTES_ARRAY];

record _TOKEN_SOURCE {
    SourceName : Array[CChar,8];
    SourceIdentifier : LUID;
}

static TOKEN_SOURCE = _TOKEN_SOURCE;

static PTOKEN_SOURCE = Pointer[_TOKEN_SOURCE];

record _TOKEN_CONTROL {
    TokenId : LUID;
    AuthenticationId : LUID;
    ModifiedId : LUID;
    TokenSource : TOKEN_SOURCE;
}

static TOKEN_CONTROL = _TOKEN_CONTROL;

static PTOKEN_CONTROL = Pointer[_TOKEN_CONTROL];

record _TOKEN_DEFAULT_DACL {
    DefaultDacl : PACL;
}

static TOKEN_DEFAULT_DACL = _TOKEN_DEFAULT_DACL;

static PTOKEN_DEFAULT_DACL = Pointer[_TOKEN_DEFAULT_DACL];

record _TOKEN_GROUPS {
    GroupCount : CULong;
    Groups : Array[SID_AND_ATTRIBUTES,1];
}

static TOKEN_GROUPS = _TOKEN_GROUPS;

static PTOKEN_GROUPS = Pointer[_TOKEN_GROUPS];

static LPTOKEN_GROUPS = Pointer[_TOKEN_GROUPS];

record _TOKEN_OWNER {
    Owner : PSID;
}

static TOKEN_OWNER = _TOKEN_OWNER;

static PTOKEN_OWNER = Pointer[_TOKEN_OWNER];

record _TOKEN_PRIMARY_GROUP {
    PrimaryGroup : PSID;
}

static TOKEN_PRIMARY_GROUP = _TOKEN_PRIMARY_GROUP;

static PTOKEN_PRIMARY_GROUP = Pointer[_TOKEN_PRIMARY_GROUP];

record _TOKEN_PRIVILEGES {
    PrivilegeCount : CULong;
    Privileges : Array[LUID_AND_ATTRIBUTES,1];
}

static TOKEN_PRIVILEGES = _TOKEN_PRIVILEGES;

static PTOKEN_PRIVILEGES = Pointer[_TOKEN_PRIVILEGES];

static LPTOKEN_PRIVILEGES = Pointer[_TOKEN_PRIVILEGES];

static TokenPrimary = 1;
static TokenImpersonation = 2;

static TOKEN_TYPE = Int;

static PTOKEN_TYPE = Pointer[Int];

record _TOKEN_STATISTICS {
    TokenId : LUID;
    AuthenticationId : LUID;
    ExpirationTime : LARGE_INTEGER;
    TokenType : TOKEN_TYPE;
    ImpersonationLevel : SECURITY_IMPERSONATION_LEVEL;
    DynamicCharged : CULong;
    DynamicAvailable : CULong;
    GroupCount : CULong;
    PrivilegeCount : CULong;
    ModifiedId : LUID;
}

static TOKEN_STATISTICS = _TOKEN_STATISTICS;

static PTOKEN_STATISTICS = Pointer[_TOKEN_STATISTICS];

record _TOKEN_USER {
    User : SID_AND_ATTRIBUTES;
}

static TOKEN_USER = _TOKEN_USER;

static PTOKEN_USER = Pointer[_TOKEN_USER];

static SECURITY_INFORMATION = CULong;

static PSECURITY_INFORMATION = Pointer[CULong];

static SECURITY_DESCRIPTOR_CONTROL = UShort;

static PSECURITY_DESCRIPTOR_CONTROL = Pointer[UShort];

record _SECURITY_DESCRIPTOR {
    Revision : CUChar;
    Sbz1 : CUChar;
    Control : UShort;
    Owner : PSID;
    Group : PSID;
    Sacl : PACL;
    Dacl : PACL;
}

static SECURITY_DESCRIPTOR = _SECURITY_DESCRIPTOR;

static PSECURITY_DESCRIPTOR = Pointer[_SECURITY_DESCRIPTOR];

static PISECURITY_DESCRIPTOR = Pointer[_SECURITY_DESCRIPTOR];

static TokenUser = 1;
static TokenGroups = 2;
static TokenPrivileges = 3;
static TokenOwner = 4;
static TokenPrimaryGroup = 5;
static TokenDefaultDacl = 6;
static TokenSource = 7;
static TokenType = 8;
static TokenImpersonationLevel = 9;
static TokenStatistics = 10;
static TokenRestrictedSids = 11;
static TokenSessionId = 12;
static TokenGroupsAndPrivileges = 13;
static TokenSessionReference = 14;
static TokenSandBoxInert = 15;
static TokenAuditPolicy = 16;
static TokenOrigin = 17;
static MaxTokenInfoClass = 18;

static TOKEN_INFORMATION_CLASS = Int;

static SidTypeUser = 1;
static SidTypeGroup = 2;
static SidTypeDomain = 3;
static SidTypeAlias = 4;
static SidTypeWellKnownGroup = 5;
static SidTypeDeletedAccount = 6;
static SidTypeInvalid = 7;
static SidTypeUnknown = 8;
static SidTypeComputer = 9;

static SID_NAME_USE = Int;

static PSID_NAME_USE = Pointer[Int];

record _QUOTA_LIMITS {
    PagedPoolLimit : CULong;
    NonPagedPoolLimit : CULong;
    MinimumWorkingSetSize : CULong;
    MaximumWorkingSetSize : CULong;
    PagefileLimit : CULong;
    TimeLimit : LARGE_INTEGER;
}

static QUOTA_LIMITS = _QUOTA_LIMITS;

static PQUOTA_LIMITS = Pointer[_QUOTA_LIMITS];

record _IO_COUNTERS {
    ReadOperationCount : UInt64;
    WriteOperationCount : UInt64;
    OtherOperationCount : UInt64;
    ReadTransferCount : UInt64;
    WriteTransferCount : UInt64;
    OtherTransferCount : UInt64;
}

static IO_COUNTERS = _IO_COUNTERS;

static PIO_COUNTERS = Pointer[_IO_COUNTERS];

record _FILE_NOTIFY_INFORMATION {
    NextEntryOffset : CULong;
    Action : CULong;
    FileNameLength : CULong;
    FileName : Array[UShort,1];
}

static FILE_NOTIFY_INFORMATION = _FILE_NOTIFY_INFORMATION;

static PFILE_NOTIFY_INFORMATION = Pointer[_FILE_NOTIFY_INFORMATION];

record _TAPE_ERASE {
    Type : CULong;
    Immediate : CUChar;
}

static TAPE_ERASE = _TAPE_ERASE;

static PTAPE_ERASE = Pointer[_TAPE_ERASE];

record _TAPE_GET_DRIVE_PARAMETERS {
    ECC : CUChar;
    Compression : CUChar;
    DataPadding : CUChar;
    ReportSetmarks : CUChar;
    DefaultBlockSize : CULong;
    MaximumBlockSize : CULong;
    MinimumBlockSize : CULong;
    MaximumPartitionCount : CULong;
    FeaturesLow : CULong;
    FeaturesHigh : CULong;
    EOTWarningZoneSize : CULong;
}

static TAPE_GET_DRIVE_PARAMETERS = _TAPE_GET_DRIVE_PARAMETERS;

static PTAPE_GET_DRIVE_PARAMETERS = Pointer[_TAPE_GET_DRIVE_PARAMETERS];

record _TAPE_GET_MEDIA_PARAMETERS {
    Capacity : LARGE_INTEGER;
    Remaining : LARGE_INTEGER;
    BlockSize : CULong;
    PartitionCount : CULong;
    WriteProtected : CUChar;
}

static TAPE_GET_MEDIA_PARAMETERS = _TAPE_GET_MEDIA_PARAMETERS;

static PTAPE_GET_MEDIA_PARAMETERS = Pointer[_TAPE_GET_MEDIA_PARAMETERS];

record _TAPE_GET_POSITION {
    Type : CULong;
    Partition : CULong;
    OffsetLow : CULong;
    OffsetHigh : CULong;
}

static TAPE_GET_POSITION = _TAPE_GET_POSITION;

static PTAPE_GET_POSITION = Pointer[_TAPE_GET_POSITION];

record _TAPE_PREPARE {
    Operation : CULong;
    Immediate : CUChar;
}

static TAPE_PREPARE = _TAPE_PREPARE;

static PTAPE_PREPARE = Pointer[_TAPE_PREPARE];

record _TAPE_SET_DRIVE_PARAMETERS {
    ECC : CUChar;
    Compression : CUChar;
    DataPadding : CUChar;
    ReportSetmarks : CUChar;
    EOTWarningZoneSize : CULong;
}

static TAPE_SET_DRIVE_PARAMETERS = _TAPE_SET_DRIVE_PARAMETERS;

static PTAPE_SET_DRIVE_PARAMETERS = Pointer[_TAPE_SET_DRIVE_PARAMETERS];

record _TAPE_SET_MEDIA_PARAMETERS {
    BlockSize : CULong;
}

static TAPE_SET_MEDIA_PARAMETERS = _TAPE_SET_MEDIA_PARAMETERS;

static PTAPE_SET_MEDIA_PARAMETERS = Pointer[_TAPE_SET_MEDIA_PARAMETERS];

record _TAPE_SET_POSITION {
    Method : CULong;
    Partition : CULong;
    Offset : LARGE_INTEGER;
    Immediate : CUChar;
}

static TAPE_SET_POSITION = _TAPE_SET_POSITION;

static PTAPE_SET_POSITION = Pointer[_TAPE_SET_POSITION];

record _TAPE_WRITE_MARKS {
    Type : CULong;
    Count : CULong;
    Immediate : CUChar;
}

static TAPE_WRITE_MARKS = _TAPE_WRITE_MARKS;

static PTAPE_WRITE_MARKS = Pointer[_TAPE_WRITE_MARKS];

record _TAPE_CREATE_PARTITION {
    Method : CULong;
    Count : CULong;
    Size : CULong;
}

static TAPE_CREATE_PARTITION = _TAPE_CREATE_PARTITION;

static PTAPE_CREATE_PARTITION = Pointer[_TAPE_CREATE_PARTITION];

record _MEMORY_BASIC_INFORMATION {
    BaseAddress : PVOID;
    AllocationBase : PVOID;
    AllocationProtect : CULong;
    RegionSize : CULong;
    State : CULong;
    Protect : CULong;
    Type : CULong;
}

static MEMORY_BASIC_INFORMATION = _MEMORY_BASIC_INFORMATION;

static PMEMORY_BASIC_INFORMATION = Pointer[_MEMORY_BASIC_INFORMATION];

record _MESSAGE_RESOURCE_ENTRY {
    Length : UShort;
    Flags : UShort;
    Text : Array[CUChar,1];
}

static MESSAGE_RESOURCE_ENTRY = _MESSAGE_RESOURCE_ENTRY;

static PMESSAGE_RESOURCE_ENTRY = Pointer[_MESSAGE_RESOURCE_ENTRY];

record _MESSAGE_RESOURCE_BLOCK {
    LowId : CULong;
    HighId : CULong;
    OffsetToEntries : CULong;
}

static MESSAGE_RESOURCE_BLOCK = _MESSAGE_RESOURCE_BLOCK;

static PMESSAGE_RESOURCE_BLOCK = Pointer[_MESSAGE_RESOURCE_BLOCK];

record _MESSAGE_RESOURCE_DATA {
    NumberOfBlocks : CULong;
    Blocks : Array[MESSAGE_RESOURCE_BLOCK,1];
}

static MESSAGE_RESOURCE_DATA = _MESSAGE_RESOURCE_DATA;

static PMESSAGE_RESOURCE_DATA = Pointer[_MESSAGE_RESOURCE_DATA];

record _LIST_ENTRY {
    Flink : Pointer[_LIST_ENTRY];
    Blink : Pointer[_LIST_ENTRY];
}

static LIST_ENTRY = _LIST_ENTRY;

static PLIST_ENTRY = Pointer[_LIST_ENTRY];

record _SINGLE_LIST_ENTRY {
    Next : Pointer[_SINGLE_LIST_ENTRY];
}

static SINGLE_LIST_ENTRY = _SINGLE_LIST_ENTRY;

static PSINGLE_LIST_ENTRY = Pointer[_SINGLE_LIST_ENTRY];

static SLIST_HEADER = AUnionType;

static PSLIST_HEADER = OpaquePointer;

record _RTL_CRITICAL_SECTION_DEBUG {
    Type : UShort;
    CreatorBackTraceIndex : UShort;
    CriticalSection : Pointer[_RTL_CRITICAL_SECTION];
    ProcessLocksList : LIST_ENTRY;
    EntryCount : CULong;
    ContentionCount : CULong;
    Spare : Array[CULong,2];
}

static RTL_CRITICAL_SECTION_DEBUG = _RTL_CRITICAL_SECTION_DEBUG;

static PRTL_CRITICAL_SECTION_DEBUG = Pointer[_RTL_CRITICAL_SECTION_DEBUG];

record _RTL_CRITICAL_SECTION {
    DebugInfo : PRTL_CRITICAL_SECTION_DEBUG;
    LockCount : CLong;
    RecursionCount : CLong;
    OwningThread : HANDLE;
    LockSemaphore : HANDLE;
    Reserved : CULong;
}

static RTL_CRITICAL_SECTION = _RTL_CRITICAL_SECTION;

static PRTL_CRITICAL_SECTION = Pointer[_RTL_CRITICAL_SECTION];

record _EVENTLOGRECORD {
    Length : CULong;
    Reserved : CULong;
    RecordNumber : CULong;
    TimeGenerated : CULong;
    TimeWritten : CULong;
    EventID : CULong;
    EventType : UShort;
    NumStrings : UShort;
    EventCategory : UShort;
    ReservedFlags : UShort;
    ClosingRecordNumber : CULong;
    StringOffset : CULong;
    UserSidLength : CULong;
    UserSidOffset : CULong;
    DataLength : CULong;
    DataOffset : CULong;
}

static EVENTLOGRECORD = _EVENTLOGRECORD;

static PEVENTLOGRECORD = Pointer[_EVENTLOGRECORD];

record _OSVERSIONINFOA {
    dwOSVersionInfoSize : CULong;
    dwMajorVersion : CULong;
    dwMinorVersion : CULong;
    dwBuildNumber : CULong;
    dwPlatformId : CULong;
    szCSDVersion : Array[CChar,128];
}

static OSVERSIONINFOA = _OSVERSIONINFOA;

static POSVERSIONINFOA = Pointer[_OSVERSIONINFOA];

static LPOSVERSIONINFOA = Pointer[_OSVERSIONINFOA];

record _OSVERSIONINFOW {
    dwOSVersionInfoSize : CULong;
    dwMajorVersion : CULong;
    dwMinorVersion : CULong;
    dwBuildNumber : CULong;
    dwPlatformId : CULong;
    szCSDVersion : Array[UShort,128];
}

static OSVERSIONINFOW = _OSVERSIONINFOW;

static POSVERSIONINFOW = Pointer[_OSVERSIONINFOW];

static LPOSVERSIONINFOW = Pointer[_OSVERSIONINFOW];

record _OSVERSIONINFOEXA {
    dwOSVersionInfoSize : CULong;
    dwMajorVersion : CULong;
    dwMinorVersion : CULong;
    dwBuildNumber : CULong;
    dwPlatformId : CULong;
    szCSDVersion : Array[CChar,128];
    wServicePackMajor : UShort;
    wServicePackMinor : UShort;
    wSuiteMask : UShort;
    wProductType : CUChar;
    wReserved : CUChar;
}

static OSVERSIONINFOEXA = _OSVERSIONINFOEXA;

static POSVERSIONINFOEXA = Pointer[_OSVERSIONINFOEXA];

static LPOSVERSIONINFOEXA = Pointer[_OSVERSIONINFOEXA];

record _OSVERSIONINFOEXW {
    dwOSVersionInfoSize : CULong;
    dwMajorVersion : CULong;
    dwMinorVersion : CULong;
    dwBuildNumber : CULong;
    dwPlatformId : CULong;
    szCSDVersion : Array[UShort,128];
    wServicePackMajor : UShort;
    wServicePackMinor : UShort;
    wSuiteMask : UShort;
    wProductType : CUChar;
    wReserved : CUChar;
}

static OSVERSIONINFOEXW = _OSVERSIONINFOEXW;

static POSVERSIONINFOEXW = Pointer[_OSVERSIONINFOEXW];

static LPOSVERSIONINFOEXW = Pointer[_OSVERSIONINFOEXW];

record _IMAGE_VXD_HEADER {
    e32_magic : UShort;
    e32_border : CUChar;
    e32_worder : CUChar;
    e32_level : CULong;
    e32_cpu : UShort;
    e32_os : UShort;
    e32_ver : CULong;
    e32_mflags : CULong;
    e32_mpages : CULong;
    e32_startobj : CULong;
    e32_eip : CULong;
    e32_stackobj : CULong;
    e32_esp : CULong;
    e32_pagesize : CULong;
    e32_lastpagesize : CULong;
    e32_fixupsize : CULong;
    e32_fixupsum : CULong;
    e32_ldrsize : CULong;
    e32_ldrsum : CULong;
    e32_objtab : CULong;
    e32_objcnt : CULong;
    e32_objmap : CULong;
    e32_itermap : CULong;
    e32_rsrctab : CULong;
    e32_rsrccnt : CULong;
    e32_restab : CULong;
    e32_enttab : CULong;
    e32_dirtab : CULong;
    e32_dircnt : CULong;
    e32_fpagetab : CULong;
    e32_frectab : CULong;
    e32_impmod : CULong;
    e32_impmodcnt : CULong;
    e32_impproc : CULong;
    e32_pagesum : CULong;
    e32_datapage : CULong;
    e32_preload : CULong;
    e32_nrestab : CULong;
    e32_cbnrestab : CULong;
    e32_nressum : CULong;
    e32_autodata : CULong;
    e32_debuginfo : CULong;
    e32_debuglen : CULong;
    e32_instpreload : CULong;
    e32_instdemand : CULong;
    e32_heapsize : CULong;
    e32_res3 : Array[CUChar,12];
    e32_winresoff : CULong;
    e32_winreslen : CULong;
    e32_devid : UShort;
    e32_ddkver : UShort;
}

static IMAGE_VXD_HEADER = _IMAGE_VXD_HEADER;

static PIMAGE_VXD_HEADER = Pointer[_IMAGE_VXD_HEADER];

record _IMAGE_FILE_HEADER {
    Machine : UShort;
    NumberOfSections : UShort;
    TimeDateStamp : CULong;
    PointerToSymbolTable : CULong;
    NumberOfSymbols : CULong;
    SizeOfOptionalHeader : UShort;
    Characteristics : UShort;
}

static IMAGE_FILE_HEADER = _IMAGE_FILE_HEADER;

static PIMAGE_FILE_HEADER = Pointer[_IMAGE_FILE_HEADER];

record _IMAGE_DATA_DIRECTORY {
    VirtualAddress : CULong;
    Size : CULong;
}

static IMAGE_DATA_DIRECTORY = _IMAGE_DATA_DIRECTORY;

static PIMAGE_DATA_DIRECTORY = Pointer[_IMAGE_DATA_DIRECTORY];

record _IMAGE_OPTIONAL_HEADER {
    Magic : UShort;
    MajorLinkerVersion : CUChar;
    MinorLinkerVersion : CUChar;
    SizeOfCode : CULong;
    SizeOfInitializedData : CULong;
    SizeOfUninitializedData : CULong;
    AddressOfEntryPoint : CULong;
    BaseOfCode : CULong;
    BaseOfData : CULong;
    ImageBase : CULong;
    SectionAlignment : CULong;
    FileAlignment : CULong;
    MajorOperatingSystemVersion : UShort;
    MinorOperatingSystemVersion : UShort;
    MajorImageVersion : UShort;
    MinorImageVersion : UShort;
    MajorSubsystemVersion : UShort;
    MinorSubsystemVersion : UShort;
    Win32VersionValue : CULong;
    SizeOfImage : CULong;
    SizeOfHeaders : CULong;
    CheckSum : CULong;
    Subsystem : UShort;
    DllCharacteristics : UShort;
    SizeOfStackReserve : CULong;
    SizeOfStackCommit : CULong;
    SizeOfHeapReserve : CULong;
    SizeOfHeapCommit : CULong;
    LoaderFlags : CULong;
    NumberOfRvaAndSizes : CULong;
    DataDirectory : Array[IMAGE_DATA_DIRECTORY,16];
}

static IMAGE_OPTIONAL_HEADER32 = _IMAGE_OPTIONAL_HEADER;

static PIMAGE_OPTIONAL_HEADER32 = Pointer[_IMAGE_OPTIONAL_HEADER];

record _IMAGE_OPTIONAL_HEADER64 {
    Magic : UShort;
    MajorLinkerVersion : CUChar;
    MinorLinkerVersion : CUChar;
    SizeOfCode : CULong;
    SizeOfInitializedData : CULong;
    SizeOfUninitializedData : CULong;
    AddressOfEntryPoint : CULong;
    BaseOfCode : CULong;
    ImageBase : UInt64;
    SectionAlignment : CULong;
    FileAlignment : CULong;
    MajorOperatingSystemVersion : UShort;
    MinorOperatingSystemVersion : UShort;
    MajorImageVersion : UShort;
    MinorImageVersion : UShort;
    MajorSubsystemVersion : UShort;
    MinorSubsystemVersion : UShort;
    Win32VersionValue : CULong;
    SizeOfImage : CULong;
    SizeOfHeaders : CULong;
    CheckSum : CULong;
    Subsystem : UShort;
    DllCharacteristics : UShort;
    SizeOfStackReserve : UInt64;
    SizeOfStackCommit : UInt64;
    SizeOfHeapReserve : UInt64;
    SizeOfHeapCommit : UInt64;
    LoaderFlags : CULong;
    NumberOfRvaAndSizes : CULong;
    DataDirectory : Array[IMAGE_DATA_DIRECTORY,16];
}

static IMAGE_OPTIONAL_HEADER64 = _IMAGE_OPTIONAL_HEADER64;

static PIMAGE_OPTIONAL_HEADER64 = Pointer[_IMAGE_OPTIONAL_HEADER64];

static IMAGE_OPTIONAL_HEADER = IMAGE_OPTIONAL_HEADER32;

static PIMAGE_OPTIONAL_HEADER = PIMAGE_OPTIONAL_HEADER32;

record _IMAGE_ROM_OPTIONAL_HEADER {
    Magic : UShort;
    MajorLinkerVersion : CUChar;
    MinorLinkerVersion : CUChar;
    SizeOfCode : CULong;
    SizeOfInitializedData : CULong;
    SizeOfUninitializedData : CULong;
    AddressOfEntryPoint : CULong;
    BaseOfCode : CULong;
    BaseOfData : CULong;
    BaseOfBss : CULong;
    GprMask : CULong;
    CprMask : Array[CULong,4];
    GpValue : CULong;
}

static IMAGE_ROM_OPTIONAL_HEADER = _IMAGE_ROM_OPTIONAL_HEADER;

static PIMAGE_ROM_OPTIONAL_HEADER = Pointer[_IMAGE_ROM_OPTIONAL_HEADER];

record _IMAGE_DOS_HEADER {
    e_magic : UShort;
    e_cblp : UShort;
    e_cp : UShort;
    e_crlc : UShort;
    e_cparhdr : UShort;
    e_minalloc : UShort;
    e_maxalloc : UShort;
    e_ss : UShort;
    e_sp : UShort;
    e_csum : UShort;
    e_ip : UShort;
    e_cs : UShort;
    e_lfarlc : UShort;
    e_ovno : UShort;
    e_res : Array[UShort,4];
    e_oemid : UShort;
    e_oeminfo : UShort;
    e_res2 : Array[UShort,10];
    e_lfanew : CLong;
}

static IMAGE_DOS_HEADER = _IMAGE_DOS_HEADER;

static PIMAGE_DOS_HEADER = Pointer[_IMAGE_DOS_HEADER];

record _IMAGE_OS2_HEADER {
    ne_magic : UShort;
    ne_ver : CChar;
    ne_rev : CChar;
    ne_enttab : UShort;
    ne_cbenttab : UShort;
    ne_crc : CLong;
    ne_flags : UShort;
    ne_autodata : UShort;
    ne_heap : UShort;
    ne_stack : UShort;
    ne_csip : CLong;
    ne_sssp : CLong;
    ne_cseg : UShort;
    ne_cmod : UShort;
    ne_cbnrestab : UShort;
    ne_segtab : UShort;
    ne_rsrctab : UShort;
    ne_restab : UShort;
    ne_modtab : UShort;
    ne_imptab : UShort;
    ne_nrestab : CLong;
    ne_cmovent : UShort;
    ne_align : UShort;
    ne_cres : UShort;
    ne_exetyp : CUChar;
    ne_flagsothers : CUChar;
    ne_pretthunks : UShort;
    ne_psegrefbytes : UShort;
    ne_swaparea : UShort;
    ne_expver : UShort;
}

static IMAGE_OS2_HEADER = _IMAGE_OS2_HEADER;

static PIMAGE_OS2_HEADER = Pointer[_IMAGE_OS2_HEADER];

record _IMAGE_NT_HEADERS {
    Signature : CULong;
    FileHeader : IMAGE_FILE_HEADER;
    OptionalHeader : IMAGE_OPTIONAL_HEADER;
}

static IMAGE_NT_HEADERS32 = _IMAGE_NT_HEADERS;

static PIMAGE_NT_HEADERS32 = Pointer[_IMAGE_NT_HEADERS];

record _IMAGE_NT_HEADERS64 {
    Signature : CULong;
    FileHeader : IMAGE_FILE_HEADER;
    OptionalHeader : IMAGE_OPTIONAL_HEADER;
}

static IMAGE_NT_HEADERS64 = _IMAGE_NT_HEADERS64;

static PIMAGE_NT_HEADERS64 = Pointer[_IMAGE_NT_HEADERS64];

static IMAGE_NT_HEADERS = IMAGE_NT_HEADERS32;

static PIMAGE_NT_HEADERS = PIMAGE_NT_HEADERS32;

record _IMAGE_ROM_HEADERS {
    FileHeader : IMAGE_FILE_HEADER;
    OptionalHeader : IMAGE_ROM_OPTIONAL_HEADER;
}

static IMAGE_ROM_HEADERS = _IMAGE_ROM_HEADERS;

static PIMAGE_ROM_HEADERS = Pointer[_IMAGE_ROM_HEADERS];

record _IMAGE_SECTION_HEADER {
    Name : Array[CUChar,8];
    Misc : AUnionType;
    VirtualAddress : CULong;
    SizeOfRawData : CULong;
    PointerToRawData : CULong;
    PointerToRelocations : CULong;
    PointerToLinenumbers : CULong;
    NumberOfRelocations : UShort;
    NumberOfLinenumbers : UShort;
    Characteristics : CULong;
}

static IMAGE_SECTION_HEADER = _IMAGE_SECTION_HEADER;

static PIMAGE_SECTION_HEADER = Pointer[_IMAGE_SECTION_HEADER];

record _IMAGE_SYMBOL {
    N : AUnionType;
    Value : CULong;
    SectionNumber : Short;
    Type : UShort;
    StorageClass : CUChar;
    NumberOfAuxSymbols : CUChar;
}

static IMAGE_SYMBOL = _IMAGE_SYMBOL;

static PIMAGE_SYMBOL = Pointer[_IMAGE_SYMBOL];

static IMAGE_AUX_SYMBOL = AUnionType;

static PIMAGE_AUX_SYMBOL = OpaquePointer;

record _IMAGE_COFF_SYMBOLS_HEADER {
    NumberOfSymbols : CULong;
    LvaToFirstSymbol : CULong;
    NumberOfLinenumbers : CULong;
    LvaToFirstLinenumber : CULong;
    RvaToFirstByteOfCode : CULong;
    RvaToLastByteOfCode : CULong;
    RvaToFirstByteOfData : CULong;
    RvaToLastByteOfData : CULong;
}

static IMAGE_COFF_SYMBOLS_HEADER = _IMAGE_COFF_SYMBOLS_HEADER;

static PIMAGE_COFF_SYMBOLS_HEADER = Pointer[_IMAGE_COFF_SYMBOLS_HEADER];

record _IMAGE_RELOCATION {
    unnamed_field0 : AUnionType;
    SymbolTableIndex : CULong;
    Type : UShort;
}

static IMAGE_RELOCATION = _IMAGE_RELOCATION;

static PIMAGE_RELOCATION = Pointer[_IMAGE_RELOCATION];

record _IMAGE_BASE_RELOCATION {
    VirtualAddress : CULong;
    SizeOfBlock : CULong;
}

static IMAGE_BASE_RELOCATION = _IMAGE_BASE_RELOCATION;

static PIMAGE_BASE_RELOCATION = Pointer[_IMAGE_BASE_RELOCATION];

record _IMAGE_LINENUMBER {
    Type : AUnionType;
    Linenumber : UShort;
}

static IMAGE_LINENUMBER = _IMAGE_LINENUMBER;

static PIMAGE_LINENUMBER = Pointer[_IMAGE_LINENUMBER];

record _IMAGE_ARCHIVE_MEMBER_HEADER {
    Name : Array[CUChar,16];
    Date : Array[CUChar,12];
    UserID : Array[CUChar,6];
    GroupID : Array[CUChar,6];
    Mode : Array[CUChar,8];
    Size : Array[CUChar,10];
    EndHeader : Array[CUChar,2];
}

static IMAGE_ARCHIVE_MEMBER_HEADER = _IMAGE_ARCHIVE_MEMBER_HEADER;

static PIMAGE_ARCHIVE_MEMBER_HEADER = Pointer[_IMAGE_ARCHIVE_MEMBER_HEADER];

record _IMAGE_EXPORT_DIRECTORY {
    Characteristics : CULong;
    TimeDateStamp : CULong;
    MajorVersion : UShort;
    MinorVersion : UShort;
    Name : CULong;
    Base : CULong;
    NumberOfFunctions : CULong;
    NumberOfNames : CULong;
    AddressOfFunctions : CULong;
    AddressOfNames : CULong;
    AddressOfNameOrdinals : CULong;
}

static IMAGE_EXPORT_DIRECTORY = _IMAGE_EXPORT_DIRECTORY;

static PIMAGE_EXPORT_DIRECTORY = Pointer[_IMAGE_EXPORT_DIRECTORY];

record _IMAGE_IMPORT_BY_NAME {
    Hint : UShort;
    Name : Array[CUChar,1];
}

static IMAGE_IMPORT_BY_NAME = _IMAGE_IMPORT_BY_NAME;

static PIMAGE_IMPORT_BY_NAME = Pointer[_IMAGE_IMPORT_BY_NAME];

record _IMAGE_THUNK_DATA32 {
    u1 : AUnionType;
}

static IMAGE_THUNK_DATA32 = _IMAGE_THUNK_DATA32;

static PIMAGE_THUNK_DATA32 = Pointer[_IMAGE_THUNK_DATA32];

record _IMAGE_THUNK_DATA64 {
    u1 : AUnionType;
}

static IMAGE_THUNK_DATA64 = _IMAGE_THUNK_DATA64;

static PIMAGE_THUNK_DATA64 = Pointer[_IMAGE_THUNK_DATA64];

static IMAGE_THUNK_DATA = IMAGE_THUNK_DATA32;

static PIMAGE_THUNK_DATA = PIMAGE_THUNK_DATA32;

record _IMAGE_IMPORT_DESCRIPTOR {
    unnamed_field0 : AUnionType;
    TimeDateStamp : CULong;
    ForwarderChain : CULong;
    Name : CULong;
    FirstThunk : CULong;
}

static IMAGE_IMPORT_DESCRIPTOR = _IMAGE_IMPORT_DESCRIPTOR;

static PIMAGE_IMPORT_DESCRIPTOR = Pointer[_IMAGE_IMPORT_DESCRIPTOR];

record _IMAGE_BOUND_IMPORT_DESCRIPTOR {
    TimeDateStamp : CULong;
    OffsetModuleName : UShort;
    NumberOfModuleForwarderRefs : UShort;
}

static IMAGE_BOUND_IMPORT_DESCRIPTOR = _IMAGE_BOUND_IMPORT_DESCRIPTOR;

static PIMAGE_BOUND_IMPORT_DESCRIPTOR = Pointer[_IMAGE_BOUND_IMPORT_DESCRIPTOR];

record _IMAGE_BOUND_FORWARDER_REF {
    TimeDateStamp : CULong;
    OffsetModuleName : UShort;
    Reserved : UShort;
}

static IMAGE_BOUND_FORWARDER_REF = _IMAGE_BOUND_FORWARDER_REF;

static PIMAGE_BOUND_FORWARDER_REF = Pointer[_IMAGE_BOUND_FORWARDER_REF];

static PIMAGE_TLS_CALLBACK = StdCallCodePointer[RawPointer,CULong,RawPointer,Void];

record _IMAGE_TLS_DIRECTORY32 {
    StartAddressOfRawData : CULong;
    EndAddressOfRawData : CULong;
    AddressOfIndex : CULong;
    AddressOfCallBacks : CULong;
    SizeOfZeroFill : CULong;
    Characteristics : CULong;
}

static IMAGE_TLS_DIRECTORY32 = _IMAGE_TLS_DIRECTORY32;

static PIMAGE_TLS_DIRECTORY32 = Pointer[_IMAGE_TLS_DIRECTORY32];

record _IMAGE_TLS_DIRECTORY64 {
    StartAddressOfRawData : UInt64;
    EndAddressOfRawData : UInt64;
    AddressOfIndex : UInt64;
    AddressOfCallBacks : UInt64;
    SizeOfZeroFill : CULong;
    Characteristics : CULong;
}

static IMAGE_TLS_DIRECTORY64 = _IMAGE_TLS_DIRECTORY64;

static PIMAGE_TLS_DIRECTORY64 = Pointer[_IMAGE_TLS_DIRECTORY64];

static IMAGE_TLS_DIRECTORY = IMAGE_TLS_DIRECTORY32;

static PIMAGE_TLS_DIRECTORY = PIMAGE_TLS_DIRECTORY32;

record _IMAGE_RESOURCE_DIRECTORY {
    Characteristics : CULong;
    TimeDateStamp : CULong;
    MajorVersion : UShort;
    MinorVersion : UShort;
    NumberOfNamedEntries : UShort;
    NumberOfIdEntries : UShort;
}

static IMAGE_RESOURCE_DIRECTORY = _IMAGE_RESOURCE_DIRECTORY;

static PIMAGE_RESOURCE_DIRECTORY = Pointer[_IMAGE_RESOURCE_DIRECTORY];

record _IMAGE_RESOURCE_DIRECTORY_ENTRY {
    unnamed_field0 : AUnionType;
    unnamed_field1 : AUnionType;
}

static IMAGE_RESOURCE_DIRECTORY_ENTRY = _IMAGE_RESOURCE_DIRECTORY_ENTRY;

static PIMAGE_RESOURCE_DIRECTORY_ENTRY = Pointer[_IMAGE_RESOURCE_DIRECTORY_ENTRY];

record _IMAGE_RESOURCE_DIRECTORY_STRING {
    Length : UShort;
    NameString : Array[CChar,1];
}

static IMAGE_RESOURCE_DIRECTORY_STRING = _IMAGE_RESOURCE_DIRECTORY_STRING;

static PIMAGE_RESOURCE_DIRECTORY_STRING = Pointer[_IMAGE_RESOURCE_DIRECTORY_STRING];

record _IMAGE_RESOURCE_DIR_STRING_U {
    Length : UShort;
    NameString : Array[UShort,1];
}

static IMAGE_RESOURCE_DIR_STRING_U = _IMAGE_RESOURCE_DIR_STRING_U;

static PIMAGE_RESOURCE_DIR_STRING_U = Pointer[_IMAGE_RESOURCE_DIR_STRING_U];

record _IMAGE_RESOURCE_DATA_ENTRY {
    OffsetToData : CULong;
    Size : CULong;
    CodePage : CULong;
    Reserved : CULong;
}

static IMAGE_RESOURCE_DATA_ENTRY = _IMAGE_RESOURCE_DATA_ENTRY;

static PIMAGE_RESOURCE_DATA_ENTRY = Pointer[_IMAGE_RESOURCE_DATA_ENTRY];

record _IMAGE_LOAD_CONFIG_DIRECTORY {
    Characteristics : CULong;
    TimeDateStamp : CULong;
    MajorVersion : UShort;
    MinorVersion : UShort;
    GlobalFlagsClear : CULong;
    GlobalFlagsSet : CULong;
    CriticalSectionDefaultTimeout : CULong;
    DeCommitFreeBlockThreshold : CULong;
    DeCommitTotalFreeThreshold : CULong;
    LockPrefixTable : PVOID;
    MaximumAllocationSize : CULong;
    VirtualMemoryThreshold : CULong;
    ProcessHeapFlags : CULong;
    Reserved : Array[CULong,4];
}

static IMAGE_LOAD_CONFIG_DIRECTORY = _IMAGE_LOAD_CONFIG_DIRECTORY;

static PIMAGE_LOAD_CONFIG_DIRECTORY = Pointer[_IMAGE_LOAD_CONFIG_DIRECTORY];

record UnnamedRecord {
    Characteristics : CULong;
    TimeDateStamp : CULong;
    MajorVersion : UShort;
    MinorVersion : UShort;
    GlobalFlagsClear : CULong;
    GlobalFlagsSet : CULong;
    CriticalSectionDefaultTimeout : CULong;
    DeCommitFreeBlockThreshold : UInt64;
    DeCommitTotalFreeThreshold : UInt64;
    LockPrefixTable : UInt64;
    MaximumAllocationSize : UInt64;
    VirtualMemoryThreshold : UInt64;
    ProcessAffinityMask : UInt64;
    ProcessHeapFlags : CULong;
    CSDFlags : UShort;
    Reserved1 : UShort;
    EditList : UInt64;
    Reserved : Array[CULong,2];
}

static IMAGE_LOAD_CONFIG_DIRECTORY64 = UnnamedRecord;

static PIMAGE_LOAD_CONFIG_DIRECTORY64 = Pointer[UnnamedRecord];

record _IMAGE_RUNTIME_FUNCTION_ENTRY {
    BeginAddress : CULong;
    EndAddress : CULong;
    ExceptionHandler : PVOID;
    HandlerData : PVOID;
    PrologEndAddress : CULong;
}

static IMAGE_RUNTIME_FUNCTION_ENTRY = _IMAGE_RUNTIME_FUNCTION_ENTRY;

static PIMAGE_RUNTIME_FUNCTION_ENTRY = Pointer[_IMAGE_RUNTIME_FUNCTION_ENTRY];

record _IMAGE_CE_RUNTIME_FUNCTION_ENTRY {
    FuncStart : UInt;
    PrologLen : UInt;
    FuncLen : UInt;
    ThirtyTwoBit : UInt;
    ExceptionFlag : UInt;
}

static IMAGE_CE_RUNTIME_FUNCTION_ENTRY = _IMAGE_CE_RUNTIME_FUNCTION_ENTRY;

static PIMAGE_CE_RUNTIME_FUNCTION_ENTRY = Pointer[_IMAGE_CE_RUNTIME_FUNCTION_ENTRY];

record _IMAGE_DEBUG_DIRECTORY {
    Characteristics : CULong;
    TimeDateStamp : CULong;
    MajorVersion : UShort;
    MinorVersion : UShort;
    Type : CULong;
    SizeOfData : CULong;
    AddressOfRawData : CULong;
    PointerToRawData : CULong;
}

static IMAGE_DEBUG_DIRECTORY = _IMAGE_DEBUG_DIRECTORY;

static PIMAGE_DEBUG_DIRECTORY = Pointer[_IMAGE_DEBUG_DIRECTORY];

record _FPO_DATA {
    ulOffStart : CULong;
    cbProcSize : CULong;
    cdwLocals : CULong;
    cdwParams : UShort;
    cbProlog : UShort;
    cbRegs : UShort;
    fHasSEH : UShort;
    fUseBP : UShort;
    reserved : UShort;
    cbFrame : UShort;
}

static FPO_DATA = _FPO_DATA;

static PFPO_DATA = Pointer[_FPO_DATA];

record _IMAGE_DEBUG_MISC {
    DataType : CULong;
    Length : CULong;
    Unicode : CUChar;
    Reserved : Array[CUChar,3];
    Data : Array[CUChar,1];
}

static IMAGE_DEBUG_MISC = _IMAGE_DEBUG_MISC;

static PIMAGE_DEBUG_MISC = Pointer[_IMAGE_DEBUG_MISC];

record _IMAGE_FUNCTION_ENTRY {
    StartingAddress : CULong;
    EndingAddress : CULong;
    EndOfPrologue : CULong;
}

static IMAGE_FUNCTION_ENTRY = _IMAGE_FUNCTION_ENTRY;

static PIMAGE_FUNCTION_ENTRY = Pointer[_IMAGE_FUNCTION_ENTRY];

record _IMAGE_FUNCTION_ENTRY64 {
    StartingAddress : UInt64;
    EndingAddress : UInt64;
    unnamed_field2 : AUnionType;
}

static IMAGE_FUNCTION_ENTRY64 = _IMAGE_FUNCTION_ENTRY64;

static PIMAGE_FUNCTION_ENTRY64 = Pointer[_IMAGE_FUNCTION_ENTRY64];

record _IMAGE_SEPARATE_DEBUG_HEADER {
    Signature : UShort;
    Flags : UShort;
    Machine : UShort;
    Characteristics : UShort;
    TimeDateStamp : CULong;
    CheckSum : CULong;
    ImageBase : CULong;
    SizeOfImage : CULong;
    NumberOfSections : CULong;
    ExportedNamesSize : CULong;
    DebugDirectorySize : CULong;
    SectionAlignment : CULong;
    Reserved : Array[CULong,2];
}

static IMAGE_SEPARATE_DEBUG_HEADER = _IMAGE_SEPARATE_DEBUG_HEADER;

static PIMAGE_SEPARATE_DEBUG_HEADER = Pointer[_IMAGE_SEPARATE_DEBUG_HEADER];

static DriverType = 1;
static FileSystemType = 2;
static Win32ServiceOwnProcess = 16;
static Win32ServiceShareProcess = 32;
static AdapterType = 4;
static RecognizerType = 8;

static SERVICE_NODE_TYPE = Int;

static BootLoad = 0;
static SystemLoad = 1;
static AutoLoad = 2;
static DemandLoad = 3;
static DisableLoad = 4;

static SERVICE_LOAD_TYPE = Int;

static IgnoreError = 0;
static NormalError = 1;
static SevereError = 2;
static CriticalError = 3;

static SERVICE_ERROR_TYPE = Int;

record _NT_TIB {
    ExceptionList : OpaquePointer;
    StackBase : PVOID;
    StackLimit : PVOID;
    SubSystemTib : PVOID;
    unnamed_field4 : AUnionType;
    ArbitraryUserPointer : PVOID;
    Self : Pointer[_NT_TIB];
}

static NT_TIB = _NT_TIB;

static PNT_TIB = Pointer[_NT_TIB];

record _REPARSE_DATA_BUFFER {
    ReparseTag : CULong;
    ReparseDataLength : UShort;
    Reserved : UShort;
    unnamed_field3 : AUnionType;
}

static REPARSE_DATA_BUFFER = _REPARSE_DATA_BUFFER;

static PREPARSE_DATA_BUFFER = Pointer[_REPARSE_DATA_BUFFER];

record _REPARSE_GUID_DATA_BUFFER {
    ReparseTag : CULong;
    ReparseDataLength : UShort;
    Reserved : UShort;
    ReparseGuid : GUID;
    GenericReparseBuffer : UnnamedRecord34;
}

record UnnamedRecord34 {
    DataBuffer : Array[CUChar,1];
}

static REPARSE_GUID_DATA_BUFFER = _REPARSE_GUID_DATA_BUFFER;

static PREPARSE_GUID_DATA_BUFFER = Pointer[_REPARSE_GUID_DATA_BUFFER];

record _REPARSE_POINT_INFORMATION {
    ReparseDataLength : UShort;
    UnparsedNameLength : UShort;
}

static REPARSE_POINT_INFORMATION = _REPARSE_POINT_INFORMATION;

static PREPARSE_POINT_INFORMATION = Pointer[_REPARSE_POINT_INFORMATION];

static FILE_SEGMENT_ELEMENT = AUnionType;

static PFILE_SEGMENT_ELEMENT = OpaquePointer;

static JobObjectBasicAccountingInformation = 1;
static JobObjectBasicLimitInformation = 2;
static JobObjectBasicProcessIdList = 3;
static JobObjectBasicUIRestrictions = 4;
static JobObjectSecurityLimitInformation = 5;
static JobObjectEndOfJobTimeInformation = 6;
static JobObjectAssociateCompletionPortInformation = 7;
static JobObjectBasicAndIoAccountingInformation = 8;
static JobObjectExtendedLimitInformation = 9;
static JobObjectJobSetInformation = 10;
static MaxJobObjectInfoClass = 11;

static JOBOBJECTINFOCLASS = Int;

record _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION {
    TotalUserTime : LARGE_INTEGER;
    TotalKernelTime : LARGE_INTEGER;
    ThisPeriodTotalUserTime : LARGE_INTEGER;
    ThisPeriodTotalKernelTime : LARGE_INTEGER;
    TotalPageFaultCount : CULong;
    TotalProcesses : CULong;
    ActiveProcesses : CULong;
    TotalTerminatedProcesses : CULong;
}

static JOBOBJECT_BASIC_ACCOUNTING_INFORMATION = _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION;

static PJOBOBJECT_BASIC_ACCOUNTING_INFORMATION = Pointer[_JOBOBJECT_BASIC_ACCOUNTING_INFORMATION];

record _JOBOBJECT_BASIC_LIMIT_INFORMATION {
    PerProcessUserTimeLimit : LARGE_INTEGER;
    PerJobUserTimeLimit : LARGE_INTEGER;
    LimitFlags : CULong;
    MinimumWorkingSetSize : CULong;
    MaximumWorkingSetSize : CULong;
    ActiveProcessLimit : CULong;
    Affinity : CULong;
    PriorityClass : CULong;
    SchedulingClass : CULong;
}

static JOBOBJECT_BASIC_LIMIT_INFORMATION = _JOBOBJECT_BASIC_LIMIT_INFORMATION;

static PJOBOBJECT_BASIC_LIMIT_INFORMATION = Pointer[_JOBOBJECT_BASIC_LIMIT_INFORMATION];

record _JOBOBJECT_BASIC_PROCESS_ID_LIST {
    NumberOfAssignedProcesses : CULong;
    NumberOfProcessIdsInList : CULong;
    ProcessIdList : Array[CULong,1];
}

static JOBOBJECT_BASIC_PROCESS_ID_LIST = _JOBOBJECT_BASIC_PROCESS_ID_LIST;

static PJOBOBJECT_BASIC_PROCESS_ID_LIST = Pointer[_JOBOBJECT_BASIC_PROCESS_ID_LIST];

record _JOBOBJECT_BASIC_UI_RESTRICTIONS {
    UIRestrictionsClass : CULong;
}

static JOBOBJECT_BASIC_UI_RESTRICTIONS = _JOBOBJECT_BASIC_UI_RESTRICTIONS;

static PJOBOBJECT_BASIC_UI_RESTRICTIONS = Pointer[_JOBOBJECT_BASIC_UI_RESTRICTIONS];

record _JOBOBJECT_SECURITY_LIMIT_INFORMATION {
    SecurityLimitFlags : CULong;
    JobToken : HANDLE;
    SidsToDisable : PTOKEN_GROUPS;
    PrivilegesToDelete : PTOKEN_PRIVILEGES;
    RestrictedSids : PTOKEN_GROUPS;
}

static JOBOBJECT_SECURITY_LIMIT_INFORMATION = _JOBOBJECT_SECURITY_LIMIT_INFORMATION;

static PJOBOBJECT_SECURITY_LIMIT_INFORMATION = Pointer[_JOBOBJECT_SECURITY_LIMIT_INFORMATION];

record _JOBOBJECT_END_OF_JOB_TIME_INFORMATION {
    EndOfJobTimeAction : CULong;
}

static JOBOBJECT_END_OF_JOB_TIME_INFORMATION = _JOBOBJECT_END_OF_JOB_TIME_INFORMATION;

static PJOBOBJECT_END_OF_JOB_TIME_INFORMATION = Pointer[_JOBOBJECT_END_OF_JOB_TIME_INFORMATION];

record _JOBOBJECT_ASSOCIATE_COMPLETION_PORT {
    CompletionKey : PVOID;
    CompletionPort : HANDLE;
}

static JOBOBJECT_ASSOCIATE_COMPLETION_PORT = _JOBOBJECT_ASSOCIATE_COMPLETION_PORT;

static PJOBOBJECT_ASSOCIATE_COMPLETION_PORT = Pointer[_JOBOBJECT_ASSOCIATE_COMPLETION_PORT];

record _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION {
    BasicInfo : JOBOBJECT_BASIC_ACCOUNTING_INFORMATION;
    IoInfo : IO_COUNTERS;
}

static JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION = _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION;

static PJOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION = Pointer[_JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION];

record _JOBOBJECT_EXTENDED_LIMIT_INFORMATION {
    BasicLimitInformation : JOBOBJECT_BASIC_LIMIT_INFORMATION;
    IoInfo : IO_COUNTERS;
    ProcessMemoryLimit : CULong;
    JobMemoryLimit : CULong;
    PeakProcessMemoryUsed : CULong;
    PeakJobMemoryUsed : CULong;
}

static JOBOBJECT_EXTENDED_LIMIT_INFORMATION = _JOBOBJECT_EXTENDED_LIMIT_INFORMATION;

static PJOBOBJECT_EXTENDED_LIMIT_INFORMATION = Pointer[_JOBOBJECT_EXTENDED_LIMIT_INFORMATION];

record _JOBOBJECT_JOBSET_INFORMATION {
    MemberLevel : CULong;
}

static JOBOBJECT_JOBSET_INFORMATION = _JOBOBJECT_JOBSET_INFORMATION;

static PJOBOBJECT_JOBSET_INFORMATION = Pointer[_JOBOBJECT_JOBSET_INFORMATION];

static LT_DONT_CARE = 0;
static LT_LOWEST_LATENCY = 1;

static LATENCY_TIME = Int;

static PLATENCY_TIME = Pointer[Int];

static PowerSystemUnspecified = 0;
static PowerSystemWorking = 1;
static PowerSystemSleeping1 = 2;
static PowerSystemSleeping2 = 3;
static PowerSystemSleeping3 = 4;
static PowerSystemHibernate = 5;
static PowerSystemShutdown = 6;
static PowerSystemMaximum = 7;

static SYSTEM_POWER_STATE = Int;

static PSYSTEM_POWER_STATE = Pointer[Int];

static PowerActionNone = 0;
static PowerActionReserved = 1;
static PowerActionSleep = 2;
static PowerActionHibernate = 3;
static PowerActionShutdown = 4;
static PowerActionShutdownReset = 5;
static PowerActionShutdownOff = 6;
static PowerActionWarmEject = 7;

static POWER_ACTION = Int;

static PPOWER_ACTION = Pointer[Int];

static PowerDeviceUnspecified = 0;
static PowerDeviceD0 = 1;
static PowerDeviceD1 = 2;
static PowerDeviceD2 = 3;
static PowerDeviceD3 = 4;
static PowerDeviceMaximum = 5;

static DEVICE_POWER_STATE = Int;

static PDEVICE_POWER_STATE = Pointer[Int];

record UnnamedRecord2 {
    Granularity : CULong;
    Capacity : CULong;
}

static BATTERY_REPORTING_SCALE = UnnamedRecord2;

static PBATTERY_REPORTING_SCALE = Pointer[UnnamedRecord2];

record _POWER_ACTION_POLICY {
    Action : POWER_ACTION;
    Flags : CULong;
    EventCode : CULong;
}

static POWER_ACTION_POLICY = _POWER_ACTION_POLICY;

static PPOWER_ACTION_POLICY = Pointer[_POWER_ACTION_POLICY];

record _SYSTEM_POWER_LEVEL {
    Enable : CUChar;
    Spare : Array[CUChar,3];
    BatteryLevel : CULong;
    PowerPolicy : POWER_ACTION_POLICY;
    MinSystemState : SYSTEM_POWER_STATE;
}

static SYSTEM_POWER_LEVEL = _SYSTEM_POWER_LEVEL;

static PSYSTEM_POWER_LEVEL = Pointer[_SYSTEM_POWER_LEVEL];

record _SYSTEM_POWER_POLICY {
    Revision : CULong;
    PowerButton : POWER_ACTION_POLICY;
    SleepButton : POWER_ACTION_POLICY;
    LidClose : POWER_ACTION_POLICY;
    LidOpenWake : SYSTEM_POWER_STATE;
    Reserved : CULong;
    Idle : POWER_ACTION_POLICY;
    IdleTimeout : CULong;
    IdleSensitivity : CUChar;
    DynamicThrottle : CUChar;
    Spare2 : Array[CUChar,2];
    MinSleep : SYSTEM_POWER_STATE;
    MaxSleep : SYSTEM_POWER_STATE;
    ReducedLatencySleep : SYSTEM_POWER_STATE;
    WinLogonFlags : CULong;
    Spare3 : CULong;
    DozeS4Timeout : CULong;
    BroadcastCapacityResolution : CULong;
    DischargePolicy : Array[SYSTEM_POWER_LEVEL,4];
    VideoTimeout : CULong;
    VideoDimDisplay : CUChar;
    VideoReserved : Array[CULong,3];
    SpindownTimeout : CULong;
    OptimizeForPower : CUChar;
    FanThrottleTolerance : CUChar;
    ForcedThrottle : CUChar;
    MinThrottle : CUChar;
    OverThrottled : POWER_ACTION_POLICY;
}

static SYSTEM_POWER_POLICY = _SYSTEM_POWER_POLICY;

static PSYSTEM_POWER_POLICY = Pointer[_SYSTEM_POWER_POLICY];

record _SYSTEM_POWER_CAPABILITIES {
    PowerButtonPresent : CUChar;
    SleepButtonPresent : CUChar;
    LidPresent : CUChar;
    SystemS1 : CUChar;
    SystemS2 : CUChar;
    SystemS3 : CUChar;
    SystemS4 : CUChar;
    SystemS5 : CUChar;
    HiberFilePresent : CUChar;
    FullWake : CUChar;
    VideoDimPresent : CUChar;
    ApmPresent : CUChar;
    UpsPresent : CUChar;
    ThermalControl : CUChar;
    ProcessorThrottle : CUChar;
    ProcessorMinThrottle : CUChar;
    ProcessorMaxThrottle : CUChar;
    spare2 : Array[CUChar,4];
    DiskSpinDown : CUChar;
    spare3 : Array[CUChar,8];
    SystemBatteriesPresent : CUChar;
    BatteriesAreShortTerm : CUChar;
    BatteryScale : Array[BATTERY_REPORTING_SCALE,3];
    AcOnLineWake : SYSTEM_POWER_STATE;
    SoftLidWake : SYSTEM_POWER_STATE;
    RtcWake : SYSTEM_POWER_STATE;
    MinDeviceWakeState : SYSTEM_POWER_STATE;
    DefaultLowLatencyWake : SYSTEM_POWER_STATE;
}

static SYSTEM_POWER_CAPABILITIES = _SYSTEM_POWER_CAPABILITIES;

static PSYSTEM_POWER_CAPABILITIES = Pointer[_SYSTEM_POWER_CAPABILITIES];

record _SYSTEM_BATTERY_STATE {
    AcOnLine : CUChar;
    BatteryPresent : CUChar;
    Charging : CUChar;
    Discharging : CUChar;
    Spare1 : Array[CUChar,4];
    MaxCapacity : CULong;
    RemainingCapacity : CULong;
    Rate : CULong;
    EstimatedTime : CULong;
    DefaultAlert1 : CULong;
    DefaultAlert2 : CULong;
}

static SYSTEM_BATTERY_STATE = _SYSTEM_BATTERY_STATE;

static PSYSTEM_BATTERY_STATE = Pointer[_SYSTEM_BATTERY_STATE];

static SystemPowerPolicyAc = 0;
static SystemPowerPolicyDc = 1;
static VerifySystemPolicyAc = 2;
static VerifySystemPolicyDc = 3;
static SystemPowerCapabilities = 4;
static SystemBatteryState = 5;
static SystemPowerStateHandler = 6;
static ProcessorStateHandler = 7;
static SystemPowerPolicyCurrent = 8;
static AdministratorPowerPolicy = 9;
static SystemReserveHiberFile = 10;
static ProcessorInformation = 11;
static SystemPowerInformation = 12;
static ProcessorStateHandler2 = 13;
static LastWakeTime = 14;
static LastSleepTime = 15;
static SystemExecutionState = 16;
static SystemPowerStateNotifyHandler = 17;
static ProcessorPowerPolicyAc = 18;
static ProcessorPowerPolicyDc = 19;
static VerifyProcessorPowerPolicyAc = 20;
static VerifyProcessorPowerPolicyDc = 21;
static ProcessorPowerPolicyCurrent = 22;

static POWER_INFORMATION_LEVEL = Int;

record _SYSTEM_POWER_INFORMATION {
    MaxIdlenessAllowed : CULong;
    Idleness : CULong;
    TimeRemaining : CULong;
    CoolingMode : CUChar;
}

static SYSTEM_POWER_INFORMATION = _SYSTEM_POWER_INFORMATION;

static PSYSTEM_POWER_INFORMATION = Pointer[_SYSTEM_POWER_INFORMATION];

record _PROCESSOR_POWER_POLICY_INFO {
    TimeCheck : CULong;
    DemoteLimit : CULong;
    PromoteLimit : CULong;
    DemotePercent : CUChar;
    PromotePercent : CUChar;
    Spare : Array[CUChar,2];
    AllowDemotion : CULong;
    AllowPromotion : CULong;
    Reserved : CULong;
}

static PROCESSOR_POWER_POLICY_INFO = _PROCESSOR_POWER_POLICY_INFO;

static PPROCESSOR_POWER_POLICY_INFO = Pointer[_PROCESSOR_POWER_POLICY_INFO];

record _PROCESSOR_POWER_POLICY {
    Revision : CULong;
    DynamicThrottle : CUChar;
    Spare : Array[CUChar,3];
    Reserved : CULong;
    PolicyCount : CULong;
    Policy : Array[PROCESSOR_POWER_POLICY_INFO,3];
}

static PROCESSOR_POWER_POLICY = _PROCESSOR_POWER_POLICY;

static PPROCESSOR_POWER_POLICY = Pointer[_PROCESSOR_POWER_POLICY];

record _ADMINISTRATOR_POWER_POLICY {
    MinSleep : SYSTEM_POWER_STATE;
    MaxSleep : SYSTEM_POWER_STATE;
    MinVideoTimeout : CULong;
    MaxVideoTimeout : CULong;
    MinSpindownTimeout : CULong;
    MaxSpindownTimeout : CULong;
}

static ADMINISTRATOR_POWER_POLICY = _ADMINISTRATOR_POWER_POLICY;

static PADMINISTRATOR_POWER_POLICY = Pointer[_ADMINISTRATOR_POWER_POLICY];

static OSVERSIONINFO = OSVERSIONINFOA;

static POSVERSIONINFO = Pointer[OSVERSIONINFOA];

static LPOSVERSIONINFO = Pointer[OSVERSIONINFOA];

static OSVERSIONINFOEX = OSVERSIONINFOEXA;

static POSVERSIONINFOEX = Pointer[OSVERSIONINFOEXA];

static LPOSVERSIONINFOEX = Pointer[OSVERSIONINFOEXA];

static WPARAM = UInt;

static LPARAM = CLong;

static LRESULT = CLong;

static HRESULT = CLong;

static ATOM = UShort;

static HGLOBAL = HANDLE;

static HLOCAL = HANDLE;

static GLOBALHANDLE = HANDLE;

static LOCALHANDLE = HANDLE;

static HGDIOBJ = RawPointer;

record HACCEL__ {
    i : Int;
}

static HACCEL = Pointer[HACCEL__];

record HBITMAP__ {
    i : Int;
}

static HBITMAP = Pointer[HBITMAP__];

record HBRUSH__ {
    i : Int;
}

static HBRUSH = Pointer[HBRUSH__];

record HCOLORSPACE__ {
    i : Int;
}

static HCOLORSPACE = Pointer[HCOLORSPACE__];

record HDC__ {
    i : Int;
}

static HDC = Pointer[HDC__];

record HGLRC__ {
    i : Int;
}

static HGLRC = Pointer[HGLRC__];

record HDESK__ {
    i : Int;
}

static HDESK = Pointer[HDESK__];

record HENHMETAFILE__ {
    i : Int;
}

static HENHMETAFILE = Pointer[HENHMETAFILE__];

record HFONT__ {
    i : Int;
}

static HFONT = Pointer[HFONT__];

record HICON__ {
    i : Int;
}

static HICON = Pointer[HICON__];

record HKEY__ {
    i : Int;
}

static HKEY = Pointer[HKEY__];

record HMONITOR__ {
    i : Int;
}

static HMONITOR = Pointer[HMONITOR__];

record HTERMINAL__ {
    i : Int;
}

static HTERMINAL = Pointer[HTERMINAL__];

record HWINEVENTHOOK__ {
    i : Int;
}

static HWINEVENTHOOK = Pointer[HWINEVENTHOOK__];

static PHKEY = Pointer[HKEY];

record HMENU__ {
    i : Int;
}

static HMENU = Pointer[HMENU__];

record HMETAFILE__ {
    i : Int;
}

static HMETAFILE = Pointer[HMETAFILE__];

record HINSTANCE__ {
    i : Int;
}

static HINSTANCE = Pointer[HINSTANCE__];

static HMODULE = HINSTANCE;

record HPALETTE__ {
    i : Int;
}

static HPALETTE = Pointer[HPALETTE__];

record HPEN__ {
    i : Int;
}

static HPEN = Pointer[HPEN__];

record HRGN__ {
    i : Int;
}

static HRGN = Pointer[HRGN__];

record HRSRC__ {
    i : Int;
}

static HRSRC = Pointer[HRSRC__];

record HSTR__ {
    i : Int;
}

static HSTR = Pointer[HSTR__];

record HTASK__ {
    i : Int;
}

static HTASK = Pointer[HTASK__];

record HWND__ {
    i : Int;
}

static HWND = Pointer[HWND__];

record HWINSTA__ {
    i : Int;
}

static HWINSTA = Pointer[HWINSTA__];

record HKL__ {
    i : Int;
}

static HKL = Pointer[HKL__];

static HFILE = Int;

static HCURSOR = HICON;

static COLORREF = CULong;

static FARPROC = StdCallCodePointer[Int];

static NEARPROC = StdCallCodePointer[Int];

static PROC = StdCallCodePointer[Int];

record tagRECT {
    left : CLong;
    top : CLong;
    right : CLong;
    bottom : CLong;
}

static RECT = tagRECT;

static PRECT = Pointer[tagRECT];

static LPRECT = Pointer[tagRECT];

static LPCRECT = Pointer[RECT];

record tagRECTL {
    left : CLong;
    top : CLong;
    right : CLong;
    bottom : CLong;
}

static RECTL = tagRECTL;

static PRECTL = Pointer[tagRECTL];

static LPRECTL = Pointer[tagRECTL];

static LPCRECTL = Pointer[RECTL];

record tagPOINT {
    x : CLong;
    y : CLong;
}

static POINT = tagPOINT;

static POINTL = tagPOINT;

static PPOINT = Pointer[tagPOINT];

static LPPOINT = Pointer[tagPOINT];

static PPOINTL = Pointer[tagPOINT];

static LPPOINTL = Pointer[tagPOINT];

record tagSIZE {
    cx : CLong;
    cy : CLong;
}

static SIZE = tagSIZE;

static SIZEL = tagSIZE;

static PSIZE = Pointer[tagSIZE];

static LPSIZE = Pointer[tagSIZE];

static PSIZEL = Pointer[tagSIZE];

static LPSIZEL = Pointer[tagSIZE];

record tagPOINTS {
    x : Short;
    y : Short;
}

static POINTS = tagPOINTS;

static PPOINTS = Pointer[tagPOINTS];

static LPPOINTS = Pointer[tagPOINTS];

record _CHAR_INFO {
    Char : AUnionType;
    Attributes : UShort;
}

static CHAR_INFO = _CHAR_INFO;

static PCHAR_INFO = Pointer[_CHAR_INFO];

record _SMALL_RECT {
    Left : Short;
    Top : Short;
    Right : Short;
    Bottom : Short;
}

static SMALL_RECT = _SMALL_RECT;

static PSMALL_RECT = Pointer[_SMALL_RECT];

record _CONSOLE_CURSOR_INFO {
    dwSize : CULong;
    bVisible : Int;
}

static CONSOLE_CURSOR_INFO = _CONSOLE_CURSOR_INFO;

static PCONSOLE_CURSOR_INFO = Pointer[_CONSOLE_CURSOR_INFO];

record _COORD {
    X : Short;
    Y : Short;
}

static COORD = _COORD;

static PCOORD = Pointer[_COORD];

record _CONSOLE_FONT_INFO {
    nFont : CULong;
    dwFontSize : COORD;
}

static CONSOLE_FONT_INFO = _CONSOLE_FONT_INFO;

static PCONSOLE_FONT_INFO = Pointer[_CONSOLE_FONT_INFO];

record _CONSOLE_SCREEN_BUFFER_INFO {
    dwSize : COORD;
    dwCursorPosition : COORD;
    wAttributes : UShort;
    srWindow : SMALL_RECT;
    dwMaximumWindowSize : COORD;
}

static CONSOLE_SCREEN_BUFFER_INFO = _CONSOLE_SCREEN_BUFFER_INFO;

static PCONSOLE_SCREEN_BUFFER_INFO = Pointer[_CONSOLE_SCREEN_BUFFER_INFO];

static PHANDLER_ROUTINE = StdCallCodePointer[CULong,Int];

record _KEY_EVENT_RECORD {
    bKeyDown : Int;
    wRepeatCount : UShort;
    wVirtualKeyCode : UShort;
    wVirtualScanCode : UShort;
    uChar : AUnionType;
    dwControlKeyState : CULong;
}

static KEY_EVENT_RECORD = _KEY_EVENT_RECORD;

record _MOUSE_EVENT_RECORD {
    dwMousePosition : COORD;
    dwButtonState : CULong;
    dwControlKeyState : CULong;
    dwEventFlags : CULong;
}

static MOUSE_EVENT_RECORD = _MOUSE_EVENT_RECORD;

record _WINDOW_BUFFER_SIZE_RECORD {
    dwSize : COORD;
}

static WINDOW_BUFFER_SIZE_RECORD = _WINDOW_BUFFER_SIZE_RECORD;

record _MENU_EVENT_RECORD {
    dwCommandId : UInt;
}

static MENU_EVENT_RECORD = _MENU_EVENT_RECORD;

static PMENU_EVENT_RECORD = Pointer[_MENU_EVENT_RECORD];

record _FOCUS_EVENT_RECORD {
    bSetFocus : Int;
}

static FOCUS_EVENT_RECORD = _FOCUS_EVENT_RECORD;

record _INPUT_RECORD {
    EventType : UShort;
    Event : AUnionType;
}

static INPUT_RECORD = _INPUT_RECORD;

static PINPUT_RECORD = Pointer[_INPUT_RECORD];

external (stdcall) AllocConsole() : Int;

external (stdcall) CreateConsoleScreenBuffer(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : Pointer[SECURITY_ATTRIBUTES],
    argument3 : CULong,
    argument4 : LPVOID) : HANDLE;

external (stdcall) FillConsoleOutputAttribute(
    argument0 : HANDLE,
    argument1 : UShort,
    argument2 : CULong,
    argument3 : COORD,
    argument4 : PDWORD) : Int;

external (stdcall) FillConsoleOutputCharacterA(
    argument0 : HANDLE,
    argument1 : CChar,
    argument2 : CULong,
    argument3 : COORD,
    argument4 : PDWORD) : Int;

external (stdcall) FillConsoleOutputCharacterW(
    argument0 : HANDLE,
    argument1 : UShort,
    argument2 : CULong,
    argument3 : COORD,
    argument4 : PDWORD) : Int;

external (stdcall) FlushConsoleInputBuffer(
    argument0 : HANDLE) : Int;

external (stdcall) FreeConsole() : Int;

external (stdcall) GenerateConsoleCtrlEvent(
    argument0 : CULong,
    argument1 : CULong) : Int;

external (stdcall) GetConsoleCP() : UInt;

external (stdcall) GetConsoleCursorInfo(
    argument0 : HANDLE,
    argument1 : PCONSOLE_CURSOR_INFO) : Int;

external (stdcall) GetConsoleMode(
    argument0 : HANDLE,
    argument1 : PDWORD) : Int;

external (stdcall) GetConsoleOutputCP() : UInt;

external (stdcall) GetConsoleScreenBufferInfo(
    argument0 : HANDLE,
    argument1 : PCONSOLE_SCREEN_BUFFER_INFO) : Int;

external (stdcall) GetConsoleTitleA(
    argument0 : LPSTR,
    argument1 : CULong) : CULong;

external (stdcall) GetConsoleTitleW(
    argument0 : LPWSTR,
    argument1 : CULong) : CULong;

external (stdcall) GetLargestConsoleWindowSize(
    argument0 : HANDLE) : COORD;

external (stdcall) GetNumberOfConsoleInputEvents(
    argument0 : HANDLE,
    argument1 : PDWORD) : Int;

external (stdcall) GetNumberOfConsoleMouseButtons(
    argument0 : PDWORD) : Int;

external (stdcall) PeekConsoleInputA(
    argument0 : HANDLE,
    argument1 : PINPUT_RECORD,
    argument2 : CULong,
    argument3 : PDWORD) : Int;

external (stdcall) PeekConsoleInputW(
    argument0 : HANDLE,
    argument1 : PINPUT_RECORD,
    argument2 : CULong,
    argument3 : PDWORD) : Int;

external (stdcall) ReadConsoleA(
    argument0 : HANDLE,
    argument1 : PVOID,
    argument2 : CULong,
    argument3 : PDWORD,
    argument4 : PVOID) : Int;

external (stdcall) ReadConsoleW(
    argument0 : HANDLE,
    argument1 : PVOID,
    argument2 : CULong,
    argument3 : PDWORD,
    argument4 : PVOID) : Int;

external (stdcall) ReadConsoleInputA(
    argument0 : HANDLE,
    argument1 : PINPUT_RECORD,
    argument2 : CULong,
    argument3 : PDWORD) : Int;

external (stdcall) ReadConsoleInputW(
    argument0 : HANDLE,
    argument1 : PINPUT_RECORD,
    argument2 : CULong,
    argument3 : PDWORD) : Int;

external (stdcall) ReadConsoleOutputAttribute(
    argument0 : HANDLE,
    argument1 : LPWORD,
    argument2 : CULong,
    argument3 : COORD,
    argument4 : LPDWORD) : Int;

external (stdcall) ReadConsoleOutputCharacterA(
    argument0 : HANDLE,
    argument1 : LPSTR,
    argument2 : CULong,
    argument3 : COORD,
    argument4 : PDWORD) : Int;

external (stdcall) ReadConsoleOutputCharacterW(
    argument0 : HANDLE,
    argument1 : LPWSTR,
    argument2 : CULong,
    argument3 : COORD,
    argument4 : PDWORD) : Int;

external (stdcall) ReadConsoleOutputA(
    argument0 : HANDLE,
    argument1 : PCHAR_INFO,
    argument2 : COORD,
    argument3 : COORD,
    argument4 : PSMALL_RECT) : Int;

external (stdcall) ReadConsoleOutputW(
    argument0 : HANDLE,
    argument1 : PCHAR_INFO,
    argument2 : COORD,
    argument3 : COORD,
    argument4 : PSMALL_RECT) : Int;

external (stdcall) ScrollConsoleScreenBufferA(
    argument0 : HANDLE,
    argument1 : Pointer[SMALL_RECT],
    argument2 : Pointer[SMALL_RECT],
    argument3 : COORD,
    argument4 : Pointer[CHAR_INFO]) : Int;

external (stdcall) ScrollConsoleScreenBufferW(
    argument0 : HANDLE,
    argument1 : Pointer[SMALL_RECT],
    argument2 : Pointer[SMALL_RECT],
    argument3 : COORD,
    argument4 : Pointer[CHAR_INFO]) : Int;

external (stdcall) SetConsoleActiveScreenBuffer(
    argument0 : HANDLE) : Int;

external (stdcall) SetConsoleCP(
    argument0 : UInt) : Int;

external (stdcall) SetConsoleCtrlHandler(
    argument0 : PHANDLER_ROUTINE,
    argument1 : Int) : Int;

external (stdcall) SetConsoleCursorInfo(
    argument0 : HANDLE,
    argument1 : Pointer[CONSOLE_CURSOR_INFO]) : Int;

external (stdcall) SetConsoleCursorPosition(
    argument0 : HANDLE,
    argument1 : COORD) : Int;

external (stdcall) SetConsoleMode(
    argument0 : HANDLE,
    argument1 : CULong) : Int;

external (stdcall) SetConsoleOutputCP(
    argument0 : UInt) : Int;

external (stdcall) SetConsoleScreenBufferSize(
    argument0 : HANDLE,
    argument1 : COORD) : Int;

external (stdcall) SetConsoleTextAttribute(
    argument0 : HANDLE,
    argument1 : UShort) : Int;

external (stdcall) SetConsoleTitleA(
    argument0 : LPCSTR) : Int;

external (stdcall) SetConsoleTitleW(
    argument0 : LPCWSTR) : Int;

external (stdcall) SetConsoleWindowInfo(
    argument0 : HANDLE,
    argument1 : Int,
    argument2 : Pointer[SMALL_RECT]) : Int;

external (stdcall) WriteConsoleA(
    argument0 : HANDLE,
    argument1 : PCVOID,
    argument2 : CULong,
    argument3 : PDWORD,
    argument4 : PVOID) : Int;

external (stdcall) WriteConsoleW(
    argument0 : HANDLE,
    argument1 : PCVOID,
    argument2 : CULong,
    argument3 : PDWORD,
    argument4 : PVOID) : Int;

external (stdcall) WriteConsoleInputA(
    argument0 : HANDLE,
    argument1 : Pointer[INPUT_RECORD],
    argument2 : CULong,
    argument3 : PDWORD) : Int;

external (stdcall) WriteConsoleInputW(
    argument0 : HANDLE,
    argument1 : Pointer[INPUT_RECORD],
    argument2 : CULong,
    argument3 : PDWORD) : Int;

external (stdcall) WriteConsoleOutputA(
    argument0 : HANDLE,
    argument1 : Pointer[CHAR_INFO],
    argument2 : COORD,
    argument3 : COORD,
    argument4 : PSMALL_RECT) : Int;

external (stdcall) WriteConsoleOutputW(
    argument0 : HANDLE,
    argument1 : Pointer[CHAR_INFO],
    argument2 : COORD,
    argument3 : COORD,
    argument4 : PSMALL_RECT) : Int;

external (stdcall) WriteConsoleOutputAttribute(
    argument0 : HANDLE,
    argument1 : Pointer[UShort],
    argument2 : CULong,
    argument3 : COORD,
    argument4 : PDWORD) : Int;

external (stdcall) WriteConsoleOutputCharacterA(
    argument0 : HANDLE,
    argument1 : LPCSTR,
    argument2 : CULong,
    argument3 : COORD,
    argument4 : PDWORD) : Int;

external (stdcall) WriteConsoleOutputCharacterW(
    argument0 : HANDLE,
    argument1 : LPCWSTR,
    argument2 : CULong,
    argument3 : COORD,
    argument4 : PDWORD) : Int;

record _FILETIME {
    dwLowDateTime : CULong;
    dwHighDateTime : CULong;
}

static FILETIME = _FILETIME;

static PFILETIME = Pointer[_FILETIME];

static LPFILETIME = Pointer[_FILETIME];

record _BY_HANDLE_FILE_INFORMATION {
    dwFileAttributes : CULong;
    ftCreationTime : FILETIME;
    ftLastAccessTime : FILETIME;
    ftLastWriteTime : FILETIME;
    dwVolumeSerialNumber : CULong;
    nFileSizeHigh : CULong;
    nFileSizeLow : CULong;
    nNumberOfLinks : CULong;
    nFileIndexHigh : CULong;
    nFileIndexLow : CULong;
}

static BY_HANDLE_FILE_INFORMATION = _BY_HANDLE_FILE_INFORMATION;

static LPBY_HANDLE_FILE_INFORMATION = Pointer[_BY_HANDLE_FILE_INFORMATION];

record _DCB {
    DCBlength : CULong;
    BaudRate : CULong;
    fBinary : CULong;
    fParity : CULong;
    fOutxCtsFlow : CULong;
    fOutxDsrFlow : CULong;
    fDtrControl : CULong;
    fDsrSensitivity : CULong;
    fTXContinueOnXoff : CULong;
    fOutX : CULong;
    fInX : CULong;
    fErrorChar : CULong;
    fNull : CULong;
    fRtsControl : CULong;
    fAbortOnError : CULong;
    fDummy2 : CULong;
    wReserved : UShort;
    XonLim : UShort;
    XoffLim : UShort;
    ByteSize : CUChar;
    Parity : CUChar;
    StopBits : CUChar;
    XonChar : CChar;
    XoffChar : CChar;
    ErrorChar : CChar;
    EofChar : CChar;
    EvtChar : CChar;
    wReserved1 : UShort;
}

static DCB = _DCB;

static LPDCB = Pointer[_DCB];

record _COMM_CONFIG {
    dwSize : CULong;
    wVersion : UShort;
    wReserved : UShort;
    dcb : DCB;
    dwProviderSubType : CULong;
    dwProviderOffset : CULong;
    dwProviderSize : CULong;
    wcProviderData : Array[UShort,1];
}

static COMMCONFIG = _COMM_CONFIG;

static LPCOMMCONFIG = Pointer[_COMM_CONFIG];

record _COMMPROP {
    wPacketLength : UShort;
    wPacketVersion : UShort;
    dwServiceMask : CULong;
    dwReserved1 : CULong;
    dwMaxTxQueue : CULong;
    dwMaxRxQueue : CULong;
    dwMaxBaud : CULong;
    dwProvSubType : CULong;
    dwProvCapabilities : CULong;
    dwSettableParams : CULong;
    dwSettableBaud : CULong;
    wSettableData : UShort;
    wSettableStopParity : UShort;
    dwCurrentTxQueue : CULong;
    dwCurrentRxQueue : CULong;
    dwProvSpec1 : CULong;
    dwProvSpec2 : CULong;
    wcProvChar : Array[UShort,1];
}

static COMMPROP = _COMMPROP;

static LPCOMMPROP = Pointer[_COMMPROP];

record _COMMTIMEOUTS {
    ReadIntervalTimeout : CULong;
    ReadTotalTimeoutMultiplier : CULong;
    ReadTotalTimeoutConstant : CULong;
    WriteTotalTimeoutMultiplier : CULong;
    WriteTotalTimeoutConstant : CULong;
}

static COMMTIMEOUTS = _COMMTIMEOUTS;

static LPCOMMTIMEOUTS = Pointer[_COMMTIMEOUTS];

record _COMSTAT {
    fCtsHold : CULong;
    fDsrHold : CULong;
    fRlsdHold : CULong;
    fXoffHold : CULong;
    fXoffSent : CULong;
    fEof : CULong;
    fTxim : CULong;
    fReserved : CULong;
    cbInQue : CULong;
    cbOutQue : CULong;
}

static COMSTAT = _COMSTAT;

static LPCOMSTAT = Pointer[_COMSTAT];

static LPTHREAD_START_ROUTINE = StdCallCodePointer[RawPointer,CULong];

record _CREATE_PROCESS_DEBUG_INFO {
    hFile : HANDLE;
    hProcess : HANDLE;
    hThread : HANDLE;
    lpBaseOfImage : LPVOID;
    dwDebugInfoFileOffset : CULong;
    nDebugInfoSize : CULong;
    lpThreadLocalBase : LPVOID;
    lpStartAddress : LPTHREAD_START_ROUTINE;
    lpImageName : LPVOID;
    fUnicode : UShort;
}

static CREATE_PROCESS_DEBUG_INFO = _CREATE_PROCESS_DEBUG_INFO;

static LPCREATE_PROCESS_DEBUG_INFO = Pointer[_CREATE_PROCESS_DEBUG_INFO];

record _CREATE_THREAD_DEBUG_INFO {
    hThread : HANDLE;
    lpThreadLocalBase : LPVOID;
    lpStartAddress : LPTHREAD_START_ROUTINE;
}

static CREATE_THREAD_DEBUG_INFO = _CREATE_THREAD_DEBUG_INFO;

static LPCREATE_THREAD_DEBUG_INFO = Pointer[_CREATE_THREAD_DEBUG_INFO];

record _EXCEPTION_DEBUG_INFO {
    ExceptionRecord : EXCEPTION_RECORD;
    dwFirstChance : CULong;
}

static EXCEPTION_DEBUG_INFO = _EXCEPTION_DEBUG_INFO;

static LPEXCEPTION_DEBUG_INFO = Pointer[_EXCEPTION_DEBUG_INFO];

record _EXIT_THREAD_DEBUG_INFO {
    dwExitCode : CULong;
}

static EXIT_THREAD_DEBUG_INFO = _EXIT_THREAD_DEBUG_INFO;

static LPEXIT_THREAD_DEBUG_INFO = Pointer[_EXIT_THREAD_DEBUG_INFO];

record _EXIT_PROCESS_DEBUG_INFO {
    dwExitCode : CULong;
}

static EXIT_PROCESS_DEBUG_INFO = _EXIT_PROCESS_DEBUG_INFO;

static LPEXIT_PROCESS_DEBUG_INFO = Pointer[_EXIT_PROCESS_DEBUG_INFO];

record _LOAD_DLL_DEBUG_INFO {
    hFile : HANDLE;
    lpBaseOfDll : LPVOID;
    dwDebugInfoFileOffset : CULong;
    nDebugInfoSize : CULong;
    lpImageName : LPVOID;
    fUnicode : UShort;
}

static LOAD_DLL_DEBUG_INFO = _LOAD_DLL_DEBUG_INFO;

static LPLOAD_DLL_DEBUG_INFO = Pointer[_LOAD_DLL_DEBUG_INFO];

record _UNLOAD_DLL_DEBUG_INFO {
    lpBaseOfDll : LPVOID;
}

static UNLOAD_DLL_DEBUG_INFO = _UNLOAD_DLL_DEBUG_INFO;

static LPUNLOAD_DLL_DEBUG_INFO = Pointer[_UNLOAD_DLL_DEBUG_INFO];

record _OUTPUT_DEBUG_STRING_INFO {
    lpDebugStringData : LPSTR;
    fUnicode : UShort;
    nDebugStringLength : UShort;
}

static OUTPUT_DEBUG_STRING_INFO = _OUTPUT_DEBUG_STRING_INFO;

static LPOUTPUT_DEBUG_STRING_INFO = Pointer[_OUTPUT_DEBUG_STRING_INFO];

record _RIP_INFO {
    dwError : CULong;
    dwType : CULong;
}

static RIP_INFO = _RIP_INFO;

static LPRIP_INFO = Pointer[_RIP_INFO];

record _DEBUG_EVENT {
    dwDebugEventCode : CULong;
    dwProcessId : CULong;
    dwThreadId : CULong;
    u : AUnionType;
}

static DEBUG_EVENT = _DEBUG_EVENT;

static LPDEBUG_EVENT = Pointer[_DEBUG_EVENT];

record _OVERLAPPED {
    Internal : CULong;
    InternalHigh : CULong;
    Offset : CULong;
    OffsetHigh : CULong;
    hEvent : HANDLE;
}

static OVERLAPPED = _OVERLAPPED;

static POVERLAPPED = Pointer[_OVERLAPPED];

static LPOVERLAPPED = Pointer[_OVERLAPPED];

record _STARTUPINFOA {
    cb : CULong;
    lpReserved : LPSTR;
    lpDesktop : LPSTR;
    lpTitle : LPSTR;
    dwX : CULong;
    dwY : CULong;
    dwXSize : CULong;
    dwYSize : CULong;
    dwXCountChars : CULong;
    dwYCountChars : CULong;
    dwFillAttribute : CULong;
    dwFlags : CULong;
    wShowWindow : UShort;
    cbReserved2 : UShort;
    lpReserved2 : PBYTE;
    hStdInput : HANDLE;
    hStdOutput : HANDLE;
    hStdError : HANDLE;
}

static STARTUPINFOA = _STARTUPINFOA;

static LPSTARTUPINFOA = Pointer[_STARTUPINFOA];

record _STARTUPINFOW {
    cb : CULong;
    lpReserved : LPWSTR;
    lpDesktop : LPWSTR;
    lpTitle : LPWSTR;
    dwX : CULong;
    dwY : CULong;
    dwXSize : CULong;
    dwYSize : CULong;
    dwXCountChars : CULong;
    dwYCountChars : CULong;
    dwFillAttribute : CULong;
    dwFlags : CULong;
    wShowWindow : UShort;
    cbReserved2 : UShort;
    lpReserved2 : PBYTE;
    hStdInput : HANDLE;
    hStdOutput : HANDLE;
    hStdError : HANDLE;
}

static STARTUPINFOW = _STARTUPINFOW;

static LPSTARTUPINFOW = Pointer[_STARTUPINFOW];

record _PROCESS_INFORMATION {
    hProcess : HANDLE;
    hThread : HANDLE;
    dwProcessId : CULong;
    dwThreadId : CULong;
}

static PROCESS_INFORMATION = _PROCESS_INFORMATION;

static PPROCESS_INFORMATION = Pointer[_PROCESS_INFORMATION];

static LPPROCESS_INFORMATION = Pointer[_PROCESS_INFORMATION];

record _CRITICAL_SECTION_DEBUG {
    Type : UShort;
    CreatorBackTraceIndex : UShort;
    CriticalSection : Pointer[_CRITICAL_SECTION];
    ProcessLocksList : LIST_ENTRY;
    EntryCount : CULong;
    ContentionCount : CULong;
    Spare : Array[CULong,2];
}

static CRITICAL_SECTION_DEBUG = _CRITICAL_SECTION_DEBUG;

static PCRITICAL_SECTION_DEBUG = Pointer[_CRITICAL_SECTION_DEBUG];

record _CRITICAL_SECTION {
    DebugInfo : PCRITICAL_SECTION_DEBUG;
    LockCount : CLong;
    RecursionCount : CLong;
    OwningThread : HANDLE;
    LockSemaphore : HANDLE;
    SpinCount : CULong;
}

static CRITICAL_SECTION = _CRITICAL_SECTION;

static PCRITICAL_SECTION = Pointer[_CRITICAL_SECTION];

static LPCRITICAL_SECTION = Pointer[_CRITICAL_SECTION];

record _SYSTEMTIME {
    wYear : UShort;
    wMonth : UShort;
    wDayOfWeek : UShort;
    wDay : UShort;
    wHour : UShort;
    wMinute : UShort;
    wSecond : UShort;
    wMilliseconds : UShort;
}

static SYSTEMTIME = _SYSTEMTIME;

static LPSYSTEMTIME = Pointer[_SYSTEMTIME];

record _WIN32_FILE_ATTRIBUTE_DATA {
    dwFileAttributes : CULong;
    ftCreationTime : FILETIME;
    ftLastAccessTime : FILETIME;
    ftLastWriteTime : FILETIME;
    nFileSizeHigh : CULong;
    nFileSizeLow : CULong;
}

static WIN32_FILE_ATTRIBUTE_DATA = _WIN32_FILE_ATTRIBUTE_DATA;

static LPWIN32_FILE_ATTRIBUTE_DATA = Pointer[_WIN32_FILE_ATTRIBUTE_DATA];

record _WIN32_FIND_DATAA {
    dwFileAttributes : CULong;
    ftCreationTime : FILETIME;
    ftLastAccessTime : FILETIME;
    ftLastWriteTime : FILETIME;
    nFileSizeHigh : CULong;
    nFileSizeLow : CULong;
    dwReserved0 : CULong;
    dwReserved1 : CULong;
    cFileName : Array[CChar,260];
    cAlternateFileName : Array[CChar,14];
}

static WIN32_FIND_DATAA = _WIN32_FIND_DATAA;

static PWIN32_FIND_DATAA = Pointer[_WIN32_FIND_DATAA];

static LPWIN32_FIND_DATAA = Pointer[_WIN32_FIND_DATAA];

record _WIN32_FIND_DATAW {
    dwFileAttributes : CULong;
    ftCreationTime : FILETIME;
    ftLastAccessTime : FILETIME;
    ftLastWriteTime : FILETIME;
    nFileSizeHigh : CULong;
    nFileSizeLow : CULong;
    dwReserved0 : CULong;
    dwReserved1 : CULong;
    cFileName : Array[UShort,260];
    cAlternateFileName : Array[UShort,14];
}

static WIN32_FIND_DATAW = _WIN32_FIND_DATAW;

static PWIN32_FIND_DATAW = Pointer[_WIN32_FIND_DATAW];

static LPWIN32_FIND_DATAW = Pointer[_WIN32_FIND_DATAW];

record _WIN32_STREAM_ID {
    dwStreamId : CULong;
    dwStreamAttributes : CULong;
    Size : LARGE_INTEGER;
    dwStreamNameSize : CULong;
    cStreamName : Array[UShort,1];
}

static WIN32_STREAM_ID = _WIN32_STREAM_ID;

static LPWIN32_STREAM_ID = Pointer[_WIN32_STREAM_ID];

static FindExInfoStandard = 0;
static FindExInfoMaxInfoLevel = 1;

static FINDEX_INFO_LEVELS = Int;

static FindExSearchNameMatch = 0;
static FindExSearchLimitToDirectories = 1;
static FindExSearchLimitToDevices = 2;
static FindExSearchMaxSearchOp = 3;

static FINDEX_SEARCH_OPS = Int;

static AclRevisionInformation = 1;
static AclSizeInformation = 2;

static ACL_INFORMATION_CLASS = Int;

record tagHW_PROFILE_INFOA {
    dwDockInfo : CULong;
    szHwProfileGuid : Array[CChar,39];
    szHwProfileName : Array[CChar,80];
}

static HW_PROFILE_INFOA = tagHW_PROFILE_INFOA;

static LPHW_PROFILE_INFOA = Pointer[tagHW_PROFILE_INFOA];

record tagHW_PROFILE_INFOW {
    dwDockInfo : CULong;
    szHwProfileGuid : Array[UShort,39];
    szHwProfileName : Array[UShort,80];
}

static HW_PROFILE_INFOW = tagHW_PROFILE_INFOW;

static LPHW_PROFILE_INFOW = Pointer[tagHW_PROFILE_INFOW];

static GetFileExInfoStandard = 0;
static GetFileExMaxInfoLevel = 1;

static GET_FILEEX_INFO_LEVELS = Int;

record _SYSTEM_INFO {
    unnamed_field0 : AUnionType;
    dwPageSize : CULong;
    lpMinimumApplicationAddress : PVOID;
    lpMaximumApplicationAddress : PVOID;
    dwActiveProcessorMask : CULong;
    dwNumberOfProcessors : CULong;
    dwProcessorType : CULong;
    dwAllocationGranularity : CULong;
    wProcessorLevel : UShort;
    wProcessorRevision : UShort;
}

static SYSTEM_INFO = _SYSTEM_INFO;

static LPSYSTEM_INFO = Pointer[_SYSTEM_INFO];

record _SYSTEM_POWER_STATUS {
    ACLineStatus : CUChar;
    BatteryFlag : CUChar;
    BatteryLifePercent : CUChar;
    Reserved1 : CUChar;
    BatteryLifeTime : CULong;
    BatteryFullLifeTime : CULong;
}

static SYSTEM_POWER_STATUS = _SYSTEM_POWER_STATUS;

static LPSYSTEM_POWER_STATUS = Pointer[_SYSTEM_POWER_STATUS];

record _TIME_ZONE_INFORMATION {
    Bias : CLong;
    StandardName : Array[UShort,32];
    StandardDate : SYSTEMTIME;
    StandardBias : CLong;
    DaylightName : Array[UShort,32];
    DaylightDate : SYSTEMTIME;
    DaylightBias : CLong;
}

static TIME_ZONE_INFORMATION = _TIME_ZONE_INFORMATION;

static LPTIME_ZONE_INFORMATION = Pointer[_TIME_ZONE_INFORMATION];

record _MEMORYSTATUS {
    dwLength : CULong;
    dwMemoryLoad : CULong;
    dwTotalPhys : CULong;
    dwAvailPhys : CULong;
    dwTotalPageFile : CULong;
    dwAvailPageFile : CULong;
    dwTotalVirtual : CULong;
    dwAvailVirtual : CULong;
}

static MEMORYSTATUS = _MEMORYSTATUS;

static LPMEMORYSTATUS = Pointer[_MEMORYSTATUS];

record _LDT_ENTRY {
    LimitLow : UShort;
    BaseLow : UShort;
    HighWord : AUnionType;
}

static LDT_ENTRY = _LDT_ENTRY;

static PLDT_ENTRY = Pointer[_LDT_ENTRY];

static LPLDT_ENTRY = Pointer[_LDT_ENTRY];

record _PROCESS_HEAP_ENTRY {
    lpData : PVOID;
    cbData : CULong;
    cbOverhead : CUChar;
    iRegionIndex : CUChar;
    wFlags : UShort;
    unnamed_field5 : AUnionType;
}

static PROCESS_HEAP_ENTRY = _PROCESS_HEAP_ENTRY;

static LPPROCESS_HEAP_ENTRY = Pointer[_PROCESS_HEAP_ENTRY];

record _OFSTRUCT {
    cBytes : CUChar;
    fFixedDisk : CUChar;
    nErrCode : UShort;
    Reserved1 : UShort;
    Reserved2 : UShort;
    szPathName : Array[CChar,128];
}

static OFSTRUCT = _OFSTRUCT;

static LPOFSTRUCT = Pointer[_OFSTRUCT];

static POFSTRUCT = Pointer[_OFSTRUCT];

record _WIN_CERTIFICATE {
    dwLength : CULong;
    wRevision : UShort;
    wCertificateType : UShort;
    bCertificate : Array[CUChar,1];
}

static WIN_CERTIFICATE = _WIN_CERTIFICATE;

static LPWIN_CERTIFICATE = Pointer[_WIN_CERTIFICATE];

static LPPROGRESS_ROUTINE = StdCallCodePointer[AUnionType,AUnionType,AUnionType,AUnionType,CULong,CULong,RawPointer,RawPointer,RawPointer,CULong];

static LPFIBER_START_ROUTINE = StdCallCodePointer[RawPointer,Void];

static ENUMRESLANGPROCA = StdCallCodePointer[Pointer[HINSTANCE__],Pointer[CChar],Pointer[CChar],UShort,CLong,Int];

static ENUMRESLANGPROCW = StdCallCodePointer[Pointer[HINSTANCE__],Pointer[UShort],Pointer[UShort],UShort,CLong,Int];

static ENUMRESNAMEPROCA = StdCallCodePointer[Pointer[HINSTANCE__],Pointer[CChar],Pointer[CChar],CLong,Int];

static ENUMRESNAMEPROCW = StdCallCodePointer[Pointer[HINSTANCE__],Pointer[UShort],Pointer[UShort],CLong,Int];

static ENUMRESTYPEPROCA = StdCallCodePointer[Pointer[HINSTANCE__],Pointer[CChar],CLong,Int];

static ENUMRESTYPEPROCW = StdCallCodePointer[Pointer[HINSTANCE__],Pointer[UShort],CLong,Int];

static LPOVERLAPPED_COMPLETION_ROUTINE = StdCallCodePointer[CULong,CULong,Pointer[_OVERLAPPED],Void];

static PTOP_LEVEL_EXCEPTION_FILTER = StdCallCodePointer[Pointer[_EXCEPTION_POINTERS],CLong];

static LPTOP_LEVEL_EXCEPTION_FILTER = PTOP_LEVEL_EXCEPTION_FILTER;

static PAPCFUNC = StdCallCodePointer[CULong,Void];

static PTIMERAPCROUTINE = StdCallCodePointer[RawPointer,CULong,CULong,Void];

external (stdcall) WinMain(
    argument0 : HINSTANCE,
    argument1 : HINSTANCE,
    argument2 : LPSTR,
    argument3 : Int) : Int;

external (stdcall) wWinMain(
    argument0 : HINSTANCE,
    argument1 : HINSTANCE,
    argument2 : LPWSTR,
    argument3 : Int) : Int;

external (stdcall) _hread(
    argument0 : Int,
    argument1 : LPVOID,
    argument2 : CLong) : CLong;

external (stdcall) _hwrite(
    argument0 : Int,
    argument1 : LPCSTR,
    argument2 : CLong) : CLong;

external (stdcall) _lclose(
    argument0 : Int) : Int;

external (stdcall) _lcreat(
    argument0 : LPCSTR,
    argument1 : Int) : Int;

external (stdcall) _llseek(
    argument0 : Int,
    argument1 : CLong,
    argument2 : Int) : CLong;

external (stdcall) _lopen(
    argument0 : LPCSTR,
    argument1 : Int) : Int;

external (stdcall) _lread(
    argument0 : Int,
    argument1 : LPVOID,
    argument2 : UInt) : UInt;

external (stdcall) _lwrite(
    argument0 : Int,
    argument1 : LPCSTR,
    argument2 : UInt) : UInt;

external (stdcall) AccessCheck(
    argument0 : PSECURITY_DESCRIPTOR,
    argument1 : HANDLE,
    argument2 : CULong,
    argument3 : PGENERIC_MAPPING,
    argument4 : PPRIVILEGE_SET,
    argument5 : PDWORD,
    argument6 : PDWORD,
    argument7 : PBOOL) : Int;

external (stdcall) AccessCheckAndAuditAlarmA(
    argument0 : LPCSTR,
    argument1 : LPVOID,
    argument2 : LPSTR,
    argument3 : LPSTR,
    argument4 : PSECURITY_DESCRIPTOR,
    argument5 : CULong,
    argument6 : PGENERIC_MAPPING,
    argument7 : Int,
    argument8 : PDWORD,
    argument9 : PBOOL,
    argument10 : PBOOL) : Int;

external (stdcall) AccessCheckAndAuditAlarmW(
    argument0 : LPCWSTR,
    argument1 : LPVOID,
    argument2 : LPWSTR,
    argument3 : LPWSTR,
    argument4 : PSECURITY_DESCRIPTOR,
    argument5 : CULong,
    argument6 : PGENERIC_MAPPING,
    argument7 : Int,
    argument8 : PDWORD,
    argument9 : PBOOL,
    argument10 : PBOOL) : Int;

external (stdcall) AddAccessAllowedAce(
    argument0 : PACL,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : PSID) : Int;

external (stdcall) AddAccessDeniedAce(
    argument0 : PACL,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : PSID) : Int;

external (stdcall) AddAce(
    argument0 : PACL,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : PVOID,
    argument4 : CULong) : Int;

external (stdcall) AddAtomA(
    argument0 : LPCSTR) : UShort;

external (stdcall) AddAtomW(
    argument0 : LPCWSTR) : UShort;

external (stdcall) AddAuditAccessAce(
    argument0 : PACL,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : PSID,
    argument4 : Int,
    argument5 : Int) : Int;

external (stdcall) AdjustTokenGroups(
    argument0 : HANDLE,
    argument1 : Int,
    argument2 : PTOKEN_GROUPS,
    argument3 : CULong,
    argument4 : PTOKEN_GROUPS,
    argument5 : PDWORD) : Int;

external (stdcall) AdjustTokenPrivileges(
    argument0 : HANDLE,
    argument1 : Int,
    argument2 : PTOKEN_PRIVILEGES,
    argument3 : CULong,
    argument4 : PTOKEN_PRIVILEGES,
    argument5 : PDWORD) : Int;

external (stdcall) AllocateAndInitializeSid(
    argument0 : PSID_IDENTIFIER_AUTHORITY,
    argument1 : CUChar,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : CULong,
    argument5 : CULong,
    argument6 : CULong,
    argument7 : CULong,
    argument8 : CULong,
    argument9 : CULong,
    argument10 : Pointer[PSID]) : Int;

external (stdcall) AllocateLocallyUniqueId(
    argument0 : PLUID) : Int;

external (stdcall) AreAllAccessesGranted(
    argument0 : CULong,
    argument1 : CULong) : Int;

external (stdcall) AreAnyAccessesGranted(
    argument0 : CULong,
    argument1 : CULong) : Int;

external (stdcall) AreFileApisANSI() : Int;

external (stdcall) BackupEventLogA(
    argument0 : HANDLE,
    argument1 : LPCSTR) : Int;

external (stdcall) BackupEventLogW(
    argument0 : HANDLE,
    argument1 : LPCWSTR) : Int;

external (stdcall) BackupRead(
    argument0 : HANDLE,
    argument1 : LPBYTE,
    argument2 : CULong,
    argument3 : LPDWORD,
    argument4 : Int,
    argument5 : Int,
    argument6 : Pointer[LPVOID]) : Int;

external (stdcall) BackupSeek(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : LPDWORD,
    argument4 : LPDWORD,
    argument5 : Pointer[LPVOID]) : Int;

external (stdcall) BackupWrite(
    argument0 : HANDLE,
    argument1 : LPBYTE,
    argument2 : CULong,
    argument3 : LPDWORD,
    argument4 : Int,
    argument5 : Int,
    argument6 : Pointer[LPVOID]) : Int;

external (stdcall) Beep(
    argument0 : CULong,
    argument1 : CULong) : Int;

external (stdcall) BeginUpdateResourceA(
    argument0 : LPCSTR,
    argument1 : Int) : HANDLE;

external (stdcall) BeginUpdateResourceW(
    argument0 : LPCWSTR,
    argument1 : Int) : HANDLE;

external (stdcall) BuildCommDCBA(
    argument0 : LPCSTR,
    argument1 : LPDCB) : Int;

external (stdcall) BuildCommDCBW(
    argument0 : LPCWSTR,
    argument1 : LPDCB) : Int;

external (stdcall) BuildCommDCBAndTimeoutsA(
    argument0 : LPCSTR,
    argument1 : LPDCB,
    argument2 : LPCOMMTIMEOUTS) : Int;

external (stdcall) BuildCommDCBAndTimeoutsW(
    argument0 : LPCWSTR,
    argument1 : LPDCB,
    argument2 : LPCOMMTIMEOUTS) : Int;

external (stdcall) CallNamedPipeA(
    argument0 : LPCSTR,
    argument1 : PVOID,
    argument2 : CULong,
    argument3 : PVOID,
    argument4 : CULong,
    argument5 : PDWORD,
    argument6 : CULong) : Int;

external (stdcall) CallNamedPipeW(
    argument0 : LPCWSTR,
    argument1 : PVOID,
    argument2 : CULong,
    argument3 : PVOID,
    argument4 : CULong,
    argument5 : PDWORD,
    argument6 : CULong) : Int;

external (stdcall) CancelDeviceWakeupRequest(
    argument0 : HANDLE) : Int;

external (stdcall) CancelIo(
    argument0 : HANDLE) : Int;

external (stdcall) CancelWaitableTimer(
    argument0 : HANDLE) : Int;

external (stdcall) ClearCommBreak(
    argument0 : HANDLE) : Int;

external (stdcall) ClearCommError(
    argument0 : HANDLE,
    argument1 : PDWORD,
    argument2 : LPCOMSTAT) : Int;

external (stdcall) ClearEventLogA(
    argument0 : HANDLE,
    argument1 : LPCSTR) : Int;

external (stdcall) ClearEventLogW(
    argument0 : HANDLE,
    argument1 : LPCWSTR) : Int;

external (stdcall) CloseEventLog(
    argument0 : HANDLE) : Int;

external (stdcall) CloseHandle(
    argument0 : HANDLE) : Int;

external (stdcall) CommConfigDialogA(
    argument0 : LPCSTR,
    argument1 : HWND,
    argument2 : LPCOMMCONFIG) : Int;

external (stdcall) CommConfigDialogW(
    argument0 : LPCWSTR,
    argument1 : HWND,
    argument2 : LPCOMMCONFIG) : Int;

external (stdcall) CompareFileTime(
    argument0 : Pointer[FILETIME],
    argument1 : Pointer[FILETIME]) : CLong;

external (stdcall) ConnectNamedPipe(
    argument0 : HANDLE,
    argument1 : LPOVERLAPPED) : Int;

external (stdcall) ContinueDebugEvent(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : CULong) : Int;

external (stdcall) ConvertFiberToThread() : Int;

external (stdcall) ConvertThreadToFiber(
    argument0 : PVOID) : PVOID;

external (stdcall) CopyFileA(
    argument0 : LPCSTR,
    argument1 : LPCSTR,
    argument2 : Int) : Int;

external (stdcall) CopyFileW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR,
    argument2 : Int) : Int;

external (stdcall) CopyFileExA(
    argument0 : LPCSTR,
    argument1 : LPCSTR,
    argument2 : LPPROGRESS_ROUTINE,
    argument3 : LPVOID,
    argument4 : LPBOOL,
    argument5 : CULong) : Int;

external (stdcall) CopyFileExW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR,
    argument2 : LPPROGRESS_ROUTINE,
    argument3 : LPVOID,
    argument4 : LPBOOL,
    argument5 : CULong) : Int;

external (stdcall) CopySid(
    argument0 : CULong,
    argument1 : PSID,
    argument2 : PSID) : Int;

external (stdcall) CreateDirectoryA(
    argument0 : LPCSTR,
    argument1 : LPSECURITY_ATTRIBUTES) : Int;

external (stdcall) CreateDirectoryW(
    argument0 : LPCWSTR,
    argument1 : LPSECURITY_ATTRIBUTES) : Int;

external (stdcall) CreateDirectoryExA(
    argument0 : LPCSTR,
    argument1 : LPCSTR,
    argument2 : LPSECURITY_ATTRIBUTES) : Int;

external (stdcall) CreateDirectoryExW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR,
    argument2 : LPSECURITY_ATTRIBUTES) : Int;

external (stdcall) CreateEventA(
    argument0 : LPSECURITY_ATTRIBUTES,
    argument1 : Int,
    argument2 : Int,
    argument3 : LPCSTR) : HANDLE;

external (stdcall) CreateEventW(
    argument0 : LPSECURITY_ATTRIBUTES,
    argument1 : Int,
    argument2 : Int,
    argument3 : LPCWSTR) : HANDLE;

external (stdcall) CreateFiber(
    argument0 : CULong,
    argument1 : LPFIBER_START_ROUTINE,
    argument2 : LPVOID) : LPVOID;

external (stdcall) CreateFiberEx(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : LPFIBER_START_ROUTINE,
    argument4 : LPVOID) : LPVOID;

external (stdcall) CreateFileA(
    argument0 : LPCSTR,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : LPSECURITY_ATTRIBUTES,
    argument4 : CULong,
    argument5 : CULong,
    argument6 : HANDLE) : HANDLE;

external (stdcall) CreateFileW(
    argument0 : LPCWSTR,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : LPSECURITY_ATTRIBUTES,
    argument4 : CULong,
    argument5 : CULong,
    argument6 : HANDLE) : HANDLE;

external (stdcall) CreateFileMappingA(
    argument0 : HANDLE,
    argument1 : LPSECURITY_ATTRIBUTES,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : CULong,
    argument5 : LPCSTR) : HANDLE;

external (stdcall) CreateFileMappingW(
    argument0 : HANDLE,
    argument1 : LPSECURITY_ATTRIBUTES,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : CULong,
    argument5 : LPCWSTR) : HANDLE;

external (stdcall) CreateIoCompletionPort(
    argument0 : HANDLE,
    argument1 : HANDLE,
    argument2 : CULong,
    argument3 : CULong) : HANDLE;

external (stdcall) CreateMailslotA(
    argument0 : LPCSTR,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : LPSECURITY_ATTRIBUTES) : HANDLE;

external (stdcall) CreateMailslotW(
    argument0 : LPCWSTR,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : LPSECURITY_ATTRIBUTES) : HANDLE;

external (stdcall) CreateMutexA(
    argument0 : LPSECURITY_ATTRIBUTES,
    argument1 : Int,
    argument2 : LPCSTR) : HANDLE;

external (stdcall) CreateMutexW(
    argument0 : LPSECURITY_ATTRIBUTES,
    argument1 : Int,
    argument2 : LPCWSTR) : HANDLE;

external (stdcall) CreateNamedPipeA(
    argument0 : LPCSTR,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : CULong,
    argument5 : CULong,
    argument6 : CULong,
    argument7 : LPSECURITY_ATTRIBUTES) : HANDLE;

external (stdcall) CreateNamedPipeW(
    argument0 : LPCWSTR,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : CULong,
    argument5 : CULong,
    argument6 : CULong,
    argument7 : LPSECURITY_ATTRIBUTES) : HANDLE;

external (stdcall) CreatePipe(
    argument0 : PHANDLE,
    argument1 : PHANDLE,
    argument2 : LPSECURITY_ATTRIBUTES,
    argument3 : CULong) : Int;

external (stdcall) CreatePrivateObjectSecurity(
    argument0 : PSECURITY_DESCRIPTOR,
    argument1 : PSECURITY_DESCRIPTOR,
    argument2 : Pointer[PSECURITY_DESCRIPTOR],
    argument3 : Int,
    argument4 : HANDLE,
    argument5 : PGENERIC_MAPPING) : Int;

external (stdcall) CreateProcessA(
    argument0 : LPCSTR,
    argument1 : LPSTR,
    argument2 : LPSECURITY_ATTRIBUTES,
    argument3 : LPSECURITY_ATTRIBUTES,
    argument4 : Int,
    argument5 : CULong,
    argument6 : PVOID,
    argument7 : LPCSTR,
    argument8 : LPSTARTUPINFOA,
    argument9 : LPPROCESS_INFORMATION) : Int;

external (stdcall) CreateProcessW(
    argument0 : LPCWSTR,
    argument1 : LPWSTR,
    argument2 : LPSECURITY_ATTRIBUTES,
    argument3 : LPSECURITY_ATTRIBUTES,
    argument4 : Int,
    argument5 : CULong,
    argument6 : PVOID,
    argument7 : LPCWSTR,
    argument8 : LPSTARTUPINFOW,
    argument9 : LPPROCESS_INFORMATION) : Int;

external (stdcall) CreateProcessAsUserA(
    argument0 : HANDLE,
    argument1 : LPCSTR,
    argument2 : LPSTR,
    argument3 : LPSECURITY_ATTRIBUTES,
    argument4 : LPSECURITY_ATTRIBUTES,
    argument5 : Int,
    argument6 : CULong,
    argument7 : PVOID,
    argument8 : LPCSTR,
    argument9 : LPSTARTUPINFOA,
    argument10 : LPPROCESS_INFORMATION) : Int;

external (stdcall) CreateProcessAsUserW(
    argument0 : HANDLE,
    argument1 : LPCWSTR,
    argument2 : LPWSTR,
    argument3 : LPSECURITY_ATTRIBUTES,
    argument4 : LPSECURITY_ATTRIBUTES,
    argument5 : Int,
    argument6 : CULong,
    argument7 : PVOID,
    argument8 : LPCWSTR,
    argument9 : LPSTARTUPINFOW,
    argument10 : LPPROCESS_INFORMATION) : Int;

external (stdcall) CreateRemoteThread(
    argument0 : HANDLE,
    argument1 : LPSECURITY_ATTRIBUTES,
    argument2 : CULong,
    argument3 : LPTHREAD_START_ROUTINE,
    argument4 : LPVOID,
    argument5 : CULong,
    argument6 : LPDWORD) : HANDLE;

external (stdcall) CreateSemaphoreA(
    argument0 : LPSECURITY_ATTRIBUTES,
    argument1 : CLong,
    argument2 : CLong,
    argument3 : LPCSTR) : HANDLE;

external (stdcall) CreateSemaphoreW(
    argument0 : LPSECURITY_ATTRIBUTES,
    argument1 : CLong,
    argument2 : CLong,
    argument3 : LPCWSTR) : HANDLE;

external (stdcall) CreateTapePartition(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : CULong) : CULong;

external (stdcall) CreateThread(
    argument0 : LPSECURITY_ATTRIBUTES,
    argument1 : CULong,
    argument2 : LPTHREAD_START_ROUTINE,
    argument3 : PVOID,
    argument4 : CULong,
    argument5 : PDWORD) : HANDLE;

external (stdcall) CreateWaitableTimerA(
    argument0 : LPSECURITY_ATTRIBUTES,
    argument1 : Int,
    argument2 : LPCSTR) : HANDLE;

external (stdcall) CreateWaitableTimerW(
    argument0 : LPSECURITY_ATTRIBUTES,
    argument1 : Int,
    argument2 : LPCWSTR) : HANDLE;

external (stdcall) DebugActiveProcess(
    argument0 : CULong) : Int;

external (stdcall) DebugBreak() : Void;

external (stdcall) DefineDosDeviceA(
    argument0 : CULong,
    argument1 : LPCSTR,
    argument2 : LPCSTR) : Int;

external (stdcall) DefineDosDeviceW(
    argument0 : CULong,
    argument1 : LPCWSTR,
    argument2 : LPCWSTR) : Int;

external (stdcall) DeleteAce(
    argument0 : PACL,
    argument1 : CULong) : Int;

external (stdcall) DeleteAtom(
    argument0 : UShort) : UShort;

external (stdcall) DeleteCriticalSection(
    argument0 : PCRITICAL_SECTION) : Void;

external (stdcall) DeleteFiber(
    argument0 : PVOID) : Void;

external (stdcall) DeleteFileA(
    argument0 : LPCSTR) : Int;

external (stdcall) DeleteFileW(
    argument0 : LPCWSTR) : Int;

external (stdcall) DeregisterEventSource(
    argument0 : HANDLE) : Int;

external (stdcall) DestroyPrivateObjectSecurity(
    argument0 : Pointer[PSECURITY_DESCRIPTOR]) : Int;

external (stdcall) DeviceIoControl(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : PVOID,
    argument3 : CULong,
    argument4 : PVOID,
    argument5 : CULong,
    argument6 : PDWORD,
    argument7 : POVERLAPPED) : Int;

external (stdcall) DisableThreadLibraryCalls(
    argument0 : HMODULE) : Int;

external (stdcall) DisconnectNamedPipe(
    argument0 : HANDLE) : Int;

external (stdcall) DosDateTimeToFileTime(
    argument0 : UShort,
    argument1 : UShort,
    argument2 : LPFILETIME) : Int;

external (stdcall) DuplicateHandle(
    argument0 : HANDLE,
    argument1 : HANDLE,
    argument2 : HANDLE,
    argument3 : PHANDLE,
    argument4 : CULong,
    argument5 : Int,
    argument6 : CULong) : Int;

external (stdcall) DuplicateToken(
    argument0 : HANDLE,
    argument1 : SECURITY_IMPERSONATION_LEVEL,
    argument2 : PHANDLE) : Int;

external (stdcall) DuplicateTokenEx(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : LPSECURITY_ATTRIBUTES,
    argument3 : SECURITY_IMPERSONATION_LEVEL,
    argument4 : TOKEN_TYPE,
    argument5 : PHANDLE) : Int;

external (stdcall) EncryptFileA(
    argument0 : LPCSTR) : Int;

external (stdcall) EncryptFileW(
    argument0 : LPCWSTR) : Int;

external (stdcall) EndUpdateResourceA(
    argument0 : HANDLE,
    argument1 : Int) : Int;

external (stdcall) EndUpdateResourceW(
    argument0 : HANDLE,
    argument1 : Int) : Int;

external (stdcall) EnterCriticalSection(
    argument0 : LPCRITICAL_SECTION) : Void;

external (stdcall) EnumResourceLanguagesA(
    argument0 : HMODULE,
    argument1 : LPCSTR,
    argument2 : LPCSTR,
    argument3 : ENUMRESLANGPROCA,
    argument4 : CLong) : Int;

external (stdcall) EnumResourceLanguagesW(
    argument0 : HMODULE,
    argument1 : LPCWSTR,
    argument2 : LPCWSTR,
    argument3 : ENUMRESLANGPROCA,
    argument4 : CLong) : Int;

external (stdcall) EnumResourceNamesA(
    argument0 : HMODULE,
    argument1 : LPCSTR,
    argument2 : ENUMRESNAMEPROCA,
    argument3 : CLong) : Int;

external (stdcall) EnumResourceNamesW(
    argument0 : HMODULE,
    argument1 : LPCWSTR,
    argument2 : ENUMRESNAMEPROCA,
    argument3 : CLong) : Int;

external (stdcall) EnumResourceTypesA(
    argument0 : HMODULE,
    argument1 : ENUMRESTYPEPROCA,
    argument2 : CLong) : Int;

external (stdcall) EnumResourceTypesW(
    argument0 : HMODULE,
    argument1 : ENUMRESTYPEPROCA,
    argument2 : CLong) : Int;

external (stdcall) EqualPrefixSid(
    argument0 : PSID,
    argument1 : PSID) : Int;

external (stdcall) EqualSid(
    argument0 : PSID,
    argument1 : PSID) : Int;

external (stdcall) EraseTape(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : Int) : CULong;

external (stdcall) EscapeCommFunction(
    argument0 : HANDLE,
    argument1 : CULong) : Int;

external (stdcall) ExitProcess(
    argument0 : UInt) : Void;

external (stdcall) ExitThread(
    argument0 : CULong) : Void;

external (stdcall) ExpandEnvironmentStringsA(
    argument0 : LPCSTR,
    argument1 : LPSTR,
    argument2 : CULong) : CULong;

external (stdcall) ExpandEnvironmentStringsW(
    argument0 : LPCWSTR,
    argument1 : LPWSTR,
    argument2 : CULong) : CULong;

external (stdcall) FatalAppExitA(
    argument0 : UInt,
    argument1 : LPCSTR) : Void;

external (stdcall) FatalAppExitW(
    argument0 : UInt,
    argument1 : LPCWSTR) : Void;

external (stdcall) FatalExit(
    argument0 : Int) : Void;

external (stdcall) FileEncryptionStatusA(
    argument0 : LPCSTR,
    argument1 : LPDWORD) : Int;

external (stdcall) FileEncryptionStatusW(
    argument0 : LPCWSTR,
    argument1 : LPDWORD) : Int;

external (stdcall) FileTimeToDosDateTime(
    argument0 : Pointer[FILETIME],
    argument1 : LPWORD,
    argument2 : LPWORD) : Int;

external (stdcall) FileTimeToLocalFileTime(
    argument0 : Pointer[FILETIME],
    argument1 : LPFILETIME) : Int;

external (stdcall) FileTimeToSystemTime(
    argument0 : Pointer[FILETIME],
    argument1 : LPSYSTEMTIME) : Int;

external (stdcall) FindAtomA(
    argument0 : LPCSTR) : UShort;

external (stdcall) FindAtomW(
    argument0 : LPCWSTR) : UShort;

external (stdcall) FindClose(
    argument0 : HANDLE) : Int;

external (stdcall) FindCloseChangeNotification(
    argument0 : HANDLE) : Int;

external (stdcall) FindFirstChangeNotificationA(
    argument0 : LPCSTR,
    argument1 : Int,
    argument2 : CULong) : HANDLE;

external (stdcall) FindFirstChangeNotificationW(
    argument0 : LPCWSTR,
    argument1 : Int,
    argument2 : CULong) : HANDLE;

external (stdcall) FindFirstFileA(
    argument0 : LPCSTR,
    argument1 : LPWIN32_FIND_DATAA) : HANDLE;

external (stdcall) FindFirstFileW(
    argument0 : LPCWSTR,
    argument1 : LPWIN32_FIND_DATAW) : HANDLE;

external (stdcall) FindFirstFileExA(
    argument0 : LPCSTR,
    argument1 : FINDEX_INFO_LEVELS,
    argument2 : PVOID,
    argument3 : FINDEX_SEARCH_OPS,
    argument4 : PVOID,
    argument5 : CULong) : HANDLE;

external (stdcall) FindFirstFileExW(
    argument0 : LPCWSTR,
    argument1 : FINDEX_INFO_LEVELS,
    argument2 : PVOID,
    argument3 : FINDEX_SEARCH_OPS,
    argument4 : PVOID,
    argument5 : CULong) : HANDLE;

external (stdcall) FindFirstFreeAce(
    argument0 : PACL,
    argument1 : Pointer[PVOID]) : Int;

external (stdcall) FindNextChangeNotification(
    argument0 : HANDLE) : Int;

external (stdcall) FindNextFileA(
    argument0 : HANDLE,
    argument1 : LPWIN32_FIND_DATAA) : Int;

external (stdcall) FindNextFileW(
    argument0 : HANDLE,
    argument1 : LPWIN32_FIND_DATAW) : Int;

external (stdcall) FindResourceA(
    argument0 : HMODULE,
    argument1 : LPCSTR,
    argument2 : LPCSTR) : HRSRC;

external (stdcall) FindResourceW(
    argument0 : HINSTANCE,
    argument1 : LPCWSTR,
    argument2 : LPCWSTR) : HRSRC;

external (stdcall) FindResourceExA(
    argument0 : HINSTANCE,
    argument1 : LPCSTR,
    argument2 : LPCSTR,
    argument3 : UShort) : HRSRC;

external (stdcall) FindResourceExW(
    argument0 : HINSTANCE,
    argument1 : LPCWSTR,
    argument2 : LPCWSTR,
    argument3 : UShort) : HRSRC;

external (stdcall) FlushFileBuffers(
    argument0 : HANDLE) : Int;

external (stdcall) FlushInstructionCache(
    argument0 : HANDLE,
    argument1 : PCVOID,
    argument2 : CULong) : Int;

external (stdcall) FlushViewOfFile(
    argument0 : PCVOID,
    argument1 : CULong) : Int;

external (stdcall) FormatMessageA(
    argument0 : CULong,
    argument1 : PCVOID,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : LPSTR,
    argument5 : CULong,
    argument6 : Pointer[Int]) : CULong;

external (stdcall) FormatMessageW(
    argument0 : CULong,
    argument1 : PCVOID,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : LPWSTR,
    argument5 : CULong,
    argument6 : Pointer[Int]) : CULong;

external (stdcall) FreeEnvironmentStringsA(
    argument0 : LPSTR) : Int;

external (stdcall) FreeEnvironmentStringsW(
    argument0 : LPWSTR) : Int;

external (stdcall) FreeLibrary(
    argument0 : HMODULE) : Int;

external (stdcall) FreeLibraryAndExitThread(
    argument0 : HMODULE,
    argument1 : CULong) : Void;

external (stdcall) FreeResource(
    argument0 : HGLOBAL) : Int;

external (stdcall) FreeSid(
    argument0 : PSID) : PVOID;

external (stdcall) GetAce(
    argument0 : PACL,
    argument1 : CULong,
    argument2 : Pointer[LPVOID]) : Int;

external (stdcall) GetAclInformation(
    argument0 : PACL,
    argument1 : PVOID,
    argument2 : CULong,
    argument3 : ACL_INFORMATION_CLASS) : Int;

external (stdcall) GetAtomNameA(
    argument0 : UShort,
    argument1 : LPSTR,
    argument2 : Int) : UInt;

external (stdcall) GetAtomNameW(
    argument0 : UShort,
    argument1 : LPWSTR,
    argument2 : Int) : UInt;

external (stdcall) GetBinaryTypeA(
    argument0 : LPCSTR,
    argument1 : PDWORD) : Int;

external (stdcall) GetBinaryTypeW(
    argument0 : LPCWSTR,
    argument1 : PDWORD) : Int;

external (stdcall) GetCommandLineA() : LPSTR;

external (stdcall) GetCommandLineW() : LPWSTR;

external (stdcall) GetCommConfig(
    argument0 : HANDLE,
    argument1 : LPCOMMCONFIG,
    argument2 : PDWORD) : Int;

external (stdcall) GetCommMask(
    argument0 : HANDLE,
    argument1 : PDWORD) : Int;

external (stdcall) GetCommModemStatus(
    argument0 : HANDLE,
    argument1 : PDWORD) : Int;

external (stdcall) GetCommProperties(
    argument0 : HANDLE,
    argument1 : LPCOMMPROP) : Int;

external (stdcall) GetCommState(
    argument0 : HANDLE,
    argument1 : LPDCB) : Int;

external (stdcall) GetCommTimeouts(
    argument0 : HANDLE,
    argument1 : LPCOMMTIMEOUTS) : Int;

external (stdcall) GetCompressedFileSizeA(
    argument0 : LPCSTR,
    argument1 : PDWORD) : CULong;

external (stdcall) GetCompressedFileSizeW(
    argument0 : LPCWSTR,
    argument1 : PDWORD) : CULong;

external (stdcall) GetComputerNameA(
    argument0 : LPSTR,
    argument1 : PDWORD) : Int;

external (stdcall) GetComputerNameW(
    argument0 : LPWSTR,
    argument1 : PDWORD) : Int;

external (stdcall) GetCurrentDirectoryA(
    argument0 : CULong,
    argument1 : LPSTR) : CULong;

external (stdcall) GetCurrentDirectoryW(
    argument0 : CULong,
    argument1 : LPWSTR) : CULong;

external (stdcall) GetCurrentHwProfileA(
    argument0 : LPHW_PROFILE_INFOA) : Int;

external (stdcall) GetCurrentHwProfileW(
    argument0 : LPHW_PROFILE_INFOW) : Int;

external (stdcall) GetCurrentProcess() : HANDLE;

external (stdcall) GetCurrentProcessId() : CULong;

external (stdcall) GetCurrentThread() : HANDLE;

external (stdcall) GetCurrentThreadId() : CULong;

external (stdcall) GetDefaultCommConfigA(
    argument0 : LPCSTR,
    argument1 : LPCOMMCONFIG,
    argument2 : PDWORD) : Int;

external (stdcall) GetDefaultCommConfigW(
    argument0 : LPCWSTR,
    argument1 : LPCOMMCONFIG,
    argument2 : PDWORD) : Int;

external (stdcall) GetDevicePowerState(
    argument0 : HANDLE,
    argument1 : Pointer[Int]) : Int;

external (stdcall) GetDiskFreeSpaceA(
    argument0 : LPCSTR,
    argument1 : PDWORD,
    argument2 : PDWORD,
    argument3 : PDWORD,
    argument4 : PDWORD) : Int;

external (stdcall) GetDiskFreeSpaceW(
    argument0 : LPCWSTR,
    argument1 : PDWORD,
    argument2 : PDWORD,
    argument3 : PDWORD,
    argument4 : PDWORD) : Int;

external (stdcall) GetDiskFreeSpaceExA(
    argument0 : LPCSTR,
    argument1 : PULARGE_INTEGER,
    argument2 : PULARGE_INTEGER,
    argument3 : PULARGE_INTEGER) : Int;

external (stdcall) GetDiskFreeSpaceExW(
    argument0 : LPCWSTR,
    argument1 : PULARGE_INTEGER,
    argument2 : PULARGE_INTEGER,
    argument3 : PULARGE_INTEGER) : Int;

external (stdcall) GetDriveTypeA(
    argument0 : LPCSTR) : UInt;

external (stdcall) GetDriveTypeW(
    argument0 : LPCWSTR) : UInt;

external (stdcall) GetEnvironmentStrings() : LPSTR;

external (stdcall) GetEnvironmentStringsA() : LPSTR;

external (stdcall) GetEnvironmentStringsW() : LPWSTR;

external (stdcall) GetEnvironmentVariableA(
    argument0 : LPCSTR,
    argument1 : LPSTR,
    argument2 : CULong) : CULong;

external (stdcall) GetEnvironmentVariableW(
    argument0 : LPCWSTR,
    argument1 : LPWSTR,
    argument2 : CULong) : CULong;

external (stdcall) GetExitCodeProcess(
    argument0 : HANDLE,
    argument1 : PDWORD) : Int;

external (stdcall) GetExitCodeThread(
    argument0 : HANDLE,
    argument1 : PDWORD) : Int;

external (stdcall) GetFileAttributesA(
    argument0 : LPCSTR) : CULong;

external (stdcall) GetFileAttributesW(
    argument0 : LPCWSTR) : CULong;

external (stdcall) GetFileAttributesExA(
    argument0 : LPCSTR,
    argument1 : GET_FILEEX_INFO_LEVELS,
    argument2 : PVOID) : Int;

external (stdcall) GetFileAttributesExW(
    argument0 : LPCWSTR,
    argument1 : GET_FILEEX_INFO_LEVELS,
    argument2 : PVOID) : Int;

external (stdcall) GetFileInformationByHandle(
    argument0 : HANDLE,
    argument1 : LPBY_HANDLE_FILE_INFORMATION) : Int;

external (stdcall) GetFileSecurityA(
    argument0 : LPCSTR,
    argument1 : CULong,
    argument2 : PSECURITY_DESCRIPTOR,
    argument3 : CULong,
    argument4 : PDWORD) : Int;

external (stdcall) GetFileSecurityW(
    argument0 : LPCWSTR,
    argument1 : CULong,
    argument2 : PSECURITY_DESCRIPTOR,
    argument3 : CULong,
    argument4 : PDWORD) : Int;

external (stdcall) GetFileSize(
    argument0 : HANDLE,
    argument1 : PDWORD) : CULong;

external (stdcall) GetFileTime(
    argument0 : HANDLE,
    argument1 : LPFILETIME,
    argument2 : LPFILETIME,
    argument3 : LPFILETIME) : Int;

external (stdcall) GetFileType(
    argument0 : HANDLE) : CULong;

external (stdcall) GetFullPathNameA(
    argument0 : LPCSTR,
    argument1 : CULong,
    argument2 : LPSTR,
    argument3 : Pointer[LPSTR]) : CULong;

external (stdcall) GetFullPathNameW(
    argument0 : LPCWSTR,
    argument1 : CULong,
    argument2 : LPWSTR,
    argument3 : Pointer[LPWSTR]) : CULong;

external (stdcall) GetHandleInformation(
    argument0 : HANDLE,
    argument1 : PDWORD) : Int;

external (stdcall) GetKernelObjectSecurity(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : PSECURITY_DESCRIPTOR,
    argument3 : CULong,
    argument4 : PDWORD) : Int;

external (stdcall) GetLastError() : CULong;

external (stdcall) GetLengthSid(
    argument0 : PSID) : CULong;

external (stdcall) GetLocalTime(
    argument0 : LPSYSTEMTIME) : Void;

external (stdcall) GetLogicalDrives() : CULong;

external (stdcall) GetLogicalDriveStringsA(
    argument0 : CULong,
    argument1 : LPSTR) : CULong;

external (stdcall) GetLogicalDriveStringsW(
    argument0 : CULong,
    argument1 : LPWSTR) : CULong;

external (stdcall) GetMailslotInfo(
    argument0 : HANDLE,
    argument1 : PDWORD,
    argument2 : PDWORD,
    argument3 : PDWORD,
    argument4 : PDWORD) : Int;

external (stdcall) GetModuleFileNameA(
    argument0 : HINSTANCE,
    argument1 : LPSTR,
    argument2 : CULong) : CULong;

external (stdcall) GetModuleFileNameW(
    argument0 : HINSTANCE,
    argument1 : LPWSTR,
    argument2 : CULong) : CULong;

external (stdcall) GetModuleHandleA(
    argument0 : LPCSTR) : HMODULE;

external (stdcall) GetModuleHandleW(
    argument0 : LPCWSTR) : HMODULE;

external (stdcall) GetNamedPipeHandleStateA(
    argument0 : HANDLE,
    argument1 : PDWORD,
    argument2 : PDWORD,
    argument3 : PDWORD,
    argument4 : PDWORD,
    argument5 : LPSTR,
    argument6 : CULong) : Int;

external (stdcall) GetNamedPipeHandleStateW(
    argument0 : HANDLE,
    argument1 : PDWORD,
    argument2 : PDWORD,
    argument3 : PDWORD,
    argument4 : PDWORD,
    argument5 : LPWSTR,
    argument6 : CULong) : Int;

external (stdcall) GetNamedPipeInfo(
    argument0 : HANDLE,
    argument1 : PDWORD,
    argument2 : PDWORD,
    argument3 : PDWORD,
    argument4 : PDWORD) : Int;

external (stdcall) GetNumberOfEventLogRecords(
    argument0 : HANDLE,
    argument1 : PDWORD) : Int;

external (stdcall) GetOldestEventLogRecord(
    argument0 : HANDLE,
    argument1 : PDWORD) : Int;

external (stdcall) GetOverlappedResult(
    argument0 : HANDLE,
    argument1 : LPOVERLAPPED,
    argument2 : PDWORD,
    argument3 : Int) : Int;

external (stdcall) GetPriorityClass(
    argument0 : HANDLE) : CULong;

external (stdcall) GetPrivateObjectSecurity(
    argument0 : PSECURITY_DESCRIPTOR,
    argument1 : CULong,
    argument2 : PSECURITY_DESCRIPTOR,
    argument3 : CULong,
    argument4 : PDWORD) : Int;

external (stdcall) GetPrivateProfileIntA(
    argument0 : LPCSTR,
    argument1 : LPCSTR,
    argument2 : Int,
    argument3 : LPCSTR) : UInt;

external (stdcall) GetPrivateProfileIntW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR,
    argument2 : Int,
    argument3 : LPCWSTR) : UInt;

external (stdcall) GetPrivateProfileSectionA(
    argument0 : LPCSTR,
    argument1 : LPSTR,
    argument2 : CULong,
    argument3 : LPCSTR) : CULong;

external (stdcall) GetPrivateProfileSectionW(
    argument0 : LPCWSTR,
    argument1 : LPWSTR,
    argument2 : CULong,
    argument3 : LPCWSTR) : CULong;

external (stdcall) GetPrivateProfileSectionNamesA(
    argument0 : LPSTR,
    argument1 : CULong,
    argument2 : LPCSTR) : CULong;

external (stdcall) GetPrivateProfileSectionNamesW(
    argument0 : LPWSTR,
    argument1 : CULong,
    argument2 : LPCWSTR) : CULong;

external (stdcall) GetPrivateProfileStringA(
    argument0 : LPCSTR,
    argument1 : LPCSTR,
    argument2 : LPCSTR,
    argument3 : LPSTR,
    argument4 : CULong,
    argument5 : LPCSTR) : CULong;

external (stdcall) GetPrivateProfileStringW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR,
    argument2 : LPCWSTR,
    argument3 : LPWSTR,
    argument4 : CULong,
    argument5 : LPCWSTR) : CULong;

external (stdcall) GetPrivateProfileStructA(
    argument0 : LPCSTR,
    argument1 : LPCSTR,
    argument2 : LPVOID,
    argument3 : UInt,
    argument4 : LPCSTR) : Int;

external (stdcall) GetPrivateProfileStructW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR,
    argument2 : LPVOID,
    argument3 : UInt,
    argument4 : LPCWSTR) : Int;

external (stdcall) GetProcAddress(
    argument0 : HINSTANCE,
    argument1 : LPCSTR) : FARPROC;

external (stdcall) GetProcessAffinityMask(
    argument0 : HANDLE,
    argument1 : PDWORD,
    argument2 : PDWORD) : Int;

external (stdcall) GetProcessHeap() : HANDLE;

external (stdcall) GetProcessHeaps(
    argument0 : CULong,
    argument1 : PHANDLE) : CULong;

external (stdcall) GetProcessPriorityBoost(
    argument0 : HANDLE,
    argument1 : PBOOL) : Int;

external (stdcall) GetProcessShutdownParameters(
    argument0 : PDWORD,
    argument1 : PDWORD) : Int;

external (stdcall) GetProcessTimes(
    argument0 : HANDLE,
    argument1 : LPFILETIME,
    argument2 : LPFILETIME,
    argument3 : LPFILETIME,
    argument4 : LPFILETIME) : Int;

external (stdcall) GetProcessVersion(
    argument0 : CULong) : CULong;

external (stdcall) GetProcessWindowStation() : HWINSTA;

external (stdcall) GetProcessWorkingSetSize(
    argument0 : HANDLE,
    argument1 : PSIZE_T,
    argument2 : PSIZE_T) : Int;

external (stdcall) GetProfileIntA(
    argument0 : LPCSTR,
    argument1 : LPCSTR,
    argument2 : Int) : UInt;

external (stdcall) GetProfileIntW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR,
    argument2 : Int) : UInt;

external (stdcall) GetProfileSectionA(
    argument0 : LPCSTR,
    argument1 : LPSTR,
    argument2 : CULong) : CULong;

external (stdcall) GetProfileSectionW(
    argument0 : LPCWSTR,
    argument1 : LPWSTR,
    argument2 : CULong) : CULong;

external (stdcall) GetProfileStringA(
    argument0 : LPCSTR,
    argument1 : LPCSTR,
    argument2 : LPCSTR,
    argument3 : LPSTR,
    argument4 : CULong) : CULong;

external (stdcall) GetProfileStringW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR,
    argument2 : LPCWSTR,
    argument3 : LPWSTR,
    argument4 : CULong) : CULong;

external (stdcall) GetQueuedCompletionStatus(
    argument0 : HANDLE,
    argument1 : PDWORD,
    argument2 : PULONG_PTR,
    argument3 : Pointer[LPOVERLAPPED],
    argument4 : CULong) : Int;

external (stdcall) GetSecurityDescriptorControl(
    argument0 : PSECURITY_DESCRIPTOR,
    argument1 : PSECURITY_DESCRIPTOR_CONTROL,
    argument2 : PDWORD) : Int;

external (stdcall) GetSecurityDescriptorDacl(
    argument0 : PSECURITY_DESCRIPTOR,
    argument1 : LPBOOL,
    argument2 : Pointer[PACL],
    argument3 : LPBOOL) : Int;

external (stdcall) GetSecurityDescriptorGroup(
    argument0 : PSECURITY_DESCRIPTOR,
    argument1 : Pointer[PSID],
    argument2 : LPBOOL) : Int;

external (stdcall) GetSecurityDescriptorLength(
    argument0 : PSECURITY_DESCRIPTOR) : CULong;

external (stdcall) GetSecurityDescriptorOwner(
    argument0 : PSECURITY_DESCRIPTOR,
    argument1 : Pointer[PSID],
    argument2 : LPBOOL) : Int;

external (stdcall) GetSecurityDescriptorSacl(
    argument0 : PSECURITY_DESCRIPTOR,
    argument1 : LPBOOL,
    argument2 : Pointer[PACL],
    argument3 : LPBOOL) : Int;

external (stdcall) GetShortPathNameA(
    argument0 : LPCSTR,
    argument1 : LPSTR,
    argument2 : CULong) : CULong;

external (stdcall) GetShortPathNameW(
    argument0 : LPCWSTR,
    argument1 : LPWSTR,
    argument2 : CULong) : CULong;

external (stdcall) GetSidIdentifierAuthority(
    argument0 : PSID) : PSID_IDENTIFIER_AUTHORITY;

external (stdcall) GetSidLengthRequired(
    argument0 : CUChar) : CULong;

external (stdcall) GetSidSubAuthority(
    argument0 : PSID,
    argument1 : CULong) : PDWORD;

external (stdcall) GetSidSubAuthorityCount(
    argument0 : PSID) : PUCHAR;

external (stdcall) GetStartupInfoA(
    argument0 : LPSTARTUPINFOA) : Void;

external (stdcall) GetStartupInfoW(
    argument0 : LPSTARTUPINFOW) : Void;

external (stdcall) GetStdHandle(
    argument0 : CULong) : HANDLE;

external (stdcall) GetSystemDirectoryA(
    argument0 : LPSTR,
    argument1 : UInt) : UInt;

external (stdcall) GetSystemDirectoryW(
    argument0 : LPWSTR,
    argument1 : UInt) : UInt;

external (stdcall) GetSystemInfo(
    argument0 : LPSYSTEM_INFO) : Void;

external (stdcall) GetSystemPowerStatus(
    argument0 : LPSYSTEM_POWER_STATUS) : Int;

external (stdcall) GetSystemTime(
    argument0 : LPSYSTEMTIME) : Void;

external (stdcall) GetSystemTimeAdjustment(
    argument0 : PDWORD,
    argument1 : PDWORD,
    argument2 : PBOOL) : Int;

external (stdcall) GetSystemTimeAsFileTime(
    argument0 : LPFILETIME) : Void;

external (stdcall) GetTapeParameters(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : PDWORD,
    argument3 : PVOID) : CULong;

external (stdcall) GetTapePosition(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : PDWORD,
    argument3 : PDWORD,
    argument4 : PDWORD) : CULong;

external (stdcall) GetTapeStatus(
    argument0 : HANDLE) : CULong;

external (stdcall) GetTempFileNameA(
    argument0 : LPCSTR,
    argument1 : LPCSTR,
    argument2 : UInt,
    argument3 : LPSTR) : UInt;

external (stdcall) GetTempFileNameW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR,
    argument2 : UInt,
    argument3 : LPWSTR) : UInt;

external (stdcall) GetTempPathA(
    argument0 : CULong,
    argument1 : LPSTR) : CULong;

external (stdcall) GetTempPathW(
    argument0 : CULong,
    argument1 : LPWSTR) : CULong;

external (stdcall) GetThreadContext(
    argument0 : HANDLE,
    argument1 : LPCONTEXT) : Int;

external (stdcall) GetThreadPriority(
    argument0 : HANDLE) : Int;

external (stdcall) GetThreadPriorityBoost(
    argument0 : HANDLE,
    argument1 : PBOOL) : Int;

external (stdcall) GetThreadSelectorEntry(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : LPLDT_ENTRY) : Int;

external (stdcall) GetThreadTimes(
    argument0 : HANDLE,
    argument1 : LPFILETIME,
    argument2 : LPFILETIME,
    argument3 : LPFILETIME,
    argument4 : LPFILETIME) : Int;

external (stdcall) GetTickCount() : CULong;

external (stdcall) GetTimeZoneInformation(
    argument0 : LPTIME_ZONE_INFORMATION) : CULong;

external (stdcall) GetTokenInformation(
    argument0 : HANDLE,
    argument1 : TOKEN_INFORMATION_CLASS,
    argument2 : PVOID,
    argument3 : CULong,
    argument4 : PDWORD) : Int;

external (stdcall) GetUserNameA(
    argument0 : LPSTR,
    argument1 : PDWORD) : Int;

external (stdcall) GetUserNameW(
    argument0 : LPWSTR,
    argument1 : PDWORD) : Int;

external (stdcall) GetVersion() : CULong;

external (stdcall) GetVersionExA(
    argument0 : LPOSVERSIONINFOA) : Int;

external (stdcall) GetVersionExW(
    argument0 : LPOSVERSIONINFOW) : Int;

external (stdcall) GetVolumeInformationA(
    argument0 : LPCSTR,
    argument1 : LPSTR,
    argument2 : CULong,
    argument3 : PDWORD,
    argument4 : PDWORD,
    argument5 : PDWORD,
    argument6 : LPSTR,
    argument7 : CULong) : Int;

external (stdcall) GetVolumeInformationW(
    argument0 : LPCWSTR,
    argument1 : LPWSTR,
    argument2 : CULong,
    argument3 : PDWORD,
    argument4 : PDWORD,
    argument5 : PDWORD,
    argument6 : LPWSTR,
    argument7 : CULong) : Int;

external (stdcall) GetWindowsDirectoryA(
    argument0 : LPSTR,
    argument1 : UInt) : UInt;

external (stdcall) GetWindowsDirectoryW(
    argument0 : LPWSTR,
    argument1 : UInt) : UInt;

external (stdcall) GetWindowThreadProcessId(
    argument0 : HWND,
    argument1 : PDWORD) : CULong;

external (stdcall) GetWriteWatch(
    argument0 : CULong,
    argument1 : PVOID,
    argument2 : CULong,
    argument3 : Pointer[PVOID],
    argument4 : PULONG_PTR,
    argument5 : PULONG) : UInt;

external (stdcall) GlobalAddAtomA(
    argument0 : LPCSTR) : UShort;

external (stdcall) GlobalAddAtomW(
    argument0 : LPCWSTR) : UShort;

external (stdcall) GlobalAlloc(
    argument0 : UInt,
    argument1 : CULong) : HGLOBAL;

external (stdcall) GlobalCompact(
    argument0 : CULong) : CULong;

external (stdcall) GlobalDeleteAtom(
    argument0 : UShort) : UShort;

external (stdcall) GlobalFindAtomA(
    argument0 : LPCSTR) : UShort;

external (stdcall) GlobalFindAtomW(
    argument0 : LPCWSTR) : UShort;

external (stdcall) GlobalFix(
    argument0 : HGLOBAL) : Void;

external (stdcall) GlobalFlags(
    argument0 : HGLOBAL) : UInt;

external (stdcall) GlobalFree(
    argument0 : HGLOBAL) : HGLOBAL;

external (stdcall) GlobalGetAtomNameA(
    argument0 : UShort,
    argument1 : LPSTR,
    argument2 : Int) : UInt;

external (stdcall) GlobalGetAtomNameW(
    argument0 : UShort,
    argument1 : LPWSTR,
    argument2 : Int) : UInt;

external (stdcall) GlobalHandle(
    argument0 : PCVOID) : HGLOBAL;

external (stdcall) GlobalLock(
    argument0 : HGLOBAL) : LPVOID;

external (stdcall) GlobalMemoryStatus(
    argument0 : LPMEMORYSTATUS) : Void;

external (stdcall) GlobalReAlloc(
    argument0 : HGLOBAL,
    argument1 : CULong,
    argument2 : UInt) : HGLOBAL;

external (stdcall) GlobalSize(
    argument0 : HGLOBAL) : CULong;

external (stdcall) GlobalUnfix(
    argument0 : HGLOBAL) : Void;

external (stdcall) GlobalUnlock(
    argument0 : HGLOBAL) : Int;

external (stdcall) GlobalUnWire(
    argument0 : HGLOBAL) : Int;

external (stdcall) GlobalWire(
    argument0 : HGLOBAL) : PVOID;

external (stdcall) HeapAlloc(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : CULong) : PVOID;

external (stdcall) HeapCompact(
    argument0 : HANDLE,
    argument1 : CULong) : CULong;

external (stdcall) HeapCreate(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : CULong) : HANDLE;

external (stdcall) HeapDestroy(
    argument0 : HANDLE) : Int;

external (stdcall) HeapFree(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : PVOID) : Int;

external (stdcall) HeapLock(
    argument0 : HANDLE) : Int;

external (stdcall) HeapReAlloc(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : PVOID,
    argument3 : CULong) : PVOID;

external (stdcall) HeapSize(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : PCVOID) : CULong;

external (stdcall) HeapUnlock(
    argument0 : HANDLE) : Int;

external (stdcall) HeapValidate(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : PCVOID) : Int;

external (stdcall) HeapWalk(
    argument0 : HANDLE,
    argument1 : LPPROCESS_HEAP_ENTRY) : Int;

external (stdcall) ImpersonateLoggedOnUser(
    argument0 : HANDLE) : Int;

external (stdcall) ImpersonateNamedPipeClient(
    argument0 : HANDLE) : Int;

external (stdcall) ImpersonateSelf(
    argument0 : SECURITY_IMPERSONATION_LEVEL) : Int;

external (stdcall) InitAtomTable(
    argument0 : CULong) : Int;

external (stdcall) InitializeAcl(
    argument0 : PACL,
    argument1 : CULong,
    argument2 : CULong) : Int;

external (stdcall) InitializeCriticalSection(
    argument0 : LPCRITICAL_SECTION) : Void;

external (stdcall) InitializeCriticalSectionAndSpinCount(
    argument0 : LPCRITICAL_SECTION,
    argument1 : CULong) : Int;

external (stdcall) SetCriticalSectionSpinCount(
    argument0 : LPCRITICAL_SECTION,
    argument1 : CULong) : CULong;

external (stdcall) InitializeSecurityDescriptor(
    argument0 : PSECURITY_DESCRIPTOR,
    argument1 : CULong) : Int;

external (stdcall) InitializeSid(
    argument0 : PSID,
    argument1 : PSID_IDENTIFIER_AUTHORITY,
    argument2 : CUChar) : Int;

external (stdcall) InterlockedCompareExchange(
    argument0 : Pointer[CLong],
    argument1 : CLong,
    argument2 : CLong) : CLong;

external (stdcall) InterlockedDecrement(
    argument0 : Pointer[CLong]) : CLong;

external (stdcall) InterlockedExchange(
    argument0 : Pointer[CLong],
    argument1 : CLong) : CLong;

external (stdcall) InterlockedExchangeAdd(
    argument0 : Pointer[CLong],
    argument1 : CLong) : CLong;

external (stdcall) InterlockedIncrement(
    argument0 : Pointer[CLong]) : CLong;

external (stdcall) IsBadCodePtr(
    argument0 : FARPROC) : Int;

external (stdcall) IsBadHugeReadPtr(
    argument0 : PCVOID,
    argument1 : UInt) : Int;

external (stdcall) IsBadHugeWritePtr(
    argument0 : PVOID,
    argument1 : UInt) : Int;

external (stdcall) IsBadReadPtr(
    argument0 : PCVOID,
    argument1 : UInt) : Int;

external (stdcall) IsBadStringPtrA(
    argument0 : LPCSTR,
    argument1 : UInt) : Int;

external (stdcall) IsBadStringPtrW(
    argument0 : LPCWSTR,
    argument1 : UInt) : Int;

external (stdcall) IsBadWritePtr(
    argument0 : PVOID,
    argument1 : UInt) : Int;

external (stdcall) IsDebuggerPresent() : Int;

external (stdcall) IsProcessorFeaturePresent(
    argument0 : CULong) : Int;

external (stdcall) IsSystemResumeAutomatic() : Int;

external (stdcall) IsTextUnicode(
    argument0 : PCVOID,
    argument1 : Int,
    argument2 : LPINT) : Int;

external (stdcall) IsValidAcl(
    argument0 : PACL) : Int;

external (stdcall) IsValidSecurityDescriptor(
    argument0 : PSECURITY_DESCRIPTOR) : Int;

external (stdcall) IsValidSid(
    argument0 : PSID) : Int;

external (stdcall) LeaveCriticalSection(
    argument0 : LPCRITICAL_SECTION) : Void;

external (stdcall) LoadLibraryA(
    argument0 : LPCSTR) : HINSTANCE;

external (stdcall) LoadLibraryExA(
    argument0 : LPCSTR,
    argument1 : HANDLE,
    argument2 : CULong) : HINSTANCE;

external (stdcall) LoadLibraryExW(
    argument0 : LPCWSTR,
    argument1 : HANDLE,
    argument2 : CULong) : HINSTANCE;

external (stdcall) LoadLibraryW(
    argument0 : LPCWSTR) : HINSTANCE;

external (stdcall) LoadModule(
    argument0 : LPCSTR,
    argument1 : PVOID) : CULong;

external (stdcall) LoadResource(
    argument0 : HINSTANCE,
    argument1 : HRSRC) : HGLOBAL;

external (stdcall) LocalAlloc(
    argument0 : UInt,
    argument1 : CULong) : HLOCAL;

external (stdcall) LocalCompact(
    argument0 : UInt) : CULong;

external LocalDiscard(
    argument0 : HLOCAL) : HLOCAL;

external (stdcall) LocalFileTimeToFileTime(
    argument0 : Pointer[FILETIME],
    argument1 : LPFILETIME) : Int;

external (stdcall) LocalFlags(
    argument0 : HLOCAL) : UInt;

external (stdcall) LocalFree(
    argument0 : HLOCAL) : HLOCAL;

external (stdcall) LocalHandle(
    argument0 : LPCVOID) : HLOCAL;

external (stdcall) LocalLock(
    argument0 : HLOCAL) : PVOID;

external (stdcall) LocalReAlloc(
    argument0 : HLOCAL,
    argument1 : CULong,
    argument2 : UInt) : HLOCAL;

external (stdcall) LocalShrink(
    argument0 : HLOCAL,
    argument1 : UInt) : CULong;

external (stdcall) LocalSize(
    argument0 : HLOCAL) : UInt;

external (stdcall) LocalUnlock(
    argument0 : HLOCAL) : Int;

external (stdcall) LockFile(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : CULong) : Int;

external (stdcall) LockFileEx(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : CULong,
    argument5 : LPOVERLAPPED) : Int;

external (stdcall) LockResource(
    argument0 : HGLOBAL) : PVOID;

external (stdcall) LogonUserA(
    argument0 : LPSTR,
    argument1 : LPSTR,
    argument2 : LPSTR,
    argument3 : CULong,
    argument4 : CULong,
    argument5 : PHANDLE) : Int;

external (stdcall) LogonUserW(
    argument0 : LPWSTR,
    argument1 : LPWSTR,
    argument2 : LPWSTR,
    argument3 : CULong,
    argument4 : CULong,
    argument5 : PHANDLE) : Int;

external (stdcall) LookupAccountNameA(
    argument0 : LPCSTR,
    argument1 : LPCSTR,
    argument2 : PSID,
    argument3 : PDWORD,
    argument4 : LPSTR,
    argument5 : PDWORD,
    argument6 : PSID_NAME_USE) : Int;

external (stdcall) LookupAccountNameW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR,
    argument2 : PSID,
    argument3 : PDWORD,
    argument4 : LPWSTR,
    argument5 : PDWORD,
    argument6 : PSID_NAME_USE) : Int;

external (stdcall) LookupAccountSidA(
    argument0 : LPCSTR,
    argument1 : PSID,
    argument2 : LPSTR,
    argument3 : PDWORD,
    argument4 : LPSTR,
    argument5 : PDWORD,
    argument6 : PSID_NAME_USE) : Int;

external (stdcall) LookupAccountSidW(
    argument0 : LPCWSTR,
    argument1 : PSID,
    argument2 : LPWSTR,
    argument3 : PDWORD,
    argument4 : LPWSTR,
    argument5 : PDWORD,
    argument6 : PSID_NAME_USE) : Int;

external (stdcall) LookupPrivilegeDisplayNameA(
    argument0 : LPCSTR,
    argument1 : LPCSTR,
    argument2 : LPSTR,
    argument3 : PDWORD,
    argument4 : PDWORD) : Int;

external (stdcall) LookupPrivilegeDisplayNameW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR,
    argument2 : LPWSTR,
    argument3 : PDWORD,
    argument4 : PDWORD) : Int;

external (stdcall) LookupPrivilegeNameA(
    argument0 : LPCSTR,
    argument1 : PLUID,
    argument2 : LPSTR,
    argument3 : PDWORD) : Int;

external (stdcall) LookupPrivilegeNameW(
    argument0 : LPCWSTR,
    argument1 : PLUID,
    argument2 : LPWSTR,
    argument3 : PDWORD) : Int;

external (stdcall) LookupPrivilegeValueA(
    argument0 : LPCSTR,
    argument1 : LPCSTR,
    argument2 : PLUID) : Int;

external (stdcall) LookupPrivilegeValueW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR,
    argument2 : PLUID) : Int;

external (stdcall) lstrcatA(
    argument0 : LPSTR,
    argument1 : LPCSTR) : LPSTR;

external (stdcall) lstrcatW(
    argument0 : LPWSTR,
    argument1 : LPCWSTR) : LPWSTR;

external (stdcall) lstrcmpA(
    argument0 : LPCSTR,
    argument1 : LPCSTR) : Int;

external (stdcall) lstrcmpiA(
    argument0 : LPCSTR,
    argument1 : LPCSTR) : Int;

external (stdcall) lstrcmpiW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR) : Int;

external (stdcall) lstrcmpW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR) : Int;

external (stdcall) lstrcpyA(
    argument0 : LPSTR,
    argument1 : LPCSTR) : LPSTR;

external (stdcall) lstrcpynA(
    argument0 : LPSTR,
    argument1 : LPCSTR,
    argument2 : Int) : LPSTR;

external (stdcall) lstrcpynW(
    argument0 : LPWSTR,
    argument1 : LPCWSTR,
    argument2 : Int) : LPWSTR;

external (stdcall) lstrcpyW(
    argument0 : LPWSTR,
    argument1 : LPCWSTR) : LPWSTR;

external (stdcall) lstrlenA(
    argument0 : LPCSTR) : Int;

external (stdcall) lstrlenW(
    argument0 : LPCWSTR) : Int;

external (stdcall) MakeAbsoluteSD(
    argument0 : PSECURITY_DESCRIPTOR,
    argument1 : PSECURITY_DESCRIPTOR,
    argument2 : PDWORD,
    argument3 : PACL,
    argument4 : PDWORD,
    argument5 : PACL,
    argument6 : PDWORD,
    argument7 : PSID,
    argument8 : PDWORD,
    argument9 : PSID,
    argument10 : PDWORD) : Int;

external (stdcall) MakeSelfRelativeSD(
    argument0 : PSECURITY_DESCRIPTOR,
    argument1 : PSECURITY_DESCRIPTOR,
    argument2 : PDWORD) : Int;

external (stdcall) MapGenericMask(
    argument0 : PDWORD,
    argument1 : PGENERIC_MAPPING) : Void;

external (stdcall) MapViewOfFile(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : CULong) : PVOID;

external (stdcall) MapViewOfFileEx(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : CULong,
    argument5 : PVOID) : PVOID;

external (stdcall) MoveFileA(
    argument0 : LPCSTR,
    argument1 : LPCSTR) : Int;

external (stdcall) MoveFileExA(
    argument0 : LPCSTR,
    argument1 : LPCSTR,
    argument2 : CULong) : Int;

external (stdcall) MoveFileExW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR,
    argument2 : CULong) : Int;

external (stdcall) MoveFileW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR) : Int;

external (stdcall) MulDiv(
    argument0 : Int,
    argument1 : Int,
    argument2 : Int) : Int;

external (stdcall) NotifyChangeEventLog(
    argument0 : HANDLE,
    argument1 : HANDLE) : Int;

external (stdcall) ObjectCloseAuditAlarmA(
    argument0 : LPCSTR,
    argument1 : PVOID,
    argument2 : Int) : Int;

external (stdcall) ObjectCloseAuditAlarmW(
    argument0 : LPCWSTR,
    argument1 : PVOID,
    argument2 : Int) : Int;

external (stdcall) ObjectDeleteAuditAlarmA(
    argument0 : LPCSTR,
    argument1 : PVOID,
    argument2 : Int) : Int;

external (stdcall) ObjectDeleteAuditAlarmW(
    argument0 : LPCWSTR,
    argument1 : PVOID,
    argument2 : Int) : Int;

external (stdcall) ObjectOpenAuditAlarmA(
    argument0 : LPCSTR,
    argument1 : PVOID,
    argument2 : LPSTR,
    argument3 : LPSTR,
    argument4 : PSECURITY_DESCRIPTOR,
    argument5 : HANDLE,
    argument6 : CULong,
    argument7 : CULong,
    argument8 : PPRIVILEGE_SET,
    argument9 : Int,
    argument10 : Int,
    argument11 : PBOOL) : Int;

external (stdcall) ObjectOpenAuditAlarmW(
    argument0 : LPCWSTR,
    argument1 : PVOID,
    argument2 : LPWSTR,
    argument3 : LPWSTR,
    argument4 : PSECURITY_DESCRIPTOR,
    argument5 : HANDLE,
    argument6 : CULong,
    argument7 : CULong,
    argument8 : PPRIVILEGE_SET,
    argument9 : Int,
    argument10 : Int,
    argument11 : PBOOL) : Int;

external (stdcall) ObjectPrivilegeAuditAlarmA(
    argument0 : LPCSTR,
    argument1 : PVOID,
    argument2 : HANDLE,
    argument3 : CULong,
    argument4 : PPRIVILEGE_SET,
    argument5 : Int) : Int;

external (stdcall) ObjectPrivilegeAuditAlarmW(
    argument0 : LPCWSTR,
    argument1 : PVOID,
    argument2 : HANDLE,
    argument3 : CULong,
    argument4 : PPRIVILEGE_SET,
    argument5 : Int) : Int;

external (stdcall) OpenBackupEventLogA(
    argument0 : LPCSTR,
    argument1 : LPCSTR) : HANDLE;

external (stdcall) OpenBackupEventLogW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR) : HANDLE;

external (stdcall) OpenEventA(
    argument0 : CULong,
    argument1 : Int,
    argument2 : LPCSTR) : HANDLE;

external (stdcall) OpenEventLogA(
    argument0 : LPCSTR,
    argument1 : LPCSTR) : HANDLE;

external (stdcall) OpenEventLogW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR) : HANDLE;

external (stdcall) OpenEventW(
    argument0 : CULong,
    argument1 : Int,
    argument2 : LPCWSTR) : HANDLE;

external (stdcall) OpenFile(
    argument0 : LPCSTR,
    argument1 : LPOFSTRUCT,
    argument2 : UInt) : Int;

external (stdcall) OpenFileMappingA(
    argument0 : CULong,
    argument1 : Int,
    argument2 : LPCSTR) : HANDLE;

external (stdcall) OpenFileMappingW(
    argument0 : CULong,
    argument1 : Int,
    argument2 : LPCWSTR) : HANDLE;

external (stdcall) OpenMutexA(
    argument0 : CULong,
    argument1 : Int,
    argument2 : LPCSTR) : HANDLE;

external (stdcall) OpenMutexW(
    argument0 : CULong,
    argument1 : Int,
    argument2 : LPCWSTR) : HANDLE;

external (stdcall) OpenProcess(
    argument0 : CULong,
    argument1 : Int,
    argument2 : CULong) : HANDLE;

external (stdcall) OpenProcessToken(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : PHANDLE) : Int;

external (stdcall) OpenSemaphoreA(
    argument0 : CULong,
    argument1 : Int,
    argument2 : LPCSTR) : HANDLE;

external (stdcall) OpenSemaphoreW(
    argument0 : CULong,
    argument1 : Int,
    argument2 : LPCWSTR) : HANDLE;

external (stdcall) OpenThreadToken(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : Int,
    argument3 : PHANDLE) : Int;

external (stdcall) OpenWaitableTimerA(
    argument0 : CULong,
    argument1 : Int,
    argument2 : LPCSTR) : HANDLE;

external (stdcall) OpenWaitableTimerW(
    argument0 : CULong,
    argument1 : Int,
    argument2 : LPCWSTR) : HANDLE;

external (stdcall) OutputDebugStringA(
    argument0 : LPCSTR) : Void;

external (stdcall) OutputDebugStringW(
    argument0 : LPCWSTR) : Void;

external (stdcall) PeekNamedPipe(
    argument0 : HANDLE,
    argument1 : PVOID,
    argument2 : CULong,
    argument3 : PDWORD,
    argument4 : PDWORD,
    argument5 : PDWORD) : Int;

external (stdcall) PostQueuedCompletionStatus(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : LPOVERLAPPED) : Int;

external (stdcall) PrepareTape(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : Int) : CULong;

external (stdcall) PrivilegeCheck(
    argument0 : HANDLE,
    argument1 : PPRIVILEGE_SET,
    argument2 : PBOOL) : Int;

external (stdcall) PrivilegedServiceAuditAlarmA(
    argument0 : LPCSTR,
    argument1 : LPCSTR,
    argument2 : HANDLE,
    argument3 : PPRIVILEGE_SET,
    argument4 : Int) : Int;

external (stdcall) PrivilegedServiceAuditAlarmW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR,
    argument2 : HANDLE,
    argument3 : PPRIVILEGE_SET,
    argument4 : Int) : Int;

external (stdcall) PulseEvent(
    argument0 : HANDLE) : Int;

external (stdcall) PurgeComm(
    argument0 : HANDLE,
    argument1 : CULong) : Int;

external (stdcall) QueryDosDeviceA(
    argument0 : LPCSTR,
    argument1 : LPSTR,
    argument2 : CULong) : CULong;

external (stdcall) QueryDosDeviceW(
    argument0 : LPCWSTR,
    argument1 : LPWSTR,
    argument2 : CULong) : CULong;

external (stdcall) QueryPerformanceCounter(
    argument0 : PLARGE_INTEGER) : Int;

external (stdcall) QueryPerformanceFrequency(
    argument0 : PLARGE_INTEGER) : Int;

external (stdcall) QueueUserAPC(
    argument0 : PAPCFUNC,
    argument1 : HANDLE,
    argument2 : CULong) : CULong;

external (stdcall) RaiseException(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[CULong]) : Void;

external (stdcall) ReadDirectoryChangesW(
    argument0 : HANDLE,
    argument1 : PVOID,
    argument2 : CULong,
    argument3 : Int,
    argument4 : CULong,
    argument5 : PDWORD,
    argument6 : LPOVERLAPPED,
    argument7 : LPOVERLAPPED_COMPLETION_ROUTINE) : Int;

external (stdcall) ReadEventLogA(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : PVOID,
    argument4 : CULong,
    argument5 : Pointer[CULong],
    argument6 : Pointer[CULong]) : Int;

external (stdcall) ReadEventLogW(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : PVOID,
    argument4 : CULong,
    argument5 : Pointer[CULong],
    argument6 : Pointer[CULong]) : Int;

external (stdcall) ReadFile(
    argument0 : HANDLE,
    argument1 : PVOID,
    argument2 : CULong,
    argument3 : PDWORD,
    argument4 : LPOVERLAPPED) : Int;

external (stdcall) ReadFileEx(
    argument0 : HANDLE,
    argument1 : PVOID,
    argument2 : CULong,
    argument3 : LPOVERLAPPED,
    argument4 : LPOVERLAPPED_COMPLETION_ROUTINE) : Int;

external (stdcall) ReadFileScatter(
    argument0 : HANDLE,
    argument1 : Pointer[FILE_SEGMENT_ELEMENT],
    argument2 : CULong,
    argument3 : LPDWORD,
    argument4 : LPOVERLAPPED) : Int;

external (stdcall) ReadProcessMemory(
    argument0 : HANDLE,
    argument1 : PCVOID,
    argument2 : PVOID,
    argument3 : CULong,
    argument4 : PDWORD) : Int;

external (stdcall) RegisterEventSourceA(
    argument0 : LPCSTR,
    argument1 : LPCSTR) : HANDLE;

external (stdcall) RegisterEventSourceW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR) : HANDLE;

external (stdcall) ReleaseMutex(
    argument0 : HANDLE) : Int;

external (stdcall) ReleaseSemaphore(
    argument0 : HANDLE,
    argument1 : CLong,
    argument2 : LPLONG) : Int;

external (stdcall) RemoveDirectoryA(
    argument0 : LPCSTR) : Int;

external (stdcall) RemoveDirectoryW(
    argument0 : LPCWSTR) : Int;

external (stdcall) ReportEventA(
    argument0 : HANDLE,
    argument1 : UShort,
    argument2 : UShort,
    argument3 : CULong,
    argument4 : PSID,
    argument5 : UShort,
    argument6 : CULong,
    argument7 : Pointer[LPCSTR],
    argument8 : PVOID) : Int;

external (stdcall) ReportEventW(
    argument0 : HANDLE,
    argument1 : UShort,
    argument2 : UShort,
    argument3 : CULong,
    argument4 : PSID,
    argument5 : UShort,
    argument6 : CULong,
    argument7 : Pointer[LPCWSTR],
    argument8 : PVOID) : Int;

external (stdcall) ResetEvent(
    argument0 : HANDLE) : Int;

external (stdcall) ResetWriteWatch(
    argument0 : LPVOID,
    argument1 : CULong) : UInt;

external (stdcall) ResumeThread(
    argument0 : HANDLE) : CULong;

external (stdcall) RevertToSelf() : Int;

external (stdcall) SearchPathA(
    argument0 : LPCSTR,
    argument1 : LPCSTR,
    argument2 : LPCSTR,
    argument3 : CULong,
    argument4 : LPSTR,
    argument5 : Pointer[LPSTR]) : CULong;

external (stdcall) SearchPathW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR,
    argument2 : LPCWSTR,
    argument3 : CULong,
    argument4 : LPWSTR,
    argument5 : Pointer[LPWSTR]) : CULong;

external (stdcall) SetAclInformation(
    argument0 : PACL,
    argument1 : PVOID,
    argument2 : CULong,
    argument3 : ACL_INFORMATION_CLASS) : Int;

external (stdcall) SetCommBreak(
    argument0 : HANDLE) : Int;

external (stdcall) SetCommConfig(
    argument0 : HANDLE,
    argument1 : LPCOMMCONFIG,
    argument2 : CULong) : Int;

external (stdcall) SetCommMask(
    argument0 : HANDLE,
    argument1 : CULong) : Int;

external (stdcall) SetCommState(
    argument0 : HANDLE,
    argument1 : LPDCB) : Int;

external (stdcall) SetCommTimeouts(
    argument0 : HANDLE,
    argument1 : LPCOMMTIMEOUTS) : Int;

external (stdcall) SetComputerNameA(
    argument0 : LPCSTR) : Int;

external (stdcall) SetComputerNameW(
    argument0 : LPCWSTR) : Int;

external (stdcall) SetCurrentDirectoryA(
    argument0 : LPCSTR) : Int;

external (stdcall) SetCurrentDirectoryW(
    argument0 : LPCWSTR) : Int;

external (stdcall) SetDefaultCommConfigA(
    argument0 : LPCSTR,
    argument1 : LPCOMMCONFIG,
    argument2 : CULong) : Int;

external (stdcall) SetDefaultCommConfigW(
    argument0 : LPCWSTR,
    argument1 : LPCOMMCONFIG,
    argument2 : CULong) : Int;

external (stdcall) SetEndOfFile(
    argument0 : HANDLE) : Int;

external (stdcall) SetEnvironmentVariableA(
    argument0 : LPCSTR,
    argument1 : LPCSTR) : Int;

external (stdcall) SetEnvironmentVariableW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR) : Int;

external (stdcall) SetErrorMode(
    argument0 : UInt) : UInt;

external (stdcall) SetEvent(
    argument0 : HANDLE) : Int;

external (stdcall) SetFileApisToANSI() : Void;

external (stdcall) SetFileApisToOEM() : Void;

external (stdcall) SetFileAttributesA(
    argument0 : LPCSTR,
    argument1 : CULong) : Int;

external (stdcall) SetFileAttributesW(
    argument0 : LPCWSTR,
    argument1 : CULong) : Int;

external (stdcall) SetFilePointer(
    argument0 : HANDLE,
    argument1 : CLong,
    argument2 : PLONG,
    argument3 : CULong) : CULong;

external (stdcall) SetFilePointerEx(
    argument0 : HANDLE,
    argument1 : LARGE_INTEGER,
    argument2 : PLARGE_INTEGER,
    argument3 : CULong) : Int;

external (stdcall) SetFileSecurityA(
    argument0 : LPCSTR,
    argument1 : CULong,
    argument2 : PSECURITY_DESCRIPTOR) : Int;

external (stdcall) SetFileSecurityW(
    argument0 : LPCWSTR,
    argument1 : CULong,
    argument2 : PSECURITY_DESCRIPTOR) : Int;

external (stdcall) SetFileTime(
    argument0 : HANDLE,
    argument1 : Pointer[FILETIME],
    argument2 : Pointer[FILETIME],
    argument3 : Pointer[FILETIME]) : Int;

external (stdcall) SetHandleCount(
    argument0 : UInt) : UInt;

external (stdcall) SetHandleInformation(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : CULong) : Int;

external (stdcall) SetKernelObjectSecurity(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : PSECURITY_DESCRIPTOR) : Int;

external (stdcall) SetLastError(
    argument0 : CULong) : Void;

external (stdcall) SetLastErrorEx(
    argument0 : CULong,
    argument1 : CULong) : Void;

external (stdcall) SetLocalTime(
    argument0 : Pointer[SYSTEMTIME]) : Int;

external (stdcall) SetMailslotInfo(
    argument0 : HANDLE,
    argument1 : CULong) : Int;

external (stdcall) SetNamedPipeHandleState(
    argument0 : HANDLE,
    argument1 : PDWORD,
    argument2 : PDWORD,
    argument3 : PDWORD) : Int;

external (stdcall) SetPriorityClass(
    argument0 : HANDLE,
    argument1 : CULong) : Int;

external (stdcall) SetPrivateObjectSecurity(
    argument0 : CULong,
    argument1 : PSECURITY_DESCRIPTOR,
    argument2 : Pointer[PSECURITY_DESCRIPTOR],
    argument3 : PGENERIC_MAPPING,
    argument4 : HANDLE) : Int;

external (stdcall) SetProcessAffinityMask(
    argument0 : HANDLE,
    argument1 : CULong) : Int;

external (stdcall) SetProcessPriorityBoost(
    argument0 : HANDLE,
    argument1 : Int) : Int;

external (stdcall) SetProcessShutdownParameters(
    argument0 : CULong,
    argument1 : CULong) : Int;

external (stdcall) SetProcessWorkingSetSize(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : CULong) : Int;

external (stdcall) SetSecurityDescriptorControl(
    argument0 : PSECURITY_DESCRIPTOR,
    argument1 : UShort,
    argument2 : UShort) : Int;

external (stdcall) SetSecurityDescriptorDacl(
    argument0 : PSECURITY_DESCRIPTOR,
    argument1 : Int,
    argument2 : PACL,
    argument3 : Int) : Int;

external (stdcall) SetSecurityDescriptorGroup(
    argument0 : PSECURITY_DESCRIPTOR,
    argument1 : PSID,
    argument2 : Int) : Int;

external (stdcall) SetSecurityDescriptorOwner(
    argument0 : PSECURITY_DESCRIPTOR,
    argument1 : PSID,
    argument2 : Int) : Int;

external (stdcall) SetSecurityDescriptorSacl(
    argument0 : PSECURITY_DESCRIPTOR,
    argument1 : Int,
    argument2 : PACL,
    argument3 : Int) : Int;

external (stdcall) SetStdHandle(
    argument0 : CULong,
    argument1 : HANDLE) : Int;

external (stdcall) SetSystemPowerState(
    argument0 : Int,
    argument1 : Int) : Int;

external (stdcall) SetSystemTime(
    argument0 : Pointer[SYSTEMTIME]) : Int;

external (stdcall) SetSystemTimeAdjustment(
    argument0 : CULong,
    argument1 : Int) : Int;

external (stdcall) SetTapeParameters(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : PVOID) : CULong;

external (stdcall) SetTapePosition(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : CULong,
    argument5 : Int) : CULong;

external (stdcall) SetThreadAffinityMask(
    argument0 : HANDLE,
    argument1 : CULong) : CULong;

external (stdcall) SetThreadContext(
    argument0 : HANDLE,
    argument1 : Pointer[CONTEXT]) : Int;

external (stdcall) SetThreadIdealProcessor(
    argument0 : HANDLE,
    argument1 : CULong) : CULong;

external (stdcall) SetThreadPriority(
    argument0 : HANDLE,
    argument1 : Int) : Int;

external (stdcall) SetThreadPriorityBoost(
    argument0 : HANDLE,
    argument1 : Int) : Int;

external (stdcall) SetThreadToken(
    argument0 : PHANDLE,
    argument1 : HANDLE) : Int;

external (stdcall) SetTimeZoneInformation(
    argument0 : Pointer[TIME_ZONE_INFORMATION]) : Int;

external (stdcall) SetTokenInformation(
    argument0 : HANDLE,
    argument1 : TOKEN_INFORMATION_CLASS,
    argument2 : PVOID,
    argument3 : CULong) : Int;

external (stdcall) SetUnhandledExceptionFilter(
    argument0 : LPTOP_LEVEL_EXCEPTION_FILTER) : LPTOP_LEVEL_EXCEPTION_FILTER;

external (stdcall) SetupComm(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : CULong) : Int;

external (stdcall) SetVolumeLabelA(
    argument0 : LPCSTR,
    argument1 : LPCSTR) : Int;

external (stdcall) SetVolumeLabelW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR) : Int;

external (stdcall) SetWaitableTimer(
    argument0 : HANDLE,
    argument1 : Pointer[LARGE_INTEGER],
    argument2 : CLong,
    argument3 : PTIMERAPCROUTINE,
    argument4 : PVOID,
    argument5 : Int) : Int;

external (stdcall) SignalObjectAndWait(
    argument0 : HANDLE,
    argument1 : HANDLE,
    argument2 : CULong,
    argument3 : Int) : CULong;

external (stdcall) SizeofResource(
    argument0 : HINSTANCE,
    argument1 : HRSRC) : CULong;

external (stdcall) Sleep(
    argument0 : CULong) : Void;

external (stdcall) SleepEx(
    argument0 : CULong,
    argument1 : Int) : CULong;

external (stdcall) SuspendThread(
    argument0 : HANDLE) : CULong;

external (stdcall) SwitchToFiber(
    argument0 : PVOID) : Void;

external (stdcall) SwitchToThread() : Int;

external (stdcall) SystemTimeToFileTime(
    argument0 : Pointer[SYSTEMTIME],
    argument1 : LPFILETIME) : Int;

external (stdcall) SystemTimeToTzSpecificLocalTime(
    argument0 : LPTIME_ZONE_INFORMATION,
    argument1 : LPSYSTEMTIME,
    argument2 : LPSYSTEMTIME) : Int;

external (stdcall) TerminateProcess(
    argument0 : HANDLE,
    argument1 : UInt) : Int;

external (stdcall) TerminateThread(
    argument0 : HANDLE,
    argument1 : CULong) : Int;

external (stdcall) TlsAlloc() : CULong;

external (stdcall) TlsFree(
    argument0 : CULong) : Int;

external (stdcall) TlsGetValue(
    argument0 : CULong) : PVOID;

external (stdcall) TlsSetValue(
    argument0 : CULong,
    argument1 : PVOID) : Int;

external (stdcall) TransactNamedPipe(
    argument0 : HANDLE,
    argument1 : PVOID,
    argument2 : CULong,
    argument3 : PVOID,
    argument4 : CULong,
    argument5 : PDWORD,
    argument6 : LPOVERLAPPED) : Int;

external (stdcall) TransmitCommChar(
    argument0 : HANDLE,
    argument1 : CChar) : Int;

external (stdcall) TryEnterCriticalSection(
    argument0 : LPCRITICAL_SECTION) : Int;

external (stdcall) UnhandledExceptionFilter(
    argument0 : LPEXCEPTION_POINTERS) : CLong;

external (stdcall) UnlockFile(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : CULong) : Int;

external (stdcall) UnlockFileEx(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : LPOVERLAPPED) : Int;

external (stdcall) UnmapViewOfFile(
    argument0 : LPCVOID) : Int;

external (stdcall) UpdateResourceA(
    argument0 : HANDLE,
    argument1 : LPCSTR,
    argument2 : LPCSTR,
    argument3 : UShort,
    argument4 : PVOID,
    argument5 : CULong) : Int;

external (stdcall) UpdateResourceW(
    argument0 : HANDLE,
    argument1 : LPCWSTR,
    argument2 : LPCWSTR,
    argument3 : UShort,
    argument4 : PVOID,
    argument5 : CULong) : Int;

external (stdcall) VerifyVersionInfoA(
    argument0 : LPOSVERSIONINFOEXA,
    argument1 : CULong,
    argument2 : UInt64) : Int;

external (stdcall) VerifyVersionInfoW(
    argument0 : LPOSVERSIONINFOEXW,
    argument1 : CULong,
    argument2 : UInt64) : Int;

external (stdcall) VirtualAlloc(
    argument0 : PVOID,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : CULong) : PVOID;

external (stdcall) VirtualAllocEx(
    argument0 : HANDLE,
    argument1 : PVOID,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : CULong) : PVOID;

external (stdcall) VirtualFree(
    argument0 : PVOID,
    argument1 : CULong,
    argument2 : CULong) : Int;

external (stdcall) VirtualFreeEx(
    argument0 : HANDLE,
    argument1 : PVOID,
    argument2 : CULong,
    argument3 : CULong) : Int;

external (stdcall) VirtualLock(
    argument0 : PVOID,
    argument1 : CULong) : Int;

external (stdcall) VirtualProtect(
    argument0 : PVOID,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : PDWORD) : Int;

external (stdcall) VirtualProtectEx(
    argument0 : HANDLE,
    argument1 : PVOID,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : PDWORD) : Int;

external (stdcall) VirtualQuery(
    argument0 : LPCVOID,
    argument1 : PMEMORY_BASIC_INFORMATION,
    argument2 : CULong) : CULong;

external (stdcall) VirtualQueryEx(
    argument0 : HANDLE,
    argument1 : LPCVOID,
    argument2 : PMEMORY_BASIC_INFORMATION,
    argument3 : CULong) : CULong;

external (stdcall) VirtualUnlock(
    argument0 : PVOID,
    argument1 : CULong) : Int;

external (stdcall) WaitCommEvent(
    argument0 : HANDLE,
    argument1 : PDWORD,
    argument2 : LPOVERLAPPED) : Int;

external (stdcall) WaitForDebugEvent(
    argument0 : LPDEBUG_EVENT,
    argument1 : CULong) : Int;

external (stdcall) WaitForMultipleObjects(
    argument0 : CULong,
    argument1 : Pointer[HANDLE],
    argument2 : Int,
    argument3 : CULong) : CULong;

external (stdcall) WaitForMultipleObjectsEx(
    argument0 : CULong,
    argument1 : Pointer[HANDLE],
    argument2 : Int,
    argument3 : CULong,
    argument4 : Int) : CULong;

external (stdcall) WaitForSingleObject(
    argument0 : HANDLE,
    argument1 : CULong) : CULong;

external (stdcall) WaitForSingleObjectEx(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : Int) : CULong;

external (stdcall) WaitNamedPipeA(
    argument0 : LPCSTR,
    argument1 : CULong) : Int;

external (stdcall) WaitNamedPipeW(
    argument0 : LPCWSTR,
    argument1 : CULong) : Int;

external (stdcall) WinLoadTrustProvider(
    argument0 : Pointer[GUID]) : Int;

external (stdcall) WriteFile(
    argument0 : HANDLE,
    argument1 : PCVOID,
    argument2 : CULong,
    argument3 : PDWORD,
    argument4 : LPOVERLAPPED) : Int;

external (stdcall) WriteFileEx(
    argument0 : HANDLE,
    argument1 : PCVOID,
    argument2 : CULong,
    argument3 : LPOVERLAPPED,
    argument4 : LPOVERLAPPED_COMPLETION_ROUTINE) : Int;

external (stdcall) WriteFileGather(
    argument0 : HANDLE,
    argument1 : Pointer[FILE_SEGMENT_ELEMENT],
    argument2 : CULong,
    argument3 : LPDWORD,
    argument4 : LPOVERLAPPED) : Int;

external (stdcall) WritePrivateProfileSectionA(
    argument0 : LPCSTR,
    argument1 : LPCSTR,
    argument2 : LPCSTR) : Int;

external (stdcall) WritePrivateProfileSectionW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR,
    argument2 : LPCWSTR) : Int;

external (stdcall) WritePrivateProfileStringA(
    argument0 : LPCSTR,
    argument1 : LPCSTR,
    argument2 : LPCSTR,
    argument3 : LPCSTR) : Int;

external (stdcall) WritePrivateProfileStringW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR,
    argument2 : LPCWSTR,
    argument3 : LPCWSTR) : Int;

external (stdcall) WritePrivateProfileStructA(
    argument0 : LPCSTR,
    argument1 : LPCSTR,
    argument2 : LPVOID,
    argument3 : UInt,
    argument4 : LPCSTR) : Int;

external (stdcall) WritePrivateProfileStructW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR,
    argument2 : LPVOID,
    argument3 : UInt,
    argument4 : LPCWSTR) : Int;

external (stdcall) WriteProcessMemory(
    argument0 : HANDLE,
    argument1 : LPVOID,
    argument2 : LPCVOID,
    argument3 : CULong,
    argument4 : Pointer[CULong]) : Int;

external (stdcall) WriteProfileSectionA(
    argument0 : LPCSTR,
    argument1 : LPCSTR) : Int;

external (stdcall) WriteProfileSectionW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR) : Int;

external (stdcall) WriteProfileStringA(
    argument0 : LPCSTR,
    argument1 : LPCSTR,
    argument2 : LPCSTR) : Int;

external (stdcall) WriteProfileStringW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR,
    argument2 : LPCWSTR) : Int;

external (stdcall) WriteTapemark(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Int) : CULong;

static STARTUPINFO = STARTUPINFOA;

static LPSTARTUPINFO = Pointer[STARTUPINFOA];

static WIN32_FIND_DATA = WIN32_FIND_DATAA;

static PWIN32_FIND_DATA = Pointer[WIN32_FIND_DATAA];

static LPWIN32_FIND_DATA = Pointer[WIN32_FIND_DATAA];

static HW_PROFILE_INFO = HW_PROFILE_INFOA;

static LPHW_PROFILE_INFO = Pointer[HW_PROFILE_INFOA];

record _ABC {
    abcA : Int;
    abcB : UInt;
    abcC : Int;
}

static ABC = _ABC;

static LPABC = Pointer[_ABC];

record _ABCFLOAT {
    abcfA : Float;
    abcfB : Float;
    abcfC : Float;
}

static ABCFLOAT = _ABCFLOAT;

static LPABCFLOAT = Pointer[_ABCFLOAT];

record tagBITMAP {
    bmType : CLong;
    bmWidth : CLong;
    bmHeight : CLong;
    bmWidthBytes : CLong;
    bmPlanes : UShort;
    bmBitsPixel : UShort;
    bmBits : LPVOID;
}

static BITMAP = tagBITMAP;

static PBITMAP = Pointer[tagBITMAP];

static LPBITMAP = Pointer[tagBITMAP];

record tagBITMAPCOREHEADER {
    bcSize : CULong;
    bcWidth : UShort;
    bcHeight : UShort;
    bcPlanes : UShort;
    bcBitCount : UShort;
}

static BITMAPCOREHEADER = tagBITMAPCOREHEADER;

static LPBITMAPCOREHEADER = Pointer[tagBITMAPCOREHEADER];

static PBITMAPCOREHEADER = Pointer[tagBITMAPCOREHEADER];

record tagRGBTRIPLE {
    rgbtBlue : CUChar;
    rgbtGreen : CUChar;
    rgbtRed : CUChar;
}

static RGBTRIPLE = tagRGBTRIPLE;

static LPRGBTRIPLE = Pointer[tagRGBTRIPLE];

record tagBITMAPFILEHEADER {
    bfType : UShort;
    bfSize : CULong;
    bfReserved1 : UShort;
    bfReserved2 : UShort;
    bfOffBits : CULong;
}

static BITMAPFILEHEADER = tagBITMAPFILEHEADER;

static LPBITMAPFILEHEADER = Pointer[tagBITMAPFILEHEADER];

static PBITMAPFILEHEADER = Pointer[tagBITMAPFILEHEADER];

record _BITMAPCOREINFO {
    bmciHeader : BITMAPCOREHEADER;
    bmciColors : Array[RGBTRIPLE,1];
}

static BITMAPCOREINFO = _BITMAPCOREINFO;

static LPBITMAPCOREINFO = Pointer[_BITMAPCOREINFO];

static PBITMAPCOREINFO = Pointer[_BITMAPCOREINFO];

record tagBITMAPINFOHEADER {
    biSize : CULong;
    biWidth : CLong;
    biHeight : CLong;
    biPlanes : UShort;
    biBitCount : UShort;
    biCompression : CULong;
    biSizeImage : CULong;
    biXPelsPerMeter : CLong;
    biYPelsPerMeter : CLong;
    biClrUsed : CULong;
    biClrImportant : CULong;
}

static BITMAPINFOHEADER = tagBITMAPINFOHEADER;

static LPBITMAPINFOHEADER = Pointer[tagBITMAPINFOHEADER];

static PBITMAPINFOHEADER = Pointer[tagBITMAPINFOHEADER];

record tagRGBQUAD {
    rgbBlue : CUChar;
    rgbGreen : CUChar;
    rgbRed : CUChar;
    rgbReserved : CUChar;
}

static RGBQUAD = tagRGBQUAD;

static LPRGBQUAD = Pointer[tagRGBQUAD];

record tagBITMAPINFO {
    bmiHeader : BITMAPINFOHEADER;
    bmiColors : Array[RGBQUAD,1];
}

static BITMAPINFO = tagBITMAPINFO;

static LPBITMAPINFO = Pointer[tagBITMAPINFO];

static PBITMAPINFO = Pointer[tagBITMAPINFO];

static FXPT16DOT16 = CLong;

static LPFXPT16DOT16 = Pointer[CLong];

static FXPT2DOT30 = CLong;

static LPFXPT2DOT30 = Pointer[CLong];

record tagCIEXYZ {
    ciexyzX : CLong;
    ciexyzY : CLong;
    ciexyzZ : CLong;
}

static CIEXYZ = tagCIEXYZ;

static LPCIEXYZ = Pointer[tagCIEXYZ];

record tagCIEXYZTRIPLE {
    ciexyzRed : CIEXYZ;
    ciexyzGreen : CIEXYZ;
    ciexyzBlue : CIEXYZ;
}

static CIEXYZTRIPLE = tagCIEXYZTRIPLE;

static LPCIEXYZTRIPLE = Pointer[tagCIEXYZTRIPLE];

record UnnamedRecord3 {
    bV4Size : CULong;
    bV4Width : CLong;
    bV4Height : CLong;
    bV4Planes : UShort;
    bV4BitCount : UShort;
    bV4V4Compression : CULong;
    bV4SizeImage : CULong;
    bV4XPelsPerMeter : CLong;
    bV4YPelsPerMeter : CLong;
    bV4ClrUsed : CULong;
    bV4ClrImportant : CULong;
    bV4RedMask : CULong;
    bV4GreenMask : CULong;
    bV4BlueMask : CULong;
    bV4AlphaMask : CULong;
    bV4CSType : CULong;
    bV4Endpoints : CIEXYZTRIPLE;
    bV4GammaRed : CULong;
    bV4GammaGreen : CULong;
    bV4GammaBlue : CULong;
}

static BITMAPV4HEADER = UnnamedRecord3;

static LPBITMAPV4HEADER = Pointer[UnnamedRecord3];

static PBITMAPV4HEADER = Pointer[UnnamedRecord3];

record UnnamedRecord4 {
    bV5Size : CULong;
    bV5Width : CLong;
    bV5Height : CLong;
    bV5Planes : UShort;
    bV5BitCount : UShort;
    bV5Compression : CULong;
    bV5SizeImage : CULong;
    bV5XPelsPerMeter : CLong;
    bV5YPelsPerMeter : CLong;
    bV5ClrUsed : CULong;
    bV5ClrImportant : CULong;
    bV5RedMask : CULong;
    bV5GreenMask : CULong;
    bV5BlueMask : CULong;
    bV5AlphaMask : CULong;
    bV5CSType : CULong;
    bV5Endpoints : CIEXYZTRIPLE;
    bV5GammaRed : CULong;
    bV5GammaGreen : CULong;
    bV5GammaBlue : CULong;
    bV5Intent : CULong;
    bV5ProfileData : CULong;
    bV5ProfileSize : CULong;
    bV5Reserved : CULong;
}

static BITMAPV5HEADER = UnnamedRecord4;

static LPBITMAPV5HEADER = Pointer[UnnamedRecord4];

static PBITMAPV5HEADER = Pointer[UnnamedRecord4];

record tagFONTSIGNATURE {
    fsUsb : Array[CULong,4];
    fsCsb : Array[CULong,2];
}

static FONTSIGNATURE = tagFONTSIGNATURE;

static LPFONTSIGNATURE = Pointer[tagFONTSIGNATURE];

record UnnamedRecord5 {
    ciCharset : UInt;
    ciACP : UInt;
    fs : FONTSIGNATURE;
}

static CHARSETINFO = UnnamedRecord5;

static LPCHARSETINFO = Pointer[UnnamedRecord5];

record tagCOLORADJUSTMENT {
    caSize : UShort;
    caFlags : UShort;
    caIlluminantIndex : UShort;
    caRedGamma : UShort;
    caGreenGamma : UShort;
    caBlueGamma : UShort;
    caReferenceBlack : UShort;
    caReferenceWhite : UShort;
    caContrast : Short;
    caBrightness : Short;
    caColorfulness : Short;
    caRedGreenTint : Short;
}

static COLORADJUSTMENT = tagCOLORADJUSTMENT;

static LPCOLORADJUSTMENT = Pointer[tagCOLORADJUSTMENT];

record _devicemodeA {
    dmDeviceName : Array[CUChar,32];
    dmSpecVersion : UShort;
    dmDriverVersion : UShort;
    dmSize : UShort;
    dmDriverExtra : UShort;
    dmFields : CULong;
    unnamed_field6 : AUnionType;
    dmColor : Short;
    dmDuplex : Short;
    dmYResolution : Short;
    dmTTOption : Short;
    dmCollate : Short;
    dmFormName : Array[CUChar,32];
    dmLogPixels : UShort;
    dmBitsPerPel : CULong;
    dmPelsWidth : CULong;
    dmPelsHeight : CULong;
    unnamed_field17 : AUnionType;
    dmDisplayFrequency : CULong;
    dmICMMethod : CULong;
    dmICMIntent : CULong;
    dmMediaType : CULong;
    dmDitherType : CULong;
    dmReserved1 : CULong;
    dmReserved2 : CULong;
    dmPanningWidth : CULong;
    dmPanningHeight : CULong;
}

static DEVMODEA = _devicemodeA;

static LPDEVMODEA = Pointer[_devicemodeA];

static PDEVMODEA = Pointer[_devicemodeA];

record _devicemodeW {
    dmDeviceName : Array[UShort,32];
    dmSpecVersion : UShort;
    dmDriverVersion : UShort;
    dmSize : UShort;
    dmDriverExtra : UShort;
    dmFields : CULong;
    unnamed_field6 : AUnionType;
    dmColor : Short;
    dmDuplex : Short;
    dmYResolution : Short;
    dmTTOption : Short;
    dmCollate : Short;
    dmFormName : Array[UShort,32];
    dmLogPixels : UShort;
    dmBitsPerPel : CULong;
    dmPelsWidth : CULong;
    dmPelsHeight : CULong;
    unnamed_field17 : AUnionType;
    dmDisplayFrequency : CULong;
    dmICMMethod : CULong;
    dmICMIntent : CULong;
    dmMediaType : CULong;
    dmDitherType : CULong;
    dmReserved1 : CULong;
    dmReserved2 : CULong;
    dmPanningWidth : CULong;
    dmPanningHeight : CULong;
}

static DEVMODEW = _devicemodeW;

static LPDEVMODEW = Pointer[_devicemodeW];

static PDEVMODEW = Pointer[_devicemodeW];

record tagDIBSECTION {
    dsBm : BITMAP;
    dsBmih : BITMAPINFOHEADER;
    dsBitfields : Array[CULong,3];
    dshSection : HANDLE;
    dsOffset : CULong;
}

static DIBSECTION = tagDIBSECTION;

record _DOCINFOA {
    cbSize : Int;
    lpszDocName : LPCSTR;
    lpszOutput : LPCSTR;
    lpszDatatype : LPCSTR;
    fwType : CULong;
}

static DOCINFOA = _DOCINFOA;

static LPDOCINFOA = Pointer[_DOCINFOA];

record _DOCINFOW {
    cbSize : Int;
    lpszDocName : LPCWSTR;
    lpszOutput : LPCWSTR;
    lpszDatatype : LPCWSTR;
    fwType : CULong;
}

static DOCINFOW = _DOCINFOW;

static LPDOCINFOW = Pointer[_DOCINFOW];

record tagEMR {
    iType : CULong;
    nSize : CULong;
}

static EMR = tagEMR;

static PEMR = Pointer[tagEMR];

record tagEMRANGLEARC {
    emr : EMR;
    ptlCenter : POINTL;
    nRadius : CULong;
    eStartAngle : Float;
    eSweepAngle : Float;
}

static EMRANGLEARC = tagEMRANGLEARC;

static PEMRANGLEARC = Pointer[tagEMRANGLEARC];

record tagEMRARC {
    emr : EMR;
    rclBox : RECTL;
    ptlStart : POINTL;
    ptlEnd : POINTL;
}

static EMRARC = tagEMRARC;

static PEMRARC = Pointer[tagEMRARC];

static EMRARCTO = tagEMRARC;

static PEMRARCTO = Pointer[tagEMRARC];

static EMRCHORD = tagEMRARC;

static PEMRCHORD = Pointer[tagEMRARC];

static EMRPIE = tagEMRARC;

static PEMRPIE = Pointer[tagEMRARC];

record _XFORM {
    eM11 : Float;
    eM12 : Float;
    eM21 : Float;
    eM22 : Float;
    eDx : Float;
    eDy : Float;
}

static XFORM = _XFORM;

static PXFORM = Pointer[_XFORM];

static LPXFORM = Pointer[_XFORM];

record tagEMRBITBLT {
    emr : EMR;
    rclBounds : RECTL;
    xDest : CLong;
    yDest : CLong;
    cxDest : CLong;
    cyDest : CLong;
    dwRop : CULong;
    xSrc : CLong;
    ySrc : CLong;
    xformSrc : XFORM;
    crBkColorSrc : CULong;
    iUsageSrc : CULong;
    offBmiSrc : CULong;
    offBitsSrc : CULong;
    cbBitsSrc : CULong;
}

static EMRBITBLT = tagEMRBITBLT;

static PEMRBITBLT = Pointer[tagEMRBITBLT];

record tagLOGBRUSH {
    lbStyle : UInt;
    lbColor : CULong;
    lbHatch : CLong;
}

static LOGBRUSH = tagLOGBRUSH;

static PLOGBRUSH = Pointer[tagLOGBRUSH];

static LPLOGBRUSH = Pointer[tagLOGBRUSH];

static PATTERN = LOGBRUSH;

static PPATTERN = Pointer[LOGBRUSH];

static LPPATTERN = Pointer[LOGBRUSH];

record tagEMRCREATEBRUSHINDIRECT {
    emr : EMR;
    ihBrush : CULong;
    lb : LOGBRUSH;
}

static EMRCREATEBRUSHINDIRECT = tagEMRCREATEBRUSHINDIRECT;

static PEMRCREATEBRUSHINDIRECT = Pointer[tagEMRCREATEBRUSHINDIRECT];

static LCSCSTYPE = CLong;

static LCSGAMUTMATCH = CLong;

record tagLOGCOLORSPACEA {
    lcsSignature : CULong;
    lcsVersion : CULong;
    lcsSize : CULong;
    lcsCSType : CLong;
    lcsIntent : CLong;
    lcsEndpoints : CIEXYZTRIPLE;
    lcsGammaRed : CULong;
    lcsGammaGreen : CULong;
    lcsGammaBlue : CULong;
    lcsFilename : Array[CChar,260];
}

static LOGCOLORSPACEA = tagLOGCOLORSPACEA;

static LPLOGCOLORSPACEA = Pointer[tagLOGCOLORSPACEA];

record tagLOGCOLORSPACEW {
    lcsSignature : CULong;
    lcsVersion : CULong;
    lcsSize : CULong;
    lcsCSType : CLong;
    lcsIntent : CLong;
    lcsEndpoints : CIEXYZTRIPLE;
    lcsGammaRed : CULong;
    lcsGammaGreen : CULong;
    lcsGammaBlue : CULong;
    lcsFilename : Array[UShort,260];
}

static LOGCOLORSPACEW = tagLOGCOLORSPACEW;

static LPLOGCOLORSPACEW = Pointer[tagLOGCOLORSPACEW];

record tagEMRCREATECOLORSPACE {
    emr : EMR;
    ihCS : CULong;
    lcs : LOGCOLORSPACEW;
}

static EMRCREATECOLORSPACE = tagEMRCREATECOLORSPACE;

static PEMRCREATECOLORSPACE = Pointer[tagEMRCREATECOLORSPACE];

record tagEMRCREATEDIBPATTERNBRUSHPT {
    emr : EMR;
    ihBrush : CULong;
    iUsage : CULong;
    offBmi : CULong;
    cbBmi : CULong;
    offBits : CULong;
    cbBits : CULong;
}

static EMRCREATEDIBPATTERNBRUSHPT = tagEMRCREATEDIBPATTERNBRUSHPT;

static PEMRCREATEDIBPATTERNBRUSHPT = Pointer[tagEMRCREATEDIBPATTERNBRUSHPT];

record tagEMRCREATEMONOBRUSH {
    emr : EMR;
    ihBrush : CULong;
    iUsage : CULong;
    offBmi : CULong;
    cbBmi : CULong;
    offBits : CULong;
    cbBits : CULong;
}

static EMRCREATEMONOBRUSH = tagEMRCREATEMONOBRUSH;

static PEMRCREATEMONOBRUSH = Pointer[tagEMRCREATEMONOBRUSH];

record tagPALETTEENTRY {
    peRed : CUChar;
    peGreen : CUChar;
    peBlue : CUChar;
    peFlags : CUChar;
}

static PALETTEENTRY = tagPALETTEENTRY;

static LPPALETTEENTRY = Pointer[tagPALETTEENTRY];

static PPALETTEENTRY = Pointer[tagPALETTEENTRY];

record tagLOGPALETTE {
    palVersion : UShort;
    palNumEntries : UShort;
    palPalEntry : Array[PALETTEENTRY,1];
}

static LOGPALETTE = tagLOGPALETTE;

static NPLOGPALETTE = Pointer[tagLOGPALETTE];

static PLOGPALETTE = Pointer[tagLOGPALETTE];

static LPLOGPALETTE = Pointer[tagLOGPALETTE];

record tagEMRCREATEPALETTE {
    emr : EMR;
    ihPal : CULong;
    lgpl : LOGPALETTE;
}

static EMRCREATEPALETTE = tagEMRCREATEPALETTE;

static PEMRCREATEPALETTE = Pointer[tagEMRCREATEPALETTE];

record tagLOGPEN {
    lopnStyle : UInt;
    lopnWidth : POINT;
    lopnColor : CULong;
}

static LOGPEN = tagLOGPEN;

static PLOGPEN = Pointer[tagLOGPEN];

static LPLOGPEN = Pointer[tagLOGPEN];

record tagEMRCREATEPEN {
    emr : EMR;
    ihPen : CULong;
    lopn : LOGPEN;
}

static EMRCREATEPEN = tagEMRCREATEPEN;

static PEMRCREATEPEN = Pointer[tagEMRCREATEPEN];

record tagEMRELLIPSE {
    emr : EMR;
    rclBox : RECTL;
}

static EMRELLIPSE = tagEMRELLIPSE;

static PEMRELLIPSE = Pointer[tagEMRELLIPSE];

static EMRRECTANGLE = tagEMRELLIPSE;

static PEMRRECTANGLE = Pointer[tagEMRELLIPSE];

record tagEMREOF {
    emr : EMR;
    nPalEntries : CULong;
    offPalEntries : CULong;
    nSizeLast : CULong;
}

static EMREOF = tagEMREOF;

static PEMREOF = Pointer[tagEMREOF];

record tagEMREXCLUDECLIPRECT {
    emr : EMR;
    rclClip : RECTL;
}

static EMREXCLUDECLIPRECT = tagEMREXCLUDECLIPRECT;

static PEMREXCLUDECLIPRECT = Pointer[tagEMREXCLUDECLIPRECT];

static EMRINTERSECTCLIPRECT = tagEMREXCLUDECLIPRECT;

static PEMRINTERSECTCLIPRECT = Pointer[tagEMREXCLUDECLIPRECT];

record tagPANOSE {
    bFamilyType : CUChar;
    bSerifStyle : CUChar;
    bWeight : CUChar;
    bProportion : CUChar;
    bContrast : CUChar;
    bStrokeVariation : CUChar;
    bArmStyle : CUChar;
    bLetterform : CUChar;
    bMidline : CUChar;
    bXHeight : CUChar;
}

static PANOSE = tagPANOSE;

record tagLOGFONTA {
    lfHeight : CLong;
    lfWidth : CLong;
    lfEscapement : CLong;
    lfOrientation : CLong;
    lfWeight : CLong;
    lfItalic : CUChar;
    lfUnderline : CUChar;
    lfStrikeOut : CUChar;
    lfCharSet : CUChar;
    lfOutPrecision : CUChar;
    lfClipPrecision : CUChar;
    lfQuality : CUChar;
    lfPitchAndFamily : CUChar;
    lfFaceName : Array[CChar,32];
}

static LOGFONTA = tagLOGFONTA;

static PLOGFONTA = Pointer[tagLOGFONTA];

static LPLOGFONTA = Pointer[tagLOGFONTA];

record tagLOGFONTW {
    lfHeight : CLong;
    lfWidth : CLong;
    lfEscapement : CLong;
    lfOrientation : CLong;
    lfWeight : CLong;
    lfItalic : CUChar;
    lfUnderline : CUChar;
    lfStrikeOut : CUChar;
    lfCharSet : CUChar;
    lfOutPrecision : CUChar;
    lfClipPrecision : CUChar;
    lfQuality : CUChar;
    lfPitchAndFamily : CUChar;
    lfFaceName : Array[UShort,32];
}

static LOGFONTW = tagLOGFONTW;

static PLOGFONTW = Pointer[tagLOGFONTW];

static LPLOGFONTW = Pointer[tagLOGFONTW];

record tagEXTLOGFONTA {
    elfLogFont : LOGFONTA;
    elfFullName : Array[CUChar,64];
    elfStyle : Array[CUChar,32];
    elfVersion : CULong;
    elfStyleSize : CULong;
    elfMatch : CULong;
    elfReserved : CULong;
    elfVendorId : Array[CUChar,4];
    elfCulture : CULong;
    elfPanose : PANOSE;
}

static EXTLOGFONTA = tagEXTLOGFONTA;

static PEXTLOGFONTA = Pointer[tagEXTLOGFONTA];

static LPEXTLOGFONTA = Pointer[tagEXTLOGFONTA];

record tagEXTLOGFONTW {
    elfLogFont : LOGFONTW;
    elfFullName : Array[UShort,64];
    elfStyle : Array[UShort,32];
    elfVersion : CULong;
    elfStyleSize : CULong;
    elfMatch : CULong;
    elfReserved : CULong;
    elfVendorId : Array[CUChar,4];
    elfCulture : CULong;
    elfPanose : PANOSE;
}

static EXTLOGFONTW = tagEXTLOGFONTW;

static PEXTLOGFONTW = Pointer[tagEXTLOGFONTW];

static LPEXTLOGFONTW = Pointer[tagEXTLOGFONTW];

record tagEMREXTCREATEFONTINDIRECTW {
    emr : EMR;
    ihFont : CULong;
    elfw : EXTLOGFONTW;
}

static EMREXTCREATEFONTINDIRECTW = tagEMREXTCREATEFONTINDIRECTW;

static PEMREXTCREATEFONTINDIRECTW = Pointer[tagEMREXTCREATEFONTINDIRECTW];

record tagEXTLOGPEN {
    elpPenStyle : UInt;
    elpWidth : UInt;
    elpBrushStyle : UInt;
    elpColor : CULong;
    elpHatch : CLong;
    elpNumEntries : CULong;
    elpStyleEntry : Array[CULong,1];
}

static EXTLOGPEN = tagEXTLOGPEN;

static PEXTLOGPEN = Pointer[tagEXTLOGPEN];

static LPEXTLOGPEN = Pointer[tagEXTLOGPEN];

record tagEMREXTCREATEPEN {
    emr : EMR;
    ihPen : CULong;
    offBmi : CULong;
    cbBmi : CULong;
    offBits : CULong;
    cbBits : CULong;
    elp : EXTLOGPEN;
}

static EMREXTCREATEPEN = tagEMREXTCREATEPEN;

static PEMREXTCREATEPEN = Pointer[tagEMREXTCREATEPEN];

record tagEMREXTFLOODFILL {
    emr : EMR;
    ptlStart : POINTL;
    crColor : CULong;
    iMode : CULong;
}

static EMREXTFLOODFILL = tagEMREXTFLOODFILL;

static PEMREXTFLOODFILL = Pointer[tagEMREXTFLOODFILL];

record tagEMREXTSELECTCLIPRGN {
    emr : EMR;
    cbRgnData : CULong;
    iMode : CULong;
    RgnData : Array[CUChar,1];
}

static EMREXTSELECTCLIPRGN = tagEMREXTSELECTCLIPRGN;

static PEMREXTSELECTCLIPRGN = Pointer[tagEMREXTSELECTCLIPRGN];

record tagEMRTEXT {
    ptlReference : POINTL;
    nChars : CULong;
    offString : CULong;
    fOptions : CULong;
    rcl : RECTL;
    offDx : CULong;
}

static EMRTEXT = tagEMRTEXT;

static PEMRTEXT = Pointer[tagEMRTEXT];

record tagEMREXTTEXTOUTA {
    emr : EMR;
    rclBounds : RECTL;
    iGraphicsMode : CULong;
    exScale : Float;
    eyScale : Float;
    emrtext : EMRTEXT;
}

static EMREXTTEXTOUTA = tagEMREXTTEXTOUTA;

static PEMREXTTEXTOUTA = Pointer[tagEMREXTTEXTOUTA];

static EMREXTTEXTOUTW = tagEMREXTTEXTOUTA;

static PEMREXTTEXTOUTW = Pointer[tagEMREXTTEXTOUTA];

record tagEMRFILLPATH {
    emr : EMR;
    rclBounds : RECTL;
}

static EMRFILLPATH = tagEMRFILLPATH;

static PEMRFILLPATH = Pointer[tagEMRFILLPATH];

static EMRSTROKEANDFILLPATH = tagEMRFILLPATH;

static PEMRSTROKEANDFILLPATH = Pointer[tagEMRFILLPATH];

static EMRSTROKEPATH = tagEMRFILLPATH;

static PEMRSTROKEPATH = Pointer[tagEMRFILLPATH];

record tagEMRFILLRGN {
    emr : EMR;
    rclBounds : RECTL;
    cbRgnData : CULong;
    ihBrush : CULong;
    RgnData : Array[CUChar,1];
}

static EMRFILLRGN = tagEMRFILLRGN;

static PEMRFILLRGN = Pointer[tagEMRFILLRGN];

record tagEMRFORMAT {
    dSignature : CULong;
    nVersion : CULong;
    cbData : CULong;
    offData : CULong;
}

static EMRFORMAT = tagEMRFORMAT;

record tagEMRFRAMERGN {
    emr : EMR;
    rclBounds : RECTL;
    cbRgnData : CULong;
    ihBrush : CULong;
    szlStroke : SIZEL;
    RgnData : Array[CUChar,1];
}

static EMRFRAMERGN = tagEMRFRAMERGN;

static PEMRFRAMERGN = Pointer[tagEMRFRAMERGN];

record tagEMRGDICOMMENT {
    emr : EMR;
    cbData : CULong;
    Data : Array[CUChar,1];
}

static EMRGDICOMMENT = tagEMRGDICOMMENT;

static PEMRGDICOMMENT = Pointer[tagEMRGDICOMMENT];

record tagEMRINVERTRGN {
    emr : EMR;
    rclBounds : RECTL;
    cbRgnData : CULong;
    RgnData : Array[CUChar,1];
}

static EMRINVERTRGN = tagEMRINVERTRGN;

static PEMRINVERTRGN = Pointer[tagEMRINVERTRGN];

static EMRPAINTRGN = tagEMRINVERTRGN;

static PEMRPAINTRGN = Pointer[tagEMRINVERTRGN];

record tagEMRLINETO {
    emr : EMR;
    ptl : POINTL;
}

static EMRLINETO = tagEMRLINETO;

static PEMRLINETO = Pointer[tagEMRLINETO];

static EMRMOVETOEX = tagEMRLINETO;

static PEMRMOVETOEX = Pointer[tagEMRLINETO];

record tagEMRMASKBLT {
    emr : EMR;
    rclBounds : RECTL;
    xDest : CLong;
    yDest : CLong;
    cxDest : CLong;
    cyDest : CLong;
    dwRop : CULong;
    xSrc : CLong;
    ySrc : CLong;
    xformSrc : XFORM;
    crBkColorSrc : CULong;
    iUsageSrc : CULong;
    offBmiSrc : CULong;
    cbBmiSrc : CULong;
    offBitsSrc : CULong;
    cbBitsSrc : CULong;
    xMask : CLong;
    yMask : CLong;
    iUsageMask : CULong;
    offBmiMask : CULong;
    cbBmiMask : CULong;
    offBitsMask : CULong;
    cbBitsMask : CULong;
}

static EMRMASKBLT = tagEMRMASKBLT;

static PEMRMASKBLT = Pointer[tagEMRMASKBLT];

record tagEMRMODIFYWORLDTRANSFORM {
    emr : EMR;
    xform : XFORM;
    iMode : CULong;
}

static EMRMODIFYWORLDTRANSFORM = tagEMRMODIFYWORLDTRANSFORM;

static PEMRMODIFYWORLDTRANSFORM = Pointer[tagEMRMODIFYWORLDTRANSFORM];

record tagEMROFFSETCLIPRGN {
    emr : EMR;
    ptlOffset : POINTL;
}

static EMROFFSETCLIPRGN = tagEMROFFSETCLIPRGN;

static PEMROFFSETCLIPRGN = Pointer[tagEMROFFSETCLIPRGN];

record tagEMRPLGBLT {
    emr : EMR;
    rclBounds : RECTL;
    aptlDest : Array[POINTL,3];
    xSrc : CLong;
    ySrc : CLong;
    cxSrc : CLong;
    cySrc : CLong;
    xformSrc : XFORM;
    crBkColorSrc : CULong;
    iUsageSrc : CULong;
    offBmiSrc : CULong;
    cbBmiSrc : CULong;
    offBitsSrc : CULong;
    cbBitsSrc : CULong;
    xMask : CLong;
    yMask : CLong;
    iUsageMask : CULong;
    offBmiMask : CULong;
    cbBmiMask : CULong;
    offBitsMask : CULong;
    cbBitsMask : CULong;
}

static EMRPLGBLT = tagEMRPLGBLT;

static PEMRPLGBLT = Pointer[tagEMRPLGBLT];

record tagEMRPOLYDRAW {
    emr : EMR;
    rclBounds : RECTL;
    cptl : CULong;
    aptl : Array[POINTL,1];
    abTypes : Array[CUChar,1];
}

static EMRPOLYDRAW = tagEMRPOLYDRAW;

static PEMRPOLYDRAW = Pointer[tagEMRPOLYDRAW];

record tagEMRPOLYDRAW16 {
    emr : EMR;
    rclBounds : RECTL;
    cpts : CULong;
    apts : Array[POINTS,1];
    abTypes : Array[CUChar,1];
}

static EMRPOLYDRAW16 = tagEMRPOLYDRAW16;

static PEMRPOLYDRAW16 = Pointer[tagEMRPOLYDRAW16];

record tagEMRPOLYLINE {
    emr : EMR;
    rclBounds : RECTL;
    cptl : CULong;
    aptl : Array[POINTL,1];
}

static EMRPOLYLINE = tagEMRPOLYLINE;

static PEMRPOLYLINE = Pointer[tagEMRPOLYLINE];

static EMRPOLYBEZIER = tagEMRPOLYLINE;

static PEMRPOLYBEZIER = Pointer[tagEMRPOLYLINE];

static EMRPOLYGON = tagEMRPOLYLINE;

static PEMRPOLYGON = Pointer[tagEMRPOLYLINE];

static EMRPOLYBEZIERTO = tagEMRPOLYLINE;

static PEMRPOLYBEZIERTO = Pointer[tagEMRPOLYLINE];

static EMRPOLYLINETO = tagEMRPOLYLINE;

static PEMRPOLYLINETO = Pointer[tagEMRPOLYLINE];

record tagEMRPOLYLINE16 {
    emr : EMR;
    rclBounds : RECTL;
    cpts : CULong;
    apts : Array[POINTL,1];
}

static EMRPOLYLINE16 = tagEMRPOLYLINE16;

static PEMRPOLYLINE16 = Pointer[tagEMRPOLYLINE16];

static EMRPOLYBEZIER16 = tagEMRPOLYLINE16;

static PEMRPOLYBEZIER16 = Pointer[tagEMRPOLYLINE16];

static EMRPOLYGON16 = tagEMRPOLYLINE16;

static PEMRPOLYGON16 = Pointer[tagEMRPOLYLINE16];

static EMRPOLYBEZIERTO16 = tagEMRPOLYLINE16;

static PEMRPOLYBEZIERTO16 = Pointer[tagEMRPOLYLINE16];

static EMRPOLYLINETO16 = tagEMRPOLYLINE16;

static PEMRPOLYLINETO16 = Pointer[tagEMRPOLYLINE16];

record tagEMRPOLYPOLYLINE {
    emr : EMR;
    rclBounds : RECTL;
    nPolys : CULong;
    cptl : CULong;
    aPolyCounts : Array[CULong,1];
    aptl : Array[POINTL,1];
}

static EMRPOLYPOLYLINE = tagEMRPOLYPOLYLINE;

static PEMRPOLYPOLYLINE = Pointer[tagEMRPOLYPOLYLINE];

static EMRPOLYPOLYGON = tagEMRPOLYPOLYLINE;

static PEMRPOLYPOLYGON = Pointer[tagEMRPOLYPOLYLINE];

record tagEMRPOLYPOLYLINE16 {
    emr : EMR;
    rclBounds : RECTL;
    nPolys : CULong;
    cpts : CULong;
    aPolyCounts : Array[CULong,1];
    apts : Array[POINTS,1];
}

static EMRPOLYPOLYLINE16 = tagEMRPOLYPOLYLINE16;

static PEMRPOLYPOLYLINE16 = Pointer[tagEMRPOLYPOLYLINE16];

static EMRPOLYPOLYGON16 = tagEMRPOLYPOLYLINE16;

static PEMRPOLYPOLYGON16 = Pointer[tagEMRPOLYPOLYLINE16];

record tagEMRPOLYTEXTOUTA {
    emr : EMR;
    rclBounds : RECTL;
    iGraphicsMode : CULong;
    exScale : Float;
    eyScale : Float;
    cStrings : CLong;
    aemrtext : Array[EMRTEXT,1];
}

static EMRPOLYTEXTOUTA = tagEMRPOLYTEXTOUTA;

static PEMRPOLYTEXTOUTA = Pointer[tagEMRPOLYTEXTOUTA];

static EMRPOLYTEXTOUTW = tagEMRPOLYTEXTOUTA;

static PEMRPOLYTEXTOUTW = Pointer[tagEMRPOLYTEXTOUTA];

record tagEMRRESIZEPALETTE {
    emr : EMR;
    ihPal : CULong;
    cEntries : CULong;
}

static EMRRESIZEPALETTE = tagEMRRESIZEPALETTE;

static PEMRRESIZEPALETTE = Pointer[tagEMRRESIZEPALETTE];

record tagEMRRESTOREDC {
    emr : EMR;
    iRelative : CLong;
}

static EMRRESTOREDC = tagEMRRESTOREDC;

static PEMRRESTOREDC = Pointer[tagEMRRESTOREDC];

record tagEMRROUNDRECT {
    emr : EMR;
    rclBox : RECTL;
    szlCorner : SIZEL;
}

static EMRROUNDRECT = tagEMRROUNDRECT;

static PEMRROUNDRECT = Pointer[tagEMRROUNDRECT];

record tagEMRSCALEVIEWPORTEXTEX {
    emr : EMR;
    xNum : CLong;
    xDenom : CLong;
    yNum : CLong;
    yDenom : CLong;
}

static EMRSCALEVIEWPORTEXTEX = tagEMRSCALEVIEWPORTEXTEX;

static PEMRSCALEVIEWPORTEXTEX = Pointer[tagEMRSCALEVIEWPORTEXTEX];

static EMRSCALEWINDOWEXTEX = tagEMRSCALEVIEWPORTEXTEX;

static PEMRSCALEWINDOWEXTEX = Pointer[tagEMRSCALEVIEWPORTEXTEX];

record tagEMRSELECTCOLORSPACE {
    emr : EMR;
    ihCS : CULong;
}

static EMRSELECTCOLORSPACE = tagEMRSELECTCOLORSPACE;

static PEMRSELECTCOLORSPACE = Pointer[tagEMRSELECTCOLORSPACE];

static EMRDELETECOLORSPACE = tagEMRSELECTCOLORSPACE;

static PEMRDELETECOLORSPACE = Pointer[tagEMRSELECTCOLORSPACE];

record tagEMRSELECTOBJECT {
    emr : EMR;
    ihObject : CULong;
}

static EMRSELECTOBJECT = tagEMRSELECTOBJECT;

static PEMRSELECTOBJECT = Pointer[tagEMRSELECTOBJECT];

static EMRDELETEOBJECT = tagEMRSELECTOBJECT;

static PEMRDELETEOBJECT = Pointer[tagEMRSELECTOBJECT];

record tagEMRSELECTPALETTE {
    emr : EMR;
    ihPal : CULong;
}

static EMRSELECTPALETTE = tagEMRSELECTPALETTE;

static PEMRSELECTPALETTE = Pointer[tagEMRSELECTPALETTE];

record tagEMRSETARCDIRECTION {
    emr : EMR;
    iArcDirection : CULong;
}

static EMRSETARCDIRECTION = tagEMRSETARCDIRECTION;

static PEMRSETARCDIRECTION = Pointer[tagEMRSETARCDIRECTION];

record tagEMRSETTEXTCOLOR {
    emr : EMR;
    crColor : CULong;
}

static EMRSETBKCOLOR = tagEMRSETTEXTCOLOR;

static PEMRSETBKCOLOR = Pointer[tagEMRSETTEXTCOLOR];

static EMRSETTEXTCOLOR = tagEMRSETTEXTCOLOR;

static PEMRSETTEXTCOLOR = Pointer[tagEMRSETTEXTCOLOR];

record tagEMRSETCOLORADJUSTMENT {
    emr : EMR;
    ColorAdjustment : COLORADJUSTMENT;
}

static EMRSETCOLORADJUSTMENT = tagEMRSETCOLORADJUSTMENT;

static PEMRSETCOLORADJUSTMENT = Pointer[tagEMRSETCOLORADJUSTMENT];

record tagEMRSETDIBITSTODEVICE {
    emr : EMR;
    rclBounds : RECTL;
    xDest : CLong;
    yDest : CLong;
    xSrc : CLong;
    ySrc : CLong;
    cxSrc : CLong;
    cySrc : CLong;
    offBmiSrc : CULong;
    cbBmiSrc : CULong;
    offBitsSrc : CULong;
    cbBitsSrc : CULong;
    iUsageSrc : CULong;
    iStartScan : CULong;
    cScans : CULong;
}

static EMRSETDIBITSTODEVICE = tagEMRSETDIBITSTODEVICE;

static PEMRSETDIBITSTODEVICE = Pointer[tagEMRSETDIBITSTODEVICE];

record tagEMRSETMAPPERFLAGS {
    emr : EMR;
    dwFlags : CULong;
}

static EMRSETMAPPERFLAGS = tagEMRSETMAPPERFLAGS;

static PEMRSETMAPPERFLAGS = Pointer[tagEMRSETMAPPERFLAGS];

record tagEMRSETMITERLIMIT {
    emr : EMR;
    eMiterLimit : Float;
}

static EMRSETMITERLIMIT = tagEMRSETMITERLIMIT;

static PEMRSETMITERLIMIT = Pointer[tagEMRSETMITERLIMIT];

record tagEMRSETPALETTEENTRIES {
    emr : EMR;
    ihPal : CULong;
    iStart : CULong;
    cEntries : CULong;
    aPalEntries : Array[PALETTEENTRY,1];
}

static EMRSETPALETTEENTRIES = tagEMRSETPALETTEENTRIES;

static PEMRSETPALETTEENTRIES = Pointer[tagEMRSETPALETTEENTRIES];

record tagEMRSETPIXELV {
    emr : EMR;
    ptlPixel : POINTL;
    crColor : CULong;
}

static EMRSETPIXELV = tagEMRSETPIXELV;

static PEMRSETPIXELV = Pointer[tagEMRSETPIXELV];

record tagEMRSETVIEWPORTEXTEX {
    emr : EMR;
    szlExtent : SIZEL;
}

static EMRSETVIEWPORTEXTEX = tagEMRSETVIEWPORTEXTEX;

static PEMRSETVIEWPORTEXTEX = Pointer[tagEMRSETVIEWPORTEXTEX];

static EMRSETWINDOWEXTEX = tagEMRSETVIEWPORTEXTEX;

static PEMRSETWINDOWEXTEX = Pointer[tagEMRSETVIEWPORTEXTEX];

record tagEMRSETVIEWPORTORGEX {
    emr : EMR;
    ptlOrigin : POINTL;
}

static EMRSETVIEWPORTORGEX = tagEMRSETVIEWPORTORGEX;

static PEMRSETVIEWPORTORGEX = Pointer[tagEMRSETVIEWPORTORGEX];

static EMRSETWINDOWORGEX = tagEMRSETVIEWPORTORGEX;

static PEMRSETWINDOWORGEX = Pointer[tagEMRSETVIEWPORTORGEX];

static EMRSETBRUSHORGEX = tagEMRSETVIEWPORTORGEX;

static PEMRSETBRUSHORGEX = Pointer[tagEMRSETVIEWPORTORGEX];

record tagEMRSETWORLDTRANSFORM {
    emr : EMR;
    xform : XFORM;
}

static EMRSETWORLDTRANSFORM = tagEMRSETWORLDTRANSFORM;

static PEMRSETWORLDTRANSFORM = Pointer[tagEMRSETWORLDTRANSFORM];

record tagEMRSTRETCHBLT {
    emr : EMR;
    rclBounds : RECTL;
    xDest : CLong;
    yDest : CLong;
    cxDest : CLong;
    cyDest : CLong;
    dwRop : CULong;
    xSrc : CLong;
    ySrc : CLong;
    xformSrc : XFORM;
    crBkColorSrc : CULong;
    iUsageSrc : CULong;
    offBmiSrc : CULong;
    cbBmiSrc : CULong;
    offBitsSrc : CULong;
    cbBitsSrc : CULong;
    cxSrc : CLong;
    cySrc : CLong;
}

static EMRSTRETCHBLT = tagEMRSTRETCHBLT;

static PEMRSTRETCHBLT = Pointer[tagEMRSTRETCHBLT];

record tagEMRSTRETCHDIBITS {
    emr : EMR;
    rclBounds : RECTL;
    xDest : CLong;
    yDest : CLong;
    xSrc : CLong;
    ySrc : CLong;
    cxSrc : CLong;
    cySrc : CLong;
    offBmiSrc : CULong;
    cbBmiSrc : CULong;
    offBitsSrc : CULong;
    cbBitsSrc : CULong;
    iUsageSrc : CULong;
    dwRop : CULong;
    cxDest : CLong;
    cyDest : CLong;
}

static EMRSTRETCHDIBITS = tagEMRSTRETCHDIBITS;

static PEMRSTRETCHDIBITS = Pointer[tagEMRSTRETCHDIBITS];

record tagABORTPATH {
    emr : EMR;
}

static EMRABORTPATH = tagABORTPATH;

static PEMRABORTPATH = Pointer[tagABORTPATH];

static EMRBEGINPATH = tagABORTPATH;

static PEMRBEGINPATH = Pointer[tagABORTPATH];

static EMRENDPATH = tagABORTPATH;

static PEMRENDPATH = Pointer[tagABORTPATH];

static EMRCLOSEFIGURE = tagABORTPATH;

static PEMRCLOSEFIGURE = Pointer[tagABORTPATH];

static EMRFLATTENPATH = tagABORTPATH;

static PEMRFLATTENPATH = Pointer[tagABORTPATH];

static EMRWIDENPATH = tagABORTPATH;

static PEMRWIDENPATH = Pointer[tagABORTPATH];

static EMRSETMETARGN = tagABORTPATH;

static PEMRSETMETARGN = Pointer[tagABORTPATH];

static EMRSAVEDC = tagABORTPATH;

static PEMRSAVEDC = Pointer[tagABORTPATH];

static EMRREALIZEPALETTE = tagABORTPATH;

static PEMRREALIZEPALETTE = Pointer[tagABORTPATH];

record tagEMRSELECTCLIPPATH {
    emr : EMR;
    iMode : CULong;
}

static EMRSELECTCLIPPATH = tagEMRSELECTCLIPPATH;

static PEMRSELECTCLIPPATH = Pointer[tagEMRSELECTCLIPPATH];

static EMRSETBKMODE = tagEMRSELECTCLIPPATH;

static PEMRSETBKMODE = Pointer[tagEMRSELECTCLIPPATH];

static EMRSETMAPMODE = tagEMRSELECTCLIPPATH;

static PEMRSETMAPMODE = Pointer[tagEMRSELECTCLIPPATH];

static EMRSETPOLYFILLMODE = tagEMRSELECTCLIPPATH;

static PEMRSETPOLYFILLMODE = Pointer[tagEMRSELECTCLIPPATH];

static EMRSETROP2 = tagEMRSELECTCLIPPATH;

static PEMRSETROP2 = Pointer[tagEMRSELECTCLIPPATH];

static EMRSETSTRETCHBLTMODE = tagEMRSELECTCLIPPATH;

static PEMRSETSTRETCHBLTMODE = Pointer[tagEMRSELECTCLIPPATH];

static EMRSETTEXTALIGN = tagEMRSELECTCLIPPATH;

static PEMRSETTEXTALIGN = Pointer[tagEMRSELECTCLIPPATH];

static EMRENABLEICM = tagEMRSELECTCLIPPATH;

static PEMRENABLEICM = Pointer[tagEMRSELECTCLIPPATH];

record tagMETAHEADER {
    mtType : UShort;
    mtHeaderSize : UShort;
    mtVersion : UShort;
    mtSize : CULong;
    mtNoObjects : UShort;
    mtMaxRecord : CULong;
    mtNoParameters : UShort;
}

static METAHEADER = tagMETAHEADER;

static PMETAHEADER = Pointer[tagMETAHEADER];

static LPMETAHEADER = Pointer[tagMETAHEADER];

record tagENHMETAHEADER {
    iType : CULong;
    nSize : CULong;
    rclBounds : RECTL;
    rclFrame : RECTL;
    dSignature : CULong;
    nVersion : CULong;
    nBytes : CULong;
    nRecords : CULong;
    nHandles : UShort;
    sReserved : UShort;
    nDescription : CULong;
    offDescription : CULong;
    nPalEntries : CULong;
    szlDevice : SIZEL;
    szlMillimeters : SIZEL;
    cbPixelFormat : CULong;
    offPixelFormat : CULong;
    bOpenGL : CULong;
}

static ENHMETAHEADER = tagENHMETAHEADER;

static LPENHMETAHEADER = Pointer[tagENHMETAHEADER];

record tagMETARECORD {
    rdSize : CULong;
    rdFunction : UShort;
    rdParm : Array[UShort,1];
}

static METARECORD = tagMETARECORD;

static PMETARECORD = Pointer[tagMETARECORD];

static LPMETARECORD = Pointer[tagMETARECORD];

record tagENHMETARECORD {
    iType : CULong;
    nSize : CULong;
    dParm : Array[CULong,1];
}

static ENHMETARECORD = tagENHMETARECORD;

static LPENHMETARECORD = Pointer[tagENHMETARECORD];

record tagHANDLETABLE {
    objectHandle : Array[HGDIOBJ,1];
}

static HANDLETABLE = tagHANDLETABLE;

static LPHANDLETABLE = Pointer[tagHANDLETABLE];

record tagTEXTMETRICA {
    tmHeight : CLong;
    tmAscent : CLong;
    tmDescent : CLong;
    tmInternalLeading : CLong;
    tmExternalLeading : CLong;
    tmAveCharWidth : CLong;
    tmMaxCharWidth : CLong;
    tmWeight : CLong;
    tmOverhang : CLong;
    tmDigitizedAspectX : CLong;
    tmDigitizedAspectY : CLong;
    tmFirstChar : CUChar;
    tmLastChar : CUChar;
    tmDefaultChar : CUChar;
    tmBreakChar : CUChar;
    tmItalic : CUChar;
    tmUnderlined : CUChar;
    tmStruckOut : CUChar;
    tmPitchAndFamily : CUChar;
    tmCharSet : CUChar;
}

static TEXTMETRICA = tagTEXTMETRICA;

static PTEXTMETRICA = Pointer[tagTEXTMETRICA];

static LPTEXTMETRICA = Pointer[tagTEXTMETRICA];

record tagTEXTMETRICW {
    tmHeight : CLong;
    tmAscent : CLong;
    tmDescent : CLong;
    tmInternalLeading : CLong;
    tmExternalLeading : CLong;
    tmAveCharWidth : CLong;
    tmMaxCharWidth : CLong;
    tmWeight : CLong;
    tmOverhang : CLong;
    tmDigitizedAspectX : CLong;
    tmDigitizedAspectY : CLong;
    tmFirstChar : UShort;
    tmLastChar : UShort;
    tmDefaultChar : UShort;
    tmBreakChar : UShort;
    tmItalic : CUChar;
    tmUnderlined : CUChar;
    tmStruckOut : CUChar;
    tmPitchAndFamily : CUChar;
    tmCharSet : CUChar;
}

static TEXTMETRICW = tagTEXTMETRICW;

static PTEXTMETRICW = Pointer[tagTEXTMETRICW];

static LPTEXTMETRICW = Pointer[tagTEXTMETRICW];

record _RGNDATAHEADER {
    dwSize : CULong;
    iType : CULong;
    nCount : CULong;
    nRgnSize : CULong;
    rcBound : RECT;
}

static RGNDATAHEADER = _RGNDATAHEADER;

record _RGNDATA {
    rdh : RGNDATAHEADER;
    Buffer : Array[CChar,1];
}

static RGNDATA = _RGNDATA;

static PRGNDATA = Pointer[_RGNDATA];

static LPRGNDATA = Pointer[_RGNDATA];

record tagGCP_RESULTSA {
    lStructSize : CULong;
    lpOutString : LPSTR;
    lpOrder : Pointer[UInt];
    lpDx : Pointer[Int];
    lpCaretPos : Pointer[Int];
    lpClass : LPSTR;
    lpGlyphs : LPWSTR;
    nGlyphs : UInt;
    nMaxFit : UInt;
}

static GCP_RESULTSA = tagGCP_RESULTSA;

static LPGCP_RESULTSA = Pointer[tagGCP_RESULTSA];

record tagGCP_RESULTSW {
    lStructSize : CULong;
    lpOutString : LPWSTR;
    lpOrder : Pointer[UInt];
    lpDx : Pointer[Int];
    lpCaretPos : Pointer[Int];
    lpClass : LPWSTR;
    lpGlyphs : LPWSTR;
    nGlyphs : UInt;
    nMaxFit : UInt;
}

static GCP_RESULTSW = tagGCP_RESULTSW;

static LPGCP_RESULTSW = Pointer[tagGCP_RESULTSW];

record _GLYPHMETRICS {
    gmBlackBoxX : UInt;
    gmBlackBoxY : UInt;
    gmptGlyphOrigin : POINT;
    gmCellIncX : Short;
    gmCellIncY : Short;
}

static GLYPHMETRICS = _GLYPHMETRICS;

static LPGLYPHMETRICS = Pointer[_GLYPHMETRICS];

record tagKERNINGPAIR {
    wFirst : UShort;
    wSecond : UShort;
    iKernAmount : Int;
}

static KERNINGPAIR = tagKERNINGPAIR;

static LPKERNINGPAIR = Pointer[tagKERNINGPAIR];

record _FIXED {
    fract : UShort;
    value : Short;
}

static FIXED = _FIXED;

record _MAT2 {
    eM11 : FIXED;
    eM12 : FIXED;
    eM21 : FIXED;
    eM22 : FIXED;
}

static MAT2 = _MAT2;

static LPMAT2 = Pointer[_MAT2];

record _OUTLINETEXTMETRICA {
    otmSize : UInt;
    otmTextMetrics : TEXTMETRICA;
    otmFiller : CUChar;
    otmPanoseNumber : PANOSE;
    otmfsSelection : UInt;
    otmfsType : UInt;
    otmsCharSlopeRise : Int;
    otmsCharSlopeRun : Int;
    otmItalicAngle : Int;
    otmEMSquare : UInt;
    otmAscent : Int;
    otmDescent : Int;
    otmLineGap : UInt;
    otmsCapEmHeight : UInt;
    otmsXHeight : UInt;
    otmrcFontBox : RECT;
    otmMacAscent : Int;
    otmMacDescent : Int;
    otmMacLineGap : UInt;
    otmusMinimumPPEM : UInt;
    otmptSubscriptSize : POINT;
    otmptSubscriptOffset : POINT;
    otmptSuperscriptSize : POINT;
    otmptSuperscriptOffset : POINT;
    otmsStrikeoutSize : UInt;
    otmsStrikeoutPosition : Int;
    otmsUnderscoreSize : Int;
    otmsUnderscorePosition : Int;
    otmpFamilyName : PSTR;
    otmpFaceName : PSTR;
    otmpStyleName : PSTR;
    otmpFullName : PSTR;
}

static OUTLINETEXTMETRICA = _OUTLINETEXTMETRICA;

static POUTLINETEXTMETRICA = Pointer[_OUTLINETEXTMETRICA];

static LPOUTLINETEXTMETRICA = Pointer[_OUTLINETEXTMETRICA];

record _OUTLINETEXTMETRICW {
    otmSize : UInt;
    otmTextMetrics : TEXTMETRICW;
    otmFiller : CUChar;
    otmPanoseNumber : PANOSE;
    otmfsSelection : UInt;
    otmfsType : UInt;
    otmsCharSlopeRise : Int;
    otmsCharSlopeRun : Int;
    otmItalicAngle : Int;
    otmEMSquare : UInt;
    otmAscent : Int;
    otmDescent : Int;
    otmLineGap : UInt;
    otmsCapEmHeight : UInt;
    otmsXHeight : UInt;
    otmrcFontBox : RECT;
    otmMacAscent : Int;
    otmMacDescent : Int;
    otmMacLineGap : UInt;
    otmusMinimumPPEM : UInt;
    otmptSubscriptSize : POINT;
    otmptSubscriptOffset : POINT;
    otmptSuperscriptSize : POINT;
    otmptSuperscriptOffset : POINT;
    otmsStrikeoutSize : UInt;
    otmsStrikeoutPosition : Int;
    otmsUnderscoreSize : Int;
    otmsUnderscorePosition : Int;
    otmpFamilyName : PSTR;
    otmpFaceName : PSTR;
    otmpStyleName : PSTR;
    otmpFullName : PSTR;
}

static OUTLINETEXTMETRICW = _OUTLINETEXTMETRICW;

static POUTLINETEXTMETRICW = Pointer[_OUTLINETEXTMETRICW];

static LPOUTLINETEXTMETRICW = Pointer[_OUTLINETEXTMETRICW];

record _RASTERIZER_STATUS {
    nSize : Short;
    wFlags : Short;
    nLanguageID : Short;
}

static RASTERIZER_STATUS = _RASTERIZER_STATUS;

static LPRASTERIZER_STATUS = Pointer[_RASTERIZER_STATUS];

record _POLYTEXTA {
    x : Int;
    y : Int;
    n : UInt;
    lpstr : LPCSTR;
    uiFlags : UInt;
    rcl : RECT;
    pdx : Pointer[Int];
}

static POLYTEXTA = _POLYTEXTA;

static PPOLYTEXTA = Pointer[_POLYTEXTA];

static LPPOLYTEXTA = Pointer[_POLYTEXTA];

record _POLYTEXTW {
    x : Int;
    y : Int;
    n : UInt;
    lpstr : LPCWSTR;
    uiFlags : UInt;
    rcl : RECT;
    pdx : Pointer[Int];
}

static POLYTEXTW = _POLYTEXTW;

static PPOLYTEXTW = Pointer[_POLYTEXTW];

static LPPOLYTEXTW = Pointer[_POLYTEXTW];

record tagPIXELFORMATDESCRIPTOR {
    nSize : UShort;
    nVersion : UShort;
    dwFlags : CULong;
    iPixelType : CUChar;
    cColorBits : CUChar;
    cRedBits : CUChar;
    cRedShift : CUChar;
    cGreenBits : CUChar;
    cGreenShift : CUChar;
    cBlueBits : CUChar;
    cBlueShift : CUChar;
    cAlphaBits : CUChar;
    cAlphaShift : CUChar;
    cAccumBits : CUChar;
    cAccumRedBits : CUChar;
    cAccumGreenBits : CUChar;
    cAccumBlueBits : CUChar;
    cAccumAlphaBits : CUChar;
    cDepthBits : CUChar;
    cStencilBits : CUChar;
    cAuxBuffers : CUChar;
    iLayerType : CUChar;
    bReserved : CUChar;
    dwLayerMask : CULong;
    dwVisibleMask : CULong;
    dwDamageMask : CULong;
}

static PIXELFORMATDESCRIPTOR = tagPIXELFORMATDESCRIPTOR;

static PPIXELFORMATDESCRIPTOR = Pointer[tagPIXELFORMATDESCRIPTOR];

static LPPIXELFORMATDESCRIPTOR = Pointer[tagPIXELFORMATDESCRIPTOR];

record tagMETAFILEPICT {
    mm : CLong;
    xExt : CLong;
    yExt : CLong;
    hMF : HMETAFILE;
}

static METAFILEPICT = tagMETAFILEPICT;

static LPMETAFILEPICT = Pointer[tagMETAFILEPICT];

record tagLOCALESIGNATURE {
    lsUsb : Array[CULong,4];
    lsCsbDefault : Array[CULong,2];
    lsCsbSupported : Array[CULong,2];
}

static LOCALESIGNATURE = tagLOCALESIGNATURE;

static PLOCALESIGNATURE = Pointer[tagLOCALESIGNATURE];

static LPLOCALESIGNATURE = Pointer[tagLOCALESIGNATURE];

static LCSTYPE = CLong;

record tagNEWTEXTMETRICA {
    tmHeight : CLong;
    tmAscent : CLong;
    tmDescent : CLong;
    tmInternalLeading : CLong;
    tmExternalLeading : CLong;
    tmAveCharWidth : CLong;
    tmMaxCharWidth : CLong;
    tmWeight : CLong;
    tmOverhang : CLong;
    tmDigitizedAspectX : CLong;
    tmDigitizedAspectY : CLong;
    tmFirstChar : CUChar;
    tmLastChar : CUChar;
    tmDefaultChar : CUChar;
    tmBreakChar : CUChar;
    tmItalic : CUChar;
    tmUnderlined : CUChar;
    tmStruckOut : CUChar;
    tmPitchAndFamily : CUChar;
    tmCharSet : CUChar;
    ntmFlags : CULong;
    ntmSizeEM : UInt;
    ntmCellHeight : UInt;
    ntmAvgWidth : UInt;
}

static NEWTEXTMETRICA = tagNEWTEXTMETRICA;

static PNEWTEXTMETRICA = Pointer[tagNEWTEXTMETRICA];

static LPNEWTEXTMETRICA = Pointer[tagNEWTEXTMETRICA];

record tagNEWTEXTMETRICW {
    tmHeight : CLong;
    tmAscent : CLong;
    tmDescent : CLong;
    tmInternalLeading : CLong;
    tmExternalLeading : CLong;
    tmAveCharWidth : CLong;
    tmMaxCharWidth : CLong;
    tmWeight : CLong;
    tmOverhang : CLong;
    tmDigitizedAspectX : CLong;
    tmDigitizedAspectY : CLong;
    tmFirstChar : UShort;
    tmLastChar : UShort;
    tmDefaultChar : UShort;
    tmBreakChar : UShort;
    tmItalic : CUChar;
    tmUnderlined : CUChar;
    tmStruckOut : CUChar;
    tmPitchAndFamily : CUChar;
    tmCharSet : CUChar;
    ntmFlags : CULong;
    ntmSizeEM : UInt;
    ntmCellHeight : UInt;
    ntmAvgWidth : UInt;
}

static NEWTEXTMETRICW = tagNEWTEXTMETRICW;

static PNEWTEXTMETRICW = Pointer[tagNEWTEXTMETRICW];

static LPNEWTEXTMETRICW = Pointer[tagNEWTEXTMETRICW];

record tagNEWTEXTMETRICEXA {
    ntmTm : NEWTEXTMETRICA;
    ntmFontSig : FONTSIGNATURE;
}

static NEWTEXTMETRICEXA = tagNEWTEXTMETRICEXA;

record tagNEWTEXTMETRICEXW {
    ntmTm : NEWTEXTMETRICW;
    ntmFontSig : FONTSIGNATURE;
}

static NEWTEXTMETRICEXW = tagNEWTEXTMETRICEXW;

record tagPELARRAY {
    paXCount : CLong;
    paYCount : CLong;
    paXExt : CLong;
    paYExt : CLong;
    paRGBs : CUChar;
}

static PELARRAY = tagPELARRAY;

static PPELARRAY = Pointer[tagPELARRAY];

static LPPELARRAY = Pointer[tagPELARRAY];

record tagENUMLOGFONTA {
    elfLogFont : LOGFONTA;
    elfFullName : Array[CUChar,64];
    elfStyle : Array[CUChar,32];
}

static ENUMLOGFONTA = tagENUMLOGFONTA;

static LPENUMLOGFONTA = Pointer[tagENUMLOGFONTA];

record tagENUMLOGFONTW {
    elfLogFont : LOGFONTW;
    elfFullName : Array[UShort,64];
    elfStyle : Array[UShort,32];
}

static ENUMLOGFONTW = tagENUMLOGFONTW;

static LPENUMLOGFONTW = Pointer[tagENUMLOGFONTW];

record tagENUMLOGFONTEXA {
    elfLogFont : LOGFONTA;
    elfFullName : Array[CUChar,64];
    elfStyle : Array[CUChar,32];
    elfScript : Array[CUChar,32];
}

static ENUMLOGFONTEXA = tagENUMLOGFONTEXA;

static LPENUMLOGFONTEXA = Pointer[tagENUMLOGFONTEXA];

record tagENUMLOGFONTEXW {
    elfLogFont : LOGFONTW;
    elfFullName : Array[UShort,64];
    elfStyle : Array[UShort,32];
    elfScript : Array[UShort,32];
}

static ENUMLOGFONTEXW = tagENUMLOGFONTEXW;

static LPENUMLOGFONTEXW = Pointer[tagENUMLOGFONTEXW];

record tagPOINTFX {
    x : FIXED;
    y : FIXED;
}

static POINTFX = tagPOINTFX;

static LPPOINTFX = Pointer[tagPOINTFX];

record tagTTPOLYCURVE {
    wType : UShort;
    cpfx : UShort;
    apfx : Array[POINTFX,1];
}

static TTPOLYCURVE = tagTTPOLYCURVE;

static LPTTPOLYCURVE = Pointer[tagTTPOLYCURVE];

record tagTTPOLYGONHEADER {
    cb : CULong;
    dwType : CULong;
    pfxStart : POINTFX;
}

static TTPOLYGONHEADER = tagTTPOLYGONHEADER;

static LPTTPOLYGONHEADER = Pointer[tagTTPOLYGONHEADER];

record _POINTFLOAT {
    x : Float;
    y : Float;
}

static POINTFLOAT = _POINTFLOAT;

static PPOINTFLOAT = Pointer[_POINTFLOAT];

record _GLYPHMETRICSFLOAT {
    gmfBlackBoxX : Float;
    gmfBlackBoxY : Float;
    gmfptGlyphOrigin : POINTFLOAT;
    gmfCellIncX : Float;
    gmfCellIncY : Float;
}

static GLYPHMETRICSFLOAT = _GLYPHMETRICSFLOAT;

static PGLYPHMETRICSFLOAT = Pointer[_GLYPHMETRICSFLOAT];

static LPGLYPHMETRICSFLOAT = Pointer[_GLYPHMETRICSFLOAT];

record tagLAYERPLANEDESCRIPTOR {
    nSize : UShort;
    nVersion : UShort;
    dwFlags : CULong;
    iPixelType : CUChar;
    cColorBits : CUChar;
    cRedBits : CUChar;
    cRedShift : CUChar;
    cGreenBits : CUChar;
    cGreenShift : CUChar;
    cBlueBits : CUChar;
    cBlueShift : CUChar;
    cAlphaBits : CUChar;
    cAlphaShift : CUChar;
    cAccumBits : CUChar;
    cAccumRedBits : CUChar;
    cAccumGreenBits : CUChar;
    cAccumBlueBits : CUChar;
    cAccumAlphaBits : CUChar;
    cDepthBits : CUChar;
    cStencilBits : CUChar;
    cAuxBuffers : CUChar;
    iLayerPlane : CUChar;
    bReserved : CUChar;
    crTransparent : CULong;
}

static LAYERPLANEDESCRIPTOR = tagLAYERPLANEDESCRIPTOR;

static PLAYERPLANEDESCRIPTOR = Pointer[tagLAYERPLANEDESCRIPTOR];

static LPLAYERPLANEDESCRIPTOR = Pointer[tagLAYERPLANEDESCRIPTOR];

record _BLENDFUNCTION {
    BlendOp : CUChar;
    BlendFlags : CUChar;
    SourceConstantAlpha : CUChar;
    AlphaFormat : CUChar;
}

static BLENDFUNCTION = _BLENDFUNCTION;

static PBLENDFUNCTION = Pointer[_BLENDFUNCTION];

static LPBLENDFUNCTION = Pointer[_BLENDFUNCTION];

record _DESIGNVECTOR {
    dvReserved : CULong;
    dvNumAxes : CULong;
    dvValues : Array[CLong,16];
}

static DESIGNVECTOR = _DESIGNVECTOR;

static PDESIGNVECTOR = Pointer[_DESIGNVECTOR];

static LPDESIGNVECTOR = Pointer[_DESIGNVECTOR];

static COLOR16 = UShort;

record _TRIVERTEX {
    x : CLong;
    y : CLong;
    Red : UShort;
    Green : UShort;
    Blue : UShort;
    Alpha : UShort;
}

static TRIVERTEX = _TRIVERTEX;

static PTRIVERTEX = Pointer[_TRIVERTEX];

static LPTRIVERTEX = Pointer[_TRIVERTEX];

record _GRADIENT_TRIANGLE {
    Vertex1 : CULong;
    Vertex2 : CULong;
    Vertex3 : CULong;
}

static GRADIENT_TRIANGLE = _GRADIENT_TRIANGLE;

static PGRADIENT_TRIANGLE = Pointer[_GRADIENT_TRIANGLE];

static LPGRADIENT_TRIANGLE = Pointer[_GRADIENT_TRIANGLE];

record _GRADIENT_RECT {
    UpperLeft : CULong;
    LowerRight : CULong;
}

static GRADIENT_RECT = _GRADIENT_RECT;

static PGRADIENT_RECT = Pointer[_GRADIENT_RECT];

static LPGRADIENT_RECT = Pointer[_GRADIENT_RECT];

record _DISPLAY_DEVICEA {
    cb : CULong;
    DeviceName : Array[CChar,32];
    DeviceString : Array[CChar,128];
    StateFlags : CULong;
    DeviceID : Array[CChar,128];
    DeviceKey : Array[CChar,128];
}

static DISPLAY_DEVICEA = _DISPLAY_DEVICEA;

static PDISPLAY_DEVICEA = Pointer[_DISPLAY_DEVICEA];

static LPDISPLAY_DEVICEA = Pointer[_DISPLAY_DEVICEA];

record _DISPLAY_DEVICEW {
    cb : CULong;
    DeviceName : Array[UShort,32];
    DeviceString : Array[UShort,128];
    StateFlags : CULong;
    DeviceID : Array[UShort,128];
    DeviceKey : Array[UShort,128];
}

static DISPLAY_DEVICEW = _DISPLAY_DEVICEW;

static PDISPLAY_DEVICEW = Pointer[_DISPLAY_DEVICEW];

static LPDISPLAY_DEVICEW = Pointer[_DISPLAY_DEVICEW];

static ABORTPROC = StdCallCodePointer[Pointer[HDC__],Int,Int];

static MFENUMPROC = StdCallCodePointer[Pointer[HDC__],Pointer[tagHANDLETABLE],Pointer[tagMETARECORD],Int,CLong,Int];

static ENHMFENUMPROC = StdCallCodePointer[Pointer[HDC__],Pointer[tagHANDLETABLE],Pointer[tagENHMETARECORD],Int,CLong,Int];

static OLDFONTENUMPROCA = StdCallCodePointer[Pointer[tagLOGFONTA],Pointer[tagTEXTMETRICA],CULong,CLong,Int];

static OLDFONTENUMPROCW = StdCallCodePointer[Pointer[tagLOGFONTW],Pointer[tagTEXTMETRICW],CULong,CLong,Int];

static FONTENUMPROCA = OLDFONTENUMPROCA;

static FONTENUMPROCW = OLDFONTENUMPROCW;

static ICMENUMPROCA = StdCallCodePointer[Pointer[CChar],CLong,Int];

static ICMENUMPROCW = StdCallCodePointer[Pointer[UShort],CLong,Int];

static GOBJENUMPROC = StdCallCodePointer[RawPointer,CLong,Void];

static LINEDDAPROC = StdCallCodePointer[Int,Int,CLong,Void];

static LPFNDEVMODE = StdCallCodePointer[Pointer[HWND__],Pointer[HINSTANCE__],Pointer[_devicemodeA],Pointer[CChar],Pointer[CChar],Pointer[_devicemodeA],Pointer[CChar],UInt,UInt];

static LPFNDEVCAPS = StdCallCodePointer[Pointer[CChar],Pointer[CChar],UInt,Pointer[CChar],Pointer[_devicemodeA],CULong];

external (stdcall) AbortDoc(
    argument0 : HDC) : Int;

external (stdcall) AbortPath(
    argument0 : HDC) : Int;

external (stdcall) AddFontResourceA(
    argument0 : LPCSTR) : Int;

external (stdcall) AddFontResourceW(
    argument0 : LPCWSTR) : Int;

external (stdcall) AngleArc(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : CULong,
    argument4 : Float,
    argument5 : Float) : Int;

external (stdcall) AnimatePalette(
    argument0 : HPALETTE,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : Pointer[PALETTEENTRY]) : Int;

external (stdcall) Arc(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : Int,
    argument4 : Int,
    argument5 : Int,
    argument6 : Int,
    argument7 : Int,
    argument8 : Int) : Int;

external (stdcall) ArcTo(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : Int,
    argument4 : Int,
    argument5 : Int,
    argument6 : Int,
    argument7 : Int,
    argument8 : Int) : Int;

external (stdcall) BeginPath(
    argument0 : HDC) : Int;

external (stdcall) BitBlt(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : Int,
    argument4 : Int,
    argument5 : HDC,
    argument6 : Int,
    argument7 : Int,
    argument8 : CULong) : Int;

external (stdcall) CancelDC(
    argument0 : HDC) : Int;

external (stdcall) CheckColorsInGamut(
    argument0 : HDC,
    argument1 : PVOID,
    argument2 : PVOID,
    argument3 : CULong) : Int;

external (stdcall) Chord(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : Int,
    argument4 : Int,
    argument5 : Int,
    argument6 : Int,
    argument7 : Int,
    argument8 : Int) : Int;

external (stdcall) ChoosePixelFormat(
    argument0 : HDC,
    argument1 : Pointer[PIXELFORMATDESCRIPTOR]) : Int;

external (stdcall) CloseEnhMetaFile(
    argument0 : HDC) : HENHMETAFILE;

external (stdcall) CloseFigure(
    argument0 : HDC) : Int;

external (stdcall) CloseMetaFile(
    argument0 : HDC) : HMETAFILE;

external (stdcall) CombineRgn(
    argument0 : HRGN,
    argument1 : HRGN,
    argument2 : HRGN,
    argument3 : Int) : Int;

external (stdcall) CombineTransform(
    argument0 : LPXFORM,
    argument1 : Pointer[XFORM],
    argument2 : Pointer[XFORM]) : Int;

external (stdcall) CopyEnhMetaFileA(
    argument0 : HENHMETAFILE,
    argument1 : LPCSTR) : HENHMETAFILE;

external (stdcall) CopyEnhMetaFileW(
    argument0 : HENHMETAFILE,
    argument1 : LPCWSTR) : HENHMETAFILE;

external (stdcall) CopyMetaFileA(
    argument0 : HMETAFILE,
    argument1 : LPCSTR) : HMETAFILE;

external (stdcall) CopyMetaFileW(
    argument0 : HMETAFILE,
    argument1 : LPCWSTR) : HMETAFILE;

external (stdcall) CreateBitmap(
    argument0 : Int,
    argument1 : Int,
    argument2 : UInt,
    argument3 : UInt,
    argument4 : PCVOID) : HBITMAP;

external (stdcall) CreateBitmapIndirect(
    argument0 : Pointer[BITMAP]) : HBITMAP;

external (stdcall) CreateBrushIndirect(
    argument0 : Pointer[LOGBRUSH]) : HBRUSH;

external (stdcall) CreateColorSpaceA(
    argument0 : LPLOGCOLORSPACEA) : HCOLORSPACE;

external (stdcall) CreateColorSpaceW(
    argument0 : LPLOGCOLORSPACEW) : HCOLORSPACE;

external (stdcall) CreateCompatibleBitmap(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int) : HBITMAP;

external (stdcall) CreateCompatibleDC(
    argument0 : HDC) : HDC;

external (stdcall) CreateDCA(
    argument0 : LPCSTR,
    argument1 : LPCSTR,
    argument2 : LPCSTR,
    argument3 : Pointer[DEVMODEA]) : HDC;

external (stdcall) CreateDCW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR,
    argument2 : LPCWSTR,
    argument3 : Pointer[DEVMODEW]) : HDC;

external (stdcall) CreateDIBitmap(
    argument0 : HDC,
    argument1 : Pointer[BITMAPINFOHEADER],
    argument2 : CULong,
    argument3 : PCVOID,
    argument4 : Pointer[BITMAPINFO],
    argument5 : UInt) : HBITMAP;

external (stdcall) CreateDIBPatternBrush(
    argument0 : HGLOBAL,
    argument1 : UInt) : HBRUSH;

external (stdcall) CreateDIBPatternBrushPt(
    argument0 : PCVOID,
    argument1 : UInt) : HBRUSH;

external (stdcall) CreateDIBSection(
    argument0 : HDC,
    argument1 : Pointer[BITMAPINFO],
    argument2 : UInt,
    argument3 : Pointer[RawPointer],
    argument4 : HANDLE,
    argument5 : CULong) : HBITMAP;

external (stdcall) CreateDiscardableBitmap(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int) : HBITMAP;

external (stdcall) CreateEllipticRgn(
    argument0 : Int,
    argument1 : Int,
    argument2 : Int,
    argument3 : Int) : HRGN;

external (stdcall) CreateEllipticRgnIndirect(
    argument0 : LPCRECT) : HRGN;

external (stdcall) CreateEnhMetaFileA(
    argument0 : HDC,
    argument1 : LPCSTR,
    argument2 : LPCRECT,
    argument3 : LPCSTR) : HDC;

external (stdcall) CreateEnhMetaFileW(
    argument0 : HDC,
    argument1 : LPCWSTR,
    argument2 : LPCRECT,
    argument3 : LPCWSTR) : HDC;

external (stdcall) CreateFontA(
    argument0 : Int,
    argument1 : Int,
    argument2 : Int,
    argument3 : Int,
    argument4 : Int,
    argument5 : CULong,
    argument6 : CULong,
    argument7 : CULong,
    argument8 : CULong,
    argument9 : CULong,
    argument10 : CULong,
    argument11 : CULong,
    argument12 : CULong,
    argument13 : LPCSTR) : HFONT;

external (stdcall) CreateFontW(
    argument0 : Int,
    argument1 : Int,
    argument2 : Int,
    argument3 : Int,
    argument4 : Int,
    argument5 : CULong,
    argument6 : CULong,
    argument7 : CULong,
    argument8 : CULong,
    argument9 : CULong,
    argument10 : CULong,
    argument11 : CULong,
    argument12 : CULong,
    argument13 : LPCWSTR) : HFONT;

external (stdcall) CreateFontIndirectA(
    argument0 : Pointer[LOGFONTA]) : HFONT;

external (stdcall) CreateFontIndirectW(
    argument0 : Pointer[LOGFONTW]) : HFONT;

external (stdcall) CreateHalftonePalette(
    argument0 : HDC) : HPALETTE;

external (stdcall) CreateHatchBrush(
    argument0 : Int,
    argument1 : CULong) : HBRUSH;

external (stdcall) CreateICA(
    argument0 : LPCSTR,
    argument1 : LPCSTR,
    argument2 : LPCSTR,
    argument3 : Pointer[DEVMODEA]) : HDC;

external (stdcall) CreateICW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR,
    argument2 : LPCWSTR,
    argument3 : Pointer[DEVMODEW]) : HDC;

external (stdcall) CreateMetaFileA(
    argument0 : LPCSTR) : HDC;

external (stdcall) CreateMetaFileW(
    argument0 : LPCWSTR) : HDC;

external (stdcall) CreatePalette(
    argument0 : Pointer[LOGPALETTE]) : HPALETTE;

external (stdcall) CreatePatternBrush(
    argument0 : HBITMAP) : HBRUSH;

external (stdcall) CreatePen(
    argument0 : Int,
    argument1 : Int,
    argument2 : CULong) : HPEN;

external (stdcall) CreatePenIndirect(
    argument0 : Pointer[LOGPEN]) : HPEN;

external (stdcall) CreatePolygonRgn(
    argument0 : Pointer[POINT],
    argument1 : Int,
    argument2 : Int) : HRGN;

external (stdcall) CreatePolyPolygonRgn(
    argument0 : Pointer[POINT],
    argument1 : Pointer[Int],
    argument2 : Int,
    argument3 : Int) : HRGN;

external (stdcall) CreateRectRgn(
    argument0 : Int,
    argument1 : Int,
    argument2 : Int,
    argument3 : Int) : HRGN;

external (stdcall) CreateRectRgnIndirect(
    argument0 : LPCRECT) : HRGN;

external (stdcall) CreateRoundRectRgn(
    argument0 : Int,
    argument1 : Int,
    argument2 : Int,
    argument3 : Int,
    argument4 : Int,
    argument5 : Int) : HRGN;

external (stdcall) CreateScalableFontResourceA(
    argument0 : CULong,
    argument1 : LPCSTR,
    argument2 : LPCSTR,
    argument3 : LPCSTR) : Int;

external (stdcall) CreateScalableFontResourceW(
    argument0 : CULong,
    argument1 : LPCWSTR,
    argument2 : LPCWSTR,
    argument3 : LPCWSTR) : Int;

external (stdcall) CreateSolidBrush(
    argument0 : CULong) : HBRUSH;

external (stdcall) DeleteColorSpace(
    argument0 : HCOLORSPACE) : Int;

external (stdcall) DeleteDC(
    argument0 : HDC) : Int;

external (stdcall) DeleteEnhMetaFile(
    argument0 : HENHMETAFILE) : Int;

external (stdcall) DeleteMetaFile(
    argument0 : HMETAFILE) : Int;

external (stdcall) DeleteObject(
    argument0 : HGDIOBJ) : Int;

external (stdcall) DescribePixelFormat(
    argument0 : HDC,
    argument1 : Int,
    argument2 : UInt,
    argument3 : LPPIXELFORMATDESCRIPTOR) : Int;

external (stdcall) DeviceCapabilitiesA(
    argument0 : LPCSTR,
    argument1 : LPCSTR,
    argument2 : UShort,
    argument3 : LPSTR,
    argument4 : Pointer[DEVMODEA]) : CULong;

external (stdcall) DeviceCapabilitiesW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR,
    argument2 : UShort,
    argument3 : LPWSTR,
    argument4 : Pointer[DEVMODEW]) : CULong;

external (stdcall) DPtoLP(
    argument0 : HDC,
    argument1 : LPPOINT,
    argument2 : Int) : Int;

external (stdcall) DrawEscape(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : LPCSTR) : Int;

external (stdcall) Ellipse(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : Int,
    argument4 : Int) : Int;

external (stdcall) EndDoc(
    argument0 : HDC) : Int;

external (stdcall) EndPage(
    argument0 : HDC) : Int;

external (stdcall) EndPath(
    argument0 : HDC) : Int;

external (stdcall) EnumEnhMetaFile(
    argument0 : HDC,
    argument1 : HENHMETAFILE,
    argument2 : ENHMFENUMPROC,
    argument3 : PVOID,
    argument4 : LPCRECT) : Int;

external (stdcall) EnumFontFamiliesA(
    argument0 : HDC,
    argument1 : LPCSTR,
    argument2 : FONTENUMPROCA,
    argument3 : CLong) : Int;

external (stdcall) EnumFontFamiliesW(
    argument0 : HDC,
    argument1 : LPCWSTR,
    argument2 : FONTENUMPROCW,
    argument3 : CLong) : Int;

external (stdcall) EnumFontFamiliesExA(
    argument0 : HDC,
    argument1 : PLOGFONTA,
    argument2 : FONTENUMPROCA,
    argument3 : CLong,
    argument4 : CULong) : Int;

external (stdcall) EnumFontFamiliesExW(
    argument0 : HDC,
    argument1 : PLOGFONTW,
    argument2 : FONTENUMPROCW,
    argument3 : CLong,
    argument4 : CULong) : Int;

external (stdcall) EnumFontsA(
    argument0 : HDC,
    argument1 : LPCSTR,
    argument2 : FONTENUMPROCA,
    argument3 : CLong) : Int;

external (stdcall) EnumFontsW(
    argument0 : HDC,
    argument1 : LPCWSTR,
    argument2 : FONTENUMPROCW,
    argument3 : CLong) : Int;

external (stdcall) EnumICMProfilesA(
    argument0 : HDC,
    argument1 : ICMENUMPROCA,
    argument2 : CLong) : Int;

external (stdcall) EnumICMProfilesW(
    argument0 : HDC,
    argument1 : ICMENUMPROCW,
    argument2 : CLong) : Int;

external (stdcall) EnumMetaFile(
    argument0 : HDC,
    argument1 : HMETAFILE,
    argument2 : MFENUMPROC,
    argument3 : CLong) : Int;

external (stdcall) EnumObjects(
    argument0 : HDC,
    argument1 : Int,
    argument2 : GOBJENUMPROC,
    argument3 : CLong) : Int;

external (stdcall) EqualRgn(
    argument0 : HRGN,
    argument1 : HRGN) : Int;

external (stdcall) Escape(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : LPCSTR,
    argument4 : PVOID) : Int;

external (stdcall) ExcludeClipRect(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : Int,
    argument4 : Int) : Int;

external (stdcall) ExcludeUpdateRgn(
    argument0 : HDC,
    argument1 : HWND) : Int;

external (stdcall) ExtCreatePen(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : Pointer[LOGBRUSH],
    argument3 : CULong,
    argument4 : Pointer[CULong]) : HPEN;

external (stdcall) ExtCreateRegion(
    argument0 : Pointer[XFORM],
    argument1 : CULong,
    argument2 : Pointer[RGNDATA]) : HRGN;

external (stdcall) ExtEscape(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : LPCSTR,
    argument4 : Int,
    argument5 : LPSTR) : Int;

external (stdcall) ExtFloodFill(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : CULong,
    argument4 : UInt) : Int;

external (stdcall) ExtSelectClipRgn(
    argument0 : HDC,
    argument1 : HRGN,
    argument2 : Int) : Int;

external (stdcall) ExtTextOutA(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : UInt,
    argument4 : LPCRECT,
    argument5 : LPCSTR,
    argument6 : UInt,
    argument7 : Pointer[Int]) : Int;

external (stdcall) ExtTextOutW(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : UInt,
    argument4 : LPCRECT,
    argument5 : LPCWSTR,
    argument6 : UInt,
    argument7 : Pointer[Int]) : Int;

external (stdcall) FillPath(
    argument0 : HDC) : Int;

external (stdcall) FillRect(
    argument0 : HDC,
    argument1 : LPCRECT,
    argument2 : HBRUSH) : Int;

external (stdcall) FillRgn(
    argument0 : HDC,
    argument1 : HRGN,
    argument2 : HBRUSH) : Int;

external (stdcall) FixBrushOrgEx(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : LPPOINT) : Int;

external (stdcall) FlattenPath(
    argument0 : HDC) : Int;

external (stdcall) FloodFill(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : CULong) : Int;

external (stdcall) GdiComment(
    argument0 : HDC,
    argument1 : UInt,
    argument2 : Pointer[CUChar]) : Int;

external (stdcall) GdiFlush() : Int;

external (stdcall) GdiGetBatchLimit() : CULong;

external (stdcall) GdiSetBatchLimit(
    argument0 : CULong) : CULong;

external (stdcall) GetArcDirection(
    argument0 : HDC) : Int;

external (stdcall) GetAspectRatioFilterEx(
    argument0 : HDC,
    argument1 : LPSIZE) : Int;

external (stdcall) GetBitmapBits(
    argument0 : HBITMAP,
    argument1 : CLong,
    argument2 : PVOID) : CLong;

external (stdcall) GetBitmapDimensionEx(
    argument0 : HBITMAP,
    argument1 : LPSIZE) : Int;

external (stdcall) GetBkColor(
    argument0 : HDC) : CULong;

external (stdcall) GetBkMode(
    argument0 : HDC) : Int;

external (stdcall) GetBoundsRect(
    argument0 : HDC,
    argument1 : LPRECT,
    argument2 : UInt) : UInt;

external (stdcall) GetBrushOrgEx(
    argument0 : HDC,
    argument1 : LPPOINT) : Int;

external (stdcall) GetCharABCWidthsA(
    argument0 : HDC,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : LPABC) : Int;

external (stdcall) GetCharABCWidthsW(
    argument0 : HDC,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : LPABC) : Int;

external (stdcall) GetCharABCWidthsFloatA(
    argument0 : HDC,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : LPABCFLOAT) : Int;

external (stdcall) GetCharABCWidthsFloatW(
    argument0 : HDC,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : LPABCFLOAT) : Int;

external (stdcall) GetCharacterPlacementA(
    argument0 : HDC,
    argument1 : LPCSTR,
    argument2 : Int,
    argument3 : Int,
    argument4 : LPGCP_RESULTSA,
    argument5 : CULong) : CULong;

external (stdcall) GetCharacterPlacementW(
    argument0 : HDC,
    argument1 : LPCWSTR,
    argument2 : Int,
    argument3 : Int,
    argument4 : LPGCP_RESULTSW,
    argument5 : CULong) : CULong;

external (stdcall) GetCharWidth32A(
    argument0 : HDC,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : LPINT) : Int;

external (stdcall) GetCharWidth32W(
    argument0 : HDC,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : LPINT) : Int;

external (stdcall) GetCharWidthA(
    argument0 : HDC,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : LPINT) : Int;

external (stdcall) GetCharWidthW(
    argument0 : HDC,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : LPINT) : Int;

external (stdcall) GetCharWidthFloatA(
    argument0 : HDC,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : PFLOAT) : Int;

external (stdcall) GetCharWidthFloatW(
    argument0 : HDC,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : PFLOAT) : Int;

external (stdcall) GetClipBox(
    argument0 : HDC,
    argument1 : LPRECT) : Int;

external (stdcall) GetClipRgn(
    argument0 : HDC,
    argument1 : HRGN) : Int;

external (stdcall) GetColorAdjustment(
    argument0 : HDC,
    argument1 : LPCOLORADJUSTMENT) : Int;

external (stdcall) GetColorSpace(
    argument0 : HDC) : HANDLE;

external (stdcall) GetCurrentObject(
    argument0 : HDC,
    argument1 : UInt) : HGDIOBJ;

external (stdcall) GetCurrentPositionEx(
    argument0 : HDC,
    argument1 : LPPOINT) : Int;

external (stdcall) GetCursor() : HCURSOR;

external (stdcall) GetDCOrgEx(
    argument0 : HDC,
    argument1 : LPPOINT) : Int;

external (stdcall) GetDeviceCaps(
    argument0 : HDC,
    argument1 : Int) : Int;

external (stdcall) GetDeviceGammaRamp(
    argument0 : HDC,
    argument1 : PVOID) : Int;

external (stdcall) GetDIBColorTable(
    argument0 : HDC,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : Pointer[RGBQUAD]) : UInt;

external (stdcall) GetDIBits(
    argument0 : HDC,
    argument1 : HBITMAP,
    argument2 : UInt,
    argument3 : UInt,
    argument4 : PVOID,
    argument5 : LPBITMAPINFO,
    argument6 : UInt) : Int;

external (stdcall) GetEnhMetaFileA(
    argument0 : LPCSTR) : HENHMETAFILE;

external (stdcall) GetEnhMetaFileW(
    argument0 : LPCWSTR) : HENHMETAFILE;

external (stdcall) GetEnhMetaFileBits(
    argument0 : HENHMETAFILE,
    argument1 : UInt,
    argument2 : LPBYTE) : UInt;

external (stdcall) GetEnhMetaFileDescriptionA(
    argument0 : HENHMETAFILE,
    argument1 : UInt,
    argument2 : LPSTR) : UInt;

external (stdcall) GetEnhMetaFileDescriptionW(
    argument0 : HENHMETAFILE,
    argument1 : UInt,
    argument2 : LPWSTR) : UInt;

external (stdcall) GetEnhMetaFileHeader(
    argument0 : HENHMETAFILE,
    argument1 : UInt,
    argument2 : LPENHMETAHEADER) : UInt;

external (stdcall) GetEnhMetaFilePaletteEntries(
    argument0 : HENHMETAFILE,
    argument1 : UInt,
    argument2 : LPPALETTEENTRY) : UInt;

external (stdcall) GetEnhMetaFilePixelFormat(
    argument0 : HENHMETAFILE,
    argument1 : CULong,
    argument2 : Pointer[PIXELFORMATDESCRIPTOR]) : UInt;

external (stdcall) GetFontData(
    argument0 : HDC,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : PVOID,
    argument4 : CULong) : CULong;

external (stdcall) GetFontLanguageInfo(
    argument0 : HDC) : CULong;

external (stdcall) GetGlyphOutlineA(
    argument0 : HDC,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : LPGLYPHMETRICS,
    argument4 : CULong,
    argument5 : PVOID,
    argument6 : Pointer[MAT2]) : CULong;

external (stdcall) GetGlyphOutlineW(
    argument0 : HDC,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : LPGLYPHMETRICS,
    argument4 : CULong,
    argument5 : PVOID,
    argument6 : Pointer[MAT2]) : CULong;

external (stdcall) GetGraphicsMode(
    argument0 : HDC) : Int;

external (stdcall) GetICMProfileA(
    argument0 : HDC,
    argument1 : LPDWORD,
    argument2 : LPSTR) : Int;

external (stdcall) GetICMProfileW(
    argument0 : HDC,
    argument1 : LPDWORD,
    argument2 : LPWSTR) : Int;

external (stdcall) GetKerningPairsA(
    argument0 : HDC,
    argument1 : CULong,
    argument2 : LPKERNINGPAIR) : CULong;

external (stdcall) GetKerningPairsW(
    argument0 : HDC,
    argument1 : CULong,
    argument2 : LPKERNINGPAIR) : CULong;

external (stdcall) GetLogColorSpaceA(
    argument0 : HCOLORSPACE,
    argument1 : LPLOGCOLORSPACEA,
    argument2 : CULong) : Int;

external (stdcall) GetLogColorSpaceW(
    argument0 : HCOLORSPACE,
    argument1 : LPLOGCOLORSPACEW,
    argument2 : CULong) : Int;

external (stdcall) GetMapMode(
    argument0 : HDC) : Int;

external (stdcall) GetMetaFileA(
    argument0 : LPCSTR) : HMETAFILE;

external (stdcall) GetMetaFileW(
    argument0 : LPCWSTR) : HMETAFILE;

external (stdcall) GetMetaFileBitsEx(
    argument0 : HMETAFILE,
    argument1 : UInt,
    argument2 : PVOID) : UInt;

external (stdcall) GetMetaRgn(
    argument0 : HDC,
    argument1 : HRGN) : Int;

external (stdcall) GetMiterLimit(
    argument0 : HDC,
    argument1 : PFLOAT) : Int;

external (stdcall) GetNearestColor(
    argument0 : HDC,
    argument1 : CULong) : CULong;

external (stdcall) GetNearestPaletteIndex(
    argument0 : HPALETTE,
    argument1 : CULong) : UInt;

external (stdcall) GetObjectA(
    argument0 : HGDIOBJ,
    argument1 : Int,
    argument2 : PVOID) : Int;

external (stdcall) GetObjectW(
    argument0 : HGDIOBJ,
    argument1 : Int,
    argument2 : PVOID) : Int;

external (stdcall) GetObjectType(
    argument0 : HGDIOBJ) : CULong;

external (stdcall) GetOutlineTextMetricsA(
    argument0 : HDC,
    argument1 : UInt,
    argument2 : LPOUTLINETEXTMETRICA) : UInt;

external (stdcall) GetOutlineTextMetricsW(
    argument0 : HDC,
    argument1 : UInt,
    argument2 : LPOUTLINETEXTMETRICW) : UInt;

external (stdcall) GetPaletteEntries(
    argument0 : HPALETTE,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : LPPALETTEENTRY) : UInt;

external (stdcall) GetPath(
    argument0 : HDC,
    argument1 : LPPOINT,
    argument2 : PBYTE,
    argument3 : Int) : Int;

external (stdcall) GetPixel(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int) : CULong;

external (stdcall) GetPixelFormat(
    argument0 : HDC) : Int;

external (stdcall) GetPolyFillMode(
    argument0 : HDC) : Int;

external (stdcall) GetRasterizerCaps(
    argument0 : LPRASTERIZER_STATUS,
    argument1 : UInt) : Int;

external (stdcall) GetRandomRgn(
    argument0 : HDC,
    argument1 : HRGN,
    argument2 : Int) : Int;

external (stdcall) GetRegionData(
    argument0 : HRGN,
    argument1 : CULong,
    argument2 : LPRGNDATA) : CULong;

external (stdcall) GetRgnBox(
    argument0 : HRGN,
    argument1 : LPRECT) : Int;

external (stdcall) GetROP2(
    argument0 : HDC) : Int;

external (stdcall) GetStockObject(
    argument0 : Int) : HGDIOBJ;

external (stdcall) GetStretchBltMode(
    argument0 : HDC) : Int;

external (stdcall) GetSystemPaletteEntries(
    argument0 : HDC,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : LPPALETTEENTRY) : UInt;

external (stdcall) GetSystemPaletteUse(
    argument0 : HDC) : UInt;

external (stdcall) GetTextAlign(
    argument0 : HDC) : UInt;

external (stdcall) GetTextCharacterExtra(
    argument0 : HDC) : Int;

external (stdcall) GetTextCharset(
    argument0 : HDC) : Int;

external (stdcall) GetTextCharsetInfo(
    argument0 : HDC,
    argument1 : LPFONTSIGNATURE,
    argument2 : CULong) : Int;

external (stdcall) GetTextColor(
    argument0 : HDC) : CULong;

external (stdcall) GetTextExtentExPointA(
    argument0 : HDC,
    argument1 : LPCSTR,
    argument2 : Int,
    argument3 : Int,
    argument4 : LPINT,
    argument5 : LPINT,
    argument6 : LPSIZE) : Int;

external (stdcall) GetTextExtentExPointW(
    argument0 : HDC,
    argument1 : LPCWSTR,
    argument2 : Int,
    argument3 : Int,
    argument4 : LPINT,
    argument5 : LPINT,
    argument6 : LPSIZE) : Int;

external (stdcall) GetTextExtentPointA(
    argument0 : HDC,
    argument1 : LPCSTR,
    argument2 : Int,
    argument3 : LPSIZE) : Int;

external (stdcall) GetTextExtentPointW(
    argument0 : HDC,
    argument1 : LPCWSTR,
    argument2 : Int,
    argument3 : LPSIZE) : Int;

external (stdcall) GetTextExtentPoint32A(
    argument0 : HDC,
    argument1 : LPCSTR,
    argument2 : Int,
    argument3 : LPSIZE) : Int;

external (stdcall) GetTextExtentPoint32W(
    argument0 : HDC,
    argument1 : LPCWSTR,
    argument2 : Int,
    argument3 : LPSIZE) : Int;

external (stdcall) GetTextFaceA(
    argument0 : HDC,
    argument1 : Int,
    argument2 : LPSTR) : Int;

external (stdcall) GetTextFaceW(
    argument0 : HDC,
    argument1 : Int,
    argument2 : LPWSTR) : Int;

external (stdcall) GetTextMetricsA(
    argument0 : HDC,
    argument1 : LPTEXTMETRICA) : Int;

external (stdcall) GetTextMetricsW(
    argument0 : HDC,
    argument1 : LPTEXTMETRICW) : Int;

external (stdcall) GetViewportExtEx(
    argument0 : HDC,
    argument1 : LPSIZE) : Int;

external (stdcall) GetViewportOrgEx(
    argument0 : HDC,
    argument1 : LPPOINT) : Int;

external (stdcall) GetWindowExtEx(
    argument0 : HDC,
    argument1 : LPSIZE) : Int;

external (stdcall) GetWindowOrgEx(
    argument0 : HDC,
    argument1 : LPPOINT) : Int;

external (stdcall) GetWinMetaFileBits(
    argument0 : HENHMETAFILE,
    argument1 : UInt,
    argument2 : LPBYTE,
    argument3 : Int,
    argument4 : HDC) : UInt;

external (stdcall) GetWorldTransform(
    argument0 : HDC,
    argument1 : LPXFORM) : Int;

external (stdcall) IntersectClipRect(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : Int,
    argument4 : Int) : Int;

external (stdcall) InvertRgn(
    argument0 : HDC,
    argument1 : HRGN) : Int;

external (stdcall) LineDDA(
    argument0 : Int,
    argument1 : Int,
    argument2 : Int,
    argument3 : Int,
    argument4 : LINEDDAPROC,
    argument5 : CLong) : Int;

external (stdcall) LineTo(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int) : Int;

external (stdcall) LPtoDP(
    argument0 : HDC,
    argument1 : LPPOINT,
    argument2 : Int) : Int;

external (stdcall) MaskBlt(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : Int,
    argument4 : Int,
    argument5 : HDC,
    argument6 : Int,
    argument7 : Int,
    argument8 : HBITMAP,
    argument9 : Int,
    argument10 : Int,
    argument11 : CULong) : Int;

external (stdcall) ModifyWorldTransform(
    argument0 : HDC,
    argument1 : Pointer[XFORM],
    argument2 : CULong) : Int;

external (stdcall) MoveToEx(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : LPPOINT) : Int;

external (stdcall) OffsetClipRgn(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int) : Int;

external (stdcall) OffsetRgn(
    argument0 : HRGN,
    argument1 : Int,
    argument2 : Int) : Int;

external (stdcall) OffsetViewportOrgEx(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : LPPOINT) : Int;

external (stdcall) OffsetWindowOrgEx(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : LPPOINT) : Int;

external (stdcall) PaintRgn(
    argument0 : HDC,
    argument1 : HRGN) : Int;

external (stdcall) PatBlt(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : Int,
    argument4 : Int,
    argument5 : CULong) : Int;

external (stdcall) PathToRegion(
    argument0 : HDC) : HRGN;

external (stdcall) Pie(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : Int,
    argument4 : Int,
    argument5 : Int,
    argument6 : Int,
    argument7 : Int,
    argument8 : Int) : Int;

external (stdcall) PlayEnhMetaFile(
    argument0 : HDC,
    argument1 : HENHMETAFILE,
    argument2 : LPCRECT) : Int;

external (stdcall) PlayEnhMetaFileRecord(
    argument0 : HDC,
    argument1 : LPHANDLETABLE,
    argument2 : Pointer[ENHMETARECORD],
    argument3 : UInt) : Int;

external (stdcall) PlayMetaFile(
    argument0 : HDC,
    argument1 : HMETAFILE) : Int;

external (stdcall) PlayMetaFileRecord(
    argument0 : HDC,
    argument1 : LPHANDLETABLE,
    argument2 : LPMETARECORD,
    argument3 : UInt) : Int;

external (stdcall) PlgBlt(
    argument0 : HDC,
    argument1 : Pointer[POINT],
    argument2 : HDC,
    argument3 : Int,
    argument4 : Int,
    argument5 : Int,
    argument6 : Int,
    argument7 : HBITMAP,
    argument8 : Int,
    argument9 : Int) : Int;

external (stdcall) PolyBezier(
    argument0 : HDC,
    argument1 : Pointer[POINT],
    argument2 : CULong) : Int;

external (stdcall) PolyBezierTo(
    argument0 : HDC,
    argument1 : Pointer[POINT],
    argument2 : CULong) : Int;

external (stdcall) PolyDraw(
    argument0 : HDC,
    argument1 : Pointer[POINT],
    argument2 : Pointer[CUChar],
    argument3 : Int) : Int;

external (stdcall) Polygon(
    argument0 : HDC,
    argument1 : Pointer[POINT],
    argument2 : Int) : Int;

external (stdcall) Polyline(
    argument0 : HDC,
    argument1 : Pointer[POINT],
    argument2 : Int) : Int;

external (stdcall) PolylineTo(
    argument0 : HDC,
    argument1 : Pointer[POINT],
    argument2 : CULong) : Int;

external (stdcall) PolyPolygon(
    argument0 : HDC,
    argument1 : Pointer[POINT],
    argument2 : Pointer[Int],
    argument3 : Int) : Int;

external (stdcall) PolyPolyline(
    argument0 : HDC,
    argument1 : Pointer[POINT],
    argument2 : Pointer[CULong],
    argument3 : CULong) : Int;

external (stdcall) PolyTextOutA(
    argument0 : HDC,
    argument1 : Pointer[POLYTEXTA],
    argument2 : Int) : Int;

external (stdcall) PolyTextOutW(
    argument0 : HDC,
    argument1 : Pointer[POLYTEXTW],
    argument2 : Int) : Int;

external (stdcall) PtInRegion(
    argument0 : HRGN,
    argument1 : Int,
    argument2 : Int) : Int;

external (stdcall) PtVisible(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int) : Int;

external (stdcall) RealizePalette(
    argument0 : HDC) : UInt;

external (stdcall) Rectangle(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : Int,
    argument4 : Int) : Int;

external (stdcall) RectInRegion(
    argument0 : HRGN,
    argument1 : LPCRECT) : Int;

external (stdcall) RectVisible(
    argument0 : HDC,
    argument1 : LPCRECT) : Int;

external (stdcall) RemoveFontResourceA(
    argument0 : LPCSTR) : Int;

external (stdcall) RemoveFontResourceW(
    argument0 : LPCWSTR) : Int;

external (stdcall) ResetDCA(
    argument0 : HDC,
    argument1 : Pointer[DEVMODEA]) : HDC;

external (stdcall) ResetDCW(
    argument0 : HDC,
    argument1 : Pointer[DEVMODEW]) : HDC;

external (stdcall) ResizePalette(
    argument0 : HPALETTE,
    argument1 : UInt) : Int;

external (stdcall) RestoreDC(
    argument0 : HDC,
    argument1 : Int) : Int;

external (stdcall) RoundRect(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : Int,
    argument4 : Int,
    argument5 : Int,
    argument6 : Int) : Int;

external (stdcall) SaveDC(
    argument0 : HDC) : Int;

external (stdcall) ScaleViewportExtEx(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : Int,
    argument4 : Int,
    argument5 : LPSIZE) : Int;

external (stdcall) ScaleWindowExtEx(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : Int,
    argument4 : Int,
    argument5 : LPSIZE) : Int;

external (stdcall) SelectClipPath(
    argument0 : HDC,
    argument1 : Int) : Int;

external (stdcall) SelectClipRgn(
    argument0 : HDC,
    argument1 : HRGN) : Int;

external (stdcall) SelectObject(
    argument0 : HDC,
    argument1 : HGDIOBJ) : HGDIOBJ;

external (stdcall) SelectPalette(
    argument0 : HDC,
    argument1 : HPALETTE,
    argument2 : Int) : HPALETTE;

external (stdcall) SetAbortProc(
    argument0 : HDC,
    argument1 : ABORTPROC) : Int;

external (stdcall) SetArcDirection(
    argument0 : HDC,
    argument1 : Int) : Int;

external (stdcall) SetBitmapBits(
    argument0 : HBITMAP,
    argument1 : CULong,
    argument2 : PCVOID) : CLong;

external (stdcall) SetBitmapDimensionEx(
    argument0 : HBITMAP,
    argument1 : Int,
    argument2 : Int,
    argument3 : LPSIZE) : Int;

external (stdcall) SetBkColor(
    argument0 : HDC,
    argument1 : CULong) : CULong;

external (stdcall) SetBkMode(
    argument0 : HDC,
    argument1 : Int) : Int;

external (stdcall) SetBoundsRect(
    argument0 : HDC,
    argument1 : LPCRECT,
    argument2 : UInt) : UInt;

external (stdcall) SetBrushOrgEx(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : LPPOINT) : Int;

external (stdcall) SetColorAdjustment(
    argument0 : HDC,
    argument1 : Pointer[COLORADJUSTMENT]) : Int;

external (stdcall) SetColorSpace(
    argument0 : HDC,
    argument1 : HCOLORSPACE) : Int;

external (stdcall) SetDeviceGammaRamp(
    argument0 : HDC,
    argument1 : PVOID) : Int;

external (stdcall) SetDIBColorTable(
    argument0 : HDC,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : Pointer[RGBQUAD]) : UInt;

external (stdcall) SetDIBits(
    argument0 : HDC,
    argument1 : HBITMAP,
    argument2 : UInt,
    argument3 : UInt,
    argument4 : PCVOID,
    argument5 : Pointer[BITMAPINFO],
    argument6 : UInt) : Int;

external (stdcall) SetDIBitsToDevice(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : CULong,
    argument4 : CULong,
    argument5 : Int,
    argument6 : Int,
    argument7 : UInt,
    argument8 : UInt,
    argument9 : PCVOID,
    argument10 : Pointer[BITMAPINFO],
    argument11 : UInt) : Int;

external (stdcall) SetEnhMetaFileBits(
    argument0 : UInt,
    argument1 : Pointer[CUChar]) : HENHMETAFILE;

external (stdcall) SetGraphicsMode(
    argument0 : HDC,
    argument1 : Int) : Int;

external (stdcall) SetICMMode(
    argument0 : HDC,
    argument1 : Int) : Int;

external (stdcall) SetICMProfileA(
    argument0 : HDC,
    argument1 : LPSTR) : Int;

external (stdcall) SetICMProfileW(
    argument0 : HDC,
    argument1 : LPWSTR) : Int;

external (stdcall) SetMapMode(
    argument0 : HDC,
    argument1 : Int) : Int;

external (stdcall) SetMapperFlags(
    argument0 : HDC,
    argument1 : CULong) : CULong;

external (stdcall) SetMetaFileBitsEx(
    argument0 : UInt,
    argument1 : Pointer[CUChar]) : HMETAFILE;

external (stdcall) SetMetaRgn(
    argument0 : HDC) : Int;

external (stdcall) SetMiterLimit(
    argument0 : HDC,
    argument1 : Float,
    argument2 : PFLOAT) : Int;

external (stdcall) SetPaletteEntries(
    argument0 : HPALETTE,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : Pointer[PALETTEENTRY]) : UInt;

external (stdcall) SetPixel(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : CULong) : CULong;

external (stdcall) SetPixelFormat(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Pointer[PIXELFORMATDESCRIPTOR]) : Int;

external (stdcall) SetPixelV(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : CULong) : Int;

external (stdcall) SetPolyFillMode(
    argument0 : HDC,
    argument1 : Int) : Int;

external (stdcall) SetRectRgn(
    argument0 : HRGN,
    argument1 : Int,
    argument2 : Int,
    argument3 : Int,
    argument4 : Int) : Int;

external (stdcall) SetROP2(
    argument0 : HDC,
    argument1 : Int) : Int;

external (stdcall) SetStretchBltMode(
    argument0 : HDC,
    argument1 : Int) : Int;

external (stdcall) SetSystemPaletteUse(
    argument0 : HDC,
    argument1 : UInt) : UInt;

external (stdcall) SetTextAlign(
    argument0 : HDC,
    argument1 : UInt) : UInt;

external (stdcall) SetTextCharacterExtra(
    argument0 : HDC,
    argument1 : Int) : Int;

external (stdcall) SetTextColor(
    argument0 : HDC,
    argument1 : CULong) : CULong;

external (stdcall) SetTextJustification(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int) : Int;

external (stdcall) SetViewportExtEx(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : LPSIZE) : Int;

external (stdcall) SetViewportOrgEx(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : LPPOINT) : Int;

external (stdcall) SetWindowExtEx(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : LPSIZE) : Int;

external (stdcall) SetWindowOrgEx(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : LPPOINT) : Int;

external (stdcall) SetWinMetaFileBits(
    argument0 : UInt,
    argument1 : Pointer[CUChar],
    argument2 : HDC,
    argument3 : Pointer[METAFILEPICT]) : HENHMETAFILE;

external (stdcall) SetWorldTransform(
    argument0 : HDC,
    argument1 : Pointer[XFORM]) : Int;

external (stdcall) StartDocA(
    argument0 : HDC,
    argument1 : Pointer[DOCINFOA]) : Int;

external (stdcall) StartDocW(
    argument0 : HDC,
    argument1 : Pointer[DOCINFOW]) : Int;

external (stdcall) StartPage(
    argument0 : HDC) : Int;

external (stdcall) StretchBlt(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : Int,
    argument4 : Int,
    argument5 : HDC,
    argument6 : Int,
    argument7 : Int,
    argument8 : Int,
    argument9 : Int,
    argument10 : CULong) : Int;

external (stdcall) StretchDIBits(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : Int,
    argument4 : Int,
    argument5 : Int,
    argument6 : Int,
    argument7 : Int,
    argument8 : Int,
    argument9 : RawPointer,
    argument10 : Pointer[BITMAPINFO],
    argument11 : UInt,
    argument12 : CULong) : Int;

external (stdcall) StrokeAndFillPath(
    argument0 : HDC) : Int;

external (stdcall) StrokePath(
    argument0 : HDC) : Int;

external (stdcall) SwapBuffers(
    argument0 : HDC) : Int;

external (stdcall) TextOutA(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : LPCSTR,
    argument4 : Int) : Int;

external (stdcall) TextOutW(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : LPCWSTR,
    argument4 : Int) : Int;

external (stdcall) TranslateCharsetInfo(
    argument0 : PDWORD,
    argument1 : LPCHARSETINFO,
    argument2 : CULong) : Int;

external (stdcall) UnrealizeObject(
    argument0 : HGDIOBJ) : Int;

external (stdcall) UpdateColors(
    argument0 : HDC) : Int;

external (stdcall) UpdateICMRegKeyA(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : LPSTR,
    argument3 : UInt) : Int;

external (stdcall) UpdateICMRegKeyW(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : LPWSTR,
    argument3 : UInt) : Int;

external (stdcall) WidenPath(
    argument0 : HDC) : Int;

external (stdcall) wglCopyContext(
    argument0 : HGLRC,
    argument1 : HGLRC,
    argument2 : UInt) : Int;

external (stdcall) wglCreateContext(
    argument0 : HDC) : HGLRC;

external (stdcall) wglCreateLayerContext(
    argument0 : HDC,
    argument1 : Int) : HGLRC;

external (stdcall) wglDeleteContext(
    argument0 : HGLRC) : Int;

external (stdcall) wglDescribeLayerPlane(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : UInt,
    argument4 : LPLAYERPLANEDESCRIPTOR) : Int;

external (stdcall) wglGetCurrentContext() : HGLRC;

external (stdcall) wglGetCurrentDC() : HDC;

external (stdcall) wglGetLayerPaletteEntries(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : Int,
    argument4 : Pointer[CULong]) : Int;

external (stdcall) wglGetProcAddress(
    argument0 : LPCSTR) : PROC;

external (stdcall) wglMakeCurrent(
    argument0 : HDC,
    argument1 : HGLRC) : Int;

external (stdcall) wglRealizeLayerPalette(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int) : Int;

external (stdcall) wglSetLayerPaletteEntries(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : Int,
    argument4 : Pointer[CULong]) : Int;

external (stdcall) wglShareLists(
    argument0 : HGLRC,
    argument1 : HGLRC) : Int;

external (stdcall) wglSwapLayerBuffers(
    argument0 : HDC,
    argument1 : UInt) : Int;

external (stdcall) wglUseFontBitmapsA(
    argument0 : HDC,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : CULong) : Int;

external (stdcall) wglUseFontBitmapsW(
    argument0 : HDC,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : CULong) : Int;

external (stdcall) wglUseFontOutlinesA(
    argument0 : HDC,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : Float,
    argument5 : Float,
    argument6 : Int,
    argument7 : LPGLYPHMETRICSFLOAT) : Int;

external (stdcall) wglUseFontOutlinesW(
    argument0 : HDC,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : Float,
    argument5 : Float,
    argument6 : Int,
    argument7 : LPGLYPHMETRICSFLOAT) : Int;

static BCHAR = CUChar;

static DOCINFO = DOCINFOA;

static LPDOCINFO = Pointer[DOCINFOA];

static LOGFONT = LOGFONTA;

static PLOGFONT = Pointer[LOGFONTA];

static LPLOGFONT = Pointer[LOGFONTA];

static TEXTMETRIC = TEXTMETRICA;

static PTEXTMETRIC = Pointer[TEXTMETRICA];

static LPTEXTMETRIC = Pointer[TEXTMETRICA];

static DEVMODE = DEVMODEA;

static PDEVMODE = Pointer[DEVMODEA];

static LPDEVMODE = Pointer[DEVMODEA];

static EXTLOGFONT = EXTLOGFONTA;

static PEXTLOGFONT = Pointer[EXTLOGFONTA];

static LPEXTLOGFONT = Pointer[EXTLOGFONTA];

static GCP_RESULTS = GCP_RESULTSA;

static LPGCP_RESULTS = Pointer[GCP_RESULTSA];

static OUTLINETEXTMETRIC = OUTLINETEXTMETRICA;

static POUTLINETEXTMETRIC = Pointer[OUTLINETEXTMETRICA];

static LPOUTLINETEXTMETRIC = Pointer[OUTLINETEXTMETRICA];

static POLYTEXT = POLYTEXTA;

static PPOLYTEXT = Pointer[POLYTEXTA];

static LPPOLYTEXT = Pointer[POLYTEXTA];

static LOGCOLORSPACE = LOGCOLORSPACEA;

static LPLOGCOLORSPACE = Pointer[LOGCOLORSPACEA];

static NEWTEXTMETRIC = NEWTEXTMETRICA;

static PNEWTEXTMETRIC = Pointer[NEWTEXTMETRICA];

static LPNEWTEXTMETRIC = Pointer[NEWTEXTMETRICA];

static NEWTEXTMETRICEX = NEWTEXTMETRICEXA;

static ENUMLOGFONT = ENUMLOGFONTA;

static LPENUMLOGFONT = Pointer[ENUMLOGFONTA];

static ENUMLOGFONTEX = ENUMLOGFONTEXA;

static LPENUMLOGFONTEX = Pointer[ENUMLOGFONTEXA];

static DISPLAY_DEVICE = DISPLAY_DEVICEA;

static PDISPLAY_DEVICE = Pointer[DISPLAY_DEVICEA];

static LPDISPLAY_DEVICE = Pointer[DISPLAY_DEVICEA];

static DLGPROC = StdCallCodePointer[Pointer[HWND__],UInt,UInt,CLong,Int];

static TIMERPROC = StdCallCodePointer[Pointer[HWND__],UInt,UInt,CULong,Void];

static GRAYSTRINGPROC = StdCallCodePointer[Pointer[HDC__],CLong,Int,Int];

static HOOKPROC = StdCallCodePointer[Int,UInt,CLong,CLong];

static PROPENUMPROCA = StdCallCodePointer[Pointer[HWND__],Pointer[CChar],RawPointer,Int];

static PROPENUMPROCW = StdCallCodePointer[Pointer[HWND__],Pointer[UShort],RawPointer,Int];

static PROPENUMPROCEXA = StdCallCodePointer[Pointer[HWND__],Pointer[CChar],RawPointer,CULong,Int];

static PROPENUMPROCEXW = StdCallCodePointer[Pointer[HWND__],Pointer[UShort],RawPointer,CULong,Int];

static EDITWORDBREAKPROCA = StdCallCodePointer[Pointer[CChar],Int,Int,Int,Int];

static EDITWORDBREAKPROCW = StdCallCodePointer[Pointer[UShort],Int,Int,Int,Int];

static WNDPROC = StdCallCodePointer[Pointer[HWND__],UInt,UInt,CLong,CLong];

static DRAWSTATEPROC = StdCallCodePointer[Pointer[HDC__],CLong,UInt,Int,Int,Int];

static WNDENUMPROC = StdCallCodePointer[Pointer[HWND__],CLong,Int];

static ENUMWINDOWSPROC = StdCallCodePointer[Pointer[HWND__],CLong,Int];

static MONITORENUMPROC = StdCallCodePointer[Pointer[HMONITOR__],Pointer[HDC__],Pointer[tagRECT],CLong,Int];

static NAMEENUMPROCA = StdCallCodePointer[Pointer[CChar],CLong,Int];

static NAMEENUMPROCW = StdCallCodePointer[Pointer[UShort],CLong,Int];

static DESKTOPENUMPROCA = NAMEENUMPROCA;

static DESKTOPENUMPROCW = NAMEENUMPROCW;

static WINSTAENUMPROCA = NAMEENUMPROCA;

static WINSTAENUMPROCW = NAMEENUMPROCW;

static SENDASYNCPROC = StdCallCodePointer[Pointer[HWND__],UInt,CULong,CLong,Void];

record HHOOK__ {
    i : Int;
}

static HHOOK = Pointer[HHOOK__];

record HDWP__ {
    i : Int;
}

static HDWP = Pointer[HDWP__];

record HDEVNOTIFY__ {
    i : Int;
}

static HDEVNOTIFY = Pointer[HDEVNOTIFY__];

record tagMENUGETOBJECTINFO {
    dwFlags : CULong;
    uPos : UInt;
    hmenu : HMENU;
    riid : PVOID;
    pvObj : PVOID;
}

static MENUGETOBJECTINFO = tagMENUGETOBJECTINFO;

static PMENUGETOBJECTINFO = Pointer[tagMENUGETOBJECTINFO];

record tagACCEL {
    fVirt : CUChar;
    key : UShort;
    cmd : UShort;
}

static ACCEL = tagACCEL;

static LPACCEL = Pointer[tagACCEL];

record tagACCESSTIMEOUT {
    cbSize : UInt;
    dwFlags : CULong;
    iTimeOutMSec : CULong;
}

static ACCESSTIMEOUT = tagACCESSTIMEOUT;

static LPACCESSTIMEOUT = Pointer[tagACCESSTIMEOUT];

record tagANIMATIONINFO {
    cbSize : UInt;
    iMinAnimate : Int;
}

static ANIMATIONINFO = tagANIMATIONINFO;

static LPANIMATIONINFO = Pointer[tagANIMATIONINFO];

record tagCREATESTRUCTA {
    lpCreateParams : LPVOID;
    hInstance : HINSTANCE;
    hMenu : HMENU;
    hwndParent : HWND;
    cy : Int;
    cx : Int;
    y : Int;
    x : Int;
    style : CLong;
    lpszName : LPCSTR;
    lpszClass : LPCSTR;
    dwExStyle : CULong;
}

static CREATESTRUCTA = tagCREATESTRUCTA;

static LPCREATESTRUCTA = Pointer[tagCREATESTRUCTA];

record tagCREATESTRUCTW {
    lpCreateParams : LPVOID;
    hInstance : HINSTANCE;
    hMenu : HMENU;
    hwndParent : HWND;
    cy : Int;
    cx : Int;
    y : Int;
    x : Int;
    style : CLong;
    lpszName : LPCWSTR;
    lpszClass : LPCWSTR;
    dwExStyle : CULong;
}

static CREATESTRUCTW = tagCREATESTRUCTW;

static LPCREATESTRUCTW = Pointer[tagCREATESTRUCTW];

record tagCBT_CREATEWNDA {
    lpcs : LPCREATESTRUCTA;
    hwndInsertAfter : HWND;
}

static CBT_CREATEWNDA = tagCBT_CREATEWNDA;

static LPCBT_CREATEWNDA = Pointer[tagCBT_CREATEWNDA];

record tagCBT_CREATEWNDW {
    lpcs : LPCREATESTRUCTW;
    hwndInsertAfter : HWND;
}

static CBT_CREATEWNDW = tagCBT_CREATEWNDW;

static LPCBT_CREATEWNDW = Pointer[tagCBT_CREATEWNDW];

record tagCBTACTIVATESTRUCT {
    fMouse : Int;
    hWndActive : HWND;
}

static CBTACTIVATESTRUCT = tagCBTACTIVATESTRUCT;

static LPCBTACTIVATESTRUCT = Pointer[tagCBTACTIVATESTRUCT];

record tagCLIENTCREATESTRUCT {
    hWindowMenu : HANDLE;
    idFirstChild : UInt;
}

static CLIENTCREATESTRUCT = tagCLIENTCREATESTRUCT;

static LPCLIENTCREATESTRUCT = Pointer[tagCLIENTCREATESTRUCT];

record tagCOMPAREITEMSTRUCT {
    CtlType : UInt;
    CtlID : UInt;
    hwndItem : HWND;
    itemID1 : UInt;
    itemData1 : CULong;
    itemID2 : UInt;
    itemData2 : CULong;
    dwLocaleId : CULong;
}

static COMPAREITEMSTRUCT = tagCOMPAREITEMSTRUCT;

static LPCOMPAREITEMSTRUCT = Pointer[tagCOMPAREITEMSTRUCT];

record tagCOPYDATASTRUCT {
    dwData : CULong;
    cbData : CULong;
    lpData : PVOID;
}

static COPYDATASTRUCT = tagCOPYDATASTRUCT;

static PCOPYDATASTRUCT = Pointer[tagCOPYDATASTRUCT];

record tagCURSORSHAPE {
    xHotSpot : Int;
    yHotSpot : Int;
    cx : Int;
    cy : Int;
    cbWidth : Int;
    Planes : CUChar;
    BitsPixel : CUChar;
}

static CURSORSHAPE = tagCURSORSHAPE;

static LPCURSORSHAPE = Pointer[tagCURSORSHAPE];

record tagCWPRETSTRUCT {
    lResult : CLong;
    lParam : CLong;
    wParam : UInt;
    message : CULong;
    hwnd : HWND;
}

static CWPRETSTRUCT = tagCWPRETSTRUCT;

record tagCWPSTRUCT {
    lParam : CLong;
    wParam : UInt;
    message : UInt;
    hwnd : HWND;
}

static CWPSTRUCT = tagCWPSTRUCT;

static PCWPSTRUCT = Pointer[tagCWPSTRUCT];

record tagDEBUGHOOKINFO {
    idThread : CULong;
    idThreadInstaller : CULong;
    lParam : CLong;
    wParam : UInt;
    code : Int;
}

static DEBUGHOOKINFO = tagDEBUGHOOKINFO;

static PDEBUGHOOKINFO = Pointer[tagDEBUGHOOKINFO];

static LPDEBUGHOOKINFO = Pointer[tagDEBUGHOOKINFO];

record tagDELETEITEMSTRUCT {
    CtlType : UInt;
    CtlID : UInt;
    itemID : UInt;
    hwndItem : HWND;
    itemData : UInt;
}

static DELETEITEMSTRUCT = tagDELETEITEMSTRUCT;

static PDELETEITEMSTRUCT = Pointer[tagDELETEITEMSTRUCT];

static LPDELETEITEMSTRUCT = Pointer[tagDELETEITEMSTRUCT];

record UnnamedRecord6 {
    style : CULong;
    dwExtendedStyle : CULong;
    x : Short;
    y : Short;
    cx : Short;
    cy : Short;
    id : UShort;
}

static DLGITEMTEMPLATE = UnnamedRecord6;

static LPDLGITEMTEMPLATE = Pointer[UnnamedRecord6];

record UnnamedRecord7 {
    style : CULong;
    dwExtendedStyle : CULong;
    cdit : UShort;
    x : Short;
    y : Short;
    cx : Short;
    cy : Short;
}

static DLGTEMPLATE = UnnamedRecord7;

static LPDLGTEMPLATE = Pointer[UnnamedRecord7];

static LPDLGTEMPLATEA = Pointer[UnnamedRecord7];

static LPDLGTEMPLATEW = Pointer[UnnamedRecord7];

static LPCDLGTEMPLATE = Pointer[DLGTEMPLATE];

record tagDRAWITEMSTRUCT {
    CtlType : UInt;
    CtlID : UInt;
    itemID : UInt;
    itemAction : UInt;
    itemState : UInt;
    hwndItem : HWND;
    hDC : HDC;
    rcItem : RECT;
    itemData : CULong;
}

static DRAWITEMSTRUCT = tagDRAWITEMSTRUCT;

static LPDRAWITEMSTRUCT = Pointer[tagDRAWITEMSTRUCT];

static PDRAWITEMSTRUCT = Pointer[tagDRAWITEMSTRUCT];

record UnnamedRecord8 {
    cbSize : UInt;
    iTabLength : Int;
    iLeftMargin : Int;
    iRightMargin : Int;
    uiLengthDrawn : UInt;
}

static DRAWTEXTPARAMS = UnnamedRecord8;

static LPDRAWTEXTPARAMS = Pointer[UnnamedRecord8];

record tagPAINTSTRUCT {
    hdc : HDC;
    fErase : Int;
    rcPaint : RECT;
    fRestore : Int;
    fIncUpdate : Int;
    rgbReserved : Array[CUChar,32];
}

static PAINTSTRUCT = tagPAINTSTRUCT;

static LPPAINTSTRUCT = Pointer[tagPAINTSTRUCT];

record tagMSG {
    hwnd : HWND;
    message : UInt;
    wParam : UInt;
    lParam : CLong;
    time : CULong;
    pt : POINT;
}

static MSG = tagMSG;

static LPMSG = Pointer[tagMSG];

static PMSG = Pointer[tagMSG];

record _ICONINFO {
    fIcon : Int;
    xHotspot : CULong;
    yHotspot : CULong;
    hbmMask : HBITMAP;
    hbmColor : HBITMAP;
}

static ICONINFO = _ICONINFO;

static PICONINFO = Pointer[_ICONINFO];

record tagNMHDR {
    hwndFrom : HWND;
    idFrom : UInt;
    code : UInt;
}

static NMHDR = tagNMHDR;

static LPNMHDR = Pointer[tagNMHDR];

record _WNDCLASSA {
    style : UInt;
    lpfnWndProc : WNDPROC;
    cbClsExtra : Int;
    cbWndExtra : Int;
    hInstance : HINSTANCE;
    hIcon : HICON;
    hCursor : HCURSOR;
    hbrBackground : HBRUSH;
    lpszMenuName : LPCSTR;
    lpszClassName : LPCSTR;
}

static WNDCLASSA = _WNDCLASSA;

static LPWNDCLASSA = Pointer[_WNDCLASSA];

static PWNDCLASSA = Pointer[_WNDCLASSA];

record _WNDCLASSW {
    style : UInt;
    lpfnWndProc : WNDPROC;
    cbClsExtra : Int;
    cbWndExtra : Int;
    hInstance : HINSTANCE;
    hIcon : HICON;
    hCursor : HCURSOR;
    hbrBackground : HBRUSH;
    lpszMenuName : LPCWSTR;
    lpszClassName : LPCWSTR;
}

static WNDCLASSW = _WNDCLASSW;

static LPWNDCLASSW = Pointer[_WNDCLASSW];

static PWNDCLASSW = Pointer[_WNDCLASSW];

record _WNDCLASSEXA {
    cbSize : UInt;
    style : UInt;
    lpfnWndProc : WNDPROC;
    cbClsExtra : Int;
    cbWndExtra : Int;
    hInstance : HINSTANCE;
    hIcon : HICON;
    hCursor : HCURSOR;
    hbrBackground : HBRUSH;
    lpszMenuName : LPCSTR;
    lpszClassName : LPCSTR;
    hIconSm : HICON;
}

static WNDCLASSEXA = _WNDCLASSEXA;

static LPWNDCLASSEXA = Pointer[_WNDCLASSEXA];

static PWNDCLASSEXA = Pointer[_WNDCLASSEXA];

record _WNDCLASSEXW {
    cbSize : UInt;
    style : UInt;
    lpfnWndProc : WNDPROC;
    cbClsExtra : Int;
    cbWndExtra : Int;
    hInstance : HINSTANCE;
    hIcon : HICON;
    hCursor : HCURSOR;
    hbrBackground : HBRUSH;
    lpszMenuName : LPCWSTR;
    lpszClassName : LPCWSTR;
    hIconSm : HICON;
}

static WNDCLASSEXW = _WNDCLASSEXW;

static LPWNDCLASSEXW = Pointer[_WNDCLASSEXW];

static PWNDCLASSEXW = Pointer[_WNDCLASSEXW];

record tagMENUITEMINFOA {
    cbSize : UInt;
    fMask : UInt;
    fType : UInt;
    fState : UInt;
    wID : UInt;
    hSubMenu : HMENU;
    hbmpChecked : HBITMAP;
    hbmpUnchecked : HBITMAP;
    dwItemData : CULong;
    dwTypeData : LPSTR;
    cch : UInt;
}

static MENUITEMINFOA = tagMENUITEMINFOA;

static LPMENUITEMINFOA = Pointer[tagMENUITEMINFOA];

static LPCMENUITEMINFOA = Pointer[MENUITEMINFOA];

record tagMENUITEMINFOW {
    cbSize : UInt;
    fMask : UInt;
    fType : UInt;
    fState : UInt;
    wID : UInt;
    hSubMenu : HMENU;
    hbmpChecked : HBITMAP;
    hbmpUnchecked : HBITMAP;
    dwItemData : CULong;
    dwTypeData : LPWSTR;
    cch : UInt;
}

static MENUITEMINFOW = tagMENUITEMINFOW;

static LPMENUITEMINFOW = Pointer[tagMENUITEMINFOW];

static LPCMENUITEMINFOW = Pointer[MENUITEMINFOW];

record tagSCROLLINFO {
    cbSize : UInt;
    fMask : UInt;
    nMin : Int;
    nMax : Int;
    nPage : UInt;
    nPos : Int;
    nTrackPos : Int;
}

static SCROLLINFO = tagSCROLLINFO;

static LPSCROLLINFO = Pointer[tagSCROLLINFO];

static LPCSCROLLINFO = Pointer[SCROLLINFO];

record _WINDOWPLACEMENT {
    length : UInt;
    flags : UInt;
    showCmd : UInt;
    ptMinPosition : POINT;
    ptMaxPosition : POINT;
    rcNormalPosition : RECT;
}

static WINDOWPLACEMENT = _WINDOWPLACEMENT;

static LPWINDOWPLACEMENT = Pointer[_WINDOWPLACEMENT];

static PWINDOWPLACEMENT = Pointer[_WINDOWPLACEMENT];

record UnnamedRecord9 {
    versionNumber : UShort;
    offset : UShort;
}

static MENUITEMTEMPLATEHEADER = UnnamedRecord9;

record UnnamedRecord10 {
    mtOption : UShort;
    mtID : UShort;
    mtString : Array[UShort,1];
}

static MENUITEMTEMPLATE = UnnamedRecord10;

static MENUTEMPLATE = Void;

static MENUTEMPLATEA = Void;

static MENUTEMPLATEW = Void;

static LPMENUTEMPLATEA = RawPointer;

static LPMENUTEMPLATEW = RawPointer;

static LPMENUTEMPLATE = RawPointer;

record tagHELPINFO {
    cbSize : UInt;
    iContextType : Int;
    iCtrlId : Int;
    hItemHandle : HANDLE;
    dwContextId : CULong;
    MousePos : POINT;
}

static HELPINFO = tagHELPINFO;

static LPHELPINFO = Pointer[tagHELPINFO];

static MSGBOXCALLBACK = StdCallCodePointer[Pointer[tagHELPINFO],Void];

record UnnamedRecord11 {
    cbSize : UInt;
    hwndOwner : HWND;
    hInstance : HINSTANCE;
    lpszText : LPCSTR;
    lpszCaption : LPCSTR;
    dwStyle : CULong;
    lpszIcon : LPCSTR;
    dwContextHelpId : CULong;
    lpfnMsgBoxCallback : MSGBOXCALLBACK;
    dwLanguageId : CULong;
}

static MSGBOXPARAMSA = UnnamedRecord11;

static PMSGBOXPARAMSA = Pointer[UnnamedRecord11];

static LPMSGBOXPARAMSA = Pointer[UnnamedRecord11];

record UnnamedRecord12 {
    cbSize : UInt;
    hwndOwner : HWND;
    hInstance : HINSTANCE;
    lpszText : LPCWSTR;
    lpszCaption : LPCWSTR;
    dwStyle : CULong;
    lpszIcon : LPCWSTR;
    dwContextHelpId : CULong;
    lpfnMsgBoxCallback : MSGBOXCALLBACK;
    dwLanguageId : CULong;
}

static MSGBOXPARAMSW = UnnamedRecord12;

static PMSGBOXPARAMSW = Pointer[UnnamedRecord12];

static LPMSGBOXPARAMSW = Pointer[UnnamedRecord12];

record tagUSEROBJECTFLAGS {
    fInherit : Int;
    fReserved : Int;
    dwFlags : CULong;
}

static USEROBJECTFLAGS = tagUSEROBJECTFLAGS;

record tagFILTERKEYS {
    cbSize : UInt;
    dwFlags : CULong;
    iWaitMSec : CULong;
    iDelayMSec : CULong;
    iRepeatMSec : CULong;
    iBounceMSec : CULong;
}

static FILTERKEYS = tagFILTERKEYS;

record tagHIGHCONTRASTA {
    cbSize : UInt;
    dwFlags : CULong;
    lpszDefaultScheme : LPSTR;
}

static HIGHCONTRASTA = tagHIGHCONTRASTA;

static LPHIGHCONTRASTA = Pointer[tagHIGHCONTRASTA];

record tagHIGHCONTRASTW {
    cbSize : UInt;
    dwFlags : CULong;
    lpszDefaultScheme : LPWSTR;
}

static HIGHCONTRASTW = tagHIGHCONTRASTW;

static LPHIGHCONTRASTW = Pointer[tagHIGHCONTRASTW];

record tagICONMETRICSA {
    cbSize : UInt;
    iHorzSpacing : Int;
    iVertSpacing : Int;
    iTitleWrap : Int;
    lfFont : LOGFONTA;
}

static ICONMETRICSA = tagICONMETRICSA;

static LPICONMETRICSA = Pointer[tagICONMETRICSA];

record tagICONMETRICSW {
    cbSize : UInt;
    iHorzSpacing : Int;
    iVertSpacing : Int;
    iTitleWrap : Int;
    lfFont : LOGFONTW;
}

static ICONMETRICSW = tagICONMETRICSW;

static LPICONMETRICSW = Pointer[tagICONMETRICSW];

record tagMINIMIZEDMETRICS {
    cbSize : UInt;
    iWidth : Int;
    iHorzGap : Int;
    iVertGap : Int;
    iArrange : Int;
}

static MINIMIZEDMETRICS = tagMINIMIZEDMETRICS;

static LPMINIMIZEDMETRICS = Pointer[tagMINIMIZEDMETRICS];

record tagMOUSEKEYS {
    cbSize : UInt;
    dwFlags : CULong;
    iMaxSpeed : CULong;
    iTimeToMaxSpeed : CULong;
    iCtrlSpeed : CULong;
    dwReserved1 : CULong;
    dwReserved2 : CULong;
}

static MOUSEKEYS = tagMOUSEKEYS;

static LPMOUSEKEYS = Pointer[tagMOUSEKEYS];

record tagNONCLIENTMETRICSA {
    cbSize : UInt;
    iBorderWidth : Int;
    iScrollWidth : Int;
    iScrollHeight : Int;
    iCaptionWidth : Int;
    iCaptionHeight : Int;
    lfCaptionFont : LOGFONTA;
    iSmCaptionWidth : Int;
    iSmCaptionHeight : Int;
    lfSmCaptionFont : LOGFONTA;
    iMenuWidth : Int;
    iMenuHeight : Int;
    lfMenuFont : LOGFONTA;
    lfStatusFont : LOGFONTA;
    lfMessageFont : LOGFONTA;
}

static NONCLIENTMETRICSA = tagNONCLIENTMETRICSA;

static LPNONCLIENTMETRICSA = Pointer[tagNONCLIENTMETRICSA];

record tagNONCLIENTMETRICSW {
    cbSize : UInt;
    iBorderWidth : Int;
    iScrollWidth : Int;
    iScrollHeight : Int;
    iCaptionWidth : Int;
    iCaptionHeight : Int;
    lfCaptionFont : LOGFONTW;
    iSmCaptionWidth : Int;
    iSmCaptionHeight : Int;
    lfSmCaptionFont : LOGFONTW;
    iMenuWidth : Int;
    iMenuHeight : Int;
    lfMenuFont : LOGFONTW;
    lfStatusFont : LOGFONTW;
    lfMessageFont : LOGFONTW;
}

static NONCLIENTMETRICSW = tagNONCLIENTMETRICSW;

static LPNONCLIENTMETRICSW = Pointer[tagNONCLIENTMETRICSW];

record tagSERIALKEYSA {
    cbSize : UInt;
    dwFlags : CULong;
    lpszActivePort : LPSTR;
    lpszPort : LPSTR;
    iBaudRate : UInt;
    iPortState : UInt;
    iActive : UInt;
}

static SERIALKEYSA = tagSERIALKEYSA;

static LPSERIALKEYSA = Pointer[tagSERIALKEYSA];

record tagSERIALKEYSW {
    cbSize : UInt;
    dwFlags : CULong;
    lpszActivePort : LPWSTR;
    lpszPort : LPWSTR;
    iBaudRate : UInt;
    iPortState : UInt;
    iActive : UInt;
}

static SERIALKEYSW = tagSERIALKEYSW;

static LPSERIALKEYSW = Pointer[tagSERIALKEYSW];

record tagSOUNDSENTRYA {
    cbSize : UInt;
    dwFlags : CULong;
    iFSTextEffect : CULong;
    iFSTextEffectMSec : CULong;
    iFSTextEffectColorBits : CULong;
    iFSGrafEffect : CULong;
    iFSGrafEffectMSec : CULong;
    iFSGrafEffectColor : CULong;
    iWindowsEffect : CULong;
    iWindowsEffectMSec : CULong;
    lpszWindowsEffectDLL : LPSTR;
    iWindowsEffectOrdinal : CULong;
}

static SOUNDSENTRYA = tagSOUNDSENTRYA;

static LPSOUNDSENTRYA = Pointer[tagSOUNDSENTRYA];

record tagSOUNDSENTRYW {
    cbSize : UInt;
    dwFlags : CULong;
    iFSTextEffect : CULong;
    iFSTextEffectMSec : CULong;
    iFSTextEffectColorBits : CULong;
    iFSGrafEffect : CULong;
    iFSGrafEffectMSec : CULong;
    iFSGrafEffectColor : CULong;
    iWindowsEffect : CULong;
    iWindowsEffectMSec : CULong;
    lpszWindowsEffectDLL : LPWSTR;
    iWindowsEffectOrdinal : CULong;
}

static SOUNDSENTRYW = tagSOUNDSENTRYW;

static LPSOUNDSENTRYW = Pointer[tagSOUNDSENTRYW];

record tagSTICKYKEYS {
    cbSize : CULong;
    dwFlags : CULong;
}

static STICKYKEYS = tagSTICKYKEYS;

static LPSTICKYKEYS = Pointer[tagSTICKYKEYS];

record tagTOGGLEKEYS {
    cbSize : CULong;
    dwFlags : CULong;
}

static TOGGLEKEYS = tagTOGGLEKEYS;

record tagMOUSEHOOKSTRUCT {
    pt : POINT;
    hwnd : HWND;
    wHitTestCode : UInt;
    dwExtraInfo : CULong;
}

static MOUSEHOOKSTRUCT = tagMOUSEHOOKSTRUCT;

static LPMOUSEHOOKSTRUCT = Pointer[tagMOUSEHOOKSTRUCT];

static PMOUSEHOOKSTRUCT = Pointer[tagMOUSEHOOKSTRUCT];

record tagTRACKMOUSEEVENT {
    cbSize : CULong;
    dwFlags : CULong;
    hwndTrack : HWND;
    dwHoverTime : CULong;
}

static TRACKMOUSEEVENT = tagTRACKMOUSEEVENT;

static LPTRACKMOUSEEVENT = Pointer[tagTRACKMOUSEEVENT];

record tagTPMPARAMS {
    cbSize : UInt;
    rcExclude : RECT;
}

static TPMPARAMS = tagTPMPARAMS;

static LPTPMPARAMS = Pointer[tagTPMPARAMS];

record tagEVENTMSG {
    message : UInt;
    paramL : UInt;
    paramH : UInt;
    time : CULong;
    hwnd : HWND;
}

static EVENTMSG = tagEVENTMSG;

static PEVENTMSGMSG = Pointer[tagEVENTMSG];

static LPEVENTMSGMSG = Pointer[tagEVENTMSG];

static PEVENTMSG = Pointer[tagEVENTMSG];

static LPEVENTMSG = Pointer[tagEVENTMSG];

record _WINDOWPOS {
    hwnd : HWND;
    hwndInsertAfter : HWND;
    x : Int;
    y : Int;
    cx : Int;
    cy : Int;
    flags : UInt;
}

static WINDOWPOS = _WINDOWPOS;

static PWINDOWPOS = Pointer[_WINDOWPOS];

static LPWINDOWPOS = Pointer[_WINDOWPOS];

record tagNCCALCSIZE_PARAMS {
    rgrc : Array[RECT,3];
    lppos : PWINDOWPOS;
}

static NCCALCSIZE_PARAMS = tagNCCALCSIZE_PARAMS;

static LPNCCALCSIZE_PARAMS = Pointer[tagNCCALCSIZE_PARAMS];

record tagMDICREATESTRUCTA {
    szClass : LPCSTR;
    szTitle : LPCSTR;
    hOwner : HANDLE;
    x : Int;
    y : Int;
    cx : Int;
    cy : Int;
    style : CULong;
    lParam : CLong;
}

static MDICREATESTRUCTA = tagMDICREATESTRUCTA;

static LPMDICREATESTRUCTA = Pointer[tagMDICREATESTRUCTA];

record tagMDICREATESTRUCTW {
    szClass : LPCWSTR;
    szTitle : LPCWSTR;
    hOwner : HANDLE;
    x : Int;
    y : Int;
    cx : Int;
    cy : Int;
    style : CULong;
    lParam : CLong;
}

static MDICREATESTRUCTW = tagMDICREATESTRUCTW;

static LPMDICREATESTRUCTW = Pointer[tagMDICREATESTRUCTW];

record tagMINMAXINFO {
    ptReserved : POINT;
    ptMaxSize : POINT;
    ptMaxPosition : POINT;
    ptMinTrackSize : POINT;
    ptMaxTrackSize : POINT;
}

static MINMAXINFO = tagMINMAXINFO;

static PMINMAXINFO = Pointer[tagMINMAXINFO];

static LPMINMAXINFO = Pointer[tagMINMAXINFO];

record tagMDINEXTMENU {
    hmenuIn : HMENU;
    hmenuNext : HMENU;
    hwndNext : HWND;
}

static MDINEXTMENU = tagMDINEXTMENU;

static PMDINEXTMENU = Pointer[tagMDINEXTMENU];

static LPMDINEXTMENU = Pointer[tagMDINEXTMENU];

record tagMEASUREITEMSTRUCT {
    CtlType : UInt;
    CtlID : UInt;
    itemID : UInt;
    itemWidth : UInt;
    itemHeight : UInt;
    itemData : CULong;
}

static MEASUREITEMSTRUCT = tagMEASUREITEMSTRUCT;

static PMEASUREITEMSTRUCT = Pointer[tagMEASUREITEMSTRUCT];

static LPMEASUREITEMSTRUCT = Pointer[tagMEASUREITEMSTRUCT];

record tagDROPSTRUCT {
    hwndSource : HWND;
    hwndSink : HWND;
    wFmt : CULong;
    dwData : CULong;
    ptDrop : POINT;
    dwControlData : CULong;
}

static DROPSTRUCT = tagDROPSTRUCT;

static PDROPSTRUCT = Pointer[tagDROPSTRUCT];

static LPDROPSTRUCT = Pointer[tagDROPSTRUCT];

static HELPPOLY = CULong;

record tagMULTIKEYHELPA {
    mkSize : CULong;
    mkKeylist : CChar;
    szKeyphrase : Array[CChar,1];
}

static MULTIKEYHELPA = tagMULTIKEYHELPA;

static PMULTIKEYHELPA = Pointer[tagMULTIKEYHELPA];

static LPMULTIKEYHELPA = Pointer[tagMULTIKEYHELPA];

record tagMULTIKEYHELPW {
    mkSize : CULong;
    mkKeylist : UShort;
    szKeyphrase : Array[UShort,1];
}

static MULTIKEYHELPW = tagMULTIKEYHELPW;

static PMULTIKEYHELPW = Pointer[tagMULTIKEYHELPW];

static LPMULTIKEYHELPW = Pointer[tagMULTIKEYHELPW];

record tagHELPWININFOA {
    wStructSize : Int;
    x : Int;
    y : Int;
    dx : Int;
    dy : Int;
    wMax : Int;
    rgchMember : Array[CChar,2];
}

static HELPWININFOA = tagHELPWININFOA;

static PHELPWININFOA = Pointer[tagHELPWININFOA];

static LPHELPWININFOA = Pointer[tagHELPWININFOA];

record tagHELPWININFOW {
    wStructSize : Int;
    x : Int;
    y : Int;
    dx : Int;
    dy : Int;
    wMax : Int;
    rgchMember : Array[UShort,2];
}

static HELPWININFOW = tagHELPWININFOW;

static PHELPWININFOW = Pointer[tagHELPWININFOW];

static LPHELPWININFOW = Pointer[tagHELPWININFOW];

record tagSTYLESTRUCT {
    styleOld : CULong;
    styleNew : CULong;
}

static STYLESTRUCT = tagSTYLESTRUCT;

static LPSTYLESTRUCT = Pointer[tagSTYLESTRUCT];

record tagALTTABINFO {
    cbSize : CULong;
    cItems : Int;
    cColumns : Int;
    cRows : Int;
    iColFocus : Int;
    iRowFocus : Int;
    cxItem : Int;
    cyItem : Int;
    ptStart : POINT;
}

static ALTTABINFO = tagALTTABINFO;

static PALTTABINFO = Pointer[tagALTTABINFO];

static LPALTTABINFO = Pointer[tagALTTABINFO];

record tagCOMBOBOXINFO {
    cbSize : CULong;
    rcItem : RECT;
    rcButton : RECT;
    stateButton : CULong;
    hwndCombo : HWND;
    hwndItem : HWND;
    hwndList : HWND;
}

static COMBOBOXINFO = tagCOMBOBOXINFO;

static PCOMBOBOXINFO = Pointer[tagCOMBOBOXINFO];

static LPCOMBOBOXINFO = Pointer[tagCOMBOBOXINFO];

record tagCURSORINFO {
    cbSize : CULong;
    flags : CULong;
    hCursor : HCURSOR;
    ptScreenPos : POINT;
}

static CURSORINFO = tagCURSORINFO;

static PCURSORINFO = Pointer[tagCURSORINFO];

static LPCURSORINFO = Pointer[tagCURSORINFO];

record tagMENUBARINFO {
    cbSize : CULong;
    rcBar : RECT;
    hMenu : HMENU;
    hwndMenu : HWND;
    fBarFocused : Int;
    fFocused : Int;
}

static MENUBARINFO = tagMENUBARINFO;

static PMENUBARINFO = Pointer[tagMENUBARINFO];

record tagMENUINFO {
    cbSize : CULong;
    fMask : CULong;
    dwStyle : CULong;
    cyMax : UInt;
    hbrBack : HBRUSH;
    dwContextHelpID : CULong;
    dwMenuData : CULong;
}

static MENUINFO = tagMENUINFO;

static LPMENUINFO = Pointer[tagMENUINFO];

static LPCMENUINFO = Pointer[MENUINFO];

record tagSCROLLBARINFO {
    cbSize : CULong;
    rcScrollBar : RECT;
    dxyLineButton : Int;
    xyThumbTop : Int;
    xyThumbBottom : Int;
    reserved : Int;
    rgstate : Array[CULong,6];
}

static SCROLLBARINFO = tagSCROLLBARINFO;

static PSCROLLBARINFO = Pointer[tagSCROLLBARINFO];

static LPSCROLLBARINFO = Pointer[tagSCROLLBARINFO];

record tagWINDOWINFO {
    cbSize : CULong;
    rcWindow : RECT;
    rcClient : RECT;
    dwStyle : CULong;
    dwExStyle : CULong;
    dwWindowStatus : CULong;
    cxWindowBorders : UInt;
    cyWindowBorders : UInt;
    atomWindowType : UShort;
    wCreatorVersion : UShort;
}

static WINDOWINFO = tagWINDOWINFO;

static PWINDOWINFO = Pointer[tagWINDOWINFO];

static LPWINDOWINFO = Pointer[tagWINDOWINFO];

record tagLASTINPUTINFO {
    cbSize : UInt;
    dwTime : CULong;
}

static LASTINPUTINFO = tagLASTINPUTINFO;

static PLASTINPUTINFO = Pointer[tagLASTINPUTINFO];

record tagMONITORINFO {
    cbSize : CULong;
    rcMonitor : RECT;
    rcWork : RECT;
    dwFlags : CULong;
}

static MONITORINFO = tagMONITORINFO;

static LPMONITORINFO = Pointer[tagMONITORINFO];

record tagMONITORINFOEXA {
    cbSize : CULong;
    rcMonitor : RECT;
    rcWork : RECT;
    dwFlags : CULong;
    szDevice : Array[CChar,32];
}

static MONITORINFOEXA = tagMONITORINFOEXA;

static LPMONITORINFOEXA = Pointer[tagMONITORINFOEXA];

record tagMONITORINFOEXW {
    cbSize : CULong;
    rcMonitor : RECT;
    rcWork : RECT;
    dwFlags : CULong;
    szDevice : Array[UShort,32];
}

static MONITORINFOEXW = tagMONITORINFOEXW;

static LPMONITORINFOEXW = Pointer[tagMONITORINFOEXW];

record tagKBDLLHOOKSTRUCT {
    vkCode : CULong;
    scanCode : CULong;
    flags : CULong;
    time : CULong;
    dwExtraInfo : CULong;
}

static KBDLLHOOKSTRUCT = tagKBDLLHOOKSTRUCT;

static LPKBDLLHOOKSTRUCT = Pointer[tagKBDLLHOOKSTRUCT];

static PKBDLLHOOKSTRUCT = Pointer[tagKBDLLHOOKSTRUCT];

record UnnamedRecord13 {
    pt : POINT;
    mouseData : CULong;
    flags : CULong;
    time : CULong;
    dwExtraInfo : CULong;
}

static MSLLHOOKSTRUCT = UnnamedRecord13;

static PMSLLHOOKSTRUCT = Pointer[UnnamedRecord13];

static LPCGUID = Pointer[GUID];

external (stdcall) ActivateKeyboardLayout(
    argument0 : HKL,
    argument1 : UInt) : HKL;

external (stdcall) AdjustWindowRect(
    argument0 : LPRECT,
    argument1 : CULong,
    argument2 : Int) : Int;

external (stdcall) AdjustWindowRectEx(
    argument0 : LPRECT,
    argument1 : CULong,
    argument2 : Int,
    argument3 : CULong) : Int;

external (stdcall) AnyPopup() : Int;

external (stdcall) AppendMenuA(
    argument0 : HMENU,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : LPCSTR) : Int;

external (stdcall) AppendMenuW(
    argument0 : HMENU,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : LPCWSTR) : Int;

external (stdcall) ArrangeIconicWindows(
    argument0 : HWND) : UInt;

external (stdcall) AttachThreadInput(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : Int) : Int;

external (stdcall) BeginDeferWindowPos(
    argument0 : Int) : HDWP;

external (stdcall) BeginPaint(
    argument0 : HWND,
    argument1 : LPPAINTSTRUCT) : HDC;

external (stdcall) BringWindowToTop(
    argument0 : HWND) : Int;

external (stdcall) BroadcastSystemMessage(
    argument0 : CULong,
    argument1 : LPDWORD,
    argument2 : UInt,
    argument3 : UInt,
    argument4 : CLong) : CLong;

external (stdcall) BroadcastSystemMessageA(
    argument0 : CULong,
    argument1 : LPDWORD,
    argument2 : UInt,
    argument3 : UInt,
    argument4 : CLong) : CLong;

external (stdcall) BroadcastSystemMessageW(
    argument0 : CULong,
    argument1 : LPDWORD,
    argument2 : UInt,
    argument3 : UInt,
    argument4 : CLong) : CLong;

external (stdcall) CallMsgFilterA(
    argument0 : LPMSG,
    argument1 : Int) : Int;

external (stdcall) CallMsgFilterW(
    argument0 : LPMSG,
    argument1 : Int) : Int;

external (stdcall) CallNextHookEx(
    argument0 : HHOOK,
    argument1 : Int,
    argument2 : UInt,
    argument3 : CLong) : CLong;

external (stdcall) CallWindowProcA(
    argument0 : WNDPROC,
    argument1 : HWND,
    argument2 : UInt,
    argument3 : UInt,
    argument4 : CLong) : CLong;

external (stdcall) CallWindowProcW(
    argument0 : WNDPROC,
    argument1 : HWND,
    argument2 : UInt,
    argument3 : UInt,
    argument4 : CLong) : CLong;

external (stdcall) CascadeWindows(
    argument0 : HWND,
    argument1 : UInt,
    argument2 : LPCRECT,
    argument3 : UInt,
    argument4 : Pointer[HWND]) : UShort;

external (stdcall) ChangeClipboardChain(
    argument0 : HWND,
    argument1 : HWND) : Int;

external (stdcall) ChangeDisplaySettingsA(
    argument0 : PDEVMODEA,
    argument1 : CULong) : CLong;

external (stdcall) ChangeDisplaySettingsW(
    argument0 : PDEVMODEW,
    argument1 : CULong) : CLong;

external (stdcall) ChangeDisplaySettingsExA(
    argument0 : LPCSTR,
    argument1 : LPDEVMODEA,
    argument2 : HWND,
    argument3 : CULong,
    argument4 : LPVOID) : CLong;

external (stdcall) ChangeDisplaySettingsExW(
    argument0 : LPCWSTR,
    argument1 : LPDEVMODEW,
    argument2 : HWND,
    argument3 : CULong,
    argument4 : LPVOID) : CLong;

external (stdcall) ChangeMenuA(
    argument0 : HMENU,
    argument1 : UInt,
    argument2 : LPCSTR,
    argument3 : UInt,
    argument4 : UInt) : Int;

external (stdcall) ChangeMenuW(
    argument0 : HMENU,
    argument1 : UInt,
    argument2 : LPCWSTR,
    argument3 : UInt,
    argument4 : UInt) : Int;

external (stdcall) CharLowerA(
    argument0 : LPSTR) : LPSTR;

external (stdcall) CharLowerW(
    argument0 : LPWSTR) : LPWSTR;

external (stdcall) CharLowerBuffA(
    argument0 : LPSTR,
    argument1 : CULong) : CULong;

external (stdcall) CharLowerBuffW(
    argument0 : LPWSTR,
    argument1 : CULong) : CULong;

external (stdcall) CharNextA(
    argument0 : LPCSTR) : LPSTR;

external (stdcall) CharNextW(
    argument0 : LPCWSTR) : LPWSTR;

external (stdcall) CharNextExA(
    argument0 : UShort,
    argument1 : LPCSTR,
    argument2 : CULong) : LPSTR;

external (stdcall) CharPrevA(
    argument0 : LPCSTR,
    argument1 : LPCSTR) : LPSTR;

external (stdcall) CharPrevW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR) : LPWSTR;

external (stdcall) CharPrevExA(
    argument0 : UShort,
    argument1 : LPCSTR,
    argument2 : LPCSTR,
    argument3 : CULong) : LPSTR;

external (stdcall) CharToOemA(
    argument0 : LPCSTR,
    argument1 : LPSTR) : Int;

external (stdcall) CharToOemW(
    argument0 : LPCWSTR,
    argument1 : LPSTR) : Int;

external (stdcall) CharToOemBuffA(
    argument0 : LPCSTR,
    argument1 : LPSTR,
    argument2 : CULong) : Int;

external (stdcall) CharToOemBuffW(
    argument0 : LPCWSTR,
    argument1 : LPSTR,
    argument2 : CULong) : Int;

external (stdcall) CharUpperA(
    argument0 : LPSTR) : LPSTR;

external (stdcall) CharUpperW(
    argument0 : LPWSTR) : LPWSTR;

external (stdcall) CharUpperBuffA(
    argument0 : LPSTR,
    argument1 : CULong) : CULong;

external (stdcall) CharUpperBuffW(
    argument0 : LPWSTR,
    argument1 : CULong) : CULong;

external (stdcall) CheckDlgButton(
    argument0 : HWND,
    argument1 : Int,
    argument2 : UInt) : Int;

external (stdcall) CheckMenuItem(
    argument0 : HMENU,
    argument1 : UInt,
    argument2 : UInt) : CULong;

external (stdcall) CheckMenuRadioItem(
    argument0 : HMENU,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : UInt,
    argument4 : UInt) : Int;

external (stdcall) CheckRadioButton(
    argument0 : HWND,
    argument1 : Int,
    argument2 : Int,
    argument3 : Int) : Int;

external (stdcall) ChildWindowFromPoint(
    argument0 : HWND,
    argument1 : POINT) : HWND;

external (stdcall) ChildWindowFromPointEx(
    argument0 : HWND,
    argument1 : POINT,
    argument2 : UInt) : HWND;

external (stdcall) ClientToScreen(
    argument0 : HWND,
    argument1 : LPPOINT) : Int;

external (stdcall) ClipCursor(
    argument0 : LPCRECT) : Int;

external (stdcall) CloseClipboard() : Int;

external (stdcall) CloseDesktop(
    argument0 : HDESK) : Int;

external (stdcall) CloseWindow(
    argument0 : HWND) : Int;

external (stdcall) CloseWindowStation(
    argument0 : HWINSTA) : Int;

external (stdcall) CopyAcceleratorTableA(
    argument0 : HACCEL,
    argument1 : LPACCEL,
    argument2 : Int) : Int;

external (stdcall) CopyAcceleratorTableW(
    argument0 : HACCEL,
    argument1 : LPACCEL,
    argument2 : Int) : Int;

external (stdcall) CopyIcon(
    argument0 : HICON) : HICON;

external (stdcall) CopyImage(
    argument0 : HANDLE,
    argument1 : UInt,
    argument2 : Int,
    argument3 : Int,
    argument4 : UInt) : HANDLE;

external (stdcall) CopyRect(
    argument0 : LPRECT,
    argument1 : LPCRECT) : Int;

external (stdcall) CountClipboardFormats() : Int;

external (stdcall) CreateAcceleratorTableA(
    argument0 : LPACCEL,
    argument1 : Int) : HACCEL;

external (stdcall) CreateAcceleratorTableW(
    argument0 : LPACCEL,
    argument1 : Int) : HACCEL;

external (stdcall) CreateCaret(
    argument0 : HWND,
    argument1 : HBITMAP,
    argument2 : Int,
    argument3 : Int) : Int;

external (stdcall) CreateCursor(
    argument0 : HINSTANCE,
    argument1 : Int,
    argument2 : Int,
    argument3 : Int,
    argument4 : Int,
    argument5 : PCVOID,
    argument6 : PCVOID) : HCURSOR;

external (stdcall) CreateDesktopA(
    argument0 : LPCSTR,
    argument1 : LPCSTR,
    argument2 : LPDEVMODEA,
    argument3 : CULong,
    argument4 : CULong,
    argument5 : LPSECURITY_ATTRIBUTES) : HDESK;

external (stdcall) CreateDesktopW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR,
    argument2 : LPDEVMODEW,
    argument3 : CULong,
    argument4 : CULong,
    argument5 : LPSECURITY_ATTRIBUTES) : HDESK;

external (stdcall) CreateDialogIndirectParamA(
    argument0 : HINSTANCE,
    argument1 : LPCDLGTEMPLATE,
    argument2 : HWND,
    argument3 : DLGPROC,
    argument4 : CLong) : HWND;

external (stdcall) CreateDialogIndirectParamW(
    argument0 : HINSTANCE,
    argument1 : LPCDLGTEMPLATE,
    argument2 : HWND,
    argument3 : DLGPROC,
    argument4 : CLong) : HWND;

external (stdcall) CreateDialogParamA(
    argument0 : HINSTANCE,
    argument1 : LPCSTR,
    argument2 : HWND,
    argument3 : DLGPROC,
    argument4 : CLong) : HWND;

external (stdcall) CreateDialogParamW(
    argument0 : HINSTANCE,
    argument1 : LPCWSTR,
    argument2 : HWND,
    argument3 : DLGPROC,
    argument4 : CLong) : HWND;

external (stdcall) CreateIcon(
    argument0 : HINSTANCE,
    argument1 : Int,
    argument2 : Int,
    argument3 : CUChar,
    argument4 : CUChar,
    argument5 : Pointer[CUChar],
    argument6 : Pointer[CUChar]) : HICON;

external (stdcall) CreateIconFromResource(
    argument0 : PBYTE,
    argument1 : CULong,
    argument2 : Int,
    argument3 : CULong) : HICON;

external (stdcall) CreateIconFromResourceEx(
    argument0 : PBYTE,
    argument1 : CULong,
    argument2 : Int,
    argument3 : CULong,
    argument4 : Int,
    argument5 : Int,
    argument6 : UInt) : HICON;

external (stdcall) CreateIconIndirect(
    argument0 : PICONINFO) : HICON;

external (stdcall) CreateMDIWindowA(
    argument0 : LPCSTR,
    argument1 : LPCSTR,
    argument2 : CULong,
    argument3 : Int,
    argument4 : Int,
    argument5 : Int,
    argument6 : Int,
    argument7 : HWND,
    argument8 : HINSTANCE,
    argument9 : CLong) : HWND;

external (stdcall) CreateMDIWindowW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR,
    argument2 : CULong,
    argument3 : Int,
    argument4 : Int,
    argument5 : Int,
    argument6 : Int,
    argument7 : HWND,
    argument8 : HINSTANCE,
    argument9 : CLong) : HWND;

external (stdcall) CreateMenu() : HMENU;

external (stdcall) CreatePopupMenu() : HMENU;

external (stdcall) CreateWindowExA(
    argument0 : CULong,
    argument1 : LPCSTR,
    argument2 : LPCSTR,
    argument3 : CULong,
    argument4 : Int,
    argument5 : Int,
    argument6 : Int,
    argument7 : Int,
    argument8 : HWND,
    argument9 : HMENU,
    argument10 : HINSTANCE,
    argument11 : LPVOID) : HWND;

external (stdcall) CreateWindowExW(
    argument0 : CULong,
    argument1 : LPCWSTR,
    argument2 : LPCWSTR,
    argument3 : CULong,
    argument4 : Int,
    argument5 : Int,
    argument6 : Int,
    argument7 : Int,
    argument8 : HWND,
    argument9 : HMENU,
    argument10 : HINSTANCE,
    argument11 : LPVOID) : HWND;

external (stdcall) CreateWindowStationA(
    argument0 : LPCSTR,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : LPSECURITY_ATTRIBUTES) : HWINSTA;

external (stdcall) CreateWindowStationW(
    argument0 : LPCWSTR,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : LPSECURITY_ATTRIBUTES) : HWINSTA;

external (stdcall) DefDlgProcA(
    argument0 : HWND,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : CLong) : CLong;

external (stdcall) DefDlgProcW(
    argument0 : HWND,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : CLong) : CLong;

external (stdcall) DeferWindowPos(
    argument0 : HDWP,
    argument1 : HWND,
    argument2 : HWND,
    argument3 : Int,
    argument4 : Int,
    argument5 : Int,
    argument6 : Int,
    argument7 : UInt) : HDWP;

external (stdcall) DefFrameProcA(
    argument0 : HWND,
    argument1 : HWND,
    argument2 : UInt,
    argument3 : UInt,
    argument4 : CLong) : CLong;

external (stdcall) DefFrameProcW(
    argument0 : HWND,
    argument1 : HWND,
    argument2 : UInt,
    argument3 : UInt,
    argument4 : CLong) : CLong;

external (stdcall) DefMDIChildProcA(
    argument0 : HWND,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : CLong) : CLong;

external (stdcall) DefMDIChildProcW(
    argument0 : HWND,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : CLong) : CLong;

external (stdcall) DefWindowProcA(
    argument0 : HWND,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : CLong) : CLong;

external (stdcall) DefWindowProcW(
    argument0 : HWND,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : CLong) : CLong;

external (stdcall) DeleteMenu(
    argument0 : HMENU,
    argument1 : UInt,
    argument2 : UInt) : Int;

external (stdcall) DeregisterShellHookWindow(
    argument0 : HWND) : Int;

external (stdcall) DestroyAcceleratorTable(
    argument0 : HACCEL) : Int;

external (stdcall) DestroyCaret() : Int;

external (stdcall) DestroyCursor(
    argument0 : HCURSOR) : Int;

external (stdcall) DestroyIcon(
    argument0 : HICON) : Int;

external (stdcall) DestroyMenu(
    argument0 : HMENU) : Int;

external (stdcall) DestroyWindow(
    argument0 : HWND) : Int;

external (stdcall) DialogBoxIndirectParamA(
    argument0 : HINSTANCE,
    argument1 : LPCDLGTEMPLATE,
    argument2 : HWND,
    argument3 : DLGPROC,
    argument4 : CLong) : Int;

external (stdcall) DialogBoxIndirectParamW(
    argument0 : HINSTANCE,
    argument1 : LPCDLGTEMPLATE,
    argument2 : HWND,
    argument3 : DLGPROC,
    argument4 : CLong) : Int;

external (stdcall) DialogBoxParamA(
    argument0 : HINSTANCE,
    argument1 : LPCSTR,
    argument2 : HWND,
    argument3 : DLGPROC,
    argument4 : CLong) : Int;

external (stdcall) DialogBoxParamW(
    argument0 : HINSTANCE,
    argument1 : LPCWSTR,
    argument2 : HWND,
    argument3 : DLGPROC,
    argument4 : CLong) : Int;

external (stdcall) DispatchMessageA(
    argument0 : Pointer[MSG]) : CLong;

external (stdcall) DispatchMessageW(
    argument0 : Pointer[MSG]) : CLong;

external (stdcall) DlgDirListA(
    argument0 : HWND,
    argument1 : LPSTR,
    argument2 : Int,
    argument3 : Int,
    argument4 : UInt) : Int;

external (stdcall) DlgDirListW(
    argument0 : HWND,
    argument1 : LPWSTR,
    argument2 : Int,
    argument3 : Int,
    argument4 : UInt) : Int;

external (stdcall) DlgDirListComboBoxA(
    argument0 : HWND,
    argument1 : LPSTR,
    argument2 : Int,
    argument3 : Int,
    argument4 : UInt) : Int;

external (stdcall) DlgDirListComboBoxW(
    argument0 : HWND,
    argument1 : LPWSTR,
    argument2 : Int,
    argument3 : Int,
    argument4 : UInt) : Int;

external (stdcall) DlgDirSelectComboBoxExA(
    argument0 : HWND,
    argument1 : LPSTR,
    argument2 : Int,
    argument3 : Int) : Int;

external (stdcall) DlgDirSelectComboBoxExW(
    argument0 : HWND,
    argument1 : LPWSTR,
    argument2 : Int,
    argument3 : Int) : Int;

external (stdcall) DlgDirSelectExA(
    argument0 : HWND,
    argument1 : LPSTR,
    argument2 : Int,
    argument3 : Int) : Int;

external (stdcall) DlgDirSelectExW(
    argument0 : HWND,
    argument1 : LPWSTR,
    argument2 : Int,
    argument3 : Int) : Int;

external (stdcall) DragDetect(
    argument0 : HWND,
    argument1 : POINT) : Int;

external (stdcall) DragObject(
    argument0 : HWND,
    argument1 : HWND,
    argument2 : UInt,
    argument3 : CULong,
    argument4 : HCURSOR) : CULong;

external (stdcall) DrawAnimatedRects(
    argument0 : HWND,
    argument1 : Int,
    argument2 : LPCRECT,
    argument3 : LPCRECT) : Int;

external (stdcall) DrawCaption(
    argument0 : HWND,
    argument1 : HDC,
    argument2 : LPCRECT,
    argument3 : UInt) : Int;

external (stdcall) DrawEdge(
    argument0 : HDC,
    argument1 : LPRECT,
    argument2 : UInt,
    argument3 : UInt) : Int;

external (stdcall) DrawFocusRect(
    argument0 : HDC,
    argument1 : LPCRECT) : Int;

external (stdcall) DrawFrameControl(
    argument0 : HDC,
    argument1 : LPRECT,
    argument2 : UInt,
    argument3 : UInt) : Int;

external (stdcall) DrawIcon(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : HICON) : Int;

external (stdcall) DrawIconEx(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : HICON,
    argument4 : Int,
    argument5 : Int,
    argument6 : UInt,
    argument7 : HBRUSH,
    argument8 : UInt) : Int;

external (stdcall) DrawMenuBar(
    argument0 : HWND) : Int;

external (stdcall) DrawStateA(
    argument0 : HDC,
    argument1 : HBRUSH,
    argument2 : DRAWSTATEPROC,
    argument3 : CLong,
    argument4 : UInt,
    argument5 : Int,
    argument6 : Int,
    argument7 : Int,
    argument8 : Int,
    argument9 : UInt) : Int;

external (stdcall) DrawStateW(
    argument0 : HDC,
    argument1 : HBRUSH,
    argument2 : DRAWSTATEPROC,
    argument3 : CLong,
    argument4 : UInt,
    argument5 : Int,
    argument6 : Int,
    argument7 : Int,
    argument8 : Int,
    argument9 : UInt) : Int;

external (stdcall) DrawTextA(
    argument0 : HDC,
    argument1 : LPCSTR,
    argument2 : Int,
    argument3 : LPRECT,
    argument4 : UInt) : Int;

external (stdcall) DrawTextW(
    argument0 : HDC,
    argument1 : LPCWSTR,
    argument2 : Int,
    argument3 : LPRECT,
    argument4 : UInt) : Int;

external (stdcall) DrawTextExA(
    argument0 : HDC,
    argument1 : LPSTR,
    argument2 : Int,
    argument3 : LPRECT,
    argument4 : UInt,
    argument5 : LPDRAWTEXTPARAMS) : Int;

external (stdcall) DrawTextExW(
    argument0 : HDC,
    argument1 : LPWSTR,
    argument2 : Int,
    argument3 : LPRECT,
    argument4 : UInt,
    argument5 : LPDRAWTEXTPARAMS) : Int;

external (stdcall) EmptyClipboard() : Int;

external (stdcall) EnableMenuItem(
    argument0 : HMENU,
    argument1 : UInt,
    argument2 : UInt) : Int;

external (stdcall) EnableScrollBar(
    argument0 : HWND,
    argument1 : UInt,
    argument2 : UInt) : Int;

external (stdcall) EnableWindow(
    argument0 : HWND,
    argument1 : Int) : Int;

external (stdcall) EndDeferWindowPos(
    argument0 : HDWP) : Int;

external (stdcall) EndDialog(
    argument0 : HWND,
    argument1 : Int) : Int;

external (stdcall) EndMenu() : Int;

external (stdcall) EndPaint(
    argument0 : HWND,
    argument1 : Pointer[PAINTSTRUCT]) : Int;

external (stdcall) EnumChildWindows(
    argument0 : HWND,
    argument1 : ENUMWINDOWSPROC,
    argument2 : CLong) : Int;

external (stdcall) EnumClipboardFormats(
    argument0 : UInt) : UInt;

external (stdcall) EnumDesktopsA(
    argument0 : HWINSTA,
    argument1 : DESKTOPENUMPROCA,
    argument2 : CLong) : Int;

external (stdcall) EnumDesktopsW(
    argument0 : HWINSTA,
    argument1 : DESKTOPENUMPROCW,
    argument2 : CLong) : Int;

external (stdcall) EnumDesktopWindows(
    argument0 : HDESK,
    argument1 : ENUMWINDOWSPROC,
    argument2 : CLong) : Int;

external (stdcall) EnumDisplayMonitors(
    argument0 : HDC,
    argument1 : LPCRECT,
    argument2 : MONITORENUMPROC,
    argument3 : CLong) : Int;

external (stdcall) EnumDisplaySettingsA(
    argument0 : LPCSTR,
    argument1 : CULong,
    argument2 : PDEVMODEA) : Int;

external (stdcall) EnumDisplaySettingsW(
    argument0 : LPCWSTR,
    argument1 : CULong,
    argument2 : PDEVMODEW) : Int;

external (stdcall) EnumDisplayDevicesA(
    argument0 : LPCSTR,
    argument1 : CULong,
    argument2 : PDISPLAY_DEVICEA,
    argument3 : CULong) : Int;

external (stdcall) EnumDisplayDevicesW(
    argument0 : LPCWSTR,
    argument1 : CULong,
    argument2 : PDISPLAY_DEVICEW,
    argument3 : CULong) : Int;

external (stdcall) EnumPropsA(
    argument0 : HWND,
    argument1 : PROPENUMPROCA) : Int;

external (stdcall) EnumPropsW(
    argument0 : HWND,
    argument1 : PROPENUMPROCW) : Int;

external (stdcall) EnumPropsExA(
    argument0 : HWND,
    argument1 : PROPENUMPROCEXA,
    argument2 : CLong) : Int;

external (stdcall) EnumPropsExW(
    argument0 : HWND,
    argument1 : PROPENUMPROCEXW,
    argument2 : CLong) : Int;

external (stdcall) EnumThreadWindows(
    argument0 : CULong,
    argument1 : WNDENUMPROC,
    argument2 : CLong) : Int;

external (stdcall) EnumWindows(
    argument0 : WNDENUMPROC,
    argument1 : CLong) : Int;

external (stdcall) EnumWindowStationsA(
    argument0 : WINSTAENUMPROCA,
    argument1 : CLong) : Int;

external (stdcall) EnumWindowStationsW(
    argument0 : WINSTAENUMPROCW,
    argument1 : CLong) : Int;

external (stdcall) EqualRect(
    argument0 : LPCRECT,
    argument1 : LPCRECT) : Int;

external (stdcall) ExitWindowsEx(
    argument0 : UInt,
    argument1 : CULong) : Int;

external (stdcall) FindWindowA(
    argument0 : LPCSTR,
    argument1 : LPCSTR) : HWND;

external (stdcall) FindWindowExA(
    argument0 : HWND,
    argument1 : HWND,
    argument2 : LPCSTR,
    argument3 : LPCSTR) : HWND;

external (stdcall) FindWindowExW(
    argument0 : HWND,
    argument1 : HWND,
    argument2 : LPCWSTR,
    argument3 : LPCWSTR) : HWND;

external (stdcall) FindWindowW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR) : HWND;

external (stdcall) FlashWindow(
    argument0 : HWND,
    argument1 : Int) : Int;

external (stdcall) FrameRect(
    argument0 : HDC,
    argument1 : LPCRECT,
    argument2 : HBRUSH) : Int;

external (stdcall) FrameRgn(
    argument0 : HDC,
    argument1 : HRGN,
    argument2 : HBRUSH,
    argument3 : Int,
    argument4 : Int) : Int;

external (stdcall) GetActiveWindow() : HWND;

external (stdcall) GetAncestor(
    argument0 : HWND,
    argument1 : UInt) : HWND;

external (stdcall) GetAsyncKeyState(
    argument0 : Int) : Short;

external (stdcall) GetCapture() : HWND;

external (stdcall) GetCaretBlinkTime() : UInt;

external (stdcall) GetCaretPos(
    argument0 : LPPOINT) : Int;

external (stdcall) GetClassInfoA(
    argument0 : HINSTANCE,
    argument1 : LPCSTR,
    argument2 : LPWNDCLASSA) : Int;

external (stdcall) GetClassInfoExA(
    argument0 : HINSTANCE,
    argument1 : LPCSTR,
    argument2 : LPWNDCLASSEXA) : Int;

external (stdcall) GetClassInfoW(
    argument0 : HINSTANCE,
    argument1 : LPCWSTR,
    argument2 : LPWNDCLASSW) : Int;

external (stdcall) GetClassInfoExW(
    argument0 : HINSTANCE,
    argument1 : LPCWSTR,
    argument2 : LPWNDCLASSEXW) : Int;

external (stdcall) GetClassLongA(
    argument0 : HWND,
    argument1 : Int) : CULong;

external (stdcall) GetClassLongW(
    argument0 : HWND,
    argument1 : Int) : CULong;

external (stdcall) GetClassNameA(
    argument0 : HWND,
    argument1 : LPSTR,
    argument2 : Int) : Int;

external (stdcall) GetClassNameW(
    argument0 : HWND,
    argument1 : LPWSTR,
    argument2 : Int) : Int;

external (stdcall) GetClassWord(
    argument0 : HWND,
    argument1 : Int) : UShort;

external (stdcall) GetClientRect(
    argument0 : HWND,
    argument1 : LPRECT) : Int;

external (stdcall) GetClipboardData(
    argument0 : UInt) : HANDLE;

external (stdcall) GetClipboardFormatNameA(
    argument0 : UInt,
    argument1 : LPSTR,
    argument2 : Int) : Int;

external (stdcall) GetClipboardFormatNameW(
    argument0 : UInt,
    argument1 : LPWSTR,
    argument2 : Int) : Int;

external (stdcall) GetClipboardOwner() : HWND;

external (stdcall) GetClipboardViewer() : HWND;

external (stdcall) GetClipCursor(
    argument0 : LPRECT) : Int;

external (stdcall) GetCursorPos(
    argument0 : LPPOINT) : Int;

external (stdcall) GetDC(
    argument0 : HWND) : HDC;

external (stdcall) GetDCEx(
    argument0 : HWND,
    argument1 : HRGN,
    argument2 : CULong) : HDC;

external (stdcall) GetDesktopWindow() : HWND;

external (stdcall) GetDialogBaseUnits() : CLong;

external (stdcall) GetDlgCtrlID(
    argument0 : HWND) : Int;

external (stdcall) GetDlgItem(
    argument0 : HWND,
    argument1 : Int) : HWND;

external (stdcall) GetDlgItemInt(
    argument0 : HWND,
    argument1 : Int,
    argument2 : PBOOL,
    argument3 : Int) : UInt;

external (stdcall) GetDlgItemTextA(
    argument0 : HWND,
    argument1 : Int,
    argument2 : LPSTR,
    argument3 : Int) : UInt;

external (stdcall) GetDlgItemTextW(
    argument0 : HWND,
    argument1 : Int,
    argument2 : LPWSTR,
    argument3 : Int) : UInt;

external (stdcall) GetDoubleClickTime() : UInt;

external (stdcall) GetFocus() : HWND;

external (stdcall) GetForegroundWindow() : HWND;

external (stdcall) GetIconInfo(
    argument0 : HICON,
    argument1 : PICONINFO) : Int;

external (stdcall) GetInputState() : Int;

external (stdcall) GetKBCodePage() : UInt;

external (stdcall) GetKeyboardLayout(
    argument0 : CULong) : HKL;

external (stdcall) GetKeyboardLayoutList(
    argument0 : Int,
    argument1 : Pointer[HKL]) : UInt;

external (stdcall) GetKeyboardLayoutNameA(
    argument0 : LPSTR) : Int;

external (stdcall) GetKeyboardLayoutNameW(
    argument0 : LPWSTR) : Int;

external (stdcall) GetKeyboardState(
    argument0 : PBYTE) : Int;

external (stdcall) GetKeyboardType(
    argument0 : Int) : Int;

external (stdcall) GetKeyNameTextA(
    argument0 : CLong,
    argument1 : LPSTR,
    argument2 : Int) : Int;

external (stdcall) GetKeyNameTextW(
    argument0 : CLong,
    argument1 : LPWSTR,
    argument2 : Int) : Int;

external (stdcall) GetKeyState(
    argument0 : Int) : Short;

external (stdcall) GetLastActivePopup(
    argument0 : HWND) : HWND;

external (stdcall) GetMenu(
    argument0 : HWND) : HMENU;

external (stdcall) GetMenuCheckMarkDimensions() : CLong;

external (stdcall) GetMenuContextHelpId(
    argument0 : HMENU) : CULong;

external (stdcall) GetMenuDefaultItem(
    argument0 : HMENU,
    argument1 : UInt,
    argument2 : UInt) : UInt;

external (stdcall) GetMenuItemCount(
    argument0 : HMENU) : Int;

external (stdcall) GetMenuItemID(
    argument0 : HMENU,
    argument1 : Int) : UInt;

external (stdcall) GetMenuItemInfoA(
    argument0 : HMENU,
    argument1 : UInt,
    argument2 : Int,
    argument3 : LPMENUITEMINFOA) : Int;

external (stdcall) GetMenuItemInfoW(
    argument0 : HMENU,
    argument1 : UInt,
    argument2 : Int,
    argument3 : LPMENUITEMINFOW) : Int;

external (stdcall) GetMenuItemRect(
    argument0 : HWND,
    argument1 : HMENU,
    argument2 : UInt,
    argument3 : LPRECT) : Int;

external (stdcall) GetMenuState(
    argument0 : HMENU,
    argument1 : UInt,
    argument2 : UInt) : UInt;

external (stdcall) GetMenuStringA(
    argument0 : HMENU,
    argument1 : UInt,
    argument2 : LPSTR,
    argument3 : Int,
    argument4 : UInt) : Int;

external (stdcall) GetMenuStringW(
    argument0 : HMENU,
    argument1 : UInt,
    argument2 : LPWSTR,
    argument3 : Int,
    argument4 : UInt) : Int;

external (stdcall) GetMessageA(
    argument0 : LPMSG,
    argument1 : HWND,
    argument2 : UInt,
    argument3 : UInt) : Int;

external (stdcall) GetMessageW(
    argument0 : LPMSG,
    argument1 : HWND,
    argument2 : UInt,
    argument3 : UInt) : Int;

external (stdcall) GetMessageExtraInfo() : CLong;

external (stdcall) GetMessagePos() : CULong;

external (stdcall) GetMessageTime() : CLong;

external (stdcall) GetNextDlgGroupItem(
    argument0 : HWND,
    argument1 : HWND,
    argument2 : Int) : HWND;

external (stdcall) GetNextDlgTabItem(
    argument0 : HWND,
    argument1 : HWND,
    argument2 : Int) : HWND;

external (stdcall) GetOpenClipboardWindow() : HWND;

external (stdcall) GetParent(
    argument0 : HWND) : HWND;

external (stdcall) GetPriorityClipboardFormat(
    argument0 : Pointer[UInt],
    argument1 : Int) : Int;

external (stdcall) GetPropA(
    argument0 : HWND,
    argument1 : LPCSTR) : HANDLE;

external (stdcall) GetPropW(
    argument0 : HWND,
    argument1 : LPCWSTR) : HANDLE;

external (stdcall) GetQueueStatus(
    argument0 : UInt) : CULong;

external (stdcall) GetScrollInfo(
    argument0 : HWND,
    argument1 : Int,
    argument2 : LPSCROLLINFO) : Int;

external (stdcall) GetScrollPos(
    argument0 : HWND,
    argument1 : Int) : Int;

external (stdcall) GetScrollRange(
    argument0 : HWND,
    argument1 : Int,
    argument2 : LPINT,
    argument3 : LPINT) : Int;

external (stdcall) GetSubMenu(
    argument0 : HMENU,
    argument1 : Int) : HMENU;

external (stdcall) GetSysColor(
    argument0 : Int) : CULong;

external (stdcall) GetSysColorBrush(
    argument0 : Int) : HBRUSH;

external (stdcall) GetSystemMenu(
    argument0 : HWND,
    argument1 : Int) : HMENU;

external (stdcall) GetSystemMetrics(
    argument0 : Int) : Int;

external (stdcall) GetTabbedTextExtentA(
    argument0 : HDC,
    argument1 : LPCSTR,
    argument2 : Int,
    argument3 : Int,
    argument4 : LPINT) : CULong;

external (stdcall) GetTabbedTextExtentW(
    argument0 : HDC,
    argument1 : LPCWSTR,
    argument2 : Int,
    argument3 : Int,
    argument4 : LPINT) : CULong;

external (stdcall) GetWindowLongA(
    argument0 : HWND,
    argument1 : Int) : CLong;

external (stdcall) GetWindowLongW(
    argument0 : HWND,
    argument1 : Int) : CLong;

external (stdcall) GetThreadDesktop(
    argument0 : CULong) : HDESK;

external (stdcall) GetTopWindow(
    argument0 : HWND) : HWND;

external (stdcall) GetUpdateRect(
    argument0 : HWND,
    argument1 : LPRECT,
    argument2 : Int) : Int;

external (stdcall) GetUpdateRgn(
    argument0 : HWND,
    argument1 : HRGN,
    argument2 : Int) : Int;

external (stdcall) GetUserObjectInformationA(
    argument0 : HANDLE,
    argument1 : Int,
    argument2 : PVOID,
    argument3 : CULong,
    argument4 : PDWORD) : Int;

external (stdcall) GetUserObjectInformationW(
    argument0 : HANDLE,
    argument1 : Int,
    argument2 : PVOID,
    argument3 : CULong,
    argument4 : PDWORD) : Int;

external (stdcall) GetUserObjectSecurity(
    argument0 : HANDLE,
    argument1 : PSECURITY_INFORMATION,
    argument2 : PSECURITY_DESCRIPTOR,
    argument3 : CULong,
    argument4 : PDWORD) : Int;

external (stdcall) GetWindow(
    argument0 : HWND,
    argument1 : UInt) : HWND;

external (stdcall) GetWindowContextHelpId(
    argument0 : HWND) : CULong;

external (stdcall) GetWindowDC(
    argument0 : HWND) : HDC;

external (stdcall) GetWindowPlacement(
    argument0 : HWND,
    argument1 : Pointer[WINDOWPLACEMENT]) : Int;

external (stdcall) GetWindowRect(
    argument0 : HWND,
    argument1 : LPRECT) : Int;

external (stdcall) GetWindowRgn(
    argument0 : HWND,
    argument1 : HRGN) : Int;

external (stdcall) GetWindowTextA(
    argument0 : HWND,
    argument1 : LPSTR,
    argument2 : Int) : Int;

external (stdcall) GetWindowTextLengthA(
    argument0 : HWND) : Int;

external (stdcall) GetWindowTextLengthW(
    argument0 : HWND) : Int;

external (stdcall) GetWindowTextW(
    argument0 : HWND,
    argument1 : LPWSTR,
    argument2 : Int) : Int;

external (stdcall) GetWindowWord(
    argument0 : HWND,
    argument1 : Int) : UShort;

external (stdcall) GetAltTabInfoA(
    argument0 : HWND,
    argument1 : Int,
    argument2 : PALTTABINFO,
    argument3 : LPSTR,
    argument4 : UInt) : Int;

external (stdcall) GetAltTabInfoW(
    argument0 : HWND,
    argument1 : Int,
    argument2 : PALTTABINFO,
    argument3 : LPWSTR,
    argument4 : UInt) : Int;

external (stdcall) GetComboBoxInfo(
    argument0 : HWND,
    argument1 : PCOMBOBOXINFO) : Int;

external (stdcall) GetCursorInfo(
    argument0 : PCURSORINFO) : Int;

external (stdcall) GetLastInputInfo(
    argument0 : PLASTINPUTINFO) : Int;

external (stdcall) GetListBoxInfo(
    argument0 : HWND) : CULong;

external (stdcall) GetMenuBarInfo(
    argument0 : HWND,
    argument1 : CLong,
    argument2 : CLong,
    argument3 : PMENUBARINFO) : Int;

external (stdcall) GetMenuInfo(
    argument0 : HMENU,
    argument1 : LPMENUINFO) : Int;

external (stdcall) GetScrollBarInfo(
    argument0 : HWND,
    argument1 : CLong,
    argument2 : PSCROLLBARINFO) : Int;

external (stdcall) GetWindowInfo(
    argument0 : HWND,
    argument1 : PWINDOWINFO) : Int;

external (stdcall) GetMonitorInfoA(
    argument0 : HMONITOR,
    argument1 : LPMONITORINFO) : Int;

external (stdcall) GetMonitorInfoW(
    argument0 : HMONITOR,
    argument1 : LPMONITORINFO) : Int;

external (stdcall) GetWindowModuleFileNameA(
    argument0 : HWND,
    argument1 : LPSTR,
    argument2 : UInt) : UInt;

external (stdcall) GetWindowModuleFileNameW(
    argument0 : HWND,
    argument1 : LPWSTR,
    argument2 : UInt) : UInt;

external (stdcall) GrayStringA(
    argument0 : HDC,
    argument1 : HBRUSH,
    argument2 : GRAYSTRINGPROC,
    argument3 : CLong,
    argument4 : Int,
    argument5 : Int,
    argument6 : Int,
    argument7 : Int,
    argument8 : Int) : Int;

external (stdcall) GrayStringW(
    argument0 : HDC,
    argument1 : HBRUSH,
    argument2 : GRAYSTRINGPROC,
    argument3 : CLong,
    argument4 : Int,
    argument5 : Int,
    argument6 : Int,
    argument7 : Int,
    argument8 : Int) : Int;

external (stdcall) HideCaret(
    argument0 : HWND) : Int;

external (stdcall) HiliteMenuItem(
    argument0 : HWND,
    argument1 : HMENU,
    argument2 : UInt,
    argument3 : UInt) : Int;

external (stdcall) InflateRect(
    argument0 : LPRECT,
    argument1 : Int,
    argument2 : Int) : Int;

external (stdcall) InSendMessage() : Int;

external (stdcall) InsertMenuA(
    argument0 : HMENU,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : UInt,
    argument4 : LPCSTR) : Int;

external (stdcall) InsertMenuW(
    argument0 : HMENU,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : UInt,
    argument4 : LPCWSTR) : Int;

external (stdcall) InsertMenuItemA(
    argument0 : HMENU,
    argument1 : UInt,
    argument2 : Int,
    argument3 : LPCMENUITEMINFOA) : Int;

external (stdcall) InsertMenuItemW(
    argument0 : HMENU,
    argument1 : UInt,
    argument2 : Int,
    argument3 : LPCMENUITEMINFOW) : Int;

external (stdcall) InternalGetWindowText(
    argument0 : HWND,
    argument1 : LPWSTR,
    argument2 : Int) : Int;

external (stdcall) IntersectRect(
    argument0 : LPRECT,
    argument1 : LPCRECT,
    argument2 : LPCRECT) : Int;

external (stdcall) InvalidateRect(
    argument0 : HWND,
    argument1 : LPCRECT,
    argument2 : Int) : Int;

external (stdcall) InvalidateRgn(
    argument0 : HWND,
    argument1 : HRGN,
    argument2 : Int) : Int;

external (stdcall) InvertRect(
    argument0 : HDC,
    argument1 : LPCRECT) : Int;

external (stdcall) IsCharAlphaA(
    ch : CChar) : Int;

external (stdcall) IsCharAlphaNumericA(
    argument0 : CChar) : Int;

external (stdcall) IsCharAlphaNumericW(
    argument0 : UShort) : Int;

external (stdcall) IsCharAlphaW(
    argument0 : UShort) : Int;

external (stdcall) IsCharLowerA(
    argument0 : CChar) : Int;

external (stdcall) IsCharLowerW(
    argument0 : UShort) : Int;

external (stdcall) IsCharUpperA(
    argument0 : CChar) : Int;

external (stdcall) IsCharUpperW(
    argument0 : UShort) : Int;

external (stdcall) IsChild(
    argument0 : HWND,
    argument1 : HWND) : Int;

external (stdcall) IsClipboardFormatAvailable(
    argument0 : UInt) : Int;

external (stdcall) IsDialogMessageA(
    argument0 : HWND,
    argument1 : LPMSG) : Int;

external (stdcall) IsDialogMessageW(
    argument0 : HWND,
    argument1 : LPMSG) : Int;

external (stdcall) IsDlgButtonChecked(
    argument0 : HWND,
    argument1 : Int) : UInt;

external (stdcall) IsIconic(
    argument0 : HWND) : Int;

external (stdcall) IsMenu(
    argument0 : HMENU) : Int;

external (stdcall) IsRectEmpty(
    argument0 : LPCRECT) : Int;

external (stdcall) IsWindow(
    argument0 : HWND) : Int;

external (stdcall) IsWindowEnabled(
    argument0 : HWND) : Int;

external (stdcall) IsWindowUnicode(
    argument0 : HWND) : Int;

external (stdcall) IsWindowVisible(
    argument0 : HWND) : Int;

external (stdcall) IsZoomed(
    argument0 : HWND) : Int;

external (stdcall) keybd_event(
    argument0 : CUChar,
    argument1 : CUChar,
    argument2 : CULong,
    argument3 : CULong) : Void;

external (stdcall) KillTimer(
    argument0 : HWND,
    argument1 : UInt) : Int;

external (stdcall) LoadAcceleratorsA(
    argument0 : HINSTANCE,
    argument1 : LPCSTR) : HACCEL;

external (stdcall) LoadAcceleratorsW(
    argument0 : HINSTANCE,
    argument1 : LPCWSTR) : HACCEL;

external (stdcall) LoadBitmapA(
    argument0 : HINSTANCE,
    argument1 : LPCSTR) : HBITMAP;

external (stdcall) LoadBitmapW(
    argument0 : HINSTANCE,
    argument1 : LPCWSTR) : HBITMAP;

external (stdcall) LoadCursorA(
    argument0 : HINSTANCE,
    argument1 : LPCSTR) : HCURSOR;

external (stdcall) LoadCursorFromFileA(
    argument0 : LPCSTR) : HCURSOR;

external (stdcall) LoadCursorFromFileW(
    argument0 : LPCWSTR) : HCURSOR;

external (stdcall) LoadCursorW(
    argument0 : HINSTANCE,
    argument1 : LPCWSTR) : HCURSOR;

external (stdcall) LoadIconA(
    argument0 : HINSTANCE,
    argument1 : LPCSTR) : HICON;

external (stdcall) LoadIconW(
    argument0 : HINSTANCE,
    argument1 : LPCWSTR) : HICON;

external (stdcall) LoadImageA(
    argument0 : HINSTANCE,
    argument1 : LPCSTR,
    argument2 : UInt,
    argument3 : Int,
    argument4 : Int,
    argument5 : UInt) : HANDLE;

external (stdcall) LoadImageW(
    argument0 : HINSTANCE,
    argument1 : LPCWSTR,
    argument2 : UInt,
    argument3 : Int,
    argument4 : Int,
    argument5 : UInt) : HANDLE;

external (stdcall) LoadKeyboardLayoutA(
    argument0 : LPCSTR,
    argument1 : UInt) : HKL;

external (stdcall) LoadKeyboardLayoutW(
    argument0 : LPCWSTR,
    argument1 : UInt) : HKL;

external (stdcall) LoadMenuA(
    argument0 : HINSTANCE,
    argument1 : LPCSTR) : HMENU;

external (stdcall) LoadMenuIndirectA(
    argument0 : RawPointer) : HMENU;

external (stdcall) LoadMenuIndirectW(
    argument0 : RawPointer) : HMENU;

external (stdcall) LoadMenuW(
    argument0 : HINSTANCE,
    argument1 : LPCWSTR) : HMENU;

external (stdcall) LoadStringA(
    argument0 : HINSTANCE,
    argument1 : UInt,
    argument2 : LPSTR,
    argument3 : Int) : Int;

external (stdcall) LoadStringW(
    argument0 : HINSTANCE,
    argument1 : UInt,
    argument2 : LPWSTR,
    argument3 : Int) : Int;

external (stdcall) LockWindowUpdate(
    argument0 : HWND) : Int;

external (stdcall) LookupIconIdFromDirectory(
    argument0 : PBYTE,
    argument1 : Int) : Int;

external (stdcall) LookupIconIdFromDirectoryEx(
    argument0 : PBYTE,
    argument1 : Int,
    argument2 : Int,
    argument3 : Int,
    argument4 : UInt) : Int;

external (stdcall) MapDialogRect(
    argument0 : HWND,
    argument1 : LPRECT) : Int;

external (stdcall) MapVirtualKeyA(
    argument0 : UInt,
    argument1 : UInt) : UInt;

external (stdcall) MapVirtualKeyExA(
    argument0 : UInt,
    argument1 : UInt,
    argument2 : HKL) : UInt;

external (stdcall) MapVirtualKeyExW(
    argument0 : UInt,
    argument1 : UInt,
    argument2 : HKL) : UInt;

external (stdcall) MapVirtualKeyW(
    argument0 : UInt,
    argument1 : UInt) : UInt;

external (stdcall) MapWindowPoints(
    argument0 : HWND,
    argument1 : HWND,
    argument2 : LPPOINT,
    argument3 : UInt) : Int;

external (stdcall) MenuItemFromPoint(
    argument0 : HWND,
    argument1 : HMENU,
    argument2 : POINT) : Int;

external (stdcall) MessageBeep(
    argument0 : UInt) : Int;

external (stdcall) MessageBoxA(
    argument0 : HWND,
    argument1 : LPCSTR,
    argument2 : LPCSTR,
    argument3 : UInt) : Int;

external (stdcall) MessageBoxW(
    argument0 : HWND,
    argument1 : LPCWSTR,
    argument2 : LPCWSTR,
    argument3 : UInt) : Int;

external (stdcall) MessageBoxExA(
    argument0 : HWND,
    argument1 : LPCSTR,
    argument2 : LPCSTR,
    argument3 : UInt,
    argument4 : UShort) : Int;

external (stdcall) MessageBoxExW(
    argument0 : HWND,
    argument1 : LPCWSTR,
    argument2 : LPCWSTR,
    argument3 : UInt,
    argument4 : UShort) : Int;

external (stdcall) MessageBoxIndirectA(
    argument0 : Pointer[MSGBOXPARAMSA]) : Int;

external (stdcall) MessageBoxIndirectW(
    argument0 : Pointer[MSGBOXPARAMSW]) : Int;

external (stdcall) ModifyMenuA(
    argument0 : HMENU,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : UInt,
    argument4 : LPCSTR) : Int;

external (stdcall) ModifyMenuW(
    argument0 : HMENU,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : UInt,
    argument4 : LPCWSTR) : Int;

external (stdcall) mouse_event(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : CULong) : Void;

external (stdcall) MoveWindow(
    argument0 : HWND,
    argument1 : Int,
    argument2 : Int,
    argument3 : Int,
    argument4 : Int,
    argument5 : Int) : Int;

external (stdcall) MsgWaitForMultipleObjects(
    argument0 : CULong,
    argument1 : Pointer[HANDLE],
    argument2 : Int,
    argument3 : CULong,
    argument4 : CULong) : CULong;

external (stdcall) MsgWaitForMultipleObjectsEx(
    argument0 : CULong,
    argument1 : Pointer[HANDLE],
    argument2 : CULong,
    argument3 : CULong,
    argument4 : CULong) : CULong;

external (stdcall) OemKeyScan(
    argument0 : UShort) : CULong;

external (stdcall) OemToCharA(
    argument0 : LPCSTR,
    argument1 : LPSTR) : Int;

external (stdcall) OemToCharBuffA(
    argument0 : LPCSTR,
    argument1 : LPSTR,
    argument2 : CULong) : Int;

external (stdcall) OemToCharBuffW(
    argument0 : LPCSTR,
    argument1 : LPWSTR,
    argument2 : CULong) : Int;

external (stdcall) OemToCharW(
    argument0 : LPCSTR,
    argument1 : LPWSTR) : Int;

external (stdcall) OffsetRect(
    argument0 : LPRECT,
    argument1 : Int,
    argument2 : Int) : Int;

external (stdcall) OpenClipboard(
    argument0 : HWND) : Int;

external (stdcall) OpenDesktopA(
    argument0 : LPSTR,
    argument1 : CULong,
    argument2 : Int,
    argument3 : CULong) : HDESK;

external (stdcall) OpenDesktopW(
    argument0 : LPWSTR,
    argument1 : CULong,
    argument2 : Int,
    argument3 : CULong) : HDESK;

external (stdcall) OpenIcon(
    argument0 : HWND) : Int;

external (stdcall) OpenInputDesktop(
    argument0 : CULong,
    argument1 : Int,
    argument2 : CULong) : HDESK;

external (stdcall) OpenWindowStationA(
    argument0 : LPSTR,
    argument1 : Int,
    argument2 : CULong) : HWINSTA;

external (stdcall) OpenWindowStationW(
    argument0 : LPWSTR,
    argument1 : Int,
    argument2 : CULong) : HWINSTA;

external (stdcall) PaintDesktop(
    argument0 : HDC) : Int;

external (stdcall) PeekMessageA(
    argument0 : LPMSG,
    argument1 : HWND,
    argument2 : UInt,
    argument3 : UInt,
    argument4 : UInt) : Int;

external (stdcall) PeekMessageW(
    argument0 : LPMSG,
    argument1 : HWND,
    argument2 : UInt,
    argument3 : UInt,
    argument4 : UInt) : Int;

external (stdcall) PostMessageA(
    argument0 : HWND,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : CLong) : Int;

external (stdcall) PostMessageW(
    argument0 : HWND,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : CLong) : Int;

external (stdcall) PostQuitMessage(
    argument0 : Int) : Void;

external (stdcall) PostThreadMessageA(
    argument0 : CULong,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : CLong) : Int;

external (stdcall) PostThreadMessageW(
    argument0 : CULong,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : CLong) : Int;

external (stdcall) PtInRect(
    argument0 : LPCRECT,
    argument1 : POINT) : Int;

external (stdcall) RealChildWindowFromPoint(
    argument0 : HWND,
    argument1 : POINT) : HWND;

external (stdcall) RealGetWindowClassA(
    argument0 : HWND,
    argument1 : LPSTR,
    argument2 : UInt) : UInt;

external (stdcall) RealGetWindowClassW(
    argument0 : HWND,
    argument1 : LPWSTR,
    argument2 : UInt) : UInt;

external (stdcall) RedrawWindow(
    argument0 : HWND,
    argument1 : LPCRECT,
    argument2 : HRGN,
    argument3 : UInt) : Int;

external (stdcall) RegisterClassA(
    argument0 : Pointer[WNDCLASSA]) : UShort;

external (stdcall) RegisterClassW(
    argument0 : Pointer[WNDCLASSW]) : UShort;

external (stdcall) RegisterClassExA(
    argument0 : Pointer[WNDCLASSEXA]) : UShort;

external (stdcall) RegisterClassExW(
    argument0 : Pointer[WNDCLASSEXW]) : UShort;

external (stdcall) RegisterClipboardFormatA(
    argument0 : LPCSTR) : UInt;

external (stdcall) RegisterClipboardFormatW(
    argument0 : LPCWSTR) : UInt;

external (stdcall) RegisterHotKey(
    argument0 : HWND,
    argument1 : Int,
    argument2 : UInt,
    argument3 : UInt) : Int;

external (stdcall) RegisterWindowMessageA(
    argument0 : LPCSTR) : UInt;

external (stdcall) RegisterWindowMessageW(
    argument0 : LPCWSTR) : UInt;

external (stdcall) ReleaseCapture() : Int;

external (stdcall) ReleaseDC(
    argument0 : HWND,
    argument1 : HDC) : Int;

external (stdcall) RemoveMenu(
    argument0 : HMENU,
    argument1 : UInt,
    argument2 : UInt) : Int;

external (stdcall) RemovePropA(
    argument0 : HWND,
    argument1 : LPCSTR) : HANDLE;

external (stdcall) RemovePropW(
    argument0 : HWND,
    argument1 : LPCWSTR) : HANDLE;

external (stdcall) ReplyMessage(
    argument0 : CLong) : Int;

external (stdcall) ScreenToClient(
    argument0 : HWND,
    argument1 : LPPOINT) : Int;

external (stdcall) ScrollDC(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : LPCRECT,
    argument4 : LPCRECT,
    argument5 : HRGN,
    argument6 : LPRECT) : Int;

external (stdcall) ScrollWindow(
    argument0 : HWND,
    argument1 : Int,
    argument2 : Int,
    argument3 : LPCRECT,
    argument4 : LPCRECT) : Int;

external (stdcall) ScrollWindowEx(
    argument0 : HWND,
    argument1 : Int,
    argument2 : Int,
    argument3 : LPCRECT,
    argument4 : LPCRECT,
    argument5 : HRGN,
    argument6 : LPRECT,
    argument7 : UInt) : Int;

external (stdcall) SendDlgItemMessageA(
    argument0 : HWND,
    argument1 : Int,
    argument2 : UInt,
    argument3 : UInt,
    argument4 : CLong) : CLong;

external (stdcall) SendDlgItemMessageW(
    argument0 : HWND,
    argument1 : Int,
    argument2 : UInt,
    argument3 : UInt,
    argument4 : CLong) : CLong;

external (stdcall) SendMessageA(
    argument0 : HWND,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : CLong) : CLong;

external (stdcall) SendMessageCallbackA(
    argument0 : HWND,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : CLong,
    argument4 : SENDASYNCPROC,
    argument5 : CULong) : Int;

external (stdcall) SendMessageCallbackW(
    argument0 : HWND,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : CLong,
    argument4 : SENDASYNCPROC,
    argument5 : CULong) : Int;

external (stdcall) SendMessageTimeoutA(
    argument0 : HWND,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : CLong,
    argument4 : UInt,
    argument5 : UInt,
    argument6 : PDWORD_PTR) : CLong;

external (stdcall) SendMessageTimeoutW(
    argument0 : HWND,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : CLong,
    argument4 : UInt,
    argument5 : UInt,
    argument6 : PDWORD_PTR) : CLong;

external (stdcall) SendMessageW(
    argument0 : HWND,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : CLong) : CLong;

external (stdcall) SendNotifyMessageA(
    argument0 : HWND,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : CLong) : Int;

external (stdcall) SendNotifyMessageW(
    argument0 : HWND,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : CLong) : Int;

external (stdcall) SetActiveWindow(
    argument0 : HWND) : HWND;

external (stdcall) SetCapture(
    hWnd : HWND) : HWND;

external (stdcall) SetCaretBlinkTime(
    argument0 : UInt) : Int;

external (stdcall) SetCaretPos(
    argument0 : Int,
    argument1 : Int) : Int;

external (stdcall) SetClassLongA(
    argument0 : HWND,
    argument1 : Int,
    argument2 : CLong) : CULong;

external (stdcall) SetClassLongW(
    argument0 : HWND,
    argument1 : Int,
    argument2 : CLong) : CULong;

external (stdcall) SetClassWord(
    argument0 : HWND,
    argument1 : Int,
    argument2 : UShort) : UShort;

external (stdcall) SetClipboardData(
    argument0 : UInt,
    argument1 : HANDLE) : HANDLE;

external (stdcall) SetClipboardViewer(
    argument0 : HWND) : HWND;

external (stdcall) SetCursor(
    argument0 : HCURSOR) : HCURSOR;

external (stdcall) SetCursorPos(
    argument0 : Int,
    argument1 : Int) : Int;

external (stdcall) SetDebugErrorLevel(
    argument0 : CULong) : Void;

external (stdcall) SetDlgItemInt(
    argument0 : HWND,
    argument1 : Int,
    argument2 : UInt,
    argument3 : Int) : Int;

external (stdcall) SetDlgItemTextA(
    argument0 : HWND,
    argument1 : Int,
    argument2 : LPCSTR) : Int;

external (stdcall) SetDlgItemTextW(
    argument0 : HWND,
    argument1 : Int,
    argument2 : LPCWSTR) : Int;

external (stdcall) SetDoubleClickTime(
    argument0 : UInt) : Int;

external (stdcall) SetFocus(
    argument0 : HWND) : HWND;

external (stdcall) SetForegroundWindow(
    argument0 : HWND) : Int;

external (stdcall) SetKeyboardState(
    argument0 : PBYTE) : Int;

external (stdcall) SetMenu(
    argument0 : HWND,
    argument1 : HMENU) : Int;

external (stdcall) SetMenuContextHelpId(
    argument0 : HMENU,
    argument1 : CULong) : Int;

external (stdcall) SetMenuDefaultItem(
    argument0 : HMENU,
    argument1 : UInt,
    argument2 : UInt) : Int;

external (stdcall) SetMenuInfo(
    argument0 : HMENU,
    argument1 : LPCMENUINFO) : Int;

external (stdcall) SetMenuItemBitmaps(
    argument0 : HMENU,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : HBITMAP,
    argument4 : HBITMAP) : Int;

external (stdcall) SetMenuItemInfoA(
    argument0 : HMENU,
    argument1 : UInt,
    argument2 : Int,
    argument3 : LPCMENUITEMINFOA) : Int;

external (stdcall) SetMenuItemInfoW(
    argument0 : HMENU,
    argument1 : UInt,
    argument2 : Int,
    argument3 : LPCMENUITEMINFOW) : Int;

external (stdcall) SetMessageExtraInfo(
    argument0 : CLong) : CLong;

external (stdcall) SetMessageQueue(
    argument0 : Int) : Int;

external (stdcall) SetParent(
    argument0 : HWND,
    argument1 : HWND) : HWND;

external (stdcall) SetProcessWindowStation(
    argument0 : HWINSTA) : Int;

external (stdcall) SetPropA(
    argument0 : HWND,
    argument1 : LPCSTR,
    argument2 : HANDLE) : Int;

external (stdcall) SetPropW(
    argument0 : HWND,
    argument1 : LPCWSTR,
    argument2 : HANDLE) : Int;

external (stdcall) SetRect(
    argument0 : LPRECT,
    argument1 : Int,
    argument2 : Int,
    argument3 : Int,
    argument4 : Int) : Int;

external (stdcall) SetRectEmpty(
    argument0 : LPRECT) : Int;

external (stdcall) SetScrollInfo(
    argument0 : HWND,
    argument1 : Int,
    argument2 : LPCSCROLLINFO,
    argument3 : Int) : Int;

external (stdcall) SetScrollPos(
    argument0 : HWND,
    argument1 : Int,
    argument2 : Int,
    argument3 : Int) : Int;

external (stdcall) SetScrollRange(
    argument0 : HWND,
    argument1 : Int,
    argument2 : Int,
    argument3 : Int,
    argument4 : Int) : Int;

external (stdcall) SetSysColors(
    argument0 : Int,
    argument1 : Pointer[Int],
    argument2 : Pointer[CULong]) : Int;

external (stdcall) SetSystemCursor(
    argument0 : HCURSOR,
    argument1 : CULong) : Int;

external (stdcall) SetThreadDesktop(
    argument0 : HDESK) : Int;

external (stdcall) SetTimer(
    argument0 : HWND,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : TIMERPROC) : UInt;

external (stdcall) SetUserObjectInformationA(
    argument0 : HANDLE,
    argument1 : Int,
    argument2 : PVOID,
    argument3 : CULong) : Int;

external (stdcall) SetUserObjectInformationW(
    argument0 : HANDLE,
    argument1 : Int,
    argument2 : PVOID,
    argument3 : CULong) : Int;

external (stdcall) SetUserObjectSecurity(
    argument0 : HANDLE,
    argument1 : PSECURITY_INFORMATION,
    argument2 : PSECURITY_DESCRIPTOR) : Int;

external (stdcall) SetWindowContextHelpId(
    argument0 : HWND,
    argument1 : CULong) : Int;

external (stdcall) SetWindowLongA(
    argument0 : HWND,
    argument1 : Int,
    argument2 : CLong) : CLong;

external (stdcall) SetWindowLongW(
    argument0 : HWND,
    argument1 : Int,
    argument2 : CLong) : CLong;

external (stdcall) SetWindowPlacement(
    hWnd : HWND,
    argument1 : Pointer[WINDOWPLACEMENT]) : Int;

external (stdcall) SetWindowPos(
    argument0 : HWND,
    argument1 : HWND,
    argument2 : Int,
    argument3 : Int,
    argument4 : Int,
    argument5 : Int,
    argument6 : UInt) : Int;

external (stdcall) SetWindowRgn(
    argument0 : HWND,
    argument1 : HRGN,
    argument2 : Int) : Int;

external (stdcall) SetWindowsHookA(
    argument0 : Int,
    argument1 : HOOKPROC) : HHOOK;

external (stdcall) SetWindowsHookW(
    argument0 : Int,
    argument1 : HOOKPROC) : HHOOK;

external (stdcall) SetWindowsHookExA(
    argument0 : Int,
    argument1 : HOOKPROC,
    argument2 : HINSTANCE,
    argument3 : CULong) : HHOOK;

external (stdcall) SetWindowsHookExW(
    argument0 : Int,
    argument1 : HOOKPROC,
    argument2 : HINSTANCE,
    argument3 : CULong) : HHOOK;

external (stdcall) SetWindowTextA(
    argument0 : HWND,
    argument1 : LPCSTR) : Int;

external (stdcall) SetWindowTextW(
    argument0 : HWND,
    argument1 : LPCWSTR) : Int;

external (stdcall) SetWindowWord(
    argument0 : HWND,
    argument1 : Int,
    argument2 : UShort) : UShort;

external (stdcall) ShowCaret(
    argument0 : HWND) : Int;

external (stdcall) ShowCursor(
    argument0 : Int) : Int;

external (stdcall) ShowOwnedPopups(
    argument0 : HWND,
    argument1 : Int) : Int;

external (stdcall) ShowScrollBar(
    argument0 : HWND,
    argument1 : Int,
    argument2 : Int) : Int;

external (stdcall) ShowWindow(
    argument0 : HWND,
    argument1 : Int) : Int;

external (stdcall) ShowWindowAsync(
    argument0 : HWND,
    argument1 : Int) : Int;

external (stdcall) SubtractRect(
    argument0 : LPRECT,
    argument1 : LPCRECT,
    argument2 : LPCRECT) : Int;

external (stdcall) SwapMouseButton(
    argument0 : Int) : Int;

external (stdcall) SwitchDesktop(
    argument0 : HDESK) : Int;

external (stdcall) SystemParametersInfoA(
    argument0 : UInt,
    argument1 : UInt,
    argument2 : PVOID,
    argument3 : UInt) : Int;

external (stdcall) SystemParametersInfoW(
    argument0 : UInt,
    argument1 : UInt,
    argument2 : PVOID,
    argument3 : UInt) : Int;

external (stdcall) TabbedTextOutA(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : LPCSTR,
    argument4 : Int,
    argument5 : Int,
    argument6 : LPINT,
    argument7 : Int) : CLong;

external (stdcall) TabbedTextOutW(
    argument0 : HDC,
    argument1 : Int,
    argument2 : Int,
    argument3 : LPCWSTR,
    argument4 : Int,
    argument5 : Int,
    argument6 : LPINT,
    argument7 : Int) : CLong;

external (stdcall) TileWindows(
    argument0 : HWND,
    argument1 : UInt,
    argument2 : LPCRECT,
    argument3 : UInt,
    argument4 : Pointer[HWND]) : UShort;

external (stdcall) ToAscii(
    argument0 : UInt,
    argument1 : UInt,
    argument2 : PBYTE,
    argument3 : LPWORD,
    argument4 : UInt) : Int;

external (stdcall) ToAsciiEx(
    argument0 : UInt,
    argument1 : UInt,
    argument2 : PBYTE,
    argument3 : LPWORD,
    argument4 : UInt,
    argument5 : HKL) : Int;

external (stdcall) ToUnicode(
    argument0 : UInt,
    argument1 : UInt,
    argument2 : PBYTE,
    argument3 : LPWSTR,
    argument4 : Int,
    argument5 : UInt) : Int;

external (stdcall) ToUnicodeEx(
    argument0 : UInt,
    argument1 : UInt,
    argument2 : PBYTE,
    argument3 : LPWSTR,
    argument4 : Int,
    argument5 : UInt,
    argument6 : HKL) : Int;

external (stdcall) TrackMouseEvent(
    argument0 : LPTRACKMOUSEEVENT) : Int;

external (stdcall) TrackPopupMenu(
    argument0 : HMENU,
    argument1 : UInt,
    argument2 : Int,
    argument3 : Int,
    argument4 : Int,
    argument5 : HWND,
    argument6 : LPCRECT) : Int;

external (stdcall) TrackPopupMenuEx(
    argument0 : HMENU,
    argument1 : UInt,
    argument2 : Int,
    argument3 : Int,
    argument4 : HWND,
    argument5 : LPTPMPARAMS) : Int;

external (stdcall) TranslateAcceleratorA(
    argument0 : HWND,
    argument1 : HACCEL,
    argument2 : LPMSG) : Int;

external (stdcall) TranslateAcceleratorW(
    argument0 : HWND,
    argument1 : HACCEL,
    argument2 : LPMSG) : Int;

external (stdcall) TranslateMDISysAccel(
    argument0 : HWND,
    argument1 : LPMSG) : Int;

external (stdcall) TranslateMessage(
    argument0 : Pointer[MSG]) : Int;

external (stdcall) UnhookWindowsHook(
    argument0 : Int,
    argument1 : HOOKPROC) : Int;

external (stdcall) UnhookWindowsHookEx(
    argument0 : HHOOK) : Int;

external (stdcall) UnionRect(
    argument0 : LPRECT,
    argument1 : LPCRECT,
    argument2 : LPCRECT) : Int;

external (stdcall) UnloadKeyboardLayout(
    argument0 : HKL) : Int;

external (stdcall) UnregisterClassA(
    argument0 : LPCSTR,
    argument1 : HINSTANCE) : Int;

external (stdcall) UnregisterClassW(
    argument0 : LPCWSTR,
    argument1 : HINSTANCE) : Int;

external (stdcall) UnregisterHotKey(
    argument0 : HWND,
    argument1 : Int) : Int;

external (stdcall) UpdateWindow(
    argument0 : HWND) : Int;

external (stdcall) ValidateRect(
    argument0 : HWND,
    argument1 : LPCRECT) : Int;

external (stdcall) ValidateRgn(
    argument0 : HWND,
    argument1 : HRGN) : Int;

external (stdcall) VkKeyScanA(
    argument0 : CChar) : Short;

external (stdcall) VkKeyScanExA(
    argument0 : CChar,
    argument1 : HKL) : Short;

external (stdcall) VkKeyScanExW(
    argument0 : UShort,
    argument1 : HKL) : Short;

external (stdcall) VkKeyScanW(
    argument0 : UShort) : Short;

external (stdcall) WaitForInputIdle(
    argument0 : HANDLE,
    argument1 : CULong) : CULong;

external (stdcall) WaitMessage() : Int;

external (stdcall) WindowFromDC(
    hDC : HDC) : HWND;

external (stdcall) WindowFromPoint(
    argument0 : POINT) : HWND;

external (stdcall) WinExec(
    argument0 : LPCSTR,
    argument1 : UInt) : UInt;

external (stdcall) WinHelpA(
    argument0 : HWND,
    argument1 : LPCSTR,
    argument2 : UInt,
    argument3 : CULong) : Int;

external (stdcall) WinHelpW(
    argument0 : HWND,
    argument1 : LPCWSTR,
    argument2 : UInt,
    argument3 : CULong) : Int;

external wsprintfA(
    argument0 : LPSTR,
    argument1 : LPCSTR,
    ...) : Int;

external wsprintfW(
    argument0 : LPWSTR,
    argument1 : LPCWSTR,
    ...) : Int;

external (stdcall) wvsprintfA(
    argument0 : LPSTR,
    argument1 : LPCSTR,
    arglist : Int) : Int;

external (stdcall) wvsprintfW(
    argument0 : LPWSTR,
    argument1 : LPCWSTR,
    arglist : Int) : Int;

static WNDCLASS = WNDCLASSA;

static LPWNDCLASS = Pointer[WNDCLASSA];

static PWNDCLASS = Pointer[WNDCLASSA];

static WNDCLASSEX = WNDCLASSEXA;

static LPWNDCLASSEX = Pointer[WNDCLASSEXA];

static PWNDCLASSEX = Pointer[WNDCLASSEXA];

static MENUITEMINFO = MENUITEMINFOA;

static LPMENUITEMINFO = Pointer[MENUITEMINFOA];

static LPCMENUITEMINFO = LPCMENUITEMINFOA;

static MSGBOXPARAMS = MSGBOXPARAMSA;

static PMSGBOXPARAMS = Pointer[MSGBOXPARAMSA];

static LPMSGBOXPARAMS = Pointer[MSGBOXPARAMSA];

static HIGHCONTRAST = HIGHCONTRASTA;

static LPHIGHCONTRAST = Pointer[HIGHCONTRASTA];

static SERIALKEYS = SERIALKEYSA;

static LPSERIALKEYS = Pointer[SERIALKEYSA];

static SOUNDSENTRY = SOUNDSENTRYA;

static LPSOUNDSENTRY = Pointer[SOUNDSENTRYA];

static CREATESTRUCT = CREATESTRUCTA;

static LPCREATESTRUCT = Pointer[CREATESTRUCTA];

static CBT_CREATEWND = CBT_CREATEWNDA;

static LPCBT_CREATEWND = Pointer[CBT_CREATEWNDA];

static MDICREATESTRUCT = MDICREATESTRUCTA;

static LPMDICREATESTRUCT = Pointer[MDICREATESTRUCTA];

static MULTIKEYHELP = MULTIKEYHELPA;

static PMULTIKEYHELP = Pointer[MULTIKEYHELPA];

static LPMULTIKEYHELP = Pointer[MULTIKEYHELPA];

static MONITORINFOEX = MONITORINFOEXA;

static LPMONITORINFOEX = Pointer[MONITORINFOEXA];

static ICONMETRICS = ICONMETRICSA;

static LPICONMETRICS = Pointer[ICONMETRICSA];

static NONCLIENTMETRICS = NONCLIENTMETRICSA;

static LPNONCLIENTMETRICS = Pointer[NONCLIENTMETRICSA];

static LCTYPE = CULong;

static CALTYPE = CULong;

static CALID = CULong;

static LGRPID = CULong;

static GEOID = CULong;

static GEOTYPE = CULong;

static GEOCLASS = CULong;

static CALINFO_ENUMPROCA = StdCallCodePointer[Pointer[CChar],Int];

static CALINFO_ENUMPROCW = StdCallCodePointer[Pointer[UShort],Int];

static CALINFO_ENUMPROCEXA = StdCallCodePointer[Pointer[CChar],CULong,Int];

static CALINFO_ENUMPROCEXW = StdCallCodePointer[Pointer[UShort],CULong,Int];

static LANGUAGEGROUP_ENUMPROCA = StdCallCodePointer[CULong,Pointer[CChar],Pointer[CChar],CULong,CLong,Int];

static LANGUAGEGROUP_ENUMPROCW = StdCallCodePointer[CULong,Pointer[UShort],Pointer[UShort],CULong,CLong,Int];

static LANGGROUPLOCALE_ENUMPROCA = StdCallCodePointer[CULong,CULong,Pointer[CChar],CLong,Int];

static LANGGROUPLOCALE_ENUMPROCW = StdCallCodePointer[CULong,CULong,Pointer[UShort],CLong,Int];

static UILANGUAGE_ENUMPROCW = StdCallCodePointer[Pointer[UShort],CLong,Int];

static UILANGUAGE_ENUMPROCA = StdCallCodePointer[Pointer[CChar],CLong,Int];

static LOCALE_ENUMPROCA = StdCallCodePointer[Pointer[CChar],Int];

static LOCALE_ENUMPROCW = StdCallCodePointer[Pointer[UShort],Int];

static CODEPAGE_ENUMPROCA = StdCallCodePointer[Pointer[CChar],Int];

static CODEPAGE_ENUMPROCW = StdCallCodePointer[Pointer[UShort],Int];

static DATEFMT_ENUMPROCA = StdCallCodePointer[Pointer[CChar],Int];

static DATEFMT_ENUMPROCW = StdCallCodePointer[Pointer[UShort],Int];

static DATEFMT_ENUMPROCEXA = StdCallCodePointer[Pointer[CChar],CULong,Int];

static DATEFMT_ENUMPROCEXW = StdCallCodePointer[Pointer[UShort],CULong,Int];

static TIMEFMT_ENUMPROCA = StdCallCodePointer[Pointer[CChar],Int];

static TIMEFMT_ENUMPROCW = StdCallCodePointer[Pointer[UShort],Int];

static GEO_ENUMPROC = StdCallCodePointer[CULong,Int];

static COMPARE_STRING = 1;

static NLS_FUNCTION = Int;

static GEOCLASS_NATION = 16;
static GEOCLASS_REGION = 14;

static GEO_NATION = 1;
static GEO_LATITUDE = 2;
static GEO_LONGITUDE = 3;
static GEO_ISO2 = 4;
static GEO_ISO3 = 5;
static GEO_RFC1766 = 6;
static GEO_LCID = 7;
static GEO_FRIENDLYNAME = 8;
static GEO_OFFICIALNAME = 9;
static GEO_TIMEZONES = 10;
static GEO_OFFICIALLANGUAGES = 10;

record _cpinfo {
    MaxCharSize : UInt;
    DefaultChar : Array[CUChar,2];
    LeadByte : Array[CUChar,12];
}

static CPINFO = _cpinfo;

static LPCPINFO = Pointer[_cpinfo];

record _cpinfoexA {
    MaxCharSize : UInt;
    DefaultChar : Array[CUChar,2];
    LeadByte : Array[CUChar,12];
    UnicodeDefaultChar : UShort;
    CodePage : UInt;
    CodePageName : Array[CChar,260];
}

static CPINFOEXA = _cpinfoexA;

static LPCPINFOEXA = Pointer[_cpinfoexA];

record _cpinfoexW {
    MaxCharSize : UInt;
    DefaultChar : Array[CUChar,2];
    LeadByte : Array[CUChar,12];
    UnicodeDefaultChar : UShort;
    CodePage : UInt;
    CodePageName : Array[UShort,260];
}

static CPINFOEXW = _cpinfoexW;

static LPCPINFOEXW = Pointer[_cpinfoexW];

record _currencyfmtA {
    NumDigits : UInt;
    LeadingZero : UInt;
    Grouping : UInt;
    lpDecimalSep : LPSTR;
    lpThousandSep : LPSTR;
    NegativeOrder : UInt;
    PositiveOrder : UInt;
    lpCurrencySymbol : LPSTR;
}

static CURRENCYFMTA = _currencyfmtA;

static LPCURRENCYFMTA = Pointer[_currencyfmtA];

record _currencyfmtW {
    NumDigits : UInt;
    LeadingZero : UInt;
    Grouping : UInt;
    lpDecimalSep : LPWSTR;
    lpThousandSep : LPWSTR;
    NegativeOrder : UInt;
    PositiveOrder : UInt;
    lpCurrencySymbol : LPWSTR;
}

static CURRENCYFMTW = _currencyfmtW;

static LPCURRENCYFMTW = Pointer[_currencyfmtW];

record nlsversioninfo {
    dwNLSVersionInfoSize : CULong;
    dwNLSVersion : CULong;
    dwDefinedVersion : CULong;
}

static NLSVERSIONINFO = nlsversioninfo;

static LPNLSVERSIONINFO = Pointer[nlsversioninfo];

record _numberfmtA {
    NumDigits : UInt;
    LeadingZero : UInt;
    Grouping : UInt;
    lpDecimalSep : LPSTR;
    lpThousandSep : LPSTR;
    NegativeOrder : UInt;
}

static NUMBERFMTA = _numberfmtA;

static LPNUMBERFMTA = Pointer[_numberfmtA];

record _numberfmtW {
    NumDigits : UInt;
    LeadingZero : UInt;
    Grouping : UInt;
    lpDecimalSep : LPWSTR;
    lpThousandSep : LPWSTR;
    NegativeOrder : UInt;
}

static NUMBERFMTW = _numberfmtW;

static LPNUMBERFMTW = Pointer[_numberfmtW];

external (stdcall) CompareStringA(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : LPCSTR,
    argument3 : Int,
    argument4 : LPCSTR,
    argument5 : Int) : Int;

external (stdcall) CompareStringW(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : LPCWSTR,
    argument3 : Int,
    argument4 : LPCWSTR,
    argument5 : Int) : Int;

external (stdcall) ConvertDefaultLocale(
    argument0 : CULong) : CULong;

external (stdcall) EnumCalendarInfoA(
    argument0 : CALINFO_ENUMPROCA,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : CULong) : Int;

external (stdcall) EnumCalendarInfoW(
    argument0 : CALINFO_ENUMPROCW,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : CULong) : Int;

external (stdcall) EnumDateFormatsA(
    argument0 : DATEFMT_ENUMPROCA,
    argument1 : CULong,
    argument2 : CULong) : Int;

external (stdcall) EnumDateFormatsW(
    argument0 : DATEFMT_ENUMPROCW,
    argument1 : CULong,
    argument2 : CULong) : Int;

external (stdcall) EnumSystemCodePagesA(
    argument0 : CODEPAGE_ENUMPROCA,
    argument1 : CULong) : Int;

external (stdcall) EnumSystemCodePagesW(
    argument0 : CODEPAGE_ENUMPROCW,
    argument1 : CULong) : Int;

external (stdcall) EnumSystemGeoID(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : GEO_ENUMPROC) : Int;

external (stdcall) EnumSystemLocalesA(
    argument0 : LOCALE_ENUMPROCA,
    argument1 : CULong) : Int;

external (stdcall) EnumSystemLocalesW(
    argument0 : LOCALE_ENUMPROCW,
    argument1 : CULong) : Int;

external (stdcall) EnumTimeFormatsA(
    argument0 : TIMEFMT_ENUMPROCA,
    argument1 : CULong,
    argument2 : CULong) : Int;

external (stdcall) EnumTimeFormatsW(
    argument0 : TIMEFMT_ENUMPROCW,
    argument1 : CULong,
    argument2 : CULong) : Int;

external (stdcall) FoldStringA(
    argument0 : CULong,
    argument1 : LPCSTR,
    argument2 : Int,
    argument3 : LPSTR,
    argument4 : Int) : Int;

external (stdcall) FoldStringW(
    argument0 : CULong,
    argument1 : LPCWSTR,
    argument2 : Int,
    argument3 : LPWSTR,
    argument4 : Int) : Int;

external (stdcall) GetACP() : UInt;

external (stdcall) GetCalendarInfoA(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : LPSTR,
    argument4 : Int,
    argument5 : LPDWORD) : Int;

external (stdcall) GetCalendarInfoW(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : LPWSTR,
    argument4 : Int,
    argument5 : LPDWORD) : Int;

external (stdcall) GetCPInfo(
    argument0 : UInt,
    argument1 : LPCPINFO) : Int;

external (stdcall) GetCPInfoExA(
    argument0 : UInt,
    argument1 : CULong,
    argument2 : LPCPINFOEXA) : Int;

external (stdcall) GetCPInfoExW(
    argument0 : UInt,
    argument1 : CULong,
    argument2 : LPCPINFOEXW) : Int;

external (stdcall) GetCurrencyFormatA(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : LPCSTR,
    argument3 : Pointer[CURRENCYFMTA],
    argument4 : LPSTR,
    argument5 : Int) : Int;

external (stdcall) GetCurrencyFormatW(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : LPCWSTR,
    argument3 : Pointer[CURRENCYFMTW],
    argument4 : LPWSTR,
    argument5 : Int) : Int;

external (stdcall) GetDateFormatA(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : Pointer[SYSTEMTIME],
    argument3 : LPCSTR,
    argument4 : LPSTR,
    argument5 : Int) : Int;

external (stdcall) GetDateFormatW(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : Pointer[SYSTEMTIME],
    argument3 : LPCWSTR,
    argument4 : LPWSTR,
    argument5 : Int) : Int;

external (stdcall) GetGeoInfoA(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : LPSTR,
    argument3 : Int,
    argument4 : UShort) : Int;

external (stdcall) GetGeoInfoW(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : LPWSTR,
    argument3 : Int,
    argument4 : UShort) : Int;

external (stdcall) GetLocaleInfoA(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : LPSTR,
    argument3 : Int) : Int;

external (stdcall) GetLocaleInfoW(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : LPWSTR,
    argument3 : Int) : Int;

external (stdcall) GetNLSVersion(
    argument0 : NLS_FUNCTION,
    argument1 : CULong,
    argument2 : LPNLSVERSIONINFO) : Int;

external (stdcall) GetNumberFormatA(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : LPCSTR,
    argument3 : Pointer[NUMBERFMTA],
    argument4 : LPSTR,
    argument5 : Int) : Int;

external (stdcall) GetNumberFormatW(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : LPCWSTR,
    argument3 : Pointer[NUMBERFMTW],
    argument4 : LPWSTR,
    argument5 : Int) : Int;

external (stdcall) GetOEMCP() : UInt;

external (stdcall) GetStringTypeA(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : LPCSTR,
    argument3 : Int,
    argument4 : LPWORD) : Int;

external (stdcall) GetStringTypeW(
    argument0 : CULong,
    argument1 : LPCWSTR,
    argument2 : Int,
    argument3 : LPWORD) : Int;

external (stdcall) GetStringTypeExA(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : LPCSTR,
    argument3 : Int,
    argument4 : LPWORD) : Int;

external (stdcall) GetStringTypeExW(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : LPCWSTR,
    argument3 : Int,
    argument4 : LPWORD) : Int;

external (stdcall) GetSystemDefaultLangID() : UShort;

external (stdcall) GetSystemDefaultLCID() : CULong;

external (stdcall) GetThreadLocale() : CULong;

external (stdcall) GetTimeFormatA(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : Pointer[SYSTEMTIME],
    argument3 : LPCSTR,
    argument4 : LPSTR,
    argument5 : Int) : Int;

external (stdcall) GetTimeFormatW(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : Pointer[SYSTEMTIME],
    argument3 : LPCWSTR,
    argument4 : LPWSTR,
    argument5 : Int) : Int;

external (stdcall) GetUserDefaultLangID() : UShort;

external (stdcall) GetUserDefaultLCID() : CULong;

external (stdcall) GetUserGeoID(
    argument0 : CULong) : CULong;

external (stdcall) IsDBCSLeadByte(
    argument0 : CUChar) : Int;

external (stdcall) IsDBCSLeadByteEx(
    argument0 : UInt,
    argument1 : CUChar) : Int;

external (stdcall) IsNLSDefinedString(
    argument0 : NLS_FUNCTION,
    argument1 : CULong,
    argument2 : LPNLSVERSIONINFO,
    argument3 : LPCWSTR,
    argument4 : Int) : Int;

external (stdcall) IsValidCodePage(
    argument0 : UInt) : Int;

external (stdcall) IsValidLocale(
    argument0 : CULong,
    argument1 : CULong) : Int;

external (stdcall) LCMapStringA(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : LPCSTR,
    argument3 : Int,
    argument4 : LPSTR,
    argument5 : Int) : Int;

external (stdcall) LCMapStringW(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : LPCWSTR,
    argument3 : Int,
    argument4 : LPWSTR,
    argument5 : Int) : Int;

external (stdcall) MultiByteToWideChar(
    argument0 : UInt,
    argument1 : CULong,
    argument2 : LPCSTR,
    argument3 : Int,
    argument4 : LPWSTR,
    argument5 : Int) : Int;

external (stdcall) SetCalendarInfoA(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : LPCSTR) : Int;

external (stdcall) SetCalendarInfoW(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : LPCWSTR) : Int;

external (stdcall) SetLocaleInfoA(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : LPCSTR) : Int;

external (stdcall) SetLocaleInfoW(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : LPCWSTR) : Int;

external (stdcall) SetThreadLocale(
    argument0 : CULong) : Int;

external (stdcall) SetUserGeoID(
    argument0 : CULong) : Int;

external (stdcall) WideCharToMultiByte(
    argument0 : UInt,
    argument1 : CULong,
    argument2 : LPCWSTR,
    argument3 : Int,
    argument4 : LPSTR,
    argument5 : Int,
    argument6 : LPCSTR,
    argument7 : LPBOOL) : Int;

static CPINFOEX = CPINFOEXA;

static LPCPINFOEX = LPCPINFOEXA;

static CURRENCYFMT = CURRENCYFMTA;

static LPCURRENCYFMT = LPCURRENCYFMTA;

static NUMBERFMT = NUMBERFMTA;

static LPNUMBERFMT = LPNUMBERFMTA;

record tagVS_FIXEDFILEINFO {
    dwSignature : CULong;
    dwStrucVersion : CULong;
    dwFileVersionMS : CULong;
    dwFileVersionLS : CULong;
    dwProductVersionMS : CULong;
    dwProductVersionLS : CULong;
    dwFileFlagsMask : CULong;
    dwFileFlags : CULong;
    dwFileOS : CULong;
    dwFileType : CULong;
    dwFileSubtype : CULong;
    dwFileDateMS : CULong;
    dwFileDateLS : CULong;
}

static VS_FIXEDFILEINFO = tagVS_FIXEDFILEINFO;

external (stdcall) VerFindFileA(
    argument0 : CULong,
    argument1 : LPSTR,
    argument2 : LPSTR,
    argument3 : LPSTR,
    argument4 : LPSTR,
    argument5 : PUINT,
    argument6 : LPSTR,
    argument7 : PUINT) : CULong;

external (stdcall) VerFindFileW(
    argument0 : CULong,
    argument1 : LPWSTR,
    argument2 : LPWSTR,
    argument3 : LPWSTR,
    argument4 : LPWSTR,
    argument5 : PUINT,
    argument6 : LPWSTR,
    argument7 : PUINT) : CULong;

external (stdcall) VerInstallFileA(
    argument0 : CULong,
    argument1 : LPSTR,
    argument2 : LPSTR,
    argument3 : LPSTR,
    argument4 : LPSTR,
    argument5 : LPSTR,
    argument6 : LPSTR,
    argument7 : PUINT) : CULong;

external (stdcall) VerInstallFileW(
    argument0 : CULong,
    argument1 : LPWSTR,
    argument2 : LPWSTR,
    argument3 : LPWSTR,
    argument4 : LPWSTR,
    argument5 : LPWSTR,
    argument6 : LPWSTR,
    argument7 : PUINT) : CULong;

external (stdcall) GetFileVersionInfoSizeA(
    argument0 : LPCSTR,
    argument1 : PDWORD) : CULong;

external (stdcall) GetFileVersionInfoSizeW(
    argument0 : LPCWSTR,
    argument1 : PDWORD) : CULong;

external (stdcall) GetFileVersionInfoA(
    argument0 : LPCSTR,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : PVOID) : Int;

external (stdcall) GetFileVersionInfoW(
    argument0 : LPCWSTR,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : PVOID) : Int;

external (stdcall) VerLanguageNameA(
    argument0 : CULong,
    argument1 : LPSTR,
    argument2 : CULong) : CULong;

external (stdcall) VerLanguageNameW(
    argument0 : CULong,
    argument1 : LPWSTR,
    argument2 : CULong) : CULong;

external (stdcall) VerQueryValueA(
    argument0 : LPVOID,
    argument1 : LPCSTR,
    argument2 : Pointer[LPVOID],
    argument3 : PUINT) : Int;

external (stdcall) VerQueryValueW(
    argument0 : LPVOID,
    argument1 : LPCWSTR,
    argument2 : Pointer[LPVOID],
    argument3 : PUINT) : Int;

record _NETRESOURCEA {
    dwScope : CULong;
    dwType : CULong;
    dwDisplayType : CULong;
    dwUsage : CULong;
    lpLocalName : LPSTR;
    lpRemoteName : LPSTR;
    lpComment : LPSTR;
    lpProvider : LPSTR;
}

static NETRESOURCEA = _NETRESOURCEA;

static LPNETRESOURCEA = Pointer[_NETRESOURCEA];

record _NETRESOURCEW {
    dwScope : CULong;
    dwType : CULong;
    dwDisplayType : CULong;
    dwUsage : CULong;
    lpLocalName : LPWSTR;
    lpRemoteName : LPWSTR;
    lpComment : LPWSTR;
    lpProvider : LPWSTR;
}

static NETRESOURCEW = _NETRESOURCEW;

static LPNETRESOURCEW = Pointer[_NETRESOURCEW];

record _CONNECTDLGSTRUCTA {
    cbStructure : CULong;
    hwndOwner : HWND;
    lpConnRes : LPNETRESOURCEA;
    dwFlags : CULong;
    dwDevNum : CULong;
}

static CONNECTDLGSTRUCTA = _CONNECTDLGSTRUCTA;

static LPCONNECTDLGSTRUCTA = Pointer[_CONNECTDLGSTRUCTA];

record _CONNECTDLGSTRUCTW {
    cbStructure : CULong;
    hwndOwner : HWND;
    lpConnRes : LPNETRESOURCEW;
    dwFlags : CULong;
    dwDevNum : CULong;
}

static CONNECTDLGSTRUCTW = _CONNECTDLGSTRUCTW;

static LPCONNECTDLGSTRUCTW = Pointer[_CONNECTDLGSTRUCTW];

record _DISCDLGSTRUCTA {
    cbStructure : CULong;
    hwndOwner : HWND;
    lpLocalName : LPSTR;
    lpRemoteName : LPSTR;
    dwFlags : CULong;
}

static DISCDLGSTRUCTA = _DISCDLGSTRUCTA;

static LPDISCDLGSTRUCTA = Pointer[_DISCDLGSTRUCTA];

record _DISCDLGSTRUCTW {
    cbStructure : CULong;
    hwndOwner : HWND;
    lpLocalName : LPWSTR;
    lpRemoteName : LPWSTR;
    dwFlags : CULong;
}

static DISCDLGSTRUCTW = _DISCDLGSTRUCTW;

static LPDISCDLGSTRUCTW = Pointer[_DISCDLGSTRUCTW];

record _UNIVERSAL_NAME_INFOA {
    lpUniversalName : LPSTR;
}

static UNIVERSAL_NAME_INFOA = _UNIVERSAL_NAME_INFOA;

static LPUNIVERSAL_NAME_INFOA = Pointer[_UNIVERSAL_NAME_INFOA];

record _UNIVERSAL_NAME_INFOW {
    lpUniversalName : LPWSTR;
}

static UNIVERSAL_NAME_INFOW = _UNIVERSAL_NAME_INFOW;

static LPUNIVERSAL_NAME_INFOW = Pointer[_UNIVERSAL_NAME_INFOW];

record _REMOTE_NAME_INFOA {
    lpUniversalName : LPSTR;
    lpConnectionName : LPSTR;
    lpRemainingPath : LPSTR;
}

static REMOTE_NAME_INFOA = _REMOTE_NAME_INFOA;

static LPREMOTE_NAME_INFOA = Pointer[_REMOTE_NAME_INFOA];

record _REMOTE_NAME_INFOW {
    lpUniversalName : LPWSTR;
    lpConnectionName : LPWSTR;
    lpRemainingPath : LPWSTR;
}

static REMOTE_NAME_INFOW = _REMOTE_NAME_INFOW;

static LPREMOTE_NAME_INFOW = Pointer[_REMOTE_NAME_INFOW];

record _NETINFOSTRUCT {
    cbStructure : CULong;
    dwProviderVersion : CULong;
    dwStatus : CULong;
    dwCharacteristics : CULong;
    dwHandle : CULong;
    wNetType : UShort;
    dwPrinters : CULong;
    dwDrives : CULong;
}

static NETINFOSTRUCT = _NETINFOSTRUCT;

static LPNETINFOSTRUCT = Pointer[_NETINFOSTRUCT];

static PFNGETPROFILEPATHA = StdCallCodePointer[Pointer[CChar],Pointer[CChar],UInt,UInt];

static PFNGETPROFILEPATHW = StdCallCodePointer[Pointer[UShort],Pointer[UShort],UInt,UInt];

static PFNRECONCILEPROFILEA = StdCallCodePointer[Pointer[CChar],Pointer[CChar],CULong,UInt];

static PFNRECONCILEPROFILEW = StdCallCodePointer[Pointer[UShort],Pointer[UShort],CULong,UInt];

static PFNPROCESSPOLICIESA = StdCallCodePointer[Pointer[HWND__],Pointer[CChar],Pointer[CChar],Pointer[CChar],CULong,Int];

static PFNPROCESSPOLICIESW = StdCallCodePointer[Pointer[HWND__],Pointer[UShort],Pointer[UShort],Pointer[UShort],CULong,Int];

record _NETCONNECTINFOSTRUCT {
    cbStructure : CULong;
    dwFlags : CULong;
    dwSpeed : CULong;
    dwDelay : CULong;
    dwOptDataSize : CULong;
}

static NETCONNECTINFOSTRUCT = _NETCONNECTINFOSTRUCT;

static LPNETCONNECTINFOSTRUCT = Pointer[_NETCONNECTINFOSTRUCT];

external (stdcall) WNetAddConnectionA(
    argument0 : LPCSTR,
    argument1 : LPCSTR,
    argument2 : LPCSTR) : CULong;

external (stdcall) WNetAddConnectionW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR,
    argument2 : LPCWSTR) : CULong;

external (stdcall) WNetAddConnection2A(
    argument0 : LPNETRESOURCEA,
    argument1 : LPCSTR,
    argument2 : LPCSTR,
    argument3 : CULong) : CULong;

external (stdcall) WNetAddConnection2W(
    argument0 : LPNETRESOURCEW,
    argument1 : LPCWSTR,
    argument2 : LPCWSTR,
    argument3 : CULong) : CULong;

external (stdcall) WNetAddConnection3A(
    argument0 : HWND,
    argument1 : LPNETRESOURCEA,
    argument2 : LPCSTR,
    argument3 : LPCSTR,
    argument4 : CULong) : CULong;

external (stdcall) WNetAddConnection3W(
    argument0 : HWND,
    argument1 : LPNETRESOURCEW,
    argument2 : LPCWSTR,
    argument3 : LPCWSTR,
    argument4 : CULong) : CULong;

external (stdcall) WNetCancelConnectionA(
    argument0 : LPCSTR,
    argument1 : Int) : CULong;

external (stdcall) WNetCancelConnectionW(
    argument0 : LPCWSTR,
    argument1 : Int) : CULong;

external (stdcall) WNetCancelConnection2A(
    argument0 : LPCSTR,
    argument1 : CULong,
    argument2 : Int) : CULong;

external (stdcall) WNetCancelConnection2W(
    argument0 : LPCWSTR,
    argument1 : CULong,
    argument2 : Int) : CULong;

external (stdcall) WNetGetConnectionA(
    argument0 : LPCSTR,
    argument1 : LPSTR,
    argument2 : PDWORD) : CULong;

external (stdcall) WNetGetConnectionW(
    argument0 : LPCWSTR,
    argument1 : LPWSTR,
    argument2 : PDWORD) : CULong;

external (stdcall) WNetUseConnectionA(
    argument0 : HWND,
    argument1 : LPNETRESOURCEA,
    argument2 : LPCSTR,
    argument3 : LPCSTR,
    argument4 : CULong,
    argument5 : LPSTR,
    argument6 : PDWORD,
    argument7 : PDWORD) : CULong;

external (stdcall) WNetUseConnectionW(
    argument0 : HWND,
    argument1 : LPNETRESOURCEW,
    argument2 : LPCWSTR,
    argument3 : LPCWSTR,
    argument4 : CULong,
    argument5 : LPWSTR,
    argument6 : PDWORD,
    argument7 : PDWORD) : CULong;

external (stdcall) WNetSetConnectionA(
    argument0 : LPCSTR,
    argument1 : CULong,
    argument2 : PVOID) : CULong;

external (stdcall) WNetSetConnectionW(
    argument0 : LPCWSTR,
    argument1 : CULong,
    argument2 : PVOID) : CULong;

external (stdcall) WNetConnectionDialog(
    argument0 : HWND,
    argument1 : CULong) : CULong;

external (stdcall) WNetDisconnectDialog(
    argument0 : HWND,
    argument1 : CULong) : CULong;

external (stdcall) WNetConnectionDialog1A(
    argument0 : LPCONNECTDLGSTRUCTA) : CULong;

external (stdcall) WNetConnectionDialog1W(
    argument0 : LPCONNECTDLGSTRUCTW) : CULong;

external (stdcall) WNetDisconnectDialog1A(
    argument0 : LPDISCDLGSTRUCTA) : CULong;

external (stdcall) WNetDisconnectDialog1W(
    argument0 : LPDISCDLGSTRUCTW) : CULong;

external (stdcall) WNetOpenEnumA(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : LPNETRESOURCEA,
    argument4 : LPHANDLE) : CULong;

external (stdcall) WNetOpenEnumW(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : LPNETRESOURCEW,
    argument4 : LPHANDLE) : CULong;

external (stdcall) WNetEnumResourceA(
    argument0 : HANDLE,
    argument1 : PDWORD,
    argument2 : PVOID,
    argument3 : PDWORD) : CULong;

external (stdcall) WNetEnumResourceW(
    argument0 : HANDLE,
    argument1 : PDWORD,
    argument2 : PVOID,
    argument3 : PDWORD) : CULong;

external (stdcall) WNetCloseEnum(
    argument0 : HANDLE) : CULong;

external (stdcall) WNetGetUniversalNameA(
    argument0 : LPCSTR,
    argument1 : CULong,
    argument2 : PVOID,
    argument3 : PDWORD) : CULong;

external (stdcall) WNetGetUniversalNameW(
    argument0 : LPCWSTR,
    argument1 : CULong,
    argument2 : PVOID,
    argument3 : PDWORD) : CULong;

external (stdcall) WNetGetUserA(
    argument0 : LPCSTR,
    argument1 : LPSTR,
    argument2 : PDWORD) : CULong;

external (stdcall) WNetGetUserW(
    argument0 : LPCWSTR,
    argument1 : LPWSTR,
    argument2 : PDWORD) : CULong;

external (stdcall) WNetGetProviderNameA(
    argument0 : CULong,
    argument1 : LPSTR,
    argument2 : PDWORD) : CULong;

external (stdcall) WNetGetProviderNameW(
    argument0 : CULong,
    argument1 : LPWSTR,
    argument2 : PDWORD) : CULong;

external (stdcall) WNetGetNetworkInformationA(
    argument0 : LPCSTR,
    argument1 : LPNETINFOSTRUCT) : CULong;

external (stdcall) WNetGetNetworkInformationW(
    argument0 : LPCWSTR,
    argument1 : LPNETINFOSTRUCT) : CULong;

external (stdcall) WNetGetResourceInformationA(
    argument0 : LPNETRESOURCEA,
    argument1 : LPVOID,
    argument2 : LPDWORD,
    argument3 : Pointer[LPSTR]) : CULong;

external (stdcall) WNetGetResourceInformationW(
    argument0 : LPNETRESOURCEW,
    argument1 : LPVOID,
    argument2 : LPDWORD,
    argument3 : Pointer[LPWSTR]) : CULong;

external (stdcall) WNetGetResourceParentA(
    argument0 : LPNETRESOURCEA,
    argument1 : LPVOID,
    argument2 : LPDWORD) : CULong;

external (stdcall) WNetGetResourceParentW(
    argument0 : LPNETRESOURCEW,
    argument1 : LPVOID,
    argument2 : LPDWORD) : CULong;

external (stdcall) WNetGetLastErrorA(
    argument0 : PDWORD,
    argument1 : LPSTR,
    argument2 : CULong,
    argument3 : LPSTR,
    argument4 : CULong) : CULong;

external (stdcall) WNetGetLastErrorW(
    argument0 : PDWORD,
    argument1 : LPWSTR,
    argument2 : CULong,
    argument3 : LPWSTR,
    argument4 : CULong) : CULong;

external (stdcall) MultinetGetConnectionPerformanceA(
    argument0 : LPNETRESOURCEA,
    argument1 : LPNETCONNECTINFOSTRUCT) : CULong;

external (stdcall) MultinetGetConnectionPerformanceW(
    argument0 : LPNETRESOURCEW,
    argument1 : LPNETCONNECTINFOSTRUCT) : CULong;

static NETRESOURCE = NETRESOURCEA;

static LPNETRESOURCE = Pointer[NETRESOURCEA];

static CONNECTDLGSTRUCT = CONNECTDLGSTRUCTA;

static LPCONNECTDLGSTRUCT = Pointer[CONNECTDLGSTRUCTA];

static DISCDLGSTRUCT = DISCDLGSTRUCTA;

static LPDISCDLGSTRUCT = Pointer[DISCDLGSTRUCTA];

static UNIVERSAL_NAME_INFO = UNIVERSAL_NAME_INFOA;

static LPUNIVERSAL_NAME_INFO = Pointer[UNIVERSAL_NAME_INFOA];

static REMOTE_NAME_INFO = REMOTE_NAME_INFOA;

static LPREMOTE_NAME_INFO = Pointer[REMOTE_NAME_INFOA];

static REGSAM = CULong;

record value_entA {
    ve_valuename : LPSTR;
    ve_valuelen : CULong;
    ve_valueptr : CULong;
    ve_type : CULong;
}

static VALENTA = value_entA;

static PVALENTA = Pointer[value_entA];

record value_entW {
    ve_valuename : LPWSTR;
    ve_valuelen : CULong;
    ve_valueptr : CULong;
    ve_type : CULong;
}

static VALENTW = value_entW;

static PVALENTW = Pointer[value_entW];

external (stdcall) AbortSystemShutdownA(
    argument0 : LPCSTR) : Int;

external (stdcall) AbortSystemShutdownW(
    argument0 : LPCWSTR) : Int;

external (stdcall) InitiateSystemShutdownA(
    argument0 : LPSTR,
    argument1 : LPSTR,
    argument2 : CULong,
    argument3 : Int,
    argument4 : Int) : Int;

external (stdcall) InitiateSystemShutdownW(
    argument0 : LPWSTR,
    argument1 : LPWSTR,
    argument2 : CULong,
    argument3 : Int,
    argument4 : Int) : Int;

external (stdcall) RegCloseKey(
    argument0 : HKEY) : CLong;

external (stdcall) RegConnectRegistryA(
    argument0 : LPCSTR,
    argument1 : HKEY,
    argument2 : PHKEY) : CLong;

external (stdcall) RegConnectRegistryW(
    argument0 : LPCWSTR,
    argument1 : HKEY,
    argument2 : PHKEY) : CLong;

external (stdcall) RegCreateKeyA(
    argument0 : HKEY,
    argument1 : LPCSTR,
    argument2 : PHKEY) : CLong;

external (stdcall) RegCreateKeyExA(
    argument0 : HKEY,
    argument1 : LPCSTR,
    argument2 : CULong,
    argument3 : LPSTR,
    argument4 : CULong,
    argument5 : CULong,
    argument6 : LPSECURITY_ATTRIBUTES,
    argument7 : PHKEY,
    argument8 : PDWORD) : CLong;

external (stdcall) RegCreateKeyExW(
    argument0 : HKEY,
    argument1 : LPCWSTR,
    argument2 : CULong,
    argument3 : LPWSTR,
    argument4 : CULong,
    argument5 : CULong,
    argument6 : LPSECURITY_ATTRIBUTES,
    argument7 : PHKEY,
    argument8 : PDWORD) : CLong;

external (stdcall) RegCreateKeyW(
    argument0 : HKEY,
    argument1 : LPCWSTR,
    argument2 : PHKEY) : CLong;

external (stdcall) RegDeleteKeyA(
    argument0 : HKEY,
    argument1 : LPCSTR) : CLong;

external (stdcall) RegDeleteKeyW(
    argument0 : HKEY,
    argument1 : LPCWSTR) : CLong;

external (stdcall) RegDeleteValueA(
    argument0 : HKEY,
    argument1 : LPCSTR) : CLong;

external (stdcall) RegDeleteValueW(
    argument0 : HKEY,
    argument1 : LPCWSTR) : CLong;

external (stdcall) RegEnumKeyA(
    argument0 : HKEY,
    argument1 : CULong,
    argument2 : LPSTR,
    argument3 : CULong) : CLong;

external (stdcall) RegEnumKeyW(
    argument0 : HKEY,
    argument1 : CULong,
    argument2 : LPWSTR,
    argument3 : CULong) : CLong;

external (stdcall) RegEnumKeyExA(
    argument0 : HKEY,
    argument1 : CULong,
    argument2 : LPSTR,
    argument3 : PDWORD,
    argument4 : PDWORD,
    argument5 : LPSTR,
    argument6 : PDWORD,
    argument7 : PFILETIME) : CLong;

external (stdcall) RegEnumKeyExW(
    argument0 : HKEY,
    argument1 : CULong,
    argument2 : LPWSTR,
    argument3 : PDWORD,
    argument4 : PDWORD,
    argument5 : LPWSTR,
    argument6 : PDWORD,
    argument7 : PFILETIME) : CLong;

external (stdcall) RegEnumValueA(
    argument0 : HKEY,
    argument1 : CULong,
    argument2 : LPSTR,
    argument3 : PDWORD,
    argument4 : PDWORD,
    argument5 : PDWORD,
    argument6 : LPBYTE,
    argument7 : PDWORD) : CLong;

external (stdcall) RegEnumValueW(
    argument0 : HKEY,
    argument1 : CULong,
    argument2 : LPWSTR,
    argument3 : PDWORD,
    argument4 : PDWORD,
    argument5 : PDWORD,
    argument6 : LPBYTE,
    argument7 : PDWORD) : CLong;

external (stdcall) RegFlushKey(
    argument0 : HKEY) : CLong;

external (stdcall) RegGetKeySecurity(
    argument0 : HKEY,
    argument1 : CULong,
    argument2 : PSECURITY_DESCRIPTOR,
    argument3 : PDWORD) : CLong;

external (stdcall) RegLoadKeyA(
    argument0 : HKEY,
    argument1 : LPCSTR,
    argument2 : LPCSTR) : CLong;

external (stdcall) RegLoadKeyW(
    argument0 : HKEY,
    argument1 : LPCWSTR,
    argument2 : LPCWSTR) : CLong;

external (stdcall) RegNotifyChangeKeyValue(
    argument0 : HKEY,
    argument1 : Int,
    argument2 : CULong,
    argument3 : HANDLE,
    argument4 : Int) : CLong;

external (stdcall) RegOpenKeyA(
    argument0 : HKEY,
    argument1 : LPCSTR,
    argument2 : PHKEY) : CLong;

external (stdcall) RegOpenKeyExA(
    argument0 : HKEY,
    argument1 : LPCSTR,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : PHKEY) : CLong;

external (stdcall) RegOpenKeyExW(
    argument0 : HKEY,
    argument1 : LPCWSTR,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : PHKEY) : CLong;

external (stdcall) RegOpenKeyW(
    argument0 : HKEY,
    argument1 : LPCWSTR,
    argument2 : PHKEY) : CLong;

external (stdcall) RegQueryInfoKeyA(
    argument0 : HKEY,
    argument1 : LPSTR,
    argument2 : PDWORD,
    argument3 : PDWORD,
    argument4 : PDWORD,
    argument5 : PDWORD,
    argument6 : PDWORD,
    argument7 : PDWORD,
    argument8 : PDWORD,
    argument9 : PDWORD,
    argument10 : PDWORD,
    argument11 : PFILETIME) : CLong;

external (stdcall) RegQueryInfoKeyW(
    argument0 : HKEY,
    argument1 : LPWSTR,
    argument2 : PDWORD,
    argument3 : PDWORD,
    argument4 : PDWORD,
    argument5 : PDWORD,
    argument6 : PDWORD,
    argument7 : PDWORD,
    argument8 : PDWORD,
    argument9 : PDWORD,
    argument10 : PDWORD,
    argument11 : PFILETIME) : CLong;

external (stdcall) RegQueryMultipleValuesA(
    argument0 : HKEY,
    argument1 : PVALENTA,
    argument2 : CULong,
    argument3 : LPSTR,
    argument4 : LPDWORD) : CLong;

external (stdcall) RegQueryMultipleValuesW(
    argument0 : HKEY,
    argument1 : PVALENTW,
    argument2 : CULong,
    argument3 : LPWSTR,
    argument4 : LPDWORD) : CLong;

external (stdcall) RegQueryValueA(
    argument0 : HKEY,
    argument1 : LPCSTR,
    argument2 : LPSTR,
    argument3 : PLONG) : CLong;

external (stdcall) RegQueryValueExA(
    argument0 : HKEY,
    argument1 : LPCSTR,
    argument2 : LPDWORD,
    argument3 : LPDWORD,
    argument4 : LPBYTE,
    argument5 : LPDWORD) : CLong;

external (stdcall) RegQueryValueExW(
    argument0 : HKEY,
    argument1 : LPCWSTR,
    argument2 : LPDWORD,
    argument3 : LPDWORD,
    argument4 : LPBYTE,
    argument5 : LPDWORD) : CLong;

external (stdcall) RegQueryValueW(
    argument0 : HKEY,
    argument1 : LPCWSTR,
    argument2 : LPWSTR,
    argument3 : PLONG) : CLong;

external (stdcall) RegReplaceKeyA(
    argument0 : HKEY,
    argument1 : LPCSTR,
    argument2 : LPCSTR,
    argument3 : LPCSTR) : CLong;

external (stdcall) RegReplaceKeyW(
    argument0 : HKEY,
    argument1 : LPCWSTR,
    argument2 : LPCWSTR,
    argument3 : LPCWSTR) : CLong;

external (stdcall) RegRestoreKeyA(
    argument0 : HKEY,
    argument1 : LPCSTR,
    argument2 : CULong) : CLong;

external (stdcall) RegRestoreKeyW(
    argument0 : HKEY,
    argument1 : LPCWSTR,
    argument2 : CULong) : CLong;

external (stdcall) RegSaveKeyA(
    argument0 : HKEY,
    argument1 : LPCSTR,
    argument2 : LPSECURITY_ATTRIBUTES) : CLong;

external (stdcall) RegSaveKeyW(
    argument0 : HKEY,
    argument1 : LPCWSTR,
    argument2 : LPSECURITY_ATTRIBUTES) : CLong;

external (stdcall) RegSetKeySecurity(
    argument0 : HKEY,
    argument1 : CULong,
    argument2 : PSECURITY_DESCRIPTOR) : CLong;

external (stdcall) RegSetValueA(
    argument0 : HKEY,
    argument1 : LPCSTR,
    argument2 : CULong,
    argument3 : LPCSTR,
    argument4 : CULong) : CLong;

external (stdcall) RegSetValueExA(
    argument0 : HKEY,
    argument1 : LPCSTR,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : Pointer[CUChar],
    argument5 : CULong) : CLong;

external (stdcall) RegSetValueExW(
    argument0 : HKEY,
    argument1 : LPCWSTR,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : Pointer[CUChar],
    argument5 : CULong) : CLong;

external (stdcall) RegSetValueW(
    argument0 : HKEY,
    argument1 : LPCWSTR,
    argument2 : CULong,
    argument3 : LPCWSTR,
    argument4 : CULong) : CLong;

external (stdcall) RegUnLoadKeyA(
    argument0 : HKEY,
    argument1 : LPCSTR) : CLong;

external (stdcall) RegUnLoadKeyW(
    argument0 : HKEY,
    argument1 : LPCWSTR) : CLong;

static VALENT = VALENTA;

static PVALENT = Pointer[VALENTA];

record _SERVICE_STATUS {
    dwServiceType : CULong;
    dwCurrentState : CULong;
    dwControlsAccepted : CULong;
    dwWin32ExitCode : CULong;
    dwServiceSpecificExitCode : CULong;
    dwCheckPoint : CULong;
    dwWaitHint : CULong;
}

static SERVICE_STATUS = _SERVICE_STATUS;

static LPSERVICE_STATUS = Pointer[_SERVICE_STATUS];

record _SERVICE_STATUS_PROCESS {
    dwServiceType : CULong;
    dwCurrentState : CULong;
    dwControlsAccepted : CULong;
    dwWin32ExitCode : CULong;
    dwServiceSpecificExitCode : CULong;
    dwCheckPoint : CULong;
    dwWaitHint : CULong;
    dwProcessId : CULong;
    dwServiceFlags : CULong;
}

static SERVICE_STATUS_PROCESS = _SERVICE_STATUS_PROCESS;

static LPSERVICE_STATUS_PROCESS = Pointer[_SERVICE_STATUS_PROCESS];

static SC_STATUS_PROCESS_INFO = 0;

static SC_STATUS_TYPE = Int;

static SC_ENUM_PROCESS_INFO = 0;

static SC_ENUM_TYPE = Int;

record _ENUM_SERVICE_STATUSA {
    lpServiceName : LPSTR;
    lpDisplayName : LPSTR;
    ServiceStatus : SERVICE_STATUS;
}

static ENUM_SERVICE_STATUSA = _ENUM_SERVICE_STATUSA;

static LPENUM_SERVICE_STATUSA = Pointer[_ENUM_SERVICE_STATUSA];

record _ENUM_SERVICE_STATUSW {
    lpServiceName : LPWSTR;
    lpDisplayName : LPWSTR;
    ServiceStatus : SERVICE_STATUS;
}

static ENUM_SERVICE_STATUSW = _ENUM_SERVICE_STATUSW;

static LPENUM_SERVICE_STATUSW = Pointer[_ENUM_SERVICE_STATUSW];

record _ENUM_SERVICE_STATUS_PROCESSA {
    lpServiceName : LPSTR;
    lpDisplayName : LPSTR;
    ServiceStatusProcess : SERVICE_STATUS_PROCESS;
}

static ENUM_SERVICE_STATUS_PROCESSA = _ENUM_SERVICE_STATUS_PROCESSA;

static LPENUM_SERVICE_STATUS_PROCESSA = Pointer[_ENUM_SERVICE_STATUS_PROCESSA];

record _ENUM_SERVICE_STATUS_PROCESSW {
    lpServiceName : LPWSTR;
    lpDisplayName : LPWSTR;
    ServiceStatusProcess : SERVICE_STATUS_PROCESS;
}

static ENUM_SERVICE_STATUS_PROCESSW = _ENUM_SERVICE_STATUS_PROCESSW;

static LPENUM_SERVICE_STATUS_PROCESSW = Pointer[_ENUM_SERVICE_STATUS_PROCESSW];

record _QUERY_SERVICE_CONFIGA {
    dwServiceType : CULong;
    dwStartType : CULong;
    dwErrorControl : CULong;
    lpBinaryPathName : LPSTR;
    lpLoadOrderGroup : LPSTR;
    dwTagId : CULong;
    lpDependencies : LPSTR;
    lpServiceStartName : LPSTR;
    lpDisplayName : LPSTR;
}

static QUERY_SERVICE_CONFIGA = _QUERY_SERVICE_CONFIGA;

static LPQUERY_SERVICE_CONFIGA = Pointer[_QUERY_SERVICE_CONFIGA];

record _QUERY_SERVICE_CONFIGW {
    dwServiceType : CULong;
    dwStartType : CULong;
    dwErrorControl : CULong;
    lpBinaryPathName : LPWSTR;
    lpLoadOrderGroup : LPWSTR;
    dwTagId : CULong;
    lpDependencies : LPWSTR;
    lpServiceStartName : LPWSTR;
    lpDisplayName : LPWSTR;
}

static QUERY_SERVICE_CONFIGW = _QUERY_SERVICE_CONFIGW;

static LPQUERY_SERVICE_CONFIGW = Pointer[_QUERY_SERVICE_CONFIGW];

record _QUERY_SERVICE_LOCK_STATUSA {
    fIsLocked : CULong;
    lpLockOwner : LPSTR;
    dwLockDuration : CULong;
}

static QUERY_SERVICE_LOCK_STATUSA = _QUERY_SERVICE_LOCK_STATUSA;

static LPQUERY_SERVICE_LOCK_STATUSA = Pointer[_QUERY_SERVICE_LOCK_STATUSA];

record _QUERY_SERVICE_LOCK_STATUSW {
    fIsLocked : CULong;
    lpLockOwner : LPWSTR;
    dwLockDuration : CULong;
}

static QUERY_SERVICE_LOCK_STATUSW = _QUERY_SERVICE_LOCK_STATUSW;

static LPQUERY_SERVICE_LOCK_STATUSW = Pointer[_QUERY_SERVICE_LOCK_STATUSW];

static LPSERVICE_MAIN_FUNCTIONA = StdCallCodePointer[CULong,Pointer[Pointer[CChar]],Void];

static LPSERVICE_MAIN_FUNCTIONW = StdCallCodePointer[CULong,Pointer[Pointer[UShort]],Void];

record _SERVICE_TABLE_ENTRYA {
    lpServiceName : LPSTR;
    lpServiceProc : LPSERVICE_MAIN_FUNCTIONA;
}

static SERVICE_TABLE_ENTRYA = _SERVICE_TABLE_ENTRYA;

static LPSERVICE_TABLE_ENTRYA = Pointer[_SERVICE_TABLE_ENTRYA];

record _SERVICE_TABLE_ENTRYW {
    lpServiceName : LPWSTR;
    lpServiceProc : LPSERVICE_MAIN_FUNCTIONW;
}

static SERVICE_TABLE_ENTRYW = _SERVICE_TABLE_ENTRYW;

static LPSERVICE_TABLE_ENTRYW = Pointer[_SERVICE_TABLE_ENTRYW];

record SC_HANDLE__ {
    i : Int;
}

static SC_HANDLE = Pointer[SC_HANDLE__];

static LPSC_HANDLE = Pointer[SC_HANDLE];

static SC_LOCK = PVOID;

static SERVICE_STATUS_HANDLE = CULong;

static LPHANDLER_FUNCTION = StdCallCodePointer[CULong,Void];

static LPHANDLER_FUNCTION_EX = StdCallCodePointer[CULong,CULong,RawPointer,RawPointer,CULong];

record _SERVICE_DESCRIPTIONA {
    lpDescription : LPSTR;
}

static SERVICE_DESCRIPTIONA = _SERVICE_DESCRIPTIONA;

static LPSERVICE_DESCRIPTIONA = Pointer[_SERVICE_DESCRIPTIONA];

record _SERVICE_DESCRIPTIONW {
    lpDescription : LPWSTR;
}

static SERVICE_DESCRIPTIONW = _SERVICE_DESCRIPTIONW;

static LPSERVICE_DESCRIPTIONW = Pointer[_SERVICE_DESCRIPTIONW];

static SC_ACTION_NONE = 0;
static SC_ACTION_RESTART = 1;
static SC_ACTION_REBOOT = 2;
static SC_ACTION_RUN_COMMAND = 3;

static SC_ACTION_TYPE = Int;

record _SC_ACTION {
    Type : SC_ACTION_TYPE;
    Delay : CULong;
}

static SC_ACTION = _SC_ACTION;

static LPSC_ACTION = Pointer[_SC_ACTION];

record _SERVICE_FAILURE_ACTIONSA {
    dwResetPeriod : CULong;
    lpRebootMsg : LPSTR;
    lpCommand : LPSTR;
    cActions : CULong;
    lpsaActions : Pointer[SC_ACTION];
}

static SERVICE_FAILURE_ACTIONSA = _SERVICE_FAILURE_ACTIONSA;

static LPSERVICE_FAILURE_ACTIONSA = Pointer[_SERVICE_FAILURE_ACTIONSA];

record _SERVICE_FAILURE_ACTIONSW {
    dwResetPeriod : CULong;
    lpRebootMsg : LPWSTR;
    lpCommand : LPWSTR;
    cActions : CULong;
    lpsaActions : Pointer[SC_ACTION];
}

static SERVICE_FAILURE_ACTIONSW = _SERVICE_FAILURE_ACTIONSW;

static LPSERVICE_FAILURE_ACTIONSW = Pointer[_SERVICE_FAILURE_ACTIONSW];

external (stdcall) ChangeServiceConfigA(
    argument0 : SC_HANDLE,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : LPCSTR,
    argument5 : LPCSTR,
    argument6 : LPDWORD,
    argument7 : LPCSTR,
    argument8 : LPCSTR,
    argument9 : LPCSTR,
    argument10 : LPCSTR) : Int;

external (stdcall) ChangeServiceConfigW(
    argument0 : SC_HANDLE,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : LPCWSTR,
    argument5 : LPCWSTR,
    argument6 : LPDWORD,
    argument7 : LPCWSTR,
    argument8 : LPCWSTR,
    argument9 : LPCWSTR,
    argument10 : LPCWSTR) : Int;

external (stdcall) ChangeServiceConfig2A(
    argument0 : SC_HANDLE,
    argument1 : CULong,
    argument2 : LPVOID) : Int;

external (stdcall) ChangeServiceConfig2W(
    argument0 : SC_HANDLE,
    argument1 : CULong,
    argument2 : LPVOID) : Int;

external (stdcall) CloseServiceHandle(
    argument0 : SC_HANDLE) : Int;

external (stdcall) ControlService(
    argument0 : SC_HANDLE,
    argument1 : CULong,
    argument2 : LPSERVICE_STATUS) : Int;

external (stdcall) CreateServiceA(
    argument0 : SC_HANDLE,
    argument1 : LPCSTR,
    argument2 : LPCSTR,
    argument3 : CULong,
    argument4 : CULong,
    argument5 : CULong,
    argument6 : CULong,
    argument7 : LPCSTR,
    argument8 : LPCSTR,
    argument9 : PDWORD,
    argument10 : LPCSTR,
    argument11 : LPCSTR,
    argument12 : LPCSTR) : SC_HANDLE;

external (stdcall) CreateServiceW(
    argument0 : SC_HANDLE,
    argument1 : LPCWSTR,
    argument2 : LPCWSTR,
    argument3 : CULong,
    argument4 : CULong,
    argument5 : CULong,
    argument6 : CULong,
    argument7 : LPCWSTR,
    argument8 : LPCWSTR,
    argument9 : PDWORD,
    argument10 : LPCWSTR,
    argument11 : LPCWSTR,
    argument12 : LPCWSTR) : SC_HANDLE;

external (stdcall) DeleteService(
    argument0 : SC_HANDLE) : Int;

external (stdcall) EnumDependentServicesA(
    argument0 : SC_HANDLE,
    argument1 : CULong,
    argument2 : LPENUM_SERVICE_STATUSA,
    argument3 : CULong,
    argument4 : PDWORD,
    argument5 : PDWORD) : Int;

external (stdcall) EnumDependentServicesW(
    argument0 : SC_HANDLE,
    argument1 : CULong,
    argument2 : LPENUM_SERVICE_STATUSW,
    argument3 : CULong,
    argument4 : PDWORD,
    argument5 : PDWORD) : Int;

external (stdcall) EnumServicesStatusA(
    argument0 : SC_HANDLE,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : LPENUM_SERVICE_STATUSA,
    argument4 : CULong,
    argument5 : PDWORD,
    argument6 : PDWORD,
    argument7 : PDWORD) : Int;

external (stdcall) EnumServicesStatusW(
    argument0 : SC_HANDLE,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : LPENUM_SERVICE_STATUSW,
    argument4 : CULong,
    argument5 : PDWORD,
    argument6 : PDWORD,
    argument7 : PDWORD) : Int;

external (stdcall) EnumServicesStatusExA(
    argument0 : SC_HANDLE,
    argument1 : SC_ENUM_TYPE,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : LPBYTE,
    argument5 : CULong,
    argument6 : LPDWORD,
    argument7 : LPDWORD,
    argument8 : LPDWORD,
    argument9 : LPCSTR) : Int;

external (stdcall) EnumServicesStatusExW(
    argument0 : SC_HANDLE,
    argument1 : SC_ENUM_TYPE,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : LPBYTE,
    argument5 : CULong,
    argument6 : LPDWORD,
    argument7 : LPDWORD,
    argument8 : LPDWORD,
    argument9 : LPCWSTR) : Int;

external (stdcall) GetServiceDisplayNameA(
    argument0 : SC_HANDLE,
    argument1 : LPCSTR,
    argument2 : LPSTR,
    argument3 : PDWORD) : Int;

external (stdcall) GetServiceDisplayNameW(
    argument0 : SC_HANDLE,
    argument1 : LPCWSTR,
    argument2 : LPWSTR,
    argument3 : PDWORD) : Int;

external (stdcall) GetServiceKeyNameA(
    argument0 : SC_HANDLE,
    argument1 : LPCSTR,
    argument2 : LPSTR,
    argument3 : PDWORD) : Int;

external (stdcall) GetServiceKeyNameW(
    argument0 : SC_HANDLE,
    argument1 : LPCWSTR,
    argument2 : LPWSTR,
    argument3 : PDWORD) : Int;

external (stdcall) LockServiceDatabase(
    argument0 : SC_HANDLE) : SC_LOCK;

external (stdcall) NotifyBootConfigStatus(
    argument0 : Int) : Int;

external (stdcall) OpenSCManagerA(
    argument0 : LPCSTR,
    argument1 : LPCSTR,
    argument2 : CULong) : SC_HANDLE;

external (stdcall) OpenSCManagerW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR,
    argument2 : CULong) : SC_HANDLE;

external (stdcall) OpenServiceA(
    argument0 : SC_HANDLE,
    argument1 : LPCSTR,
    argument2 : CULong) : SC_HANDLE;

external (stdcall) OpenServiceW(
    argument0 : SC_HANDLE,
    argument1 : LPCWSTR,
    argument2 : CULong) : SC_HANDLE;

external (stdcall) QueryServiceConfigA(
    argument0 : SC_HANDLE,
    argument1 : LPQUERY_SERVICE_CONFIGA,
    argument2 : CULong,
    argument3 : PDWORD) : Int;

external (stdcall) QueryServiceConfigW(
    argument0 : SC_HANDLE,
    argument1 : LPQUERY_SERVICE_CONFIGW,
    argument2 : CULong,
    argument3 : PDWORD) : Int;

external (stdcall) QueryServiceConfig2A(
    argument0 : SC_HANDLE,
    argument1 : CULong,
    argument2 : LPBYTE,
    argument3 : CULong,
    argument4 : LPDWORD) : Int;

external (stdcall) QueryServiceConfig2W(
    argument0 : SC_HANDLE,
    argument1 : CULong,
    argument2 : LPBYTE,
    argument3 : CULong,
    argument4 : LPDWORD) : Int;

external (stdcall) QueryServiceLockStatusA(
    argument0 : SC_HANDLE,
    argument1 : LPQUERY_SERVICE_LOCK_STATUSA,
    argument2 : CULong,
    argument3 : PDWORD) : Int;

external (stdcall) QueryServiceLockStatusW(
    argument0 : SC_HANDLE,
    argument1 : LPQUERY_SERVICE_LOCK_STATUSW,
    argument2 : CULong,
    argument3 : PDWORD) : Int;

external (stdcall) QueryServiceObjectSecurity(
    argument0 : SC_HANDLE,
    argument1 : CULong,
    argument2 : PSECURITY_DESCRIPTOR,
    argument3 : CULong,
    argument4 : LPDWORD) : Int;

external (stdcall) QueryServiceStatus(
    argument0 : SC_HANDLE,
    argument1 : LPSERVICE_STATUS) : Int;

external (stdcall) QueryServiceStatusEx(
    argument0 : SC_HANDLE,
    argument1 : SC_STATUS_TYPE,
    argument2 : LPBYTE,
    argument3 : CULong,
    argument4 : LPDWORD) : Int;

external (stdcall) RegisterServiceCtrlHandlerA(
    argument0 : LPCSTR,
    argument1 : LPHANDLER_FUNCTION) : CULong;

external (stdcall) RegisterServiceCtrlHandlerW(
    argument0 : LPCWSTR,
    argument1 : LPHANDLER_FUNCTION) : CULong;

external (stdcall) RegisterServiceCtrlHandlerExA(
    argument0 : LPCSTR,
    argument1 : LPHANDLER_FUNCTION_EX,
    argument2 : LPVOID) : CULong;

external (stdcall) RegisterServiceCtrlHandlerExW(
    argument0 : LPCWSTR,
    argument1 : LPHANDLER_FUNCTION_EX,
    argument2 : LPVOID) : CULong;

external (stdcall) SetServiceObjectSecurity(
    argument0 : SC_HANDLE,
    argument1 : CULong,
    argument2 : PSECURITY_DESCRIPTOR) : Int;

external (stdcall) SetServiceStatus(
    argument0 : CULong,
    argument1 : LPSERVICE_STATUS) : Int;

external (stdcall) StartServiceA(
    argument0 : SC_HANDLE,
    argument1 : CULong,
    argument2 : Pointer[LPCSTR]) : Int;

external (stdcall) StartServiceCtrlDispatcherA(
    argument0 : LPSERVICE_TABLE_ENTRYA) : Int;

external (stdcall) StartServiceCtrlDispatcherW(
    argument0 : LPSERVICE_TABLE_ENTRYW) : Int;

external (stdcall) StartServiceW(
    argument0 : SC_HANDLE,
    argument1 : CULong,
    argument2 : Pointer[LPCWSTR]) : Int;

external (stdcall) UnlockServiceDatabase(
    argument0 : SC_LOCK) : Int;

static ENUM_SERVICE_STATUS = ENUM_SERVICE_STATUSA;

static LPENUM_SERVICE_STATUS = Pointer[ENUM_SERVICE_STATUSA];

static ENUM_SERVICE_STATUS_PROCESS = ENUM_SERVICE_STATUS_PROCESSA;

static LPENUM_SERVICE_STATUS_PROCESS = LPENUM_SERVICE_STATUS_PROCESSA;

static QUERY_SERVICE_CONFIG = QUERY_SERVICE_CONFIGA;

static LPQUERY_SERVICE_CONFIG = Pointer[QUERY_SERVICE_CONFIGA];

static QUERY_SERVICE_LOCK_STATUS = QUERY_SERVICE_LOCK_STATUSA;

static LPQUERY_SERVICE_LOCK_STATUS = Pointer[QUERY_SERVICE_LOCK_STATUSA];

static SERVICE_TABLE_ENTRY = SERVICE_TABLE_ENTRYA;

static LPSERVICE_TABLE_ENTRY = Pointer[SERVICE_TABLE_ENTRYA];

static LPSERVICE_MAIN_FUNCTION = LPSERVICE_MAIN_FUNCTIONA;

static SERVICE_DESCRIPTION = SERVICE_DESCRIPTIONA;

static LPSERVICE_DESCRIPTION = LPSERVICE_DESCRIPTIONA;

static SERVICE_FAILURE_ACTIONS = SERVICE_FAILURE_ACTIONSA;

static LPSERVICE_FAILURE_ACTIONS = LPSERVICE_FAILURE_ACTIONSA;

record UnnamedRecord14 {
    bAppReturnCode : UShort;
    reserved : UShort;
    fBusy : UShort;
    fAck : UShort;
}

static DDEACK = UnnamedRecord14;

record UnnamedRecord15 {
    reserved : UShort;
    fDeferUpd : UShort;
    fAckReq : UShort;
    cfFormat : Short;
}

static DDEADVISE = UnnamedRecord15;

record UnnamedRecord16 {
    unused : UShort;
    fResponse : UShort;
    fRelease : UShort;
    reserved : UShort;
    fAckReq : UShort;
    cfFormat : Short;
    Value : Array[CUChar,1];
}

static DDEDATA = UnnamedRecord16;

record UnnamedRecord17 {
    unused : UShort;
    fRelease : UShort;
    fReserved : UShort;
    cfFormat : Short;
    Value : Array[CUChar,1];
}

static DDEPOKE = UnnamedRecord17;

record UnnamedRecord18 {
    unused : UShort;
    fRelease : UShort;
    fDeferUpd : UShort;
    fAckReq : UShort;
    cfFormat : Short;
}

static DDELN = UnnamedRecord18;

record UnnamedRecord19 {
    unused : UShort;
    fAck : UShort;
    fRelease : UShort;
    fReserved : UShort;
    fAckReq : UShort;
    cfFormat : Short;
    rgb : Array[CUChar,1];
}

static DDEUP = UnnamedRecord19;

external (stdcall) DdeSetQualityOfService(
    argument0 : HWND,
    argument1 : Pointer[SECURITY_QUALITY_OF_SERVICE],
    argument2 : PSECURITY_QUALITY_OF_SERVICE) : Int;

external (stdcall) ImpersonateDdeClientWindow(
    argument0 : HWND,
    argument1 : HWND) : Int;

external (stdcall) PackDDElParam(
    argument0 : UInt,
    argument1 : UInt,
    argument2 : UInt) : CLong;

external (stdcall) UnpackDDElParam(
    argument0 : UInt,
    argument1 : CLong,
    argument2 : PUINT_PTR,
    argument3 : PUINT_PTR) : Int;

external (stdcall) FreeDDElParam(
    argument0 : UInt,
    argument1 : CLong) : Int;

external (stdcall) ReuseDDElParam(
    argument0 : CLong,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : UInt,
    argument4 : UInt) : CLong;

record HCONVLIST__ {
    i : Int;
}

static HCONVLIST = Pointer[HCONVLIST__];

record HCONV__ {
    i : Int;
}

static HCONV = Pointer[HCONV__];

record HSZ__ {
    i : Int;
}

static HSZ = Pointer[HSZ__];

record HDDEDATA__ {
    i : Int;
}

static HDDEDATA = Pointer[HDDEDATA__];

static PFNCALLBACK = StdCallCodePointer[UInt,UInt,Pointer[HCONV__],Pointer[HSZ__],Pointer[HSZ__],Pointer[HDDEDATA__],CULong,CULong,Pointer[HDDEDATA__]];

record tagHSZPAIR {
    hszSvc : HSZ;
    hszTopic : HSZ;
}

static HSZPAIR = tagHSZPAIR;

static PHSZPAIR = Pointer[tagHSZPAIR];

record tagCONVCONTEXT {
    cb : UInt;
    wFlags : UInt;
    wCountryID : UInt;
    iCodePage : Int;
    dwLangID : CULong;
    dwSecurity : CULong;
    qos : SECURITY_QUALITY_OF_SERVICE;
}

static CONVCONTEXT = tagCONVCONTEXT;

static PCONVCONTEXT = Pointer[tagCONVCONTEXT];

record tagCONVINFO {
    cb : CULong;
    hUser : CULong;
    hConvPartner : HCONV;
    hszSvcPartner : HSZ;
    hszServiceReq : HSZ;
    hszTopic : HSZ;
    hszItem : HSZ;
    wFmt : UInt;
    wType : UInt;
    wStatus : UInt;
    wConvst : UInt;
    wLastError : UInt;
    hConvList : HCONVLIST;
    ConvCtxt : CONVCONTEXT;
    hwnd : HWND;
    hwndPartner : HWND;
}

static CONVINFO = tagCONVINFO;

static PCONVINFO = Pointer[tagCONVINFO];

record tagDDEML_MSG_HOOK_DATA {
    uiLo : UInt;
    uiHi : UInt;
    cbData : CULong;
    Data : Array[CULong,8];
}

static DDEML_MSG_HOOK_DATA = tagDDEML_MSG_HOOK_DATA;

record tagMONHSZSTRUCT {
    cb : UInt;
    fsAction : Int;
    dwTime : CULong;
    hsz : HSZ;
    hTask : HANDLE;
    str : Array[CChar,1];
}

static MONHSZSTRUCT = tagMONHSZSTRUCT;

static PMONHSZSTRUCT = Pointer[tagMONHSZSTRUCT];

record tagMONLINKSTRUCT {
    cb : UInt;
    dwTime : CULong;
    hTask : HANDLE;
    fEstablished : Int;
    fNoData : Int;
    hszSvc : HSZ;
    hszTopic : HSZ;
    hszItem : HSZ;
    wFmt : UInt;
    fServer : Int;
    hConvServer : HCONV;
    hConvClient : HCONV;
}

static MONLINKSTRUCT = tagMONLINKSTRUCT;

static PMONLINKSTRUCT = Pointer[tagMONLINKSTRUCT];

record tagMONCONVSTRUCT {
    cb : UInt;
    fConnect : Int;
    dwTime : CULong;
    hTask : HANDLE;
    hszSvc : HSZ;
    hszTopic : HSZ;
    hConvClient : HCONV;
    hConvServer : HCONV;
}

static MONCONVSTRUCT = tagMONCONVSTRUCT;

static PMONCONVSTRUCT = Pointer[tagMONCONVSTRUCT];

record tagMONCBSTRUCT {
    cb : UInt;
    dwTime : CULong;
    hTask : HANDLE;
    dwRet : CULong;
    wType : UInt;
    wFmt : UInt;
    hConv : HCONV;
    hsz1 : HSZ;
    hsz2 : HSZ;
    hData : HDDEDATA;
    dwData1 : CULong;
    dwData2 : CULong;
    cc : CONVCONTEXT;
    cbData : CULong;
    Data : Array[CULong,8];
}

static MONCBSTRUCT = tagMONCBSTRUCT;

static PMONCBSTRUCT = Pointer[tagMONCBSTRUCT];

record tagMONERRSTRUCT {
    cb : UInt;
    wLastError : UInt;
    dwTime : CULong;
    hTask : HANDLE;
}

static MONERRSTRUCT = tagMONERRSTRUCT;

static PMONERRSTRUCT = Pointer[tagMONERRSTRUCT];

record tagMONMSGSTRUCT {
    cb : UInt;
    hwndTo : HWND;
    dwTime : CULong;
    hTask : HANDLE;
    wMsg : UInt;
    wParam : UInt;
    lParam : CLong;
    dmhd : DDEML_MSG_HOOK_DATA;
}

static MONMSGSTRUCT = tagMONMSGSTRUCT;

static PMONMSGSTRUCT = Pointer[tagMONMSGSTRUCT];

external (stdcall) DdeAbandonTransaction(
    argument0 : CULong,
    argument1 : HCONV,
    argument2 : CULong) : Int;

external (stdcall) DdeAccessData(
    argument0 : HDDEDATA,
    argument1 : PDWORD) : PBYTE;

external (stdcall) DdeAddData(
    argument0 : HDDEDATA,
    argument1 : PBYTE,
    argument2 : CULong,
    argument3 : CULong) : HDDEDATA;

external (stdcall) DdeClientTransaction(
    argument0 : PBYTE,
    argument1 : CULong,
    argument2 : HCONV,
    argument3 : HSZ,
    argument4 : UInt,
    argument5 : UInt,
    argument6 : CULong,
    argument7 : PDWORD) : HDDEDATA;

external (stdcall) DdeCmpStringHandles(
    argument0 : HSZ,
    argument1 : HSZ) : Int;

external (stdcall) DdeConnect(
    argument0 : CULong,
    argument1 : HSZ,
    argument2 : HSZ,
    argument3 : PCONVCONTEXT) : HCONV;

external (stdcall) DdeConnectList(
    argument0 : CULong,
    argument1 : HSZ,
    argument2 : HSZ,
    argument3 : HCONVLIST,
    argument4 : PCONVCONTEXT) : HCONVLIST;

external (stdcall) DdeCreateDataHandle(
    argument0 : CULong,
    argument1 : PBYTE,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : HSZ,
    argument5 : UInt,
    argument6 : UInt) : HDDEDATA;

external (stdcall) DdeCreateStringHandleA(
    argument0 : CULong,
    argument1 : LPCSTR,
    argument2 : Int) : HSZ;

external (stdcall) DdeCreateStringHandleW(
    argument0 : CULong,
    argument1 : LPCWSTR,
    argument2 : Int) : HSZ;

external (stdcall) DdeDisconnect(
    argument0 : HCONV) : Int;

external (stdcall) DdeDisconnectList(
    argument0 : HCONVLIST) : Int;

external (stdcall) DdeEnableCallback(
    argument0 : CULong,
    argument1 : HCONV,
    argument2 : UInt) : Int;

external (stdcall) DdeFreeDataHandle(
    argument0 : HDDEDATA) : Int;

external (stdcall) DdeFreeStringHandle(
    argument0 : CULong,
    argument1 : HSZ) : Int;

external (stdcall) DdeGetData(
    argument0 : HDDEDATA,
    argument1 : PBYTE,
    argument2 : CULong,
    argument3 : CULong) : CULong;

external (stdcall) DdeGetLastError(
    argument0 : CULong) : UInt;

external (stdcall) DdeImpersonateClient(
    argument0 : HCONV) : Int;

external (stdcall) DdeInitializeA(
    argument0 : PDWORD,
    argument1 : PFNCALLBACK,
    argument2 : CULong,
    argument3 : CULong) : UInt;

external (stdcall) DdeInitializeW(
    argument0 : PDWORD,
    argument1 : PFNCALLBACK,
    argument2 : CULong,
    argument3 : CULong) : UInt;

external (stdcall) DdeKeepStringHandle(
    argument0 : CULong,
    argument1 : HSZ) : Int;

external (stdcall) DdeNameService(
    argument0 : CULong,
    argument1 : HSZ,
    argument2 : HSZ,
    argument3 : UInt) : HDDEDATA;

external (stdcall) DdePostAdvise(
    argument0 : CULong,
    argument1 : HSZ,
    argument2 : HSZ) : Int;

external (stdcall) DdeQueryConvInfo(
    argument0 : HCONV,
    argument1 : CULong,
    argument2 : PCONVINFO) : UInt;

external (stdcall) DdeQueryNextServer(
    argument0 : HCONVLIST,
    argument1 : HCONV) : HCONV;

external (stdcall) DdeQueryStringA(
    argument0 : CULong,
    argument1 : HSZ,
    argument2 : LPSTR,
    argument3 : CULong,
    argument4 : Int) : CULong;

external (stdcall) DdeQueryStringW(
    argument0 : CULong,
    argument1 : HSZ,
    argument2 : LPWSTR,
    argument3 : CULong,
    argument4 : Int) : CULong;

external (stdcall) DdeReconnect(
    argument0 : HCONV) : HCONV;

external (stdcall) DdeSetUserHandle(
    argument0 : HCONV,
    argument1 : CULong,
    argument2 : CULong) : Int;

external (stdcall) DdeUnaccessData(
    argument0 : HDDEDATA) : Int;

external (stdcall) DdeUninitialize(
    argument0 : CULong) : Int;

record tagCRGB {
    bRed : CUChar;
    bGreen : CUChar;
    bBlue : CUChar;
    bExtra : CUChar;
}

static CRGB = tagCRGB;

static HIMC = CULong;

static HIMCC = CULong;

static LPHKL = Pointer[HKL];

record tagCOMPOSITIONFORM {
    dwStyle : CULong;
    ptCurrentPos : POINT;
    rcArea : RECT;
}

static COMPOSITIONFORM = tagCOMPOSITIONFORM;

static PCOMPOSITIONFORM = Pointer[tagCOMPOSITIONFORM];

static LPCOMPOSITIONFORM = Pointer[tagCOMPOSITIONFORM];

record tagCANDIDATEFORM {
    dwIndex : CULong;
    dwStyle : CULong;
    ptCurrentPos : POINT;
    rcArea : RECT;
}

static CANDIDATEFORM = tagCANDIDATEFORM;

static PCANDIDATEFORM = Pointer[tagCANDIDATEFORM];

static LPCANDIDATEFORM = Pointer[tagCANDIDATEFORM];

record tagCANDIDATELIST {
    dwSize : CULong;
    dwStyle : CULong;
    dwCount : CULong;
    dwSelection : CULong;
    dwPageStart : CULong;
    dwPageSize : CULong;
    dwOffset : Array[CULong,1];
}

static CANDIDATELIST = tagCANDIDATELIST;

static PCANDIDATELIST = Pointer[tagCANDIDATELIST];

static LPCANDIDATELIST = Pointer[tagCANDIDATELIST];

record tagIMECHARPOSITION {
    dwSize : CULong;
    dwCharPos : CULong;
    pt : POINT;
    cLineHeight : UInt;
    rcDocument : RECT;
}

static IMECHARPOSITION = tagIMECHARPOSITION;

static PIMECHARPOSITION = Pointer[tagIMECHARPOSITION];

record tagRECONVERTSTRING {
    dwSize : CULong;
    dwVersion : CULong;
    dwStrLen : CULong;
    dwStrOffset : CULong;
    dwCompStrLen : CULong;
    dwCompStrOffset : CULong;
    dwTargetStrLen : CULong;
    dwTargetStrOffset : CULong;
}

static RECONVERTSTRING = tagRECONVERTSTRING;

static PRECONVERTSTRING = Pointer[tagRECONVERTSTRING];

record tagREGISTERWORDA {
    lpReading : LPSTR;
    lpWord : LPSTR;
}

static REGISTERWORDA = tagREGISTERWORDA;

static PREGISTERWORDA = Pointer[tagREGISTERWORDA];

static LPREGISTERWORDA = Pointer[tagREGISTERWORDA];

record tagREGISTERWORDW {
    lpReading : LPWSTR;
    lpWord : LPWSTR;
}

static REGISTERWORDW = tagREGISTERWORDW;

static PREGISTERWORDW = Pointer[tagREGISTERWORDW];

static LPREGISTERWORDW = Pointer[tagREGISTERWORDW];

record tagSTYLEBUFA {
    dwStyle : CULong;
    szDescription : Array[CChar,32];
}

static STYLEBUFA = tagSTYLEBUFA;

static PSTYLEBUFA = Pointer[tagSTYLEBUFA];

static LPSTYLEBUFA = Pointer[tagSTYLEBUFA];

record tagSTYLEBUFW {
    dwStyle : CULong;
    szDescription : Array[UShort,32];
}

static STYLEBUFW = tagSTYLEBUFW;

static PSTYLEBUFW = Pointer[tagSTYLEBUFW];

static LPSTYLEBUFW = Pointer[tagSTYLEBUFW];

record tagIMEMENUITEMINFOA {
    cbSize : UInt;
    fType : UInt;
    fState : UInt;
    wID : UInt;
    hbmpChecked : HBITMAP;
    hbmpUnchecked : HBITMAP;
    dwItemData : CULong;
    szString : Array[CChar,80];
    hbmpItem : HBITMAP;
}

static IMEMENUITEMINFOA = tagIMEMENUITEMINFOA;

static PIMEMENUITEMINFOA = Pointer[tagIMEMENUITEMINFOA];

static LPIMEMENUITEMINFOA = Pointer[tagIMEMENUITEMINFOA];

record tagIMEMENUITEMINFOW {
    cbSize : UInt;
    fType : UInt;
    fState : UInt;
    wID : UInt;
    hbmpChecked : HBITMAP;
    hbmpUnchecked : HBITMAP;
    dwItemData : CULong;
    szString : Array[UShort,80];
    hbmpItem : HBITMAP;
}

static IMEMENUITEMINFOW = tagIMEMENUITEMINFOW;

static PIMEMENUITEMINFOW = Pointer[tagIMEMENUITEMINFOW];

static LPIMEMENUITEMINFOW = Pointer[tagIMEMENUITEMINFOW];

static REGISTERWORDENUMPROCA = StdCallCodePointer[Pointer[CChar],CULong,Pointer[CChar],RawPointer,Int];

static REGISTERWORDENUMPROCW = StdCallCodePointer[Pointer[UShort],CULong,Pointer[UShort],RawPointer,Int];

static REGISTERWORD = REGISTERWORDA;

static PREGISTERWORD = Pointer[REGISTERWORDA];

static LPREGISTERWORD = Pointer[REGISTERWORDA];

static STYLEBUF = STYLEBUFA;

static PSTYLEBUF = Pointer[STYLEBUFA];

static LPSTYLEBUF = Pointer[STYLEBUFA];

static IMEMENUITEMINFO = IMEMENUITEMINFOA;

static PIMEMENUITEMINFO = Pointer[IMEMENUITEMINFOA];

static LPIMEMENUITEMINFO = Pointer[IMEMENUITEMINFOA];

external (stdcall) ImmInstallIMEA(
    argument0 : LPCSTR,
    argument1 : LPCSTR) : HKL;

external (stdcall) ImmInstallIMEW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR) : HKL;

external (stdcall) ImmGetDefaultIMEWnd(
    argument0 : HWND) : HWND;

external (stdcall) ImmGetDescriptionA(
    argument0 : HKL,
    argument1 : LPSTR,
    argument2 : UInt) : UInt;

external (stdcall) ImmGetDescriptionW(
    argument0 : HKL,
    argument1 : LPWSTR,
    argument2 : UInt) : UInt;

external (stdcall) ImmGetIMEFileNameA(
    argument0 : HKL,
    argument1 : LPSTR,
    argument2 : UInt) : UInt;

external (stdcall) ImmGetIMEFileNameW(
    argument0 : HKL,
    argument1 : LPWSTR,
    argument2 : UInt) : UInt;

external (stdcall) ImmGetProperty(
    argument0 : HKL,
    argument1 : CULong) : CULong;

external (stdcall) ImmIsIME(
    argument0 : HKL) : Int;

external (stdcall) ImmSimulateHotKey(
    argument0 : HWND,
    argument1 : CULong) : Int;

external (stdcall) ImmCreateContext() : CULong;

external (stdcall) ImmDestroyContext(
    argument0 : CULong) : Int;

external (stdcall) ImmGetContext(
    argument0 : HWND) : CULong;

external (stdcall) ImmReleaseContext(
    argument0 : HWND,
    argument1 : CULong) : Int;

external (stdcall) ImmAssociateContext(
    argument0 : HWND,
    argument1 : CULong) : CULong;

external (stdcall) ImmGetCompositionStringA(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : PVOID,
    argument3 : CULong) : CLong;

external (stdcall) ImmGetCompositionStringW(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : PVOID,
    argument3 : CULong) : CLong;

external (stdcall) ImmSetCompositionStringA(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : PCVOID,
    argument3 : CULong,
    argument4 : PCVOID,
    argument5 : CULong) : Int;

external (stdcall) ImmSetCompositionStringW(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : PCVOID,
    argument3 : CULong,
    argument4 : PCVOID,
    argument5 : CULong) : Int;

external (stdcall) ImmGetCandidateListCountA(
    argument0 : CULong,
    argument1 : PDWORD) : CULong;

external (stdcall) ImmGetCandidateListCountW(
    argument0 : CULong,
    argument1 : PDWORD) : CULong;

external (stdcall) ImmGetCandidateListA(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : PCANDIDATELIST,
    argument3 : CULong) : CULong;

external (stdcall) ImmGetCandidateListW(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : PCANDIDATELIST,
    argument3 : CULong) : CULong;

external (stdcall) ImmGetGuideLineA(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : LPSTR,
    argument3 : CULong) : CULong;

external (stdcall) ImmGetGuideLineW(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : LPWSTR,
    argument3 : CULong) : CULong;

external (stdcall) ImmGetConversionStatus(
    argument0 : CULong,
    argument1 : LPDWORD,
    argument2 : PDWORD) : Int;

external (stdcall) ImmSetConversionStatus(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : CULong) : Int;

external (stdcall) ImmGetOpenStatus(
    argument0 : CULong) : Int;

external (stdcall) ImmSetOpenStatus(
    argument0 : CULong,
    argument1 : Int) : Int;

external (stdcall) ImmGetCompositionFontA(
    argument0 : CULong,
    argument1 : LPLOGFONTA) : Int;

external (stdcall) ImmGetCompositionFontW(
    argument0 : CULong,
    argument1 : LPLOGFONTW) : Int;

external (stdcall) ImmSetCompositionFontA(
    argument0 : CULong,
    argument1 : LPLOGFONTA) : Int;

external (stdcall) ImmSetCompositionFontW(
    argument0 : CULong,
    argument1 : LPLOGFONTW) : Int;

external (stdcall) ImmConfigureIMEA(
    argument0 : HKL,
    argument1 : HWND,
    argument2 : CULong,
    argument3 : PVOID) : Int;

external (stdcall) ImmConfigureIMEW(
    argument0 : HKL,
    argument1 : HWND,
    argument2 : CULong,
    argument3 : PVOID) : Int;

external (stdcall) ImmEscapeA(
    argument0 : HKL,
    argument1 : CULong,
    argument2 : UInt,
    argument3 : PVOID) : CLong;

external (stdcall) ImmEscapeW(
    argument0 : HKL,
    argument1 : CULong,
    argument2 : UInt,
    argument3 : PVOID) : CLong;

external (stdcall) ImmGetConversionListA(
    argument0 : HKL,
    argument1 : CULong,
    argument2 : LPCSTR,
    argument3 : PCANDIDATELIST,
    argument4 : CULong,
    argument5 : UInt) : CULong;

external (stdcall) ImmGetConversionListW(
    argument0 : HKL,
    argument1 : CULong,
    argument2 : LPCWSTR,
    argument3 : PCANDIDATELIST,
    argument4 : CULong,
    argument5 : UInt) : CULong;

external (stdcall) ImmNotifyIME(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : CULong) : Int;

external (stdcall) ImmGetStatusWindowPos(
    argument0 : CULong,
    argument1 : LPPOINT) : Int;

external (stdcall) ImmSetStatusWindowPos(
    argument0 : CULong,
    argument1 : LPPOINT) : Int;

external (stdcall) ImmGetCompositionWindow(
    argument0 : CULong,
    argument1 : PCOMPOSITIONFORM) : Int;

external (stdcall) ImmSetCompositionWindow(
    argument0 : CULong,
    argument1 : PCOMPOSITIONFORM) : Int;

external (stdcall) ImmGetCandidateWindow(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : PCANDIDATEFORM) : Int;

external (stdcall) ImmSetCandidateWindow(
    argument0 : CULong,
    argument1 : PCANDIDATEFORM) : Int;

external (stdcall) ImmIsUIMessageA(
    argument0 : HWND,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : CLong) : Int;

external (stdcall) ImmIsUIMessageW(
    argument0 : HWND,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : CLong) : Int;

external (stdcall) ImmGetVirtualKey(
    argument0 : HWND) : UInt;

external (stdcall) ImmRegisterWordA(
    argument0 : HKL,
    argument1 : LPCSTR,
    argument2 : CULong,
    argument3 : LPCSTR) : Int;

external (stdcall) ImmRegisterWordW(
    argument0 : HKL,
    argument1 : LPCWSTR,
    argument2 : CULong,
    argument3 : LPCWSTR) : Int;

external (stdcall) ImmUnregisterWordA(
    argument0 : HKL,
    argument1 : LPCSTR,
    argument2 : CULong,
    argument3 : LPCSTR) : Int;

external (stdcall) ImmUnregisterWordW(
    argument0 : HKL,
    argument1 : LPCWSTR,
    argument2 : CULong,
    argument3 : LPCWSTR) : Int;

external (stdcall) ImmGetRegisterWordStyleA(
    argument0 : HKL,
    argument1 : UInt,
    argument2 : PSTYLEBUFA) : UInt;

external (stdcall) ImmGetRegisterWordStyleW(
    argument0 : HKL,
    argument1 : UInt,
    argument2 : PSTYLEBUFW) : UInt;

external (stdcall) ImmEnumRegisterWordA(
    argument0 : HKL,
    argument1 : REGISTERWORDENUMPROCA,
    argument2 : LPCSTR,
    argument3 : CULong,
    argument4 : LPCSTR,
    argument5 : PVOID) : UInt;

external (stdcall) ImmEnumRegisterWordW(
    argument0 : HKL,
    argument1 : REGISTERWORDENUMPROCW,
    argument2 : LPCWSTR,
    argument3 : CULong,
    argument4 : LPCWSTR,
    argument5 : PVOID) : UInt;

external (stdcall) EnableEUDC(
    argument0 : Int) : Int;

external (stdcall) ImmDisableIME(
    argument0 : CULong) : Int;

external (stdcall) ImmGetImeMenuItemsA(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : LPIMEMENUITEMINFOA,
    argument4 : LPIMEMENUITEMINFOA,
    argument5 : CULong) : CULong;

external (stdcall) ImmGetImeMenuItemsW(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : LPIMEMENUITEMINFOW,
    argument4 : LPIMEMENUITEMINFOW,
    argument5 : CULong) : CULong;

external (stdcall) CopyLZFile(
    argument0 : Int,
    argument1 : Int) : CLong;

external (stdcall) GetExpandedNameA(
    argument0 : LPSTR,
    argument1 : LPSTR) : Int;

external (stdcall) GetExpandedNameW(
    argument0 : LPWSTR,
    argument1 : LPWSTR) : Int;

external (stdcall) LZClose(
    argument0 : Int) : Void;

external (stdcall) LZCopy(
    argument0 : Int,
    argument1 : Int) : CLong;

external (stdcall) LZDone() : Void;

external (stdcall) LZInit(
    argument0 : Int) : Int;

external (stdcall) LZOpenFileA(
    argument0 : LPSTR,
    argument1 : LPOFSTRUCT,
    argument2 : UShort) : Int;

external (stdcall) LZOpenFileW(
    argument0 : LPWSTR,
    argument1 : LPOFSTRUCT,
    argument2 : UShort) : Int;

external (stdcall) LZRead(
    argument0 : Int,
    argument1 : LPSTR,
    argument2 : Int) : Int;

external (stdcall) LZSeek(
    argument0 : Int,
    argument1 : CLong,
    argument2 : Int) : CLong;

external (stdcall) LZStart() : Int;

static MCIERROR = CULong;

static MCIDEVICEID = UInt;

static YIELDPROC = StdCallCodePointer[UInt,CULong,UInt];

static MMVERSION = UInt;

static MMRESULT = UInt;

record mmtime_tag {
    wType : UInt;
    u : AUnionType;
}

static MMTIME = mmtime_tag;

static PMMTIME = Pointer[mmtime_tag];

static LPMMTIME = Pointer[mmtime_tag];

record HDRVR__ {
    i : Int;
}

static HDRVR = Pointer[HDRVR__];

record tagDRVCONFIGINFO {
    dwDCISize : CULong;
    lpszDCISectionName : LPCWSTR;
    lpszDCIAliasName : LPCWSTR;
}

static DRVCONFIGINFO = tagDRVCONFIGINFO;

static PDRVCONFIGINFO = Pointer[tagDRVCONFIGINFO];

static LPDRVCONFIGINFO = Pointer[tagDRVCONFIGINFO];

record DRVCONFIGINFOEX {
    dwDCISize : CULong;
    lpszDCISectionName : LPCWSTR;
    lpszDCIAliasName : LPCWSTR;
    dnDevNode : CULong;
}

static DRVCONFIGINFOEX2 = DRVCONFIGINFOEX;

static PDRVCONFIGINFOEX = Pointer[DRVCONFIGINFOEX];

static LPDRVCONFIGINFOEX = Pointer[DRVCONFIGINFOEX];

static DRIVERPROC = StdCallCodePointer[CULong,Pointer[HDRVR__],UInt,CLong,CLong,CLong];

static LPDRVCALLBACK = StdCallCodePointer[Pointer[HDRVR__],UInt,CULong,CULong,CULong,Void];

static PDRVCALLBACK = StdCallCodePointer[Pointer[HDRVR__],UInt,CULong,CULong,CULong,Void];

record HWAVE__ {
    i : Int;
}

static HWAVE = Pointer[HWAVE__];

record HWAVEIN__ {
    i : Int;
}

static HWAVEIN = Pointer[HWAVEIN__];

record HWAVEOUT__ {
    i : Int;
}

static HWAVEOUT = Pointer[HWAVEOUT__];

static LPHWAVEIN = Pointer[HWAVEIN];

static LPHWAVEOUT = Pointer[HWAVEOUT];

static LPWAVECALLBACK = StdCallCodePointer[Pointer[HDRVR__],UInt,CULong,CULong,CULong,Void];

record wavehdr_tag {
    lpData : LPSTR;
    dwBufferLength : CULong;
    dwBytesRecorded : CULong;
    dwUser : CULong;
    dwFlags : CULong;
    dwLoops : CULong;
    lpNext : Pointer[wavehdr_tag];
    reserved : CULong;
}

static WAVEHDR = wavehdr_tag;

static PWAVEHDR = Pointer[wavehdr_tag];

static LPWAVEHDR = Pointer[wavehdr_tag];

record tagWAVEOUTCAPSA {
    wMid : UShort;
    wPid : UShort;
    vDriverVersion : UInt;
    szPname : Array[CChar,32];
    dwFormats : CULong;
    wChannels : UShort;
    wReserved1 : UShort;
    dwSupport : CULong;
}

static WAVEOUTCAPSA = tagWAVEOUTCAPSA;

static PWAVEOUTCAPSA = Pointer[tagWAVEOUTCAPSA];

static LPWAVEOUTCAPSA = Pointer[tagWAVEOUTCAPSA];

record tagWAVEOUTCAPSW {
    wMid : UShort;
    wPid : UShort;
    vDriverVersion : UInt;
    szPname : Array[UShort,32];
    dwFormats : CULong;
    wChannels : UShort;
    wReserved1 : UShort;
    dwSupport : CULong;
}

static WAVEOUTCAPSW = tagWAVEOUTCAPSW;

static PWAVEOUTCAPSW = Pointer[tagWAVEOUTCAPSW];

static LPWAVEOUTCAPSW = Pointer[tagWAVEOUTCAPSW];

record tagWAVEINCAPSA {
    wMid : UShort;
    wPid : UShort;
    vDriverVersion : UInt;
    szPname : Array[CChar,32];
    dwFormats : CULong;
    wChannels : UShort;
    wReserved1 : UShort;
}

static WAVEINCAPSA = tagWAVEINCAPSA;

static PWAVEINCAPSA = Pointer[tagWAVEINCAPSA];

static LPWAVEINCAPSA = Pointer[tagWAVEINCAPSA];

record tagWAVEINCAPSW {
    wMid : UShort;
    wPid : UShort;
    vDriverVersion : UInt;
    szPname : Array[UShort,32];
    dwFormats : CULong;
    wChannels : UShort;
    wReserved1 : UShort;
}

static WAVEINCAPSW = tagWAVEINCAPSW;

static PWAVEINCAPSW = Pointer[tagWAVEINCAPSW];

static LPWAVEINCAPSW = Pointer[tagWAVEINCAPSW];

record waveformat_tag {
    wFormatTag : UShort;
    nChannels : UShort;
    nSamplesPerSec : CULong;
    nAvgBytesPerSec : CULong;
    nBlockAlign : UShort;
}

static WAVEFORMAT = waveformat_tag;

static PWAVEFORMAT = Pointer[waveformat_tag];

static LPWAVEFORMAT = Pointer[waveformat_tag];

record pcmwaveformat_tag {
    wf : WAVEFORMAT;
    wBitsPerSample : UShort;
}

static PCMWAVEFORMAT = pcmwaveformat_tag;

static PPCMWAVEFORMAT = Pointer[pcmwaveformat_tag];

static LPPCMWAVEFORMAT = Pointer[pcmwaveformat_tag];

record tWAVEFORMATEX {
    wFormatTag : UShort;
    nChannels : UShort;
    nSamplesPerSec : CULong;
    nAvgBytesPerSec : CULong;
    nBlockAlign : UShort;
    wBitsPerSample : UShort;
    cbSize : UShort;
}

static WAVEFORMATEX = tWAVEFORMATEX;

static PWAVEFORMATEX = Pointer[tWAVEFORMATEX];

static LPWAVEFORMATEX = Pointer[tWAVEFORMATEX];

static LPCWAVEFORMATEX = Pointer[WAVEFORMATEX];

record HMIDI__ {
    i : Int;
}

static HMIDI = Pointer[HMIDI__];

record HMIDIIN__ {
    i : Int;
}

static HMIDIIN = Pointer[HMIDIIN__];

record HMIDIOUT__ {
    i : Int;
}

static HMIDIOUT = Pointer[HMIDIOUT__];

record HMIDISTRM__ {
    i : Int;
}

static HMIDISTRM = Pointer[HMIDISTRM__];

static LPHMIDI = Pointer[HMIDI];

static LPHMIDIIN = Pointer[HMIDIIN];

static LPHMIDIOUT = Pointer[HMIDIOUT];

static LPHMIDISTRM = Pointer[HMIDISTRM];

static LPMIDICALLBACK = StdCallCodePointer[Pointer[HDRVR__],UInt,CULong,CULong,CULong,Void];

static PATCHARRAY = Array[UShort,128];

static LPPATCHARRAY = Pointer[UShort];

static KEYARRAY = Array[UShort,128];

static LPKEYARRAY = Pointer[UShort];

record tagMIDIOUTCAPSA {
    wMid : UShort;
    wPid : UShort;
    vDriverVersion : UInt;
    szPname : Array[CChar,32];
    wTechnology : UShort;
    wVoices : UShort;
    wNotes : UShort;
    wChannelMask : UShort;
    dwSupport : CULong;
}

static MIDIOUTCAPSA = tagMIDIOUTCAPSA;

static PMIDIOUTCAPSA = Pointer[tagMIDIOUTCAPSA];

static LPMIDIOUTCAPSA = Pointer[tagMIDIOUTCAPSA];

record tagMIDIOUTCAPSW {
    wMid : UShort;
    wPid : UShort;
    vDriverVersion : UInt;
    szPname : Array[UShort,32];
    wTechnology : UShort;
    wVoices : UShort;
    wNotes : UShort;
    wChannelMask : UShort;
    dwSupport : CULong;
}

static MIDIOUTCAPSW = tagMIDIOUTCAPSW;

static PMIDIOUTCAPSW = Pointer[tagMIDIOUTCAPSW];

static LPMIDIOUTCAPSW = Pointer[tagMIDIOUTCAPSW];

record tagMIDIINCAPSA {
    wMid : UShort;
    wPid : UShort;
    vDriverVersion : UInt;
    szPname : Array[CChar,32];
    dwSupport : CULong;
}

static MIDIINCAPSA = tagMIDIINCAPSA;

static PMIDIINCAPSA = Pointer[tagMIDIINCAPSA];

static LPMIDIINCAPSA = Pointer[tagMIDIINCAPSA];

record tagMIDIINCAPSW {
    wMid : UShort;
    wPid : UShort;
    vDriverVersion : UInt;
    szPname : Array[UShort,32];
    dwSupport : CULong;
}

static MIDIINCAPSW = tagMIDIINCAPSW;

static PMIDIINCAPSW = Pointer[tagMIDIINCAPSW];

static NPMIDIINCAPSW = Pointer[tagMIDIINCAPSW];

static LPMIDIINCAPSW = Pointer[tagMIDIINCAPSW];

record midihdr_tag {
    lpData : LPSTR;
    dwBufferLength : CULong;
    dwBytesRecorded : CULong;
    dwUser : CULong;
    dwFlags : CULong;
    lpNext : Pointer[midihdr_tag];
    reserved : CULong;
    dwOffset : CULong;
    dwReserved : Array[CULong,8];
}

static MIDIHDR = midihdr_tag;

static PMIDIHDR = Pointer[midihdr_tag];

static LPMIDIHDR = Pointer[midihdr_tag];

record midievent_tag {
    dwDeltaTime : CULong;
    dwStreamID : CULong;
    dwEvent : CULong;
    dwParms : Array[CULong,1];
}

static MIDIEVENT = midievent_tag;

record midistrmbuffver_tag {
    dwVersion : CULong;
    dwMid : CULong;
    dwOEMVersion : CULong;
}

static MIDISTRMBUFFVER = midistrmbuffver_tag;

record midiproptimediv_tag {
    cbStruct : CULong;
    dwTimeDiv : CULong;
}

static MIDIPROPTIMEDIV = midiproptimediv_tag;

static LPMIDIPROPTIMEDIV = Pointer[midiproptimediv_tag];

record midiproptempo_tag {
    cbStruct : CULong;
    dwTempo : CULong;
}

static MIDIPROPTEMPO = midiproptempo_tag;

static LPMIDIPROPTEMPO = Pointer[midiproptempo_tag];

record tagAUXCAPSA {
    wMid : UShort;
    wPid : UShort;
    vDriverVersion : UInt;
    szPname : Array[CChar,32];
    wTechnology : UShort;
    wReserved1 : UShort;
    dwSupport : CULong;
}

static AUXCAPSA = tagAUXCAPSA;

static PAUXCAPSA = Pointer[tagAUXCAPSA];

static LPAUXCAPSA = Pointer[tagAUXCAPSA];

record tagAUXCAPSW {
    wMid : UShort;
    wPid : UShort;
    vDriverVersion : UInt;
    szPname : Array[UShort,32];
    wTechnology : UShort;
    wReserved1 : UShort;
    dwSupport : CULong;
}

static AUXCAPSW = tagAUXCAPSW;

static PAUXCAPSW = Pointer[tagAUXCAPSW];

static LPAUXCAPSW = Pointer[tagAUXCAPSW];

record HMIXEROBJ__ {
    i : Int;
}

static HMIXEROBJ = Pointer[HMIXEROBJ__];

static LPHMIXEROBJ = Pointer[HMIXEROBJ];

record HMIXER__ {
    i : Int;
}

static HMIXER = Pointer[HMIXER__];

static LPHMIXER = Pointer[HMIXER];

record tagMIXERCAPSA {
    wMid : UShort;
    wPid : UShort;
    vDriverVersion : UInt;
    szPname : Array[CChar,32];
    fdwSupport : CULong;
    cDestinations : CULong;
}

static MIXERCAPSA = tagMIXERCAPSA;

static PMIXERCAPSA = Pointer[tagMIXERCAPSA];

static LPMIXERCAPSA = Pointer[tagMIXERCAPSA];

record tagMIXERCAPSW {
    wMid : UShort;
    wPid : UShort;
    vDriverVersion : UInt;
    szPname : Array[UShort,32];
    fdwSupport : CULong;
    cDestinations : CULong;
}

static MIXERCAPSW = tagMIXERCAPSW;

static PMIXERCAPSW = Pointer[tagMIXERCAPSW];

static LPMIXERCAPSW = Pointer[tagMIXERCAPSW];

record tagMIXERLINEA {
    cbStruct : CULong;
    dwDestination : CULong;
    dwSource : CULong;
    dwLineID : CULong;
    fdwLine : CULong;
    dwUser : CULong;
    dwComponentType : CULong;
    cChannels : CULong;
    cConnections : CULong;
    cControls : CULong;
    szShortName : Array[CChar,16];
    szName : Array[CChar,64];
    Target : UnnamedRecord35;
}

record UnnamedRecord35 {
    dwType : CULong;
    dwDeviceID : CULong;
    wMid : UShort;
    wPid : UShort;
    vDriverVersion : UInt;
    szPname : Array[CChar,32];
}

static MIXERLINEA = tagMIXERLINEA;

static PMIXERLINEA = Pointer[tagMIXERLINEA];

static LPMIXERLINEA = Pointer[tagMIXERLINEA];

record tagMIXERLINEW {
    cbStruct : CULong;
    dwDestination : CULong;
    dwSource : CULong;
    dwLineID : CULong;
    fdwLine : CULong;
    dwUser : CULong;
    dwComponentType : CULong;
    cChannels : CULong;
    cConnections : CULong;
    cControls : CULong;
    szShortName : Array[UShort,16];
    szName : Array[UShort,64];
    Target : UnnamedRecord36;
}

record UnnamedRecord36 {
    dwType : CULong;
    dwDeviceID : CULong;
    wMid : UShort;
    wPid : UShort;
    vDriverVersion : UInt;
    szPname : Array[UShort,32];
}

static MIXERLINEW = tagMIXERLINEW;

static PMIXERLINEW = Pointer[tagMIXERLINEW];

static LPMIXERLINEW = Pointer[tagMIXERLINEW];

record tagMIXERCONTROLA {
    cbStruct : CULong;
    dwControlID : CULong;
    dwControlType : CULong;
    fdwControl : CULong;
    cMultipleItems : CULong;
    szShortName : Array[CChar,16];
    szName : Array[CChar,64];
    Bounds : AUnionType;
    Metrics : AUnionType;
}

static MIXERCONTROLA = tagMIXERCONTROLA;

static PMIXERCONTROLA = Pointer[tagMIXERCONTROLA];

static LPMIXERCONTROLA = Pointer[tagMIXERCONTROLA];

record tagMIXERCONTROLW {
    cbStruct : CULong;
    dwControlID : CULong;
    dwControlType : CULong;
    fdwControl : CULong;
    cMultipleItems : CULong;
    szShortName : Array[UShort,16];
    szName : Array[UShort,64];
    Bounds : AUnionType;
    Metrics : AUnionType;
}

static MIXERCONTROLW = tagMIXERCONTROLW;

static PMIXERCONTROLW = Pointer[tagMIXERCONTROLW];

static LPMIXERCONTROLW = Pointer[tagMIXERCONTROLW];

record tagMIXERLINECONTROLSA {
    cbStruct : CULong;
    dwLineID : CULong;
    unnamed_field2 : AUnionType;
    cControls : CULong;
    cbmxctrl : CULong;
    pamxctrl : LPMIXERCONTROLA;
}

static MIXERLINECONTROLSA = tagMIXERLINECONTROLSA;

static PMIXERLINECONTROLSA = Pointer[tagMIXERLINECONTROLSA];

static LPMIXERLINECONTROLSA = Pointer[tagMIXERLINECONTROLSA];

record tagMIXERLINECONTROLSW {
    cbStruct : CULong;
    dwLineID : CULong;
    unnamed_field2 : AUnionType;
    cControls : CULong;
    cbmxctrl : CULong;
    pamxctrl : LPMIXERCONTROLW;
}

static MIXERLINECONTROLSW = tagMIXERLINECONTROLSW;

static PMIXERLINECONTROLSW = Pointer[tagMIXERLINECONTROLSW];

static LPMIXERLINECONTROLSW = Pointer[tagMIXERLINECONTROLSW];

record tMIXERCONTROLDETAILS {
    cbStruct : CULong;
    dwControlID : CULong;
    cChannels : CULong;
    unnamed_field3 : AUnionType;
    cbDetails : CULong;
    paDetails : PVOID;
}

static MIXERCONTROLDETAILS = tMIXERCONTROLDETAILS;

static PMIXERCONTROLDETAILS = Pointer[tMIXERCONTROLDETAILS];

static LPMIXERCONTROLDETAILS = Pointer[tMIXERCONTROLDETAILS];

record tagMIXERCONTROLDETAILS_LISTTEXTA {
    dwParam1 : CULong;
    dwParam2 : CULong;
    szName : Array[CChar,64];
}

static MIXERCONTROLDETAILS_LISTTEXTA = tagMIXERCONTROLDETAILS_LISTTEXTA;

static PMIXERCONTROLDETAILS_LISTTEXTA = Pointer[tagMIXERCONTROLDETAILS_LISTTEXTA];

static LPMIXERCONTROLDETAILS_LISTTEXTA = Pointer[tagMIXERCONTROLDETAILS_LISTTEXTA];

record tagMIXERCONTROLDETAILS_LISTTEXTW {
    dwParam1 : CULong;
    dwParam2 : CULong;
    szName : Array[UShort,64];
}

static MIXERCONTROLDETAILS_LISTTEXTW = tagMIXERCONTROLDETAILS_LISTTEXTW;

static PMIXERCONTROLDETAILS_LISTTEXTW = Pointer[tagMIXERCONTROLDETAILS_LISTTEXTW];

static LPMIXERCONTROLDETAILS_LISTTEXTW = Pointer[tagMIXERCONTROLDETAILS_LISTTEXTW];

record tMIXERCONTROLDETAILS_BOOLEAN {
    fValue : CLong;
}

static MIXERCONTROLDETAILS_BOOLEAN = tMIXERCONTROLDETAILS_BOOLEAN;

static PMIXERCONTROLDETAILS_BOOLEAN = Pointer[tMIXERCONTROLDETAILS_BOOLEAN];

static LPMIXERCONTROLDETAILS_BOOLEAN = Pointer[tMIXERCONTROLDETAILS_BOOLEAN];

record tMIXERCONTROLDETAILS_SIGNED {
    lValue : CLong;
}

static MIXERCONTROLDETAILS_SIGNED = tMIXERCONTROLDETAILS_SIGNED;

static PMIXERCONTROLDETAILS_SIGNED = Pointer[tMIXERCONTROLDETAILS_SIGNED];

static LPMIXERCONTROLDETAILS_SIGNED = Pointer[tMIXERCONTROLDETAILS_SIGNED];

record tMIXERCONTROLDETAILS_UNSIGNED {
    dwValue : CULong;
}

static MIXERCONTROLDETAILS_UNSIGNED = tMIXERCONTROLDETAILS_UNSIGNED;

static PMIXERCONTROLDETAILS_UNSIGNED = Pointer[tMIXERCONTROLDETAILS_UNSIGNED];

static LPMIXERCONTROLDETAILS_UNSIGNED = Pointer[tMIXERCONTROLDETAILS_UNSIGNED];

static LPTIMECALLBACK = StdCallCodePointer[UInt,UInt,CULong,CULong,CULong,Void];

record timecaps_tag {
    wPeriodMin : UInt;
    wPeriodMax : UInt;
}

static TIMECAPS = timecaps_tag;

static PTIMECAPS = Pointer[timecaps_tag];

static LPTIMECAPS = Pointer[timecaps_tag];

record tagJOYCAPSA {
    wMid : UShort;
    wPid : UShort;
    szPname : Array[CChar,32];
    wXmin : UInt;
    wXmax : UInt;
    wYmin : UInt;
    wYmax : UInt;
    wZmin : UInt;
    wZmax : UInt;
    wNumButtons : UInt;
    wPeriodMin : UInt;
    wPeriodMax : UInt;
    wRmin : UInt;
    wRmax : UInt;
    wUmin : UInt;
    wUmax : UInt;
    wVmin : UInt;
    wVmax : UInt;
    wCaps : UInt;
    wMaxAxes : UInt;
    wNumAxes : UInt;
    wMaxButtons : UInt;
    szRegKey : Array[CChar,32];
    szOEMVxD : Array[CChar,260];
}

static JOYCAPSA = tagJOYCAPSA;

static PJOYCAPSA = Pointer[tagJOYCAPSA];

static LPJOYCAPSA = Pointer[tagJOYCAPSA];

record tagJOYCAPSW {
    wMid : UShort;
    wPid : UShort;
    szPname : Array[UShort,32];
    wXmin : UInt;
    wXmax : UInt;
    wYmin : UInt;
    wYmax : UInt;
    wZmin : UInt;
    wZmax : UInt;
    wNumButtons : UInt;
    wPeriodMin : UInt;
    wPeriodMax : UInt;
    wRmin : UInt;
    wRmax : UInt;
    wUmin : UInt;
    wUmax : UInt;
    wVmin : UInt;
    wVmax : UInt;
    wCaps : UInt;
    wMaxAxes : UInt;
    wNumAxes : UInt;
    wMaxButtons : UInt;
    szRegKey : Array[UShort,32];
    szOEMVxD : Array[UShort,260];
}

static JOYCAPSW = tagJOYCAPSW;

static PJOYCAPSW = Pointer[tagJOYCAPSW];

static LPJOYCAPSW = Pointer[tagJOYCAPSW];

record joyinfo_tag {
    wXpos : UInt;
    wYpos : UInt;
    wZpos : UInt;
    wButtons : UInt;
}

static JOYINFO = joyinfo_tag;

static PJOYINFO = Pointer[joyinfo_tag];

static LPJOYINFO = Pointer[joyinfo_tag];

record joyinfoex_tag {
    dwSize : CULong;
    dwFlags : CULong;
    dwXpos : CULong;
    dwYpos : CULong;
    dwZpos : CULong;
    dwRpos : CULong;
    dwUpos : CULong;
    dwVpos : CULong;
    dwButtons : CULong;
    dwButtonNumber : CULong;
    dwPOV : CULong;
    dwReserved1 : CULong;
    dwReserved2 : CULong;
}

static JOYINFOEX = joyinfoex_tag;

static PJOYINFOEX = Pointer[joyinfoex_tag];

static LPJOYINFOEX = Pointer[joyinfoex_tag];

static FOURCC = CULong;

static HPSTR = Pointer[CChar];

record HMMIO__ {
    i : Int;
}

static HMMIO = Pointer[HMMIO__];

static LPMMIOPROC = StdCallCodePointer[Pointer[CChar],UInt,CLong,CLong,CLong];

record _MMIOINFO {
    dwFlags : CULong;
    fccIOProc : CULong;
    pIOProc : LPMMIOPROC;
    wErrorRet : UInt;
    htask : HTASK;
    cchBuffer : CLong;
    pchBuffer : HPSTR;
    pchNext : HPSTR;
    pchEndRead : HPSTR;
    pchEndWrite : HPSTR;
    lBufOffset : CLong;
    lDiskOffset : CLong;
    adwInfo : Array[CULong,3];
    dwReserved1 : CULong;
    dwReserved2 : CULong;
    hmmio : HMMIO;
}

static MMIOINFO = _MMIOINFO;

static PMMIOINFO = Pointer[_MMIOINFO];

static LPMMIOINFO = Pointer[_MMIOINFO];

static LPCMMIOINFO = Pointer[MMIOINFO];

record _MMCKINFO {
    ckid : CULong;
    cksize : CULong;
    fccType : CULong;
    dwDataOffset : CULong;
    dwFlags : CULong;
}

static MMCKINFO = _MMCKINFO;

static PMMCKINFO = Pointer[_MMCKINFO];

static LPMMCKINFO = Pointer[_MMCKINFO];

static LPCMMCKINFO = Pointer[MMCKINFO];

record tagMCI_GENERIC_PARMS {
    dwCallback : CULong;
}

static MCI_GENERIC_PARMS = tagMCI_GENERIC_PARMS;

static PMCI_GENERIC_PARMS = Pointer[tagMCI_GENERIC_PARMS];

static LPMCI_GENERIC_PARMS = Pointer[tagMCI_GENERIC_PARMS];

record tagMCI_OPEN_PARMSA {
    dwCallback : CULong;
    wDeviceID : UInt;
    lpstrDeviceType : LPCSTR;
    lpstrElementName : LPCSTR;
    lpstrAlias : LPCSTR;
}

static MCI_OPEN_PARMSA = tagMCI_OPEN_PARMSA;

static PMCI_OPEN_PARMSA = Pointer[tagMCI_OPEN_PARMSA];

static LPMCI_OPEN_PARMSA = Pointer[tagMCI_OPEN_PARMSA];

record tagMCI_OPEN_PARMSW {
    dwCallback : CULong;
    wDeviceID : UInt;
    lpstrDeviceType : LPCWSTR;
    lpstrElementName : LPCWSTR;
    lpstrAlias : LPCWSTR;
}

static MCI_OPEN_PARMSW = tagMCI_OPEN_PARMSW;

static PMCI_OPEN_PARMSW = Pointer[tagMCI_OPEN_PARMSW];

static LPMCI_OPEN_PARMSW = Pointer[tagMCI_OPEN_PARMSW];

record tagMCI_PLAY_PARMS {
    dwCallback : CULong;
    dwFrom : CULong;
    dwTo : CULong;
}

static MCI_PLAY_PARMS = tagMCI_PLAY_PARMS;

static PMCI_PLAY_PARMS = Pointer[tagMCI_PLAY_PARMS];

static LPMCI_PLAY_PARMS = Pointer[tagMCI_PLAY_PARMS];

record tagMCI_SEEK_PARMS {
    dwCallback : CULong;
    dwTo : CULong;
}

static MCI_SEEK_PARMS = tagMCI_SEEK_PARMS;

static PMCI_SEEK_PARMS = Pointer[tagMCI_SEEK_PARMS];

static LPMCI_SEEK_PARMS = Pointer[tagMCI_SEEK_PARMS];

record tagMCI_STATUS_PARMS {
    dwCallback : CULong;
    dwReturn : CULong;
    dwItem : CULong;
    dwTrack : CULong;
}

static MCI_STATUS_PARMS = tagMCI_STATUS_PARMS;

static PMCI_STATUS_PARMS = Pointer[tagMCI_STATUS_PARMS];

static LPMCI_STATUS_PARMS = Pointer[tagMCI_STATUS_PARMS];

record tagMCI_INFO_PARMSA {
    dwCallback : CULong;
    lpstrReturn : LPSTR;
    dwRetSize : CULong;
}

static MCI_INFO_PARMSA = tagMCI_INFO_PARMSA;

static LPMCI_INFO_PARMSA = Pointer[tagMCI_INFO_PARMSA];

record tagMCI_INFO_PARMSW {
    dwCallback : CULong;
    lpstrReturn : LPWSTR;
    dwRetSize : CULong;
}

static MCI_INFO_PARMSW = tagMCI_INFO_PARMSW;

static LPMCI_INFO_PARMSW = Pointer[tagMCI_INFO_PARMSW];

record tagMCI_GETDEVCAPS_PARMS {
    dwCallback : CULong;
    dwReturn : CULong;
    dwItem : CULong;
}

static MCI_GETDEVCAPS_PARMS = tagMCI_GETDEVCAPS_PARMS;

static PMCI_GETDEVCAPS_PARMS = Pointer[tagMCI_GETDEVCAPS_PARMS];

static LPMCI_GETDEVCAPS_PARMS = Pointer[tagMCI_GETDEVCAPS_PARMS];

record tagMCI_SYSINFO_PARMSA {
    dwCallback : CULong;
    lpstrReturn : LPSTR;
    dwRetSize : CULong;
    dwNumber : CULong;
    wDeviceType : UInt;
}

static MCI_SYSINFO_PARMSA = tagMCI_SYSINFO_PARMSA;

static PMCI_SYSINFO_PARMSA = Pointer[tagMCI_SYSINFO_PARMSA];

static LPMCI_SYSINFO_PARMSA = Pointer[tagMCI_SYSINFO_PARMSA];

record tagMCI_SYSINFO_PARMSW {
    dwCallback : CULong;
    lpstrReturn : LPWSTR;
    dwRetSize : CULong;
    dwNumber : CULong;
    wDeviceType : UInt;
}

static MCI_SYSINFO_PARMSW = tagMCI_SYSINFO_PARMSW;

static PMCI_SYSINFO_PARMSW = Pointer[tagMCI_SYSINFO_PARMSW];

static LPMCI_SYSINFO_PARMSW = Pointer[tagMCI_SYSINFO_PARMSW];

record tagMCI_SET_PARMS {
    dwCallback : CULong;
    dwTimeFormat : CULong;
    dwAudio : CULong;
}

static MCI_SET_PARMS = tagMCI_SET_PARMS;

static PMCI_SET_PARMS = Pointer[tagMCI_SET_PARMS];

static LPMCI_SET_PARMS = Pointer[tagMCI_SET_PARMS];

record tagMCI_BREAK_PARMS {
    dwCallback : CULong;
    nVirtKey : Int;
    hwndBreak : HWND;
}

static MCI_BREAK_PARMS = tagMCI_BREAK_PARMS;

static PMCI_BREAK_PARMS = Pointer[tagMCI_BREAK_PARMS];

static LPMCI_BREAK_PARMS = Pointer[tagMCI_BREAK_PARMS];

record tagMCI_SAVE_PARMSA {
    dwCallback : CULong;
    lpfilename : LPCSTR;
}

static MCI_SAVE_PARMSA = tagMCI_SAVE_PARMSA;

static PMCI_SAVE_PARMSA = Pointer[tagMCI_SAVE_PARMSA];

static LPMCI_SAVE_PARMSA = Pointer[tagMCI_SAVE_PARMSA];

record tagMCI_SAVE_PARMSW {
    dwCallback : CULong;
    lpfilename : LPCWSTR;
}

static MCI_SAVE_PARMSW = tagMCI_SAVE_PARMSW;

static PMCI_SAVE_PARMSW = Pointer[tagMCI_SAVE_PARMSW];

static LPMCI_SAVE_PARMSW = Pointer[tagMCI_SAVE_PARMSW];

record tagMCI_LOAD_PARMSA {
    dwCallback : CULong;
    lpfilename : LPCSTR;
}

static MCI_LOAD_PARMSA = tagMCI_LOAD_PARMSA;

static PMCI_LOAD_PARMSA = Pointer[tagMCI_LOAD_PARMSA];

static LPMCI_LOAD_PARMSA = Pointer[tagMCI_LOAD_PARMSA];

record tagMCI_LOAD_PARMSW {
    dwCallback : CULong;
    lpfilename : LPCWSTR;
}

static MCI_LOAD_PARMSW = tagMCI_LOAD_PARMSW;

static PMCI_LOAD_PARMSW = Pointer[tagMCI_LOAD_PARMSW];

static LPMCI_LOAD_PARMSW = Pointer[tagMCI_LOAD_PARMSW];

record tagMCI_RECORD_PARMS {
    dwCallback : CULong;
    dwFrom : CULong;
    dwTo : CULong;
}

static MCI_RECORD_PARMS = tagMCI_RECORD_PARMS;

static LPMCI_RECORD_PARMS = Pointer[tagMCI_RECORD_PARMS];

record tagMCI_VD_PLAY_PARMS {
    dwCallback : CULong;
    dwFrom : CULong;
    dwTo : CULong;
    dwSpeed : CULong;
}

static MCI_VD_PLAY_PARMS = tagMCI_VD_PLAY_PARMS;

static PMCI_VD_PLAY_PARMS = Pointer[tagMCI_VD_PLAY_PARMS];

static LPMCI_VD_PLAY_PARMS = Pointer[tagMCI_VD_PLAY_PARMS];

record tagMCI_VD_STEP_PARMS {
    dwCallback : CULong;
    dwFrames : CULong;
}

static MCI_VD_STEP_PARMS = tagMCI_VD_STEP_PARMS;

static PMCI_VD_STEP_PARMS = Pointer[tagMCI_VD_STEP_PARMS];

static LPMCI_VD_STEP_PARMS = Pointer[tagMCI_VD_STEP_PARMS];

record tagMCI_VD_ESCAPE_PARMSA {
    dwCallback : CULong;
    lpstrCommand : LPCSTR;
}

static MCI_VD_ESCAPE_PARMSA = tagMCI_VD_ESCAPE_PARMSA;

static PMCI_VD_ESCAPE_PARMSA = Pointer[tagMCI_VD_ESCAPE_PARMSA];

static LPMCI_VD_ESCAPE_PARMSA = Pointer[tagMCI_VD_ESCAPE_PARMSA];

record tagMCI_VD_ESCAPE_PARMSW {
    dwCallback : CULong;
    lpstrCommand : LPCWSTR;
}

static MCI_VD_ESCAPE_PARMSW = tagMCI_VD_ESCAPE_PARMSW;

static PMCI_VD_ESCAPE_PARMSW = Pointer[tagMCI_VD_ESCAPE_PARMSW];

static LPMCI_VD_ESCAPE_PARMSW = Pointer[tagMCI_VD_ESCAPE_PARMSW];

record tagMCI_WAVE_OPEN_PARMSA {
    dwCallback : CULong;
    wDeviceID : UInt;
    lpstrDeviceType : LPCSTR;
    lpstrElementName : LPCSTR;
    lpstrAlias : LPCSTR;
    dwBufferSeconds : CULong;
}

static MCI_WAVE_OPEN_PARMSA = tagMCI_WAVE_OPEN_PARMSA;

static PMCI_WAVE_OPEN_PARMSA = Pointer[tagMCI_WAVE_OPEN_PARMSA];

static LPMCI_WAVE_OPEN_PARMSA = Pointer[tagMCI_WAVE_OPEN_PARMSA];

record tagMCI_WAVE_OPEN_PARMSW {
    dwCallback : CULong;
    wDeviceID : UInt;
    lpstrDeviceType : LPCWSTR;
    lpstrElementName : LPCWSTR;
    lpstrAlias : LPCWSTR;
    dwBufferSeconds : CULong;
}

static MCI_WAVE_OPEN_PARMSW = tagMCI_WAVE_OPEN_PARMSW;

static PMCI_WAVE_OPEN_PARMSW = Pointer[tagMCI_WAVE_OPEN_PARMSW];

static LPMCI_WAVE_OPEN_PARMSW = Pointer[tagMCI_WAVE_OPEN_PARMSW];

record tagMCI_WAVE_DELETE_PARMS {
    dwCallback : CULong;
    dwFrom : CULong;
    dwTo : CULong;
}

static MCI_WAVE_DELETE_PARMS = tagMCI_WAVE_DELETE_PARMS;

static PMCI_WAVE_DELETE_PARMS = Pointer[tagMCI_WAVE_DELETE_PARMS];

static LPMCI_WAVE_DELETE_PARMS = Pointer[tagMCI_WAVE_DELETE_PARMS];

record tagMCI_WAVE_SET_PARMS {
    dwCallback : CULong;
    dwTimeFormat : CULong;
    dwAudio : CULong;
    wInput : UInt;
    wOutput : UInt;
    wFormatTag : UShort;
    wReserved2 : UShort;
    nChannels : UShort;
    wReserved3 : UShort;
    nSamplesPerSec : CULong;
    nAvgBytesPerSec : CULong;
    nBlockAlign : UShort;
    wReserved4 : UShort;
    wBitsPerSample : UShort;
    wReserved5 : UShort;
}

static MCI_WAVE_SET_PARMS = tagMCI_WAVE_SET_PARMS;

static PMCI_WAVE_SET_PARMS = Pointer[tagMCI_WAVE_SET_PARMS];

static LPMCI_WAVE_SET_PARMS = Pointer[tagMCI_WAVE_SET_PARMS];

external (stdcall) CloseDriver(
    argument0 : HDRVR,
    argument1 : CLong,
    argument2 : CLong) : CLong;

external (stdcall) OpenDriver(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR,
    argument2 : CLong) : HDRVR;

external (stdcall) SendDriverMessage(
    argument0 : HDRVR,
    argument1 : UInt,
    argument2 : CLong,
    argument3 : CLong) : CLong;

external (stdcall) DrvGetModuleHandle(
    argument0 : HDRVR) : HMODULE;

external (stdcall) GetDriverModuleHandle(
    argument0 : HDRVR) : HMODULE;

external (stdcall) DefDriverProc(
    argument0 : CULong,
    argument1 : HDRVR,
    argument2 : UInt,
    argument3 : CLong,
    argument4 : CLong) : CLong;

external (stdcall) mmsystemGetVersion() : UInt;

external (stdcall) sndPlaySoundA(
    argument0 : LPCSTR,
    argument1 : UInt) : Int;

external (stdcall) sndPlaySoundW(
    argument0 : LPCWSTR,
    argument1 : UInt) : Int;

external (stdcall) PlaySoundA(
    argument0 : LPCSTR,
    argument1 : HMODULE,
    argument2 : CULong) : Int;

external (stdcall) PlaySoundW(
    argument0 : LPCWSTR,
    argument1 : HMODULE,
    argument2 : CULong) : Int;

external (stdcall) waveOutGetNumDevs() : UInt;

external (stdcall) waveOutGetDevCapsA(
    argument0 : UInt,
    argument1 : LPWAVEOUTCAPSA,
    argument2 : UInt) : UInt;

external (stdcall) waveOutGetDevCapsW(
    argument0 : UInt,
    argument1 : LPWAVEOUTCAPSW,
    argument2 : UInt) : UInt;

external (stdcall) waveOutGetVolume(
    argument0 : HWAVEOUT,
    argument1 : PDWORD) : UInt;

external (stdcall) waveOutSetVolume(
    argument0 : HWAVEOUT,
    argument1 : CULong) : UInt;

external (stdcall) waveOutGetErrorTextA(
    argument0 : UInt,
    argument1 : LPSTR,
    argument2 : UInt) : UInt;

external (stdcall) waveOutGetErrorTextW(
    argument0 : UInt,
    argument1 : LPWSTR,
    argument2 : UInt) : UInt;

external (stdcall) waveOutOpen(
    argument0 : LPHWAVEOUT,
    argument1 : UInt,
    argument2 : LPCWAVEFORMATEX,
    argument3 : CULong,
    argument4 : CULong,
    argument5 : CULong) : UInt;

external (stdcall) waveOutClose(
    argument0 : HWAVEOUT) : UInt;

external (stdcall) waveOutPrepareHeader(
    argument0 : HWAVEOUT,
    argument1 : LPWAVEHDR,
    argument2 : UInt) : UInt;

external (stdcall) waveOutUnprepareHeader(
    argument0 : HWAVEOUT,
    argument1 : LPWAVEHDR,
    argument2 : UInt) : UInt;

external (stdcall) waveOutWrite(
    argument0 : HWAVEOUT,
    argument1 : LPWAVEHDR,
    argument2 : UInt) : UInt;

external (stdcall) waveOutPause(
    argument0 : HWAVEOUT) : UInt;

external (stdcall) waveOutRestart(
    argument0 : HWAVEOUT) : UInt;

external (stdcall) waveOutReset(
    argument0 : HWAVEOUT) : UInt;

external (stdcall) waveOutBreakLoop(
    argument0 : HWAVEOUT) : UInt;

external (stdcall) waveOutGetPosition(
    argument0 : HWAVEOUT,
    argument1 : LPMMTIME,
    argument2 : UInt) : UInt;

external (stdcall) waveOutGetPitch(
    argument0 : HWAVEOUT,
    argument1 : PDWORD) : UInt;

external (stdcall) waveOutSetPitch(
    argument0 : HWAVEOUT,
    argument1 : CULong) : UInt;

external (stdcall) waveOutGetPlaybackRate(
    argument0 : HWAVEOUT,
    argument1 : PDWORD) : UInt;

external (stdcall) waveOutSetPlaybackRate(
    argument0 : HWAVEOUT,
    argument1 : CULong) : UInt;

external (stdcall) waveOutGetID(
    argument0 : HWAVEOUT,
    argument1 : LPUINT) : UInt;

external (stdcall) waveOutMessage(
    argument0 : HWAVEOUT,
    argument1 : UInt,
    argument2 : CULong,
    argument3 : CULong) : UInt;

external (stdcall) waveInGetNumDevs() : UInt;

external (stdcall) waveInGetDevCapsA(
    argument0 : UInt,
    argument1 : LPWAVEINCAPSA,
    argument2 : UInt) : UInt;

external (stdcall) waveInGetDevCapsW(
    argument0 : UInt,
    argument1 : LPWAVEINCAPSW,
    argument2 : UInt) : UInt;

external (stdcall) waveInGetErrorTextA(
    argument0 : UInt,
    argument1 : LPSTR,
    argument2 : UInt) : UInt;

external (stdcall) waveInGetErrorTextW(
    argument0 : UInt,
    argument1 : LPWSTR,
    argument2 : UInt) : UInt;

external (stdcall) waveInOpen(
    argument0 : LPHWAVEIN,
    argument1 : UInt,
    argument2 : LPCWAVEFORMATEX,
    argument3 : CULong,
    argument4 : CULong,
    argument5 : CULong) : UInt;

external (stdcall) waveInClose(
    argument0 : HWAVEIN) : UInt;

external (stdcall) waveInPrepareHeader(
    argument0 : HWAVEIN,
    argument1 : LPWAVEHDR,
    argument2 : UInt) : UInt;

external (stdcall) waveInUnprepareHeader(
    argument0 : HWAVEIN,
    argument1 : LPWAVEHDR,
    argument2 : UInt) : UInt;

external (stdcall) waveInAddBuffer(
    argument0 : HWAVEIN,
    argument1 : LPWAVEHDR,
    argument2 : UInt) : UInt;

external (stdcall) waveInStart(
    argument0 : HWAVEIN) : UInt;

external (stdcall) waveInStop(
    argument0 : HWAVEIN) : UInt;

external (stdcall) waveInReset(
    argument0 : HWAVEIN) : UInt;

external (stdcall) waveInGetPosition(
    argument0 : HWAVEIN,
    argument1 : LPMMTIME,
    argument2 : UInt) : UInt;

external (stdcall) waveInGetID(
    argument0 : HWAVEIN,
    argument1 : LPUINT) : UInt;

external (stdcall) waveInMessage(
    argument0 : HWAVEIN,
    argument1 : UInt,
    argument2 : CULong,
    argument3 : CULong) : UInt;

external (stdcall) midiOutGetNumDevs() : UInt;

external (stdcall) midiStreamOpen(
    argument0 : LPHMIDISTRM,
    argument1 : LPUINT,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : CULong,
    argument5 : CULong) : UInt;

external (stdcall) midiStreamClose(
    argument0 : HMIDISTRM) : UInt;

external (stdcall) midiStreamProperty(
    argument0 : HMIDISTRM,
    argument1 : LPBYTE,
    argument2 : CULong) : UInt;

external (stdcall) midiStreamPosition(
    argument0 : HMIDISTRM,
    argument1 : LPMMTIME,
    argument2 : UInt) : UInt;

external (stdcall) midiStreamOut(
    argument0 : HMIDISTRM,
    argument1 : LPMIDIHDR,
    argument2 : UInt) : UInt;

external (stdcall) midiStreamPause(
    argument0 : HMIDISTRM) : UInt;

external (stdcall) midiStreamRestart(
    argument0 : HMIDISTRM) : UInt;

external (stdcall) midiStreamStop(
    argument0 : HMIDISTRM) : UInt;

external (stdcall) midiConnect(
    argument0 : HMIDI,
    argument1 : HMIDIOUT,
    argument2 : PVOID) : UInt;

external (stdcall) midiDisconnect(
    argument0 : HMIDI,
    argument1 : HMIDIOUT,
    argument2 : PVOID) : UInt;

external (stdcall) midiOutGetDevCapsA(
    argument0 : UInt,
    argument1 : LPMIDIOUTCAPSA,
    argument2 : UInt) : UInt;

external (stdcall) midiOutGetDevCapsW(
    argument0 : UInt,
    argument1 : LPMIDIOUTCAPSW,
    argument2 : UInt) : UInt;

external (stdcall) midiOutGetVolume(
    argument0 : HMIDIOUT,
    argument1 : PDWORD) : UInt;

external (stdcall) midiOutSetVolume(
    argument0 : HMIDIOUT,
    argument1 : CULong) : UInt;

external (stdcall) midiOutGetErrorTextA(
    argument0 : UInt,
    argument1 : LPSTR,
    argument2 : UInt) : UInt;

external (stdcall) midiOutGetErrorTextW(
    argument0 : UInt,
    argument1 : LPWSTR,
    argument2 : UInt) : UInt;

external (stdcall) midiOutOpen(
    argument0 : LPHMIDIOUT,
    argument1 : UInt,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : CULong) : UInt;

external (stdcall) midiOutClose(
    argument0 : HMIDIOUT) : UInt;

external (stdcall) midiOutPrepareHeader(
    argument0 : HMIDIOUT,
    argument1 : LPMIDIHDR,
    argument2 : UInt) : UInt;

external (stdcall) midiOutUnprepareHeader(
    argument0 : HMIDIOUT,
    argument1 : LPMIDIHDR,
    argument2 : UInt) : UInt;

external (stdcall) midiOutShortMsg(
    argument0 : HMIDIOUT,
    argument1 : CULong) : UInt;

external (stdcall) midiOutLongMsg(
    argument0 : HMIDIOUT,
    argument1 : LPMIDIHDR,
    argument2 : UInt) : UInt;

external (stdcall) midiOutReset(
    argument0 : HMIDIOUT) : UInt;

external (stdcall) midiOutCachePatches(
    argument0 : HMIDIOUT,
    argument1 : UInt,
    argument2 : LPWORD,
    argument3 : UInt) : UInt;

external (stdcall) midiOutCacheDrumPatches(
    argument0 : HMIDIOUT,
    argument1 : UInt,
    argument2 : LPWORD,
    argument3 : UInt) : UInt;

external (stdcall) midiOutGetID(
    argument0 : HMIDIOUT,
    argument1 : LPUINT) : UInt;

external (stdcall) midiOutMessage(
    argument0 : HMIDIOUT,
    argument1 : UInt,
    argument2 : CULong,
    argument3 : CULong) : UInt;

external (stdcall) midiInGetNumDevs() : UInt;

external (stdcall) midiInGetDevCapsA(
    argument0 : UInt,
    argument1 : LPMIDIINCAPSA,
    argument2 : UInt) : UInt;

external (stdcall) midiInGetDevCapsW(
    argument0 : UInt,
    argument1 : LPMIDIINCAPSW,
    argument2 : UInt) : UInt;

external (stdcall) midiInGetErrorTextA(
    argument0 : UInt,
    argument1 : LPSTR,
    argument2 : UInt) : UInt;

external (stdcall) midiInGetErrorTextW(
    argument0 : UInt,
    argument1 : LPWSTR,
    argument2 : UInt) : UInt;

external (stdcall) midiInOpen(
    argument0 : LPHMIDIIN,
    argument1 : UInt,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : CULong) : UInt;

external (stdcall) midiInClose(
    argument0 : HMIDIIN) : UInt;

external (stdcall) midiInPrepareHeader(
    argument0 : HMIDIIN,
    argument1 : LPMIDIHDR,
    argument2 : UInt) : UInt;

external (stdcall) midiInUnprepareHeader(
    argument0 : HMIDIIN,
    argument1 : LPMIDIHDR,
    argument2 : UInt) : UInt;

external (stdcall) midiInAddBuffer(
    argument0 : HMIDIIN,
    argument1 : LPMIDIHDR,
    argument2 : UInt) : UInt;

external (stdcall) midiInStart(
    argument0 : HMIDIIN) : UInt;

external (stdcall) midiInStop(
    argument0 : HMIDIIN) : UInt;

external (stdcall) midiInReset(
    argument0 : HMIDIIN) : UInt;

external (stdcall) midiInGetID(
    argument0 : HMIDIIN,
    argument1 : LPUINT) : UInt;

external (stdcall) midiInMessage(
    argument0 : HMIDIIN,
    argument1 : UInt,
    argument2 : CULong,
    argument3 : CULong) : UInt;

external (stdcall) auxGetNumDevs() : UInt;

external (stdcall) auxGetDevCapsA(
    argument0 : UInt,
    argument1 : LPAUXCAPSA,
    argument2 : UInt) : UInt;

external (stdcall) auxGetDevCapsW(
    argument0 : UInt,
    argument1 : LPAUXCAPSW,
    argument2 : UInt) : UInt;

external (stdcall) auxSetVolume(
    argument0 : UInt,
    argument1 : CULong) : UInt;

external (stdcall) auxGetVolume(
    argument0 : UInt,
    argument1 : PDWORD) : UInt;

external (stdcall) auxOutMessage(
    argument0 : UInt,
    argument1 : UInt,
    argument2 : CULong,
    argument3 : CULong) : UInt;

external (stdcall) mixerGetNumDevs() : UInt;

external (stdcall) mixerGetDevCapsA(
    argument0 : UInt,
    argument1 : LPMIXERCAPSA,
    argument2 : UInt) : UInt;

external (stdcall) mixerGetDevCapsW(
    argument0 : UInt,
    argument1 : LPMIXERCAPSW,
    argument2 : UInt) : UInt;

external (stdcall) mixerOpen(
    argument0 : LPHMIXER,
    argument1 : UInt,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : CULong) : UInt;

external (stdcall) mixerClose(
    argument0 : HMIXER) : UInt;

external (stdcall) mixerMessage(
    argument0 : HMIXER,
    argument1 : UInt,
    argument2 : CULong,
    argument3 : CULong) : CULong;

external (stdcall) mixerGetLineInfoA(
    argument0 : HMIXEROBJ,
    argument1 : LPMIXERLINEA,
    argument2 : CULong) : UInt;

external (stdcall) mixerGetLineInfoW(
    argument0 : HMIXEROBJ,
    argument1 : LPMIXERLINEW,
    argument2 : CULong) : UInt;

external (stdcall) mixerGetID(
    argument0 : HMIXEROBJ,
    argument1 : PUINT,
    argument2 : CULong) : UInt;

external (stdcall) mixerGetLineControlsA(
    argument0 : HMIXEROBJ,
    argument1 : LPMIXERLINECONTROLSA,
    argument2 : CULong) : UInt;

external (stdcall) mixerGetLineControlsW(
    argument0 : HMIXEROBJ,
    argument1 : LPMIXERLINECONTROLSW,
    argument2 : CULong) : UInt;

external (stdcall) mixerGetControlDetailsA(
    argument0 : HMIXEROBJ,
    argument1 : LPMIXERCONTROLDETAILS,
    argument2 : CULong) : UInt;

external (stdcall) mixerGetControlDetailsW(
    argument0 : HMIXEROBJ,
    argument1 : LPMIXERCONTROLDETAILS,
    argument2 : CULong) : UInt;

external (stdcall) mixerSetControlDetails(
    argument0 : HMIXEROBJ,
    argument1 : LPMIXERCONTROLDETAILS,
    argument2 : CULong) : UInt;

external (stdcall) timeGetSystemTime(
    argument0 : LPMMTIME,
    argument1 : UInt) : UInt;

external (stdcall) timeGetTime() : CULong;

external (stdcall) timeSetEvent(
    argument0 : UInt,
    argument1 : UInt,
    argument2 : LPTIMECALLBACK,
    argument3 : CULong,
    argument4 : UInt) : UInt;

external (stdcall) timeKillEvent(
    argument0 : UInt) : UInt;

external (stdcall) timeGetDevCaps(
    argument0 : LPTIMECAPS,
    argument1 : UInt) : UInt;

external (stdcall) timeBeginPeriod(
    argument0 : UInt) : UInt;

external (stdcall) timeEndPeriod(
    argument0 : UInt) : UInt;

external (stdcall) joyGetNumDevs() : UInt;

external (stdcall) joyGetDevCapsA(
    argument0 : UInt,
    argument1 : LPJOYCAPSA,
    argument2 : UInt) : UInt;

external (stdcall) joyGetDevCapsW(
    argument0 : UInt,
    argument1 : LPJOYCAPSW,
    argument2 : UInt) : UInt;

external (stdcall) joyGetPos(
    argument0 : UInt,
    argument1 : LPJOYINFO) : UInt;

external (stdcall) joyGetPosEx(
    argument0 : UInt,
    argument1 : LPJOYINFOEX) : UInt;

external (stdcall) joyGetThreshold(
    argument0 : UInt,
    argument1 : LPUINT) : UInt;

external (stdcall) joyReleaseCapture(
    argument0 : UInt) : UInt;

external (stdcall) joySetCapture(
    argument0 : HWND,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : Int) : UInt;

external (stdcall) joySetThreshold(
    argument0 : UInt,
    argument1 : UInt) : UInt;

external (stdcall) mmioStringToFOURCCA(
    argument0 : LPCSTR,
    argument1 : UInt) : CULong;

external (stdcall) mmioStringToFOURCCW(
    argument0 : LPCWSTR,
    argument1 : UInt) : CULong;

external (stdcall) mmioInstallIOProcA(
    argument0 : CULong,
    argument1 : LPMMIOPROC,
    argument2 : CULong) : LPMMIOPROC;

external (stdcall) mmioInstallIOProcW(
    argument0 : CULong,
    argument1 : LPMMIOPROC,
    argument2 : CULong) : LPMMIOPROC;

external (stdcall) mmioOpenA(
    argument0 : LPSTR,
    argument1 : LPMMIOINFO,
    argument2 : CULong) : HMMIO;

external (stdcall) mmioOpenW(
    argument0 : LPWSTR,
    argument1 : LPMMIOINFO,
    argument2 : CULong) : HMMIO;

external (stdcall) mmioRenameA(
    argument0 : LPCSTR,
    argument1 : LPCSTR,
    argument2 : LPCMMIOINFO,
    argument3 : CULong) : UInt;

external (stdcall) mmioRenameW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR,
    argument2 : LPCMMIOINFO,
    argument3 : CULong) : UInt;

external (stdcall) mmioClose(
    argument0 : HMMIO,
    argument1 : UInt) : UInt;

external (stdcall) mmioRead(
    argument0 : HMMIO,
    argument1 : HPSTR,
    argument2 : CLong) : CLong;

external (stdcall) mmioWrite(
    argument0 : HMMIO,
    argument1 : LPCSTR,
    argument2 : CLong) : CLong;

external (stdcall) mmioSeek(
    argument0 : HMMIO,
    argument1 : CLong,
    argument2 : Int) : CLong;

external (stdcall) mmioGetInfo(
    argument0 : HMMIO,
    argument1 : LPMMIOINFO,
    argument2 : UInt) : UInt;

external (stdcall) mmioSetInfo(
    argument0 : HMMIO,
    argument1 : LPCMMIOINFO,
    argument2 : UInt) : UInt;

external (stdcall) mmioSetBuffer(
    argument0 : HMMIO,
    argument1 : LPSTR,
    argument2 : CLong,
    argument3 : UInt) : UInt;

external (stdcall) mmioFlush(
    argument0 : HMMIO,
    argument1 : UInt) : UInt;

external (stdcall) mmioAdvance(
    argument0 : HMMIO,
    argument1 : LPMMIOINFO,
    argument2 : UInt) : UInt;

external (stdcall) mmioSendMessage(
    argument0 : HMMIO,
    argument1 : UInt,
    argument2 : CLong,
    argument3 : CLong) : CLong;

external (stdcall) mmioDescend(
    argument0 : HMMIO,
    argument1 : LPMMCKINFO,
    argument2 : Pointer[MMCKINFO],
    argument3 : UInt) : UInt;

external (stdcall) mmioAscend(
    argument0 : HMMIO,
    argument1 : LPMMCKINFO,
    argument2 : UInt) : UInt;

external (stdcall) mmioCreateChunk(
    argument0 : HMMIO,
    argument1 : LPMMCKINFO,
    argument2 : UInt) : UInt;

external (stdcall) mciSendCommandA(
    argument0 : UInt,
    argument1 : UInt,
    argument2 : CULong,
    argument3 : CULong) : CULong;

external (stdcall) mciSendCommandW(
    argument0 : UInt,
    argument1 : UInt,
    argument2 : CULong,
    argument3 : CULong) : CULong;

external (stdcall) mciSendStringA(
    argument0 : LPCSTR,
    argument1 : LPSTR,
    argument2 : UInt,
    argument3 : HWND) : CULong;

external (stdcall) mciSendStringW(
    argument0 : LPCWSTR,
    argument1 : LPWSTR,
    argument2 : UInt,
    argument3 : HWND) : CULong;

external (stdcall) mciGetDeviceIDA(
    argument0 : LPCSTR) : UInt;

external (stdcall) mciGetDeviceIDW(
    argument0 : LPCWSTR) : UInt;

external (stdcall) mciGetDeviceIDFromElementIDA(
    argument0 : CULong,
    argument1 : LPCSTR) : UInt;

external (stdcall) mciGetDeviceIDFromElementIDW(
    argument0 : CULong,
    argument1 : LPCWSTR) : UInt;

external (stdcall) mciGetErrorStringA(
    argument0 : CULong,
    argument1 : LPSTR,
    argument2 : UInt) : Int;

external (stdcall) mciGetErrorStringW(
    argument0 : CULong,
    argument1 : LPWSTR,
    argument2 : UInt) : Int;

external (stdcall) mciSetYieldProc(
    argument0 : UInt,
    argument1 : YIELDPROC,
    argument2 : CULong) : Int;

external (stdcall) mciGetCreatorTask(
    argument0 : UInt) : HTASK;

external (stdcall) mciGetYieldProc(
    argument0 : UInt,
    argument1 : PDWORD) : YIELDPROC;

record tagMCI_SEQ_SET_PARMS {
    dwCallback : CULong;
    dwTimeFormat : CULong;
    dwAudio : CULong;
    dwTempo : CULong;
    dwPort : CULong;
    dwSlave : CULong;
    dwMaster : CULong;
    dwOffset : CULong;
}

static MCI_SEQ_SET_PARMS = tagMCI_SEQ_SET_PARMS;

static PMCI_SEQ_SET_PARMS = Pointer[tagMCI_SEQ_SET_PARMS];

static LPMCI_SEQ_SET_PARMS = Pointer[tagMCI_SEQ_SET_PARMS];

record tagMCI_ANIM_OPEN_PARMSA {
    dwCallback : CULong;
    wDeviceID : UInt;
    lpstrDeviceType : LPCSTR;
    lpstrElementName : LPCSTR;
    lpstrAlias : LPCSTR;
    dwStyle : CULong;
    hWndParent : HWND;
}

static MCI_ANIM_OPEN_PARMSA = tagMCI_ANIM_OPEN_PARMSA;

static PMCI_ANIM_OPEN_PARMSA = Pointer[tagMCI_ANIM_OPEN_PARMSA];

static LPMCI_ANIM_OPEN_PARMSA = Pointer[tagMCI_ANIM_OPEN_PARMSA];

record tagMCI_ANIM_OPEN_PARMSW {
    dwCallback : CULong;
    wDeviceID : UInt;
    lpstrDeviceType : LPCWSTR;
    lpstrElementName : LPCWSTR;
    lpstrAlias : LPCWSTR;
    dwStyle : CULong;
    hWndParent : HWND;
}

static MCI_ANIM_OPEN_PARMSW = tagMCI_ANIM_OPEN_PARMSW;

static PMCI_ANIM_OPEN_PARMSW = Pointer[tagMCI_ANIM_OPEN_PARMSW];

static LPMCI_ANIM_OPEN_PARMSW = Pointer[tagMCI_ANIM_OPEN_PARMSW];

record tagMCI_ANIM_PLAY_PARMS {
    dwCallback : CULong;
    dwFrom : CULong;
    dwTo : CULong;
    dwSpeed : CULong;
}

static MCI_ANIM_PLAY_PARMS = tagMCI_ANIM_PLAY_PARMS;

static PMCI_ANIM_PLAY_PARMS = Pointer[tagMCI_ANIM_PLAY_PARMS];

static LPMCI_ANIM_PLAY_PARMS = Pointer[tagMCI_ANIM_PLAY_PARMS];

record tagMCI_ANIM_STEP_PARMS {
    dwCallback : CULong;
    dwFrames : CULong;
}

static MCI_ANIM_STEP_PARMS = tagMCI_ANIM_STEP_PARMS;

static PMCI_ANIM_STEP_PARMS = Pointer[tagMCI_ANIM_STEP_PARMS];

static LPMCI_ANIM_STEP_PARMS = Pointer[tagMCI_ANIM_STEP_PARMS];

record tagMCI_ANIM_WINDOW_PARMSA {
    dwCallback : CULong;
    hWnd : HWND;
    nCmdShow : UInt;
    lpstrText : LPCSTR;
}

static MCI_ANIM_WINDOW_PARMSA = tagMCI_ANIM_WINDOW_PARMSA;

static PMCI_ANIM_WINDOW_PARMSA = Pointer[tagMCI_ANIM_WINDOW_PARMSA];

static LPMCI_ANIM_WINDOW_PARMSA = Pointer[tagMCI_ANIM_WINDOW_PARMSA];

record tagMCI_ANIM_WINDOW_PARMSW {
    dwCallback : CULong;
    hWnd : HWND;
    nCmdShow : UInt;
    lpstrText : LPCWSTR;
}

static MCI_ANIM_WINDOW_PARMSW = tagMCI_ANIM_WINDOW_PARMSW;

static PMCI_ANIM_WINDOW_PARMSW = Pointer[tagMCI_ANIM_WINDOW_PARMSW];

static LPMCI_ANIM_WINDOW_PARMSW = Pointer[tagMCI_ANIM_WINDOW_PARMSW];

record tagMCI_ANIM_RECT_PARMS {
    dwCallback : CULong;
    rc : RECT;
}

static MCI_ANIM_RECT_PARMS = tagMCI_ANIM_RECT_PARMS;

static PMCI_ANIM_RECT_PARMS = Pointer[tagMCI_ANIM_RECT_PARMS];

static LPMCI_ANIM_RECT_PARMS = Pointer[tagMCI_ANIM_RECT_PARMS];

record tagMCI_ANIM_UPDATE_PARMS {
    dwCallback : CULong;
    rc : RECT;
    hDC : HDC;
}

static MCI_ANIM_UPDATE_PARMS = tagMCI_ANIM_UPDATE_PARMS;

static PMCI_ANIM_UPDATE_PARMS = Pointer[tagMCI_ANIM_UPDATE_PARMS];

static LPMCI_ANIM_UPDATE_PARMS = Pointer[tagMCI_ANIM_UPDATE_PARMS];

record tagMCI_OVLY_OPEN_PARMSA {
    dwCallback : CULong;
    wDeviceID : UInt;
    lpstrDeviceType : LPCSTR;
    lpstrElementName : LPCSTR;
    lpstrAlias : LPCSTR;
    dwStyle : CULong;
    hWndParent : HWND;
}

static MCI_OVLY_OPEN_PARMSA = tagMCI_OVLY_OPEN_PARMSA;

static PMCI_OVLY_OPEN_PARMSA = Pointer[tagMCI_OVLY_OPEN_PARMSA];

static LPMCI_OVLY_OPEN_PARMSA = Pointer[tagMCI_OVLY_OPEN_PARMSA];

record tagMCI_OVLY_OPEN_PARMSW {
    dwCallback : CULong;
    wDeviceID : UInt;
    lpstrDeviceType : LPCWSTR;
    lpstrElementName : LPCWSTR;
    lpstrAlias : LPCWSTR;
    dwStyle : CULong;
    hWndParent : HWND;
}

static MCI_OVLY_OPEN_PARMSW = tagMCI_OVLY_OPEN_PARMSW;

static PMCI_OVLY_OPEN_PARMSW = Pointer[tagMCI_OVLY_OPEN_PARMSW];

static LPMCI_OVLY_OPEN_PARMSW = Pointer[tagMCI_OVLY_OPEN_PARMSW];

record tagMCI_OVLY_WINDOW_PARMSA {
    dwCallback : CULong;
    hWnd : HWND;
    nCmdShow : UInt;
    lpstrText : LPCSTR;
}

static MCI_OVLY_WINDOW_PARMSA = tagMCI_OVLY_WINDOW_PARMSA;

static PMCI_OVLY_WINDOW_PARMSA = Pointer[tagMCI_OVLY_WINDOW_PARMSA];

static LPMCI_OVLY_WINDOW_PARMSA = Pointer[tagMCI_OVLY_WINDOW_PARMSA];

record tagMCI_OVLY_WINDOW_PARMSW {
    dwCallback : CULong;
    hWnd : HWND;
    nCmdShow : UInt;
    lpstrText : LPCWSTR;
}

static MCI_OVLY_WINDOW_PARMSW = tagMCI_OVLY_WINDOW_PARMSW;

static PMCI_OVLY_WINDOW_PARMSW = Pointer[tagMCI_OVLY_WINDOW_PARMSW];

static LPMCI_OVLY_WINDOW_PARMSW = Pointer[tagMCI_OVLY_WINDOW_PARMSW];

record tagMCI_OVLY_RECT_PARMS {
    dwCallback : CULong;
    rc : RECT;
}

static MCI_OVLY_RECT_PARMS = tagMCI_OVLY_RECT_PARMS;

static PMCI_OVLY_RECT_PARMS = Pointer[tagMCI_OVLY_RECT_PARMS];

static LPMCI_OVLY_RECT_PARMS = Pointer[tagMCI_OVLY_RECT_PARMS];

record tagMCI_OVLY_SAVE_PARMSA {
    dwCallback : CULong;
    lpfilename : LPCSTR;
    rc : RECT;
}

static MCI_OVLY_SAVE_PARMSA = tagMCI_OVLY_SAVE_PARMSA;

static PMCI_OVLY_SAVE_PARMSA = Pointer[tagMCI_OVLY_SAVE_PARMSA];

static LPMCI_OVLY_SAVE_PARMSA = Pointer[tagMCI_OVLY_SAVE_PARMSA];

record tagMCI_OVLY_SAVE_PARMSW {
    dwCallback : CULong;
    lpfilename : LPCWSTR;
    rc : RECT;
}

static MCI_OVLY_SAVE_PARMSW = tagMCI_OVLY_SAVE_PARMSW;

static PMCI_OVLY_SAVE_PARMSW = Pointer[tagMCI_OVLY_SAVE_PARMSW];

static LPMCI_OVLY_SAVE_PARMSW = Pointer[tagMCI_OVLY_SAVE_PARMSW];

record tagMCI_OVLY_LOAD_PARMSA {
    dwCallback : CULong;
    lpfilename : LPCSTR;
    rc : RECT;
}

static MCI_OVLY_LOAD_PARMSA = tagMCI_OVLY_LOAD_PARMSA;

static PMCI_OVLY_LOAD_PARMSA = Pointer[tagMCI_OVLY_LOAD_PARMSA];

static LPMCI_OVLY_LOAD_PARMSA = Pointer[tagMCI_OVLY_LOAD_PARMSA];

record tagMCI_OVLY_LOAD_PARMSW {
    dwCallback : CULong;
    lpfilename : LPCWSTR;
    rc : RECT;
}

static MCI_OVLY_LOAD_PARMSW = tagMCI_OVLY_LOAD_PARMSW;

static PMCI_OVLY_LOAD_PARMSW = Pointer[tagMCI_OVLY_LOAD_PARMSW];

static LPMCI_OVLY_LOAD_PARMSW = Pointer[tagMCI_OVLY_LOAD_PARMSW];

static WAVEOUTCAPS = WAVEOUTCAPSA;

static PWAVEOUTCAPS = Pointer[WAVEOUTCAPSA];

static LPWAVEOUTCAPS = Pointer[WAVEOUTCAPSA];

static WAVEINCAPS = WAVEINCAPSA;

static PWAVEINCAPS = Pointer[WAVEINCAPSA];

static LPWAVEINCAPS = Pointer[WAVEINCAPSA];

static MIDIOUTCAPS = MIDIOUTCAPSA;

static PMIDIOUTCAPS = Pointer[MIDIOUTCAPSA];

static LPMIDIOUTCAPS = Pointer[MIDIOUTCAPSA];

static MIDIINCAPS = MIDIINCAPSA;

static PMIDIINCAPS = Pointer[MIDIINCAPSA];

static LPMIDIINCAPS = Pointer[MIDIINCAPSA];

static AUXCAPS = AUXCAPSA;

static PAUXCAPS = Pointer[AUXCAPSA];

static LPAUXCAPS = Pointer[AUXCAPSA];

static MIXERCAPS = MIXERCAPSA;

static PMIXERCAPS = Pointer[MIXERCAPSA];

static LPMIXERCAPS = Pointer[MIXERCAPSA];

static MIXERLINE = MIXERLINEA;

static PMIXERLINE = Pointer[MIXERLINEA];

static LPMIXERLINE = Pointer[MIXERLINEA];

static MIXERCONTROL = MIXERCONTROLA;

static PMIXERCONTROL = Pointer[MIXERCONTROLA];

static LPMIXERCONTROL = Pointer[MIXERCONTROLA];

static MIXERLINECONTROLS = MIXERLINECONTROLSA;

static PMIXERLINECONTROLS = Pointer[MIXERLINECONTROLSA];

static LPMIXERLINECONTROLS = Pointer[MIXERLINECONTROLSA];

static MIXERCONTROLDETAILS_LISTTEXT = MIXERCONTROLDETAILS_LISTTEXTA;

static PMIXERCONTROLDETAILS_LISTTEXT = Pointer[MIXERCONTROLDETAILS_LISTTEXTA];

static LPMIXERCONTROLDETAILS_LISTTEXT = Pointer[MIXERCONTROLDETAILS_LISTTEXTA];

static JOYCAPS = JOYCAPSA;

static PJOYCAPS = Pointer[JOYCAPSA];

static LPJOYCAPS = Pointer[JOYCAPSA];

static MCI_OPEN_PARMS = MCI_OPEN_PARMSA;

static PMCI_OPEN_PARMS = Pointer[MCI_OPEN_PARMSA];

static LPMCI_OPEN_PARMS = Pointer[MCI_OPEN_PARMSA];

static MCI_INFO_PARMS = MCI_INFO_PARMSA;

static LPMCI_INFO_PARMS = Pointer[MCI_INFO_PARMSA];

static MCI_SYSINFO_PARMS = MCI_SYSINFO_PARMSA;

static PMCI_SYSINFO_PARMS = Pointer[MCI_SYSINFO_PARMSA];

static LPMCI_SYSINFO_PARMS = Pointer[MCI_SYSINFO_PARMSA];

static MCI_SAVE_PARMS = MCI_SAVE_PARMSA;

static PMCI_SAVE_PARMS = Pointer[MCI_SAVE_PARMSA];

static LPMCI_SAVE_PARMS = Pointer[MCI_SAVE_PARMSA];

static MCI_LOAD_PARMS = MCI_LOAD_PARMSA;

static PMCI_LOAD_PARMS = Pointer[MCI_LOAD_PARMSA];

static LPMCI_LOAD_PARMS = Pointer[MCI_LOAD_PARMSA];

static MCI_VD_ESCAPE_PARMS = MCI_VD_ESCAPE_PARMSA;

static PMCI_VD_ESCAPE_PARMS = Pointer[MCI_VD_ESCAPE_PARMSA];

static LPMCI_VD_ESCAPE_PARMS = Pointer[MCI_VD_ESCAPE_PARMSA];

static MCI_WAVE_OPEN_PARMS = MCI_WAVE_OPEN_PARMSA;

static PMCI_WAVE_OPEN_PARMS = Pointer[MCI_WAVE_OPEN_PARMSA];

static LPMCI_WAVE_OPEN_PARMS = Pointer[MCI_WAVE_OPEN_PARMSA];

static MCI_ANIM_OPEN_PARMS = MCI_ANIM_OPEN_PARMSA;

static PMCI_ANIM_OPEN_PARMS = Pointer[MCI_ANIM_OPEN_PARMSA];

static LPMCI_ANIM_OPEN_PARMS = Pointer[MCI_ANIM_OPEN_PARMSA];

static MCI_ANIM_WINDOW_PARMS = MCI_ANIM_WINDOW_PARMSA;

static PMCI_ANIM_WINDOW_PARMS = Pointer[MCI_ANIM_WINDOW_PARMSA];

static LPMCI_ANIM_WINDOW_PARMS = Pointer[MCI_ANIM_WINDOW_PARMSA];

static MCI_OVLY_OPEN_PARMS = MCI_OVLY_OPEN_PARMSA;

static PMCI_OVLY_OPEN_PARMS = Pointer[MCI_OVLY_OPEN_PARMSA];

static LPMCI_OVLY_OPEN_PARMS = Pointer[MCI_OVLY_OPEN_PARMSA];

static MCI_OVLY_WINDOW_PARMS = MCI_OVLY_WINDOW_PARMSA;

static PMCI_OVLY_WINDOW_PARMS = Pointer[MCI_OVLY_WINDOW_PARMSA];

static LPMCI_OVLY_WINDOW_PARMS = Pointer[MCI_OVLY_WINDOW_PARMSA];

static MCI_OVLY_SAVE_PARMS = MCI_OVLY_SAVE_PARMSA;

static PMCI_OVLY_SAVE_PARMS = Pointer[MCI_OVLY_SAVE_PARMSA];

static LPMCI_OVLY_SAVE_PARMS = Pointer[MCI_OVLY_SAVE_PARMSA];

record _ACTION_HEADER {
    transport_id : CULong;
    action_code : UShort;
    reserved : UShort;
}

static ACTION_HEADER = _ACTION_HEADER;

static PACTION_HEADER = Pointer[_ACTION_HEADER];

record _ADAPTER_STATUS {
    adapter_address : Array[CUChar,6];
    rev_major : CUChar;
    reserved0 : CUChar;
    adapter_type : CUChar;
    rev_minor : CUChar;
    duration : UShort;
    frmr_recv : UShort;
    frmr_xmit : UShort;
    iframe_recv_err : UShort;
    xmit_aborts : UShort;
    xmit_success : CULong;
    recv_success : CULong;
    iframe_xmit_err : UShort;
    recv_buff_unavail : UShort;
    t1_timeouts : UShort;
    ti_timeouts : UShort;
    reserved1 : CULong;
    free_ncbs : UShort;
    max_cfg_ncbs : UShort;
    max_ncbs : UShort;
    xmit_buf_unavail : UShort;
    max_dgram_size : UShort;
    pending_sess : UShort;
    max_cfg_sess : UShort;
    max_sess : UShort;
    max_sess_pkt_size : UShort;
    name_count : UShort;
}

static ADAPTER_STATUS = _ADAPTER_STATUS;

static PADAPTER_STATUS = Pointer[_ADAPTER_STATUS];

record _FIND_NAME_BUFFER {
    length : CUChar;
    access_control : CUChar;
    frame_control : CUChar;
    destination_addr : Array[CUChar,6];
    source_addr : Array[CUChar,6];
    routing_info : Array[CUChar,18];
}

static FIND_NAME_BUFFER = _FIND_NAME_BUFFER;

static PFIND_NAME_BUFFER = Pointer[_FIND_NAME_BUFFER];

record _FIND_NAME_HEADER {
    node_count : UShort;
    reserved : CUChar;
    unique_group : CUChar;
}

static FIND_NAME_HEADER = _FIND_NAME_HEADER;

static PFIND_NAME_HEADER = Pointer[_FIND_NAME_HEADER];

record _LANA_ENUM {
    length : CUChar;
    lana : Array[CUChar,255];
}

static LANA_ENUM = _LANA_ENUM;

static PLANA_ENUM = Pointer[_LANA_ENUM];

record _NAME_BUFFER {
    name : Array[CUChar,16];
    name_num : CUChar;
    name_flags : CUChar;
}

static NAME_BUFFER = _NAME_BUFFER;

static PNAME_BUFFER = Pointer[_NAME_BUFFER];

record _NCB {
    ncb_command : CUChar;
    ncb_retcode : CUChar;
    ncb_lsn : CUChar;
    ncb_num : CUChar;
    ncb_buffer : PUCHAR;
    ncb_length : UShort;
    ncb_callname : Array[CUChar,16];
    ncb_name : Array[CUChar,16];
    ncb_rto : CUChar;
    ncb_sto : CUChar;
    ncb_post : StdCallCodePointer[Pointer[_NCB],Void];
    ncb_lana_num : CUChar;
    ncb_cmd_cplt : CUChar;
    ncb_reserve : Array[CUChar,10];
    ncb_event : HANDLE;
}

static NCB = _NCB;

static PNCB = Pointer[_NCB];

record _SESSION_BUFFER {
    lsn : CUChar;
    state : CUChar;
    local_name : Array[CUChar,16];
    remote_name : Array[CUChar,16];
    rcvs_outstanding : CUChar;
    sends_outstanding : CUChar;
}

static SESSION_BUFFER = _SESSION_BUFFER;

static PSESSION_BUFFER = Pointer[_SESSION_BUFFER];

record _SESSION_HEADER {
    sess_name : CUChar;
    num_sess : CUChar;
    rcv_dg_outstanding : CUChar;
    rcv_any_outstanding : CUChar;
}

static SESSION_HEADER = _SESSION_HEADER;

static PSESSION_HEADER = Pointer[_SESSION_HEADER];

external (stdcall) Netbios(
    argument0 : PNCB) : CUChar;

static I_RPC_HANDLE = RawPointer;

static RPC_STATUS = CLong;

static UUID = GUID;

static IID = GUID;

static CLSID = GUID;

static LPCLSID = Pointer[CLSID];

static LPIID = Pointer[IID];

static REFIID = Pointer[IID];

static REFCLSID = Pointer[CLSID];

static FMTID = GUID;

static REFFMTID = Pointer[FMTID];

static error_status_t = CULong;

static PROPID = CULong;

static RPC_BINDING_HANDLE = I_RPC_HANDLE;

static handle_t = RPC_BINDING_HANDLE;

record _RPC_BINDING_VECTOR {
    Count : CULong;
    BindingH : Array[RPC_BINDING_HANDLE,1];
}

static RPC_BINDING_VECTOR = _RPC_BINDING_VECTOR;

record _UUID_VECTOR {
    Count : CULong;
    Uuid : Array[Pointer[UUID],1];
}

static UUID_VECTOR = _UUID_VECTOR;

static RPC_IF_HANDLE = RawPointer;

record _RPC_IF_ID {
    Uuid : UUID;
    VersMajor : UShort;
    VersMinor : UShort;
}

static RPC_IF_ID = _RPC_IF_ID;

record _RPC_POLICY {
    Length : UInt;
    EndpointFlags : CULong;
    NICFlags : CULong;
}

static RPC_POLICY = _RPC_POLICY;

static PRPC_POLICY = Pointer[_RPC_POLICY];

record UnnamedRecord20 {
    Count : UInt;
    Stats : Array[CULong,1];
}

static RPC_STATS_VECTOR = UnnamedRecord20;

record UnnamedRecord21 {
    Count : CULong;
    IfId : Array[Pointer[RPC_IF_ID],1];
}

static RPC_IF_ID_VECTOR = UnnamedRecord21;

static RPC_AUTH_IDENTITY_HANDLE = RawPointer;

static RPC_AUTHZ_HANDLE = RawPointer;

record _RPC_SECURITY_QOS {
    Version : CULong;
    Capabilities : CULong;
    IdentityTracking : CULong;
    ImpersonationType : CULong;
}

static RPC_SECURITY_QOS = _RPC_SECURITY_QOS;

static PRPC_SECURITY_QOS = Pointer[_RPC_SECURITY_QOS];

record _SEC_WINNT_AUTH_IDENTITY_W {
    User : Pointer[UShort];
    UserLength : CULong;
    Domain : Pointer[UShort];
    DomainLength : CULong;
    Password : Pointer[UShort];
    PasswordLength : CULong;
    Flags : CULong;
}

static SEC_WINNT_AUTH_IDENTITY_W = _SEC_WINNT_AUTH_IDENTITY_W;

static PSEC_WINNT_AUTH_IDENTITY_W = Pointer[_SEC_WINNT_AUTH_IDENTITY_W];

record _SEC_WINNT_AUTH_IDENTITY_A {
    User : Pointer[CUChar];
    UserLength : CULong;
    Domain : Pointer[CUChar];
    DomainLength : CULong;
    Password : Pointer[CUChar];
    PasswordLength : CULong;
    Flags : CULong;
}

static SEC_WINNT_AUTH_IDENTITY_A = _SEC_WINNT_AUTH_IDENTITY_A;

static PSEC_WINNT_AUTH_IDENTITY_A = Pointer[_SEC_WINNT_AUTH_IDENTITY_A];

record UnnamedRecord22 {
    UserName : Pointer[CUChar];
    ComputerName : Pointer[CUChar];
    Privilege : UShort;
    AuthFlags : CULong;
}

static RPC_CLIENT_INFORMATION1 = UnnamedRecord22;

static PRPC_CLIENT_INFORMATION1 = Pointer[UnnamedRecord22];

static RPC_EP_INQ_HANDLE = Pointer[I_RPC_HANDLE];

static RPC_MGMT_AUTHORIZATION_FN = StdCallCodePointer[RawPointer,CULong,Pointer[CLong],Int];

record _RPC_PROTSEQ_VECTORA {
    Count : UInt;
    Protseq : Array[Pointer[CUChar],1];
}

static RPC_PROTSEQ_VECTORA = _RPC_PROTSEQ_VECTORA;

record _RPC_PROTSEQ_VECTORW {
    Count : UInt;
    Protseq : Array[Pointer[UShort],1];
}

static RPC_PROTSEQ_VECTORW = _RPC_PROTSEQ_VECTORW;

external (stdcall) RpcBindingFromStringBindingA(
    argument0 : Pointer[CUChar],
    argument1 : Pointer[RPC_BINDING_HANDLE]) : CLong;

external (stdcall) RpcBindingFromStringBindingW(
    argument0 : Pointer[UShort],
    argument1 : Pointer[RPC_BINDING_HANDLE]) : CLong;

external (stdcall) RpcBindingToStringBindingA(
    argument0 : RPC_BINDING_HANDLE,
    argument1 : Pointer[Pointer[CUChar]]) : CLong;

external (stdcall) RpcBindingToStringBindingW(
    argument0 : RPC_BINDING_HANDLE,
    argument1 : Pointer[Pointer[UShort]]) : CLong;

external (stdcall) RpcStringBindingComposeA(
    argument0 : Pointer[CUChar],
    argument1 : Pointer[CUChar],
    argument2 : Pointer[CUChar],
    argument3 : Pointer[CUChar],
    argument4 : Pointer[CUChar],
    argument5 : Pointer[Pointer[CUChar]]) : CLong;

external (stdcall) RpcStringBindingComposeW(
    argument0 : Pointer[UShort],
    argument1 : Pointer[UShort],
    argument2 : Pointer[UShort],
    argument3 : Pointer[UShort],
    argument4 : Pointer[UShort],
    argument5 : Pointer[Pointer[UShort]]) : CLong;

external (stdcall) RpcStringBindingParseA(
    argument0 : Pointer[CUChar],
    argument1 : Pointer[Pointer[CUChar]],
    argument2 : Pointer[Pointer[CUChar]],
    argument3 : Pointer[Pointer[CUChar]],
    argument4 : Pointer[Pointer[CUChar]],
    argument5 : Pointer[Pointer[CUChar]]) : CLong;

external (stdcall) RpcStringBindingParseW(
    argument0 : Pointer[UShort],
    argument1 : Pointer[Pointer[UShort]],
    argument2 : Pointer[Pointer[UShort]],
    argument3 : Pointer[Pointer[UShort]],
    argument4 : Pointer[Pointer[UShort]],
    argument5 : Pointer[Pointer[UShort]]) : CLong;

external (stdcall) RpcStringFreeA(
    argument0 : Pointer[Pointer[CUChar]]) : CLong;

external (stdcall) RpcStringFreeW(
    argument0 : Pointer[Pointer[UShort]]) : CLong;

external (stdcall) RpcNetworkIsProtseqValidA(
    argument0 : Pointer[CUChar]) : CLong;

external (stdcall) RpcNetworkIsProtseqValidW(
    argument0 : Pointer[UShort]) : CLong;

external (stdcall) RpcNetworkInqProtseqsA(
    argument0 : Pointer[Pointer[RPC_PROTSEQ_VECTORA]]) : CLong;

external (stdcall) RpcNetworkInqProtseqsW(
    argument0 : Pointer[Pointer[RPC_PROTSEQ_VECTORW]]) : CLong;

external (stdcall) RpcProtseqVectorFreeA(
    argument0 : Pointer[Pointer[RPC_PROTSEQ_VECTORA]]) : CLong;

external (stdcall) RpcProtseqVectorFreeW(
    argument0 : Pointer[Pointer[RPC_PROTSEQ_VECTORW]]) : CLong;

external (stdcall) RpcServerUseProtseqA(
    argument0 : Pointer[CUChar],
    argument1 : UInt,
    argument2 : RawPointer) : CLong;

external (stdcall) RpcServerUseProtseqW(
    argument0 : Pointer[UShort],
    argument1 : UInt,
    argument2 : RawPointer) : CLong;

external (stdcall) RpcServerUseProtseqExA(
    argument0 : Pointer[CUChar],
    MaxCalls : UInt,
    argument2 : RawPointer,
    argument3 : PRPC_POLICY) : CLong;

external (stdcall) RpcServerUseProtseqExW(
    argument0 : Pointer[UShort],
    argument1 : UInt,
    argument2 : RawPointer,
    argument3 : PRPC_POLICY) : CLong;

external (stdcall) RpcServerUseProtseqEpA(
    argument0 : Pointer[CUChar],
    argument1 : UInt,
    argument2 : Pointer[CUChar],
    argument3 : RawPointer) : CLong;

external (stdcall) RpcServerUseProtseqEpExA(
    argument0 : Pointer[CUChar],
    argument1 : UInt,
    argument2 : Pointer[CUChar],
    argument3 : RawPointer,
    argument4 : PRPC_POLICY) : CLong;

external (stdcall) RpcServerUseProtseqEpW(
    argument0 : Pointer[UShort],
    argument1 : UInt,
    argument2 : Pointer[UShort],
    argument3 : RawPointer) : CLong;

external (stdcall) RpcServerUseProtseqEpExW(
    argument0 : Pointer[UShort],
    argument1 : UInt,
    argument2 : Pointer[UShort],
    argument3 : RawPointer,
    argument4 : PRPC_POLICY) : CLong;

external (stdcall) RpcServerUseProtseqIfA(
    argument0 : Pointer[CUChar],
    argument1 : UInt,
    argument2 : RPC_IF_HANDLE,
    argument3 : RawPointer) : CLong;

external (stdcall) RpcServerUseProtseqIfExA(
    argument0 : Pointer[CUChar],
    argument1 : UInt,
    argument2 : RPC_IF_HANDLE,
    argument3 : RawPointer,
    argument4 : PRPC_POLICY) : CLong;

external (stdcall) RpcServerUseProtseqIfW(
    argument0 : Pointer[UShort],
    argument1 : UInt,
    argument2 : RPC_IF_HANDLE,
    argument3 : RawPointer) : CLong;

external (stdcall) RpcServerUseProtseqIfExW(
    argument0 : Pointer[UShort],
    argument1 : UInt,
    argument2 : RPC_IF_HANDLE,
    argument3 : RawPointer,
    argument4 : PRPC_POLICY) : CLong;

external (stdcall) RpcMgmtInqServerPrincNameA(
    argument0 : RPC_BINDING_HANDLE,
    argument1 : CULong,
    argument2 : Pointer[Pointer[CUChar]]) : CLong;

external (stdcall) RpcMgmtInqServerPrincNameW(
    argument0 : RPC_BINDING_HANDLE,
    argument1 : CULong,
    argument2 : Pointer[Pointer[UShort]]) : CLong;

external (stdcall) RpcServerInqDefaultPrincNameA(
    argument0 : CULong,
    argument1 : Pointer[Pointer[CUChar]]) : CLong;

external (stdcall) RpcServerInqDefaultPrincNameW(
    argument0 : CULong,
    argument1 : Pointer[Pointer[UShort]]) : CLong;

external (stdcall) RpcNsBindingInqEntryNameA(
    argument0 : RPC_BINDING_HANDLE,
    argument1 : CULong,
    argument2 : Pointer[Pointer[CUChar]]) : CLong;

external (stdcall) RpcNsBindingInqEntryNameW(
    argument0 : RPC_BINDING_HANDLE,
    argument1 : CULong,
    argument2 : Pointer[Pointer[UShort]]) : CLong;

external (stdcall) RpcBindingInqAuthClientA(
    argument0 : RPC_BINDING_HANDLE,
    argument1 : Pointer[RPC_AUTHZ_HANDLE],
    argument2 : Pointer[Pointer[CUChar]],
    argument3 : Pointer[CULong],
    argument4 : Pointer[CULong],
    argument5 : Pointer[CULong]) : CLong;

external (stdcall) RpcBindingInqAuthClientW(
    argument0 : RPC_BINDING_HANDLE,
    argument1 : Pointer[RPC_AUTHZ_HANDLE],
    argument2 : Pointer[Pointer[UShort]],
    argument3 : Pointer[CULong],
    argument4 : Pointer[CULong],
    argument5 : Pointer[CULong]) : CLong;

external (stdcall) RpcBindingInqAuthInfoA(
    argument0 : RPC_BINDING_HANDLE,
    argument1 : Pointer[Pointer[CUChar]],
    argument2 : Pointer[CULong],
    argument3 : Pointer[CULong],
    argument4 : Pointer[RPC_AUTH_IDENTITY_HANDLE],
    argument5 : Pointer[CULong]) : CLong;

external (stdcall) RpcBindingInqAuthInfoW(
    argument0 : RPC_BINDING_HANDLE,
    argument1 : Pointer[Pointer[UShort]],
    argument2 : Pointer[CULong],
    argument3 : Pointer[CULong],
    argument4 : Pointer[RPC_AUTH_IDENTITY_HANDLE],
    argument5 : Pointer[CULong]) : CLong;

external (stdcall) RpcBindingSetAuthInfoA(
    argument0 : RPC_BINDING_HANDLE,
    argument1 : Pointer[CUChar],
    argument2 : CULong,
    argument3 : CULong,
    argument4 : RPC_AUTH_IDENTITY_HANDLE,
    argument5 : CULong) : CLong;

external (stdcall) RpcBindingSetAuthInfoExA(
    argument0 : RPC_BINDING_HANDLE,
    argument1 : Pointer[CUChar],
    argument2 : CULong,
    argument3 : CULong,
    argument4 : RPC_AUTH_IDENTITY_HANDLE,
    argument5 : CULong,
    argument6 : Pointer[RPC_SECURITY_QOS]) : CLong;

external (stdcall) RpcBindingSetAuthInfoW(
    argument0 : RPC_BINDING_HANDLE,
    argument1 : Pointer[UShort],
    argument2 : CULong,
    argument3 : CULong,
    argument4 : RPC_AUTH_IDENTITY_HANDLE,
    argument5 : CULong) : CLong;

external (stdcall) RpcBindingSetAuthInfoExW(
    argument0 : RPC_BINDING_HANDLE,
    argument1 : Pointer[UShort],
    argument2 : CULong,
    argument3 : CULong,
    argument4 : RPC_AUTH_IDENTITY_HANDLE,
    argument5 : CULong,
    argument6 : Pointer[RPC_SECURITY_QOS]) : CLong;

external (stdcall) RpcBindingInqAuthInfoExA(
    argument0 : RPC_BINDING_HANDLE,
    argument1 : Pointer[Pointer[CUChar]],
    argument2 : Pointer[CULong],
    argument3 : Pointer[CULong],
    argument4 : Pointer[RPC_AUTH_IDENTITY_HANDLE],
    argument5 : Pointer[CULong],
    argument6 : CULong,
    argument7 : Pointer[RPC_SECURITY_QOS]) : CLong;

external (stdcall) RpcBindingInqAuthInfoExW(
    argument0 : RPC_BINDING_HANDLE,
    argument1 : Pointer[Pointer[UShort]],
    argument2 : Pointer[CULong],
    argument3 : Pointer[CULong],
    argument4 : Pointer[RPC_AUTH_IDENTITY_HANDLE],
    argument5 : Pointer[CULong],
    argument6 : CULong,
    argument7 : Pointer[RPC_SECURITY_QOS]) : CLong;

static RPC_AUTH_KEY_RETRIEVAL_FN = StdCallCodePointer[RawPointer,Pointer[UShort],CULong,Pointer[RawPointer],Pointer[CLong],Void];

external (stdcall) RpcServerRegisterAuthInfoA(
    argument0 : Pointer[CUChar],
    argument1 : CULong,
    argument2 : RPC_AUTH_KEY_RETRIEVAL_FN,
    argument3 : RawPointer) : CLong;

external (stdcall) RpcServerRegisterAuthInfoW(
    argument0 : Pointer[UShort],
    argument1 : CULong,
    argument2 : RPC_AUTH_KEY_RETRIEVAL_FN,
    argument3 : RawPointer) : CLong;

external (stdcall) UuidToStringA(
    argument0 : Pointer[UUID],
    argument1 : Pointer[Pointer[CUChar]]) : CLong;

external (stdcall) UuidFromStringA(
    argument0 : Pointer[CUChar],
    argument1 : Pointer[UUID]) : CLong;

external (stdcall) UuidToStringW(
    argument0 : Pointer[UUID],
    argument1 : Pointer[Pointer[UShort]]) : CLong;

external (stdcall) UuidFromStringW(
    argument0 : Pointer[UShort],
    argument1 : Pointer[UUID]) : CLong;

external (stdcall) RpcEpRegisterNoReplaceA(
    argument0 : RPC_IF_HANDLE,
    argument1 : Pointer[RPC_BINDING_VECTOR],
    argument2 : Pointer[UUID_VECTOR],
    argument3 : Pointer[CUChar]) : CLong;

external (stdcall) RpcEpRegisterNoReplaceW(
    argument0 : RPC_IF_HANDLE,
    argument1 : Pointer[RPC_BINDING_VECTOR],
    argument2 : Pointer[UUID_VECTOR],
    argument3 : Pointer[UShort]) : CLong;

external (stdcall) RpcEpRegisterA(
    argument0 : RPC_IF_HANDLE,
    argument1 : Pointer[RPC_BINDING_VECTOR],
    argument2 : Pointer[UUID_VECTOR],
    argument3 : Pointer[CUChar]) : CLong;

external (stdcall) RpcEpRegisterW(
    argument0 : RPC_IF_HANDLE,
    argument1 : Pointer[RPC_BINDING_VECTOR],
    argument2 : Pointer[UUID_VECTOR],
    argument3 : Pointer[UShort]) : CLong;

external (stdcall) DceErrorInqTextA(
    argument0 : CLong,
    argument1 : Pointer[CUChar]) : CLong;

external (stdcall) DceErrorInqTextW(
    argument0 : CLong,
    argument1 : Pointer[UShort]) : CLong;

external (stdcall) RpcMgmtEpEltInqNextA(
    argument0 : RPC_EP_INQ_HANDLE,
    argument1 : Pointer[RPC_IF_ID],
    argument2 : Pointer[RPC_BINDING_HANDLE],
    argument3 : Pointer[UUID],
    argument4 : Pointer[Pointer[CUChar]]) : CLong;

external (stdcall) RpcMgmtEpEltInqNextW(
    argument0 : RPC_EP_INQ_HANDLE,
    argument1 : Pointer[RPC_IF_ID],
    argument2 : Pointer[RPC_BINDING_HANDLE],
    argument3 : Pointer[UUID],
    argument4 : Pointer[Pointer[UShort]]) : CLong;

external (stdcall) RpcBindingCopy(
    argument0 : RPC_BINDING_HANDLE,
    argument1 : Pointer[RPC_BINDING_HANDLE]) : CLong;

external (stdcall) RpcBindingFree(
    argument0 : Pointer[RPC_BINDING_HANDLE]) : CLong;

external (stdcall) RpcBindingInqObject(
    argument0 : RPC_BINDING_HANDLE,
    argument1 : Pointer[UUID]) : CLong;

external (stdcall) RpcBindingReset(
    argument0 : RPC_BINDING_HANDLE) : CLong;

external (stdcall) RpcBindingSetObject(
    argument0 : RPC_BINDING_HANDLE,
    argument1 : Pointer[UUID]) : CLong;

external (stdcall) RpcMgmtInqDefaultProtectLevel(
    argument0 : CULong,
    argument1 : Pointer[CULong]) : CLong;

external (stdcall) RpcBindingVectorFree(
    argument0 : Pointer[Pointer[RPC_BINDING_VECTOR]]) : CLong;

external (stdcall) RpcIfInqId(
    argument0 : RPC_IF_HANDLE,
    argument1 : Pointer[RPC_IF_ID]) : CLong;

external (stdcall) RpcMgmtInqComTimeout(
    argument0 : RPC_BINDING_HANDLE,
    argument1 : Pointer[UInt]) : CLong;

external (stdcall) RpcMgmtSetComTimeout(
    argument0 : RPC_BINDING_HANDLE,
    argument1 : UInt) : CLong;

external (stdcall) RpcMgmtSetCancelTimeout(
    Timeout : CLong) : CLong;

external (stdcall) RpcObjectInqType(
    argument0 : Pointer[UUID],
    argument1 : Pointer[UUID]) : CLong;

external (stdcall) RpcObjectSetInqFn(
    argument0 : StdCallCodePointer[Pointer[_GUID],Pointer[_GUID],Pointer[CLong],Void]) : CLong;

external (stdcall) RpcObjectSetType(
    argument0 : Pointer[UUID],
    argument1 : Pointer[UUID]) : CLong;

external (stdcall) RpcServerInqIf(
    argument0 : RPC_IF_HANDLE,
    argument1 : Pointer[UUID],
    argument2 : Pointer[RawPointer]) : CLong;

external (stdcall) RpcServerListen(
    argument0 : UInt,
    argument1 : UInt,
    argument2 : UInt) : CLong;

external (stdcall) RpcServerRegisterIf(
    argument0 : RPC_IF_HANDLE,
    argument1 : Pointer[UUID],
    argument2 : RawPointer) : CLong;

external (stdcall) RpcServerRegisterIfEx(
    argument0 : RPC_IF_HANDLE,
    argument1 : Pointer[UUID],
    argument2 : RawPointer,
    argument3 : UInt,
    argument4 : UInt,
    argument5 : CCodePointer[RawPointer,RawPointer,CLong]) : CLong;

external (stdcall) RpcServerRegisterIf2(
    argument0 : RPC_IF_HANDLE,
    argument1 : Pointer[UUID],
    argument2 : RawPointer,
    argument3 : UInt,
    argument4 : UInt,
    argument5 : UInt,
    argument6 : CCodePointer[RawPointer,RawPointer,CLong]) : CLong;

external (stdcall) RpcServerUnregisterIf(
    argument0 : RPC_IF_HANDLE,
    argument1 : Pointer[UUID],
    argument2 : UInt) : CLong;

external (stdcall) RpcServerUseAllProtseqs(
    argument0 : UInt,
    argument1 : RawPointer) : CLong;

external (stdcall) RpcServerUseAllProtseqsEx(
    argument0 : UInt,
    argument1 : RawPointer,
    argument2 : PRPC_POLICY) : CLong;

external (stdcall) RpcServerUseAllProtseqsIf(
    argument0 : UInt,
    argument1 : RPC_IF_HANDLE,
    argument2 : RawPointer) : CLong;

external (stdcall) RpcServerUseAllProtseqsIfEx(
    argument0 : UInt,
    argument1 : RPC_IF_HANDLE,
    argument2 : RawPointer,
    argument3 : PRPC_POLICY) : CLong;

external (stdcall) RpcMgmtStatsVectorFree(
    argument0 : Pointer[Pointer[RPC_STATS_VECTOR]]) : CLong;

external (stdcall) RpcMgmtInqStats(
    argument0 : RPC_BINDING_HANDLE,
    argument1 : Pointer[Pointer[RPC_STATS_VECTOR]]) : CLong;

external (stdcall) RpcMgmtIsServerListening(
    argument0 : RPC_BINDING_HANDLE) : CLong;

external (stdcall) RpcMgmtStopServerListening(
    argument0 : RPC_BINDING_HANDLE) : CLong;

external (stdcall) RpcMgmtWaitServerListen() : CLong;

external (stdcall) RpcMgmtSetServerStackSize(
    argument0 : CULong) : CLong;

external (stdcall) RpcSsDontSerializeContext() : Void;

external (stdcall) RpcMgmtEnableIdleCleanup() : CLong;

external (stdcall) RpcMgmtInqIfIds(
    argument0 : RPC_BINDING_HANDLE,
    argument1 : Pointer[Pointer[RPC_IF_ID_VECTOR]]) : CLong;

external (stdcall) RpcIfIdVectorFree(
    argument0 : Pointer[Pointer[RPC_IF_ID_VECTOR]]) : CLong;

external (stdcall) RpcEpResolveBinding(
    argument0 : RPC_BINDING_HANDLE,
    argument1 : RPC_IF_HANDLE) : CLong;

external (stdcall) RpcBindingServerFromClient(
    argument0 : RPC_BINDING_HANDLE,
    argument1 : Pointer[RPC_BINDING_HANDLE]) : CLong;

external (stdcall) RpcRaiseException(
    argument0 : CLong) : Void;

external (stdcall) RpcTestCancel() : CLong;

external (stdcall) RpcCancelThread(
    argument0 : RawPointer) : CLong;

external (stdcall) UuidCreate(
    argument0 : Pointer[UUID]) : CLong;

external (stdcall) UuidCompare(
    argument0 : Pointer[UUID],
    argument1 : Pointer[UUID],
    argument2 : Pointer[CLong]) : Int;

external (stdcall) UuidCreateNil(
    argument0 : Pointer[UUID]) : CLong;

external (stdcall) UuidEqual(
    argument0 : Pointer[UUID],
    argument1 : Pointer[UUID],
    argument2 : Pointer[CLong]) : Int;

external (stdcall) UuidHash(
    argument0 : Pointer[UUID],
    argument1 : Pointer[CLong]) : UShort;

external (stdcall) UuidIsNil(
    argument0 : Pointer[UUID],
    argument1 : Pointer[CLong]) : Int;

external (stdcall) RpcEpUnregister(
    argument0 : RPC_IF_HANDLE,
    argument1 : Pointer[RPC_BINDING_VECTOR],
    argument2 : Pointer[UUID_VECTOR]) : CLong;

external (stdcall) RpcMgmtEpEltInqBegin(
    argument0 : RPC_BINDING_HANDLE,
    argument1 : CULong,
    argument2 : Pointer[RPC_IF_ID],
    argument3 : CULong,
    argument4 : Pointer[UUID],
    argument5 : Pointer[RPC_EP_INQ_HANDLE]) : CLong;

external (stdcall) RpcMgmtEpEltInqDone(
    argument0 : Pointer[RPC_EP_INQ_HANDLE]) : CLong;

external (stdcall) RpcMgmtEpUnregister(
    argument0 : RPC_BINDING_HANDLE,
    argument1 : Pointer[RPC_IF_ID],
    argument2 : RPC_BINDING_HANDLE,
    argument3 : Pointer[UUID]) : CLong;

external (stdcall) RpcMgmtSetAuthorizationFn(
    argument0 : RPC_MGMT_AUTHORIZATION_FN) : CLong;

external (stdcall) RpcMgmtInqParameter(
    argument0 : UInt,
    argument1 : Pointer[CULong]) : CLong;

external (stdcall) RpcMgmtSetParameter(
    argument0 : UInt,
    argument1 : CULong) : CLong;

external (stdcall) RpcMgmtBindingInqParameter(
    argument0 : RPC_BINDING_HANDLE,
    argument1 : UInt,
    argument2 : Pointer[CULong]) : CLong;

external (stdcall) RpcMgmtBindingSetParameter(
    argument0 : RPC_BINDING_HANDLE,
    argument1 : UInt,
    argument2 : CULong) : CLong;

record _RPC_VERSION {
    MajorVersion : UShort;
    MinorVersion : UShort;
}

static RPC_VERSION = _RPC_VERSION;

record _RPC_SYNTAX_IDENTIFIER {
    SyntaxGUID : GUID;
    SyntaxVersion : RPC_VERSION;
}

static RPC_SYNTAX_IDENTIFIER = _RPC_SYNTAX_IDENTIFIER;

static PRPC_SYNTAX_IDENTIFIER = Pointer[_RPC_SYNTAX_IDENTIFIER];

record _RPC_MESSAGE {
    Handle : HANDLE;
    DataRepresentation : CULong;
    Buffer : RawPointer;
    BufferLength : UInt;
    ProcNum : UInt;
    TransferSyntax : PRPC_SYNTAX_IDENTIFIER;
    RpcInterfaceInformation : RawPointer;
    ReservedForRuntime : RawPointer;
    ManagerEpv : RawPointer;
    ImportContext : RawPointer;
    RpcFlags : CULong;
}

static RPC_MESSAGE = _RPC_MESSAGE;

static PRPC_MESSAGE = Pointer[_RPC_MESSAGE];

static RPC_DISPATCH_FUNCTION = StdCallCodePointer[Pointer[_RPC_MESSAGE],Void];

record UnnamedRecord23 {
    DispatchTableCount : UInt;
    DispatchTable : Pointer[RPC_DISPATCH_FUNCTION];
    Reserved : Int;
}

static RPC_DISPATCH_TABLE = UnnamedRecord23;

static PRPC_DISPATCH_TABLE = Pointer[UnnamedRecord23];

record _RPC_PROTSEQ_ENDPOINT {
    RpcProtocolSequence : Pointer[CUChar];
    Endpoint : Pointer[CUChar];
}

static RPC_PROTSEQ_ENDPOINT = _RPC_PROTSEQ_ENDPOINT;

static PRPC_PROTSEQ_ENDPOINT = Pointer[_RPC_PROTSEQ_ENDPOINT];

record _RPC_SERVER_INTERFACE {
    Length : UInt;
    InterfaceId : RPC_SYNTAX_IDENTIFIER;
    TransferSyntax : RPC_SYNTAX_IDENTIFIER;
    DispatchTable : PRPC_DISPATCH_TABLE;
    RpcProtseqEndpointCount : UInt;
    RpcProtseqEndpoint : PRPC_PROTSEQ_ENDPOINT;
    DefaultManagerEpv : RawPointer;
    InterpreterInfo : RawPointer;
}

static RPC_SERVER_INTERFACE = _RPC_SERVER_INTERFACE;

static PRPC_SERVER_INTERFACE = Pointer[_RPC_SERVER_INTERFACE];

record _RPC_CLIENT_INTERFACE {
    Length : UInt;
    InterfaceId : RPC_SYNTAX_IDENTIFIER;
    TransferSyntax : RPC_SYNTAX_IDENTIFIER;
    DispatchTable : PRPC_DISPATCH_TABLE;
    RpcProtseqEndpointCount : UInt;
    RpcProtseqEndpoint : PRPC_PROTSEQ_ENDPOINT;
    Reserved : CULong;
    InterpreterInfo : RawPointer;
}

static RPC_CLIENT_INTERFACE = _RPC_CLIENT_INTERFACE;

static PRPC_CLIENT_INTERFACE = Pointer[_RPC_CLIENT_INTERFACE];

static I_RPC_MUTEX = RawPointer;

record _RPC_TRANSFER_SYNTAX {
    Uuid : GUID;
    VersMajor : UShort;
    VersMinor : UShort;
}

static RPC_TRANSFER_SYNTAX = _RPC_TRANSFER_SYNTAX;

static RPC_BLOCKING_FN = CCodePointer[RawPointer,RawPointer,RawPointer,CLong];

external (stdcall) I_RpcGetBuffer(
    argument0 : Pointer[RPC_MESSAGE]) : CLong;

external (stdcall) I_RpcSendReceive(
    argument0 : Pointer[RPC_MESSAGE]) : CLong;

external (stdcall) I_RpcSend(
    argument0 : Pointer[RPC_MESSAGE]) : CLong;

external (stdcall) I_RpcFreeBuffer(
    argument0 : Pointer[RPC_MESSAGE]) : CLong;

external (stdcall) I_RpcRequestMutex(
    argument0 : Pointer[I_RPC_MUTEX]) : Void;

external (stdcall) I_RpcClearMutex(
    argument0 : I_RPC_MUTEX) : Void;

external (stdcall) I_RpcDeleteMutex(
    argument0 : I_RPC_MUTEX) : Void;

external (stdcall) I_RpcAllocate(
    argument0 : UInt) : RawPointer;

external (stdcall) I_RpcFree(
    argument0 : RawPointer) : Void;

external (stdcall) I_RpcPauseExecution(
    argument0 : CULong) : Void;

static PRPC_RUNDOWN = StdCallCodePointer[RawPointer,Void];

external (stdcall) I_RpcMonitorAssociation(
    argument0 : HANDLE,
    argument1 : PRPC_RUNDOWN,
    argument2 : RawPointer) : CLong;

external (stdcall) I_RpcStopMonitorAssociation(
    argument0 : HANDLE) : CLong;

external (stdcall) I_RpcGetCurrentCallHandle() : HANDLE;

external (stdcall) I_RpcGetAssociationContext(
    argument0 : Pointer[RawPointer]) : CLong;

external (stdcall) I_RpcSetAssociationContext(
    argument0 : RawPointer) : CLong;

external (stdcall) I_RpcNsBindingSetEntryName(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : Pointer[UShort]) : CLong;

external (stdcall) I_RpcBindingInqDynamicEndpoint(
    argument0 : HANDLE,
    argument1 : Pointer[Pointer[UShort]]) : CLong;

external (stdcall) I_RpcBindingInqTransportType(
    argument0 : HANDLE,
    argument1 : Pointer[UInt]) : CLong;

external (stdcall) I_RpcIfInqTransferSyntaxes(
    argument0 : HANDLE,
    argument1 : Pointer[RPC_TRANSFER_SYNTAX],
    argument2 : UInt,
    argument3 : Pointer[UInt]) : CLong;

external (stdcall) I_UuidCreate(
    argument0 : Pointer[GUID]) : CLong;

external (stdcall) I_RpcBindingCopy(
    argument0 : HANDLE,
    argument1 : Pointer[HANDLE]) : CLong;

external (stdcall) I_RpcBindingIsClientLocal(
    argument0 : HANDLE,
    argument1 : Pointer[UInt]) : CLong;

external (stdcall) I_RpcSsDontSerializeContext() : Void;

external (stdcall) I_RpcServerRegisterForwardFunction(
    argument0 : StdCallCodePointer[Pointer[_GUID],Pointer[_RPC_VERSION],Pointer[_GUID],Pointer[CUChar],Pointer[RawPointer],CLong]) : CLong;

external (stdcall) I_RpcConnectionInqSockBuffSize(
    argument0 : Pointer[CULong],
    argument1 : Pointer[CULong]) : CLong;

external (stdcall) I_RpcConnectionSetSockBuffSize(
    argument0 : CULong,
    argument1 : CULong) : CLong;

external (stdcall) I_RpcBindingSetAsync(
    argument0 : HANDLE,
    argument1 : RPC_BLOCKING_FN) : CLong;

external (stdcall) I_RpcAsyncSendReceive(
    argument0 : Pointer[RPC_MESSAGE],
    argument1 : RawPointer) : CLong;

external (stdcall) I_RpcGetThreadWindowHandle(
    argument0 : Pointer[RawPointer]) : CLong;

external (stdcall) I_RpcServerThreadPauseListening() : CLong;

external (stdcall) I_RpcServerThreadContinueListening() : CLong;

external (stdcall) I_RpcServerUnregisterEndpointA(
    argument0 : Pointer[CUChar],
    argument1 : Pointer[CUChar]) : CLong;

external (stdcall) I_RpcServerUnregisterEndpointW(
    argument0 : Pointer[UShort],
    argument1 : Pointer[UShort]) : CLong;

static RPC_NS_HANDLE = RawPointer;

external (stdcall) RpcNsBindingExportA(
    argument0 : CULong,
    argument1 : Pointer[CUChar],
    argument2 : RPC_IF_HANDLE,
    argument3 : Pointer[RPC_BINDING_VECTOR],
    argument4 : Pointer[UUID_VECTOR]) : CLong;

external (stdcall) RpcNsBindingUnexportA(
    argument0 : CULong,
    argument1 : Pointer[CUChar],
    argument2 : RPC_IF_HANDLE,
    argument3 : Pointer[UUID_VECTOR]) : CLong;

external (stdcall) RpcNsBindingLookupBeginA(
    argument0 : CULong,
    argument1 : Pointer[CUChar],
    argument2 : RPC_IF_HANDLE,
    argument3 : Pointer[UUID],
    argument4 : CULong,
    argument5 : Pointer[RPC_NS_HANDLE]) : CLong;

external (stdcall) RpcNsBindingLookupNext(
    argument0 : RPC_NS_HANDLE,
    argument1 : Pointer[Pointer[RPC_BINDING_VECTOR]]) : CLong;

external (stdcall) RpcNsBindingLookupDone(
    argument0 : Pointer[RPC_NS_HANDLE]) : CLong;

external (stdcall) RpcNsGroupDeleteA(
    argument0 : CULong,
    argument1 : Pointer[CUChar]) : CLong;

external (stdcall) RpcNsGroupMbrAddA(
    argument0 : CULong,
    argument1 : Pointer[CUChar],
    argument2 : CULong,
    argument3 : Pointer[CUChar]) : CLong;

external (stdcall) RpcNsGroupMbrRemoveA(
    argument0 : CULong,
    argument1 : Pointer[CUChar],
    argument2 : CULong,
    argument3 : Pointer[CUChar]) : CLong;

external (stdcall) RpcNsGroupMbrInqBeginA(
    argument0 : CULong,
    argument1 : Pointer[CUChar],
    argument2 : CULong,
    argument3 : Pointer[RPC_NS_HANDLE]) : CLong;

external (stdcall) RpcNsGroupMbrInqNextA(
    argument0 : RPC_NS_HANDLE,
    argument1 : Pointer[Pointer[CUChar]]) : CLong;

external (stdcall) RpcNsGroupMbrInqDone(
    argument0 : Pointer[RPC_NS_HANDLE]) : CLong;

external (stdcall) RpcNsProfileDeleteA(
    argument0 : CULong,
    argument1 : Pointer[CUChar]) : CLong;

external (stdcall) RpcNsProfileEltAddA(
    argument0 : CULong,
    argument1 : Pointer[CUChar],
    argument2 : Pointer[RPC_IF_ID],
    argument3 : CULong,
    argument4 : Pointer[CUChar],
    argument5 : CULong,
    argument6 : Pointer[CUChar]) : CLong;

external (stdcall) RpcNsProfileEltRemoveA(
    argument0 : CULong,
    argument1 : Pointer[CUChar],
    argument2 : Pointer[RPC_IF_ID],
    argument3 : CULong,
    argument4 : Pointer[CUChar]) : CLong;

external (stdcall) RpcNsProfileEltInqBeginA(
    argument0 : CULong,
    argument1 : Pointer[CUChar],
    argument2 : CULong,
    argument3 : Pointer[RPC_IF_ID],
    argument4 : CULong,
    argument5 : CULong,
    argument6 : Pointer[CUChar],
    argument7 : Pointer[RPC_NS_HANDLE]) : CLong;

external (stdcall) RpcNsProfileEltInqNextA(
    argument0 : RPC_NS_HANDLE,
    argument1 : Pointer[RPC_IF_ID],
    argument2 : Pointer[Pointer[CUChar]],
    argument3 : Pointer[CULong],
    argument4 : Pointer[Pointer[CUChar]]) : CLong;

external (stdcall) RpcNsProfileEltInqDone(
    argument0 : Pointer[RPC_NS_HANDLE]) : CLong;

external (stdcall) RpcNsEntryObjectInqNext(
    argument0 : RPC_NS_HANDLE,
    argument1 : Pointer[UUID]) : CLong;

external (stdcall) RpcNsEntryObjectInqDone(
    argument0 : Pointer[RPC_NS_HANDLE]) : CLong;

external (stdcall) RpcNsEntryExpandNameA(
    argument0 : CULong,
    argument1 : Pointer[CUChar],
    argument2 : Pointer[Pointer[CUChar]]) : CLong;

external (stdcall) RpcNsMgmtBindingUnexportA(
    argument0 : CULong,
    argument1 : Pointer[CUChar],
    argument2 : Pointer[RPC_IF_ID],
    argument3 : CULong,
    argument4 : Pointer[UUID_VECTOR]) : CLong;

external (stdcall) RpcNsMgmtEntryCreateA(
    argument0 : CULong,
    argument1 : Pointer[CUChar]) : CLong;

external (stdcall) RpcNsMgmtEntryDeleteA(
    argument0 : CULong,
    argument1 : Pointer[CUChar]) : CLong;

external (stdcall) RpcNsMgmtEntryInqIfIdsA(
    argument0 : CULong,
    argument1 : Pointer[CUChar],
    argument2 : Pointer[Pointer[RPC_IF_ID_VECTOR]]) : CLong;

external (stdcall) RpcNsMgmtHandleSetExpAge(
    argument0 : RPC_NS_HANDLE,
    argument1 : CULong) : CLong;

external (stdcall) RpcNsMgmtInqExpAge(
    argument0 : Pointer[CULong]) : CLong;

external (stdcall) RpcNsMgmtSetExpAge(
    argument0 : CULong) : CLong;

external (stdcall) RpcNsBindingImportNext(
    argument0 : RPC_NS_HANDLE,
    argument1 : Pointer[RPC_BINDING_HANDLE]) : CLong;

external (stdcall) RpcNsBindingImportDone(
    argument0 : Pointer[RPC_NS_HANDLE]) : CLong;

external (stdcall) RpcNsBindingSelect(
    argument0 : Pointer[RPC_BINDING_VECTOR],
    argument1 : Pointer[RPC_BINDING_HANDLE]) : CLong;

external (stdcall) RpcNsEntryObjectInqBeginA(
    argument0 : CULong,
    argument1 : Pointer[CUChar],
    argument2 : Pointer[RPC_NS_HANDLE]) : CLong;

external (stdcall) RpcNsBindingImportBeginA(
    argument0 : CULong,
    argument1 : Pointer[CUChar],
    argument2 : RPC_IF_HANDLE,
    argument3 : Pointer[UUID],
    argument4 : Pointer[RPC_NS_HANDLE]) : CLong;

external (stdcall) RpcNsBindingExportW(
    argument0 : CULong,
    argument1 : Pointer[UShort],
    argument2 : RPC_IF_HANDLE,
    argument3 : Pointer[RPC_BINDING_VECTOR],
    argument4 : Pointer[UUID_VECTOR]) : CLong;

external (stdcall) RpcNsBindingUnexportW(
    argument0 : CULong,
    argument1 : Pointer[UShort],
    argument2 : RPC_IF_HANDLE,
    argument3 : Pointer[UUID_VECTOR]) : CLong;

external (stdcall) RpcNsBindingLookupBeginW(
    argument0 : CULong,
    argument1 : Pointer[UShort],
    argument2 : RPC_IF_HANDLE,
    argument3 : Pointer[UUID],
    argument4 : CULong,
    argument5 : Pointer[RPC_NS_HANDLE]) : CLong;

external (stdcall) RpcNsGroupDeleteW(
    argument0 : CULong,
    argument1 : Pointer[UShort]) : CLong;

external (stdcall) RpcNsGroupMbrAddW(
    argument0 : CULong,
    argument1 : Pointer[UShort],
    argument2 : CULong,
    argument3 : Pointer[UShort]) : CLong;

external (stdcall) RpcNsGroupMbrRemoveW(
    argument0 : CULong,
    argument1 : Pointer[UShort],
    argument2 : CULong,
    argument3 : Pointer[UShort]) : CLong;

external (stdcall) RpcNsGroupMbrInqBeginW(
    argument0 : CULong,
    argument1 : Pointer[UShort],
    argument2 : CULong,
    argument3 : Pointer[RPC_NS_HANDLE]) : CLong;

external (stdcall) RpcNsGroupMbrInqNextW(
    argument0 : RPC_NS_HANDLE,
    argument1 : Pointer[Pointer[UShort]]) : CLong;

external (stdcall) RpcNsProfileDeleteW(
    argument0 : CULong,
    argument1 : Pointer[UShort]) : CLong;

external (stdcall) RpcNsProfileEltAddW(
    argument0 : CULong,
    argument1 : Pointer[UShort],
    argument2 : Pointer[RPC_IF_ID],
    argument3 : CULong,
    argument4 : Pointer[UShort],
    argument5 : CULong,
    argument6 : Pointer[UShort]) : CLong;

external (stdcall) RpcNsProfileEltRemoveW(
    argument0 : CULong,
    argument1 : Pointer[UShort],
    argument2 : Pointer[RPC_IF_ID],
    argument3 : CULong,
    argument4 : Pointer[UShort]) : CLong;

external (stdcall) RpcNsProfileEltInqBeginW(
    argument0 : CULong,
    argument1 : Pointer[UShort],
    argument2 : CULong,
    argument3 : Pointer[RPC_IF_ID],
    argument4 : CULong,
    argument5 : CULong,
    argument6 : Pointer[UShort],
    argument7 : Pointer[RPC_NS_HANDLE]) : CLong;

external (stdcall) RpcNsProfileEltInqNextW(
    argument0 : RPC_NS_HANDLE,
    argument1 : Pointer[RPC_IF_ID],
    argument2 : Pointer[Pointer[UShort]],
    argument3 : Pointer[CULong],
    argument4 : Pointer[Pointer[UShort]]) : CLong;

external (stdcall) RpcNsEntryObjectInqBeginW(
    argument0 : CULong,
    argument1 : Pointer[UShort],
    argument2 : Pointer[RPC_NS_HANDLE]) : CLong;

external (stdcall) RpcNsEntryExpandNameW(
    argument0 : CULong,
    argument1 : Pointer[UShort],
    argument2 : Pointer[Pointer[UShort]]) : CLong;

external (stdcall) RpcNsMgmtBindingUnexportW(
    argument0 : CULong,
    argument1 : Pointer[UShort],
    argument2 : Pointer[RPC_IF_ID],
    argument3 : CULong,
    argument4 : Pointer[UUID_VECTOR]) : CLong;

external (stdcall) RpcNsMgmtEntryCreateW(
    argument0 : CULong,
    argument1 : Pointer[UShort]) : CLong;

external (stdcall) RpcNsMgmtEntryDeleteW(
    argument0 : CULong,
    argument1 : Pointer[UShort]) : CLong;

external (stdcall) RpcNsMgmtEntryInqIfIdsW(
    argument0 : CULong,
    argument1 : UShort,
    argument2 : Pointer[Pointer[RPC_IF_ID_VECTOR]]) : CLong;

external (stdcall) RpcNsBindingImportBeginW(
    argument0 : CULong,
    argument1 : Pointer[UShort],
    argument2 : RPC_IF_HANDLE,
    argument3 : Pointer[UUID],
    argument4 : Pointer[RPC_NS_HANDLE]) : CLong;

external (stdcall) RpcImpersonateClient(
    argument0 : RPC_BINDING_HANDLE) : CLong;

external (stdcall) RpcRevertToSelf() : CLong;

external (stdcall) I_RpcMapWin32Status(
    argument0 : CLong) : CLong;

static FILEOP_FLAGS = UShort;

static PRINTEROP_FLAGS = UShort;

record _AppBarData {
    cbSize : CULong;
    hWnd : HWND;
    uCallbackMessage : UInt;
    uEdge : UInt;
    rc : RECT;
    lParam : CLong;
}

static APPBARDATA = _AppBarData;

static PAPPBARDATA = Pointer[_AppBarData];

record HDROP__ {
    i : Int;
}

static HDROP = Pointer[HDROP__];

record _NOTIFYICONDATAA {
    cbSize : CULong;
    hWnd : HWND;
    uID : UInt;
    uFlags : UInt;
    uCallbackMessage : UInt;
    hIcon : HICON;
    szTip : Array[CChar,64];
}

static NOTIFYICONDATAA = _NOTIFYICONDATAA;

static PNOTIFYICONDATAA = Pointer[_NOTIFYICONDATAA];

record _NOTIFYICONDATAW {
    cbSize : CULong;
    hWnd : HWND;
    uID : UInt;
    uFlags : UInt;
    uCallbackMessage : UInt;
    hIcon : HICON;
    szTip : Array[UShort,64];
}

static NOTIFYICONDATAW = _NOTIFYICONDATAW;

static PNOTIFYICONDATAW = Pointer[_NOTIFYICONDATAW];

record _SHELLEXECUTEINFOA {
    cbSize : CULong;
    fMask : CULong;
    hwnd : HWND;
    lpVerb : LPCSTR;
    lpFile : LPCSTR;
    lpParameters : LPCSTR;
    lpDirectory : LPCSTR;
    nShow : Int;
    hInstApp : HINSTANCE;
    lpIDList : PVOID;
    lpClass : LPCSTR;
    hkeyClass : HKEY;
    dwHotKey : CULong;
    hIcon : HANDLE;
    hProcess : HANDLE;
}

static SHELLEXECUTEINFOA = _SHELLEXECUTEINFOA;

static LPSHELLEXECUTEINFOA = Pointer[_SHELLEXECUTEINFOA];

record _SHELLEXECUTEINFOW {
    cbSize : CULong;
    fMask : CULong;
    hwnd : HWND;
    lpVerb : LPCWSTR;
    lpFile : LPCWSTR;
    lpParameters : LPCWSTR;
    lpDirectory : LPCWSTR;
    nShow : Int;
    hInstApp : HINSTANCE;
    lpIDList : PVOID;
    lpClass : LPCWSTR;
    hkeyClass : HKEY;
    dwHotKey : CULong;
    hIcon : HANDLE;
    hProcess : HANDLE;
}

static SHELLEXECUTEINFOW = _SHELLEXECUTEINFOW;

static LPSHELLEXECUTEINFOW = Pointer[_SHELLEXECUTEINFOW];

record _SHFILEOPSTRUCTA {
    hwnd : HWND;
    wFunc : UInt;
    pFrom : LPCSTR;
    pTo : LPCSTR;
    fFlags : UShort;
    fAnyOperationsAborted : Int;
    hNameMappings : PVOID;
    lpszProgressTitle : LPCSTR;
}

static SHFILEOPSTRUCTA = _SHFILEOPSTRUCTA;

static LPSHFILEOPSTRUCTA = Pointer[_SHFILEOPSTRUCTA];

record _SHFILEOPSTRUCTW {
    hwnd : HWND;
    wFunc : UInt;
    pFrom : LPCWSTR;
    pTo : LPCWSTR;
    fFlags : UShort;
    fAnyOperationsAborted : Int;
    hNameMappings : PVOID;
    lpszProgressTitle : LPCWSTR;
}

static SHFILEOPSTRUCTW = _SHFILEOPSTRUCTW;

static LPSHFILEOPSTRUCTW = Pointer[_SHFILEOPSTRUCTW];

record _SHFILEINFOA {
    hIcon : HICON;
    iIcon : Int;
    dwAttributes : CULong;
    szDisplayName : Array[CChar,260];
    szTypeName : Array[CChar,80];
}

static SHFILEINFOA = _SHFILEINFOA;

record _SHFILEINFOW {
    hIcon : HICON;
    iIcon : Int;
    dwAttributes : CULong;
    szDisplayName : Array[UShort,260];
    szTypeName : Array[UShort,80];
}

static SHFILEINFOW = _SHFILEINFOW;

record _SHQUERYRBINFO {
    cbSize : CULong;
    i64Size : Int64;
    i64NumItems : Int64;
}

static SHQUERYRBINFO = _SHQUERYRBINFO;

static LPSHQUERYRBINFO = Pointer[_SHQUERYRBINFO];

external (stdcall) CommandLineToArgvW(
    argument0 : LPCWSTR,
    argument1 : Pointer[Int]) : Pointer[LPWSTR];

external (stdcall) DragAcceptFiles(
    argument0 : HWND,
    argument1 : Int) : Void;

external (stdcall) DragFinish(
    argument0 : HDROP) : Void;

external (stdcall) DragQueryFileA(
    argument0 : HDROP,
    argument1 : UInt,
    argument2 : LPSTR,
    argument3 : UInt) : UInt;

external (stdcall) DragQueryFileW(
    argument0 : HDROP,
    argument1 : UInt,
    argument2 : LPWSTR,
    argument3 : UInt) : UInt;

external (stdcall) DragQueryPoint(
    argument0 : HDROP,
    argument1 : LPPOINT) : Int;

external (stdcall) DuplicateIcon(
    argument0 : HINSTANCE,
    argument1 : HICON) : HICON;

external (stdcall) ExtractAssociatedIconA(
    argument0 : HINSTANCE,
    argument1 : LPCSTR,
    argument2 : PWORD) : HICON;

external (stdcall) ExtractAssociatedIconW(
    argument0 : HINSTANCE,
    argument1 : LPCWSTR,
    argument2 : PWORD) : HICON;

external (stdcall) ExtractIconA(
    argument0 : HINSTANCE,
    argument1 : LPCSTR,
    argument2 : UInt) : HICON;

external (stdcall) ExtractIconW(
    argument0 : HINSTANCE,
    argument1 : LPCWSTR,
    argument2 : UInt) : HICON;

external (stdcall) ExtractIconExA(
    argument0 : LPCSTR,
    argument1 : Int,
    argument2 : Pointer[HICON],
    argument3 : Pointer[HICON],
    argument4 : UInt) : UInt;

external (stdcall) ExtractIconExW(
    argument0 : LPCWSTR,
    argument1 : Int,
    argument2 : Pointer[HICON],
    argument3 : Pointer[HICON],
    argument4 : UInt) : UInt;

external (stdcall) FindExecutableA(
    argument0 : LPCSTR,
    argument1 : LPCSTR,
    argument2 : LPSTR) : HINSTANCE;

external (stdcall) FindExecutableW(
    argument0 : LPCWSTR,
    argument1 : LPCWSTR,
    argument2 : LPWSTR) : HINSTANCE;

external (stdcall) SHAppBarMessage(
    argument0 : CULong,
    argument1 : PAPPBARDATA) : UInt;

external (stdcall) Shell_NotifyIconA(
    argument0 : CULong,
    argument1 : PNOTIFYICONDATAA) : Int;

external (stdcall) Shell_NotifyIconW(
    argument0 : CULong,
    argument1 : PNOTIFYICONDATAW) : Int;

external (stdcall) ShellAboutA(
    argument0 : HWND,
    argument1 : LPCSTR,
    argument2 : LPCSTR,
    argument3 : HICON) : Int;

external (stdcall) ShellAboutW(
    argument0 : HWND,
    argument1 : LPCWSTR,
    argument2 : LPCWSTR,
    argument3 : HICON) : Int;

external (stdcall) ShellExecuteA(
    argument0 : HWND,
    argument1 : LPCSTR,
    argument2 : LPCSTR,
    argument3 : LPCSTR,
    argument4 : LPCSTR,
    argument5 : Int) : HINSTANCE;

external (stdcall) ShellExecuteW(
    argument0 : HWND,
    argument1 : LPCWSTR,
    argument2 : LPCWSTR,
    argument3 : LPCWSTR,
    argument4 : LPCWSTR,
    argument5 : Int) : HINSTANCE;

external (stdcall) ShellExecuteExA(
    argument0 : LPSHELLEXECUTEINFOA) : Int;

external (stdcall) ShellExecuteExW(
    argument0 : LPSHELLEXECUTEINFOW) : Int;

external (stdcall) SHFileOperationA(
    argument0 : LPSHFILEOPSTRUCTA) : Int;

external (stdcall) SHFileOperationW(
    argument0 : LPSHFILEOPSTRUCTW) : Int;

external (stdcall) SHFreeNameMappings(
    argument0 : HANDLE) : Void;

external (stdcall) SHGetFileInfoA(
    argument0 : LPCSTR,
    argument1 : CULong,
    argument2 : Pointer[SHFILEINFOA],
    argument3 : UInt,
    argument4 : UInt) : CULong;

external (stdcall) SHGetFileInfoW(
    argument0 : LPCWSTR,
    argument1 : CULong,
    argument2 : Pointer[SHFILEINFOW],
    argument3 : UInt,
    argument4 : UInt) : CULong;

external (stdcall) SHQueryRecycleBinA(
    argument0 : LPCSTR,
    argument1 : LPSHQUERYRBINFO) : CLong;

external (stdcall) SHQueryRecycleBinW(
    argument0 : LPCWSTR,
    argument1 : LPSHQUERYRBINFO) : CLong;

external (stdcall) SHEmptyRecycleBinA(
    argument0 : HWND,
    argument1 : LPCSTR,
    argument2 : CULong) : CLong;

external (stdcall) SHEmptyRecycleBinW(
    argument0 : HWND,
    argument1 : LPCWSTR,
    argument2 : CULong) : CLong;

static NOTIFYICONDATA = NOTIFYICONDATAA;

static PNOTIFYICONDATA = Pointer[NOTIFYICONDATAA];

static SHELLEXECUTEINFO = SHELLEXECUTEINFOA;

static LPSHELLEXECUTEINFO = Pointer[SHELLEXECUTEINFOA];

static SHFILEOPSTRUCT = SHFILEOPSTRUCTA;

static LPSHFILEOPSTRUCT = Pointer[SHFILEOPSTRUCTA];

static SHFILEINFO = SHFILEINFOA;

record _PERF_DATA_BLOCK {
    Signature : Array[UShort,4];
    LittleEndian : CULong;
    Version : CULong;
    Revision : CULong;
    TotalByteLength : CULong;
    HeaderLength : CULong;
    NumObjectTypes : CULong;
    DefaultObject : CLong;
    SystemTime : SYSTEMTIME;
    PerfTime : LARGE_INTEGER;
    PerfFreq : LARGE_INTEGER;
    PerfTime100nSec : LARGE_INTEGER;
    SystemNameLength : CULong;
    SystemNameOffset : CULong;
}

static PERF_DATA_BLOCK = _PERF_DATA_BLOCK;

static PPERF_DATA_BLOCK = Pointer[_PERF_DATA_BLOCK];

record _PERF_OBJECT_TYPE {
    TotalByteLength : CULong;
    DefinitionLength : CULong;
    HeaderLength : CULong;
    ObjectNameTitleIndex : CULong;
    ObjectNameTitle : LPWSTR;
    ObjectHelpTitleIndex : CULong;
    ObjectHelpTitle : LPWSTR;
    DetailLevel : CULong;
    NumCounters : CULong;
    DefaultCounter : CLong;
    NumInstances : CLong;
    CodePage : CULong;
    PerfTime : LARGE_INTEGER;
    PerfFreq : LARGE_INTEGER;
}

static PERF_OBJECT_TYPE = _PERF_OBJECT_TYPE;

static PPERF_OBJECT_TYPE = Pointer[_PERF_OBJECT_TYPE];

record _PERF_COUNTER_DEFINITION {
    ByteLength : CULong;
    CounterNameTitleIndex : CULong;
    CounterNameTitle : LPWSTR;
    CounterHelpTitleIndex : CULong;
    CounterHelpTitle : LPWSTR;
    DefaultScale : CLong;
    DetailLevel : CULong;
    CounterType : CULong;
    CounterSize : CULong;
    CounterOffset : CULong;
}

static PERF_COUNTER_DEFINITION = _PERF_COUNTER_DEFINITION;

static PPERF_COUNTER_DEFINITION = Pointer[_PERF_COUNTER_DEFINITION];

record _PERF_INSTANCE_DEFINITION {
    ByteLength : CULong;
    ParentObjectTitleIndex : CULong;
    ParentObjectInstance : CULong;
    UniqueID : CLong;
    NameOffset : CULong;
    NameLength : CULong;
}

static PERF_INSTANCE_DEFINITION = _PERF_INSTANCE_DEFINITION;

static PPERF_INSTANCE_DEFINITION = Pointer[_PERF_INSTANCE_DEFINITION];

record _PERF_COUNTER_BLOCK {
    ByteLength : CULong;
}

static PERF_COUNTER_BLOCK = _PERF_COUNTER_BLOCK;

static PPERF_COUNTER_BLOCK = Pointer[_PERF_COUNTER_BLOCK];

static __CDHOOKPROC = StdCallCodePointer[Pointer[HWND__],UInt,UInt,CLong,UInt];

static LPCCHOOKPROC = __CDHOOKPROC;

static LPCFHOOKPROC = __CDHOOKPROC;

static LPFRHOOKPROC = __CDHOOKPROC;

static LPOFNHOOKPROC = __CDHOOKPROC;

static LPPAGEPAINTHOOK = __CDHOOKPROC;

static LPPAGESETUPHOOK = __CDHOOKPROC;

static LPSETUPHOOKPROC = __CDHOOKPROC;

static LPPRINTHOOKPROC = __CDHOOKPROC;

record tagCHOOSECOLORA {
    lStructSize : CULong;
    hwndOwner : HWND;
    hInstance : HWND;
    rgbResult : CULong;
    lpCustColors : Pointer[CULong];
    Flags : CULong;
    lCustData : CLong;
    lpfnHook : LPCCHOOKPROC;
    lpTemplateName : LPCSTR;
}

static CHOOSECOLORA = tagCHOOSECOLORA;

static LPCHOOSECOLORA = Pointer[tagCHOOSECOLORA];

record tagCHOOSECOLORW {
    lStructSize : CULong;
    hwndOwner : HWND;
    hInstance : HWND;
    rgbResult : CULong;
    lpCustColors : Pointer[CULong];
    Flags : CULong;
    lCustData : CLong;
    lpfnHook : LPCCHOOKPROC;
    lpTemplateName : LPCWSTR;
}

static CHOOSECOLORW = tagCHOOSECOLORW;

static LPCHOOSECOLORW = Pointer[tagCHOOSECOLORW];

record tagCHOOSEFONTA {
    lStructSize : CULong;
    hwndOwner : HWND;
    hDC : HDC;
    lpLogFont : LPLOGFONTA;
    iPointSize : Int;
    Flags : CULong;
    rgbColors : CULong;
    lCustData : CLong;
    lpfnHook : LPCFHOOKPROC;
    lpTemplateName : LPCSTR;
    hInstance : HINSTANCE;
    lpszStyle : LPSTR;
    nFontType : UShort;
    ___MISSING_ALIGNMENT__ : UShort;
    nSizeMin : Int;
    nSizeMax : Int;
}

static CHOOSEFONTA = tagCHOOSEFONTA;

static LPCHOOSEFONTA = Pointer[tagCHOOSEFONTA];

record tagCHOOSEFONTW {
    lStructSize : CULong;
    hwndOwner : HWND;
    hDC : HDC;
    lpLogFont : LPLOGFONTW;
    iPointSize : Int;
    Flags : CULong;
    rgbColors : CULong;
    lCustData : CLong;
    lpfnHook : LPCFHOOKPROC;
    lpTemplateName : LPCWSTR;
    hInstance : HINSTANCE;
    lpszStyle : LPWSTR;
    nFontType : UShort;
    ___MISSING_ALIGNMENT__ : UShort;
    nSizeMin : Int;
    nSizeMax : Int;
}

static CHOOSEFONTW = tagCHOOSEFONTW;

static LPCHOOSEFONTW = Pointer[tagCHOOSEFONTW];

record tagDEVNAMES {
    wDriverOffset : UShort;
    wDeviceOffset : UShort;
    wOutputOffset : UShort;
    wDefault : UShort;
}

static DEVNAMES = tagDEVNAMES;

static LPDEVNAMES = Pointer[tagDEVNAMES];

record UnnamedRecord24 {
    lStructSize : CULong;
    hwndOwner : HWND;
    hInstance : HINSTANCE;
    Flags : CULong;
    lpstrFindWhat : LPSTR;
    lpstrReplaceWith : LPSTR;
    wFindWhatLen : UShort;
    wReplaceWithLen : UShort;
    lCustData : CLong;
    lpfnHook : LPFRHOOKPROC;
    lpTemplateName : LPCSTR;
}

static FINDREPLACEA = UnnamedRecord24;

static LPFINDREPLACEA = Pointer[UnnamedRecord24];

record UnnamedRecord25 {
    lStructSize : CULong;
    hwndOwner : HWND;
    hInstance : HINSTANCE;
    Flags : CULong;
    lpstrFindWhat : LPWSTR;
    lpstrReplaceWith : LPWSTR;
    wFindWhatLen : UShort;
    wReplaceWithLen : UShort;
    lCustData : CLong;
    lpfnHook : LPFRHOOKPROC;
    lpTemplateName : LPCWSTR;
}

static FINDREPLACEW = UnnamedRecord25;

static LPFINDREPLACEW = Pointer[UnnamedRecord25];

record tagOFNA {
    lStructSize : CULong;
    hwndOwner : HWND;
    hInstance : HINSTANCE;
    lpstrFilter : LPCSTR;
    lpstrCustomFilter : LPSTR;
    nMaxCustFilter : CULong;
    nFilterIndex : CULong;
    lpstrFile : LPSTR;
    nMaxFile : CULong;
    lpstrFileTitle : LPSTR;
    nMaxFileTitle : CULong;
    lpstrInitialDir : LPCSTR;
    lpstrTitle : LPCSTR;
    Flags : CULong;
    nFileOffset : UShort;
    nFileExtension : UShort;
    lpstrDefExt : LPCSTR;
    lCustData : CULong;
    lpfnHook : LPOFNHOOKPROC;
    lpTemplateName : LPCSTR;
}

static OPENFILENAMEA = tagOFNA;

static LPOPENFILENAMEA = Pointer[tagOFNA];

record tagOFNW {
    lStructSize : CULong;
    hwndOwner : HWND;
    hInstance : HINSTANCE;
    lpstrFilter : LPCWSTR;
    lpstrCustomFilter : LPWSTR;
    nMaxCustFilter : CULong;
    nFilterIndex : CULong;
    lpstrFile : LPWSTR;
    nMaxFile : CULong;
    lpstrFileTitle : LPWSTR;
    nMaxFileTitle : CULong;
    lpstrInitialDir : LPCWSTR;
    lpstrTitle : LPCWSTR;
    Flags : CULong;
    nFileOffset : UShort;
    nFileExtension : UShort;
    lpstrDefExt : LPCWSTR;
    lCustData : CULong;
    lpfnHook : LPOFNHOOKPROC;
    lpTemplateName : LPCWSTR;
}

static OPENFILENAMEW = tagOFNW;

static LPOPENFILENAMEW = Pointer[tagOFNW];

record _OFNOTIFYA {
    hdr : NMHDR;
    lpOFN : LPOPENFILENAMEA;
    pszFile : LPSTR;
}

static OFNOTIFYA = _OFNOTIFYA;

static LPOFNOTIFYA = Pointer[_OFNOTIFYA];

record _OFNOTIFYW {
    hdr : NMHDR;
    lpOFN : LPOPENFILENAMEW;
    pszFile : LPWSTR;
}

static OFNOTIFYW = _OFNOTIFYW;

static LPOFNOTIFYW = Pointer[_OFNOTIFYW];

record tagPSDA {
    lStructSize : CULong;
    hwndOwner : HWND;
    hDevMode : HGLOBAL;
    hDevNames : HGLOBAL;
    Flags : CULong;
    ptPaperSize : POINT;
    rtMinMargin : RECT;
    rtMargin : RECT;
    hInstance : HINSTANCE;
    lCustData : CLong;
    lpfnPageSetupHook : LPPAGESETUPHOOK;
    lpfnPagePaintHook : LPPAGEPAINTHOOK;
    lpPageSetupTemplateName : LPCSTR;
    hPageSetupTemplate : HGLOBAL;
}

static PAGESETUPDLGA = tagPSDA;

static LPPAGESETUPDLGA = Pointer[tagPSDA];

record tagPSDW {
    lStructSize : CULong;
    hwndOwner : HWND;
    hDevMode : HGLOBAL;
    hDevNames : HGLOBAL;
    Flags : CULong;
    ptPaperSize : POINT;
    rtMinMargin : RECT;
    rtMargin : RECT;
    hInstance : HINSTANCE;
    lCustData : CLong;
    lpfnPageSetupHook : LPPAGESETUPHOOK;
    lpfnPagePaintHook : LPPAGEPAINTHOOK;
    lpPageSetupTemplateName : LPCWSTR;
    hPageSetupTemplate : HGLOBAL;
}

static PAGESETUPDLGW = tagPSDW;

static LPPAGESETUPDLGW = Pointer[tagPSDW];

record tagPDA {
    lStructSize : CULong;
    hwndOwner : HWND;
    hDevMode : HANDLE;
    hDevNames : HANDLE;
    hDC : HDC;
    Flags : CULong;
    nFromPage : UShort;
    nToPage : UShort;
    nMinPage : UShort;
    nMaxPage : UShort;
    nCopies : UShort;
    hInstance : HINSTANCE;
    lCustData : CULong;
    lpfnPrintHook : LPPRINTHOOKPROC;
    lpfnSetupHook : LPSETUPHOOKPROC;
    lpPrintTemplateName : LPCSTR;
    lpSetupTemplateName : LPCSTR;
    hPrintTemplate : HANDLE;
    hSetupTemplate : HANDLE;
}

static PRINTDLGA = tagPDA;

static LPPRINTDLGA = Pointer[tagPDA];

record tagPDW {
    lStructSize : CULong;
    hwndOwner : HWND;
    hDevMode : HANDLE;
    hDevNames : HANDLE;
    hDC : HDC;
    Flags : CULong;
    nFromPage : UShort;
    nToPage : UShort;
    nMinPage : UShort;
    nMaxPage : UShort;
    nCopies : UShort;
    hInstance : HINSTANCE;
    lCustData : CULong;
    lpfnPrintHook : LPPRINTHOOKPROC;
    lpfnSetupHook : LPSETUPHOOKPROC;
    lpPrintTemplateName : LPCWSTR;
    lpSetupTemplateName : LPCWSTR;
    hPrintTemplate : HANDLE;
    hSetupTemplate : HANDLE;
}

static PRINTDLGW = tagPDW;

static LPPRINTDLGW = Pointer[tagPDW];

external (stdcall) ChooseColorA(
    argument0 : LPCHOOSECOLORA) : Int;

external (stdcall) ChooseColorW(
    argument0 : LPCHOOSECOLORW) : Int;

external (stdcall) ChooseFontA(
    argument0 : LPCHOOSEFONTA) : Int;

external (stdcall) ChooseFontW(
    argument0 : LPCHOOSEFONTW) : Int;

external (stdcall) CommDlgExtendedError() : CULong;

external (stdcall) FindTextA(
    argument0 : LPFINDREPLACEA) : HWND;

external (stdcall) FindTextW(
    argument0 : LPFINDREPLACEW) : HWND;

external (stdcall) GetFileTitleA(
    argument0 : LPCSTR,
    argument1 : LPSTR,
    argument2 : UShort) : Short;

external (stdcall) GetFileTitleW(
    argument0 : LPCWSTR,
    argument1 : LPWSTR,
    argument2 : UShort) : Short;

external (stdcall) GetOpenFileNameA(
    argument0 : LPOPENFILENAMEA) : Int;

external (stdcall) GetOpenFileNameW(
    argument0 : LPOPENFILENAMEW) : Int;

external (stdcall) GetSaveFileNameA(
    argument0 : LPOPENFILENAMEA) : Int;

external (stdcall) GetSaveFileNameW(
    argument0 : LPOPENFILENAMEW) : Int;

external (stdcall) PageSetupDlgA(
    argument0 : LPPAGESETUPDLGA) : Int;

external (stdcall) PageSetupDlgW(
    argument0 : LPPAGESETUPDLGW) : Int;

external (stdcall) PrintDlgA(
    argument0 : LPPRINTDLGA) : Int;

external (stdcall) PrintDlgW(
    argument0 : LPPRINTDLGW) : Int;

external (stdcall) ReplaceTextA(
    argument0 : LPFINDREPLACEA) : HWND;

external (stdcall) ReplaceTextW(
    argument0 : LPFINDREPLACEW) : HWND;

static CHOOSECOLOR = CHOOSECOLORA;

static LPCHOOSECOLOR = Pointer[CHOOSECOLORA];

static CHOOSEFONT = CHOOSEFONTA;

static LPCHOOSEFONT = Pointer[CHOOSEFONTA];

static FINDREPLACE = FINDREPLACEA;

static LPFINDREPLACE = Pointer[FINDREPLACEA];

static OPENFILENAME = OPENFILENAMEA;

static LPOPENFILENAME = Pointer[OPENFILENAMEA];

static OFNOTIFY = OFNOTIFYA;

static LPOFNOTIFY = Pointer[OFNOTIFYA];

static PAGESETUPDLG = PAGESETUPDLGA;

static LPPAGESETUPDLG = Pointer[PAGESETUPDLGA];

static PRINTDLG = PRINTDLGA;

static LPPRINTDLG = Pointer[PRINTDLGA];

record _ADDJOB_INFO_1A {
    Path : LPSTR;
    JobId : CULong;
}

static ADDJOB_INFO_1A = _ADDJOB_INFO_1A;

static PADDJOB_INFO_1A = Pointer[_ADDJOB_INFO_1A];

static LPADDJOB_INFO_1A = Pointer[_ADDJOB_INFO_1A];

record _ADDJOB_INFO_1W {
    Path : LPWSTR;
    JobId : CULong;
}

static ADDJOB_INFO_1W = _ADDJOB_INFO_1W;

static PADDJOB_INFO_1W = Pointer[_ADDJOB_INFO_1W];

static LPADDJOB_INFO_1W = Pointer[_ADDJOB_INFO_1W];

record _DATATYPES_INFO_1A {
    pName : LPSTR;
}

static DATATYPES_INFO_1A = _DATATYPES_INFO_1A;

static PDATATYPES_INFO_1A = Pointer[_DATATYPES_INFO_1A];

static LPDATATYPES_INFO_1A = Pointer[_DATATYPES_INFO_1A];

record _DATATYPES_INFO_1W {
    pName : LPWSTR;
}

static DATATYPES_INFO_1W = _DATATYPES_INFO_1W;

static PDATATYPES_INFO_1W = Pointer[_DATATYPES_INFO_1W];

static LPDATATYPES_INFO_1W = Pointer[_DATATYPES_INFO_1W];

record _JOB_INFO_1A {
    JobId : CULong;
    pPrinterName : LPSTR;
    pMachineName : LPSTR;
    pUserName : LPSTR;
    pDocument : LPSTR;
    pDatatype : LPSTR;
    pStatus : LPSTR;
    Status : CULong;
    Priority : CULong;
    Position : CULong;
    TotalPages : CULong;
    PagesPrinted : CULong;
    Submitted : SYSTEMTIME;
}

static JOB_INFO_1A = _JOB_INFO_1A;

static PJOB_INFO_1A = Pointer[_JOB_INFO_1A];

static LPJOB_INFO_1A = Pointer[_JOB_INFO_1A];

record _JOB_INFO_1W {
    JobId : CULong;
    pPrinterName : LPWSTR;
    pMachineName : LPWSTR;
    pUserName : LPWSTR;
    pDocument : LPWSTR;
    pDatatype : LPWSTR;
    pStatus : LPWSTR;
    Status : CULong;
    Priority : CULong;
    Position : CULong;
    TotalPages : CULong;
    PagesPrinted : CULong;
    Submitted : SYSTEMTIME;
}

static JOB_INFO_1W = _JOB_INFO_1W;

static PJOB_INFO_1W = Pointer[_JOB_INFO_1W];

static LPJOB_INFO_1W = Pointer[_JOB_INFO_1W];

record _JOB_INFO_2A {
    JobId : CULong;
    pPrinterName : LPSTR;
    pMachineName : LPSTR;
    pUserName : LPSTR;
    pDocument : LPSTR;
    pNotifyName : LPSTR;
    pDatatype : LPSTR;
    pPrintProcessor : LPSTR;
    pParameters : LPSTR;
    pDriverName : LPSTR;
    pDevMode : LPDEVMODEA;
    pStatus : LPSTR;
    pSecurityDescriptor : PSECURITY_DESCRIPTOR;
    Status : CULong;
    Priority : CULong;
    Position : CULong;
    StartTime : CULong;
    UntilTime : CULong;
    TotalPages : CULong;
    Size : CULong;
    Submitted : SYSTEMTIME;
    Time : CULong;
    PagesPrinted : CULong;
}

static JOB_INFO_2A = _JOB_INFO_2A;

static PJOB_INFO_2A = Pointer[_JOB_INFO_2A];

static LPJOB_INFO_2A = Pointer[_JOB_INFO_2A];

record _JOB_INFO_2W {
    JobId : CULong;
    pPrinterName : LPWSTR;
    pMachineName : LPWSTR;
    pUserName : LPWSTR;
    pDocument : LPWSTR;
    pNotifyName : LPWSTR;
    pDatatype : LPWSTR;
    pPrintProcessor : LPWSTR;
    pParameters : LPWSTR;
    pDriverName : LPWSTR;
    pDevMode : LPDEVMODEW;
    pStatus : LPWSTR;
    pSecurityDescriptor : PSECURITY_DESCRIPTOR;
    Status : CULong;
    Priority : CULong;
    Position : CULong;
    StartTime : CULong;
    UntilTime : CULong;
    TotalPages : CULong;
    Size : CULong;
    Submitted : SYSTEMTIME;
    Time : CULong;
    PagesPrinted : CULong;
}

static JOB_INFO_2W = _JOB_INFO_2W;

static PJOB_INFO_2W = Pointer[_JOB_INFO_2W];

static LPJOB_INFO_2W = Pointer[_JOB_INFO_2W];

record _JOB_INFO_3 {
    JobId : CULong;
    NextJobId : CULong;
    Reserved : CULong;
}

static JOB_INFO_3 = _JOB_INFO_3;

static PJOB_INFO_3 = Pointer[_JOB_INFO_3];

static LPJOB_INFO_3 = Pointer[_JOB_INFO_3];

record _DOC_INFO_1A {
    pDocName : LPSTR;
    pOutputFile : LPSTR;
    pDatatype : LPSTR;
}

static DOC_INFO_1A = _DOC_INFO_1A;

static PDOC_INFO_1A = Pointer[_DOC_INFO_1A];

static LPDOC_INFO_1A = Pointer[_DOC_INFO_1A];

record _DOC_INFO_1W {
    pDocName : LPWSTR;
    pOutputFile : LPWSTR;
    pDatatype : LPWSTR;
}

static DOC_INFO_1W = _DOC_INFO_1W;

static PDOC_INFO_1W = Pointer[_DOC_INFO_1W];

static LPDOC_INFO_1W = Pointer[_DOC_INFO_1W];

record _DOC_INFO_2A {
    pDocName : LPSTR;
    pOutputFile : LPSTR;
    pDatatype : LPSTR;
    dwMode : CULong;
    JobId : CULong;
}

static DOC_INFO_2A = _DOC_INFO_2A;

static PDOC_INFO_2A = Pointer[_DOC_INFO_2A];

static LPDOC_INFO_2A = Pointer[_DOC_INFO_2A];

record _DOC_INFO_2W {
    pDocName : LPWSTR;
    pOutputFile : LPWSTR;
    pDatatype : LPWSTR;
    dwMode : CULong;
    JobId : CULong;
}

static DOC_INFO_2W = _DOC_INFO_2W;

static PDOC_INFO_2W = Pointer[_DOC_INFO_2W];

static LPDOC_INFO_2W = Pointer[_DOC_INFO_2W];

record _DRIVER_INFO_1A {
    pName : LPSTR;
}

static DRIVER_INFO_1A = _DRIVER_INFO_1A;

static PDRIVER_INFO_1A = Pointer[_DRIVER_INFO_1A];

static LPDRIVER_INFO_1A = Pointer[_DRIVER_INFO_1A];

record _DRIVER_INFO_1W {
    pName : LPWSTR;
}

static DRIVER_INFO_1W = _DRIVER_INFO_1W;

static PDRIVER_INFO_1W = Pointer[_DRIVER_INFO_1W];

static LPDRIVER_INFO_1W = Pointer[_DRIVER_INFO_1W];

record _DRIVER_INFO_2A {
    cVersion : CULong;
    pName : LPSTR;
    pEnvironment : LPSTR;
    pDriverPath : LPSTR;
    pDataFile : LPSTR;
    pConfigFile : LPSTR;
}

static DRIVER_INFO_2A = _DRIVER_INFO_2A;

static PDRIVER_INFO_2A = Pointer[_DRIVER_INFO_2A];

static LPDRIVER_INFO_2A = Pointer[_DRIVER_INFO_2A];

record _DRIVER_INFO_2W {
    cVersion : CULong;
    pName : LPWSTR;
    pEnvironment : LPWSTR;
    pDriverPath : LPWSTR;
    pDataFile : LPWSTR;
    pConfigFile : LPWSTR;
}

static DRIVER_INFO_2W = _DRIVER_INFO_2W;

static PDRIVER_INFO_2W = Pointer[_DRIVER_INFO_2W];

static LPDRIVER_INFO_2W = Pointer[_DRIVER_INFO_2W];

record _DRIVER_INFO_3A {
    cVersion : CULong;
    pName : LPSTR;
    pEnvironment : LPSTR;
    pDriverPath : LPSTR;
    pDataFile : LPSTR;
    pConfigFile : LPSTR;
    pHelpFile : LPSTR;
    pDependentFiles : LPSTR;
    pMonitorName : LPSTR;
    pDefaultDataType : LPSTR;
}

static DRIVER_INFO_3A = _DRIVER_INFO_3A;

static PDRIVER_INFO_3A = Pointer[_DRIVER_INFO_3A];

static LPDRIVER_INFO_3A = Pointer[_DRIVER_INFO_3A];

record _DRIVER_INFO_3W {
    cVersion : CULong;
    pName : LPWSTR;
    pEnvironment : LPWSTR;
    pDriverPath : LPWSTR;
    pDataFile : LPWSTR;
    pConfigFile : LPWSTR;
    pHelpFile : LPWSTR;
    pDependentFiles : LPWSTR;
    pMonitorName : LPWSTR;
    pDefaultDataType : LPWSTR;
}

static DRIVER_INFO_3W = _DRIVER_INFO_3W;

static PDRIVER_INFO_3W = Pointer[_DRIVER_INFO_3W];

static LPDRIVER_INFO_3W = Pointer[_DRIVER_INFO_3W];

record _MONITOR_INFO_1A {
    pName : LPSTR;
}

static MONITOR_INFO_1A = _MONITOR_INFO_1A;

static PMONITOR_INFO_1A = Pointer[_MONITOR_INFO_1A];

static LPMONITOR_INFO_1A = Pointer[_MONITOR_INFO_1A];

record _MONITOR_INFO_1W {
    pName : LPWSTR;
}

static MONITOR_INFO_1W = _MONITOR_INFO_1W;

static PMONITOR_INFO_1W = Pointer[_MONITOR_INFO_1W];

static LPMONITOR_INFO_1W = Pointer[_MONITOR_INFO_1W];

record _PORT_INFO_1A {
    pName : LPSTR;
}

static PORT_INFO_1A = _PORT_INFO_1A;

static PPORT_INFO_1A = Pointer[_PORT_INFO_1A];

static LPPORT_INFO_1A = Pointer[_PORT_INFO_1A];

record _PORT_INFO_1W {
    pName : LPWSTR;
}

static PORT_INFO_1W = _PORT_INFO_1W;

static PPORT_INFO_1W = Pointer[_PORT_INFO_1W];

static LPPORT_INFO_1W = Pointer[_PORT_INFO_1W];

record _MONITOR_INFO_2A {
    pName : LPSTR;
    pEnvironment : LPSTR;
    pDLLName : LPSTR;
}

static MONITOR_INFO_2A = _MONITOR_INFO_2A;

static PMONITOR_INFO_2A = Pointer[_MONITOR_INFO_2A];

static LPMONITOR_INFO_2A = Pointer[_MONITOR_INFO_2A];

record _MONITOR_INFO_2W {
    pName : LPWSTR;
    pEnvironment : LPWSTR;
    pDLLName : LPWSTR;
}

static MONITOR_INFO_2W = _MONITOR_INFO_2W;

static PMONITOR_INFO_2W = Pointer[_MONITOR_INFO_2W];

static LPMONITOR_INFO_2W = Pointer[_MONITOR_INFO_2W];

record _PORT_INFO_2A {
    pPortName : LPSTR;
    pMonitorName : LPSTR;
    pDescription : LPSTR;
    fPortType : CULong;
    Reserved : CULong;
}

static PORT_INFO_2A = _PORT_INFO_2A;

static PPORT_INFO_2A = Pointer[_PORT_INFO_2A];

static LPPORT_INFO_2A = Pointer[_PORT_INFO_2A];

record _PORT_INFO_2W {
    pPortName : LPWSTR;
    pMonitorName : LPWSTR;
    pDescription : LPWSTR;
    fPortType : CULong;
    Reserved : CULong;
}

static PORT_INFO_2W = _PORT_INFO_2W;

static PPORT_INFO_2W = Pointer[_PORT_INFO_2W];

static LPPORT_INFO_2W = Pointer[_PORT_INFO_2W];

record _PORT_INFO_3A {
    dwStatus : CULong;
    pszStatus : LPSTR;
    dwSeverity : CULong;
}

static PORT_INFO_3A = _PORT_INFO_3A;

static PPORT_INFO_3A = Pointer[_PORT_INFO_3A];

static LPPORT_INFO_3A = Pointer[_PORT_INFO_3A];

record _PORT_INFO_3W {
    dwStatus : CULong;
    pszStatus : LPWSTR;
    dwSeverity : CULong;
}

static PORT_INFO_3W = _PORT_INFO_3W;

static PPORT_INFO_3W = Pointer[_PORT_INFO_3W];

static LPPORT_INFO_3W = Pointer[_PORT_INFO_3W];

record _PRINTER_INFO_1A {
    Flags : CULong;
    pDescription : LPSTR;
    pName : LPSTR;
    pComment : LPSTR;
}

static PRINTER_INFO_1A = _PRINTER_INFO_1A;

static PPRINTER_INFO_1A = Pointer[_PRINTER_INFO_1A];

static LPPRINTER_INFO_1A = Pointer[_PRINTER_INFO_1A];

record _PRINTER_INFO_1W {
    Flags : CULong;
    pDescription : LPWSTR;
    pName : LPWSTR;
    pComment : LPWSTR;
}

static PRINTER_INFO_1W = _PRINTER_INFO_1W;

static PPRINTER_INFO_1W = Pointer[_PRINTER_INFO_1W];

static LPPRINTER_INFO_1W = Pointer[_PRINTER_INFO_1W];

record _PRINTER_INFO_2A {
    pServerName : LPSTR;
    pPrinterName : LPSTR;
    pShareName : LPSTR;
    pPortName : LPSTR;
    pDriverName : LPSTR;
    pComment : LPSTR;
    pLocation : LPSTR;
    pDevMode : LPDEVMODEA;
    pSepFile : LPSTR;
    pPrintProcessor : LPSTR;
    pDatatype : LPSTR;
    pParameters : LPSTR;
    pSecurityDescriptor : PSECURITY_DESCRIPTOR;
    Attributes : CULong;
    Priority : CULong;
    DefaultPriority : CULong;
    StartTime : CULong;
    UntilTime : CULong;
    Status : CULong;
    cJobs : CULong;
    AveragePPM : CULong;
}

static PRINTER_INFO_2A = _PRINTER_INFO_2A;

static PPRINTER_INFO_2A = Pointer[_PRINTER_INFO_2A];

static LPPRINTER_INFO_2A = Pointer[_PRINTER_INFO_2A];

record _PRINTER_INFO_2W {
    pServerName : LPWSTR;
    pPrinterName : LPWSTR;
    pShareName : LPWSTR;
    pPortName : LPWSTR;
    pDriverName : LPWSTR;
    pComment : LPWSTR;
    pLocation : LPWSTR;
    pDevMode : LPDEVMODEW;
    pSepFile : LPWSTR;
    pPrintProcessor : LPWSTR;
    pDatatype : LPWSTR;
    pParameters : LPWSTR;
    pSecurityDescriptor : PSECURITY_DESCRIPTOR;
    Attributes : CULong;
    Priority : CULong;
    DefaultPriority : CULong;
    StartTime : CULong;
    UntilTime : CULong;
    Status : CULong;
    cJobs : CULong;
    AveragePPM : CULong;
}

static PRINTER_INFO_2W = _PRINTER_INFO_2W;

static PPRINTER_INFO_2W = Pointer[_PRINTER_INFO_2W];

static LPPRINTER_INFO_2W = Pointer[_PRINTER_INFO_2W];

record _PRINTER_INFO_3 {
    pSecurityDescriptor : PSECURITY_DESCRIPTOR;
}

static PRINTER_INFO_3 = _PRINTER_INFO_3;

static PPRINTER_INFO_3 = Pointer[_PRINTER_INFO_3];

static LPPRINTER_INFO_3 = Pointer[_PRINTER_INFO_3];

record _PRINTER_INFO_4A {
    pPrinterName : LPSTR;
    pServerName : LPSTR;
    Attributes : CULong;
}

static PRINTER_INFO_4A = _PRINTER_INFO_4A;

static PPRINTER_INFO_4A = Pointer[_PRINTER_INFO_4A];

static LPPRINTER_INFO_4A = Pointer[_PRINTER_INFO_4A];

record _PRINTER_INFO_4W {
    pPrinterName : LPWSTR;
    pServerName : LPWSTR;
    Attributes : CULong;
}

static PRINTER_INFO_4W = _PRINTER_INFO_4W;

static PPRINTER_INFO_4W = Pointer[_PRINTER_INFO_4W];

static LPPRINTER_INFO_4W = Pointer[_PRINTER_INFO_4W];

record _PRINTER_INFO_5A {
    pPrinterName : LPSTR;
    pPortName : LPSTR;
    Attributes : CULong;
    DeviceNotSelectedTimeout : CULong;
    TransmissionRetryTimeout : CULong;
}

static PRINTER_INFO_5A = _PRINTER_INFO_5A;

static PPRINTER_INFO_5A = Pointer[_PRINTER_INFO_5A];

static LPPRINTER_INFO_5A = Pointer[_PRINTER_INFO_5A];

record _PRINTER_INFO_5W {
    pPrinterName : LPWSTR;
    pPortName : LPWSTR;
    Attributes : CULong;
    DeviceNotSelectedTimeout : CULong;
    TransmissionRetryTimeout : CULong;
}

static PRINTER_INFO_5W = _PRINTER_INFO_5W;

static PPRINTER_INFO_5W = Pointer[_PRINTER_INFO_5W];

static LPPRINTER_INFO_5W = Pointer[_PRINTER_INFO_5W];

record _PRINTER_INFO_6 {
    dwStatus : CULong;
}

static PRINTER_INFO_6 = _PRINTER_INFO_6;

static PPRINTER_INFO_6 = Pointer[_PRINTER_INFO_6];

static LPPRINTER_INFO_6 = Pointer[_PRINTER_INFO_6];

record _PRINTPROCESSOR_INFO_1A {
    pName : LPSTR;
}

static PRINTPROCESSOR_INFO_1A = _PRINTPROCESSOR_INFO_1A;

static PPRINTPROCESSOR_INFO_1A = Pointer[_PRINTPROCESSOR_INFO_1A];

static LPPRINTPROCESSOR_INFO_1A = Pointer[_PRINTPROCESSOR_INFO_1A];

record _PRINTPROCESSOR_INFO_1W {
    pName : LPWSTR;
}

static PRINTPROCESSOR_INFO_1W = _PRINTPROCESSOR_INFO_1W;

static PPRINTPROCESSOR_INFO_1W = Pointer[_PRINTPROCESSOR_INFO_1W];

static LPPRINTPROCESSOR_INFO_1W = Pointer[_PRINTPROCESSOR_INFO_1W];

record _PRINTER_NOTIFY_INFO_DATA {
    Type : UShort;
    Field : UShort;
    Reserved : CULong;
    Id : CULong;
    NotifyData : AUnionType;
}

static PRINTER_NOTIFY_INFO_DATA = _PRINTER_NOTIFY_INFO_DATA;

static PPRINTER_NOTIFY_INFO_DATA = Pointer[_PRINTER_NOTIFY_INFO_DATA];

static LPPRINTER_NOTIFY_INFO_DATA = Pointer[_PRINTER_NOTIFY_INFO_DATA];

record _PRINTER_NOTIFY_INFO {
    Version : CULong;
    Flags : CULong;
    Count : CULong;
    aData : Array[PRINTER_NOTIFY_INFO_DATA,1];
}

static PRINTER_NOTIFY_INFO = _PRINTER_NOTIFY_INFO;

static PPRINTER_NOTIFY_INFO = Pointer[_PRINTER_NOTIFY_INFO];

static LPPRINTER_NOTIFY_INFO = Pointer[_PRINTER_NOTIFY_INFO];

record _FORM_INFO_1A {
    Flags : CULong;
    pName : LPSTR;
    Size : SIZEL;
    ImageableArea : RECTL;
}

static FORM_INFO_1A = _FORM_INFO_1A;

static PFORM_INFO_1A = Pointer[_FORM_INFO_1A];

static LPFORM_INFO_1A = Pointer[_FORM_INFO_1A];

record _FORM_INFO_1W {
    Flags : CULong;
    pName : LPWSTR;
    Size : SIZEL;
    ImageableArea : RECTL;
}

static FORM_INFO_1W = _FORM_INFO_1W;

static PFORM_INFO_1W = Pointer[_FORM_INFO_1W];

static LPFORM_INFO_1W = Pointer[_FORM_INFO_1W];

record _PRINTER_DEFAULTSA {
    pDatatype : LPSTR;
    pDevMode : LPDEVMODE;
    DesiredAccess : CULong;
}

static PRINTER_DEFAULTSA = _PRINTER_DEFAULTSA;

static PPRINTER_DEFAULTSA = Pointer[_PRINTER_DEFAULTSA];

static LPPRINTER_DEFAULTSA = Pointer[_PRINTER_DEFAULTSA];

record _PRINTER_DEFAULTSW {
    pDatatype : LPWSTR;
    pDevMode : LPDEVMODE;
    DesiredAccess : CULong;
}

static PRINTER_DEFAULTSW = _PRINTER_DEFAULTSW;

static PPRINTER_DEFAULTSW = Pointer[_PRINTER_DEFAULTSW];

static LPPRINTER_DEFAULTSW = Pointer[_PRINTER_DEFAULTSW];

record _PROVIDOR_INFO_1A {
    pName : LPSTR;
    pEnvironment : LPSTR;
    pDLLName : LPSTR;
}

static PROVIDOR_INFO_1A = _PROVIDOR_INFO_1A;

static PPROVIDOR_INFO_1A = Pointer[_PROVIDOR_INFO_1A];

static LPPROVIDOR_INFO_1A = Pointer[_PROVIDOR_INFO_1A];

record _PROVIDOR_INFO_1W {
    pName : LPWSTR;
    pEnvironment : LPWSTR;
    pDLLName : LPWSTR;
}

static PROVIDOR_INFO_1W = _PROVIDOR_INFO_1W;

static PPROVIDOR_INFO_1W = Pointer[_PROVIDOR_INFO_1W];

static LPPROVIDOR_INFO_1W = Pointer[_PROVIDOR_INFO_1W];

record _PROVIDOR_INFO_2A {
    pOrder : LPSTR;
}

static PROVIDOR_INFO_2A = _PROVIDOR_INFO_2A;

static PPROVIDOR_INFO_2A = Pointer[_PROVIDOR_INFO_2A];

static LPROVIDOR_INFO_2A = Pointer[_PROVIDOR_INFO_2A];

record _PROVIDOR_INFO_2W {
    pOrder : LPWSTR;
}

static PROVIDOR_INFO_2W = _PROVIDOR_INFO_2W;

static PPROVIDOR_INFO_2W = Pointer[_PROVIDOR_INFO_2W];

static LPROVIDOR_INFO_2W = Pointer[_PROVIDOR_INFO_2W];

external (stdcall) AbortPrinter(
    argument0 : HANDLE) : Int;

external (stdcall) AddFormA(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : PBYTE) : Int;

external (stdcall) AddFormW(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : PBYTE) : Int;

external (stdcall) AddJobA(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : PBYTE,
    argument3 : CULong,
    argument4 : PDWORD) : Int;

external (stdcall) AddJobW(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : PBYTE,
    argument3 : CULong,
    argument4 : PDWORD) : Int;

external (stdcall) AddMonitorA(
    argument0 : LPSTR,
    argument1 : CULong,
    argument2 : PBYTE) : Int;

external (stdcall) AddMonitorW(
    argument0 : LPWSTR,
    argument1 : CULong,
    argument2 : PBYTE) : Int;

external (stdcall) AddPortA(
    argument0 : LPSTR,
    argument1 : HWND,
    argument2 : LPSTR) : Int;

external (stdcall) AddPortW(
    argument0 : LPWSTR,
    argument1 : HWND,
    argument2 : LPWSTR) : Int;

external (stdcall) AddPrinterA(
    argument0 : LPSTR,
    argument1 : CULong,
    argument2 : PBYTE) : HANDLE;

external (stdcall) AddPrinterW(
    argument0 : LPWSTR,
    argument1 : CULong,
    argument2 : PBYTE) : HANDLE;

external (stdcall) AddPrinterConnectionA(
    argument0 : LPSTR) : Int;

external (stdcall) AddPrinterConnectionW(
    argument0 : LPWSTR) : Int;

external (stdcall) AddPrinterDriverA(
    argument0 : LPSTR,
    argument1 : CULong,
    argument2 : PBYTE) : Int;

external (stdcall) AddPrinterDriverW(
    argument0 : LPWSTR,
    argument1 : CULong,
    argument2 : PBYTE) : Int;

external (stdcall) AddPrintProcessorA(
    argument0 : LPSTR,
    argument1 : LPSTR,
    argument2 : LPSTR,
    argument3 : LPSTR) : Int;

external (stdcall) AddPrintProcessorW(
    argument0 : LPWSTR,
    argument1 : LPWSTR,
    argument2 : LPWSTR,
    argument3 : LPWSTR) : Int;

external (stdcall) AddPrintProvidorA(
    argument0 : LPSTR,
    argument1 : CULong,
    argument2 : PBYTE) : Int;

external (stdcall) AddPrintProvidorW(
    argument0 : LPWSTR,
    argument1 : CULong,
    argument2 : PBYTE) : Int;

external (stdcall) AdvancedDocumentPropertiesA(
    argument0 : HWND,
    argument1 : HANDLE,
    argument2 : LPSTR,
    argument3 : PDEVMODE,
    argument4 : PDEVMODEA) : CLong;

external (stdcall) AdvancedDocumentPropertiesW(
    argument0 : HWND,
    argument1 : HANDLE,
    argument2 : LPWSTR,
    argument3 : PDEVMODE,
    argument4 : PDEVMODEW) : CLong;

external (stdcall) ClosePrinter(
    argument0 : HANDLE) : Int;

external (stdcall) ConfigurePortA(
    argument0 : LPSTR,
    argument1 : HWND,
    argument2 : LPSTR) : Int;

external (stdcall) ConfigurePortW(
    argument0 : LPWSTR,
    argument1 : HWND,
    argument2 : LPWSTR) : Int;

external (stdcall) ConnectToPrinterDlg(
    argument0 : HWND,
    argument1 : CULong) : HANDLE;

external (stdcall) DeleteFormA(
    argument0 : HANDLE,
    argument1 : LPSTR) : Int;

external (stdcall) DeleteFormW(
    argument0 : HANDLE,
    argument1 : LPWSTR) : Int;

external (stdcall) DeleteMonitorA(
    argument0 : LPSTR,
    argument1 : LPSTR,
    argument2 : LPSTR) : Int;

external (stdcall) DeleteMonitorW(
    argument0 : LPWSTR,
    argument1 : LPWSTR,
    argument2 : LPWSTR) : Int;

external (stdcall) DeletePortA(
    argument0 : LPSTR,
    argument1 : HWND,
    argument2 : LPSTR) : Int;

external (stdcall) DeletePortW(
    argument0 : LPWSTR,
    argument1 : HWND,
    argument2 : LPWSTR) : Int;

external (stdcall) DeletePrinter(
    argument0 : HANDLE) : Int;

external (stdcall) DeletePrinterConnectionA(
    argument0 : LPSTR) : Int;

external (stdcall) DeletePrinterConnectionW(
    argument0 : LPWSTR) : Int;

external (stdcall) DeletePrinterDataA(
    argument0 : HANDLE,
    argument1 : LPSTR) : CULong;

external (stdcall) DeletePrinterDataW(
    argument0 : HANDLE,
    argument1 : LPWSTR) : CULong;

external (stdcall) DeletePrinterDriverA(
    argument0 : LPSTR,
    argument1 : LPSTR,
    argument2 : LPSTR) : Int;

external (stdcall) DeletePrinterDriverW(
    argument0 : LPWSTR,
    argument1 : LPWSTR,
    argument2 : LPWSTR) : Int;

external (stdcall) DeletePrintProcessorA(
    argument0 : LPSTR,
    argument1 : LPSTR,
    argument2 : LPSTR) : Int;

external (stdcall) DeletePrintProcessorW(
    argument0 : LPWSTR,
    argument1 : LPWSTR,
    argument2 : LPWSTR) : Int;

external (stdcall) DeletePrintProvidorA(
    argument0 : LPSTR,
    argument1 : LPSTR,
    argument2 : LPSTR) : Int;

external (stdcall) DeletePrintProvidorW(
    argument0 : LPWSTR,
    argument1 : LPWSTR,
    argument2 : LPWSTR) : Int;

external (stdcall) DocumentPropertiesA(
    argument0 : HWND,
    argument1 : HANDLE,
    argument2 : LPSTR,
    argument3 : PDEVMODEA,
    argument4 : PDEVMODEA,
    argument5 : CULong) : CLong;

external (stdcall) DocumentPropertiesW(
    argument0 : HWND,
    argument1 : HANDLE,
    argument2 : LPWSTR,
    argument3 : PDEVMODEW,
    argument4 : PDEVMODEW,
    argument5 : CULong) : CLong;

external (stdcall) EndDocPrinter(
    argument0 : HANDLE) : Int;

external (stdcall) EndPagePrinter(
    argument0 : HANDLE) : Int;

external (stdcall) EnumFormsA(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : PBYTE,
    argument3 : CULong,
    argument4 : PDWORD,
    argument5 : PDWORD) : Int;

external (stdcall) EnumFormsW(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : PBYTE,
    argument3 : CULong,
    argument4 : PDWORD,
    argument5 : PDWORD) : Int;

external (stdcall) EnumJobsA(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : PBYTE,
    argument5 : CULong,
    argument6 : PDWORD,
    argument7 : PDWORD) : Int;

external (stdcall) EnumJobsW(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : PBYTE,
    argument5 : CULong,
    argument6 : PDWORD,
    argument7 : PDWORD) : Int;

external (stdcall) EnumMonitorsA(
    argument0 : LPSTR,
    argument1 : CULong,
    argument2 : PBYTE,
    argument3 : CULong,
    argument4 : PDWORD,
    argument5 : PDWORD) : Int;

external (stdcall) EnumMonitorsW(
    argument0 : LPWSTR,
    argument1 : CULong,
    argument2 : PBYTE,
    argument3 : CULong,
    argument4 : PDWORD,
    argument5 : PDWORD) : Int;

external (stdcall) EnumPortsA(
    argument0 : LPSTR,
    argument1 : CULong,
    argument2 : PBYTE,
    argument3 : CULong,
    argument4 : PDWORD,
    argument5 : PDWORD) : Int;

external (stdcall) EnumPortsW(
    argument0 : LPWSTR,
    argument1 : CULong,
    argument2 : PBYTE,
    argument3 : CULong,
    argument4 : PDWORD,
    argument5 : PDWORD) : Int;

external (stdcall) EnumPrinterDataA(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : LPSTR,
    argument3 : CULong,
    argument4 : PDWORD,
    argument5 : PDWORD,
    argument6 : PBYTE,
    argument7 : CULong,
    argument8 : PDWORD) : CULong;

external (stdcall) EnumPrinterDataW(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : LPWSTR,
    argument3 : CULong,
    argument4 : PDWORD,
    argument5 : PDWORD,
    argument6 : PBYTE,
    argument7 : CULong,
    argument8 : PDWORD) : CULong;

external (stdcall) EnumPrinterDriversA(
    argument0 : LPSTR,
    argument1 : LPSTR,
    argument2 : CULong,
    argument3 : PBYTE,
    argument4 : CULong,
    argument5 : PDWORD,
    argument6 : PDWORD) : Int;

external (stdcall) EnumPrinterDriversW(
    argument0 : LPWSTR,
    argument1 : LPWSTR,
    argument2 : CULong,
    argument3 : PBYTE,
    argument4 : CULong,
    argument5 : PDWORD,
    argument6 : PDWORD) : Int;

external (stdcall) EnumPrintersA(
    argument0 : CULong,
    argument1 : LPSTR,
    argument2 : CULong,
    argument3 : PBYTE,
    argument4 : CULong,
    argument5 : PDWORD,
    argument6 : PDWORD) : Int;

external (stdcall) EnumPrintersW(
    argument0 : CULong,
    argument1 : LPWSTR,
    argument2 : CULong,
    argument3 : PBYTE,
    argument4 : CULong,
    argument5 : PDWORD,
    argument6 : PDWORD) : Int;

external (stdcall) EnumPrintProcessorDatatypesA(
    argument0 : LPSTR,
    argument1 : LPSTR,
    argument2 : CULong,
    argument3 : PBYTE,
    argument4 : CULong,
    argument5 : PDWORD,
    argument6 : PDWORD) : Int;

external (stdcall) EnumPrintProcessorDatatypesW(
    argument0 : LPWSTR,
    argument1 : LPWSTR,
    argument2 : CULong,
    argument3 : PBYTE,
    argument4 : CULong,
    argument5 : PDWORD,
    argument6 : PDWORD) : Int;

external (stdcall) EnumPrintProcessorsA(
    argument0 : LPSTR,
    argument1 : LPSTR,
    argument2 : CULong,
    argument3 : PBYTE,
    argument4 : CULong,
    argument5 : PDWORD,
    argument6 : PDWORD) : Int;

external (stdcall) EnumPrintProcessorsW(
    argument0 : LPWSTR,
    argument1 : LPWSTR,
    argument2 : CULong,
    argument3 : PBYTE,
    argument4 : CULong,
    argument5 : PDWORD,
    argument6 : PDWORD) : Int;

external (stdcall) FindClosePrinterChangeNotification(
    argument0 : HANDLE) : Int;

external (stdcall) FindFirstPrinterChangeNotification(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : PVOID) : HANDLE;

external (stdcall) FindNextPrinterChangeNotification(
    argument0 : HANDLE,
    argument1 : PDWORD,
    argument2 : PVOID,
    argument3 : Pointer[PVOID]) : HANDLE;

external (stdcall) FreePrinterNotifyInfo(
    argument0 : PPRINTER_NOTIFY_INFO) : Int;

external (stdcall) GetFormA(
    argument0 : HANDLE,
    argument1 : LPSTR,
    argument2 : CULong,
    argument3 : PBYTE,
    argument4 : CULong,
    argument5 : PDWORD) : Int;

external (stdcall) GetFormW(
    argument0 : HANDLE,
    argument1 : LPWSTR,
    argument2 : CULong,
    argument3 : PBYTE,
    argument4 : CULong,
    argument5 : PDWORD) : Int;

external (stdcall) GetJobA(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : PBYTE,
    argument4 : CULong,
    argument5 : PDWORD) : Int;

external (stdcall) GetJobW(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : PBYTE,
    argument4 : CULong,
    argument5 : PDWORD) : Int;

external (stdcall) GetPrinterA(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : PBYTE,
    argument3 : CULong,
    argument4 : PDWORD) : Int;

external (stdcall) GetPrinterW(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : PBYTE,
    argument3 : CULong,
    argument4 : PDWORD) : Int;

external (stdcall) GetPrinterDataA(
    argument0 : HANDLE,
    argument1 : LPSTR,
    argument2 : PDWORD,
    argument3 : PBYTE,
    argument4 : CULong,
    argument5 : PDWORD) : CULong;

external (stdcall) GetPrinterDataW(
    argument0 : HANDLE,
    argument1 : LPWSTR,
    argument2 : PDWORD,
    argument3 : PBYTE,
    argument4 : CULong,
    argument5 : PDWORD) : CULong;

external (stdcall) GetPrinterDriverA(
    argument0 : HANDLE,
    argument1 : LPSTR,
    argument2 : CULong,
    argument3 : PBYTE,
    argument4 : CULong,
    argument5 : PDWORD) : CULong;

external (stdcall) GetPrinterDriverW(
    argument0 : HANDLE,
    argument1 : LPWSTR,
    argument2 : CULong,
    argument3 : PBYTE,
    argument4 : CULong,
    argument5 : PDWORD) : CULong;

external (stdcall) GetPrinterDriverDirectoryA(
    argument0 : LPSTR,
    argument1 : LPSTR,
    argument2 : CULong,
    argument3 : PBYTE,
    argument4 : CULong,
    argument5 : PDWORD) : CULong;

external (stdcall) GetPrinterDriverDirectoryW(
    argument0 : LPWSTR,
    argument1 : LPWSTR,
    argument2 : CULong,
    argument3 : PBYTE,
    argument4 : CULong,
    argument5 : PDWORD) : CULong;

external (stdcall) GetPrintProcessorDirectoryA(
    argument0 : LPSTR,
    argument1 : LPSTR,
    argument2 : CULong,
    argument3 : PBYTE,
    argument4 : CULong,
    argument5 : PDWORD) : CULong;

external (stdcall) GetPrintProcessorDirectoryW(
    argument0 : LPWSTR,
    argument1 : LPWSTR,
    argument2 : CULong,
    argument3 : PBYTE,
    argument4 : CULong,
    argument5 : PDWORD) : CULong;

external (stdcall) OpenPrinterA(
    argument0 : LPSTR,
    argument1 : PHANDLE,
    argument2 : LPPRINTER_DEFAULTSA) : Int;

external (stdcall) OpenPrinterW(
    argument0 : LPWSTR,
    argument1 : PHANDLE,
    argument2 : LPPRINTER_DEFAULTSW) : Int;

external (stdcall) PrinterMessageBoxA(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : HWND,
    argument3 : LPSTR,
    argument4 : LPSTR,
    argument5 : CULong) : CULong;

external (stdcall) PrinterMessageBoxW(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : HWND,
    argument3 : LPWSTR,
    argument4 : LPWSTR,
    argument5 : CULong) : CULong;

external (stdcall) PrinterProperties(
    argument0 : HWND,
    argument1 : HANDLE) : Int;

external (stdcall) ReadPrinter(
    argument0 : HANDLE,
    argument1 : PVOID,
    argument2 : CULong,
    argument3 : PDWORD) : Int;

external (stdcall) ResetPrinterA(
    argument0 : HANDLE,
    argument1 : LPPRINTER_DEFAULTSA) : Int;

external (stdcall) ResetPrinterW(
    argument0 : HANDLE,
    argument1 : LPPRINTER_DEFAULTSW) : Int;

external (stdcall) ScheduleJob(
    argument0 : HANDLE,
    argument1 : CULong) : Int;

external (stdcall) SetFormA(
    argument0 : HANDLE,
    argument1 : LPSTR,
    argument2 : CULong,
    argument3 : PBYTE) : Int;

external (stdcall) SetFormW(
    argument0 : HANDLE,
    argument1 : LPWSTR,
    argument2 : CULong,
    argument3 : PBYTE) : Int;

external (stdcall) SetJobA(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : PBYTE,
    argument4 : CULong) : Int;

external (stdcall) SetJobW(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : PBYTE,
    argument4 : CULong) : Int;

external (stdcall) SetPrinterA(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : PBYTE,
    argument3 : CULong) : Int;

external (stdcall) SetPrinterW(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : PBYTE,
    argument3 : CULong) : Int;

external (stdcall) SetPrinterDataA(
    argument0 : HANDLE,
    argument1 : LPSTR,
    argument2 : CULong,
    argument3 : PBYTE,
    argument4 : CULong) : Int;

external (stdcall) SetPrinterDataW(
    argument0 : HANDLE,
    argument1 : LPWSTR,
    argument2 : CULong,
    argument3 : PBYTE,
    argument4 : CULong) : Int;

external (stdcall) StartDocPrinterA(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : PBYTE) : CULong;

external (stdcall) StartDocPrinterW(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : PBYTE) : CULong;

external (stdcall) StartPagePrinter(
    argument0 : HANDLE) : Int;

external (stdcall) WaitForPrinterChange(
    argument0 : HANDLE,
    argument1 : CULong) : CULong;

external (stdcall) WritePrinter(
    argument0 : HANDLE,
    argument1 : PVOID,
    argument2 : CULong,
    argument3 : PDWORD) : Int;

static JOB_INFO_1 = JOB_INFO_1A;

static PJOB_INFO_1 = Pointer[JOB_INFO_1A];

static LPJOB_INFO_1 = Pointer[JOB_INFO_1A];

static JOB_INFO_2 = JOB_INFO_2A;

static PJOB_INFO_2 = Pointer[JOB_INFO_2A];

static LPJOB_INFO_2 = Pointer[JOB_INFO_2A];

static ADDJOB_INFO_1 = ADDJOB_INFO_1A;

static PADDJOB_INFO_1 = Pointer[ADDJOB_INFO_1A];

static LPADDJOB_INFO_1 = Pointer[ADDJOB_INFO_1A];

static DATATYPES_INFO_1 = DATATYPES_INFO_1A;

static PDATATYPES_INFO_1 = Pointer[DATATYPES_INFO_1A];

static LPDATATYPES_INFO_1 = Pointer[DATATYPES_INFO_1A];

static MONITOR_INFO_1 = MONITOR_INFO_1A;

static PMONITOR_INFO_1 = Pointer[MONITOR_INFO_1A];

static LPMONITOR_INFO_1 = Pointer[MONITOR_INFO_1A];

static MONITOR_INFO_2 = MONITOR_INFO_2A;

static PMONITOR_INFO_2 = Pointer[MONITOR_INFO_2A];

static LPMONITOR_INFO_2 = Pointer[MONITOR_INFO_2A];

static DOC_INFO_1 = DOC_INFO_1A;

static PDOC_INFO_1 = Pointer[DOC_INFO_1A];

static LPDOC_INFO_1 = Pointer[DOC_INFO_1A];

static DOC_INFO_2 = DOC_INFO_2A;

static PDOC_INFO_2 = Pointer[DOC_INFO_2A];

static LPDOC_INFO_2 = Pointer[DOC_INFO_2A];

static PORT_INFO_1 = PORT_INFO_1A;

static PPORT_INFO_1 = Pointer[PORT_INFO_1A];

static LPPORT_INFO_1 = Pointer[PORT_INFO_1A];

static PORT_INFO_2 = PORT_INFO_2A;

static PPORT_INFO_2 = Pointer[PORT_INFO_2A];

static LPPORT_INFO_2 = Pointer[PORT_INFO_2A];

static PORT_INFO_3 = PORT_INFO_3A;

static PPORT_INFO_3 = Pointer[PORT_INFO_3A];

static LPPORT_INFO_3 = Pointer[PORT_INFO_3A];

static DRIVER_INFO_1 = DRIVER_INFO_1A;

static PDRIVER_INFO_1 = Pointer[DRIVER_INFO_1A];

static LPDRIVER_INFO_1 = Pointer[DRIVER_INFO_1A];

static DRIVER_INFO_2 = DRIVER_INFO_2A;

static PDRIVER_INFO_2 = Pointer[DRIVER_INFO_2A];

static LPDRIVER_INFO_2 = Pointer[DRIVER_INFO_2A];

static DRIVER_INFO_3 = DRIVER_INFO_3A;

static PDRIVER_INFO_3 = Pointer[DRIVER_INFO_3A];

static LPDRIVER_INFO_3 = Pointer[DRIVER_INFO_3A];

static PRINTER_INFO_1 = PRINTER_INFO_1A;

static PPRINTER_INFO_1 = Pointer[PRINTER_INFO_1A];

static LPPRINTER_INFO_1 = Pointer[PRINTER_INFO_1A];

static PRINTER_INFO_2 = PRINTER_INFO_2A;

static PPRINTER_INFO_2 = Pointer[PRINTER_INFO_2A];

static LPPRINTER_INFO_2 = Pointer[PRINTER_INFO_2A];

static PRINTER_INFO_4 = PRINTER_INFO_4A;

static PPRINTER_INFO_4 = Pointer[PRINTER_INFO_4A];

static LPPRINTER_INFO_4 = Pointer[PRINTER_INFO_4A];

static PRINTER_INFO_5 = PRINTER_INFO_5A;

static PPRINTER_INFO_5 = Pointer[PRINTER_INFO_5A];

static LPPRINTER_INFO_5 = Pointer[PRINTER_INFO_5A];

static PRINTPROCESSOR_INFO_1 = PRINTPROCESSOR_INFO_1A;

static PPRINTPROCESSOR_INFO_1 = Pointer[PRINTPROCESSOR_INFO_1A];

static LPPRINTPROCESSOR_INFO_1 = Pointer[PRINTPROCESSOR_INFO_1A];

static FORM_INFO_1 = FORM_INFO_1A;

static PFORM_INFO_1 = Pointer[FORM_INFO_1A];

static LPFORM_INFO_1 = Pointer[FORM_INFO_1A];

static PRINTER_DEFAULTS = PRINTER_DEFAULTSA;

static PPRINTER_DEFAULTS = Pointer[PRINTER_DEFAULTSA];

static LPPRINTER_DEFAULTS = Pointer[PRINTER_DEFAULTSA];

static PROVIDOR_INFO_1 = PROVIDOR_INFO_1A;

static PPROVIDOR_INFO_1 = Pointer[PROVIDOR_INFO_1A];

static LPROVIDOR_INFO_1 = Pointer[PROVIDOR_INFO_1A];

static PROVIDOR_INFO_2 = PROVIDOR_INFO_2A;

static PPROVIDOR_INFO_2 = Pointer[PROVIDOR_INFO_2A];

static LPROVIDOR_INFO_2 = Pointer[PROVIDOR_INFO_2A];

static u_char = CUChar;

static u_short = UShort;

static u_int = UInt;

static u_long = CULong;

static SOCKET = UInt;

record fd_set {
    fd_count : UInt;
    fd_array : Array[UInt,64];
}

static fd_set2 = fd_set;

external (stdcall) __WSAFDIsSet(
    argument0 : UInt,
    argument1 : Pointer[fd_set2]) : Int;

record timeval {
    tv_sec : CLong;
    tv_usec : CLong;
}

record hostent {
    h_name : Pointer[CChar];
    h_aliases : Pointer[Pointer[CChar]];
    h_addrtype : Short;
    h_length : Short;
    h_addr_list : Pointer[Pointer[CChar]];
}

record linger {
    l_onoff : UShort;
    l_linger : UShort;
}

record netent {
    n_name : Pointer[CChar];
    n_aliases : Pointer[Pointer[CChar]];
    n_addrtype : Short;
    n_net : CULong;
}

record servent {
    s_name : Pointer[CChar];
    s_aliases : Pointer[Pointer[CChar]];
    s_port : Short;
    s_proto : Pointer[CChar];
}

record protoent {
    p_name : Pointer[CChar];
    p_aliases : Pointer[Pointer[CChar]];
    p_proto : Short;
}

record in_addr {
    S_un : AUnionType;
}

record sockaddr_in {
    sin_family : Short;
    sin_port : UShort;
    sin_addr : in_addr;
    sin_zero : Array[CChar,8];
}

record WSAData {
    wVersion : UShort;
    wHighVersion : UShort;
    szDescription : Array[CChar,257];
    szSystemStatus : Array[CChar,129];
    iMaxSockets : UShort;
    iMaxUdpDg : UShort;
    lpVendorInfo : Pointer[CChar];
}

static WSADATA = WSAData;

static LPWSADATA = Pointer[WSADATA];

record sockaddr {
    sa_family : UShort;
    sa_data : Array[CChar,14];
}

record sockaddr_storage {
    ss_family : Short;
    __ss_pad1 : Array[CChar,6];
    __ss_align : Int64;
    __ss_pad2 : Array[CChar,112];
}

record sockproto {
    sp_family : UShort;
    sp_protocol : UShort;
}

external (stdcall) accept(
    argument0 : UInt,
    argument1 : Pointer[sockaddr],
    argument2 : Pointer[Int]) : UInt;

external (stdcall) bind(
    argument0 : UInt,
    argument1 : Pointer[sockaddr],
    argument2 : Int) : Int;

external (stdcall) closesocket(
    argument0 : UInt) : Int;

external (stdcall) connect(
    argument0 : UInt,
    argument1 : Pointer[sockaddr],
    argument2 : Int) : Int;

external (stdcall) ioctlsocket(
    argument0 : UInt,
    argument1 : CLong,
    argument2 : Pointer[CULong]) : Int;

external (stdcall) getpeername(
    argument0 : UInt,
    argument1 : Pointer[sockaddr],
    argument2 : Pointer[Int]) : Int;

external (stdcall) getsockname(
    argument0 : UInt,
    argument1 : Pointer[sockaddr],
    argument2 : Pointer[Int]) : Int;

external (stdcall) getsockopt(
    argument0 : UInt,
    argument1 : Int,
    argument2 : Int,
    argument3 : Pointer[CChar],
    argument4 : Pointer[Int]) : Int;

external (stdcall) inet_addr(
    argument0 : Pointer[CChar]) : CULong;

external (stdcall) inet_ntoa(
    argument0 : in_addr) : Pointer[CChar];

external (stdcall) listen(
    argument0 : UInt,
    argument1 : Int) : Int;

external (stdcall) recv(
    argument0 : UInt,
    argument1 : Pointer[CChar],
    argument2 : Int,
    argument3 : Int) : Int;

external (stdcall) recvfrom(
    argument0 : UInt,
    argument1 : Pointer[CChar],
    argument2 : Int,
    argument3 : Int,
    argument4 : Pointer[sockaddr],
    argument5 : Pointer[Int]) : Int;

external (stdcall) send(
    argument0 : UInt,
    argument1 : Pointer[CChar],
    argument2 : Int,
    argument3 : Int) : Int;

external (stdcall) sendto(
    argument0 : UInt,
    argument1 : Pointer[CChar],
    argument2 : Int,
    argument3 : Int,
    argument4 : Pointer[sockaddr],
    argument5 : Int) : Int;

external (stdcall) setsockopt(
    argument0 : UInt,
    argument1 : Int,
    argument2 : Int,
    argument3 : Pointer[CChar],
    argument4 : Int) : Int;

external (stdcall) shutdown(
    argument0 : UInt,
    argument1 : Int) : Int;

external (stdcall) socket(
    argument0 : Int,
    argument1 : Int,
    argument2 : Int) : UInt;

external (stdcall) gethostbyaddr(
    argument0 : Pointer[CChar],
    argument1 : Int,
    argument2 : Int) : Pointer[hostent];

external (stdcall) gethostbyname(
    argument0 : Pointer[CChar]) : Pointer[hostent];

external (stdcall) getservbyport(
    argument0 : Int,
    argument1 : Pointer[CChar]) : Pointer[servent];

external (stdcall) getservbyname(
    argument0 : Pointer[CChar],
    argument1 : Pointer[CChar]) : Pointer[servent];

external (stdcall) getprotobynumber(
    argument0 : Int) : Pointer[protoent];

external (stdcall) getprotobyname(
    argument0 : Pointer[CChar]) : Pointer[protoent];

static LPFN_ACCEPT = StdCallCodePointer[UInt,Pointer[sockaddr],Pointer[Int],UInt];

static LPFN_BIND = StdCallCodePointer[UInt,Pointer[sockaddr],Int,Int];

static LPFN_CLOSESOCKET = StdCallCodePointer[UInt,Int];

static LPFN_CONNECT = StdCallCodePointer[UInt,Pointer[sockaddr],Int,Int];

static LPFN_IOCTLSOCKET = StdCallCodePointer[UInt,CLong,Pointer[CULong],Int];

static LPFN_GETPEERNAME = StdCallCodePointer[UInt,Pointer[sockaddr],Pointer[Int],Int];

static LPFN_GETSOCKNAME = StdCallCodePointer[UInt,Pointer[sockaddr],Pointer[Int],Int];

static LPFN_GETSOCKOPT = StdCallCodePointer[UInt,Int,Int,Pointer[CChar],Pointer[Int],Int];

static LPFN_HTONL = StdCallCodePointer[CULong,CULong];

static LPFN_HTONS = StdCallCodePointer[UShort,UShort];

static LPFN_INET_ADDR = StdCallCodePointer[Pointer[CChar],CULong];

static LPFN_INET_NTOA = StdCallCodePointer[in_addr,Pointer[CChar]];

static LPFN_LISTEN = StdCallCodePointer[UInt,Int,Int];

static LPFN_NTOHL = StdCallCodePointer[CULong,CULong];

static LPFN_NTOHS = StdCallCodePointer[UShort,UShort];

static LPFN_RECV = StdCallCodePointer[UInt,Pointer[CChar],Int,Int,Int];

static LPFN_RECVFROM = StdCallCodePointer[UInt,Pointer[CChar],Int,Int,Pointer[sockaddr],Pointer[Int],Int];

static LPFN_SELECT = StdCallCodePointer[Int,Pointer[fd_set],Pointer[fd_set],Pointer[fd_set],Pointer[timeval],Int];

static LPFN_SEND = StdCallCodePointer[UInt,Pointer[CChar],Int,Int,Int];

static LPFN_SENDTO = StdCallCodePointer[UInt,Pointer[CChar],Int,Int,Pointer[sockaddr],Int,Int];

static LPFN_SETSOCKOPT = StdCallCodePointer[UInt,Int,Int,Pointer[CChar],Int,Int];

static LPFN_SHUTDOWN = StdCallCodePointer[UInt,Int,Int];

static LPFN_SOCKET = StdCallCodePointer[Int,Int,Int,UInt];

static LPFN_GETHOSTBYADDR = StdCallCodePointer[Pointer[CChar],Int,Int,Pointer[hostent]];

static LPFN_GETHOSTBYNAME = StdCallCodePointer[Pointer[CChar],Pointer[hostent]];

static LPFN_GETHOSTNAME = StdCallCodePointer[Pointer[CChar],Int,Int];

static LPFN_GETSERVBYPORT = StdCallCodePointer[Int,Pointer[CChar],Pointer[servent]];

static LPFN_GETSERVBYNAME = StdCallCodePointer[Pointer[CChar],Pointer[CChar],Pointer[servent]];

static LPFN_GETPROTOBYNUMBER = StdCallCodePointer[Int,Pointer[protoent]];

static LPFN_GETPROTOBYNAME = StdCallCodePointer[Pointer[CChar],Pointer[protoent]];

external (stdcall) WSAStartup(
    argument0 : UShort,
    argument1 : LPWSADATA) : Int;

external (stdcall) WSACleanup() : Int;

external (stdcall) WSASetLastError(
    argument0 : Int) : Void;

external (stdcall) WSAGetLastError() : Int;

static LPFN_WSASTARTUP = StdCallCodePointer[UShort,Pointer[WSAData],Int];

static LPFN_WSACLEANUP = StdCallCodePointer[Int];

static LPFN_WSASETLASTERROR = StdCallCodePointer[Int,Void];

static LPFN_WSAGETLASTERROR = StdCallCodePointer[Int];

external (stdcall) WSAIsBlocking() : Int;

external (stdcall) WSAUnhookBlockingHook() : Int;

external (stdcall) WSASetBlockingHook(
    argument0 : FARPROC) : FARPROC;

external (stdcall) WSACancelBlockingCall() : Int;

static LPFN_WSAISBLOCKING = StdCallCodePointer[Int];

static LPFN_WSAUNHOOKBLOCKINGHOOK = StdCallCodePointer[Int];

static LPFN_WSASETBLOCKINGHOOK = StdCallCodePointer[StdCallCodePointer[Int],StdCallCodePointer[Int]];

static LPFN_WSACANCELBLOCKINGCALL = StdCallCodePointer[Int];

external (stdcall) WSAAsyncGetServByName(
    argument0 : HWND,
    argument1 : UInt,
    argument2 : Pointer[CChar],
    argument3 : Pointer[CChar],
    argument4 : Pointer[CChar],
    argument5 : Int) : HANDLE;

external (stdcall) WSAAsyncGetServByPort(
    argument0 : HWND,
    argument1 : UInt,
    argument2 : Int,
    argument3 : Pointer[CChar],
    argument4 : Pointer[CChar],
    argument5 : Int) : HANDLE;

external (stdcall) WSAAsyncGetProtoByName(
    argument0 : HWND,
    argument1 : UInt,
    argument2 : Pointer[CChar],
    argument3 : Pointer[CChar],
    argument4 : Int) : HANDLE;

external (stdcall) WSAAsyncGetProtoByNumber(
    argument0 : HWND,
    argument1 : UInt,
    argument2 : Int,
    argument3 : Pointer[CChar],
    argument4 : Int) : HANDLE;

external (stdcall) WSAAsyncGetHostByName(
    argument0 : HWND,
    argument1 : UInt,
    argument2 : Pointer[CChar],
    argument3 : Pointer[CChar],
    argument4 : Int) : HANDLE;

external (stdcall) WSAAsyncGetHostByAddr(
    argument0 : HWND,
    argument1 : UInt,
    argument2 : Pointer[CChar],
    argument3 : Int,
    argument4 : Int,
    argument5 : Pointer[CChar],
    argument6 : Int) : HANDLE;

external (stdcall) WSACancelAsyncRequest(
    argument0 : HANDLE) : Int;

external (stdcall) WSAAsyncSelect(
    argument0 : UInt,
    argument1 : HWND,
    argument2 : UInt,
    argument3 : CLong) : Int;

static LPFN_WSAASYNCGETSERVBYNAME = StdCallCodePointer[Pointer[HWND__],UInt,Pointer[CChar],Pointer[CChar],Pointer[CChar],Int,RawPointer];

static LPFN_WSAASYNCGETSERVBYPORT = StdCallCodePointer[Pointer[HWND__],UInt,Int,Pointer[CChar],Pointer[CChar],Int,RawPointer];

static LPFN_WSAASYNCGETPROTOBYNAME = StdCallCodePointer[Pointer[HWND__],UInt,Pointer[CChar],Pointer[CChar],Int,RawPointer];

static LPFN_WSAASYNCGETPROTOBYNUMBER = StdCallCodePointer[Pointer[HWND__],UInt,Int,Pointer[CChar],Int,RawPointer];

static LPFN_WSAASYNCGETHOSTBYADDR = StdCallCodePointer[Pointer[HWND__],UInt,Pointer[CChar],Int,Int,Pointer[CChar],Int,RawPointer];

static LPFN_WSACANCELASYNCREQUEST = StdCallCodePointer[RawPointer,Int];

static LPFN_WSAASYNCSELECT = StdCallCodePointer[UInt,Pointer[HWND__],UInt,CLong,Int];

external (stdcall) htonl(
    argument0 : CULong) : CULong;

external (stdcall) ntohl(
    argument0 : CULong) : CULong;

external (stdcall) htons(
    argument0 : UShort) : UShort;

external (stdcall) ntohs(
    argument0 : UShort) : UShort;

external (stdcall) select(
    nfds : Int,
    argument1 : Pointer[fd_set2],
    argument2 : Pointer[fd_set2],
    argument3 : Pointer[fd_set2],
    argument4 : Pointer[timeval]) : Int;

external (stdcall) gethostname(
    argument0 : Pointer[CChar],
    argument1 : Int) : Int;

static SOCKADDR = sockaddr;

static PSOCKADDR = Pointer[sockaddr];

static LPSOCKADDR = Pointer[sockaddr];

static SOCKADDR_STORAGE = sockaddr_storage;

static PSOCKADDR_STORAGE = Pointer[sockaddr_storage];

static SOCKADDR_IN = sockaddr_in;

static PSOCKADDR_IN = Pointer[sockaddr_in];

static LPSOCKADDR_IN = Pointer[sockaddr_in];

static LINGER = linger;

static PLINGER = Pointer[linger];

static LPLINGER = Pointer[linger];

static IN_ADDR = in_addr;

static PIN_ADDR = Pointer[in_addr];

static LPIN_ADDR = Pointer[in_addr];

static FD_SET = fd_set;

static PFD_SET = Pointer[fd_set];

static LPFD_SET = Pointer[fd_set];

static HOSTENT = hostent;

static PHOSTENT = Pointer[hostent];

static LPHOSTENT = Pointer[hostent];

static SERVENT = servent;

static PSERVENT = Pointer[servent];

static LPSERVENT = Pointer[servent];

static PROTOENT = protoent;

static PPROTOENT = Pointer[protoent];

static LPPROTOENT = Pointer[protoent];

static TIMEVAL = timeval;

static PTIMEVAL = Pointer[timeval];

static LPTIMEVAL = Pointer[timeval];

static LPWSAOVERLAPPED = Pointer[_OVERLAPPED];

record _WSABUF {
    len : CULong;
    buf : Pointer[CChar];
}

static WSABUF = _WSABUF;

static LPWSABUF = Pointer[_WSABUF];

static BestEffortService = 0;
static ControlledLoadService = 1;
static PredictiveService = 2;
static GuaranteedDelayService = 3;
static GuaranteedService = 4;

static GUARANTEE = Int;

static SERVICETYPE = UInt;

record _flowspec {
    TokenRate : UInt;
    TokenBucketSize : UInt;
    PeakBandwidth : UInt;
    Latency : UInt;
    DelayVariation : UInt;
    ServiceType : UInt;
    MaxSduSize : UInt;
    MinimumPolicedSize : UInt;
}

static FLOWSPEC = _flowspec;

static PFLOWSPEC = Pointer[_flowspec];

static LPFLOWSPEC = Pointer[_flowspec];

record _QualityOfService {
    SendingFlowspec : FLOWSPEC;
    ReceivingFlowspec : FLOWSPEC;
    ProviderSpecific : WSABUF;
}

static QOS = _QualityOfService;

static LPQOS = Pointer[_QualityOfService];

static GROUP = UInt;

record _WSANETWORKEVENTS {
    lNetworkEvents : CLong;
    iErrorCode : Array[Int,10];
}

static WSANETWORKEVENTS = _WSANETWORKEVENTS;

static LPWSANETWORKEVENTS = Pointer[_WSANETWORKEVENTS];

static RNRSERVICE_REGISTER = 0;
static RNRSERVICE_DEREGISTER = 1;
static RNRSERVICE_DELETE = 2;

static WSAESETSERVICEOP = Int;

static PWSAESETSERVICEOP = Pointer[Int];

static LPWSAESETSERVICEOP = Pointer[Int];

record _AFPROTOCOLS {
    iAddressFamily : Int;
    iProtocol : Int;
}

static AFPROTOCOLS = _AFPROTOCOLS;

static PAFPROTOCOLS = Pointer[_AFPROTOCOLS];

static LPAFPROTOCOLS = Pointer[_AFPROTOCOLS];

static COMP_EQUAL = 0;
static COMP_NOTLESS = 1;

static WSAECOMPARATOR = Int;

static PWSAECOMPARATOR = Pointer[Int];

static LPWSAECOMPARATOR = Pointer[Int];

record _WSAVersion {
    dwVersion : CULong;
    ecHow : WSAECOMPARATOR;
}

static WSAVERSION = _WSAVersion;

static PWSAVERSION = Pointer[_WSAVersion];

static LPWSAVERSION = Pointer[_WSAVersion];

record _SOCKET_ADDRESS {
    lpSockaddr : LPSOCKADDR;
    iSockaddrLength : Int;
}

static SOCKET_ADDRESS = _SOCKET_ADDRESS;

static PSOCKET_ADDRESS = Pointer[_SOCKET_ADDRESS];

static LPSOCKET_ADDRESS = Pointer[_SOCKET_ADDRESS];

record _CSADDR_INFO {
    LocalAddr : SOCKET_ADDRESS;
    RemoteAddr : SOCKET_ADDRESS;
    iSocketType : Int;
    iProtocol : Int;
}

static CSADDR_INFO = _CSADDR_INFO;

static PCSADDR_INFO = Pointer[_CSADDR_INFO];

static LPCSADDR_INFO = Pointer[_CSADDR_INFO];

record _SOCKET_ADDRESS_LIST {
    iAddressCount : Int;
    Address : Array[SOCKET_ADDRESS,1];
}

static SOCKET_ADDRESS_LIST = _SOCKET_ADDRESS_LIST;

static LPSOCKET_ADDRESS_LIST = Pointer[_SOCKET_ADDRESS_LIST];

record _BLOB {
    cbSize : CULong;
    pBlobData : Pointer[CUChar];
}

static BLOB = _BLOB;

static PBLOB = Pointer[_BLOB];

static LPBLOB = Pointer[_BLOB];

record _WSAQuerySetA {
    dwSize : CULong;
    lpszServiceInstanceName : LPSTR;
    lpServiceClassId : LPGUID;
    lpVersion : LPWSAVERSION;
    lpszComment : LPSTR;
    dwNameSpace : CULong;
    lpNSProviderId : LPGUID;
    lpszContext : LPSTR;
    dwNumberOfProtocols : CULong;
    lpafpProtocols : LPAFPROTOCOLS;
    lpszQueryString : LPSTR;
    dwNumberOfCsAddrs : CULong;
    lpcsaBuffer : LPCSADDR_INFO;
    dwOutputFlags : CULong;
    lpBlob : LPBLOB;
}

static WSAQUERYSETA = _WSAQuerySetA;

static PWSAQUERYSETA = Pointer[_WSAQuerySetA];

static LPWSAQUERYSETA = Pointer[_WSAQuerySetA];

record _WSAQuerySetW {
    dwSize : CULong;
    lpszServiceInstanceName : LPWSTR;
    lpServiceClassId : LPGUID;
    lpVersion : LPWSAVERSION;
    lpszComment : LPWSTR;
    dwNameSpace : CULong;
    lpNSProviderId : LPGUID;
    lpszContext : LPWSTR;
    dwNumberOfProtocols : CULong;
    lpafpProtocols : LPAFPROTOCOLS;
    lpszQueryString : LPWSTR;
    dwNumberOfCsAddrs : CULong;
    lpcsaBuffer : LPCSADDR_INFO;
    dwOutputFlags : CULong;
    lpBlob : LPBLOB;
}

static WSAQUERYSETW = _WSAQuerySetW;

static PWSAQUERYSETW = Pointer[_WSAQuerySetW];

static LPWSAQUERYSETW = Pointer[_WSAQuerySetW];

static WSAQUERYSET = WSAQUERYSETA;

static PWSAQUERYSET = PWSAQUERYSETA;

static LPWSAQUERYSET = LPWSAQUERYSETA;

record _WSANSClassInfoA {
    lpszName : LPSTR;
    dwNameSpace : CULong;
    dwValueType : CULong;
    dwValueSize : CULong;
    lpValue : LPVOID;
}

static WSANSCLASSINFOA = _WSANSClassInfoA;

static PWSANSCLASSINFOA = Pointer[_WSANSClassInfoA];

static LPWSANSCLASSINFOA = Pointer[_WSANSClassInfoA];

record _WSANSClassInfoW {
    lpszName : LPWSTR;
    dwNameSpace : CULong;
    dwValueType : CULong;
    dwValueSize : CULong;
    lpValue : LPVOID;
}

static WSANSCLASSINFOW = _WSANSClassInfoW;

static PWSANSCLASSINFOW = Pointer[_WSANSClassInfoW];

static LPWSANSCLASSINFOW = Pointer[_WSANSClassInfoW];

static WSANSCLASSINFO = WSANSCLASSINFOA;

static PWSANSCLASSINFO = PWSANSCLASSINFOA;

static LPWSANSCLASSINFO = LPWSANSCLASSINFOA;

record _WSAServiceClassInfoA {
    lpServiceClassId : LPGUID;
    lpszServiceClassName : LPSTR;
    dwCount : CULong;
    lpClassInfos : LPWSANSCLASSINFOA;
}

static WSASERVICECLASSINFOA = _WSAServiceClassInfoA;

static PWSASERVICECLASSINFOA = Pointer[_WSAServiceClassInfoA];

static LPWSASERVICECLASSINFOA = Pointer[_WSAServiceClassInfoA];

record _WSAServiceClassInfoW {
    lpServiceClassId : LPGUID;
    lpszServiceClassName : LPWSTR;
    dwCount : CULong;
    lpClassInfos : LPWSANSCLASSINFOW;
}

static WSASERVICECLASSINFOW = _WSAServiceClassInfoW;

static PWSASERVICECLASSINFOW = Pointer[_WSAServiceClassInfoW];

static LPWSASERVICECLASSINFOW = Pointer[_WSAServiceClassInfoW];

static WSASERVICECLASSINFO = WSASERVICECLASSINFOA;

static PWSASERVICECLASSINFO = PWSASERVICECLASSINFOA;

static LPWSASERVICECLASSINFO = LPWSASERVICECLASSINFOA;

record _WSANAMESPACE_INFOA {
    NSProviderId : GUID;
    dwNameSpace : CULong;
    fActive : Int;
    dwVersion : CULong;
    lpszIdentifier : LPSTR;
}

static WSANAMESPACE_INFOA = _WSANAMESPACE_INFOA;

static PWSANAMESPACE_INFOA = Pointer[_WSANAMESPACE_INFOA];

static LPWSANAMESPACE_INFOA = Pointer[_WSANAMESPACE_INFOA];

record _WSANAMESPACE_INFOW {
    NSProviderId : GUID;
    dwNameSpace : CULong;
    fActive : Int;
    dwVersion : CULong;
    lpszIdentifier : LPWSTR;
}

static WSANAMESPACE_INFOW = _WSANAMESPACE_INFOW;

static PWSANAMESPACE_INFOW = Pointer[_WSANAMESPACE_INFOW];

static LPWSANAMESPACE_INFOW = Pointer[_WSANAMESPACE_INFOW];

static WSANAMESPACE_INFO = WSANAMESPACE_INFOA;

static PWSANAMESPACE_INFO = PWSANAMESPACE_INFOA;

static LPWSANAMESPACE_INFO = LPWSANAMESPACE_INFOA;

record _WSAPROTOCOLCHAIN {
    ChainLen : Int;
    ChainEntries : Array[CULong,7];
}

static WSAPROTOCOLCHAIN = _WSAPROTOCOLCHAIN;

static LPWSAPROTOCOLCHAIN = Pointer[_WSAPROTOCOLCHAIN];

record _WSAPROTOCOL_INFOA {
    dwServiceFlags1 : CULong;
    dwServiceFlags2 : CULong;
    dwServiceFlags3 : CULong;
    dwServiceFlags4 : CULong;
    dwProviderFlags : CULong;
    ProviderId : GUID;
    dwCatalogEntryId : CULong;
    ProtocolChain : WSAPROTOCOLCHAIN;
    iVersion : Int;
    iAddressFamily : Int;
    iMaxSockAddr : Int;
    iMinSockAddr : Int;
    iSocketType : Int;
    iProtocol : Int;
    iProtocolMaxOffset : Int;
    iNetworkByteOrder : Int;
    iSecurityScheme : Int;
    dwMessageSize : CULong;
    dwProviderReserved : CULong;
    szProtocol : Array[CChar,256];
}

static WSAPROTOCOL_INFOA = _WSAPROTOCOL_INFOA;

static LPWSAPROTOCOL_INFOA = Pointer[_WSAPROTOCOL_INFOA];

record _WSAPROTOCOL_INFOW {
    dwServiceFlags1 : CULong;
    dwServiceFlags2 : CULong;
    dwServiceFlags3 : CULong;
    dwServiceFlags4 : CULong;
    dwProviderFlags : CULong;
    ProviderId : GUID;
    dwCatalogEntryId : CULong;
    ProtocolChain : WSAPROTOCOLCHAIN;
    iVersion : Int;
    iAddressFamily : Int;
    iMaxSockAddr : Int;
    iMinSockAddr : Int;
    iSocketType : Int;
    iProtocol : Int;
    iProtocolMaxOffset : Int;
    iNetworkByteOrder : Int;
    iSecurityScheme : Int;
    dwMessageSize : CULong;
    dwProviderReserved : CULong;
    szProtocol : Array[UShort,256];
}

static WSAPROTOCOL_INFOW = _WSAPROTOCOL_INFOW;

static LPWSAPROTOCOL_INFOW = Pointer[_WSAPROTOCOL_INFOW];

static LPCONDITIONPROC = StdCallCodePointer[Pointer[_WSABUF],Pointer[_WSABUF],Pointer[_QualityOfService],Pointer[_QualityOfService],Pointer[_WSABUF],Pointer[_WSABUF],Pointer[UInt],CULong,Int];

static LPWSAOVERLAPPED_COMPLETION_ROUTINE = StdCallCodePointer[CULong,CULong,Pointer[_OVERLAPPED],CULong,Void];

static WSAPROTOCOL_INFO = WSAPROTOCOL_INFOA;

static LPWSAPROTOCOL_INFO = LPWSAPROTOCOL_INFOA;

static NSP_NOTIFY_IMMEDIATELY = 0;
static NSP_NOTIFY_HWND = 1;
static NSP_NOTIFY_EVENT = 2;
static NSP_NOTIFY_PORT = 3;
static NSP_NOTIFY_APC = 4;

static WSACOMPLETIONTYPE = Int;

static PWSACOMPLETIONTYPE = Pointer[Int];

static LPWSACOMPLETIONTYPE = Pointer[Int];

record _WSACOMPLETION {
    Type : WSACOMPLETIONTYPE;
    Parameters : AUnionType;
}

static WSACOMPLETION = _WSACOMPLETION;

static PWSACOMPLETION = Pointer[_WSACOMPLETION];

static LPWSACOMPLETION = Pointer[_WSACOMPLETION];

external (stdcall) WSAAccept(
    argument0 : UInt,
    argument1 : Pointer[sockaddr],
    argument2 : LPINT,
    argument3 : LPCONDITIONPROC,
    argument4 : CULong) : UInt;

external (stdcall) WSAAddressToStringA(
    argument0 : LPSOCKADDR,
    argument1 : CULong,
    argument2 : LPWSAPROTOCOL_INFOA,
    argument3 : LPSTR,
    argument4 : LPDWORD) : Int;

external (stdcall) WSAAddressToStringW(
    argument0 : LPSOCKADDR,
    argument1 : CULong,
    argument2 : LPWSAPROTOCOL_INFOW,
    argument3 : LPWSTR,
    argument4 : LPDWORD) : Int;

external (stdcall) WSACloseEvent(
    argument0 : HANDLE) : Int;

external (stdcall) WSAConnect(
    argument0 : UInt,
    argument1 : Pointer[sockaddr],
    argument2 : Int,
    argument3 : LPWSABUF,
    argument4 : LPWSABUF,
    argument5 : LPQOS,
    argument6 : LPQOS) : Int;

external (stdcall) WSACreateEvent() : HANDLE;

external (stdcall) WSADuplicateSocketA(
    argument0 : UInt,
    argument1 : CULong,
    argument2 : LPWSAPROTOCOL_INFOA) : Int;

external (stdcall) WSADuplicateSocketW(
    argument0 : UInt,
    argument1 : CULong,
    argument2 : LPWSAPROTOCOL_INFOW) : Int;

external (stdcall) WSAEnumNameSpaceProvidersA(
    argument0 : LPDWORD,
    argument1 : LPWSANAMESPACE_INFOA) : Int;

external (stdcall) WSAEnumNameSpaceProvidersW(
    argument0 : LPDWORD,
    argument1 : LPWSANAMESPACE_INFOW) : Int;

external (stdcall) WSAEnumNetworkEvents(
    argument0 : UInt,
    argument1 : HANDLE,
    argument2 : LPWSANETWORKEVENTS) : Int;

external (stdcall) WSAEnumProtocolsA(
    argument0 : LPINT,
    argument1 : LPWSAPROTOCOL_INFOA,
    argument2 : LPDWORD) : Int;

external (stdcall) WSAEnumProtocolsW(
    argument0 : LPINT,
    argument1 : LPWSAPROTOCOL_INFOW,
    argument2 : LPDWORD) : Int;

external (stdcall) WSAEventSelect(
    argument0 : UInt,
    argument1 : HANDLE,
    argument2 : CLong) : Int;

external (stdcall) WSAGetOverlappedResult(
    argument0 : UInt,
    argument1 : LPWSAOVERLAPPED,
    argument2 : LPDWORD,
    argument3 : Int,
    argument4 : LPDWORD) : Int;

external (stdcall) WSAGetQOSByName(
    argument0 : UInt,
    argument1 : LPWSABUF,
    argument2 : LPQOS) : Int;

external (stdcall) WSAGetServiceClassInfoA(
    argument0 : LPGUID,
    argument1 : LPGUID,
    argument2 : LPDWORD,
    argument3 : LPWSASERVICECLASSINFOA) : Int;

external (stdcall) WSAGetServiceClassInfoW(
    argument0 : LPGUID,
    argument1 : LPGUID,
    argument2 : LPDWORD,
    argument3 : LPWSASERVICECLASSINFOW) : Int;

external (stdcall) WSAGetServiceClassNameByClassIdA(
    argument0 : LPGUID,
    argument1 : LPSTR,
    argument2 : LPDWORD) : Int;

external (stdcall) WSAGetServiceClassNameByClassIdW(
    argument0 : LPGUID,
    argument1 : LPWSTR,
    argument2 : LPDWORD) : Int;

external (stdcall) WSAHtonl(
    argument0 : UInt,
    argument1 : CULong,
    argument2 : Pointer[CULong]) : Int;

external (stdcall) WSAHtons(
    argument0 : UInt,
    argument1 : UShort,
    argument2 : Pointer[UShort]) : Int;

external (stdcall) WSAInstallServiceClassA(
    argument0 : LPWSASERVICECLASSINFOA) : Int;

external (stdcall) WSAInstallServiceClassW(
    argument0 : LPWSASERVICECLASSINFOW) : Int;

external (stdcall) WSAIoctl(
    argument0 : UInt,
    argument1 : CULong,
    argument2 : LPVOID,
    argument3 : CULong,
    argument4 : LPVOID,
    argument5 : CULong,
    argument6 : LPDWORD,
    argument7 : LPWSAOVERLAPPED,
    argument8 : LPWSAOVERLAPPED_COMPLETION_ROUTINE) : Int;

external (stdcall) WSAJoinLeaf(
    argument0 : UInt,
    argument1 : Pointer[sockaddr],
    argument2 : Int,
    argument3 : LPWSABUF,
    argument4 : LPWSABUF,
    argument5 : LPQOS,
    argument6 : LPQOS,
    argument7 : CULong) : UInt;

external (stdcall) WSALookupServiceBeginA(
    argument0 : LPWSAQUERYSETA,
    argument1 : CULong,
    argument2 : LPHANDLE) : Int;

external (stdcall) WSALookupServiceBeginW(
    lpqsRestrictions : LPWSAQUERYSETW,
    argument1 : CULong,
    argument2 : LPHANDLE) : Int;

external (stdcall) WSALookupServiceNextA(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : LPDWORD,
    argument3 : LPWSAQUERYSETA) : Int;

external (stdcall) WSALookupServiceNextW(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : LPDWORD,
    argument3 : LPWSAQUERYSETW) : Int;

external (stdcall) WSALookupServiceEnd(
    argument0 : HANDLE) : Int;

external (stdcall) WSANSPIoctl(
    argument0 : HANDLE,
    argument1 : CULong,
    argument2 : LPVOID,
    argument3 : CULong,
    argument4 : LPVOID,
    argument5 : CULong,
    argument6 : LPDWORD,
    argument7 : LPWSACOMPLETION) : Int;

external (stdcall) WSANtohl(
    argument0 : UInt,
    argument1 : CULong,
    argument2 : Pointer[CULong]) : Int;

external (stdcall) WSANtohs(
    argument0 : UInt,
    argument1 : UShort,
    argument2 : Pointer[UShort]) : Int;

external (stdcall) WSARecv(
    argument0 : UInt,
    argument1 : LPWSABUF,
    argument2 : CULong,
    argument3 : LPDWORD,
    argument4 : LPDWORD,
    argument5 : LPWSAOVERLAPPED,
    argument6 : LPWSAOVERLAPPED_COMPLETION_ROUTINE) : Int;

external (stdcall) WSARecvDisconnect(
    argument0 : UInt,
    argument1 : LPWSABUF) : Int;

external (stdcall) WSARecvFrom(
    argument0 : UInt,
    argument1 : LPWSABUF,
    argument2 : CULong,
    argument3 : LPDWORD,
    argument4 : LPDWORD,
    argument5 : Pointer[sockaddr],
    argument6 : LPINT,
    argument7 : LPWSAOVERLAPPED,
    argument8 : LPWSAOVERLAPPED_COMPLETION_ROUTINE) : Int;

external (stdcall) WSARemoveServiceClass(
    argument0 : LPGUID) : Int;

external (stdcall) WSAResetEvent(
    argument0 : HANDLE) : Int;

external (stdcall) WSASend(
    argument0 : UInt,
    argument1 : LPWSABUF,
    argument2 : CULong,
    argument3 : LPDWORD,
    argument4 : CULong,
    argument5 : LPWSAOVERLAPPED,
    argument6 : LPWSAOVERLAPPED_COMPLETION_ROUTINE) : Int;

external (stdcall) WSASendDisconnect(
    argument0 : UInt,
    argument1 : LPWSABUF) : Int;

external (stdcall) WSASendTo(
    argument0 : UInt,
    argument1 : LPWSABUF,
    argument2 : CULong,
    argument3 : LPDWORD,
    argument4 : CULong,
    argument5 : Pointer[sockaddr],
    argument6 : Int,
    argument7 : LPWSAOVERLAPPED,
    argument8 : LPWSAOVERLAPPED_COMPLETION_ROUTINE) : Int;

external (stdcall) WSASetEvent(
    argument0 : HANDLE) : Int;

external (stdcall) WSASetServiceA(
    argument0 : LPWSAQUERYSETA,
    argument1 : WSAESETSERVICEOP,
    argument2 : CULong) : Int;

external (stdcall) WSASetServiceW(
    argument0 : LPWSAQUERYSETW,
    argument1 : WSAESETSERVICEOP,
    argument2 : CULong) : Int;

external (stdcall) WSASocketA(
    argument0 : Int,
    argument1 : Int,
    argument2 : Int,
    argument3 : LPWSAPROTOCOL_INFOA,
    argument4 : UInt,
    argument5 : CULong) : UInt;

external (stdcall) WSASocketW(
    argument0 : Int,
    argument1 : Int,
    argument2 : Int,
    argument3 : LPWSAPROTOCOL_INFOW,
    argument4 : UInt,
    argument5 : CULong) : UInt;

external (stdcall) WSAStringToAddressA(
    argument0 : LPSTR,
    argument1 : Int,
    argument2 : LPWSAPROTOCOL_INFOA,
    argument3 : LPSOCKADDR,
    argument4 : LPINT) : Int;

external (stdcall) WSAStringToAddressW(
    argument0 : LPWSTR,
    argument1 : Int,
    argument2 : LPWSAPROTOCOL_INFOW,
    argument3 : LPSOCKADDR,
    argument4 : LPINT) : Int;

external (stdcall) WSAWaitForMultipleEvents(
    argument0 : CULong,
    argument1 : Pointer[HANDLE],
    argument2 : Int,
    argument3 : CULong,
    argument4 : Int) : CULong;

static LPFN_WSAACCEPT = StdCallCodePointer[UInt,Pointer[sockaddr],Pointer[Int],StdCallCodePointer[Pointer[_WSABUF],Pointer[_WSABUF],Pointer[_QualityOfService],Pointer[_QualityOfService],Pointer[_WSABUF],Pointer[_WSABUF],Pointer[UInt],CULong,Int],CULong,UInt];

static LPFN_WSAADDRESSTOSTRINGA = StdCallCodePointer[Pointer[sockaddr],CULong,Pointer[_WSAPROTOCOL_INFOA],Pointer[CChar],Pointer[CULong],Int];

static LPFN_WSAADDRESSTOSTRINGW = StdCallCodePointer[Pointer[sockaddr],CULong,Pointer[_WSAPROTOCOL_INFOW],Pointer[UShort],Pointer[CULong],Int];

static LPFN_WSACLOSEEVENT = StdCallCodePointer[RawPointer,Int];

static LPFN_WSACONNECT = StdCallCodePointer[UInt,Pointer[sockaddr],Int,Pointer[_WSABUF],Pointer[_WSABUF],Pointer[_QualityOfService],Pointer[_QualityOfService],Int];

static LPFN_WSACREATEEVENT = StdCallCodePointer[RawPointer];

static LPFN_WSADUPLICATESOCKETA = StdCallCodePointer[UInt,CULong,Pointer[_WSAPROTOCOL_INFOA],Int];

static LPFN_WSADUPLICATESOCKETW = StdCallCodePointer[UInt,CULong,Pointer[_WSAPROTOCOL_INFOW],Int];

static LPFN_WSAENUMNAMESPACEPROVIDERSA = StdCallCodePointer[Pointer[CULong],Pointer[_WSANAMESPACE_INFOA],Int];

static LPFN_WSAENUMNAMESPACEPROVIDERSW = StdCallCodePointer[Pointer[CULong],Pointer[_WSANAMESPACE_INFOW],Int];

static LPFN_WSAENUMNETWORKEVENTS = StdCallCodePointer[UInt,RawPointer,Pointer[_WSANETWORKEVENTS],Int];

static LPFN_WSAENUMPROTOCOLSA = StdCallCodePointer[Pointer[Int],Pointer[_WSAPROTOCOL_INFOA],Pointer[CULong],Int];

static LPFN_WSAENUMPROTOCOLSW = StdCallCodePointer[Pointer[Int],Pointer[_WSAPROTOCOL_INFOW],Pointer[CULong],Int];

static LPFN_WSAEVENTSELECT = StdCallCodePointer[UInt,RawPointer,CLong,Int];

static LPFN_WSAGETOVERLAPPEDRESULT = StdCallCodePointer[UInt,Pointer[_OVERLAPPED],Pointer[CULong],Int,Pointer[CULong],Int];

static LPFN_WSAGETQOSBYNAME = StdCallCodePointer[UInt,Pointer[_WSABUF],Pointer[_QualityOfService],Int];

static LPFN_WSAGETSERVICECLASSINFOA = StdCallCodePointer[Pointer[_GUID],Pointer[_GUID],Pointer[CULong],Pointer[_WSAServiceClassInfoA],Int];

static LPFN_WSAGETSERVICECLASSINFOW = StdCallCodePointer[Pointer[_GUID],Pointer[_GUID],Pointer[CULong],Pointer[_WSAServiceClassInfoW],Int];

static LPFN_WSAGETSERVICECLASSNAMEBYCLASSIDA = StdCallCodePointer[Pointer[_GUID],Pointer[CChar],Pointer[CULong],Int];

static LPFN_WSAGETSERVICECLASSNAMEBYCLASSIDW = StdCallCodePointer[Pointer[_GUID],Pointer[UShort],Pointer[CULong],Int];

static LPFN_WSAHTONL = StdCallCodePointer[UInt,CULong,Pointer[CULong],Int];

static LPFN_WSAHTONS = StdCallCodePointer[UInt,UShort,Pointer[UShort],Int];

static LPFN_WSAINSTALLSERVICECLASSA = StdCallCodePointer[Pointer[_WSAServiceClassInfoA],Int];

static LPFN_WSAINSTALLSERVICECLASSW = StdCallCodePointer[Pointer[_WSAServiceClassInfoW],Int];

static LPFN_WSAIOCTL = StdCallCodePointer[UInt,CULong,RawPointer,CULong,RawPointer,CULong,Pointer[CULong],Pointer[_OVERLAPPED],StdCallCodePointer[CULong,CULong,Pointer[_OVERLAPPED],CULong,Void],Int];

static LPFN_WSAJOINLEAF = StdCallCodePointer[UInt,Pointer[sockaddr],Int,Pointer[_WSABUF],Pointer[_WSABUF],Pointer[_QualityOfService],Pointer[_QualityOfService],CULong,UInt];

static LPFN_WSALOOKUPSERVICEBEGINA = StdCallCodePointer[Pointer[_WSAQuerySetA],CULong,Pointer[RawPointer],Int];

static LPFN_WSALOOKUPSERVICEBEGINW = StdCallCodePointer[Pointer[_WSAQuerySetW],CULong,Pointer[RawPointer],Int];

static LPFN_WSALOOKUPSERVICENEXTA = StdCallCodePointer[RawPointer,CULong,Pointer[CULong],Pointer[_WSAQuerySetA],Int];

static LPFN_WSALOOKUPSERVICENEXTW = StdCallCodePointer[RawPointer,CULong,Pointer[CULong],Pointer[_WSAQuerySetW],Int];

static LPFN_WSALOOKUPSERVICEEND = StdCallCodePointer[RawPointer,Int];

static LPFN_WSANSPIoctl = StdCallCodePointer[RawPointer,CULong,RawPointer,CULong,RawPointer,CULong,Pointer[CULong],Pointer[_WSACOMPLETION],Int];

static LPFN_WSANTOHL = StdCallCodePointer[UInt,CULong,Pointer[CULong],Int];

static LPFN_WSANTOHS = StdCallCodePointer[UInt,UShort,Pointer[UShort],Int];

static LPFN_WSARECV = StdCallCodePointer[UInt,Pointer[_WSABUF],CULong,Pointer[CULong],Pointer[CULong],Pointer[_OVERLAPPED],StdCallCodePointer[CULong,CULong,Pointer[_OVERLAPPED],CULong,Void],Int];

static LPFN_WSARECVDISCONNECT = StdCallCodePointer[UInt,Pointer[_WSABUF],Int];

static LPFN_WSARECVFROM = StdCallCodePointer[UInt,Pointer[_WSABUF],CULong,Pointer[CULong],Pointer[CULong],Pointer[sockaddr],Pointer[Int],Pointer[_OVERLAPPED],StdCallCodePointer[CULong,CULong,Pointer[_OVERLAPPED],CULong,Void],Int];

static LPFN_WSAREMOVESERVICECLASS = StdCallCodePointer[Pointer[_GUID],Int];

static LPFN_WSARESETEVENT = StdCallCodePointer[RawPointer,Int];

static LPFN_WSASEND = StdCallCodePointer[UInt,Pointer[_WSABUF],CULong,Pointer[CULong],CULong,Pointer[_OVERLAPPED],StdCallCodePointer[CULong,CULong,Pointer[_OVERLAPPED],CULong,Void],Int];

static LPFN_WSASENDDISCONNECT = StdCallCodePointer[UInt,Pointer[_WSABUF],Int];

static LPFN_WSASENDTO = StdCallCodePointer[UInt,Pointer[_WSABUF],CULong,Pointer[CULong],CULong,Pointer[sockaddr],Int,Pointer[_OVERLAPPED],StdCallCodePointer[CULong,CULong,Pointer[_OVERLAPPED],CULong,Void],Int];

static LPFN_WSASETEVENT = StdCallCodePointer[RawPointer,Int];

static LPFN_WSASETSERVICEA = StdCallCodePointer[Pointer[_WSAQuerySetA],Int,CULong,Int];

static LPFN_WSASETSERVICEW = StdCallCodePointer[Pointer[_WSAQuerySetW],Int,CULong,Int];

static LPFN_WSASOCKETA = StdCallCodePointer[Int,Int,Int,Pointer[_WSAPROTOCOL_INFOA],UInt,CULong,UInt];

static LPFN_WSASOCKETW = StdCallCodePointer[Int,Int,Int,Pointer[_WSAPROTOCOL_INFOW],UInt,CULong,UInt];

static LPFN_WSASTRINGTOADDRESSA = StdCallCodePointer[Pointer[CChar],Int,Pointer[_WSAPROTOCOL_INFOA],Pointer[sockaddr],Pointer[Int],Int];

static LPFN_WSASTRINGTOADDRESSW = StdCallCodePointer[Pointer[UShort],Int,Pointer[_WSAPROTOCOL_INFOW],Pointer[sockaddr],Pointer[Int],Int];

static LPFN_WSAWAITFORMULTIPLEEVENTS = StdCallCodePointer[CULong,Pointer[RawPointer],Int,CULong,Int,CULong];

record UnnamedRecord26 {
    LookupContext : RPC_NS_HANDLE;
    ProposedHandle : RPC_BINDING_HANDLE;
    Bindings : Pointer[RPC_BINDING_VECTOR];
}

static RPC_IMPORT_CONTEXT_P = UnnamedRecord26;

static PRPC_IMPORT_CONTEXT_P = Pointer[UnnamedRecord26];

external (stdcall) I_RpcNsGetBuffer(
    argument0 : PRPC_MESSAGE) : CLong;

external (stdcall) I_RpcNsSendReceive(
    argument0 : PRPC_MESSAGE,
    argument1 : Pointer[RPC_BINDING_HANDLE]) : CLong;

external (stdcall) I_RpcNsRaiseException(
    argument0 : PRPC_MESSAGE,
    argument1 : CLong) : Void;

external (stdcall) I_RpcReBindBuffer(
    argument0 : PRPC_MESSAGE) : CLong;

external (stdcall) I_NsServerBindSearch() : CLong;

external (stdcall) I_NsClientBindSearch() : CLong;

external (stdcall) I_NsClientBindDone() : Void;

static LPMONIKER = Pointer[IMoniker];

static LPSTREAM = Pointer[IStream];

static LPMARSHAL = Pointer[IMarshal];

static LPMALLOC = Pointer[IMalloc];

static LPMALLOCSPY = Pointer[IMallocSpy];

static LPMESSAGEFILTER = Pointer[IMessageFilter];

static LPPERSIST = Pointer[IPersist];

static LPPERSISTSTREAM = Pointer[IPersistStream];

static LPRUNNINGOBJECTTABLE = Pointer[IRunningObjectTable];

static LPBINDCTX = Pointer[IBindCtx];

static LPBC = Pointer[IBindCtx];

static LPADVISESINK = Pointer[IAdviseSink];

static LPADVISESINK2 = Pointer[IAdviseSink22];

static LPDATAOBJECT = Pointer[IDataObject];

static LPDATAADVISEHOLDER = Pointer[IDataAdviseHolder];

static LPENUMMONIKER = Pointer[IEnumMoniker];

static LPENUMFORMATETC = Pointer[IEnumFORMATETC];

static LPENUMSTATDATA = Pointer[IEnumSTATDATA];

static LPENUMSTATSTG = Pointer[IEnumSTATSTG];

static LPENUMSTATPROPSTG = IEnumSTATPROPSTG;

static LPENUMSTRING = Pointer[IEnumString];

static LPENUMUNKNOWN = Pointer[IEnumUnknown];

static LPSTORAGE = Pointer[IStorage];

static LPPERSISTSTORAGE = Pointer[IPersistStorage];

static LPLOCKBYTES = Pointer[ILockBytes];

static LPSTDMARSHALINFO = Pointer[IStdMarshalInfo];

static LPEXTERNALCONNECTION = Pointer[IExternalConnection];

static LPRUNNABLEOBJECT = Pointer[IRunnableObject];

static LPROTDATA = Pointer[IROTData];

static LPPERSISTFILE = Pointer[IPersistFile];

static LPROOTSTORAGE = Pointer[IRootStorage];

static LPRPCCHANNELBUFFER = Pointer[IRpcChannelBuffer];

static LPRPCPROXYBUFFER = Pointer[IRpcProxyBuffer];

static LPRPCSTUBBUFFER = Pointer[IRpcStubBuffer];

static LPPROPERTYSTORAGE = Pointer[IPropertyStorage];

static LPENUMSTATPROPSETSTG = Pointer[IEnumSTATPROPSETSTG];

static LPPROPERTYSETSTORAGE = Pointer[IPropertySetStorage];

static LPCLIENTSECURITY = Pointer[IClientSecurity];

static LPSERVERSECURITY = Pointer[IServerSecurity];

static LPCLASSACTIVATOR = Pointer[IClassActivator];

static LPFILLLOCKBYTES = Pointer[IFillLockBytes];

static LPPROGRESSNOTIFY = Pointer[IProgressNotify];

static LPLAYOUTSTORAGE = Pointer[ILayoutStorage];

static byte = CUChar;

static boolean = CUChar;

static NDR_CCONTEXT = RawPointer;

record UnnamedRecord27 {
    pad : Array[RawPointer,2];
    userContext : RawPointer;
}

static NDR_SCONTEXT = Pointer[UnnamedRecord27];

static NDR_RUNDOWN = StdCallCodePointer[RawPointer,Void];

record _SCONTEXT_QUEUE {
    NumberOfObjects : CULong;
    ArrayOfObjects : Pointer[NDR_SCONTEXT];
}

static SCONTEXT_QUEUE = _SCONTEXT_QUEUE;

static PSCONTEXT_QUEUE = Pointer[_SCONTEXT_QUEUE];

static RPC_BUFPTR = Pointer[CUChar];

static RPC_LENGTH = CULong;

static EXPR_EVAL = StdCallCodePointer[Pointer[_MIDL_STUB_MESSAGE],Void];

static PFORMAT_STRING = Pointer[CUChar];

record UnnamedRecord28 {
    Dimension : CLong;
    BufferConformanceMark : Pointer[CULong];
    BufferVarianceMark : Pointer[CULong];
    MaxCountArray : Pointer[CULong];
    OffsetArray : Pointer[CULong];
    ActualCountArray : Pointer[CULong];
}

static ARRAY_INFO = UnnamedRecord28;

static PARRAY_INFO = Pointer[UnnamedRecord28];

external (stdcall) NDRCContextBinding(
    argument0 : NDR_CCONTEXT) : RPC_BINDING_HANDLE;

external (stdcall) NDRCContextMarshall(
    argument0 : NDR_CCONTEXT,
    argument1 : RawPointer) : Void;

external (stdcall) NDRCContextUnmarshall(
    argument0 : Pointer[NDR_CCONTEXT],
    argument1 : RPC_BINDING_HANDLE,
    argument2 : RawPointer,
    argument3 : CULong) : Void;

external (stdcall) NDRSContextMarshall(
    argument0 : NDR_SCONTEXT,
    argument1 : RawPointer,
    argument2 : NDR_RUNDOWN) : Void;

external (stdcall) NDRSContextUnmarshall(
    pBuff : RawPointer,
    argument1 : CULong) : NDR_SCONTEXT;

external (stdcall) RpcSsDestroyClientContext(
    argument0 : Pointer[RawPointer]) : Void;

external (stdcall) NDRcopy(
    argument0 : RawPointer,
    argument1 : RawPointer,
    argument2 : UInt) : Void;

external (stdcall) MIDL_wchar_strlen(
    argument0 : Pointer[UShort]) : UInt;

external (stdcall) MIDL_wchar_strcpy(
    argument0 : RawPointer,
    argument1 : Pointer[UShort]) : Void;

external (stdcall) char_from_ndr(
    argument0 : PRPC_MESSAGE,
    argument1 : Pointer[CUChar]) : Void;

external (stdcall) char_array_from_ndr(
    argument0 : PRPC_MESSAGE,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[CUChar]) : Void;

external (stdcall) short_from_ndr(
    argument0 : PRPC_MESSAGE,
    argument1 : Pointer[UShort]) : Void;

external (stdcall) short_array_from_ndr(
    argument0 : PRPC_MESSAGE,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[UShort]) : Void;

external (stdcall) short_from_ndr_temp(
    argument0 : Pointer[Pointer[CUChar]],
    argument1 : Pointer[UShort],
    argument2 : CULong) : Void;

external (stdcall) long_from_ndr(
    argument0 : PRPC_MESSAGE,
    argument1 : Pointer[CULong]) : Void;

external (stdcall) long_array_from_ndr(
    argument0 : PRPC_MESSAGE,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[CULong]) : Void;

external (stdcall) long_from_ndr_temp(
    argument0 : Pointer[Pointer[CUChar]],
    argument1 : Pointer[CULong],
    argument2 : CULong) : Void;

external (stdcall) enum_from_ndr(
    argument0 : PRPC_MESSAGE,
    argument1 : Pointer[UInt]) : Void;

external (stdcall) float_from_ndr(
    argument0 : PRPC_MESSAGE,
    argument1 : RawPointer) : Void;

external (stdcall) float_array_from_ndr(
    argument0 : PRPC_MESSAGE,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : RawPointer) : Void;

external (stdcall) double_from_ndr(
    argument0 : PRPC_MESSAGE,
    argument1 : RawPointer) : Void;

external (stdcall) double_array_from_ndr(
    argument0 : PRPC_MESSAGE,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : RawPointer) : Void;

external (stdcall) hyper_from_ndr(
    argument0 : PRPC_MESSAGE,
    argument1 : Pointer[Int64]) : Void;

external (stdcall) hyper_array_from_ndr(
    argument0 : PRPC_MESSAGE,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[Int64]) : Void;

external (stdcall) hyper_from_ndr_temp(
    argument0 : Pointer[Pointer[CUChar]],
    argument1 : Pointer[Int64],
    argument2 : CULong) : Void;

external (stdcall) data_from_ndr(
    argument0 : PRPC_MESSAGE,
    argument1 : RawPointer,
    argument2 : Pointer[CChar],
    argument3 : CUChar) : Void;

external (stdcall) data_into_ndr(
    argument0 : RawPointer,
    argument1 : PRPC_MESSAGE,
    argument2 : Pointer[CChar],
    argument3 : CUChar) : Void;

external (stdcall) tree_into_ndr(
    argument0 : RawPointer,
    argument1 : PRPC_MESSAGE,
    argument2 : Pointer[CChar],
    argument3 : CUChar) : Void;

external (stdcall) data_size_ndr(
    argument0 : RawPointer,
    argument1 : PRPC_MESSAGE,
    argument2 : Pointer[CChar],
    argument3 : CUChar) : Void;

external (stdcall) tree_size_ndr(
    argument0 : RawPointer,
    argument1 : PRPC_MESSAGE,
    argument2 : Pointer[CChar],
    argument3 : CUChar) : Void;

external (stdcall) tree_peek_ndr(
    argument0 : PRPC_MESSAGE,
    argument1 : Pointer[Pointer[CUChar]],
    argument2 : Pointer[CChar],
    argument3 : CUChar) : Void;

external (stdcall) midl_allocate(
    argument0 : Int) : RawPointer;

record _MIDL_STUB_MESSAGE {
    RpcMsg : PRPC_MESSAGE;
    Buffer : Pointer[CUChar];
    BufferStart : Pointer[CUChar];
    BufferEnd : Pointer[CUChar];
    BufferMark : Pointer[CUChar];
    BufferLength : CULong;
    MemorySize : CULong;
    Memory : Pointer[CUChar];
    IsClient : Int;
    ReuseBuffer : Int;
    AllocAllNodesMemory : Pointer[CUChar];
    AllocAllNodesMemoryEnd : Pointer[CUChar];
    IgnoreEmbeddedPointers : Int;
    PointerBufferMark : Pointer[CUChar];
    fBufferValid : CUChar;
    Unused : CUChar;
    MaxCount : CULong;
    Offset : CULong;
    ActualCount : CULong;
    pfnAllocate : StdCallCodePointer[UInt,RawPointer];
    pfnFree : StdCallCodePointer[RawPointer,Void];
    StackTop : Pointer[CUChar];
    pPresentedType : Pointer[CUChar];
    pTransmitType : Pointer[CUChar];
    SavedHandle : handle_t;
    StubDesc : Pointer[_MIDL_STUB_DESC];
    FullPtrXlatTables : Pointer[_FULL_PTR_XLAT_TABLES];
    FullPtrRefId : CULong;
    fCheckBounds : Int;
    fInDontFree : Int;
    fDontCallFreeInst : Int;
    fInOnlyParam : Int;
    fHasReturn : Int;
    dwDestContext : CULong;
    pvDestContext : RawPointer;
    SavedContextHandles : Pointer[NDR_SCONTEXT];
    ParamNumber : CLong;
    pRpcChannelBuffer : Pointer[IRpcChannelBuffer];
    pArrayInfo : PARRAY_INFO;
    SizePtrCountArray : Pointer[CULong];
    SizePtrOffsetArray : Pointer[CULong];
    SizePtrLengthArray : Pointer[CULong];
    pArgQueue : RawPointer;
    dwStubPhase : CULong;
    w2kReserved : Array[CULong,5];
}

static MIDL_STUB_MESSAGE = _MIDL_STUB_MESSAGE;

static PMIDL_STUB_MESSAGE = Pointer[_MIDL_STUB_MESSAGE];

static GENERIC_BINDING_ROUTINE = StdCallCodePointer[RawPointer,RawPointer];

static GENERIC_UNBIND_ROUTINE = StdCallCodePointer[RawPointer,Pointer[CUChar],Void];

record _GENERIC_BINDING_ROUTINE_PAIR {
    pfnBind : GENERIC_BINDING_ROUTINE;
    pfnUnbind : GENERIC_UNBIND_ROUTINE;
}

static GENERIC_BINDING_ROUTINE_PAIR = _GENERIC_BINDING_ROUTINE_PAIR;

static PGENERIC_BINDING_ROUTINE_PAIR = Pointer[_GENERIC_BINDING_ROUTINE_PAIR];

record __GENERIC_BINDING_INFO {
    pObj : RawPointer;
    Size : UInt;
    pfnBind : GENERIC_BINDING_ROUTINE;
    pfnUnbind : GENERIC_UNBIND_ROUTINE;
}

static GENERIC_BINDING_INFO = __GENERIC_BINDING_INFO;

static PGENERIC_BINDING_INFO = Pointer[__GENERIC_BINDING_INFO];

static XMIT_HELPER_ROUTINE = StdCallCodePointer[Pointer[_MIDL_STUB_MESSAGE],Void];

record _XMIT_ROUTINE_QUINTUPLE {
    pfnTranslateToXmit : XMIT_HELPER_ROUTINE;
    pfnTranslateFromXmit : XMIT_HELPER_ROUTINE;
    pfnFreeXmit : XMIT_HELPER_ROUTINE;
    pfnFreeInst : XMIT_HELPER_ROUTINE;
}

static XMIT_ROUTINE_QUINTUPLE = _XMIT_ROUTINE_QUINTUPLE;

static PXMIT_ROUTINE_QUINTUPLE = Pointer[_XMIT_ROUTINE_QUINTUPLE];

record _MALLOC_FREE_STRUCT {
    pfnAllocate : StdCallCodePointer[UInt,RawPointer];
    pfnFree : StdCallCodePointer[RawPointer,Void];
}

static MALLOC_FREE_STRUCT = _MALLOC_FREE_STRUCT;

record _COMM_FAULT_OFFSETS {
    CommOffset : Short;
    FaultOffset : Short;
}

static COMM_FAULT_OFFSETS = _COMM_FAULT_OFFSETS;

static USER_MARSHAL_SIZING_ROUTINE = StdCallCodePointer[Pointer[CULong],CULong,RawPointer,CULong];

static USER_MARSHAL_MARSHALLING_ROUTINE = StdCallCodePointer[Pointer[CULong],Pointer[CUChar],RawPointer,Pointer[CUChar]];

static USER_MARSHAL_UNMARSHALLING_ROUTINE = StdCallCodePointer[Pointer[CULong],Pointer[CUChar],RawPointer,Pointer[CUChar]];

static USER_MARSHAL_FREEING_ROUTINE = StdCallCodePointer[Pointer[CULong],RawPointer,Void];

record _USER_MARSHAL_ROUTINE_QUADRUPLE {
    pfnBufferSize : USER_MARSHAL_SIZING_ROUTINE;
    pfnMarshall : USER_MARSHAL_MARSHALLING_ROUTINE;
    pfnUnmarshall : USER_MARSHAL_UNMARSHALLING_ROUTINE;
    pfnFree : USER_MARSHAL_FREEING_ROUTINE;
}

static USER_MARSHAL_ROUTINE_QUADRUPLE = _USER_MARSHAL_ROUTINE_QUADRUPLE;

static NDR_NOTIFY_ROUTINE = StdCallCodePointer[Void];

static IDL_CS_NO_CONVERT = 0;
static IDL_CS_IN_PLACE_CONVERT = 1;
static IDL_CS_NEW_BUFFER_CONVERT = 2;

static IDL_CS_CONVERT = Int;

static CS_TYPE_NET_SIZE_ROUTINE = StdCallCodePointer[RawPointer,CULong,CULong,Pointer[Int],Pointer[CULong],Pointer[CULong],Void];

static CS_TYPE_LOCAL_SIZE_ROUTINE = StdCallCodePointer[RawPointer,CULong,CULong,Pointer[Int],Pointer[CULong],Pointer[CULong],Void];

static CS_TYPE_TO_NETCS_ROUTINE = StdCallCodePointer[RawPointer,CULong,RawPointer,CULong,Pointer[CUChar],Pointer[CULong],Pointer[CULong],Void];

static CS_TYPE_FROM_NETCS_ROUTINE = StdCallCodePointer[RawPointer,CULong,Pointer[CUChar],CULong,CULong,RawPointer,Pointer[CULong],Pointer[CULong],Void];

static CS_TAG_GETTING_ROUTINE = StdCallCodePointer[RawPointer,Int,Pointer[CULong],Pointer[CULong],Pointer[CULong],Pointer[CULong],Void];

record _NDR_CS_SIZE_CONVERT_ROUTINES {
    pfnNetSize : CS_TYPE_NET_SIZE_ROUTINE;
    pfnToNetCs : CS_TYPE_TO_NETCS_ROUTINE;
    pfnLocalSize : CS_TYPE_LOCAL_SIZE_ROUTINE;
    pfnFromNetCs : CS_TYPE_FROM_NETCS_ROUTINE;
}

static NDR_CS_SIZE_CONVERT_ROUTINES = _NDR_CS_SIZE_CONVERT_ROUTINES;

record _NDR_CS_ROUTINES {
    pSizeConvertRoutines : Pointer[NDR_CS_SIZE_CONVERT_ROUTINES];
    pTagGettingRoutines : Pointer[CS_TAG_GETTING_ROUTINE];
}

static NDR_CS_ROUTINES = _NDR_CS_ROUTINES;

record _MIDL_STUB_DESC {
    RpcInterfaceInformation : RawPointer;
    pfnAllocate : StdCallCodePointer[UInt,RawPointer];
    pfnFree : StdCallCodePointer[RawPointer,Void];
    IMPLICIT_HANDLE_INFO : AUnionType;
    apfnNdrRundownRoutines : Pointer[NDR_RUNDOWN];
    aGenericBindingRoutinePairs : Pointer[GENERIC_BINDING_ROUTINE_PAIR];
    apfnExprEval : Pointer[EXPR_EVAL];
    aXmitQuintuple : Pointer[XMIT_ROUTINE_QUINTUPLE];
    pFormatTypes : Pointer[CUChar];
    fCheckBounds : Int;
    Version : CULong;
    pMallocFreeStruct : Pointer[MALLOC_FREE_STRUCT];
    MIDLVersion : CLong;
    CommFaultOffsets : Pointer[COMM_FAULT_OFFSETS];
    aUserMarshalQuadruple : Pointer[USER_MARSHAL_ROUTINE_QUADRUPLE];
    NotifyRoutineTable : Pointer[NDR_NOTIFY_ROUTINE];
    mFlags : CULong;
    CsRoutineTables : Pointer[NDR_CS_ROUTINES];
    Reserved4 : RawPointer;
    Reserved5 : CULong;
}

static MIDL_STUB_DESC = _MIDL_STUB_DESC;

static PMIDL_STUB_DESC = Pointer[MIDL_STUB_DESC];

static PMIDL_XMIT_TYPE = RawPointer;

record _MIDL_FORMAT_STRING {
    Pad : Short;
    Format : Array[CUChar,1];
}

static MIDL_FORMAT_STRING = _MIDL_FORMAT_STRING;

static STUB_THUNK = StdCallCodePointer[Pointer[_MIDL_STUB_MESSAGE],Void];

static SERVER_ROUTINE = StdCallCodePointer[CLong];

record _MIDL_SERVER_INFO_ {
    pStubDesc : PMIDL_STUB_DESC;
    DispatchTable : Pointer[SERVER_ROUTINE];
    ProcString : PFORMAT_STRING;
    FmtStringOffset : Pointer[UShort];
    ThunkTable : Pointer[STUB_THUNK];
}

static MIDL_SERVER_INFO = _MIDL_SERVER_INFO_;

static PMIDL_SERVER_INFO = Pointer[_MIDL_SERVER_INFO_];

record _MIDL_STUBLESS_PROXY_INFO {
    pStubDesc : PMIDL_STUB_DESC;
    ProcFormatString : PFORMAT_STRING;
    FormatStringOffset : Pointer[UShort];
}

static MIDL_STUBLESS_PROXY_INFO = _MIDL_STUBLESS_PROXY_INFO;

static PMIDL_STUBLESS_PROXY_INFO = Pointer[MIDL_STUBLESS_PROXY_INFO];

static CLIENT_CALL_RETURN = AUnionType;

static XLAT_SERVER = 1;
static XLAT_CLIENT = 2;

static XLAT_SIDE = Int;

record _FULL_PTR_TO_REFID_ELEMENT {
    Next : Pointer[_FULL_PTR_TO_REFID_ELEMENT];
    Pointer : RawPointer;
    RefId : CULong;
    State : CUChar;
}

static FULL_PTR_TO_REFID_ELEMENT = _FULL_PTR_TO_REFID_ELEMENT;

static PFULL_PTR_TO_REFID_ELEMENT = Pointer[_FULL_PTR_TO_REFID_ELEMENT];

record _FULL_PTR_XLAT_TABLES {
    RefIdToPointer : UnnamedRecord37;
    PointerToRefId : UnnamedRecord38;
    NextRefId : CULong;
    XlatSide : XLAT_SIDE;
}

record UnnamedRecord37 {
    XlatTable : Pointer[RawPointer];
    StateTable : Pointer[CUChar];
    NumberOfEntries : CULong;
}

record UnnamedRecord38 {
    XlatTable : Pointer[PFULL_PTR_TO_REFID_ELEMENT];
    NumberOfBuckets : CULong;
    HashMask : CULong;
}

static FULL_PTR_XLAT_TABLES = _FULL_PTR_XLAT_TABLES;

static PFULL_PTR_XLAT_TABLES = Pointer[_FULL_PTR_XLAT_TABLES];

external (stdcall) NdrSimpleTypeMarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : CUChar) : Void;

external (stdcall) NdrPointerMarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    pFormat : PFORMAT_STRING) : Pointer[CUChar];

external (stdcall) NdrSimpleStructMarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) : Pointer[CUChar];

external (stdcall) NdrConformantStructMarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) : Pointer[CUChar];

external (stdcall) NdrConformantVaryingStructMarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) : Pointer[CUChar];

external (stdcall) NdrHardStructMarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) : Pointer[CUChar];

external (stdcall) NdrComplexStructMarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) : Pointer[CUChar];

external (stdcall) NdrFixedArrayMarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) : Pointer[CUChar];

external (stdcall) NdrConformantArrayMarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) : Pointer[CUChar];

external (stdcall) NdrConformantVaryingArrayMarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) : Pointer[CUChar];

external (stdcall) NdrVaryingArrayMarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) : Pointer[CUChar];

external (stdcall) NdrComplexArrayMarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) : Pointer[CUChar];

external (stdcall) NdrNonConformantStringMarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) : Pointer[CUChar];

external (stdcall) NdrConformantStringMarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) : Pointer[CUChar];

external (stdcall) NdrEncapsulatedUnionMarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) : Pointer[CUChar];

external (stdcall) NdrNonEncapsulatedUnionMarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) : Pointer[CUChar];

external (stdcall) NdrByteCountPointerMarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) : Pointer[CUChar];

external (stdcall) NdrXmitOrRepAsMarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) : Pointer[CUChar];

external (stdcall) NdrInterfacePointerMarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) : Pointer[CUChar];

external (stdcall) NdrClientContextMarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : NDR_CCONTEXT,
    argument2 : Int) : Void;

external (stdcall) NdrServerContextMarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : NDR_SCONTEXT,
    argument2 : NDR_RUNDOWN) : Void;

external (stdcall) NdrSimpleTypeUnmarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : CUChar) : Void;

external (stdcall) NdrPointerUnmarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[Pointer[CUChar]],
    argument2 : PFORMAT_STRING,
    argument3 : CUChar) : Pointer[CUChar];

external (stdcall) NdrSimpleStructUnmarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[Pointer[CUChar]],
    argument2 : PFORMAT_STRING,
    argument3 : CUChar) : Pointer[CUChar];

external (stdcall) NdrConformantStructUnmarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[Pointer[CUChar]],
    argument2 : PFORMAT_STRING,
    argument3 : CUChar) : Pointer[CUChar];

external (stdcall) NdrConformantVaryingStructUnmarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[Pointer[CUChar]],
    argument2 : PFORMAT_STRING,
    argument3 : CUChar) : Pointer[CUChar];

external (stdcall) NdrHardStructUnmarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[Pointer[CUChar]],
    argument2 : PFORMAT_STRING,
    argument3 : CUChar) : Pointer[CUChar];

external (stdcall) NdrComplexStructUnmarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[Pointer[CUChar]],
    argument2 : PFORMAT_STRING,
    argument3 : CUChar) : Pointer[CUChar];

external (stdcall) NdrFixedArrayUnmarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[Pointer[CUChar]],
    argument2 : PFORMAT_STRING,
    argument3 : CUChar) : Pointer[CUChar];

external (stdcall) NdrConformantArrayUnmarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[Pointer[CUChar]],
    argument2 : PFORMAT_STRING,
    argument3 : CUChar) : Pointer[CUChar];

external (stdcall) NdrConformantVaryingArrayUnmarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[Pointer[CUChar]],
    argument2 : PFORMAT_STRING,
    argument3 : CUChar) : Pointer[CUChar];

external (stdcall) NdrVaryingArrayUnmarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[Pointer[CUChar]],
    argument2 : PFORMAT_STRING,
    argument3 : CUChar) : Pointer[CUChar];

external (stdcall) NdrComplexArrayUnmarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[Pointer[CUChar]],
    argument2 : PFORMAT_STRING,
    argument3 : CUChar) : Pointer[CUChar];

external (stdcall) NdrNonConformantStringUnmarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[Pointer[CUChar]],
    argument2 : PFORMAT_STRING,
    argument3 : CUChar) : Pointer[CUChar];

external (stdcall) NdrConformantStringUnmarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[Pointer[CUChar]],
    argument2 : PFORMAT_STRING,
    argument3 : CUChar) : Pointer[CUChar];

external (stdcall) NdrEncapsulatedUnionUnmarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[Pointer[CUChar]],
    argument2 : PFORMAT_STRING,
    argument3 : CUChar) : Pointer[CUChar];

external (stdcall) NdrNonEncapsulatedUnionUnmarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[Pointer[CUChar]],
    argument2 : PFORMAT_STRING,
    argument3 : CUChar) : Pointer[CUChar];

external (stdcall) NdrByteCountPointerUnmarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[Pointer[CUChar]],
    argument2 : PFORMAT_STRING,
    argument3 : CUChar) : Pointer[CUChar];

external (stdcall) NdrXmitOrRepAsUnmarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[Pointer[CUChar]],
    argument2 : PFORMAT_STRING,
    argument3 : CUChar) : Pointer[CUChar];

external (stdcall) NdrInterfacePointerUnmarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[Pointer[CUChar]],
    argument2 : PFORMAT_STRING,
    argument3 : CUChar) : Pointer[CUChar];

external (stdcall) NdrClientContextUnmarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[NDR_CCONTEXT],
    argument2 : RPC_BINDING_HANDLE) : Void;

external (stdcall) NdrServerContextUnmarshall(
    argument0 : PMIDL_STUB_MESSAGE) : NDR_SCONTEXT;

external (stdcall) NdrPointerBufferSize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) : Void;

external (stdcall) NdrSimpleStructBufferSize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) : Void;

external (stdcall) NdrConformantStructBufferSize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) : Void;

external (stdcall) NdrConformantVaryingStructBufferSize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) : Void;

external (stdcall) NdrHardStructBufferSize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) : Void;

external (stdcall) NdrComplexStructBufferSize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) : Void;

external (stdcall) NdrFixedArrayBufferSize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) : Void;

external (stdcall) NdrConformantArrayBufferSize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) : Void;

external (stdcall) NdrConformantVaryingArrayBufferSize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) : Void;

external (stdcall) NdrVaryingArrayBufferSize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) : Void;

external (stdcall) NdrComplexArrayBufferSize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) : Void;

external (stdcall) NdrConformantStringBufferSize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) : Void;

external (stdcall) NdrNonConformantStringBufferSize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) : Void;

external (stdcall) NdrEncapsulatedUnionBufferSize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) : Void;

external (stdcall) NdrNonEncapsulatedUnionBufferSize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) : Void;

external (stdcall) NdrByteCountPointerBufferSize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) : Void;

external (stdcall) NdrXmitOrRepAsBufferSize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) : Void;

external (stdcall) NdrInterfacePointerBufferSize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) : Void;

external (stdcall) NdrContextHandleSize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) : Void;

external (stdcall) NdrPointerMemorySize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : PFORMAT_STRING) : CULong;

external (stdcall) NdrSimpleStructMemorySize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : PFORMAT_STRING) : CULong;

external (stdcall) NdrConformantStructMemorySize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : PFORMAT_STRING) : CULong;

external (stdcall) NdrConformantVaryingStructMemorySize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : PFORMAT_STRING) : CULong;

external (stdcall) NdrHardStructMemorySize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : PFORMAT_STRING) : CULong;

external (stdcall) NdrComplexStructMemorySize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : PFORMAT_STRING) : CULong;

external (stdcall) NdrFixedArrayMemorySize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : PFORMAT_STRING) : CULong;

external (stdcall) NdrConformantArrayMemorySize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : PFORMAT_STRING) : CULong;

external (stdcall) NdrConformantVaryingArrayMemorySize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : PFORMAT_STRING) : CULong;

external (stdcall) NdrVaryingArrayMemorySize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : PFORMAT_STRING) : CULong;

external (stdcall) NdrComplexArrayMemorySize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : PFORMAT_STRING) : CULong;

external (stdcall) NdrConformantStringMemorySize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : PFORMAT_STRING) : CULong;

external (stdcall) NdrNonConformantStringMemorySize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : PFORMAT_STRING) : CULong;

external (stdcall) NdrEncapsulatedUnionMemorySize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : PFORMAT_STRING) : CULong;

external (stdcall) NdrNonEncapsulatedUnionMemorySize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : PFORMAT_STRING) : CULong;

external (stdcall) NdrXmitOrRepAsMemorySize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : PFORMAT_STRING) : CULong;

external (stdcall) NdrInterfacePointerMemorySize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : PFORMAT_STRING) : CULong;

external (stdcall) NdrPointerFree(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) : Void;

external (stdcall) NdrSimpleStructFree(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) : Void;

external (stdcall) NdrConformantStructFree(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) : Void;

external (stdcall) NdrConformantVaryingStructFree(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) : Void;

external (stdcall) NdrHardStructFree(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) : Void;

external (stdcall) NdrComplexStructFree(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) : Void;

external (stdcall) NdrFixedArrayFree(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) : Void;

external (stdcall) NdrConformantArrayFree(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) : Void;

external (stdcall) NdrConformantVaryingArrayFree(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) : Void;

external (stdcall) NdrVaryingArrayFree(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) : Void;

external (stdcall) NdrComplexArrayFree(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) : Void;

external (stdcall) NdrEncapsulatedUnionFree(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) : Void;

external (stdcall) NdrNonEncapsulatedUnionFree(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) : Void;

external (stdcall) NdrByteCountPointerFree(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) : Void;

external (stdcall) NdrXmitOrRepAsFree(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) : Void;

external (stdcall) NdrInterfacePointerFree(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) : Void;

external (stdcall) NdrConvert(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : PFORMAT_STRING) : Void;

external (stdcall) NdrClientInitializeNew(
    argument0 : PRPC_MESSAGE,
    argument1 : PMIDL_STUB_MESSAGE,
    argument2 : PMIDL_STUB_DESC,
    argument3 : UInt) : Void;

external (stdcall) NdrServerInitializeNew(
    argument0 : PRPC_MESSAGE,
    argument1 : PMIDL_STUB_MESSAGE,
    argument2 : PMIDL_STUB_DESC) : Pointer[CUChar];

external (stdcall) NdrClientInitialize(
    argument0 : PRPC_MESSAGE,
    argument1 : PMIDL_STUB_MESSAGE,
    argument2 : PMIDL_STUB_DESC,
    argument3 : UInt) : Void;

external (stdcall) NdrServerInitialize(
    argument0 : PRPC_MESSAGE,
    argument1 : PMIDL_STUB_MESSAGE,
    argument2 : PMIDL_STUB_DESC) : Pointer[CUChar];

external (stdcall) NdrServerInitializeUnmarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : PMIDL_STUB_DESC,
    argument2 : PRPC_MESSAGE) : Pointer[CUChar];

external (stdcall) NdrServerInitializeMarshall(
    argument0 : PRPC_MESSAGE,
    argument1 : PMIDL_STUB_MESSAGE) : Void;

external (stdcall) NdrGetBuffer(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : CULong,
    argument2 : RPC_BINDING_HANDLE) : Pointer[CUChar];

external (stdcall) NdrNsGetBuffer(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : CULong,
    argument2 : RPC_BINDING_HANDLE) : Pointer[CUChar];

external (stdcall) NdrSendReceive(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar]) : Pointer[CUChar];

external (stdcall) NdrNsSendReceive(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : Pointer[RPC_BINDING_HANDLE]) : Pointer[CUChar];

external (stdcall) NdrFreeBuffer(
    argument0 : PMIDL_STUB_MESSAGE) : Void;

external NdrClientCall(
    argument0 : PMIDL_STUB_DESC,
    argument1 : PFORMAT_STRING,
    ...) : CLIENT_CALL_RETURN;

external NdrClientCall2(
    argument0 : PMIDL_STUB_DESC,
    argument1 : PFORMAT_STRING,
    ...) : CLIENT_CALL_RETURN;

static STUB_UNMARSHAL = 0;
static STUB_CALL_SERVER = 1;
static STUB_MARSHAL = 2;
static STUB_CALL_SERVER_NO_HRESULT = 3;

static STUB_PHASE = Int;

static PROXY_CALCSIZE = 0;
static PROXY_GETBUFFER = 1;
static PROXY_MARSHAL = 2;
static PROXY_SENDRECEIVE = 3;
static PROXY_UNMARSHAL = 4;

static PROXY_PHASE = Int;

external (stdcall) NdrStubCall(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PRPC_MESSAGE,
    argument3 : Pointer[CULong]) : CLong;

external (stdcall) NdrServerCall(
    argument0 : PRPC_MESSAGE) : Void;

external (stdcall) NdrServerUnmarshall(
    argument0 : Pointer[IRpcChannelBuffer],
    argument1 : PRPC_MESSAGE,
    argument2 : PMIDL_STUB_MESSAGE,
    argument3 : PMIDL_STUB_DESC,
    argument4 : PFORMAT_STRING,
    argument5 : RawPointer) : Int;

external (stdcall) NdrServerMarshall(
    argument0 : Pointer[IRpcStubBuffer],
    argument1 : Pointer[IRpcChannelBuffer],
    argument2 : PMIDL_STUB_MESSAGE,
    argument3 : PFORMAT_STRING) : Void;

external (stdcall) NdrMapCommAndFaultStatus(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CULong],
    argument2 : Pointer[CULong],
    argument3 : CLong) : CLong;

external (stdcall) NdrSH_UPDecision(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[Pointer[CUChar]],
    argument2 : RPC_BUFPTR) : Int;

external (stdcall) NdrSH_TLUPDecision(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[Pointer[CUChar]]) : Int;

external (stdcall) NdrSH_TLUPDecisionBuffer(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[Pointer[CUChar]]) : Int;

external (stdcall) NdrSH_IfAlloc(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[Pointer[CUChar]],
    argument2 : CULong) : Int;

external (stdcall) NdrSH_IfAllocRef(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[Pointer[CUChar]],
    argument2 : CULong) : Int;

external (stdcall) NdrSH_IfAllocSet(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[Pointer[CUChar]],
    argument2 : CULong) : Int;

external (stdcall) NdrSH_IfCopy(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[Pointer[CUChar]],
    argument2 : CULong) : RPC_BUFPTR;

external (stdcall) NdrSH_IfAllocCopy(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[Pointer[CUChar]],
    argument2 : CULong) : RPC_BUFPTR;

external (stdcall) NdrSH_Copy(
    argument0 : Pointer[CUChar],
    argument1 : Pointer[CUChar],
    argument2 : CULong) : CULong;

external (stdcall) NdrSH_IfFree(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar]) : Void;

external (stdcall) NdrSH_StringMarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : CULong,
    argument3 : Int) : RPC_BUFPTR;

external (stdcall) NdrSH_StringUnMarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[Pointer[CUChar]],
    argument2 : Int) : RPC_BUFPTR;

static RPC_SS_THREAD_HANDLE = RawPointer;

external (stdcall) RpcSsAllocate(
    argument0 : UInt) : RawPointer;

external (stdcall) RpcSsDisableAllocate() : Void;

external (stdcall) RpcSsEnableAllocate() : Void;

external (stdcall) RpcSsFree(
    argument0 : RawPointer) : Void;

external (stdcall) RpcSsGetThreadHandle() : RPC_SS_THREAD_HANDLE;

external (stdcall) RpcSsSetClientAllocFree(
    argument0 : StdCallCodePointer[UInt,RawPointer],
    argument1 : StdCallCodePointer[RawPointer,Void]) : Void;

external (stdcall) RpcSsSetThreadHandle(
    argument0 : RPC_SS_THREAD_HANDLE) : Void;

external (stdcall) RpcSsSwapClientAllocFree(
    argument0 : StdCallCodePointer[UInt,RawPointer],
    argument1 : StdCallCodePointer[RawPointer,Void],
    argument2 : Pointer[StdCallCodePointer[UInt,RawPointer]],
    argument3 : Pointer[StdCallCodePointer[RawPointer,Void]]) : Void;

external (stdcall) RpcSmAllocate(
    argument0 : UInt,
    argument1 : Pointer[CLong]) : RawPointer;

external (stdcall) RpcSmClientFree(
    argument0 : RawPointer) : CLong;

external (stdcall) RpcSmDestroyClientContext(
    argument0 : Pointer[RawPointer]) : CLong;

external (stdcall) RpcSmDisableAllocate() : CLong;

external (stdcall) RpcSmEnableAllocate() : CLong;

external (stdcall) RpcSmFree(
    argument0 : RawPointer) : CLong;

external (stdcall) RpcSmGetThreadHandle(
    argument0 : Pointer[CLong]) : RPC_SS_THREAD_HANDLE;

external (stdcall) RpcSmSetClientAllocFree(
    argument0 : StdCallCodePointer[UInt,RawPointer],
    argument1 : StdCallCodePointer[RawPointer,Void]) : CLong;

external (stdcall) RpcSmSetThreadHandle(
    argument0 : RPC_SS_THREAD_HANDLE) : CLong;

external (stdcall) RpcSmSwapClientAllocFree(
    argument0 : StdCallCodePointer[UInt,RawPointer],
    argument1 : StdCallCodePointer[RawPointer,Void],
    argument2 : Pointer[StdCallCodePointer[UInt,RawPointer]],
    argument3 : Pointer[StdCallCodePointer[RawPointer,Void]]) : CLong;

external (stdcall) NdrRpcSsEnableAllocate(
    argument0 : PMIDL_STUB_MESSAGE) : Void;

external (stdcall) NdrRpcSsDisableAllocate(
    argument0 : PMIDL_STUB_MESSAGE) : Void;

external (stdcall) NdrRpcSmSetClientToOsf(
    argument0 : PMIDL_STUB_MESSAGE) : Void;

external (stdcall) NdrRpcSmClientAllocate(
    argument0 : UInt) : RawPointer;

external (stdcall) NdrRpcSmClientFree(
    argument0 : RawPointer) : Void;

external (stdcall) NdrRpcSsDefaultAllocate(
    argument0 : UInt) : RawPointer;

external (stdcall) NdrRpcSsDefaultFree(
    argument0 : RawPointer) : Void;

external (stdcall) NdrFullPointerXlatInit(
    argument0 : CULong,
    argument1 : XLAT_SIDE) : PFULL_PTR_XLAT_TABLES;

external (stdcall) NdrFullPointerXlatFree(
    argument0 : PFULL_PTR_XLAT_TABLES) : Void;

external (stdcall) NdrFullPointerQueryPointer(
    argument0 : PFULL_PTR_XLAT_TABLES,
    argument1 : RawPointer,
    argument2 : CUChar,
    argument3 : Pointer[CULong]) : Int;

external (stdcall) NdrFullPointerQueryRefId(
    argument0 : PFULL_PTR_XLAT_TABLES,
    argument1 : CULong,
    argument2 : CUChar,
    argument3 : Pointer[RawPointer]) : Int;

external (stdcall) NdrFullPointerInsertRefId(
    argument0 : PFULL_PTR_XLAT_TABLES,
    argument1 : CULong,
    argument2 : RawPointer) : Void;

external (stdcall) NdrFullPointerFree(
    argument0 : PFULL_PTR_XLAT_TABLES,
    argument1 : RawPointer) : Int;

external (stdcall) NdrAllocate(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : UInt) : RawPointer;

external (stdcall) NdrClearOutParameters(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : PFORMAT_STRING,
    argument2 : RawPointer) : Void;

external (stdcall) NdrOleAllocate(
    argument0 : UInt) : RawPointer;

external (stdcall) NdrOleFree(
    argument0 : RawPointer) : Void;

external (stdcall) NdrUserMarshalMarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) : Pointer[CUChar];

external (stdcall) NdrUserMarshalUnmarshall(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[Pointer[CUChar]],
    argument2 : PFORMAT_STRING,
    argument3 : CUChar) : Pointer[CUChar];

external (stdcall) NdrUserMarshalBufferSize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) : Void;

external (stdcall) NdrUserMarshalMemorySize(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : PFORMAT_STRING) : CULong;

external (stdcall) NdrUserMarshalFree(
    argument0 : PMIDL_STUB_MESSAGE,
    argument1 : Pointer[CUChar],
    argument2 : PFORMAT_STRING) : Void;

external _argc : Int;

external _argv : Pointer[Pointer[CChar]];

external __p___argc() : Pointer[Int];

external __p___argv() : Pointer[Pointer[Pointer[CChar]]];

external __p___wargv() : Pointer[Pointer[Pointer[UShort]]];

external (dllimport) __mb_cur_max : Int;

external _errno() : Pointer[Int];

external __doserrno() : Pointer[Int];

external __p__environ() : Pointer[Pointer[Pointer[CChar]]];

external __p__wenviron() : Pointer[Pointer[Pointer[UShort]]];

external (dllimport) _sys_nerr : Int;

external (dllimport) _sys_errlist : Array[Pointer[CChar],0];

external __p__osver() : Pointer[UInt];

external __p__winver() : Pointer[UInt];

external __p__winmajor() : Pointer[UInt];

external __p__winminor() : Pointer[UInt];

external (dllimport) _osver : UInt;

external (dllimport) _winver : UInt;

external (dllimport) _winmajor : UInt;

external (dllimport) _winminor : UInt;

external __p__pgmptr() : Pointer[Pointer[CChar]];

external __p__wpgmptr() : Pointer[Pointer[UShort]];

external (dllimport) _fmode : Int;

external atof(
    argument0 : Pointer[CChar]) : Double;

external atoi(
    argument0 : Pointer[CChar]) : Int;

external atol(
    argument0 : Pointer[CChar]) : CLong;

external _wtof(
    argument0 : Pointer[UShort]) : Double;

external _wtoi(
    argument0 : Pointer[UShort]) : Int;

external _wtol(
    argument0 : Pointer[UShort]) : CLong;

external __strtod(
    argument0 : Pointer[CChar],
    argument1 : Pointer[Pointer[CChar]]) : Double;

external strtof(
    argument0 : Pointer[CChar],
    argument1 : Pointer[Pointer[CChar]]) : Float;

external strtold(
    argument0 : Pointer[CChar],
    argument1 : Pointer[Pointer[CChar]]) : UnsupportedCBuiltinType21;

external strtol(
    argument0 : Pointer[CChar],
    argument1 : Pointer[Pointer[CChar]],
    argument2 : Int) : CLong;

external strtoul(
    argument0 : Pointer[CChar],
    argument1 : Pointer[Pointer[CChar]],
    argument2 : Int) : CULong;

external wcstol(
    argument0 : Pointer[UShort],
    argument1 : Pointer[Pointer[UShort]],
    argument2 : Int) : CLong;

external wcstoul(
    argument0 : Pointer[UShort],
    argument1 : Pointer[Pointer[UShort]],
    argument2 : Int) : CULong;

external wcstod(
    argument0 : Pointer[UShort],
    argument1 : Pointer[Pointer[UShort]]) : Double;

external wcstof(
    argument0 : Pointer[UShort],
    argument1 : Pointer[Pointer[UShort]]) : Float;

external wcstold(
    argument0 : Pointer[UShort],
    argument1 : Pointer[Pointer[UShort]]) : UnsupportedCBuiltinType21;

external _wgetenv(
    argument0 : Pointer[UShort]) : Pointer[UShort];

external _wputenv(
    argument0 : Pointer[UShort]) : Int;

external _wsearchenv(
    argument0 : Pointer[UShort],
    argument1 : Pointer[UShort],
    argument2 : Pointer[UShort]) : Void;

external _wsystem(
    argument0 : Pointer[UShort]) : Int;

external _wmakepath(
    argument0 : Pointer[UShort],
    argument1 : Pointer[UShort],
    argument2 : Pointer[UShort],
    argument3 : Pointer[UShort],
    argument4 : Pointer[UShort]) : Void;

external _wsplitpath(
    argument0 : Pointer[UShort],
    argument1 : Pointer[UShort],
    argument2 : Pointer[UShort],
    argument3 : Pointer[UShort],
    argument4 : Pointer[UShort]) : Void;

external _wfullpath(
    argument0 : Pointer[UShort],
    argument1 : Pointer[UShort],
    argument2 : UInt) : Pointer[UShort];

external wcstombs(
    argument0 : Pointer[CChar],
    argument1 : Pointer[UShort],
    argument2 : UInt) : UInt;

external wctomb(
    argument0 : Pointer[CChar],
    argument1 : UShort) : Int;

external mblen(
    argument0 : Pointer[CChar],
    argument1 : UInt) : Int;

external mbstowcs(
    argument0 : Pointer[UShort],
    argument1 : Pointer[CChar],
    argument2 : UInt) : UInt;

external mbtowc(
    argument0 : Pointer[UShort],
    argument1 : Pointer[CChar],
    argument2 : UInt) : Int;

external rand() : Int;

external srand(
    argument0 : UInt) : Void;

external calloc(
    argument0 : UInt,
    argument1 : UInt) : RawPointer;

external malloc(
    argument0 : UInt) : RawPointer;

external realloc(
    argument0 : RawPointer,
    argument1 : UInt) : RawPointer;

external free(
    argument0 : RawPointer) : Void;

external abort() : Void;

external exit(
    argument0 : Int) : Void;

external atexit(
    argument0 : CCodePointer[Void]) : Int;

external system(
    argument0 : Pointer[CChar]) : Int;

external getenv(
    argument0 : Pointer[CChar]) : Pointer[CChar];

external bsearch(
    argument0 : RawPointer,
    argument1 : RawPointer,
    argument2 : UInt,
    argument3 : UInt,
    argument4 : CCodePointer[RawPointer,RawPointer,Int]) : RawPointer;

external qsort(
    argument0 : RawPointer,
    argument1 : UInt,
    argument2 : UInt,
    argument3 : CCodePointer[RawPointer,RawPointer,Int]) : Void;

external abs(
    argument0 : Int) : Int;

external labs(
    argument0 : CLong) : CLong;

record UnnamedRecord29 {
    quot : Int;
    rem : Int;
}

static div_t = UnnamedRecord29;

record UnnamedRecord30 {
    quot : CLong;
    rem : CLong;
}

static ldiv_t = UnnamedRecord30;

external div(
    argument0 : Int,
    argument1 : Int) : div_t;

external ldiv(
    argument0 : CLong,
    argument1 : CLong) : ldiv_t;

external _beep(
    argument0 : UInt,
    argument1 : UInt) : Void;

external _seterrormode(
    argument0 : Int) : Void;

external _sleep(
    argument0 : CULong) : Void;

external _exit(
    argument0 : Int) : Void;

static _onexit_t = CCodePointer[Int];

external _onexit(
    argument0 : _onexit_t) : _onexit_t;

external _putenv(
    argument0 : Pointer[CChar]) : Int;

external _searchenv(
    argument0 : Pointer[CChar],
    argument1 : Pointer[CChar],
    argument2 : Pointer[CChar]) : Void;

external _ecvt(
    argument0 : Double,
    argument1 : Int,
    argument2 : Pointer[Int],
    argument3 : Pointer[Int]) : Pointer[CChar];

external _fcvt(
    argument0 : Double,
    argument1 : Int,
    argument2 : Pointer[Int],
    argument3 : Pointer[Int]) : Pointer[CChar];

external _gcvt(
    argument0 : Double,
    argument1 : Int,
    argument2 : Pointer[CChar]) : Pointer[CChar];

external _makepath(
    argument0 : Pointer[CChar],
    argument1 : Pointer[CChar],
    argument2 : Pointer[CChar],
    argument3 : Pointer[CChar],
    argument4 : Pointer[CChar]) : Void;

external _splitpath(
    argument0 : Pointer[CChar],
    argument1 : Pointer[CChar],
    argument2 : Pointer[CChar],
    argument3 : Pointer[CChar],
    argument4 : Pointer[CChar]) : Void;

external _fullpath(
    argument0 : Pointer[CChar],
    argument1 : Pointer[CChar],
    argument2 : UInt) : Pointer[CChar];

external _itoa(
    argument0 : Int,
    argument1 : Pointer[CChar],
    argument2 : Int) : Pointer[CChar];

external _ltoa(
    argument0 : CLong,
    argument1 : Pointer[CChar],
    argument2 : Int) : Pointer[CChar];

external _ultoa(
    argument0 : CULong,
    argument1 : Pointer[CChar],
    argument2 : Int) : Pointer[CChar];

external _itow(
    argument0 : Int,
    argument1 : Pointer[UShort],
    argument2 : Int) : Pointer[UShort];

external _ltow(
    argument0 : CLong,
    argument1 : Pointer[UShort],
    argument2 : Int) : Pointer[UShort];

external _ultow(
    argument0 : CULong,
    argument1 : Pointer[UShort],
    argument2 : Int) : Pointer[UShort];

external _atoi64(
    argument0 : Pointer[CChar]) : Int64;

external _i64toa(
    argument0 : Int64,
    argument1 : Pointer[CChar],
    argument2 : Int) : Pointer[CChar];

external _ui64toa(
    argument0 : UInt64,
    argument1 : Pointer[CChar],
    argument2 : Int) : Pointer[CChar];

external _wtoi64(
    argument0 : Pointer[UShort]) : Int64;

external _i64tow(
    argument0 : Int64,
    argument1 : Pointer[UShort],
    argument2 : Int) : Pointer[UShort];

external _ui64tow(
    argument0 : UInt64,
    argument1 : Pointer[UShort],
    argument2 : Int) : Pointer[UShort];

external _rotl(
    argument0 : UInt,
    argument1 : Int) : UInt;

external _rotr(
    argument0 : UInt,
    argument1 : Int) : UInt;

external _lrotl(
    argument0 : CULong,
    argument1 : Int) : CULong;

external _lrotr(
    argument0 : CULong,
    argument1 : Int) : CULong;

external _set_error_mode(
    argument0 : Int) : Int;

external putenv(
    argument0 : Pointer[CChar]) : Int;

external searchenv(
    argument0 : Pointer[CChar],
    argument1 : Pointer[CChar],
    argument2 : Pointer[CChar]) : Void;

external itoa(
    argument0 : Int,
    argument1 : Pointer[CChar],
    argument2 : Int) : Pointer[CChar];

external ltoa(
    argument0 : CLong,
    argument1 : Pointer[CChar],
    argument2 : Int) : Pointer[CChar];

external ecvt(
    argument0 : Double,
    argument1 : Int,
    argument2 : Pointer[Int],
    argument3 : Pointer[Int]) : Pointer[CChar];

external fcvt(
    argument0 : Double,
    argument1 : Int,
    argument2 : Pointer[Int],
    argument3 : Pointer[Int]) : Pointer[CChar];

external gcvt(
    argument0 : Double,
    argument1 : Int,
    argument2 : Pointer[CChar]) : Pointer[CChar];

external _Exit(
    argument0 : Int) : Void;

record UnnamedRecord31 {
    quot : Int64;
    rem : Int64;
}

static lldiv_t = UnnamedRecord31;

external lldiv(
    argument0 : Int64,
    argument1 : Int64) : lldiv_t;

external llabs(
    argument0 : Int64) : Int64;

external strtoll(
    argument0 : Pointer[CChar],
    argument1 : Pointer[Pointer[CChar]],
    argument2 : Int) : Int64;

external strtoull(
    argument0 : Pointer[CChar],
    argument1 : Pointer[Pointer[CChar]],
    argument2 : Int) : UInt64;

external atoll(
    argument0 : Pointer[CChar]) : Int64;

external wtoll(
    argument0 : Pointer[UShort]) : Int64;

external lltoa(
    argument0 : Int64,
    argument1 : Pointer[CChar],
    argument2 : Int) : Pointer[CChar];

external ulltoa(
    argument0 : UInt64,
    argument1 : Pointer[CChar],
    argument2 : Int) : Pointer[CChar];

external lltow(
    argument0 : Int64,
    argument1 : Pointer[UShort],
    argument2 : Int) : Pointer[UShort];

external ulltow(
    argument0 : UInt64,
    argument1 : Pointer[UShort],
    argument2 : Int) : Pointer[UShort];

static STGFMT_STORAGE = 0;
static STGFMT_FILE = 3;
static STGFMT_ANY = 4;
static STGFMT_DOCFILE = 5;

static STGFMT = Int;

record tagSTGOPTIONS {
    usVersion : UShort;
    reserved : UShort;
    ulSectorSize : CULong;
    pwcsTemplateFile : Pointer[UShort];
}

static STGOPTIONS = tagSTGOPTIONS;

static REGCLS_SINGLEUSE = 0;
static REGCLS_MULTIPLEUSE = 1;
static REGCLS_MULTI_SEPARATE = 2;

static REGCLS = Int;

static DVASPECT_CONTENT = 1;
static DVASPECT_THUMBNAIL = 2;
static DVASPECT_ICON = 4;
static DVASPECT_DOCPRINT = 8;

static DVASPECT = Int;

static DVASPECT_OPAQUE = 16;
static DVASPECT_TRANSPARENT = 32;

static DVASPECT2 = Int;

static STATFLAG_DEFAULT = 0;
static STATFLAG_NONAME = 1;

static STATFLAG = Int;

static MEMCTX_LOCAL = 0;
static MEMCTX_TASK = 1;
static MEMCTX_SHARED = 2;
static MEMCTX_MACSYSTEM = 3;
static MEMCTX_UNKNOWN = 4294967295;
static MEMCTX_SAME = 4294967294;

static MEMCTX = Int;

static MSHCTX_LOCAL = 0;
static MSHCTX_NOSHAREDMEM = 1;
static MSHCTX_DIFFERENTMACHINE = 2;
static MSHCTX_INPROC = 3;
static MSHCTX_CROSSCTX = 4;

static MSHCTX = Int;

static CLSCTX_INPROC_SERVER = 1;
static CLSCTX_INPROC_HANDLER = 2;
static CLSCTX_LOCAL_SERVER = 4;
static CLSCTX_INPROC_SERVER16 = 8;
static CLSCTX_REMOTE_SERVER = 16;

static CLSCTX = Int;

static MSHLFLAGS_NORMAL = 0;
static MSHLFLAGS_TABLESTRONG = 1;
static MSHLFLAGS_TABLEWEAK = 2;

static MSHLFLAGS = Int;

record _FLAGGED_WORD_BLOB {
    fFlags : CULong;
    clSize : CULong;
    asData : Array[UShort,1];
}

static FLAGGED_WORD_BLOB = _FLAGGED_WORD_BLOB;

static OLECHAR = UShort;

static LPOLESTR = LPWSTR;

static LPCOLESTR = LPCWSTR;

static VARTYPE = UShort;

static VARIANT_BOOL = Short;

static _VARIANT_BOOL = Short;

static BSTR = Pointer[UShort];

static wireBSTR = Pointer[FLAGGED_WORD_BLOB];

static LPBSTR = Pointer[BSTR];

static SCODE = CLong;

static HCONTEXT = RawPointer;

static CY = AUnionType;

static DATE = Double;

record tagBSTRBLOB {
    cbSize : CULong;
    pData : PBYTE;
}

static BSTRBLOB = tagBSTRBLOB;

static LPBSTRBLOB = Pointer[tagBSTRBLOB];

record tagCLIPDATA {
    cbSize : CULong;
    ulClipFmt : CLong;
    pClipData : PBYTE;
}

static CLIPDATA = tagCLIPDATA;

static STGC_DEFAULT = 0;
static STGC_OVERWRITE = 1;
static STGC_ONLYIFCURRENT = 2;
static STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE = 3;

static STGC = Int;

static STGMOVE_MOVE = 0;
static STGMOVE_COPY = 1;
static STGMOVE_SHALLOWCOPY = 2;

static STGMOVE = Int;

static VT_EMPTY = 0;
static VT_NULL = 1;
static VT_I2 = 2;
static VT_I4 = 3;
static VT_R4 = 4;
static VT_R8 = 5;
static VT_CY = 6;
static VT_DATE = 7;
static VT_BSTR = 8;
static VT_DISPATCH = 9;
static VT_ERROR = 10;
static VT_BOOL = 11;
static VT_VARIANT = 12;
static VT_UNKNOWN = 13;
static VT_DECIMAL = 14;
static VT_I1 = 16;
static VT_UI1 = 17;
static VT_UI2 = 18;
static VT_UI4 = 19;
static VT_I8 = 20;
static VT_UI8 = 21;
static VT_INT = 22;
static VT_UINT = 23;
static VT_VOID = 24;
static VT_HRESULT = 25;
static VT_PTR = 26;
static VT_SAFEARRAY = 27;
static VT_CARRAY = 28;
static VT_USERDEFINED = 29;
static VT_LPSTR = 30;
static VT_LPWSTR = 31;
static VT_RECORD = 36;
static VT_INT_PTR = 37;
static VT_UINT_PTR = 38;
static VT_FILETIME = 64;
static VT_BLOB = 65;
static VT_STREAM = 66;
static VT_STORAGE = 67;
static VT_STREAMED_OBJECT = 68;
static VT_STORED_OBJECT = 69;
static VT_BLOB_OBJECT = 70;
static VT_CF = 71;
static VT_CLSID = 72;
static VT_BSTR_BLOB = 4095;
static VT_VECTOR = 4096;
static VT_ARRAY = 8192;
static VT_BYREF = 16384;
static VT_RESERVED = 32768;
static VT_ILLEGAL = 65535;
static VT_ILLEGALMASKED = 4095;
static VT_TYPEMASK = 4095;

record _BYTE_SIZEDARR {
    clSize : CULong;
    pData : Pointer[CUChar];
}

static BYTE_SIZEDARR = _BYTE_SIZEDARR;

record _SHORT_SIZEDARR {
    clSize : CULong;
    pData : Pointer[UShort];
}

static WORD_SIZEDARR = _SHORT_SIZEDARR;

record _LONG_SIZEDARR {
    clSize : CULong;
    pData : Pointer[CULong];
}

static DWORD_SIZEDARR = _LONG_SIZEDARR;

record _HYPER_SIZEDARR {
    clSize : CULong;
    pData : Pointer[Int64];
}

static HYPER_SIZEDARR = _HYPER_SIZEDARR;

static DOUBLE = Double;

record tagDEC {
    wReserved : UShort;
    unnamed_field1 : AUnionType;
    Hi32 : CULong;
    unnamed_field3 : AUnionType;
}

static DECIMAL = tagDEC;

static LPDECIMAL = Pointer[DECIMAL];

static HMETAFILEPICT = RawPointer;

external (stdcall) MIDL_user_allocate(
    argument0 : UInt) : RawPointer;

external (stdcall) MIDL_user_free(
    argument0 : RawPointer) : Void;

external IID_IUnknown : IID;

external IID_IClassFactory : IID;

record IUnknown {
    lpVtbl : Pointer[IUnknownVtbl2];
}

static IUnknown2 = IUnknown;

static IUnknownVtbl = IUnknownVtbl2;

record IUnknownVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[IUnknown],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[IUnknown],CULong];
    Release : StdCallCodePointer[Pointer[IUnknown],CULong];
}

static LPUNKNOWN = Pointer[IUnknown2];

record IClassFactory {
    lpVtbl : Pointer[IClassFactoryVtbl2];
}

static IClassFactory2 = IClassFactory;

static IClassFactoryVtbl = IClassFactoryVtbl2;

record IClassFactoryVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[IClassFactory],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[IClassFactory],CULong];
    Release : StdCallCodePointer[Pointer[IClassFactory],CULong];
    CreateInstance : StdCallCodePointer[Pointer[IClassFactory],Pointer[IUnknown],Pointer[_GUID],Pointer[RawPointer],CLong];
    LockServer : StdCallCodePointer[Pointer[IClassFactory],Int,CLong];
}

static LPCLASSFACTORY = Pointer[IClassFactory2];

external (stdcall) IUnknown_QueryInterface_Proxy(
    argument0 : Pointer[IUnknown2],
    argument1 : Pointer[IID],
    argument2 : Pointer[RawPointer]) : CLong;

external (stdcall) IUnknown_QueryInterface_Stub(
    argument0 : LPRPCSTUBBUFFER,
    argument1 : LPRPCCHANNELBUFFER,
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IUnknown_AddRef_Proxy(
    argument0 : Pointer[IUnknown2]) : CULong;

external (stdcall) IUnknown_AddRef_Stub(
    argument0 : LPRPCSTUBBUFFER,
    argument1 : LPRPCCHANNELBUFFER,
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IUnknown_Release_Proxy(
    argument0 : Pointer[IUnknown2]) : CULong;

external (stdcall) IUnknown_Release_Stub(
    argument0 : LPRPCSTUBBUFFER,
    argument1 : LPRPCCHANNELBUFFER,
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IClassFactory_RemoteCreateInstance_Proxy(
    argument0 : Pointer[IClassFactory2],
    argument1 : Pointer[IID],
    argument2 : Pointer[Pointer[IUnknown2]]) : CLong;

external (stdcall) IClassFactory_RemoteCreateInstance_Stub(
    argument0 : LPRPCSTUBBUFFER,
    argument1 : LPRPCCHANNELBUFFER,
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IClassFactory_RemoteLockServer_Proxy(
    argument0 : Pointer[IClassFactory2],
    argument1 : Int) : CLong;

external (stdcall) IClassFactory_RemoteLockServer_Stub(
    argument0 : LPRPCSTUBBUFFER,
    argument1 : LPRPCCHANNELBUFFER,
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IClassFactory_CreateInstance_Proxy(
    argument0 : Pointer[IClassFactory2],
    argument1 : Pointer[IUnknown2],
    argument2 : Pointer[IID],
    argument3 : Pointer[RawPointer]) : CLong;

external (stdcall) IClassFactory_CreateInstance_Stub(
    argument0 : Pointer[IClassFactory2],
    argument1 : Pointer[IID],
    argument2 : Pointer[Pointer[IUnknown2]]) : CLong;

external (stdcall) IClassFactory_LockServer_Proxy(
    argument0 : Pointer[IClassFactory2],
    argument1 : Int) : CLong;

external (stdcall) IClassFactory_LockServer_Stub(
    argument0 : Pointer[IClassFactory2],
    argument1 : Int) : CLong;

record tagSTATSTG {
    pwcsName : LPOLESTR;
    type : CULong;
    cbSize : ULARGE_INTEGER;
    mtime : FILETIME;
    ctime : FILETIME;
    atime : FILETIME;
    grfMode : CULong;
    grfLocksSupported : CULong;
    clsid : CLSID;
    grfStateBits : CULong;
    reserved : CULong;
}

static STATSTG = tagSTATSTG;

static STGTY_STORAGE = 1;
static STGTY_STREAM = 2;
static STGTY_LOCKBYTES = 3;
static STGTY_PROPERTY = 4;

static STGTY = Int;

static STREAM_SEEK_SET = 0;
static STREAM_SEEK_CUR = 1;
static STREAM_SEEK_END = 2;

static STREAM_SEEK = Int;

record tagINTERFACEINFO {
    pUnk : LPUNKNOWN;
    iid : IID;
    wMethod : UShort;
}

static INTERFACEINFO = tagINTERFACEINFO;

static LPINTERFACEINFO = Pointer[tagINTERFACEINFO];

static CALLTYPE_TOPLEVEL = 1;
static CALLTYPE_NESTED = 2;
static CALLTYPE_ASYNC = 3;
static CALLTYPE_TOPLEVEL_CALLPENDING = 4;
static CALLTYPE_ASYNC_CALLPENDING = 5;

static CALLTYPE = Int;

static PENDINGTYPE_TOPLEVEL = 1;
static PENDINGTYPE_NESTED = 2;

static PENDINGTYPE = Int;

static PENDINGMSG_CANCELCALL = 0;
static PENDINGMSG_WAITNOPROCESS = 1;
static PENDINGMSG_WAITDEFPROCESS = 2;

static PENDINGMSG = Int;

static SNB = Pointer[Pointer[UShort]];

static DATADIR_GET = 1;
static DATADIR_SET = 2;

static DATADIR = Int;

static CLIPFORMAT = UShort;

static LPCLIPFORMAT = Pointer[UShort];

record tagDVTARGETDEVICE {
    tdSize : CULong;
    tdDriverNameOffset : UShort;
    tdDeviceNameOffset : UShort;
    tdPortNameOffset : UShort;
    tdExtDevmodeOffset : UShort;
    tdData : Array[CUChar,1];
}

static DVTARGETDEVICE = tagDVTARGETDEVICE;

record tagFORMATETC {
    cfFormat : UShort;
    ptd : Pointer[DVTARGETDEVICE];
    dwAspect : CULong;
    lindex : CLong;
    tymed : CULong;
}

static FORMATETC = tagFORMATETC;

static LPFORMATETC = Pointer[tagFORMATETC];

record tagRemSTGMEDIUM {
    tymed : CULong;
    dwHandleType : CULong;
    pData : CULong;
    pUnkForRelease : CULong;
    cbData : CULong;
    data : Array[CUChar,1];
}

static RemSTGMEDIUM = tagRemSTGMEDIUM;

record tagHLITEM {
    uHLID : CULong;
    pwzFriendlyName : LPWSTR;
}

static HLITEM = tagHLITEM;

record tagSTATDATA {
    formatetc : FORMATETC;
    grfAdvf : CULong;
    pAdvSink : Pointer[IAdviseSink];
    dwConnection : CULong;
}

static STATDATA = tagSTATDATA;

record tagSTATPROPSETSTG {
    fmtid : FMTID;
    clsid : CLSID;
    grfFlags : CULong;
    mtime : FILETIME;
    ctime : FILETIME;
    atime : FILETIME;
}

static STATPROPSETSTG = tagSTATPROPSETSTG;

static EXTCONN_STRONG = 1;
static EXTCONN_WEAK = 2;
static EXTCONN_CALLABLE = 4;

static EXTCONN = Int;

record tagMULTI_QI {
    pIID : Pointer[IID];
    pItf : Pointer[IUnknown2];
    hr : CLong;
}

static MULTI_QI = tagMULTI_QI;

record _AUTH_IDENTITY {
    User : Pointer[UShort];
    UserLength : CULong;
    Domain : Pointer[UShort];
    DomainLength : CULong;
    Password : Pointer[UShort];
    PasswordLength : CULong;
    Flags : CULong;
}

static AUTH_IDENTITY = _AUTH_IDENTITY;

record _COAUTHINFO {
    dwAuthnSvc : CULong;
    dwAuthzSvc : CULong;
    pwszServerPrincName : LPWSTR;
    dwAuthnLevel : CULong;
    dwImpersonationLevel : CULong;
    pAuthIdentityData : Pointer[AUTH_IDENTITY];
    dwCapabilities : CULong;
}

static COAUTHINFO = _COAUTHINFO;

record _COSERVERINFO {
    dwReserved1 : CULong;
    pwszName : LPWSTR;
    pAuthInfo : Pointer[COAUTHINFO];
    dwReserved2 : CULong;
}

static COSERVERINFO = _COSERVERINFO;

record tagBIND_OPTS {
    cbStruct : CULong;
    grfFlags : CULong;
    grfMode : CULong;
    dwTickCountDeadline : CULong;
}

static BIND_OPTS = tagBIND_OPTS;

static LPBIND_OPTS = Pointer[tagBIND_OPTS];

record tagBIND_OPTS2 {
    cbStruct : CULong;
    grfFlags : CULong;
    grfMode : CULong;
    dwTickCountDeadline : CULong;
    dwTrackFlags : CULong;
    dwClassContext : CULong;
    locale : CULong;
    pServerInfo : Pointer[COSERVERINFO];
}

static BIND_OPTS2 = tagBIND_OPTS2;

static LPBIND_OPTS2 = Pointer[tagBIND_OPTS2];

static BIND_MAYBOTHERUSER = 1;
static BIND_JUSTTESTEXISTENCE = 2;

static BIND_FLAGS = Int;

record tagSTGMEDIUM {
    tymed : CULong;
    unnamed_field1 : AUnionType;
    pUnkForRelease : LPUNKNOWN;
}

static STGMEDIUM = tagSTGMEDIUM;

static LPSTGMEDIUM = Pointer[tagSTGMEDIUM];

static LOCK_WRITE = 1;
static LOCK_EXCLUSIVE = 2;
static LOCK_ONLYONCE = 4;

static LOCKTYPE = Int;

static RPCOLEDATAREP = CULong;

record tagRPCOLEMESSAGE {
    reserved1 : PVOID;
    dataRepresentation : CULong;
    Buffer : PVOID;
    cbBuffer : CULong;
    iMethod : CULong;
    reserved2 : Array[PVOID,5];
    rpcFlags : CULong;
}

static RPCOLEMESSAGE = tagRPCOLEMESSAGE;

static PRPCOLEMESSAGE = Pointer[tagRPCOLEMESSAGE];

static MKSYS_NONE = 0;
static MKSYS_GENERICCOMPOSITE = 1;
static MKSYS_FILEMONIKER = 2;
static MKSYS_ANTIMONIKER = 3;
static MKSYS_ITEMMONIKER = 4;
static MKSYS_POINTERMONIKER = 5;

static MKSYS = Int;

static MKRREDUCE_ALL = 0;
static MKRREDUCE_ONE = 196608;
static MKRREDUCE_TOUSER = 131072;
static MKRREDUCE_THROUGHUSER = 65536;

static MKRREDUCE = Int;

record tagRemSNB {
    ulCntStr : CULong;
    ulCntChar : CULong;
    rgString : Array[UShort,1];
}

static RemSNB = tagRemSNB;

static ADVF_NODATA = 1;
static ADVF_PRIMEFIRST = 2;
static ADVF_ONLYONCE = 4;
static ADVF_DATAONSTOP = 64;
static ADVFCACHE_NOHANDLER = 8;
static ADVFCACHE_FORCEBUILTIN = 16;
static ADVFCACHE_ONSAVE = 32;

static ADVF = Int;

static TYMED_HGLOBAL = 1;
static TYMED_FILE = 2;
static TYMED_ISTREAM = 4;
static TYMED_ISTORAGE = 8;
static TYMED_GDI = 16;
static TYMED_MFPICT = 32;
static TYMED_ENHMF = 64;
static TYMED_NULL = 0;

static TYMED = Int;

static SERVERCALL_ISHANDLED = 0;
static SERVERCALL_REJECTED = 1;
static SERVERCALL_RETRYLATER = 2;

static SERVERCALL = Int;

record tagCAUB {
    cElems : CULong;
    pElems : Pointer[CUChar];
}

static CAUB = tagCAUB;

record tagCAI {
    cElems : CULong;
    pElems : Pointer[Short];
}

static CAI = tagCAI;

record tagCAUI {
    cElems : CULong;
    pElems : Pointer[UShort];
}

static CAUI = tagCAUI;

record tagCAL {
    cElems : CULong;
    pElems : Pointer[CLong];
}

static CAL = tagCAL;

record tagCAUL {
    cElems : CULong;
    pElems : Pointer[CULong];
}

static CAUL = tagCAUL;

record tagCAFLT {
    cElems : CULong;
    pElems : Pointer[Float];
}

static CAFLT = tagCAFLT;

record tagCADBL {
    cElems : CULong;
    pElems : Pointer[Double];
}

static CADBL = tagCADBL;

record tagCACY {
    cElems : CULong;
    pElems : Pointer[CY];
}

static CACY = tagCACY;

record tagCADATE {
    cElems : CULong;
    pElems : Pointer[Double];
}

static CADATE = tagCADATE;

record tagCABSTR {
    cElems : CULong;
    pElems : Pointer[BSTR];
}

static CABSTR = tagCABSTR;

record tagCABSTRBLOB {
    cElems : CULong;
    pElems : Pointer[BSTRBLOB];
}

static CABSTRBLOB = tagCABSTRBLOB;

record tagCABOOL {
    cElems : CULong;
    pElems : Pointer[Short];
}

static CABOOL = tagCABOOL;

record tagCASCODE {
    cElems : CULong;
    pElems : Pointer[CLong];
}

static CASCODE = tagCASCODE;

record tagCAH {
    cElems : CULong;
    pElems : Pointer[LARGE_INTEGER];
}

static CAH = tagCAH;

record tagCAUH {
    cElems : CULong;
    pElems : Pointer[ULARGE_INTEGER];
}

static CAUH = tagCAUH;

record tagCALPSTR {
    cElems : CULong;
    pElems : Pointer[LPSTR];
}

static CALPSTR = tagCALPSTR;

record tagCALPWSTR {
    cElems : CULong;
    pElems : Pointer[LPWSTR];
}

static CALPWSTR = tagCALPWSTR;

record tagCAFILETIME {
    cElems : CULong;
    pElems : Pointer[FILETIME];
}

static CAFILETIME = tagCAFILETIME;

record tagCACLIPDATA {
    cElems : CULong;
    pElems : Pointer[CLIPDATA];
}

static CACLIPDATA = tagCACLIPDATA;

record tagCACLSID {
    cElems : CULong;
    pElems : Pointer[CLSID];
}

static CACLSID = tagCACLSID;

static LPPROPVARIANT = Pointer[tagPROPVARIANT];

record tagCAPROPVARIANT {
    cElems : CULong;
    pElems : LPPROPVARIANT;
}

static CAPROPVARIANT = tagCAPROPVARIANT;

record tagPROPVARIANT {
    vt : UShort;
    wReserved1 : UShort;
    wReserved2 : UShort;
    wReserved3 : UShort;
    unnamed_field4 : AUnionType;
}

static PROPVARIANT = tagPROPVARIANT;

record tagPROPSPEC {
    ulKind : CULong;
    unnamed_field1 : AUnionType;
}

static PROPSPEC = tagPROPSPEC;

record tagSTATPROPSTG {
    lpwstrName : LPOLESTR;
    propid : CULong;
    vt : UShort;
}

static STATPROPSTG = tagSTATPROPSTG;

static PROPSETFLAG_DEFAULT = 0;
static PROPSETFLAG_NONSIMPLE = 1;
static PROPSETFLAG_ANSI = 2;
static PROPSETFLAG_UNBUFFERED = 4;

static PROPSETFLAG = Int;

record tagSTORAGELAYOUT {
    LayoutType : CULong;
    pwcsElementName : Pointer[UShort];
    cOffset : LARGE_INTEGER;
    cBytes : LARGE_INTEGER;
}

static STORAGELAYOUT = tagSTORAGELAYOUT;

record tagSOLE_AUTHENTICATION_SERVICE {
    dwAuthnSvc : CULong;
    dwAuthzSvc : CULong;
    pPrincipalName : Pointer[UShort];
    hr : CLong;
}

static SOLE_AUTHENTICATION_SERVICE = tagSOLE_AUTHENTICATION_SERVICE;

static EOAC_NONE = 0;
static EOAC_MUTUAL_AUTH = 1;
static EOAC_STATIC_CLOAKING = 32;
static EOAC_DYNAMIC_CLOAKING = 64;
static EOAC_ANY_AUTHORITY = 128;
static EOAC_MAKE_FULLSIC = 256;
static EOAC_DEFAULT = 2048;
static EOAC_SECURE_REFS = 2;
static EOAC_ACCESS_CONTROL = 4;
static EOAC_APPID = 8;
static EOAC_DYNAMIC = 16;
static EOAC_REQUIRE_FULLSIC = 512;
static EOAC_AUTO_IMPERSONATE = 1024;
static EOAC_NO_CUSTOM_MARSHAL = 8192;
static EOAC_DISABLE_AAA = 4096;

static EOLE_AUTHENTICATION_CAPABILITIES = Int;

record tagSOLE_AUTHENTICATION_INFO {
    dwAuthnSvc : CULong;
    dwAuthzSvc : CULong;
    pAuthInfo : RawPointer;
}

static SOLE_AUTHENTICATION_INFO = tagSOLE_AUTHENTICATION_INFO;

record tagSOLE_AUTHENTICATION_LIST {
    cAuthInfo : CULong;
    aAuthInfo : Pointer[SOLE_AUTHENTICATION_INFO];
}

static SOLE_AUTHENTICATION_LIST = tagSOLE_AUTHENTICATION_LIST;

external FMTID_SummaryInformation : FMTID;

external FMTID_DocSummaryInformation : FMTID;

external FMTID_UserDefinedProperties : FMTID;

record IEnumFORMATETC {
    lpVtbl : Pointer[IEnumFORMATETCVtbl2];
}

static IEnumFORMATETC2 = IEnumFORMATETC;

static IEnumFORMATETCVtbl = IEnumFORMATETCVtbl2;

record IEnumFORMATETCVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[IEnumFORMATETC],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[IEnumFORMATETC],CULong];
    Release : StdCallCodePointer[Pointer[IEnumFORMATETC],CULong];
    Next : StdCallCodePointer[Pointer[IEnumFORMATETC],CULong,Pointer[tagFORMATETC],Pointer[CULong],CLong];
    Skip : StdCallCodePointer[Pointer[IEnumFORMATETC],CULong,CLong];
    Reset : StdCallCodePointer[Pointer[IEnumFORMATETC],CLong];
    Clone : StdCallCodePointer[Pointer[IEnumFORMATETC],Pointer[Pointer[IEnumFORMATETC]],CLong];
}

record IEnumHLITEM {
    lpVtbl : Pointer[IEnumHLITEMVtbl2];
}

static IEnumHLITEM2 = IEnumHLITEM;

static IEnumHLITEMVtbl = IEnumHLITEMVtbl2;

record IEnumHLITEMVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[IEnumHLITEM],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[IEnumHLITEM],CULong];
    Release : StdCallCodePointer[Pointer[IEnumHLITEM],CULong];
    Next : StdCallCodePointer[Pointer[IEnumHLITEM],CULong,Pointer[tagHLITEM],Pointer[CULong],CLong];
    Skip : StdCallCodePointer[Pointer[IEnumHLITEM],CULong,CLong];
    Reset : StdCallCodePointer[Pointer[IEnumHLITEM],CLong];
    Clone : StdCallCodePointer[Pointer[IEnumHLITEM],Pointer[Pointer[IEnumHLITEM]],CLong];
}

record IEnumSTATDATA {
    lpVtbl : Pointer[IEnumSTATDATAVtbl2];
}

static IEnumSTATDATA2 = IEnumSTATDATA;

static IEnumSTATDATAVtbl = IEnumSTATDATAVtbl2;

record IEnumSTATDATAVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[IEnumSTATDATA],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[IEnumSTATDATA],CULong];
    Release : StdCallCodePointer[Pointer[IEnumSTATDATA],CULong];
    Next : StdCallCodePointer[Pointer[IEnumSTATDATA],CULong,Pointer[tagSTATDATA],Pointer[CULong],CLong];
    Skip : StdCallCodePointer[Pointer[IEnumSTATDATA],CULong,CLong];
    Reset : StdCallCodePointer[Pointer[IEnumSTATDATA],CLong];
    Clone : StdCallCodePointer[Pointer[IEnumSTATDATA],Pointer[Pointer[IEnumSTATDATA]],CLong];
}

record IEnumSTATPROPSETSTG {
    lpVtbl : Pointer[IEnumSTATPROPSETSTGVtbl2];
}

static IEnumSTATPROPSETSTG2 = IEnumSTATPROPSETSTG;

static IEnumSTATPROPSETSTGVtbl = IEnumSTATPROPSETSTGVtbl2;

record IEnumSTATPROPSETSTGVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[IEnumSTATPROPSETSTG],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[IEnumSTATPROPSETSTG],CULong];
    Release : StdCallCodePointer[Pointer[IEnumSTATPROPSETSTG],CULong];
    Next : StdCallCodePointer[Pointer[IEnumSTATPROPSETSTG],CULong,Pointer[tagSTATPROPSETSTG],Pointer[CULong],CLong];
    Skip : StdCallCodePointer[Pointer[IEnumSTATPROPSETSTG],CULong,CLong];
    Reset : StdCallCodePointer[Pointer[IEnumSTATPROPSETSTG],CLong];
    Clone : StdCallCodePointer[Pointer[IEnumSTATPROPSETSTG],Pointer[Pointer[IEnumSTATPROPSETSTG]],CLong];
}

record IEnumSTATPROPSTG {
    lpVtbl : Pointer[IEnumSTATPROPSTGVtbl2];
}

static IEnumSTATPROPSTG2 = IEnumSTATPROPSTG;

static IEnumSTATPROPSTGVtbl = IEnumSTATPROPSTGVtbl2;

record IEnumSTATPROPSTGVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[IEnumSTATPROPSTG],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[IEnumSTATPROPSTG],CULong];
    Release : StdCallCodePointer[Pointer[IEnumSTATPROPSTG],CULong];
    Next : StdCallCodePointer[Pointer[IEnumSTATPROPSTG],CULong,Pointer[tagSTATPROPSTG],Pointer[CULong],CLong];
    Skip : StdCallCodePointer[Pointer[IEnumSTATPROPSTG],CULong,CLong];
    Reset : StdCallCodePointer[Pointer[IEnumSTATPROPSTG],CLong];
    Clone : StdCallCodePointer[Pointer[IEnumSTATPROPSTG],Pointer[Pointer[IEnumSTATPROPSTG]],CLong];
}

record IEnumSTATSTG {
    lpVtbl : Pointer[IEnumSTATSTGVtbl2];
}

static IEnumSTATSTG2 = IEnumSTATSTG;

static IEnumSTATSTGVtbl = IEnumSTATSTGVtbl2;

record IEnumSTATSTGVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[IEnumSTATSTG],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[IEnumSTATSTG],CULong];
    Release : StdCallCodePointer[Pointer[IEnumSTATSTG],CULong];
    Next : StdCallCodePointer[Pointer[IEnumSTATSTG],CULong,Pointer[tagSTATSTG],Pointer[CULong],CLong];
    Skip : StdCallCodePointer[Pointer[IEnumSTATSTG],CULong,CLong];
    Reset : StdCallCodePointer[Pointer[IEnumSTATSTG],CLong];
    Clone : StdCallCodePointer[Pointer[IEnumSTATSTG],Pointer[Pointer[IEnumSTATSTG]],CLong];
}

record IEnumString {
    lpVtbl : Pointer[IEnumStringVtbl2];
}

static IEnumString2 = IEnumString;

static IEnumStringVtbl = IEnumStringVtbl2;

record IEnumStringVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[IEnumString],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[IEnumString],CULong];
    Release : StdCallCodePointer[Pointer[IEnumString],CULong];
    Next : StdCallCodePointer[Pointer[IEnumString],CULong,Pointer[Pointer[UShort]],Pointer[CULong],CLong];
    Skip : StdCallCodePointer[Pointer[IEnumString],CULong,CLong];
    Reset : StdCallCodePointer[Pointer[IEnumString],CLong];
    Clone : StdCallCodePointer[Pointer[IEnumString],Pointer[Pointer[IEnumString]],CLong];
}

record IEnumMoniker {
    lpVtbl : Pointer[IEnumMonikerVtbl2];
}

static IEnumMoniker2 = IEnumMoniker;

static IEnumMonikerVtbl = IEnumMonikerVtbl2;

record IEnumMonikerVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[IEnumMoniker],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[IEnumMoniker],CULong];
    Release : StdCallCodePointer[Pointer[IEnumMoniker],CULong];
    Next : StdCallCodePointer[Pointer[IEnumMoniker],CULong,Pointer[Pointer[IMoniker]],Pointer[CULong],CLong];
    Skip : StdCallCodePointer[Pointer[IEnumMoniker],CULong,CLong];
    Reset : StdCallCodePointer[Pointer[IEnumMoniker],CLong];
    Clone : StdCallCodePointer[Pointer[IEnumMoniker],Pointer[Pointer[IEnumMoniker]],CLong];
}

record IEnumUnknown {
    lpVtbl : Pointer[IEnumUnknownVtbl2];
}

static IEnumUnknown2 = IEnumUnknown;

static IEnumUnknownVtbl = IEnumUnknownVtbl2;

record IEnumUnknownVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[IEnumUnknown],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[IEnumUnknown],CULong];
    Release : StdCallCodePointer[Pointer[IEnumUnknown],CULong];
    Next : StdCallCodePointer[Pointer[IEnumUnknown],CULong,Pointer[Pointer[IUnknown]],Pointer[CULong],CLong];
    Skip : StdCallCodePointer[Pointer[IEnumUnknown],CULong,CLong];
    Reset : StdCallCodePointer[Pointer[IEnumUnknown],CLong];
    Clone : StdCallCodePointer[Pointer[IEnumUnknown],Pointer[Pointer[IEnumUnknown]],CLong];
}

external IID_ISequentialStream : IID;

record ISequentialStream {
    lpVtbl : Pointer[ISequentialStreamVtbl2];
}

static ISequentialStream2 = ISequentialStream;

static ISequentialStreamVtbl = ISequentialStreamVtbl2;

record ISequentialStreamVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[ISequentialStream],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[ISequentialStream],CULong];
    Release : StdCallCodePointer[Pointer[ISequentialStream],CULong];
    Read : StdCallCodePointer[Pointer[ISequentialStream],RawPointer,CULong,Pointer[CULong],CLong];
    Write : StdCallCodePointer[Pointer[ISequentialStream],RawPointer,CULong,Pointer[CULong],CLong];
}

external IID_IStream : IID;

record IStream {
    lpVtbl : Pointer[IStreamVtbl2];
}

static IStream2 = IStream;

static IStreamVtbl = IStreamVtbl2;

record IStreamVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[IStream],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[IStream],CULong];
    Release : StdCallCodePointer[Pointer[IStream],CULong];
    Read : StdCallCodePointer[Pointer[IStream],RawPointer,CULong,Pointer[CULong],CLong];
    Write : StdCallCodePointer[Pointer[IStream],RawPointer,CULong,Pointer[CULong],CLong];
    Seek : StdCallCodePointer[Pointer[IStream],AUnionType,CULong,OpaquePointer,CLong];
    SetSize : StdCallCodePointer[Pointer[IStream],AUnionType,CLong];
    CopyTo : StdCallCodePointer[Pointer[IStream],Pointer[IStream],AUnionType,OpaquePointer,OpaquePointer,CLong];
    Commit : StdCallCodePointer[Pointer[IStream],CULong,CLong];
    Revert : StdCallCodePointer[Pointer[IStream],CLong];
    LockRegion : StdCallCodePointer[Pointer[IStream],AUnionType,AUnionType,CULong,CLong];
    UnlockRegion : StdCallCodePointer[Pointer[IStream],AUnionType,AUnionType,CULong,CLong];
    Stat : StdCallCodePointer[Pointer[IStream],Pointer[tagSTATSTG],CULong,CLong];
    Clone : StdCallCodePointer[Pointer[IStream],Pointer[Pointer[IStream]],CLong];
}

external IID_IMarshal : IID;

record IMarshal {
    lpVtbl : Pointer[IMarshalVtbl2];
}

static IMarshal2 = IMarshal;

static IMarshalVtbl = IMarshalVtbl2;

record IMarshalVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[IMarshal],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[IMarshal],CULong];
    Release : StdCallCodePointer[Pointer[IMarshal],CULong];
    GetUnmarshalClass : StdCallCodePointer[Pointer[IMarshal],Pointer[_GUID],RawPointer,CULong,RawPointer,CULong,Pointer[_GUID],CLong];
    GetMarshalSizeMax : StdCallCodePointer[Pointer[IMarshal],Pointer[_GUID],RawPointer,CULong,RawPointer,Pointer[CULong],Pointer[CULong],CLong];
    MarshalInterface : StdCallCodePointer[Pointer[IMarshal],Pointer[IStream],Pointer[_GUID],RawPointer,CULong,RawPointer,CULong,CLong];
    UnmarshalInterface : StdCallCodePointer[Pointer[IMarshal],Pointer[IStream],Pointer[_GUID],Pointer[RawPointer],CLong];
    ReleaseMarshalData : StdCallCodePointer[Pointer[IMarshal],Pointer[IStream],CLong];
    DisconnectObject : StdCallCodePointer[Pointer[IMarshal],CULong,CLong];
}

external IID_IStdMarshalInfo : IID;

record IStdMarshalInfo {
    lpVtbl : Pointer[IStdMarshalInfoVtbl2];
}

static IStdMarshalInfo2 = IStdMarshalInfo;

static IStdMarshalInfoVtbl = IStdMarshalInfoVtbl2;

record IStdMarshalInfoVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[IStdMarshalInfo],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[IStdMarshalInfo],CULong];
    Release : StdCallCodePointer[Pointer[IStdMarshalInfo],CULong];
    GetClassForHandler : StdCallCodePointer[Pointer[IStdMarshalInfo],CULong,RawPointer,Pointer[_GUID],CLong];
}

external IID_IMalloc : IID;

record IMalloc {
    lpVtbl : Pointer[IMallocVtbl2];
}

static IMalloc2 = IMalloc;

static IMallocVtbl = IMallocVtbl2;

record IMallocVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[IMalloc],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[IMalloc],CULong];
    Release : StdCallCodePointer[Pointer[IMalloc],CULong];
    Alloc : StdCallCodePointer[Pointer[IMalloc],CULong,RawPointer];
    Realloc : StdCallCodePointer[Pointer[IMalloc],RawPointer,CULong,RawPointer];
    Free : StdCallCodePointer[Pointer[IMalloc],RawPointer,Void];
    GetSize : StdCallCodePointer[Pointer[IMalloc],RawPointer,CULong];
    DidAlloc : StdCallCodePointer[Pointer[IMalloc],RawPointer,Int];
    HeapMinimize : StdCallCodePointer[Pointer[IMalloc],Void];
}

external IID_IMallocSpy : IID;

record IMallocSpy {
    lpVtbl : Pointer[IMallocSpyVtbl2];
}

static IMallocSpy2 = IMallocSpy;

static IMallocSpyVtbl = IMallocSpyVtbl2;

record IMallocSpyVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[IMallocSpy],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[IMallocSpy],CULong];
    Release : StdCallCodePointer[Pointer[IMallocSpy],CULong];
    PreAlloc : StdCallCodePointer[Pointer[IMallocSpy],CULong,CULong];
    PostAlloc : StdCallCodePointer[Pointer[IMallocSpy],RawPointer,RawPointer];
    PreFree : StdCallCodePointer[Pointer[IMallocSpy],RawPointer,Int,RawPointer];
    PostFree : StdCallCodePointer[Pointer[IMallocSpy],Int,Void];
    PreRealloc : StdCallCodePointer[Pointer[IMallocSpy],RawPointer,CULong,Pointer[RawPointer],Int,CULong];
    PostRealloc : StdCallCodePointer[Pointer[IMallocSpy],RawPointer,Int,RawPointer];
    PreGetSize : StdCallCodePointer[Pointer[IMallocSpy],RawPointer,Int,RawPointer];
    PostGetSize : StdCallCodePointer[Pointer[IMallocSpy],CULong,Int,CULong];
    PreDidAlloc : StdCallCodePointer[Pointer[IMallocSpy],RawPointer,Int,RawPointer];
    PostDidAlloc : StdCallCodePointer[Pointer[IMallocSpy],RawPointer,Int,Int,Int];
    PreHeapMinimize : StdCallCodePointer[Pointer[IMallocSpy],Void];
    PostHeapMinimize : StdCallCodePointer[Pointer[IMallocSpy],Void];
}

external IID_IMessageFilter : IID;

record IMessageFilter {
    lpVtbl : Pointer[IMessageFilterVtbl2];
}

static IMessageFilter2 = IMessageFilter;

static IMessageFilterVtbl = IMessageFilterVtbl2;

record IMessageFilterVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[IMessageFilter],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[IMessageFilter],CULong];
    Release : StdCallCodePointer[Pointer[IMessageFilter],CULong];
    HandleInComingCall : StdCallCodePointer[Pointer[IMessageFilter],CULong,Pointer[HTASK__],CULong,Pointer[tagINTERFACEINFO],CULong];
    RetryRejectedCall : StdCallCodePointer[Pointer[IMessageFilter],Pointer[HTASK__],CULong,CULong,CULong];
    MessagePending : StdCallCodePointer[Pointer[IMessageFilter],Pointer[HTASK__],CULong,CULong,CULong];
}

external IID_IPersist : IID;

record IPersist {
    lpVtbl : Pointer[IPersistVtbl2];
}

static IPersist2 = IPersist;

static IPersistVtbl = IPersistVtbl2;

record IPersistVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[IPersist],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[IPersist],CULong];
    Release : StdCallCodePointer[Pointer[IPersist],CULong];
    GetClassID : StdCallCodePointer[Pointer[IPersist],Pointer[_GUID],CLong];
}

external IID_IPersistStream : IID;

record IPersistStream {
    lpVtbl : Pointer[IPersistStreamVtbl2];
}

static IPersistStream2 = IPersistStream;

static IPersistStreamVtbl = IPersistStreamVtbl2;

record IPersistStreamVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[IPersistStream],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[IPersistStream],CULong];
    Release : StdCallCodePointer[Pointer[IPersistStream],CULong];
    GetClassID : StdCallCodePointer[Pointer[IPersistStream],Pointer[_GUID],CLong];
    IsDirty : StdCallCodePointer[Pointer[IPersistStream],CLong];
    Load : StdCallCodePointer[Pointer[IPersistStream],Pointer[IStream],CLong];
    Save : StdCallCodePointer[Pointer[IPersistStream],Pointer[IStream],Int,CLong];
    GetSizeMax : StdCallCodePointer[Pointer[IPersistStream],OpaquePointer,CLong];
}

external IID_IRunningObjectTable : IID;

record IRunningObjectTable {
    lpVtbl : Pointer[IRunningObjectTableVtbl2];
}

static IRunningObjectTable2 = IRunningObjectTable;

static IRunningObjectTableVtbl = IRunningObjectTableVtbl2;

record IRunningObjectTableVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[IRunningObjectTable],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[IRunningObjectTable],CULong];
    Release : StdCallCodePointer[Pointer[IRunningObjectTable],CULong];
    Register : StdCallCodePointer[Pointer[IRunningObjectTable],CULong,Pointer[IUnknown],Pointer[IMoniker],Pointer[CULong],CLong];
    Revoke : StdCallCodePointer[Pointer[IRunningObjectTable],CULong,CLong];
    IsRunning : StdCallCodePointer[Pointer[IRunningObjectTable],Pointer[IMoniker],CLong];
    GetObjectA : StdCallCodePointer[Pointer[IRunningObjectTable],Pointer[IMoniker],Pointer[Pointer[IUnknown]],CLong];
    NoteChangeTime : StdCallCodePointer[Pointer[IRunningObjectTable],CULong,Pointer[_FILETIME],CLong];
    GetTimeOfLastChange : StdCallCodePointer[Pointer[IRunningObjectTable],Pointer[IMoniker],Pointer[_FILETIME],CLong];
    EnumRunning : StdCallCodePointer[Pointer[IRunningObjectTable],Pointer[Pointer[IEnumMoniker]],CLong];
}

external IID_IBindCtx : IID;

record IBindCtx {
    lpVtbl : Pointer[IBindCtxVtbl2];
}

static IBindCtx2 = IBindCtx;

static IBindCtxVtbl = IBindCtxVtbl2;

record IBindCtxVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[IBindCtx],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[IBindCtx],CULong];
    Release : StdCallCodePointer[Pointer[IBindCtx],CULong];
    RegisterObjectBound : StdCallCodePointer[Pointer[IBindCtx],Pointer[IUnknown],CLong];
    RevokeObjectBound : StdCallCodePointer[Pointer[IBindCtx],Pointer[IUnknown],CLong];
    ReleaseBoundObjects : StdCallCodePointer[Pointer[IBindCtx],CLong];
    SetBindOptions : StdCallCodePointer[Pointer[IBindCtx],Pointer[tagBIND_OPTS],CLong];
    GetBindOptions : StdCallCodePointer[Pointer[IBindCtx],Pointer[tagBIND_OPTS],CLong];
    GetRunningObjectTable : StdCallCodePointer[Pointer[IBindCtx],Pointer[Pointer[IRunningObjectTable]],CLong];
    RegisterObjectParam : StdCallCodePointer[Pointer[IBindCtx],Pointer[UShort],Pointer[IUnknown],CLong];
    GetObjectParam : StdCallCodePointer[Pointer[IBindCtx],Pointer[UShort],Pointer[Pointer[IUnknown]],CLong];
    EnumObjectParam : StdCallCodePointer[Pointer[IBindCtx],Pointer[Pointer[IEnumString]],CLong];
    RevokeObjectParam : StdCallCodePointer[Pointer[IBindCtx],Pointer[UShort],CLong];
}

external IID_IMoniker : IID;

record IMoniker {
    lpVtbl : Pointer[IMonikerVtbl2];
}

static IMoniker2 = IMoniker;

static IMonikerVtbl = IMonikerVtbl2;

record IMonikerVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[IMoniker],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[IMoniker],CULong];
    Release : StdCallCodePointer[Pointer[IMoniker],CULong];
    GetClassID : StdCallCodePointer[Pointer[IMoniker],Pointer[_GUID],CLong];
    IsDirty : StdCallCodePointer[Pointer[IMoniker],CLong];
    Load : StdCallCodePointer[Pointer[IMoniker],Pointer[IStream],CLong];
    Save : StdCallCodePointer[Pointer[IMoniker],Pointer[IStream],Int,CLong];
    GetSizeMax : StdCallCodePointer[Pointer[IMoniker],OpaquePointer,CLong];
    BindToObject : StdCallCodePointer[Pointer[IMoniker],Pointer[IBindCtx],Pointer[IMoniker],Pointer[_GUID],Pointer[RawPointer],CLong];
    BindToStorage : StdCallCodePointer[Pointer[IMoniker],Pointer[IBindCtx],Pointer[IMoniker],Pointer[_GUID],Pointer[RawPointer],CLong];
    Reduce : StdCallCodePointer[Pointer[IMoniker],Pointer[IBindCtx],CULong,Pointer[Pointer[IMoniker]],Pointer[Pointer[IMoniker]],CLong];
    ComposeWith : StdCallCodePointer[Pointer[IMoniker],Pointer[IMoniker],Int,Pointer[Pointer[IMoniker]],CLong];
    Enum : StdCallCodePointer[Pointer[IMoniker],Int,Pointer[Pointer[IEnumMoniker]],CLong];
    IsEqual : StdCallCodePointer[Pointer[IMoniker],Pointer[IMoniker],CLong];
    Hash : StdCallCodePointer[Pointer[IMoniker],Pointer[CULong],CLong];
    IsRunning : StdCallCodePointer[Pointer[IMoniker],Pointer[IBindCtx],Pointer[IMoniker],Pointer[IMoniker],CLong];
    GetTimeOfLastChange : StdCallCodePointer[Pointer[IMoniker],Pointer[IBindCtx],Pointer[IMoniker],Pointer[_FILETIME],CLong];
    Inverse : StdCallCodePointer[Pointer[IMoniker],Pointer[Pointer[IMoniker]],CLong];
    CommonPrefixWith : StdCallCodePointer[Pointer[IMoniker],Pointer[IMoniker],Pointer[Pointer[IMoniker]],CLong];
    RelativePathTo : StdCallCodePointer[Pointer[IMoniker],Pointer[IMoniker],Pointer[Pointer[IMoniker]],CLong];
    GetDisplayName : StdCallCodePointer[Pointer[IMoniker],Pointer[IBindCtx],Pointer[IMoniker],Pointer[Pointer[UShort]],CLong];
    ParseDisplayName : StdCallCodePointer[Pointer[IMoniker],Pointer[IBindCtx],Pointer[IMoniker],Pointer[UShort],Pointer[CULong],Pointer[Pointer[IMoniker]],CLong];
    IsSystemMoniker : StdCallCodePointer[Pointer[IMoniker],Pointer[CULong],CLong];
}

external IID_IPersistStorage : IID;

record IPersistStorage {
    lpVtbl : Pointer[IPersistStorageVtbl2];
}

static IPersistStorage2 = IPersistStorage;

static IPersistStorageVtbl = IPersistStorageVtbl2;

record IPersistStorageVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[IPersistStorage],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[IPersistStorage],CULong];
    Release : StdCallCodePointer[Pointer[IPersistStorage],CULong];
    GetClassID : StdCallCodePointer[Pointer[IPersistStorage],Pointer[_GUID],CLong];
    IsDirty : StdCallCodePointer[Pointer[IPersistStorage],CLong];
    InitNew : StdCallCodePointer[Pointer[IPersistStorage],Pointer[IStorage],CLong];
    Load : StdCallCodePointer[Pointer[IPersistStorage],Pointer[IStorage],CLong];
    Save : StdCallCodePointer[Pointer[IPersistStorage],Pointer[IStorage],Int,CLong];
    SaveCompleted : StdCallCodePointer[Pointer[IPersistStorage],Pointer[IStorage],CLong];
    HandsOffStorage : StdCallCodePointer[Pointer[IPersistStorage],CLong];
}

external IID_IPersistFile : IID;

record IPersistFile {
    lpVtbl : Pointer[IPersistFileVtbl2];
}

static IPersistFile2 = IPersistFile;

static IPersistFileVtbl = IPersistFileVtbl2;

record IPersistFileVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[IPersistFile],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[IPersistFile],CULong];
    Release : StdCallCodePointer[Pointer[IPersistFile],CULong];
    GetClassID : StdCallCodePointer[Pointer[IPersistFile],Pointer[_GUID],CLong];
    IsDirty : StdCallCodePointer[Pointer[IPersistFile],CLong];
    Load : StdCallCodePointer[Pointer[IPersistFile],Pointer[UShort],CULong,CLong];
    Save : StdCallCodePointer[Pointer[IPersistFile],Pointer[UShort],Int,CLong];
    SaveCompleted : StdCallCodePointer[Pointer[IPersistFile],Pointer[UShort],CLong];
    GetCurFile : StdCallCodePointer[Pointer[IPersistFile],Pointer[Pointer[UShort]],CLong];
}

external IID_IAdviseSink : IID;

record IAdviseSink {
    lpVtbl : Pointer[IAdviseSinkVtbl2];
}

static IAdviseSink2 = IAdviseSink;

static IAdviseSinkVtbl = IAdviseSinkVtbl2;

record IAdviseSinkVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[IAdviseSink],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[IAdviseSink],CULong];
    Release : StdCallCodePointer[Pointer[IAdviseSink],CULong];
    OnDataChange : StdCallCodePointer[Pointer[IAdviseSink],Pointer[tagFORMATETC],Pointer[tagSTGMEDIUM],Void];
    OnViewChange : StdCallCodePointer[Pointer[IAdviseSink],CULong,CLong,Void];
    OnRename : StdCallCodePointer[Pointer[IAdviseSink],Pointer[IMoniker],Void];
    OnSave : StdCallCodePointer[Pointer[IAdviseSink],Void];
    OnClose : StdCallCodePointer[Pointer[IAdviseSink],Void];
}

external IID_IAdviseSink2 : IID;

record IAdviseSink22 {
    lpVtbl : Pointer[IAdviseSink2Vtbl2];
}

static IAdviseSink23 = IAdviseSink22;

static IAdviseSink2Vtbl = IAdviseSink2Vtbl2;

record IAdviseSink2Vtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[IAdviseSink22],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[IAdviseSink22],CULong];
    Release : StdCallCodePointer[Pointer[IAdviseSink22],CULong];
    OnDataChange : StdCallCodePointer[Pointer[IAdviseSink22],Pointer[tagFORMATETC],Pointer[tagSTGMEDIUM],Void];
    OnViewChange : StdCallCodePointer[Pointer[IAdviseSink22],CULong,CLong,Void];
    OnRename : StdCallCodePointer[Pointer[IAdviseSink22],Pointer[IMoniker],Void];
    OnSave : StdCallCodePointer[Pointer[IAdviseSink22],Void];
    OnClose : StdCallCodePointer[Pointer[IAdviseSink22],Void];
    OnLinkSrcChange : StdCallCodePointer[Pointer[IAdviseSink22],Pointer[IMoniker],Void];
}

external IID_IDataObject : IID;

record IDataObject {
    lpVtbl : Pointer[IDataObjectVtbl2];
}

static IDataObject2 = IDataObject;

static IDataObjectVtbl = IDataObjectVtbl2;

record IDataObjectVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[IDataObject],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[IDataObject],CULong];
    Release : StdCallCodePointer[Pointer[IDataObject],CULong];
    GetData : StdCallCodePointer[Pointer[IDataObject],Pointer[tagFORMATETC],Pointer[tagSTGMEDIUM],CLong];
    GetDataHere : StdCallCodePointer[Pointer[IDataObject],Pointer[tagFORMATETC],Pointer[tagSTGMEDIUM],CLong];
    QueryGetData : StdCallCodePointer[Pointer[IDataObject],Pointer[tagFORMATETC],CLong];
    GetCanonicalFormatEtc : StdCallCodePointer[Pointer[IDataObject],Pointer[tagFORMATETC],Pointer[tagFORMATETC],CLong];
    SetData : StdCallCodePointer[Pointer[IDataObject],Pointer[tagFORMATETC],Pointer[tagSTGMEDIUM],Int,CLong];
    EnumFormatEtc : StdCallCodePointer[Pointer[IDataObject],CULong,Pointer[Pointer[IEnumFORMATETC]],CLong];
    DAdvise : StdCallCodePointer[Pointer[IDataObject],Pointer[tagFORMATETC],CULong,Pointer[IAdviseSink],Pointer[CULong],CLong];
    DUnadvise : StdCallCodePointer[Pointer[IDataObject],CULong,CLong];
    EnumDAdvise : StdCallCodePointer[Pointer[IDataObject],Pointer[Pointer[IEnumSTATDATA]],CLong];
}

external IID_IDataAdviseHolder : IID;

record IDataAdviseHolder {
    lpVtbl : Pointer[IDataAdviseHolderVtbl2];
}

static IDataAdviseHolder2 = IDataAdviseHolder;

static IDataAdviseHolderVtbl = IDataAdviseHolderVtbl2;

record IDataAdviseHolderVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[IDataAdviseHolder],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[IDataAdviseHolder],CULong];
    Release : StdCallCodePointer[Pointer[IDataAdviseHolder],CULong];
    Advise : StdCallCodePointer[Pointer[IDataAdviseHolder],Pointer[IDataObject],Pointer[tagFORMATETC],CULong,Pointer[IAdviseSink],Pointer[CULong],CLong];
    Unadvise : StdCallCodePointer[Pointer[IDataAdviseHolder],CULong,CLong];
    EnumAdvise : StdCallCodePointer[Pointer[IDataAdviseHolder],Pointer[Pointer[IEnumSTATDATA]],CLong];
    SendOnDataChange : StdCallCodePointer[Pointer[IDataAdviseHolder],Pointer[IDataObject],CULong,CULong,CLong];
}

external IID_IStorage : IID;

record IStorage {
    lpVtbl : Pointer[IStorageVtbl2];
}

static IStorage2 = IStorage;

static IStorageVtbl = IStorageVtbl2;

record IStorageVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[IStorage],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[IStorage],CULong];
    Release : StdCallCodePointer[Pointer[IStorage],CULong];
    CreateStream : StdCallCodePointer[Pointer[IStorage],Pointer[UShort],CULong,CULong,CULong,Pointer[Pointer[IStream]],CLong];
    OpenStream : StdCallCodePointer[Pointer[IStorage],Pointer[UShort],RawPointer,CULong,CULong,Pointer[Pointer[IStream]],CLong];
    CreateStorage : StdCallCodePointer[Pointer[IStorage],Pointer[UShort],CULong,CULong,CULong,Pointer[Pointer[IStorage]],CLong];
    OpenStorage : StdCallCodePointer[Pointer[IStorage],Pointer[UShort],Pointer[IStorage],CULong,Pointer[Pointer[UShort]],CULong,Pointer[Pointer[IStorage]],CLong];
    CopyTo : StdCallCodePointer[Pointer[IStorage],CULong,Pointer[_GUID],Pointer[Pointer[UShort]],Pointer[IStorage],CLong];
    MoveElementTo : StdCallCodePointer[Pointer[IStorage],Pointer[UShort],Pointer[IStorage],Pointer[UShort],CULong,CLong];
    Commit : StdCallCodePointer[Pointer[IStorage],CULong,CLong];
    Revert : StdCallCodePointer[Pointer[IStorage],CLong];
    EnumElements : StdCallCodePointer[Pointer[IStorage],CULong,RawPointer,CULong,Pointer[Pointer[IEnumSTATSTG]],CLong];
    DestroyElement : StdCallCodePointer[Pointer[IStorage],Pointer[UShort],CLong];
    RenameElement : StdCallCodePointer[Pointer[IStorage],Pointer[UShort],Pointer[UShort],CLong];
    SetElementTimes : StdCallCodePointer[Pointer[IStorage],Pointer[UShort],Pointer[_FILETIME],Pointer[_FILETIME],Pointer[_FILETIME],CLong];
    SetClass : StdCallCodePointer[Pointer[IStorage],Pointer[_GUID],CLong];
    SetStateBits : StdCallCodePointer[Pointer[IStorage],CULong,CULong,CLong];
    Stat : StdCallCodePointer[Pointer[IStorage],Pointer[tagSTATSTG],CULong,CLong];
}

external IID_IRootStorage : IID;

record IRootStorage {
    lpVtbl : Pointer[IRootStorageVtbl2];
}

static IRootStorage2 = IRootStorage;

static IRootStorageVtbl = IRootStorageVtbl2;

record IRootStorageVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[IRootStorage],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[IRootStorage],CULong];
    Release : StdCallCodePointer[Pointer[IRootStorage],CULong];
    SwitchToFile : StdCallCodePointer[Pointer[IRootStorage],Pointer[UShort],CLong];
}

external IID_IRpcChannelBuffer : IID;

record IRpcChannelBuffer {
    lpVtbl : Pointer[IRpcChannelBufferVtbl2];
}

static IRpcChannelBuffer2 = IRpcChannelBuffer;

static IRpcChannelBufferVtbl = IRpcChannelBufferVtbl2;

record IRpcChannelBufferVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[IRpcChannelBuffer],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[IRpcChannelBuffer],CULong];
    Release : StdCallCodePointer[Pointer[IRpcChannelBuffer],CULong];
    GetBuffer : StdCallCodePointer[Pointer[IRpcChannelBuffer],Pointer[tagRPCOLEMESSAGE],Pointer[_GUID],CLong];
    SendReceive : StdCallCodePointer[Pointer[IRpcChannelBuffer],Pointer[tagRPCOLEMESSAGE],Pointer[CULong],CLong];
    FreeBuffer : StdCallCodePointer[Pointer[IRpcChannelBuffer],Pointer[tagRPCOLEMESSAGE],CLong];
    GetDestCtx : StdCallCodePointer[Pointer[IRpcChannelBuffer],Pointer[CULong],Pointer[RawPointer],CLong];
    IsConnected : StdCallCodePointer[Pointer[IRpcChannelBuffer],CLong];
}

external IID_IRpcProxyBuffer : IID;

record IRpcProxyBuffer {
    lpVtbl : Pointer[IRpcProxyBufferVtbl2];
}

static IRpcProxyBuffer2 = IRpcProxyBuffer;

static IRpcProxyBufferVtbl = IRpcProxyBufferVtbl2;

record IRpcProxyBufferVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[IRpcProxyBuffer],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[IRpcProxyBuffer],CULong];
    Release : StdCallCodePointer[Pointer[IRpcProxyBuffer],CULong];
    Connect : StdCallCodePointer[Pointer[IRpcProxyBuffer],Pointer[IRpcChannelBuffer],CLong];
    Disconnect : StdCallCodePointer[Pointer[IRpcProxyBuffer],Void];
}

external IID_IRpcStubBuffer : IID;

record IRpcStubBuffer {
    lpVtbl : Pointer[IRpcStubBufferVtbl2];
}

static IRpcStubBuffer2 = IRpcStubBuffer;

static IRpcStubBufferVtbl = IRpcStubBufferVtbl2;

record IRpcStubBufferVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[IRpcStubBuffer],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[IRpcStubBuffer],CULong];
    Release : StdCallCodePointer[Pointer[IRpcStubBuffer],CULong];
    Connect : StdCallCodePointer[Pointer[IRpcStubBuffer],Pointer[IUnknown],CLong];
    Disconnect : StdCallCodePointer[Pointer[IRpcStubBuffer],Void];
    Invoke : StdCallCodePointer[Pointer[IRpcStubBuffer],Pointer[tagRPCOLEMESSAGE],Pointer[IRpcStubBuffer],CLong];
    IsIIDSupported : StdCallCodePointer[Pointer[IRpcStubBuffer],Pointer[_GUID],Pointer[IRpcStubBuffer]];
    CountRefs : StdCallCodePointer[Pointer[IRpcStubBuffer],CULong];
    DebugServerQueryInterface : StdCallCodePointer[Pointer[IRpcStubBuffer],Pointer[RawPointer],CLong];
    DebugServerRelease : StdCallCodePointer[Pointer[IRpcStubBuffer],RawPointer,CLong];
}

external IID_IPSFactoryBuffer : IID;

record IPSFactoryBuffer {
    lpVtbl : Pointer[IPSFactoryBufferVtbl2];
}

static IPSFactoryBuffer2 = IPSFactoryBuffer;

static IPSFactoryBufferVtbl = IPSFactoryBufferVtbl2;

record IPSFactoryBufferVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[IPSFactoryBuffer],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[IPSFactoryBuffer],CULong];
    Release : StdCallCodePointer[Pointer[IPSFactoryBuffer],CULong];
    CreateProxy : StdCallCodePointer[Pointer[IPSFactoryBuffer],Pointer[IUnknown],Pointer[_GUID],Pointer[Pointer[IRpcProxyBuffer]],Pointer[RawPointer],CLong];
    CreateStub : StdCallCodePointer[Pointer[IPSFactoryBuffer],Pointer[_GUID],Pointer[IUnknown],Pointer[Pointer[IRpcStubBuffer]],CLong];
}

static LPPSFACTORYBUFFER = Pointer[IPSFactoryBuffer];

external IID_ILockBytes : IID;

record ILockBytes {
    lpVtbl : Pointer[ILockBytesVtbl2];
}

static ILockBytes2 = ILockBytes;

static ILockBytesVtbl = ILockBytesVtbl2;

record ILockBytesVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[ILockBytes],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[ILockBytes],CULong];
    Release : StdCallCodePointer[Pointer[ILockBytes],CULong];
    ReadAt : StdCallCodePointer[Pointer[ILockBytes],AUnionType,RawPointer,CULong,Pointer[CULong],CLong];
    WriteAt : StdCallCodePointer[Pointer[ILockBytes],AUnionType,RawPointer,CULong,Pointer[CULong],CLong];
    Flush : StdCallCodePointer[Pointer[ILockBytes],CLong];
    SetSize : StdCallCodePointer[Pointer[ILockBytes],AUnionType,CLong];
    LockRegion : StdCallCodePointer[Pointer[ILockBytes],AUnionType,AUnionType,CULong,CLong];
    UnlockRegion : StdCallCodePointer[Pointer[ILockBytes],AUnionType,AUnionType,CULong,CLong];
    Stat : StdCallCodePointer[Pointer[ILockBytes],Pointer[tagSTATSTG],CULong,CLong];
}

external IID_IExternalConnection : IID;

record IExternalConnection {
    lpVtbl : Pointer[IExternalConnectionVtbl2];
}

static IExternalConnection2 = IExternalConnection;

static IExternalConnectionVtbl = IExternalConnectionVtbl2;

record IExternalConnectionVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[IExternalConnection],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[IExternalConnection],CULong];
    Release : StdCallCodePointer[Pointer[IExternalConnection],CULong];
    AddConnection : StdCallCodePointer[Pointer[IExternalConnection],CULong,CULong,CLong];
    ReleaseConnection : StdCallCodePointer[Pointer[IExternalConnection],CULong,CULong,Int,CLong];
}

external IID_IRunnableObject : IID;

record IRunnableObject {
    lpVtbl : Pointer[IRunnableObjectVtbl2];
}

static IRunnableObject2 = IRunnableObject;

static IRunnableObjectVtbl = IRunnableObjectVtbl2;

record IRunnableObjectVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[IRunnableObject],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[IRunnableObject],CULong];
    Release : StdCallCodePointer[Pointer[IRunnableObject],CULong];
    GetRunningClass : StdCallCodePointer[Pointer[IRunnableObject],Pointer[_GUID],CLong];
    Run : StdCallCodePointer[Pointer[IRunnableObject],Pointer[IBindCtx],CLong];
    IsRunning : StdCallCodePointer[Pointer[IRunnableObject],Int];
    LockRunning : StdCallCodePointer[Pointer[IRunnableObject],Int,Int,CLong];
    SetContainedObject : StdCallCodePointer[Pointer[IRunnableObject],Int,CLong];
}

external IID_IROTData : IID;

record IROTData {
    lpVtbl : Pointer[IROTDataVtbl2];
}

static IROTData2 = IROTData;

static IROTDataVtbl = IROTDataVtbl2;

record IROTDataVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[IROTData],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[IROTData],CULong];
    Release : StdCallCodePointer[Pointer[IROTData],CULong];
    GetComparisonData : StdCallCodePointer[Pointer[IROTData],RawPointer,CULong,Pointer[CULong],CLong];
}

external IID_IChannelHook : IID;

record IChannelHook {
    lpVtbl : Pointer[IChannelHookVtbl2];
}

static IChannelHook2 = IChannelHook;

static IChannelHookVtbl = IChannelHookVtbl2;

record IChannelHookVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[IChannelHook],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[IChannelHook],CULong];
    Release : StdCallCodePointer[Pointer[IChannelHook],CULong];
    ClientGetSize : StdCallCodePointer[Pointer[IChannelHook],Pointer[_GUID],Pointer[_GUID],Pointer[CULong],Void];
    ClientFillBuffer : StdCallCodePointer[Pointer[IChannelHook],Pointer[_GUID],Pointer[_GUID],Pointer[CULong],RawPointer,Void];
    ClientNotify : StdCallCodePointer[Pointer[IChannelHook],Pointer[_GUID],Pointer[_GUID],CULong,RawPointer,CULong,CLong,Void];
    ServerNotify : StdCallCodePointer[Pointer[IChannelHook],Pointer[_GUID],Pointer[_GUID],CULong,RawPointer,CULong,Void];
    ServerGetSize : StdCallCodePointer[Pointer[IChannelHook],Pointer[_GUID],Pointer[_GUID],CLong,Pointer[CULong],Void];
    ServerFillBuffer : StdCallCodePointer[Pointer[IChannelHook],Pointer[_GUID],Pointer[_GUID],Pointer[CULong],RawPointer,CLong,Void];
}

external IID_IPropertyStorage : IID;

record IPropertyStorage {
    lpVtbl : Pointer[IPropertyStorageVtbl2];
}

static IPropertyStorage2 = IPropertyStorage;

static IPropertyStorageVtbl = IPropertyStorageVtbl2;

record IPropertyStorageVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[IPropertyStorage],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[IPropertyStorage],CULong];
    Release : StdCallCodePointer[Pointer[IPropertyStorage],CULong];
    ReadMultiple : StdCallCodePointer[Pointer[IPropertyStorage],CULong,Pointer[tagPROPSPEC],Pointer[tagPROPVARIANT],CLong];
    WriteMultiple : StdCallCodePointer[Pointer[IPropertyStorage],CULong,Pointer[tagPROPSPEC],Pointer[tagPROPVARIANT],CULong,CLong];
    DeleteMultiple : StdCallCodePointer[Pointer[IPropertyStorage],CULong,Pointer[tagPROPSPEC],CLong];
    ReadPropertyNames : StdCallCodePointer[Pointer[IPropertyStorage],CULong,Pointer[CULong],Pointer[Pointer[UShort]],CLong];
    WritePropertyNames : StdCallCodePointer[Pointer[IPropertyStorage],CULong,Pointer[CULong],Pointer[Pointer[UShort]],CLong];
    DeletePropertyNames : StdCallCodePointer[Pointer[IPropertyStorage],CULong,Pointer[CULong],CLong];
    SetClass : StdCallCodePointer[Pointer[IPropertyStorage],Pointer[_GUID],CLong];
    Commit : StdCallCodePointer[Pointer[IPropertyStorage],CULong,CLong];
    Revert : StdCallCodePointer[Pointer[IPropertyStorage],CLong];
    Enum : StdCallCodePointer[Pointer[IPropertyStorage],Pointer[Pointer[IEnumSTATPROPSTG]],CLong];
    Stat : StdCallCodePointer[Pointer[IPropertyStorage],Pointer[tagSTATPROPSTG],CLong];
    SetTimes : StdCallCodePointer[Pointer[IPropertyStorage],Pointer[_FILETIME],Pointer[_FILETIME],Pointer[_FILETIME],CLong];
}

external IID_IPropertySetStorage : IID;

record IPropertySetStorage {
    lpVtbl : Pointer[IPropertySetStorageVtbl2];
}

static IPropertySetStorage2 = IPropertySetStorage;

static IPropertySetStorageVtbl = IPropertySetStorageVtbl2;

record IPropertySetStorageVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[IPropertySetStorage],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[IPropertySetStorage],CULong];
    Release : StdCallCodePointer[Pointer[IPropertySetStorage],CULong];
    Create : StdCallCodePointer[Pointer[IPropertySetStorage],Pointer[_GUID],Pointer[_GUID],CULong,CULong,Pointer[Pointer[IPropertyStorage]],CLong];
    Open : StdCallCodePointer[Pointer[IPropertySetStorage],Pointer[_GUID],CULong,Pointer[Pointer[IPropertyStorage]],CLong];
    Delete : StdCallCodePointer[Pointer[IPropertySetStorage],Pointer[_GUID],CLong];
    Enum : StdCallCodePointer[Pointer[IPropertySetStorage],Pointer[Pointer[IEnumSTATPROPSETSTG]],CLong];
}

external IID_IClientSecurity : IID;

record IClientSecurity {
    lpVtbl : Pointer[IClientSecurityVtbl2];
}

static IClientSecurity2 = IClientSecurity;

static IClientSecurityVtbl = IClientSecurityVtbl2;

record IClientSecurityVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[IClientSecurity],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[IClientSecurity],CULong];
    Release : StdCallCodePointer[Pointer[IClientSecurity],CULong];
    QueryBlanket : StdCallCodePointer[Pointer[IClientSecurity],RawPointer,Pointer[CULong],Pointer[CULong],Pointer[Pointer[UShort]],Pointer[CULong],Pointer[CULong],Pointer[Pointer[RawPointer]],Pointer[Pointer[CULong]],CLong];
    SetBlanket : StdCallCodePointer[Pointer[IClientSecurity],RawPointer,CULong,CULong,Pointer[UShort],CULong,CULong,Pointer[RawPointer],CULong,CLong];
    CopyProxy : StdCallCodePointer[Pointer[IClientSecurity],Pointer[IUnknown],Pointer[Pointer[IUnknown]],CLong];
}

external IID_IServerSecurity : IID;

record IServerSecurity {
    lpVtbl : Pointer[IServerSecurityVtbl2];
}

static IServerSecurity2 = IServerSecurity;

static IServerSecurityVtbl = IServerSecurityVtbl2;

record IServerSecurityVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[IServerSecurity],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[IServerSecurity],CULong];
    Release : StdCallCodePointer[Pointer[IServerSecurity],CULong];
    QueryBlanket : StdCallCodePointer[Pointer[IServerSecurity],Pointer[CULong],Pointer[CULong],Pointer[Pointer[UShort]],Pointer[CULong],Pointer[CULong],Pointer[RawPointer],Pointer[Pointer[CULong]],CLong];
    ImpersonateClient : StdCallCodePointer[Pointer[IServerSecurity],CLong];
    RevertToSelf : StdCallCodePointer[Pointer[IServerSecurity],CLong];
    IsImpersonating : StdCallCodePointer[Pointer[IServerSecurity],CLong];
}

external IID_IClassActivator : IID;

record IClassActivator {
    lpVtbl : Pointer[IClassActivatorVtbl2];
}

static IClassActivator2 = IClassActivator;

static IClassActivatorVtbl = IClassActivatorVtbl2;

record IClassActivatorVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[IClassActivator],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[IClassActivator],CULong];
    Release : StdCallCodePointer[Pointer[IClassActivator],CULong];
    GetClassObject : StdCallCodePointer[Pointer[IClassActivator],Pointer[_GUID],CULong,CULong,Pointer[_GUID],Pointer[RawPointer],CLong];
}

external IID_IFillLockBytes : IID;

record IFillLockBytes {
    lpVtbl : Pointer[IFillLockBytesVtbl2];
}

static IFillLockBytes2 = IFillLockBytes;

static IFillLockBytesVtbl = IFillLockBytesVtbl2;

record IFillLockBytesVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[IFillLockBytes],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[IFillLockBytes],CULong];
    Release : StdCallCodePointer[Pointer[IFillLockBytes],CULong];
    FillAppend : StdCallCodePointer[Pointer[IFillLockBytes],RawPointer,CULong,Pointer[CULong],CLong];
    FillAt : StdCallCodePointer[Pointer[IFillLockBytes],AUnionType,RawPointer,CULong,Pointer[CULong],CLong];
    SetFillSize : StdCallCodePointer[Pointer[IFillLockBytes],AUnionType,CLong];
    Terminate : StdCallCodePointer[Pointer[IFillLockBytes],Int,CLong];
}

external IID_IProgressNotify : IID;

record IProgressNotify {
    lpVtbl : Pointer[IProgressNotifyVtbl2];
}

static IProgressNotify2 = IProgressNotify;

static IProgressNotifyVtbl = IProgressNotifyVtbl2;

record IProgressNotifyVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[IProgressNotify],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[IProgressNotify],CULong];
    Release : StdCallCodePointer[Pointer[IProgressNotify],CULong];
    OnProgress : StdCallCodePointer[Pointer[IProgressNotify],CULong,CULong,Int,Int,CLong];
}

external IID_ILayoutStorage : IID;

record ILayoutStorage {
    lpVtbl : Pointer[ILayoutStorageVtbl2];
}

static ILayoutStorage2 = ILayoutStorage;

static ILayoutStorageVtbl = ILayoutStorageVtbl2;

record ILayoutStorageVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[ILayoutStorage],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[ILayoutStorage],CULong];
    Release : StdCallCodePointer[Pointer[ILayoutStorage],CULong];
    LayoutScript : StdCallCodePointer[Pointer[ILayoutStorage],Pointer[tagSTORAGELAYOUT],CULong,CULong,CLong];
    BeginMonitor : StdCallCodePointer[Pointer[ILayoutStorage],CLong];
    EndMonitor : StdCallCodePointer[Pointer[ILayoutStorage],CLong];
    ReLayoutDocfile : StdCallCodePointer[Pointer[ILayoutStorage],Pointer[UShort],CLong];
}

external IID_IGlobalInterfaceTable : IID;

record IGlobalInterfaceTable {
    lpVtbl : Pointer[IGlobalInterfaceTableVtbl2];
}

static IGlobalInterfaceTable2 = IGlobalInterfaceTable;

static IGlobalInterfaceTableVtbl = IGlobalInterfaceTableVtbl2;

record IGlobalInterfaceTableVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[IGlobalInterfaceTable],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[IGlobalInterfaceTable],CULong];
    Release : StdCallCodePointer[Pointer[IGlobalInterfaceTable],CULong];
    RegisterInterfaceInGlobal : StdCallCodePointer[Pointer[IGlobalInterfaceTable],Pointer[IUnknown],Pointer[_GUID],Pointer[CULong],CLong];
    RevokeInterfaceFromGlobal : StdCallCodePointer[Pointer[IGlobalInterfaceTable],CULong,CLong];
    GetInterfaceFromGlobal : StdCallCodePointer[Pointer[IGlobalInterfaceTable],CULong,Pointer[_GUID],Pointer[RawPointer],CLong];
}

external (stdcall) IMarshal_GetUnmarshalClass_Proxy(
    argument0 : Pointer[IMarshal2],
    argument1 : Pointer[IID],
    argument2 : RawPointer,
    argument3 : CULong,
    argument4 : RawPointer,
    argument5 : CULong,
    argument6 : Pointer[CLSID]) : CLong;

external (stdcall) IMarshal_GetUnmarshalClass_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IMarshal_GetMarshalSizeMax_Proxy(
    argument0 : Pointer[IMarshal2],
    argument1 : Pointer[IID],
    argument2 : RawPointer,
    argument3 : CULong,
    argument4 : RawPointer,
    argument5 : CULong,
    argument6 : Pointer[CULong]) : CLong;

external (stdcall) IMarshal_GetMarshalSizeMax_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IMarshal_MarshalInterface_Proxy(
    argument0 : Pointer[IMarshal2],
    argument1 : Pointer[IStream2],
    argument2 : Pointer[IID],
    argument3 : RawPointer,
    argument4 : CULong,
    argument5 : RawPointer,
    argument6 : CULong) : CLong;

external (stdcall) IMarshal_MarshalInterface_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IMarshal_UnmarshalInterface_Proxy(
    argument0 : Pointer[IMarshal2],
    argument1 : Pointer[IStream2],
    argument2 : Pointer[IID],
    argument3 : Pointer[RawPointer]) : CLong;

external (stdcall) IMarshal_UnmarshalInterface_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IMarshal_ReleaseMarshalData_Proxy(
    argument0 : Pointer[IMarshal2],
    argument1 : Pointer[IStream2]) : CLong;

external (stdcall) IMarshal_ReleaseMarshalData_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IMarshal_DisconnectObject_Proxy(
    argument0 : Pointer[IMarshal2],
    argument1 : CULong) : CLong;

external (stdcall) IMarshal_DisconnectObject_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IMalloc_Alloc_Proxy(
    argument0 : Pointer[IMalloc2],
    argument1 : CULong) : RawPointer;

external (stdcall) IMalloc_Alloc_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IMalloc_Realloc_Proxy(
    argument0 : Pointer[IMalloc2],
    argument1 : RawPointer,
    argument2 : CULong) : RawPointer;

external (stdcall) IMalloc_Realloc_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IMalloc_Free_Proxy(
    argument0 : Pointer[IMalloc2],
    argument1 : RawPointer) : Void;

external (stdcall) IMalloc_Free_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IMalloc_GetSize_Proxy(
    argument0 : Pointer[IMalloc2],
    argument1 : RawPointer) : CULong;

external (stdcall) IMalloc_GetSize_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IMalloc_DidAlloc_Proxy(
    argument0 : Pointer[IMalloc2],
    argument1 : RawPointer) : Int;

external (stdcall) IMalloc_DidAlloc_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IMalloc_HeapMinimize_Proxy(
    argument0 : Pointer[IMalloc2]) : Void;

external (stdcall) IMalloc_HeapMinimize_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IMallocSpy_PreAlloc_Proxy(
    argument0 : Pointer[IMallocSpy2],
    cbRequest : CULong) : CULong;

external (stdcall) IMallocSpy_PreAlloc_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IMallocSpy_PostAlloc_Proxy(
    argument0 : Pointer[IMallocSpy2],
    argument1 : RawPointer) : RawPointer;

external (stdcall) IMallocSpy_PostAlloc_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IMallocSpy_PreFree_Proxy(
    argument0 : Pointer[IMallocSpy2],
    argument1 : RawPointer,
    argument2 : Int) : RawPointer;

external (stdcall) IMallocSpy_PreFree_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IMallocSpy_PostFree_Proxy(
    argument0 : Pointer[IMallocSpy2],
    argument1 : Int) : Void;

external (stdcall) IMallocSpy_PostFree_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IMallocSpy_PreRealloc_Proxy(
    argument0 : Pointer[IMallocSpy2],
    argument1 : RawPointer,
    argument2 : CULong,
    argument3 : Pointer[RawPointer],
    argument4 : Int) : CULong;

external (stdcall) IMallocSpy_PreRealloc_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IMallocSpy_PostRealloc_Proxy(
    argument0 : Pointer[IMallocSpy2],
    argument1 : RawPointer,
    argument2 : Int) : RawPointer;

external (stdcall) IMallocSpy_PostRealloc_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IMallocSpy_PreGetSize_Proxy(
    argument0 : Pointer[IMallocSpy2],
    argument1 : RawPointer,
    argument2 : Int) : RawPointer;

external (stdcall) IMallocSpy_PreGetSize_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IMallocSpy_PostGetSize_Proxy(
    argument0 : Pointer[IMallocSpy2],
    argument1 : CULong,
    argument2 : Int) : CULong;

external (stdcall) IMallocSpy_PostGetSize_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IMallocSpy_PreDidAlloc_Proxy(
    argument0 : Pointer[IMallocSpy2],
    argument1 : RawPointer,
    argument2 : Int) : RawPointer;

external (stdcall) IMallocSpy_PreDidAlloc_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IMallocSpy_PostDidAlloc_Proxy(
    argument0 : Pointer[IMallocSpy2],
    argument1 : RawPointer,
    argument2 : Int,
    argument3 : Int) : Int;

external (stdcall) IMallocSpy_PostDidAlloc_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IMallocSpy_PreHeapMinimize_Proxy(
    argument0 : Pointer[IMallocSpy2]) : Void;

external (stdcall) IMallocSpy_PreHeapMinimize_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IMallocSpy_PostHeapMinimize_Proxy(
    argument0 : Pointer[IMallocSpy2]) : Void;

external (stdcall) IMallocSpy_PostHeapMinimize_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IStdMarshalInfo_GetClassForHandler_Proxy(
    argument0 : Pointer[IStdMarshalInfo2],
    argument1 : CULong,
    argument2 : RawPointer,
    argument3 : Pointer[CLSID]) : CLong;

external (stdcall) IStdMarshalInfo_GetClassForHandler_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IExternalConnection_AddConnection_Proxy(
    argument0 : Pointer[IExternalConnection2],
    argument1 : CULong,
    argument2 : CULong) : CULong;

external (stdcall) IExternalConnection_AddConnection_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IExternalConnection_ReleaseConnection_Proxy(
    argument0 : Pointer[IExternalConnection2],
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Int) : CULong;

external (stdcall) IExternalConnection_ReleaseConnection_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IEnumUnknown_RemoteNext_Proxy(
    argument0 : Pointer[IEnumUnknown2],
    argument1 : CULong,
    argument2 : Pointer[Pointer[IUnknown2]],
    argument3 : Pointer[CULong]) : CLong;

external (stdcall) IEnumUnknown_RemoteNext_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IEnumUnknown_Skip_Proxy(
    argument0 : Pointer[IEnumUnknown2],
    argument1 : CULong) : CLong;

external (stdcall) IEnumUnknown_Skip_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IEnumUnknown_Reset_Proxy(
    argument0 : Pointer[IEnumUnknown2]) : CLong;

external (stdcall) IEnumUnknown_Reset_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IEnumUnknown_Clone_Proxy(
    argument0 : Pointer[IEnumUnknown2],
    argument1 : Pointer[Pointer[IEnumUnknown2]]) : CLong;

external (stdcall) IEnumUnknown_Clone_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IBindCtx_RegisterObjectBound_Proxy(
    argument0 : Pointer[IBindCtx2],
    punk : Pointer[IUnknown2]) : CLong;

external (stdcall) IBindCtx_RegisterObjectBound_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    _pRpcChannelBuffer : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IBindCtx_RevokeObjectBound_Proxy(
    argument0 : Pointer[IBindCtx2],
    punk : Pointer[IUnknown2]) : CLong;

external (stdcall) IBindCtx_RevokeObjectBound_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IBindCtx_ReleaseBoundObjects_Proxy(
    argument0 : Pointer[IBindCtx2]) : CLong;

external (stdcall) IBindCtx_ReleaseBoundObjects_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IBindCtx_SetBindOptions_Proxy(
    argument0 : Pointer[IBindCtx2],
    argument1 : Pointer[BIND_OPTS]) : CLong;

external (stdcall) IBindCtx_SetBindOptions_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IBindCtx_GetBindOptions_Proxy(
    argument0 : Pointer[IBindCtx2],
    pbindopts : Pointer[BIND_OPTS]) : CLong;

external (stdcall) IBindCtx_GetBindOptions_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IBindCtx_GetRunningObjectTable_Proxy(
    argument0 : Pointer[IBindCtx2],
    argument1 : Pointer[Pointer[IRunningObjectTable2]]) : CLong;

external (stdcall) IBindCtx_GetRunningObjectTable_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IBindCtx_RegisterObjectParam_Proxy(
    argument0 : Pointer[IBindCtx2],
    argument1 : LPCSTR,
    argument2 : Pointer[IUnknown2]) : CLong;

external (stdcall) IBindCtx_RegisterObjectParam_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IBindCtx_GetObjectParam_Proxy(
    argument0 : Pointer[IBindCtx2],
    argument1 : LPCSTR,
    argument2 : Pointer[Pointer[IUnknown2]]) : CLong;

external (stdcall) IBindCtx_GetObjectParam_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IBindCtx_EnumObjectParam_Proxy(
    argument0 : Pointer[IBindCtx2],
    argument1 : Pointer[Pointer[IEnumString2]]) : CLong;

external (stdcall) IBindCtx_EnumObjectParam_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IBindCtx_RevokeObjectParam_Proxy(
    argument0 : Pointer[IBindCtx2],
    argument1 : LPCSTR) : CLong;

external (stdcall) IBindCtx_RevokeObjectParam_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IEnumMoniker_RemoteNext_Proxy(
    argument0 : Pointer[IEnumMoniker2],
    argument1 : CULong,
    argument2 : Pointer[Pointer[IMoniker2]],
    argument3 : Pointer[CULong]) : CLong;

external (stdcall) IEnumMoniker_RemoteNext_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IEnumMoniker_Skip_Proxy(
    argument0 : Pointer[IEnumMoniker2],
    argument1 : CULong) : CLong;

external (stdcall) IEnumMoniker_Skip_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IEnumMoniker_Reset_Proxy(
    argument0 : Pointer[IEnumMoniker2]) : CLong;

external (stdcall) IEnumMoniker_Reset_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IEnumMoniker_Clone_Proxy(
    argument0 : Pointer[IEnumMoniker2],
    argument1 : Pointer[Pointer[IEnumMoniker2]]) : CLong;

external (stdcall) IEnumMoniker_Clone_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IRunnableObject_GetRunningClass_Proxy(
    argument0 : Pointer[IRunnableObject2],
    argument1 : LPCLSID) : CLong;

external (stdcall) IRunnableObject_GetRunningClass_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IRunnableObject_Run_Proxy(
    argument0 : Pointer[IRunnableObject2],
    argument1 : LPBINDCTX) : CLong;

external (stdcall) IRunnableObject_Run_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IRunnableObject_IsRunning_Proxy(
    argument0 : Pointer[IRunnableObject2]) : Int;

external (stdcall) IRunnableObject_IsRunning_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IRunnableObject_LockRunning_Proxy(
    argument0 : Pointer[IRunnableObject2],
    argument1 : Int,
    argument2 : Int) : CLong;

external (stdcall) IRunnableObject_LockRunning_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IRunnableObject_SetContainedObject_Proxy(
    argument0 : Pointer[IRunnableObject2],
    argument1 : Int) : CLong;

external (stdcall) IRunnableObject_SetContainedObject_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IRunningObjectTable_Register_Proxy(
    argument0 : Pointer[IRunningObjectTable2],
    argument1 : CULong,
    argument2 : Pointer[IUnknown2],
    argument3 : Pointer[IMoniker2],
    argument4 : Pointer[CULong]) : CLong;

external (stdcall) IRunningObjectTable_Register_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IRunningObjectTable_Revoke_Proxy(
    argument0 : Pointer[IRunningObjectTable2],
    argument1 : CULong) : CLong;

external (stdcall) IRunningObjectTable_Revoke_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IRunningObjectTable_IsRunning_Proxy(
    argument0 : Pointer[IRunningObjectTable2],
    argument1 : Pointer[IMoniker2]) : CLong;

external (stdcall) IRunningObjectTable_IsRunning_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IRunningObjectTable_GetObject_Proxy(
    argument0 : Pointer[IRunningObjectTable2],
    argument1 : Pointer[IMoniker2],
    argument2 : Pointer[Pointer[IUnknown2]]) : CLong;

external (stdcall) IRunningObjectTable_GetObject_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IRunningObjectTable_NoteChangeTime_Proxy(
    argument0 : Pointer[IRunningObjectTable2],
    argument1 : CULong,
    argument2 : Pointer[FILETIME]) : CLong;

external (stdcall) IRunningObjectTable_NoteChangeTime_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IRunningObjectTable_GetTimeOfLastChange_Proxy(
    argument0 : Pointer[IRunningObjectTable2],
    argument1 : Pointer[IMoniker2],
    argument2 : Pointer[FILETIME]) : CLong;

external (stdcall) IRunningObjectTable_GetTimeOfLastChange_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IRunningObjectTable_EnumRunning_Proxy(
    argument0 : Pointer[IRunningObjectTable2],
    argument1 : Pointer[Pointer[IEnumMoniker2]]) : CLong;

external (stdcall) IRunningObjectTable_EnumRunning_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IPersist_GetClassID_Proxy(
    argument0 : Pointer[IPersist2],
    argument1 : Pointer[CLSID]) : CLong;

external (stdcall) IPersist_GetClassID_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IPersistStream_IsDirty_Proxy(
    argument0 : Pointer[IPersistStream2]) : CLong;

external (stdcall) IPersistStream_IsDirty_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IPersistStream_Load_Proxy(
    argument0 : Pointer[IPersistStream2],
    argument1 : Pointer[IStream2]) : CLong;

external (stdcall) IPersistStream_Load_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IPersistStream_Save_Proxy(
    argument0 : Pointer[IPersistStream2],
    argument1 : Pointer[IStream2],
    argument2 : Int) : CLong;

external (stdcall) IPersistStream_Save_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IPersistStream_GetSizeMax_Proxy(
    argument0 : Pointer[IPersistStream2],
    argument1 : Pointer[ULARGE_INTEGER]) : CLong;

external (stdcall) IPersistStream_GetSizeMax_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IMoniker_RemoteBindToObject_Proxy(
    argument0 : Pointer[IMoniker2],
    argument1 : Pointer[IBindCtx2],
    argument2 : Pointer[IMoniker2],
    argument3 : Pointer[IID],
    argument4 : Pointer[Pointer[IUnknown2]]) : CLong;

external (stdcall) IMoniker_RemoteBindToObject_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IMoniker_RemoteBindToStorage_Proxy(
    argument0 : Pointer[IMoniker2],
    argument1 : Pointer[IBindCtx2],
    argument2 : Pointer[IMoniker2],
    argument3 : Pointer[IID],
    argument4 : Pointer[Pointer[IUnknown2]]) : CLong;

external (stdcall) IMoniker_RemoteBindToStorage_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IMoniker_Reduce_Proxy(
    argument0 : Pointer[IMoniker2],
    argument1 : Pointer[IBindCtx2],
    argument2 : CULong,
    argument3 : Pointer[Pointer[IMoniker2]],
    argument4 : Pointer[Pointer[IMoniker2]]) : CLong;

external (stdcall) IMoniker_Reduce_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IMoniker_ComposeWith_Proxy(
    argument0 : Pointer[IMoniker2],
    argument1 : Pointer[IMoniker2],
    argument2 : Int,
    argument3 : Pointer[Pointer[IMoniker2]]) : CLong;

external (stdcall) IMoniker_ComposeWith_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IMoniker_Enum_Proxy(
    argument0 : Pointer[IMoniker2],
    argument1 : Int,
    argument2 : Pointer[Pointer[IEnumMoniker2]]) : CLong;

external (stdcall) IMoniker_Enum_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IMoniker_IsEqual_Proxy(
    argument0 : Pointer[IMoniker2],
    argument1 : Pointer[IMoniker2]) : CLong;

external (stdcall) IMoniker_IsEqual_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IMoniker_Hash_Proxy(
    argument0 : Pointer[IMoniker2],
    argument1 : Pointer[CULong]) : CLong;

external (stdcall) IMoniker_Hash_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IMoniker_IsRunning_Proxy(
    argument0 : Pointer[IMoniker2],
    argument1 : Pointer[IBindCtx2],
    argument2 : Pointer[IMoniker2],
    argument3 : Pointer[IMoniker2]) : CLong;

external (stdcall) IMoniker_IsRunning_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IMoniker_GetTimeOfLastChange_Proxy(
    argument0 : Pointer[IMoniker2],
    argument1 : Pointer[IBindCtx2],
    argument2 : Pointer[IMoniker2],
    argument3 : Pointer[FILETIME]) : CLong;

external (stdcall) IMoniker_GetTimeOfLastChange_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IMoniker_Inverse_Proxy(
    argument0 : Pointer[IMoniker2],
    argument1 : Pointer[Pointer[IMoniker2]]) : CLong;

external (stdcall) IMoniker_Inverse_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IMoniker_CommonPrefixWith_Proxy(
    argument0 : Pointer[IMoniker2],
    argument1 : Pointer[IMoniker2],
    argument2 : Pointer[Pointer[IMoniker2]]) : CLong;

external (stdcall) IMoniker_CommonPrefixWith_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IMoniker_RelativePathTo_Proxy(
    argument0 : Pointer[IMoniker2],
    argument1 : Pointer[IMoniker2],
    argument2 : Pointer[Pointer[IMoniker2]]) : CLong;

external (stdcall) IMoniker_RelativePathTo_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IMoniker_GetDisplayName_Proxy(
    argument0 : Pointer[IMoniker2],
    argument1 : Pointer[IBindCtx2],
    argument2 : Pointer[IMoniker2],
    argument3 : Pointer[LPCSTR]) : CLong;

external (stdcall) IMoniker_GetDisplayName_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IMoniker_ParseDisplayName_Proxy(
    argument0 : Pointer[IMoniker2],
    argument1 : Pointer[IBindCtx2],
    argument2 : Pointer[IMoniker2],
    argument3 : LPCSTR,
    argument4 : Pointer[CULong],
    argument5 : Pointer[Pointer[IMoniker2]]) : CLong;

external (stdcall) IMoniker_ParseDisplayName_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IMoniker_IsSystemMoniker_Proxy(
    argument0 : Pointer[IMoniker2],
    argument1 : Pointer[CULong]) : CLong;

external (stdcall) IMoniker_IsSystemMoniker_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IROTData_GetComparisonData_Proxy(
    argument0 : Pointer[IROTData2],
    argument1 : Pointer[CUChar],
    cbMax : CULong,
    argument3 : Pointer[CULong]) : CLong;

external (stdcall) IROTData_GetComparisonData_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IEnumString_RemoteNext_Proxy(
    argument0 : Pointer[IEnumString2],
    argument1 : CULong,
    rgelt : Pointer[LPCSTR],
    argument3 : Pointer[CULong]) : CLong;

external (stdcall) IEnumString_RemoteNext_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IEnumString_Skip_Proxy(
    argument0 : Pointer[IEnumString2],
    argument1 : CULong) : CLong;

external (stdcall) IEnumString_Skip_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IEnumString_Reset_Proxy(
    argument0 : Pointer[IEnumString2]) : CLong;

external (stdcall) IEnumString_Reset_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IEnumString_Clone_Proxy(
    argument0 : Pointer[IEnumString2],
    argument1 : Pointer[Pointer[IEnumString2]]) : CLong;

external (stdcall) IEnumString_Clone_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IStream_RemoteRead_Proxy(
    argument0 : Pointer[IStream2],
    argument1 : Pointer[CUChar],
    argument2 : CULong,
    argument3 : Pointer[CULong]) : CLong;

external (stdcall) IStream_RemoteRead_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IStream_RemoteWrite_Proxy(
    argument0 : Pointer[IStream2],
    pv : Pointer[CUChar],
    argument2 : CULong,
    argument3 : Pointer[CULong]) : CLong;

external (stdcall) IStream_RemoteWrite_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IStream_RemoteSeek_Proxy(
    argument0 : Pointer[IStream2],
    argument1 : LARGE_INTEGER,
    argument2 : CULong,
    argument3 : Pointer[ULARGE_INTEGER]) : CLong;

external (stdcall) IStream_RemoteSeek_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IStream_SetSize_Proxy(
    argument0 : Pointer[IStream2],
    argument1 : ULARGE_INTEGER) : CLong;

external (stdcall) IStream_SetSize_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IStream_RemoteCopyTo_Proxy(
    argument0 : Pointer[IStream2],
    argument1 : Pointer[IStream2],
    argument2 : ULARGE_INTEGER,
    argument3 : Pointer[ULARGE_INTEGER],
    argument4 : Pointer[ULARGE_INTEGER]) : CLong;

external (stdcall) IStream_RemoteCopyTo_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IStream_Commit_Proxy(
    argument0 : Pointer[IStream2],
    argument1 : CULong) : CLong;

external (stdcall) IStream_Commit_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IStream_Revert_Proxy(
    argument0 : Pointer[IStream2]) : CLong;

external (stdcall) IStream_Revert_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IStream_LockRegion_Proxy(
    argument0 : Pointer[IStream2],
    argument1 : ULARGE_INTEGER,
    argument2 : ULARGE_INTEGER,
    argument3 : CULong) : CLong;

external (stdcall) IStream_LockRegion_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IStream_UnlockRegion_Proxy(
    argument0 : Pointer[IStream2],
    argument1 : ULARGE_INTEGER,
    argument2 : ULARGE_INTEGER,
    argument3 : CULong) : CLong;

external (stdcall) IStream_UnlockRegion_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IStream_Stat_Proxy(
    argument0 : Pointer[IStream2],
    argument1 : Pointer[STATSTG],
    argument2 : CULong) : CLong;

external (stdcall) IStream_Stat_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IStream_Clone_Proxy(
    argument0 : Pointer[IStream2],
    argument1 : Pointer[Pointer[IStream2]]) : CLong;

external (stdcall) IStream_Clone_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IEnumSTATSTG_RemoteNext_Proxy(
    argument0 : Pointer[IEnumSTATSTG2],
    argument1 : CULong,
    argument2 : Pointer[STATSTG],
    argument3 : Pointer[CULong]) : CLong;

external (stdcall) IEnumSTATSTG_RemoteNext_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IEnumSTATSTG_Skip_Proxy(
    argument0 : Pointer[IEnumSTATSTG2],
    celt : CULong) : CLong;

external (stdcall) IEnumSTATSTG_Skip_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IEnumSTATSTG_Reset_Proxy(
    argument0 : Pointer[IEnumSTATSTG2]) : CLong;

external (stdcall) IEnumSTATSTG_Reset_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IEnumSTATSTG_Clone_Proxy(
    argument0 : Pointer[IEnumSTATSTG2],
    argument1 : Pointer[Pointer[IEnumSTATSTG2]]) : CLong;

external (stdcall) IEnumSTATSTG_Clone_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IStorage_CreateStream_Proxy(
    argument0 : Pointer[IStorage2],
    argument1 : Pointer[UShort],
    argument2 : CULong,
    argument3 : CULong,
    argument4 : CULong,
    argument5 : Pointer[Pointer[IStream2]]) : CLong;

external (stdcall) IStorage_CreateStream_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IStorage_RemoteOpenStream_Proxy(
    argument0 : Pointer[IStorage2],
    argument1 : Pointer[UShort],
    argument2 : CULong,
    argument3 : Pointer[CUChar],
    argument4 : CULong,
    argument5 : CULong,
    argument6 : Pointer[Pointer[IStream2]]) : CLong;

external (stdcall) IStorage_RemoteOpenStream_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IStorage_CreateStorage_Proxy(
    argument0 : Pointer[IStorage2],
    argument1 : Pointer[UShort],
    argument2 : CULong,
    argument3 : CULong,
    argument4 : CULong,
    argument5 : Pointer[Pointer[IStorage2]]) : CLong;

external (stdcall) IStorage_CreateStorage_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IStorage_OpenStorage_Proxy(
    argument0 : Pointer[IStorage2],
    argument1 : Pointer[UShort],
    argument2 : Pointer[IStorage2],
    argument3 : CULong,
    argument4 : SNB,
    argument5 : CULong,
    argument6 : Pointer[Pointer[IStorage2]]) : CLong;

external (stdcall) IStorage_OpenStorage_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IStorage_CopyTo_Proxy(
    argument0 : Pointer[IStorage2],
    argument1 : CULong,
    argument2 : Pointer[IID],
    argument3 : SNB,
    argument4 : Pointer[IStorage2]) : CLong;

external (stdcall) IStorage_CopyTo_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IStorage_MoveElementTo_Proxy(
    argument0 : Pointer[IStorage2],
    argument1 : Pointer[UShort],
    argument2 : Pointer[IStorage2],
    argument3 : Pointer[UShort],
    argument4 : CULong) : CLong;

external (stdcall) IStorage_MoveElementTo_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IStorage_Commit_Proxy(
    argument0 : Pointer[IStorage2],
    argument1 : CULong) : CLong;

external (stdcall) IStorage_Commit_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IStorage_Revert_Proxy(
    argument0 : Pointer[IStorage2]) : CLong;

external (stdcall) IStorage_Revert_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IStorage_RemoteEnumElements_Proxy(
    argument0 : Pointer[IStorage2],
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[CUChar],
    argument4 : CULong,
    argument5 : Pointer[Pointer[IEnumSTATSTG2]]) : CLong;

external (stdcall) IStorage_RemoteEnumElements_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IStorage_DestroyElement_Proxy(
    argument0 : Pointer[IStorage2],
    argument1 : Pointer[UShort]) : CLong;

external (stdcall) IStorage_DestroyElement_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IStorage_RenameElement_Proxy(
    argument0 : Pointer[IStorage2],
    argument1 : Pointer[UShort],
    argument2 : Pointer[UShort]) : CLong;

external (stdcall) IStorage_RenameElement_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IStorage_SetElementTimes_Proxy(
    argument0 : Pointer[IStorage2],
    argument1 : Pointer[UShort],
    argument2 : Pointer[FILETIME],
    argument3 : Pointer[FILETIME],
    argument4 : Pointer[FILETIME]) : CLong;

external (stdcall) IStorage_SetElementTimes_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IStorage_SetClass_Proxy(
    argument0 : Pointer[IStorage2],
    argument1 : Pointer[CLSID]) : CLong;

external (stdcall) IStorage_SetClass_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IStorage_SetStateBits_Proxy(
    argument0 : Pointer[IStorage2],
    argument1 : CULong,
    argument2 : CULong) : CLong;

external (stdcall) IStorage_SetStateBits_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IStorage_Stat_Proxy(
    argument0 : Pointer[IStorage2],
    argument1 : Pointer[STATSTG],
    argument2 : CULong) : CLong;

external (stdcall) IStorage_Stat_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IPersistFile_IsDirty_Proxy(
    argument0 : Pointer[IPersistFile2]) : CLong;

external (stdcall) IPersistFile_IsDirty_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IPersistFile_Load_Proxy(
    argument0 : Pointer[IPersistFile2],
    argument1 : LPCOLESTR,
    argument2 : CULong) : CLong;

external (stdcall) IPersistFile_Load_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IPersistFile_Save_Proxy(
    argument0 : Pointer[IPersistFile2],
    pszFileName : LPCOLESTR,
    argument2 : Int) : CLong;

external (stdcall) IPersistFile_Save_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IPersistFile_SaveCompleted_Proxy(
    argument0 : Pointer[IPersistFile2],
    argument1 : LPCOLESTR) : CLong;

external (stdcall) IPersistFile_SaveCompleted_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IPersistFile_GetCurFile_Proxy(
    argument0 : Pointer[IPersistFile2],
    argument1 : Pointer[LPCSTR]) : CLong;

external (stdcall) IPersistFile_GetCurFile_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IPersistStorage_IsDirty_Proxy(
    argument0 : Pointer[IPersistStorage2]) : CLong;

external (stdcall) IPersistStorage_IsDirty_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IPersistStorage_InitNew_Proxy(
    argument0 : Pointer[IPersistStorage2],
    argument1 : Pointer[IStorage2]) : CLong;

external (stdcall) IPersistStorage_InitNew_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IPersistStorage_Load_Proxy(
    argument0 : Pointer[IPersistStorage2],
    argument1 : Pointer[IStorage2]) : CLong;

external (stdcall) IPersistStorage_Load_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IPersistStorage_Save_Proxy(
    argument0 : Pointer[IPersistStorage2],
    argument1 : Pointer[IStorage2],
    argument2 : Int) : CLong;

external (stdcall) IPersistStorage_Save_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IPersistStorage_SaveCompleted_Proxy(
    argument0 : Pointer[IPersistStorage2],
    argument1 : Pointer[IStorage2]) : CLong;

external (stdcall) IPersistStorage_SaveCompleted_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IPersistStorage_HandsOffStorage_Proxy(
    argument0 : Pointer[IPersistStorage2]) : CLong;

external (stdcall) IPersistStorage_HandsOffStorage_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) ILockBytes_RemoteReadAt_Proxy(
    argument0 : Pointer[ILockBytes2],
    argument1 : ULARGE_INTEGER,
    argument2 : Pointer[CUChar],
    argument3 : CULong,
    argument4 : Pointer[CULong]) : CLong;

external (stdcall) ILockBytes_RemoteReadAt_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) ILockBytes_RemoteWriteAt_Proxy(
    argument0 : Pointer[ILockBytes2],
    argument1 : ULARGE_INTEGER,
    pv : Pointer[CUChar],
    argument3 : CULong,
    argument4 : Pointer[CULong]) : CLong;

external (stdcall) ILockBytes_RemoteWriteAt_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) ILockBytes_Flush_Proxy(
    argument0 : Pointer[ILockBytes2]) : CLong;

external (stdcall) ILockBytes_Flush_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) ILockBytes_SetSize_Proxy(
    argument0 : Pointer[ILockBytes2],
    argument1 : ULARGE_INTEGER) : CLong;

external (stdcall) ILockBytes_SetSize_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) ILockBytes_LockRegion_Proxy(
    argument0 : Pointer[ILockBytes2],
    argument1 : ULARGE_INTEGER,
    argument2 : ULARGE_INTEGER,
    argument3 : CULong) : CLong;

external (stdcall) ILockBytes_LockRegion_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) ILockBytes_UnlockRegion_Proxy(
    argument0 : Pointer[ILockBytes2],
    argument1 : ULARGE_INTEGER,
    argument2 : ULARGE_INTEGER,
    argument3 : CULong) : CLong;

external (stdcall) ILockBytes_UnlockRegion_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) ILockBytes_Stat_Proxy(
    argument0 : Pointer[ILockBytes2],
    argument1 : Pointer[STATSTG],
    argument2 : CULong) : CLong;

external (stdcall) ILockBytes_Stat_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IEnumFORMATETC_RemoteNext_Proxy(
    argument0 : Pointer[IEnumFORMATETC2],
    argument1 : CULong,
    argument2 : Pointer[FORMATETC],
    argument3 : Pointer[CULong]) : CLong;

external (stdcall) IEnumFORMATETC_RemoteNext_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IEnumFORMATETC_Skip_Proxy(
    argument0 : Pointer[IEnumFORMATETC2],
    argument1 : CULong) : CLong;

external (stdcall) IEnumFORMATETC_Skip_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IEnumFORMATETC_Reset_Proxy(
    argument0 : Pointer[IEnumFORMATETC2]) : CLong;

external (stdcall) IEnumFORMATETC_Reset_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IEnumFORMATETC_Clone_Proxy(
    argument0 : Pointer[IEnumFORMATETC2],
    argument1 : Pointer[Pointer[IEnumFORMATETC2]]) : CLong;

external (stdcall) IEnumFORMATETC_Clone_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IEnumFORMATETC_Next_Proxy(
    argument0 : Pointer[IEnumFORMATETC2],
    argument1 : CULong,
    argument2 : Pointer[FORMATETC],
    argument3 : Pointer[CULong]) : CLong;

external (stdcall) IEnumFORMATETC_Next_Stub(
    argument0 : Pointer[IEnumFORMATETC2],
    argument1 : CULong,
    argument2 : Pointer[FORMATETC],
    argument3 : Pointer[CULong]) : CLong;

external (stdcall) IEnumSTATDATA_RemoteNext_Proxy(
    argument0 : Pointer[IEnumSTATDATA2],
    argument1 : CULong,
    argument2 : Pointer[STATDATA],
    argument3 : Pointer[CULong]) : CLong;

external (stdcall) IEnumSTATDATA_RemoteNext_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IEnumSTATDATA_Skip_Proxy(
    argument0 : Pointer[IEnumSTATDATA2],
    argument1 : CULong) : CLong;

external (stdcall) IEnumSTATDATA_Skip_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IEnumSTATDATA_Reset_Proxy(
    argument0 : Pointer[IEnumSTATDATA2]) : CLong;

external (stdcall) IEnumSTATDATA_Reset_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IEnumSTATDATA_Clone_Proxy(
    argument0 : Pointer[IEnumSTATDATA2],
    argument1 : Pointer[Pointer[IEnumSTATDATA2]]) : CLong;

external (stdcall) IEnumSTATDATA_Clone_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IEnumSTATDATA_Next_Proxy(
    argument0 : Pointer[IEnumSTATDATA2],
    argument1 : CULong,
    argument2 : Pointer[STATDATA],
    argument3 : Pointer[CULong]) : CLong;

external (stdcall) IEnumSTATDATA_Next_Stub(
    argument0 : Pointer[IEnumSTATDATA2],
    argument1 : CULong,
    argument2 : Pointer[STATDATA],
    argument3 : Pointer[CULong]) : CLong;

external (stdcall) IRootStorage_SwitchToFile_Proxy(
    argument0 : Pointer[IRootStorage2],
    argument1 : LPCSTR) : CLong;

external (stdcall) IRootStorage_SwitchToFile_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IAdviseSink_RemoteOnDataChange_Proxy(
    argument0 : Pointer[IAdviseSink2],
    argument1 : Pointer[FORMATETC],
    argument2 : Pointer[RemSTGMEDIUM]) : Void;

external (stdcall) IAdviseSink_RemoteOnDataChange_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IAdviseSink_RemoteOnViewChange_Proxy(
    argument0 : Pointer[IAdviseSink2],
    argument1 : CULong,
    argument2 : CLong) : Void;

external (stdcall) IAdviseSink_RemoteOnViewChange_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IAdviseSink_RemoteOnRename_Proxy(
    argument0 : Pointer[IAdviseSink2],
    argument1 : Pointer[IMoniker2]) : Void;

external (stdcall) IAdviseSink_RemoteOnRename_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IAdviseSink_RemoteOnSave_Proxy(
    argument0 : Pointer[IAdviseSink2]) : Void;

external (stdcall) IAdviseSink_RemoteOnSave_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IAdviseSink_RemoteOnClose_Proxy(
    argument0 : Pointer[IAdviseSink2]) : CLong;

external (stdcall) IAdviseSink_RemoteOnClose_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IAdviseSink_OnDataChange_Proxy(
    argument0 : Pointer[IAdviseSink2],
    argument1 : Pointer[FORMATETC],
    argument2 : Pointer[STGMEDIUM]) : Void;

external (stdcall) IAdviseSink_OnDataChange_Stub(
    argument0 : Pointer[IAdviseSink2],
    argument1 : Pointer[FORMATETC],
    argument2 : Pointer[RemSTGMEDIUM]) : Void;

external (stdcall) IAdviseSink_OnViewChange_Proxy(
    argument0 : Pointer[IAdviseSink2],
    argument1 : CULong,
    argument2 : CLong) : Void;

external (stdcall) IAdviseSink_OnViewChange_Stub(
    argument0 : Pointer[IAdviseSink2],
    argument1 : CULong,
    argument2 : CLong) : Void;

external (stdcall) IAdviseSink_OnRename_Proxy(
    argument0 : Pointer[IAdviseSink2],
    argument1 : Pointer[IMoniker2]) : Void;

external (stdcall) IAdviseSink_OnRename_Stub(
    argument0 : Pointer[IAdviseSink2],
    argument1 : Pointer[IMoniker2]) : Void;

external (stdcall) IAdviseSink_OnSave_Proxy(
    argument0 : Pointer[IAdviseSink2]) : Void;

external (stdcall) IAdviseSink_OnSave_Stub(
    argument0 : Pointer[IAdviseSink2]) : Void;

external (stdcall) IAdviseSink_OnClose_Proxy(
    argument0 : Pointer[IAdviseSink2]) : Void;

external (stdcall) IAdviseSink_OnClose_Stub(
    argument0 : Pointer[IAdviseSink2]) : CLong;

external (stdcall) IAdviseSink2_RemoteOnLinkSrcChange_Proxy(
    argument0 : Pointer[IAdviseSink23],
    argument1 : Pointer[IMoniker2]) : Void;

external (stdcall) IAdviseSink2_RemoteOnLinkSrcChange_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IAdviseSink2_OnLinkSrcChange_Proxy(
    argument0 : Pointer[IAdviseSink23],
    argument1 : Pointer[IMoniker2]) : Void;

external (stdcall) IAdviseSink2_OnLinkSrcChange_Stub(
    argument0 : Pointer[IAdviseSink23],
    argument1 : Pointer[IMoniker2]) : Void;

external (stdcall) IDataObject_RemoteGetData_Proxy(
    argument0 : Pointer[IDataObject2],
    argument1 : Pointer[FORMATETC],
    argument2 : Pointer[Pointer[RemSTGMEDIUM]]) : CLong;

external (stdcall) IDataObject_RemoteGetData_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IDataObject_RemoteGetDataHere_Proxy(
    argument0 : Pointer[IDataObject2],
    argument1 : Pointer[FORMATETC],
    argument2 : Pointer[Pointer[RemSTGMEDIUM]]) : CLong;

external (stdcall) IDataObject_RemoteGetDataHere_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IDataObject_QueryGetData_Proxy(
    argument0 : Pointer[IDataObject2],
    argument1 : Pointer[FORMATETC]) : CLong;

external (stdcall) IDataObject_QueryGetData_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IDataObject_GetCanonicalFormatEtc_Proxy(
    argument0 : Pointer[IDataObject2],
    argument1 : Pointer[FORMATETC],
    argument2 : Pointer[FORMATETC]) : CLong;

external (stdcall) IDataObject_GetCanonicalFormatEtc_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IDataObject_RemoteSetData_Proxy(
    argument0 : Pointer[IDataObject2],
    argument1 : Pointer[FORMATETC],
    argument2 : Pointer[RemSTGMEDIUM],
    argument3 : Int) : CLong;

external (stdcall) IDataObject_RemoteSetData_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IDataObject_EnumFormatEtc_Proxy(
    argument0 : Pointer[IDataObject2],
    argument1 : CULong,
    argument2 : Pointer[Pointer[IEnumFORMATETC2]]) : CLong;

external (stdcall) IDataObject_EnumFormatEtc_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IDataObject_DAdvise_Proxy(
    argument0 : Pointer[IDataObject2],
    argument1 : Pointer[FORMATETC],
    argument2 : CULong,
    argument3 : Pointer[IAdviseSink2],
    argument4 : Pointer[CULong]) : CLong;

external (stdcall) IDataObject_DAdvise_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IDataObject_DUnadvise_Proxy(
    argument0 : Pointer[IDataObject2],
    argument1 : CULong) : CLong;

external (stdcall) IDataObject_DUnadvise_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IDataObject_EnumDAdvise_Proxy(
    argument0 : Pointer[IDataObject2],
    argument1 : Pointer[Pointer[IEnumSTATDATA2]]) : CLong;

external (stdcall) IDataObject_EnumDAdvise_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IDataObject_GetData_Proxy(
    argument0 : Pointer[IDataObject2],
    argument1 : Pointer[FORMATETC],
    argument2 : Pointer[STGMEDIUM]) : CLong;

external (stdcall) IDataObject_GetData_Stub(
    argument0 : Pointer[IDataObject2],
    argument1 : Pointer[FORMATETC],
    argument2 : Pointer[Pointer[RemSTGMEDIUM]]) : CLong;

external (stdcall) IDataObject_GetDataHere_Proxy(
    argument0 : Pointer[IDataObject2],
    argument1 : Pointer[FORMATETC],
    argument2 : Pointer[STGMEDIUM]) : CLong;

external (stdcall) IDataObject_GetDataHere_Stub(
    argument0 : Pointer[IDataObject2],
    argument1 : Pointer[FORMATETC],
    argument2 : Pointer[Pointer[RemSTGMEDIUM]]) : CLong;

external (stdcall) IDataObject_SetData_Proxy(
    argument0 : Pointer[IDataObject2],
    argument1 : Pointer[FORMATETC],
    argument2 : Pointer[STGMEDIUM],
    argument3 : Int) : CLong;

external (stdcall) IDataObject_SetData_Stub(
    argument0 : Pointer[IDataObject2],
    argument1 : Pointer[FORMATETC],
    argument2 : Pointer[RemSTGMEDIUM],
    argument3 : Int) : CLong;

external (stdcall) IDataAdviseHolder_Advise_Proxy(
    argument0 : Pointer[IDataAdviseHolder2],
    argument1 : Pointer[IDataObject2],
    argument2 : Pointer[FORMATETC],
    argument3 : CULong,
    argument4 : Pointer[IAdviseSink2],
    argument5 : Pointer[CULong]) : CLong;

external (stdcall) IDataAdviseHolder_Advise_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IDataAdviseHolder_Unadvise_Proxy(
    argument0 : Pointer[IDataAdviseHolder2],
    argument1 : CULong) : CLong;

external (stdcall) IDataAdviseHolder_Unadvise_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IDataAdviseHolder_EnumAdvise_Proxy(
    argument0 : Pointer[IDataAdviseHolder2],
    argument1 : Pointer[Pointer[IEnumSTATDATA2]]) : CLong;

external (stdcall) IDataAdviseHolder_EnumAdvise_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IDataAdviseHolder_SendOnDataChange_Proxy(
    argument0 : Pointer[IDataAdviseHolder2],
    argument1 : Pointer[IDataObject2],
    argument2 : CULong,
    argument3 : CULong) : CLong;

external (stdcall) IDataAdviseHolder_SendOnDataChange_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IMessageFilter_HandleInComingCall_Proxy(
    argument0 : Pointer[IMessageFilter2],
    argument1 : CULong,
    argument2 : HTASK,
    argument3 : CULong,
    argument4 : LPINTERFACEINFO) : CULong;

external (stdcall) IMessageFilter_HandleInComingCall_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IMessageFilter_RetryRejectedCall_Proxy(
    argument0 : Pointer[IMessageFilter2],
    argument1 : HTASK,
    argument2 : CULong,
    argument3 : CULong) : CULong;

external (stdcall) IMessageFilter_RetryRejectedCall_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IMessageFilter_MessagePending_Proxy(
    argument0 : Pointer[IMessageFilter2],
    argument1 : HTASK,
    argument2 : CULong,
    argument3 : CULong) : CULong;

external (stdcall) IMessageFilter_MessagePending_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IRpcChannelBuffer_GetBuffer_Proxy(
    argument0 : Pointer[IRpcChannelBuffer2],
    argument1 : Pointer[RPCOLEMESSAGE],
    argument2 : Pointer[IID]) : CLong;

external (stdcall) IRpcChannelBuffer_GetBuffer_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IRpcChannelBuffer_SendReceive_Proxy(
    argument0 : Pointer[IRpcChannelBuffer2],
    argument1 : Pointer[RPCOLEMESSAGE],
    argument2 : Pointer[CULong]) : CLong;

external (stdcall) IRpcChannelBuffer_SendReceive_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IRpcChannelBuffer_FreeBuffer_Proxy(
    argument0 : Pointer[IRpcChannelBuffer2],
    argument1 : Pointer[RPCOLEMESSAGE]) : CLong;

external (stdcall) IRpcChannelBuffer_FreeBuffer_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IRpcChannelBuffer_GetDestCtx_Proxy(
    argument0 : Pointer[IRpcChannelBuffer2],
    argument1 : Pointer[CULong],
    argument2 : Pointer[RawPointer]) : CLong;

external (stdcall) IRpcChannelBuffer_GetDestCtx_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IRpcChannelBuffer_IsConnected_Proxy(
    argument0 : Pointer[IRpcChannelBuffer2]) : CLong;

external (stdcall) IRpcChannelBuffer_IsConnected_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IRpcProxyBuffer_Connect_Proxy(
    argument0 : Pointer[IRpcProxyBuffer2],
    pRpcChannelBuffer : Pointer[IRpcChannelBuffer2]) : CLong;

external (stdcall) IRpcProxyBuffer_Connect_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IRpcProxyBuffer_Disconnect_Proxy(
    argument0 : Pointer[IRpcProxyBuffer2]) : Void;

external (stdcall) IRpcProxyBuffer_Disconnect_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IRpcStubBuffer_Connect_Proxy(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IUnknown2]) : CLong;

external (stdcall) IRpcStubBuffer_Connect_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IRpcStubBuffer_Disconnect_Proxy(
    argument0 : Pointer[IRpcStubBuffer2]) : Void;

external (stdcall) IRpcStubBuffer_Disconnect_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IRpcStubBuffer_Invoke_Proxy(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[RPCOLEMESSAGE],
    argument2 : Pointer[IRpcChannelBuffer2]) : CLong;

external (stdcall) IRpcStubBuffer_Invoke_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IRpcStubBuffer_IsIIDSupported_Proxy(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IID]) : Pointer[IRpcStubBuffer2];

external (stdcall) IRpcStubBuffer_IsIIDSupported_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IRpcStubBuffer_CountRefs_Proxy(
    argument0 : Pointer[IRpcStubBuffer2]) : CULong;

external (stdcall) IRpcStubBuffer_CountRefs_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IRpcStubBuffer_DebugServerQueryInterface_Proxy(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[RawPointer]) : CLong;

external (stdcall) IRpcStubBuffer_DebugServerQueryInterface_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IRpcStubBuffer_DebugServerRelease_Proxy(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : RawPointer) : Void;

external (stdcall) IRpcStubBuffer_DebugServerRelease_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IPSFactoryBuffer_CreateProxy_Proxy(
    argument0 : Pointer[IPSFactoryBuffer2],
    argument1 : Pointer[IUnknown2],
    argument2 : Pointer[IID],
    argument3 : Pointer[Pointer[IRpcProxyBuffer2]],
    argument4 : Pointer[RawPointer]) : CLong;

external (stdcall) IPSFactoryBuffer_CreateProxy_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) IPSFactoryBuffer_CreateStub_Proxy(
    argument0 : Pointer[IPSFactoryBuffer2],
    argument1 : Pointer[IID],
    argument2 : Pointer[IUnknown2],
    argument3 : Pointer[Pointer[IRpcStubBuffer2]]) : CLong;

external (stdcall) IPSFactoryBuffer_CreateStub_Stub(
    argument0 : Pointer[IRpcStubBuffer2],
    argument1 : Pointer[IRpcChannelBuffer2],
    argument2 : PRPC_MESSAGE,
    argument3 : PDWORD) : Void;

external (stdcall) SNB_to_xmit(
    argument0 : Pointer[SNB],
    argument1 : Pointer[Pointer[RemSNB]]) : Void;

external (stdcall) SNB_from_xmit(
    argument0 : Pointer[RemSNB],
    argument1 : Pointer[SNB]) : Void;

external (stdcall) SNB_free_inst(
    argument0 : Pointer[SNB]) : Void;

external (stdcall) SNB_free_xmit(
    argument0 : Pointer[RemSNB]) : Void;

external (stdcall) IEnumUnknown_Next_Proxy(
    argument0 : Pointer[IEnumUnknown2],
    argument1 : CULong,
    argument2 : Pointer[Pointer[IUnknown2]],
    argument3 : Pointer[CULong]) : CLong;

external (stdcall) IEnumUnknown_Next_Stub(
    argument0 : Pointer[IEnumUnknown2],
    argument1 : CULong,
    argument2 : Pointer[Pointer[IUnknown2]],
    argument3 : Pointer[CULong]) : CLong;

external (stdcall) IEnumMoniker_Next_Proxy(
    argument0 : Pointer[IEnumMoniker2],
    argument1 : CULong,
    argument2 : Pointer[Pointer[IMoniker2]],
    argument3 : Pointer[CULong]) : CLong;

external (stdcall) IEnumMoniker_Next_Stub(
    argument0 : Pointer[IEnumMoniker2],
    argument1 : CULong,
    argument2 : Pointer[Pointer[IMoniker2]],
    argument3 : Pointer[CULong]) : CLong;

external (stdcall) IMoniker_BindToObject_Proxy(
    argument0 : Pointer[IMoniker2],
    argument1 : Pointer[IBindCtx2],
    argument2 : Pointer[IMoniker2],
    argument3 : Pointer[IID],
    argument4 : Pointer[RawPointer]) : CLong;

external (stdcall) IMoniker_BindToObject_Stub(
    argument0 : Pointer[IMoniker2],
    argument1 : Pointer[IBindCtx2],
    argument2 : Pointer[IMoniker2],
    argument3 : Pointer[IID],
    argument4 : Pointer[Pointer[IUnknown2]]) : CLong;

external (stdcall) IMoniker_BindToStorage_Proxy(
    argument0 : Pointer[IMoniker2],
    argument1 : Pointer[IBindCtx2],
    argument2 : Pointer[IMoniker2],
    argument3 : Pointer[IID],
    argument4 : Pointer[RawPointer]) : CLong;

external (stdcall) IMoniker_BindToStorage_Stub(
    argument0 : Pointer[IMoniker2],
    argument1 : Pointer[IBindCtx2],
    argument2 : Pointer[IMoniker2],
    argument3 : Pointer[IID],
    argument4 : Pointer[Pointer[IUnknown2]]) : CLong;

external (stdcall) IEnumString_Next_Proxy(
    argument0 : Pointer[IEnumString2],
    argument1 : CULong,
    argument2 : Pointer[LPCSTR],
    argument3 : Pointer[CULong]) : CLong;

external (stdcall) IEnumString_Next_Stub(
    argument0 : Pointer[IEnumString2],
    argument1 : CULong,
    argument2 : Pointer[LPCSTR],
    argument3 : Pointer[CULong]) : CLong;

external (stdcall) IStream_Read_Proxy(
    argument0 : Pointer[IStream2],
    argument1 : RawPointer,
    argument2 : CULong,
    argument3 : Pointer[CULong]) : CLong;

external (stdcall) IStream_Read_Stub(
    argument0 : Pointer[IStream2],
    argument1 : Pointer[CUChar],
    argument2 : CULong,
    argument3 : Pointer[CULong]) : CLong;

external (stdcall) IStream_Write_Proxy(
    argument0 : Pointer[IStream2],
    argument1 : RawPointer,
    argument2 : CULong,
    argument3 : Pointer[CULong]) : CLong;

external (stdcall) IStream_Write_Stub(
    argument0 : Pointer[IStream2],
    argument1 : Pointer[CUChar],
    argument2 : CULong,
    argument3 : Pointer[CULong]) : CLong;

external (stdcall) IStream_Seek_Proxy(
    argument0 : Pointer[IStream2],
    argument1 : LARGE_INTEGER,
    argument2 : CULong,
    argument3 : Pointer[ULARGE_INTEGER]) : CLong;

external (stdcall) IStream_Seek_Stub(
    argument0 : Pointer[IStream2],
    argument1 : LARGE_INTEGER,
    argument2 : CULong,
    argument3 : Pointer[ULARGE_INTEGER]) : CLong;

external (stdcall) IStream_CopyTo_Proxy(
    argument0 : Pointer[IStream2],
    argument1 : Pointer[IStream2],
    argument2 : ULARGE_INTEGER,
    argument3 : Pointer[ULARGE_INTEGER],
    argument4 : Pointer[ULARGE_INTEGER]) : CLong;

external (stdcall) IStream_CopyTo_Stub(
    argument0 : Pointer[IStream2],
    argument1 : Pointer[IStream2],
    argument2 : ULARGE_INTEGER,
    argument3 : Pointer[ULARGE_INTEGER],
    argument4 : Pointer[ULARGE_INTEGER]) : CLong;

external (stdcall) IEnumSTATSTG_Next_Proxy(
    argument0 : Pointer[IEnumSTATSTG2],
    argument1 : CULong,
    argument2 : Pointer[STATSTG],
    argument3 : Pointer[CULong]) : CLong;

external (stdcall) IEnumSTATSTG_Next_Stub(
    argument0 : Pointer[IEnumSTATSTG2],
    argument1 : CULong,
    argument2 : Pointer[STATSTG],
    argument3 : Pointer[CULong]) : CLong;

external (stdcall) IStorage_OpenStream_Proxy(
    argument0 : Pointer[IStorage2],
    argument1 : Pointer[UShort],
    argument2 : RawPointer,
    argument3 : CULong,
    argument4 : CULong,
    argument5 : Pointer[Pointer[IStream2]]) : CLong;

external (stdcall) IStorage_OpenStream_Stub(
    argument0 : Pointer[IStorage2],
    argument1 : Pointer[UShort],
    argument2 : CULong,
    argument3 : Pointer[CUChar],
    argument4 : CULong,
    argument5 : CULong,
    argument6 : Pointer[Pointer[IStream2]]) : CLong;

external (stdcall) IStorage_EnumElements_Proxy(
    argument0 : Pointer[IStorage2],
    argument1 : CULong,
    argument2 : RawPointer,
    argument3 : CULong,
    argument4 : Pointer[Pointer[IEnumSTATSTG2]]) : CLong;

external (stdcall) IStorage_EnumElements_Stub(
    argument0 : Pointer[IStorage2],
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[CUChar],
    argument4 : CULong,
    argument5 : Pointer[Pointer[IEnumSTATSTG2]]) : CLong;

external (stdcall) ILockBytes_ReadAt_Proxy(
    argument0 : Pointer[ILockBytes2],
    argument1 : ULARGE_INTEGER,
    argument2 : RawPointer,
    argument3 : CULong,
    argument4 : Pointer[CULong]) : CLong;

external (stdcall) ILockBytes_ReadAt_Stub(
    argument0 : Pointer[ILockBytes2],
    argument1 : ULARGE_INTEGER,
    argument2 : Pointer[CUChar],
    argument3 : CULong,
    argument4 : Pointer[CULong]) : CLong;

external (stdcall) ILockBytes_WriteAt_Proxy(
    argument0 : Pointer[ILockBytes2],
    argument1 : ULARGE_INTEGER,
    argument2 : RawPointer,
    argument3 : CULong,
    argument4 : Pointer[CULong]) : CLong;

external (stdcall) ILockBytes_WriteAt_Stub(
    argument0 : Pointer[ILockBytes2],
    argument1 : ULARGE_INTEGER,
    argument2 : Pointer[CUChar],
    argument3 : CULong,
    argument4 : Pointer[CULong]) : CLong;

external GUID_NULL : IID;

external IID_IRpcChannel : IID;

external IID_IRpcStub : IID;

external IID_IStubManager : IID;

external IID_IRpcProxy : IID;

external IID_IProxyManager : IID;

external IID_IPSFactory : IID;

external IID_IInternalMoniker : IID;

external IID_IDfReserved1 : IID;

external IID_IDfReserved2 : IID;

external IID_IDfReserved3 : IID;

external CLSID_StdMarshal : CLSID;

external IID_IStub : IID;

external IID_IProxy : IID;

external IID_IEnumGeneric : IID;

external IID_IEnumHolder : IID;

external IID_IEnumCallback : IID;

external IID_IOleManager : IID;

external IID_IOlePresObj : IID;

external IID_IDebug : IID;

external IID_IDebugStream : IID;

external CLSID_PSGenObject : CLSID;

external CLSID_PSClientSite : CLSID;

external CLSID_PSClassObject : CLSID;

external CLSID_PSInPlaceActive : CLSID;

external CLSID_PSInPlaceFrame : CLSID;

external CLSID_PSDragDrop : CLSID;

external CLSID_PSBindCtx : CLSID;

external CLSID_PSEnumerators : CLSID;

external CLSID_StaticMetafile : CLSID;

external CLSID_StaticDib : CLSID;

external CID_CDfsVolume : CLSID;

external CLSID_CCDFormKrnl : CLSID;

external CLSID_CCDPropertyPage : CLSID;

external CLSID_CCDFormDialog : CLSID;

external CLSID_CCDCommandButton : CLSID;

external CLSID_CCDComboBox : CLSID;

external CLSID_CCDTextBox : CLSID;

external CLSID_CCDCheckBox : CLSID;

external CLSID_CCDLabel : CLSID;

external CLSID_CCDOptionButton : CLSID;

external CLSID_CCDListBox : CLSID;

external CLSID_CCDScrollBar : CLSID;

external CLSID_CCDGroupBox : CLSID;

external CLSID_CCDGeneralPropertyPage : CLSID;

external CLSID_CCDGenericPropertyPage : CLSID;

external CLSID_CCDFontPropertyPage : CLSID;

external CLSID_CCDColorPropertyPage : CLSID;

external CLSID_CCDLabelPropertyPage : CLSID;

external CLSID_CCDCheckBoxPropertyPage : CLSID;

external CLSID_CCDTextBoxPropertyPage : CLSID;

external CLSID_CCDOptionButtonPropertyPage : CLSID;

external CLSID_CCDListBoxPropertyPage : CLSID;

external CLSID_CCDCommandButtonPropertyPage : CLSID;

external CLSID_CCDComboBoxPropertyPage : CLSID;

external CLSID_CCDScrollBarPropertyPage : CLSID;

external CLSID_CCDGroupBoxPropertyPage : CLSID;

external CLSID_CCDXObjectPropertyPage : CLSID;

external CLSID_CStdPropertyFrame : CLSID;

external CLSID_CFormPropertyPage : CLSID;

external CLSID_CGridPropertyPage : CLSID;

external CLSID_CWSJArticlePage : CLSID;

external CLSID_CSystemPage : CLSID;

external CLSID_IdentityUnmarshal : CLSID;

external CLSID_InProcFreeMarshaler : CLSID;

external CLSID_Picture_Metafile : CLSID;

external CLSID_Picture_EnhMetafile : CLSID;

external CLSID_Picture_Dib : CLSID;

external CLSID_StdGlobalInterfaceTable : CLSID;

external GUID_TRISTATE : GUID;

static COINIT_APARTMENTTHREADED = 2;
static COINIT_MULTITHREADED = 0;
static COINIT_DISABLE_OLE1DDE = 4;
static COINIT_SPEED_OVER_MEMORY = 8;

static COINIT = Int;

static SMEXF_SERVER = 1;
static SMEXF_HANDLER = 2;

static STDMSHLFLAGS = Int;

external (stdcall) CoBuildVersion() : CULong;

external (stdcall) CoInitialize(
    argument0 : PVOID) : CLong;

external (stdcall) CoInitializeEx(
    argument0 : LPVOID,
    argument1 : CULong) : CLong;

external (stdcall) CoUninitialize() : Void;

external (stdcall) CoGetMalloc(
    argument0 : CULong,
    argument1 : Pointer[LPMALLOC]) : CLong;

external (stdcall) CoGetCurrentProcess() : CULong;

external (stdcall) CoRegisterMallocSpy(
    argument0 : LPMALLOCSPY) : CLong;

external (stdcall) CoRevokeMallocSpy() : CLong;

external (stdcall) CoCreateStandardMalloc(
    argument0 : CULong,
    argument1 : Pointer[Pointer[IMalloc2]]) : CLong;

external (stdcall) CoGetClassObject(
    argument0 : Pointer[CLSID],
    argument1 : CULong,
    argument2 : Pointer[COSERVERINFO],
    argument3 : Pointer[IID],
    argument4 : Pointer[PVOID]) : CLong;

external (stdcall) CoRegisterClassObject(
    argument0 : Pointer[CLSID],
    argument1 : LPUNKNOWN,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : PDWORD) : CLong;

external (stdcall) CoRevokeClassObject(
    argument0 : CULong) : CLong;

external (stdcall) CoGetMarshalSizeMax(
    argument0 : Pointer[CULong],
    argument1 : Pointer[IID],
    argument2 : LPUNKNOWN,
    argument3 : CULong,
    argument4 : PVOID,
    argument5 : CULong) : CLong;

external (stdcall) CoMarshalInterface(
    argument0 : LPSTREAM,
    argument1 : Pointer[IID],
    argument2 : LPUNKNOWN,
    argument3 : CULong,
    argument4 : PVOID,
    argument5 : CULong) : CLong;

external (stdcall) CoUnmarshalInterface(
    argument0 : LPSTREAM,
    argument1 : Pointer[IID],
    argument2 : Pointer[PVOID]) : CLong;

external (stdcall) CoMarshalHresult(
    argument0 : LPSTREAM,
    argument1 : CLong) : CLong;

external (stdcall) CoUnmarshalHresult(
    argument0 : LPSTREAM,
    argument1 : Pointer[CLong]) : CLong;

external (stdcall) CoReleaseMarshalData(
    argument0 : LPSTREAM) : CLong;

external (stdcall) CoDisconnectObject(
    argument0 : LPUNKNOWN,
    argument1 : CULong) : CLong;

external (stdcall) CoLockObjectExternal(
    argument0 : LPUNKNOWN,
    argument1 : Int,
    argument2 : Int) : CLong;

external (stdcall) CoGetStandardMarshal(
    argument0 : Pointer[IID],
    argument1 : LPUNKNOWN,
    argument2 : CULong,
    argument3 : PVOID,
    argument4 : CULong,
    argument5 : Pointer[LPMARSHAL]) : CLong;

external (stdcall) CoGetStdMarshalEx(
    argument0 : LPUNKNOWN,
    argument1 : CULong,
    argument2 : Pointer[LPUNKNOWN]) : CLong;

external (stdcall) CoIsHandlerConnected(
    argument0 : LPUNKNOWN) : Int;

external (stdcall) CoHasStrongExternalConnections(
    argument0 : LPUNKNOWN) : Int;

external (stdcall) CoMarshalInterThreadInterfaceInStream(
    argument0 : Pointer[IID],
    argument1 : LPUNKNOWN,
    argument2 : Pointer[LPSTREAM]) : CLong;

external (stdcall) CoGetInterfaceAndReleaseStream(
    argument0 : LPSTREAM,
    argument1 : Pointer[IID],
    argument2 : Pointer[PVOID]) : CLong;

external (stdcall) CoCreateFreeThreadedMarshaler(
    argument0 : LPUNKNOWN,
    argument1 : Pointer[LPUNKNOWN]) : CLong;

external (stdcall) CoLoadLibrary(
    argument0 : LPOLESTR,
    argument1 : Int) : HINSTANCE;

external (stdcall) CoFreeLibrary(
    argument0 : HINSTANCE) : Void;

external (stdcall) CoFreeAllLibraries() : Void;

external (stdcall) CoFreeUnusedLibraries() : Void;

external (stdcall) CoCreateInstance(
    argument0 : Pointer[CLSID],
    argument1 : LPUNKNOWN,
    argument2 : CULong,
    argument3 : Pointer[IID],
    argument4 : Pointer[PVOID]) : CLong;

external (stdcall) CoCreateInstanceEx(
    argument0 : Pointer[CLSID],
    argument1 : Pointer[IUnknown2],
    argument2 : CULong,
    argument3 : Pointer[COSERVERINFO],
    argument4 : CULong,
    argument5 : Pointer[MULTI_QI]) : CLong;

external (stdcall) StringFromCLSID(
    argument0 : Pointer[CLSID],
    argument1 : Pointer[LPOLESTR]) : CLong;

external (stdcall) CLSIDFromString(
    argument0 : LPOLESTR,
    argument1 : LPCLSID) : CLong;

external (stdcall) StringFromIID(
    argument0 : Pointer[IID],
    argument1 : Pointer[LPOLESTR]) : CLong;

external (stdcall) IIDFromString(
    argument0 : LPOLESTR,
    argument1 : LPIID) : CLong;

external (stdcall) CoIsOle1Class(
    argument0 : Pointer[CLSID]) : Int;

external (stdcall) ProgIDFromCLSID(
    argument0 : Pointer[CLSID],
    argument1 : Pointer[LPOLESTR]) : CLong;

external (stdcall) CLSIDFromProgID(
    argument0 : LPCOLESTR,
    argument1 : LPCLSID) : CLong;

external (stdcall) StringFromGUID2(
    argument0 : Pointer[GUID],
    argument1 : LPOLESTR,
    argument2 : Int) : Int;

external (stdcall) CoCreateGuid(
    argument0 : Pointer[GUID]) : CLong;

external (stdcall) CoFileTimeToDosDateTime(
    argument0 : Pointer[FILETIME],
    argument1 : LPWORD,
    argument2 : LPWORD) : Int;

external (stdcall) CoDosDateTimeToFileTime(
    argument0 : UShort,
    argument1 : UShort,
    argument2 : Pointer[FILETIME]) : Int;

external (stdcall) CoFileTimeNow(
    argument0 : Pointer[FILETIME]) : CLong;

external (stdcall) CoRegisterMessageFilter(
    argument0 : LPMESSAGEFILTER,
    argument1 : Pointer[LPMESSAGEFILTER]) : CLong;

external (stdcall) CoGetTreatAsClass(
    argument0 : Pointer[CLSID],
    argument1 : LPCLSID) : CLong;

external (stdcall) CoTreatAsClass(
    argument0 : Pointer[CLSID],
    argument1 : Pointer[CLSID]) : CLong;

static LPFNGETCLASSOBJECT = StdCallCodePointer[Pointer[_GUID],Pointer[_GUID],Pointer[RawPointer],CLong];

static LPFNCANUNLOADNOW = StdCallCodePointer[CLong];

external (stdcall) DllGetClassObject(
    argument0 : Pointer[CLSID],
    argument1 : Pointer[IID],
    argument2 : Pointer[PVOID]) : CLong;

external (stdcall) DllCanUnloadNow() : CLong;

external (stdcall) CoTaskMemAlloc(
    argument0 : CULong) : PVOID;

external (stdcall) CoTaskMemRealloc(
    argument0 : PVOID,
    argument1 : CULong) : PVOID;

external (stdcall) CoTaskMemFree(
    argument0 : PVOID) : Void;

external (stdcall) CreateDataAdviseHolder(
    argument0 : Pointer[LPDATAADVISEHOLDER]) : CLong;

external (stdcall) CreateDataCache(
    argument0 : LPUNKNOWN,
    argument1 : Pointer[CLSID],
    argument2 : Pointer[IID],
    argument3 : Pointer[PVOID]) : CLong;

external (stdcall) StgCreateDocfile(
    argument0 : Pointer[UShort],
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[Pointer[IStorage2]]) : CLong;

external (stdcall) StgCreateDocfileOnILockBytes(
    argument0 : Pointer[ILockBytes2],
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[Pointer[IStorage2]]) : CLong;

external (stdcall) StgOpenStorage(
    argument0 : Pointer[UShort],
    argument1 : Pointer[IStorage2],
    argument2 : CULong,
    argument3 : SNB,
    argument4 : CULong,
    argument5 : Pointer[Pointer[IStorage2]]) : CLong;

external (stdcall) StgOpenStorageOnILockBytes(
    argument0 : Pointer[ILockBytes2],
    argument1 : Pointer[IStorage2],
    argument2 : CULong,
    argument3 : SNB,
    argument4 : CULong,
    argument5 : Pointer[Pointer[IStorage2]]) : CLong;

external (stdcall) StgIsStorageFile(
    argument0 : Pointer[UShort]) : CLong;

external (stdcall) StgIsStorageILockBytes(
    argument0 : Pointer[ILockBytes2]) : CLong;

external (stdcall) StgSetTimes(
    argument0 : Pointer[UShort],
    argument1 : Pointer[FILETIME],
    argument2 : Pointer[FILETIME],
    argument3 : Pointer[FILETIME]) : CLong;

external (stdcall) StgCreateStorageEx(
    argument0 : Pointer[UShort],
    argument1 : CULong,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : Pointer[STGOPTIONS],
    argument5 : RawPointer,
    argument6 : Pointer[IID],
    argument7 : Pointer[RawPointer]) : CLong;

external (stdcall) StgOpenStorageEx(
    argument0 : Pointer[UShort],
    argument1 : CULong,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : Pointer[STGOPTIONS],
    argument5 : RawPointer,
    argument6 : Pointer[IID],
    argument7 : Pointer[RawPointer]) : CLong;

external (stdcall) BindMoniker(
    argument0 : LPMONIKER,
    argument1 : CULong,
    argument2 : Pointer[IID],
    argument3 : Pointer[PVOID]) : CLong;

external (stdcall) CoGetObject(
    argument0 : LPCWSTR,
    argument1 : Pointer[BIND_OPTS],
    argument2 : Pointer[IID],
    argument3 : Pointer[RawPointer]) : CLong;

external (stdcall) MkParseDisplayName(
    argument0 : LPBC,
    argument1 : LPCOLESTR,
    argument2 : Pointer[CULong],
    argument3 : Pointer[LPMONIKER]) : CLong;

external (stdcall) MonikerRelativePathTo(
    argument0 : LPMONIKER,
    argument1 : LPMONIKER,
    argument2 : Pointer[LPMONIKER],
    argument3 : Int) : CLong;

external (stdcall) MonikerCommonPrefixWith(
    argument0 : LPMONIKER,
    argument1 : LPMONIKER,
    argument2 : Pointer[LPMONIKER]) : CLong;

external (stdcall) CreateBindCtx(
    argument0 : CULong,
    argument1 : Pointer[LPBC]) : CLong;

external (stdcall) CreateGenericComposite(
    argument0 : LPMONIKER,
    argument1 : LPMONIKER,
    argument2 : Pointer[LPMONIKER]) : CLong;

external (stdcall) GetClassFile(
    argument0 : LPCOLESTR,
    argument1 : Pointer[CLSID]) : CLong;

external (stdcall) CreateFileMoniker(
    argument0 : LPCOLESTR,
    argument1 : Pointer[LPMONIKER]) : CLong;

external (stdcall) CreateItemMoniker(
    argument0 : LPCOLESTR,
    argument1 : LPCOLESTR,
    argument2 : Pointer[LPMONIKER]) : CLong;

external (stdcall) CreateAntiMoniker(
    argument0 : Pointer[LPMONIKER]) : CLong;

external (stdcall) CreatePointerMoniker(
    argument0 : LPUNKNOWN,
    argument1 : Pointer[LPMONIKER]) : CLong;

external (stdcall) GetRunningObjectTable(
    argument0 : CULong,
    argument1 : Pointer[LPRUNNINGOBJECTTABLE]) : CLong;

external (stdcall) CoInitializeSecurity(
    argument0 : PSECURITY_DESCRIPTOR,
    argument1 : CLong,
    argument2 : Pointer[SOLE_AUTHENTICATION_SERVICE],
    argument3 : RawPointer,
    argument4 : CULong,
    argument5 : CULong,
    argument6 : RawPointer,
    argument7 : CULong,
    argument8 : RawPointer) : CLong;

external (stdcall) CoGetCallContext(
    argument0 : Pointer[IID],
    argument1 : Pointer[RawPointer]) : CLong;

external (stdcall) CoQueryProxyBlanket(
    argument0 : Pointer[IUnknown2],
    argument1 : Pointer[CULong],
    argument2 : Pointer[CULong],
    argument3 : Pointer[Pointer[UShort]],
    argument4 : Pointer[CULong],
    argument5 : Pointer[CULong],
    argument6 : Pointer[RPC_AUTH_IDENTITY_HANDLE],
    argument7 : Pointer[CULong]) : CLong;

external (stdcall) CoSetProxyBlanket(
    argument0 : Pointer[IUnknown2],
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[UShort],
    argument4 : CULong,
    argument5 : CULong,
    argument6 : RPC_AUTH_IDENTITY_HANDLE,
    argument7 : CULong) : CLong;

external (stdcall) CoCopyProxy(
    argument0 : Pointer[IUnknown2],
    argument1 : Pointer[Pointer[IUnknown2]]) : CLong;

external (stdcall) CoQueryClientBlanket(
    argument0 : Pointer[CULong],
    argument1 : Pointer[CULong],
    argument2 : Pointer[Pointer[UShort]],
    argument3 : Pointer[CULong],
    argument4 : Pointer[CULong],
    argument5 : Pointer[RPC_AUTHZ_HANDLE],
    argument6 : Pointer[CULong]) : CLong;

external (stdcall) CoImpersonateClient() : CLong;

external (stdcall) CoRevertToSelf() : CLong;

external (stdcall) CoQueryAuthenticationServices(
    argument0 : Pointer[CULong],
    argument1 : Pointer[Pointer[SOLE_AUTHENTICATION_SERVICE]]) : CLong;

external (stdcall) CoSwitchCallContext(
    argument0 : Pointer[IUnknown2],
    argument1 : Pointer[Pointer[IUnknown2]]) : CLong;

external (stdcall) CoGetInstanceFromFile(
    argument0 : Pointer[COSERVERINFO],
    argument1 : Pointer[CLSID],
    argument2 : Pointer[IUnknown2],
    argument3 : CULong,
    argument4 : CULong,
    argument5 : Pointer[UShort],
    argument6 : CULong,
    argument7 : Pointer[MULTI_QI]) : CLong;

external (stdcall) CoGetInstanceFromIStorage(
    argument0 : Pointer[COSERVERINFO],
    argument1 : Pointer[CLSID],
    argument2 : Pointer[IUnknown2],
    argument3 : CULong,
    argument4 : Pointer[IStorage],
    argument5 : CULong,
    argument6 : Pointer[MULTI_QI]) : CLong;

external (stdcall) CoAddRefServerProcess() : CULong;

external (stdcall) CoReleaseServerProcess() : CULong;

external (stdcall) CoResumeClassObjects() : CLong;

external (stdcall) CoSuspendClassObjects() : CLong;

external (stdcall) CoGetPSClsid(
    argument0 : Pointer[IID],
    argument1 : Pointer[CLSID]) : CLong;

external (stdcall) CoRegisterPSClsid(
    argument0 : Pointer[IID],
    argument1 : Pointer[CLSID]) : CLong;

external IID_IDispatch : GUID;

external IID_IPropertyNotifySink : GUID;

external IID_IClassFactory2 : GUID;

external IID_IProvideClassInfo : GUID;

external IID_IProvideClassInfo2 : GUID;

external IID_IConnectionPointContainer : GUID;

external IID_IEnumConnectionPoints : GUID;

external IID_IConnectionPoint : GUID;

external IID_IEnumConnections : GUID;

external IID_IOleControl : GUID;

external IID_IOleControlSite : GUID;

external IID_ISimpleFrameSite : GUID;

external IID_IPersistStreamInit : GUID;

external IID_IPersistMemory : GUID;

external IID_IPersistPropertyBag : GUID;

external IID_IPropertyBag : GUID;

external IID_IErrorLog : GUID;

external IID_IPropertyFrame : GUID;

external IID_ISpecifyPropertyPages : GUID;

external IID_IPerPropertyBrowsing : GUID;

external IID_IPropertyPageSite : GUID;

external IID_IPropertyPage : GUID;

external IID_IPropertyPage2 : GUID;

external CLSID_CFontPropPage : GUID;

external CLSID_CColorPropPage : GUID;

external CLSID_CPicturePropPage : GUID;

external CLSID_PersistPropset : GUID;

external CLSID_ConvertVBX : GUID;

external CLSID_StdFont : GUID;

external CLSID_StdPicture : GUID;

external IID_IFont : GUID;

external IID_IFontDisp : GUID;

external IID_IPicture : GUID;

external IID_IPictureDisp : GUID;

external GUID_HIMETRIC : GUID;

external GUID_COLOR : GUID;

external GUID_XPOSPIXEL : GUID;

external GUID_YPOSPIXEL : GUID;

external GUID_XSIZEPIXEL : GUID;

external GUID_YSIZEPIXEL : GUID;

external GUID_XPOS : GUID;

external GUID_YPOS : GUID;

external GUID_XSIZE : GUID;

external GUID_YSIZE : GUID;

external GUID_OPTIONVALUEEXCLUSIVE : GUID;

external GUID_CHECKVALUEEXCLUSIVE : GUID;

external GUID_FONTNAME : GUID;

external GUID_FONTSIZE : GUID;

external GUID_FONTBOLD : GUID;

external GUID_FONTITALIC : GUID;

external GUID_FONTUNDERSCORE : GUID;

external GUID_FONTSTRIKETHROUGH : GUID;

external GUID_HANDLE : GUID;

external IID_IEnumUnknown : GUID;

external IID_IEnumString : GUID;

external IID_IEnumMoniker : GUID;

external IID_IEnumFORMATETC : GUID;

external IID_IEnumOLEVERB : GUID;

external IID_IEnumSTATDATA : GUID;

external IID_IEnumSTATSTG : GUID;

external IID_IViewObject : GUID;

external IID_IOleAdviseHolder : GUID;

external IID_IOleObject : GUID;

external IID_IOleInPlaceObject : GUID;

external IID_IOleWindow : GUID;

external IID_IOleInPlaceUIWindow : GUID;

external IID_IOleInPlaceFrame : GUID;

external IID_IOleInPlaceActiveObject : GUID;

external IID_IOleClientSite : GUID;

external IID_IOleInPlaceSite : GUID;

external IID_IParseDisplayName : GUID;

external IID_IOleContainer : GUID;

external IID_IOleItemContainer : GUID;

external IID_IOleLink : GUID;

external IID_IOleCache : GUID;

external IID_IDropSource : GUID;

external IID_IDropTarget : GUID;

external IID_IViewObject2 : GUID;

external IID_IOleCache2 : GUID;

external IID_IOleCacheControl : GUID;

static LPTYPELIB = Pointer[ITypeLib];

static LPTYPELIB2 = Pointer[ITypeLib22];

static LPCREATETYPEINFO = OpaquePointer;

static LPCREATETYPEINFO2 = OpaquePointer;

static LPCREATETYPELIB = OpaquePointer;

static LPCREATETYPELIB2 = OpaquePointer;

static LPTYPECOMP = Pointer[ITypeComp];

static LPTYPEINFO = Pointer[ITypeInfo];

static LPTYPEINFO2 = Pointer[ITypeInfo22];

static LPERRORINFO = Pointer[IErrorInfo];

static LPDISPATCH = Pointer[IDispatch];

static LPENUMVARIANT = Pointer[IEnumVARIANT];

static LPCREATEERRORINFO = Pointer[ICreateErrorInfo];

static LPSUPPORTERRORINFO = Pointer[ISupportErrorInfo];

static LPRECORDINFO = Pointer[IRecordInfo];

external IID_ITypeLib : IID;

external IID_ITypeLib2 : IID;

external IID_ICreateTypeInfo : IID;

external IID_ICreateTypeInfo2 : IID;

external IID_ICreateTypeLib : IID;

external IID_ICreateTypeLib2 : IID;

external IID_ITypeInfo : IID;

external IID_ITypeInfo2 : IID;

external IID_IErrorInfo : IID;

external IID_IEnumVARIANT : IID;

external IID_ICreateErrorInfo : IID;

external IID_ISupportErrorInfo : IID;

external IID_IRecordInfo : IID;

external IID_ITypeMarshal : IID;

static SYS_WIN16 = 0;
static SYS_WIN32 = 1;
static SYS_MAC = 2;

static SYSKIND = Int;

static LIBFLAG_FRESTRICTED = 1;
static LIBFLAG_FCONTROL = 2;
static LIBFLAG_FHIDDEN = 4;
static LIBFLAG_FHASDISKIMAGE = 8;

static LIBFLAGS = Int;

record tagTLIBATTR {
    guid : GUID;
    lcid : CULong;
    syskind : SYSKIND;
    wMajorVerNum : UShort;
    wMinorVerNum : UShort;
    wLibFlags : UShort;
}

static TLIBATTR = tagTLIBATTR;

static LPTLIBATTR = Pointer[tagTLIBATTR];

static CURRENCY = CY;

record tagSAFEARRAYBOUND {
    cElements : CULong;
    lLbound : CLong;
}

static SAFEARRAYBOUND = tagSAFEARRAYBOUND;

static LPSAFEARRAYBOUND = Pointer[tagSAFEARRAYBOUND];

record _wireSAFEARR_BSTR {
    Size : CULong;
    aBstr : Pointer[wireBSTR];
}

static SAFEARR_BSTR = _wireSAFEARR_BSTR;

record _wireSAFEARR_UNKNOWN {
    Size : CULong;
    apUnknown : Pointer[Pointer[IUnknown2]];
}

static SAFEARR_UNKNOWN = _wireSAFEARR_UNKNOWN;

record _wireSAFEARR_DISPATCH {
    Size : CULong;
    apDispatch : Pointer[LPDISPATCH];
}

static SAFEARR_DISPATCH = _wireSAFEARR_DISPATCH;

record _wireSAFEARR_VARIANT {
    Size : CULong;
    aVariant : Pointer[_wireVARIANT];
}

static SAFEARR_VARIANT = _wireSAFEARR_VARIANT;

static SF_ERROR = 10;
static SF_I1 = 16;
static SF_I2 = 2;
static SF_I4 = 3;
static SF_I8 = 20;
static SF_BSTR = 8;
static SF_UNKNOWN = 13;
static SF_DISPATCH = 9;
static SF_VARIANT = 12;

static SF_TYPE = Int;

record _wireBRECORD {
    fFlags : CULong;
    clSize : CULong;
    pRecInfo : Pointer[LPRECORDINFO];
    pRecord : Pointer[CUChar];
}

static wireBRECORD = Pointer[_wireBRECORD];

record _wireSAFEARR_BRECORD {
    Size : CULong;
    aRecord : Pointer[wireBRECORD];
}

static SAFEARR_BRECORD = _wireSAFEARR_BRECORD;

record _wireSAFEARR_HAVEIID {
    Size : CULong;
    apUnknown : Pointer[Pointer[IUnknown2]];
    iid : IID;
}

static SAFEARR_HAVEIID = _wireSAFEARR_HAVEIID;

record _wireSAFEARRAY_UNION {
    sfType : CULong;
    u : AUnionType;
}

static SAFEARRAYUNION = _wireSAFEARRAY_UNION;

record _wireSAFEARRAY {
    cDims : UShort;
    fFeatures : UShort;
    cbElements : CULong;
    cLocks : CULong;
    uArrayStructs : SAFEARRAYUNION;
    rgsabound : Array[SAFEARRAYBOUND,1];
}

static wireSAFEARRAY = Pointer[_wireSAFEARRAY];

static wirePSAFEARRAY = Pointer[wireSAFEARRAY];

record tagSAFEARRAY {
    cDims : UShort;
    fFeatures : UShort;
    cbElements : CULong;
    cLocks : CULong;
    pvData : PVOID;
    rgsabound : Array[SAFEARRAYBOUND,1];
}

static SAFEARRAY = tagSAFEARRAY;

static LPSAFEARRAY = Pointer[tagSAFEARRAY];

record tagVARIANT {
    unnamed_field0 : AUnionType;
}

static VARIANT = tagVARIANT;

static LPVARIANT = Pointer[tagVARIANT];

static VARIANTARG = VARIANT;

static LPVARIANTARG = Pointer[VARIANT];

record _wireVARIANT {
    clSize : CULong;
    rpcReserved : CULong;
    vt : UShort;
    wReserved1 : UShort;
    wReserved2 : UShort;
    wReserved3 : UShort;
    unnamed_field6 : AUnionType;
}

static wireVARIANT = Pointer[_wireVARIANT];

static DISPID = CLong;

static MEMBERID = CLong;

static HREFTYPE = CULong;

static TKIND_ENUM = 0;
static TKIND_RECORD = 1;
static TKIND_MODULE = 2;
static TKIND_INTERFACE = 3;
static TKIND_DISPATCH = 4;
static TKIND_COCLASS = 5;
static TKIND_ALIAS = 6;
static TKIND_UNION = 7;
static TKIND_MAX = 8;

static TYPEKIND = Int;

record tagTYPEDESC {
    unnamed_field0 : AUnionType;
    vt : UShort;
}

static TYPEDESC = tagTYPEDESC;

record tagARRAYDESC {
    tdescElem : TYPEDESC;
    cDims : UShort;
    rgbounds : Array[SAFEARRAYBOUND,1];
}

static ARRAYDESC = tagARRAYDESC;

record tagPARAMDESCEX {
    cBytes : CULong;
    varDefaultValue : VARIANTARG;
}

static PARAMDESCEX = tagPARAMDESCEX;

static LPPARAMDESCEX = Pointer[tagPARAMDESCEX];

record tagPARAMDESC {
    pparamdescex : LPPARAMDESCEX;
    wParamFlags : UShort;
}

static PARAMDESC = tagPARAMDESC;

static LPPARAMDESC = Pointer[tagPARAMDESC];

record tagIDLDESC {
    dwReserved : CULong;
    wIDLFlags : UShort;
}

static IDLDESC = tagIDLDESC;

static LPIDLDESC = Pointer[tagIDLDESC];

record tagELEMDESC {
    tdesc : TYPEDESC;
    unnamed_field1 : AUnionType;
}

static ELEMDESC = tagELEMDESC;

static LPELEMDESC = Pointer[tagELEMDESC];

record tagTYPEATTR {
    guid : GUID;
    lcid : CULong;
    dwReserved : CULong;
    memidConstructor : CLong;
    memidDestructor : CLong;
    lpstrSchema : LPOLESTR;
    cbSizeInstance : CULong;
    typekind : TYPEKIND;
    cFuncs : UShort;
    cVars : UShort;
    cImplTypes : UShort;
    cbSizeVft : UShort;
    cbAlignment : UShort;
    wTypeFlags : UShort;
    wMajorVerNum : UShort;
    wMinorVerNum : UShort;
    tdescAlias : TYPEDESC;
    idldescType : IDLDESC;
}

static TYPEATTR = tagTYPEATTR;

static LPTYPEATTR = Pointer[tagTYPEATTR];

record tagDISPPARAMS {
    rgvarg : Pointer[VARIANTARG];
    rgdispidNamedArgs : Pointer[CLong];
    cArgs : UInt;
    cNamedArgs : UInt;
}

static DISPPARAMS = tagDISPPARAMS;

record tagEXCEPINFO {
    wCode : UShort;
    wReserved : UShort;
    bstrSource : BSTR;
    bstrDescription : BSTR;
    bstrHelpFile : BSTR;
    dwHelpContext : CULong;
    pvReserved : PVOID;
    pfnDeferredFillIn : StdCallCodePointer[Pointer[tagEXCEPINFO],CLong];
    scode : CLong;
}

static EXCEPINFO = tagEXCEPINFO;

static LPEXCEPINFO = Pointer[tagEXCEPINFO];

static CC_FASTCALL = 0;
static CC_CDECL = 1;
static CC_MSCPASCAL = 2;
static CC_PASCAL = 2;
static CC_MACPASCAL = 3;
static CC_STDCALL = 4;
static CC_FPFASTCALL = 5;
static CC_SYSCALL = 6;
static CC_MPWCDECL = 7;
static CC_MPWPASCAL = 8;
static CC_MAX = 8;

static CALLCONV = Int;

static FUNC_VIRTUAL = 0;
static FUNC_PUREVIRTUAL = 1;
static FUNC_NONVIRTUAL = 2;
static FUNC_STATIC = 3;
static FUNC_DISPATCH = 4;

static FUNCKIND = Int;

static INVOKE_FUNC = 1;
static INVOKE_PROPERTYGET = 2;
static INVOKE_PROPERTYPUT = 4;
static INVOKE_PROPERTYPUTREF = 8;

static INVOKEKIND = Int;

record tagFUNCDESC {
    memid : CLong;
    lprgscode : Pointer[CLong];
    lprgelemdescParam : Pointer[ELEMDESC];
    funckind : FUNCKIND;
    invkind : INVOKEKIND;
    callconv : CALLCONV;
    cParams : Short;
    cParamsOpt : Short;
    oVft : Short;
    cScodes : Short;
    elemdescFunc : ELEMDESC;
    wFuncFlags : UShort;
}

static FUNCDESC = tagFUNCDESC;

static LPFUNCDESC = Pointer[tagFUNCDESC];

static VAR_PERINSTANCE = 0;
static VAR_STATIC = 1;
static VAR_CONST = 2;
static VAR_DISPATCH = 3;

static VARKIND = Int;

record tagVARDESC {
    memid : CLong;
    lpstrSchema : LPOLESTR;
    unnamed_field2 : AUnionType;
    elemdescVar : ELEMDESC;
    wVarFlags : UShort;
    varkind : VARKIND;
}

static VARDESC = tagVARDESC;

static LPVARDESC = Pointer[tagVARDESC];

static TYPEFLAG_FAPPOBJECT = 1;
static TYPEFLAG_FCANCREATE = 2;
static TYPEFLAG_FLICENSED = 4;
static TYPEFLAG_FPREDECLID = 8;
static TYPEFLAG_FHIDDEN = 16;
static TYPEFLAG_FCONTROL = 32;
static TYPEFLAG_FDUAL = 64;
static TYPEFLAG_FNONEXTENSIBLE = 128;
static TYPEFLAG_FOLEAUTOMATION = 256;
static TYPEFLAG_FRESTRICTED = 512;
static TYPEFLAG_FAGGREGATABLE = 1024;
static TYPEFLAG_FREPLACEABLE = 2048;
static TYPEFLAG_FDISPATCHABLE = 4096;
static TYPEFLAG_FREVERSEBIND = 8192;

static TYPEFLAGS = Int;

static FUNCFLAG_FRESTRICTED = 1;
static FUNCFLAG_FSOURCE = 2;
static FUNCFLAG_FBINDABLE = 4;
static FUNCFLAG_FREQUESTEDIT = 8;
static FUNCFLAG_FDISPLAYBIND = 16;
static FUNCFLAG_FDEFAULTBIND = 32;
static FUNCFLAG_FHIDDEN = 64;
static FUNCFLAG_FUSESGETLASTERROR = 128;
static FUNCFLAG_FDEFAULTCOLLELEM = 256;
static FUNCFLAG_FUIDEFAULT = 512;
static FUNCFLAG_FNONBROWSABLE = 1024;
static FUNCFLAG_FREPLACEABLE = 2048;
static FUNCFLAG_FIMMEDIATEBIND = 4096;

static FUNCFLAGS = Int;

static VARFLAG_FREADONLY = 1;
static VARFLAG_FSOURCE = 2;
static VARFLAG_FBINDABLE = 4;
static VARFLAG_FREQUESTEDIT = 8;
static VARFLAG_FDISPLAYBIND = 16;
static VARFLAG_FDEFAULTBIND = 32;
static VARFLAG_FHIDDEN = 64;
static VARFLAG_FRESTRICTED = 128;
static VARFLAG_FDEFAULTCOLLELEM = 256;
static VARFLAG_FUIDEFAULT = 512;
static VARFLAG_FNONBROWSABLE = 1024;
static VARFLAG_FREPLACEABLE = 2048;
static VARFLAG_FIMMEDIATEBIND = 4096;

static VARFLAGS = Int;

record tagCLEANLOCALSTORAGE {
    pInterface : Pointer[IUnknown2];
    pStorage : PVOID;
    flags : CULong;
}

static CLEANLOCALSTORAGE = tagCLEANLOCALSTORAGE;

record tagCUSTDATAITEM {
    guid : GUID;
    varValue : VARIANTARG;
}

static CUSTDATAITEM = tagCUSTDATAITEM;

static LPCUSTDATAITEM = Pointer[tagCUSTDATAITEM];

record tagCUSTDATA {
    cCustData : CULong;
    prgCustData : LPCUSTDATAITEM;
}

static CUSTDATA = tagCUSTDATA;

static LPCUSTDATA = Pointer[tagCUSTDATA];

static DESCKIND_NONE = 0;
static DESCKIND_FUNCDESC = 1;
static DESCKIND_VARDESC = 2;
static DESCKIND_TYPECOMP = 3;
static DESCKIND_IMPLICITAPPOBJ = 4;
static DESCKIND_MAX = 5;

static DESCKIND = Int;

static BINDPTR = AUnionType;

static LPBINDPTR = OpaquePointer;

record IDispatch {
    lpVtbl : Pointer[IDispatchVtbl2];
}

static IDispatch2 = IDispatch;

static IDispatchVtbl = IDispatchVtbl2;

record IDispatchVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[IDispatch],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[IDispatch],CULong];
    Release : StdCallCodePointer[Pointer[IDispatch],CULong];
    GetTypeInfoCount : StdCallCodePointer[Pointer[IDispatch],Pointer[UInt],CLong];
    GetTypeInfo : StdCallCodePointer[Pointer[IDispatch],UInt,CULong,Pointer[Pointer[ITypeInfo]],CLong];
    GetIDsOfNames : StdCallCodePointer[Pointer[IDispatch],Pointer[_GUID],Pointer[Pointer[UShort]],UInt,CULong,Pointer[CLong],CLong];
    Invoke : StdCallCodePointer[Pointer[IDispatch],CLong,Pointer[_GUID],CULong,UShort,Pointer[tagDISPPARAMS],Pointer[tagVARIANT],Pointer[tagEXCEPINFO],Pointer[UInt],CLong];
}

record IEnumVARIANT {
    lpVtbl : Pointer[IEnumVARIANTVtbl2];
}

static IEnumVARIANT2 = IEnumVARIANT;

static IEnumVARIANTVtbl = IEnumVARIANTVtbl2;

record IEnumVARIANTVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[IEnumVARIANT],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[IEnumVARIANT],CULong];
    Release : StdCallCodePointer[Pointer[IEnumVARIANT],CULong];
    Next : StdCallCodePointer[Pointer[IEnumVARIANT],CULong,Pointer[tagVARIANT],Pointer[CULong],CLong];
    Skip : StdCallCodePointer[Pointer[IEnumVARIANT],CULong,CLong];
    Reset : StdCallCodePointer[Pointer[IEnumVARIANT],CLong];
    Clone : StdCallCodePointer[Pointer[IEnumVARIANT],Pointer[Pointer[IEnumVARIANT]],CLong];
}

record ITypeComp {
    lpVtbl : Pointer[ITypeCompVtbl2];
}

static ITypeComp2 = ITypeComp;

static ITypeCompVtbl = ITypeCompVtbl2;

record ITypeCompVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[ITypeComp],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[ITypeComp],CULong];
    Release : StdCallCodePointer[Pointer[ITypeComp],CULong];
    Bind : StdCallCodePointer[Pointer[ITypeComp],Pointer[UShort],CULong,UShort,Pointer[Pointer[ITypeInfo]],Pointer[Int],OpaquePointer,CLong];
    BindType : StdCallCodePointer[Pointer[ITypeComp],Pointer[UShort],CULong,Pointer[Pointer[ITypeInfo]],Pointer[Pointer[ITypeComp]],CLong];
}

record ITypeInfo {
    lpVtbl : Pointer[ITypeInfoVtbl2];
}

static ITypeInfo2 = ITypeInfo;

static ITypeInfoVtbl = ITypeInfoVtbl2;

record ITypeInfoVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[ITypeInfo],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[ITypeInfo],CULong];
    Release : StdCallCodePointer[Pointer[ITypeInfo],CULong];
    GetTypeAttr : StdCallCodePointer[Pointer[ITypeInfo],Pointer[Pointer[tagTYPEATTR]],CLong];
    GetTypeComp : StdCallCodePointer[Pointer[ITypeInfo],Pointer[Pointer[ITypeComp]],CLong];
    GetFuncDesc : StdCallCodePointer[Pointer[ITypeInfo],UInt,Pointer[Pointer[tagFUNCDESC]],CLong];
    GetVarDesc : StdCallCodePointer[Pointer[ITypeInfo],UInt,Pointer[Pointer[tagVARDESC]],CLong];
    GetNames : StdCallCodePointer[Pointer[ITypeInfo],CLong,Pointer[Pointer[UShort]],UInt,Pointer[UInt],CLong];
    GetRefTypeOfImplType : StdCallCodePointer[Pointer[ITypeInfo],UInt,Pointer[CULong],CLong];
    GetImplTypeFlags : StdCallCodePointer[Pointer[ITypeInfo],UInt,Pointer[Int],CLong];
    GetIDsOfNames : StdCallCodePointer[Pointer[ITypeInfo],Pointer[Pointer[UShort]],UInt,Pointer[CLong],CLong];
    Invoke : StdCallCodePointer[Pointer[ITypeInfo],RawPointer,CLong,UShort,Pointer[tagDISPPARAMS],Pointer[tagVARIANT],Pointer[tagEXCEPINFO],Pointer[UInt],CLong];
    GetDocumentation : StdCallCodePointer[Pointer[ITypeInfo],CLong,Pointer[Pointer[UShort]],Pointer[Pointer[UShort]],Pointer[CULong],Pointer[Pointer[UShort]],CLong];
    GetDllEntry : StdCallCodePointer[Pointer[ITypeInfo],CLong,Int,Pointer[Pointer[UShort]],Pointer[Pointer[UShort]],Pointer[UShort],CLong];
    GetRefTypeInfo : StdCallCodePointer[Pointer[ITypeInfo],CULong,Pointer[Pointer[ITypeInfo]],CLong];
    AddressOfMember : StdCallCodePointer[Pointer[ITypeInfo],CLong,Int,Pointer[RawPointer],CLong];
    CreateInstance : StdCallCodePointer[Pointer[ITypeInfo],Pointer[IUnknown],Pointer[_GUID],Pointer[RawPointer],CLong];
    GetMops : StdCallCodePointer[Pointer[ITypeInfo],CLong,Pointer[Pointer[UShort]],CLong];
    GetContainingTypeLib : StdCallCodePointer[Pointer[ITypeInfo],Pointer[Pointer[ITypeLib]],Pointer[UInt],CLong];
    ReleaseTypeAttr : StdCallCodePointer[Pointer[ITypeInfo],Pointer[tagTYPEATTR],Void];
    ReleaseFuncDesc : StdCallCodePointer[Pointer[ITypeInfo],Pointer[tagFUNCDESC],Void];
    ReleaseVarDesc : StdCallCodePointer[Pointer[ITypeInfo],Pointer[tagVARDESC],Void];
}

record ITypeInfo22 {
    lpVtbl : Pointer[ITypeInfo2Vtbl2];
}

static ITypeInfo23 = ITypeInfo22;

static ITypeInfo2Vtbl = ITypeInfo2Vtbl2;

record ITypeInfo2Vtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[ITypeInfo22],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[ITypeInfo22],CULong];
    Release : StdCallCodePointer[Pointer[ITypeInfo22],CULong];
    GetTypeAttr : StdCallCodePointer[Pointer[ITypeInfo22],Pointer[Pointer[tagTYPEATTR]],CLong];
    GetTypeComp : StdCallCodePointer[Pointer[ITypeInfo22],Pointer[Pointer[ITypeComp]],CLong];
    GetFuncDesc : StdCallCodePointer[Pointer[ITypeInfo22],UInt,Pointer[Pointer[tagFUNCDESC]],CLong];
    GetVarDesc : StdCallCodePointer[Pointer[ITypeInfo22],UInt,Pointer[Pointer[tagVARDESC]],CLong];
    GetNames : StdCallCodePointer[Pointer[ITypeInfo22],CLong,Pointer[Pointer[UShort]],UInt,Pointer[UInt],CLong];
    GetRefTypeOfImplType : StdCallCodePointer[Pointer[ITypeInfo22],UInt,Pointer[CULong],CLong];
    GetImplTypeFlags : StdCallCodePointer[Pointer[ITypeInfo22],UInt,Pointer[Int],CLong];
    GetIDsOfNames : StdCallCodePointer[Pointer[ITypeInfo22],Pointer[Pointer[UShort]],UInt,Pointer[CLong],CLong];
    Invoke : StdCallCodePointer[Pointer[ITypeInfo22],RawPointer,CLong,UShort,Pointer[tagDISPPARAMS],Pointer[tagVARIANT],Pointer[tagEXCEPINFO],Pointer[UInt],CLong];
    GetDocumentation : StdCallCodePointer[Pointer[ITypeInfo22],CLong,Pointer[Pointer[UShort]],Pointer[Pointer[UShort]],Pointer[CULong],Pointer[Pointer[UShort]],CLong];
    GetDllEntry : StdCallCodePointer[Pointer[ITypeInfo22],CLong,Int,Pointer[Pointer[UShort]],Pointer[Pointer[UShort]],Pointer[UShort],CLong];
    GetRefTypeInfo : StdCallCodePointer[Pointer[ITypeInfo22],CULong,Pointer[Pointer[ITypeInfo]],CLong];
    AddressOfMember : StdCallCodePointer[Pointer[ITypeInfo22],CLong,Int,Pointer[RawPointer],CLong];
    CreateInstance : StdCallCodePointer[Pointer[ITypeInfo22],Pointer[IUnknown],Pointer[_GUID],Pointer[RawPointer],CLong];
    GetMops : StdCallCodePointer[Pointer[ITypeInfo22],CLong,Pointer[Pointer[UShort]],CLong];
    GetContainingTypeLib : StdCallCodePointer[Pointer[ITypeInfo22],Pointer[Pointer[ITypeLib]],Pointer[UInt],CLong];
    ReleaseTypeAttr : StdCallCodePointer[Pointer[ITypeInfo22],Pointer[tagTYPEATTR],Void];
    ReleaseFuncDesc : StdCallCodePointer[Pointer[ITypeInfo22],Pointer[tagFUNCDESC],Void];
    ReleaseVarDesc : StdCallCodePointer[Pointer[ITypeInfo22],Pointer[tagVARDESC],Void];
    GetTypeKind : StdCallCodePointer[Pointer[ITypeInfo22],Pointer[Int],CLong];
    GetTypeFlags : StdCallCodePointer[Pointer[ITypeInfo22],Pointer[CULong],CLong];
    GetFuncIndexOfMemId : StdCallCodePointer[Pointer[ITypeInfo22],CLong,Int,Pointer[UInt],CLong];
    GetVarIndexOfMemId : StdCallCodePointer[Pointer[ITypeInfo22],CLong,Pointer[UInt],CLong];
    GetCustData : StdCallCodePointer[Pointer[ITypeInfo22],Pointer[_GUID],Pointer[tagVARIANT],CLong];
    GetFuncCustData : StdCallCodePointer[Pointer[ITypeInfo22],UInt,Pointer[_GUID],Pointer[tagVARIANT],CLong];
    GetParamCustData : StdCallCodePointer[Pointer[ITypeInfo22],UInt,UInt,Pointer[_GUID],Pointer[tagVARIANT],CLong];
    GetVarCustData : StdCallCodePointer[Pointer[ITypeInfo22],UInt,Pointer[_GUID],Pointer[tagVARIANT],CLong];
    GetImplTypeCustData : StdCallCodePointer[Pointer[ITypeInfo22],UInt,Pointer[_GUID],Pointer[tagVARIANT],CLong];
    GetDocumentation2 : StdCallCodePointer[Pointer[ITypeInfo22],CLong,CULong,Pointer[Pointer[UShort]],Pointer[CULong],Pointer[Pointer[UShort]],CLong];
    GetAllCustData : StdCallCodePointer[Pointer[ITypeInfo22],Pointer[tagCUSTDATA],CLong];
    GetAllFuncCustData : StdCallCodePointer[Pointer[ITypeInfo22],UInt,Pointer[tagCUSTDATA],CLong];
    GetAllParamCustData : StdCallCodePointer[Pointer[ITypeInfo22],UInt,UInt,Pointer[tagCUSTDATA],CLong];
    GetAllVarCustData : StdCallCodePointer[Pointer[ITypeInfo22],UInt,Pointer[tagCUSTDATA],CLong];
    GetAllImplTypeCustData : StdCallCodePointer[Pointer[ITypeInfo22],UInt,Pointer[tagCUSTDATA],CLong];
}

record ITypeLib {
    lpVtbl : Pointer[ITypeLibVtbl2];
}

static ITypeLib2 = ITypeLib;

static ITypeLibVtbl = ITypeLibVtbl2;

record ITypeLibVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[ITypeLib],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[ITypeLib],CULong];
    Release : StdCallCodePointer[Pointer[ITypeLib],CULong];
    GetTypeInfoCount : StdCallCodePointer[Pointer[ITypeLib],UInt];
    GetTypeInfo : StdCallCodePointer[Pointer[ITypeLib],UInt,Pointer[Pointer[ITypeInfo]],CLong];
    GetTypeInfoType : StdCallCodePointer[Pointer[ITypeLib],UInt,Pointer[Int],CLong];
    GetTypeInfoOfGuid : StdCallCodePointer[Pointer[ITypeLib],Pointer[_GUID],Pointer[Pointer[ITypeInfo]],CLong];
    GetLibAttr : StdCallCodePointer[Pointer[ITypeLib],Pointer[Pointer[tagTLIBATTR]],CLong];
    GetTypeComp : StdCallCodePointer[Pointer[ITypeLib],Pointer[ITypeComp],CLong];
    GetDocumentation : StdCallCodePointer[Pointer[ITypeLib],Int,Pointer[Pointer[UShort]],Pointer[Pointer[UShort]],Pointer[CULong],Pointer[Pointer[UShort]],CLong];
    IsName : StdCallCodePointer[Pointer[ITypeLib],Pointer[UShort],CULong,Pointer[Int],CLong];
    FindName : StdCallCodePointer[Pointer[ITypeLib],Pointer[UShort],CULong,Pointer[Pointer[ITypeInfo]],Pointer[CLong],Pointer[UShort],CLong];
    ReleaseTLibAttr : StdCallCodePointer[Pointer[ITypeLib],Pointer[tagTLIBATTR],Void];
}

record ITypeLib22 {
    lpVtbl : Pointer[ITypeLib2Vtbl2];
}

static ITypeLib23 = ITypeLib22;

static ITypeLib2Vtbl = ITypeLib2Vtbl2;

record ITypeLib2Vtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[ITypeLib22],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[ITypeLib22],CULong];
    Release : StdCallCodePointer[Pointer[ITypeLib22],CULong];
    GetTypeInfoCount : StdCallCodePointer[Pointer[ITypeLib22],UInt];
    GetTypeInfo : StdCallCodePointer[Pointer[ITypeLib22],UInt,Pointer[Pointer[ITypeInfo]],CLong];
    GetTypeInfoType : StdCallCodePointer[Pointer[ITypeLib22],UInt,Pointer[Int],CLong];
    GetTypeInfoOfGuid : StdCallCodePointer[Pointer[ITypeLib22],Pointer[_GUID],Pointer[Pointer[ITypeInfo]],CLong];
    GetLibAttr : StdCallCodePointer[Pointer[ITypeLib22],Pointer[Pointer[tagTLIBATTR]],CLong];
    GetTypeComp : StdCallCodePointer[Pointer[ITypeLib22],Pointer[ITypeComp],CLong];
    GetDocumentation : StdCallCodePointer[Pointer[ITypeLib22],Int,Pointer[Pointer[UShort]],Pointer[Pointer[UShort]],Pointer[CULong],Pointer[Pointer[UShort]],CLong];
    IsName : StdCallCodePointer[Pointer[ITypeLib22],Pointer[UShort],CULong,Pointer[Int],CLong];
    FindName : StdCallCodePointer[Pointer[ITypeLib22],Pointer[UShort],CULong,Pointer[Pointer[ITypeInfo]],Pointer[CLong],Pointer[UShort],CLong];
    ReleaseTLibAttr : StdCallCodePointer[Pointer[ITypeLib22],Pointer[tagTLIBATTR],Void];
    GetCustData : StdCallCodePointer[Pointer[ITypeLib22],Pointer[_GUID],Pointer[tagVARIANT],CLong];
    GetLibStatistics : StdCallCodePointer[Pointer[ITypeLib22],Pointer[CULong],Pointer[CULong],CLong];
    GetDocumentation2 : StdCallCodePointer[Pointer[ITypeLib22],Int,CULong,Pointer[Pointer[UShort]],Pointer[CULong],Pointer[Pointer[UShort]],CLong];
    GetAllCustData : StdCallCodePointer[Pointer[ITypeLib22],Pointer[tagCUSTDATA],CLong];
}

record IErrorInfo {
    lpVtbl : Pointer[IErrorInfoVtbl2];
}

static IErrorInfo2 = IErrorInfo;

static IErrorInfoVtbl = IErrorInfoVtbl2;

record IErrorInfoVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[IErrorInfo],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[IErrorInfo],CULong];
    Release : StdCallCodePointer[Pointer[IErrorInfo],CULong];
    GetGUID : StdCallCodePointer[Pointer[IErrorInfo],Pointer[_GUID],CLong];
    GetSource : StdCallCodePointer[Pointer[IErrorInfo],Pointer[Pointer[UShort]],CLong];
    GetDescription : StdCallCodePointer[Pointer[IErrorInfo],Pointer[Pointer[UShort]],CLong];
    GetHelpFile : StdCallCodePointer[Pointer[IErrorInfo],Pointer[Pointer[UShort]],CLong];
    GetHelpContext : StdCallCodePointer[Pointer[IErrorInfo],Pointer[CULong],CLong];
}

record ICreateErrorInfo {
    lpVtbl : Pointer[ICreateErrorInfoVtbl2];
}

static ICreateErrorInfo2 = ICreateErrorInfo;

static ICreateErrorInfoVtbl = ICreateErrorInfoVtbl2;

record ICreateErrorInfoVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[ICreateErrorInfo],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[ICreateErrorInfo],CULong];
    Release : StdCallCodePointer[Pointer[ICreateErrorInfo],CULong];
    SetGUID : StdCallCodePointer[Pointer[ICreateErrorInfo],Pointer[_GUID],CLong];
    SetSource : StdCallCodePointer[Pointer[ICreateErrorInfo],Pointer[UShort],CLong];
    SetDescription : StdCallCodePointer[Pointer[ICreateErrorInfo],Pointer[UShort],CLong];
    SetHelpFile : StdCallCodePointer[Pointer[ICreateErrorInfo],Pointer[UShort],CLong];
    SetHelpContext : StdCallCodePointer[Pointer[ICreateErrorInfo],CULong,CLong];
}

record ISupportErrorInfo {
    lpVtbl : Pointer[ISupportErrorInfoVtbl2];
}

static ISupportErrorInfo2 = ISupportErrorInfo;

static ISupportErrorInfoVtbl = ISupportErrorInfoVtbl2;

record ISupportErrorInfoVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[ISupportErrorInfo],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[ISupportErrorInfo],CULong];
    Release : StdCallCodePointer[Pointer[ISupportErrorInfo],CULong];
    InterfaceSupportsErrorInfo : StdCallCodePointer[Pointer[ISupportErrorInfo],Pointer[_GUID],CLong];
}

record IRecordInfo {
    lpVtbl : Pointer[IRecordInfoVtbl2];
}

static IRecordInfo2 = IRecordInfo;

static IRecordInfoVtbl = IRecordInfoVtbl2;

record IRecordInfoVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[IRecordInfo],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[IRecordInfo],CULong];
    Release : StdCallCodePointer[Pointer[IRecordInfo],CULong];
    RecordInit : StdCallCodePointer[Pointer[IRecordInfo],RawPointer,CLong];
    RecordClear : StdCallCodePointer[Pointer[IRecordInfo],RawPointer,CLong];
    RecordCopy : StdCallCodePointer[Pointer[IRecordInfo],RawPointer,RawPointer,CLong];
    GetGuid : StdCallCodePointer[Pointer[IRecordInfo],Pointer[_GUID],CLong];
    GetName : StdCallCodePointer[Pointer[IRecordInfo],Pointer[Pointer[UShort]],CLong];
    GetSize : StdCallCodePointer[Pointer[IRecordInfo],Pointer[CULong],CLong];
    GetTypeInfo : StdCallCodePointer[Pointer[IRecordInfo],Pointer[Pointer[ITypeInfo]],CLong];
    GetField : StdCallCodePointer[Pointer[IRecordInfo],RawPointer,Pointer[UShort],Pointer[tagVARIANT],CLong];
    GetFieldNoCopy : StdCallCodePointer[Pointer[IRecordInfo],RawPointer,Pointer[UShort],Pointer[tagVARIANT],Pointer[RawPointer],CLong];
    PutField : StdCallCodePointer[Pointer[IRecordInfo],CULong,RawPointer,Pointer[UShort],Pointer[tagVARIANT],CLong];
    PutFieldNoCopy : StdCallCodePointer[Pointer[IRecordInfo],CULong,RawPointer,Pointer[UShort],Pointer[tagVARIANT],CLong];
    GetFieldNames : StdCallCodePointer[Pointer[IRecordInfo],Pointer[CULong],Pointer[Pointer[UShort]],CLong];
    IsMatchingType : StdCallCodePointer[Pointer[IRecordInfo],Pointer[IRecordInfo],Int];
    RecordCreate : StdCallCodePointer[Pointer[IRecordInfo],RawPointer];
    RecordCreateCopy : StdCallCodePointer[Pointer[IRecordInfo],RawPointer,Pointer[RawPointer],CLong];
    RecordDestroy : StdCallCodePointer[Pointer[IRecordInfo],RawPointer,CLong];
}

record ITypeMarshal {
    lpVtbl : Pointer[ITypeMarshalVtbl2];
}

static ITypeMarshal2 = ITypeMarshal;

static ITypeMarshalVtbl = ITypeMarshalVtbl2;

record ITypeMarshalVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[ITypeMarshal],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[ITypeMarshal],CULong];
    Release : StdCallCodePointer[Pointer[ITypeMarshal],CULong];
    Size : StdCallCodePointer[Pointer[ITypeMarshal],RawPointer,CULong,RawPointer,Pointer[CULong],CLong];
    Marshal : StdCallCodePointer[Pointer[ITypeMarshal],RawPointer,CULong,RawPointer,CULong,Pointer[CUChar],Pointer[CULong],CLong];
    Unmarshal : StdCallCodePointer[Pointer[ITypeMarshal],RawPointer,CULong,CULong,Pointer[CUChar],Pointer[CULong],CLong];
    Free : StdCallCodePointer[Pointer[ITypeMarshal],RawPointer,CLong];
}

static REGKIND_DEFAULT = 0;
static REGKIND_REGISTER = 1;
static REGKIND_NONE = 2;

static REGKIND = Int;

record tagPARAMDATA {
    szName : Pointer[UShort];
    vt : UShort;
}

static PARAMDATA = tagPARAMDATA;

static LPPARAMDATA = Pointer[tagPARAMDATA];

record tagMETHODDATA {
    szName : Pointer[UShort];
    ppdata : Pointer[PARAMDATA];
    dispid : CLong;
    iMeth : UInt;
    cc : CALLCONV;
    cArgs : UInt;
    wFlags : UShort;
    vtReturn : UShort;
}

static METHODDATA = tagMETHODDATA;

static LPMETHODDATA = Pointer[tagMETHODDATA];

record tagINTERFACEDATA {
    pmethdata : Pointer[METHODDATA];
    cMembers : UInt;
}

static INTERFACEDATA = tagINTERFACEDATA;

static LPINTERFACEDATA = Pointer[tagINTERFACEDATA];

record UnnamedRecord32 {
    st : SYSTEMTIME;
    wDayOfYear : UShort;
}

static UDATE = UnnamedRecord32;

record UnnamedRecord33 {
    cDig : Int;
    dwInFlags : CULong;
    dwOutFlags : CULong;
    cchUsed : Int;
    nBaseShift : Int;
    nPwr10 : Int;
}

static NUMPARSE = UnnamedRecord33;

external (stdcall) SysAllocString(
    argument0 : Pointer[UShort]) : BSTR;

external (stdcall) SysReAllocString(
    argument0 : Pointer[BSTR],
    argument1 : Pointer[UShort]) : Int;

external (stdcall) SysAllocStringLen(
    argument0 : Pointer[UShort],
    argument1 : UInt) : BSTR;

external (stdcall) SysReAllocStringLen(
    argument0 : Pointer[BSTR],
    argument1 : Pointer[UShort],
    argument2 : UInt) : Int;

external (stdcall) SysFreeString(
    argument0 : BSTR) : Void;

external (stdcall) SysStringLen(
    argument0 : BSTR) : UInt;

external (stdcall) SysStringByteLen(
    argument0 : BSTR) : UInt;

external (stdcall) SysAllocStringByteLen(
    argument0 : Pointer[CChar],
    argument1 : UInt) : BSTR;

external (stdcall) DosDateTimeToVariantTime(
    argument0 : UShort,
    argument1 : UShort,
    argument2 : Pointer[Double]) : Int;

external (stdcall) VariantTimeToDosDateTime(
    argument0 : Double,
    argument1 : Pointer[UShort],
    argument2 : Pointer[UShort]) : Int;

external (stdcall) VariantTimeToSystemTime(
    argument0 : Double,
    argument1 : LPSYSTEMTIME) : Int;

external (stdcall) SystemTimeToVariantTime(
    argument0 : LPSYSTEMTIME,
    argument1 : Pointer[Double]) : Int;

external (stdcall) VarDateFromUdate(
    argument0 : Pointer[UDATE],
    argument1 : CULong,
    argument2 : Pointer[Double]) : CLong;

external (stdcall) VarDateFromUdateEx(
    argument0 : Pointer[UDATE],
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[Double]) : CLong;

external (stdcall) VarUdateFromDate(
    argument0 : Double,
    argument1 : CULong,
    argument2 : Pointer[UDATE]) : CLong;

external (stdcall) SafeArrayAllocDescriptor(
    argument0 : UInt,
    argument1 : Pointer[Pointer[SAFEARRAY]]) : CLong;

external (stdcall) SafeArrayAllocData(
    argument0 : Pointer[SAFEARRAY]) : CLong;

external (stdcall) SafeArrayCreate(
    argument0 : UShort,
    argument1 : UInt,
    argument2 : Pointer[SAFEARRAYBOUND]) : Pointer[SAFEARRAY];

external (stdcall) SafeArrayDestroyDescriptor(
    argument0 : Pointer[SAFEARRAY]) : CLong;

external (stdcall) SafeArrayDestroyData(
    argument0 : Pointer[SAFEARRAY]) : CLong;

external (stdcall) SafeArrayDestroy(
    argument0 : Pointer[SAFEARRAY]) : CLong;

external (stdcall) SafeArrayRedim(
    argument0 : Pointer[SAFEARRAY],
    argument1 : Pointer[SAFEARRAYBOUND]) : CLong;

external (stdcall) SafeArrayGetDim(
    argument0 : Pointer[SAFEARRAY]) : UInt;

external (stdcall) SafeArrayGetElemsize(
    argument0 : Pointer[SAFEARRAY]) : UInt;

external (stdcall) SafeArrayGetUBound(
    argument0 : Pointer[SAFEARRAY],
    argument1 : UInt,
    argument2 : Pointer[CLong]) : CLong;

external (stdcall) SafeArrayGetLBound(
    argument0 : Pointer[SAFEARRAY],
    argument1 : UInt,
    argument2 : Pointer[CLong]) : CLong;

external (stdcall) SafeArrayLock(
    argument0 : Pointer[SAFEARRAY]) : CLong;

external (stdcall) SafeArrayUnlock(
    argument0 : Pointer[SAFEARRAY]) : CLong;

external (stdcall) SafeArrayAccessData(
    argument0 : Pointer[SAFEARRAY],
    argument1 : Pointer[RawPointer]) : CLong;

external (stdcall) SafeArrayUnaccessData(
    argument0 : Pointer[SAFEARRAY]) : CLong;

external (stdcall) SafeArrayGetElement(
    argument0 : Pointer[SAFEARRAY],
    argument1 : Pointer[CLong],
    argument2 : RawPointer) : CLong;

external (stdcall) SafeArrayPutElement(
    argument0 : Pointer[SAFEARRAY],
    argument1 : Pointer[CLong],
    argument2 : RawPointer) : CLong;

external (stdcall) SafeArrayCopy(
    argument0 : Pointer[SAFEARRAY],
    argument1 : Pointer[Pointer[SAFEARRAY]]) : CLong;

external (stdcall) SafeArrayPtrOfIndex(
    argument0 : Pointer[SAFEARRAY],
    argument1 : Pointer[CLong],
    argument2 : Pointer[RawPointer]) : CLong;

external (stdcall) SafeArrayCreateVector(
    argument0 : UShort,
    argument1 : CLong,
    argument2 : CULong) : Pointer[SAFEARRAY];

external (stdcall) SafeArrayCreateVectorEx(
    argument0 : UShort,
    argument1 : CLong,
    argument2 : CULong,
    argument3 : LPVOID) : Pointer[SAFEARRAY];

external (stdcall) SafeArrayAllocDescriptorEx(
    argument0 : UShort,
    argument1 : UInt,
    argument2 : Pointer[Pointer[SAFEARRAY]]) : CLong;

external (stdcall) SafeArrayGetVartype(
    argument0 : Pointer[SAFEARRAY],
    argument1 : Pointer[UShort]) : CLong;

external (stdcall) SafeArraySetRecordInfo(
    argument0 : Pointer[SAFEARRAY],
    argument1 : Pointer[IRecordInfo2]) : CLong;

external (stdcall) SafeArrayGetRecordInfo(
    argument0 : Pointer[SAFEARRAY],
    argument1 : Pointer[Pointer[IRecordInfo2]]) : CLong;

external (stdcall) SafeArraySetIID(
    argument0 : Pointer[SAFEARRAY],
    argument1 : Pointer[GUID]) : CLong;

external (stdcall) SafeArrayGetIID(
    argument0 : Pointer[SAFEARRAY],
    argument1 : Pointer[GUID]) : CLong;

external (stdcall) VariantInit(
    argument0 : Pointer[VARIANTARG]) : Void;

external (stdcall) VariantClear(
    argument0 : Pointer[VARIANTARG]) : CLong;

external (stdcall) VariantCopy(
    argument0 : Pointer[VARIANTARG],
    argument1 : Pointer[VARIANTARG]) : CLong;

external (stdcall) VariantCopyInd(
    argument0 : Pointer[VARIANT],
    argument1 : Pointer[VARIANTARG]) : CLong;

external (stdcall) VariantChangeType(
    argument0 : Pointer[VARIANTARG],
    argument1 : Pointer[VARIANTARG],
    argument2 : UShort,
    argument3 : UShort) : CLong;

external (stdcall) VariantChangeTypeEx(
    argument0 : Pointer[VARIANTARG],
    argument1 : Pointer[VARIANTARG],
    argument2 : CULong,
    argument3 : UShort,
    argument4 : UShort) : CLong;

external (stdcall) VarUI1FromI2(
    argument0 : Short,
    argument1 : Pointer[CUChar]) : CLong;

external (stdcall) VarUI1FromI4(
    argument0 : CLong,
    argument1 : Pointer[CUChar]) : CLong;

external (stdcall) VarUI1FromR4(
    argument0 : Float,
    argument1 : Pointer[CUChar]) : CLong;

external (stdcall) VarUI1FromR8(
    argument0 : Double,
    argument1 : Pointer[CUChar]) : CLong;

external (stdcall) VarUI1FromCy(
    argument0 : CY,
    argument1 : Pointer[CUChar]) : CLong;

external (stdcall) VarUI1FromDate(
    argument0 : Double,
    argument1 : Pointer[CUChar]) : CLong;

external (stdcall) VarUI1FromStr(
    argument0 : Pointer[UShort],
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[CUChar]) : CLong;

external (stdcall) VarUI1FromDisp(
    argument0 : LPDISPATCH,
    argument1 : CULong,
    argument2 : Pointer[CUChar]) : CLong;

external (stdcall) VarUI1FromBool(
    argument0 : Short,
    argument1 : Pointer[CUChar]) : CLong;

external (stdcall) VarI2FromUI1(
    argument0 : CUChar,
    argument1 : Pointer[Short]) : CLong;

external (stdcall) VarI2FromI4(
    argument0 : CLong,
    argument1 : Pointer[Short]) : CLong;

external (stdcall) VarI2FromR4(
    argument0 : Float,
    argument1 : Pointer[Short]) : CLong;

external (stdcall) VarI2FromR8(
    argument0 : Double,
    argument1 : Pointer[Short]) : CLong;

external (stdcall) VarI2FromCy(
    cyIn : CY,
    argument1 : Pointer[Short]) : CLong;

external (stdcall) VarI2FromDate(
    argument0 : Double,
    argument1 : Pointer[Short]) : CLong;

external (stdcall) VarI2FromStr(
    argument0 : Pointer[UShort],
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[Short]) : CLong;

external (stdcall) VarI2FromDisp(
    argument0 : LPDISPATCH,
    argument1 : CULong,
    argument2 : Pointer[Short]) : CLong;

external (stdcall) VarI2FromBool(
    argument0 : Short,
    argument1 : Pointer[Short]) : CLong;

external (stdcall) VarI4FromUI1(
    argument0 : CUChar,
    argument1 : Pointer[CLong]) : CLong;

external (stdcall) VarI4FromI2(
    argument0 : Short,
    argument1 : Pointer[CLong]) : CLong;

external (stdcall) VarI4FromR4(
    argument0 : Float,
    argument1 : Pointer[CLong]) : CLong;

external (stdcall) VarI4FromR8(
    argument0 : Double,
    argument1 : Pointer[CLong]) : CLong;

external (stdcall) VarI4FromCy(
    argument0 : CY,
    argument1 : Pointer[CLong]) : CLong;

external (stdcall) VarI4FromDate(
    argument0 : Double,
    argument1 : Pointer[CLong]) : CLong;

external (stdcall) VarI4FromStr(
    argument0 : Pointer[UShort],
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[CLong]) : CLong;

external (stdcall) VarI4FromDisp(
    argument0 : LPDISPATCH,
    argument1 : CULong,
    argument2 : Pointer[CLong]) : CLong;

external (stdcall) VarI4FromBool(
    argument0 : Short,
    argument1 : Pointer[CLong]) : CLong;

external (stdcall) VarR4FromUI1(
    argument0 : CUChar,
    argument1 : Pointer[Float]) : CLong;

external (stdcall) VarR4FromI2(
    argument0 : Short,
    argument1 : Pointer[Float]) : CLong;

external (stdcall) VarR4FromI4(
    argument0 : CLong,
    argument1 : Pointer[Float]) : CLong;

external (stdcall) VarR4FromR8(
    argument0 : Double,
    argument1 : Pointer[Float]) : CLong;

external (stdcall) VarR4FromCy(
    argument0 : CY,
    argument1 : Pointer[Float]) : CLong;

external (stdcall) VarR4FromDate(
    argument0 : Double,
    argument1 : Pointer[Float]) : CLong;

external (stdcall) VarR4FromStr(
    argument0 : Pointer[UShort],
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[Float]) : CLong;

external (stdcall) VarR4FromDisp(
    argument0 : LPDISPATCH,
    argument1 : CULong,
    argument2 : Pointer[Float]) : CLong;

external (stdcall) VarR4FromBool(
    argument0 : Short,
    argument1 : Pointer[Float]) : CLong;

external (stdcall) VarR8FromUI1(
    argument0 : CUChar,
    argument1 : Pointer[Double]) : CLong;

external (stdcall) VarR8FromI2(
    argument0 : Short,
    argument1 : Pointer[Double]) : CLong;

external (stdcall) VarR8FromI4(
    argument0 : CLong,
    argument1 : Pointer[Double]) : CLong;

external (stdcall) VarR8FromR4(
    argument0 : Float,
    argument1 : Pointer[Double]) : CLong;

external (stdcall) VarR8FromCy(
    argument0 : CY,
    argument1 : Pointer[Double]) : CLong;

external (stdcall) VarR8FromDate(
    argument0 : Double,
    argument1 : Pointer[Double]) : CLong;

external (stdcall) VarR8FromStr(
    argument0 : Pointer[UShort],
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[Double]) : CLong;

external (stdcall) VarR8FromDisp(
    argument0 : LPDISPATCH,
    argument1 : CULong,
    argument2 : Pointer[Double]) : CLong;

external (stdcall) VarR8FromBool(
    argument0 : Short,
    argument1 : Pointer[Double]) : CLong;

external (stdcall) VarR8FromDec(
    argument0 : Pointer[DECIMAL],
    argument1 : Pointer[Double]) : CLong;

external (stdcall) VarDateFromUI1(
    argument0 : CUChar,
    argument1 : Pointer[Double]) : CLong;

external (stdcall) VarDateFromI2(
    argument0 : Short,
    argument1 : Pointer[Double]) : CLong;

external (stdcall) VarDateFromI4(
    argument0 : CLong,
    argument1 : Pointer[Double]) : CLong;

external (stdcall) VarDateFromR4(
    argument0 : Float,
    argument1 : Pointer[Double]) : CLong;

external (stdcall) VarDateFromR8(
    argument0 : Double,
    argument1 : Pointer[Double]) : CLong;

external (stdcall) VarDateFromCy(
    argument0 : CY,
    argument1 : Pointer[Double]) : CLong;

external (stdcall) VarDateFromStr(
    argument0 : Pointer[UShort],
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[Double]) : CLong;

external (stdcall) VarDateFromDisp(
    argument0 : LPDISPATCH,
    argument1 : CULong,
    argument2 : Pointer[Double]) : CLong;

external (stdcall) VarDateFromBool(
    argument0 : Short,
    argument1 : Pointer[Double]) : CLong;

external (stdcall) VarCyFromUI1(
    argument0 : CUChar,
    argument1 : Pointer[CY]) : CLong;

external (stdcall) VarCyFromI2(
    argument0 : Short,
    argument1 : Pointer[CY]) : CLong;

external (stdcall) VarCyFromI4(
    argument0 : CLong,
    argument1 : Pointer[CY]) : CLong;

external (stdcall) VarCyFromR4(
    argument0 : Float,
    argument1 : Pointer[CY]) : CLong;

external (stdcall) VarCyFromR8(
    argument0 : Double,
    argument1 : Pointer[CY]) : CLong;

external (stdcall) VarCyFromDate(
    argument0 : Double,
    argument1 : Pointer[CY]) : CLong;

external (stdcall) VarCyFromStr(
    argument0 : Pointer[UShort],
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[CY]) : CLong;

external (stdcall) VarCyFromDisp(
    argument0 : LPDISPATCH,
    argument1 : CULong,
    argument2 : Pointer[CY]) : CLong;

external (stdcall) VarCyFromBool(
    argument0 : Short,
    argument1 : Pointer[CY]) : CLong;

external (stdcall) VarBstrFromUI1(
    argument0 : CUChar,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[BSTR]) : CLong;

external (stdcall) VarBstrFromI2(
    argument0 : Short,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[BSTR]) : CLong;

external (stdcall) VarBstrFromI4(
    argument0 : CLong,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[BSTR]) : CLong;

external (stdcall) VarBstrFromR4(
    argument0 : Float,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[BSTR]) : CLong;

external (stdcall) VarBstrFromR8(
    argument0 : Double,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[BSTR]) : CLong;

external (stdcall) VarBstrFromCy(
    argument0 : CY,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[BSTR]) : CLong;

external (stdcall) VarBstrFromDate(
    argument0 : Double,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[BSTR]) : CLong;

external (stdcall) VarBstrFromDisp(
    argument0 : LPDISPATCH,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[BSTR]) : CLong;

external (stdcall) VarBstrFromBool(
    argument0 : Short,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[BSTR]) : CLong;

external (stdcall) VarBoolFromUI1(
    argument0 : CUChar,
    argument1 : Pointer[Short]) : CLong;

external (stdcall) VarBoolFromI2(
    argument0 : Short,
    argument1 : Pointer[Short]) : CLong;

external (stdcall) VarBoolFromI4(
    argument0 : CLong,
    argument1 : Pointer[Short]) : CLong;

external (stdcall) VarBoolFromR4(
    argument0 : Float,
    argument1 : Pointer[Short]) : CLong;

external (stdcall) VarBoolFromR8(
    argument0 : Double,
    argument1 : Pointer[Short]) : CLong;

external (stdcall) VarBoolFromDate(
    argument0 : Double,
    argument1 : Pointer[Short]) : CLong;

external (stdcall) VarBoolFromCy(
    argument0 : CY,
    argument1 : Pointer[Short]) : CLong;

external (stdcall) VarBoolFromStr(
    argument0 : Pointer[UShort],
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[Short]) : CLong;

external (stdcall) VarBoolFromDisp(
    argument0 : LPDISPATCH,
    argument1 : CULong,
    argument2 : Pointer[Short]) : CLong;

external (stdcall) VarDecFromR8(
    argument0 : Double,
    argument1 : Pointer[DECIMAL]) : CLong;

external (stdcall) LHashValOfNameSysA(
    argument0 : SYSKIND,
    argument1 : CULong,
    argument2 : Pointer[CChar]) : CULong;

external (stdcall) LHashValOfNameSys(
    argument0 : SYSKIND,
    argument1 : CULong,
    argument2 : Pointer[UShort]) : CULong;

external (stdcall) LoadTypeLib(
    argument0 : Pointer[UShort],
    argument1 : Pointer[LPTYPELIB]) : CLong;

external (stdcall) LoadTypeLibEx(
    argument0 : LPCOLESTR,
    argument1 : REGKIND,
    argument2 : Pointer[LPTYPELIB]) : CLong;

external (stdcall) LoadRegTypeLib(
    argument0 : Pointer[GUID],
    argument1 : UShort,
    argument2 : UShort,
    argument3 : CULong,
    argument4 : Pointer[LPTYPELIB]) : CLong;

external (stdcall) QueryPathOfRegTypeLib(
    argument0 : Pointer[GUID],
    argument1 : UShort,
    argument2 : UShort,
    argument3 : CULong,
    argument4 : LPBSTR) : CLong;

external (stdcall) RegisterTypeLib(
    argument0 : LPTYPELIB,
    argument1 : Pointer[UShort],
    argument2 : Pointer[UShort]) : CLong;

external (stdcall) UnRegisterTypeLib(
    argument0 : Pointer[GUID],
    argument1 : UShort,
    argument2 : UShort,
    argument3 : CULong,
    argument4 : SYSKIND) : CLong;

external (stdcall) CreateTypeLib(
    argument0 : SYSKIND,
    argument1 : Pointer[UShort],
    argument2 : Pointer[LPCREATETYPELIB]) : CLong;

external (stdcall) DispGetParam(
    argument0 : Pointer[DISPPARAMS],
    argument1 : UInt,
    argument2 : UShort,
    argument3 : Pointer[VARIANT],
    argument4 : Pointer[UInt]) : CLong;

external (stdcall) DispGetIDsOfNames(
    argument0 : LPTYPEINFO,
    argument1 : Pointer[Pointer[UShort]],
    argument2 : UInt,
    argument3 : Pointer[CLong]) : CLong;

external (stdcall) DispInvoke(
    argument0 : RawPointer,
    argument1 : LPTYPEINFO,
    argument2 : CLong,
    argument3 : UShort,
    argument4 : Pointer[DISPPARAMS],
    argument5 : Pointer[VARIANT],
    argument6 : Pointer[EXCEPINFO],
    argument7 : Pointer[UInt]) : CLong;

external (stdcall) CreateDispTypeInfo(
    argument0 : Pointer[INTERFACEDATA],
    argument1 : CULong,
    argument2 : Pointer[LPTYPEINFO]) : CLong;

external (stdcall) CreateStdDispatch(
    argument0 : Pointer[IUnknown2],
    argument1 : RawPointer,
    argument2 : LPTYPEINFO,
    argument3 : Pointer[Pointer[IUnknown2]]) : CLong;

external (stdcall) RegisterActiveObject(
    argument0 : Pointer[IUnknown2],
    argument1 : Pointer[CLSID],
    argument2 : CULong,
    argument3 : Pointer[CULong]) : CLong;

external (stdcall) RevokeActiveObject(
    argument0 : CULong,
    argument1 : RawPointer) : CLong;

external (stdcall) GetActiveObject(
    argument0 : Pointer[CLSID],
    argument1 : RawPointer,
    argument2 : Pointer[Pointer[IUnknown2]]) : CLong;

external (stdcall) SetErrorInfo(
    argument0 : CULong,
    argument1 : LPERRORINFO) : CLong;

external (stdcall) GetErrorInfo(
    argument0 : CULong,
    argument1 : Pointer[LPERRORINFO]) : CLong;

external (stdcall) CreateErrorInfo(
    argument0 : Pointer[LPCREATEERRORINFO]) : CLong;

external (stdcall) OaBuildVersion() : CULong;

external (stdcall) VectorFromBstr(
    argument0 : BSTR,
    argument1 : Pointer[Pointer[SAFEARRAY]]) : CLong;

external (stdcall) BstrFromVector(
    argument0 : Pointer[SAFEARRAY],
    argument1 : Pointer[BSTR]) : CLong;

external (stdcall) VarParseNumFromStr(
    argument0 : Pointer[UShort],
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[NUMPARSE],
    argument4 : Pointer[CUChar]) : CLong;

external (stdcall) VarNumFromParseNum(
    argument0 : Pointer[NUMPARSE],
    argument1 : Pointer[CUChar],
    argument2 : CULong,
    argument3 : Pointer[VARIANT]) : CLong;

external (stdcall) GetRecordInfoFromTypeInfo(
    argument0 : Pointer[ITypeInfo2],
    argument1 : Pointer[Pointer[IRecordInfo2]]) : CLong;

external (stdcall) GetRecordInfoFromGuids(
    argument0 : Pointer[GUID],
    argument1 : CULong,
    argument2 : CULong,
    argument3 : CULong,
    argument4 : Pointer[GUID],
    argument5 : Pointer[Pointer[IRecordInfo2]]) : CLong;

external (stdcall) VarAdd(
    argument0 : LPVARIANT,
    argument1 : LPVARIANT,
    argument2 : LPVARIANT) : CLong;

external (stdcall) VarSub(
    argument0 : LPVARIANT,
    argument1 : LPVARIANT,
    argument2 : LPVARIANT) : CLong;

external (stdcall) VarMul(
    argument0 : LPVARIANT,
    argument1 : LPVARIANT,
    argument2 : LPVARIANT) : CLong;

external (stdcall) VarDiv(
    argument0 : LPVARIANT,
    argument1 : LPVARIANT,
    argument2 : LPVARIANT) : CLong;

external (stdcall) VarUI1FromI8(
    argument0 : Int64,
    argument1 : Pointer[CUChar]) : CLong;

external (stdcall) VarUI1FromI1(
    argument0 : CChar,
    argument1 : Pointer[CUChar]) : CLong;

external (stdcall) VarUI1FromUI2(
    argument0 : UShort,
    argument1 : Pointer[CUChar]) : CLong;

external (stdcall) VarUI1FromUI4(
    argument0 : CULong,
    argument1 : Pointer[CUChar]) : CLong;

external (stdcall) VarUI1FromUI8(
    argument0 : UInt64,
    argument1 : Pointer[CUChar]) : CLong;

external (stdcall) VarUI1FromDec(
    argument0 : Pointer[DECIMAL],
    argument1 : Pointer[CUChar]) : CLong;

external (stdcall) VarI2FromI8(
    argument0 : Int64,
    argument1 : Pointer[Short]) : CLong;

external (stdcall) VarI2FromI1(
    argument0 : CChar,
    argument1 : Pointer[Short]) : CLong;

external (stdcall) VarI2FromUI2(
    argument0 : UShort,
    argument1 : Pointer[Short]) : CLong;

external (stdcall) VarI2FromUI4(
    argument0 : CULong,
    argument1 : Pointer[Short]) : CLong;

external (stdcall) VarI2FromUI8(
    argument0 : UInt64,
    argument1 : Pointer[Short]) : CLong;

external (stdcall) VarI2FromDec(
    argument0 : Pointer[DECIMAL],
    argument1 : Pointer[Short]) : CLong;

external (stdcall) VarI4FromI8(
    argument0 : Int64,
    argument1 : Pointer[CLong]) : CLong;

external (stdcall) VarI4FromI1(
    argument0 : CChar,
    argument1 : Pointer[CLong]) : CLong;

external (stdcall) VarI4FromUI2(
    argument0 : UShort,
    argument1 : Pointer[CLong]) : CLong;

external (stdcall) VarI4FromUI4(
    argument0 : CULong,
    argument1 : Pointer[CLong]) : CLong;

external (stdcall) VarI4FromUI8(
    argument0 : UInt64,
    argument1 : Pointer[CLong]) : CLong;

external (stdcall) VarI4FromDec(
    argument0 : Pointer[DECIMAL],
    argument1 : Pointer[CLong]) : CLong;

external (stdcall) VarI8FromUI1(
    argument0 : CUChar,
    argument1 : Pointer[Int64]) : CLong;

external (stdcall) VarI8FromI2(
    argument0 : Short,
    argument1 : Pointer[Int64]) : CLong;

external (stdcall) VarI8FromI4(
    argument0 : CLong,
    argument1 : Pointer[Int64]) : CLong;

external (stdcall) VarI8FromR4(
    argument0 : Float,
    argument1 : Pointer[Int64]) : CLong;

external (stdcall) VarI8FromR8(
    argument0 : Double,
    argument1 : Pointer[Int64]) : CLong;

external (stdcall) VarI8FromDate(
    argument0 : Double,
    argument1 : Pointer[Int64]) : CLong;

external (stdcall) VarI8FromStr(
    argument0 : Pointer[UShort],
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[Int64]) : CLong;

external (stdcall) VarI8FromBool(
    argument0 : Short,
    argument1 : Pointer[Int64]) : CLong;

external (stdcall) VarI8FromI1(
    argument0 : CChar,
    argument1 : Pointer[Int64]) : CLong;

external (stdcall) VarI8FromUI2(
    argument0 : UShort,
    argument1 : Pointer[Int64]) : CLong;

external (stdcall) VarI8FromUI4(
    argument0 : CULong,
    argument1 : Pointer[Int64]) : CLong;

external (stdcall) VarI8FromUI8(
    argument0 : UInt64,
    argument1 : Pointer[Int64]) : CLong;

external (stdcall) VarI8FromDec(
    pdecIn : Pointer[DECIMAL],
    argument1 : Pointer[Int64]) : CLong;

external (stdcall) VarI8FromInt(
    intIn : Int,
    argument1 : Pointer[Int64]) : CLong;

external (stdcall) VarI8FromCy(
    argument0 : CY,
    argument1 : Pointer[Int64]) : CLong;

external (stdcall) VarI8FromDisp(
    argument0 : Pointer[IDispatch2],
    argument1 : CULong,
    argument2 : Pointer[Int64]) : CLong;

external (stdcall) VarR4FromI8(
    argument0 : Int64,
    argument1 : Pointer[Float]) : CLong;

external (stdcall) VarR4FromI1(
    argument0 : CChar,
    argument1 : Pointer[Float]) : CLong;

external (stdcall) VarR4FromUI2(
    argument0 : UShort,
    argument1 : Pointer[Float]) : CLong;

external (stdcall) VarR4FromUI4(
    argument0 : CULong,
    argument1 : Pointer[Float]) : CLong;

external (stdcall) VarR4FromUI8(
    argument0 : UInt64,
    argument1 : Pointer[Float]) : CLong;

external (stdcall) VarR4FromDec(
    argument0 : Pointer[DECIMAL],
    argument1 : Pointer[Float]) : CLong;

external (stdcall) VarR8FromI8(
    argument0 : Int64,
    argument1 : Pointer[Double]) : CLong;

external (stdcall) VarR8FromI1(
    argument0 : CChar,
    argument1 : Pointer[Double]) : CLong;

external (stdcall) VarR8FromUI2(
    argument0 : UShort,
    argument1 : Pointer[Double]) : CLong;

external (stdcall) VarR8FromUI4(
    argument0 : CULong,
    argument1 : Pointer[Double]) : CLong;

external (stdcall) VarR8FromUI8(
    argument0 : UInt64,
    argument1 : Pointer[Double]) : CLong;

external (stdcall) VarDateFromI8(
    argument0 : Int64,
    argument1 : Pointer[Double]) : CLong;

external (stdcall) VarDateFromI1(
    argument0 : CChar,
    argument1 : Pointer[Double]) : CLong;

external (stdcall) VarDateFromUI2(
    argument0 : UShort,
    argument1 : Pointer[Double]) : CLong;

external (stdcall) VarDateFromUI4(
    argument0 : CULong,
    argument1 : Pointer[Double]) : CLong;

external (stdcall) VarDateFromUI8(
    argument0 : UInt64,
    argument1 : Pointer[Double]) : CLong;

external (stdcall) VarDateFromDec(
    argument0 : Pointer[DECIMAL],
    argument1 : Pointer[Double]) : CLong;

external (stdcall) VarCyFromI8(
    argument0 : Int64,
    argument1 : Pointer[CY]) : CLong;

external (stdcall) VarCyFromI1(
    argument0 : CChar,
    argument1 : Pointer[CY]) : CLong;

external (stdcall) VarCyFromUI2(
    argument0 : UShort,
    argument1 : Pointer[CY]) : CLong;

external (stdcall) VarCyFromUI4(
    argument0 : CULong,
    argument1 : Pointer[CY]) : CLong;

external (stdcall) VarCyFromUI8(
    argument0 : UInt64,
    argument1 : Pointer[CY]) : CLong;

external (stdcall) VarCyFromDec(
    argument0 : Pointer[DECIMAL],
    argument1 : Pointer[CY]) : CLong;

external (stdcall) VarBstrFromI8(
    argument0 : Int64,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[BSTR]) : CLong;

external (stdcall) VarBstrFromI1(
    argument0 : CChar,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[BSTR]) : CLong;

external (stdcall) VarBstrFromUI2(
    argument0 : UShort,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[BSTR]) : CLong;

external (stdcall) VarBstrFromUI8(
    argument0 : UInt64,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[BSTR]) : CLong;

external (stdcall) VarBstrFromUI4(
    argument0 : CULong,
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[BSTR]) : CLong;

external (stdcall) VarBstrFromDec(
    argument0 : Pointer[DECIMAL],
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[BSTR]) : CLong;

external (stdcall) VarBoolFromI8(
    argument0 : Int64,
    argument1 : Pointer[Short]) : CLong;

external (stdcall) VarBoolFromI1(
    argument0 : CChar,
    argument1 : Pointer[Short]) : CLong;

external (stdcall) VarBoolFromUI2(
    argument0 : UShort,
    argument1 : Pointer[Short]) : CLong;

external (stdcall) VarBoolFromUI4(
    argument0 : CULong,
    argument1 : Pointer[Short]) : CLong;

external (stdcall) VarBoolFromUI8(
    argument0 : UInt64,
    argument1 : Pointer[Short]) : CLong;

external (stdcall) VarBoolFromDec(
    argument0 : Pointer[DECIMAL],
    argument1 : Pointer[Short]) : CLong;

external (stdcall) VarI1FromUI1(
    argument0 : CUChar,
    argument1 : Pointer[CChar]) : CLong;

external (stdcall) VarI1FromI2(
    argument0 : Short,
    argument1 : Pointer[CChar]) : CLong;

external (stdcall) VarI1FromI4(
    argument0 : CLong,
    argument1 : Pointer[CChar]) : CLong;

external (stdcall) VarI1FromI8(
    argument0 : Int64,
    argument1 : Pointer[CChar]) : CLong;

external (stdcall) VarI1FromR4(
    argument0 : Float,
    argument1 : Pointer[CChar]) : CLong;

external (stdcall) VarI1FromR8(
    argument0 : Double,
    argument1 : Pointer[CChar]) : CLong;

external (stdcall) VarI1FromDate(
    argument0 : Double,
    argument1 : Pointer[CChar]) : CLong;

external (stdcall) VarI1FromStr(
    argument0 : Pointer[UShort],
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[CChar]) : CLong;

external (stdcall) VarI1FromBool(
    argument0 : Short,
    argument1 : Pointer[CChar]) : CLong;

external (stdcall) VarI1FromUI2(
    argument0 : UShort,
    argument1 : Pointer[CChar]) : CLong;

external (stdcall) VarI1FromUI4(
    argument0 : CULong,
    argument1 : Pointer[CChar]) : CLong;

external (stdcall) VarI1FromUI8(
    argument0 : UInt64,
    argument1 : Pointer[CChar]) : CLong;

external (stdcall) VarI1FromCy(
    argument0 : CY,
    argument1 : Pointer[CChar]) : CLong;

external (stdcall) VarI1FromDec(
    argument0 : Pointer[DECIMAL],
    argument1 : Pointer[CChar]) : CLong;

external (stdcall) VarI1FromDisp(
    argument0 : Pointer[IDispatch2],
    argument1 : CULong,
    argument2 : Pointer[CChar]) : CLong;

external (stdcall) VarUI2FromUI1(
    argument0 : CUChar,
    argument1 : Pointer[UShort]) : CLong;

external (stdcall) VarUI2FromI2(
    argument0 : Short,
    argument1 : Pointer[UShort]) : CLong;

external (stdcall) VarUI2FromI4(
    argument0 : CLong,
    argument1 : Pointer[UShort]) : CLong;

external (stdcall) VarUI2FromI8(
    argument0 : Int64,
    argument1 : Pointer[UShort]) : CLong;

external (stdcall) VarUI2FromR4(
    argument0 : Float,
    argument1 : Pointer[UShort]) : CLong;

external (stdcall) VarUI2FromR8(
    argument0 : Double,
    argument1 : Pointer[UShort]) : CLong;

external (stdcall) VarUI2FromDate(
    argument0 : Double,
    argument1 : Pointer[UShort]) : CLong;

external (stdcall) VarUI2FromStr(
    argument0 : Pointer[UShort],
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[UShort]) : CLong;

external (stdcall) VarUI2FromBool(
    argument0 : Short,
    argument1 : Pointer[UShort]) : CLong;

external (stdcall) VarUI2FromI1(
    argument0 : CChar,
    argument1 : Pointer[UShort]) : CLong;

external (stdcall) VarUI2FromUI4(
    argument0 : CULong,
    argument1 : Pointer[UShort]) : CLong;

external (stdcall) VarUI2FromUI8(
    argument0 : UInt64,
    argument1 : Pointer[UShort]) : CLong;

external (stdcall) VarUI2FromCy(
    argument0 : CY,
    argument1 : Pointer[UShort]) : CLong;

external (stdcall) VarUI2FromDec(
    argument0 : Pointer[DECIMAL],
    argument1 : Pointer[UShort]) : CLong;

external (stdcall) VarUI2FromDisp(
    argument0 : Pointer[IDispatch2],
    argument1 : CULong,
    argument2 : Pointer[UShort]) : CLong;

external (stdcall) VarUI4FromStr(
    argument0 : Pointer[UShort],
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[CULong]) : CLong;

external (stdcall) VarUI4FromUI1(
    argument0 : CUChar,
    argument1 : Pointer[CULong]) : CLong;

external (stdcall) VarUI4FromI2(
    argument0 : Short,
    argument1 : Pointer[CULong]) : CLong;

external (stdcall) VarUI4FromI4(
    argument0 : CLong,
    argument1 : Pointer[CULong]) : CLong;

external (stdcall) VarUI4FromI8(
    argument0 : Int64,
    argument1 : Pointer[CULong]) : CLong;

external (stdcall) VarUI4FromR4(
    argument0 : Float,
    argument1 : Pointer[CULong]) : CLong;

external (stdcall) VarUI4FromR8(
    argument0 : Double,
    argument1 : Pointer[CULong]) : CLong;

external (stdcall) VarUI4FromDate(
    argument0 : Double,
    argument1 : Pointer[CULong]) : CLong;

external (stdcall) VarUI4FromBool(
    argument0 : Short,
    argument1 : Pointer[CULong]) : CLong;

external (stdcall) VarUI4FromI1(
    argument0 : CChar,
    argument1 : Pointer[CULong]) : CLong;

external (stdcall) VarUI4FromUI2(
    argument0 : UShort,
    argument1 : Pointer[CULong]) : CLong;

external (stdcall) VarUI4FromUI8(
    argument0 : UInt64,
    argument1 : Pointer[CULong]) : CLong;

external (stdcall) VarUI4FromCy(
    argument0 : CY,
    argument1 : Pointer[CULong]) : CLong;

external (stdcall) VarUI4FromDec(
    argument0 : Pointer[DECIMAL],
    argument1 : Pointer[CULong]) : CLong;

external (stdcall) VarUI4FromDisp(
    argument0 : Pointer[IDispatch2],
    argument1 : CULong,
    argument2 : Pointer[CULong]) : CLong;

external (stdcall) VarUI8FromUI1(
    argument0 : CUChar,
    argument1 : Pointer[UInt64]) : CLong;

external (stdcall) VarUI8FromI2(
    argument0 : Short,
    argument1 : Pointer[UInt64]) : CLong;

external (stdcall) VarUI8FromI4(
    argument0 : CLong,
    argument1 : Pointer[UInt64]) : CLong;

external (stdcall) VarUI8FromI8(
    argument0 : Int64,
    argument1 : Pointer[UInt64]) : CLong;

external (stdcall) VarUI8FromR4(
    argument0 : Float,
    argument1 : Pointer[UInt64]) : CLong;

external (stdcall) VarUI8FromR8(
    argument0 : Double,
    argument1 : Pointer[UInt64]) : CLong;

external (stdcall) VarUI8FromDate(
    argument0 : Double,
    argument1 : Pointer[UInt64]) : CLong;

external (stdcall) VarUI8FromStr(
    argument0 : Pointer[UShort],
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[UInt64]) : CLong;

external (stdcall) VarUI8FromBool(
    argument0 : Short,
    argument1 : Pointer[UInt64]) : CLong;

external (stdcall) VarUI8FromI1(
    argument0 : CChar,
    argument1 : Pointer[UInt64]) : CLong;

external (stdcall) VarUI8FromUI2(
    argument0 : UShort,
    argument1 : Pointer[UInt64]) : CLong;

external (stdcall) VarUI8FromUI4(
    argument0 : CULong,
    argument1 : Pointer[UInt64]) : CLong;

external (stdcall) VarUI8FromDec(
    argument0 : Pointer[DECIMAL],
    argument1 : Pointer[UInt64]) : CLong;

external (stdcall) VarUI8FromInt(
    argument0 : Int,
    argument1 : Pointer[UInt64]) : CLong;

external (stdcall) VarUI8FromCy(
    argument0 : CY,
    argument1 : Pointer[UInt64]) : CLong;

external (stdcall) VarUI8FromDisp(
    argument0 : Pointer[IDispatch2],
    argument1 : CULong,
    argument2 : Pointer[UInt64]) : CLong;

external (stdcall) VarDecFromUI1(
    argument0 : CUChar,
    argument1 : Pointer[DECIMAL]) : CLong;

external (stdcall) VarDecFromI2(
    argument0 : Short,
    argument1 : Pointer[DECIMAL]) : CLong;

external (stdcall) VarDecFromI4(
    argument0 : CLong,
    argument1 : Pointer[DECIMAL]) : CLong;

external (stdcall) VarDecFromI8(
    argument0 : Int64,
    argument1 : Pointer[DECIMAL]) : CLong;

external (stdcall) VarDecFromR4(
    argument0 : Float,
    argument1 : Pointer[DECIMAL]) : CLong;

external (stdcall) VarDecFromDate(
    argument0 : Double,
    argument1 : Pointer[DECIMAL]) : CLong;

external (stdcall) VarDecFromStr(
    argument0 : Pointer[UShort],
    argument1 : CULong,
    argument2 : CULong,
    argument3 : Pointer[DECIMAL]) : CLong;

external (stdcall) VarDecFromBool(
    argument0 : Short,
    argument1 : Pointer[DECIMAL]) : CLong;

external (stdcall) VarDecFromI1(
    argument0 : CChar,
    argument1 : Pointer[DECIMAL]) : CLong;

external (stdcall) VarDecFromUI2(
    argument0 : UShort,
    argument1 : Pointer[DECIMAL]) : CLong;

external (stdcall) VarDecFromUI4(
    argument0 : CULong,
    argument1 : Pointer[DECIMAL]) : CLong;

external (stdcall) VarDecFromUI8(
    argument0 : UInt64,
    argument1 : Pointer[DECIMAL]) : CLong;

external (stdcall) VarDecFromCy(
    argument0 : CY,
    argument1 : Pointer[DECIMAL]) : CLong;

external (stdcall) VarDecFromDisp(
    argument0 : Pointer[IDispatch2],
    argument1 : CULong,
    argument2 : Pointer[DECIMAL]) : CLong;

external (stdcall) VarDecNeg(
    argument0 : Pointer[DECIMAL],
    argument1 : Pointer[DECIMAL]) : CLong;

external (stdcall) VarR4CmpR8(
    argument0 : Float,
    argument1 : Double) : CLong;

external (stdcall) VarR8Pow(
    argument0 : Double,
    argument1 : Double,
    argument2 : Pointer[Double]) : CLong;

external (stdcall) VarR8Round(
    argument0 : Double,
    argument1 : Int,
    argument2 : Pointer[Double]) : CLong;

external (stdcall) VarDecAbs(
    argument0 : Pointer[DECIMAL],
    argument1 : Pointer[DECIMAL]) : CLong;

external (stdcall) VarDecAdd(
    argument0 : Pointer[DECIMAL],
    argument1 : Pointer[DECIMAL],
    argument2 : Pointer[DECIMAL]) : CLong;

external (stdcall) VarDecCmp(
    argument0 : Pointer[DECIMAL],
    argument1 : Pointer[DECIMAL]) : CLong;

external (stdcall) VarDecCmpR8(
    argument0 : Pointer[DECIMAL],
    argument1 : Double) : CLong;

external (stdcall) VarDecDiv(
    argument0 : Pointer[DECIMAL],
    argument1 : Pointer[DECIMAL],
    argument2 : Pointer[DECIMAL]) : CLong;

external (stdcall) VarDecFix(
    argument0 : Pointer[DECIMAL],
    argument1 : Pointer[DECIMAL]) : CLong;

external (stdcall) VarDecInt(
    argument0 : Pointer[DECIMAL],
    argument1 : Pointer[DECIMAL]) : CLong;

external (stdcall) VarDecMul(
    argument0 : Pointer[DECIMAL],
    argument1 : Pointer[DECIMAL],
    argument2 : Pointer[DECIMAL]) : CLong;

external (stdcall) VarDecRound(
    argument0 : Pointer[DECIMAL],
    argument1 : Int,
    argument2 : Pointer[DECIMAL]) : CLong;

external (stdcall) VarDecSub(
    argument0 : Pointer[DECIMAL],
    argument1 : Pointer[DECIMAL],
    argument2 : Pointer[DECIMAL]) : CLong;

external (stdcall) VarCyAbs(
    argument0 : CY,
    argument1 : Pointer[CY]) : CLong;

external (stdcall) VarCyAdd(
    argument0 : CY,
    argument1 : CY,
    argument2 : Pointer[CY]) : CLong;

external (stdcall) VarCyCmp(
    argument0 : CY,
    argument1 : CY) : CLong;

external (stdcall) VarCyCmpR8(
    argument0 : CY,
    argument1 : Double) : CLong;

external (stdcall) VarCyFix(
    argument0 : CY,
    argument1 : Pointer[CY]) : CLong;

external (stdcall) VarCyInt(
    argument0 : CY,
    argument1 : Pointer[CY]) : CLong;

external (stdcall) VarCyMul(
    argument0 : CY,
    argument1 : CY,
    argument2 : Pointer[CY]) : CLong;

external (stdcall) VarCyMulI4(
    argument0 : CY,
    argument1 : CLong,
    argument2 : Pointer[CY]) : CLong;

external (stdcall) VarCyMulI8(
    argument0 : CY,
    argument1 : Int64,
    argument2 : Pointer[CY]) : CLong;

external (stdcall) VarCyNeg(
    argument0 : CY,
    argument1 : Pointer[CY]) : CLong;

external (stdcall) VarCyRound(
    argument0 : CY,
    argument1 : Int,
    argument2 : Pointer[CY]) : CLong;

external (stdcall) VarCySub(
    argument0 : CY,
    argument1 : CY,
    argument2 : Pointer[CY]) : CLong;

external (stdcall) VarAnd(
    argument0 : LPVARIANT,
    argument1 : LPVARIANT,
    argument2 : LPVARIANT) : CLong;

external (stdcall) VarCat(
    argument0 : LPVARIANT,
    argument1 : LPVARIANT,
    argument2 : LPVARIANT) : CLong;

external (stdcall) VarEqv(
    argument0 : LPVARIANT,
    argument1 : LPVARIANT,
    argument2 : LPVARIANT) : CLong;

external (stdcall) VarIdiv(
    argument0 : LPVARIANT,
    argument1 : LPVARIANT,
    argument2 : LPVARIANT) : CLong;

external (stdcall) VarImp(
    argument0 : LPVARIANT,
    argument1 : LPVARIANT,
    argument2 : LPVARIANT) : CLong;

external (stdcall) VarMod(
    argument0 : LPVARIANT,
    argument1 : LPVARIANT,
    argument2 : LPVARIANT) : CLong;

external (stdcall) VarOr(
    argument0 : LPVARIANT,
    argument1 : LPVARIANT,
    argument2 : LPVARIANT) : CLong;

external (stdcall) VarPow(
    argument0 : LPVARIANT,
    argument1 : LPVARIANT,
    argument2 : LPVARIANT) : CLong;

external (stdcall) VarXor(
    argument0 : LPVARIANT,
    argument1 : LPVARIANT,
    argument2 : LPVARIANT) : CLong;

external (stdcall) VarAbs(
    argument0 : LPVARIANT,
    argument1 : LPVARIANT) : CLong;

external (stdcall) VarFix(
    argument0 : LPVARIANT,
    argument1 : LPVARIANT) : CLong;

external (stdcall) VarInt(
    argument0 : LPVARIANT,
    argument1 : LPVARIANT) : CLong;

external (stdcall) VarNeg(
    argument0 : LPVARIANT,
    argument1 : LPVARIANT) : CLong;

external (stdcall) VarNot(
    argument0 : LPVARIANT,
    argument1 : LPVARIANT) : CLong;

external (stdcall) VarRound(
    argument0 : LPVARIANT,
    argument1 : Int,
    argument2 : LPVARIANT) : CLong;

external (stdcall) VarCmp(
    argument0 : LPVARIANT,
    argument1 : LPVARIANT,
    argument2 : CULong,
    argument3 : CULong) : CLong;

external (stdcall) VarBstrCmp(
    argument0 : BSTR,
    argument1 : BSTR,
    argument2 : CULong,
    argument3 : CULong) : CLong;

external (stdcall) VarBstrCat(
    argument0 : BSTR,
    argument1 : BSTR,
    argument2 : Pointer[BSTR]) : CLong;

static LPPARSEDISPLAYNAME = Pointer[IParseDisplayName];

static LPOLECONTAINER = Pointer[IOleContainer];

static LPOLECLIENTSITE = Pointer[IOleClientSite];

static LPOLEOBJECT = Pointer[IOleObject];

static LPDROPTARGET = Pointer[IDropTarget];

static LPDROPSOURCE = Pointer[IDropSource];

static LPENUMOLEUNDOUNITS = OpaquePointer;

static LPENUMOLEVERB = Pointer[IEnumOLEVERB];

static LPOLEWINDOW = Pointer[IOleWindow];

static LPOLEINPLACEUIWINDOW = Pointer[IOleInPlaceUIWindow];

static LPOLEINPLACEACTIVEOBJECT = Pointer[IOleInPlaceActiveObject];

static LPOLEINPLACEFRAME = Pointer[IOleInPlaceFrame];

static LPOLEADVISEHOLDER = Pointer[IOleAdviseHolder];

static LPVIEWOBJECT = Pointer[IViewObject];

static LPVIEWOBJECT2 = Pointer[IViewObject22];

static LPOLECACHE = Pointer[IOleCache];

static LPOLECACHE2 = Pointer[IOleCache22];

static LPOLECACHECONTROL = Pointer[IOleCacheControl];

static BINDSPEED_INDEFINITE = 1;
static BINDSPEED_MODERATE = 2;
static BINDSPEED_IMMEDIATE = 3;

static BINDSPEED = Int;

static OLEWHICHMK_CONTAINER = 1;
static OLEWHICHMK_OBJREL = 2;
static OLEWHICHMK_OBJFULL = 3;

static OLEWHICHMK = Int;

static OLEGETMONIKER_ONLYIFTHERE = 1;
static OLEGETMONIKER_FORCEASSIGN = 2;
static OLEGETMONIKER_UNASSIGN = 3;
static OLEGETMONIKER_TEMPFORUSER = 4;

static OLEGETMONIKER = Int;

static USERCLASSTYPE_FULL = 1;
static USERCLASSTYPE_SHORT = 2;
static USERCLASSTYPE_APPNAME = 3;

static USERCLASSTYPE = Int;

static DROPEFFECT_NONE = 0;
static DROPEFFECT_COPY = 1;
static DROPEFFECT_MOVE = 2;
static DROPEFFECT_LINK = 4;
static DROPEFFECT_SCROLL = 2147483648;

static DROPEFFECT = Int;

record tagOleMenuGroupWidths {
    width : Array[CLong,6];
}

static OLEMENUGROUPWIDTHS = tagOleMenuGroupWidths;

static LPOLEMENUGROUPWIDTHS = Pointer[tagOleMenuGroupWidths];

static HOLEMENU = HGLOBAL;

static OLECLOSE_SAVEIFDIRTY = 0;
static OLECLOSE_NOSAVE = 1;
static OLECLOSE_PROMPTSAVE = 2;

static OLECLOSE = Int;

record tagOLEVERB {
    lVerb : CLong;
    lpszVerbName : LPWSTR;
    fuFlags : CULong;
    grfAttribs : CULong;
}

static OLEVERB = tagOLEVERB;

static LPOLEVERB = Pointer[tagOLEVERB];

static BORDERWIDTHS = RECT;

static LPBORDERWIDTHS = LPRECT;

static LPCBORDERWIDTHS = LPCRECT;

record tagOIFI {
    cb : UInt;
    fMDIApp : Int;
    hwndFrame : HWND;
    haccel : HACCEL;
    cAccelEntries : UInt;
}

static OLEINPLACEFRAMEINFO = tagOIFI;

static LPOLEINPLACEFRAMEINFO = Pointer[tagOIFI];

record IEnumOLEVERB {
    lpVtbl : Pointer[IEnumOLEVERBVtbl2];
}

static IEnumOLEVERB2 = IEnumOLEVERB;

static IEnumOLEVERBVtbl = IEnumOLEVERBVtbl2;

record IEnumOLEVERBVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[IEnumOLEVERB],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[IEnumOLEVERB],CULong];
    Release : StdCallCodePointer[Pointer[IEnumOLEVERB],CULong];
    Next : StdCallCodePointer[Pointer[IEnumOLEVERB],CULong,Pointer[tagOLEVERB],Pointer[CULong],CLong];
    Skip : StdCallCodePointer[Pointer[IEnumOLEVERB],CULong,CLong];
    Reset : StdCallCodePointer[Pointer[IEnumOLEVERB],CLong];
    Clone : StdCallCodePointer[Pointer[IEnumOLEVERB],Pointer[Pointer[IEnumOLEVERB]],CLong];
}

static IEnumOleVerb = IEnumOLEVERB2;

record IParseDisplayName {
    lpVtbl : Pointer[IParseDisplayNameVtbl2];
}

static IParseDisplayName2 = IParseDisplayName;

static IParseDisplayNameVtbl = IParseDisplayNameVtbl2;

record IParseDisplayNameVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[IParseDisplayName],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[IParseDisplayName],CULong];
    Release : StdCallCodePointer[Pointer[IParseDisplayName],CULong];
    ParseDisplayName : StdCallCodePointer[Pointer[IParseDisplayName],Pointer[IBindCtx],Pointer[UShort],Pointer[CULong],Pointer[Pointer[IMoniker]],CLong];
}

record IOleContainer {
    lpVtbl : Pointer[IOleContainerVtbl2];
}

static IOleContainer2 = IOleContainer;

static IOleContainerVtbl = IOleContainerVtbl2;

record IOleContainerVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[IOleContainer],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[IOleContainer],CULong];
    Release : StdCallCodePointer[Pointer[IOleContainer],CULong];
    ParseDisplayName : StdCallCodePointer[Pointer[IOleContainer],Pointer[IBindCtx],Pointer[UShort],Pointer[CULong],Pointer[Pointer[IMoniker]],CLong];
    EnumObjects : StdCallCodePointer[Pointer[IOleContainer],CULong,Pointer[Pointer[IEnumUnknown]],CLong];
    LockContainer : StdCallCodePointer[Pointer[IOleContainer],Int,CLong];
}

record IOleItemContainer {
    lpVtbl : Pointer[IOleItemContainerVtbl2];
}

static IOleItemContainer2 = IOleItemContainer;

static IOleItemContainerVtbl = IOleItemContainerVtbl2;

record IOleItemContainerVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[IOleItemContainer],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[IOleItemContainer],CULong];
    Release : StdCallCodePointer[Pointer[IOleItemContainer],CULong];
    ParseDisplayName : StdCallCodePointer[Pointer[IOleItemContainer],Pointer[IBindCtx],Pointer[UShort],Pointer[CULong],Pointer[Pointer[IMoniker]],CLong];
    EnumObjects : StdCallCodePointer[Pointer[IOleItemContainer],CULong,Pointer[Pointer[IEnumUnknown]],CLong];
    LockContainer : StdCallCodePointer[Pointer[IOleItemContainer],Int,CLong];
    GetObjectA : StdCallCodePointer[Pointer[IOleItemContainer],Pointer[UShort],CULong,Pointer[IBindCtx],Pointer[_GUID],Pointer[RawPointer],CLong];
    GetObjectStorage : StdCallCodePointer[Pointer[IOleItemContainer],Pointer[UShort],Pointer[IBindCtx],Pointer[_GUID],Pointer[RawPointer],CLong];
    IsRunning : StdCallCodePointer[Pointer[IOleItemContainer],Pointer[UShort],CLong];
}

record IOleClientSite {
    lpVtbl : Pointer[IOleClientSiteVtbl2];
}

static IOleClientSite2 = IOleClientSite;

static IOleClientSiteVtbl = IOleClientSiteVtbl2;

record IOleClientSiteVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[IOleClientSite],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[IOleClientSite],CULong];
    Release : StdCallCodePointer[Pointer[IOleClientSite],CULong];
    SaveObject : StdCallCodePointer[Pointer[IOleClientSite],CLong];
    GetMoniker : StdCallCodePointer[Pointer[IOleClientSite],CULong,CULong,Pointer[Pointer[IMoniker]],CLong];
    GetContainer : StdCallCodePointer[Pointer[IOleClientSite],Pointer[Pointer[IOleContainer]],CLong];
    ShowObject : StdCallCodePointer[Pointer[IOleClientSite],CLong];
    OnShowWindow : StdCallCodePointer[Pointer[IOleClientSite],Int,CLong];
    RequestNewObjectLayout : StdCallCodePointer[Pointer[IOleClientSite],CLong];
}

record IOleObject {
    lpVtbl : Pointer[IOleObjectVtbl2];
}

static IOleObject2 = IOleObject;

static IOleObjectVtbl = IOleObjectVtbl2;

record IOleObjectVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[IOleObject],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[IOleObject],CULong];
    Release : StdCallCodePointer[Pointer[IOleObject],CULong];
    SetClientSite : StdCallCodePointer[Pointer[IOleObject],Pointer[IOleClientSite],CLong];
    GetClientSite : StdCallCodePointer[Pointer[IOleObject],Pointer[Pointer[IOleClientSite]],CLong];
    SetHostNames : StdCallCodePointer[Pointer[IOleObject],Pointer[UShort],Pointer[UShort],CLong];
    Close : StdCallCodePointer[Pointer[IOleObject],CULong,CLong];
    SetMoniker : StdCallCodePointer[Pointer[IOleObject],CULong,Pointer[IMoniker],CLong];
    GetMoniker : StdCallCodePointer[Pointer[IOleObject],CULong,CULong,Pointer[Pointer[IMoniker]],CLong];
    InitFromData : StdCallCodePointer[Pointer[IOleObject],Pointer[IDataObject],Int,CULong,CLong];
    GetClipboardData : StdCallCodePointer[Pointer[IOleObject],CULong,Pointer[Pointer[IDataObject]],CLong];
    DoVerb : StdCallCodePointer[Pointer[IOleObject],CLong,Pointer[tagMSG],Pointer[IOleClientSite],CLong,Pointer[HWND__],Pointer[tagRECT],CLong];
    EnumVerbs : StdCallCodePointer[Pointer[IOleObject],Pointer[Pointer[IEnumOLEVERB]],CLong];
    Update : StdCallCodePointer[Pointer[IOleObject],CLong];
    IsUpToDate : StdCallCodePointer[Pointer[IOleObject],CLong];
    GetUserClassID : StdCallCodePointer[Pointer[IOleObject],Pointer[_GUID],CLong];
    GetUserType : StdCallCodePointer[Pointer[IOleObject],CULong,Pointer[Pointer[UShort]],CLong];
    SetExtent : StdCallCodePointer[Pointer[IOleObject],CULong,Pointer[tagSIZE],CLong];
    GetExtent : StdCallCodePointer[Pointer[IOleObject],CULong,Pointer[tagSIZE],CLong];
    Advise : StdCallCodePointer[Pointer[IOleObject],Pointer[IAdviseSink],Pointer[CULong],CLong];
    Unadvise : StdCallCodePointer[Pointer[IOleObject],CULong,CLong];
    EnumAdvise : StdCallCodePointer[Pointer[IOleObject],Pointer[Pointer[IEnumSTATDATA]],CLong];
    GetMiscStatus : StdCallCodePointer[Pointer[IOleObject],CULong,Pointer[CULong],CLong];
    SetColorScheme : StdCallCodePointer[Pointer[IOleObject],Pointer[tagLOGPALETTE],CLong];
}

record IOleWindow {
    lpVtbl : Pointer[IOleWindowVtbl2];
}

static IOleWindow2 = IOleWindow;

static IOleWindowVtbl = IOleWindowVtbl2;

record IOleWindowVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[IOleWindow],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[IOleWindow],CULong];
    Release : StdCallCodePointer[Pointer[IOleWindow],CULong];
    GetWindow : StdCallCodePointer[Pointer[IOleWindow],Pointer[Pointer[HWND__]],CLong];
    ContextSensitiveHelp : StdCallCodePointer[Pointer[IOleWindow],Int,CLong];
}

record IOleInPlaceUIWindow {
    lpVtbl : Pointer[IOleInPlaceUIWindowVtbl2];
}

static IOleInPlaceUIWindow2 = IOleInPlaceUIWindow;

static IOleInPlaceUIWindowVtbl = IOleInPlaceUIWindowVtbl2;

record IOleInPlaceUIWindowVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[IOleInPlaceUIWindow],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[IOleInPlaceUIWindow],CULong];
    Release : StdCallCodePointer[Pointer[IOleInPlaceUIWindow],CULong];
    GetWindow : StdCallCodePointer[Pointer[IOleInPlaceUIWindow],Pointer[Pointer[HWND__]],CLong];
    ContextSensitiveHelp : StdCallCodePointer[Pointer[IOleInPlaceUIWindow],Int,CLong];
    GetBorder : StdCallCodePointer[Pointer[IOleInPlaceUIWindow],Pointer[tagRECT],CLong];
    RequestBorderSpace : StdCallCodePointer[Pointer[IOleInPlaceUIWindow],Pointer[tagRECT],CLong];
    SetBorderSpace : StdCallCodePointer[Pointer[IOleInPlaceUIWindow],Pointer[tagRECT],CLong];
    SetActiveObject : StdCallCodePointer[Pointer[IOleInPlaceUIWindow],Pointer[IOleInPlaceActiveObject],Pointer[UShort],CLong];
}

record IOleInPlaceObject {
    lpVtbl : Pointer[IOleInPlaceObjectVtbl2];
}

static IOleInPlaceObject2 = IOleInPlaceObject;

static IOleInPlaceObjectVtbl = IOleInPlaceObjectVtbl2;

record IOleInPlaceObjectVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[IOleInPlaceObject],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[IOleInPlaceObject],CULong];
    Release : StdCallCodePointer[Pointer[IOleInPlaceObject],CULong];
    GetWindow : StdCallCodePointer[Pointer[IOleInPlaceObject],Pointer[Pointer[HWND__]],CLong];
    ContextSensitiveHelp : StdCallCodePointer[Pointer[IOleInPlaceObject],Int,CLong];
    InPlaceDeactivate : StdCallCodePointer[Pointer[IOleInPlaceObject],CLong];
    UIDeactivate : StdCallCodePointer[Pointer[IOleInPlaceObject],CLong];
    SetObjectRects : StdCallCodePointer[Pointer[IOleInPlaceObject],Pointer[tagRECT],Pointer[tagRECT],CLong];
    ReactivateAndUndo : StdCallCodePointer[Pointer[IOleInPlaceObject],CLong];
}

record IOleInPlaceActiveObject {
    lpVtbl : Pointer[IOleInPlaceActiveObjectVtbl2];
}

static IOleInPlaceActiveObject2 = IOleInPlaceActiveObject;

static IOleInPlaceActiveObjectVtbl = IOleInPlaceActiveObjectVtbl2;

record IOleInPlaceActiveObjectVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[IOleInPlaceActiveObject],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[IOleInPlaceActiveObject],CULong];
    Release : StdCallCodePointer[Pointer[IOleInPlaceActiveObject],CULong];
    GetWindow : StdCallCodePointer[Pointer[IOleInPlaceActiveObject],Pointer[Pointer[HWND__]],CLong];
    ContextSensitiveHelp : StdCallCodePointer[Pointer[IOleInPlaceActiveObject],Int,CLong];
    TranslateAcceleratorA : StdCallCodePointer[Pointer[IOleInPlaceActiveObject],Pointer[tagMSG],CLong];
    OnFrameWindowActivate : StdCallCodePointer[Pointer[IOleInPlaceActiveObject],Int,CLong];
    OnDocWindowActivate : StdCallCodePointer[Pointer[IOleInPlaceActiveObject],Int,CLong];
    ResizeBorder : StdCallCodePointer[Pointer[IOleInPlaceActiveObject],Pointer[tagRECT],Pointer[IOleInPlaceUIWindow],Int,CLong];
    EnableModeless : StdCallCodePointer[Pointer[IOleInPlaceActiveObject],Int,CLong];
}

record IOleInPlaceFrame {
    lpVtbl : Pointer[IOleInPlaceFrameVtbl2];
}

static IOleInPlaceFrame2 = IOleInPlaceFrame;

static IOleInPlaceFrameVtbl = IOleInPlaceFrameVtbl2;

record IOleInPlaceFrameVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[IOleInPlaceFrame],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[IOleInPlaceFrame],CULong];
    Release : StdCallCodePointer[Pointer[IOleInPlaceFrame],CULong];
    GetWindow : StdCallCodePointer[Pointer[IOleInPlaceFrame],Pointer[Pointer[HWND__]],CLong];
    ContextSensitiveHelp : StdCallCodePointer[Pointer[IOleInPlaceFrame],Int,CLong];
    GetBorder : StdCallCodePointer[Pointer[IOleInPlaceFrame],Pointer[tagRECT],CLong];
    RequestBorderSpace : StdCallCodePointer[Pointer[IOleInPlaceFrame],Pointer[tagRECT],CLong];
    SetBorderSpace : StdCallCodePointer[Pointer[IOleInPlaceFrame],Pointer[tagRECT],CLong];
    SetActiveObject : StdCallCodePointer[Pointer[IOleInPlaceFrame],Pointer[IOleInPlaceActiveObject],Pointer[UShort],CLong];
    InsertMenus : StdCallCodePointer[Pointer[IOleInPlaceFrame],Pointer[HMENU__],Pointer[tagOleMenuGroupWidths],CLong];
    SetMenu : StdCallCodePointer[Pointer[IOleInPlaceFrame],Pointer[HMENU__],RawPointer,Pointer[HWND__],CLong];
    RemoveMenus : StdCallCodePointer[Pointer[IOleInPlaceFrame],Pointer[HMENU__],CLong];
    SetStatusText : StdCallCodePointer[Pointer[IOleInPlaceFrame],Pointer[UShort],CLong];
    EnableModeless : StdCallCodePointer[Pointer[IOleInPlaceFrame],Int,CLong];
    TranslateAcceleratorA : StdCallCodePointer[Pointer[IOleInPlaceFrame],Pointer[tagMSG],UShort,CLong];
}

record IOleInPlaceSite {
    lpVtbl : Pointer[IOleInPlaceSiteVtbl2];
}

static IOleInPlaceSite2 = IOleInPlaceSite;

static IOleInPlaceSiteVtbl = IOleInPlaceSiteVtbl2;

record IOleInPlaceSiteVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[IOleInPlaceSite],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[IOleInPlaceSite],CULong];
    Release : StdCallCodePointer[Pointer[IOleInPlaceSite],CULong];
    GetWindow : StdCallCodePointer[Pointer[IOleInPlaceSite],Pointer[Pointer[HWND__]],CLong];
    ContextSensitiveHelp : StdCallCodePointer[Pointer[IOleInPlaceSite],Int,CLong];
    CanInPlaceActivate : StdCallCodePointer[Pointer[IOleInPlaceSite],CLong];
    OnInPlaceActivate : StdCallCodePointer[Pointer[IOleInPlaceSite],CLong];
    OnUIActivate : StdCallCodePointer[Pointer[IOleInPlaceSite],CLong];
    GetWindowContext : StdCallCodePointer[Pointer[IOleInPlaceSite],Pointer[Pointer[IOleInPlaceFrame]],Pointer[Pointer[IOleInPlaceUIWindow]],Pointer[tagRECT],Pointer[tagRECT],Pointer[tagOIFI],CLong];
    Scroll : StdCallCodePointer[Pointer[IOleInPlaceSite],tagSIZE,CLong];
    OnUIDeactivate : StdCallCodePointer[Pointer[IOleInPlaceSite],Int,CLong];
    OnInPlaceDeactivate : StdCallCodePointer[Pointer[IOleInPlaceSite],CLong];
    DiscardUndoState : StdCallCodePointer[Pointer[IOleInPlaceSite],CLong];
    DeactivateAndUndo : StdCallCodePointer[Pointer[IOleInPlaceSite],CLong];
    OnPosRectChange : StdCallCodePointer[Pointer[IOleInPlaceSite],Pointer[tagRECT],CLong];
}

record IOleAdviseHolder {
    lpVtbl : Pointer[IOleAdviseHolderVtbl2];
}

static IOleAdviseHolder2 = IOleAdviseHolder;

static IOleAdviseHolderVtbl = IOleAdviseHolderVtbl2;

record IOleAdviseHolderVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[IOleAdviseHolder],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[IOleAdviseHolder],CULong];
    Release : StdCallCodePointer[Pointer[IOleAdviseHolder],CULong];
    Advise : StdCallCodePointer[Pointer[IOleAdviseHolder],Pointer[IAdviseSink],Pointer[CULong],CLong];
    Unadvise : StdCallCodePointer[Pointer[IOleAdviseHolder],CULong,CLong];
    EnumAdvise : StdCallCodePointer[Pointer[IOleAdviseHolder],Pointer[Pointer[IEnumSTATDATA]],CLong];
    SendOnRename : StdCallCodePointer[Pointer[IOleAdviseHolder],Pointer[IMoniker],CLong];
    SendOnSave : StdCallCodePointer[Pointer[IOleAdviseHolder],CLong];
    SendOnClose : StdCallCodePointer[Pointer[IOleAdviseHolder],CLong];
}

record IDropSource {
    lpVtbl : Pointer[IDropSourceVtbl2];
}

static IDropSource2 = IDropSource;

static IDropSourceVtbl = IDropSourceVtbl2;

record IDropSourceVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[IDropSource],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[IDropSource],CULong];
    Release : StdCallCodePointer[Pointer[IDropSource],CULong];
    QueryContinueDrag : StdCallCodePointer[Pointer[IDropSource],Int,CULong,CLong];
    GiveFeedback : StdCallCodePointer[Pointer[IDropSource],CULong,CLong];
}

record IDropTarget {
    lpVtbl : Pointer[IDropTargetVtbl2];
}

static IDropTarget2 = IDropTarget;

static IDropTargetVtbl = IDropTargetVtbl2;

record IDropTargetVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[IDropTarget],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[IDropTarget],CULong];
    Release : StdCallCodePointer[Pointer[IDropTarget],CULong];
    DragEnter : StdCallCodePointer[Pointer[IDropTarget],Pointer[IDataObject],CULong,tagPOINT,Pointer[CULong],CLong];
    DragOver : StdCallCodePointer[Pointer[IDropTarget],CULong,tagPOINT,Pointer[CULong],CLong];
    DragLeave : StdCallCodePointer[Pointer[IDropTarget],CLong];
    Drop : StdCallCodePointer[Pointer[IDropTarget],Pointer[IDataObject],CULong,tagPOINT,Pointer[CULong],CLong];
}

static __IView_pfncont = StdCallCodePointer[CULong,Int];

record IViewObject {
    lpVtbl : Pointer[IViewObjectVtbl2];
}

static IViewObject2 = IViewObject;

static IViewObjectVtbl = IViewObjectVtbl2;

record IViewObjectVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[IViewObject],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[IViewObject],CULong];
    Release : StdCallCodePointer[Pointer[IViewObject],CULong];
    Draw : StdCallCodePointer[Pointer[IViewObject],CULong,CLong,RawPointer,Pointer[tagDVTARGETDEVICE],Pointer[HDC__],Pointer[HDC__],Pointer[tagRECTL],Pointer[tagRECTL],StdCallCodePointer[CULong,Int],CULong,CLong];
    GetColorSet : StdCallCodePointer[Pointer[IViewObject],CULong,CLong,RawPointer,Pointer[tagDVTARGETDEVICE],Pointer[HDC__],Pointer[Pointer[tagLOGPALETTE]],CLong];
    Freeze : StdCallCodePointer[Pointer[IViewObject],CULong,CLong,RawPointer,Pointer[CULong],CLong];
    Unfreeze : StdCallCodePointer[Pointer[IViewObject],CULong,CLong];
    SetAdvise : StdCallCodePointer[Pointer[IViewObject],CULong,CULong,Pointer[IAdviseSink],CLong];
    GetAdvise : StdCallCodePointer[Pointer[IViewObject],Pointer[CULong],Pointer[CULong],Pointer[Pointer[IAdviseSink]],CLong];
}

record IViewObject22 {
    lpVtbl : Pointer[IViewObject2Vtbl2];
}

static IViewObject23 = IViewObject22;

static IViewObject2Vtbl = IViewObject2Vtbl2;

record IViewObject2Vtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[IViewObject22],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[IViewObject22],CULong];
    Release : StdCallCodePointer[Pointer[IViewObject22],CULong];
    Draw : StdCallCodePointer[Pointer[IViewObject22],CULong,CLong,RawPointer,Pointer[tagDVTARGETDEVICE],Pointer[HDC__],Pointer[HDC__],Pointer[tagRECTL],Pointer[tagRECTL],StdCallCodePointer[CULong,Int],CULong,CLong];
    GetColorSet : StdCallCodePointer[Pointer[IViewObject22],CULong,CLong,RawPointer,Pointer[tagDVTARGETDEVICE],Pointer[HDC__],Pointer[Pointer[tagLOGPALETTE]],CLong];
    Freeze : StdCallCodePointer[Pointer[IViewObject22],CULong,CLong,RawPointer,Pointer[CULong],CLong];
    Unfreeze : StdCallCodePointer[Pointer[IViewObject22],CULong,CLong];
    SetAdvise : StdCallCodePointer[Pointer[IViewObject22],CULong,CULong,Pointer[IAdviseSink],CLong];
    GetAdvise : StdCallCodePointer[Pointer[IViewObject22],Pointer[CULong],Pointer[CULong],Pointer[Pointer[IAdviseSink]],CLong];
    GetExtent : StdCallCodePointer[Pointer[IViewObject22],CULong,CLong,Pointer[tagDVTARGETDEVICE],Pointer[tagSIZE],CLong];
}

record IOleCache {
    lpVtbl : Pointer[IOleCacheVtbl2];
}

static IOleCache2 = IOleCache;

static IOleCacheVtbl = IOleCacheVtbl2;

record IOleCacheVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[IOleCache],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[IOleCache],CULong];
    Release : StdCallCodePointer[Pointer[IOleCache],CULong];
    Cache : StdCallCodePointer[Pointer[IOleCache],Pointer[tagFORMATETC],CULong,Pointer[CULong],CLong];
    Uncache : StdCallCodePointer[Pointer[IOleCache],CULong,CLong];
    EnumCache : StdCallCodePointer[Pointer[IOleCache],Pointer[Pointer[IEnumSTATDATA]],CLong];
    InitCache : StdCallCodePointer[Pointer[IOleCache],Pointer[IDataObject],CLong];
    SetData : StdCallCodePointer[Pointer[IOleCache],Pointer[tagFORMATETC],Pointer[tagSTGMEDIUM],Int,CLong];
}

record IOleCache22 {
    lpVtbl : Pointer[IOleCache2Vtbl2];
}

static IOleCache23 = IOleCache22;

static IOleCache2Vtbl = IOleCache2Vtbl2;

record IOleCache2Vtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[IOleCache22],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[IOleCache22],CULong];
    Release : StdCallCodePointer[Pointer[IOleCache22],CULong];
    Cache : StdCallCodePointer[Pointer[IOleCache22],Pointer[tagFORMATETC],CULong,Pointer[CULong],CLong];
    Uncache : StdCallCodePointer[Pointer[IOleCache22],CULong,CLong];
    EnumCache : StdCallCodePointer[Pointer[IOleCache22],Pointer[Pointer[IEnumSTATDATA]],CLong];
    InitCache : StdCallCodePointer[Pointer[IOleCache22],Pointer[IDataObject],CLong];
    SetData : StdCallCodePointer[Pointer[IOleCache22],Pointer[tagFORMATETC],Pointer[tagSTGMEDIUM],Int,CLong];
    UpdateCache : StdCallCodePointer[Pointer[IOleCache22],Pointer[IDataObject],CULong,RawPointer,CLong];
    DiscardCache : StdCallCodePointer[Pointer[IOleCache22],CULong,CLong];
}

record IOleCacheControl {
    lpVtbl : Pointer[IOleCacheControlVtbl2];
}

static IOleCacheControl2 = IOleCacheControl;

static IOleCacheControlVtbl = IOleCacheControlVtbl2;

record IOleCacheControlVtbl2 {
    QueryInterface : StdCallCodePointer[Pointer[IOleCacheControl],Pointer[_GUID],Pointer[RawPointer],CLong];
    AddRef : StdCallCodePointer[Pointer[IOleCacheControl],CULong];
    Release : StdCallCodePointer[Pointer[IOleCacheControl],CULong];
    OnRun : StdCallCodePointer[Pointer[IOleCacheControl],Pointer[IDataObject],CLong];
    OnStop : StdCallCodePointer[Pointer[IOleCacheControl],CLong];
}

static LPOLESTREAMVTBL = Pointer[_OLESTREAMVTBL];

record _OLESTREAM {
    lpstbl : LPOLESTREAMVTBL;
}

static OLESTREAM = _OLESTREAM;

static LPOLESTREAM = Pointer[_OLESTREAM];

record _OLESTREAMVTBL {
    Get : StdCallCodePointer[Pointer[_OLESTREAM],RawPointer,CULong,CULong];
    Put : StdCallCodePointer[Pointer[_OLESTREAM],RawPointer,CULong,CULong];
}

static OLESTREAMVTBL = _OLESTREAMVTBL;

external (stdcall) OleBuildVersion() : CULong;

external (stdcall) ReadClassStg(
    argument0 : LPSTORAGE,
    argument1 : Pointer[CLSID]) : CLong;

external (stdcall) WriteClassStg(
    argument0 : LPSTORAGE,
    argument1 : Pointer[CLSID]) : CLong;

external (stdcall) ReadClassStm(
    argument0 : LPSTREAM,
    argument1 : Pointer[CLSID]) : CLong;

external (stdcall) WriteClassStm(
    argument0 : LPSTREAM,
    argument1 : Pointer[CLSID]) : CLong;

external (stdcall) WriteFmtUserTypeStg(
    argument0 : LPSTORAGE,
    argument1 : UShort,
    argument2 : LPOLESTR) : CLong;

external (stdcall) ReadFmtUserTypeStg(
    argument0 : LPSTORAGE,
    argument1 : Pointer[UShort],
    argument2 : Pointer[LPOLESTR]) : CLong;

external (stdcall) OleInitialize(
    argument0 : PVOID) : CLong;

external (stdcall) OleUninitialize() : Void;

external (stdcall) OleQueryLinkFromData(
    argument0 : LPDATAOBJECT) : CLong;

external (stdcall) OleQueryCreateFromData(
    argument0 : LPDATAOBJECT) : CLong;

external (stdcall) OleCreate(
    argument0 : Pointer[CLSID],
    argument1 : Pointer[IID],
    argument2 : CULong,
    argument3 : LPFORMATETC,
    argument4 : LPOLECLIENTSITE,
    argument5 : LPSTORAGE,
    argument6 : Pointer[PVOID]) : CLong;

external (stdcall) OleCreateFromData(
    argument0 : LPDATAOBJECT,
    argument1 : Pointer[IID],
    argument2 : CULong,
    argument3 : LPFORMATETC,
    argument4 : LPOLECLIENTSITE,
    argument5 : LPSTORAGE,
    argument6 : Pointer[PVOID]) : CLong;

external (stdcall) OleCreateLinkFromData(
    argument0 : LPDATAOBJECT,
    argument1 : Pointer[IID],
    argument2 : CULong,
    argument3 : LPFORMATETC,
    argument4 : LPOLECLIENTSITE,
    argument5 : LPSTORAGE,
    argument6 : Pointer[PVOID]) : CLong;

external (stdcall) OleCreateStaticFromData(
    argument0 : LPDATAOBJECT,
    argument1 : Pointer[IID],
    argument2 : CULong,
    argument3 : LPFORMATETC,
    argument4 : LPOLECLIENTSITE,
    argument5 : LPSTORAGE,
    argument6 : Pointer[PVOID]) : CLong;

external (stdcall) OleCreateLink(
    argument0 : LPMONIKER,
    argument1 : Pointer[IID],
    argument2 : CULong,
    argument3 : LPFORMATETC,
    argument4 : LPOLECLIENTSITE,
    argument5 : LPSTORAGE,
    argument6 : Pointer[PVOID]) : CLong;

external (stdcall) OleCreateLinkToFile(
    argument0 : LPCOLESTR,
    argument1 : Pointer[IID],
    argument2 : CULong,
    argument3 : LPFORMATETC,
    argument4 : LPOLECLIENTSITE,
    argument5 : LPSTORAGE,
    argument6 : Pointer[PVOID]) : CLong;

external (stdcall) OleCreateFromFile(
    argument0 : Pointer[CLSID],
    argument1 : LPCOLESTR,
    argument2 : Pointer[IID],
    argument3 : CULong,
    argument4 : LPFORMATETC,
    argument5 : LPOLECLIENTSITE,
    argument6 : LPSTORAGE,
    argument7 : Pointer[PVOID]) : CLong;

external (stdcall) OleLoad(
    argument0 : LPSTORAGE,
    argument1 : Pointer[IID],
    argument2 : LPOLECLIENTSITE,
    argument3 : Pointer[PVOID]) : CLong;

external (stdcall) OleSave(
    argument0 : LPPERSISTSTORAGE,
    argument1 : LPSTORAGE,
    argument2 : Int) : CLong;

external (stdcall) OleLoadFromStream(
    argument0 : LPSTREAM,
    argument1 : Pointer[IID],
    argument2 : Pointer[PVOID]) : CLong;

external (stdcall) OleSaveToStream(
    argument0 : LPPERSISTSTREAM,
    argument1 : LPSTREAM) : CLong;

external (stdcall) OleSetContainedObject(
    argument0 : LPUNKNOWN,
    argument1 : Int) : CLong;

external (stdcall) OleNoteObjectVisible(
    argument0 : LPUNKNOWN,
    argument1 : Int) : CLong;

external (stdcall) RegisterDragDrop(
    argument0 : HWND,
    argument1 : LPDROPTARGET) : CLong;

external (stdcall) RevokeDragDrop(
    argument0 : HWND) : CLong;

external (stdcall) DoDragDrop(
    argument0 : LPDATAOBJECT,
    argument1 : LPDROPSOURCE,
    argument2 : CULong,
    argument3 : PDWORD) : CLong;

external (stdcall) OleSetClipboard(
    argument0 : LPDATAOBJECT) : CLong;

external (stdcall) OleGetClipboard(
    argument0 : Pointer[LPDATAOBJECT]) : CLong;

external (stdcall) OleFlushClipboard() : CLong;

external (stdcall) OleIsCurrentClipboard(
    argument0 : LPDATAOBJECT) : CLong;

external (stdcall) OleCreateMenuDescriptor(
    argument0 : HMENU,
    argument1 : LPOLEMENUGROUPWIDTHS) : HOLEMENU;

external (stdcall) OleSetMenuDescriptor(
    argument0 : HOLEMENU,
    argument1 : HWND,
    argument2 : HWND,
    argument3 : LPOLEINPLACEFRAME,
    argument4 : LPOLEINPLACEACTIVEOBJECT) : CLong;

external (stdcall) OleDestroyMenuDescriptor(
    argument0 : HOLEMENU) : CLong;

external (stdcall) OleTranslateAccelerator(
    argument0 : LPOLEINPLACEFRAME,
    argument1 : LPOLEINPLACEFRAMEINFO,
    argument2 : LPMSG) : CLong;

external (stdcall) OleDuplicateData(
    argument0 : HANDLE,
    argument1 : UShort,
    argument2 : UInt) : HANDLE;

external (stdcall) OleDraw(
    argument0 : LPUNKNOWN,
    argument1 : CULong,
    argument2 : HDC,
    argument3 : LPCRECT) : CLong;

external (stdcall) OleRun(
    argument0 : LPUNKNOWN) : CLong;

external (stdcall) OleIsRunning(
    argument0 : LPOLEOBJECT) : Int;

external (stdcall) OleLockRunning(
    argument0 : LPUNKNOWN,
    argument1 : Int,
    argument2 : Int) : CLong;

external (stdcall) ReleaseStgMedium(
    argument0 : LPSTGMEDIUM) : Void;

external (stdcall) CreateOleAdviseHolder(
    argument0 : Pointer[LPOLEADVISEHOLDER]) : CLong;

external (stdcall) OleCreateDefaultHandler(
    argument0 : Pointer[CLSID],
    argument1 : LPUNKNOWN,
    argument2 : Pointer[IID],
    argument3 : Pointer[PVOID]) : CLong;

external (stdcall) OleCreateEmbeddingHelper(
    argument0 : Pointer[CLSID],
    argument1 : LPUNKNOWN,
    argument2 : CULong,
    argument3 : LPCLASSFACTORY,
    argument4 : Pointer[IID],
    argument5 : Pointer[PVOID]) : CLong;

external (stdcall) IsAccelerator(
    argument0 : HACCEL,
    argument1 : Int,
    argument2 : LPMSG,
    argument3 : Pointer[UShort]) : Int;

external (stdcall) OleGetIconOfFile(
    argument0 : LPOLESTR,
    argument1 : Int) : HGLOBAL;

external (stdcall) OleGetIconOfClass(
    argument0 : Pointer[CLSID],
    argument1 : LPOLESTR,
    argument2 : Int) : HGLOBAL;

external (stdcall) OleMetafilePictFromIconAndLabel(
    argument0 : HICON,
    argument1 : LPOLESTR,
    argument2 : LPOLESTR,
    argument3 : UInt) : HGLOBAL;

external (stdcall) OleRegGetUserType(
    argument0 : Pointer[CLSID],
    argument1 : CULong,
    argument2 : Pointer[LPOLESTR]) : CLong;

external (stdcall) OleRegGetMiscStatus(
    argument0 : Pointer[CLSID],
    argument1 : CULong,
    argument2 : Pointer[CULong]) : CLong;

external (stdcall) OleRegEnumFormatEtc(
    argument0 : Pointer[CLSID],
    argument1 : CULong,
    argument2 : Pointer[LPENUMFORMATETC]) : CLong;

external (stdcall) OleRegEnumVerbs(
    argument0 : Pointer[CLSID],
    argument1 : Pointer[LPENUMOLEVERB]) : CLong;

external (stdcall) OleConvertOLESTREAMToIStorage(
    argument0 : LPOLESTREAM,
    argument1 : LPSTORAGE,
    argument2 : Pointer[DVTARGETDEVICE]) : CLong;

external (stdcall) OleConvertIStorageToOLESTREAM(
    argument0 : LPSTORAGE,
    argument1 : LPOLESTREAM) : CLong;

external (stdcall) GetHGlobalFromILockBytes(
    argument0 : LPLOCKBYTES,
    argument1 : Pointer[HGLOBAL]) : CLong;

external (stdcall) CreateILockBytesOnHGlobal(
    argument0 : HGLOBAL,
    argument1 : Int,
    argument2 : Pointer[LPLOCKBYTES]) : CLong;

external (stdcall) GetHGlobalFromStream(
    argument0 : LPSTREAM,
    argument1 : Pointer[HGLOBAL]) : CLong;

external (stdcall) CreateStreamOnHGlobal(
    argument0 : HGLOBAL,
    argument1 : Int,
    argument2 : Pointer[LPSTREAM]) : CLong;

external (stdcall) OleDoAutoConvert(
    argument0 : LPSTORAGE,
    argument1 : LPCLSID) : CLong;

external (stdcall) OleGetAutoConvert(
    argument0 : Pointer[CLSID],
    argument1 : LPCLSID) : CLong;

external (stdcall) OleSetAutoConvert(
    argument0 : Pointer[CLSID],
    argument1 : Pointer[CLSID]) : CLong;

external (stdcall) GetConvertStg(
    argument0 : LPSTORAGE) : CLong;

external (stdcall) SetConvertStg(
    argument0 : LPSTORAGE,
    argument1 : Int) : CLong;

external (stdcall) OleConvertIStorageToOLESTREAMEx(
    argument0 : LPSTORAGE,
    argument1 : UShort,
    argument2 : CLong,
    argument3 : CLong,
    argument4 : CULong,
    argument5 : LPSTGMEDIUM,
    argument6 : LPOLESTREAM) : CLong;

external (stdcall) OleConvertOLESTREAMToIStorageEx(
    argument0 : LPOLESTREAM,
    argument1 : LPSTORAGE,
    argument2 : Pointer[UShort],
    argument3 : Pointer[CLong],
    argument4 : Pointer[CLong],
    argument5 : Pointer[CULong],
    argument6 : LPSTGMEDIUM) : CLong;
