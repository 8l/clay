


//
// VariantRepr
//

record VariantRepr[...T] {
    tag : Int;
    data : Union[...T];
}



//
// VariantMember?
//

[V,M | Variant?(V)]
VariantMember?(static V, static M) =
    VariantMemberIndex(V, M) < VariantMemberCount(V);



//
// construct from value of member type
//

[V,T | Variant?(V) and VariantMember?(V, T)]
inlined overload V(lvalue x:T) returned:V {
    ref repr = variantRepr(returned);
    alias index = Int(VariantMemberIndex(V, T));
    repr.tag <-- index;
    staticIndex(repr.data, static index) <-- x;
}

[V,T | Variant?(V) and VariantMember?(V, T)]
inlined overload V(rvalue x:T) returned:V {
    ref repr = variantRepr(returned);
    alias index = Int(VariantMemberIndex(V, T));
    repr.tag <-- index;
    staticIndex(repr.data, static index) <-- move(x);
}



//
//
// copy constructor
//

[V | Variant?(V)]
overload V(src:V) returned:V {
    ref destRepr = variantRepr(returned);
    ref srcRepr = variantRepr(src);
    var tag = srcRepr.tag;
    destRepr.tag = tag;
    alias n = Int(VariantMemberCount(V));
    taggedCopy(tag, destRepr.data, srcRepr.data, static 0, static n);
}

[V | Variant?(V)]
overload V(rvalue src:V) = move(src);

[i,n]
private taggedCopy(tag, destData, srcData, static i, static n) {
    if (tag == i) {
        ref dest = staticIndex(destData, static i);
        ref src = staticIndex(srcData, static i);
        dest <-- src;
    }
    else {
        taggedMove(tag, destData, srcData, static i+1, static n);
    }
}

[i,n | i == n]
overload taggedCopy(tag, destData, srcData, static i, static n) {
    error("invalid variant, tag = ", tag);
}



//
// move
//

[V | Variant?(V)]
overload move(src:V) returned:V {
    ref destRepr = variantRepr(returned);
    ref srcRepr = variantRepr(src);
    var tag = srcRepr.tag;
    destRepr.tag = tag;
    alias n = Int(VariantMemberCount(V));
    taggedMove(tag, destRepr.data, srcRepr.data, static 0, static n);
}

[i,n]
private taggedMove(tag, destData, srcData, static i, static n) {
    if (tag == i) {
        ref dest = staticIndex(destData, static i);
        ref src = staticIndex(srcData, static i);
        dest <-- move(src);
    }
    else {
        taggedMove(tag, destData, srcData, static i+1, static n);
    }
}

[i,n | i == n]
overload taggedMove(tag, destData, srcData, static i, static n) {
    error("invalid variant, tag = ", tag);
}



//
// destroy
//

[V | Variant?(V)]
overload destroy(x:V) {
    ref repr = variantRepr(x);
    var tag = repr.tag;
    alias n = Int(VariantMemberCount(V));
    taggedDestroy(tag, repr.data, static 0, static n);
}

[i,n]
private taggedDestroy(tag, data, static i, static n) {
    if (tag == i) {
        ref dest = staticIndex(data, static i);
        destroy(dest);
    }
    else {
        taggedDestroy(tag, data, static i+1, static n);
    }
}

[i,n | i == n]
overload taggedDestroy(tag, data, static i, static n) {
    error("invalid variant, tag = ", tag);
}



//
// variantIs?
//

[V,T | Variant?(V) and VariantMember?(V, T)]
variantIs?(x:V, static T) {
    ref repr = variantRepr(x);
    alias index = Int(VariantMemberIndex(V, T));
    return repr.tag == index;
}



//
// variantAs
//

procedure variantAs;

[V,T | Variant?(V) and VariantMember?(V, T)]
overload variantAs(lvalue x:V, static T) {
    ref repr = variantRepr(x);
    alias index = Int(VariantMemberIndex(V, T));
    assert(repr.tag == index, "invalid cast");
    return ref staticIndex(repr.data, static index);
}

[V,T | Variant?(V) and VariantMember?(V, T)]
overload variantAs(rvalue x:V, static T) {
    return move(variantAs(x, T));
}



//
// variantTag, unsafeVariantIndex, invalidVariant
//

[V | Variant?(V)]
variantTag(x:V) = variantRepr(x).tag;

[V,i | Variant?(V)]
unsafeVariantIndex(x:V, static i) =
    ref staticIndex(variantRepr(x).data, static i);

[V | Variant?(V)]
invalidVariant(x:V) {
    error("invalid variant, tag = ", variantTag(x));
}


//
// variant matching
//

private procedure matchValue;
[T] overload matchValue(forward x:T, static T, fn, ...cases) = forward ...fn(x);
[T, U | T != U] overload matchValue(forward x:T, static U, fn, ...cases)
    = forward ...matchValue(x, ...cases);

match(forward v, ...cases) = forward ...matchValue(*v, ...cases);

