


//
// VariantRepr
//

record VariantRepr[...T] {
    tag : Int;
    data : Union[...T];
}



//
// VariantMember?, VariantMembers
//

[V,M | Variant?(V)]
VariantMember?(static V, static M) =
    VariantMemberIndex(V, M) < VariantMemberCount(V);

VariantMembers(V) {
    var unionType = Type(variantRepr(typeToValue(V)).data);
    return ...UnionMembers(unionType);
}



//
// construct from value of member type
//

[V,T | Variant?(V) and VariantMember?(V, T)]
macro overload V(x:T) returned:V {
    ref repr = variantRepr(returned);
    alias index = Int(VariantMemberIndex(V, T));
    repr.tag <-- index;
    staticIndex(repr.data, static index) <-- x;
}



//
//
// copy constructor
//

[V | Variant?(V)]
overload V(src:V) returned:V {
    ref destRepr = variantRepr(returned);
    ref srcRepr = variantRepr(src);
    var tag = srcRepr.tag;
    destRepr.tag = tag;
    ref destData = destRepr.data;
    ref srcData = srcRepr.data;
    alias n = Int(VariantMemberCount(V));
    static for (i in ...staticIntegers(static n)) {
        if (tag == unwrapStatic(i)) {
            ref dest = staticIndex(destData, i);
            ref src = staticIndex(srcData, i);
            dest <-- src;
            goto end;
        }
    }
    error("invalid variant, tag = ", tag);
    end :
}

[V | Variant?(V)]
overload V(rvalue src:V) = move(src);



//
// moveUnsafe, resetUnsafe
//

[V | Variant?(V)]
overload moveUnsafe(src:V) returned:V {
    ref destRepr = variantRepr(returned);
    ref srcRepr = variantRepr(src);
    var tag = srcRepr.tag;
    destRepr.tag = tag;
    ref destData = destRepr.data;
    ref srcData = srcRepr.data;
    alias n = Int(VariantMemberCount(V));
    static for (i in ...staticIntegers(static n)) {
        if (tag == unwrapStatic(i)) {
            ref dest = staticIndex(destData, i);
            ref src = staticIndex(srcData, i);
            dest <-- moveUnsafe(src);
            goto end;
        }
    }
    error("invalid variant, tag = ", tag);
    end :
}

[V | Variant?(V)]
overload resetUnsafe(x:V) {
    ref repr = variantRepr(x);
    repr.tag = 0;
    resetUnsafe(staticIndex(repr.data, static 0));
}



//
// assign
//

[V | Variant?(V)]
overload assign(dest:V, lvalue src:V) {
    ref destRepr = variantRepr(dest);
    ref srcRepr = variantRepr(src);
    var tag = destRepr.tag;
    if (tag != srcRepr.tag) {
        if (&dest == &src)
            return;
        destroy(dest);
        resetUnsafe(dest);
        dest <-- src;
        return;
    }
    ref destData = destRepr.data;
    ref srcData = srcRepr.data;
    alias n = Int(VariantMemberCount(V));
    static for (i in ...staticIntegers(static n)) {
        if (tag == unwrapStatic(i)) {
            ref dest2 = staticIndex(destData, i);
            ref src2 = staticIndex(srcData, i);
            assign(dest2, src2);
            goto end;
        }
    }
    error("invalid variant, tag = ", tag);
    end :
}



//
// destroy
//

[V | Variant?(V)]
overload destroy(x:V) {
    ref repr = variantRepr(x);
    var tag = repr.tag;
    ref data = repr.data;
    alias n = Int(VariantMemberCount(V));
    static for (i in ...staticIntegers(static n)) {
        if (tag == unwrapStatic(i)) {
            ref dest = staticIndex(data, i);
            destroy(dest);
            return;
        }
    }
    error("invalid variant, tag = ", tag);
}



//
// equals?
//

[V | Variant?(V)]
overload equals?(a:V, b:V) {
    ref aRepr, bRepr = variantRepr(a), variantRepr(b);
    var tag = aRepr.tag;
    if (tag != bRepr.tag)
        return false;
    ref aData, bData = aRepr.data, bRepr.data;
    alias n = Int(VariantMemberCount(V));
    static for (i in ...staticIntegers(static n)) {
        if (tag == unwrapStatic(i))
            return staticIndex(aData, i) == staticIndex(bData, i);
    }
    error("invalid variant, tag = ", tag);
    return false;
}



//
// variantIs?
//

[V,T | Variant?(V) and VariantMember?(V, T)]
variantIs?(x:V, static T) {
    ref repr = variantRepr(x);
    alias index = Int(VariantMemberIndex(V, T));
    return repr.tag == index;
}



//
// variantAs
//

procedure variantAs;

[V,T | Variant?(V) and VariantMember?(V, T)]
overload variantAs(lvalue x:V, static T) {
    ref repr = variantRepr(x);
    alias index = Int(VariantMemberIndex(V, T));
    assert(repr.tag == index, "invalid cast");
    return ref staticIndex(repr.data, static index);
}

[V,T | Variant?(V) and VariantMember?(V, T)]
overload variantAs(rvalue x:V, static T) {
    return move(variantAs(x, T));
}



//
// variantAsPtr - test and unbox in one operation
//

[V,T | Variant?(V) and VariantMember?(V,T)]
variantAsPtr(x:V, static T) {
    ref repr = variantRepr(x);
    alias index = Int(VariantMemberIndex(V, T));
    if (repr.tag == index)
        return &staticIndex(repr.data, static index);
    else
        return null(T);
}



//
// variantTag, unsafeVariantIndex, invalidVariant
//

[V | Variant?(V)]
variantTag(x:V) = variantRepr(x).tag;

[V,i | Variant?(V)]
unsafeVariantIndex(x:V, static i) =
    ref staticIndex(variantRepr(x).data, static i);

[V | Variant?(V)]
invalidVariant(x:V) {
    error("invalid variant, tag = ", variantTag(x));
}


//
// variant matching
//

private procedure matchValue;
[T] overload matchValue(forward x:T, static T, fn, ...cases) = forward ...fn(x);
[T, U | T != U] overload matchValue(forward x:T, static U, fn, ...cases)
    = forward ...matchValue(x, ...cases);

match(forward v, ...cases) = forward ...matchValue(*v, ...cases);

