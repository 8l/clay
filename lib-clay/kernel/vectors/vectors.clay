import kernel.operators.*;
import kernel.sequences.*;
import kernel.numbers.*;
import kernel.pointers.*;
import kernel.ranges.*;
import kernel.move.*;
import kernel.malloc.*;


//
// Vector[T]
//

record Vector[T] {
    size:Int32;
    capacity:Int32;
    data:Pointer[T];
}


//
// default constructor
//

[T]
overload Vector[T]() = Vector[T](0, 0, null(T));


//
// other constructors
//

[T,n]
overload Vector[T](a:Array[T,n]) : Vector[T] {
    returned <== Vector[T]();
    for (x in a)
        push(returned, x);
}


//
// copy constructor
//

[T]
overload Vector[T](src:Vector[T]) : Vector[T] {
    ref dest = returned;
    dest.size = src.size;
    dest.capacity = src.size;
    if (dest.capacity > 0) {
        dest.data = allocateMemory(T, dest.capacity);
        ref d = iterator(dest);
        ref s = iterator(src);
        while (hasNext?(s))
            next(d) <== next(s);
    }
    else {
        dest.data = null(T);
    }
}


//
// destructor
//

[T]
overload destroy(a:Vector[T]) {
    for (x in a)
        destroy(x);
    freeMemory(a.data);
}


//
// size, item
//

[T]
overload size(a:Vector[T]) = a.size;

[T]
overload item(a:Vector[T], i) = ref deref(a.data + i);


//
// vector coordinates
//

record VectorCoordinate[T] {
    ptr:Pointer[T];
}

[T]
overload deref(c:VectorCoordinate[T]) = ref deref(c.ptr);

[T]
overload begin(a:Vector[T]) = VectorCoordinate(a.data);

[T]
overload end(a:Vector[T]) = VectorCoordinate(a.data + a.size);

[T,I|Integer?(I)]
overload add(c:VectorCoordinate[T], i:I) = VectorCoordinate(c.ptr + i);

[T,I|Integer?(I)]
overload subtract(c:VectorCoordinate[T], i:I) = VectorCoordinate(c.ptr - i);

[T]
overload subtract(c1:VectorCoordinate[T], c2:VectorCoordinate[T])
    = c1.ptr - c2.ptr;

[T]
overload inc(c:VectorCoordinate[T]) {
    inc(c.ptr);
}

[T]
overload dec(c:VectorCoordinate[T]) {
    dec(c.ptr);
}

[T]
overload lesser?(a:VectorCoordinate[T], b:VectorCoordinate[T])
    = a.ptr < b.ptr;


//
// vector iteration
//

[T]
overload iterator(a:Vector[T]) = CoordinateRange(begin(a), end(a));


//
// equals, lesser, hash
//

[T]
overload equals?(a:Vector[T], b:Vector[T]) {
    if (size(a) != size(b))
        return false;
    ref i = iterator(a);
    ref j = iterator(b);
    while (hasNext?(i)) {
        if (next(i) != next(j))
            return false;
    }
    return true;
}

[T]
overload hash(a:Vector[T]) {
    var h = 0;
    for (x in a)
        h = h + hash(x);
    return h;
}


//
// front, back, push, pop
//

[T]
overload front(a:Vector[T]) = ref item(a, 0);

[T]
overload back(a:Vector[T]) = ref item(a, size(a)-1);

[T]
overload push(a:Vector[T], x:T) {
    insert(a, size(a), x);
}

[T]
overload push(a:Vector[T], a:Movable[T]) {
    insert(a, size(a), x);
}

[T]
overload pop(a:Vector[T]) {
    // FIXME: get rid of extra copy
    var x = back(a);
    remove(a, end(a)-1);
    return x;
}


//
// clear, insert, remove
//

[T]
overload clear(a:Vector[T]) {
    destroy(a);
    initialize(a);
}

[T]
setCapacity(a:Vector[T], capacity:Int32) {
    var data = allocateMemory(T, capacity);
    var ptr = data;
    for (x in a) {
        move(deref(ptr), x);
        inc(ptr);
    }
    freeMemory(a.data);
    a.data = data;
    a.capacity = capacity;
}

[T]
ensureSpace(a:Vector[T], space:Int32) {
    if (a.size + space > a.capacity)
        setCapacity(a, 2*(a.size + space));
}

[T,I|Integer?(I)]
insertionPoint(a:Vector[T], pos:I) {
    ensureSpace(a, 1);
    var i = begin(a) + pos;
    var j = end(a);
    while (i < j) {
        move(deref(j), deref(j-1));
        dec(j);
    }
    inc(a.size);
    returnref deref(i);
}

[T,I|Integer?(I)]
overload insert(a:Vector[T], i:I, x:T) {
    insertionPoint(a, i) <== x;
}

[T,I|Integer?(I)]
overload insert(a:Vector[T], i:I, x:Movable[T]) {
    move(insertionPoint(a, i), x);
}

[T]
overload insert(a:Vector[T], i:VectorCoordinate[T], x:T) {
    insert(a, i-begin(a), x);
}

[T]
overload insert(a:Vector[T], i:VectorCoordinate[T], x:Movable[T]) {
    insert(a, i-begin(a), x);
}

[T]
overload remove(a:Vector[T], i:VectorCoordinate[T]) {
    destroy(deref(i));
    var j = end(a);
    while (true) {
        move(deref(i), deref(i+1));
        inc(i);
        if (i == j) break;
    }
    if (a.capacity > 3*(a.size+1))
        setCapacity(2*(a.size + 1));
}

[T,I|Integer?(I)]
overload remove(a:Vector[T], i:I) {
    remove(a, begin(a)+i);
}
