import kernel.operators.*;


//
// default constructor
//

[T|RecordType?(T)]
overload T() : T {
    initRecordFields(returned, 0);
}

overloadable initRecordFields;

[i]
overload initRecordFields(a, static i) {
    initialize(recordFieldRef(a, i));
    initRecordFields(a, i+1);
}

[T,i | (i == RecordFieldCount(T))]
overload initRecordFields(a:T, static i) {
}



//
// copy constructor
//

[T|RecordType?(T)]
overload T(src:T) : T {
    copyRecordFields(returned, src, 0);
}

overloadable copyRecordFields;

[T,i]
overload copyRecordFields(dest:T, src:T, static i) {
    recordFieldRef(dest, i) <-- recordFieldRef(src, i);
    copyRecordFields(dest, src, i+1);
}

[T,i | (i == RecordFieldCount(T))]
overload copyRecordFields(dest:T, src:T, static i) {
}



//
// destroy
//

[T|RecordType?(T)]
overload destroy(a:T) {
    destroyRecordFields(a, 0);
}

overloadable destroyRecordFields;

[i]
overload destroyRecordFields(a, static i) {
    destroy(recordFieldRef(a, i));
    destroyRecordFields(a, i+1);
}

[T, i |(i == RecordFieldCount(T))]
overload destroyRecordFields (a:T, static i) {
}



//
// assign
//

[T|RecordType?(T)]
overload assign(dest:T, src:T) {
    assignRecordFields(dest, src, 0);
}

overloadable assignRecordFields;

[T,i]
overload assignRecordFields(dest:T, src:T, static i) {
    assign(recordFieldRef(dest, i), recordFieldRef(src, i));
    assignRecordFields(dest, src, i+1);
}

[T,i | (i == RecordFieldCount(T))]
overload assignRecordFields(dest:T, src:T, static i) {
}



//
// equals?
//


[T|RecordType?(T)]
overload equals?(a:T, b:T) {
    return equalRecordFields?(a, b, 0);
}

overloadable equalRecordFields?;

[T,i]
overload equalRecordFields?(a:T, b:T, static i) {
    if (not equals?(recordFieldRef(a, i), recordFieldRef(b, i)))
        return false;
    return equalRecordFields?(a, b, i+1);
}

[T,i |(i == RecordFieldCount(T))]
overload equalRecordFields?(a:T, b:T, static i) {
    return true;
}



//
// lesser?
//


[T|RecordType?(T)]
overload lesser?(a:T, b:T) {
    return lesserRecordFields?(a, b, 0);
}

overloadable lesserRecordFields?;

[T,i]
overload lesserRecordFields?(a:T, b:T, static i) {
    ref af = recordFieldRef(a, i);
    ref bf = recordFieldRef(b, i);
    if (lesser?(af, bf))
        return true;
    if (lesser?(bf, af))
        return false;
    return lesserRecordFields?(a, b, i+1);
}

[T,i |(i == RecordFieldCount(T))]
overload lesserRecordFields?(a:T, b:T, static i) {
    return false;
}



//
// hash
//

[T|RecordType?(T)]
overload hash(a:T) {
    return hashRecordFields?(a, 0);
}

overloadable hashRecordFields;

[T,i]
overload hashRecordFields(a:T, static i) {
    return hash(recordFieldRef(a, i)) + hashRecordFields(a, i+1);
}

[T,i |(i == RecordFieldCount(T))]
overload hashRecordFields(a:T, static i) {
    return 0;
}
