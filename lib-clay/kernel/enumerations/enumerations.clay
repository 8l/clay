import __primitives__.*;
import kernel.operators.*;
import kernel.numbers.*;


//
// copy constructor
//

[E | EnumType?(E)]
overload E(src:E) : E {
    primitiveCopy(returned, src);
}


//
// convert to integers
//

[E,I | EnumType?(E) and IntegerType?(I)]
overload I(a:E) = I(enumToInt(a));

[E | EnumType?(E)]
overload Int32(a:E) = enumToInt(a);


//
// convert from integers
//

[E,I | EnumType?(E) and IntegerType?(I)]
overload E(a:I) = intToEnum(E, Int32(a));

[E | EnumType?(E)]
overload E(a:Int32) = intToEnum(E, a);


//
// equals?, lesser?, hash
//

[E | EnumType?(E)]
overload equals?(a:E, b:E) = (enumToInt(a) == enumToInt(b));

[E | EnumType?(E)]
overload lesser?(a:E, b:E) = (enumToInt(a) < enumToInt(b));

[E | EnumType?(E)]
overload hash(a:E) = enumToInt(a);
