import kernel.operators.*;
import kernel.numbers.*;

//
// Range
//

record Range[T] {
    first:T;
    last:T;
}

[T]
overload iterator(r:Range[T]) = r;

[T]
overload hasNext?(r:Range[T]) = r.first < r.last;

[T]
overload next(r:Range[T]) {
    var x = r.first;
    inc(r.first);
    return x;
}

overloadable range;

overload range(first, last) = Range(first, last);

[I|Integer?(I)]
overload range(last:I) = Range(zero(I), last);


//
// CoordinateRange
//

record CoordinateRange[T] {
    first:T;
    last:T;
}

[T]
overload iterator(r:CoordinateRange[T]) = r;

[T]
overload hasNext?(r:CoordinateRange[T]) = r.first < r.last;

[T]
overload next(r:CoordinateRange[T]) {
    ref obj = deref(r.first);
    inc(r.first);
    returnref obj;
}
