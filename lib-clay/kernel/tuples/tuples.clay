import kernel.operators.*;


//
// init
//

[T|TupleType?(T)]
overload init(a:T) {
    initTupleElements(a, 0);
}

overloadable initTupleElements;

[i]
overload initTupleElements(a, static i) {
    init(tupleRef(a, i));
    initTupleElements(a, i+1);
}

[T, i | (i == TupleElementCount(T))]
overload initTupleElements(a:T, static i) {
}



//
// destroy
//

[T|TupleType?(T)]
overload destroy(a:T) {
    destroyTupleElements(a, 0);
}

overloadable destroyTupleElements;

[i]
overload destroyTupleElements(a, static i) {
    destroy(tupleRef(a, i));
    destroyTupleElements(a, i+1);
}

[T, i |(i == TupleElementCount(T))]
overload destroyTupleElements(a:T, static i) {
}



//
// copy
//

[T|TupleType?(T)]
overload copy(dest:T, src:T) {
    copyTupleElements(dest, src, 0);
}

overloadable copyTupleElements;

[T,i]
overload copyTupleElements(dest:T, src:T, static i)
{
    copy(tupleRef(dest, i), tupleRef(src, i));
    copyTupleElements(dest, src, i+1);
}

[T,i | (i == TupleElementCount(T))]
overload copyTupleElements(dest:T, src:T, static i) {
}



//
// assign
//

[T|TupleType?(T)]
overload assign(dest:T, src:T) {
    assignTupleElements(dest, src, 0);
}

overloadable assignTupleElements;

[T,i]
overload assignTupleElements(dest:T, src:T, static i) {
    assign(tupleRef(dest, i), tupleRef(src, i));
    assignTupleElements(dest, src, i+1);
}

[T,i | (i == TupleElementCount(T))]
overload assignTupleElements(dest:T, src:T, static i) {
}



//
// equals?
//


[T|TupleType?(T)]
overload equals?(a:T, b:T) {
    return equalTupleElements?(a, b, 0);
}

overloadable equalTupleElements?;

[T,i]
overload equalTupleElements?(a:T, b:T, static i) {
    if (not equals?(tupleRef(a, i), tupleRef(b, i)))
        return false;
    return equalTupleElements(a, b, i+1);
}

[T,i |(i == TupleElementCount(T))]
overload equalTupleElements?(a:T, b:T, static i) {
    return true;
}



//
// lesser?
//


[T|TupleType?(T)]
overload lesser?(a:T, b:T) {
    return lesserTupleElements?(a, b, 0);
}

overloadable lesserTupleElements?;

[T,i]
overload lesserTupleElements?(a:T, b:T, static i) {
    ref av = tupleRef(a, i);
    ref bv = tupleRef(b, i);
    if (lesser?(av, bv))
        return true;
    if (lesser?(bv, av))
        return false;
    return lesserTupleElements(a, b, i+1);
}

[T,i |(i == TupleElementCount(T))]
overload lesserTupleElements?(a:T, b:T, static i) {
    return false;
}



//
// hash
//

[T|TupleType?(T)]
overload hash(a:T) {
    return hashTupleElements?(a, 0);
}

overloadable hashTupleElements;

[T,i]
overload hashTupleElements(a:T, static i) {
    return hash(tupleRef(a, i)) + hashTupleElements(a, i+1);
}

[T,i |(i == TupleElementCount(T))]
overload hashTupleElements(a:T, static i) {
    return 0;
}
