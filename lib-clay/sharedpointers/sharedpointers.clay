


//
// SharedPointer
//

record RefCounted[T] {
    refCount:Int;
    value:T;
}

record SharedPointer[T] {
    ptr: Pointer[RefCounted[T]];
}

[T]
overload RegularRecord?(static SharedPointer[T]) = false;



//
// allocateShared
//

[T]
macro allocateShared(x:T) {
    var ptr = allocateMemory(RefCounted[T], SizeT(1));
    ptr^.refCount = 1;
    ptr^.value <-- x;
    return SharedPointer(ptr);
}



//
// constructors, move, assign, destroy
//

[T]
overload SharedPointer[T]() {
    return SharedPointer(null(RefCounted[T]));
}

[T]
overload SharedPointer[T](src:SharedPointer[T]) {
    if (not null?(src))
        src.ptr^.refCount += 1;
    return SharedPointer(src.ptr);
}

[T]
overload move(src:SharedPointer[T]) returned:SharedPointer[T] {
    returned.ptr = src.ptr;
    src.ptr = null(RefCounted[T]);
}

[T]
overload assign(dest:SharedPointer[T], src:SharedPointer[T]) {
    if (dest.ptr == src.ptr)
        return;
    destroy(dest);
    dest <-- src;
}

[T]
overload destroy(p : SharedPointer[T]) {
    if (not null?(p)) {
        p.ptr^.refCount -= 1;
        if (p.ptr^.refCount == 0) {
            destroy(p.ptr^.value);
            freeMemory(p.ptr);
        }
    }
}



//
// dereference, null?, nullShared
//

[T]
overload dereference(p : SharedPointer[T]) = ref p.ptr^.value;

[T]
overload null?(p : SharedPointer[T]) = null?(p.ptr);

[T]
nullShared(static T) = SharedPointer[T]();
