
import maybe.*;
import parsing.combinators.wrapper.*;
import clay.ast.*;
import clay.lexer.*;



//
// parser input
//

record ParserInput(
    current:Pointer[Token],
    last:Pointer[Token],
    maxCurrent:Pointer[Token],
);

[A | ContiguousSequence?(A) and (SequenceElementType(A) == Token)]
overload ParserInput(tokens:A) {
    var ptr = &tokens[0];
    return ParserInput(ptr, ptr+size(tokens), ptr);
}

overload iterator(x:ParserInput) = x;

overload hasNext?(x:ParserInput) = (x.current < x.last);

overload next(x:ParserInput) {
    ref token = x.current^;
    x.current += 1;
    return ref token;
}

overload assign(dest:ParserInput, src:ParserInput) {
    var destMax = max(dest.maxCurrent, dest.current);
    var srcMax = max(src.maxCurrent, src.current);
    dest.maxCurrent = max(destMax, srcMax);

    dest.current = src.current;
    dest.last = src.last;
}



//
// combinator specialization
//

private var combinators = Combinators[ParserInput]();

private var Parser? = combinators.Parser?;
private var Parsers? = combinators.Parsers?;
private var ParseResult = combinators.ParseResult;

private var nextToken = combinators.nextToken;

private var condition = combinators.condition;
private var literal = combinators.literal;
private var literalString = combinators.literalString;
private var optional = combinators.optional;
private var choice = combinators.choice;
private var sequence = combinators.sequence;
private var sequenceAs = combinators.sequenceAs;
private var modify = combinators.modify;
private var repeated = combinators.repeated;
private var repeatedAs = combinators.repeatedAs;
private var zeroOrMore = combinators.zeroOrMore;
private var oneOrMore = combinators.oneOrMore;
private var zeroOrMoreAs = combinators.zeroOrMoreAs;
private var oneOrMoreAs = combinators.oneOrMoreAs;
private var separatedList = combinators.separatedList;
private var separatedListNoTail = combinators.separatedListNoTail;

private commaList(forward parser) = separatedList(sym(#","), parser);



//
// bounds combinator
//

[Parser]
private bounds(parser:Parser) {
    return input => {
        alias T = ParseResult(Parser);
        var start = input.current;
        return maybe(parser(input),
            x ref=> {
                x.tokens = TokenRange(start, input.current);
                x.mainToken = start;
                return Maybe(x);
            },
            () => nothing(T),
        );
    };
}



//
// keywords
//

private keyword(s) {
    var i = keywordIndex(s);
    assert(i >= 0, "invalid keyword");
    var pred = (x => ((x.kind == KEYWORD) and (x.subKind == i)));
    return modify(x => (), condition(pred));
}

private var kw_public = keyword("public");
private var kw_private = keyword("private");
private var kw_import = keyword("import");
private var kw_as = keyword("as");
private var kw_record = keyword("record");
private var kw_variant = keyword("variant");
private var kw_instance = keyword("instance");
private var kw_procedure = keyword("procedure");
private var kw_overload = keyword("overload");
private var kw_external = keyword("external");
private var kw_alias = keyword("alias");
private var kw_static = keyword("static");
private var kw_callbyname = keyword("callbyname");
private var kw_lvalue = keyword("lvalue");
private var kw_rvalue = keyword("rvalue");
private var kw_enum = keyword("enum");
private var kw_var = keyword("var");
private var kw_ref = keyword("ref");
private var kw_forward = keyword("forward");
private var kw_and = keyword("and");
private var kw_or = keyword("or");
private var kw_not = keyword("not");
private var kw_new = keyword("new");
private var kw_if = keyword("if");
private var kw_else = keyword("else");
private var kw_goto = keyword("goto");
private var kw_return = keyword("return");
private var kw_while = keyword("while");
private var kw_switch = keyword("switch");
private var kw_case = keyword("case");
private var kw_default = keyword("default");
private var kw_break = keyword("break");
private var kw_continue = keyword("continue");
private var kw_for = keyword("for");
private var kw_in = keyword("in");
private var kw_true = keyword("true");
private var kw_false = keyword("false");
private var kw_try = keyword("try");
private var kw_catch = keyword("catch");
private var kw_throw = keyword("throw");



//
// symbols
//

private symbolParser(Ident) {
    var s = sliceFrom(StaticName(Ident), 1);
    var i = symbolIndex(s);
    assert(i >= 0, "invalid symbol");
    var pred = (x => ((x.kind == SYMBOL) and (x.subKind == i)));
    return modify(x => (), condition(pred));
}

private var symbolParserTable[Ident] = symbolParser(Ident);

[Ident]
private sym(static Ident) = symbolParserTable[Ident];



//
// token parser
//

private token(tokenKind) = condition(x => (x.kind == tokenKind));

private tokenData(tokenKind) = modify(x => x.data, token(tokenKind));



//
// identifier
//

private var identifier = bounds(modify(Identifier, tokenData(IDENTIFIER)));



//
// exprParser combinator
//

private exprParser(forward modifier, forward parser) = modify(
    x => new Expr(move(x)),
    bounds(modify(modifier, parser)),
);



//
// literals
//

private var boolTrue  = modify(x => true,  kw_true);
private var boolFalse = modify(x => false, kw_false);

private var boolLiteral = exprParser(
    BoolLiteral,
    choice(boolTrue, boolFalse),
);

private var identStr = modify(String, tokenData(IDENTIFIER));

private var intLiteral = exprParser(
    x => IntLiteral(String(x.0), x.1),
    sequence(tokenData(INT_LITERAL), optional(identStr)),
);

private var floatLiteral = exprParser(
    x => FloatLiteral(String(x.0), x.1),
    sequence(tokenData(FLOAT_LITERAL), optional(identStr)),
);

private var charLiteral = exprParser(
    x => CharLiteral(String(x)),
    tokenData(CHAR_LITERAL),
);

private var stringLiteral = exprParser(
    x => StringLiteral(String(x)),
    tokenData(STRING_LITERAL),
);

private var identifierLiteral = exprParser(
    x => IdentifierLiteral(String(x.1)),
    sequence(sym(#"#"), choice(
        tokenData(IDENTIFIER), tokenData(STRING_LITERAL)
    )),
);

private var literalExpr = choice(
    boolLiteral, intLiteral, floatLiteral,
    charLiteral, stringLiteral, identifierLiteral,
);



//
// atomic expr
//

private var arrayExpr = exprParser(
    x => ArrayExpr(move(x.1)),
    sequence(sym(#"["), exprList, sym(#"]")),
);

private var tupleExpr = exprParser(
    x => TupleExpr(move(x.1)),
    sequence(sym(#"("), exprList, sym(#")")),
);

private var nameRef = exprParser(
    x => NameRef(move(x)),
    identifier,
);

private var atomicExpr = choice(arrayExpr, tupleExpr, nameRef, literalExpr);



//
// setBase, foldTail
//

private setBase2(root, field, base) {
    fieldRef(root, field) = base;
    root.tokens.begin = base^.tokens.begin;
}
private setBase(x, y) { assert(false, "baseless expression!"); }
overload setBase(x:Indexing,       y) { setBase2(x, #expr, y); }
overload setBase(x:Call,           y) { setBase2(x, #expr, y); }
overload setBase(x:FieldRef,       y) { setBase2(x, #expr, y); }
overload setBase(x:StaticIndexing, y) { setBase2(x, #expr, y); }
overload setBase(x:UnaryOp,        y) { setBase2(x, #expr, y); }
overload setBase(x:BinaryOp,       y) { setBase2(x, #expr1, y); }
overload setBase(x:And,            y) { setBase2(x, #expr1, y); }
overload setBase(x:Or,             y) { setBase2(x, #expr1, y); }

private foldTail(x) {
    var result = x.0;
    for (y in x.1) {
        setBase(*(y^), result);
        result = y;
    }
    return result;
}



//
// suffix expr
//

private var indexingSuffix = exprParser(
    x => Indexing(ExprPtr(), move(x.1)),
    sequence(sym(#"["), exprList, sym(#"]")),
);

private var callSuffix = exprParser(
    x => Call(ExprPtr(), move(x.1)),
    sequence(sym(#"("), exprList, sym(#")")),
);

private var fieldRefSuffix = exprParser(
    x => FieldRef(ExprPtr(), x.1),
    sequence(sym(#"."), identifier),
);

private var staticIndexingSuffix = exprParser(
    x => StaticIndexing(ExprPtr(), String(x.1)),
    sequence(sym(#"."), tokenData(INT_LITERAL)),
);

private var dereferenceSuffix = exprParser(
    x => UnaryOp(DEREFERENCE, ExprPtr()),
    sym(#"^"),
);

private var suffix = choice(
    indexingSuffix, callSuffix, fieldRefSuffix,
    staticIndexingSuffix, dereferenceSuffix,
);

private var suffixExpr2 = modify(
    foldTail,
    sequence(atomicExpr, zeroOrMore(suffix)),
);

private suffixExpr(input) = suffixExpr2(input);



//
// prefix expr
//

private var addressOfExpr = exprParser(
    x => UnaryOp(ADDRESS_OF, x.1),
    sequence(sym(#"&"), suffixExpr),
);

private var plusOrMinus = choice(
    modify(x => PLUS,  sym(#"+")),
    modify(x => MINUS, sym(#"-")),
);

private var signExpr = exprParser(
    x => UnaryOp(x.0, x.1),
    sequence(plusOrMinus, suffixExpr),
);

private var dispatchExpr = exprParser(
    x => DispatchExpr(x.1),
    sequence(sym(#"*"), suffixExpr),
);

private var prefixExpr2 = choice(
    signExpr, addressOfExpr, dispatchExpr, suffixExpr
);

private prefixExpr(input) = prefixExpr2(input);



//
// binary ops
//

private binaryOp(op, term) = modify(
    foldTail,
    sequence(term, zeroOrMore(exprParser(
        x => BinaryOp(x.0, ExprPtr(), x.1),
        sequence(op, term),
    ))),
);

private var mulDivOp = choice(
    modify(x => MULTIPLY,  sym(#"*")),
    modify(x => DIVIDE,    sym(#"/")),
    modify(x => REMAINDER, sym(#"%")),
);
private var mulDivExpr2 = binaryOp(mulDivOp, prefixExpr);
private mulDivExpr(input) = mulDivExpr2(input);

private var addSubOp = choice(
    modify(x => ADD,      sym(#"+")),
    modify(x => SUBTRACT, sym(#"-")),
);
private var addSubExpr2 = binaryOp(addSubOp, mulDivExpr);
private addSubExpr(input) = addSubExpr2(input);

private var compareOp = choice(
    modify(x => EQUALS,         sym(#"==")),
    modify(x => NOT_EQUALS,     sym(#"!=")),
    modify(x => LESSER,         sym(#"<")),
    modify(x => LESSER_EQUALS,  sym(#"<=")),
    modify(x => GREATER,        sym(#">")),
    modify(x => GREATER_EQUALS, sym(#">=")),
);
private var compareExpr2 = binaryOp(compareOp, addSubExpr);
private compareExpr(input) = compareExpr2(input);



//
// not, and, or
//

private var notExpr2 = choice(
    exprParser(
        x => UnaryOp(NOT, x.1),
        sequence(kw_not, compareExpr),
    ),
    compareExpr,
);
private notExpr(input) = notExpr2(input);

private andOrOp(node, op, term) = modify(
    foldTail,
    sequence(term, zeroOrMore(exprParser(
        x => node(ExprPtr(), x.1),
        sequence(op, term),
    ))),
);

private var andExpr2 = andOrOp(And, kw_and, notExpr);
private andExpr(input) = andExpr2(input);

private var orExpr2 = andOrOp(Or, kw_or, andExpr);
private orExpr(input) = orExpr2(input);



//
// if expr, unpack expr, new expr, static expr
//

private var ifExpr = exprParser(
    x => IfExpr(x.2, x.4, x.6),
    sequence(kw_if, sym(#"("), expr, sym(#")"), expr, kw_else, expr),
);

private var unpackExpr = exprParser(
    x => Unpack(x.1),
    sequence(sym(#"..."), expr),
);

private var newExpr = exprParser(
    x => New(x.1),
    sequence(kw_new, expr),
);

private var staticExpr = exprParser(
    x => StaticExpr(x.1),
    sequence(kw_static, expr),
);



//
// return kind
//

private var returnKind = choice(
    modify(x => RETURN_REF, kw_ref),
    modify(x => RETURN_FORWARD, kw_forward),
    input => Maybe(RETURN_VALUE),
);



//
// lambda expr
//

private var lambdaArgs = choice(
    modify(Vector[Identifier], identifier),
    modify(
        x => move(x.1),
        sequence(sym(#"("), zeroOrMore(identifier), sym(#")")),
    ),
);

private var optCaptureByRef = choice(
    modify(x => true, kw_ref),
    input => Maybe(false),
);

private var lambdaBody = choice(
    block,
    statementParser(
        x => Return(x.0, Vector[ExprPtr](x.1)),
        sequence(returnKind, expr),
    ),
);

private var lambdaExpr = exprParser(
    x => LambdaExpr(x.1, move(x.0), move(x.3)),
    sequence(lambdaArgs, optCaptureByRef, sym(#"=>"), lambdaBody),
);



//
// expr
//

private var expr2 = choice(
    lambdaExpr, orExpr, ifExpr, unpackExpr, newExpr, staticExpr,
);

private expr(input) Maybe[ExprPtr] { return expr2(input); }

private var exprList2 = commaList(expr);
private exprList(input) = exprList2(input);



//
// statementParser combinator
//

private statementParser(forward modifier, forward parser) = modify(
    x => new Statement(move(x)),
    bounds(modify(modifier, parser)),
);



//
// statement
//

private block(input) = statement(input);

private statement(input) Maybe[StatementPtr] { return nothing(StatementPtr); }



//
// parseExpr
//

record ParserError(where:Pointer[Token]);
instance Exception = ParserError;

private var parseExpr2 = modify(
    x => x.0,
    sequence(expr, token(SENTINEL)),
);

parseExpr(input) {
    var result = parseExpr2(input);
    if (nothing?(result))
        throw ParserError(input.maxCurrent - 1);
    return require(move(result));
}
