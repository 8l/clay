
import maybe.*;
import parsing.combinators.wrapper.*;
import clay.tokens.*;
import clay.lexer.*;
import clay.ast.*;



//
// parser input
//

record ParserInput(
    current:Pointer[Token],
    last:Pointer[Token],
    maxCurrent:Pointer[Token],
);

[A | ContiguousSequence?(A) and (SequenceElementType(A) == Token)]
overload ParserInput(tokens:A) {
    var ptr = &tokens[0];
    return ParserInput(ptr, ptr+size(tokens), ptr);
}

overload iterator(x:ParserInput) = x;

overload hasNext?(x:ParserInput) = (x.current < x.last);

overload next(x:ParserInput) {
    ref token = x.current^;
    x.current += 1;
    return ref token;
}

overload assign(dest:ParserInput, src:ParserInput) {
    var destMax = max(dest.maxCurrent, dest.current);
    var srcMax = max(src.maxCurrent, src.current);
    dest.maxCurrent = max(destMax, srcMax);

    dest.current = src.current;
    dest.last = src.last;
}



//
// combinator specialization
//

private var combinators = Combinators[ParserInput]();

private var Parser? = combinators.Parser?;
private var Parsers? = combinators.Parsers?;
private var ParseResult = combinators.ParseResult;

private var nextToken = combinators.nextToken;

private var condition = combinators.condition;
private var literal = combinators.literal;
private var literalString = combinators.literalString;
private var optional = combinators.optional;
private var choice = combinators.choice;
private var sequence = combinators.sequence;
private var sequenceAs = combinators.sequenceAs;
private var modify = combinators.modify;
private var repeated = combinators.repeated;
private var repeatedAs = combinators.repeatedAs;
private var zeroOrMore = combinators.zeroOrMore;
private var oneOrMore = combinators.oneOrMore;
private var zeroOrMoreAs = combinators.zeroOrMoreAs;
private var oneOrMoreAs = combinators.oneOrMoreAs;
private var separatedList = combinators.separatedList;
private var optSeparatedList = combinators.optSeparatedList;
private var separatedListStrict = combinators.separatedListStrict;

private commaList(forward parser) = separatedList(sym(#","), parser);
private optCommaList(forward parser) = optSeparatedList(sym(#","), parser);

private commaListStrict(forward parser) =
    separatedListStrict(sym(#","), parser);

private optCommaListStrict(forward parser) =
    optSeparatedListStrict(sym(#","), parser);



//
// varList combinator
//

private commaAndItem(item) = modify(x => move(x.1), sequence(sym(#","), item));

[Item, VarItem | Parsers?(Item, VarItem)]
private varList(item:Item, varItem:VarItem) {
    alias T = ParseResult(Item);
    return choice(
        modify(
            x => VarList(move(x.0), move(x.1)),
            sequence(commaListStrict(item), optional(commaAndItem(varItem))),
        ),
        modify(
            x => VarList(Vector[T](), move(x)),
            optional(varItem),
        ),
    );
}



//
// bounds combinator
//

[Parser]
private bounds(parser:Parser) {
    return input => {
        alias T = ParseResult(Parser);
        var start = input.current;
        return maybe(parser(input),
            x ref=> {
                x.tokens = TokenRange(start, input.current);
                x.mainToken = start;
                return Maybe(move(x));
            },
            () => nothing(T),
        );
    };
}



//
// keywords
//

private keyword(s) {
    var i = keywordIndex(s);
    assert(i >= 0, "invalid keyword");
    var pred = (x => ((x.kind == KEYWORD) and (x.subKind == i)));
    return modify(x => (), condition(pred));
}

private var kw_public = keyword("public");
private var kw_private = keyword("private");
private var kw_import = keyword("import");
private var kw_as = keyword("as");
private var kw_record = keyword("record");
private var kw_variant = keyword("variant");
private var kw_instance = keyword("instance");
private var kw_procedure = keyword("procedure");
private var kw_overload = keyword("overload");
private var kw_external = keyword("external");
private var kw_alias = keyword("alias");
private var kw_static = keyword("static");
private var kw_callbyname = keyword("callbyname");
private var kw_lvalue = keyword("lvalue");
private var kw_rvalue = keyword("rvalue");
private var kw_inline = keyword("inline");
private var kw_enum = keyword("enum");
private var kw_var = keyword("var");
private var kw_ref = keyword("ref");
private var kw_forward = keyword("forward");
private var kw_and = keyword("and");
private var kw_or = keyword("or");
private var kw_not = keyword("not");
private var kw_new = keyword("new");
private var kw_if = keyword("if");
private var kw_else = keyword("else");
private var kw_goto = keyword("goto");
private var kw_return = keyword("return");
private var kw_while = keyword("while");
private var kw_switch = keyword("switch");
private var kw_case = keyword("case");
private var kw_default = keyword("default");
private var kw_break = keyword("break");
private var kw_continue = keyword("continue");
private var kw_for = keyword("for");
private var kw_in = keyword("in");
private var kw_true = keyword("true");
private var kw_false = keyword("false");
private var kw_try = keyword("try");
private var kw_catch = keyword("catch");
private var kw_throw = keyword("throw");



//
// symbols
//

private symbolParser(Ident) {
    var s = sliceFrom(StaticName(Ident), 1);
    var i = symbolIndex(s);
    assert(i >= 0, "invalid symbol");
    var pred = (x => ((x.kind == SYMBOL) and (x.subKind == i)));
    return modify(x => (), condition(pred));
}

private var symbolParserTable[Ident] = symbolParser(Ident);

[Ident]
private sym(static Ident) = symbolParserTable[Ident];



//
// token parser
//

private token(tokenKind) = condition(x => (x.kind == tokenKind));

private tokenData(tokenKind) = modify(x => x.data, token(tokenKind));



//
// identifier
//

private var identifier = bounds(modify(Identifier, tokenData(IDENTIFIER)));
private var identifierList = commaList(identifier);



//
// exprParser combinator
//

private exprParser(forward modifier, forward parser) = modify(
    x => new Expr(move(x)),
    bounds(modify(modifier, parser)),
);



//
// literals
//

private var boolTrue  = modify(x => true,  kw_true);
private var boolFalse = modify(x => false, kw_false);

private var boolLiteral = exprParser(
    BoolLiteral,
    choice(boolTrue, boolFalse),
);

private var identStr = modify(String, tokenData(IDENTIFIER));

private var intLiteral = exprParser(
    x => IntLiteral(String(x.0), x.1),
    sequence(tokenData(INT_LITERAL), optional(identStr)),
);

private var floatLiteral = exprParser(
    x => FloatLiteral(String(x.0), x.1),
    sequence(tokenData(FLOAT_LITERAL), optional(identStr)),
);

private var charLiteral = exprParser(
    x => CharLiteral(String(x)),
    tokenData(CHAR_LITERAL),
);

private var stringLiteral = exprParser(
    x => StringLiteral(String(x)),
    tokenData(STRING_LITERAL),
);

private var identifierLiteral = exprParser(
    x => IdentifierLiteral(String(x.1)),
    sequence(sym(#"#"), choice(
        tokenData(IDENTIFIER), tokenData(STRING_LITERAL)
    )),
);

private var literalExpr = choice(
    boolLiteral, intLiteral, floatLiteral,
    charLiteral, stringLiteral, identifierLiteral,
);



//
// atomic expr
//

private var arrayExpr = exprParser(
    x => ArrayExpr(move(x.1)),
    sequence(sym(#"["), exprList, sym(#"]")),
);

private var tupleExpr = exprParser(
    x => TupleExpr(move(x.1)),
    sequence(sym(#"("), optExprList, sym(#")")),
);

private var nameRef = exprParser(
    x => NameRef(move(x)),
    identifier,
);

private var atomicExpr = choice(arrayExpr, tupleExpr, nameRef, literalExpr);



//
// setBase, foldTail
//

private setBase2(root, field, base) {
    fieldRef(root, field) = base;
    root.tokens.begin = base^.tokens.begin;
}
private setBase(x, y) { assert(false, "baseless expression!"); }
overload setBase(x:Indexing,       y) { setBase2(x, #expr, y); }
overload setBase(x:Call,           y) { setBase2(x, #expr, y); }
overload setBase(x:FieldRef,       y) { setBase2(x, #expr, y); }
overload setBase(x:StaticIndexing, y) { setBase2(x, #expr, y); }
overload setBase(x:UnaryOp,        y) { setBase2(x, #expr, y); }
overload setBase(x:BinaryOp,       y) { setBase2(x, #expr1, y); }
overload setBase(x:And,            y) { setBase2(x, #expr1, y); }
overload setBase(x:Or,             y) { setBase2(x, #expr1, y); }

private foldTail(x) {
    var result = x.0;
    for (y in x.1) {
        setBase(*(y^), result);
        result = y;
    }
    return result;
}



//
// suffix expr
//

private var indexingSuffix = exprParser(
    x => Indexing(ExprPtr(), move(x.1)),
    sequence(sym(#"["), optExprList, sym(#"]")),
);

private var callSuffix = exprParser(
    x => Call(ExprPtr(), move(x.1)),
    sequence(sym(#"("), optExprList, sym(#")")),
);

private var fieldRefSuffix = exprParser(
    x => FieldRef(ExprPtr(), x.1),
    sequence(sym(#"."), identifier),
);

private var staticIndexingSuffix = exprParser(
    x => StaticIndexing(ExprPtr(), String(x.1)),
    sequence(sym(#"."), tokenData(INT_LITERAL)),
);

private var dereferenceSuffix = exprParser(
    x => UnaryOp(DEREFERENCE, ExprPtr()),
    sym(#"^"),
);

private var suffix = choice(
    indexingSuffix, callSuffix, fieldRefSuffix,
    staticIndexingSuffix, dereferenceSuffix,
);

private var suffixExpr = modify(
    foldTail,
    sequence(atomicExpr, zeroOrMore(suffix)),
);



//
// prefix expr
//

private var addressOfExpr = exprParser(
    x => UnaryOp(ADDRESS_OF, x.1),
    sequence(sym(#"&"), suffixExpr),
);

private var plusOrMinus = choice(
    modify(x => PLUS,  sym(#"+")),
    modify(x => MINUS, sym(#"-")),
);

private var signExpr = exprParser(
    x => UnaryOp(x.0, x.1),
    sequence(plusOrMinus, suffixExpr),
);

private var dispatchExpr = exprParser(
    x => DispatchExpr(x.1),
    sequence(sym(#"*"), suffixExpr),
);

private var prefixExpr = choice(
    signExpr, addressOfExpr, dispatchExpr, suffixExpr
);



//
// binary ops
//

private binaryOp(op, term) = modify(
    foldTail,
    sequence(term, zeroOrMore(exprParser(
        x => BinaryOp(x.0, ExprPtr(), x.1),
        sequence(op, term),
    ))),
);

private var mulDivOp = choice(
    modify(x => MULTIPLY,  sym(#"*")),
    modify(x => DIVIDE,    sym(#"/")),
    modify(x => REMAINDER, sym(#"%")),
);
private var mulDivExpr = binaryOp(mulDivOp, prefixExpr);

private var addSubOp = choice(
    modify(x => ADD,      sym(#"+")),
    modify(x => SUBTRACT, sym(#"-")),
);
private var addSubExpr = binaryOp(addSubOp, mulDivExpr);

private var compareOp = choice(
    modify(x => EQUALS,         sym(#"==")),
    modify(x => NOT_EQUALS,     sym(#"!=")),
    modify(x => LESSER,         sym(#"<")),
    modify(x => LESSER_EQUALS,  sym(#"<=")),
    modify(x => GREATER,        sym(#">")),
    modify(x => GREATER_EQUALS, sym(#">=")),
);
private var compareExpr = binaryOp(compareOp, addSubExpr);



//
// not, and, or
//

private var notExpr = choice(
    exprParser(
        x => UnaryOp(NOT, x.1),
        sequence(kw_not, compareExpr),
    ),
    compareExpr,
);

private andOrOp(node, op, term) = modify(
    foldTail,
    sequence(term, zeroOrMore(exprParser(
        x => node(ExprPtr(), x.1),
        sequence(op, term),
    ))),
);

private var andExpr = andOrOp(And, kw_and, notExpr);
private var orExpr = andOrOp(Or, kw_or, andExpr);



//
// if expr, unpack expr, new expr, static expr
//

private var ifExpr = exprParser(
    x => IfExpr(x.2, x.4, x.6),
    sequence(kw_if, sym(#"("), expr, sym(#")"), expr, kw_else, expr),
);

private var unpackExpr = exprParser(
    x => Unpack(x.1),
    sequence(sym(#"..."), expr),
);

private var newExpr = exprParser(
    x => New(x.1),
    sequence(kw_new, expr),
);

private var staticExpr = exprParser(
    x => StaticExpr(x.1),
    sequence(kw_static, expr),
);



//
// return kind
//

private var returnKind = choice(
    modify(x => RETURN_REF, kw_ref),
    modify(x => RETURN_FORWARD, kw_forward),
    input => Maybe(RETURN_VALUE),
);



//
// lambda expr
//

private var lambdaArgs = choice(
    modify(Vector[Identifier], identifier),
    modify(
        x => move(x.1),
        sequence(sym(#"("), zeroOrMore(identifier), sym(#")")),
    ),
);

private var optCaptureByRef = choice(
    modify(x => true, kw_ref),
    input => Maybe(false),
);

private var lambdaBody = choice(
    block,
    statementParser(
        x => Return(x.0, Vector[ExprPtr](x.1)),
        sequence(returnKind, expr),
    ),
);

private var lambdaExpr = exprParser(
    x => LambdaExpr(x.1, move(x.0), move(x.3)),
    sequence(lambdaArgs, optCaptureByRef, sym(#"=>"), lambdaBody),
);



//
// expr
//

private var expr2 = choice(
    lambdaExpr, orExpr, ifExpr, unpackExpr, newExpr, staticExpr,
);

private expr(input) Maybe[ExprPtr] { return expr2(input); }

private var exprList = commaList(expr);
private var optExprList = optCommaList(expr);



//
// pattern
//

private var dottedNamedRef = modify(
    foldTail,
    sequence(nameRef, zeroOrMore(fieldRefSuffix)),
);

private var atomicPattern = choice(dottedNamedRef, intLiteral);

private var pattern = modify(
    foldTail,
    sequence(atomicPattern, zeroOrMore(indexingSuffix)),
);



//
// patternTypeSpec, typeSpec
//

private var patternTypeSpec = modify(x => x.1, sequence(sym(#":"), pattern));
private var typeSpec = modify(x => x.1, sequence(sym(#":"), expr));



//
// statementParser combinator
//

private statementParser(forward modifier, forward parser) = modify(
    x => new Statement(move(x)),
    bounds(modify(modifier, parser)),
);



//
// statements
//

private var labelDef = statementParser(
    x => Label(x.0),
    sequence(identifier, sym(#":")),
);

private var bindingKind = choice(
    modify(x => VAR,   kw_var),
    modify(x => REF,   kw_ref),
    modify(x => ALIAS, kw_alias),
);

private var localBinding = statementParser(
    x => Binding(x.0, move(x.1), move(x.3)),
    sequence(bindingKind, identifierList, sym(#"="), exprList, sym(#";")),
);

private var blockItem = choice(labelDef, localBinding, statement);

private var block = statementParser(
    x => Block(move(x.1)),
    sequence(sym(#"{"), zeroOrMore(blockItem), sym(#"}")),
);

private var assignment = statementParser(
    x => Assignment(move(x.0), move(x.2)),
    sequence(exprList, sym(#"="), exprList, sym(#";")),
);

private var initAssignment = statementParser(
    x => InitAssignment(move(x.0), move(x.2)),
    sequence(exprList, sym(#"<--"), exprList, sym(#";")),
);

private var updateOp = choice(
    modify(x => UPDATE_ADD,       sym(#"+=")),
    modify(x => UPDATE_SUBTRACT,  sym(#"-=")),
    modify(x => UPDATE_MULTIPLY,  sym(#"*=")),
    modify(x => UPDATE_DIVIDE,    sym(#"/=")),
    modify(x => UPDATE_REMAINDER, sym(#"%=")),
);

private var updateAssignment = statementParser(
    x => UpdateAssignment(x.1, x.0, x.2),
    sequence(expr, updateOp, expr, sym(#";")),
);

private var gotoStatement = statementParser(
    x => Goto(x.1),
    sequence(kw_goto, identifier, sym(#";")),
);

private var returnStatement = statementParser(
    x => Return(x.1, move(x.2)),
    sequence(kw_return, returnKind, optExprList, sym(#";")),
);

private var ifStatement = statementParser(
    x => If(x.2, x.4, x.5),
    sequence(
        kw_if, sym(#"("), expr, sym(#")"), statement,
        optional(modify(
            x => x.1,
            sequence(kw_else, statement),
        )),
    ),
);

private var caseLabel = modify(
    x => x.1,
    sequence(kw_case, expr, sym(#":")),
);

private var caseBody = statementParser(CaseBody, oneOrMore(statement));

private var caseBlock = bounds(modify(
    x => CaseBlock(move(x.0), move(x.1)),
    sequence(oneOrMore(caseLabel), caseBody),
));

private var defaultCase = modify(
    x => x.2,
    sequence(kw_default, sym(#":"), caseBody),
);

private var switchStatement = statementParser(
    x => Switch(x.2, move(x.5), x.6),
    sequence(
        kw_switch, sym(#"("), expr, sym(#")"), sym(#"{"),
        zeroOrMore(caseBlock), optional(defaultCase), sym(#"}"),
    ),
);

private var exprStatement = statementParser(
    x => ExprStatement(x.0),
    sequence(expr, sym(#";")),
);

private var whileStatement = statementParser(
    x => While(x.2, x.4),
    sequence(kw_while, sym(#"("), expr, sym(#")"), statement),
);

private var breakStatement = statementParser(
    x => Break(),
    sequence(kw_break, sym(#";")),
);

private var continueStatement = statementParser(
    x => Continue(),
    sequence(kw_continue, sym(#";")),
);

private var forStatement = statementParser(
    x => For(move(x.2), x.4, x.6),
    sequence(
        kw_for, sym(#"("), identifierList, kw_in, expr, sym(#")"),
        statement
    ),
);

private var catchBlock = bounds(modify(
    x => Catch(x.2, x.3, x.5),
    sequence(
        kw_catch, sym(#"("), identifier, optional(typeSpec), sym(#")"), block,
    ),
));

private var tryStatement = statementParser(
    x => Try(x.1, move(x.2)),
    sequence(kw_try, block, oneOrMore(catchBlock)),
);

private var throwStatement = statementParser(
    x => Throw(x.1),
    sequence(kw_throw, expr, sym(#";")),
);

private var staticForStatement = statementParser(
    x => StaticFor(x.3, move(x.5), x.7),
    sequence(
        kw_static, kw_for, sym(#"("), identifier, kw_in,
        exprList, sym(#")"), statement,
    ),
);

private var statement2 = choice(
    block, assignment, initAssignment, updateAssignment, ifStatement,
    gotoStatement, switchStatement, returnStatement, exprStatement,
    whileStatement, breakStatement, continueStatement, forStatement,
    tryStatement, throwStatement, staticForStatement,
);

private statement(input) Maybe[StatementPtr] = statement2(input);



//
// parsing parts of code definitions
//

private var patternVar = bounds(modify(
    x => PatternVar(not nothing?(x.0), x.1),
    sequence(optional(sym(#"...")), identifier),
));

private var optPredicate = optional(modify(
    x => x.1,
    sequence(sym(#"|"), expr),
));

private var patternVarsWithPredicate2 = modify(
    x => (move(x.1), x.2),
    sequence(sym(#"["), optCommaList(patternVar), optPredicate, sym(#"]")),
);

private var patternVarsWithPredicate = modify(
    x => maybe(move(x), move, () => (Vector[PatternVar](), nothing(ExprPtr))),
    optional(patternVarsWithPredicate2),
);

private var argumentKind = choice(
    modify(x => ARG_LVALUE,  kw_lvalue),
    modify(x => ARG_RVALUE,  kw_rvalue),
    modify(x => ARG_FORWARD, kw_forward),
    input => Maybe(ARG_DEFAULT),
);

private var argument = choice(
    modify(Argument, bounds(modify(
        x => NormalArgument(x.0, x.1, x.2),
        sequence(argumentKind, identifier, optional(patternTypeSpec)),
    ))),
    modify(Argument, bounds(modify(
        x => StaticArgument(x.1),
        sequence(kw_static, orExpr),
    ))),
);

private var variadicArgument = modify(Argument, bounds(modify(
    x => NormalArgument(x.0, x.2, x.3),
    sequence(argumentKind, sym(#"..."), identifier, optional(patternTypeSpec)),
)));

private var arguments = varList(argument, variadicArgument);

private var namedReturn = modify(
    x => x.0,
    sequence(identifier, sym(#":"))
);

private var returnSpec = bounds(modify(
    x => ReturnSpec(not nothing?(x.0), x.1, x.2),
    sequence(optional(sym(#"...")), optional(namedReturn), orExpr),
));

private var returnSpecs = optCommaList(returnSpec);

private var clayBody = choice(
    block,
    statementParser(
        x => Return(x.1, move(x.2)),
        sequence(sym(#"="), returnKind, optExprList, sym(#";")),
    ),
);

private var llvmBody = bounds(modify(
    x => LLVMBody(String(x)),
    tokenData(LLVM),
));

private var codeBody = choice(
    modify(CodeBody, clayBody),
    modify(CodeBody, llvmBody),
);



//
// top level items
//

private topLevelItemParser(forward modifier, forward parser) = modify(
    x => TopLevelItem(move(x)),
    bounds(modify(modifier, parser)),
);

private var visibility = choice(
    modify(x => PUBLIC,  kw_public),
    modify(x => PRIVATE, kw_private),
);

private var recordField = bounds(modify(
    x => RecordField(x.0, x.1),
    sequence(identifier, typeSpec),
));

private var declaredRecordBody = bounds(modify(
    x => DeclaredRecordBody(move(x.1)),
    sequence(sym(#"("), optCommaList(recordField), sym(#")"), sym(#";")),
));

private var computedRecordBody = bounds(modify(
    x => ComputedRecordBody(move(x.1)),
    sequence(sym(#"="), optExprList, sym(#";")),
));

private var recordBody = choice(
    modify(RecordBody, declaredRecordBody),
    modify(RecordBody, computedRecordBody),
);

private var staticParams = modify(
    x => move(x.1),
    sequence(
        sym(#"["),
        varList(identifier, modify(x => x.1, sequence(sym(#"..."), identifier))),
        sym(#"]"),
    ),
);

private var optStaticParams = modify(
    x => maybe(move(x), move, () => VarList[Identifier]()),
    optional(staticParams),
);

private var recordDef = topLevelItemParser(
    x => RecordDef(x.0, x.2, x.3, x.4),
    sequence(
        optional(visibility), kw_record, identifier, optStaticParams,
        recordBody,
    ),
);


private var defaultInstances = choice(
    modify(
        x => Vector[ExprPtr](),
        sym(#";"),
    ),
    modify(
        x => move(x.1),
        sequence(sym(#"="), separatedList(sym(#"|"), expr), sym(#";")),
    ),
);

private var variantDef = topLevelItemParser(
    x => VariantDef(x.0, x.2, x.3, x.4),
    sequence(
        optional(visibility), kw_variant, identifier, optStaticParams,
        defaultInstances
    ),
);

private var instanceDef = topLevelItemParser(
    x => InstanceDef((x.0).0, (x.0).1, x.2, x.4),
    sequence(
        patternVarsWithPredicate, kw_instance, pattern,
        sym(#"="), expr, sym(#";"),
    ),
);

private var optCallByName = modify(
    x => not nothing?(x),
    optional(kw_callbyname),
);

private var optInline = modify(
    x => not nothing?(x),
    optional(kw_inline),
);

private var procedureWithBody = topLevelItemParser(
    x => ProcedureDef(x.1, x.5, Maybe(
        Code(x.2, x.3, (x.0).0, (x.0).1, x.7, x.9, x.10)
    )),
    sequence(
        patternVarsWithPredicate, optional(visibility), optCallByName,
        optInline, optional(kw_procedure), identifier,
        sym(#"("), arguments, sym(#")"), returnSpecs, codeBody,
    ),
);

private var procedureWithoutBody = topLevelItemParser(
    x => ProcedureDef(x.0, x.2, nothing(Code)),
    sequence(optional(visibility), kw_procedure, identifier, sym(#";")),
);

private var overloadDef = topLevelItemParser(
    x => OverloadDef(x.4, Code(x.1, x.2, (x.0).0, (x.0).1, x.6, x.8, x.9)),
    sequence(
        patternVarsWithPredicate, optCallByName, optInline, kw_overload,
        pattern, sym(#"("), arguments, sym(#")"), returnSpecs, codeBody,
    ),
);

private var enumDef = topLevelItemParser(
    x => EnumDef(x.0, x.2, x.4),
    sequence(
        optional(visibility), kw_enum, identifier,
        sym(#"{"), identifierList, sym(#"}")
    ),
);

private var globalVariableDef = topLevelItemParser(
    x => GlobalVariable(x.0, x.2, x.3, x.5),
    sequence(
        optional(visibility), kw_var, identifier, optStaticParams,
        sym(#"="), expr, sym(#";"),
    ),
);

private var globalAliasDef = topLevelItemParser(
    x => GlobalAlias(x.0, x.2, x.3, x.5),
    sequence(
        optional(visibility), kw_alias, identifier, optStaticParams,
        sym(#"="), expr, sym(#";"),
    ),
);

private var externalAttribtues2 = modify(
    x => x.1,
    sequence(sym(#"("), exprList, sym(#")")),
);

private var externalAttribtues = modify(
    x => maybe(move(x), move, () => Vector[ExprPtr]()),
    optional(externalAttribtues2),
);

private var externalArg = bounds(modify(
    x => ExternalArg(x.0, x.2),
    sequence(identifier, sym(#":"), expr),
));

private var variadicExternalArg = bounds(modify(
    x => ExternalArg(),
    sym(#"..."),
));

private var externalArgs = modify(
    x => (move(x.items), not nothing?(x.varItem)),
    varList(externalArg, variadicExternalArg),
);

private var externalBody = choice(
    modify(x => Maybe(x), block),
    modify(x => nothing(StatementPtr), sym(#";")),
);

private var externalProcedure = topLevelItemParser(
    x => ExternalProcedure(x.0, x.3, x.2, (x.5).0, (x.5).1, x.7, x.8),
    sequence(
        optional(visibility), kw_external, externalAttribtues, identifier,
        sym(#"("), externalArgs, sym(#")"), optional(expr), externalBody,
    ),
);

private var externalVariable = topLevelItemParser(
    x => ExternalVariable(x.0, x.3, x.2, x.4),
    sequence(
        optional(visibility), kw_external, externalAttribtues,
        identifier, typeSpec, sym(#";"),
    ),
);

private var topLevelItem = choice(
    recordDef, variantDef, instanceDef, procedureWithBody,
    procedureWithoutBody, overloadDef, enumDef,
    globalVariableDef, globalAliasDef,
    externalProcedure, externalVariable,
);



//
// imports
//

private var moduleName = bounds(modify(
    DottedName,
    separatedListStrict(sym(#"."), identifier),
));

private var optAlias = optional(modify(
    x => x.1,
    sequence(kw_as, identifier),
));

private importParser(forward modifier, forward parser) = modify(
    x => Import(move(x)),
    bounds(modify(modifier, parser)),
);

private var importModule = importParser(
    x => ImportModule(x.0, x.2, x.3),
    sequence(
        optional(visibility), kw_import, moduleName, optAlias, sym(#";")
    ),
);

private var importStar = importParser(
    x => ImportStar(x.0, x.2),
    sequence(
        optional(visibility), kw_import, moduleName,
        sym(#"."), sym(#"*"), sym(#";"),
    ),
);

private var importedMember = bounds(modify(
    x => ImportedMember(x.0, x.1),
    sequence(identifier, optAlias),
));

private var importMembers = importParser(
    x => ImportMembers(x.0, x.2, x.5),
    sequence(
        optional(visibility), kw_import, moduleName, sym(#"."),
        sym(#"("), commaList(importedMember), sym(#")"), sym(#";"),
    ),
);

private var importDef = choice(
    importModule, importStar, importMembers,
);



//
// module
//

private var module = bounds(modify(
    x => Module(x.0, x.1),
    sequence(zeroOrMore(importDef), zeroOrMore(topLevelItem)),
));



//
// parseExpr, parseStatement, parseTopLevelItem, parseModule
//

record ParserError(where:Pointer[Token]);
instance Exception = ParserError;

private var parseExpr2 = modify(
    x => x.0,
    sequence(expr, token(SENTINEL)),
);

parseExpr(input) {
    var result = parseExpr2(input);
    if (nothing?(result))
        throw ParserError(input.maxCurrent - 1);
    return require(move(result));
}

private var parseStatement2 = modify(
    x => x.0,
    sequence(statement, token(SENTINEL)),
);

parseStatement(input) {
    var result = parseStatement2(input);
    if (nothing?(result))
        throw ParserError(input.maxCurrent - 1);
    return require(move(result));
}

private var parseTopLevelItem2 = modify(
    x => x.0,
    sequence(topLevelItem, token(SENTINEL)),
);

parseTopLevelItem(input) {
    var result = parseTopLevelItem2(input);
    if (nothing?(result))
        throw ParserError(input.maxCurrent - 1);
    return require(move(result));
}

private var parseModule2 = modify(
    x => x.0,
    sequence(module, token(SENTINEL)),
);

parseModule(input) {
    var result = parseModule2(input);
    if (nothing?(result))
        throw ParserError(input.maxCurrent - 1);
    return require(move(result));
}
