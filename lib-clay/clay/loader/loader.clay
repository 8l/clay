
import maybe.*;
import io.paths.*;
import clay.common.*;
import clay.lexer.*;
import clay.ast as ast;
import clay.parser.*;
import clay.core.*;
import clay.loader.platform as platform;



//
// module search path
//

private var searchPath = Vector[String]();

addSearchPath(p) {
    push(searchPath, p);
}

initSearchPath() {
    var clayDir, clayExe = ...splitPath(pathToExecutable());
    var libClayDir1 = joinPath(clayDir, "lib-clay");
    var libClayDir2 = joinPath(clayDir, "..", "lib-clay");
    addSearchPath(libClayDir1);
    addSearchPath(libClayDir2);
    addSearchPath(String("."));
}



//
// locateModule
//

private var moduleSuffixes = initModuleSuffixes();

private initModuleSuffixes() {
    var os, osGroup, cpu, bits =
        platform.os, platform.osGroup, platform.cpu, platform.bits;
    var suffixes = Vector[String]();
    eachValue(
        parts ref=> {
            var suffix = String();
            eachValue(
                part ref=> {
                    printTo(suffix, '.');
                    printTo(suffix, part);
                },
                ...unpackTuple(parts),
                "clay",
            );
            push(suffixes, move(suffix));
        },
        Tuple(os, cpu, bits),
        Tuple(os, cpu),
        Tuple(os, bits),
        Tuple(cpu, bits),
        Tuple(os),
        Tuple(cpu),
        Tuple(bits),
        Tuple(osGroup),
        Tuple(),
    );
    return move(suffixes);
}

private dottedNameParts(x) = mapped(p => ref p.str, x.parts);
private moduleString(dottedName) = join(String("."), dottedNameParts(dottedName));
private moduleRelativePath(dottedName) = joinPath(dottedNameParts(dottedName));

private baseFileName(dottedName)
    = joinPath(moduleRelativePath(dottedName), back(dottedName.parts).str);

private locateModule(dottedName) {
    var base = baseFileName(dottedName);
    var relpaths = map(s ref=> base+s, moduleSuffixes);
    for (dir in searchPath) {
        for (relpath in relpaths) {
            var path = joinPath(dir, relpath);
            if (pathExists?(path))
                return path;
        }
    }
    throw ModuleNotFoundError(dottedName);
}



//
// addPrivateGlobal, addPublicGlobal
//

private globalVisibility(x:Maybe[ast.Visibility]) =
    maybe(x, x => x, () => ast.PUBLIC);

private addGlobal(module, visibility, name:ast.Identifier, x) {
    addGlobal(module, visibility, name, SymbolTableEntry(x));
}

overload addGlobal(module, visibility, name:ast.Identifier, x:SymbolTableEntry) {
    switch (globalVisibility(visibility)) {
    case ast.PRIVATE :
        addPrivateGlobal(module, name, x);
        break;
    case ast.PUBLIC :
        addPublicGlobal(module, name, x);
        break;
    default :
        assert(false);
        break;
    }
}

private addPrivateGlobal(module, name:ast.Identifier, x:SymbolTableEntry) {
    if (contains?(module^.allGlobals^.entries, name.str))
        throw GlobalRedefinitionError(name);
    module^.allGlobals^.entries[name.str] = x;
}

[T | VariantMember?(SymbolTableEntry, T)]
private addPublicGlobal(module, name:ast.Identifier, forward x:T) {
    addPublicGlobal(module, name, SymbolTableEntry(x));
}

overload addPublicGlobal(module, name:ast.Identifier, x:SymbolTableEntry) {
    addPrivateGlobal(module, name, x);
    module^.publicGlobals^.entries[name.str] = x;
}



//
// initializeSymbolTables
//

private initializeSymbolTables(module) {
    module^.publicGlobals = new SymbolTable();
    module^.allGlobals = new SymbolTable();
    for (x in module^.ast^.topLevelItems)
        installItem(module, *x);
}

private procedure installItem;

overload installItem(module, x:ast.RecordPtr) {
    addGlobal(module, x^.visibility, x^.name, new Record(x));
}

overload installItem(module, x:ast.VariantPtr) {
    addGlobal(module, x^.visibility, x^.name, new Variant(x));
}

overload installItem(module, x:ast.InstancePtr) {
}

overload installItem(module, x:ast.ProcedurePtr) {
    addGlobal(module, x^.visibility, x^.name, new Procedure(x));
}

overload installItem(module, x:ast.OverloadPtr) {
}

overload installItem(module, x:ast.EnumPtr) {
    var e = new Enum(x);
    addGlobal(module, x^.visibility, x^.name, e);
    for (i, member in enumerated(x^.members))
        addGlobal(module, x^.visibility, member, new EnumMember(e, i));
}

overload installItem(module, x:ast.GlobalVariablePtr) {
    addGlobal(module, x^.visibility, x^.name, new GlobalVariable(x));
}

overload installItem(module, x:ast.GlobalAliasPtr) {
    addGlobal(module, x^.visibility, x^.name, new GlobalAlias(x));
}

overload installItem(module, x:ast.ExternalProcedurePtr) {
    addGlobal(module, x^.visibility, x^.name, new ExternalProcedure(x));
}

overload installItem(module, x:ast.ExternalVariablePtr) {
    addGlobal(module, x^.visibility, x^.name, new ExternalVariable(x));
}



//
// initializePrimitivesModule
//

private initializePrimitivesModule(module) {
    module^.publicGlobals = new SymbolTable();
    module^.allGlobals = new SymbolTable();

    var simpleType = (name, type) => {
        addPublicGlobal(module, ast.Identifier(name), SymbolTableEntry(type));
    };
    simpleType("Bool", boolType);
    simpleType("Int8", int8Type);
    simpleType("Int16", int16Type);
    simpleType("Int32", int32Type);
    simpleType("Int64", int64Type);
    simpleType("UInt8", uint8Type);
    simpleType("UInt16", uint16Type);
    simpleType("UInt32", uint32Type);
    simpleType("UInt64", uint64Type);
    simpleType("Float32", float32Type);
    simpleType("Float64", float64Type);

    installPrimitives(module, PrimitiveTypeConstructor, PrimitiveTypeConstructorKind);
    installPrimitives(module, StaticPrimitive, StaticPrimitiveKind);
    installPrimitives(module, Primitive, PrimitiveKind);
}

private installPrimitives(module, Entry, KindEnum) {
    for (i in range(EnumMemberCount(KindEnum))) {
        var kind = KindEnum(i);
        var name = ast.Identifier(primitiveName(kind));
        var x = new Entry(kind);
        addPublicGlobal(module, name, SymbolTableEntry(x));
    }
}

private primitiveName(kind) {
    var s = printString(kind);
    assert(beginsWith?(s, "PRIM_"));
    return sliceFrom(s, size("PRIM_"));
}



//
// loadModule, loadPrelude, loadProgram
//

loadModule(dottedName) {
    var name = moduleString(dottedName);
    return maybe(lookupModule(name),
        module ref=> module,
        () ref=> {
            if (name == "__primitives__") {
                println("loading module: ", name);
                var module = new Module();
                module^.name = name;
                installModule(name, module);
                initializePrimitivesModule(module);
                return module;
            }
            var path = locateModule(dottedName);
            println("loading module: ", name, ", ", path);
            var module = new Module();
            module^.name = name;
            module^.ast = parse(tokenize(readSource(path)));
            installModule(name, module);
            withCurrentModule(module, () => {
                initializeSymbolTables(module);
                loadDependents(module);
            });
            return module;
        },
    );
}

loadPrelude() =
    loadModule(ast.DottedName("prelude"));

loadProgram(path) {
    println("loading program: ", path);
    var module = new Module();
    module^.name = String("__main__");
    module^.ast = parse(tokenize(readSource(path)));
    withCurrentModule(module, () => {
        initializeSymbolTables(module);
        loadDependents(module);
    });
    return module;
}

private loadDependents(module) {
    for (x in module^.ast^.imports)
        loadModule(fieldRef(*x, #name));
}
