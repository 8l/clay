
import io.paths.*;
import clay.errors.*;
import clay.tokens.*;
import clay.lexer.*;
import clay.ast.*;
import clay.parser.*;
import clay.loader.platform as platform;

record ModuleInfo (
    dottedName : DottedName,
    name       : String,
    filePath   : String,
    data       : String,
    tokens     : Vector[Token],
    ast        : Module,
);

private var modules = HashMap[String,ModuleInfo]();

private var searchPath = Vector[String]();

addToSearchPaths(p) {
    push(searchPath, p);
}

initSearchPath() {
    var clayDir, clayExe = ...splitPath(pathToExecutable());
    var libClayDir1 = joinPath(clayDir, "lib-clay");
    var libClayDir2 = joinPath(clayDir, "..", "lib-clay");
    addToSearchPaths(libClayDir1);
    addToSearchPaths(libClayDir2);
    addToSearchPaths(String("."));
}

private var moduleSuffixes = initModuleSuffixes();

private initModuleSuffixes() {
    var os, osGroup, cpu, bits =
        platform.os, platform.osGroup, platform.cpu, platform.bits;
    var suffixes = Vector[String]();
    eachValue(
        parts ref=> {
            var suffix = String();
            eachValue(
                part ref=> {
                    printTo(suffix, '.');
                    printTo(suffix, part);
                },
                ...unpackTuple(parts),
                "clay",
            );
            push(suffixes, move(suffix));
        },
        Tuple(os, cpu, bits),
        Tuple(os, cpu),
        Tuple(os, bits),
        Tuple(cpu, bits),
        Tuple(os),
        Tuple(cpu),
        Tuple(bits),
        Tuple(osGroup),
        Tuple(),
    );
    return move(suffixes);
}

private dottedNameParts(x) = mapped(p => ref p.str, x.parts);
private moduleString(dottedName) = join(String("."), dottedNameParts(dottedName));
private moduleRelativePath(dottedName) = joinPath(dottedNameParts(dottedName));

private baseFileName(dottedName)
    = joinPath(moduleRelativePath(dottedName), back(dottedName.parts).str);

private locateModule(dottedName) {
    var base = baseFileName(dottedName);
    var relpaths = map(s ref=> base+s, moduleSuffixes);
    for (dir in searchPath) {
        for (relpath in relpaths) {
            var path = joinPath(dir, relpath);
            if (pathExists?(path))
                return path;
        }
    }
    error("module not found: ", moduleString(dottedName));
    return String("");
}

private lexAndParse(path) {
    var data = readAll(File(path));
    var tokens = Vector[Token]();
    try {
        tokens = Vector(filtered(
            x => (x.kind != SPACE) and (x.kind != COMMENT),
            tokenize(LexerInput(data)),
        ));
        var ast = parseModule(ParserInput(tokens));
        return move(data), move(tokens), move(ast);
    }
    catch (e:LexerError) {
        var offset = e.where - begin(data);
        displayError(path, data, offset, "invalid token");
        throw e;
    }
    catch (e:ParserError) {
        var offset = begin(e.where^.data) - begin(data);
        displayError(path, data, offset, "parse error");
        throw e;
    }
}

private initModuleInfo(moduleInfo, filePath, forward data, forward tokens, forward ast) {
    moduleInfo.filePath = filePath;
    moduleInfo.data = data;
    moduleInfo.tokens = tokens;
    moduleInfo.ast = ast;
}

private loadDependents(moduleInfo) {
    for (x in moduleInfo.ast.imports)
        loadModule(fieldRef(*x, #name));
}

loadModule(dottedName) {
    var name = moduleString(dottedName);
    var modulePtr = lookup(modules, name);
    if (not null?(modulePtr))
        return ref modulePtr^;
    if (name == "__primitives__") {
        ref moduleInfo = modules[name];
        moduleInfo.dottedName = dottedName;
        moduleInfo.name = name;
        return ref moduleInfo;
    }
    var path = locateModule(dottedName);
    println("loading module: ", name, ", ", path);
    var data, tokens, ast = ...lexAndParse(path);

    ref moduleInfo = modules[name];
    moduleInfo.dottedName = dottedName;
    moduleInfo.name = name;
    initModuleInfo(moduleInfo, path, move(data), move(tokens), move(ast));
    loadDependents(moduleInfo);
    return ref moduleInfo;
}

loadPrelude() {
    loadModule(DottedName("prelude"));
}

loadProgram(path) {
    println("loading program: ", path);
    var data, tokens, ast = ...lexAndParse(path);
    var moduleInfo = ModuleInfo();
    initModuleInfo(moduleInfo, path, move(data), move(tokens), move(ast));
    loadDependents(moduleInfo);
    return move(moduleInfo);
}
