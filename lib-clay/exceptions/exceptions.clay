
import libc;



//
// Exception, NoException, currentException
//

variant Exception = NoException;

record NoException {
}

overload Exception() = Exception(NoException());

private var currentException = Exception();



//
// throwValue, continueException
//

throwValue(forward x) {
    currentException = Exception(x);
    signalException();
}

continueException() {
    signalException();
}

private signalException() __llvm__{
    ret i32 1
}



//
// exceptionIs?, exceptionAs, exceptionAsAny
//

[T]
exceptionIs?(static T) = nestedVariantIs?(currentException, T);

[T]
exceptionAs(static T) {
    var result = move(nestedVariantAs(currentException, T));
    currentException = Exception();
    return move(result);
}

exceptionAsAny() {
    var result = move(currentException);
    currentException = Exception();
    return move(result);
}



//
// unhandledExceptionInExternal
//

unhandledExceptionInExternal() {
    try {
        println("unhandled exception in external procedure");
        libc.abort();
    }
    catch (e) {
    }
}
