
import libc;



//
// Exception, NoException, currentException
//

variant Exception (NoException);

record NoException ();

overload Exception() = Exception(NoException());

private var currentException = Exception();



//
// throwValue, continueException
//

throwValue(x) {
    errorNoThrow(x);
}

[ | ExceptionsEnabled?]
overload throwValue(forward x) {
    currentException = Exception(x);
    signalException();
}

continueException() {
    signalException();
}

private signalException() __llvm__{
    ret i32 1
}



//
// throwButPropagate
//

throwButPropagate(ex, ..T) {
    if (true)
        throw ex;
    else
        return forward ..mapValues(typeToLValue, ..T);
}

alias throwButPropagateLike(ex, ..expr) {
    if (true)
        throw ex;
    else
        return forward ..expr;
}



//
// exceptionIs?, exceptionAs, exceptionAsAny
//

[T]
exceptionIs?(static T) = nestedVariantIs?(currentException, T);

[T]
exceptionAs(static T) {
    var result = move(nestedVariantAs(currentException, T));
    currentException = Exception();
    return move(result);
}

exceptionAsAny() {
    var result = move(currentException);
    currentException = Exception();
    return move(result);
}



//
// unhandledExceptionInExternal
// exceptionInInitializer, exceptionInFinalizer
//

private errorMsg(msg) {
    libc.fprintf(libc.stderr, cstring(msg));
}

unhandledExceptionInExternal() {
    errorMsg("unhandled exception in external procedure\n");
    libc.abort();
}

exceptionInInitializer() {
    errorMsg("exception when initializing globals\n");
    libc.abort();
}

exceptionInFinalizer() {
    errorMsg("exception when destroying globals\n");
    libc.abort();
}
