
import libc;



//
// Exception, NoException, currentException
//

variant Exception = NoException | Int;

record NoException {
}

overload printTo(stream, x:NoException) {
    printTo(stream, "NoException()");
}

private var currentException = Exception(NoException());



//
// throwValue, continueException
//

throwValue(forward x) {
    currentException = Exception(x);
    signalException();
}

continueException() {
    signalException();
}

private signalException() __llvm__{
    ret i32 1
}



//
// exceptionIs?, exceptionAs, exceptionAsAny
//

[T]
exceptionIs?(static T) = variantIs?(currentException, T);

[T]
exceptionAs(static T) = move(variantAs(currentException, T));

exceptionAsAny() = currentException;



//
// unhandledExceptionInExternal
//

unhandledExceptionInExternal() {
    try {
        println("unhandled exception in external procedure");
        libc.abort();
    }
    catch (e) {
    }
}
