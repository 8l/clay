

import numbers.floats.*;
import ieee754.*;
public import claym.*;

alias CO(static Float) 
	= array(0x3eb17218u,0x39800000u,0x41100000u,0x42b17217u,0x42b2d4fcu);
alias overload CO(static Double) 
	= array(0x3fd62e43u,0x3c800000u,0x40360000u,0x40862E42u,0x408633CEu);
alias GET_VAL(T,i) = CO(T)[i];

[T | Float?(T)]
overload cosh(x:T) {
	alias ONE = T(1);
	alias HALF = T(0.5);
	alias HUGE = GreatestPositiveFinite(T);

	// High word of |x|.
	var ix = if(T==Double) GET_HIGH_WORD(x) else GET_FLOAT_WORD(x);
	ix = bitand(ix,MM);
    // x is INF or NaN 
	if(not finite?(x)) return x*x;	

    // |x| in [0,0.5*ln2], return 1+expm1(|x|)^2/(2*exp(|x|))
	if(ix < GET_VAL(T,0)) {
	    var t = expm1(abs(x));
	    var w = ONE+t;
	    if (ix < GET_VAL(T,1)) return w;	// cosh(tiny) = 1
	    return ONE+(t*t)/(w+w);
	}

    // |x| in [0.5*ln2,22], return (exp(|x|)+1/exp(|x|)/2;
	if (ix < GET_VAL(T,2)) {
		var t = exp(abs(x));
		return HALF*t+HALF/t;
	}

    // |x| in [22, log(maxdouble)] return half*exp(|x|)
	if (ix < GET_VAL(T,3))  return HALF*exp(abs(x));

    // |x| in [log(maxdouble), overflowthresold]
	if (ix <= GET_VAL(T,4))
	    return ldexp(abs(x), -1);

    // |x| > overflowthresold, cosh(x) overflow
	return HUGE*HUGE;
}

