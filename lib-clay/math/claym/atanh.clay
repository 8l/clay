// atanh

import ieee754.*;
public import claym.*;

alias ONE = 1.0;
alias HUGE = GreatestPositiveFinite(Double);
alias ZERO = 0.0;

overload atanh(a:Double) {
	var x,t = a,0.;
	var hx,lx = EXTRACT_SIGNED_HI(x);
	var ix = bitand(hx,MM);
	if (bitor(ix,bitshr(bitor(lx,-Int(lx)),31))>RM) /* |x|>1 */
	    return (x-x)/(x-x);
	if(ix==RM) return x/ZERO;
	if(ix<CV18 and (HUGE+x)>ZERO) return x;	/* x<2**-28 */
	x = SET_HIGH_WORD(x,ix);
	if(ix<CV3) {		/* x < 0.5 */
	    t = x+x;
	    t = 0.5*log1p(t+t*x/(ONE-x));
	} else 
	    t = 0.5*log1p((x+x)/(ONE-x));
	if(hx>=0) return t; 
	else return -t;
}
