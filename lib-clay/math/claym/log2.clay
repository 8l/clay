/*
 * Return the base 2 logarithm of x.  See e_log.c and k_log.h for most
 * comments.
 *
 * This reduces x to {k, 1+f} exactly as in e_log.c, then calls the kernel,
 * then does the combining and scaling steps
 *    log2(x) = (f - 0.5*f*f + k_log1p(f)) / ln2 + k
 * in not-quite-routine extra precision.
 */

import kernel.k_log.*;
import ieee754.*;
public import claym.*;

[T | Float?(T)]
overload log2(a:T) {
	alias ZERO = T(0);
	var x = a;
	var hx,lx = EXTRACT_WORDS(x);
	var k = 0;
	if (hx < CV8) {			/* x < 2**-1022  */
	    if (bitor(bitand(hx,MM),lx)==0) return -TWO54/ZERO;		/* log(+-0)=-inf */
	    if (hx<0) return (x-x)/ZERO;	/* log(-#) = NaN */
	    k -= 54; 
	    x *= TWO54; /* subnormal number, scale up x */
	    hx = GET_HIGH_WORD(x);
	}
	if (hx >= EM) return x+x;
	if (hx == RM and lx == 0)
	    return ZERO;			/* log(1) = +0 */
	k += bitshr(hx,20)-1023;
	hx = bitand(hx,NEM);
	var i = bitand(hx+0x95f64u,CV8);
	x = SET_HIGH_WORD(x,bitor(hx, bitxor(i,RM)));	/* normalize x or x/2 */
	k += bitshr(i,20);
	var y = Double(k);
	var f = x - 1.0;
	var hfsq = 0.5*f*f;
	var r = k_log1p(f);

	/*
	 * f-hfsq must (for args near 1) be evaluated in extra precision
	 * to avoid a large cancellation when x is near sqrt(2) or 1/sqrt(2).
	 * This is fairly efficient since f-hfsq only depends on f, so can
	 * be evaluated in parallel with R.  Not combining hfsq with R also
	 * keeps R small (though not as small as a true `lo' term would be),
	 * so that extra precision is not needed for terms involving R.
	 *
	 * Compiler bugs involving extra precision used to break Dekker's
	 * theorem for spitting f-hfsq as hi+lo, unless double_t was used
	 * or the multi-precision calculations were avoided when double_t
	 * has extra precision.  These problems are now automatically
	 * avoided as a side effect of the optimization of combining the
	 * Dekker splitting step with the clear-low-bits step.
	 *
	 * y must (for args near sqrt(2) and 1/sqrt(2)) be added in extra
	 * precision to avoid a very large cancellation when x is very near
	 * these values.  Unlike the above cancellations, this problem is
	 * specific to base 2.  It is strange that adding +-1 is so much
	 * harder than adding +-ln2 or +-log10_2.
	 *
	 * This uses Dekker's theorem to normalize y+val_hi, so the
	 * compiler bugs are back in some configurations, sigh.  And I
	 * don't want to used double_t to avoid them, since that gives a
	 * pessimization and the support for avoiding the pessimization
	 * is not yet available.
	 *
	 * The multi-precision calculations for the multiplications are
	 * routine.
	 */
	var hi = SET_LOW_WORD(f - hfsq,0u);
	var lo = (f - hi) - hfsq + r;
	var val_hi = hi*IVLN2HI;
	var val_lo = (lo+hi)*IVLN2LO + lo*IVLN2HI;

	/* spadd(val_hi, val_lo, y), except for not using double_t: */
	var w = y + val_hi;
	val_lo += (y - w) + val_hi;
	val_hi = w;
	return val_lo + val_hi;
}
