// modf

public import claym.*;
import ieee754.*;

overload modf(x:Double, iptr:Pointer[Double]) {
	
	var i0,i1 = EXTRACT_WORDS(x);
	var j0 = bitand(bitshr(i0,20),0x7ffu)-0x3ffu;	/* exponent of x */
	if(j0<20) {			/* integer part in high x */
	    if(j0<0) {			/* |x|<1 */
	        iptr^ = INSERT_WORDS(bitand(i0,SM),0u);	/* *iptr = +-0 */
			return x;
	    } 
	    else {
			var i = bitshr(NEM,j0);
			if(bitor(bitand(i0,i),i1)==0) {		/* x is integral */
			    iptr^ = x;
			    var high = GET_HIGH_WORD(x);
			    return INSERT_WORDS(bitand(high,SM),0u);	/* return +-0 */
			} 
			else {
			    iptr^ = INSERT_WORDS(bitandc(i0,i),0u);
			    return x - iptr^;
			}
	    }
	} else if (j0>51) {		/* no fraction part */
	    if (j0 == 0x400u) {		/* inf/NaN */
			iptr^ = x;
			return 0.0 / x;
	    }
	    iptr^ = x*1.;
	    var high = GET_HIGH_WORD(x);
	    return INSERT_WORDS(bitand(high,SM),0u);	/* return +-0 */
	} 
	else {			/* fraction part in low x */
	    var i = bitshr(AM,j0-20);
	    if(bitand(i1,i)==0) { 		/* x is integral */
	        iptr^ = x;
			var high = GET_HIGH_WORD(x);
			return INSERT_WORDS(bitand(high,SM),0u);	/* return +-0 */
	    } 
	    else {
	        iptr^ = INSERT_WORDS(i0,bitandc(i1,i));
		return x - iptr^;
	    }
	}
}
