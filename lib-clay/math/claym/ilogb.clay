/* ilogb(double x)
 * return the binary exponent of non-zero x
 * ilogb(0) = FP_ILOGB0
 * ilogb(NaN) = FP_ILOGBNAN (no signal is raised)
 * ilogb(inf) = INT_MAX (no signal is raised)
 */
import ieee754.*;
public import claym.*;

alias INT_MAX = GreatestPositiveFinite(Int);
alias FP_ILOGB0	= -INT_MAX;
alias FP_ILOGBNAN = INT_MAX;

overload logb(x) = ilogb(x);

[T | Float?(T)]
overload ilogb(x:T) {
	
	var hx,lx = EXTRACT_WORDS(x);
	hx = bitand(hx,MM);
	if(hx < CV8) {
	    if(bitor(hx,lx)==0)
			return FP_ILOGB0;
	    else {			/* subnormal x */
			var ix = 0;
			if(hx==0) {
				ix = -1043;
				while(lx>0){
					ix -= 1;
					lx = bitshl(lx,1);
				}
			} else {
				ix = -1022;
				while(hx>0){
					ix -= 1;
					hx = bitshl(hx,1);
				}
			}
	    	return ix;
	    }
	}
	else 
		if (hx<EM) return bitshr(hx,20)-1023;
	else 
		if (hx>EM or lx!=0) return FP_ILOGBNAN;
	else
		return INT_MAX;
}
