import libc as lm;
public import math.native.defines.*;
import numbers.floats.*;
import math.(MathMode?,LIBM);


[when MathMode?(LIBM)] inline overload pow(x:Double,y:Double) = lm.pow(x,y);
inline overload pow(x:Float,y:Float) = lm.powf(x,y);
inline overload pow(x:LongDouble,y:LongDouble) = lm.powl(x,y);
[when MathMode?(LIBM)] inline overload pow(x:Double,y:Float) = lm.pow(x,Double(y));
[when MathMode?(LIBM)] inline overload pow(x:Float,y:Double) = lm.pow(Double(x),y);
inline overload pow(x:Double,y:LongDouble) = lm.powl(LongDouble(x),y);
inline overload pow(x:LongDouble,y:Double) = lm.powl(x,LongDouble(y));
inline overload pow(x:Float,y:LongDouble) = lm.powl(LongDouble(x),y);
inline overload pow(x:LongDouble,y:Float) = lm.powl(x,LongDouble(y));

[T when Integer?(T) and MathMode?(LIBM)] inline overload pow(x:Double,y:T) = lm.pow(x,Double(y));
[T when Integer?(T)] inline overload pow(x:Float,y:T) = lm.powf(x,Float(y));
[T when Integer?(T)] inline overload pow(x:LongDouble,y:T) = lm.powl(x,LongDouble(y));

[when MathMode?(LIBM)] inline overload exp(x:Double) = lm.exp(x);
[when MathMode?(LIBM)] inline overload exp(x:Float) = lm.expf(x);
inline overload exp(x:LongDouble) = lm.expl(x);

[when MathMode?(LIBM)] inline overload log(x:Double) = lm.log(x);
[when MathMode?(LIBM)] inline overload log(x:Float) = lm.logf(x);
inline overload log(x:LongDouble) = lm.logl(x);

[when MathMode?(LIBM)] inline overload acos(x:Double) = lm.acos(x);
inline overload acos(x:Float) = lm.acosf(x);
inline overload acos(x:LongDouble) = lm.acosl(x);

[when MathMode?(LIBM)] inline overload asin(x:Double) = lm.asin(x);
inline overload asin(x:Float) = lm.asinf(x);
inline overload asin(x:LongDouble) = lm.asinl(x);

[when MathMode?(LIBM)] inline overload atan(x:Double) = lm.atan(x);
inline overload atan(x:Float) = lm.atanf(x);
inline overload atan(x:LongDouble) = lm.atanl(x);

[when MathMode?(LIBM)] inline overload atan2(x:Double,y:Double) = lm.atan2(x,y);
inline overload atan2(x:Float,y:Float) = lm.atan2f(x,y);
inline overload atan2(x:LongDouble,y:LongDouble) = lm.atan2l(x,y);
[when MathMode?(LIBM)] inline overload atan2(x:Double,y:Float) = lm.atan2(x,Double(y));
[when MathMode?(LIBM)] inline overload atan2(x:Float,y:Double) = lm.atan2(Double(x),y);
inline overload atan2(x:Double,y:LongDouble) = lm.atan2l(LongDouble(x),y);
inline overload atan2(x:LongDouble,y:Double) = lm.atan2l(x,LongDouble(y));
inline overload atan2(x:Float,y:LongDouble) = lm.atan2l(LongDouble(x),y);
inline overload atan2(x:LongDouble,y:Float) = lm.atan2l(x,LongDouble(y));

[when MathMode?(LIBM)] inline overload cos(x:Double) = lm.cos(x);
inline overload cos(x:Float) = lm.cosf(x);
inline overload cos(x:LongDouble) = lm.cosl(x);

[when MathMode?(LIBM)] inline overload sin(x:Double) = lm.sin(x);
inline overload sin(x:Float) = lm.sinf(x);
inline overload sin(x:LongDouble) = lm.sinl(x);

[when MathMode?(LIBM)] inline overload tan(x:Double) = lm.tan(x);
inline overload tan(x:Float) = lm.tanf(x);
inline overload tan(x:LongDouble) = lm.tanl(x);

[when MathMode?(LIBM)] inline overload cosh(x:Double) = lm.cosh(x);
inline overload cosh(x:Float) = lm.coshf(x);
inline overload cosh(x:LongDouble) = lm.coshl(x);

[when MathMode?(LIBM)] inline overload sinh(x:Double) = lm.sinh(x);
inline overload sinh(x:Float) = lm.sinhf(x);
inline overload sinh(x:LongDouble) = lm.sinhl(x);

[when MathMode?(LIBM)] inline overload tanh(x:Double) = lm.tanh(x);
inline overload tanh(x:Float) = lm.tanhf(x);
inline overload tanh(x:LongDouble) = lm.tanhl(x);

[when MathMode?(LIBM)] inline overload acosh(x:Double) = lm.acosh(x);
inline overload acosh(x:Float) = lm.acoshf(x);
inline overload acosh(x:LongDouble) = lm.acoshl(x);

[when MathMode?(LIBM)] inline overload asinh(x:Double) = lm.asinh(x);
inline overload asinh(x:Float) = lm.asinhf(x);
inline overload asinh(x:LongDouble) = lm.asinhl(x);

[when MathMode?(LIBM)] inline overload atanh(x:Double) = lm.atanh(x);
inline overload atanh(x:Float) = lm.atanhf(x);
inline overload atanh(x:LongDouble) = lm.atanhl(x);

[when MathMode?(LIBM)] inline overload log10(x:Double) = lm.log10(x);
inline overload log10(x:Float) = lm.log10f(x);
inline overload log10(x:LongDouble) = lm.log10l(x);

[when MathMode?(LIBM)] inline overload frexp(x:Double, ex:Pointer[Int]) = lm.frexp(x,ex);
inline overload frexp(x:Float, ex:Pointer[Int]) = lm.frexpf(x,ex);
inline overload frexp(x:LongDouble, ex:Pointer[Int]) = lm.frexpl(x,ex);

[when MathMode?(LIBM)] inline overload ldexp(x:Double,y:Int) = lm.ldexp(x,y);
inline overload ldexp(x:Float,y:Int) = lm.ldexpf(x,y);
inline overload ldexp(x:LongDouble,y:Int) = lm.ldexpl(x,y);

[when MathMode?(LIBM)] inline overload modf(x:Double,iptr:Pointer[Int]) = lm.modf(x,iptr);
inline overload modf(x:Float,iptr:Pointer[Int]) = lm.modff(x,iptr);
inline overload modf(x:LongDouble,iptr:Pointer[Int]) = lm.modfl(x,iptr);

[when MathMode?(LIBM)] inline overload hypot(x:Double,y:Double) = lm.hypot(x,y);
[when MathMode?(LIBM)] inline overload hypot(x:Float,y:Float) = lm.hypotf(x,y);
[when MathMode?(LIBM)] inline overload hypot(x:LongDouble,y:LongDouble) = lm.hypotl(x,y);
[when MathMode?(LIBM)] inline overload hypot(x:Double,y:Float) = lm.hypot(x,Double(y));
[when MathMode?(LIBM)] inline overload hypot(x:Float,y:Double) = lm.hypot(Double(x),y);
[when MathMode?(LIBM)] inline overload hypot(x:Double,y:LongDouble) = lm.hypotl(LongDouble(x),y);
[when MathMode?(LIBM)] inline overload hypot(x:LongDouble,y:Double) = lm.hypotl(x,LongDouble(y));
[when MathMode?(LIBM)] inline overload hypot(x:Float,y:LongDouble) = lm.hypotl(LongDouble(x),y);
[when MathMode?(LIBM)] inline overload hypot(x:LongDouble,y:Float) = lm.hypotl(x,LongDouble(y));

[when MathMode?(LIBM)] inline overload expm1(x:Double) = lm.expm1(x);
inline overload expm1(x:Float) = lm.expm1f(x);
inline overload expm1(x:LongDouble) = lm.expm1l(x);

[when MathMode?(LIBM)] inline overload log1p(x:Double) = lm.log1p(x);
inline overload log1p(x:Float) = lm.log1pf(x);
inline overload log1p(x:LongDouble) = lm.log1pl(x);

[when MathMode?(LIBM)] inline overload logb(x:Double) = lm.logb(x);
inline overload logb(x:Float) = lm.logbf(x);
inline overload logb(x:LongDouble) = lm.logbl(x);

[when MathMode?(LIBM)] inline overload exp2(x:Double) = lm.exp2(x);
inline overload exp2(x:Float) = lm.exp2f(x);
inline overload exp2(x:LongDouble) = lm.exp2l(x);

[when MathMode?(LIBM)] inline overload log2(x:Double) = lm.log2(x);
inline overload log2(x:Float) = lm.log2f(x);
inline overload log2(x:LongDouble) = lm.log2l(x);

[when MathMode?(LIBM)] inline overload sqrt(x:Double) = lm.sqrt(x);
[when MathMode?(LIBM)] inline overload sqrt(x:Float) = lm.sqrtf(x);
inline overload sqrt(x:LongDouble) = lm.sqrtl(x);

[when MathMode?(LIBM)] inline overload cbrt(x:Double) = lm.cbrt(x);
[when MathMode?(LIBM)] inline overload cbrt(x:Float) = lm.cbrtf(x);
[when MathMode?(LIBM)] inline overload cbrt(x:LongDouble) = lm.cbrtl(x);

[when MathMode?(LIBM)] inline overload floor(x:Double) = lm.floor(x);
[when MathMode?(LIBM)] inline overload floor(x:Float) = lm.floorf(x);
inline overload floor(x:LongDouble) = lm.floorl(x);

[when MathMode?(LIBM)] inline overload ceil(x:Double) = lm.ceil(x);
[when MathMode?(LIBM)] inline overload ceil(x:Float) = lm.ceilf(x);
inline overload ceil(x:LongDouble) = lm.ceill(x);

[when MathMode?(LIBM)] inline overload round(x:Double) = lm.round(x);
[when MathMode?(LIBM)] inline overload round(x:Float) = lm.roundf(x);
[when MathMode?(LIBM)] inline overload round(x:LongDouble) = lm.roundl(x);

[when MathMode?(LIBM)] inline overload fmod(x:Double,y:Double) = lm.fmod(x,y);
inline overload fmod(x:Float,y:Float) = lm.fmodf(x,y);
inline overload fmod(x:LongDouble,y:LongDouble) = lm.fmodl(x,y);
[when MathMode?(LIBM)] inline overload fmod(x:Double,y:Float) = lm.fmod(x,Double(y));
[when MathMode?(LIBM)] inline overload fmod(x:Float,y:Double) = lm.fmod(Double(x),y);
inline overload fmod(x:Double,y:LongDouble) = lm.fmodl(LongDouble(x),y);
inline overload fmod(x:LongDouble,y:Double) = lm.fmodl(x,LongDouble(y));
inline overload fmod(x:Float,y:LongDouble) = lm.fmodl(LongDouble(x),y);
inline overload fmod(x:LongDouble,y:Float) = lm.fmodl(x,LongDouble(y));

private define _isinf;

[when MathMode?(LIBM)] inline overload _isinf(x:Double) = lm.isinf(x);
[when MathMode?(LIBM)] inline overload _isinf(x:Float) = lm.isinff(x);
[when MathMode?(LIBM)] inline overload _isinf(x:LongDouble) = lm.isinfl(x);

[T when Float?(T) and MathMode?(LIBM)] inline overload infinity?(x:T) = if(_isinf(x)==1) true else false;
[T when Float?(T) and MathMode?(LIBM)] inline overload negativeInfinity?(x:T) = if(_isinf(x)==-1) true else false;

[when MathMode?(LIBM)] inline overload finite?(x:Double) = Bool(lm.finite(x));
[when MathMode?(LIBM)] inline overload finite?(x:Float) = Bool(lm.finitef(x));
[when MathMode?(LIBM)] inline overload finite?(x:LongDouble) = Bool(lm.finitel(x));

[when MathMode?(LIBM)] inline overload drem(x:Double,y:Double) = lm.drem(x,y);
[when MathMode?(LIBM)] inline overload drem(x:Float,y:Float) = lm.dremf(x,y);
[when MathMode?(LIBM)] inline overload drem(x:LongDouble,y:LongDouble) = lm.dreml(x,y);
[when MathMode?(LIBM)] inline overload drem(x:Double,y:Float) = lm.drem(x,Double(y));
[when MathMode?(LIBM)] inline overload drem(x:Float,y:Double) = lm.drem(Double(x),y);
[when MathMode?(LIBM)] inline overload drem(x:Double,y:LongDouble) = lm.dreml(LongDouble(x),y);
[when MathMode?(LIBM)] inline overload drem(x:LongDouble,y:Double) = lm.dreml(x,LongDouble(y));
[when MathMode?(LIBM)] inline overload drem(x:Float,y:LongDouble) = lm.dreml(LongDouble(x),y);
[when MathMode?(LIBM)] inline overload drem(x:LongDouble,y:Float) = lm.dreml(x,LongDouble(y));

[when MathMode?(LIBM)] inline overload nan?(x:Double) = Bool(lm.isnan(x));
[when MathMode?(LIBM)] inline overload nan?(x:Float) = Bool(lm.isnanf(x));
[when MathMode?(LIBM)] inline overload nan?(x:LongDouble) = Bool(lm.isnanl(x));

inline overload jn(x:Int,y:Double) = lm.jn(x,y);
inline overload jn(x:Int,y:Float) = lm.jnf(x,y);
inline overload jn(x:Int,y:LongDouble) = lm.jnl(x,y);

inline overload j0(x:Double) = lm.j0(x);
inline overload j0(x:Float) = lm.j0f(x);
inline overload j0(x:LongDouble) = lm.j0l(x);

inline overload j1(x:Double) = lm.j1(x);
inline overload j1(x:Float) = lm.j1f(x);
inline overload j1(x:LongDouble) = lm.j1l(x);

inline overload y0(x:Double) = lm.y0(x);
inline overload y0(x:Float) = lm.y0f(x);
inline overload y0(x:LongDouble) = lm.y0l(x);

inline overload y1(x:Double) = lm.y1(x);
inline overload y1(x:Float) = lm.y1f(x);
inline overload y1(x:LongDouble) = lm.y1l(x);

inline overload yn(x:Int,y:Double) = lm.yn(x,y);
inline overload yn(x:Int,y:Float) = lm.ynf(x,y);
inline overload yn(x:Int,y:LongDouble) = lm.ynl(x,y);

[when MathMode?(LIBM)] inline overload copysign(x:Double,y:Double) = lm.copysign(x,y);
[when MathMode?(LIBM)] inline overload copysign(x:Float,y:Float) = lm.copysignf(x,y);
[when MathMode?(LIBM)] inline overload copysign(x:LongDouble,y:LongDouble) = lm.copysignl(x,y);
[when MathMode?(LIBM)] inline overload copysign(x:Double,y:Float) = lm.copysign(x,Double(y));
[when MathMode?(LIBM)] inline overload copysign(x:Float,y:Double) = lm.copysign(Double(x),y);
[when MathMode?(LIBM)] inline overload copysign(x:Double,y:LongDouble) = lm.copysignl(LongDouble(x),y);
[when MathMode?(LIBM)] inline overload copysign(x:LongDouble,y:Double) = lm.copysignl(x,LongDouble(y));
[when MathMode?(LIBM)] inline overload copysign(x:Float,y:LongDouble) = lm.copysignl(LongDouble(x),y);
[when MathMode?(LIBM)] inline overload copysign(x:LongDouble,y:Float) = lm.copysignl(x,LongDouble(y));

[when MathMode?(LIBM)] inline overload erf(x:Double) = lm.erf(x);
inline overload erf(x:Float) = lm.erff(x);
inline overload erf(x:LongDouble) = lm.erfl(x);

[when MathMode?(LIBM)] inline overload erfc(x:Double) = lm.erfc(x);
inline overload erfc(x:Float) = lm.erfcf(x);
inline overload erfc(x:LongDouble) = lm.erfcl(x);

[when MathMode?(LIBM)] inline overload lgamma(x:Double) = lm.lgamma(x);
inline overload lgamma(x:Float) = lm.lgammaf(x);
inline overload lgamma(x:LongDouble) = lm.lgammal(x);

[when MathMode?(LIBM)] inline overload tgamma(x:Double) = lm.tgamma(x);
inline overload tgamma(x:Float) = lm.tgammaf(x);
inline overload tgamma(x:LongDouble) = lm.tgammal(x);

[when MathMode?(LIBM)] inline overload gamma_r(x:Double,signgamp:Pointer[Int]) = lm.gamma_r(x,signgamp);
inline overload gamma_r(x:Float,signgamp:Pointer[Int]) = lm.gammaf_r(x,signgamp);
inline overload gamma_r(x:LongDouble,signgamp:Pointer[Int]) = lm.gammal_r(x,signgamp);

[when MathMode?(LIBM)] inline overload lgamma_r(x:Double,signgamp:Pointer[Int]) = lm.lgamma_r(x,signgamp);
inline overload lgamma_r(x:Float,signgamp:Pointer[Int]) = lm.lgammaf_r(x,signgamp);
inline overload lgamma_r(x:LongDouble,signgamp:Pointer[Int]) = lm.lgammal_r(x,signgamp);

[when MathMode?(LIBM)] inline overload rint(x:Double) = lm.rint(x);
inline overload rint(x:Float) = lm.rintf(x);
inline overload rint(x:LongDouble) = lm.rintl(x);

[when MathMode?(LIBM)] inline overload nextafter(x:Double,y:Double) = lm.nextafter(x,y);
[when MathMode?(LIBM)] inline overload nextafter(x:Float,y:Float) = lm.nextafterf(x,y);
[when MathMode?(LIBM)] inline overload nextafter(x:LongDouble,y:LongDouble) = lm.nextafterl(x,y);
[when MathMode?(LIBM)] inline overload nextafter(x:Double,y:Float) = lm.nextafter(x,Double(y));
[when MathMode?(LIBM)] inline overload nextafter(x:Float,y:Double) = lm.nextafter(Double(x),y);
[when MathMode?(LIBM)] inline overload nextafter(x:Double,y:LongDouble) = lm.nextafterl(LongDouble(x),y);
[when MathMode?(LIBM)] inline overload nextafter(x:LongDouble,y:Double) = lm.nextafterl(x,LongDouble(y));
[when MathMode?(LIBM)] inline overload nextafter(x:Float,y:LongDouble) = lm.nextafterl(LongDouble(x),y);
[when MathMode?(LIBM)] inline overload nextafter(x:LongDouble,y:Float) = lm.nextafterl(x,LongDouble(y));

[when MathMode?(LIBM)] inline overload remainder(x:Double,y:Double) = lm.remainder(x,y);
[when MathMode?(LIBM)] inline overload remainder(x:Float,y:Float) = lm.remainderf(x,y);
[when MathMode?(LIBM)] inline overload remainder(x:LongDouble,y:LongDouble) = lm.remainderl(x,y);
[when MathMode?(LIBM)] inline overload remainder(x:Double,y:Float) = lm.remainder(x,Double(y));
[when MathMode?(LIBM)] inline overload remainder(x:Float,y:Double) = lm.remainder(Double(x),y);
[when MathMode?(LIBM)] inline overload remainder(x:Double,y:LongDouble) = lm.remainderl(LongDouble(x),y);
[when MathMode?(LIBM)] inline overload remainder(x:LongDouble,y:Double) = lm.remainderl(x,LongDouble(y));
[when MathMode?(LIBM)] inline overload remainder(x:Float,y:LongDouble) = lm.remainderl(LongDouble(x),y);
[when MathMode?(LIBM)] inline overload remainder(x:LongDouble,y:Float) = lm.remainderl(x,LongDouble(y));

[when MathMode?(LIBM)] inline overload scalbn(x:Double,y:Int) = lm.scalbn(x,y);
inline overload scalbn(x:Float,y:Int) = lm.scalbnf(x,y);
inline overload scalbn(x:LongDouble,y:Int) = lm.scalbnl(x,y);

[when MathMode?(LIBM)] inline overload scalbln(x:Double,y:Long) = lm.scalbln(x,y);
inline overload scalbln(x:Float,y:Long) = lm.scalblnf(x,y);
inline overload scalbln(x:LongDouble,y:Long) = lm.scalblnl(x,y);

[when MathMode?(LIBM)] inline overload ilogb(x:Double) = lm.ilogb(x);
inline overload ilogb(x:Float) = lm.ilogbf(x);
inline overload ilogb(x:LongDouble) = lm.ilogbl(x);

[when MathMode?(LIBM)] inline overload nearbyint(x:Double) = lm.nearbyint(x);
[when MathMode?(LIBM)] inline overload nearbyint(x:Float) = lm.nearbyintf(x);
[when MathMode?(LIBM)] inline overload nearbyint(x:LongDouble) = lm.nearbyintl(x);

[when MathMode?(LIBM)] inline overload round(x:Double) = lm.round(x);
[when MathMode?(LIBM)] inline overload round(x:Float) = lm.roundf(x);
[when MathMode?(LIBM)] inline overload round(x:LongDouble) = lm.roundl(x);


[when MathMode?(LIBM)] inline overload trunc(x:Double) = lm.trunc(x);
inline overload trunc(x:Float) = lm.truncf(x);
inline overload trunc(x:LongDouble) = lm.truncl(x);

inline overload remquo(x:Double,y:Double) {
    var quo = Pointer[Int]();
    var res = lm.remquo(x,y,quo);
    return res,quo[0];
}
inline overload remquo(x:Float,y:Float) {
    var quo = Pointer[Int]();
    var res = lm.remquof(x,y,quo);
    return res,quo[0];
}
inline overload remquo(x:LongDouble,y:LongDouble) {
    var quo = Pointer[Int]();
    var res = lm.remquol(x,y,quo);
    return res,quo[0];
}


[when MathMode?(LIBM)] inline overload fdim(x:Double,y:Double) = lm.fdim(x,y);
[when MathMode?(LIBM)] inline overload fdim(x:Float,y:Float) = lm.fdimf(x,y);
[when MathMode?(LIBM)] inline overload fdim(x:LongDouble,y:LongDouble) = lm.fdiml(x,y);
[when MathMode?(LIBM)] inline overload fdim(x:Double,y:Float) = lm.fdim(x,Double(y));
[when MathMode?(LIBM)] inline overload fdim(x:Float,y:Double) = lm.fdim(Double(x),y);
[when MathMode?(LIBM)] inline overload fdim(x:Double,y:LongDouble) = lm.fdiml(LongDouble(x),y);
[when MathMode?(LIBM)] inline overload fdim(x:LongDouble,y:Double) = lm.fdiml(x,LongDouble(y));
[when MathMode?(LIBM)] inline overload fdim(x:Float,y:LongDouble) = lm.fdiml(LongDouble(x),y);
[when MathMode?(LIBM)] inline overload fdim(x:LongDouble,y:Float) = lm.fdiml(x,LongDouble(y));

[when MathMode?(LIBM)] inline overload fpclassify(value:Double) = lm.__fpclassify(value);
[when MathMode?(LIBM)] inline overload fpclassify(value:Float) = lm.__fpclassifyf(value);
[when MathMode?(LIBM)] inline overload fpclassify(value:LongDouble) = lm.__fpclassifyl(value);

[when MathMode?(LIBM)] inline overload llrint(x:Double) = lm.llrint(x);
[when MathMode?(LIBM)] inline overload llrint(x:Float) = lm.llrintf(x);
[when MathMode?(LIBM)] inline overload llrint(x:LongDouble) = lm.llrintl(x);

[when MathMode?(LIBM)] inline overload llround(x:Double) = lm.llround(x);
inline overload llround(x:Float) = lm.llroundf(x);
inline overload llround(x:LongDouble) = lm.llroundl(x);

[when MathMode?(LIBM)] inline overload signbit(value:Double) = lm.signbit(value);
[when MathMode?(LIBM)] inline overload signbit(value:Float) = lm.signbitf(value);
[when MathMode?(LIBM)] inline overload signbit(value:LongDouble) = lm.signbitl(value);

[when MathMode?(LIBM)] inline overload fma(x:Double,y:Double,z:Double) = lm.fma(x,y,z);
[when MathMode?(LIBM)] inline overload fma(x:Float,y:Float,z:Float) = lm.fmaf(x,y,z);
[when MathMode?(LIBM)] inline overload fma(x:LongDouble,y:LongDouble,z:LongDouble) = lm.fmal(x,y,z);

[when MathMode?(LIBM)] inline overload abs(z:Complex64) = lm.cabs(z);
[when MathMode?(LIBM)] inline overload abs(z:Complex32) = lm.cabsf(z);
[when MathMode?(LIBM)] inline overload abs(z:Complex80) = lm.cabsl(z);

[when MathMode?(LIBM)] inline overload arg(z:Complex64) = lm.carg(z);
[when MathMode?(LIBM)] inline overload arg(z:Complex32) = lm.cargf(z);
[when MathMode?(LIBM)] inline overload arg(z:Complex80) = lm.cargl(z);

[when MathMode?(LIBM)] inline overload sin(z:Complex64) = lm.csin(z);
[when MathMode?(LIBM)] inline overload sin(z:Complex32) = lm.csinf(z);
[when MathMode?(LIBM)] inline overload sin(z:Complex80) = lm.csinl(z);

[when MathMode?(LIBM)] inline overload cos(z:Complex64) = lm.ccos(z);
[when MathMode?(LIBM)] inline overload cos(z:Complex32) = lm.ccosf(z);
[when MathMode?(LIBM)] inline overload cos(z:Complex80) = lm.ccosl(z);

[when MathMode?(LIBM)] inline overload tan(z:Complex64) = lm.ctan(z);
[when MathMode?(LIBM)] inline overload tan(z:Complex32) = lm.ctanf(z);
[when MathMode?(LIBM)] inline overload tan(z:Complex80) = lm.ctanl(z);

[when MathMode?(LIBM)] inline overload asin(z:Complex64) = lm.casin(z);
[when MathMode?(LIBM)] inline overload asin(z:Complex32) = lm.casinf(z);
[when MathMode?(LIBM)] inline overload asin(z:Complex80) = lm.casinl(z);

[when MathMode?(LIBM)] inline overload acos(z:Complex64) = lm.cacos(z);
[when MathMode?(LIBM)] inline overload acos(z:Complex32) = lm.cacosf(z);
[when MathMode?(LIBM)] inline overload acos(z:Complex80) = lm.cacosl(z);

[when MathMode?(LIBM)] inline overload atan(z:Complex64) = lm.catan(z);
[when MathMode?(LIBM)] inline overload atan(z:Complex32) = lm.catanf(z);
[when MathMode?(LIBM)] inline overload atan(z:Complex80) = lm.catanl(z);

[when MathMode?(LIBM)] inline overload sinh(z:Complex64) = lm.csinh(z);
[when MathMode?(LIBM)] inline overload sinh(z:Complex32) = lm.csinhf(z);
[when MathMode?(LIBM)] inline overload sinh(z:Complex80) = lm.csinhl(z);

[when MathMode?(LIBM)] inline overload cosh(z:Complex64) = lm.ccosh(z);
[when MathMode?(LIBM)] inline overload cosh(z:Complex32) = lm.ccoshf(z);
[when MathMode?(LIBM)] inline overload cosh(z:Complex80) = lm.ccoshl(z);

[when MathMode?(LIBM)] inline overload tanh(z:Complex64) = lm.ctanh(z);
[when MathMode?(LIBM)] inline overload tanh(z:Complex32) = lm.ctanhf(z);
[when MathMode?(LIBM)] inline overload tanh(z:Complex80) = lm.ctanhl(z);

[when MathMode?(LIBM)] inline overload asinh(z:Complex64) = lm.casinh(z);
[when MathMode?(LIBM)] inline overload asinh(z:Complex32) = lm.casinhf(z);
[when MathMode?(LIBM)] inline overload asinh(z:Complex80) = lm.casinhl(z);

[when MathMode?(LIBM)] inline overload acosh(z:Complex64) = lm.cacosh(z);
[when MathMode?(LIBM)] inline overload acosh(z:Complex32) = lm.cacoshf(z);
[when MathMode?(LIBM)] inline overload acosh(z:Complex80) = lm.cacoshl(z);

[when MathMode?(LIBM)] inline overload atanh(z:Complex64) = lm.catanh(z);
[when MathMode?(LIBM)] inline overload atanh(z:Complex32) = lm.catanhf(z);
[when MathMode?(LIBM)] inline overload atanh(z:Complex80) = lm.catanhl(z);

[when MathMode?(LIBM)] inline overload exp(z:Complex64) = lm.cexp(z);
[when MathMode?(LIBM)] inline overload exp(z:Complex32) = lm.cexpf(z);
[when MathMode?(LIBM)] inline overload exp(z:Complex80) = lm.cexpl(z);

[when MathMode?(LIBM)] inline overload log(z:Complex64) = lm.clog(z);
[when MathMode?(LIBM)] inline overload log(z:Complex32) = lm.clogf(z);
[when MathMode?(LIBM)] inline overload log(z:Complex80) = lm.clogl(z);

[when MathMode?(LIBM)] inline overload pow(z:Complex64,y:Complex64) = lm.cpow(z,y);
[when MathMode?(LIBM)] inline overload pow(z:Complex32,y:Complex32) = lm.cpowf(z,y);
[when MathMode?(LIBM)] inline overload pow(z:Complex80,y:Complex80) = lm.cpowl(z,y);
[when MathMode?(LIBM)] inline overload pow(z:Complex64,y:Complex32) = lm.cpow(z,Complex64(y));
[when MathMode?(LIBM)] inline overload pow(z:Complex80,y:Complex32) = lm.cpowl(z,Complex80(y));
[when MathMode?(LIBM)] inline overload pow(z:Complex80,y:Complex64) = lm.cpowl(z,Complex80(y));
[when MathMode?(LIBM)] inline overload pow(z:Complex64,y:Complex80) = lm.cpowl(Complex80(z),y);
[when MathMode?(LIBM)] inline overload pow(z:Complex32,y:Complex64) = lm.cpowl(Complex64(z),y);
[when MathMode?(LIBM)] inline overload pow(z:Complex32,y:Complex80) = lm.cpowl(Complex80(z),y);
//Add complex^float & float^complex [when MathMode?(LIBM)] inline overloads

[when MathMode?(LIBM)] inline overload sqrt(z:Complex64) = lm.csqrt(z);
[when MathMode?(LIBM)] inline overload sqrt(z:Complex32) = lm.csqrtf(z);
[when MathMode?(LIBM)] inline overload sqrt(z:Complex80) = lm.csqrtl(z);

[when MathMode?(LIBM)] inline overload proj(z:Complex64) = lm.cproj(z);
[when MathMode?(LIBM)] inline overload proj(z:Complex32) = lm.cprojf(z);
[when MathMode?(LIBM)] inline overload proj(z:Complex80) = lm.cprojl(z);

