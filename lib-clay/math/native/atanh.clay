// atanh

import math.native.kernel.ieee754.*;
import math.native.log1p.(log1p);

alias ONE = 1.0;
alias HUGE = GreatestPositiveFinite(Double);
alias ZERO = 0.0;


atanh(x:Float) = Float(atanh(Double(x)));


overload atanh(a:Double) {
	var x,t = a,0.;
	var xdb = MAKE_IEEE(x);
	var ix = bitand(GET_IEEE_HIGH(xdb),MM);
	if (bitor(ix,bitshr(bitor(GET_IEEE_LOW(xdb),-GET_IEEE_LOW(xdb)),31))>RM) /* |x|>1 */
	    return (x-x)/(x-x);
	if(ix==RM) return x/ZERO;
	if(ix<CV18 and (HUGE+x)>ZERO) return x;	/* x<2**-28 */
	x = SET_IEEE_HIGH(x,ix);
	if(ix<CV3) {		/* x < 0.5 */
	    t = x+x;
	    t = 0.5*log1p(t+t*x/(ONE-x));
	} else 
	    t = 0.5*log1p((x+x)/(ONE-x));
	if(GET_IEEE_HIGH(xdb)>=0) return t; 
	else return -t;
}


// Return arc hyperbole tangent for double value.


overload atanh (__complex__ double x) {
  __complex__ double res;
  int rcls = fpclassify (__real__ x);
  int icls = fpclassify (__imag__ x);

  if (rcls <= FP_INFINITE || icls <= FP_INFINITE)
    {
      if (icls == FP_INFINITE)
	{
	  __real__ res = __copysign (0.0, __real__ x);
	  __imag__ res = __copysign (M_PI_2, __imag__ x);
	}
      else if (rcls == FP_INFINITE || rcls == FP_ZERO)
	{
	  __real__ res = __copysign (0.0, __real__ x);
	  if (icls >= FP_ZERO)
	    __imag__ res = __copysign (M_PI_2, __imag__ x);
	  else
	    __imag__ res = __nan ("");
	}
      else
	{
	  __real__ res = __nan ("");
	  __imag__ res = __nan ("");
	}
    }
  else if (rcls == FP_ZERO && icls == FP_ZERO)
    {
      res = x;
    }
  else
    {
      double i2, num, den;

      i2 = __imag__ x * __imag__ x;

      num = 1.0 + __real__ x;
      num = i2 + num * num;

      den = 1.0 - __real__ x;
      den = i2 + den * den;

      __real__ res = 0.25 * (__ieee754_log (num) - __ieee754_log (den));

      den = 1 - __real__ x * __real__ x - i2;

      __imag__ res = 0.5 * __ieee754_atan2 (2.0 * __imag__ x, den);
    }

  return res;
}