// log

public import math.native.*;
import math.native.kernel.ieee754.*;

overload log(x:Double) {
	alias ZERO = 0.;
	alias HALF = 0.5;
	alias ONE = 1.;
	var xdb = MAKE_IEEE(x);
	//var GET_IEEE_HIGH(xdb),GET_IEEE_LOW(xdb) = GET_IEEE_HIGH(xdb), GET_IEEE_LOW(xdb);

	var k = 0;
	if (GET_IEEE_HIGH(xdb) < CV8) {			/* x < 2**-1022  */
	    if (bitor(bitand(GET_IEEE_HIGH(xdb),MM),GET_IEEE_LOW(xdb))==0) 
			return negativeInfinity(Double);		/* log(+-0)=-inf */
	    if (GET_IEEE_HIGH(xdb)<0) return nan(Double);	/* log(-#) = NaN */
	    k -= 54; 
	    SET_IEEE_HIGH(xdb,GET_IEEE_HIGH(x*TWO54));
	} 
	if (GET_IEEE_HIGH(xdb) >= EM) return infinity(Double);
	k += bitshr(GET_IEEE_HIGH(xdb),20)-1023;
	GET_IEEE_HIGH(xdb) = bitand(GET_IEEE_HIGH(xdb),NEM);
	var i = bitand(GET_IEEE_HIGH(xdb)+0x95f64,CV8);
	SET_IEEE_HIGH(xdb,bitor(GET_IEEE_HIGH(xdb),bitxor(i,RM)));	/* normalize x or x/2 */
	k += bitshr(i,20);
	var f,R = GET_IEEE_DB(xdb)-ONE,0.;
	if(bitand(NEM,2+GET_IEEE_HIGH(xdb))<3) {	/* -2**-20 <= f < 2**-20 */
	    if(f==ZERO) {
			if(k==0) {
			    return ZERO;
			} else {
			    return k*LN2HI+k*LN2LO;
			}
	    }
	    R = f*f*(HALF-0.33333333333333333*f);
	    if(k==0) return f-R; 
	    else {
	    	return k*LN2HI-((R-k*LN2LO)-f);
	    }
	}
 	var s = f/(2.0+f); 
	var z = s*s;
	i = GET_IEEE_HIGH(xdb)-0x6147a;
	var w = z*z;
	var j = 0x6b851-GET_IEEE_HIGH(xdb);
	var t1 = w*(Lp2+w*(Lp4+w*Lp6)); 
	var t2 = z*(Lp1+w*(Lp3+w*(Lp5+w*Lp7))); 
	i = bitor(i,j);
	R = t2+t1;
	if(i > 0) {
	    var hfsq = HALF*f*f;
	    if(k == 0) 
	    	return f-(hfsq-s*(hfsq+R)); 
	    else
		    return k*LN2HI-((hfsq-(s*(hfsq+R)+k*LN2LO))-f);
	} 
	else {
	    if(k==0) 
	    	return f-s*(f-R); 
	    else
		    return k*LN2HI-((s*(f-R)-k*LN2LO)-f);
	}
}
