public import math.native.defines.(LIBM,MathMode?,log10);
public import math.native.log.(log);
import math.native.abs.(abs);
import math.native.atan2.(atan2);
import complex.(Complex,Complex?,imagValue,real);


//  Complex natural logarithm
//
//
//
// SYNOPSIS:
//
// double complex clog();
// double complex z, w;
//
// w = clog (z);
//
//
//
// DESCRIPTION:
//
// Returns complex logarithm to the base e (2.718...) of
// the complex argument x.
//
// If z = x + iy, r = sqrt( x**2 + y**2 ),
// then
//       w = log(r) + i arctan(y/x).
//
// The arctangent ranges from -PI to +PI.
//
//
// ACCURACY:
//
//                      Relative error:
// arithmetic   domain     # trials      peak         rms
//    DEC       -10,+10      7000       8.5e-17     1.9e-17
//    IEEE      -10,+10     30000       5.0e-15     1.1e-16
//
// Larger relative error can be observed for z near 1 +i0.
// In IEEE arithmetic the peak absolute error is 5.2e-16, rms
// absolute error 1.0e-16.
 


[T when Complex?(T) and not MathMode?(LIBM)]
overload log(z:T){
    var rr = abs(z);
    var p = log(rr);
    rr = atan2(imagValue(z), real(z));
    return Complex(p, rr);
}



[T when Complex?(T) and not MathMode?(LIBM)]
overload log10(x:T) = log(x)/log(10.0);

