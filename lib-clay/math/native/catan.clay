// Return arc tangent of complex double value.

import math.native.

overload atan(x:ComplexDouble) --> res:ComplexDouble {
  
    var rcls = fpclassify(real(x));
    var icls = fpclassify(imagValue(x));

    if (rcls <= FP_INFINITE or icls <= FP_INFINITE) {
        if (rcls == FP_INFINITE) {
            res <-- Complex(copysign(M_PI_2, real(x)), copysign(0.0, imagValue(x)));
        }
        else if (icls == FP_INFINITE) {
            if (rcls >= FP_ZERO)
  	            res <-- Complex(copysign(M_PI_2, real(x)), copysign(0.0, imagValue(x)));
  	        else
  	            res <-- Complex(nan(Double), copysign(0.0, imagValue(x)));
  	    }
        else if (icls == FP_ZERO or icls == FP_INFINITE) {
        	  res <-- Complex(nan(Double), copysign(0.0, imagValue(x)));
      	}
        else {
        	  res <-- nan(ComplexDouble);
        }
    }
    else if (rcls == FP_ZERO and icls == FP_ZERO) {
        res <-- x;
    }
    else { 
        var r2 = real(x) * real(x);
        var den = 1 - r2 - imagValue(x) * imagValue(x);
        var num = imagValue(x) + 1.0;
        num = r2 + num * num;
        var den2 = imagValue(x) - 1.0;
        den2 = r2 + den2 * den2;
        res <-- Complex(0.5 * atan2 (2.0 * real(x), den),0.25 * log(num / den2));
    }
}