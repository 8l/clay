public import math.native.ldexp.*;
public import math.native.frexp.*;
public import math.native.scalbn.*;
public import math.native.trunc.*;
public import math.native.ceil.*;
public import math.native.floor.*;
public import math.native.rint.*;
public import math.native.round.*;
public import math.native.llround.*;
public import math.native.modf.*;
public import math.native.fmod.*;
public import math.native.nextafter.*;
public import math.native.abs.*;
public import math.native.sign.*;
public import math.native.hypot.*;
public import math.native.sqrt.*;
public import math.native.cbrt.*;
public import math.native.pown.*;
public import math.native.exp.*;
public import math.native.exp2.*;
public import math.native.expm1.*;
public import math.native.sinh.*;
public import math.native.cosh.*;
public import math.native.tanh.*;
public import math.native.ilogb.*;
public import math.native.log.*;
public import math.native.log2.*;
public import math.native.log10.*;
public import math.native.log1p.*;
public import math.native.erf.*;
public import math.native.gamma.*;
public import math.native.beta.*;
public import math.native.bessel.*;
public import math.native.sinpi.*;
public import math.native.tan.*;
public import math.native.cos.*;
public import math.native.sin.*;
public import math.native.atanh.*;
public import math.native.acosh.*;
public import math.native.asinh.*;
public import math.native.asin.*;
public import math.native.acos.*;
public import math.native.atan.*;
public import math.native.atan2.*;
public import math.native.cot.*;
public import math.native.arg.*;
public import math.native.proj.*;

import math.native.constants.(M_PI);
import numbers.floats.(floatFromBits,floatExponent,mantissaSize);


[T when Integer?(T)]
recip(x:T) = T(0);
[T when Float?(T)]
overload recip(x:T) = T(1) / x;

[T when Float?(T)]
significand(x:T) = scalbn(x,wrapSubtract(ilogb(x)));

drem(x,y) = remainder(x,y);

[T]
clamp(x:T, lo:T, hi:T) {
    if(x > hi)
        return hi; 
    if(x < lo)
        return lo;
    return x;
}

sec(z) = recip(cos(z));
csc(z) = recip(sin(z));
asec(y) = acos(recip(y));
acsc(y) = asin(recip(y));
acot(y) = atan(recip(y));
sech(z) = recip(cosh(z));
csch(z) = recip(sinh(z));
coth(z) = recip(tanh(z));
asech(y) = acosh(recip(y));
acsch(y) = asinh(recip(y));
acoth(y) = atanh(recip(y));

[T when CallDefined?(sin,T)]
sinc(x:T) {
    if(x==0) 
        return T(1);
    else {
        var pix = T(M_PI)*x; 
        return sin(pix)/pix;
    }
}

[T when CallDefined?(sin,T)]
cosc(x:T) { 
    if(x==0) 
        return T(0);
    else {
        var pix=T(M_PI)*x;
        return cos(pix)/x-sin(pix)/(pix*x);
    }
}

square(x) = x*x;
cube(x) = x*x*x;


inline fma(a, b, c) = (a * b) + c;


[T when Float?(T)] inline rsqrt(x:T) = recip(sqrt(x));
[T when Float?(T)] inline sigmoid (x:T) = T(1) / (T(1) + exp (-x));


alias normcoeff(#LongDouble) = floatFromBits(UInt128(0x4035ul));
alias overload normcoeff(#Double) = floatFromBits(0x435ul);
alias overload normcoeff(#Float) = floatFromBits(0x4Cu);

[T when Float?(T)]
normalize(x:T) 
    = if(normalized?(x)) x else floatFromBits(floatExponent(x*normcoeff(T)) - 
        (mantissaSize(T) + 2));


[T when Float?(T)] epsilon(#T) = nextafter(T(1),T(2))-T(1);
