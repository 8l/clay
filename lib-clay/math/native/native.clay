
public import numbers.floats.*;
public import math.native.defines.*;
public import math.native.constants.*;

public import math.native.ldexp.(ldexp);
public import math.native.frexp.(frexp);
public import math.native.scalbn.(scalbn,scalbln,scalb);
public import math.native.trunc.(trunc);
public import math.native.rounding.(round,ceil,floor,rint);
public import math.native.llround.(llround);
public import math.native.modf.(modf);
public import math.native.fmod.(fmod);

public import math.native.hypot.(hypot);
public import math.native.sqrt.(sqrt);
public import math.native.cbrt.(cbrt);
public import math.native.pow.(pow);
public import math.native.pown.*;
public import math.native.exp.(exp);
public import math.native.exp2.(exp2);
public import math.native.expm1.(expm1);
public import math.native.sinh.(sinh);
public import math.native.cosh.(cosh);
public import math.native.tanh.(tanh);
public import math.native.ilogb.(ilogb,logb);
public import math.native.log.(log);
public import math.native.log2.(log2);
public import math.native.log10.(log10);
public import math.native.log1p.(log1p);
public import math.native.erf.(erf,erfc);
public import math.native.gamma.(gamma,tgamma,lgamma,igamma,igammac);
public import math.native.beta.(beta);
public import math.native.bessel.(j0,j1,i1);
public import math.native.trig.(sin,cos,tan);
public import math.native.atanh.(atanh);
public import math.native.acosh.(acosh);
public import math.native.asinh.(asinh);
public import math.native.asin.(asin);
public import math.native.acos.(acos);
public import math.native.atan.(atan);
public import math.native.atan2.(atan2);

public import math.native.complex.*;
public import math.native.cproj.*;
public import math.native.cexp.*;
public import math.native.csinh.*;
public import math.native.ccosh.*;
public import math.native.ctanh.*;

[T | Float?(T)]
overload recip(x:T) = T(1) / x;
[T | Integer?(T)]
overload recip(x:T) = 1 \ x;

[I | Integer?(I)]
inline overload abs(x:I) = if(x >= 0) x else -x;

inline overload sign(x:Long) = bitor(bitshr(x,63),Long(bitshr(ULong(-x),63)));
inline overload sign(x:Int) = bitor(bitshr(x,31),Int(bitshr(UInt(-x),31)));
inline overload sign(x:Short) = bitor(bitshr(x,15),Short(bitshr(UShort(-x),15)));
inline overload sign(x:Byte) = bitor(bitshr(x,7),Byte(bitshr(UByte(-x),7)));

[T | Float?(T)]
significand(x:T) = scalb(x,T(-ilogb(x)));

drem(x,y) = remainder(x,y);

[T]
clamp(x:T, lo:T, hi:T) {
    if(x > hi)
        return hi; 
    if(x < lo)
        return lo;
    return x;
}

sec(z) = 1. / cos(z);
csc(z) = 1. / sin(z);
cot(z) = 1. / tan(z);
asec(y) = acos(1. / y);
acsc(y) = asin(1. / y);
acot(y) = atan(1. / y);
sech(z) = 1. / cosh(z);
csch(z) = 1. / sinh(z);
coth(z) = 1. / tanh(z);
asech(y) = acosh(1. / y);
acsch(y) = asinh(1. / y);
acoth(y) = atanh(1. / y);

//sinc(x) = if(x==0) one(x) else (pix=pi*x; oftype(x,sin(pix)/pix))
//cosc(x) = if(x==0) zero(x) else (pix=pi*x; oftype(x,cos(pix)/x-sin(pix)/(pix*x)))

overload log(b,x) = log(x) / log(b);

square(x) = x*x;
cube(x) = x*x*x;

inline overload fma(a, b, c) = (a * b) + c;


[T | Float?(T)] inline overload rsqrt(x:T) = recip(sqrt(x));
[T | Float?(T)] inline overload sigmoid (x:T) = T(1) / (T(1) + exp (-x));
