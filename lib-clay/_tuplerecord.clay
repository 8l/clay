import _core;

//
// tuples, records
//

overloadable fieldCount;
overloadable fieldRef;

overload fieldCount[T](static T) if (RecordType?(T)) = recordFieldCount(T);
overload fieldCount[T](static T) if (TupleType?(T)) = tupleFieldCount(T);

overload fieldRef[T,i](a:T, static i) ref if (RecordType?(T)) =
    recordFieldRef(a, i);

overload fieldRef[T,i](a:T, static i) ref if (TupleType?(T)) =
    tupleFieldRef(a, i);

RecordOrTuple?[T](static T) = RecordType?(T) or TupleType?(T);

overload init[T](a:T) if (RecordOrTuple?(T)) {
    initFields(a, static 0);
}

overloadable initFields;
overload initFields[T,i](a:T, static i) {
    init(fieldRef(a, i));
    initFields(a, static add(i, 1));
}
overload initFields[T, i](a:T, static i)
        if (i == fieldCount(T)) {
    return;
}

overload copy[T](dest:T, src:T) if (RecordOrTuple?(T)) {
    copyFields(dest, src, static 0);
}

overloadable copyFields;
overload copyFields[T, i](dest:T, src:T, static i) {
    copy(fieldRef(dest, i), fieldRef(src, i));
    copyFields(dest, src, static add(i, 1));
}
overload copyFields[T, i](dest:T, src:T, static i)
        if (i == fieldCount(T)) {
    return;
}

overload destroy[T](a:T) if (RecordOrTuple?(T)) {
    destroyFields(a, static 0);
}

overloadable destroyFields;
overload destroyFields[T, i](a:T, static i) {
    destroy(fieldRef(a, i));
    destroyFields(a, static add(i, 1));
}
overload destroyFields[T, i](a:T, static i)
        if (i == fieldCount(T)) {
    return;
}

overload equals?[T](a:T, b:T) if (RecordOrTuple?(T)) =
    equalFields?(a, b, static 0);

overloadable equalFields?;
overload equalFields?[T, i](a:T, b:T, static i) {
    if (not equals?(fieldRef(a, i), fieldRef(b, i)))
        return false;
    return equalFields?(a, b, static add(i, 1));
}
overload equalFields?[T, i](a:T, b:T, static i)
        if (i == fieldCount(T)) = true;

overload lesser?[T](a:T, b:T) if (RecordOrTuple?(T)) =
    lesserFields?(a, b, static 0);

overloadable lesserFields?;
overload lesserFields?[T,i](a:T, b:T, static i) {
    if (lesser?(fieldRef(a, i), fieldRef(b, i)))
        return true;
    if (lesser?(fieldRef(b, i), fieldRef(a, i)))
        return false;
    return lesserFields?(a, b, static add(i, 1));
}
overload lesserFields?[T, i](a:T, b:T, static i)
        if (i == fieldCount(T)) = false;

overload hash[T](a:T) if (RecordOrTuple?(T)) = hashFields(a, static 0);

overloadable hashFields;
overload hashFields[T,i](a:T, static i) {
    var curH = hash(fieldRef(a, i));
    return add(curH, hashFields(a, static add(i, 1)));
}
overload hashFields[T, i](a:T, static i)
        if (i == fieldCount(T)) = 0;
