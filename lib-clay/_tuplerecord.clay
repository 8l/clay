import _core;

//
// tuples, records
//

overloadable FieldCount;
overloadable fieldRef;

overload FieldCount [T|RecordType?(T)] (static T) = RecordFieldCount(T);
overload FieldCount [T|TupleType?(T)] (static T) = TupleFieldCount(T);

overload fieldRef [T,i|RecordType?(T)] (a:T, static i) =
    ref recordFieldRef(a, i);

overload fieldRef [T,i|TupleType?(T)] (a:T, static i) =
    ref tupleFieldRef(a, i);

RecordOrTuple?[T](static T) = RecordType?(T) or TupleType?(T);

overload init [T|RecordOrTuple?(T)](a:T) {
    initFields(a, 0);
}

overloadable initFields;
overload initFields[T,i](a:T, static i) {
    init(fieldRef(a, i));
    initFields(a, add(i, 1));
}
overload initFields [T,i|i == FieldCount(T)] (a:T, static i) {
    return;
}

overload copy [T|RecordOrTuple?(T)] (dest:T, src:T) {
    copyFields(dest, src, 0);
}

overloadable copyFields;
overload copyFields[T,i](dest:T, src:T, static i) {
    copy(fieldRef(dest, i), fieldRef(src, i));
    copyFields(dest, src, add(i, 1));
}
overload copyFields [T,i|i == FieldCount(T)] (dest:T, src:T, static i) {
    return;
}

overload destroy [T|RecordOrTuple?(T)] (a:T) {
    destroyFields(a, 0);
}

overloadable destroyFields;
overload destroyFields[T,i](a:T, static i) {
    destroy(fieldRef(a, i));
    destroyFields(a, add(i, 1));
}
overload destroyFields [T,i|i == FieldCount(T)] (a:T, static i) {
    return;
}

overload equals? [T|RecordOrTuple?(T)] (a:T, b:T)
    = equalFields?(a, b, 0);

overloadable equalFields?;
overload equalFields?[T,i](a:T, b:T, static i) {
    if (not equals?(fieldRef(a, i), fieldRef(b, i)))
        return false;
    return equalFields?(a, b, add(i, 1));
}
overload equalFields? [T,i|i == FieldCount(T)] (a:T, b:T, static i) = true;

overload lesser? [T|RecordOrTuple?(T)] (a:T, b:T)
    = lesserFields?(a, b, 0);

overloadable lesserFields?;
overload lesserFields?[T,i](a:T, b:T, static i) {
    if (lesser?(fieldRef(a, i), fieldRef(b, i)))
        return true;
    if (lesser?(fieldRef(b, i), fieldRef(a, i)))
        return false;
    return lesserFields?(a, b, add(i, 1));
}
overload lesserFields? [T,i|i == FieldCount(T)] (a:T, b:T, static i) = false;

overload hash [T|RecordOrTuple?(T)] (a:T) = hashFields(a, 0);

overloadable hashFields;
overload hashFields[T,i](a:T, static i) {
    var curH = hash(fieldRef(a, i));
    return add(curH, hashFields(a, add(i, 1)));
}
overload hashFields [T,i|i == FieldCount(T)] (a:T, static i) = 0;
