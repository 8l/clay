

//
// predicates
//

[T,n]
overload SizedSequence?(static Array[T,n]) = true;

[T,n]
overload RandomAccessSequence?(static Array[T,n]) = true;

[T,n]
overload LValueSequence?(static Array[T,n]) = true;

[T,n]
overload ContiguousSequence?(static Array[T,n]) = true;

[T,n]
overload SequenceElementType(static Array[T,n]) = T;



//
// size, index, iterator, begin, end
//

[T,n]
overload size(a:Array[T,n]) = SizeT(n);

[T,n,I | Integer?(I)]
overload index(a:Array[T,n], i:I) = ref arrayRef(a, SizeT(i));

[T,n]
overload iterator(a:Array[T,n]) = CoordinateRange(begin(a), end(a));

[T,n]
overload begin(a:Array[T,n]) = &a[0];

[T,n]
overload end(a:Array[T,n]) = &a[n];



//
// constructors, destroy, equals?, lesser?
//

[T,n]
overload Array[T,n]() : Array[T,n] {
    for (x in returned)
        x <-- T();
}

[T,n]
overload Array[T,n](src:Array[T,n]) : Array[T,n] {
    var d = iterator(returned);
    var s = iterator(src);
    while (hasNext?(s))
        next(d) <-- next(s);
}

[T,n]
overload destroy(a:Array[T,n]) {
    for (x in a)
        destroy(x);
}

[T,n]
overload move(src:Array[T,n]) : Array[T,n] {
    var d = iterator(returned);
    var s = iterator(src);
    while (hasNext?(s))
        next(d) <-- move(next(s));
}

[T,n]
overload equals?(a:Array[T,n], b:Array[T,n]) {
    var i = iterator(a);
    var j = iterator(b);
    while (hasNext?(i)) {
        if (next(i) != next(j))
            return false;
    }
    return true;
}

[T,n]
overload lesser?(a:Array[T,n], b:Array[T,n]) {
    var i = iterator(a);
    var j = iterator(b);
    while (hasNext?(i)) {
        ref x = next(i);
        ref y = next(j);
        if (x != y)
            return x < y;
    }
    return false;
}
