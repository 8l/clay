public import __primitives__.(Pointer, addressOf, pointerDereference,
                              pointerToInt, intToPointer, pointerCast);

public import __primitives__.(CodePointer, RefCodePointer, CodePointer?,
                              makeCodePointer);

public import __primitives__.(CCodePointer, CCodePointer?,
                              makeCCodePointer);

import types.*;
import operators.*;
import __primitives__.(primitiveCopy);
import numbers.*;
import libc.(malloc, free);



//
// Pointer
//

[T]
overload Pointer[T](src:Pointer[T]) : Pointer[T] {
    primitiveCopy(returned, src);
}

[I,T|Integer?(I)]
overload I(a:Pointer[T]) = pointerToInt(I, a);

[I,T|Integer?(I)]
overload Pointer[T](a:I) = intToPointer(T, a);

[DEST, SRC]
overload Pointer[DEST](a:Pointer[SRC]) =
    pointerCast(Pointer[DEST], a);

[T]
overload assign(dest:Pointer[T], src:Pointer[T]) {
    primitiveCopy(dest, src);
}

[T]
overload equals?(a:Pointer[T], b:Pointer[T]) {
    return equals?(SizeT(a), SizeT(b));
}

[T]
overload lesser?(a:Pointer[T], b:Pointer[T]) {
    return lesser?(SizeT(a), SizeT(b));
}

[T,I|Integer?(I)]
overload add(p:Pointer[T], i:I) {
    return Pointer[T](SizeT(p) + i*TypeSize(T));
}

[T,I|Integer?(I)]
overload subtract(p:Pointer[T], i:I) {
    return Pointer[T](SizeT(p) - i*TypeSize(T));
}

[T]
overload subtract(a:Pointer[T], b:Pointer[T]) {
    return (PtrInt(a) - PtrInt(b)) / PtrInt(TypeSize(T));
}

[T]
overload inc(a:Pointer[T]) {
    a += 1;
}

[T]
overload dec(a:Pointer[T]) {
    a -= 1;
}

[T]
null(static T) = Pointer[T](0);

[T]
isNull(x:Pointer[T]) = (x == null(T));

[T]
overload dereference(p:Pointer[T]) = ref pointerDereference(p);

[T]
allocateMemory(static T, count:SizeT) {
    var ptr = malloc(TypeSize(T) * count);
    return Pointer[T](ptr);
}

freeMemory(ptr) {
    free(RawPointer(ptr));
}



//
// CodePointer
//

[CP | CodePointer?(CP)]
overload CP(src:CP) : CP {
    primitiveCopy(returned, src);
}

[T, CP | CodePointer?(CP)]
overload Pointer[T](a:CP) = pointerCast(Pointer[T], a);

[T, CP | CodePointer?(CP)]
overload CP(a:Pointer[T]) = pointerCast(CP, a);

[CP1, CP2 | CodePointer?(CP1) and CodePointer?(CP2)]
overload CP1(a:CP2) = pointerCast(CP1, a);

[CP | CodePointer?(CP)]
overload equals?(a:CP, b:CP) {
    return equals?(RawPointer(a), RawPointer(b));
}

[CP | CodePointer?(CP)]
overload lesser?(a:CP, b:CP) {
    return lesser?(RawPointer(a), RawPointer(b));
}

[CP | CodePointer?(CP)]
nullCode(static CP) = CP(null(Int8));



//
// CCodePointer
//

[CP | CCodePointer?(CP)]
overload CP(src:CP) : CP {
    primitiveCopy(returned, src);
}

[T, CP | CCodePointer?(CP)]
overload Pointer[T](a:CP) = pointerCast(Pointer[T], a);

[T, CP | CCodePointer?(CP)]
overload CP(a:Pointer[T]) = pointerCast(CP, a);

[CP1, CP2 | CCodePointer?(CP1) and CCodePointer?(CP2)]
overload CP1(a:CP2) = pointerCast(CP1, a);

[CP | CCodePointer?(CP)]
overload equals?(a:CP, b:CP) {
    return equals?(RawPointer(a), RawPointer(b));
}

[CP | CCodePointer?(CP)]
overload lesser?(a:CP, b:CP) {
    return lesser?(RawPointer(a), RawPointer(b));
}

[CP | CCodePointer?(CP)]
nullCCode(static CP) = CP(null(Int8));
