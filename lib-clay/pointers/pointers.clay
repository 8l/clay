import libc.(malloc, free);


overloadable null?;



//
// Pointer - constructors, destroy
//

[T]
overload Pointer[T]() : Pointer[T] {
}

[T]
overload Pointer[T](src:Pointer[T]) : Pointer[T] {
    primitiveCopy(returned, src);
}

[T]
overload destroy(x:Pointer[T]) {
}



//
// Pointer - convert to/from integers and other pointers
//

[I,T|Integer?(I)]
overload I(a:Pointer[T]) = pointerToInt(I, a);

[I,T|Integer?(I)]
overload Pointer[T](a:I) = intToPointer(T, a);

[DEST, SRC]
overload Pointer[DEST](a:Pointer[SRC]) =
    pointerCast(Pointer[DEST], a);



//
// Pointer - assign, equals?, lesser?
//

[T]
overload assign(dest:Pointer[T], src:Pointer[T]) {
    primitiveCopy(dest, src);
}

[T]
overload equals?(a:Pointer[T], b:Pointer[T]) {
    return pointerEquals?(a, b);
}

[T]
overload lesser?(a:Pointer[T], b:Pointer[T]) {
    return pointerLesser?(a, b);
}



//
// Pointer - arithmetic
//

[T,I|Integer?(I)]
overload add(p:Pointer[T], i:I) {
    return pointerOffset(p, i);
}

[T,I|Integer?(I)]
overload add(i:I, p:Pointer[T]) {
    return pointerOffset(p, i);
}

[T,I|Integer?(I)]
overload subtract(p:Pointer[T], i:I) {
    return pointerOffset(p, -i);
}

[T]
overload subtract(a:Pointer[T], b:Pointer[T]) {
    return (PtrInt(a) - PtrInt(b)) / PtrInt(TypeSize(T));
}

[T]
overload inc(a:Pointer[T]) {
    a += 1;
}

[T]
overload dec(a:Pointer[T]) {
    a -= 1;
}



//
// Pointer - null, null?, dereference
//

[T]
null(static T) = Pointer[T](0);

[T]
overload null?(x:Pointer[T]) = (x == null(T));

[T]
overload dereference(p:Pointer[T]) = ref pointerDereference(p);



//
// allocateMemory, freeMemory
//

[T,I | Integer?(I)]
allocateMemory(static T, count:I) {
    var ptr = malloc(TypeSize(T) * SizeT(count));
    return Pointer[T](ptr);
}

freeMemory(ptr) {
    free(RawPointer(ptr));
}



//
// CodePointer - constructors, destroy
//

[CP | CodePointer?(CP)]
overload CP() : CP {
}

[CP | CodePointer?(CP)]
overload CP(src:CP) : CP {
    primitiveCopy(returned, src);
}

[CP | CodePointer?(CP)]
overload destroy(x:CP) {
}



//
// CodePointer - convert to/from other pointers/integers
//

[T, CP | CodePointer?(CP)]
overload Pointer[T](a:CP) = pointerCast(Pointer[T], a);

[T, CP | CodePointer?(CP)]
overload CP(a:Pointer[T]) = pointerCast(CP, a);

[CP1, CP2 | CodePointer?(CP1) and CodePointer?(CP2)]
overload CP1(a:CP2) = pointerCast(CP1, a);

[CP,I | CodePointer?(CP) and Integer?(I)]
overload CP(i:I) = CP(Pointer[Int8](i));

[CP,I | CodePointer?(CP) and Integer?(I)]
overload I(a:CP) = I(Pointer[Int8](a));



//
// CodePointer - equals?, lesser?, null?

[CP | CodePointer?(CP)]
overload equals?(a:CP, b:CP) {
    return equals?(RawPointer(a), RawPointer(b));
}

[CP | CodePointer?(CP)]
overload lesser?(a:CP, b:CP) {
    return lesser?(RawPointer(a), RawPointer(b));
}

[CP | CodePointer?(CP)]
overload null?(p:CP) = null?(RawPointer(p));



//
// CCodePointer - constructors, destroy
//

[CP | CCodePointer?(CP)]
overload CP() : CP {
}

[CP | CCodePointer?(CP)]
overload CP(src:CP) : CP {
    primitiveCopy(returned, src);
}

[CP | CCodePointer?(CP)]
overload destroy(x:CP) {
}



//
// CCodePointer - convert to/from other pointers/integers
//

[T, CP | CCodePointer?(CP)]
overload Pointer[T](a:CP) = pointerCast(Pointer[T], a);

[T, CP | CCodePointer?(CP)]
overload CP(a:Pointer[T]) = pointerCast(CP, a);

[CP1, CP2 | CCodePointer?(CP1) and CCodePointer?(CP2)]
overload CP1(a:CP2) = pointerCast(CP1, a);

[CP,I | CCodePointer?(CP) and Integer?(I)]
overload CP(i:I) = CP(Pointer[Int8](i));

[CP,I | CCodePointer?(CP) and Integer?(I)]
overload I(a:CP) = I(Pointer[Int8](a));



//
// CCodePointer - equals?, lesser?, null?
//

[CP | CCodePointer?(CP)]
overload equals?(a:CP, b:CP) {
    return equals?(RawPointer(a), RawPointer(b));
}

[CP | CCodePointer?(CP)]
overload lesser?(a:CP, b:CP) {
    return lesser?(RawPointer(a), RawPointer(b));
}

[CP | CCodePointer?(CP)]
overload null?(p:CP) = null?(RawPointer(p));
