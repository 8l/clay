public import __primitives__.(Pointer, addressOf, pointerDereference,
                              pointerToInt, intToPointer, pointerCast);

public import __primitives__.(CodePointer, RefCodePointer, CodePointerType?,
                              makeCodePointer);

public import __primitives__.(CCodePointer, CCodePointerType?,
                              makeCCodePointer);

import operators.*;
import __primitives__.(primitiveCopy);
import numbers.*;
import libc.(malloc, free);



//
// Pointer
//

[T]
overload Pointer[T](src:Pointer[T]) : Pointer[T] {
    primitiveCopy(returned, src);
}

[I,T|IntegerType?(I)]
overload I(a:Pointer[T]) = pointerToInt(I, a);

[I,T|IntegerType?(I)]
overload Pointer[T](a:I) = intToPointer(T, a);

[DEST, SRC]
overload Pointer[DEST](a:Pointer[SRC]) =
    pointerCast(Pointer[DEST], a);

[T]
private pointerToInt32(a:Pointer[T]) = Int32(a);

[T]
private pointerToUInt32(a:Pointer[T]) = UInt32(a);

[T]
overload equals?(a:Pointer[T], b:Pointer[T]) {
    return equals?(pointerToInt32(a), pointerToInt32(b));
}

[T]
overload lesser?(a:Pointer[T], b:Pointer[T]) {
    return lesser?(pointerToUInt32(a), pointerToUInt32(b));
}

[T]
overload hash(a:Pointer[T]) = pointerToInt32(a);

[T,I|IntegerType?(I)]
overload add(p:Pointer[T], i:I) {
    return Pointer[T](pointerToInt32(p) + i*TypeSize(T));
}

[T,I|IntegerType?(I)]
overload subtract(p:Pointer[T], i:I) {
    return Pointer[T](pointerToInt32(p) - i*TypeSize(T));
}

[T]
overload subtract(a:Pointer[T], b:Pointer[T]) {
    return (pointerToInt32(a) - pointerToInt32(b)) / TypeSize(T);
}

[T]
overload inc(a:Pointer[T]) {
    a += 1;
}

[T]
overload dec(a:Pointer[T]) {
    a -= 1;
}

[T]
null(static T) = Pointer[T](0);

[T]
overload dereference(p:Pointer[T]) = ref pointerDereference(p);

[T]
allocateMemory(static T, count:Int32) {
    var ptr = malloc(TypeSize(T) * count);
    return Pointer[T](ptr);
}

freeMemory(ptr) {
    free(Pointer[Int8](ptr));
}



//
// CodePointer
//

[CP | CodePointerType?(CP)]
overload CP(src:CP) : CP {
    primitiveCopy(returned, src);
}

[T, CP | CodePointerType?(CP)]
overload Pointer[T](a:CP) = pointerCast(Pointer[T], a);

[T, CP | CodePointerType?(CP)]
overload CP(a:Pointer[T]) = pointerCast(CP, a);

[CP1, CP2 | CodePointerType?(CP1) and CodePointerType?(CP2)]
overload CP1(a:CP2) = pointerCast(CP1, a);

[CP | CodePointerType?(CP)]
overload equals?(a:CP, b:CP) {
    return equals?(to(Pointer[Int8], a), to(Pointer[Int8], b));
}

[CP | CodePointerType?(CP)]
overload lesser?(a:CP, b:CP) {
    return lesser?(to(Pointer[Int8], a), to(Pointer[Int8], b));
}

[CP | CodePointerType?(CP)]
overload hash(a:CP) = hash(to(Pointer[Int8], a));

[CP | CodePointerType?(CP)]
nullCode(static CP) = to(CP, null(Int8));



//
// CCodePointer
//

[CP | CCodePointerType?(CP)]
overload CP(src:CP) : CP {
    primitiveCopy(returned, src);
}

[T, CP | CCodePointerType?(CP)]
overload Pointer[T](a:CP) = pointerCast(Pointer[T], a);

[T, CP | CCodePointerType?(CP)]
overload CP(a:Pointer[T]) = pointerCast(CP, a);

[CP1, CP2 | CCodePointerType?(CP1) and CCodePointerType?(CP2)]
overload CP1(a:CP2) = pointerCast(CP1, a);

[CP | CCodePointerType?(CP)]
overload equals?(a:CP, b:CP) {
    return equals?(to(Pointer[Int8], a), to(Pointer[Int8], b));
}

[CP | CCodePointerType?(CP)]
overload lesser?(a:CP, b:CP) {
    return lesser?(to(Pointer[Int8], a), to(Pointer[Int8], b));
}

[CP | CCodePointerType?(CP)]
overload hash(a:CP) = hash(to(Pointer[Int8], a));

[CP | CCodePointerType?(CP)]
nullCCode(static CP) = to(CP, null(Int8));
