import paged.*;
import strings;

//
// String
//

record String {
    data : PagedPointer[Char];
    size : SizeT;
}


//
// predicates
//

static overload SizedSequence?(String) = true;
static overload RandomAccessSequence?(String) = true;
static overload LValueSequence?(String) = true;
static overload SequenceElementType(String) = Char;


//
// constructors
//

overload String() = String(nullPaged(Char), SizeT(0));

private allocateStringData(a) {
    var n = size(a);
    var data = allocatePaged(Char, n+1);
    var p = data;
    for (x in a) {
        p^ = x;
        p += 1;
    }
    p^ = Char(0);
    return data;
}

[A | SizedSequence?(A) and (Char == SequenceElementType(A))]
overload String(a:A) {
    var data = allocateStringData(a);
    return String(data, size(a));
}

[A | SizedSequence?(A) and (Int8 == SequenceElementType(A))]
overload String(a:A) = String(mapped(Char, a));


//
// destroy
//

overload destroy(a:String) {
    freePaged(a.data);
}


//
// move
//

overload move(a:String) : String {
    returned <-- String(a.data, a.size);
    a <-- String();
}


//
// size, index
//

overload size(a:String) = a.size;

[I | Integer?(I)]
overload index(a:String, i:I) = ref (a.data + SizeT(i))^;


//
// coordinates and iteration
//

overload begin(a:String) = &a[0];
overload end(a:String) = &a[0] + a.size;

overload iterator(a:String) = CoordinateRange(begin(a), end(a));


//
// equals?, lesser?
//

private stringEquals?(a, b) {
    if (size(a) != size(b))
        return false;
    ref i = iterator(a);
    ref j = iterator(b);
    while (hasNext?(i)) {
        if (next(i) != next(j))
            return false;
    }
    return true;
}

overload equals?(a:String, b:String) = stringEquals?(a, b);
overload equals?(a:strings.String, b:String) = stringEquals?(a, b);
overload equals?(a:String, b:strings.String) = stringEquals?(a, b);

private stringLesser?(a, b) {
    ref i = iterator(a);
    ref j = iterator(b);
    while (hasNext?(i) and hasNext?(j)) {
        ref x = next(i);
        ref y = next(j);
        if (x != y)
            return x < y;
    }
    return hasNext?(j);
}

overload lesser?(a:String, b:String) = stringLesser?(a, b);
overload lesser?(a:strings.String, b:String) = stringLesser?(a, b);
overload lesser?(a:String, b:strings.String) = stringLesser?(a, b);


//
// printing support
//

overload printTo(stream, x:String) {
    write(stream, Pointer[Byte](&x[0]), size(x));
}
