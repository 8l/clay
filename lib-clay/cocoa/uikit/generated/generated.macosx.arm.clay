// Automatically generated by clay-bindgen
// language: objective-c

import cocoa.objc.*;

import libc.*;
import cocoa.corefoundation.*;
import cocoa.applicationservices.*;
import cocoa.foundation.*;
import cocoa.quartzcore.*;

private alias OpaquePointer = RawPointer;
private alias UnknownType = Int;
private alias AUnionType = Int;


overload selector(static "AMSymbol") = NSString;
overload selector(static "CGAffineTransformValue") = CGAffineTransform;
overload selector(static "CGColor") = CGColorRef;
overload selector(static "CGImage") = CGImageRef;
overload selector(static "CGPath") = CGPathRef;
overload selector(static "CGPointValue") = CGPoint;
overload selector(static "CGRectValue") = CGRect;
overload selector(static "CGSizeValue") = CGSize;
overload selector(static "HTTPBody") = NSData;
overload selector(static "HTTPBodyStream") = NSInputStream;
overload selector(static "HTTPMethod") = NSString;
overload selector(static "HTTPShouldHandleCookies") = Bool;
overload selector(static "HTTPShouldUsePipelining") = Bool;
overload selector(static "ISOCountryCodes") = NSArray;
overload selector(static "ISOCurrencyCodes") = NSArray;
overload selector(static "ISOLanguageCodes") = NSArray;
overload selector(static "MIMEType") = NSString;
overload selector(static "PMSymbol") = NSString;
overload selector(static "TXTRecordData") = NSData;
overload selector(static "UIEdgeInsetsValue") = UIEdgeInsets;
overload selector(static "URL") = NSURL;
overload selector(static "URLByAppendingPathComponent:") = NSURL, NSString;
overload selector(static "URLByAppendingPathExtension:") = NSURL, NSString;
overload selector(static "URLByDeletingLastPathComponent") = NSURL;
overload selector(static "URLByDeletingPathExtension") = NSURL;
overload selector(static "URLByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:") = Id, NSData, UInt, NSURL, Pointer[Bool], Pointer[NSError];
overload selector(static "URLByResolvingSymlinksInPath") = NSURL;
overload selector(static "URLByStandardizingPath") = NSURL;
overload selector(static "URLForAuxiliaryExecutable:") = NSURL, NSString;
overload selector(static "URLForDirectory:inDomain:appropriateForURL:create:error:") = NSURL, UInt, UInt, NSURL, Bool, Pointer[NSError];
overload selector(static "URLForKey:") = NSURL, NSString;
overload selector(static "URLForResource:withExtension:") = NSURL, NSString, NSString;
overload selector(static "URLForResource:withExtension:subdirectory:") = NSURL, NSString, NSString, NSString;
overload selector(static "URLForResource:withExtension:subdirectory:inBundleWithURL:") = NSURL, NSString, NSString, NSString, NSURL;
overload selector(static "URLForResource:withExtension:subdirectory:localization:") = NSURL, NSString, NSString, NSString, NSString;
overload selector(static "URLProtocol:cachedResponseIsValid:") = Void, NSURLProtocol, NSCachedURLResponse;
overload selector(static "URLProtocol:didCancelAuthenticationChallenge:") = Void, NSURLProtocol, NSURLAuthenticationChallenge;
overload selector(static "URLProtocol:didFailWithError:") = Void, NSURLProtocol, NSError;
overload selector(static "URLProtocol:didLoadData:") = Void, NSURLProtocol, NSData;
overload selector(static "URLProtocol:didReceiveAuthenticationChallenge:") = Void, NSURLProtocol, NSURLAuthenticationChallenge;
overload selector(static "URLProtocol:didReceiveResponse:cacheStoragePolicy:") = Void, NSURLProtocol, NSURLResponse, UInt;
overload selector(static "URLProtocol:wasRedirectedToRequest:redirectResponse:") = Void, NSURLProtocol, NSURLRequest, NSURLResponse;
overload selector(static "URLProtocolDidFinishLoading:") = Void, NSURLProtocol;
overload selector(static "URLWithString:") = Id, NSString;
overload selector(static "URLWithString:relativeToURL:") = Id, NSString, NSURL;
overload selector(static "URLs") = NSArray;
overload selector(static "URLsForDirectory:inDomains:") = NSArray, UInt, UInt;
overload selector(static "URLsForResourcesWithExtension:subdirectory:") = NSArray, NSString, NSString;
overload selector(static "URLsForResourcesWithExtension:subdirectory:inBundleWithURL:") = NSArray, NSString, NSString, NSURL;
overload selector(static "URLsForResourcesWithExtension:subdirectory:localization:") = NSArray, NSString, NSString, NSString;
overload selector(static "UTF8String") = Pointer[CChar];
overload selector(static "UTI") = NSString;
overload selector(static "abbreviation") = NSString;
overload selector(static "abbreviationDictionary") = NSDictionary;
overload selector(static "abbreviationForDate:") = NSString, NSDate;
overload selector(static "abortParsing") = Void;
overload selector(static "absoluteString") = NSString;
overload selector(static "absoluteURL") = NSURL;
overload selector(static "accelerometer:didAccelerate:") = Void, UIAccelerometer, UIAcceleration;
overload selector(static "acceptConnectionInBackgroundAndNotify") = Void;
overload selector(static "acceptConnectionInBackgroundAndNotifyForModes:") = Void, NSArray;
overload selector(static "acceptInputForMode:beforeDate:") = Void, NSString, NSDate;
overload selector(static "accessInstanceVariablesDirectly") = Bool;
overload selector(static "accessibilityContainer") = Id;
overload selector(static "accessibilityDecrement") = Void;
overload selector(static "accessibilityElementAtIndex:") = Id, Int;
overload selector(static "accessibilityElementCount") = Int;
overload selector(static "accessibilityElementDidBecomeFocused") = Void;
overload selector(static "accessibilityElementDidLoseFocus") = Void;
overload selector(static "accessibilityElementIsFocused") = Bool;
overload selector(static "accessibilityFrame") = CGRect;
overload selector(static "accessibilityHint") = NSString;
overload selector(static "accessibilityIncrement") = Void;
overload selector(static "accessibilityLabel") = NSString;
overload selector(static "accessibilityLanguage") = NSString;
overload selector(static "accessibilityTraits") = UInt64;
overload selector(static "accessibilityValue") = NSString;
overload selector(static "accessoryAction") = SelectorHandle;
overload selector(static "accessoryType") = UITableViewCellAccessoryType;
overload selector(static "accessoryView") = UIView;
overload selector(static "action") = SelectorHandle;
overload selector(static "actionSheet:clickedButtonAtIndex:") = Void, UIActionSheet, Int;
overload selector(static "actionSheet:didDismissWithButtonIndex:") = Void, UIActionSheet, Int;
overload selector(static "actionSheet:willDismissWithButtonIndex:") = Void, UIActionSheet, Int;
overload selector(static "actionSheetCancel:") = Void, UIActionSheet;
overload selector(static "actionSheetStyle") = UIActionSheetStyle;
overload selector(static "actionsForTarget:forControlEvent:") = NSArray, Id, UInt;
overload selector(static "activeProcessorCount") = UInt;
overload selector(static "activityIndicatorViewStyle") = UIActivityIndicatorViewStyle;
overload selector(static "addArcWithCenter:radius:startAngle:endAngle:clockwise:") = Void, CGPoint, Float, Float, Float, Bool;
overload selector(static "addAttribute:value:range:") = Void, NSString, Id, NSRange;
overload selector(static "addAttributes:range:") = Void, NSDictionary, NSRange;
overload selector(static "addButtonWithTitle:") = Int, NSString;
overload selector(static "addCharactersInRange:") = Void, NSRange;
overload selector(static "addCharactersInString:") = Void, NSString;
overload selector(static "addClip") = Void;
overload selector(static "addCurveToPoint:controlPoint1:controlPoint2:") = Void, CGPoint, CGPoint, CGPoint;
overload selector(static "addDependency:") = Void, NSOperation;
overload selector(static "addEntriesFromDictionary:") = Void, NSDictionary;
overload selector(static "addExecutionBlock:") = Void, UnknownType;
overload selector(static "addFileWithPath:") = NSString, NSString;
overload selector(static "addFileWrapper:") = NSString, NSFileWrapper;
overload selector(static "addGestureRecognizer:") = Void, UIGestureRecognizer;
overload selector(static "addIndex:") = Void, UInt;
overload selector(static "addIndexes:") = Void, NSIndexSet;
overload selector(static "addIndexesInRange:") = Void, NSRange;
overload selector(static "addItems:") = Void, NSArray;
overload selector(static "addLineToPoint:") = Void, CGPoint;
overload selector(static "addObject:") = Void, Id;
overload selector(static "addObjectsFromArray:") = Void, NSArray;
overload selector(static "addObserver:forKeyPath:options:context:") = Void, NSObject, NSString, UInt, RawPointer;
overload selector(static "addObserver:selector:name:object:") = Void, Id, SelectorHandle, NSString, Id;
overload selector(static "addObserver:toObjectsAtIndexes:forKeyPath:options:context:") = Void, NSObject, NSIndexSet, NSString, UInt, RawPointer;
overload selector(static "addObserverForName:object:queue:usingBlock:") = Id, NSString, Id, NSOperationQueue, UnknownType;
overload selector(static "addOperation:") = Void, NSOperation;
overload selector(static "addOperationWithBlock:") = Void, UnknownType;
overload selector(static "addOperations:waitUntilFinished:") = Void, NSArray, Bool;
overload selector(static "addPort:forMode:") = Void, NSPort, NSString;
overload selector(static "addQuadCurveToPoint:controlPoint:") = Void, CGPoint, CGPoint;
overload selector(static "addRegularFileWithContents:preferredFilename:") = NSString, NSData, NSString;
overload selector(static "addSubview:") = Void, UIView;
overload selector(static "addSuiteNamed:") = Void, NSString;
overload selector(static "addSymbolicLinkWithDestination:preferredFilename:") = NSString, NSString, NSString;
overload selector(static "addTarget:action:") = Void, Id, SelectorHandle;
overload selector(static "addTarget:action:forControlEvents:") = Void, Id, SelectorHandle, UInt;
overload selector(static "addTimeInterval:") = Id, Double;
overload selector(static "addTimer:forMode:") = Void, NSTimer, NSString;
overload selector(static "addValue:forHTTPHeaderField:") = Void, NSString, NSString;
overload selector(static "addressCheckingResultWithRange:components:") = NSTextCheckingResult, NSRange, NSDictionary;
overload selector(static "addressComponents") = NSDictionary;
overload selector(static "addresses") = NSArray;
overload selector(static "adjustsFontSizeToFitWidth") = Bool;
overload selector(static "adjustsImageWhenDisabled") = Bool;
overload selector(static "adjustsImageWhenHighlighted") = Bool;
overload selector(static "alertAction") = NSString;
overload selector(static "alertBody") = NSString;
overload selector(static "alertLaunchImage") = NSString;
overload selector(static "alertView:clickedButtonAtIndex:") = Void, UIAlertView, Int;
overload selector(static "alertView:didDismissWithButtonIndex:") = Void, UIAlertView, Int;
overload selector(static "alertView:willDismissWithButtonIndex:") = Void, UIAlertView, Int;
overload selector(static "alertViewCancel:") = Void, UIAlertView;
overload selector(static "allBundles") = NSArray;
overload selector(static "allControlEvents") = UInt;
overload selector(static "allCredentials") = NSDictionary;
overload selector(static "allFrameworks") = NSArray;
overload selector(static "allHTTPHeaderFields") = NSDictionary;
overload selector(static "allHeaderFields") = NSDictionary;
overload selector(static "allKeys") = NSArray;
overload selector(static "allKeysForObject:") = NSArray, Id;
overload selector(static "allLanguages") = NSArray;
overload selector(static "allObjects") = NSArray;
overload selector(static "allScripts") = NSArray;
overload selector(static "allTargets") = NSSet;
overload selector(static "allTouches") = NSSet;
overload selector(static "allValues") = NSArray;
overload selector(static "alloc") = Id;
overload selector(static "allocWithZone:") = Id, Pointer[NSZone];
overload selector(static "allowableMovement") = Float;
overload selector(static "allowsEditing") = Bool;
overload selector(static "allowsFloats") = Bool;
overload selector(static "allowsImageEditing") = Bool;
overload selector(static "allowsInlineMediaPlayback") = Bool;
overload selector(static "allowsKeyedCoding") = Bool;
overload selector(static "allowsReverseTransformation") = Bool;
overload selector(static "allowsSelection") = Bool;
overload selector(static "allowsSelectionDuringEditing") = Bool;
overload selector(static "alpha") = Float;
overload selector(static "alphanumericCharacterSet") = Id;
overload selector(static "alwaysBounceHorizontal") = Bool;
overload selector(static "alwaysBounceVertical") = Bool;
overload selector(static "alwaysShowsDecimalSeparator") = Bool;
overload selector(static "andPredicateWithSubpredicates:") = NSPredicate, NSArray;
overload selector(static "animateWithDuration:animations:") = Void, Double, UnknownType;
overload selector(static "animateWithDuration:animations:completion:") = Void, Double, UnknownType, UnknownType;
overload selector(static "animateWithDuration:delay:options:animations:completion:") = Void, Double, Double, UInt, UnknownType, UnknownType;
overload selector(static "animationDuration") = Double;
overload selector(static "animationImages") = NSArray;
overload selector(static "animationRepeatCount") = Int;
overload selector(static "annotation") = Id;
overload selector(static "anyObject") = Id;
overload selector(static "appendAttributedString:") = Void, NSAttributedString;
overload selector(static "appendBytes:length:") = Void, RawPointer, UInt;
overload selector(static "appendData:") = Void, NSData;
overload varargSelector(static "appendFormat:") = Void, NSString;
overload selector(static "appendPath:") = Void, UIBezierPath;
overload selector(static "appendString:") = Void, NSString;
overload selector(static "application:didChangeStatusBarFrame:") = Void, UIApplication, CGRect;
overload selector(static "application:didChangeStatusBarOrientation:") = Void, UIApplication, UIInterfaceOrientation;
overload selector(static "application:didFailToRegisterForRemoteNotificationsWithError:") = Void, UIApplication, NSError;
overload selector(static "application:didFinishLaunchingWithOptions:") = Bool, UIApplication, NSDictionary;
overload selector(static "application:didReceiveLocalNotification:") = Void, UIApplication, UILocalNotification;
overload selector(static "application:didReceiveRemoteNotification:") = Void, UIApplication, NSDictionary;
overload selector(static "application:didRegisterForRemoteNotificationsWithDeviceToken:") = Void, UIApplication, NSData;
overload selector(static "application:handleOpenURL:") = Bool, UIApplication, NSURL;
overload selector(static "application:willChangeStatusBarFrame:") = Void, UIApplication, CGRect;
overload selector(static "application:willChangeStatusBarOrientation:duration:") = Void, UIApplication, UIInterfaceOrientation, Double;
overload selector(static "applicationDidBecomeActive:") = Void, UIApplication;
overload selector(static "applicationDidEnterBackground:") = Void, UIApplication;
overload selector(static "applicationDidFinishLaunching:") = Void, UIApplication;
overload selector(static "applicationDidReceiveMemoryWarning:") = Void, UIApplication;
overload selector(static "applicationFrame") = CGRect;
overload selector(static "applicationIconBadgeNumber") = Int;
overload selector(static "applicationProtectedDataDidBecomeAvailable:") = Void, UIApplication;
overload selector(static "applicationProtectedDataWillBecomeUnavailable:") = Void, UIApplication;
overload selector(static "applicationSignificantTimeChange:") = Void, UIApplication;
overload selector(static "applicationState") = UIApplicationState;
overload selector(static "applicationSupportsShakeToEdit") = Bool;
overload selector(static "applicationWillEnterForeground:") = Void, UIApplication;
overload selector(static "applicationWillResignActive:") = Void, UIApplication;
overload selector(static "applicationWillTerminate:") = Void, UIApplication;
overload selector(static "applyTransform:") = Void, CGAffineTransform;
overload selector(static "archiveRootObject:toFile:") = Bool, Id, NSString;
overload selector(static "archivedDataWithRootObject:") = NSData, Id;
overload selector(static "archiver:didEncodeObject:") = Void, NSKeyedArchiver, Id;
overload selector(static "archiver:willEncodeObject:") = Id, NSKeyedArchiver, Id;
overload selector(static "archiver:willReplaceObject:withObject:") = Void, NSKeyedArchiver, Id, Id;
overload selector(static "archiverDidFinish:") = Void, NSKeyedArchiver;
overload selector(static "archiverWillFinish:") = Void, NSKeyedArchiver;
overload selector(static "areAnimationsEnabled") = Bool;
overload selector(static "arguments") = NSArray;
overload selector(static "argumentsRetained") = Bool;
overload selector(static "array") = Id;
overload selector(static "arrayByAddingObject:") = NSArray, Id;
overload selector(static "arrayByAddingObjectsFromArray:") = NSArray, NSArray;
overload selector(static "arrayForKey:") = NSArray, NSString;
overload selector(static "arrayWithArray:") = Id, NSArray;
overload selector(static "arrayWithCapacity:") = Id, UInt;
overload selector(static "arrayWithContentsOfFile:") = Id, NSString;
overload selector(static "arrayWithContentsOfURL:") = Id, NSURL;
overload selector(static "arrayWithObject:") = Id, Id;
overload varargSelector(static "arrayWithObjects:") = Id, Id;
overload selector(static "arrayWithObjects:count:") = Id, Pointer[Id], UInt;
overload selector(static "arrowDirection") = UIMenuControllerArrowDirection;
overload selector(static "ascender") = Float;
overload selector(static "ascending") = Bool;
overload selector(static "attemptRecoveryFromError:optionIndex:") = Bool, NSError, UInt;
overload selector(static "attemptRecoveryFromError:optionIndex:delegate:didRecoverSelector:contextInfo:") = Void, NSError, UInt, Id, SelectorHandle, RawPointer;
overload selector(static "attribute:atIndex:effectiveRange:") = Id, NSString, UInt, NSRangePointer;
overload selector(static "attribute:atIndex:longestEffectiveRange:inRange:") = Id, NSString, UInt, NSRangePointer, NSRange;
overload selector(static "attributedStringForObjectValue:withDefaultAttributes:") = NSAttributedString, Id, NSDictionary;
overload selector(static "attributedSubstringFromRange:") = NSAttributedString, NSRange;
overload selector(static "attributesAtIndex:effectiveRange:") = NSDictionary, UInt, NSRangePointer;
overload selector(static "attributesAtIndex:longestEffectiveRange:inRange:") = NSDictionary, UInt, NSRangePointer, NSRange;
overload selector(static "attributesOfFileSystemForPath:error:") = NSDictionary, NSString, Pointer[NSError];
overload selector(static "attributesOfItemAtPath:error:") = NSDictionary, NSString, Pointer[NSError];
overload selector(static "authenticationMethod") = NSString;
overload selector(static "autoContentAccessingProxy") = Id;
overload selector(static "autocapitalizationType") = UITextAutocapitalizationType;
overload selector(static "autocorrectionType") = UITextAutocorrectionType;
overload selector(static "automaticallyNotifiesObserversForKey:") = Bool, NSString;
overload selector(static "autorelease") = Id;
overload selector(static "autoresizesSubviews") = Bool;
overload selector(static "autoresizingMask") = UInt;
overload selector(static "autoupdatingCurrentCalendar") = Id;
overload selector(static "autoupdatingCurrentLocale") = Id;
overload selector(static "availableCaptureModesForCameraDevice:") = NSArray, UInt;
overload selector(static "availableData") = NSData;
overload selector(static "availableLocaleIdentifiers") = NSArray;
overload selector(static "availableMediaTypesForSourceType:") = NSArray, UInt;
overload selector(static "availableModes") = NSArray;
overload selector(static "availableStringEncodings") = Pointer[UInt];
overload selector(static "awakeAfterUsingCoder:") = Id, NSCoder;
overload selector(static "awakeFromNib") = Void;
overload selector(static "backBarButtonItem") = UIBarButtonItem;
overload selector(static "backItem") = UINavigationItem;
overload selector(static "background") = UIImage;
overload selector(static "backgroundColor") = UIColor;
overload selector(static "backgroundImageForState:") = UIImage, UInt;
overload selector(static "backgroundRectForBounds:") = CGRect, CGRect;
overload selector(static "backgroundTimeRemaining") = Double;
overload selector(static "backgroundView") = UIView;
overload selector(static "badgeValue") = NSString;
overload selector(static "barStyle") = UIBarStyle;
overload selector(static "baseURL") = NSURL;
overload selector(static "baseWritingDirectionForPosition:inDirection:") = UITextWritingDirection, UITextPosition, UITextStorageDirection;
overload selector(static "baselineAdjustment") = UIBaselineAdjustment;
overload selector(static "batteryLevel") = Float;
overload selector(static "batteryState") = UIDeviceBatteryState;
overload selector(static "becomeFirstResponder") = Bool;
overload selector(static "becomeKeyWindow") = Void;
overload selector(static "beginAnimations:context:") = Void, NSString, RawPointer;
overload selector(static "beginBackgroundTaskWithExpirationHandler:") = UInt, UnknownType;
overload selector(static "beginContentAccess") = Bool;
overload selector(static "beginCustomizingItems:") = Void, NSArray;
overload selector(static "beginEditing") = Void;
overload selector(static "beginGeneratingDeviceOrientationNotifications") = Void;
overload selector(static "beginIgnoringInteractionEvents") = Void;
overload selector(static "beginReceivingRemoteControlEvents") = Void;
overload selector(static "beginTrackingWithTouch:withEvent:") = Bool, UITouch, UIEvent;
overload selector(static "beginUndoGrouping") = Void;
overload selector(static "beginUpdates") = Void;
overload selector(static "beginningOfDocument") = UITextPosition;
overload selector(static "bezierPath") = UIBezierPath;
overload selector(static "bezierPathWithArcCenter:radius:startAngle:endAngle:clockwise:") = UIBezierPath, CGPoint, Float, Float, Float, Bool;
overload selector(static "bezierPathWithCGPath:") = UIBezierPath, CGPathRef;
overload selector(static "bezierPathWithOvalInRect:") = UIBezierPath, CGRect;
overload selector(static "bezierPathWithRect:") = UIBezierPath, CGRect;
overload selector(static "bezierPathWithRoundedRect:byRoundingCorners:cornerRadii:") = UIBezierPath, CGRect, UInt, CGSize;
overload selector(static "bezierPathWithRoundedRect:cornerRadius:") = UIBezierPath, CGRect, Float;
overload selector(static "bitmapRepresentation") = NSData;
overload selector(static "blackColor") = UIColor;
overload selector(static "blockOperationWithBlock:") = Id, UnknownType;
overload selector(static "blueColor") = UIColor;
overload selector(static "boldSystemFontOfSize:") = UIFont, Float;
overload selector(static "bookmarkDataWithContentsOfURL:error:") = NSData, NSURL, Pointer[NSError];
overload selector(static "bookmarkDataWithOptions:includingResourceValuesForKeys:relativeToURL:error:") = NSData, UInt, NSArray, NSURL, Pointer[NSError];
overload selector(static "boolForKey:") = Bool, NSString;
overload selector(static "boolValue") = Bool;
overload selector(static "borderRectForBounds:") = CGRect, CGRect;
overload selector(static "borderStyle") = UITextBorderStyle;
overload selector(static "bounces") = Bool;
overload selector(static "bouncesZoom") = Bool;
overload selector(static "bounds") = CGRect;
overload selector(static "bringSubviewToFront:") = Void, UIView;
overload selector(static "broadcast") = Void;
overload selector(static "brownColor") = UIColor;
overload selector(static "builtInPlugInsPath") = NSString;
overload selector(static "builtInPlugInsURL") = NSURL;
overload selector(static "bundleForClass:") = NSBundle, Id;
overload selector(static "bundleIdentifier") = NSString;
overload selector(static "bundlePath") = NSString;
overload selector(static "bundleURL") = NSURL;
overload selector(static "bundleWithIdentifier:") = NSBundle, NSString;
overload selector(static "bundleWithPath:") = NSBundle, NSString;
overload selector(static "bundleWithURL:") = NSBundle, NSURL;
overload selector(static "buttonFontSize") = Float;
overload selector(static "buttonTitleAtIndex:") = NSString, Int;
overload selector(static "buttonType") = UIButtonType;
overload selector(static "buttonWithType:") = Id, UIButtonType;
overload selector(static "bytes") = RawPointer;
overload selector(static "cString") = Pointer[CChar];
overload selector(static "cStringLength") = UInt;
overload selector(static "cStringUsingEncoding:") = Pointer[CChar], UInt;
overload selector(static "cache:willEvictObject:") = Void, NSCache, Id;
overload selector(static "cachePolicy") = UInt;
overload selector(static "cachedResponse") = NSCachedURLResponse;
overload selector(static "cachedResponseForRequest:") = NSCachedURLResponse, NSURLRequest;
overload selector(static "calendar") = NSCalendar;
overload selector(static "calendarIdentifier") = NSString;
overload selector(static "callStackReturnAddresses") = NSArray;
overload selector(static "callStackSymbols") = NSArray;
overload selector(static "cameraCaptureMode") = UInt;
overload selector(static "cameraDevice") = UInt;
overload selector(static "cameraFlashMode") = Int;
overload selector(static "cameraOverlayView") = UIView;
overload selector(static "cameraViewTransform") = CGAffineTransform;
overload selector(static "canBeConvertedToEncoding:") = Bool, UInt;
overload selector(static "canBecomeFirstResponder") = Bool;
overload selector(static "canCancelContentTouches") = Bool;
overload selector(static "canEditVideoAtPath:") = Bool, NSString;
overload selector(static "canGoBack") = Bool;
overload selector(static "canGoForward") = Bool;
overload selector(static "canHandleRequest:") = Bool, NSURLRequest;
overload selector(static "canInitWithRequest:") = Bool, NSURLRequest;
overload selector(static "canOpenURL:") = Bool, NSURL;
overload selector(static "canPerformAction:withSender:") = Bool, SelectorHandle, Id;
overload selector(static "canRedo") = Bool;
overload selector(static "canResignFirstResponder") = Bool;
overload selector(static "canUndo") = Bool;
overload selector(static "cancel") = Void;
overload selector(static "cancelAllLocalNotifications") = Void;
overload selector(static "cancelAllOperations") = Void;
overload selector(static "cancelAuthenticationChallenge:") = Void, NSURLAuthenticationChallenge;
overload selector(static "cancelButtonIndex") = Int;
overload selector(static "cancelLocalNotification:") = Void, UILocalNotification;
overload selector(static "cancelPerformSelector:target:argument:") = Void, SelectorHandle, Id, Id;
overload selector(static "cancelPerformSelectorsWithTarget:") = Void, Id;
overload selector(static "cancelPreviousPerformRequestsWithTarget:") = Void, Id;
overload selector(static "cancelPreviousPerformRequestsWithTarget:selector:object:") = Void, Id, SelectorHandle, Id;
overload selector(static "cancelTrackingWithEvent:") = Void, UIEvent;
overload selector(static "cancelsTouchesInView") = Bool;
overload selector(static "canonicalLanguageIdentifierFromString:") = NSString, NSString;
overload selector(static "canonicalLocaleIdentifierFromString:") = NSString, NSString;
overload selector(static "canonicalRequestForRequest:") = NSURLRequest, NSURLRequest;
overload selector(static "capHeight") = Float;
overload selector(static "capitalizedLetterCharacterSet") = Id;
overload selector(static "capitalizedString") = NSString;
overload selector(static "caretRectForPosition:") = CGRect, UITextPosition;
overload selector(static "caseInsensitiveCompare:") = Int, NSString;
overload selector(static "caseSensitive") = Bool;
overload selector(static "cellForRowAtIndexPath:") = UITableViewCell, NSIndexPath;
overload selector(static "center") = CGPoint;
overload selector(static "certificates") = NSArray;
overload selector(static "changeCount") = Int;
overload selector(static "changeCurrentDirectoryPath:") = Bool, NSString;
overload selector(static "changeFileAttributes:atPath:") = Bool, NSDictionary, NSString;
overload selector(static "charValue") = CChar;
overload selector(static "characterAtIndex:") = UShort, UInt;
overload selector(static "characterDirectionForLanguage:") = UInt, NSString;
overload selector(static "characterIsMember:") = Bool, UShort;
overload selector(static "characterOffsetOfPosition:withinRange:") = Int, UITextPosition, UITextRange;
overload selector(static "characterRangeAtPoint:") = UITextRange, CGPoint;
overload selector(static "characterRangeByExtendingPosition:inDirection:") = UITextRange, UITextPosition, UITextLayoutDirection;
overload selector(static "characterSetWithBitmapRepresentation:") = Id, NSData;
overload selector(static "characterSetWithCharactersInString:") = Id, NSString;
overload selector(static "characterSetWithContentsOfFile:") = Id, NSString;
overload selector(static "characterSetWithRange:") = Id, NSRange;
overload selector(static "charactersToBeSkipped") = NSCharacterSet;
overload selector(static "checkResourceIsReachableAndReturnError:") = Bool, Pointer[NSError];
overload selector(static "checkingTypes") = UInt64;
overload selector(static "class") = Id;
overload selector(static "classFallbacksForKeyedArchiver") = NSArray;
overload selector(static "classForClassName:") = Id, NSString;
overload selector(static "classForCoder") = Id;
overload selector(static "classForKeyedArchiver") = Id;
overload selector(static "classForKeyedUnarchiver") = Id;
overload selector(static "classNameForClass:") = NSString, Id;
overload selector(static "classNamed:") = Id, NSString;
overload selector(static "clearButtonMode") = UITextFieldViewMode;
overload selector(static "clearButtonRectForBounds:") = CGRect, CGRect;
overload selector(static "clearColor") = UIColor;
overload selector(static "clearKeepAliveTimeout") = Void;
overload selector(static "clearsContextBeforeDrawing") = Bool;
overload selector(static "clearsOnBeginEditing") = Bool;
overload selector(static "clearsSelectionOnViewWillAppear") = Bool;
overload selector(static "client") = Id;
overload selector(static "clipsToBounds") = Bool;
overload selector(static "close") = Void;
overload selector(static "closeFile") = Void;
overload selector(static "closePath") = Void;
overload selector(static "closestPositionToPoint:") = UITextPosition, CGPoint;
overload selector(static "closestPositionToPoint:withinRange:") = UITextPosition, CGPoint, UITextRange;
overload selector(static "code") = Int;
overload selector(static "collection") = Id;
overload selector(static "color") = UIColor;
overload selector(static "colorWithAlphaComponent:") = UIColor, Float;
overload selector(static "colorWithCGColor:") = UIColor, CGColorRef;
overload selector(static "colorWithHue:saturation:brightness:alpha:") = UIColor, Float, Float, Float, Float;
overload selector(static "colorWithPatternImage:") = UIColor, UIImage;
overload selector(static "colorWithRed:green:blue:alpha:") = UIColor, Float, Float, Float, Float;
overload selector(static "colorWithWhite:alpha:") = UIColor, Float, Float;
overload selector(static "colors") = NSArray;
overload selector(static "columnNumber") = Int;
overload selector(static "comment") = NSString;
overload selector(static "commentURL") = NSURL;
overload selector(static "commitAnimations") = Void;
overload selector(static "commonISOCurrencyCodes") = NSArray;
overload selector(static "commonPrefixWithString:options:") = NSString, NSString, UInt;
overload selector(static "comparator") = NSComparator;
overload selector(static "compare:") = Int, NSNumber;
overload selector(static "compare:options:") = Int, NSString, UInt;
overload selector(static "compare:options:range:") = Int, NSString, UInt, NSRange;
overload selector(static "compare:options:range:locale:") = Int, NSString, UInt, NSRange, Id;
overload selector(static "compareObject:toObject:") = Int, Id, Id;
overload selector(static "comparePosition:toPosition:") = Int, UITextPosition, UITextPosition;
overload selector(static "comparisonPredicateModifier") = UInt;
overload selector(static "completePathIntoString:caseSensitive:matchesIntoArray:filterTypes:") = UInt, Pointer[NSString], Bool, Pointer[NSArray], NSArray;
overload selector(static "completionBlock") = UnknownType;
overload selector(static "components") = NSDictionary;
overload selector(static "components:fromDate:") = NSDateComponents, UInt, NSDate;
overload selector(static "components:fromDate:toDate:options:") = NSDateComponents, UInt, NSDate, NSDate, UInt;
overload selector(static "componentsFromLocaleIdentifier:") = NSDictionary, NSString;
overload selector(static "componentsJoinedByString:") = NSString, NSString;
overload selector(static "componentsSeparatedByCharactersInSet:") = NSArray, NSCharacterSet;
overload selector(static "componentsSeparatedByString:") = NSArray, NSString;
overload selector(static "componentsToDisplayForPath:") = NSArray, NSString;
overload selector(static "compoundPredicateType") = UInt;
overload selector(static "condition") = Int;
overload selector(static "conformsToProtocol:") = Bool, Id;
overload selector(static "connection:canAuthenticateAgainstProtectionSpace:") = Bool, NSURLConnection, NSURLProtectionSpace;
overload selector(static "connection:didCancelAuthenticationChallenge:") = Void, NSURLConnection, NSURLAuthenticationChallenge;
overload selector(static "connection:didFailWithError:") = Void, NSURLConnection, NSError;
overload selector(static "connection:didReceiveAuthenticationChallenge:") = Void, NSURLConnection, NSURLAuthenticationChallenge;
overload selector(static "connection:didReceiveData:") = Void, NSURLConnection, NSData;
overload selector(static "connection:didReceiveResponse:") = Void, NSURLConnection, NSURLResponse;
overload selector(static "connection:didSendBodyData:totalBytesWritten:totalBytesExpectedToWrite:") = Void, NSURLConnection, Int, Int, Int;
overload selector(static "connection:needNewBodyStream:") = NSInputStream, NSURLConnection, NSURLRequest;
overload selector(static "connection:willCacheResponse:") = NSCachedURLResponse, NSURLConnection, NSCachedURLResponse;
overload selector(static "connection:willSendRequest:redirectResponse:") = NSURLRequest, NSURLConnection, NSURLRequest, NSURLResponse;
overload selector(static "connectionDidFinishLoading:") = Void, NSURLConnection;
overload selector(static "connectionShouldUseCredentialStorage:") = Bool, NSURLConnection;
overload selector(static "connectionWithRequest:delegate:") = NSURLConnection, NSURLRequest, Id;
overload selector(static "constantValue") = Id;
overload selector(static "containsIndex:") = Bool, UInt;
overload selector(static "containsIndexes:") = Bool, NSIndexSet;
overload selector(static "containsIndexesInRange:") = Bool, NSRange;
overload selector(static "containsObject:") = Bool, Id;
overload selector(static "containsPasteboardTypes:") = Bool, NSArray;
overload selector(static "containsPasteboardTypes:inItemSet:") = Bool, NSArray, NSIndexSet;
overload selector(static "containsPoint:") = Bool, CGPoint;
overload selector(static "containsValueForKey:") = Bool, NSString;
overload selector(static "contentEdgeInsets") = UIEdgeInsets;
overload selector(static "contentHorizontalAlignment") = UIControlContentHorizontalAlignment;
overload selector(static "contentInset") = UIEdgeInsets;
overload selector(static "contentMode") = UIViewContentMode;
overload selector(static "contentOffset") = CGPoint;
overload selector(static "contentOffsetForSegmentAtIndex:") = CGSize, UInt;
overload selector(static "contentRectForBounds:") = CGRect, CGRect;
overload selector(static "contentScaleFactor") = Float;
overload selector(static "contentSize") = CGSize;
overload selector(static "contentSizeForViewInPopover") = CGSize;
overload selector(static "contentStretch") = CGRect;
overload selector(static "contentVerticalAlignment") = UIControlContentVerticalAlignment;
overload selector(static "contentView") = UIView;
overload selector(static "contentViewController") = UIViewController;
overload selector(static "contentsAtPath:") = NSData, NSString;
overload selector(static "contentsEqualAtPath:andPath:") = Bool, NSString, NSString;
overload selector(static "contentsOfDirectoryAtPath:error:") = NSArray, NSString, Pointer[NSError];
overload selector(static "contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:") = NSArray, NSURL, NSArray, UInt, Pointer[NSError];
overload selector(static "continueTrackingWithTouch:withEvent:") = Bool, UITouch, UIEvent;
overload selector(static "continueWithoutCredentialForAuthenticationChallenge:") = Void, NSURLAuthenticationChallenge;
overload selector(static "controlCharacterSet") = Id;
overload selector(static "convertPoint:fromView:") = CGPoint, CGPoint, UIView;
overload selector(static "convertPoint:fromWindow:") = CGPoint, CGPoint, UIWindow;
overload selector(static "convertPoint:toView:") = CGPoint, CGPoint, UIView;
overload selector(static "convertPoint:toWindow:") = CGPoint, CGPoint, UIWindow;
overload selector(static "convertRect:fromView:") = CGRect, CGRect, UIView;
overload selector(static "convertRect:fromWindow:") = CGRect, CGRect, UIWindow;
overload selector(static "convertRect:toView:") = CGRect, CGRect, UIView;
overload selector(static "convertRect:toWindow:") = CGRect, CGRect, UIWindow;
overload selector(static "cookieAcceptPolicy") = UInt;
overload selector(static "cookieWithProperties:") = Id, NSDictionary;
overload selector(static "cookies") = NSArray;
overload selector(static "cookiesForURL:") = NSArray, NSURL;
overload selector(static "cookiesWithResponseHeaderFields:forURL:") = NSArray, NSDictionary, NSURL;
overload selector(static "copy") = Id;
overload selector(static "copy:") = Void, Id;
overload selector(static "copyItemAtPath:toPath:error:") = Bool, NSString, NSString, Pointer[NSError];
overload selector(static "copyItemAtURL:toURL:error:") = Bool, NSURL, NSURL, Pointer[NSError];
overload selector(static "copyWithZone:") = Id, Pointer[NSZone];
overload selector(static "correctionCheckingResultWithRange:replacementString:") = NSTextCheckingResult, NSRange, NSString;
overload selector(static "count") = UInt;
overload selector(static "countByEnumeratingWithState:objects:count:") = UInt, Pointer[NSFastEnumerationState], Pointer[Id], UInt;
overload selector(static "countDownDuration") = Double;
overload selector(static "countForObject:") = UInt, Id;
overload selector(static "countLimit") = UInt;
overload selector(static "countOfIndexesInRange:") = UInt, NSRange;
overload selector(static "createDirectoryAtPath:attributes:") = Bool, NSString, NSDictionary;
overload selector(static "createDirectoryAtPath:withIntermediateDirectories:attributes:error:") = Bool, NSString, Bool, NSDictionary, Pointer[NSError];
overload selector(static "createFileAtPath:contents:attributes:") = Bool, NSString, NSData, NSDictionary;
overload selector(static "createSymbolicLinkAtPath:pathContent:") = Bool, NSString, NSString;
overload selector(static "createSymbolicLinkAtPath:withDestinationPath:error:") = Bool, NSString, NSString, Pointer[NSError];
overload selector(static "credentialForTrust:") = NSURLCredential, SecTrustRef;
overload selector(static "credentialWithIdentity:certificates:persistence:") = NSURLCredential, SecIdentityRef, NSArray, UInt;
overload selector(static "credentialWithUser:password:persistence:") = NSURLCredential, NSString, NSString, UInt;
overload selector(static "credentialsForProtectionSpace:") = NSDictionary, NSURLProtectionSpace;
overload selector(static "currencyCode") = NSString;
overload selector(static "currencyDecimalSeparator") = NSString;
overload selector(static "currencyGroupingSeparator") = NSString;
overload selector(static "currencySymbol") = NSString;
overload selector(static "currentBackgroundImage") = UIImage;
overload selector(static "currentCalendar") = Id;
overload selector(static "currentCollation") = Id;
overload selector(static "currentDevice") = UIDevice;
overload selector(static "currentDirectoryPath") = NSString;
overload selector(static "currentDiskUsage") = UInt;
overload selector(static "currentHandler") = NSAssertionHandler;
overload selector(static "currentImage") = UIImage;
overload selector(static "currentLocale") = Id;
overload selector(static "currentMaximumTrackImage") = UIImage;
overload selector(static "currentMemoryUsage") = UInt;
overload selector(static "currentMinimumTrackImage") = UIImage;
overload selector(static "currentMode") = Id;
overload selector(static "currentPage") = Int;
overload selector(static "currentPoint") = CGPoint;
overload selector(static "currentQueue") = Id;
overload selector(static "currentRunLoop") = NSRunLoop;
overload selector(static "currentThread") = NSThread;
overload selector(static "currentThumbImage") = UIImage;
overload selector(static "currentTitle") = NSString;
overload selector(static "currentTitleColor") = UIColor;
overload selector(static "currentTitleShadowColor") = UIColor;
overload selector(static "customSelector") = SelectorHandle;
overload selector(static "customView") = UIView;
overload selector(static "customizableViewControllers") = NSArray;
overload selector(static "cut:") = Void, Id;
overload selector(static "cyanColor") = UIColor;
overload selector(static "darkGrayColor") = UIColor;
overload selector(static "darkTextColor") = UIColor;
overload selector(static "dashCheckingResultWithRange:replacementString:") = NSTextCheckingResult, NSRange, NSString;
overload selector(static "data") = Id;
overload selector(static "dataDetectorTypes") = UInt;
overload selector(static "dataDetectorWithTypes:error:") = NSDataDetector, UInt64, Pointer[NSError];
overload selector(static "dataForKey:") = NSData, NSString;
overload selector(static "dataForPasteboardType:") = NSData, NSString;
overload selector(static "dataForPasteboardType:inItemSet:") = NSArray, NSString, NSIndexSet;
overload selector(static "dataFromPropertyList:format:errorDescription:") = NSData, Id, UInt, Pointer[NSString];
overload selector(static "dataFromTXTRecordDictionary:") = NSData, NSDictionary;
overload selector(static "dataSource") = Id;
overload selector(static "dataUsingEncoding:") = NSData, UInt;
overload selector(static "dataUsingEncoding:allowLossyConversion:") = NSData, UInt, Bool;
overload selector(static "dataWithBytes:length:") = Id, RawPointer, UInt;
overload selector(static "dataWithBytesNoCopy:length:") = Id, RawPointer, UInt;
overload selector(static "dataWithBytesNoCopy:length:freeWhenDone:") = Id, RawPointer, UInt, Bool;
overload selector(static "dataWithCapacity:") = Id, UInt;
overload selector(static "dataWithContentsOfFile:") = Id, NSString;
overload selector(static "dataWithContentsOfFile:options:error:") = Id, NSString, UInt, Pointer[NSError];
overload selector(static "dataWithContentsOfMappedFile:") = Id, NSString;
overload selector(static "dataWithContentsOfURL:") = Id, NSURL;
overload selector(static "dataWithContentsOfURL:options:error:") = Id, NSURL, UInt, Pointer[NSError];
overload selector(static "dataWithData:") = Id, NSData;
overload selector(static "dataWithLength:") = Id, UInt;
overload selector(static "dataWithPropertyList:format:options:error:") = NSData, Id, UInt, UInt, Pointer[NSError];
overload selector(static "date") = Id;
overload selector(static "dateByAddingComponents:toDate:options:") = NSDate, NSDateComponents, NSDate, UInt;
overload selector(static "dateByAddingTimeInterval:") = Id, Double;
overload selector(static "dateCheckingResultWithRange:date:") = NSTextCheckingResult, NSRange, NSDate;
overload selector(static "dateCheckingResultWithRange:date:timeZone:duration:") = NSTextCheckingResult, NSRange, NSDate, NSTimeZone, Double;
overload selector(static "dateFormat") = NSString;
overload selector(static "dateFormatFromTemplate:options:locale:") = NSString, NSString, UInt, NSLocale;
overload selector(static "dateFromComponents:") = NSDate, NSDateComponents;
overload selector(static "dateFromString:") = NSDate, NSString;
overload selector(static "datePickerMode") = UIDatePickerMode;
overload selector(static "dateStyle") = UInt;
overload selector(static "dateWithTimeInterval:sinceDate:") = Id, Double, NSDate;
overload selector(static "dateWithTimeIntervalSince1970:") = Id, Double;
overload selector(static "dateWithTimeIntervalSinceNow:") = Id, Double;
overload selector(static "dateWithTimeIntervalSinceReferenceDate:") = Id, Double;
overload selector(static "day") = Int;
overload selector(static "daylightSavingTimeOffset") = Double;
overload selector(static "daylightSavingTimeOffsetForDate:") = Double, NSDate;
overload selector(static "dealloc") = Void;
overload selector(static "decelerationRate") = Float;
overload selector(static "decimalDigitCharacterSet") = Id;
overload selector(static "decimalNumberByAdding:") = NSDecimalNumber, NSDecimalNumber;
overload selector(static "decimalNumberByAdding:withBehavior:") = NSDecimalNumber, NSDecimalNumber, Id;
overload selector(static "decimalNumberByDividingBy:") = NSDecimalNumber, NSDecimalNumber;
overload selector(static "decimalNumberByDividingBy:withBehavior:") = NSDecimalNumber, NSDecimalNumber, Id;
overload selector(static "decimalNumberByMultiplyingBy:") = NSDecimalNumber, NSDecimalNumber;
overload selector(static "decimalNumberByMultiplyingBy:withBehavior:") = NSDecimalNumber, NSDecimalNumber, Id;
overload selector(static "decimalNumberByMultiplyingByPowerOf10:") = NSDecimalNumber, Short;
overload selector(static "decimalNumberByMultiplyingByPowerOf10:withBehavior:") = NSDecimalNumber, Short, Id;
overload selector(static "decimalNumberByRaisingToPower:") = NSDecimalNumber, UInt;
overload selector(static "decimalNumberByRaisingToPower:withBehavior:") = NSDecimalNumber, UInt, Id;
overload selector(static "decimalNumberByRoundingAccordingToBehavior:") = NSDecimalNumber, Id;
overload selector(static "decimalNumberBySubtracting:") = NSDecimalNumber, NSDecimalNumber;
overload selector(static "decimalNumberBySubtracting:withBehavior:") = NSDecimalNumber, NSDecimalNumber, Id;
overload selector(static "decimalNumberHandlerWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:") = Id, UInt, Short, Bool, Bool, Bool, Bool;
overload selector(static "decimalNumberWithDecimal:") = NSDecimalNumber, NSDecimal;
overload selector(static "decimalNumberWithMantissa:exponent:isNegative:") = NSDecimalNumber, UInt64, Short, Bool;
overload selector(static "decimalNumberWithString:") = NSDecimalNumber, NSString;
overload selector(static "decimalNumberWithString:locale:") = NSDecimalNumber, NSString, Id;
overload selector(static "decimalSeparator") = NSString;
overload selector(static "decimalValue") = NSDecimal;
overload selector(static "decodeArrayOfObjCType:count:at:") = Void, Pointer[CChar], UInt, RawPointer;
overload selector(static "decodeBoolForKey:") = Bool, NSString;
overload selector(static "decodeBytesForKey:returnedLength:") = Pointer[CUChar], NSString, Pointer[UInt];
overload selector(static "decodeBytesWithReturnedLength:") = RawPointer, Pointer[UInt];
overload selector(static "decodeCGAffineTransformForKey:") = CGAffineTransform, NSString;
overload selector(static "decodeCGPointForKey:") = CGPoint, NSString;
overload selector(static "decodeCGRectForKey:") = CGRect, NSString;
overload selector(static "decodeCGSizeForKey:") = CGSize, NSString;
overload selector(static "decodeDataObject") = NSData;
overload selector(static "decodeDoubleForKey:") = Double, NSString;
overload selector(static "decodeFloatForKey:") = Float, NSString;
overload selector(static "decodeInt32ForKey:") = Int, NSString;
overload selector(static "decodeInt64ForKey:") = Int64, NSString;
overload selector(static "decodeIntForKey:") = Int, NSString;
overload selector(static "decodeIntegerForKey:") = Int, NSString;
overload selector(static "decodeObject") = Id;
overload selector(static "decodeObjectForKey:") = Id, NSString;
overload selector(static "decodeUIEdgeInsetsForKey:") = UIEdgeInsets, NSString;
overload selector(static "decodeValueOfObjCType:at:") = Void, Pointer[CChar], RawPointer;
overload varargSelector(static "decodeValuesOfObjCTypes:") = Void, Pointer[CChar];
overload selector(static "decomposableCharacterSet") = Id;
overload selector(static "decomposedStringWithCanonicalMapping") = NSString;
overload selector(static "decomposedStringWithCompatibilityMapping") = NSString;
overload selector(static "defaultBehavior") = Id;
overload selector(static "defaultCStringEncoding") = UInt;
overload selector(static "defaultCenter") = Id;
overload selector(static "defaultCredentialForProtectionSpace:") = NSURLCredential, NSURLProtectionSpace;
overload selector(static "defaultDate") = NSDate;
overload selector(static "defaultDecimalNumberHandler") = Id;
overload selector(static "defaultFormatterBehavior") = UInt;
overload selector(static "defaultManager") = NSFileManager;
overload selector(static "defaultQueue") = Id;
overload selector(static "defaultTimeZone") = NSTimeZone;
overload selector(static "defersCurrentPageDisplay") = Bool;
overload selector(static "delaysContentTouches") = Bool;
overload selector(static "delaysTouchesBegan") = Bool;
overload selector(static "delaysTouchesEnded") = Bool;
overload selector(static "delegate") = Id;
overload selector(static "delete:") = Void, Id;
overload selector(static "deleteBackward") = Void;
overload selector(static "deleteCharactersInRange:") = Void, NSRange;
overload selector(static "deleteCookie:") = Void, NSHTTPCookie;
overload selector(static "deleteRowsAtIndexPaths:withRowAnimation:") = Void, NSArray, UITableViewRowAnimation;
overload selector(static "deleteSections:withRowAnimation:") = Void, NSIndexSet, UITableViewRowAnimation;
overload selector(static "dependencies") = NSArray;
overload selector(static "dequeueNotificationsMatching:coalesceMask:") = Void, NSNotification, UInt;
overload selector(static "dequeueReusableCellWithIdentifier:") = UITableViewCell, NSString;
overload selector(static "descender") = Float;
overload selector(static "description") = NSString;
overload selector(static "descriptionInStringsFileFormat") = NSString;
overload selector(static "descriptionWithLocale:") = NSString, Id;
overload selector(static "descriptionWithLocale:indent:") = NSString, Id, UInt;
overload selector(static "deselectRowAtIndexPath:animated:") = Void, NSIndexPath, Bool;
overload selector(static "destinationOfSymbolicLinkAtPath:error:") = NSString, NSString, Pointer[NSError];
overload selector(static "destructiveButtonIndex") = Int;
overload selector(static "detachNewThreadSelector:toTarget:withObject:") = Void, SelectorHandle, Id, Id;
overload selector(static "detailTextLabel") = UILabel;
overload selector(static "detectsPhoneNumbers") = Bool;
overload selector(static "developmentLocalization") = NSString;
overload selector(static "dictionary") = Id;
overload selector(static "dictionaryForKey:") = NSDictionary, NSString;
overload selector(static "dictionaryFromTXTRecordData:") = NSDictionary, NSData;
overload selector(static "dictionaryRepresentation") = NSDictionary;
overload selector(static "dictionaryWithCapacity:") = Id, UInt;
overload selector(static "dictionaryWithContentsOfFile:") = Id, NSString;
overload selector(static "dictionaryWithContentsOfURL:") = Id, NSURL;
overload selector(static "dictionaryWithDictionary:") = Id, NSDictionary;
overload selector(static "dictionaryWithObject:forKey:") = Id, Id, Id;
overload selector(static "dictionaryWithObjects:forKeys:") = Id, NSArray, NSArray;
overload selector(static "dictionaryWithObjects:forKeys:count:") = Id, Pointer[Id], Pointer[Id], UInt;
overload varargSelector(static "dictionaryWithObjectsAndKeys:") = Id, Id;
overload selector(static "dictionaryWithValuesForKeys:") = NSDictionary, NSArray;
overload selector(static "didAddSubview:") = Void, UIView;
overload selector(static "didAnimateFirstHalfOfRotationToInterfaceOrientation:") = Void, UIInterfaceOrientation;
overload selector(static "didChange:valuesAtIndexes:forKey:") = Void, UInt, NSIndexSet, NSString;
overload selector(static "didChangeValueForKey:") = Void, NSString;
overload selector(static "didChangeValueForKey:withSetMutation:usingObjects:") = Void, NSString, UInt, NSSet;
overload selector(static "didMoveToSuperview") = Void;
overload selector(static "didMoveToWindow") = Void;
overload selector(static "didPresentActionSheet:") = Void, UIActionSheet;
overload selector(static "didPresentAlertView:") = Void, UIAlertView;
overload selector(static "didReceiveMemoryWarning") = Void;
overload selector(static "didRotateFromInterfaceOrientation:") = Void, UIInterfaceOrientation;
overload selector(static "didTransitionToState:") = Void, UInt;
overload selector(static "direction") = UISwipeGestureRecognizerDirection;
overload selector(static "directoryAttributes") = NSDictionary;
overload selector(static "directoryContentsAtPath:") = NSArray, NSString;
overload selector(static "disableUndoRegistration") = Void;
overload selector(static "disabledBackground") = UIImage;
overload selector(static "discardContentIfPossible") = Void;
overload selector(static "diskCapacity") = UInt;
overload selector(static "dismissMenuAnimated:") = Void, Bool;
overload selector(static "dismissModalViewControllerAnimated:") = Void, Bool;
overload selector(static "dismissPopoverAnimated:") = Void, Bool;
overload selector(static "dismissPreviewAnimated:") = Void, Bool;
overload selector(static "dismissWithClickedButtonIndex:animated:") = Void, Int, Bool;
overload selector(static "displayLinkWithTarget:selector:") = CADisplayLink, Id, SelectorHandle;
overload selector(static "displayNameAtPath:") = NSString, NSString;
overload selector(static "displayNameForKey:value:") = NSString, Id, Id;
overload selector(static "distantFuture") = Id;
overload selector(static "distantPast") = Id;
overload selector(static "distinguishedNames") = NSArray;
overload selector(static "documentInteractionController:canPerformAction:") = Bool, UIDocumentInteractionController, SelectorHandle;
overload selector(static "documentInteractionController:didEndSendingToApplication:") = Void, UIDocumentInteractionController, NSString;
overload selector(static "documentInteractionController:performAction:") = Bool, UIDocumentInteractionController, SelectorHandle;
overload selector(static "documentInteractionController:willBeginSendingToApplication:") = Void, UIDocumentInteractionController, NSString;
overload selector(static "documentInteractionControllerDidDismissOpenInMenu:") = Void, UIDocumentInteractionController;
overload selector(static "documentInteractionControllerDidDismissOptionsMenu:") = Void, UIDocumentInteractionController;
overload selector(static "documentInteractionControllerDidEndPreview:") = Void, UIDocumentInteractionController;
overload selector(static "documentInteractionControllerRectForPreview:") = CGRect, UIDocumentInteractionController;
overload selector(static "documentInteractionControllerViewControllerForPreview:") = UIViewController, UIDocumentInteractionController;
overload selector(static "documentInteractionControllerViewForPreview:") = UIView, UIDocumentInteractionController;
overload selector(static "documentInteractionControllerWillBeginPreview:") = Void, UIDocumentInteractionController;
overload selector(static "documentInteractionControllerWillPresentOpenInMenu:") = Void, UIDocumentInteractionController;
overload selector(static "documentInteractionControllerWillPresentOptionsMenu:") = Void, UIDocumentInteractionController;
overload selector(static "doesNotRecognizeSelector:") = Void, SelectorHandle;
overload selector(static "doesRelativeDateFormatting") = Bool;
overload selector(static "domain") = NSString;
overload selector(static "dominantLanguage") = NSString;
overload selector(static "dominantLanguageForScript:") = NSString, NSString;
overload selector(static "dominantScript") = NSString;
overload selector(static "doubleForKey:") = Double, NSString;
overload selector(static "doubleValue") = Double;
overload selector(static "drain") = Void;
overload selector(static "drawAsPatternInRect:") = Void, CGRect;
overload selector(static "drawAtPoint:") = Void, CGPoint;
overload selector(static "drawAtPoint:blendMode:alpha:") = Void, CGPoint, CGBlendMode, Float;
overload selector(static "drawAtPoint:forWidth:withFont:fontSize:lineBreakMode:baselineAdjustment:") = CGSize, CGPoint, Float, UIFont, Float, UILineBreakMode, UIBaselineAdjustment;
overload selector(static "drawAtPoint:forWidth:withFont:lineBreakMode:") = CGSize, CGPoint, Float, UIFont, UILineBreakMode;
overload selector(static "drawAtPoint:forWidth:withFont:minFontSize:actualFontSize:lineBreakMode:baselineAdjustment:") = CGSize, CGPoint, Float, UIFont, Float, Pointer[Float], UILineBreakMode, UIBaselineAdjustment;
overload selector(static "drawAtPoint:withFont:") = CGSize, CGPoint, UIFont;
overload selector(static "drawInRect:") = Void, CGRect;
overload selector(static "drawInRect:blendMode:alpha:") = Void, CGRect, CGBlendMode, Float;
overload selector(static "drawInRect:withFont:") = CGSize, CGRect, UIFont;
overload selector(static "drawInRect:withFont:lineBreakMode:") = CGSize, CGRect, UIFont, UILineBreakMode;
overload selector(static "drawInRect:withFont:lineBreakMode:alignment:") = CGSize, CGRect, UIFont, UILineBreakMode, UITextAlignment;
overload selector(static "drawPlaceholderInRect:") = Void, CGRect;
overload selector(static "drawRect:") = Void, CGRect;
overload selector(static "drawTextInRect:") = Void, CGRect;
overload selector(static "duration") = Double;
overload selector(static "earlierDate:") = NSDate, NSDate;
overload selector(static "editAction") = SelectorHandle;
overload selector(static "editButtonItem") = UIBarButtonItem;
overload selector(static "editingAccessoryType") = UITableViewCellAccessoryType;
overload selector(static "editingAccessoryView") = UIView;
overload selector(static "editingRectForBounds:") = CGRect, CGRect;
overload selector(static "editingStringForObjectValue:") = NSString, Id;
overload selector(static "editingStyle") = UITableViewCellEditingStyle;
overload selector(static "enableUndoRegistration") = Void;
overload selector(static "enabledRemoteNotificationTypes") = UIRemoteNotificationType;
overload selector(static "enablesReturnKeyAutomatically") = Bool;
overload selector(static "encodeArrayOfObjCType:count:at:") = Void, Pointer[CChar], UInt, RawPointer;
overload selector(static "encodeBool:forKey:") = Void, Bool, NSString;
overload selector(static "encodeBycopyObject:") = Void, Id;
overload selector(static "encodeByrefObject:") = Void, Id;
overload selector(static "encodeBytes:length:") = Void, RawPointer, UInt;
overload selector(static "encodeBytes:length:forKey:") = Void, Pointer[CUChar], UInt, NSString;
overload selector(static "encodeCGAffineTransform:forKey:") = Void, CGAffineTransform, NSString;
overload selector(static "encodeCGPoint:forKey:") = Void, CGPoint, NSString;
overload selector(static "encodeCGRect:forKey:") = Void, CGRect, NSString;
overload selector(static "encodeCGSize:forKey:") = Void, CGSize, NSString;
overload selector(static "encodeConditionalObject:") = Void, Id;
overload selector(static "encodeConditionalObject:forKey:") = Void, Id, NSString;
overload selector(static "encodeDataObject:") = Void, NSData;
overload selector(static "encodeDouble:forKey:") = Void, Double, NSString;
overload selector(static "encodeFloat:forKey:") = Void, Float, NSString;
overload selector(static "encodeInt32:forKey:") = Void, Int, NSString;
overload selector(static "encodeInt64:forKey:") = Void, Int64, NSString;
overload selector(static "encodeInt:forKey:") = Void, Int, NSString;
overload selector(static "encodeInteger:forKey:") = Void, Int, NSString;
overload selector(static "encodeObject:") = Void, Id;
overload selector(static "encodeObject:forKey:") = Void, Id, NSString;
overload selector(static "encodeRootObject:") = Void, Id;
overload selector(static "encodeUIEdgeInsets:forKey:") = Void, UIEdgeInsets, NSString;
overload selector(static "encodeValueOfObjCType:at:") = Void, Pointer[CChar], RawPointer;
overload varargSelector(static "encodeValuesOfObjCTypes:") = Void, Pointer[CChar];
overload selector(static "encodeWithCoder:") = Void, NSCoder;
overload selector(static "end") = UITextPosition;
overload selector(static "endBackgroundTask:") = Void, UInt;
overload selector(static "endContentAccess") = Void;
overload selector(static "endCustomizingAnimated:") = Bool, Bool;
overload selector(static "endEditing") = Void;
overload selector(static "endEditing:") = Bool, Bool;
overload selector(static "endGeneratingDeviceOrientationNotifications") = Void;
overload selector(static "endIgnoringInteractionEvents") = Void;
overload selector(static "endOfDocument") = UITextPosition;
overload selector(static "endReceivingRemoteControlEvents") = Void;
overload selector(static "endTrackingWithTouch:withEvent:") = Void, UITouch, UIEvent;
overload selector(static "endUndoGrouping") = Void;
overload selector(static "endUpdates") = Void;
overload selector(static "enqueueNotification:postingStyle:") = Void, NSNotification, UInt;
overload selector(static "enqueueNotification:postingStyle:coalesceMask:forModes:") = Void, NSNotification, UInt, UInt, NSArray;
overload selector(static "enumerateAttribute:inRange:options:usingBlock:") = Void, NSString, NSRange, UInt, UnknownType;
overload selector(static "enumerateAttributesInRange:options:usingBlock:") = Void, NSRange, UInt, UnknownType;
overload selector(static "enumerateIndexesInRange:options:usingBlock:") = Void, NSRange, UInt, UnknownType;
overload selector(static "enumerateIndexesUsingBlock:") = Void, UnknownType;
overload selector(static "enumerateIndexesWithOptions:usingBlock:") = Void, UInt, UnknownType;
overload selector(static "enumerateKeysAndObjectsUsingBlock:") = Void, UnknownType;
overload selector(static "enumerateKeysAndObjectsWithOptions:usingBlock:") = Void, UInt, UnknownType;
overload selector(static "enumerateLinesUsingBlock:") = Void, UnknownType;
overload selector(static "enumerateMatchesInString:options:range:usingBlock:") = Void, NSString, UInt, NSRange, UnknownType;
overload selector(static "enumerateObjectsAtIndexes:options:usingBlock:") = Void, NSIndexSet, UInt, UnknownType;
overload selector(static "enumerateObjectsUsingBlock:") = Void, UnknownType;
overload selector(static "enumerateObjectsWithOptions:usingBlock:") = Void, UInt, UnknownType;
overload selector(static "enumerateSubstringsInRange:options:usingBlock:") = Void, NSRange, UInt, UnknownType;
overload selector(static "enumeratorAtPath:") = NSDirectoryEnumerator, NSString;
overload selector(static "enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:") = NSDirectoryEnumerator, NSURL, NSArray, UInt, UnknownType;
overload selector(static "environment") = NSDictionary;
overload selector(static "era") = Int;
overload selector(static "eraSymbols") = NSArray;
overload selector(static "error") = NSError;
overload selector(static "errorWithDomain:code:userInfo:") = Id, NSString, Int, NSDictionary;
overload selector(static "escapedPatternForString:") = NSString, NSString;
overload selector(static "escapedTemplateForString:") = NSString, NSString;
overload selector(static "evaluateWithObject:") = Bool, Id;
overload selector(static "evaluateWithObject:substitutionVariables:") = Bool, Id, NSDictionary;
overload selector(static "evictsObjectsWithDiscardedContent") = Bool;
overload selector(static "exceptionDuringOperation:error:leftOperand:rightOperand:") = NSDecimalNumber, SelectorHandle, UInt, NSDecimalNumber, NSDecimalNumber;
overload selector(static "exceptionWithName:reason:userInfo:") = NSException, NSString, NSString, NSDictionary;
overload selector(static "exchangeObjectAtIndex:withObjectAtIndex:") = Void, UInt, UInt;
overload selector(static "exchangeSubviewAtIndex:withSubviewAtIndex:") = Void, Int, Int;
overload selector(static "executableArchitectures") = NSArray;
overload selector(static "executablePath") = NSString;
overload selector(static "executableURL") = NSURL;
overload selector(static "executionBlocks") = NSArray;
overload selector(static "exit") = Void;
overload selector(static "expectedContentLength") = Int64;
overload selector(static "expiresDate") = NSDate;
overload selector(static "exponentSymbol") = NSString;
overload selector(static "expressionBlock") = UnknownType;
overload selector(static "expressionForAggregate:") = NSExpression, NSArray;
overload selector(static "expressionForBlock:arguments:") = NSExpression, UnknownType, NSArray;
overload selector(static "expressionForConstantValue:") = NSExpression, Id;
overload selector(static "expressionForEvaluatedObject") = NSExpression;
overload selector(static "expressionForFunction:arguments:") = NSExpression, NSString, NSArray;
overload selector(static "expressionForFunction:selectorName:arguments:") = NSExpression, NSExpression, NSString, NSArray;
overload selector(static "expressionForIntersectSet:with:") = NSExpression, NSExpression, NSExpression;
overload selector(static "expressionForKeyPath:") = NSExpression, NSString;
overload selector(static "expressionForMinusSet:with:") = NSExpression, NSExpression, NSExpression;
overload selector(static "expressionForSubquery:usingIteratorVariable:predicate:") = NSExpression, NSExpression, NSString, Id;
overload selector(static "expressionForUnionSet:with:") = NSExpression, NSExpression, NSExpression;
overload selector(static "expressionForVariable:") = NSExpression, NSString;
overload selector(static "expressionType") = UInt;
overload selector(static "expressionValueWithObject:context:") = Id, Id, NSMutableDictionary;
overload selector(static "failureResponse") = NSURLResponse;
overload selector(static "familyName") = NSString;
overload selector(static "familyNames") = NSArray;
overload selector(static "fastestEncoding") = UInt;
overload selector(static "fileAttributes") = NSDictionary;
overload selector(static "fileAttributesAtPath:traverseLink:") = NSDictionary, NSString, Bool;
overload selector(static "fileCreationDate") = NSDate;
overload selector(static "fileDescriptor") = Int;
overload selector(static "fileExistsAtPath:") = Bool, NSString;
overload selector(static "fileExistsAtPath:isDirectory:") = Bool, NSString, Pointer[Bool];
overload selector(static "fileExtensionHidden") = Bool;
overload selector(static "fileGroupOwnerAccountID") = NSNumber;
overload selector(static "fileGroupOwnerAccountName") = NSString;
overload selector(static "fileHFSCreatorCode") = CULong;
overload selector(static "fileHFSTypeCode") = CULong;
overload selector(static "fileHandleForReading") = NSFileHandle;
overload selector(static "fileHandleForReadingAtPath:") = Id, NSString;
overload selector(static "fileHandleForReadingFromURL:error:") = Id, NSURL, Pointer[NSError];
overload selector(static "fileHandleForUpdatingAtPath:") = Id, NSString;
overload selector(static "fileHandleForUpdatingURL:error:") = Id, NSURL, Pointer[NSError];
overload selector(static "fileHandleForWriting") = NSFileHandle;
overload selector(static "fileHandleForWritingAtPath:") = Id, NSString;
overload selector(static "fileHandleForWritingToURL:error:") = Id, NSURL, Pointer[NSError];
overload selector(static "fileHandleWithNullDevice") = Id;
overload selector(static "fileHandleWithStandardError") = Id;
overload selector(static "fileHandleWithStandardInput") = Id;
overload selector(static "fileHandleWithStandardOutput") = Id;
overload selector(static "fileIsAppendOnly") = Bool;
overload selector(static "fileIsImmutable") = Bool;
overload selector(static "fileManager:shouldCopyItemAtPath:toPath:") = Bool, NSFileManager, NSString, NSString;
overload selector(static "fileManager:shouldCopyItemAtURL:toURL:") = Bool, NSFileManager, NSURL, NSURL;
overload selector(static "fileManager:shouldLinkItemAtPath:toPath:") = Bool, NSFileManager, NSString, NSString;
overload selector(static "fileManager:shouldLinkItemAtURL:toURL:") = Bool, NSFileManager, NSURL, NSURL;
overload selector(static "fileManager:shouldMoveItemAtPath:toPath:") = Bool, NSFileManager, NSString, NSString;
overload selector(static "fileManager:shouldMoveItemAtURL:toURL:") = Bool, NSFileManager, NSURL, NSURL;
overload selector(static "fileManager:shouldProceedAfterError:") = Bool, NSFileManager, NSDictionary;
overload selector(static "fileManager:shouldProceedAfterError:copyingItemAtPath:toPath:") = Bool, NSFileManager, NSError, NSString, NSString;
overload selector(static "fileManager:shouldProceedAfterError:copyingItemAtURL:toURL:") = Bool, NSFileManager, NSError, NSURL, NSURL;
overload selector(static "fileManager:shouldProceedAfterError:linkingItemAtPath:toPath:") = Bool, NSFileManager, NSError, NSString, NSString;
overload selector(static "fileManager:shouldProceedAfterError:linkingItemAtURL:toURL:") = Bool, NSFileManager, NSError, NSURL, NSURL;
overload selector(static "fileManager:shouldProceedAfterError:movingItemAtPath:toPath:") = Bool, NSFileManager, NSError, NSString, NSString;
overload selector(static "fileManager:shouldProceedAfterError:movingItemAtURL:toURL:") = Bool, NSFileManager, NSError, NSURL, NSURL;
overload selector(static "fileManager:shouldProceedAfterError:removingItemAtPath:") = Bool, NSFileManager, NSError, NSString;
overload selector(static "fileManager:shouldProceedAfterError:removingItemAtURL:") = Bool, NSFileManager, NSError, NSURL;
overload selector(static "fileManager:shouldRemoveItemAtPath:") = Bool, NSFileManager, NSString;
overload selector(static "fileManager:shouldRemoveItemAtURL:") = Bool, NSFileManager, NSURL;
overload selector(static "fileManager:willProcessPath:") = Void, NSFileManager, NSString;
overload selector(static "fileModificationDate") = NSDate;
overload selector(static "fileOwnerAccountID") = NSNumber;
overload selector(static "fileOwnerAccountName") = NSString;
overload selector(static "filePathURL") = NSURL;
overload selector(static "filePosixPermissions") = UInt;
overload selector(static "fileReferenceURL") = NSURL;
overload selector(static "fileSize") = UInt64;
overload selector(static "fileSystemAttributesAtPath:") = NSDictionary, NSString;
overload selector(static "fileSystemFileNumber") = UInt;
overload selector(static "fileSystemNumber") = Int;
overload selector(static "fileSystemRepresentation") = Pointer[CChar];
overload selector(static "fileSystemRepresentationWithPath:") = Pointer[CChar], NSString;
overload selector(static "fileType") = NSString;
overload selector(static "fileURLWithPath:") = Id, NSString;
overload selector(static "fileURLWithPath:isDirectory:") = Id, NSString, Bool;
overload selector(static "fileURLWithPathComponents:") = NSURL, NSArray;
overload selector(static "fileWrappers") = NSDictionary;
overload selector(static "filename") = NSString;
overload selector(static "fill") = Void;
overload selector(static "fillWithBlendMode:alpha:") = Void, CGBlendMode, Float;
overload selector(static "filterUsingPredicate:") = Void, NSPredicate;
overload selector(static "filteredArrayUsingPredicate:") = NSArray, NSPredicate;
overload selector(static "filteredSetUsingPredicate:") = NSSet, NSPredicate;
overload selector(static "finalize") = Void;
overload selector(static "finishDecoding") = Void;
overload selector(static "finishEncoding") = Void;
overload selector(static "fire") = Void;
overload selector(static "fireDate") = NSDate;
overload selector(static "firstIndex") = UInt;
overload selector(static "firstMatchInString:options:range:") = NSTextCheckingResult, NSString, UInt, NSRange;
overload selector(static "firstObjectCommonWithArray:") = Id, NSArray;
overload selector(static "firstOtherButtonIndex") = Int;
overload selector(static "firstRectForRange:") = CGRect, UITextRange;
overload selector(static "firstWeekday") = UInt;
overload selector(static "flashScrollIndicators") = Void;
overload selector(static "flatness") = Float;
overload selector(static "floatForKey:") = Float, NSString;
overload selector(static "floatValue") = Float;
overload selector(static "font") = UIFont;
overload selector(static "fontName") = NSString;
overload selector(static "fontNamesForFamilyName:") = NSArray, NSString;
overload selector(static "fontWithName:size:") = UIFont, NSString, Float;
overload selector(static "fontWithSize:") = UIFont, Float;
overload selector(static "formIntersectionWithCharacterSet:") = Void, NSCharacterSet;
overload selector(static "formUnionWithCharacterSet:") = Void, NSCharacterSet;
overload selector(static "formatWidth") = UInt;
overload selector(static "formatterBehavior") = UInt;
overload selector(static "forwardInvocation:") = Void, NSInvocation;
overload selector(static "forwardingTargetForSelector:") = Id, SelectorHandle;
overload selector(static "fragment") = NSString;
overload selector(static "frame") = CGRect;
overload selector(static "frameLength") = UInt;
overload selector(static "function") = NSString;
overload selector(static "generalPasteboard") = UIPasteboard;
overload selector(static "generatesCalendarDates") = Bool;
overload selector(static "generatesDecimalNumbers") = Bool;
overload selector(static "gestureRecognizer:shouldReceiveTouch:") = Bool, UIGestureRecognizer, UITouch;
overload selector(static "gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:") = Bool, UIGestureRecognizer, UIGestureRecognizer;
overload selector(static "gestureRecognizerShouldBegin:") = Bool, UIGestureRecognizer;
overload selector(static "gestureRecognizers") = NSArray;
overload selector(static "getArgument:atIndex:") = Void, RawPointer, Int;
overload selector(static "getArgumentTypeAtIndex:") = Pointer[CChar], UInt;
overload selector(static "getBuffer:length:") = Bool, Pointer[Pointer[CUChar]], Pointer[UInt];
overload selector(static "getBytes:") = Void, RawPointer;
overload selector(static "getBytes:length:") = Void, RawPointer, UInt;
overload selector(static "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:") = Bool, RawPointer, UInt, Pointer[UInt], UInt, UInt, NSRange, NSRangePointer;
overload selector(static "getBytes:range:") = Void, RawPointer, NSRange;
overload selector(static "getCFRunLoop") = CFRunLoopRef;
overload selector(static "getCString:") = Void, Pointer[CChar];
overload selector(static "getCString:maxLength:") = Void, Pointer[CChar], UInt;
overload selector(static "getCString:maxLength:encoding:") = Bool, Pointer[CChar], UInt, UInt;
overload selector(static "getCString:maxLength:range:remainingRange:") = Void, Pointer[CChar], UInt, NSRange, NSRangePointer;
overload selector(static "getCharacters:") = Void, Pointer[UShort];
overload selector(static "getCharacters:range:") = Void, Pointer[UShort], NSRange;
overload selector(static "getFileSystemRepresentation:maxLength:") = Bool, Pointer[CChar], UInt;
overload selector(static "getIndexes:") = Void, Pointer[UInt];
overload selector(static "getIndexes:maxCount:inIndexRange:") = UInt, Pointer[UInt], UInt, NSRangePointer;
overload selector(static "getInputStream:outputStream:") = Bool, Pointer[NSInputStream], Pointer[NSOutputStream];
overload selector(static "getLineDash:count:phase:") = Void, Pointer[Float], Pointer[Int], Pointer[Float];
overload selector(static "getLineStart:end:contentsEnd:forRange:") = Void, Pointer[UInt], Pointer[UInt], Pointer[UInt], NSRange;
overload selector(static "getObjectValue:forString:errorDescription:") = Bool, Pointer[Id], NSString, Pointer[NSString];
overload selector(static "getObjectValue:forString:range:error:") = Bool, Pointer[Id], NSString, Pointer[NSRange], Pointer[NSError];
overload selector(static "getObjects:") = Void, Pointer[Id];
overload selector(static "getObjects:andKeys:") = Void, Pointer[Id], Pointer[Id];
overload selector(static "getObjects:range:") = Void, Pointer[Id], NSRange;
overload selector(static "getParagraphStart:end:contentsEnd:forRange:") = Void, Pointer[UInt], Pointer[UInt], Pointer[UInt], NSRange;
overload selector(static "getResourceValue:forKey:error:") = Bool, Pointer[Id], NSString, Pointer[NSError];
overload selector(static "getReturnValue:") = Void, RawPointer;
overload selector(static "getValue:") = Void, RawPointer;
overload selector(static "globallyUniqueString") = NSString;
overload selector(static "goBack") = Void;
overload selector(static "goForward") = Void;
overload selector(static "grammarCheckingResultWithRange:details:") = NSTextCheckingResult, NSRange, NSArray;
overload selector(static "grammarDetails") = NSArray;
overload selector(static "grayColor") = UIColor;
overload selector(static "greenColor") = UIColor;
overload selector(static "gregorianStartDate") = NSDate;
overload selector(static "groupTableViewBackgroundColor") = UIColor;
overload selector(static "groupingLevel") = Int;
overload selector(static "groupingSeparator") = NSString;
overload selector(static "groupingSize") = UInt;
overload selector(static "groupsByEvent") = Bool;
overload varargSelector(static "handleFailureInFunction:file:lineNumber:description:") = Void, NSString, NSString, Int, NSString;
overload varargSelector(static "handleFailureInMethod:object:file:lineNumber:description:") = Void, SelectorHandle, Id, NSString, Int, NSString;
overload selector(static "handleMachMessage:") = Void, RawPointer;
overload selector(static "handlePortMessage:") = Void, NSPortMessage;
overload selector(static "hasAction") = Bool;
overload selector(static "hasBytesAvailable") = Bool;
overload selector(static "hasMemberInPlane:") = Bool, CUChar;
overload selector(static "hasPassword") = Bool;
overload selector(static "hasPrefix:") = Bool, NSString;
overload selector(static "hasSpaceAvailable") = Bool;
overload selector(static "hasSuffix:") = Bool, NSString;
overload selector(static "hasText") = Bool;
overload selector(static "hash") = UInt;
overload selector(static "helpAnchor") = NSString;
overload selector(static "hidesAccessoryWhenEditing") = Bool;
overload selector(static "hidesBackButton") = Bool;
overload selector(static "hidesBottomBarWhenPushed") = Bool;
overload selector(static "hidesForSinglePage") = Bool;
overload selector(static "hidesWhenStopped") = Bool;
overload selector(static "highlightedAnimationImages") = NSArray;
overload selector(static "highlightedImage") = UIImage;
overload selector(static "highlightedTextColor") = UIColor;
overload selector(static "hitTest:withEvent:") = UIView, CGPoint, UIEvent;
overload selector(static "host") = NSString;
overload selector(static "hostName") = NSString;
overload selector(static "hour") = Int;
overload selector(static "icons") = NSArray;
overload selector(static "identity") = SecIdentityRef;
overload selector(static "illegalCharacterSet") = Id;
overload selector(static "image") = UIImage;
overload selector(static "imageEdgeInsets") = UIEdgeInsets;
overload selector(static "imageForSegmentAtIndex:") = UIImage, UInt;
overload selector(static "imageForState:") = UIImage, UInt;
overload selector(static "imageInsets") = UIEdgeInsets;
overload selector(static "imageNamed:") = UIImage, NSString;
overload selector(static "imageOrientation") = UIImageOrientation;
overload selector(static "imagePickerController:didFinishPickingImage:editingInfo:") = Void, UIImagePickerController, UIImage, NSDictionary;
overload selector(static "imagePickerController:didFinishPickingMediaWithInfo:") = Void, UIImagePickerController, NSDictionary;
overload selector(static "imagePickerControllerDidCancel:") = Void, UIImagePickerController;
overload selector(static "imageRectForContentRect:") = CGRect, CGRect;
overload selector(static "imageView") = UIImageView;
overload selector(static "imageWithCGImage:") = UIImage, CGImageRef;
overload selector(static "imageWithCGImage:scale:orientation:") = UIImage, CGImageRef, Float, UIImageOrientation;
overload selector(static "imageWithContentsOfFile:") = UIImage, NSString;
overload selector(static "imageWithData:") = UIImage, NSData;
overload selector(static "images") = NSArray;
overload selector(static "increaseLengthBy:") = Void, UInt;
overload selector(static "indentationLevel") = Int;
overload selector(static "indentationWidth") = Float;
overload selector(static "indexAtPosition:") = UInt, UInt;
overload selector(static "indexGreaterThanIndex:") = UInt, UInt;
overload selector(static "indexGreaterThanOrEqualToIndex:") = UInt, UInt;
overload selector(static "indexInRange:options:passingTest:") = UInt, NSRange, UInt, UnknownType;
overload selector(static "indexLessThanIndex:") = UInt, UInt;
overload selector(static "indexLessThanOrEqualToIndex:") = UInt, UInt;
overload selector(static "indexOfAccessibilityElement:") = Int, Id;
overload selector(static "indexOfObject:") = UInt, Id;
overload selector(static "indexOfObject:inRange:") = UInt, Id, NSRange;
overload selector(static "indexOfObject:inSortedRange:options:usingComparator:") = UInt, Id, NSRange, UInt, NSComparator;
overload selector(static "indexOfObjectAtIndexes:options:passingTest:") = UInt, NSIndexSet, UInt, UnknownType;
overload selector(static "indexOfObjectIdenticalTo:") = UInt, Id;
overload selector(static "indexOfObjectIdenticalTo:inRange:") = UInt, Id, NSRange;
overload selector(static "indexOfObjectPassingTest:") = UInt, UnknownType;
overload selector(static "indexOfObjectWithOptions:passingTest:") = UInt, UInt, UnknownType;
overload selector(static "indexPassingTest:") = UInt, UnknownType;
overload selector(static "indexPathByAddingIndex:") = NSIndexPath, UInt;
overload selector(static "indexPathByRemovingLastIndex") = NSIndexPath;
overload selector(static "indexPathForCell:") = NSIndexPath, UITableViewCell;
overload selector(static "indexPathForRow:inSection:") = NSIndexPath, UInt, UInt;
overload selector(static "indexPathForRowAtPoint:") = NSIndexPath, CGPoint;
overload selector(static "indexPathForSelectedRow") = NSIndexPath;
overload selector(static "indexPathWithIndex:") = Id, UInt;
overload selector(static "indexPathWithIndexes:length:") = Id, Pointer[UInt], UInt;
overload selector(static "indexPathsForRowsInRect:") = NSArray, CGRect;
overload selector(static "indexPathsForVisibleRows") = NSArray;
overload selector(static "indexSet") = Id;
overload selector(static "indexSetWithIndex:") = Id, UInt;
overload selector(static "indexSetWithIndexesInRange:") = Id, NSRange;
overload selector(static "indexWithOptions:passingTest:") = UInt, UInt, UnknownType;
overload selector(static "indexesInRange:options:passingTest:") = NSIndexSet, NSRange, UInt, UnknownType;
overload selector(static "indexesOfObjectsAtIndexes:options:passingTest:") = NSIndexSet, NSIndexSet, UInt, UnknownType;
overload selector(static "indexesOfObjectsPassingTest:") = NSIndexSet, UnknownType;
overload selector(static "indexesOfObjectsWithOptions:passingTest:") = NSIndexSet, UInt, UnknownType;
overload selector(static "indexesPassingTest:") = NSIndexSet, UnknownType;
overload selector(static "indexesWithOptions:passingTest:") = NSIndexSet, UInt, UnknownType;
overload selector(static "indicatorStyle") = UIScrollViewIndicatorStyle;
overload selector(static "infoDictionary") = NSDictionary;
overload selector(static "init") = Id;
overload selector(static "initByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:") = Id, NSData, UInt, NSURL, Pointer[Bool], Pointer[NSError];
overload selector(static "initDirectoryWithFileWrappers:") = Id, NSDictionary;
overload selector(static "initFileURLWithPath:") = Id, NSString;
overload selector(static "initFileURLWithPath:isDirectory:") = Id, NSString, Bool;
overload selector(static "initForReadingWithData:") = Id, NSData;
overload selector(static "initForWritingWithMutableData:") = Id, NSMutableData;
overload selector(static "initRegularFileWithContents:") = Id, NSData;
overload selector(static "initSymbolicLinkWithDestination:") = Id, NSString;
overload selector(static "initSymbolicLinkWithDestinationURL:") = Id, NSURL;
overload selector(static "initToBuffer:capacity:") = Id, Pointer[CUChar], UInt;
overload selector(static "initToFileAtPath:append:") = Id, NSString, Bool;
overload selector(static "initToMemory") = Id;
overload selector(static "initWithAccessibilityContainer:") = Id, Id;
overload selector(static "initWithActivityIndicatorStyle:") = Id, UIActivityIndicatorViewStyle;
overload selector(static "initWithArray:") = Id, NSArray;
overload selector(static "initWithArray:copyItems:") = Id, NSArray, Bool;
overload selector(static "initWithAttributedString:") = Id, NSAttributedString;
overload selector(static "initWithAuthenticationChallenge:sender:") = Id, NSURLAuthenticationChallenge, Id;
overload selector(static "initWithBarButtonSystemItem:target:action:") = Id, UIBarButtonSystemItem, Id, SelectorHandle;
overload selector(static "initWithBool:") = Id, Bool;
overload selector(static "initWithBytes:length:") = Id, RawPointer, UInt;
overload selector(static "initWithBytes:length:encoding:") = Id, RawPointer, UInt, UInt;
overload selector(static "initWithBytes:objCType:") = Id, RawPointer, Pointer[CChar];
overload selector(static "initWithBytesNoCopy:length:") = Id, RawPointer, UInt;
overload selector(static "initWithBytesNoCopy:length:encoding:freeWhenDone:") = Id, RawPointer, UInt, UInt, Bool;
overload selector(static "initWithBytesNoCopy:length:freeWhenDone:") = Id, RawPointer, UInt, Bool;
overload selector(static "initWithCGColor:") = UIColor, CGColorRef;
overload selector(static "initWithCGImage:") = Id, CGImageRef;
overload selector(static "initWithCGImage:scale:orientation:") = Id, CGImageRef, Float, UIImageOrientation;
overload selector(static "initWithCString:") = Id, Pointer[CChar];
overload selector(static "initWithCString:encoding:") = Id, Pointer[CChar], UInt;
overload selector(static "initWithCString:length:") = Id, Pointer[CChar], UInt;
overload selector(static "initWithCStringNoCopy:length:freeWhenDone:") = Id, Pointer[CChar], UInt, Bool;
overload selector(static "initWithCalendarIdentifier:") = Id, NSString;
overload selector(static "initWithCapacity:") = Id, UInt;
overload selector(static "initWithChar:") = Id, CChar;
overload selector(static "initWithCharacters:length:") = Id, Pointer[UShort], UInt;
overload selector(static "initWithCharactersNoCopy:length:freeWhenDone:") = Id, Pointer[UShort], UInt, Bool;
overload selector(static "initWithCoder:") = Id, NSCoder;
overload selector(static "initWithCondition:") = Id, Int;
overload selector(static "initWithContentViewController:") = Id, UIViewController;
overload selector(static "initWithContentsOfFile:") = Id, NSString;
overload selector(static "initWithContentsOfFile:encoding:error:") = Id, NSString, UInt, Pointer[NSError];
overload selector(static "initWithContentsOfFile:options:error:") = Id, NSString, UInt, Pointer[NSError];
overload selector(static "initWithContentsOfFile:usedEncoding:error:") = Id, NSString, Pointer[UInt], Pointer[NSError];
overload selector(static "initWithContentsOfMappedFile:") = Id, NSString;
overload selector(static "initWithContentsOfURL:") = Id, NSURL;
overload selector(static "initWithContentsOfURL:encoding:error:") = Id, NSURL, UInt, Pointer[NSError];
overload selector(static "initWithContentsOfURL:options:error:") = Id, NSURL, UInt, Pointer[NSError];
overload selector(static "initWithContentsOfURL:usedEncoding:error:") = Id, NSURL, Pointer[UInt], Pointer[NSError];
overload selector(static "initWithCustomView:") = Id, UIView;
overload selector(static "initWithData:") = Id, NSData;
overload selector(static "initWithData:encoding:") = Id, NSData, UInt;
overload selector(static "initWithDecimal:") = Id, NSDecimal;
overload selector(static "initWithDictionary:") = Id, NSDictionary;
overload selector(static "initWithDictionary:copyItems:") = Id, NSDictionary, Bool;
overload selector(static "initWithDomain:code:userInfo:") = Id, NSString, Int, NSDictionary;
overload selector(static "initWithDomain:type:name:") = Id, NSString, NSString, NSString;
overload selector(static "initWithDomain:type:name:port:") = Id, NSString, NSString, NSString, Int;
overload selector(static "initWithDominantScript:languageMap:") = Id, NSString, NSDictionary;
overload selector(static "initWithDouble:") = Id, Double;
overload selector(static "initWithExpressionType:") = Id, UInt;
overload selector(static "initWithFileAtPath:") = Id, NSString;
overload selector(static "initWithFileDescriptor:") = Id, Int;
overload selector(static "initWithFileDescriptor:closeOnDealloc:") = Id, Int, Bool;
overload selector(static "initWithFireDate:interval:target:selector:userInfo:repeats:") = Id, NSDate, Double, Id, SelectorHandle, Id, Bool;
overload selector(static "initWithFloat:") = Id, Float;
overload varargSelector(static "initWithFormat:") = Id, NSString;
overload selector(static "initWithFormat:arguments:") = Id, NSString, va_list;
overload varargSelector(static "initWithFormat:locale:") = Id, NSString, Id;
overload selector(static "initWithFormat:locale:arguments:") = Id, NSString, Id, va_list;
overload selector(static "initWithFrame:") = Id, CGRect;
overload selector(static "initWithFrame:reuseIdentifier:") = Id, CGRect, NSString;
overload selector(static "initWithFrame:style:") = Id, CGRect, UITableViewStyle;
overload selector(static "initWithHost:port:protocol:realm:authenticationMethod:") = Id, NSString, Int, NSString, NSString, NSString;
overload selector(static "initWithHue:saturation:brightness:alpha:") = UIColor, Float, Float, Float, Float;
overload selector(static "initWithIdentity:certificates:persistence:") = Id, SecIdentityRef, NSArray, UInt;
overload selector(static "initWithImage:") = Id, UIImage;
overload selector(static "initWithImage:highlightedImage:") = Id, UIImage, UIImage;
overload selector(static "initWithImage:style:target:action:") = Id, UIImage, UIBarButtonItemStyle, Id, SelectorHandle;
overload selector(static "initWithIndex:") = Id, UInt;
overload selector(static "initWithIndexSet:") = Id, NSIndexSet;
overload selector(static "initWithIndexes:length:") = Id, Pointer[UInt], UInt;
overload selector(static "initWithIndexesInRange:") = Id, NSRange;
overload selector(static "initWithInt:") = Id, Int;
overload selector(static "initWithInteger:") = Id, Int;
overload selector(static "initWithInvocation:") = Id, NSInvocation;
overload selector(static "initWithItems:") = Id, NSArray;
overload selector(static "initWithKey:ascending:") = Id, NSString, Bool;
overload selector(static "initWithKey:ascending:comparator:") = Id, NSString, Bool, NSComparator;
overload selector(static "initWithKey:ascending:selector:") = Id, NSString, Bool, SelectorHandle;
overload selector(static "initWithLeftExpression:rightExpression:customSelector:") = Id, NSExpression, NSExpression, SelectorHandle;
overload selector(static "initWithLeftExpression:rightExpression:modifier:type:options:") = Id, NSExpression, NSExpression, UInt, UInt, UInt;
overload selector(static "initWithLength:") = Id, UInt;
overload selector(static "initWithLocaleIdentifier:") = Id, NSString;
overload selector(static "initWithLong:") = Id, CLong;
overload selector(static "initWithLongLong:") = Id, Int64;
overload selector(static "initWithMachPort:") = Id, UInt;
overload selector(static "initWithMachPort:options:") = Id, UInt, UInt;
overload selector(static "initWithMantissa:exponent:isNegative:") = Id, UInt64, Short, Bool;
overload selector(static "initWithMemoryCapacity:diskCapacity:diskPath:") = Id, UInt, UInt, NSString;
overload selector(static "initWithName:") = Id, NSString;
overload selector(static "initWithName:data:") = Id, NSString, NSData;
overload selector(static "initWithName:reason:userInfo:") = Id, NSString, NSString, NSDictionary;
overload selector(static "initWithNibName:bundle:") = Id, NSString, NSBundle;
overload selector(static "initWithNotificationCenter:") = Id, NSNotificationCenter;
overload varargSelector(static "initWithObjects:") = Id, Id;
overload selector(static "initWithObjects:count:") = Id, Pointer[Id], UInt;
overload selector(static "initWithObjects:forKeys:") = Id, NSArray, NSArray;
overload selector(static "initWithObjects:forKeys:count:") = Id, Pointer[Id], Pointer[Id], UInt;
overload varargSelector(static "initWithObjectsAndKeys:") = Id, Id;
overload selector(static "initWithPath:") = Id, NSString;
overload selector(static "initWithPattern:options:error:") = Id, NSString, UInt, Pointer[NSError];
overload selector(static "initWithPatternImage:") = UIColor, UIImage;
overload selector(static "initWithProgressViewStyle:") = Id, UIProgressViewStyle;
overload selector(static "initWithProperties:") = Id, NSDictionary;
overload selector(static "initWithProtectionSpace:proposedCredential:previousFailureCount:failureResponse:error:sender:") = Id, NSURLProtectionSpace, NSURLCredential, Int, NSURLResponse, NSError, Id;
overload selector(static "initWithProxyHost:port:type:realm:authenticationMethod:") = Id, NSString, Int, NSString, NSString, NSString;
overload selector(static "initWithRed:green:blue:alpha:") = UIColor, Float, Float, Float, Float;
overload selector(static "initWithRequest:cachedResponse:client:") = Id, NSURLRequest, NSCachedURLResponse, Id;
overload selector(static "initWithRequest:delegate:") = Id, NSURLRequest, Id;
overload selector(static "initWithRequest:delegate:startImmediately:") = Id, NSURLRequest, Id, Bool;
overload selector(static "initWithResponse:data:") = Id, NSURLResponse, NSData;
overload selector(static "initWithResponse:data:userInfo:storagePolicy:") = Id, NSURLResponse, NSData, NSDictionary, UInt;
overload selector(static "initWithRootViewController:") = Id, UIViewController;
overload selector(static "initWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:") = Id, UInt, Short, Bool, Bool, Bool, Bool;
overload selector(static "initWithScheme:host:path:") = Id, NSString, NSString, NSString;
overload selector(static "initWithSearchBar:contentsController:") = Id, UISearchBar, UIViewController;
overload selector(static "initWithSerializedRepresentation:") = Id, NSData;
overload selector(static "initWithSet:") = Id, NSSet;
overload selector(static "initWithSet:copyItems:") = Id, NSSet, Bool;
overload selector(static "initWithShort:") = Id, Short;
overload selector(static "initWithStorageLocation:") = Id, NSURL;
overload selector(static "initWithString:") = Id, NSString;
overload selector(static "initWithString:attributes:") = Id, NSString, NSDictionary;
overload selector(static "initWithString:locale:") = Id, NSString, Id;
overload selector(static "initWithString:relativeToURL:") = Id, NSString, NSURL;
overload selector(static "initWithStyle:") = Id, UITableViewStyle;
overload selector(static "initWithStyle:reuseIdentifier:") = Id, UITableViewCellStyle, NSString;
overload selector(static "initWithTabBarSystemItem:tag:") = Id, UITabBarSystemItem, Int;
overload selector(static "initWithTarget:action:") = Id, Id, SelectorHandle;
overload selector(static "initWithTarget:selector:object:") = Id, Id, SelectorHandle, Id;
overload selector(static "initWithTextInput:") = Id, UIResponder;
overload selector(static "initWithTimeInterval:sinceDate:") = Id, Double, NSDate;
overload selector(static "initWithTimeIntervalSince1970:") = Id, Double;
overload selector(static "initWithTimeIntervalSinceNow:") = Id, Double;
overload selector(static "initWithTimeIntervalSinceReferenceDate:") = Id, Double;
overload selector(static "initWithTitle:") = Id, NSString;
overload selector(static "initWithTitle:action:") = Id, NSString, SelectorHandle;
overload varargSelector(static "initWithTitle:delegate:cancelButtonTitle:destructiveButtonTitle:otherButtonTitles:") = Id, NSString, Id, NSString, NSString, NSString;
overload selector(static "initWithTitle:image:tag:") = Id, NSString, UIImage, Int;
overload varargSelector(static "initWithTitle:message:delegate:cancelButtonTitle:otherButtonTitles:") = Id, NSString, NSString, Id, NSString, NSString;
overload selector(static "initWithTitle:style:target:action:") = Id, NSString, UIBarButtonItemStyle, Id, SelectorHandle;
overload selector(static "initWithTrust:") = Id, SecTrustRef;
overload selector(static "initWithType:subpredicates:") = Id, UInt, NSArray;
overload selector(static "initWithTypes:error:") = Id, UInt64, Pointer[NSError];
overload selector(static "initWithURL:") = Id, NSURL;
overload selector(static "initWithURL:MIMEType:expectedContentLength:textEncodingName:") = Id, NSURL, NSString, Int, NSString;
overload selector(static "initWithURL:append:") = Id, NSURL, Bool;
overload selector(static "initWithURL:cachePolicy:timeoutInterval:") = Id, NSURL, UInt, Double;
overload selector(static "initWithURL:options:error:") = Id, NSURL, UInt, Pointer[NSError];
overload selector(static "initWithUTF8String:") = Id, Pointer[CChar];
overload selector(static "initWithUnsignedChar:") = Id, CUChar;
overload selector(static "initWithUnsignedInt:") = Id, UInt;
overload selector(static "initWithUnsignedInteger:") = Id, UInt;
overload selector(static "initWithUnsignedLong:") = Id, CULong;
overload selector(static "initWithUnsignedLongLong:") = Id, UInt64;
overload selector(static "initWithUnsignedShort:") = Id, UShort;
overload selector(static "initWithUser:") = Id, NSString;
overload selector(static "initWithUser:password:persistence:") = Id, NSString, NSString, UInt;
overload selector(static "initWithWhite:alpha:") = UIColor, Float, Float;
overload selector(static "initialize") = Void;
overload selector(static "inputAccessoryView") = UIView;
overload selector(static "inputDelegate") = Id;
overload selector(static "inputStreamWithData:") = Id, NSData;
overload selector(static "inputStreamWithFileAtPath:") = Id, NSString;
overload selector(static "inputStreamWithURL:") = Id, NSURL;
overload selector(static "inputView") = UIView;
overload selector(static "insertAttributedString:atIndex:") = Void, NSAttributedString, UInt;
overload selector(static "insertObject:atIndex:") = Void, Id, UInt;
overload selector(static "insertObjects:atIndexes:") = Void, NSArray, NSIndexSet;
overload selector(static "insertRowsAtIndexPaths:withRowAnimation:") = Void, NSArray, UITableViewRowAnimation;
overload selector(static "insertSections:withRowAnimation:") = Void, NSIndexSet, UITableViewRowAnimation;
overload selector(static "insertSegmentWithImage:atIndex:animated:") = Void, UIImage, UInt, Bool;
overload selector(static "insertSegmentWithTitle:atIndex:animated:") = Void, NSString, UInt, Bool;
overload selector(static "insertString:atIndex:") = Void, NSString, UInt;
overload selector(static "insertSubview:aboveSubview:") = Void, UIView, UIView;
overload selector(static "insertSubview:atIndex:") = Void, UIView, Int;
overload selector(static "insertSubview:belowSubview:") = Void, UIView, UIView;
overload selector(static "insertText:") = Void, NSString;
overload selector(static "instanceMethodForSelector:") = IMP, SelectorHandle;
overload selector(static "instanceMethodSignatureForSelector:") = NSMethodSignature, SelectorHandle;
overload selector(static "instancesRespondToSelector:") = Bool, SelectorHandle;
overload selector(static "instantiateWithOwner:options:") = NSArray, Id, NSDictionary;
overload selector(static "intValue") = Int;
overload selector(static "integerForKey:") = Int, NSString;
overload selector(static "integerValue") = Int;
overload selector(static "interactionControllerWithURL:") = UIDocumentInteractionController, NSURL;
overload selector(static "interfaceOrientation") = UIInterfaceOrientation;
overload selector(static "internationalCurrencySymbol") = NSString;
overload selector(static "intersectSet:") = Void, NSSet;
overload selector(static "intersectsIndexesInRange:") = Bool, NSRange;
overload selector(static "intersectsSet:") = Bool, NSSet;
overload selector(static "invalidate") = Void;
overload selector(static "invert") = Void;
overload selector(static "invertedSet") = NSCharacterSet;
overload selector(static "invocation") = NSInvocation;
overload selector(static "invocationWithMethodSignature:") = NSInvocation, NSMethodSignature;
overload selector(static "invoke") = Void;
overload selector(static "invokeWithTarget:") = Void, Id;
overload selector(static "isAbsolutePath") = Bool;
overload selector(static "isAccessibilityElement") = Bool;
overload selector(static "isActive") = Bool;
overload selector(static "isAnimating") = Bool;
overload selector(static "isAtEnd") = Bool;
overload selector(static "isBatteryMonitoringEnabled") = Bool;
overload selector(static "isCameraDeviceAvailable:") = Bool, UInt;
overload selector(static "isCancelled") = Bool;
overload selector(static "isConcurrent") = Bool;
overload selector(static "isContentDiscarded") = Bool;
overload selector(static "isContinuous") = Bool;
overload selector(static "isCustomizing") = Bool;
overload selector(static "isDaylightSavingTime") = Bool;
overload selector(static "isDaylightSavingTimeForDate:") = Bool, NSDate;
overload selector(static "isDecelerating") = Bool;
overload selector(static "isDeletableFileAtPath:") = Bool, NSString;
overload selector(static "isDescendantOfView:") = Bool, UIView;
overload selector(static "isDirectionalLockEnabled") = Bool;
overload selector(static "isDirectory") = Bool;
overload selector(static "isDragging") = Bool;
overload selector(static "isEditable") = Bool;
overload selector(static "isEditing") = Bool;
overload selector(static "isEmpty") = Bool;
overload selector(static "isEnabled") = Bool;
overload selector(static "isEnabledForSegmentAtIndex:") = Bool, UInt;
overload selector(static "isEqual:") = Bool, Id;
overload selector(static "isEqualToArray:") = Bool, NSArray;
overload selector(static "isEqualToAttributedString:") = Bool, NSAttributedString;
overload selector(static "isEqualToData:") = Bool, NSData;
overload selector(static "isEqualToDate:") = Bool, NSDate;
overload selector(static "isEqualToDictionary:") = Bool, NSDictionary;
overload selector(static "isEqualToIndexSet:") = Bool, NSIndexSet;
overload selector(static "isEqualToNumber:") = Bool, NSNumber;
overload selector(static "isEqualToSet:") = Bool, NSSet;
overload selector(static "isEqualToString:") = Bool, NSString;
overload selector(static "isEqualToTimeZone:") = Bool, NSTimeZone;
overload selector(static "isEqualToValue:") = Bool, NSValue;
overload selector(static "isExclusiveTouch") = Bool;
overload selector(static "isExecutableFileAtPath:") = Bool, NSString;
overload selector(static "isExecuting") = Bool;
overload selector(static "isFileReferenceURL") = Bool;
overload selector(static "isFileURL") = Bool;
overload selector(static "isFinished") = Bool;
overload selector(static "isFirstResponder") = Bool;
overload selector(static "isFlashAvailableForCameraDevice:") = Bool, UInt;
overload selector(static "isGeneratingDeviceOrientationNotifications") = Bool;
overload selector(static "isHTTPOnly") = Bool;
overload selector(static "isHidden") = Bool;
overload selector(static "isHighlighted") = Bool;
overload selector(static "isIdleTimerDisabled") = Bool;
overload selector(static "isIgnoringInteractionEvents") = Bool;
overload selector(static "isKeyWindow") = Bool;
overload selector(static "isKindOfClass:") = Bool, Id;
overload selector(static "isLenient") = Bool;
overload selector(static "isLoaded") = Bool;
overload selector(static "isLoading") = Bool;
overload selector(static "isMainThread") = Bool;
overload selector(static "isMemberOfClass:") = Bool, Id;
overload selector(static "isMenuVisible") = Bool;
overload selector(static "isModalInPopover") = Bool;
overload selector(static "isMomentary") = Bool;
overload selector(static "isMultiThreaded") = Bool;
overload selector(static "isMultipleTouchEnabled") = Bool;
overload selector(static "isMultitaskingSupported") = Bool;
overload selector(static "isNavigationBarHidden") = Bool;
overload selector(static "isNetworkActivityIndicatorVisible") = Bool;
overload selector(static "isOn") = Bool;
overload selector(static "isOneway") = Bool;
overload selector(static "isOpaque") = Bool;
overload selector(static "isPagingEnabled") = Bool;
overload selector(static "isPartialStringValid:newEditingString:errorDescription:") = Bool, NSString, Pointer[NSString], Pointer[NSString];
overload selector(static "isPartialStringValid:proposedSelectedRange:originalString:originalSelectedRange:errorDescription:") = Bool, Pointer[NSString], NSRangePointer, NSString, NSRange, Pointer[NSString];
overload selector(static "isPartialStringValidationEnabled") = Bool;
overload selector(static "isPersistent") = Bool;
overload selector(static "isPopoverVisible") = Bool;
overload selector(static "isPosition:atBoundary:inDirection:") = Bool, UITextPosition, UITextGranularity, Int;
overload selector(static "isPosition:withinTextUnit:inDirection:") = Bool, UITextPosition, UITextGranularity, Int;
overload selector(static "isProtectedDataAvailable") = Bool;
overload selector(static "isProximityMonitoringEnabled") = Bool;
overload selector(static "isProximitySensingEnabled") = Bool;
overload selector(static "isProxy") = Bool;
overload selector(static "isReadableFileAtPath:") = Bool, NSString;
overload selector(static "isReady") = Bool;
overload selector(static "isRedoing") = Bool;
overload selector(static "isRegularFile") = Bool;
overload selector(static "isScrollEnabled") = Bool;
overload selector(static "isSearchResultsButtonSelected") = Bool;
overload selector(static "isSecure") = Bool;
overload selector(static "isSecureTextEntry") = Bool;
overload selector(static "isSelected") = Bool;
overload selector(static "isSessionOnly") = Bool;
overload selector(static "isSourceTypeAvailable:") = Bool, UInt;
overload selector(static "isStatusBarHidden") = Bool;
overload selector(static "isSubclassOfClass:") = Bool, Id;
overload selector(static "isSubsetOfSet:") = Bool, NSSet;
overload selector(static "isSupersetOfSet:") = Bool, NSCharacterSet;
overload selector(static "isSuspended") = Bool;
overload selector(static "isSymbolicLink") = Bool;
overload selector(static "isToolbarHidden") = Bool;
overload selector(static "isTouchInside") = Bool;
overload selector(static "isTracking") = Bool;
overload selector(static "isTranslucent") = Bool;
overload selector(static "isUndoRegistrationEnabled") = Bool;
overload selector(static "isUndoing") = Bool;
overload selector(static "isUserInteractionEnabled") = Bool;
overload selector(static "isValid") = Bool;
overload selector(static "isViewLoaded") = Bool;
overload selector(static "isVisible") = Bool;
overload selector(static "isWritableFileAtPath:") = Bool, NSString;
overload selector(static "isZoomBouncing") = Bool;
overload selector(static "isZooming") = Bool;
overload selector(static "italicSystemFontOfSize:") = UIFont, Float;
overload selector(static "itemSetWithPasteboardTypes:") = NSIndexSet, NSArray;
overload selector(static "items") = NSArray;
overload selector(static "key") = NSString;
overload selector(static "keyEnumerator") = NSEnumerator;
overload selector(static "keyForFileWrapper:") = NSString, NSFileWrapper;
overload selector(static "keyPath") = NSString;
overload selector(static "keyPathsForValuesAffectingValueForKey:") = NSSet, NSString;
overload selector(static "keyWindow") = UIWindow;
overload selector(static "keyboardAppearance") = UIKeyboardAppearance;
overload selector(static "keyboardType") = UIKeyboardType;
overload selector(static "keysOfEntriesPassingTest:") = NSSet, UnknownType;
overload selector(static "keysOfEntriesWithOptions:passingTest:") = NSSet, UInt, UnknownType;
overload selector(static "keysSortedByValueUsingComparator:") = NSArray, NSComparator;
overload selector(static "keysSortedByValueUsingSelector:") = NSArray, SelectorHandle;
overload selector(static "keysSortedByValueWithOptions:usingComparator:") = NSArray, UInt, NSComparator;
overload selector(static "knownTimeZoneNames") = NSArray;
overload selector(static "labelFontSize") = Float;
overload selector(static "languageMap") = NSDictionary;
overload selector(static "languagesForScript:") = NSArray, NSString;
overload selector(static "lastIndex") = UInt;
overload selector(static "lastObject") = Id;
overload selector(static "lastPathComponent") = NSString;
overload selector(static "laterDate:") = NSDate, NSDate;
overload selector(static "layer") = CALayer;
overload selector(static "layerClass") = Id;
overload selector(static "layoutIfNeeded") = Void;
overload selector(static "layoutSubviews") = Void;
overload selector(static "leading") = Float;
overload selector(static "leftBarButtonItem") = UIBarButtonItem;
overload selector(static "leftCapWidth") = Int;
overload selector(static "leftExpression") = NSExpression;
overload selector(static "leftView") = UIView;
overload selector(static "leftViewMode") = UITextFieldViewMode;
overload selector(static "leftViewRectForBounds:") = CGRect, CGRect;
overload selector(static "length") = UInt;
overload selector(static "lengthOfBytesUsingEncoding:") = UInt, UInt;
overload selector(static "letterCharacterSet") = Id;
overload selector(static "level") = UInt;
overload selector(static "levelsOfUndo") = UInt;
overload selector(static "lightGrayColor") = UIColor;
overload selector(static "lightTextColor") = UIColor;
overload selector(static "limitDateForMode:") = NSDate, NSString;
overload selector(static "lineBreakMode") = UILineBreakMode;
overload selector(static "lineCapStyle") = CGLineCap;
overload selector(static "lineDirectionForLanguage:") = UInt, NSString;
overload selector(static "lineHeight") = Float;
overload selector(static "lineJoinStyle") = CGLineJoin;
overload selector(static "lineNumber") = Int;
overload selector(static "lineRangeForRange:") = NSRange, NSRange;
overload selector(static "lineWidth") = Float;
overload selector(static "linkCheckingResultWithRange:URL:") = NSTextCheckingResult, NSRange, NSURL;
overload selector(static "linkItemAtPath:toPath:error:") = Bool, NSString, NSString, Pointer[NSError];
overload selector(static "linkItemAtURL:toURL:error:") = Bool, NSURL, NSURL, Pointer[NSError];
overload selector(static "load") = Bool;
overload selector(static "loadAndReturnError:") = Bool, Pointer[NSError];
overload selector(static "loadData:MIMEType:textEncodingName:baseURL:") = Void, NSData, NSString, NSString, NSURL;
overload selector(static "loadHTMLString:baseURL:") = Void, NSString, NSURL;
overload selector(static "loadNibNamed:owner:options:") = NSArray, NSString, Id, NSDictionary;
overload selector(static "loadRequest:") = Void, NSURLRequest;
overload selector(static "loadView") = Void;
overload selector(static "localTimeZone") = NSTimeZone;
overload selector(static "locale") = Id;
overload selector(static "localeIdentifier") = NSString;
overload selector(static "localeIdentifierFromComponents:") = NSString, NSDictionary;
overload selector(static "localeIdentifierFromWindowsLocaleCode:") = NSString, UInt;
overload selector(static "localizations") = NSArray;
overload selector(static "localizedCaseInsensitiveCompare:") = Int, NSString;
overload selector(static "localizedCompare:") = Int, NSString;
overload selector(static "localizedDescription") = NSString;
overload selector(static "localizedFailureReason") = NSString;
overload selector(static "localizedInfoDictionary") = NSDictionary;
overload selector(static "localizedModel") = NSString;
overload selector(static "localizedName:locale:") = NSString, Int, NSLocale;
overload selector(static "localizedNameOfStringEncoding:") = NSString, UInt;
overload selector(static "localizedRecoveryOptions") = NSArray;
overload selector(static "localizedRecoverySuggestion") = NSString;
overload selector(static "localizedScannerWithString:") = Id, NSString;
overload selector(static "localizedStandardCompare:") = Int, NSString;
overload selector(static "localizedStringForKey:value:table:") = NSString, NSString, NSString, NSString;
overload selector(static "localizedStringForStatusCode:") = NSString, Int;
overload selector(static "localizedStringFromDate:dateStyle:timeStyle:") = NSString, NSDate, UInt, UInt;
overload selector(static "localizedStringFromNumber:numberStyle:") = NSString, NSNumber, UInt;
overload varargSelector(static "localizedStringWithFormat:") = Id, NSString;
overload selector(static "locationInView:") = CGPoint, UIView;
overload selector(static "locationOfTouch:inView:") = CGPoint, UInt, UIView;
overload selector(static "lock") = Void;
overload selector(static "lockBeforeDate:") = Bool, NSDate;
overload selector(static "lockWhenCondition:") = Void, Int;
overload selector(static "lockWhenCondition:beforeDate:") = Bool, Int, NSDate;
overload selector(static "longCharacterIsMember:") = Bool, CULong;
overload selector(static "longEraSymbols") = NSArray;
overload selector(static "longLongValue") = Int64;
overload selector(static "longValue") = CLong;
overload selector(static "lossyCString") = Pointer[CChar];
overload selector(static "lowercaseLetterCharacterSet") = Id;
overload selector(static "lowercaseString") = NSString;
overload selector(static "machPort") = UInt;
overload selector(static "magentaColor") = UIColor;
overload selector(static "main") = Void;
overload selector(static "mainBundle") = NSBundle;
overload selector(static "mainDocumentURL") = NSURL;
overload selector(static "mainQueue") = Id;
overload selector(static "mainRunLoop") = NSRunLoop;
overload selector(static "mainScreen") = UIScreen;
overload selector(static "mainThread") = NSThread;
overload selector(static "makeKeyAndVisible") = Void;
overload selector(static "makeKeyWindow") = Void;
overload selector(static "makeObjectsPerformSelector:") = Void, SelectorHandle;
overload selector(static "makeObjectsPerformSelector:withObject:") = Void, SelectorHandle, Id;
overload selector(static "markedTextRange") = UITextRange;
overload selector(static "markedTextStyle") = NSDictionary;
overload selector(static "matchesContentsOfURL:") = Bool, NSURL;
overload selector(static "matchesInString:options:range:") = NSArray, NSString, UInt, NSRange;
overload selector(static "maxConcurrentOperationCount") = Int;
overload selector(static "maximum") = NSNumber;
overload selector(static "maximumDate") = NSDate;
overload selector(static "maximumDecimalNumber") = NSDecimalNumber;
overload selector(static "maximumFractionDigits") = UInt;
overload selector(static "maximumIntegerDigits") = UInt;
overload selector(static "maximumLengthOfBytesUsingEncoding:") = UInt, UInt;
overload selector(static "maximumNumberOfTouches") = UInt;
overload selector(static "maximumRangeOfUnit:") = NSRange, UInt;
overload selector(static "maximumSignificantDigits") = UInt;
overload selector(static "maximumTrackImageForState:") = UIImage, UInt;
overload selector(static "maximumValue") = Float;
overload selector(static "maximumValueImage") = UIImage;
overload selector(static "maximumValueImageRectForBounds:") = CGRect, CGRect;
overload selector(static "maximumZoomScale") = Float;
overload selector(static "mediaPlaybackRequiresUserAction") = Bool;
overload selector(static "mediaTypes") = NSArray;
overload selector(static "member:") = Id, Id;
overload selector(static "memoryCapacity") = UInt;
overload selector(static "menuFrame") = CGRect;
overload selector(static "menuItems") = NSArray;
overload selector(static "message") = NSString;
overload selector(static "methodForSelector:") = IMP, SelectorHandle;
overload selector(static "methodReturnLength") = UInt;
overload selector(static "methodReturnType") = Pointer[CChar];
overload selector(static "methodSignature") = NSMethodSignature;
overload selector(static "methodSignatureForSelector:") = NSMethodSignature, SelectorHandle;
overload selector(static "minimum") = NSNumber;
overload selector(static "minimumDate") = NSDate;
overload selector(static "minimumDaysInFirstWeek") = UInt;
overload selector(static "minimumDecimalNumber") = NSDecimalNumber;
overload selector(static "minimumFontSize") = Float;
overload selector(static "minimumFractionDigits") = UInt;
overload selector(static "minimumIntegerDigits") = UInt;
overload selector(static "minimumNumberOfTouches") = UInt;
overload selector(static "minimumPressDuration") = Double;
overload selector(static "minimumRangeOfUnit:") = NSRange, UInt;
overload selector(static "minimumSignificantDigits") = UInt;
overload selector(static "minimumTrackImageForState:") = UIImage, UInt;
overload selector(static "minimumValue") = Float;
overload selector(static "minimumValueImage") = UIImage;
overload selector(static "minimumValueImageRectForBounds:") = CGRect, CGRect;
overload selector(static "minimumZoomScale") = Float;
overload selector(static "minusSet:") = Void, NSSet;
overload selector(static "minusSign") = NSString;
overload selector(static "minute") = Int;
overload selector(static "minuteInterval") = Int;
overload selector(static "miterLimit") = Float;
overload selector(static "modalPresentationStyle") = UIModalPresentationStyle;
overload selector(static "modalTransitionStyle") = UIModalTransitionStyle;
overload selector(static "modalViewController") = UIViewController;
overload selector(static "model") = NSString;
overload selector(static "month") = Int;
overload selector(static "monthSymbols") = NSArray;
overload selector(static "moreNavigationController") = UINavigationController;
overload selector(static "motionBegan:withEvent:") = Void, UIEventSubtype, UIEvent;
overload selector(static "motionCancelled:withEvent:") = Void, UIEventSubtype, UIEvent;
overload selector(static "motionEnded:withEvent:") = Void, UIEventSubtype, UIEvent;
overload selector(static "mountedVolumeURLsIncludingResourceValuesForKeys:options:") = NSArray, NSArray, UInt;
overload selector(static "moveItemAtPath:toPath:error:") = Bool, NSString, NSString, Pointer[NSError];
overload selector(static "moveItemAtURL:toURL:error:") = Bool, NSURL, NSURL, Pointer[NSError];
overload selector(static "moveToPoint:") = Void, CGPoint;
overload selector(static "multiplier") = NSNumber;
overload selector(static "mutableArrayValueForKey:") = NSMutableArray, NSString;
overload selector(static "mutableArrayValueForKeyPath:") = NSMutableArray, NSString;
overload selector(static "mutableBytes") = RawPointer;
overload selector(static "mutableCopy") = Id;
overload selector(static "mutableCopyWithZone:") = Id, Pointer[NSZone];
overload selector(static "mutableSetValueForKey:") = NSMutableSet, NSString;
overload selector(static "mutableSetValueForKeyPath:") = NSMutableSet, NSString;
overload selector(static "mutableString") = NSMutableString;
overload selector(static "name") = NSString;
overload selector(static "navigationBar") = UINavigationBar;
overload selector(static "navigationBar:didPopItem:") = Void, UINavigationBar, UINavigationItem;
overload selector(static "navigationBar:didPushItem:") = Void, UINavigationBar, UINavigationItem;
overload selector(static "navigationBar:shouldPopItem:") = Bool, UINavigationBar, UINavigationItem;
overload selector(static "navigationBar:shouldPushItem:") = Bool, UINavigationBar, UINavigationItem;
overload selector(static "navigationController") = UINavigationController;
overload selector(static "navigationController:didShowViewController:animated:") = Void, UINavigationController, UIViewController, Bool;
overload selector(static "navigationController:willShowViewController:animated:") = Void, UINavigationController, UIViewController, Bool;
overload selector(static "navigationItem") = UINavigationItem;
overload selector(static "needsToBeUpdatedFromPath:") = Bool, NSString;
overload selector(static "negativeFormat") = NSString;
overload selector(static "negativeInfinitySymbol") = NSString;
overload selector(static "negativePrefix") = NSString;
overload selector(static "negativeSuffix") = NSString;
overload selector(static "netService:didNotPublish:") = Void, NSNetService, NSDictionary;
overload selector(static "netService:didNotResolve:") = Void, NSNetService, NSDictionary;
overload selector(static "netService:didUpdateTXTRecordData:") = Void, NSNetService, NSData;
overload selector(static "netServiceBrowser:didFindDomain:moreComing:") = Void, NSNetServiceBrowser, NSString, Bool;
overload selector(static "netServiceBrowser:didFindService:moreComing:") = Void, NSNetServiceBrowser, NSNetService, Bool;
overload selector(static "netServiceBrowser:didNotSearch:") = Void, NSNetServiceBrowser, NSDictionary;
overload selector(static "netServiceBrowser:didRemoveDomain:moreComing:") = Void, NSNetServiceBrowser, NSString, Bool;
overload selector(static "netServiceBrowser:didRemoveService:moreComing:") = Void, NSNetServiceBrowser, NSNetService, Bool;
overload selector(static "netServiceBrowserDidStopSearch:") = Void, NSNetServiceBrowser;
overload selector(static "netServiceBrowserWillSearch:") = Void, NSNetServiceBrowser;
overload selector(static "netServiceDidPublish:") = Void, NSNetService;
overload selector(static "netServiceDidResolveAddress:") = Void, NSNetService;
overload selector(static "netServiceDidStop:") = Void, NSNetService;
overload selector(static "netServiceWillPublish:") = Void, NSNetService;
overload selector(static "netServiceWillResolve:") = Void, NSNetService;
overload selector(static "networkServiceType") = UInt;
overload selector(static "new") = Id;
overload selector(static "newlineCharacterSet") = Id;
overload selector(static "nextDaylightSavingTimeTransition") = NSDate;
overload selector(static "nextDaylightSavingTimeTransitionAfterDate:") = NSDate, NSDate;
overload selector(static "nextObject") = Id;
overload selector(static "nextResponder") = UIResponder;
overload selector(static "nibBundle") = NSBundle;
overload selector(static "nibName") = NSString;
overload selector(static "nibWithData:bundle:") = UINib, NSData, NSBundle;
overload selector(static "nibWithNibName:bundle:") = UINib, NSString, NSBundle;
overload selector(static "nilSymbol") = NSString;
overload selector(static "nonBaseCharacterSet") = Id;
overload selector(static "nonretainedObjectValue") = Id;
overload selector(static "notANumber") = NSDecimalNumber;
overload selector(static "notANumberSymbol") = NSString;
overload selector(static "notPredicateWithSubpredicate:") = NSPredicate, NSPredicate;
overload selector(static "notificationWithName:object:") = Id, NSString, Id;
overload selector(static "notificationWithName:object:userInfo:") = Id, NSString, Id, NSDictionary;
overload selector(static "null") = NSNull;
overload selector(static "numberFromString:") = NSNumber, NSString;
overload selector(static "numberOfArguments") = UInt;
overload selector(static "numberOfButtons") = Int;
overload selector(static "numberOfCaptureGroups") = UInt;
overload selector(static "numberOfComponents") = Int;
overload selector(static "numberOfComponentsInPickerView:") = Int, UIPickerView;
overload selector(static "numberOfItems") = Int;
overload selector(static "numberOfLines") = Int;
overload selector(static "numberOfMatchesInString:options:range:") = UInt, NSString, UInt, NSRange;
overload selector(static "numberOfPages") = Int;
overload selector(static "numberOfRanges") = UInt;
overload selector(static "numberOfRowsInComponent:") = Int, Int;
overload selector(static "numberOfRowsInSection:") = Int, Int;
overload selector(static "numberOfSections") = Int;
overload selector(static "numberOfSectionsInTableView:") = Int, UITableView;
overload selector(static "numberOfSegments") = UInt;
overload selector(static "numberOfTapsRequired") = Int;
overload selector(static "numberOfTouches") = UInt;
overload selector(static "numberOfTouchesRequired") = Int;
overload selector(static "numberStyle") = UInt;
overload selector(static "numberWithBool:") = NSNumber, Bool;
overload selector(static "numberWithChar:") = NSNumber, CChar;
overload selector(static "numberWithDouble:") = NSNumber, Double;
overload selector(static "numberWithFloat:") = NSNumber, Float;
overload selector(static "numberWithInt:") = NSNumber, Int;
overload selector(static "numberWithInteger:") = NSNumber, Int;
overload selector(static "numberWithLong:") = NSNumber, CLong;
overload selector(static "numberWithLongLong:") = NSNumber, Int64;
overload selector(static "numberWithShort:") = NSNumber, Short;
overload selector(static "numberWithUnsignedChar:") = NSNumber, CUChar;
overload selector(static "numberWithUnsignedInt:") = NSNumber, UInt;
overload selector(static "numberWithUnsignedInteger:") = NSNumber, UInt;
overload selector(static "numberWithUnsignedLong:") = NSNumber, CULong;
overload selector(static "numberWithUnsignedLongLong:") = NSNumber, UInt64;
overload selector(static "numberWithUnsignedShort:") = NSNumber, UShort;
overload selector(static "objCType") = Pointer[CChar];
overload selector(static "object") = Id;
overload selector(static "objectAtIndex:") = Id, UInt;
overload selector(static "objectEnumerator") = NSEnumerator;
overload selector(static "objectForInfoDictionaryKey:") = Id, NSString;
overload selector(static "objectForKey:") = Id, Id;
overload selector(static "objectIsForcedForKey:") = Bool, NSString;
overload selector(static "objectIsForcedForKey:inDomain:") = Bool, NSString, NSString;
overload selector(static "objectZone") = Pointer[NSZone];
overload selector(static "objectsAtIndexes:") = NSArray, NSIndexSet;
overload selector(static "objectsForKeys:notFoundMarker:") = NSArray, NSArray, Id;
overload selector(static "objectsPassingTest:") = NSSet, UnknownType;
overload selector(static "objectsWithOptions:passingTest:") = NSSet, UInt, UnknownType;
overload selector(static "observationInfo") = RawPointer;
overload selector(static "observeValueForKeyPath:ofObject:change:context:") = Void, NSString, Id, NSDictionary, RawPointer;
overload selector(static "offsetFromPosition:toPosition:") = Int, UITextPosition, UITextPosition;
overload selector(static "offsetInFile") = UInt64;
overload selector(static "one") = NSDecimalNumber;
overload selector(static "open") = Void;
overload selector(static "openURL:") = Bool, NSURL;
overload selector(static "operand") = NSExpression;
overload selector(static "operatingSystem") = UInt;
overload selector(static "operatingSystemName") = NSString;
overload selector(static "operatingSystemVersionString") = NSString;
overload selector(static "operationCount") = UInt;
overload selector(static "operations") = NSArray;
overload selector(static "options") = UInt;
overload selector(static "orPredicateWithSubpredicates:") = NSPredicate, NSArray;
overload selector(static "orangeColor") = UIColor;
overload selector(static "ordinalityOfUnit:inUnit:forDate:") = UInt, UInt, UInt, NSDate;
overload selector(static "orientation") = UIDeviceOrientation;
overload selector(static "orthography") = NSOrthography;
overload selector(static "orthographyCheckingResultWithRange:orthography:") = NSTextCheckingResult, NSRange, NSOrthography;
overload selector(static "orthographyWithDominantScript:languageMap:") = Id, NSString, NSDictionary;
overload selector(static "outputFormat") = UInt;
overload selector(static "outputStreamToBuffer:capacity:") = Id, Pointer[CUChar], UInt;
overload selector(static "outputStreamToFileAtPath:append:") = Id, NSString, Bool;
overload selector(static "outputStreamToMemory") = Id;
overload selector(static "outputStreamWithURL:append:") = Id, NSURL, Bool;
overload selector(static "paddingCharacter") = NSString;
overload selector(static "paddingPosition") = UInt;
overload selector(static "paragraphRangeForRange:") = NSRange, NSRange;
overload selector(static "parameterString") = NSString;
overload selector(static "parentViewController") = UIViewController;
overload selector(static "parse") = Bool;
overload selector(static "parser:didEndElement:namespaceURI:qualifiedName:") = Void, NSXMLParser, NSString, NSString, NSString;
overload selector(static "parser:didEndMappingPrefix:") = Void, NSXMLParser, NSString;
overload selector(static "parser:didStartElement:namespaceURI:qualifiedName:attributes:") = Void, NSXMLParser, NSString, NSString, NSString, NSDictionary;
overload selector(static "parser:didStartMappingPrefix:toURI:") = Void, NSXMLParser, NSString, NSString;
overload selector(static "parser:foundAttributeDeclarationWithName:forElement:type:defaultValue:") = Void, NSXMLParser, NSString, NSString, NSString, NSString;
overload selector(static "parser:foundCDATA:") = Void, NSXMLParser, NSData;
overload selector(static "parser:foundCharacters:") = Void, NSXMLParser, NSString;
overload selector(static "parser:foundComment:") = Void, NSXMLParser, NSString;
overload selector(static "parser:foundElementDeclarationWithName:model:") = Void, NSXMLParser, NSString, NSString;
overload selector(static "parser:foundExternalEntityDeclarationWithName:publicID:systemID:") = Void, NSXMLParser, NSString, NSString, NSString;
overload selector(static "parser:foundIgnorableWhitespace:") = Void, NSXMLParser, NSString;
overload selector(static "parser:foundInternalEntityDeclarationWithName:value:") = Void, NSXMLParser, NSString, NSString;
overload selector(static "parser:foundNotationDeclarationWithName:publicID:systemID:") = Void, NSXMLParser, NSString, NSString, NSString;
overload selector(static "parser:foundProcessingInstructionWithTarget:data:") = Void, NSXMLParser, NSString, NSString;
overload selector(static "parser:foundUnparsedEntityDeclarationWithName:publicID:systemID:notationName:") = Void, NSXMLParser, NSString, NSString, NSString, NSString;
overload selector(static "parser:parseErrorOccurred:") = Void, NSXMLParser, NSError;
overload selector(static "parser:resolveExternalEntityName:systemID:") = NSData, NSXMLParser, NSString, NSString;
overload selector(static "parser:validationErrorOccurred:") = Void, NSXMLParser, NSError;
overload selector(static "parserDidEndDocument:") = Void, NSXMLParser;
overload selector(static "parserDidStartDocument:") = Void, NSXMLParser;
overload selector(static "parserError") = NSError;
overload selector(static "passthroughViews") = NSArray;
overload selector(static "password") = NSString;
overload selector(static "paste:") = Void, Id;
overload selector(static "pasteboardTypes") = NSArray;
overload selector(static "pasteboardTypesForItemSet:") = NSArray, NSIndexSet;
overload selector(static "pasteboardWithName:create:") = UIPasteboard, NSString, Bool;
overload selector(static "pasteboardWithUniqueName") = UIPasteboard;
overload selector(static "path") = NSString;
overload selector(static "pathComponents") = NSArray;
overload selector(static "pathContentOfSymbolicLinkAtPath:") = NSString, NSString;
overload selector(static "pathExtension") = NSString;
overload selector(static "pathForAuxiliaryExecutable:") = NSString, NSString;
overload selector(static "pathForResource:ofType:") = NSString, NSString, NSString;
overload selector(static "pathForResource:ofType:inDirectory:") = NSString, NSString, NSString, NSString;
overload selector(static "pathForResource:ofType:inDirectory:forLocalization:") = NSString, NSString, NSString, NSString, NSString;
overload selector(static "pathWithComponents:") = NSString, NSArray;
overload selector(static "pathsForResourcesOfType:inDirectory:") = NSArray, NSString, NSString;
overload selector(static "pathsForResourcesOfType:inDirectory:forLocalization:") = NSArray, NSString, NSString, NSString;
overload selector(static "pathsMatchingExtensions:") = NSArray, NSArray;
overload selector(static "pattern") = NSString;
overload selector(static "perMillSymbol") = NSString;
overload selector(static "percentSymbol") = NSString;
overload selector(static "performSelector:") = Id, SelectorHandle;
overload selector(static "performSelector:onThread:withObject:waitUntilDone:") = Void, SelectorHandle, NSThread, Id, Bool;
overload selector(static "performSelector:onThread:withObject:waitUntilDone:modes:") = Void, SelectorHandle, NSThread, Id, Bool, NSArray;
overload selector(static "performSelector:target:argument:order:modes:") = Void, SelectorHandle, Id, Id, UInt, NSArray;
overload selector(static "performSelector:withObject:") = Id, SelectorHandle, Id;
overload selector(static "performSelector:withObject:afterDelay:") = Void, SelectorHandle, Id, Double;
overload selector(static "performSelector:withObject:afterDelay:inModes:") = Void, SelectorHandle, Id, Double, NSArray;
overload selector(static "performSelector:withObject:withObject:") = Id, SelectorHandle, Id, Id;
overload selector(static "performSelectorInBackground:withObject:") = Void, SelectorHandle, Id;
overload selector(static "performSelectorOnMainThread:withObject:waitUntilDone:") = Void, SelectorHandle, Id, Bool;
overload selector(static "performSelectorOnMainThread:withObject:waitUntilDone:modes:") = Void, SelectorHandle, Id, Bool, NSArray;
overload selector(static "persistence") = UInt;
overload selector(static "persistentDomainForName:") = NSDictionary, NSString;
overload selector(static "persistentDomainNames") = NSArray;
overload selector(static "phase") = UITouchPhase;
overload selector(static "phoneNumber") = NSString;
overload selector(static "phoneNumberCheckingResultWithRange:phoneNumber:") = NSTextCheckingResult, NSRange, NSString;
overload selector(static "physicalMemory") = UInt64;
overload selector(static "pickerView:accessibilityHintForComponent:") = NSString, UIPickerView, Int;
overload selector(static "pickerView:accessibilityLabelForComponent:") = NSString, UIPickerView, Int;
overload selector(static "pickerView:didSelectRow:inComponent:") = Void, UIPickerView, Int, Int;
overload selector(static "pickerView:numberOfRowsInComponent:") = Int, UIPickerView, Int;
overload selector(static "pickerView:rowHeightForComponent:") = Float, UIPickerView, Int;
overload selector(static "pickerView:titleForRow:forComponent:") = NSString, UIPickerView, Int, Int;
overload selector(static "pickerView:viewForRow:forComponent:reusingView:") = UIView, UIPickerView, Int, Int, UIView;
overload selector(static "pickerView:widthForComponent:") = Float, UIPickerView, Int;
overload selector(static "pipe") = Id;
overload selector(static "pixelAspectRatio") = Float;
overload selector(static "placeholder") = NSString;
overload selector(static "placeholderRectForBounds:") = CGRect, CGRect;
overload selector(static "plusSign") = NSString;
overload selector(static "pointInside:withEvent:") = Bool, CGPoint, UIEvent;
overload selector(static "pointSize") = Float;
overload selector(static "pointerValue") = RawPointer;
overload selector(static "popNavigationItemAnimated:") = UINavigationItem, Bool;
overload selector(static "popToRootViewControllerAnimated:") = NSArray, Bool;
overload selector(static "popToViewController:animated:") = NSArray, UIViewController, Bool;
overload selector(static "popViewControllerAnimated:") = UIViewController, Bool;
overload selector(static "popoverArrowDirection") = UInt;
overload selector(static "popoverContentSize") = CGSize;
overload selector(static "popoverControllerDidDismissPopover:") = Void, UIPopoverController;
overload selector(static "popoverControllerShouldDismissPopover:") = Bool, UIPopoverController;
overload selector(static "port") = Id;
overload selector(static "portList") = NSArray;
overload selector(static "portWithMachPort:") = NSPort, UInt;
overload selector(static "portWithMachPort:options:") = NSPort, UInt, UInt;
overload selector(static "positionFromPosition:inDirection:offset:") = UITextPosition, UITextPosition, UITextLayoutDirection, Int;
overload selector(static "positionFromPosition:offset:") = UITextPosition, UITextPosition, Int;
overload selector(static "positionFromPosition:toBoundary:inDirection:") = UITextPosition, UITextPosition, UITextGranularity, Int;
overload selector(static "positionWithinRange:atCharacterOffset:") = UITextPosition, UITextRange, Int;
overload selector(static "positionWithinRange:farthestInDirection:") = UITextPosition, UITextRange, UITextLayoutDirection;
overload selector(static "positiveFormat") = NSString;
overload selector(static "positiveInfinitySymbol") = NSString;
overload selector(static "positivePrefix") = NSString;
overload selector(static "positiveSuffix") = NSString;
overload selector(static "possibleTitles") = NSSet;
overload selector(static "postNotification:") = Void, NSNotification;
overload selector(static "postNotificationName:object:") = Void, NSString, Id;
overload selector(static "postNotificationName:object:userInfo:") = Void, NSString, Id, NSDictionary;
overload selector(static "precomposedStringWithCanonicalMapping") = NSString;
overload selector(static "precomposedStringWithCompatibilityMapping") = NSString;
overload selector(static "predicate") = NSPredicate;
overload selector(static "predicateFormat") = NSString;
overload selector(static "predicateOperatorType") = UInt;
overload selector(static "predicateWithBlock:") = NSPredicate, UnknownType;
overload varargSelector(static "predicateWithFormat:") = NSPredicate, NSString;
overload selector(static "predicateWithFormat:argumentArray:") = NSPredicate, NSString, NSArray;
overload selector(static "predicateWithFormat:arguments:") = NSPredicate, NSString, va_list;
overload selector(static "predicateWithLeftExpression:rightExpression:customSelector:") = NSPredicate, NSExpression, NSExpression, SelectorHandle;
overload selector(static "predicateWithLeftExpression:rightExpression:modifier:type:options:") = NSPredicate, NSExpression, NSExpression, UInt, UInt, UInt;
overload selector(static "predicateWithSubstitutionVariables:") = NSPredicate, NSDictionary;
overload selector(static "predicateWithValue:") = NSPredicate, Bool;
overload selector(static "preferredFilename") = NSString;
overload selector(static "preferredLanguages") = NSArray;
overload selector(static "preferredLocalizations") = NSArray;
overload selector(static "preferredLocalizationsFromArray:") = NSArray, NSArray;
overload selector(static "preferredLocalizationsFromArray:forPreferences:") = NSArray, NSArray, NSArray;
overload selector(static "preflightAndReturnError:") = Bool, Pointer[NSError];
overload selector(static "prepareForReuse") = Void;
overload selector(static "prepareWithInvocationTarget:") = Id, Id;
overload selector(static "presentLocalNotificationNow:") = Void, UILocalNotification;
overload selector(static "presentModalViewController:animated:") = Void, UIViewController, Bool;
overload selector(static "presentOpenInMenuFromBarButtonItem:animated:") = Bool, UIBarButtonItem, Bool;
overload selector(static "presentOpenInMenuFromRect:inView:animated:") = Bool, CGRect, UIView, Bool;
overload selector(static "presentOptionsMenuFromBarButtonItem:animated:") = Bool, UIBarButtonItem, Bool;
overload selector(static "presentOptionsMenuFromRect:inView:animated:") = Bool, CGRect, UIView, Bool;
overload selector(static "presentPopoverFromBarButtonItem:permittedArrowDirections:animated:") = Void, UIBarButtonItem, UInt, Bool;
overload selector(static "presentPopoverFromRect:inView:permittedArrowDirections:animated:") = Void, CGRect, UIView, UInt, Bool;
overload selector(static "presentPreviewAnimated:") = Bool, Bool;
overload selector(static "previousFailureCount") = Int;
overload selector(static "previousLocationInView:") = CGPoint, UIView;
overload selector(static "principalClass") = Id;
overload selector(static "privateFrameworksPath") = NSString;
overload selector(static "privateFrameworksURL") = NSURL;
overload selector(static "processIdentifier") = Int;
overload selector(static "processInfo") = NSProcessInfo;
overload selector(static "processName") = NSString;
overload selector(static "processorCount") = UInt;
overload selector(static "progress") = Float;
overload selector(static "progressViewStyle") = UIProgressViewStyle;
overload selector(static "prompt") = NSString;
overload selector(static "properties") = NSDictionary;
overload selector(static "propertyForKey:") = Id, NSString;
overload selector(static "propertyForKey:inRequest:") = Id, NSString, NSURLRequest;
overload selector(static "propertyList") = Id;
overload selector(static "propertyList:isValidForFormat:") = Bool, Id, UInt;
overload selector(static "propertyListFromData:mutabilityOption:format:errorDescription:") = Id, NSData, UInt, Pointer[UInt], Pointer[NSString];
overload selector(static "propertyListFromStringsFileFormat") = NSDictionary;
overload selector(static "propertyListWithData:options:format:error:") = Id, NSData, UInt, Pointer[UInt], Pointer[NSError];
overload selector(static "propertyListWithStream:options:format:error:") = Id, NSInputStream, UInt, Pointer[UInt], Pointer[NSError];
overload selector(static "proposedCredential") = NSURLCredential;
overload selector(static "protectionSpace") = NSURLProtectionSpace;
overload selector(static "protocol") = NSString;
overload selector(static "proximityState") = Bool;
overload selector(static "proxyType") = NSString;
overload selector(static "publicID") = NSString;
overload selector(static "publish") = Void;
overload selector(static "publishWithOptions:") = Void, UInt;
overload selector(static "punctuationCharacterSet") = Id;
overload selector(static "purpleColor") = UIColor;
overload selector(static "pushNavigationItem:animated:") = Void, UINavigationItem, Bool;
overload selector(static "pushViewController:animated:") = Void, UIViewController, Bool;
overload selector(static "quarter") = Int;
overload selector(static "quarterSymbols") = NSArray;
overload selector(static "query") = NSString;
overload selector(static "queuePriority") = Int;
overload selector(static "quoteCheckingResultWithRange:replacementString:") = NSTextCheckingResult, NSRange, NSString;
overload selector(static "raise") = Void;
overload varargSelector(static "raise:format:") = Void, NSString, NSString;
overload selector(static "raise:format:arguments:") = Void, NSString, NSString, va_list;
overload selector(static "range") = NSRange;
overload selector(static "rangeAtIndex:") = NSRange, UInt;
overload selector(static "rangeEnclosingPosition:withGranularity:inDirection:") = UITextRange, UITextPosition, UITextGranularity, Int;
overload selector(static "rangeOfCharacterFromSet:") = NSRange, NSCharacterSet;
overload selector(static "rangeOfCharacterFromSet:options:") = NSRange, NSCharacterSet, UInt;
overload selector(static "rangeOfCharacterFromSet:options:range:") = NSRange, NSCharacterSet, UInt, NSRange;
overload selector(static "rangeOfComposedCharacterSequenceAtIndex:") = NSRange, UInt;
overload selector(static "rangeOfComposedCharacterSequencesForRange:") = NSRange, NSRange;
overload selector(static "rangeOfData:options:range:") = NSRange, NSData, UInt, NSRange;
overload selector(static "rangeOfFirstMatchInString:options:range:") = NSRange, NSString, UInt, NSRange;
overload selector(static "rangeOfString:") = NSRange, NSString;
overload selector(static "rangeOfString:options:") = NSRange, NSString, UInt;
overload selector(static "rangeOfString:options:range:") = NSRange, NSString, UInt, NSRange;
overload selector(static "rangeOfString:options:range:locale:") = NSRange, NSString, UInt, NSRange, NSLocale;
overload selector(static "rangeOfUnit:inUnit:forDate:") = NSRange, UInt, UInt, NSDate;
overload selector(static "rangeOfUnit:startDate:interval:forDate:") = Bool, UInt, Pointer[NSDate], Pointer[Double], NSDate;
overload selector(static "rangeValue") = NSRange;
overload selector(static "read:maxLength:") = Int, Pointer[CUChar], UInt;
overload selector(static "readDataOfLength:") = NSData, UInt;
overload selector(static "readDataToEndOfFile") = NSData;
overload selector(static "readFromURL:options:error:") = Bool, NSURL, UInt, Pointer[NSError];
overload selector(static "readInBackgroundAndNotify") = Void;
overload selector(static "readInBackgroundAndNotifyForModes:") = Void, NSArray;
overload selector(static "readToEndOfFileInBackgroundAndNotify") = Void;
overload selector(static "readToEndOfFileInBackgroundAndNotifyForModes:") = Void, NSArray;
overload selector(static "realm") = NSString;
overload selector(static "reason") = NSString;
overload selector(static "receivesCredentialSecurely") = Bool;
overload selector(static "recoveryAttempter") = Id;
overload selector(static "rectForFooterInSection:") = CGRect, Int;
overload selector(static "rectForHeaderInSection:") = CGRect, Int;
overload selector(static "rectForRowAtIndexPath:") = CGRect, NSIndexPath;
overload selector(static "rectForSection:") = CGRect, Int;
overload selector(static "redColor") = UIColor;
overload selector(static "redo") = Void;
overload selector(static "redoActionName") = NSString;
overload selector(static "redoMenuItemTitle") = NSString;
overload selector(static "redoMenuTitleForUndoActionName:") = NSString, NSString;
overload selector(static "registerClass:") = Bool, Id;
overload selector(static "registerDefaults:") = Void, NSDictionary;
overload selector(static "registerForRemoteNotificationTypes:") = Void, UIRemoteNotificationType;
overload selector(static "registerUndoWithTarget:selector:object:") = Void, Id, SelectorHandle, Id;
overload selector(static "regularExpression") = NSRegularExpression;
overload selector(static "regularExpressionCheckingResultWithRanges:count:regularExpression:") = NSTextCheckingResult, NSRangePointer, UInt, NSRegularExpression;
overload selector(static "regularExpressionWithPattern:options:error:") = NSRegularExpression, NSString, UInt, Pointer[NSError];
overload selector(static "regularFileContents") = NSData;
overload selector(static "relativePath") = NSString;
overload selector(static "relativeString") = NSString;
overload selector(static "release") = Void;
overload selector(static "reload") = Void;
overload selector(static "reloadAllComponents") = Void;
overload selector(static "reloadComponent:") = Void, Int;
overload selector(static "reloadData") = Void;
overload selector(static "reloadInputViews") = Void;
overload selector(static "reloadRowsAtIndexPaths:withRowAnimation:") = Void, NSArray, UITableViewRowAnimation;
overload selector(static "reloadSectionIndexTitles") = Void;
overload selector(static "reloadSections:withRowAnimation:") = Void, NSIndexSet, UITableViewRowAnimation;
overload selector(static "remoteControlReceivedWithEvent:") = Void, UIEvent;
overload selector(static "removeAllActions") = Void;
overload selector(static "removeAllActionsWithTarget:") = Void, Id;
overload selector(static "removeAllCachedResponses") = Void;
overload selector(static "removeAllIndexes") = Void;
overload selector(static "removeAllObjects") = Void;
overload selector(static "removeAllPoints") = Void;
overload selector(static "removeAllSegments") = Void;
overload selector(static "removeAttribute:range:") = Void, NSString, NSRange;
overload selector(static "removeCachedResponseForRequest:") = Void, NSURLRequest;
overload selector(static "removeCharactersInRange:") = Void, NSRange;
overload selector(static "removeCharactersInString:") = Void, NSString;
overload selector(static "removeCredential:forProtectionSpace:") = Void, NSURLCredential, NSURLProtectionSpace;
overload selector(static "removeDependency:") = Void, NSOperation;
overload selector(static "removeFileWrapper:") = Void, NSFileWrapper;
overload selector(static "removeFromRunLoop:forMode:") = Void, NSRunLoop, NSString;
overload selector(static "removeFromSuperview") = Void;
overload selector(static "removeGestureRecognizer:") = Void, UIGestureRecognizer;
overload selector(static "removeIndex:") = Void, UInt;
overload selector(static "removeIndexes:") = Void, NSIndexSet;
overload selector(static "removeIndexesInRange:") = Void, NSRange;
overload selector(static "removeItemAtPath:error:") = Bool, NSString, Pointer[NSError];
overload selector(static "removeItemAtURL:error:") = Bool, NSURL, Pointer[NSError];
overload selector(static "removeLastObject") = Void;
overload selector(static "removeObject:") = Void, Id;
overload selector(static "removeObject:inRange:") = Void, Id, NSRange;
overload selector(static "removeObjectAtIndex:") = Void, UInt;
overload selector(static "removeObjectForKey:") = Void, Id;
overload selector(static "removeObjectIdenticalTo:") = Void, Id;
overload selector(static "removeObjectIdenticalTo:inRange:") = Void, Id, NSRange;
overload selector(static "removeObjectsAtIndexes:") = Void, NSIndexSet;
overload selector(static "removeObjectsForKeys:") = Void, NSArray;
overload selector(static "removeObjectsFromIndices:numIndices:") = Void, Pointer[UInt], UInt;
overload selector(static "removeObjectsInArray:") = Void, NSArray;
overload selector(static "removeObjectsInRange:") = Void, NSRange;
overload selector(static "removeObserver:") = Void, Id;
overload selector(static "removeObserver:forKeyPath:") = Void, NSObject, NSString;
overload selector(static "removeObserver:fromObjectsAtIndexes:forKeyPath:") = Void, NSObject, NSIndexSet, NSString;
overload selector(static "removeObserver:name:object:") = Void, Id, NSString, Id;
overload selector(static "removePasteboardWithName:") = Void, NSString;
overload selector(static "removePersistentDomainForName:") = Void, NSString;
overload selector(static "removePort:forMode:") = Void, NSPort, NSString;
overload selector(static "removePropertyForKey:inRequest:") = Void, NSString, NSMutableURLRequest;
overload selector(static "removeSegmentAtIndex:animated:") = Void, UInt, Bool;
overload selector(static "removeSuiteNamed:") = Void, NSString;
overload selector(static "removeTarget:action:") = Void, Id, SelectorHandle;
overload selector(static "removeTarget:action:forControlEvents:") = Void, Id, SelectorHandle, UInt;
overload selector(static "removeVolatileDomainForName:") = Void, NSString;
overload selector(static "repeatCalendar") = NSCalendar;
overload selector(static "repeatInterval") = UInt;
overload selector(static "replaceBytesInRange:withBytes:") = Void, NSRange, RawPointer;
overload selector(static "replaceBytesInRange:withBytes:length:") = Void, NSRange, RawPointer, UInt;
overload selector(static "replaceCharactersInRange:withAttributedString:") = Void, NSRange, NSAttributedString;
overload selector(static "replaceCharactersInRange:withString:") = Void, NSRange, NSString;
overload selector(static "replaceItemAtURL:withItemAtURL:backupItemName:options:resultingItemURL:error:") = Bool, NSURL, NSURL, NSString, UInt, Pointer[NSURL], Pointer[NSError];
overload selector(static "replaceMatchesInString:options:range:withTemplate:") = UInt, NSMutableString, UInt, NSRange, NSString;
overload selector(static "replaceObjectAtIndex:withObject:") = Void, UInt, Id;
overload selector(static "replaceObjectsAtIndexes:withObjects:") = Void, NSIndexSet, NSArray;
overload selector(static "replaceObjectsInRange:withObjectsFromArray:") = Void, NSRange, NSArray;
overload selector(static "replaceObjectsInRange:withObjectsFromArray:range:") = Void, NSRange, NSArray, NSRange;
overload selector(static "replaceOccurrencesOfString:withString:options:range:") = UInt, NSString, NSString, UInt, NSRange;
overload selector(static "replaceRange:withText:") = Void, UITextRange, NSString;
overload selector(static "replacementCheckingResultWithRange:replacementString:") = NSTextCheckingResult, NSRange, NSString;
overload selector(static "replacementObjectForCoder:") = Id, NSCoder;
overload selector(static "replacementObjectForKeyedArchiver:") = Id, NSKeyedArchiver;
overload selector(static "replacementString") = NSString;
overload selector(static "replacementStringForResult:inString:offset:template:") = NSString, NSTextCheckingResult, NSString, Int, NSString;
overload selector(static "request") = NSURLRequest;
overload selector(static "requestHeaderFieldsWithCookies:") = NSDictionary, NSArray;
overload selector(static "requestIsCacheEquivalent:toRequest:") = Bool, NSURLRequest, NSURLRequest;
overload selector(static "requestWithURL:") = Id, NSURL;
overload selector(static "requestWithURL:cachePolicy:timeoutInterval:") = Id, NSURL, UInt, Double;
overload selector(static "requireGestureRecognizerToFail:") = Void, UIGestureRecognizer;
overload selector(static "reservedSpaceLength") = UInt;
overload selector(static "resetBytesInRange:") = Void, NSRange;
overload selector(static "resetStandardUserDefaults") = Void;
overload selector(static "resetSystemTimeZone") = Void;
overload selector(static "resignFirstResponder") = Bool;
overload selector(static "resignKeyWindow") = Void;
overload selector(static "resolve") = Void;
overload selector(static "resolveClassMethod:") = Bool, SelectorHandle;
overload selector(static "resolveInstanceMethod:") = Bool, SelectorHandle;
overload selector(static "resolveWithTimeout:") = Void, Double;
overload selector(static "resourcePath") = NSString;
overload selector(static "resourceSpecifier") = NSString;
overload selector(static "resourceURL") = NSURL;
overload selector(static "resourceValuesForKeys:error:") = NSDictionary, NSArray, Pointer[NSError];
overload selector(static "resourceValuesForKeys:fromBookmarkData:") = NSDictionary, NSArray, NSData;
overload selector(static "respondsToSelector:") = Bool, SelectorHandle;
overload selector(static "response") = NSURLResponse;
overload selector(static "result") = Id;
overload selector(static "resultType") = UInt64;
overload selector(static "retain") = Id;
overload selector(static "retainArguments") = Void;
overload selector(static "retainCount") = UInt;
overload selector(static "returnKeyType") = UIReturnKeyType;
overload selector(static "reuseIdentifier") = NSString;
overload selector(static "reverseObjectEnumerator") = NSEnumerator;
overload selector(static "reverseTransformedValue:") = Id, Id;
overload selector(static "reversedSortDescriptor") = Id;
overload selector(static "reversesTitleShadowWhenHighlighted") = Bool;
overload selector(static "rightBarButtonItem") = UIBarButtonItem;
overload selector(static "rightExpression") = NSExpression;
overload selector(static "rightView") = UIView;
overload selector(static "rightViewMode") = UITextFieldViewMode;
overload selector(static "rightViewRectForBounds:") = CGRect, CGRect;
overload selector(static "rootViewController") = UIViewController;
overload selector(static "rotatingFooterView") = UIView;
overload selector(static "rotatingHeaderView") = UIView;
overload selector(static "rotation") = Float;
overload selector(static "roundingIncrement") = NSNumber;
overload selector(static "roundingMode") = UInt;
overload selector(static "row") = UInt;
overload selector(static "rowHeight") = Float;
overload selector(static "rowSizeForComponent:") = CGSize, Int;
overload selector(static "run") = Void;
overload selector(static "runLoopModes") = NSArray;
overload selector(static "runMode:beforeDate:") = Bool, NSString, NSDate;
overload selector(static "runUntilDate:") = Void, NSDate;
overload selector(static "scale") = Short;
overload selector(static "scalesPageToFit") = Bool;
overload selector(static "scanCharactersFromSet:intoString:") = Bool, NSCharacterSet, Pointer[NSString];
overload selector(static "scanDecimal:") = Bool, Pointer[NSDecimal];
overload selector(static "scanDouble:") = Bool, Pointer[Double];
overload selector(static "scanFloat:") = Bool, Pointer[Float];
overload selector(static "scanHexDouble:") = Bool, Pointer[Double];
overload selector(static "scanHexFloat:") = Bool, Pointer[Float];
overload selector(static "scanHexInt:") = Bool, Pointer[UInt];
overload selector(static "scanHexLongLong:") = Bool, Pointer[UInt64];
overload selector(static "scanInt:") = Bool, Pointer[Int];
overload selector(static "scanInteger:") = Bool, Pointer[Int];
overload selector(static "scanLocation") = UInt;
overload selector(static "scanLongLong:") = Bool, Pointer[Int64];
overload selector(static "scanString:intoString:") = Bool, NSString, Pointer[NSString];
overload selector(static "scanUpToCharactersFromSet:intoString:") = Bool, NSCharacterSet, Pointer[NSString];
overload selector(static "scanUpToString:intoString:") = Bool, NSString, Pointer[NSString];
overload selector(static "scannerWithString:") = Id, NSString;
overload selector(static "scheduleInRunLoop:forMode:") = Void, NSRunLoop, NSString;
overload selector(static "scheduleLocalNotification:") = Void, UILocalNotification;
overload selector(static "scheduledLocalNotifications") = NSArray;
overload selector(static "scheduledTimerWithTimeInterval:invocation:repeats:") = NSTimer, Double, NSInvocation, Bool;
overload selector(static "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:") = NSTimer, Double, Id, SelectorHandle, Id, Bool;
overload selector(static "scheme") = NSString;
overload selector(static "scopeButtonTitles") = NSArray;
overload selector(static "screen") = UIScreen;
overload selector(static "screens") = NSArray;
overload selector(static "scrollIndicatorInsets") = UIEdgeInsets;
overload selector(static "scrollRangeToVisible:") = Void, NSRange;
overload selector(static "scrollRectToVisible:animated:") = Void, CGRect, Bool;
overload selector(static "scrollToNearestSelectedRowAtScrollPosition:animated:") = Void, UITableViewScrollPosition, Bool;
overload selector(static "scrollToRowAtIndexPath:atScrollPosition:animated:") = Void, NSIndexPath, UITableViewScrollPosition, Bool;
overload selector(static "scrollViewDidEndDecelerating:") = Void, UIScrollView;
overload selector(static "scrollViewDidEndDragging:willDecelerate:") = Void, UIScrollView, Bool;
overload selector(static "scrollViewDidEndScrollingAnimation:") = Void, UIScrollView;
overload selector(static "scrollViewDidEndZooming:withView:atScale:") = Void, UIScrollView, UIView, Float;
overload selector(static "scrollViewDidScroll:") = Void, UIScrollView;
overload selector(static "scrollViewDidScrollToTop:") = Void, UIScrollView;
overload selector(static "scrollViewDidZoom:") = Void, UIScrollView;
overload selector(static "scrollViewShouldScrollToTop:") = Bool, UIScrollView;
overload selector(static "scrollViewTexturedBackgroundColor") = UIColor;
overload selector(static "scrollViewWillBeginDecelerating:") = Void, UIScrollView;
overload selector(static "scrollViewWillBeginDragging:") = Void, UIScrollView;
overload selector(static "scrollViewWillBeginZooming:withView:") = Void, UIScrollView, UIView;
overload selector(static "scrollsToTop") = Bool;
overload selector(static "searchBar") = UISearchBar;
overload selector(static "searchBar:selectedScopeButtonIndexDidChange:") = Void, UISearchBar, Int;
overload selector(static "searchBar:shouldChangeTextInRange:replacementText:") = Bool, UISearchBar, NSRange, NSString;
overload selector(static "searchBar:textDidChange:") = Void, UISearchBar, NSString;
overload selector(static "searchBarBookmarkButtonClicked:") = Void, UISearchBar;
overload selector(static "searchBarCancelButtonClicked:") = Void, UISearchBar;
overload selector(static "searchBarResultsListButtonClicked:") = Void, UISearchBar;
overload selector(static "searchBarSearchButtonClicked:") = Void, UISearchBar;
overload selector(static "searchBarShouldBeginEditing:") = Bool, UISearchBar;
overload selector(static "searchBarShouldEndEditing:") = Bool, UISearchBar;
overload selector(static "searchBarTextDidBeginEditing:") = Void, UISearchBar;
overload selector(static "searchBarTextDidEndEditing:") = Void, UISearchBar;
overload selector(static "searchContentsController") = UIViewController;
overload selector(static "searchDisplayController") = UISearchDisplayController;
overload selector(static "searchDisplayController:didHideSearchResultsTableView:") = Void, UISearchDisplayController, UITableView;
overload selector(static "searchDisplayController:didLoadSearchResultsTableView:") = Void, UISearchDisplayController, UITableView;
overload selector(static "searchDisplayController:didShowSearchResultsTableView:") = Void, UISearchDisplayController, UITableView;
overload selector(static "searchDisplayController:shouldReloadTableForSearchScope:") = Bool, UISearchDisplayController, Int;
overload selector(static "searchDisplayController:shouldReloadTableForSearchString:") = Bool, UISearchDisplayController, NSString;
overload selector(static "searchDisplayController:willHideSearchResultsTableView:") = Void, UISearchDisplayController, UITableView;
overload selector(static "searchDisplayController:willShowSearchResultsTableView:") = Void, UISearchDisplayController, UITableView;
overload selector(static "searchDisplayController:willUnloadSearchResultsTableView:") = Void, UISearchDisplayController, UITableView;
overload selector(static "searchDisplayControllerDidBeginSearch:") = Void, UISearchDisplayController;
overload selector(static "searchDisplayControllerDidEndSearch:") = Void, UISearchDisplayController;
overload selector(static "searchDisplayControllerWillBeginSearch:") = Void, UISearchDisplayController;
overload selector(static "searchDisplayControllerWillEndSearch:") = Void, UISearchDisplayController;
overload selector(static "searchForBrowsableDomains") = Void;
overload selector(static "searchForRegistrationDomains") = Void;
overload selector(static "searchForServicesOfType:inDomain:") = Void, NSString, NSString;
overload selector(static "searchResultsDataSource") = Id;
overload selector(static "searchResultsDelegate") = Id;
overload selector(static "searchResultsTableView") = UITableView;
overload selector(static "second") = Int;
overload selector(static "secondaryGroupingSize") = UInt;
overload selector(static "secondsFromGMT") = Int;
overload selector(static "secondsFromGMTForDate:") = Int, NSDate;
overload selector(static "section") = UInt;
overload selector(static "sectionFooterHeight") = Float;
overload selector(static "sectionForObject:collationStringSelector:") = Int, Id, SelectorHandle;
overload selector(static "sectionForSectionIndexTitleAtIndex:") = Int, Int;
overload selector(static "sectionHeaderHeight") = Float;
overload selector(static "sectionIndexMinimumDisplayRowCount") = Int;
overload selector(static "sectionIndexTitles") = NSArray;
overload selector(static "sectionIndexTitlesForTableView:") = NSArray, UITableView;
overload selector(static "sectionTitles") = NSArray;
overload selector(static "seekToEndOfFile") = UInt64;
overload selector(static "seekToFileOffset:") = Void, UInt64;
overload selector(static "segmentedControlStyle") = UISegmentedControlStyle;
overload selector(static "select:") = Void, Id;
overload selector(static "selectAll:") = Void, Id;
overload selector(static "selectRow:inComponent:animated:") = Void, Int, Int, Bool;
overload selector(static "selectRowAtIndexPath:animated:scrollPosition:") = Void, NSIndexPath, Bool, UITableViewScrollPosition;
overload selector(static "selectedBackgroundView") = UIView;
overload selector(static "selectedImage") = UIImage;
overload selector(static "selectedIndex") = UInt;
overload selector(static "selectedItem") = UITabBarItem;
overload selector(static "selectedRange") = NSRange;
overload selector(static "selectedRowInComponent:") = Int, Int;
overload selector(static "selectedScopeButtonIndex") = Int;
overload selector(static "selectedSegmentIndex") = Int;
overload selector(static "selectedTextColor") = UIColor;
overload selector(static "selectedTextRange") = UITextRange;
overload selector(static "selectedViewController") = UIViewController;
overload selector(static "selectionAffinity") = UITextStorageDirection;
overload selector(static "selectionDidChange:") = Void, Id;
overload selector(static "selectionStyle") = UITableViewCellSelectionStyle;
overload selector(static "selectionWillChange:") = Void, Id;
overload selector(static "selector") = SelectorHandle;
overload selector(static "self") = Id;
overload selector(static "sendAction:to:forEvent:") = Void, SelectorHandle, Id, UIEvent;
overload selector(static "sendAction:to:from:forEvent:") = Bool, SelectorHandle, Id, Id, UIEvent;
overload selector(static "sendActionsForControlEvents:") = Void, UInt;
overload selector(static "sendBeforeDate:components:from:reserved:") = Bool, NSDate, NSMutableArray, NSPort, UInt;
overload selector(static "sendBeforeDate:msgid:components:from:reserved:") = Bool, NSDate, UInt, NSMutableArray, NSPort, UInt;
overload selector(static "sendEvent:") = Void, UIEvent;
overload selector(static "sendSubviewToBack:") = Void, UIView;
overload selector(static "sendSynchronousRequest:returningResponse:error:") = NSData, NSURLRequest, Pointer[NSURLResponse], Pointer[NSError];
overload selector(static "sender") = Id;
overload selector(static "separatorColor") = UIColor;
overload selector(static "separatorStyle") = UITableViewCellSeparatorStyle;
overload selector(static "serializedRepresentation") = NSData;
overload selector(static "serverTrust") = SecTrustRef;
overload selector(static "set") = Id;
overload selector(static "setAMSymbol:") = Void, NSString;
overload selector(static "setAbbreviationDictionary:") = Void, NSDictionary;
overload selector(static "setAccessibilityContainer:") = Void, Id;
overload selector(static "setAccessibilityFrame:") = Void, CGRect;
overload selector(static "setAccessibilityHint:") = Void, NSString;
overload selector(static "setAccessibilityLabel:") = Void, NSString;
overload selector(static "setAccessibilityLanguage:") = Void, NSString;
overload selector(static "setAccessibilityTraits:") = Void, UInt64;
overload selector(static "setAccessibilityValue:") = Void, NSString;
overload selector(static "setAccessoryAction:") = Void, SelectorHandle;
overload selector(static "setAccessoryType:") = Void, UITableViewCellAccessoryType;
overload selector(static "setAccessoryView:") = Void, UIView;
overload selector(static "setAction:") = Void, SelectorHandle;
overload selector(static "setActionName:") = Void, NSString;
overload selector(static "setActionSheetStyle:") = Void, UIActionSheetStyle;
overload selector(static "setActive:") = Void, Bool;
overload selector(static "setActive:animated:") = Void, Bool, Bool;
overload selector(static "setActivityIndicatorViewStyle:") = Void, UIActivityIndicatorViewStyle;
overload selector(static "setAdjustsFontSizeToFitWidth:") = Void, Bool;
overload selector(static "setAdjustsImageWhenDisabled:") = Void, Bool;
overload selector(static "setAdjustsImageWhenHighlighted:") = Void, Bool;
overload selector(static "setAlertAction:") = Void, NSString;
overload selector(static "setAlertBody:") = Void, NSString;
overload selector(static "setAlertLaunchImage:") = Void, NSString;
overload selector(static "setAllHTTPHeaderFields:") = Void, NSDictionary;
overload selector(static "setAllowableMovement:") = Void, Float;
overload selector(static "setAllowsEditing:") = Void, Bool;
overload selector(static "setAllowsFloats:") = Void, Bool;
overload selector(static "setAllowsImageEditing:") = Void, Bool;
overload selector(static "setAllowsInlineMediaPlayback:") = Void, Bool;
overload selector(static "setAllowsSelection:") = Void, Bool;
overload selector(static "setAllowsSelectionDuringEditing:") = Void, Bool;
overload selector(static "setAlpha:") = Void, Float;
overload selector(static "setAlwaysBounceHorizontal:") = Void, Bool;
overload selector(static "setAlwaysBounceVertical:") = Void, Bool;
overload selector(static "setAlwaysShowsDecimalSeparator:") = Void, Bool;
overload selector(static "setAnimationBeginsFromCurrentState:") = Void, Bool;
overload selector(static "setAnimationCurve:") = Void, UIViewAnimationCurve;
overload selector(static "setAnimationDelay:") = Void, Double;
overload selector(static "setAnimationDelegate:") = Void, Id;
overload selector(static "setAnimationDidStopSelector:") = Void, SelectorHandle;
overload selector(static "setAnimationDuration:") = Void, Double;
overload selector(static "setAnimationImages:") = Void, NSArray;
overload selector(static "setAnimationRepeatAutoreverses:") = Void, Bool;
overload selector(static "setAnimationRepeatCount:") = Void, Float;
overload selector(static "setAnimationStartDate:") = Void, NSDate;
overload selector(static "setAnimationTransition:forView:cache:") = Void, UIViewAnimationTransition, UIView, Bool;
overload selector(static "setAnimationWillStartSelector:") = Void, SelectorHandle;
overload selector(static "setAnimationsEnabled:") = Void, Bool;
overload selector(static "setAnnotation:") = Void, Id;
overload selector(static "setApplicationIconBadgeNumber:") = Void, Int;
overload selector(static "setApplicationSupportsShakeToEdit:") = Void, Bool;
overload selector(static "setArgument:atIndex:") = Void, RawPointer, Int;
overload selector(static "setArray:") = Void, NSArray;
overload selector(static "setArrowDirection:") = Void, UIMenuControllerArrowDirection;
overload selector(static "setAttributedString:") = Void, NSAttributedString;
overload selector(static "setAttributes:ofItemAtPath:error:") = Bool, NSDictionary, NSString, Pointer[NSError];
overload selector(static "setAttributes:range:") = Void, NSDictionary, NSRange;
overload selector(static "setAutocapitalizationType:") = Void, UITextAutocapitalizationType;
overload selector(static "setAutocorrectionType:") = Void, UITextAutocorrectionType;
overload selector(static "setAutoresizesSubviews:") = Void, Bool;
overload selector(static "setAutoresizingMask:") = Void, UInt;
overload selector(static "setBackBarButtonItem:") = Void, UIBarButtonItem;
overload selector(static "setBackground:") = Void, UIImage;
overload selector(static "setBackgroundColor:") = Void, UIColor;
overload selector(static "setBackgroundImage:forState:") = Void, UIImage, UInt;
overload selector(static "setBackgroundView:") = Void, UIView;
overload selector(static "setBadgeValue:") = Void, NSString;
overload selector(static "setBarStyle:") = Void, UIBarStyle;
overload selector(static "setBaseWritingDirection:forRange:") = Void, UITextWritingDirection, UITextRange;
overload selector(static "setBaselineAdjustment:") = Void, UIBaselineAdjustment;
overload selector(static "setBatteryMonitoringEnabled:") = Void, Bool;
overload selector(static "setBool:forKey:") = Void, Bool, NSString;
overload selector(static "setBorderStyle:") = Void, UITextBorderStyle;
overload selector(static "setBounces:") = Void, Bool;
overload selector(static "setBouncesZoom:") = Void, Bool;
overload selector(static "setBounds:") = Void, CGRect;
overload selector(static "setByAddingObject:") = NSSet, Id;
overload selector(static "setByAddingObjectsFromArray:") = NSSet, NSArray;
overload selector(static "setByAddingObjectsFromSet:") = NSSet, NSSet;
overload selector(static "setCGPath:") = Void, CGPathRef;
overload selector(static "setCachePolicy:") = Void, UInt;
overload selector(static "setCalendar:") = Void, NSCalendar;
overload selector(static "setCameraCaptureMode:") = Void, UInt;
overload selector(static "setCameraDevice:") = Void, UInt;
overload selector(static "setCameraFlashMode:") = Void, Int;
overload selector(static "setCameraOverlayView:") = Void, UIView;
overload selector(static "setCameraViewTransform:") = Void, CGAffineTransform;
overload selector(static "setCanCancelContentTouches:") = Void, Bool;
overload selector(static "setCancelButtonIndex:") = Void, Int;
overload selector(static "setCancelsTouchesInView:") = Void, Bool;
overload selector(static "setCaseSensitive:") = Void, Bool;
overload selector(static "setCenter:") = Void, CGPoint;
overload selector(static "setCharactersToBeSkipped:") = Void, NSCharacterSet;
overload selector(static "setClass:forClassName:") = Void, Id, NSString;
overload selector(static "setClassName:forClass:") = Void, NSString, Id;
overload selector(static "setClearButtonMode:") = Void, UITextFieldViewMode;
overload selector(static "setClearsContextBeforeDrawing:") = Void, Bool;
overload selector(static "setClearsOnBeginEditing:") = Void, Bool;
overload selector(static "setClearsSelectionOnViewWillAppear:") = Void, Bool;
overload selector(static "setClipsToBounds:") = Void, Bool;
overload selector(static "setColor:") = Void, UIColor;
overload selector(static "setColors:") = Void, NSArray;
overload selector(static "setCompletionBlock:") = Void, UnknownType;
overload selector(static "setContentEdgeInsets:") = Void, UIEdgeInsets;
overload selector(static "setContentHorizontalAlignment:") = Void, UIControlContentHorizontalAlignment;
overload selector(static "setContentInset:") = Void, UIEdgeInsets;
overload selector(static "setContentMode:") = Void, UIViewContentMode;
overload selector(static "setContentOffset:") = Void, CGPoint;
overload selector(static "setContentOffset:animated:") = Void, CGPoint, Bool;
overload selector(static "setContentOffset:forSegmentAtIndex:") = Void, CGSize, UInt;
overload selector(static "setContentScaleFactor:") = Void, Float;
overload selector(static "setContentSize:") = Void, CGSize;
overload selector(static "setContentSizeForViewInPopover:") = Void, CGSize;
overload selector(static "setContentStretch:") = Void, CGRect;
overload selector(static "setContentVerticalAlignment:") = Void, UIControlContentVerticalAlignment;
overload selector(static "setContentViewController:") = Void, UIViewController;
overload selector(static "setContentViewController:animated:") = Void, UIViewController, Bool;
overload selector(static "setContinuous:") = Void, Bool;
overload selector(static "setCookie:") = Void, NSHTTPCookie;
overload selector(static "setCookieAcceptPolicy:") = Void, UInt;
overload selector(static "setCookies:forURL:mainDocumentURL:") = Void, NSArray, NSURL, NSURL;
overload selector(static "setCountDownDuration:") = Void, Double;
overload selector(static "setCountLimit:") = Void, UInt;
overload selector(static "setCredential:forProtectionSpace:") = Void, NSURLCredential, NSURLProtectionSpace;
overload selector(static "setCurrencyCode:") = Void, NSString;
overload selector(static "setCurrencyDecimalSeparator:") = Void, NSString;
overload selector(static "setCurrencyGroupingSeparator:") = Void, NSString;
overload selector(static "setCurrencySymbol:") = Void, NSString;
overload selector(static "setCurrentMode:") = Void, UIScreenMode;
overload selector(static "setCurrentPage:") = Void, Int;
overload selector(static "setCustomView:") = Void, UIView;
overload selector(static "setCustomizableViewControllers:") = Void, NSArray;
overload selector(static "setData:") = Void, NSData;
overload selector(static "setData:forPasteboardType:") = Void, NSData, NSString;
overload selector(static "setDataDetectorTypes:") = Void, UInt;
overload selector(static "setDataSource:") = Void, Id;
overload selector(static "setDate:") = Void, NSDate;
overload selector(static "setDate:animated:") = Void, NSDate, Bool;
overload selector(static "setDateFormat:") = Void, NSString;
overload selector(static "setDatePickerMode:") = Void, UIDatePickerMode;
overload selector(static "setDateStyle:") = Void, UInt;
overload selector(static "setDay:") = Void, Int;
overload selector(static "setDecelerationRate:") = Void, Float;
overload selector(static "setDecimalSeparator:") = Void, NSString;
overload selector(static "setDefaultBehavior:") = Void, Id;
overload selector(static "setDefaultCredential:forProtectionSpace:") = Void, NSURLCredential, NSURLProtectionSpace;
overload selector(static "setDefaultDate:") = Void, NSDate;
overload selector(static "setDefaultFormatterBehavior:") = Void, UInt;
overload selector(static "setDefaultTimeZone:") = Void, NSTimeZone;
overload selector(static "setDefersCurrentPageDisplay:") = Void, Bool;
overload selector(static "setDelaysContentTouches:") = Void, Bool;
overload selector(static "setDelaysTouchesBegan:") = Void, Bool;
overload selector(static "setDelaysTouchesEnded:") = Void, Bool;
overload selector(static "setDelegate:") = Void, Id;
overload selector(static "setDestructiveButtonIndex:") = Void, Int;
overload selector(static "setDetectsPhoneNumbers:") = Void, Bool;
overload selector(static "setDictionary:") = Void, NSDictionary;
overload selector(static "setDirection:") = Void, UISwipeGestureRecognizerDirection;
overload selector(static "setDirectionalLockEnabled:") = Void, Bool;
overload selector(static "setDisabledBackground:") = Void, UIImage;
overload selector(static "setDiskCapacity:") = Void, UInt;
overload selector(static "setDoesRelativeDateFormatting:") = Void, Bool;
overload selector(static "setDouble:forKey:") = Void, Double, NSString;
overload selector(static "setEditAction:") = Void, SelectorHandle;
overload selector(static "setEditable:") = Void, Bool;
overload selector(static "setEditing:") = Void, Bool;
overload selector(static "setEditing:animated:") = Void, Bool, Bool;
overload selector(static "setEditingAccessoryType:") = Void, UITableViewCellAccessoryType;
overload selector(static "setEditingAccessoryView:") = Void, UIView;
overload selector(static "setEnabled:") = Void, Bool;
overload selector(static "setEnabled:forSegmentAtIndex:") = Void, Bool, UInt;
overload selector(static "setEnablesReturnKeyAutomatically:") = Void, Bool;
overload selector(static "setEra:") = Void, Int;
overload selector(static "setEraSymbols:") = Void, NSArray;
overload selector(static "setEvictsObjectsWithDiscardedContent:") = Void, Bool;
overload selector(static "setExclusiveTouch:") = Void, Bool;
overload selector(static "setExponentSymbol:") = Void, NSString;
overload selector(static "setFileAttributes:") = Void, NSDictionary;
overload selector(static "setFilename:") = Void, NSString;
overload selector(static "setFill") = Void;
overload selector(static "setFireDate:") = Void, NSDate;
overload selector(static "setFirstWeekday:") = Void, UInt;
overload selector(static "setFlatness:") = Void, Float;
overload selector(static "setFloat:forKey:") = Void, Float, NSString;
overload selector(static "setFont:") = Void, UIFont;
overload selector(static "setFormatWidth:") = Void, UInt;
overload selector(static "setFormatterBehavior:") = Void, UInt;
overload selector(static "setFrame:") = Void, CGRect;
overload selector(static "setGeneratesCalendarDates:") = Void, Bool;
overload selector(static "setGeneratesDecimalNumbers:") = Void, Bool;
overload selector(static "setGestureRecognizers:") = Void, NSArray;
overload selector(static "setGregorianStartDate:") = Void, NSDate;
overload selector(static "setGroupingSeparator:") = Void, NSString;
overload selector(static "setGroupingSize:") = Void, UInt;
overload selector(static "setGroupsByEvent:") = Void, Bool;
overload selector(static "setHTTPBody:") = Void, NSData;
overload selector(static "setHTTPBodyStream:") = Void, NSInputStream;
overload selector(static "setHTTPMethod:") = Void, NSString;
overload selector(static "setHTTPShouldHandleCookies:") = Void, Bool;
overload selector(static "setHTTPShouldUsePipelining:") = Void, Bool;
overload selector(static "setHasAction:") = Void, Bool;
overload selector(static "setHidden:") = Void, Bool;
overload selector(static "setHidesAccessoryWhenEditing:") = Void, Bool;
overload selector(static "setHidesBackButton:") = Void, Bool;
overload selector(static "setHidesBackButton:animated:") = Void, Bool, Bool;
overload selector(static "setHidesBottomBarWhenPushed:") = Void, Bool;
overload selector(static "setHidesForSinglePage:") = Void, Bool;
overload selector(static "setHidesWhenStopped:") = Void, Bool;
overload selector(static "setHighlighted:") = Void, Bool;
overload selector(static "setHighlighted:animated:") = Void, Bool, Bool;
overload selector(static "setHighlightedAnimationImages:") = Void, NSArray;
overload selector(static "setHighlightedImage:") = Void, UIImage;
overload selector(static "setHighlightedTextColor:") = Void, UIColor;
overload selector(static "setHour:") = Void, Int;
overload selector(static "setIdleTimerDisabled:") = Void, Bool;
overload selector(static "setImage:") = Void, UIImage;
overload selector(static "setImage:forSegmentAtIndex:") = Void, UIImage, UInt;
overload selector(static "setImage:forState:") = Void, UIImage, UInt;
overload selector(static "setImageEdgeInsets:") = Void, UIEdgeInsets;
overload selector(static "setImageInsets:") = Void, UIEdgeInsets;
overload selector(static "setImages:") = Void, NSArray;
overload selector(static "setIndentationLevel:") = Void, Int;
overload selector(static "setIndentationWidth:") = Void, Float;
overload selector(static "setIndicatorStyle:") = Void, UIScrollViewIndicatorStyle;
overload selector(static "setInputAccessoryView:") = Void, UIView;
overload selector(static "setInputDelegate:") = Void, Id;
overload selector(static "setInputView:") = Void, UIView;
overload selector(static "setInteger:forKey:") = Void, Int, NSString;
overload selector(static "setInternationalCurrencySymbol:") = Void, NSString;
overload selector(static "setIsAccessibilityElement:") = Void, Bool;
overload selector(static "setItems:") = Void, NSArray;
overload selector(static "setItems:animated:") = Void, NSArray, Bool;
overload selector(static "setKeepAliveTimeout:handler:") = Bool, Double, UnknownType;
overload selector(static "setKeyboardAppearance:") = Void, UIKeyboardAppearance;
overload selector(static "setKeyboardType:") = Void, UIKeyboardType;
overload selector(static "setLeftBarButtonItem:") = Void, UIBarButtonItem;
overload selector(static "setLeftBarButtonItem:animated:") = Void, UIBarButtonItem, Bool;
overload selector(static "setLeftView:") = Void, UIView;
overload selector(static "setLeftViewMode:") = Void, UITextFieldViewMode;
overload selector(static "setLength:") = Void, UInt;
overload selector(static "setLenient:") = Void, Bool;
overload selector(static "setLevelsOfUndo:") = Void, UInt;
overload selector(static "setLineBreakMode:") = Void, UILineBreakMode;
overload selector(static "setLineCapStyle:") = Void, CGLineCap;
overload selector(static "setLineDash:count:phase:") = Void, Pointer[Float], Int, Float;
overload selector(static "setLineJoinStyle:") = Void, CGLineJoin;
overload selector(static "setLineWidth:") = Void, Float;
overload selector(static "setLocale:") = Void, NSLocale;
overload selector(static "setLongEraSymbols:") = Void, NSArray;
overload selector(static "setMainDocumentURL:") = Void, NSURL;
overload selector(static "setMarkedText:selectedRange:") = Void, NSString, NSRange;
overload selector(static "setMarkedTextStyle:") = Void, NSDictionary;
overload selector(static "setMaxConcurrentOperationCount:") = Void, Int;
overload selector(static "setMaximum:") = Void, NSNumber;
overload selector(static "setMaximumDate:") = Void, NSDate;
overload selector(static "setMaximumFractionDigits:") = Void, UInt;
overload selector(static "setMaximumIntegerDigits:") = Void, UInt;
overload selector(static "setMaximumNumberOfTouches:") = Void, UInt;
overload selector(static "setMaximumSignificantDigits:") = Void, UInt;
overload selector(static "setMaximumTrackImage:forState:") = Void, UIImage, UInt;
overload selector(static "setMaximumValue:") = Void, Float;
overload selector(static "setMaximumValueImage:") = Void, UIImage;
overload selector(static "setMaximumZoomScale:") = Void, Float;
overload selector(static "setMediaPlaybackRequiresUserAction:") = Void, Bool;
overload selector(static "setMediaTypes:") = Void, NSArray;
overload selector(static "setMemoryCapacity:") = Void, UInt;
overload selector(static "setMenuItems:") = Void, NSArray;
overload selector(static "setMenuVisible:") = Void, Bool;
overload selector(static "setMenuVisible:animated:") = Void, Bool, Bool;
overload selector(static "setMessage:") = Void, NSString;
overload selector(static "setMinimum:") = Void, NSNumber;
overload selector(static "setMinimumDate:") = Void, NSDate;
overload selector(static "setMinimumDaysInFirstWeek:") = Void, UInt;
overload selector(static "setMinimumFontSize:") = Void, Float;
overload selector(static "setMinimumFractionDigits:") = Void, UInt;
overload selector(static "setMinimumIntegerDigits:") = Void, UInt;
overload selector(static "setMinimumNumberOfTouches:") = Void, UInt;
overload selector(static "setMinimumPressDuration:") = Void, Double;
overload selector(static "setMinimumSignificantDigits:") = Void, UInt;
overload selector(static "setMinimumTrackImage:forState:") = Void, UIImage, UInt;
overload selector(static "setMinimumValue:") = Void, Float;
overload selector(static "setMinimumValueImage:") = Void, UIImage;
overload selector(static "setMinimumZoomScale:") = Void, Float;
overload selector(static "setMinusSign:") = Void, NSString;
overload selector(static "setMinute:") = Void, Int;
overload selector(static "setMinuteInterval:") = Void, Int;
overload selector(static "setMiterLimit:") = Void, Float;
overload selector(static "setModalInPopover:") = Void, Bool;
overload selector(static "setModalPresentationStyle:") = Void, UIModalPresentationStyle;
overload selector(static "setModalTransitionStyle:") = Void, UIModalTransitionStyle;
overload selector(static "setMomentary:") = Void, Bool;
overload selector(static "setMonth:") = Void, Int;
overload selector(static "setMonthSymbols:") = Void, NSArray;
overload selector(static "setMultipleTouchEnabled:") = Void, Bool;
overload selector(static "setMultiplier:") = Void, NSNumber;
overload selector(static "setName:") = Void, NSString;
overload selector(static "setNavigationBarHidden:") = Void, Bool;
overload selector(static "setNavigationBarHidden:animated:") = Void, Bool, Bool;
overload selector(static "setNeedsDisplay") = Void;
overload selector(static "setNeedsDisplayInRect:") = Void, CGRect;
overload selector(static "setNeedsLayout") = Void;
overload selector(static "setNegativeFormat:") = Void, NSString;
overload selector(static "setNegativeInfinitySymbol:") = Void, NSString;
overload selector(static "setNegativePrefix:") = Void, NSString;
overload selector(static "setNegativeSuffix:") = Void, NSString;
overload selector(static "setNetworkActivityIndicatorVisible:") = Void, Bool;
overload selector(static "setNetworkServiceType:") = Void, UInt;
overload selector(static "setNilSymbol:") = Void, NSString;
overload selector(static "setNilValueForKey:") = Void, NSString;
overload selector(static "setNotANumberSymbol:") = Void, NSString;
overload selector(static "setNumberOfLines:") = Void, Int;
overload selector(static "setNumberOfPages:") = Void, Int;
overload selector(static "setNumberOfTapsRequired:") = Void, Int;
overload selector(static "setNumberOfTouchesRequired:") = Void, Int;
overload selector(static "setNumberStyle:") = Void, UInt;
overload selector(static "setObject:forKey:") = Void, Id, Id;
overload selector(static "setObject:forKey:cost:") = Void, Id, Id, UInt;
overload selector(static "setObjectZone:") = Void, Pointer[NSZone];
overload selector(static "setObservationInfo:") = Void, RawPointer;
overload selector(static "setOn:") = Void, Bool;
overload selector(static "setOn:animated:") = Void, Bool, Bool;
overload selector(static "setOpaque:") = Void, Bool;
overload selector(static "setOutputFormat:") = Void, UInt;
overload selector(static "setPMSymbol:") = Void, NSString;
overload selector(static "setPaddingCharacter:") = Void, NSString;
overload selector(static "setPaddingPosition:") = Void, UInt;
overload selector(static "setPagingEnabled:") = Void, Bool;
overload selector(static "setPartialStringValidationEnabled:") = Void, Bool;
overload selector(static "setPassthroughViews:") = Void, NSArray;
overload selector(static "setPerMillSymbol:") = Void, NSString;
overload selector(static "setPercentSymbol:") = Void, NSString;
overload selector(static "setPersistent:") = Void, Bool;
overload selector(static "setPersistentDomain:forName:") = Void, NSDictionary, NSString;
overload selector(static "setPlaceholder:") = Void, NSString;
overload selector(static "setPlusSign:") = Void, NSString;
overload selector(static "setPopoverContentSize:") = Void, CGSize;
overload selector(static "setPopoverContentSize:animated:") = Void, CGSize, Bool;
overload selector(static "setPositiveFormat:") = Void, NSString;
overload selector(static "setPositiveInfinitySymbol:") = Void, NSString;
overload selector(static "setPositivePrefix:") = Void, NSString;
overload selector(static "setPositiveSuffix:") = Void, NSString;
overload selector(static "setPossibleTitles:") = Void, NSSet;
overload selector(static "setPreferredFilename:") = Void, NSString;
overload selector(static "setProcessName:") = Void, NSString;
overload selector(static "setProgress:") = Void, Float;
overload selector(static "setProgressViewStyle:") = Void, UIProgressViewStyle;
overload selector(static "setPrompt:") = Void, NSString;
overload selector(static "setProperty:forKey:") = Bool, Id, NSString;
overload selector(static "setProperty:forKey:inRequest:") = Void, Id, NSString, NSMutableURLRequest;
overload selector(static "setProximityMonitoringEnabled:") = Void, Bool;
overload selector(static "setProximitySensingEnabled:") = Void, Bool;
overload selector(static "setQuarter:") = Void, Int;
overload selector(static "setQuarterSymbols:") = Void, NSArray;
overload selector(static "setQueuePriority:") = Void, Int;
overload selector(static "setRepeatCalendar:") = Void, NSCalendar;
overload selector(static "setRepeatInterval:") = Void, UInt;
overload selector(static "setResourceValue:forKey:error:") = Bool, Id, NSString, Pointer[NSError];
overload selector(static "setResourceValues:error:") = Bool, NSDictionary, Pointer[NSError];
overload selector(static "setReturnKeyType:") = Void, UIReturnKeyType;
overload selector(static "setReturnValue:") = Void, RawPointer;
overload selector(static "setReversesTitleShadowWhenHighlighted:") = Void, Bool;
overload selector(static "setRightBarButtonItem:") = Void, UIBarButtonItem;
overload selector(static "setRightBarButtonItem:animated:") = Void, UIBarButtonItem, Bool;
overload selector(static "setRightView:") = Void, UIView;
overload selector(static "setRightViewMode:") = Void, UITextFieldViewMode;
overload selector(static "setRootViewController:") = Void, UIViewController;
overload selector(static "setRotation:") = Void, Float;
overload selector(static "setRoundingIncrement:") = Void, NSNumber;
overload selector(static "setRoundingMode:") = Void, UInt;
overload selector(static "setRowHeight:") = Void, Float;
overload selector(static "setRunLoopModes:") = Void, NSArray;
overload selector(static "setScale:") = Void, Float;
overload selector(static "setScalesPageToFit:") = Void, Bool;
overload selector(static "setScanLocation:") = Void, UInt;
overload selector(static "setScopeButtonTitles:") = Void, NSArray;
overload selector(static "setScreen:") = Void, UIScreen;
overload selector(static "setScrollEnabled:") = Void, Bool;
overload selector(static "setScrollIndicatorInsets:") = Void, UIEdgeInsets;
overload selector(static "setScrollsToTop:") = Void, Bool;
overload selector(static "setSearchResultsButtonSelected:") = Void, Bool;
overload selector(static "setSearchResultsDataSource:") = Void, Id;
overload selector(static "setSearchResultsDelegate:") = Void, Id;
overload selector(static "setSecond:") = Void, Int;
overload selector(static "setSecondaryGroupingSize:") = Void, UInt;
overload selector(static "setSectionFooterHeight:") = Void, Float;
overload selector(static "setSectionHeaderHeight:") = Void, Float;
overload selector(static "setSectionIndexMinimumDisplayRowCount:") = Void, Int;
overload selector(static "setSecureTextEntry:") = Void, Bool;
overload selector(static "setSegmentedControlStyle:") = Void, UISegmentedControlStyle;
overload selector(static "setSelected:") = Void, Bool;
overload selector(static "setSelected:animated:") = Void, Bool, Bool;
overload selector(static "setSelectedBackgroundView:") = Void, UIView;
overload selector(static "setSelectedImage:") = Void, UIImage;
overload selector(static "setSelectedIndex:") = Void, UInt;
overload selector(static "setSelectedItem:") = Void, UITabBarItem;
overload selector(static "setSelectedRange:") = Void, NSRange;
overload selector(static "setSelectedScopeButtonIndex:") = Void, Int;
overload selector(static "setSelectedSegmentIndex:") = Void, Int;
overload selector(static "setSelectedTextColor:") = Void, UIColor;
overload selector(static "setSelectedTextRange:") = Void, UITextRange;
overload selector(static "setSelectedViewController:") = Void, UIViewController;
overload selector(static "setSelectionAffinity:") = Void, UITextStorageDirection;
overload selector(static "setSelectionStyle:") = Void, UITableViewCellSelectionStyle;
overload selector(static "setSelector:") = Void, SelectorHandle;
overload selector(static "setSeparatorColor:") = Void, UIColor;
overload selector(static "setSeparatorStyle:") = Void, UITableViewCellSeparatorStyle;
overload selector(static "setSet:") = Void, NSSet;
overload selector(static "setShadowColor:") = Void, UIColor;
overload selector(static "setShadowOffset:") = Void, CGSize;
overload selector(static "setSharedURLCache:") = Void, NSURLCache;
overload selector(static "setShortMonthSymbols:") = Void, NSArray;
overload selector(static "setShortQuarterSymbols:") = Void, NSArray;
overload selector(static "setShortStandaloneMonthSymbols:") = Void, NSArray;
overload selector(static "setShortStandaloneQuarterSymbols:") = Void, NSArray;
overload selector(static "setShortStandaloneWeekdaySymbols:") = Void, NSArray;
overload selector(static "setShortWeekdaySymbols:") = Void, NSArray;
overload selector(static "setShouldIndentWhileEditing:") = Void, Bool;
overload selector(static "setShouldProcessNamespaces:") = Void, Bool;
overload selector(static "setShouldReportNamespacePrefixes:") = Void, Bool;
overload selector(static "setShouldResolveExternalEntities:") = Void, Bool;
overload selector(static "setShowsBookmarkButton:") = Void, Bool;
overload selector(static "setShowsCameraControls:") = Void, Bool;
overload selector(static "setShowsCancelButton:") = Void, Bool;
overload selector(static "setShowsCancelButton:animated:") = Void, Bool, Bool;
overload selector(static "setShowsHorizontalScrollIndicator:") = Void, Bool;
overload selector(static "setShowsReorderControl:") = Void, Bool;
overload selector(static "setShowsScopeBar:") = Void, Bool;
overload selector(static "setShowsSearchResultsButton:") = Void, Bool;
overload selector(static "setShowsSelectionIndicator:") = Void, Bool;
overload selector(static "setShowsTouchWhenHighlighted:") = Void, Bool;
overload selector(static "setShowsVerticalScrollIndicator:") = Void, Bool;
overload selector(static "setSoundName:") = Void, NSString;
overload selector(static "setSourceType:") = Void, UInt;
overload selector(static "setStackSize:") = Void, UInt;
overload selector(static "setStandaloneMonthSymbols:") = Void, NSArray;
overload selector(static "setStandaloneQuarterSymbols:") = Void, NSArray;
overload selector(static "setStandaloneWeekdaySymbols:") = Void, NSArray;
overload selector(static "setStatusBarHidden:") = Void, Bool;
overload selector(static "setStatusBarHidden:animated:") = Void, Bool, Bool;
overload selector(static "setStatusBarHidden:withAnimation:") = Void, Bool, UIStatusBarAnimation;
overload selector(static "setStatusBarOrientation:") = Void, UIInterfaceOrientation;
overload selector(static "setStatusBarOrientation:animated:") = Void, UIInterfaceOrientation, Bool;
overload selector(static "setStatusBarStyle:") = Void, UIStatusBarStyle;
overload selector(static "setStatusBarStyle:animated:") = Void, UIStatusBarStyle, Bool;
overload selector(static "setString:") = Void, NSString;
overload selector(static "setStrings:") = Void, NSArray;
overload selector(static "setStroke") = Void;
overload selector(static "setStyle:") = Void, UIBarButtonItemStyle;
overload selector(static "setSuspended:") = Void, Bool;
overload selector(static "setTXTRecordData:") = Bool, NSData;
overload selector(static "setTabBarItem:") = Void, UITabBarItem;
overload selector(static "setTableFooterView:") = Void, UIView;
overload selector(static "setTableHeaderView:") = Void, UIView;
overload selector(static "setTableView:") = Void, UITableView;
overload selector(static "setTag:") = Void, Int;
overload selector(static "setTarget:") = Void, Id;
overload selector(static "setTargetRect:inView:") = Void, CGRect, UIView;
overload selector(static "setText:") = Void, NSString;
overload selector(static "setTextAlignment:") = Void, UITextAlignment;
overload selector(static "setTextAttributesForNegativeInfinity:") = Void, NSDictionary;
overload selector(static "setTextAttributesForNegativeValues:") = Void, NSDictionary;
overload selector(static "setTextAttributesForNil:") = Void, NSDictionary;
overload selector(static "setTextAttributesForNotANumber:") = Void, NSDictionary;
overload selector(static "setTextAttributesForPositiveInfinity:") = Void, NSDictionary;
overload selector(static "setTextAttributesForPositiveValues:") = Void, NSDictionary;
overload selector(static "setTextAttributesForZero:") = Void, NSDictionary;
overload selector(static "setTextColor:") = Void, UIColor;
overload selector(static "setThreadPriority:") = Bool, Double;
overload selector(static "setThumbImage:forState:") = Void, UIImage, UInt;
overload selector(static "setTimeStyle:") = Void, UInt;
overload selector(static "setTimeZone:") = Void, NSTimeZone;
overload selector(static "setTimeoutInterval:") = Void, Double;
overload selector(static "setTintColor:") = Void, UIColor;
overload selector(static "setTitle:") = Void, NSString;
overload selector(static "setTitle:forSegmentAtIndex:") = Void, NSString, UInt;
overload selector(static "setTitle:forState:") = Void, NSString, UInt;
overload selector(static "setTitleColor:forState:") = Void, UIColor, UInt;
overload selector(static "setTitleEdgeInsets:") = Void, UIEdgeInsets;
overload selector(static "setTitleShadowColor:forState:") = Void, UIColor, UInt;
overload selector(static "setTitleShadowOffset:") = Void, CGSize;
overload selector(static "setTitleView:") = Void, UIView;
overload selector(static "setToolbarHidden:") = Void, Bool;
overload selector(static "setToolbarHidden:animated:") = Void, Bool, Bool;
overload selector(static "setToolbarItems:") = Void, NSArray;
overload selector(static "setToolbarItems:animated:") = Void, NSArray, Bool;
overload selector(static "setTotalCostLimit:") = Void, UInt;
overload selector(static "setTransform:") = Void, CGAffineTransform;
overload selector(static "setTranslation:inView:") = Void, CGPoint, UIView;
overload selector(static "setTranslucent:") = Void, Bool;
overload selector(static "setTwoDigitStartDate:") = Void, NSDate;
overload selector(static "setURL:") = Void, NSURL;
overload selector(static "setURL:forKey:") = Void, NSURL, NSString;
overload selector(static "setURLs:") = Void, NSArray;
overload selector(static "setUTI:") = Void, NSString;
overload selector(static "setUpdateInterval:") = Void, Double;
overload selector(static "setUserInfo:") = Void, NSDictionary;
overload selector(static "setUserInteractionEnabled:") = Void, Bool;
overload selector(static "setUsesEvenOddFillRule:") = Void, Bool;
overload selector(static "setUsesGroupingSeparator:") = Void, Bool;
overload selector(static "setUsesSignificantDigits:") = Void, Bool;
overload selector(static "setValue:") = Void, Float;
overload selector(static "setValue:animated:") = Void, Float, Bool;
overload selector(static "setValue:forHTTPHeaderField:") = Void, NSString, NSString;
overload selector(static "setValue:forKey:") = Void, Id, NSString;
overload selector(static "setValue:forKeyPath:") = Void, Id, NSString;
overload selector(static "setValue:forPasteboardType:") = Void, Id, NSString;
overload selector(static "setValue:forUndefinedKey:") = Void, Id, NSString;
overload selector(static "setValueTransformer:forName:") = Void, NSValueTransformer, NSString;
overload selector(static "setValuesForKeysWithDictionary:") = Void, NSDictionary;
overload selector(static "setVersion:") = Void, Int;
overload selector(static "setVeryShortMonthSymbols:") = Void, NSArray;
overload selector(static "setVeryShortStandaloneMonthSymbols:") = Void, NSArray;
overload selector(static "setVeryShortStandaloneWeekdaySymbols:") = Void, NSArray;
overload selector(static "setVeryShortWeekdaySymbols:") = Void, NSArray;
overload selector(static "setVideoMaximumDuration:") = Void, Double;
overload selector(static "setVideoPath:") = Void, NSString;
overload selector(static "setVideoQuality:") = Void, UInt;
overload selector(static "setView:") = Void, UIView;
overload selector(static "setViewControllers:") = Void, NSArray;
overload selector(static "setViewControllers:animated:") = Void, NSArray, Bool;
overload selector(static "setVolatileDomain:forName:") = Void, NSDictionary, NSString;
overload selector(static "setWantsFullScreenLayout:") = Void, Bool;
overload selector(static "setWeek:") = Void, Int;
overload selector(static "setWeekday:") = Void, Int;
overload selector(static "setWeekdayOrdinal:") = Void, Int;
overload selector(static "setWeekdaySymbols:") = Void, NSArray;
overload selector(static "setWidth:") = Void, Float;
overload selector(static "setWidth:forSegmentAtIndex:") = Void, Float, UInt;
overload selector(static "setWindowLevel:") = Void, Float;
overload selector(static "setWithArray:") = Id, NSArray;
overload selector(static "setWithCapacity:") = Id, UInt;
overload selector(static "setWithObject:") = Id, Id;
overload varargSelector(static "setWithObjects:") = Id, Id;
overload selector(static "setWithObjects:count:") = Id, Pointer[Id], UInt;
overload selector(static "setWithSet:") = Id, NSSet;
overload selector(static "setYear:") = Void, Int;
overload selector(static "setZeroSymbol:") = Void, NSString;
overload selector(static "setZoomScale:") = Void, Float;
overload selector(static "setZoomScale:animated:") = Void, Float, Bool;
overload selector(static "shadowColor") = UIColor;
overload selector(static "shadowOffset") = CGSize;
overload selector(static "sharedAccelerometer") = UIAccelerometer;
overload selector(static "sharedApplication") = UIApplication;
overload selector(static "sharedCredentialStorage") = NSURLCredentialStorage;
overload selector(static "sharedFrameworksPath") = NSString;
overload selector(static "sharedFrameworksURL") = NSURL;
overload selector(static "sharedHTTPCookieStorage") = NSHTTPCookieStorage;
overload selector(static "sharedMenuController") = UIMenuController;
overload selector(static "sharedSupportPath") = NSString;
overload selector(static "sharedSupportURL") = NSURL;
overload selector(static "sharedURLCache") = NSURLCache;
overload selector(static "shiftIndexesStartingAtIndex:by:") = Void, UInt, Int;
overload selector(static "shortMonthSymbols") = NSArray;
overload selector(static "shortQuarterSymbols") = NSArray;
overload selector(static "shortStandaloneMonthSymbols") = NSArray;
overload selector(static "shortStandaloneQuarterSymbols") = NSArray;
overload selector(static "shortStandaloneWeekdaySymbols") = NSArray;
overload selector(static "shortValue") = Short;
overload selector(static "shortWeekdaySymbols") = NSArray;
overload selector(static "shouldAutorotateToInterfaceOrientation:") = Bool, UIInterfaceOrientation;
overload selector(static "shouldIndentWhileEditing") = Bool;
overload selector(static "shouldProcessNamespaces") = Bool;
overload selector(static "shouldReportNamespacePrefixes") = Bool;
overload selector(static "shouldResolveExternalEntities") = Bool;
overload selector(static "show") = Void;
overload selector(static "showFromBarButtonItem:animated:") = Void, UIBarButtonItem, Bool;
overload selector(static "showFromRect:inView:animated:") = Void, CGRect, UIView, Bool;
overload selector(static "showFromTabBar:") = Void, UITabBar;
overload selector(static "showFromToolbar:") = Void, UIToolbar;
overload selector(static "showInView:") = Void, UIView;
overload selector(static "showingDeleteConfirmation") = Bool;
overload selector(static "showsBookmarkButton") = Bool;
overload selector(static "showsCameraControls") = Bool;
overload selector(static "showsCancelButton") = Bool;
overload selector(static "showsHorizontalScrollIndicator") = Bool;
overload selector(static "showsReorderControl") = Bool;
overload selector(static "showsScopeBar") = Bool;
overload selector(static "showsSearchResultsButton") = Bool;
overload selector(static "showsSelectionIndicator") = Bool;
overload selector(static "showsTouchWhenHighlighted") = Bool;
overload selector(static "showsVerticalScrollIndicator") = Bool;
overload selector(static "signal") = Void;
overload selector(static "signatureWithObjCTypes:") = NSMethodSignature, Pointer[CChar];
overload selector(static "size") = CGSize;
overload selector(static "sizeForNumberOfPages:") = CGSize, Int;
overload selector(static "sizeThatFits:") = CGSize, CGSize;
overload selector(static "sizeToFit") = Void;
overload selector(static "sizeWithFont:") = CGSize, UIFont;
overload selector(static "sizeWithFont:constrainedToSize:") = CGSize, UIFont, CGSize;
overload selector(static "sizeWithFont:constrainedToSize:lineBreakMode:") = CGSize, UIFont, CGSize, UILineBreakMode;
overload selector(static "sizeWithFont:forWidth:lineBreakMode:") = CGSize, UIFont, Float, UILineBreakMode;
overload selector(static "sizeWithFont:minFontSize:actualFontSize:forWidth:lineBreakMode:") = CGSize, UIFont, Float, Pointer[Float], Float, UILineBreakMode;
overload selector(static "skipDescendants") = Void;
overload selector(static "skipDescendents") = Void;
overload selector(static "sleepForTimeInterval:") = Void, Double;
overload selector(static "sleepUntilDate:") = Void, NSDate;
overload selector(static "smallSystemFontSize") = Float;
overload selector(static "smallestEncoding") = UInt;
overload selector(static "sortDescriptorWithKey:ascending:") = Id, NSString, Bool;
overload selector(static "sortDescriptorWithKey:ascending:comparator:") = Id, NSString, Bool, NSComparator;
overload selector(static "sortDescriptorWithKey:ascending:selector:") = Id, NSString, Bool, SelectorHandle;
overload selector(static "sortUsingComparator:") = Void, NSComparator;
overload selector(static "sortUsingDescriptors:") = Void, NSArray;
overload selector(static "sortUsingFunction:context:") = Void, CCodePointer[[Id,Id,RawPointer],[Int]], RawPointer;
overload selector(static "sortUsingSelector:") = Void, SelectorHandle;
overload selector(static "sortWithOptions:usingComparator:") = Void, UInt, NSComparator;
overload selector(static "sortedArrayFromArray:collationStringSelector:") = NSArray, NSArray, SelectorHandle;
overload selector(static "sortedArrayHint") = NSData;
overload selector(static "sortedArrayUsingComparator:") = NSArray, NSComparator;
overload selector(static "sortedArrayUsingDescriptors:") = NSArray, NSArray;
overload selector(static "sortedArrayUsingFunction:context:") = NSArray, CCodePointer[[Id,Id,RawPointer],[Int]], RawPointer;
overload selector(static "sortedArrayUsingFunction:context:hint:") = NSArray, CCodePointer[[Id,Id,RawPointer],[Int]], RawPointer, NSData;
overload selector(static "sortedArrayUsingSelector:") = NSArray, SelectorHandle;
overload selector(static "sortedArrayWithOptions:usingComparator:") = NSArray, UInt, NSComparator;
overload selector(static "soundName") = NSString;
overload selector(static "sourceType") = UInt;
overload selector(static "spellCheckingResultWithRange:") = NSTextCheckingResult, NSRange;
overload selector(static "splitViewController") = UISplitViewController;
overload selector(static "splitViewController:popoverController:willPresentViewController:") = Void, UISplitViewController, UIPopoverController, UIViewController;
overload selector(static "splitViewController:willHideViewController:withBarButtonItem:forPopoverController:") = Void, UISplitViewController, UIViewController, UIBarButtonItem, UIPopoverController;
overload selector(static "splitViewController:willShowViewController:invalidatingBarButtonItem:") = Void, UISplitViewController, UIViewController, UIBarButtonItem;
overload selector(static "stackSize") = UInt;
overload selector(static "standaloneMonthSymbols") = NSArray;
overload selector(static "standaloneQuarterSymbols") = NSArray;
overload selector(static "standaloneWeekdaySymbols") = NSArray;
overload selector(static "standardUserDefaults") = NSUserDefaults;
overload selector(static "standardizedURL") = NSURL;
overload selector(static "start") = UITextPosition;
overload selector(static "startAnimating") = Void;
overload selector(static "startLoading") = Void;
overload selector(static "startMonitoring") = Void;
overload selector(static "startVideoCapture") = Bool;
overload selector(static "state") = UInt;
overload selector(static "statusBarFrame") = CGRect;
overload selector(static "statusBarOrientation") = UIInterfaceOrientation;
overload selector(static "statusBarOrientationAnimationDuration") = Double;
overload selector(static "statusBarStyle") = UIStatusBarStyle;
overload selector(static "statusCode") = Int;
overload selector(static "stop") = Void;
overload selector(static "stopAnimating") = Void;
overload selector(static "stopLoading") = Void;
overload selector(static "stopMonitoring") = Void;
overload selector(static "stopVideoCapture") = Void;
overload selector(static "storagePolicy") = UInt;
overload selector(static "storeCachedResponse:forRequest:") = Void, NSCachedURLResponse, NSURLRequest;
overload selector(static "stream:handleEvent:") = Void, NSStream, UInt;
overload selector(static "streamError") = NSError;
overload selector(static "streamStatus") = UInt;
overload selector(static "stretchableImageWithLeftCapWidth:topCapHeight:") = UIImage, Int, Int;
overload selector(static "string") = Id;
overload selector(static "stringArrayForKey:") = NSArray, NSString;
overload selector(static "stringByAbbreviatingWithTildeInPath") = NSString;
overload selector(static "stringByAddingPercentEscapesUsingEncoding:") = NSString, UInt;
overload varargSelector(static "stringByAppendingFormat:") = NSString, NSString;
overload selector(static "stringByAppendingPathComponent:") = NSString, NSString;
overload selector(static "stringByAppendingPathExtension:") = NSString, NSString;
overload selector(static "stringByAppendingString:") = NSString, NSString;
overload selector(static "stringByDeletingLastPathComponent") = NSString;
overload selector(static "stringByDeletingPathExtension") = NSString;
overload selector(static "stringByEvaluatingJavaScriptFromString:") = NSString, NSString;
overload selector(static "stringByExpandingTildeInPath") = NSString;
overload selector(static "stringByFoldingWithOptions:locale:") = NSString, UInt, NSLocale;
overload selector(static "stringByPaddingToLength:withString:startingAtIndex:") = NSString, UInt, NSString, UInt;
overload selector(static "stringByReplacingCharactersInRange:withString:") = NSString, NSRange, NSString;
overload selector(static "stringByReplacingMatchesInString:options:range:withTemplate:") = NSString, NSString, UInt, NSRange, NSString;
overload selector(static "stringByReplacingOccurrencesOfString:withString:") = NSString, NSString, NSString;
overload selector(static "stringByReplacingOccurrencesOfString:withString:options:range:") = NSString, NSString, NSString, UInt, NSRange;
overload selector(static "stringByReplacingPercentEscapesUsingEncoding:") = NSString, UInt;
overload selector(static "stringByResolvingSymlinksInPath") = NSString;
overload selector(static "stringByStandardizingPath") = NSString;
overload selector(static "stringByTrimmingCharactersInSet:") = NSString, NSCharacterSet;
overload selector(static "stringForKey:") = NSString, NSString;
overload selector(static "stringForObjectValue:") = NSString, Id;
overload selector(static "stringFromDate:") = NSString, NSDate;
overload selector(static "stringFromNumber:") = NSString, NSNumber;
overload selector(static "stringValue") = NSString;
overload selector(static "stringWithCString:") = Id, Pointer[CChar];
overload selector(static "stringWithCString:encoding:") = Id, Pointer[CChar], UInt;
overload selector(static "stringWithCString:length:") = Id, Pointer[CChar], UInt;
overload selector(static "stringWithCapacity:") = Id, UInt;
overload selector(static "stringWithCharacters:length:") = Id, Pointer[UShort], UInt;
overload selector(static "stringWithContentsOfFile:") = Id, NSString;
overload selector(static "stringWithContentsOfFile:encoding:error:") = Id, NSString, UInt, Pointer[NSError];
overload selector(static "stringWithContentsOfFile:usedEncoding:error:") = Id, NSString, Pointer[UInt], Pointer[NSError];
overload selector(static "stringWithContentsOfURL:") = Id, NSURL;
overload selector(static "stringWithContentsOfURL:encoding:error:") = Id, NSURL, UInt, Pointer[NSError];
overload selector(static "stringWithContentsOfURL:usedEncoding:error:") = Id, NSURL, Pointer[UInt], Pointer[NSError];
overload selector(static "stringWithFileSystemRepresentation:length:") = NSString, Pointer[CChar], UInt;
overload varargSelector(static "stringWithFormat:") = Id, NSString;
overload selector(static "stringWithString:") = Id, NSString;
overload selector(static "stringWithUTF8String:") = Id, Pointer[CChar];
overload selector(static "strings") = NSArray;
overload selector(static "stringsByAppendingPaths:") = NSArray, NSArray;
overload selector(static "stroke") = Void;
overload selector(static "strokeWithBlendMode:alpha:") = Void, CGBlendMode, Float;
overload selector(static "style") = UIBarButtonItemStyle;
overload selector(static "subarrayWithRange:") = NSArray, NSRange;
overload selector(static "subdataWithRange:") = NSData, NSRange;
overload selector(static "subpathsAtPath:") = NSArray, NSString;
overload selector(static "subpathsOfDirectoryAtPath:error:") = NSArray, NSString, Pointer[NSError];
overload selector(static "subpredicates") = NSArray;
overload selector(static "substringFromIndex:") = NSString, UInt;
overload selector(static "substringToIndex:") = NSString, UInt;
overload selector(static "substringWithRange:") = NSString, NSRange;
overload selector(static "subtype") = UIEventSubtype;
overload selector(static "subviews") = NSArray;
overload selector(static "suggestedFilename") = NSString;
overload selector(static "superclass") = Id;
overload selector(static "superview") = UIView;
overload selector(static "symbolCharacterSet") = Id;
overload selector(static "symbolicLinkDestination") = NSString;
overload selector(static "symbolicLinkDestinationURL") = NSURL;
overload selector(static "synchronize") = Bool;
overload selector(static "synchronizeFile") = Void;
overload selector(static "systemFontOfSize:") = UIFont, Float;
overload selector(static "systemFontSize") = Float;
overload selector(static "systemID") = NSString;
overload selector(static "systemLocale") = Id;
overload selector(static "systemName") = NSString;
overload selector(static "systemTimeZone") = NSTimeZone;
overload selector(static "systemUptime") = Double;
overload selector(static "systemVersion") = UInt;
overload selector(static "tabBar") = UITabBar;
overload selector(static "tabBar:didBeginCustomizingItems:") = Void, UITabBar, NSArray;
overload selector(static "tabBar:didEndCustomizingItems:changed:") = Void, UITabBar, NSArray, Bool;
overload selector(static "tabBar:didSelectItem:") = Void, UITabBar, UITabBarItem;
overload selector(static "tabBar:willBeginCustomizingItems:") = Void, UITabBar, NSArray;
overload selector(static "tabBar:willEndCustomizingItems:changed:") = Void, UITabBar, NSArray, Bool;
overload selector(static "tabBarController") = UITabBarController;
overload selector(static "tabBarController:didEndCustomizingViewControllers:changed:") = Void, UITabBarController, NSArray, Bool;
overload selector(static "tabBarController:didSelectViewController:") = Void, UITabBarController, UIViewController;
overload selector(static "tabBarController:shouldSelectViewController:") = Bool, UITabBarController, UIViewController;
overload selector(static "tabBarController:willBeginCustomizingViewControllers:") = Void, UITabBarController, NSArray;
overload selector(static "tabBarController:willEndCustomizingViewControllers:changed:") = Void, UITabBarController, NSArray, Bool;
overload selector(static "tabBarItem") = UITabBarItem;
overload selector(static "tableFooterView") = UIView;
overload selector(static "tableHeaderView") = UIView;
overload selector(static "tableView") = UITableView;
overload selector(static "tableView:accessoryButtonTappedForRowWithIndexPath:") = Void, UITableView, NSIndexPath;
overload selector(static "tableView:accessoryTypeForRowWithIndexPath:") = UITableViewCellAccessoryType, UITableView, NSIndexPath;
overload selector(static "tableView:canEditRowAtIndexPath:") = Bool, UITableView, NSIndexPath;
overload selector(static "tableView:canMoveRowAtIndexPath:") = Bool, UITableView, NSIndexPath;
overload selector(static "tableView:cellForRowAtIndexPath:") = UITableViewCell, UITableView, NSIndexPath;
overload selector(static "tableView:commitEditingStyle:forRowAtIndexPath:") = Void, UITableView, UITableViewCellEditingStyle, NSIndexPath;
overload selector(static "tableView:didDeselectRowAtIndexPath:") = Void, UITableView, NSIndexPath;
overload selector(static "tableView:didEndEditingRowAtIndexPath:") = Void, UITableView, NSIndexPath;
overload selector(static "tableView:didSelectRowAtIndexPath:") = Void, UITableView, NSIndexPath;
overload selector(static "tableView:editingStyleForRowAtIndexPath:") = UITableViewCellEditingStyle, UITableView, NSIndexPath;
overload selector(static "tableView:heightForFooterInSection:") = Float, UITableView, Int;
overload selector(static "tableView:heightForHeaderInSection:") = Float, UITableView, Int;
overload selector(static "tableView:heightForRowAtIndexPath:") = Float, UITableView, NSIndexPath;
overload selector(static "tableView:indentationLevelForRowAtIndexPath:") = Int, UITableView, NSIndexPath;
overload selector(static "tableView:moveRowAtIndexPath:toIndexPath:") = Void, UITableView, NSIndexPath, NSIndexPath;
overload selector(static "tableView:numberOfRowsInSection:") = Int, UITableView, Int;
overload selector(static "tableView:sectionForSectionIndexTitle:atIndex:") = Int, UITableView, NSString, Int;
overload selector(static "tableView:shouldIndentWhileEditingRowAtIndexPath:") = Bool, UITableView, NSIndexPath;
overload selector(static "tableView:targetIndexPathForMoveFromRowAtIndexPath:toProposedIndexPath:") = NSIndexPath, UITableView, NSIndexPath, NSIndexPath;
overload selector(static "tableView:titleForDeleteConfirmationButtonForRowAtIndexPath:") = NSString, UITableView, NSIndexPath;
overload selector(static "tableView:titleForFooterInSection:") = NSString, UITableView, Int;
overload selector(static "tableView:titleForHeaderInSection:") = NSString, UITableView, Int;
overload selector(static "tableView:viewForFooterInSection:") = UIView, UITableView, Int;
overload selector(static "tableView:viewForHeaderInSection:") = UIView, UITableView, Int;
overload selector(static "tableView:willBeginEditingRowAtIndexPath:") = Void, UITableView, NSIndexPath;
overload selector(static "tableView:willDeselectRowAtIndexPath:") = NSIndexPath, UITableView, NSIndexPath;
overload selector(static "tableView:willDisplayCell:forRowAtIndexPath:") = Void, UITableView, UITableViewCell, NSIndexPath;
overload selector(static "tableView:willSelectRowAtIndexPath:") = NSIndexPath, UITableView, NSIndexPath;
overload selector(static "tag") = Int;
overload selector(static "takePicture") = Void;
overload selector(static "tapCount") = UInt;
overload selector(static "target") = Id;
overload selector(static "text") = NSString;
overload selector(static "textAlignment") = UITextAlignment;
overload selector(static "textAttributesForNegativeInfinity") = NSDictionary;
overload selector(static "textAttributesForNegativeValues") = NSDictionary;
overload selector(static "textAttributesForNil") = NSDictionary;
overload selector(static "textAttributesForNotANumber") = NSDictionary;
overload selector(static "textAttributesForPositiveInfinity") = NSDictionary;
overload selector(static "textAttributesForPositiveValues") = NSDictionary;
overload selector(static "textAttributesForZero") = NSDictionary;
overload selector(static "textColor") = UIColor;
overload selector(static "textDidChange:") = Void, Id;
overload selector(static "textEncodingName") = NSString;
overload selector(static "textField:shouldChangeCharactersInRange:replacementString:") = Bool, UITextField, NSRange, NSString;
overload selector(static "textFieldDidBeginEditing:") = Void, UITextField;
overload selector(static "textFieldDidEndEditing:") = Void, UITextField;
overload selector(static "textFieldShouldBeginEditing:") = Bool, UITextField;
overload selector(static "textFieldShouldClear:") = Bool, UITextField;
overload selector(static "textFieldShouldEndEditing:") = Bool, UITextField;
overload selector(static "textFieldShouldReturn:") = Bool, UITextField;
overload selector(static "textInRange:") = NSString, UITextRange;
overload selector(static "textInputView") = UIView;
overload selector(static "textLabel") = UILabel;
overload selector(static "textRangeFromPosition:toPosition:") = UITextRange, UITextPosition, UITextPosition;
overload selector(static "textRectForBounds:") = CGRect, CGRect;
overload selector(static "textRectForBounds:limitedToNumberOfLines:") = CGRect, CGRect, Int;
overload selector(static "textStylingAtPosition:inDirection:") = NSDictionary, UITextPosition, UITextStorageDirection;
overload selector(static "textView:shouldChangeTextInRange:replacementText:") = Bool, UITextView, NSRange, NSString;
overload selector(static "textViewDidBeginEditing:") = Void, UITextView;
overload selector(static "textViewDidChange:") = Void, UITextView;
overload selector(static "textViewDidChangeSelection:") = Void, UITextView;
overload selector(static "textViewDidEndEditing:") = Void, UITextView;
overload selector(static "textViewShouldBeginEditing:") = Bool, UITextView;
overload selector(static "textViewShouldEndEditing:") = Bool, UITextView;
overload selector(static "textWillChange:") = Void, Id;
overload selector(static "threadDictionary") = NSMutableDictionary;
overload selector(static "threadPriority") = Double;
overload selector(static "thumbImageForState:") = UIImage, UInt;
overload selector(static "thumbRectForBounds:trackRect:value:") = CGRect, CGRect, CGRect, Float;
overload selector(static "timeInterval") = Double;
overload selector(static "timeIntervalSince1970") = Double;
overload selector(static "timeIntervalSinceDate:") = Double, NSDate;
overload selector(static "timeIntervalSinceNow") = Double;
overload selector(static "timeIntervalSinceReferenceDate") = Double;
overload selector(static "timeStyle") = UInt;
overload selector(static "timeZone") = NSTimeZone;
overload selector(static "timeZoneDataVersion") = NSString;
overload selector(static "timeZoneForSecondsFromGMT:") = Id, Int;
overload selector(static "timeZoneWithAbbreviation:") = Id, NSString;
overload selector(static "timeZoneWithName:") = Id, NSString;
overload selector(static "timeZoneWithName:data:") = Id, NSString, NSData;
overload selector(static "timeoutInterval") = Double;
overload selector(static "timerWithTimeInterval:invocation:repeats:") = NSTimer, Double, NSInvocation, Bool;
overload selector(static "timerWithTimeInterval:target:selector:userInfo:repeats:") = NSTimer, Double, Id, SelectorHandle, Id, Bool;
overload selector(static "timestamp") = Double;
overload selector(static "tintColor") = UIColor;
overload selector(static "title") = NSString;
overload selector(static "titleColorForState:") = UIColor, UInt;
overload selector(static "titleEdgeInsets") = UIEdgeInsets;
overload selector(static "titleForSegmentAtIndex:") = NSString, UInt;
overload selector(static "titleForState:") = NSString, UInt;
overload selector(static "titleLabel") = UILabel;
overload selector(static "titleRectForContentRect:") = CGRect, CGRect;
overload selector(static "titleShadowColorForState:") = UIColor, UInt;
overload selector(static "titleShadowOffset") = CGSize;
overload selector(static "titleView") = UIView;
overload selector(static "tokenizer") = Id;
overload selector(static "toolbar") = UIToolbar;
overload selector(static "toolbarItems") = NSArray;
overload selector(static "topCapHeight") = Int;
overload selector(static "topItem") = UINavigationItem;
overload selector(static "topViewController") = UIViewController;
overload selector(static "totalCostLimit") = UInt;
overload selector(static "touchesBegan:withEvent:") = Void, NSSet, UIEvent;
overload selector(static "touchesCancelled:withEvent:") = Void, NSSet, UIEvent;
overload selector(static "touchesEnded:withEvent:") = Void, NSSet, UIEvent;
overload selector(static "touchesForGestureRecognizer:") = NSSet, UIGestureRecognizer;
overload selector(static "touchesForView:") = NSSet, UIView;
overload selector(static "touchesForWindow:") = NSSet, UIWindow;
overload selector(static "touchesMoved:withEvent:") = Void, NSSet, UIEvent;
overload selector(static "touchesShouldBegin:withEvent:inContentView:") = Bool, NSSet, UIEvent, UIView;
overload selector(static "touchesShouldCancelInContentView:") = Bool, UIView;
overload selector(static "trackRectForBounds:") = CGRect, CGRect;
overload selector(static "transform") = CGAffineTransform;
overload selector(static "transformedValue:") = Id, Id;
overload selector(static "transformedValueClass") = Id;
overload selector(static "transitInformationCheckingResultWithRange:components:") = NSTextCheckingResult, NSRange, NSDictionary;
overload selector(static "transitionFromView:toView:duration:options:completion:") = Void, UIView, UIView, Double, UInt, UnknownType;
overload selector(static "transitionWithView:duration:options:animations:completion:") = Void, UIView, Double, UInt, UnknownType, UnknownType;
overload selector(static "translationInView:") = CGPoint, UIView;
overload selector(static "truncateFileAtOffset:") = Void, UInt64;
overload selector(static "tryLock") = Bool;
overload selector(static "tryLockWhenCondition:") = Bool, Int;
overload selector(static "twoDigitStartDate") = NSDate;
overload selector(static "type") = NSString;
overload selector(static "unarchiveObjectWithData:") = Id, NSData;
overload selector(static "unarchiveObjectWithFile:") = Id, NSString;
overload selector(static "unarchiver:cannotDecodeObjectOfClassName:originalClasses:") = Id, NSKeyedUnarchiver, NSString, NSArray;
overload selector(static "unarchiver:didDecodeObject:") = Id, NSKeyedUnarchiver, Id;
overload selector(static "unarchiver:willReplaceObject:withObject:") = Void, NSKeyedUnarchiver, Id, Id;
overload selector(static "unarchiverDidFinish:") = Void, NSKeyedUnarchiver;
overload selector(static "unarchiverWillFinish:") = Void, NSKeyedUnarchiver;
overload selector(static "undo") = Void;
overload selector(static "undoActionName") = NSString;
overload selector(static "undoManager") = NSUndoManager;
overload selector(static "undoMenuItemTitle") = NSString;
overload selector(static "undoMenuTitleForUndoActionName:") = NSString, NSString;
overload selector(static "undoNestedGroup") = Void;
overload selector(static "unionSet:") = Void, NSSet;
overload selector(static "uniqueIdentifier") = NSString;
overload selector(static "unload") = Bool;
overload selector(static "unlock") = Void;
overload selector(static "unlockWithCondition:") = Void, Int;
overload selector(static "unmarkText") = Void;
overload selector(static "unregisterClass:") = Void, Id;
overload selector(static "unregisterForRemoteNotifications") = Void;
overload selector(static "unscheduleFromRunLoop:forMode:") = Void, NSRunLoop, NSString;
overload selector(static "unsignedCharValue") = CUChar;
overload selector(static "unsignedIntValue") = UInt;
overload selector(static "unsignedIntegerValue") = UInt;
overload selector(static "unsignedLongLongValue") = UInt64;
overload selector(static "unsignedLongValue") = CULong;
overload selector(static "unsignedShortValue") = UShort;
overload selector(static "update") = Void;
overload selector(static "updateCurrentPageDisplay") = Void;
overload selector(static "updateFromPath:") = Bool, NSString;
overload selector(static "updateInterval") = Double;
overload selector(static "uppercaseLetterCharacterSet") = Id;
overload selector(static "uppercaseString") = NSString;
overload selector(static "useCredential:forAuthenticationChallenge:") = Void, NSURLCredential, NSURLAuthenticationChallenge;
overload selector(static "user") = NSString;
overload selector(static "userInfo") = Id;
overload selector(static "userInterfaceIdiom") = UIUserInterfaceIdiom;
overload selector(static "usesEvenOddFillRule") = Bool;
overload selector(static "usesGroupingSeparator") = Bool;
overload selector(static "usesSignificantDigits") = Bool;
overload selector(static "validateValue:forKey:error:") = Bool, Pointer[Id], NSString, Pointer[NSError];
overload selector(static "validateValue:forKeyPath:error:") = Bool, Pointer[Id], NSString, Pointer[NSError];
overload selector(static "value") = NSString;
overload selector(static "value:withObjCType:") = NSValue, RawPointer, Pointer[CChar];
overload selector(static "valueForHTTPHeaderField:") = NSString, NSString;
overload selector(static "valueForKey:") = Id, NSString;
overload selector(static "valueForKeyPath:") = Id, NSString;
overload selector(static "valueForPasteboardType:") = Id, NSString;
overload selector(static "valueForUndefinedKey:") = Id, NSString;
overload selector(static "valueTransformerForName:") = NSValueTransformer, NSString;
overload selector(static "valueTransformerNames") = NSArray;
overload selector(static "valueWithBytes:objCType:") = NSValue, RawPointer, Pointer[CChar];
overload selector(static "valueWithCGAffineTransform:") = NSValue, CGAffineTransform;
overload selector(static "valueWithCGPoint:") = NSValue, CGPoint;
overload selector(static "valueWithCGRect:") = NSValue, CGRect;
overload selector(static "valueWithCGSize:") = NSValue, CGSize;
overload selector(static "valueWithNonretainedObject:") = NSValue, Id;
overload selector(static "valueWithPointer:") = NSValue, RawPointer;
overload selector(static "valueWithRange:") = NSValue, NSRange;
overload selector(static "valueWithUIEdgeInsets:") = NSValue, UIEdgeInsets;
overload selector(static "valuesForPasteboardType:inItemSet:") = NSArray, NSString, NSIndexSet;
overload selector(static "variable") = NSString;
overload selector(static "velocity") = Float;
overload selector(static "velocityInView:") = CGPoint, UIView;
overload selector(static "version") = Int;
overload selector(static "versionForClassName:") = Int, NSString;
overload selector(static "veryShortMonthSymbols") = NSArray;
overload selector(static "veryShortStandaloneMonthSymbols") = NSArray;
overload selector(static "veryShortStandaloneWeekdaySymbols") = NSArray;
overload selector(static "veryShortWeekdaySymbols") = NSArray;
overload selector(static "videoEditorController:didFailWithError:") = Void, UIVideoEditorController, NSError;
overload selector(static "videoEditorController:didSaveEditedVideoToPath:") = Void, UIVideoEditorController, NSString;
overload selector(static "videoEditorControllerDidCancel:") = Void, UIVideoEditorController;
overload selector(static "videoMaximumDuration") = Double;
overload selector(static "videoPath") = NSString;
overload selector(static "videoQuality") = UInt;
overload selector(static "view") = UIView;
overload selector(static "viewControllers") = NSArray;
overload selector(static "viewDidAppear:") = Void, Bool;
overload selector(static "viewDidDisappear:") = Void, Bool;
overload selector(static "viewDidLoad") = Void;
overload selector(static "viewDidUnload") = Void;
overload selector(static "viewFlipsideBackgroundColor") = UIColor;
overload selector(static "viewForRow:forComponent:") = UIView, Int, Int;
overload selector(static "viewForZoomingInScrollView:") = UIView, UIScrollView;
overload selector(static "viewWillAppear:") = Void, Bool;
overload selector(static "viewWillDisappear:") = Void, Bool;
overload selector(static "viewWithTag:") = UIView, Int;
overload selector(static "visibleCells") = NSArray;
overload selector(static "visibleViewController") = UIViewController;
overload selector(static "volatileDomainForName:") = NSDictionary, NSString;
overload selector(static "volatileDomainNames") = NSArray;
overload selector(static "wait") = Void;
overload selector(static "waitForDataInBackgroundAndNotify") = Void;
overload selector(static "waitForDataInBackgroundAndNotifyForModes:") = Void, NSArray;
overload selector(static "waitUntilAllOperationsAreFinished") = Void;
overload selector(static "waitUntilDate:") = Bool, NSDate;
overload selector(static "waitUntilFinished") = Void;
overload selector(static "wantsFullScreenLayout") = Bool;
overload selector(static "webView:didFailLoadWithError:") = Void, UIWebView, NSError;
overload selector(static "webView:shouldStartLoadWithRequest:navigationType:") = Bool, UIWebView, NSURLRequest, UInt;
overload selector(static "webViewDidFinishLoad:") = Void, UIWebView;
overload selector(static "webViewDidStartLoad:") = Void, UIWebView;
overload selector(static "week") = Int;
overload selector(static "weekday") = Int;
overload selector(static "weekdayOrdinal") = Int;
overload selector(static "weekdaySymbols") = NSArray;
overload selector(static "whiteColor") = UIColor;
overload selector(static "whitespaceAndNewlineCharacterSet") = Id;
overload selector(static "whitespaceCharacterSet") = Id;
overload selector(static "width") = Float;
overload selector(static "widthForSegmentAtIndex:") = Float, UInt;
overload selector(static "willAnimateFirstHalfOfRotationToInterfaceOrientation:duration:") = Void, UIInterfaceOrientation, Double;
overload selector(static "willAnimateRotationToInterfaceOrientation:duration:") = Void, UIInterfaceOrientation, Double;
overload selector(static "willAnimateSecondHalfOfRotationFromInterfaceOrientation:duration:") = Void, UIInterfaceOrientation, Double;
overload selector(static "willChange:valuesAtIndexes:forKey:") = Void, UInt, NSIndexSet, NSString;
overload selector(static "willChangeValueForKey:") = Void, NSString;
overload selector(static "willChangeValueForKey:withSetMutation:usingObjects:") = Void, NSString, UInt, NSSet;
overload selector(static "willMoveToSuperview:") = Void, UIView;
overload selector(static "willMoveToWindow:") = Void, UIWindow;
overload selector(static "willPresentActionSheet:") = Void, UIActionSheet;
overload selector(static "willPresentAlertView:") = Void, UIAlertView;
overload selector(static "willRemoveSubview:") = Void, UIView;
overload selector(static "willRotateToInterfaceOrientation:duration:") = Void, UIInterfaceOrientation, Double;
overload selector(static "willTransitionToState:") = Void, UInt;
overload selector(static "window") = UIWindow;
overload selector(static "windowLevel") = Float;
overload selector(static "windows") = NSArray;
overload selector(static "windowsLocaleCodeFromLocaleIdentifier:") = UInt, NSString;
overload selector(static "write:maxLength:") = Int, Pointer[CUChar], UInt;
overload selector(static "writeBookmarkData:toURL:options:error:") = Bool, NSData, NSURL, UInt, Pointer[NSError];
overload selector(static "writeData:") = Void, NSData;
overload selector(static "writePropertyList:toStream:format:options:error:") = Int, Id, NSOutputStream, UInt, UInt, Pointer[NSError];
overload selector(static "writeToFile:atomically:") = Bool, NSString, Bool;
overload selector(static "writeToFile:atomically:encoding:error:") = Bool, NSString, Bool, UInt, Pointer[NSError];
overload selector(static "writeToFile:atomically:updateFilenames:") = Bool, NSString, Bool, Bool;
overload selector(static "writeToFile:options:error:") = Bool, NSString, UInt, Pointer[NSError];
overload selector(static "writeToURL:atomically:") = Bool, NSURL, Bool;
overload selector(static "writeToURL:atomically:encoding:error:") = Bool, NSURL, Bool, UInt, Pointer[NSError];
overload selector(static "writeToURL:options:error:") = Bool, NSURL, UInt, Pointer[NSError];
overload selector(static "writeToURL:options:originalContentsURL:error:") = Bool, NSURL, UInt, NSURL, Pointer[NSError];
overload selector(static "x") = Double;
overload selector(static "xHeight") = Float;
overload selector(static "y") = Double;
overload selector(static "year") = Int;
overload selector(static "yellowColor") = UIColor;
overload selector(static "z") = Double;
overload selector(static "zero") = NSDecimalNumber;
overload selector(static "zeroSymbol") = NSString;
overload selector(static "zone") = Pointer[NSZone];
overload selector(static "zoomScale") = Float;
overload selector(static "zoomToRect:animated:") = Void, CGRect, Bool;

overload externalInstanceMethod(static NSBundle, static "loadNibNamed:owner:options:") = NSArray, NSString, Id, NSDictionary;

overload externalInstanceMethod(static NSCoder, static "encodeCGPoint:forKey:") = Void, CGPoint, NSString;
overload externalInstanceMethod(static NSCoder, static "encodeCGSize:forKey:") = Void, CGSize, NSString;
overload externalInstanceMethod(static NSCoder, static "encodeCGRect:forKey:") = Void, CGRect, NSString;
overload externalInstanceMethod(static NSCoder, static "encodeCGAffineTransform:forKey:") = Void, CGAffineTransform, NSString;
overload externalInstanceMethod(static NSCoder, static "encodeUIEdgeInsets:forKey:") = Void, UIEdgeInsets, NSString;
overload externalInstanceMethod(static NSCoder, static "decodeCGPointForKey:") = CGPoint, NSString;
overload externalInstanceMethod(static NSCoder, static "decodeCGSizeForKey:") = CGSize, NSString;
overload externalInstanceMethod(static NSCoder, static "decodeCGRectForKey:") = CGRect, NSString;
overload externalInstanceMethod(static NSCoder, static "decodeCGAffineTransformForKey:") = CGAffineTransform, NSString;
overload externalInstanceMethod(static NSCoder, static "decodeUIEdgeInsetsForKey:") = UIEdgeInsets, NSString;

overload externalClassMethod(static NSIndexPath, static "indexPathForRow:inSection:") = NSIndexPath, UInt, UInt;
overload externalInstanceMethod(static NSIndexPath, static "section") = UInt;
overload externalInstanceMethod(static NSIndexPath, static "row") = UInt;

overload externalInstanceMethod(static NSObject, static "cut:") = Void, Id;
overload externalInstanceMethod(static NSObject, static "copy:") = Void, Id;
overload externalInstanceMethod(static NSObject, static "paste:") = Void, Id;
overload externalInstanceMethod(static NSObject, static "select:") = Void, Id;
overload externalInstanceMethod(static NSObject, static "selectAll:") = Void, Id;
overload externalInstanceMethod(static NSObject, static "delete:") = Void, Id;
overload externalInstanceMethod(static NSObject, static "isAccessibilityElement") = Bool;
overload externalInstanceMethod(static NSObject, static "setIsAccessibilityElement:") = Void, Bool;
overload externalInstanceMethod(static NSObject, static "accessibilityLabel") = NSString;
overload externalInstanceMethod(static NSObject, static "setAccessibilityLabel:") = Void, NSString;
overload externalInstanceMethod(static NSObject, static "accessibilityHint") = NSString;
overload externalInstanceMethod(static NSObject, static "setAccessibilityHint:") = Void, NSString;
overload externalInstanceMethod(static NSObject, static "accessibilityValue") = NSString;
overload externalInstanceMethod(static NSObject, static "setAccessibilityValue:") = Void, NSString;
overload externalInstanceMethod(static NSObject, static "accessibilityTraits") = UInt64;
overload externalInstanceMethod(static NSObject, static "setAccessibilityTraits:") = Void, UInt64;
overload externalInstanceMethod(static NSObject, static "accessibilityFrame") = CGRect;
overload externalInstanceMethod(static NSObject, static "setAccessibilityFrame:") = Void, CGRect;
overload externalInstanceMethod(static NSObject, static "accessibilityLanguage") = NSString;
overload externalInstanceMethod(static NSObject, static "setAccessibilityLanguage:") = Void, NSString;
overload externalInstanceMethod(static NSObject, static "accessibilityElementCount") = Int;
overload externalInstanceMethod(static NSObject, static "accessibilityElementAtIndex:") = Id, Int;
overload externalInstanceMethod(static NSObject, static "indexOfAccessibilityElement:") = Int, Id;
overload externalInstanceMethod(static NSObject, static "accessibilityElementDidBecomeFocused") = Void;
overload externalInstanceMethod(static NSObject, static "accessibilityElementDidLoseFocus") = Void;
overload externalInstanceMethod(static NSObject, static "accessibilityElementIsFocused") = Bool;
overload externalInstanceMethod(static NSObject, static "accessibilityIncrement") = Void;
overload externalInstanceMethod(static NSObject, static "accessibilityDecrement") = Void;
overload externalInstanceMethod(static NSObject, static "awakeFromNib") = Void;

overload externalInstanceMethod(static NSString, static "sizeWithFont:") = CGSize, UIFont;
overload externalInstanceMethod(static NSString, static "sizeWithFont:forWidth:lineBreakMode:") = CGSize, UIFont, Float, UILineBreakMode;
overload externalInstanceMethod(static NSString, static "drawAtPoint:withFont:") = CGSize, CGPoint, UIFont;
overload externalInstanceMethod(static NSString, static "drawAtPoint:forWidth:withFont:lineBreakMode:") = CGSize, CGPoint, Float, UIFont, UILineBreakMode;
overload externalInstanceMethod(static NSString, static "sizeWithFont:constrainedToSize:") = CGSize, UIFont, CGSize;
overload externalInstanceMethod(static NSString, static "sizeWithFont:constrainedToSize:lineBreakMode:") = CGSize, UIFont, CGSize, UILineBreakMode;
overload externalInstanceMethod(static NSString, static "drawInRect:withFont:") = CGSize, CGRect, UIFont;
overload externalInstanceMethod(static NSString, static "drawInRect:withFont:lineBreakMode:") = CGSize, CGRect, UIFont, UILineBreakMode;
overload externalInstanceMethod(static NSString, static "drawInRect:withFont:lineBreakMode:alignment:") = CGSize, CGRect, UIFont, UILineBreakMode, UITextAlignment;
overload externalInstanceMethod(static NSString, static "sizeWithFont:minFontSize:actualFontSize:forWidth:lineBreakMode:") = CGSize, UIFont, Float, Pointer[Float], Float, UILineBreakMode;
overload externalInstanceMethod(static NSString, static "drawAtPoint:forWidth:withFont:fontSize:lineBreakMode:baselineAdjustment:") = CGSize, CGPoint, Float, UIFont, Float, UILineBreakMode, UIBaselineAdjustment;
overload externalInstanceMethod(static NSString, static "drawAtPoint:forWidth:withFont:minFontSize:actualFontSize:lineBreakMode:baselineAdjustment:") = CGSize, CGPoint, Float, UIFont, Float, Pointer[Float], UILineBreakMode, UIBaselineAdjustment;

overload externalClassMethod(static NSValue, static "valueWithCGPoint:") = NSValue, CGPoint;
overload externalClassMethod(static NSValue, static "valueWithCGSize:") = NSValue, CGSize;
overload externalClassMethod(static NSValue, static "valueWithCGRect:") = NSValue, CGRect;
overload externalClassMethod(static NSValue, static "valueWithCGAffineTransform:") = NSValue, CGAffineTransform;
overload externalClassMethod(static NSValue, static "valueWithUIEdgeInsets:") = NSValue, UIEdgeInsets;
overload externalInstanceMethod(static NSValue, static "CGPointValue") = CGPoint;
overload externalInstanceMethod(static NSValue, static "CGSizeValue") = CGSize;
overload externalInstanceMethod(static NSValue, static "CGRectValue") = CGRect;
overload externalInstanceMethod(static NSValue, static "CGAffineTransformValue") = CGAffineTransform;
overload externalInstanceMethod(static NSValue, static "UIEdgeInsetsValue") = UIEdgeInsets;

record UIAcceleration = externalClass(NSObject);
overload externalInstanceMethod(static UIAcceleration, static "timestamp") = Double;
overload externalInstanceMethod(static UIAcceleration, static "x") = Double;
overload externalInstanceMethod(static UIAcceleration, static "y") = Double;
overload externalInstanceMethod(static UIAcceleration, static "z") = Double;

record UIAccelerometer = externalClass(NSObject);
overload externalClassMethod(static UIAccelerometer, static "sharedAccelerometer") = UIAccelerometer;
overload externalInstanceMethod(static UIAccelerometer, static "updateInterval") = Double;
overload externalInstanceMethod(static UIAccelerometer, static "setUpdateInterval:") = Void, Double;
overload externalInstanceMethod(static UIAccelerometer, static "delegate") = Id;
overload externalInstanceMethod(static UIAccelerometer, static "setDelegate:") = Void, Id;

record UIAccessibilityElement = externalClass(NSObject);
overload externalInstanceMethod(static UIAccessibilityElement, static "initWithAccessibilityContainer:") = Id, Id;
overload externalInstanceMethod(static UIAccessibilityElement, static "accessibilityContainer") = Id;
overload externalInstanceMethod(static UIAccessibilityElement, static "setAccessibilityContainer:") = Void, Id;
overload externalInstanceMethod(static UIAccessibilityElement, static "isAccessibilityElement") = Bool;
overload externalInstanceMethod(static UIAccessibilityElement, static "setIsAccessibilityElement:") = Void, Bool;
overload externalInstanceMethod(static UIAccessibilityElement, static "accessibilityLabel") = NSString;
overload externalInstanceMethod(static UIAccessibilityElement, static "setAccessibilityLabel:") = Void, NSString;
overload externalInstanceMethod(static UIAccessibilityElement, static "accessibilityHint") = NSString;
overload externalInstanceMethod(static UIAccessibilityElement, static "setAccessibilityHint:") = Void, NSString;
overload externalInstanceMethod(static UIAccessibilityElement, static "accessibilityValue") = NSString;
overload externalInstanceMethod(static UIAccessibilityElement, static "setAccessibilityValue:") = Void, NSString;
overload externalInstanceMethod(static UIAccessibilityElement, static "accessibilityFrame") = CGRect;
overload externalInstanceMethod(static UIAccessibilityElement, static "setAccessibilityFrame:") = Void, CGRect;
overload externalInstanceMethod(static UIAccessibilityElement, static "accessibilityTraits") = UInt64;
overload externalInstanceMethod(static UIAccessibilityElement, static "setAccessibilityTraits:") = Void, UInt64;

record UIActionSheet = externalClass(UIView);
overload externalVarargInstanceMethod(static UIActionSheet, static "initWithTitle:delegate:cancelButtonTitle:destructiveButtonTitle:otherButtonTitles:") = Id, NSString, Id, NSString, NSString, NSString;
overload externalInstanceMethod(static UIActionSheet, static "addButtonWithTitle:") = Int, NSString;
overload externalInstanceMethod(static UIActionSheet, static "buttonTitleAtIndex:") = NSString, Int;
overload externalInstanceMethod(static UIActionSheet, static "showFromToolbar:") = Void, UIToolbar;
overload externalInstanceMethod(static UIActionSheet, static "showFromTabBar:") = Void, UITabBar;
overload externalInstanceMethod(static UIActionSheet, static "showFromBarButtonItem:animated:") = Void, UIBarButtonItem, Bool;
overload externalInstanceMethod(static UIActionSheet, static "showFromRect:inView:animated:") = Void, CGRect, UIView, Bool;
overload externalInstanceMethod(static UIActionSheet, static "showInView:") = Void, UIView;
overload externalInstanceMethod(static UIActionSheet, static "dismissWithClickedButtonIndex:animated:") = Void, Int, Bool;
overload externalInstanceMethod(static UIActionSheet, static "delegate") = Id;
overload externalInstanceMethod(static UIActionSheet, static "setDelegate:") = Void, Id;
overload externalInstanceMethod(static UIActionSheet, static "title") = NSString;
overload externalInstanceMethod(static UIActionSheet, static "setTitle:") = Void, NSString;
overload externalInstanceMethod(static UIActionSheet, static "actionSheetStyle") = UIActionSheetStyle;
overload externalInstanceMethod(static UIActionSheet, static "setActionSheetStyle:") = Void, UIActionSheetStyle;
overload externalInstanceMethod(static UIActionSheet, static "numberOfButtons") = Int;
overload externalInstanceMethod(static UIActionSheet, static "cancelButtonIndex") = Int;
overload externalInstanceMethod(static UIActionSheet, static "setCancelButtonIndex:") = Void, Int;
overload externalInstanceMethod(static UIActionSheet, static "destructiveButtonIndex") = Int;
overload externalInstanceMethod(static UIActionSheet, static "setDestructiveButtonIndex:") = Void, Int;
overload externalInstanceMethod(static UIActionSheet, static "firstOtherButtonIndex") = Int;
overload externalInstanceMethod(static UIActionSheet, static "isVisible") = Bool;

record UIActivityIndicatorView = externalClass(UIView);
overload externalInstanceMethod(static UIActivityIndicatorView, static "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static UIActivityIndicatorView, static "initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(static UIActivityIndicatorView, static "initWithActivityIndicatorStyle:") = Id, UIActivityIndicatorViewStyle;
overload externalInstanceMethod(static UIActivityIndicatorView, static "startAnimating") = Void;
overload externalInstanceMethod(static UIActivityIndicatorView, static "stopAnimating") = Void;
overload externalInstanceMethod(static UIActivityIndicatorView, static "isAnimating") = Bool;
overload externalInstanceMethod(static UIActivityIndicatorView, static "activityIndicatorViewStyle") = UIActivityIndicatorViewStyle;
overload externalInstanceMethod(static UIActivityIndicatorView, static "setActivityIndicatorViewStyle:") = Void, UIActivityIndicatorViewStyle;
overload externalInstanceMethod(static UIActivityIndicatorView, static "hidesWhenStopped") = Bool;
overload externalInstanceMethod(static UIActivityIndicatorView, static "setHidesWhenStopped:") = Void, Bool;

record UIAlertView = externalClass(UIView);
overload externalVarargInstanceMethod(static UIAlertView, static "initWithTitle:message:delegate:cancelButtonTitle:otherButtonTitles:") = Id, NSString, NSString, Id, NSString, NSString;
overload externalInstanceMethod(static UIAlertView, static "addButtonWithTitle:") = Int, NSString;
overload externalInstanceMethod(static UIAlertView, static "buttonTitleAtIndex:") = NSString, Int;
overload externalInstanceMethod(static UIAlertView, static "show") = Void;
overload externalInstanceMethod(static UIAlertView, static "dismissWithClickedButtonIndex:animated:") = Void, Int, Bool;
overload externalInstanceMethod(static UIAlertView, static "delegate") = Id;
overload externalInstanceMethod(static UIAlertView, static "setDelegate:") = Void, Id;
overload externalInstanceMethod(static UIAlertView, static "title") = NSString;
overload externalInstanceMethod(static UIAlertView, static "setTitle:") = Void, NSString;
overload externalInstanceMethod(static UIAlertView, static "message") = NSString;
overload externalInstanceMethod(static UIAlertView, static "setMessage:") = Void, NSString;
overload externalInstanceMethod(static UIAlertView, static "numberOfButtons") = Int;
overload externalInstanceMethod(static UIAlertView, static "cancelButtonIndex") = Int;
overload externalInstanceMethod(static UIAlertView, static "setCancelButtonIndex:") = Void, Int;
overload externalInstanceMethod(static UIAlertView, static "firstOtherButtonIndex") = Int;
overload externalInstanceMethod(static UIAlertView, static "isVisible") = Bool;

record UIApplication = externalClass(UIResponder);
overload externalInstanceMethod(static UIApplication, static "actionSheet:clickedButtonAtIndex:") = Void, UIActionSheet, Int;
overload externalInstanceMethod(static UIApplication, static "actionSheetCancel:") = Void, UIActionSheet;
overload externalInstanceMethod(static UIApplication, static "willPresentActionSheet:") = Void, UIActionSheet;
overload externalInstanceMethod(static UIApplication, static "didPresentActionSheet:") = Void, UIActionSheet;
overload externalInstanceMethod(static UIApplication, static "actionSheet:willDismissWithButtonIndex:") = Void, UIActionSheet, Int;
overload externalInstanceMethod(static UIApplication, static "actionSheet:didDismissWithButtonIndex:") = Void, UIActionSheet, Int;
overload externalClassMethod(static UIApplication, static "sharedApplication") = UIApplication;
overload externalInstanceMethod(static UIApplication, static "beginIgnoringInteractionEvents") = Void;
overload externalInstanceMethod(static UIApplication, static "endIgnoringInteractionEvents") = Void;
overload externalInstanceMethod(static UIApplication, static "isIgnoringInteractionEvents") = Bool;
overload externalInstanceMethod(static UIApplication, static "openURL:") = Bool, NSURL;
overload externalInstanceMethod(static UIApplication, static "canOpenURL:") = Bool, NSURL;
overload externalInstanceMethod(static UIApplication, static "sendEvent:") = Void, UIEvent;
overload externalInstanceMethod(static UIApplication, static "sendAction:to:from:forEvent:") = Bool, SelectorHandle, Id, Id, UIEvent;
overload externalInstanceMethod(static UIApplication, static "setStatusBarStyle:animated:") = Void, UIStatusBarStyle, Bool;
overload externalInstanceMethod(static UIApplication, static "setStatusBarHidden:withAnimation:") = Void, Bool, UIStatusBarAnimation;
overload externalInstanceMethod(static UIApplication, static "setStatusBarOrientation:animated:") = Void, UIInterfaceOrientation, Bool;
overload externalInstanceMethod(static UIApplication, static "beginBackgroundTaskWithExpirationHandler:") = UInt, UnknownType;
overload externalInstanceMethod(static UIApplication, static "endBackgroundTask:") = Void, UInt;
overload externalInstanceMethod(static UIApplication, static "setKeepAliveTimeout:handler:") = Bool, Double, UnknownType;
overload externalInstanceMethod(static UIApplication, static "clearKeepAliveTimeout") = Void;
overload externalInstanceMethod(static UIApplication, static "delegate") = Id;
overload externalInstanceMethod(static UIApplication, static "setDelegate:") = Void, Id;
overload externalInstanceMethod(static UIApplication, static "isIdleTimerDisabled") = Bool;
overload externalInstanceMethod(static UIApplication, static "setIdleTimerDisabled:") = Void, Bool;
overload externalInstanceMethod(static UIApplication, static "keyWindow") = UIWindow;
overload externalInstanceMethod(static UIApplication, static "windows") = NSArray;
overload externalInstanceMethod(static UIApplication, static "isNetworkActivityIndicatorVisible") = Bool;
overload externalInstanceMethod(static UIApplication, static "setNetworkActivityIndicatorVisible:") = Void, Bool;
overload externalInstanceMethod(static UIApplication, static "statusBarStyle") = UIStatusBarStyle;
overload externalInstanceMethod(static UIApplication, static "setStatusBarStyle:") = Void, UIStatusBarStyle;
overload externalInstanceMethod(static UIApplication, static "isStatusBarHidden") = Bool;
overload externalInstanceMethod(static UIApplication, static "setStatusBarHidden:") = Void, Bool;
overload externalInstanceMethod(static UIApplication, static "statusBarOrientation") = UIInterfaceOrientation;
overload externalInstanceMethod(static UIApplication, static "setStatusBarOrientation:") = Void, UIInterfaceOrientation;
overload externalInstanceMethod(static UIApplication, static "statusBarOrientationAnimationDuration") = Double;
overload externalInstanceMethod(static UIApplication, static "statusBarFrame") = CGRect;
overload externalInstanceMethod(static UIApplication, static "applicationIconBadgeNumber") = Int;
overload externalInstanceMethod(static UIApplication, static "setApplicationIconBadgeNumber:") = Void, Int;
overload externalInstanceMethod(static UIApplication, static "applicationSupportsShakeToEdit") = Bool;
overload externalInstanceMethod(static UIApplication, static "setApplicationSupportsShakeToEdit:") = Void, Bool;
overload externalInstanceMethod(static UIApplication, static "applicationState") = UIApplicationState;
overload externalInstanceMethod(static UIApplication, static "backgroundTimeRemaining") = Double;
overload externalInstanceMethod(static UIApplication, static "isProtectedDataAvailable") = Bool;
overload externalInstanceMethod(static UIApplication, static "registerForRemoteNotificationTypes:") = Void, UIRemoteNotificationType;
overload externalInstanceMethod(static UIApplication, static "unregisterForRemoteNotifications") = Void;
overload externalInstanceMethod(static UIApplication, static "enabledRemoteNotificationTypes") = UIRemoteNotificationType;
overload externalInstanceMethod(static UIApplication, static "presentLocalNotificationNow:") = Void, UILocalNotification;
overload externalInstanceMethod(static UIApplication, static "scheduleLocalNotification:") = Void, UILocalNotification;
overload externalInstanceMethod(static UIApplication, static "cancelLocalNotification:") = Void, UILocalNotification;
overload externalInstanceMethod(static UIApplication, static "cancelAllLocalNotifications") = Void;
overload externalInstanceMethod(static UIApplication, static "scheduledLocalNotifications") = NSArray;
overload externalInstanceMethod(static UIApplication, static "beginReceivingRemoteControlEvents") = Void;
overload externalInstanceMethod(static UIApplication, static "endReceivingRemoteControlEvents") = Void;
overload externalInstanceMethod(static UIApplication, static "setStatusBarHidden:animated:") = Void, Bool, Bool;
overload externalInstanceMethod(static UIApplication, static "isProximitySensingEnabled") = Bool;
overload externalInstanceMethod(static UIApplication, static "setProximitySensingEnabled:") = Void, Bool;

record UIBarButtonItem = externalClass(UIBarItem);
overload externalInstanceMethod(static UIBarButtonItem, static "initWithImage:style:target:action:") = Id, UIImage, UIBarButtonItemStyle, Id, SelectorHandle;
overload externalInstanceMethod(static UIBarButtonItem, static "initWithTitle:style:target:action:") = Id, NSString, UIBarButtonItemStyle, Id, SelectorHandle;
overload externalInstanceMethod(static UIBarButtonItem, static "initWithBarButtonSystemItem:target:action:") = Id, UIBarButtonSystemItem, Id, SelectorHandle;
overload externalInstanceMethod(static UIBarButtonItem, static "initWithCustomView:") = Id, UIView;
overload externalInstanceMethod(static UIBarButtonItem, static "style") = UIBarButtonItemStyle;
overload externalInstanceMethod(static UIBarButtonItem, static "setStyle:") = Void, UIBarButtonItemStyle;
overload externalInstanceMethod(static UIBarButtonItem, static "width") = Float;
overload externalInstanceMethod(static UIBarButtonItem, static "setWidth:") = Void, Float;
overload externalInstanceMethod(static UIBarButtonItem, static "possibleTitles") = NSSet;
overload externalInstanceMethod(static UIBarButtonItem, static "setPossibleTitles:") = Void, NSSet;
overload externalInstanceMethod(static UIBarButtonItem, static "customView") = UIView;
overload externalInstanceMethod(static UIBarButtonItem, static "setCustomView:") = Void, UIView;
overload externalInstanceMethod(static UIBarButtonItem, static "action") = SelectorHandle;
overload externalInstanceMethod(static UIBarButtonItem, static "setAction:") = Void, SelectorHandle;
overload externalInstanceMethod(static UIBarButtonItem, static "target") = Id;
overload externalInstanceMethod(static UIBarButtonItem, static "setTarget:") = Void, Id;

record UIBarItem = externalClass(NSObject);
overload externalInstanceMethod(static UIBarItem, static "isEnabled") = Bool;
overload externalInstanceMethod(static UIBarItem, static "setEnabled:") = Void, Bool;
overload externalInstanceMethod(static UIBarItem, static "title") = NSString;
overload externalInstanceMethod(static UIBarItem, static "setTitle:") = Void, NSString;
overload externalInstanceMethod(static UIBarItem, static "image") = UIImage;
overload externalInstanceMethod(static UIBarItem, static "setImage:") = Void, UIImage;
overload externalInstanceMethod(static UIBarItem, static "imageInsets") = UIEdgeInsets;
overload externalInstanceMethod(static UIBarItem, static "setImageInsets:") = Void, UIEdgeInsets;
overload externalInstanceMethod(static UIBarItem, static "tag") = Int;
overload externalInstanceMethod(static UIBarItem, static "setTag:") = Void, Int;

record UIBezierPath = externalClass(NSObject);
overload externalInstanceMethod(static UIBezierPath, static "copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(static UIBezierPath, static "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static UIBezierPath, static "initWithCoder:") = Id, NSCoder;
overload externalClassMethod(static UIBezierPath, static "bezierPath") = UIBezierPath;
overload externalClassMethod(static UIBezierPath, static "bezierPathWithRect:") = UIBezierPath, CGRect;
overload externalClassMethod(static UIBezierPath, static "bezierPathWithOvalInRect:") = UIBezierPath, CGRect;
overload externalClassMethod(static UIBezierPath, static "bezierPathWithRoundedRect:cornerRadius:") = UIBezierPath, CGRect, Float;
overload externalClassMethod(static UIBezierPath, static "bezierPathWithRoundedRect:byRoundingCorners:cornerRadii:") = UIBezierPath, CGRect, UInt, CGSize;
overload externalClassMethod(static UIBezierPath, static "bezierPathWithArcCenter:radius:startAngle:endAngle:clockwise:") = UIBezierPath, CGPoint, Float, Float, Float, Bool;
overload externalClassMethod(static UIBezierPath, static "bezierPathWithCGPath:") = UIBezierPath, CGPathRef;
overload externalInstanceMethod(static UIBezierPath, static "moveToPoint:") = Void, CGPoint;
overload externalInstanceMethod(static UIBezierPath, static "addLineToPoint:") = Void, CGPoint;
overload externalInstanceMethod(static UIBezierPath, static "addCurveToPoint:controlPoint1:controlPoint2:") = Void, CGPoint, CGPoint, CGPoint;
overload externalInstanceMethod(static UIBezierPath, static "addQuadCurveToPoint:controlPoint:") = Void, CGPoint, CGPoint;
overload externalInstanceMethod(static UIBezierPath, static "addArcWithCenter:radius:startAngle:endAngle:clockwise:") = Void, CGPoint, Float, Float, Float, Bool;
overload externalInstanceMethod(static UIBezierPath, static "closePath") = Void;
overload externalInstanceMethod(static UIBezierPath, static "removeAllPoints") = Void;
overload externalInstanceMethod(static UIBezierPath, static "appendPath:") = Void, UIBezierPath;
overload externalInstanceMethod(static UIBezierPath, static "applyTransform:") = Void, CGAffineTransform;
overload externalInstanceMethod(static UIBezierPath, static "containsPoint:") = Bool, CGPoint;
overload externalInstanceMethod(static UIBezierPath, static "setLineDash:count:phase:") = Void, Pointer[Float], Int, Float;
overload externalInstanceMethod(static UIBezierPath, static "getLineDash:count:phase:") = Void, Pointer[Float], Pointer[Int], Pointer[Float];
overload externalInstanceMethod(static UIBezierPath, static "fill") = Void;
overload externalInstanceMethod(static UIBezierPath, static "stroke") = Void;
overload externalInstanceMethod(static UIBezierPath, static "fillWithBlendMode:alpha:") = Void, CGBlendMode, Float;
overload externalInstanceMethod(static UIBezierPath, static "strokeWithBlendMode:alpha:") = Void, CGBlendMode, Float;
overload externalInstanceMethod(static UIBezierPath, static "addClip") = Void;
overload externalInstanceMethod(static UIBezierPath, static "CGPath") = CGPathRef;
overload externalInstanceMethod(static UIBezierPath, static "setCGPath:") = Void, CGPathRef;
overload externalInstanceMethod(static UIBezierPath, static "isEmpty") = Bool;
overload externalInstanceMethod(static UIBezierPath, static "bounds") = CGRect;
overload externalInstanceMethod(static UIBezierPath, static "currentPoint") = CGPoint;
overload externalInstanceMethod(static UIBezierPath, static "lineWidth") = Float;
overload externalInstanceMethod(static UIBezierPath, static "setLineWidth:") = Void, Float;
overload externalInstanceMethod(static UIBezierPath, static "lineCapStyle") = CGLineCap;
overload externalInstanceMethod(static UIBezierPath, static "setLineCapStyle:") = Void, CGLineCap;
overload externalInstanceMethod(static UIBezierPath, static "lineJoinStyle") = CGLineJoin;
overload externalInstanceMethod(static UIBezierPath, static "setLineJoinStyle:") = Void, CGLineJoin;
overload externalInstanceMethod(static UIBezierPath, static "miterLimit") = Float;
overload externalInstanceMethod(static UIBezierPath, static "setMiterLimit:") = Void, Float;
overload externalInstanceMethod(static UIBezierPath, static "flatness") = Float;
overload externalInstanceMethod(static UIBezierPath, static "setFlatness:") = Void, Float;
overload externalInstanceMethod(static UIBezierPath, static "usesEvenOddFillRule") = Bool;
overload externalInstanceMethod(static UIBezierPath, static "setUsesEvenOddFillRule:") = Void, Bool;

record UIButton = externalClass(UIControl);
overload externalInstanceMethod(static UIButton, static "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static UIButton, static "initWithCoder:") = Id, NSCoder;
overload externalClassMethod(static UIButton, static "buttonWithType:") = Id, UIButtonType;
overload externalInstanceMethod(static UIButton, static "setTitle:forState:") = Void, NSString, UInt;
overload externalInstanceMethod(static UIButton, static "setTitleColor:forState:") = Void, UIColor, UInt;
overload externalInstanceMethod(static UIButton, static "setTitleShadowColor:forState:") = Void, UIColor, UInt;
overload externalInstanceMethod(static UIButton, static "setImage:forState:") = Void, UIImage, UInt;
overload externalInstanceMethod(static UIButton, static "setBackgroundImage:forState:") = Void, UIImage, UInt;
overload externalInstanceMethod(static UIButton, static "titleForState:") = NSString, UInt;
overload externalInstanceMethod(static UIButton, static "titleColorForState:") = UIColor, UInt;
overload externalInstanceMethod(static UIButton, static "titleShadowColorForState:") = UIColor, UInt;
overload externalInstanceMethod(static UIButton, static "imageForState:") = UIImage, UInt;
overload externalInstanceMethod(static UIButton, static "backgroundImageForState:") = UIImage, UInt;
overload externalInstanceMethod(static UIButton, static "backgroundRectForBounds:") = CGRect, CGRect;
overload externalInstanceMethod(static UIButton, static "contentRectForBounds:") = CGRect, CGRect;
overload externalInstanceMethod(static UIButton, static "titleRectForContentRect:") = CGRect, CGRect;
overload externalInstanceMethod(static UIButton, static "imageRectForContentRect:") = CGRect, CGRect;
overload externalInstanceMethod(static UIButton, static "contentEdgeInsets") = UIEdgeInsets;
overload externalInstanceMethod(static UIButton, static "setContentEdgeInsets:") = Void, UIEdgeInsets;
overload externalInstanceMethod(static UIButton, static "titleEdgeInsets") = UIEdgeInsets;
overload externalInstanceMethod(static UIButton, static "setTitleEdgeInsets:") = Void, UIEdgeInsets;
overload externalInstanceMethod(static UIButton, static "reversesTitleShadowWhenHighlighted") = Bool;
overload externalInstanceMethod(static UIButton, static "setReversesTitleShadowWhenHighlighted:") = Void, Bool;
overload externalInstanceMethod(static UIButton, static "imageEdgeInsets") = UIEdgeInsets;
overload externalInstanceMethod(static UIButton, static "setImageEdgeInsets:") = Void, UIEdgeInsets;
overload externalInstanceMethod(static UIButton, static "adjustsImageWhenHighlighted") = Bool;
overload externalInstanceMethod(static UIButton, static "setAdjustsImageWhenHighlighted:") = Void, Bool;
overload externalInstanceMethod(static UIButton, static "adjustsImageWhenDisabled") = Bool;
overload externalInstanceMethod(static UIButton, static "setAdjustsImageWhenDisabled:") = Void, Bool;
overload externalInstanceMethod(static UIButton, static "showsTouchWhenHighlighted") = Bool;
overload externalInstanceMethod(static UIButton, static "setShowsTouchWhenHighlighted:") = Void, Bool;
overload externalInstanceMethod(static UIButton, static "buttonType") = UIButtonType;
overload externalInstanceMethod(static UIButton, static "currentTitle") = NSString;
overload externalInstanceMethod(static UIButton, static "currentTitleColor") = UIColor;
overload externalInstanceMethod(static UIButton, static "currentTitleShadowColor") = UIColor;
overload externalInstanceMethod(static UIButton, static "currentImage") = UIImage;
overload externalInstanceMethod(static UIButton, static "currentBackgroundImage") = UIImage;
overload externalInstanceMethod(static UIButton, static "titleLabel") = UILabel;
overload externalInstanceMethod(static UIButton, static "imageView") = UIImageView;
overload externalInstanceMethod(static UIButton, static "font") = UIFont;
overload externalInstanceMethod(static UIButton, static "setFont:") = Void, UIFont;
overload externalInstanceMethod(static UIButton, static "lineBreakMode") = UILineBreakMode;
overload externalInstanceMethod(static UIButton, static "setLineBreakMode:") = Void, UILineBreakMode;
overload externalInstanceMethod(static UIButton, static "titleShadowOffset") = CGSize;
overload externalInstanceMethod(static UIButton, static "setTitleShadowOffset:") = Void, CGSize;

record UIColor = externalClass(NSObject);
overload externalInstanceMethod(static UIColor, static "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static UIColor, static "initWithCoder:") = Id, NSCoder;
overload externalClassMethod(static UIColor, static "colorWithWhite:alpha:") = UIColor, Float, Float;
overload externalClassMethod(static UIColor, static "colorWithHue:saturation:brightness:alpha:") = UIColor, Float, Float, Float, Float;
overload externalClassMethod(static UIColor, static "colorWithRed:green:blue:alpha:") = UIColor, Float, Float, Float, Float;
overload externalClassMethod(static UIColor, static "colorWithCGColor:") = UIColor, CGColorRef;
overload externalClassMethod(static UIColor, static "colorWithPatternImage:") = UIColor, UIImage;
overload externalInstanceMethod(static UIColor, static "initWithWhite:alpha:") = UIColor, Float, Float;
overload externalInstanceMethod(static UIColor, static "initWithHue:saturation:brightness:alpha:") = UIColor, Float, Float, Float, Float;
overload externalInstanceMethod(static UIColor, static "initWithRed:green:blue:alpha:") = UIColor, Float, Float, Float, Float;
overload externalInstanceMethod(static UIColor, static "initWithCGColor:") = UIColor, CGColorRef;
overload externalInstanceMethod(static UIColor, static "initWithPatternImage:") = UIColor, UIImage;
overload externalClassMethod(static UIColor, static "blackColor") = UIColor;
overload externalClassMethod(static UIColor, static "darkGrayColor") = UIColor;
overload externalClassMethod(static UIColor, static "lightGrayColor") = UIColor;
overload externalClassMethod(static UIColor, static "whiteColor") = UIColor;
overload externalClassMethod(static UIColor, static "grayColor") = UIColor;
overload externalClassMethod(static UIColor, static "redColor") = UIColor;
overload externalClassMethod(static UIColor, static "greenColor") = UIColor;
overload externalClassMethod(static UIColor, static "blueColor") = UIColor;
overload externalClassMethod(static UIColor, static "cyanColor") = UIColor;
overload externalClassMethod(static UIColor, static "yellowColor") = UIColor;
overload externalClassMethod(static UIColor, static "magentaColor") = UIColor;
overload externalClassMethod(static UIColor, static "orangeColor") = UIColor;
overload externalClassMethod(static UIColor, static "purpleColor") = UIColor;
overload externalClassMethod(static UIColor, static "brownColor") = UIColor;
overload externalClassMethod(static UIColor, static "clearColor") = UIColor;
overload externalInstanceMethod(static UIColor, static "set") = Void;
overload externalInstanceMethod(static UIColor, static "setFill") = Void;
overload externalInstanceMethod(static UIColor, static "setStroke") = Void;
overload externalInstanceMethod(static UIColor, static "colorWithAlphaComponent:") = UIColor, Float;
overload externalInstanceMethod(static UIColor, static "CGColor") = CGColorRef;
overload externalClassMethod(static UIColor, static "lightTextColor") = UIColor;
overload externalClassMethod(static UIColor, static "darkTextColor") = UIColor;
overload externalClassMethod(static UIColor, static "groupTableViewBackgroundColor") = UIColor;
overload externalClassMethod(static UIColor, static "viewFlipsideBackgroundColor") = UIColor;
overload externalClassMethod(static UIColor, static "scrollViewTexturedBackgroundColor") = UIColor;

record UIControl = externalClass(UIView);
overload externalInstanceMethod(static UIControl, static "beginTrackingWithTouch:withEvent:") = Bool, UITouch, UIEvent;
overload externalInstanceMethod(static UIControl, static "continueTrackingWithTouch:withEvent:") = Bool, UITouch, UIEvent;
overload externalInstanceMethod(static UIControl, static "endTrackingWithTouch:withEvent:") = Void, UITouch, UIEvent;
overload externalInstanceMethod(static UIControl, static "cancelTrackingWithEvent:") = Void, UIEvent;
overload externalInstanceMethod(static UIControl, static "addTarget:action:forControlEvents:") = Void, Id, SelectorHandle, UInt;
overload externalInstanceMethod(static UIControl, static "removeTarget:action:forControlEvents:") = Void, Id, SelectorHandle, UInt;
overload externalInstanceMethod(static UIControl, static "allTargets") = NSSet;
overload externalInstanceMethod(static UIControl, static "allControlEvents") = UInt;
overload externalInstanceMethod(static UIControl, static "actionsForTarget:forControlEvent:") = NSArray, Id, UInt;
overload externalInstanceMethod(static UIControl, static "sendAction:to:forEvent:") = Void, SelectorHandle, Id, UIEvent;
overload externalInstanceMethod(static UIControl, static "sendActionsForControlEvents:") = Void, UInt;
overload externalInstanceMethod(static UIControl, static "isEnabled") = Bool;
overload externalInstanceMethod(static UIControl, static "setEnabled:") = Void, Bool;
overload externalInstanceMethod(static UIControl, static "isSelected") = Bool;
overload externalInstanceMethod(static UIControl, static "setSelected:") = Void, Bool;
overload externalInstanceMethod(static UIControl, static "isHighlighted") = Bool;
overload externalInstanceMethod(static UIControl, static "setHighlighted:") = Void, Bool;
overload externalInstanceMethod(static UIControl, static "contentVerticalAlignment") = UIControlContentVerticalAlignment;
overload externalInstanceMethod(static UIControl, static "setContentVerticalAlignment:") = Void, UIControlContentVerticalAlignment;
overload externalInstanceMethod(static UIControl, static "contentHorizontalAlignment") = UIControlContentHorizontalAlignment;
overload externalInstanceMethod(static UIControl, static "setContentHorizontalAlignment:") = Void, UIControlContentHorizontalAlignment;
overload externalInstanceMethod(static UIControl, static "state") = UInt;
overload externalInstanceMethod(static UIControl, static "isTracking") = Bool;
overload externalInstanceMethod(static UIControl, static "isTouchInside") = Bool;

record UIDatePicker = externalClass(UIControl);
overload externalInstanceMethod(static UIDatePicker, static "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static UIDatePicker, static "initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(static UIDatePicker, static "setDate:animated:") = Void, NSDate, Bool;
overload externalInstanceMethod(static UIDatePicker, static "datePickerMode") = UIDatePickerMode;
overload externalInstanceMethod(static UIDatePicker, static "setDatePickerMode:") = Void, UIDatePickerMode;
overload externalInstanceMethod(static UIDatePicker, static "locale") = NSLocale;
overload externalInstanceMethod(static UIDatePicker, static "setLocale:") = Void, NSLocale;
overload externalInstanceMethod(static UIDatePicker, static "timeZone") = NSTimeZone;
overload externalInstanceMethod(static UIDatePicker, static "setTimeZone:") = Void, NSTimeZone;
overload externalInstanceMethod(static UIDatePicker, static "calendar") = NSCalendar;
overload externalInstanceMethod(static UIDatePicker, static "setCalendar:") = Void, NSCalendar;
overload externalInstanceMethod(static UIDatePicker, static "date") = NSDate;
overload externalInstanceMethod(static UIDatePicker, static "setDate:") = Void, NSDate;
overload externalInstanceMethod(static UIDatePicker, static "minimumDate") = NSDate;
overload externalInstanceMethod(static UIDatePicker, static "setMinimumDate:") = Void, NSDate;
overload externalInstanceMethod(static UIDatePicker, static "maximumDate") = NSDate;
overload externalInstanceMethod(static UIDatePicker, static "setMaximumDate:") = Void, NSDate;
overload externalInstanceMethod(static UIDatePicker, static "countDownDuration") = Double;
overload externalInstanceMethod(static UIDatePicker, static "setCountDownDuration:") = Void, Double;
overload externalInstanceMethod(static UIDatePicker, static "minuteInterval") = Int;
overload externalInstanceMethod(static UIDatePicker, static "setMinuteInterval:") = Void, Int;

record UIDevice = externalClass(NSObject);
overload externalClassMethod(static UIDevice, static "currentDevice") = UIDevice;
overload externalInstanceMethod(static UIDevice, static "beginGeneratingDeviceOrientationNotifications") = Void;
overload externalInstanceMethod(static UIDevice, static "endGeneratingDeviceOrientationNotifications") = Void;
overload externalInstanceMethod(static UIDevice, static "name") = NSString;
overload externalInstanceMethod(static UIDevice, static "model") = NSString;
overload externalInstanceMethod(static UIDevice, static "localizedModel") = NSString;
overload externalInstanceMethod(static UIDevice, static "systemName") = NSString;
overload externalInstanceMethod(static UIDevice, static "systemVersion") = NSString;
overload externalInstanceMethod(static UIDevice, static "orientation") = UIDeviceOrientation;
overload externalInstanceMethod(static UIDevice, static "uniqueIdentifier") = NSString;
overload externalInstanceMethod(static UIDevice, static "isGeneratingDeviceOrientationNotifications") = Bool;
overload externalInstanceMethod(static UIDevice, static "isBatteryMonitoringEnabled") = Bool;
overload externalInstanceMethod(static UIDevice, static "setBatteryMonitoringEnabled:") = Void, Bool;
overload externalInstanceMethod(static UIDevice, static "batteryState") = UIDeviceBatteryState;
overload externalInstanceMethod(static UIDevice, static "batteryLevel") = Float;
overload externalInstanceMethod(static UIDevice, static "isProximityMonitoringEnabled") = Bool;
overload externalInstanceMethod(static UIDevice, static "setProximityMonitoringEnabled:") = Void, Bool;
overload externalInstanceMethod(static UIDevice, static "proximityState") = Bool;
overload externalInstanceMethod(static UIDevice, static "isMultitaskingSupported") = Bool;
overload externalInstanceMethod(static UIDevice, static "userInterfaceIdiom") = UIUserInterfaceIdiom;

record UIDocumentInteractionController = externalClass(NSObject);
overload externalInstanceMethod(static UIDocumentInteractionController, static "actionSheet:clickedButtonAtIndex:") = Void, UIActionSheet, Int;
overload externalInstanceMethod(static UIDocumentInteractionController, static "actionSheetCancel:") = Void, UIActionSheet;
overload externalInstanceMethod(static UIDocumentInteractionController, static "willPresentActionSheet:") = Void, UIActionSheet;
overload externalInstanceMethod(static UIDocumentInteractionController, static "didPresentActionSheet:") = Void, UIActionSheet;
overload externalInstanceMethod(static UIDocumentInteractionController, static "actionSheet:willDismissWithButtonIndex:") = Void, UIActionSheet, Int;
overload externalInstanceMethod(static UIDocumentInteractionController, static "actionSheet:didDismissWithButtonIndex:") = Void, UIActionSheet, Int;
overload externalClassMethod(static UIDocumentInteractionController, static "interactionControllerWithURL:") = UIDocumentInteractionController, NSURL;
overload externalInstanceMethod(static UIDocumentInteractionController, static "presentOptionsMenuFromRect:inView:animated:") = Bool, CGRect, UIView, Bool;
overload externalInstanceMethod(static UIDocumentInteractionController, static "presentOptionsMenuFromBarButtonItem:animated:") = Bool, UIBarButtonItem, Bool;
overload externalInstanceMethod(static UIDocumentInteractionController, static "presentPreviewAnimated:") = Bool, Bool;
overload externalInstanceMethod(static UIDocumentInteractionController, static "presentOpenInMenuFromRect:inView:animated:") = Bool, CGRect, UIView, Bool;
overload externalInstanceMethod(static UIDocumentInteractionController, static "presentOpenInMenuFromBarButtonItem:animated:") = Bool, UIBarButtonItem, Bool;
overload externalInstanceMethod(static UIDocumentInteractionController, static "dismissPreviewAnimated:") = Void, Bool;
overload externalInstanceMethod(static UIDocumentInteractionController, static "dismissMenuAnimated:") = Void, Bool;
overload externalInstanceMethod(static UIDocumentInteractionController, static "delegate") = Id;
overload externalInstanceMethod(static UIDocumentInteractionController, static "setDelegate:") = Void, Id;
overload externalInstanceMethod(static UIDocumentInteractionController, static "URL") = NSURL;
overload externalInstanceMethod(static UIDocumentInteractionController, static "setURL:") = Void, NSURL;
overload externalInstanceMethod(static UIDocumentInteractionController, static "UTI") = NSString;
overload externalInstanceMethod(static UIDocumentInteractionController, static "setUTI:") = Void, NSString;
overload externalInstanceMethod(static UIDocumentInteractionController, static "name") = NSString;
overload externalInstanceMethod(static UIDocumentInteractionController, static "setName:") = Void, NSString;
overload externalInstanceMethod(static UIDocumentInteractionController, static "icons") = NSArray;
overload externalInstanceMethod(static UIDocumentInteractionController, static "annotation") = Id;
overload externalInstanceMethod(static UIDocumentInteractionController, static "setAnnotation:") = Void, Id;
overload externalInstanceMethod(static UIDocumentInteractionController, static "gestureRecognizers") = NSArray;

record UIEvent = externalClass(NSObject);
overload externalInstanceMethod(static UIEvent, static "allTouches") = NSSet;
overload externalInstanceMethod(static UIEvent, static "touchesForWindow:") = NSSet, UIWindow;
overload externalInstanceMethod(static UIEvent, static "touchesForView:") = NSSet, UIView;
overload externalInstanceMethod(static UIEvent, static "touchesForGestureRecognizer:") = NSSet, UIGestureRecognizer;
overload externalInstanceMethod(static UIEvent, static "type") = UIEventType;
overload externalInstanceMethod(static UIEvent, static "subtype") = UIEventSubtype;
overload externalInstanceMethod(static UIEvent, static "timestamp") = Double;

record UIFont = externalClass(NSObject);
overload externalClassMethod(static UIFont, static "fontWithName:size:") = UIFont, NSString, Float;
overload externalClassMethod(static UIFont, static "familyNames") = NSArray;
overload externalClassMethod(static UIFont, static "fontNamesForFamilyName:") = NSArray, NSString;
overload externalClassMethod(static UIFont, static "systemFontOfSize:") = UIFont, Float;
overload externalClassMethod(static UIFont, static "boldSystemFontOfSize:") = UIFont, Float;
overload externalClassMethod(static UIFont, static "italicSystemFontOfSize:") = UIFont, Float;
overload externalInstanceMethod(static UIFont, static "fontWithSize:") = UIFont, Float;
overload externalInstanceMethod(static UIFont, static "familyName") = NSString;
overload externalInstanceMethod(static UIFont, static "fontName") = NSString;
overload externalInstanceMethod(static UIFont, static "pointSize") = Float;
overload externalInstanceMethod(static UIFont, static "ascender") = Float;
overload externalInstanceMethod(static UIFont, static "descender") = Float;
overload externalInstanceMethod(static UIFont, static "capHeight") = Float;
overload externalInstanceMethod(static UIFont, static "xHeight") = Float;
overload externalInstanceMethod(static UIFont, static "lineHeight") = Float;
overload externalInstanceMethod(static UIFont, static "leading") = Float;
overload externalClassMethod(static UIFont, static "labelFontSize") = Float;
overload externalClassMethod(static UIFont, static "buttonFontSize") = Float;
overload externalClassMethod(static UIFont, static "smallSystemFontSize") = Float;
overload externalClassMethod(static UIFont, static "systemFontSize") = Float;

record UIGestureRecognizer = externalClass(NSObject);
overload externalInstanceMethod(static UIGestureRecognizer, static "initWithTarget:action:") = Id, Id, SelectorHandle;
overload externalInstanceMethod(static UIGestureRecognizer, static "addTarget:action:") = Void, Id, SelectorHandle;
overload externalInstanceMethod(static UIGestureRecognizer, static "removeTarget:action:") = Void, Id, SelectorHandle;
overload externalInstanceMethod(static UIGestureRecognizer, static "requireGestureRecognizerToFail:") = Void, UIGestureRecognizer;
overload externalInstanceMethod(static UIGestureRecognizer, static "locationInView:") = CGPoint, UIView;
overload externalInstanceMethod(static UIGestureRecognizer, static "numberOfTouches") = UInt;
overload externalInstanceMethod(static UIGestureRecognizer, static "locationOfTouch:inView:") = CGPoint, UInt, UIView;
overload externalInstanceMethod(static UIGestureRecognizer, static "state") = UIGestureRecognizerState;
overload externalInstanceMethod(static UIGestureRecognizer, static "delegate") = Id;
overload externalInstanceMethod(static UIGestureRecognizer, static "setDelegate:") = Void, Id;
overload externalInstanceMethod(static UIGestureRecognizer, static "isEnabled") = Bool;
overload externalInstanceMethod(static UIGestureRecognizer, static "setEnabled:") = Void, Bool;
overload externalInstanceMethod(static UIGestureRecognizer, static "view") = UIView;
overload externalInstanceMethod(static UIGestureRecognizer, static "cancelsTouchesInView") = Bool;
overload externalInstanceMethod(static UIGestureRecognizer, static "setCancelsTouchesInView:") = Void, Bool;
overload externalInstanceMethod(static UIGestureRecognizer, static "delaysTouchesBegan") = Bool;
overload externalInstanceMethod(static UIGestureRecognizer, static "setDelaysTouchesBegan:") = Void, Bool;
overload externalInstanceMethod(static UIGestureRecognizer, static "delaysTouchesEnded") = Bool;
overload externalInstanceMethod(static UIGestureRecognizer, static "setDelaysTouchesEnded:") = Void, Bool;

record UIImage = externalClass(NSObject);
overload externalClassMethod(static UIImage, static "imageNamed:") = UIImage, NSString;
overload externalClassMethod(static UIImage, static "imageWithContentsOfFile:") = UIImage, NSString;
overload externalClassMethod(static UIImage, static "imageWithData:") = UIImage, NSData;
overload externalClassMethod(static UIImage, static "imageWithCGImage:") = UIImage, CGImageRef;
overload externalClassMethod(static UIImage, static "imageWithCGImage:scale:orientation:") = UIImage, CGImageRef, Float, UIImageOrientation;
overload externalInstanceMethod(static UIImage, static "initWithContentsOfFile:") = Id, NSString;
overload externalInstanceMethod(static UIImage, static "initWithData:") = Id, NSData;
overload externalInstanceMethod(static UIImage, static "initWithCGImage:") = Id, CGImageRef;
overload externalInstanceMethod(static UIImage, static "initWithCGImage:scale:orientation:") = Id, CGImageRef, Float, UIImageOrientation;
overload externalInstanceMethod(static UIImage, static "drawAtPoint:") = Void, CGPoint;
overload externalInstanceMethod(static UIImage, static "drawAtPoint:blendMode:alpha:") = Void, CGPoint, CGBlendMode, Float;
overload externalInstanceMethod(static UIImage, static "drawInRect:") = Void, CGRect;
overload externalInstanceMethod(static UIImage, static "drawInRect:blendMode:alpha:") = Void, CGRect, CGBlendMode, Float;
overload externalInstanceMethod(static UIImage, static "drawAsPatternInRect:") = Void, CGRect;
overload externalInstanceMethod(static UIImage, static "stretchableImageWithLeftCapWidth:topCapHeight:") = UIImage, Int, Int;
overload externalInstanceMethod(static UIImage, static "size") = CGSize;
overload externalInstanceMethod(static UIImage, static "CGImage") = CGImageRef;
overload externalInstanceMethod(static UIImage, static "imageOrientation") = UIImageOrientation;
overload externalInstanceMethod(static UIImage, static "scale") = Float;
overload externalInstanceMethod(static UIImage, static "leftCapWidth") = Int;
overload externalInstanceMethod(static UIImage, static "topCapHeight") = Int;

record UIImagePickerController = externalClass(UINavigationController);
overload externalInstanceMethod(static UIImagePickerController, static "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static UIImagePickerController, static "initWithCoder:") = Id, NSCoder;
overload externalClassMethod(static UIImagePickerController, static "isSourceTypeAvailable:") = Bool, UInt;
overload externalClassMethod(static UIImagePickerController, static "availableMediaTypesForSourceType:") = NSArray, UInt;
overload externalClassMethod(static UIImagePickerController, static "isCameraDeviceAvailable:") = Bool, UInt;
overload externalClassMethod(static UIImagePickerController, static "isFlashAvailableForCameraDevice:") = Bool, UInt;
overload externalClassMethod(static UIImagePickerController, static "availableCaptureModesForCameraDevice:") = NSArray, UInt;
overload externalInstanceMethod(static UIImagePickerController, static "takePicture") = Void;
overload externalInstanceMethod(static UIImagePickerController, static "startVideoCapture") = Bool;
overload externalInstanceMethod(static UIImagePickerController, static "stopVideoCapture") = Void;
overload externalInstanceMethod(static UIImagePickerController, static "delegate") = Id;
overload externalInstanceMethod(static UIImagePickerController, static "setDelegate:") = Void, Id;
overload externalInstanceMethod(static UIImagePickerController, static "sourceType") = UInt;
overload externalInstanceMethod(static UIImagePickerController, static "setSourceType:") = Void, UInt;
overload externalInstanceMethod(static UIImagePickerController, static "mediaTypes") = NSArray;
overload externalInstanceMethod(static UIImagePickerController, static "setMediaTypes:") = Void, NSArray;
overload externalInstanceMethod(static UIImagePickerController, static "allowsEditing") = Bool;
overload externalInstanceMethod(static UIImagePickerController, static "setAllowsEditing:") = Void, Bool;
overload externalInstanceMethod(static UIImagePickerController, static "allowsImageEditing") = Bool;
overload externalInstanceMethod(static UIImagePickerController, static "setAllowsImageEditing:") = Void, Bool;
overload externalInstanceMethod(static UIImagePickerController, static "videoMaximumDuration") = Double;
overload externalInstanceMethod(static UIImagePickerController, static "setVideoMaximumDuration:") = Void, Double;
overload externalInstanceMethod(static UIImagePickerController, static "videoQuality") = UInt;
overload externalInstanceMethod(static UIImagePickerController, static "setVideoQuality:") = Void, UInt;
overload externalInstanceMethod(static UIImagePickerController, static "showsCameraControls") = Bool;
overload externalInstanceMethod(static UIImagePickerController, static "setShowsCameraControls:") = Void, Bool;
overload externalInstanceMethod(static UIImagePickerController, static "cameraOverlayView") = UIView;
overload externalInstanceMethod(static UIImagePickerController, static "setCameraOverlayView:") = Void, UIView;
overload externalInstanceMethod(static UIImagePickerController, static "cameraViewTransform") = CGAffineTransform;
overload externalInstanceMethod(static UIImagePickerController, static "setCameraViewTransform:") = Void, CGAffineTransform;
overload externalInstanceMethod(static UIImagePickerController, static "cameraCaptureMode") = UInt;
overload externalInstanceMethod(static UIImagePickerController, static "setCameraCaptureMode:") = Void, UInt;
overload externalInstanceMethod(static UIImagePickerController, static "cameraDevice") = UInt;
overload externalInstanceMethod(static UIImagePickerController, static "setCameraDevice:") = Void, UInt;
overload externalInstanceMethod(static UIImagePickerController, static "cameraFlashMode") = Int;
overload externalInstanceMethod(static UIImagePickerController, static "setCameraFlashMode:") = Void, Int;

record UIImageView = externalClass(UIView);
overload externalInstanceMethod(static UIImageView, static "initWithImage:") = Id, UIImage;
overload externalInstanceMethod(static UIImageView, static "initWithImage:highlightedImage:") = Id, UIImage, UIImage;
overload externalInstanceMethod(static UIImageView, static "startAnimating") = Void;
overload externalInstanceMethod(static UIImageView, static "stopAnimating") = Void;
overload externalInstanceMethod(static UIImageView, static "isAnimating") = Bool;
overload externalInstanceMethod(static UIImageView, static "image") = UIImage;
overload externalInstanceMethod(static UIImageView, static "setImage:") = Void, UIImage;
overload externalInstanceMethod(static UIImageView, static "highlightedImage") = UIImage;
overload externalInstanceMethod(static UIImageView, static "setHighlightedImage:") = Void, UIImage;
overload externalInstanceMethod(static UIImageView, static "isUserInteractionEnabled") = Bool;
overload externalInstanceMethod(static UIImageView, static "setUserInteractionEnabled:") = Void, Bool;
overload externalInstanceMethod(static UIImageView, static "isHighlighted") = Bool;
overload externalInstanceMethod(static UIImageView, static "setHighlighted:") = Void, Bool;
overload externalInstanceMethod(static UIImageView, static "animationImages") = NSArray;
overload externalInstanceMethod(static UIImageView, static "setAnimationImages:") = Void, NSArray;
overload externalInstanceMethod(static UIImageView, static "highlightedAnimationImages") = NSArray;
overload externalInstanceMethod(static UIImageView, static "setHighlightedAnimationImages:") = Void, NSArray;
overload externalInstanceMethod(static UIImageView, static "animationDuration") = Double;
overload externalInstanceMethod(static UIImageView, static "setAnimationDuration:") = Void, Double;
overload externalInstanceMethod(static UIImageView, static "animationRepeatCount") = Int;
overload externalInstanceMethod(static UIImageView, static "setAnimationRepeatCount:") = Void, Int;

record UILabel = externalClass(UIView);
overload externalInstanceMethod(static UILabel, static "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static UILabel, static "initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(static UILabel, static "textRectForBounds:limitedToNumberOfLines:") = CGRect, CGRect, Int;
overload externalInstanceMethod(static UILabel, static "drawTextInRect:") = Void, CGRect;
overload externalInstanceMethod(static UILabel, static "text") = NSString;
overload externalInstanceMethod(static UILabel, static "setText:") = Void, NSString;
overload externalInstanceMethod(static UILabel, static "font") = UIFont;
overload externalInstanceMethod(static UILabel, static "setFont:") = Void, UIFont;
overload externalInstanceMethod(static UILabel, static "textColor") = UIColor;
overload externalInstanceMethod(static UILabel, static "setTextColor:") = Void, UIColor;
overload externalInstanceMethod(static UILabel, static "shadowColor") = UIColor;
overload externalInstanceMethod(static UILabel, static "setShadowColor:") = Void, UIColor;
overload externalInstanceMethod(static UILabel, static "shadowOffset") = CGSize;
overload externalInstanceMethod(static UILabel, static "setShadowOffset:") = Void, CGSize;
overload externalInstanceMethod(static UILabel, static "textAlignment") = UITextAlignment;
overload externalInstanceMethod(static UILabel, static "setTextAlignment:") = Void, UITextAlignment;
overload externalInstanceMethod(static UILabel, static "lineBreakMode") = UILineBreakMode;
overload externalInstanceMethod(static UILabel, static "setLineBreakMode:") = Void, UILineBreakMode;
overload externalInstanceMethod(static UILabel, static "highlightedTextColor") = UIColor;
overload externalInstanceMethod(static UILabel, static "setHighlightedTextColor:") = Void, UIColor;
overload externalInstanceMethod(static UILabel, static "isHighlighted") = Bool;
overload externalInstanceMethod(static UILabel, static "setHighlighted:") = Void, Bool;
overload externalInstanceMethod(static UILabel, static "isUserInteractionEnabled") = Bool;
overload externalInstanceMethod(static UILabel, static "setUserInteractionEnabled:") = Void, Bool;
overload externalInstanceMethod(static UILabel, static "isEnabled") = Bool;
overload externalInstanceMethod(static UILabel, static "setEnabled:") = Void, Bool;
overload externalInstanceMethod(static UILabel, static "numberOfLines") = Int;
overload externalInstanceMethod(static UILabel, static "setNumberOfLines:") = Void, Int;
overload externalInstanceMethod(static UILabel, static "adjustsFontSizeToFitWidth") = Bool;
overload externalInstanceMethod(static UILabel, static "setAdjustsFontSizeToFitWidth:") = Void, Bool;
overload externalInstanceMethod(static UILabel, static "minimumFontSize") = Float;
overload externalInstanceMethod(static UILabel, static "setMinimumFontSize:") = Void, Float;
overload externalInstanceMethod(static UILabel, static "baselineAdjustment") = UIBaselineAdjustment;
overload externalInstanceMethod(static UILabel, static "setBaselineAdjustment:") = Void, UIBaselineAdjustment;

record UILocalNotification = externalClass(NSObject);
overload externalInstanceMethod(static UILocalNotification, static "copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(static UILocalNotification, static "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static UILocalNotification, static "initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(static UILocalNotification, static "fireDate") = NSDate;
overload externalInstanceMethod(static UILocalNotification, static "setFireDate:") = Void, NSDate;
overload externalInstanceMethod(static UILocalNotification, static "timeZone") = NSTimeZone;
overload externalInstanceMethod(static UILocalNotification, static "setTimeZone:") = Void, NSTimeZone;
overload externalInstanceMethod(static UILocalNotification, static "repeatInterval") = UInt;
overload externalInstanceMethod(static UILocalNotification, static "setRepeatInterval:") = Void, UInt;
overload externalInstanceMethod(static UILocalNotification, static "repeatCalendar") = NSCalendar;
overload externalInstanceMethod(static UILocalNotification, static "setRepeatCalendar:") = Void, NSCalendar;
overload externalInstanceMethod(static UILocalNotification, static "alertBody") = NSString;
overload externalInstanceMethod(static UILocalNotification, static "setAlertBody:") = Void, NSString;
overload externalInstanceMethod(static UILocalNotification, static "hasAction") = Bool;
overload externalInstanceMethod(static UILocalNotification, static "setHasAction:") = Void, Bool;
overload externalInstanceMethod(static UILocalNotification, static "alertAction") = NSString;
overload externalInstanceMethod(static UILocalNotification, static "setAlertAction:") = Void, NSString;
overload externalInstanceMethod(static UILocalNotification, static "alertLaunchImage") = NSString;
overload externalInstanceMethod(static UILocalNotification, static "setAlertLaunchImage:") = Void, NSString;
overload externalInstanceMethod(static UILocalNotification, static "soundName") = NSString;
overload externalInstanceMethod(static UILocalNotification, static "setSoundName:") = Void, NSString;
overload externalInstanceMethod(static UILocalNotification, static "applicationIconBadgeNumber") = Int;
overload externalInstanceMethod(static UILocalNotification, static "setApplicationIconBadgeNumber:") = Void, Int;
overload externalInstanceMethod(static UILocalNotification, static "userInfo") = NSDictionary;
overload externalInstanceMethod(static UILocalNotification, static "setUserInfo:") = Void, NSDictionary;

record UILocalizedIndexedCollation = externalClass(NSObject);
overload externalClassMethod(static UILocalizedIndexedCollation, static "currentCollation") = Id;
overload externalInstanceMethod(static UILocalizedIndexedCollation, static "sectionForSectionIndexTitleAtIndex:") = Int, Int;
overload externalInstanceMethod(static UILocalizedIndexedCollation, static "sectionForObject:collationStringSelector:") = Int, Id, SelectorHandle;
overload externalInstanceMethod(static UILocalizedIndexedCollation, static "sortedArrayFromArray:collationStringSelector:") = NSArray, NSArray, SelectorHandle;
overload externalInstanceMethod(static UILocalizedIndexedCollation, static "sectionTitles") = NSArray;
overload externalInstanceMethod(static UILocalizedIndexedCollation, static "sectionIndexTitles") = NSArray;

record UILongPressGestureRecognizer = externalClass(UIGestureRecognizer);
overload externalInstanceMethod(static UILongPressGestureRecognizer, static "numberOfTapsRequired") = Int;
overload externalInstanceMethod(static UILongPressGestureRecognizer, static "setNumberOfTapsRequired:") = Void, Int;
overload externalInstanceMethod(static UILongPressGestureRecognizer, static "numberOfTouchesRequired") = Int;
overload externalInstanceMethod(static UILongPressGestureRecognizer, static "setNumberOfTouchesRequired:") = Void, Int;
overload externalInstanceMethod(static UILongPressGestureRecognizer, static "minimumPressDuration") = Double;
overload externalInstanceMethod(static UILongPressGestureRecognizer, static "setMinimumPressDuration:") = Void, Double;
overload externalInstanceMethod(static UILongPressGestureRecognizer, static "allowableMovement") = Float;
overload externalInstanceMethod(static UILongPressGestureRecognizer, static "setAllowableMovement:") = Void, Float;

record UIMenuController = externalClass(NSObject);
overload externalClassMethod(static UIMenuController, static "sharedMenuController") = UIMenuController;
overload externalInstanceMethod(static UIMenuController, static "setMenuVisible:animated:") = Void, Bool, Bool;
overload externalInstanceMethod(static UIMenuController, static "setTargetRect:inView:") = Void, CGRect, UIView;
overload externalInstanceMethod(static UIMenuController, static "update") = Void;
overload externalInstanceMethod(static UIMenuController, static "isMenuVisible") = Bool;
overload externalInstanceMethod(static UIMenuController, static "setMenuVisible:") = Void, Bool;
overload externalInstanceMethod(static UIMenuController, static "arrowDirection") = UIMenuControllerArrowDirection;
overload externalInstanceMethod(static UIMenuController, static "setArrowDirection:") = Void, UIMenuControllerArrowDirection;
overload externalInstanceMethod(static UIMenuController, static "menuItems") = NSArray;
overload externalInstanceMethod(static UIMenuController, static "setMenuItems:") = Void, NSArray;
overload externalInstanceMethod(static UIMenuController, static "menuFrame") = CGRect;

record UIMenuItem = externalClass(NSObject);
overload externalInstanceMethod(static UIMenuItem, static "initWithTitle:action:") = Id, NSString, SelectorHandle;
overload externalInstanceMethod(static UIMenuItem, static "title") = NSString;
overload externalInstanceMethod(static UIMenuItem, static "setTitle:") = Void, NSString;
overload externalInstanceMethod(static UIMenuItem, static "action") = SelectorHandle;
overload externalInstanceMethod(static UIMenuItem, static "setAction:") = Void, SelectorHandle;

record UINavigationBar = externalClass(UIView);
overload externalInstanceMethod(static UINavigationBar, static "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static UINavigationBar, static "initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(static UINavigationBar, static "pushNavigationItem:animated:") = Void, UINavigationItem, Bool;
overload externalInstanceMethod(static UINavigationBar, static "popNavigationItemAnimated:") = UINavigationItem, Bool;
overload externalInstanceMethod(static UINavigationBar, static "setItems:animated:") = Void, NSArray, Bool;
overload externalInstanceMethod(static UINavigationBar, static "barStyle") = UIBarStyle;
overload externalInstanceMethod(static UINavigationBar, static "setBarStyle:") = Void, UIBarStyle;
overload externalInstanceMethod(static UINavigationBar, static "delegate") = Id;
overload externalInstanceMethod(static UINavigationBar, static "setDelegate:") = Void, Id;
overload externalInstanceMethod(static UINavigationBar, static "tintColor") = UIColor;
overload externalInstanceMethod(static UINavigationBar, static "setTintColor:") = Void, UIColor;
overload externalInstanceMethod(static UINavigationBar, static "isTranslucent") = Bool;
overload externalInstanceMethod(static UINavigationBar, static "setTranslucent:") = Void, Bool;
overload externalInstanceMethod(static UINavigationBar, static "topItem") = UINavigationItem;
overload externalInstanceMethod(static UINavigationBar, static "backItem") = UINavigationItem;
overload externalInstanceMethod(static UINavigationBar, static "items") = NSArray;
overload externalInstanceMethod(static UINavigationBar, static "setItems:") = Void, NSArray;

record UINavigationController = externalClass(UIViewController);
overload externalInstanceMethod(static UINavigationController, static "initWithRootViewController:") = Id, UIViewController;
overload externalInstanceMethod(static UINavigationController, static "pushViewController:animated:") = Void, UIViewController, Bool;
overload externalInstanceMethod(static UINavigationController, static "popViewControllerAnimated:") = UIViewController, Bool;
overload externalInstanceMethod(static UINavigationController, static "popToViewController:animated:") = NSArray, UIViewController, Bool;
overload externalInstanceMethod(static UINavigationController, static "popToRootViewControllerAnimated:") = NSArray, Bool;
overload externalInstanceMethod(static UINavigationController, static "setViewControllers:animated:") = Void, NSArray, Bool;
overload externalInstanceMethod(static UINavigationController, static "setNavigationBarHidden:animated:") = Void, Bool, Bool;
overload externalInstanceMethod(static UINavigationController, static "setToolbarHidden:animated:") = Void, Bool, Bool;
overload externalInstanceMethod(static UINavigationController, static "topViewController") = UIViewController;
overload externalInstanceMethod(static UINavigationController, static "visibleViewController") = UIViewController;
overload externalInstanceMethod(static UINavigationController, static "viewControllers") = NSArray;
overload externalInstanceMethod(static UINavigationController, static "setViewControllers:") = Void, NSArray;
overload externalInstanceMethod(static UINavigationController, static "isNavigationBarHidden") = Bool;
overload externalInstanceMethod(static UINavigationController, static "setNavigationBarHidden:") = Void, Bool;
overload externalInstanceMethod(static UINavigationController, static "navigationBar") = UINavigationBar;
overload externalInstanceMethod(static UINavigationController, static "isToolbarHidden") = Bool;
overload externalInstanceMethod(static UINavigationController, static "setToolbarHidden:") = Void, Bool;
overload externalInstanceMethod(static UINavigationController, static "toolbar") = UIToolbar;
overload externalInstanceMethod(static UINavigationController, static "delegate") = Id;
overload externalInstanceMethod(static UINavigationController, static "setDelegate:") = Void, Id;

record UINavigationItem = externalClass(NSObject);
overload externalInstanceMethod(static UINavigationItem, static "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static UINavigationItem, static "initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(static UINavigationItem, static "initWithTitle:") = Id, NSString;
overload externalInstanceMethod(static UINavigationItem, static "setHidesBackButton:animated:") = Void, Bool, Bool;
overload externalInstanceMethod(static UINavigationItem, static "setLeftBarButtonItem:animated:") = Void, UIBarButtonItem, Bool;
overload externalInstanceMethod(static UINavigationItem, static "setRightBarButtonItem:animated:") = Void, UIBarButtonItem, Bool;
overload externalInstanceMethod(static UINavigationItem, static "title") = NSString;
overload externalInstanceMethod(static UINavigationItem, static "setTitle:") = Void, NSString;
overload externalInstanceMethod(static UINavigationItem, static "backBarButtonItem") = UIBarButtonItem;
overload externalInstanceMethod(static UINavigationItem, static "setBackBarButtonItem:") = Void, UIBarButtonItem;
overload externalInstanceMethod(static UINavigationItem, static "titleView") = UIView;
overload externalInstanceMethod(static UINavigationItem, static "setTitleView:") = Void, UIView;
overload externalInstanceMethod(static UINavigationItem, static "prompt") = NSString;
overload externalInstanceMethod(static UINavigationItem, static "setPrompt:") = Void, NSString;
overload externalInstanceMethod(static UINavigationItem, static "hidesBackButton") = Bool;
overload externalInstanceMethod(static UINavigationItem, static "setHidesBackButton:") = Void, Bool;
overload externalInstanceMethod(static UINavigationItem, static "leftBarButtonItem") = UIBarButtonItem;
overload externalInstanceMethod(static UINavigationItem, static "setLeftBarButtonItem:") = Void, UIBarButtonItem;
overload externalInstanceMethod(static UINavigationItem, static "rightBarButtonItem") = UIBarButtonItem;
overload externalInstanceMethod(static UINavigationItem, static "setRightBarButtonItem:") = Void, UIBarButtonItem;

record UINib = externalClass(NSObject);
overload externalClassMethod(static UINib, static "nibWithNibName:bundle:") = UINib, NSString, NSBundle;
overload externalClassMethod(static UINib, static "nibWithData:bundle:") = UINib, NSData, NSBundle;
overload externalInstanceMethod(static UINib, static "instantiateWithOwner:options:") = NSArray, Id, NSDictionary;

record UIPageControl = externalClass(UIControl);
overload externalInstanceMethod(static UIPageControl, static "updateCurrentPageDisplay") = Void;
overload externalInstanceMethod(static UIPageControl, static "sizeForNumberOfPages:") = CGSize, Int;
overload externalInstanceMethod(static UIPageControl, static "numberOfPages") = Int;
overload externalInstanceMethod(static UIPageControl, static "setNumberOfPages:") = Void, Int;
overload externalInstanceMethod(static UIPageControl, static "currentPage") = Int;
overload externalInstanceMethod(static UIPageControl, static "setCurrentPage:") = Void, Int;
overload externalInstanceMethod(static UIPageControl, static "hidesForSinglePage") = Bool;
overload externalInstanceMethod(static UIPageControl, static "setHidesForSinglePage:") = Void, Bool;
overload externalInstanceMethod(static UIPageControl, static "defersCurrentPageDisplay") = Bool;
overload externalInstanceMethod(static UIPageControl, static "setDefersCurrentPageDisplay:") = Void, Bool;

record UIPanGestureRecognizer = externalClass(UIGestureRecognizer);
overload externalInstanceMethod(static UIPanGestureRecognizer, static "translationInView:") = CGPoint, UIView;
overload externalInstanceMethod(static UIPanGestureRecognizer, static "setTranslation:inView:") = Void, CGPoint, UIView;
overload externalInstanceMethod(static UIPanGestureRecognizer, static "velocityInView:") = CGPoint, UIView;
overload externalInstanceMethod(static UIPanGestureRecognizer, static "minimumNumberOfTouches") = UInt;
overload externalInstanceMethod(static UIPanGestureRecognizer, static "setMinimumNumberOfTouches:") = Void, UInt;
overload externalInstanceMethod(static UIPanGestureRecognizer, static "maximumNumberOfTouches") = UInt;
overload externalInstanceMethod(static UIPanGestureRecognizer, static "setMaximumNumberOfTouches:") = Void, UInt;

record UIPasteboard = externalClass(NSObject);
overload externalClassMethod(static UIPasteboard, static "generalPasteboard") = UIPasteboard;
overload externalClassMethod(static UIPasteboard, static "pasteboardWithName:create:") = UIPasteboard, NSString, Bool;
overload externalClassMethod(static UIPasteboard, static "pasteboardWithUniqueName") = UIPasteboard;
overload externalClassMethod(static UIPasteboard, static "removePasteboardWithName:") = Void, NSString;
overload externalInstanceMethod(static UIPasteboard, static "pasteboardTypes") = NSArray;
overload externalInstanceMethod(static UIPasteboard, static "containsPasteboardTypes:") = Bool, NSArray;
overload externalInstanceMethod(static UIPasteboard, static "dataForPasteboardType:") = NSData, NSString;
overload externalInstanceMethod(static UIPasteboard, static "valueForPasteboardType:") = Id, NSString;
overload externalInstanceMethod(static UIPasteboard, static "setValue:forPasteboardType:") = Void, Id, NSString;
overload externalInstanceMethod(static UIPasteboard, static "setData:forPasteboardType:") = Void, NSData, NSString;
overload externalInstanceMethod(static UIPasteboard, static "pasteboardTypesForItemSet:") = NSArray, NSIndexSet;
overload externalInstanceMethod(static UIPasteboard, static "containsPasteboardTypes:inItemSet:") = Bool, NSArray, NSIndexSet;
overload externalInstanceMethod(static UIPasteboard, static "itemSetWithPasteboardTypes:") = NSIndexSet, NSArray;
overload externalInstanceMethod(static UIPasteboard, static "valuesForPasteboardType:inItemSet:") = NSArray, NSString, NSIndexSet;
overload externalInstanceMethod(static UIPasteboard, static "dataForPasteboardType:inItemSet:") = NSArray, NSString, NSIndexSet;
overload externalInstanceMethod(static UIPasteboard, static "addItems:") = Void, NSArray;
overload externalInstanceMethod(static UIPasteboard, static "name") = NSString;
overload externalInstanceMethod(static UIPasteboard, static "isPersistent") = Bool;
overload externalInstanceMethod(static UIPasteboard, static "setPersistent:") = Void, Bool;
overload externalInstanceMethod(static UIPasteboard, static "changeCount") = Int;
overload externalInstanceMethod(static UIPasteboard, static "numberOfItems") = Int;
overload externalInstanceMethod(static UIPasteboard, static "items") = NSArray;
overload externalInstanceMethod(static UIPasteboard, static "setItems:") = Void, NSArray;
overload externalInstanceMethod(static UIPasteboard, static "string") = NSString;
overload externalInstanceMethod(static UIPasteboard, static "setString:") = Void, NSString;
overload externalInstanceMethod(static UIPasteboard, static "strings") = NSArray;
overload externalInstanceMethod(static UIPasteboard, static "setStrings:") = Void, NSArray;
overload externalInstanceMethod(static UIPasteboard, static "URL") = NSURL;
overload externalInstanceMethod(static UIPasteboard, static "setURL:") = Void, NSURL;
overload externalInstanceMethod(static UIPasteboard, static "URLs") = NSArray;
overload externalInstanceMethod(static UIPasteboard, static "setURLs:") = Void, NSArray;
overload externalInstanceMethod(static UIPasteboard, static "image") = UIImage;
overload externalInstanceMethod(static UIPasteboard, static "setImage:") = Void, UIImage;
overload externalInstanceMethod(static UIPasteboard, static "images") = NSArray;
overload externalInstanceMethod(static UIPasteboard, static "setImages:") = Void, NSArray;
overload externalInstanceMethod(static UIPasteboard, static "color") = UIColor;
overload externalInstanceMethod(static UIPasteboard, static "setColor:") = Void, UIColor;
overload externalInstanceMethod(static UIPasteboard, static "colors") = NSArray;
overload externalInstanceMethod(static UIPasteboard, static "setColors:") = Void, NSArray;

record UIPickerView = externalClass(UIView);
overload externalInstanceMethod(static UIPickerView, static "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static UIPickerView, static "initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(static UIPickerView, static "numberOfRowsInComponent:") = Int, Int;
overload externalInstanceMethod(static UIPickerView, static "rowSizeForComponent:") = CGSize, Int;
overload externalInstanceMethod(static UIPickerView, static "viewForRow:forComponent:") = UIView, Int, Int;
overload externalInstanceMethod(static UIPickerView, static "reloadAllComponents") = Void;
overload externalInstanceMethod(static UIPickerView, static "reloadComponent:") = Void, Int;
overload externalInstanceMethod(static UIPickerView, static "selectRow:inComponent:animated:") = Void, Int, Int, Bool;
overload externalInstanceMethod(static UIPickerView, static "selectedRowInComponent:") = Int, Int;
overload externalInstanceMethod(static UIPickerView, static "dataSource") = Id;
overload externalInstanceMethod(static UIPickerView, static "setDataSource:") = Void, Id;
overload externalInstanceMethod(static UIPickerView, static "delegate") = Id;
overload externalInstanceMethod(static UIPickerView, static "setDelegate:") = Void, Id;
overload externalInstanceMethod(static UIPickerView, static "showsSelectionIndicator") = Bool;
overload externalInstanceMethod(static UIPickerView, static "setShowsSelectionIndicator:") = Void, Bool;
overload externalInstanceMethod(static UIPickerView, static "numberOfComponents") = Int;

record UIPinchGestureRecognizer = externalClass(UIGestureRecognizer);
overload externalInstanceMethod(static UIPinchGestureRecognizer, static "scale") = Float;
overload externalInstanceMethod(static UIPinchGestureRecognizer, static "setScale:") = Void, Float;
overload externalInstanceMethod(static UIPinchGestureRecognizer, static "velocity") = Float;

record UIPopoverController = externalClass(NSObject);
overload externalInstanceMethod(static UIPopoverController, static "initWithContentViewController:") = Id, UIViewController;
overload externalInstanceMethod(static UIPopoverController, static "setContentViewController:animated:") = Void, UIViewController, Bool;
overload externalInstanceMethod(static UIPopoverController, static "setPopoverContentSize:animated:") = Void, CGSize, Bool;
overload externalInstanceMethod(static UIPopoverController, static "presentPopoverFromRect:inView:permittedArrowDirections:animated:") = Void, CGRect, UIView, UInt, Bool;
overload externalInstanceMethod(static UIPopoverController, static "presentPopoverFromBarButtonItem:permittedArrowDirections:animated:") = Void, UIBarButtonItem, UInt, Bool;
overload externalInstanceMethod(static UIPopoverController, static "dismissPopoverAnimated:") = Void, Bool;
overload externalInstanceMethod(static UIPopoverController, static "delegate") = Id;
overload externalInstanceMethod(static UIPopoverController, static "setDelegate:") = Void, Id;
overload externalInstanceMethod(static UIPopoverController, static "contentViewController") = UIViewController;
overload externalInstanceMethod(static UIPopoverController, static "setContentViewController:") = Void, UIViewController;
overload externalInstanceMethod(static UIPopoverController, static "popoverContentSize") = CGSize;
overload externalInstanceMethod(static UIPopoverController, static "setPopoverContentSize:") = Void, CGSize;
overload externalInstanceMethod(static UIPopoverController, static "isPopoverVisible") = Bool;
overload externalInstanceMethod(static UIPopoverController, static "popoverArrowDirection") = UInt;
overload externalInstanceMethod(static UIPopoverController, static "passthroughViews") = NSArray;
overload externalInstanceMethod(static UIPopoverController, static "setPassthroughViews:") = Void, NSArray;

record UIProgressView = externalClass(UIView);
overload externalInstanceMethod(static UIProgressView, static "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static UIProgressView, static "initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(static UIProgressView, static "initWithProgressViewStyle:") = Id, UIProgressViewStyle;
overload externalInstanceMethod(static UIProgressView, static "progressViewStyle") = UIProgressViewStyle;
overload externalInstanceMethod(static UIProgressView, static "setProgressViewStyle:") = Void, UIProgressViewStyle;
overload externalInstanceMethod(static UIProgressView, static "progress") = Float;
overload externalInstanceMethod(static UIProgressView, static "setProgress:") = Void, Float;

record UIResponder = externalClass(NSObject);
overload externalInstanceMethod(static UIResponder, static "nextResponder") = UIResponder;
overload externalInstanceMethod(static UIResponder, static "canBecomeFirstResponder") = Bool;
overload externalInstanceMethod(static UIResponder, static "becomeFirstResponder") = Bool;
overload externalInstanceMethod(static UIResponder, static "canResignFirstResponder") = Bool;
overload externalInstanceMethod(static UIResponder, static "resignFirstResponder") = Bool;
overload externalInstanceMethod(static UIResponder, static "isFirstResponder") = Bool;
overload externalInstanceMethod(static UIResponder, static "touchesBegan:withEvent:") = Void, NSSet, UIEvent;
overload externalInstanceMethod(static UIResponder, static "touchesMoved:withEvent:") = Void, NSSet, UIEvent;
overload externalInstanceMethod(static UIResponder, static "touchesEnded:withEvent:") = Void, NSSet, UIEvent;
overload externalInstanceMethod(static UIResponder, static "touchesCancelled:withEvent:") = Void, NSSet, UIEvent;
overload externalInstanceMethod(static UIResponder, static "motionBegan:withEvent:") = Void, UIEventSubtype, UIEvent;
overload externalInstanceMethod(static UIResponder, static "motionEnded:withEvent:") = Void, UIEventSubtype, UIEvent;
overload externalInstanceMethod(static UIResponder, static "motionCancelled:withEvent:") = Void, UIEventSubtype, UIEvent;
overload externalInstanceMethod(static UIResponder, static "remoteControlReceivedWithEvent:") = Void, UIEvent;
overload externalInstanceMethod(static UIResponder, static "canPerformAction:withSender:") = Bool, SelectorHandle, Id;
overload externalInstanceMethod(static UIResponder, static "undoManager") = NSUndoManager;
overload externalInstanceMethod(static UIResponder, static "reloadInputViews") = Void;
overload externalInstanceMethod(static UIResponder, static "inputView") = UIView;
overload externalInstanceMethod(static UIResponder, static "inputAccessoryView") = UIView;

record UIRotationGestureRecognizer = externalClass(UIGestureRecognizer);
overload externalInstanceMethod(static UIRotationGestureRecognizer, static "rotation") = Float;
overload externalInstanceMethod(static UIRotationGestureRecognizer, static "setRotation:") = Void, Float;
overload externalInstanceMethod(static UIRotationGestureRecognizer, static "velocity") = Float;

record UIScreen = externalClass(NSObject);
overload externalClassMethod(static UIScreen, static "screens") = NSArray;
overload externalClassMethod(static UIScreen, static "mainScreen") = UIScreen;
overload externalInstanceMethod(static UIScreen, static "displayLinkWithTarget:selector:") = CADisplayLink, Id, SelectorHandle;
overload externalInstanceMethod(static UIScreen, static "bounds") = CGRect;
overload externalInstanceMethod(static UIScreen, static "applicationFrame") = CGRect;
overload externalInstanceMethod(static UIScreen, static "scale") = Float;
overload externalInstanceMethod(static UIScreen, static "availableModes") = NSArray;
overload externalInstanceMethod(static UIScreen, static "currentMode") = UIScreenMode;
overload externalInstanceMethod(static UIScreen, static "setCurrentMode:") = Void, UIScreenMode;

record UIScreenMode = externalClass(NSObject);
overload externalInstanceMethod(static UIScreenMode, static "size") = CGSize;
overload externalInstanceMethod(static UIScreenMode, static "pixelAspectRatio") = Float;

record UIScrollView = externalClass(UIView);
overload externalInstanceMethod(static UIScrollView, static "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static UIScrollView, static "initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(static UIScrollView, static "setContentOffset:animated:") = Void, CGPoint, Bool;
overload externalInstanceMethod(static UIScrollView, static "scrollRectToVisible:animated:") = Void, CGRect, Bool;
overload externalInstanceMethod(static UIScrollView, static "flashScrollIndicators") = Void;
overload externalInstanceMethod(static UIScrollView, static "touchesShouldBegin:withEvent:inContentView:") = Bool, NSSet, UIEvent, UIView;
overload externalInstanceMethod(static UIScrollView, static "touchesShouldCancelInContentView:") = Bool, UIView;
overload externalInstanceMethod(static UIScrollView, static "setZoomScale:animated:") = Void, Float, Bool;
overload externalInstanceMethod(static UIScrollView, static "zoomToRect:animated:") = Void, CGRect, Bool;
overload externalInstanceMethod(static UIScrollView, static "contentOffset") = CGPoint;
overload externalInstanceMethod(static UIScrollView, static "setContentOffset:") = Void, CGPoint;
overload externalInstanceMethod(static UIScrollView, static "contentSize") = CGSize;
overload externalInstanceMethod(static UIScrollView, static "setContentSize:") = Void, CGSize;
overload externalInstanceMethod(static UIScrollView, static "contentInset") = UIEdgeInsets;
overload externalInstanceMethod(static UIScrollView, static "setContentInset:") = Void, UIEdgeInsets;
overload externalInstanceMethod(static UIScrollView, static "delegate") = Id;
overload externalInstanceMethod(static UIScrollView, static "setDelegate:") = Void, Id;
overload externalInstanceMethod(static UIScrollView, static "isDirectionalLockEnabled") = Bool;
overload externalInstanceMethod(static UIScrollView, static "setDirectionalLockEnabled:") = Void, Bool;
overload externalInstanceMethod(static UIScrollView, static "bounces") = Bool;
overload externalInstanceMethod(static UIScrollView, static "setBounces:") = Void, Bool;
overload externalInstanceMethod(static UIScrollView, static "alwaysBounceVertical") = Bool;
overload externalInstanceMethod(static UIScrollView, static "setAlwaysBounceVertical:") = Void, Bool;
overload externalInstanceMethod(static UIScrollView, static "alwaysBounceHorizontal") = Bool;
overload externalInstanceMethod(static UIScrollView, static "setAlwaysBounceHorizontal:") = Void, Bool;
overload externalInstanceMethod(static UIScrollView, static "isPagingEnabled") = Bool;
overload externalInstanceMethod(static UIScrollView, static "setPagingEnabled:") = Void, Bool;
overload externalInstanceMethod(static UIScrollView, static "isScrollEnabled") = Bool;
overload externalInstanceMethod(static UIScrollView, static "setScrollEnabled:") = Void, Bool;
overload externalInstanceMethod(static UIScrollView, static "showsHorizontalScrollIndicator") = Bool;
overload externalInstanceMethod(static UIScrollView, static "setShowsHorizontalScrollIndicator:") = Void, Bool;
overload externalInstanceMethod(static UIScrollView, static "showsVerticalScrollIndicator") = Bool;
overload externalInstanceMethod(static UIScrollView, static "setShowsVerticalScrollIndicator:") = Void, Bool;
overload externalInstanceMethod(static UIScrollView, static "scrollIndicatorInsets") = UIEdgeInsets;
overload externalInstanceMethod(static UIScrollView, static "setScrollIndicatorInsets:") = Void, UIEdgeInsets;
overload externalInstanceMethod(static UIScrollView, static "indicatorStyle") = UIScrollViewIndicatorStyle;
overload externalInstanceMethod(static UIScrollView, static "setIndicatorStyle:") = Void, UIScrollViewIndicatorStyle;
overload externalInstanceMethod(static UIScrollView, static "decelerationRate") = Float;
overload externalInstanceMethod(static UIScrollView, static "setDecelerationRate:") = Void, Float;
overload externalInstanceMethod(static UIScrollView, static "isTracking") = Bool;
overload externalInstanceMethod(static UIScrollView, static "isDragging") = Bool;
overload externalInstanceMethod(static UIScrollView, static "isDecelerating") = Bool;
overload externalInstanceMethod(static UIScrollView, static "delaysContentTouches") = Bool;
overload externalInstanceMethod(static UIScrollView, static "setDelaysContentTouches:") = Void, Bool;
overload externalInstanceMethod(static UIScrollView, static "canCancelContentTouches") = Bool;
overload externalInstanceMethod(static UIScrollView, static "setCanCancelContentTouches:") = Void, Bool;
overload externalInstanceMethod(static UIScrollView, static "minimumZoomScale") = Float;
overload externalInstanceMethod(static UIScrollView, static "setMinimumZoomScale:") = Void, Float;
overload externalInstanceMethod(static UIScrollView, static "maximumZoomScale") = Float;
overload externalInstanceMethod(static UIScrollView, static "setMaximumZoomScale:") = Void, Float;
overload externalInstanceMethod(static UIScrollView, static "zoomScale") = Float;
overload externalInstanceMethod(static UIScrollView, static "setZoomScale:") = Void, Float;
overload externalInstanceMethod(static UIScrollView, static "bouncesZoom") = Bool;
overload externalInstanceMethod(static UIScrollView, static "setBouncesZoom:") = Void, Bool;
overload externalInstanceMethod(static UIScrollView, static "isZooming") = Bool;
overload externalInstanceMethod(static UIScrollView, static "isZoomBouncing") = Bool;
overload externalInstanceMethod(static UIScrollView, static "scrollsToTop") = Bool;
overload externalInstanceMethod(static UIScrollView, static "setScrollsToTop:") = Void, Bool;

record UISearchBar = externalClass(UIView);
overload externalInstanceMethod(static UISearchBar, static "setShowsCancelButton:animated:") = Void, Bool, Bool;
overload externalInstanceMethod(static UISearchBar, static "barStyle") = UIBarStyle;
overload externalInstanceMethod(static UISearchBar, static "setBarStyle:") = Void, UIBarStyle;
overload externalInstanceMethod(static UISearchBar, static "delegate") = Id;
overload externalInstanceMethod(static UISearchBar, static "setDelegate:") = Void, Id;
overload externalInstanceMethod(static UISearchBar, static "text") = NSString;
overload externalInstanceMethod(static UISearchBar, static "setText:") = Void, NSString;
overload externalInstanceMethod(static UISearchBar, static "prompt") = NSString;
overload externalInstanceMethod(static UISearchBar, static "setPrompt:") = Void, NSString;
overload externalInstanceMethod(static UISearchBar, static "placeholder") = NSString;
overload externalInstanceMethod(static UISearchBar, static "setPlaceholder:") = Void, NSString;
overload externalInstanceMethod(static UISearchBar, static "showsBookmarkButton") = Bool;
overload externalInstanceMethod(static UISearchBar, static "setShowsBookmarkButton:") = Void, Bool;
overload externalInstanceMethod(static UISearchBar, static "showsCancelButton") = Bool;
overload externalInstanceMethod(static UISearchBar, static "setShowsCancelButton:") = Void, Bool;
overload externalInstanceMethod(static UISearchBar, static "showsSearchResultsButton") = Bool;
overload externalInstanceMethod(static UISearchBar, static "setShowsSearchResultsButton:") = Void, Bool;
overload externalInstanceMethod(static UISearchBar, static "isSearchResultsButtonSelected") = Bool;
overload externalInstanceMethod(static UISearchBar, static "setSearchResultsButtonSelected:") = Void, Bool;
overload externalInstanceMethod(static UISearchBar, static "tintColor") = UIColor;
overload externalInstanceMethod(static UISearchBar, static "setTintColor:") = Void, UIColor;
overload externalInstanceMethod(static UISearchBar, static "isTranslucent") = Bool;
overload externalInstanceMethod(static UISearchBar, static "setTranslucent:") = Void, Bool;
overload externalInstanceMethod(static UISearchBar, static "autocapitalizationType") = UITextAutocapitalizationType;
overload externalInstanceMethod(static UISearchBar, static "setAutocapitalizationType:") = Void, UITextAutocapitalizationType;
overload externalInstanceMethod(static UISearchBar, static "autocorrectionType") = UITextAutocorrectionType;
overload externalInstanceMethod(static UISearchBar, static "setAutocorrectionType:") = Void, UITextAutocorrectionType;
overload externalInstanceMethod(static UISearchBar, static "keyboardType") = UIKeyboardType;
overload externalInstanceMethod(static UISearchBar, static "setKeyboardType:") = Void, UIKeyboardType;
overload externalInstanceMethod(static UISearchBar, static "scopeButtonTitles") = NSArray;
overload externalInstanceMethod(static UISearchBar, static "setScopeButtonTitles:") = Void, NSArray;
overload externalInstanceMethod(static UISearchBar, static "selectedScopeButtonIndex") = Int;
overload externalInstanceMethod(static UISearchBar, static "setSelectedScopeButtonIndex:") = Void, Int;
overload externalInstanceMethod(static UISearchBar, static "showsScopeBar") = Bool;
overload externalInstanceMethod(static UISearchBar, static "setShowsScopeBar:") = Void, Bool;

record UISearchDisplayController = externalClass(NSObject);
overload externalInstanceMethod(static UISearchDisplayController, static "initWithSearchBar:contentsController:") = Id, UISearchBar, UIViewController;
overload externalInstanceMethod(static UISearchDisplayController, static "setActive:animated:") = Void, Bool, Bool;
overload externalInstanceMethod(static UISearchDisplayController, static "delegate") = Id;
overload externalInstanceMethod(static UISearchDisplayController, static "setDelegate:") = Void, Id;
overload externalInstanceMethod(static UISearchDisplayController, static "isActive") = Bool;
overload externalInstanceMethod(static UISearchDisplayController, static "setActive:") = Void, Bool;
overload externalInstanceMethod(static UISearchDisplayController, static "searchBar") = UISearchBar;
overload externalInstanceMethod(static UISearchDisplayController, static "searchContentsController") = UIViewController;
overload externalInstanceMethod(static UISearchDisplayController, static "searchResultsTableView") = UITableView;
overload externalInstanceMethod(static UISearchDisplayController, static "searchResultsDataSource") = Id;
overload externalInstanceMethod(static UISearchDisplayController, static "setSearchResultsDataSource:") = Void, Id;
overload externalInstanceMethod(static UISearchDisplayController, static "searchResultsDelegate") = Id;
overload externalInstanceMethod(static UISearchDisplayController, static "setSearchResultsDelegate:") = Void, Id;

record UISegmentedControl = externalClass(UIControl);
overload externalInstanceMethod(static UISegmentedControl, static "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static UISegmentedControl, static "initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(static UISegmentedControl, static "initWithItems:") = Id, NSArray;
overload externalInstanceMethod(static UISegmentedControl, static "insertSegmentWithTitle:atIndex:animated:") = Void, NSString, UInt, Bool;
overload externalInstanceMethod(static UISegmentedControl, static "insertSegmentWithImage:atIndex:animated:") = Void, UIImage, UInt, Bool;
overload externalInstanceMethod(static UISegmentedControl, static "removeSegmentAtIndex:animated:") = Void, UInt, Bool;
overload externalInstanceMethod(static UISegmentedControl, static "removeAllSegments") = Void;
overload externalInstanceMethod(static UISegmentedControl, static "setTitle:forSegmentAtIndex:") = Void, NSString, UInt;
overload externalInstanceMethod(static UISegmentedControl, static "titleForSegmentAtIndex:") = NSString, UInt;
overload externalInstanceMethod(static UISegmentedControl, static "setImage:forSegmentAtIndex:") = Void, UIImage, UInt;
overload externalInstanceMethod(static UISegmentedControl, static "imageForSegmentAtIndex:") = UIImage, UInt;
overload externalInstanceMethod(static UISegmentedControl, static "setWidth:forSegmentAtIndex:") = Void, Float, UInt;
overload externalInstanceMethod(static UISegmentedControl, static "widthForSegmentAtIndex:") = Float, UInt;
overload externalInstanceMethod(static UISegmentedControl, static "setContentOffset:forSegmentAtIndex:") = Void, CGSize, UInt;
overload externalInstanceMethod(static UISegmentedControl, static "contentOffsetForSegmentAtIndex:") = CGSize, UInt;
overload externalInstanceMethod(static UISegmentedControl, static "setEnabled:forSegmentAtIndex:") = Void, Bool, UInt;
overload externalInstanceMethod(static UISegmentedControl, static "isEnabledForSegmentAtIndex:") = Bool, UInt;
overload externalInstanceMethod(static UISegmentedControl, static "segmentedControlStyle") = UISegmentedControlStyle;
overload externalInstanceMethod(static UISegmentedControl, static "setSegmentedControlStyle:") = Void, UISegmentedControlStyle;
overload externalInstanceMethod(static UISegmentedControl, static "isMomentary") = Bool;
overload externalInstanceMethod(static UISegmentedControl, static "setMomentary:") = Void, Bool;
overload externalInstanceMethod(static UISegmentedControl, static "tintColor") = UIColor;
overload externalInstanceMethod(static UISegmentedControl, static "setTintColor:") = Void, UIColor;
overload externalInstanceMethod(static UISegmentedControl, static "numberOfSegments") = UInt;
overload externalInstanceMethod(static UISegmentedControl, static "selectedSegmentIndex") = Int;
overload externalInstanceMethod(static UISegmentedControl, static "setSelectedSegmentIndex:") = Void, Int;

record UISlider = externalClass(UIControl);
overload externalInstanceMethod(static UISlider, static "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static UISlider, static "initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(static UISlider, static "setValue:animated:") = Void, Float, Bool;
overload externalInstanceMethod(static UISlider, static "setThumbImage:forState:") = Void, UIImage, UInt;
overload externalInstanceMethod(static UISlider, static "setMinimumTrackImage:forState:") = Void, UIImage, UInt;
overload externalInstanceMethod(static UISlider, static "setMaximumTrackImage:forState:") = Void, UIImage, UInt;
overload externalInstanceMethod(static UISlider, static "thumbImageForState:") = UIImage, UInt;
overload externalInstanceMethod(static UISlider, static "minimumTrackImageForState:") = UIImage, UInt;
overload externalInstanceMethod(static UISlider, static "maximumTrackImageForState:") = UIImage, UInt;
overload externalInstanceMethod(static UISlider, static "minimumValueImageRectForBounds:") = CGRect, CGRect;
overload externalInstanceMethod(static UISlider, static "maximumValueImageRectForBounds:") = CGRect, CGRect;
overload externalInstanceMethod(static UISlider, static "trackRectForBounds:") = CGRect, CGRect;
overload externalInstanceMethod(static UISlider, static "thumbRectForBounds:trackRect:value:") = CGRect, CGRect, CGRect, Float;
overload externalInstanceMethod(static UISlider, static "value") = Float;
overload externalInstanceMethod(static UISlider, static "setValue:") = Void, Float;
overload externalInstanceMethod(static UISlider, static "minimumValue") = Float;
overload externalInstanceMethod(static UISlider, static "setMinimumValue:") = Void, Float;
overload externalInstanceMethod(static UISlider, static "maximumValue") = Float;
overload externalInstanceMethod(static UISlider, static "setMaximumValue:") = Void, Float;
overload externalInstanceMethod(static UISlider, static "minimumValueImage") = UIImage;
overload externalInstanceMethod(static UISlider, static "setMinimumValueImage:") = Void, UIImage;
overload externalInstanceMethod(static UISlider, static "maximumValueImage") = UIImage;
overload externalInstanceMethod(static UISlider, static "setMaximumValueImage:") = Void, UIImage;
overload externalInstanceMethod(static UISlider, static "isContinuous") = Bool;
overload externalInstanceMethod(static UISlider, static "setContinuous:") = Void, Bool;
overload externalInstanceMethod(static UISlider, static "currentThumbImage") = UIImage;
overload externalInstanceMethod(static UISlider, static "currentMinimumTrackImage") = UIImage;
overload externalInstanceMethod(static UISlider, static "currentMaximumTrackImage") = UIImage;

record UISplitViewController = externalClass(UIViewController);
overload externalInstanceMethod(static UISplitViewController, static "viewControllers") = NSArray;
overload externalInstanceMethod(static UISplitViewController, static "setViewControllers:") = Void, NSArray;
overload externalInstanceMethod(static UISplitViewController, static "delegate") = Id;
overload externalInstanceMethod(static UISplitViewController, static "setDelegate:") = Void, Id;

record UISwipeGestureRecognizer = externalClass(UIGestureRecognizer);
overload externalInstanceMethod(static UISwipeGestureRecognizer, static "numberOfTouchesRequired") = UInt;
overload externalInstanceMethod(static UISwipeGestureRecognizer, static "setNumberOfTouchesRequired:") = Void, UInt;
overload externalInstanceMethod(static UISwipeGestureRecognizer, static "direction") = UISwipeGestureRecognizerDirection;
overload externalInstanceMethod(static UISwipeGestureRecognizer, static "setDirection:") = Void, UISwipeGestureRecognizerDirection;

record UISwitch = externalClass(UIControl);
overload externalInstanceMethod(static UISwitch, static "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static UISwitch, static "initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(static UISwitch, static "initWithFrame:") = Id, CGRect;
overload externalInstanceMethod(static UISwitch, static "setOn:animated:") = Void, Bool, Bool;
overload externalInstanceMethod(static UISwitch, static "isOn") = Bool;
overload externalInstanceMethod(static UISwitch, static "setOn:") = Void, Bool;

record UITabBar = externalClass(UIView);
overload externalInstanceMethod(static UITabBar, static "setItems:animated:") = Void, NSArray, Bool;
overload externalInstanceMethod(static UITabBar, static "beginCustomizingItems:") = Void, NSArray;
overload externalInstanceMethod(static UITabBar, static "endCustomizingAnimated:") = Bool, Bool;
overload externalInstanceMethod(static UITabBar, static "isCustomizing") = Bool;
overload externalInstanceMethod(static UITabBar, static "delegate") = Id;
overload externalInstanceMethod(static UITabBar, static "setDelegate:") = Void, Id;
overload externalInstanceMethod(static UITabBar, static "items") = NSArray;
overload externalInstanceMethod(static UITabBar, static "setItems:") = Void, NSArray;
overload externalInstanceMethod(static UITabBar, static "selectedItem") = UITabBarItem;
overload externalInstanceMethod(static UITabBar, static "setSelectedItem:") = Void, UITabBarItem;

record UITabBarController = externalClass(UIViewController);
overload externalInstanceMethod(static UITabBarController, static "tabBar:didSelectItem:") = Void, UITabBar, UITabBarItem;
overload externalInstanceMethod(static UITabBarController, static "tabBar:willBeginCustomizingItems:") = Void, UITabBar, NSArray;
overload externalInstanceMethod(static UITabBarController, static "tabBar:didBeginCustomizingItems:") = Void, UITabBar, NSArray;
overload externalInstanceMethod(static UITabBarController, static "tabBar:willEndCustomizingItems:changed:") = Void, UITabBar, NSArray, Bool;
overload externalInstanceMethod(static UITabBarController, static "tabBar:didEndCustomizingItems:changed:") = Void, UITabBar, NSArray, Bool;
overload externalInstanceMethod(static UITabBarController, static "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static UITabBarController, static "initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(static UITabBarController, static "setViewControllers:animated:") = Void, NSArray, Bool;
overload externalInstanceMethod(static UITabBarController, static "viewControllers") = NSArray;
overload externalInstanceMethod(static UITabBarController, static "setViewControllers:") = Void, NSArray;
overload externalInstanceMethod(static UITabBarController, static "selectedViewController") = UIViewController;
overload externalInstanceMethod(static UITabBarController, static "setSelectedViewController:") = Void, UIViewController;
overload externalInstanceMethod(static UITabBarController, static "selectedIndex") = UInt;
overload externalInstanceMethod(static UITabBarController, static "setSelectedIndex:") = Void, UInt;
overload externalInstanceMethod(static UITabBarController, static "moreNavigationController") = UINavigationController;
overload externalInstanceMethod(static UITabBarController, static "customizableViewControllers") = NSArray;
overload externalInstanceMethod(static UITabBarController, static "setCustomizableViewControllers:") = Void, NSArray;
overload externalInstanceMethod(static UITabBarController, static "tabBar") = UITabBar;
overload externalInstanceMethod(static UITabBarController, static "delegate") = Id;
overload externalInstanceMethod(static UITabBarController, static "setDelegate:") = Void, Id;

record UITabBarItem = externalClass(UIBarItem);
overload externalInstanceMethod(static UITabBarItem, static "initWithTitle:image:tag:") = Id, NSString, UIImage, Int;
overload externalInstanceMethod(static UITabBarItem, static "initWithTabBarSystemItem:tag:") = Id, UITabBarSystemItem, Int;
overload externalInstanceMethod(static UITabBarItem, static "badgeValue") = NSString;
overload externalInstanceMethod(static UITabBarItem, static "setBadgeValue:") = Void, NSString;

record UITableView = externalClass(UIScrollView);
overload externalInstanceMethod(static UITableView, static "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static UITableView, static "initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(static UITableView, static "initWithFrame:style:") = Id, CGRect, UITableViewStyle;
overload externalInstanceMethod(static UITableView, static "reloadData") = Void;
overload externalInstanceMethod(static UITableView, static "reloadSectionIndexTitles") = Void;
overload externalInstanceMethod(static UITableView, static "numberOfSections") = Int;
overload externalInstanceMethod(static UITableView, static "numberOfRowsInSection:") = Int, Int;
overload externalInstanceMethod(static UITableView, static "rectForSection:") = CGRect, Int;
overload externalInstanceMethod(static UITableView, static "rectForHeaderInSection:") = CGRect, Int;
overload externalInstanceMethod(static UITableView, static "rectForFooterInSection:") = CGRect, Int;
overload externalInstanceMethod(static UITableView, static "rectForRowAtIndexPath:") = CGRect, NSIndexPath;
overload externalInstanceMethod(static UITableView, static "indexPathForRowAtPoint:") = NSIndexPath, CGPoint;
overload externalInstanceMethod(static UITableView, static "indexPathForCell:") = NSIndexPath, UITableViewCell;
overload externalInstanceMethod(static UITableView, static "indexPathsForRowsInRect:") = NSArray, CGRect;
overload externalInstanceMethod(static UITableView, static "cellForRowAtIndexPath:") = UITableViewCell, NSIndexPath;
overload externalInstanceMethod(static UITableView, static "visibleCells") = NSArray;
overload externalInstanceMethod(static UITableView, static "indexPathsForVisibleRows") = NSArray;
overload externalInstanceMethod(static UITableView, static "scrollToRowAtIndexPath:atScrollPosition:animated:") = Void, NSIndexPath, UITableViewScrollPosition, Bool;
overload externalInstanceMethod(static UITableView, static "scrollToNearestSelectedRowAtScrollPosition:animated:") = Void, UITableViewScrollPosition, Bool;
overload externalInstanceMethod(static UITableView, static "beginUpdates") = Void;
overload externalInstanceMethod(static UITableView, static "endUpdates") = Void;
overload externalInstanceMethod(static UITableView, static "insertSections:withRowAnimation:") = Void, NSIndexSet, UITableViewRowAnimation;
overload externalInstanceMethod(static UITableView, static "deleteSections:withRowAnimation:") = Void, NSIndexSet, UITableViewRowAnimation;
overload externalInstanceMethod(static UITableView, static "reloadSections:withRowAnimation:") = Void, NSIndexSet, UITableViewRowAnimation;
overload externalInstanceMethod(static UITableView, static "insertRowsAtIndexPaths:withRowAnimation:") = Void, NSArray, UITableViewRowAnimation;
overload externalInstanceMethod(static UITableView, static "deleteRowsAtIndexPaths:withRowAnimation:") = Void, NSArray, UITableViewRowAnimation;
overload externalInstanceMethod(static UITableView, static "reloadRowsAtIndexPaths:withRowAnimation:") = Void, NSArray, UITableViewRowAnimation;
overload externalInstanceMethod(static UITableView, static "setEditing:animated:") = Void, Bool, Bool;
overload externalInstanceMethod(static UITableView, static "indexPathForSelectedRow") = NSIndexPath;
overload externalInstanceMethod(static UITableView, static "selectRowAtIndexPath:animated:scrollPosition:") = Void, NSIndexPath, Bool, UITableViewScrollPosition;
overload externalInstanceMethod(static UITableView, static "deselectRowAtIndexPath:animated:") = Void, NSIndexPath, Bool;
overload externalInstanceMethod(static UITableView, static "dequeueReusableCellWithIdentifier:") = UITableViewCell, NSString;
overload externalInstanceMethod(static UITableView, static "style") = UITableViewStyle;
overload externalInstanceMethod(static UITableView, static "dataSource") = Id;
overload externalInstanceMethod(static UITableView, static "setDataSource:") = Void, Id;
overload externalInstanceMethod(static UITableView, static "delegate") = Id;
overload externalInstanceMethod(static UITableView, static "setDelegate:") = Void, Id;
overload externalInstanceMethod(static UITableView, static "rowHeight") = Float;
overload externalInstanceMethod(static UITableView, static "setRowHeight:") = Void, Float;
overload externalInstanceMethod(static UITableView, static "sectionHeaderHeight") = Float;
overload externalInstanceMethod(static UITableView, static "setSectionHeaderHeight:") = Void, Float;
overload externalInstanceMethod(static UITableView, static "sectionFooterHeight") = Float;
overload externalInstanceMethod(static UITableView, static "setSectionFooterHeight:") = Void, Float;
overload externalInstanceMethod(static UITableView, static "backgroundView") = UIView;
overload externalInstanceMethod(static UITableView, static "setBackgroundView:") = Void, UIView;
overload externalInstanceMethod(static UITableView, static "isEditing") = Bool;
overload externalInstanceMethod(static UITableView, static "setEditing:") = Void, Bool;
overload externalInstanceMethod(static UITableView, static "allowsSelection") = Bool;
overload externalInstanceMethod(static UITableView, static "setAllowsSelection:") = Void, Bool;
overload externalInstanceMethod(static UITableView, static "allowsSelectionDuringEditing") = Bool;
overload externalInstanceMethod(static UITableView, static "setAllowsSelectionDuringEditing:") = Void, Bool;
overload externalInstanceMethod(static UITableView, static "sectionIndexMinimumDisplayRowCount") = Int;
overload externalInstanceMethod(static UITableView, static "setSectionIndexMinimumDisplayRowCount:") = Void, Int;
overload externalInstanceMethod(static UITableView, static "separatorStyle") = UITableViewCellSeparatorStyle;
overload externalInstanceMethod(static UITableView, static "setSeparatorStyle:") = Void, UITableViewCellSeparatorStyle;
overload externalInstanceMethod(static UITableView, static "separatorColor") = UIColor;
overload externalInstanceMethod(static UITableView, static "setSeparatorColor:") = Void, UIColor;
overload externalInstanceMethod(static UITableView, static "tableHeaderView") = UIView;
overload externalInstanceMethod(static UITableView, static "setTableHeaderView:") = Void, UIView;
overload externalInstanceMethod(static UITableView, static "tableFooterView") = UIView;
overload externalInstanceMethod(static UITableView, static "setTableFooterView:") = Void, UIView;

record UITableViewCell = externalClass(UIView);
overload externalInstanceMethod(static UITableViewCell, static "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static UITableViewCell, static "initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(static UITableViewCell, static "initWithStyle:reuseIdentifier:") = Id, UITableViewCellStyle, NSString;
overload externalInstanceMethod(static UITableViewCell, static "prepareForReuse") = Void;
overload externalInstanceMethod(static UITableViewCell, static "setSelected:animated:") = Void, Bool, Bool;
overload externalInstanceMethod(static UITableViewCell, static "setHighlighted:animated:") = Void, Bool, Bool;
overload externalInstanceMethod(static UITableViewCell, static "setEditing:animated:") = Void, Bool, Bool;
overload externalInstanceMethod(static UITableViewCell, static "willTransitionToState:") = Void, UInt;
overload externalInstanceMethod(static UITableViewCell, static "didTransitionToState:") = Void, UInt;
overload externalInstanceMethod(static UITableViewCell, static "imageView") = UIImageView;
overload externalInstanceMethod(static UITableViewCell, static "textLabel") = UILabel;
overload externalInstanceMethod(static UITableViewCell, static "detailTextLabel") = UILabel;
overload externalInstanceMethod(static UITableViewCell, static "contentView") = UIView;
overload externalInstanceMethod(static UITableViewCell, static "backgroundView") = UIView;
overload externalInstanceMethod(static UITableViewCell, static "setBackgroundView:") = Void, UIView;
overload externalInstanceMethod(static UITableViewCell, static "selectedBackgroundView") = UIView;
overload externalInstanceMethod(static UITableViewCell, static "setSelectedBackgroundView:") = Void, UIView;
overload externalInstanceMethod(static UITableViewCell, static "reuseIdentifier") = NSString;
overload externalInstanceMethod(static UITableViewCell, static "selectionStyle") = UITableViewCellSelectionStyle;
overload externalInstanceMethod(static UITableViewCell, static "setSelectionStyle:") = Void, UITableViewCellSelectionStyle;
overload externalInstanceMethod(static UITableViewCell, static "isSelected") = Bool;
overload externalInstanceMethod(static UITableViewCell, static "setSelected:") = Void, Bool;
overload externalInstanceMethod(static UITableViewCell, static "isHighlighted") = Bool;
overload externalInstanceMethod(static UITableViewCell, static "setHighlighted:") = Void, Bool;
overload externalInstanceMethod(static UITableViewCell, static "editingStyle") = UITableViewCellEditingStyle;
overload externalInstanceMethod(static UITableViewCell, static "showsReorderControl") = Bool;
overload externalInstanceMethod(static UITableViewCell, static "setShowsReorderControl:") = Void, Bool;
overload externalInstanceMethod(static UITableViewCell, static "shouldIndentWhileEditing") = Bool;
overload externalInstanceMethod(static UITableViewCell, static "setShouldIndentWhileEditing:") = Void, Bool;
overload externalInstanceMethod(static UITableViewCell, static "accessoryType") = UITableViewCellAccessoryType;
overload externalInstanceMethod(static UITableViewCell, static "setAccessoryType:") = Void, UITableViewCellAccessoryType;
overload externalInstanceMethod(static UITableViewCell, static "accessoryView") = UIView;
overload externalInstanceMethod(static UITableViewCell, static "setAccessoryView:") = Void, UIView;
overload externalInstanceMethod(static UITableViewCell, static "editingAccessoryType") = UITableViewCellAccessoryType;
overload externalInstanceMethod(static UITableViewCell, static "setEditingAccessoryType:") = Void, UITableViewCellAccessoryType;
overload externalInstanceMethod(static UITableViewCell, static "editingAccessoryView") = UIView;
overload externalInstanceMethod(static UITableViewCell, static "setEditingAccessoryView:") = Void, UIView;
overload externalInstanceMethod(static UITableViewCell, static "indentationLevel") = Int;
overload externalInstanceMethod(static UITableViewCell, static "setIndentationLevel:") = Void, Int;
overload externalInstanceMethod(static UITableViewCell, static "indentationWidth") = Float;
overload externalInstanceMethod(static UITableViewCell, static "setIndentationWidth:") = Void, Float;
overload externalInstanceMethod(static UITableViewCell, static "isEditing") = Bool;
overload externalInstanceMethod(static UITableViewCell, static "setEditing:") = Void, Bool;
overload externalInstanceMethod(static UITableViewCell, static "showingDeleteConfirmation") = Bool;
overload externalInstanceMethod(static UITableViewCell, static "initWithFrame:reuseIdentifier:") = Id, CGRect, NSString;
overload externalInstanceMethod(static UITableViewCell, static "text") = NSString;
overload externalInstanceMethod(static UITableViewCell, static "setText:") = Void, NSString;
overload externalInstanceMethod(static UITableViewCell, static "font") = UIFont;
overload externalInstanceMethod(static UITableViewCell, static "setFont:") = Void, UIFont;
overload externalInstanceMethod(static UITableViewCell, static "textAlignment") = UITextAlignment;
overload externalInstanceMethod(static UITableViewCell, static "setTextAlignment:") = Void, UITextAlignment;
overload externalInstanceMethod(static UITableViewCell, static "lineBreakMode") = UILineBreakMode;
overload externalInstanceMethod(static UITableViewCell, static "setLineBreakMode:") = Void, UILineBreakMode;
overload externalInstanceMethod(static UITableViewCell, static "textColor") = UIColor;
overload externalInstanceMethod(static UITableViewCell, static "setTextColor:") = Void, UIColor;
overload externalInstanceMethod(static UITableViewCell, static "selectedTextColor") = UIColor;
overload externalInstanceMethod(static UITableViewCell, static "setSelectedTextColor:") = Void, UIColor;
overload externalInstanceMethod(static UITableViewCell, static "image") = UIImage;
overload externalInstanceMethod(static UITableViewCell, static "setImage:") = Void, UIImage;
overload externalInstanceMethod(static UITableViewCell, static "selectedImage") = UIImage;
overload externalInstanceMethod(static UITableViewCell, static "setSelectedImage:") = Void, UIImage;
overload externalInstanceMethod(static UITableViewCell, static "hidesAccessoryWhenEditing") = Bool;
overload externalInstanceMethod(static UITableViewCell, static "setHidesAccessoryWhenEditing:") = Void, Bool;
overload externalInstanceMethod(static UITableViewCell, static "target") = Id;
overload externalInstanceMethod(static UITableViewCell, static "setTarget:") = Void, Id;
overload externalInstanceMethod(static UITableViewCell, static "editAction") = SelectorHandle;
overload externalInstanceMethod(static UITableViewCell, static "setEditAction:") = Void, SelectorHandle;
overload externalInstanceMethod(static UITableViewCell, static "accessoryAction") = SelectorHandle;
overload externalInstanceMethod(static UITableViewCell, static "setAccessoryAction:") = Void, SelectorHandle;

record UITableViewController = externalClass(UIViewController);
overload externalInstanceMethod(static UITableViewController, static "tableView:willDisplayCell:forRowAtIndexPath:") = Void, UITableView, UITableViewCell, NSIndexPath;
overload externalInstanceMethod(static UITableViewController, static "tableView:heightForRowAtIndexPath:") = Float, UITableView, NSIndexPath;
overload externalInstanceMethod(static UITableViewController, static "tableView:heightForHeaderInSection:") = Float, UITableView, Int;
overload externalInstanceMethod(static UITableViewController, static "tableView:heightForFooterInSection:") = Float, UITableView, Int;
overload externalInstanceMethod(static UITableViewController, static "tableView:viewForHeaderInSection:") = UIView, UITableView, Int;
overload externalInstanceMethod(static UITableViewController, static "tableView:viewForFooterInSection:") = UIView, UITableView, Int;
overload externalInstanceMethod(static UITableViewController, static "tableView:accessoryTypeForRowWithIndexPath:") = UITableViewCellAccessoryType, UITableView, NSIndexPath;
overload externalInstanceMethod(static UITableViewController, static "tableView:accessoryButtonTappedForRowWithIndexPath:") = Void, UITableView, NSIndexPath;
overload externalInstanceMethod(static UITableViewController, static "tableView:willSelectRowAtIndexPath:") = NSIndexPath, UITableView, NSIndexPath;
overload externalInstanceMethod(static UITableViewController, static "tableView:willDeselectRowAtIndexPath:") = NSIndexPath, UITableView, NSIndexPath;
overload externalInstanceMethod(static UITableViewController, static "tableView:didSelectRowAtIndexPath:") = Void, UITableView, NSIndexPath;
overload externalInstanceMethod(static UITableViewController, static "tableView:didDeselectRowAtIndexPath:") = Void, UITableView, NSIndexPath;
overload externalInstanceMethod(static UITableViewController, static "tableView:editingStyleForRowAtIndexPath:") = UITableViewCellEditingStyle, UITableView, NSIndexPath;
overload externalInstanceMethod(static UITableViewController, static "tableView:titleForDeleteConfirmationButtonForRowAtIndexPath:") = NSString, UITableView, NSIndexPath;
overload externalInstanceMethod(static UITableViewController, static "tableView:shouldIndentWhileEditingRowAtIndexPath:") = Bool, UITableView, NSIndexPath;
overload externalInstanceMethod(static UITableViewController, static "tableView:willBeginEditingRowAtIndexPath:") = Void, UITableView, NSIndexPath;
overload externalInstanceMethod(static UITableViewController, static "tableView:didEndEditingRowAtIndexPath:") = Void, UITableView, NSIndexPath;
overload externalInstanceMethod(static UITableViewController, static "tableView:targetIndexPathForMoveFromRowAtIndexPath:toProposedIndexPath:") = NSIndexPath, UITableView, NSIndexPath, NSIndexPath;
overload externalInstanceMethod(static UITableViewController, static "tableView:indentationLevelForRowAtIndexPath:") = Int, UITableView, NSIndexPath;
overload externalInstanceMethod(static UITableViewController, static "tableView:numberOfRowsInSection:") = Int, UITableView, Int;
overload externalInstanceMethod(static UITableViewController, static "tableView:cellForRowAtIndexPath:") = UITableViewCell, UITableView, NSIndexPath;
overload externalInstanceMethod(static UITableViewController, static "numberOfSectionsInTableView:") = Int, UITableView;
overload externalInstanceMethod(static UITableViewController, static "tableView:titleForHeaderInSection:") = NSString, UITableView, Int;
overload externalInstanceMethod(static UITableViewController, static "tableView:titleForFooterInSection:") = NSString, UITableView, Int;
overload externalInstanceMethod(static UITableViewController, static "tableView:canEditRowAtIndexPath:") = Bool, UITableView, NSIndexPath;
overload externalInstanceMethod(static UITableViewController, static "tableView:canMoveRowAtIndexPath:") = Bool, UITableView, NSIndexPath;
overload externalInstanceMethod(static UITableViewController, static "sectionIndexTitlesForTableView:") = NSArray, UITableView;
overload externalInstanceMethod(static UITableViewController, static "tableView:sectionForSectionIndexTitle:atIndex:") = Int, UITableView, NSString, Int;
overload externalInstanceMethod(static UITableViewController, static "tableView:commitEditingStyle:forRowAtIndexPath:") = Void, UITableView, UITableViewCellEditingStyle, NSIndexPath;
overload externalInstanceMethod(static UITableViewController, static "tableView:moveRowAtIndexPath:toIndexPath:") = Void, UITableView, NSIndexPath, NSIndexPath;
overload externalInstanceMethod(static UITableViewController, static "initWithStyle:") = Id, UITableViewStyle;
overload externalInstanceMethod(static UITableViewController, static "tableView") = UITableView;
overload externalInstanceMethod(static UITableViewController, static "setTableView:") = Void, UITableView;
overload externalInstanceMethod(static UITableViewController, static "clearsSelectionOnViewWillAppear") = Bool;
overload externalInstanceMethod(static UITableViewController, static "setClearsSelectionOnViewWillAppear:") = Void, Bool;

record UITapGestureRecognizer = externalClass(UIGestureRecognizer);
overload externalInstanceMethod(static UITapGestureRecognizer, static "numberOfTapsRequired") = UInt;
overload externalInstanceMethod(static UITapGestureRecognizer, static "setNumberOfTapsRequired:") = Void, UInt;
overload externalInstanceMethod(static UITapGestureRecognizer, static "numberOfTouchesRequired") = UInt;
overload externalInstanceMethod(static UITapGestureRecognizer, static "setNumberOfTouchesRequired:") = Void, UInt;

record UITextField = externalClass(UIControl);
overload externalInstanceMethod(static UITextField, static "autocapitalizationType") = UITextAutocapitalizationType;
overload externalInstanceMethod(static UITextField, static "setAutocapitalizationType:") = Void, UITextAutocapitalizationType;
overload externalInstanceMethod(static UITextField, static "autocorrectionType") = UITextAutocorrectionType;
overload externalInstanceMethod(static UITextField, static "setAutocorrectionType:") = Void, UITextAutocorrectionType;
overload externalInstanceMethod(static UITextField, static "keyboardType") = UIKeyboardType;
overload externalInstanceMethod(static UITextField, static "setKeyboardType:") = Void, UIKeyboardType;
overload externalInstanceMethod(static UITextField, static "keyboardAppearance") = UIKeyboardAppearance;
overload externalInstanceMethod(static UITextField, static "setKeyboardAppearance:") = Void, UIKeyboardAppearance;
overload externalInstanceMethod(static UITextField, static "returnKeyType") = UIReturnKeyType;
overload externalInstanceMethod(static UITextField, static "setReturnKeyType:") = Void, UIReturnKeyType;
overload externalInstanceMethod(static UITextField, static "enablesReturnKeyAutomatically") = Bool;
overload externalInstanceMethod(static UITextField, static "setEnablesReturnKeyAutomatically:") = Void, Bool;
overload externalInstanceMethod(static UITextField, static "isSecureTextEntry") = Bool;
overload externalInstanceMethod(static UITextField, static "setSecureTextEntry:") = Void, Bool;
overload externalInstanceMethod(static UITextField, static "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static UITextField, static "initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(static UITextField, static "borderRectForBounds:") = CGRect, CGRect;
overload externalInstanceMethod(static UITextField, static "textRectForBounds:") = CGRect, CGRect;
overload externalInstanceMethod(static UITextField, static "placeholderRectForBounds:") = CGRect, CGRect;
overload externalInstanceMethod(static UITextField, static "editingRectForBounds:") = CGRect, CGRect;
overload externalInstanceMethod(static UITextField, static "clearButtonRectForBounds:") = CGRect, CGRect;
overload externalInstanceMethod(static UITextField, static "leftViewRectForBounds:") = CGRect, CGRect;
overload externalInstanceMethod(static UITextField, static "rightViewRectForBounds:") = CGRect, CGRect;
overload externalInstanceMethod(static UITextField, static "drawTextInRect:") = Void, CGRect;
overload externalInstanceMethod(static UITextField, static "drawPlaceholderInRect:") = Void, CGRect;
overload externalInstanceMethod(static UITextField, static "text") = NSString;
overload externalInstanceMethod(static UITextField, static "setText:") = Void, NSString;
overload externalInstanceMethod(static UITextField, static "textColor") = UIColor;
overload externalInstanceMethod(static UITextField, static "setTextColor:") = Void, UIColor;
overload externalInstanceMethod(static UITextField, static "font") = UIFont;
overload externalInstanceMethod(static UITextField, static "setFont:") = Void, UIFont;
overload externalInstanceMethod(static UITextField, static "textAlignment") = UITextAlignment;
overload externalInstanceMethod(static UITextField, static "setTextAlignment:") = Void, UITextAlignment;
overload externalInstanceMethod(static UITextField, static "borderStyle") = UITextBorderStyle;
overload externalInstanceMethod(static UITextField, static "setBorderStyle:") = Void, UITextBorderStyle;
overload externalInstanceMethod(static UITextField, static "placeholder") = NSString;
overload externalInstanceMethod(static UITextField, static "setPlaceholder:") = Void, NSString;
overload externalInstanceMethod(static UITextField, static "clearsOnBeginEditing") = Bool;
overload externalInstanceMethod(static UITextField, static "setClearsOnBeginEditing:") = Void, Bool;
overload externalInstanceMethod(static UITextField, static "adjustsFontSizeToFitWidth") = Bool;
overload externalInstanceMethod(static UITextField, static "setAdjustsFontSizeToFitWidth:") = Void, Bool;
overload externalInstanceMethod(static UITextField, static "minimumFontSize") = Float;
overload externalInstanceMethod(static UITextField, static "setMinimumFontSize:") = Void, Float;
overload externalInstanceMethod(static UITextField, static "delegate") = Id;
overload externalInstanceMethod(static UITextField, static "setDelegate:") = Void, Id;
overload externalInstanceMethod(static UITextField, static "background") = UIImage;
overload externalInstanceMethod(static UITextField, static "setBackground:") = Void, UIImage;
overload externalInstanceMethod(static UITextField, static "disabledBackground") = UIImage;
overload externalInstanceMethod(static UITextField, static "setDisabledBackground:") = Void, UIImage;
overload externalInstanceMethod(static UITextField, static "isEditing") = Bool;
overload externalInstanceMethod(static UITextField, static "clearButtonMode") = UITextFieldViewMode;
overload externalInstanceMethod(static UITextField, static "setClearButtonMode:") = Void, UITextFieldViewMode;
overload externalInstanceMethod(static UITextField, static "leftView") = UIView;
overload externalInstanceMethod(static UITextField, static "setLeftView:") = Void, UIView;
overload externalInstanceMethod(static UITextField, static "leftViewMode") = UITextFieldViewMode;
overload externalInstanceMethod(static UITextField, static "setLeftViewMode:") = Void, UITextFieldViewMode;
overload externalInstanceMethod(static UITextField, static "rightView") = UIView;
overload externalInstanceMethod(static UITextField, static "setRightView:") = Void, UIView;
overload externalInstanceMethod(static UITextField, static "rightViewMode") = UITextFieldViewMode;
overload externalInstanceMethod(static UITextField, static "setRightViewMode:") = Void, UITextFieldViewMode;
overload externalInstanceMethod(static UITextField, static "inputView") = UIView;
overload externalInstanceMethod(static UITextField, static "setInputView:") = Void, UIView;
overload externalInstanceMethod(static UITextField, static "inputAccessoryView") = UIView;
overload externalInstanceMethod(static UITextField, static "setInputAccessoryView:") = Void, UIView;

record UITextInputStringTokenizer = externalClass(NSObject);
overload externalInstanceMethod(static UITextInputStringTokenizer, static "rangeEnclosingPosition:withGranularity:inDirection:") = UITextRange, UITextPosition, UITextGranularity, Int;
overload externalInstanceMethod(static UITextInputStringTokenizer, static "isPosition:atBoundary:inDirection:") = Bool, UITextPosition, UITextGranularity, Int;
overload externalInstanceMethod(static UITextInputStringTokenizer, static "positionFromPosition:toBoundary:inDirection:") = UITextPosition, UITextPosition, UITextGranularity, Int;
overload externalInstanceMethod(static UITextInputStringTokenizer, static "isPosition:withinTextUnit:inDirection:") = Bool, UITextPosition, UITextGranularity, Int;
overload externalInstanceMethod(static UITextInputStringTokenizer, static "initWithTextInput:") = Id, UIResponder;

record UITextPosition = externalClass(NSObject);

record UITextRange = externalClass(NSObject);
overload externalInstanceMethod(static UITextRange, static "isEmpty") = Bool;
overload externalInstanceMethod(static UITextRange, static "start") = UITextPosition;
overload externalInstanceMethod(static UITextRange, static "end") = UITextPosition;

record UITextView = externalClass(UIScrollView);
overload externalInstanceMethod(static UITextView, static "autocapitalizationType") = UITextAutocapitalizationType;
overload externalInstanceMethod(static UITextView, static "setAutocapitalizationType:") = Void, UITextAutocapitalizationType;
overload externalInstanceMethod(static UITextView, static "autocorrectionType") = UITextAutocorrectionType;
overload externalInstanceMethod(static UITextView, static "setAutocorrectionType:") = Void, UITextAutocorrectionType;
overload externalInstanceMethod(static UITextView, static "keyboardType") = UIKeyboardType;
overload externalInstanceMethod(static UITextView, static "setKeyboardType:") = Void, UIKeyboardType;
overload externalInstanceMethod(static UITextView, static "keyboardAppearance") = UIKeyboardAppearance;
overload externalInstanceMethod(static UITextView, static "setKeyboardAppearance:") = Void, UIKeyboardAppearance;
overload externalInstanceMethod(static UITextView, static "returnKeyType") = UIReturnKeyType;
overload externalInstanceMethod(static UITextView, static "setReturnKeyType:") = Void, UIReturnKeyType;
overload externalInstanceMethod(static UITextView, static "enablesReturnKeyAutomatically") = Bool;
overload externalInstanceMethod(static UITextView, static "setEnablesReturnKeyAutomatically:") = Void, Bool;
overload externalInstanceMethod(static UITextView, static "isSecureTextEntry") = Bool;
overload externalInstanceMethod(static UITextView, static "setSecureTextEntry:") = Void, Bool;
overload externalInstanceMethod(static UITextView, static "hasText") = Bool;
overload externalInstanceMethod(static UITextView, static "scrollRangeToVisible:") = Void, NSRange;
overload externalInstanceMethod(static UITextView, static "delegate") = Id;
overload externalInstanceMethod(static UITextView, static "setDelegate:") = Void, Id;
overload externalInstanceMethod(static UITextView, static "text") = NSString;
overload externalInstanceMethod(static UITextView, static "setText:") = Void, NSString;
overload externalInstanceMethod(static UITextView, static "font") = UIFont;
overload externalInstanceMethod(static UITextView, static "setFont:") = Void, UIFont;
overload externalInstanceMethod(static UITextView, static "textColor") = UIColor;
overload externalInstanceMethod(static UITextView, static "setTextColor:") = Void, UIColor;
overload externalInstanceMethod(static UITextView, static "textAlignment") = UITextAlignment;
overload externalInstanceMethod(static UITextView, static "setTextAlignment:") = Void, UITextAlignment;
overload externalInstanceMethod(static UITextView, static "selectedRange") = NSRange;
overload externalInstanceMethod(static UITextView, static "setSelectedRange:") = Void, NSRange;
overload externalInstanceMethod(static UITextView, static "isEditable") = Bool;
overload externalInstanceMethod(static UITextView, static "setEditable:") = Void, Bool;
overload externalInstanceMethod(static UITextView, static "dataDetectorTypes") = UInt;
overload externalInstanceMethod(static UITextView, static "setDataDetectorTypes:") = Void, UInt;
overload externalInstanceMethod(static UITextView, static "inputView") = UIView;
overload externalInstanceMethod(static UITextView, static "setInputView:") = Void, UIView;
overload externalInstanceMethod(static UITextView, static "inputAccessoryView") = UIView;
overload externalInstanceMethod(static UITextView, static "setInputAccessoryView:") = Void, UIView;

record UIToolbar = externalClass(UIView);
overload externalInstanceMethod(static UIToolbar, static "setItems:animated:") = Void, NSArray, Bool;
overload externalInstanceMethod(static UIToolbar, static "barStyle") = UIBarStyle;
overload externalInstanceMethod(static UIToolbar, static "setBarStyle:") = Void, UIBarStyle;
overload externalInstanceMethod(static UIToolbar, static "items") = NSArray;
overload externalInstanceMethod(static UIToolbar, static "setItems:") = Void, NSArray;
overload externalInstanceMethod(static UIToolbar, static "tintColor") = UIColor;
overload externalInstanceMethod(static UIToolbar, static "setTintColor:") = Void, UIColor;
overload externalInstanceMethod(static UIToolbar, static "isTranslucent") = Bool;
overload externalInstanceMethod(static UIToolbar, static "setTranslucent:") = Void, Bool;

record UITouch = externalClass(NSObject);
overload externalInstanceMethod(static UITouch, static "locationInView:") = CGPoint, UIView;
overload externalInstanceMethod(static UITouch, static "previousLocationInView:") = CGPoint, UIView;
overload externalInstanceMethod(static UITouch, static "timestamp") = Double;
overload externalInstanceMethod(static UITouch, static "phase") = UITouchPhase;
overload externalInstanceMethod(static UITouch, static "tapCount") = UInt;
overload externalInstanceMethod(static UITouch, static "window") = UIWindow;
overload externalInstanceMethod(static UITouch, static "view") = UIView;
overload externalInstanceMethod(static UITouch, static "gestureRecognizers") = NSArray;

record UIVideoEditorController = externalClass(UINavigationController);
overload externalClassMethod(static UIVideoEditorController, static "canEditVideoAtPath:") = Bool, NSString;
overload externalInstanceMethod(static UIVideoEditorController, static "delegate") = Id;
overload externalInstanceMethod(static UIVideoEditorController, static "setDelegate:") = Void, Id;
overload externalInstanceMethod(static UIVideoEditorController, static "videoPath") = NSString;
overload externalInstanceMethod(static UIVideoEditorController, static "setVideoPath:") = Void, NSString;
overload externalInstanceMethod(static UIVideoEditorController, static "videoMaximumDuration") = Double;
overload externalInstanceMethod(static UIVideoEditorController, static "setVideoMaximumDuration:") = Void, Double;
overload externalInstanceMethod(static UIVideoEditorController, static "videoQuality") = UInt;
overload externalInstanceMethod(static UIVideoEditorController, static "setVideoQuality:") = Void, UInt;

record UIView = externalClass(UIResponder);
overload externalInstanceMethod(static UIView, static "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static UIView, static "initWithCoder:") = Id, NSCoder;
overload externalClassMethod(static UIView, static "layerClass") = Id;
overload externalInstanceMethod(static UIView, static "initWithFrame:") = Id, CGRect;
overload externalInstanceMethod(static UIView, static "isUserInteractionEnabled") = Bool;
overload externalInstanceMethod(static UIView, static "setUserInteractionEnabled:") = Void, Bool;
overload externalInstanceMethod(static UIView, static "tag") = Int;
overload externalInstanceMethod(static UIView, static "setTag:") = Void, Int;
overload externalInstanceMethod(static UIView, static "layer") = CALayer;
overload externalInstanceMethod(static UIView, static "hitTest:withEvent:") = UIView, CGPoint, UIEvent;
overload externalInstanceMethod(static UIView, static "pointInside:withEvent:") = Bool, CGPoint, UIEvent;
overload externalInstanceMethod(static UIView, static "convertPoint:toView:") = CGPoint, CGPoint, UIView;
overload externalInstanceMethod(static UIView, static "convertPoint:fromView:") = CGPoint, CGPoint, UIView;
overload externalInstanceMethod(static UIView, static "convertRect:toView:") = CGRect, CGRect, UIView;
overload externalInstanceMethod(static UIView, static "convertRect:fromView:") = CGRect, CGRect, UIView;
overload externalInstanceMethod(static UIView, static "sizeThatFits:") = CGSize, CGSize;
overload externalInstanceMethod(static UIView, static "sizeToFit") = Void;
overload externalInstanceMethod(static UIView, static "frame") = CGRect;
overload externalInstanceMethod(static UIView, static "setFrame:") = Void, CGRect;
overload externalInstanceMethod(static UIView, static "bounds") = CGRect;
overload externalInstanceMethod(static UIView, static "setBounds:") = Void, CGRect;
overload externalInstanceMethod(static UIView, static "center") = CGPoint;
overload externalInstanceMethod(static UIView, static "setCenter:") = Void, CGPoint;
overload externalInstanceMethod(static UIView, static "transform") = CGAffineTransform;
overload externalInstanceMethod(static UIView, static "setTransform:") = Void, CGAffineTransform;
overload externalInstanceMethod(static UIView, static "contentScaleFactor") = Float;
overload externalInstanceMethod(static UIView, static "setContentScaleFactor:") = Void, Float;
overload externalInstanceMethod(static UIView, static "isMultipleTouchEnabled") = Bool;
overload externalInstanceMethod(static UIView, static "setMultipleTouchEnabled:") = Void, Bool;
overload externalInstanceMethod(static UIView, static "isExclusiveTouch") = Bool;
overload externalInstanceMethod(static UIView, static "setExclusiveTouch:") = Void, Bool;
overload externalInstanceMethod(static UIView, static "autoresizesSubviews") = Bool;
overload externalInstanceMethod(static UIView, static "setAutoresizesSubviews:") = Void, Bool;
overload externalInstanceMethod(static UIView, static "autoresizingMask") = UInt;
overload externalInstanceMethod(static UIView, static "setAutoresizingMask:") = Void, UInt;
overload externalInstanceMethod(static UIView, static "removeFromSuperview") = Void;
overload externalInstanceMethod(static UIView, static "insertSubview:atIndex:") = Void, UIView, Int;
overload externalInstanceMethod(static UIView, static "exchangeSubviewAtIndex:withSubviewAtIndex:") = Void, Int, Int;
overload externalInstanceMethod(static UIView, static "addSubview:") = Void, UIView;
overload externalInstanceMethod(static UIView, static "insertSubview:belowSubview:") = Void, UIView, UIView;
overload externalInstanceMethod(static UIView, static "insertSubview:aboveSubview:") = Void, UIView, UIView;
overload externalInstanceMethod(static UIView, static "bringSubviewToFront:") = Void, UIView;
overload externalInstanceMethod(static UIView, static "sendSubviewToBack:") = Void, UIView;
overload externalInstanceMethod(static UIView, static "didAddSubview:") = Void, UIView;
overload externalInstanceMethod(static UIView, static "willRemoveSubview:") = Void, UIView;
overload externalInstanceMethod(static UIView, static "willMoveToSuperview:") = Void, UIView;
overload externalInstanceMethod(static UIView, static "didMoveToSuperview") = Void;
overload externalInstanceMethod(static UIView, static "willMoveToWindow:") = Void, UIWindow;
overload externalInstanceMethod(static UIView, static "didMoveToWindow") = Void;
overload externalInstanceMethod(static UIView, static "isDescendantOfView:") = Bool, UIView;
overload externalInstanceMethod(static UIView, static "viewWithTag:") = UIView, Int;
overload externalInstanceMethod(static UIView, static "setNeedsLayout") = Void;
overload externalInstanceMethod(static UIView, static "layoutIfNeeded") = Void;
overload externalInstanceMethod(static UIView, static "layoutSubviews") = Void;
overload externalInstanceMethod(static UIView, static "superview") = UIView;
overload externalInstanceMethod(static UIView, static "subviews") = NSArray;
overload externalInstanceMethod(static UIView, static "window") = UIWindow;
overload externalInstanceMethod(static UIView, static "drawRect:") = Void, CGRect;
overload externalInstanceMethod(static UIView, static "setNeedsDisplay") = Void;
overload externalInstanceMethod(static UIView, static "setNeedsDisplayInRect:") = Void, CGRect;
overload externalInstanceMethod(static UIView, static "clipsToBounds") = Bool;
overload externalInstanceMethod(static UIView, static "setClipsToBounds:") = Void, Bool;
overload externalInstanceMethod(static UIView, static "backgroundColor") = UIColor;
overload externalInstanceMethod(static UIView, static "setBackgroundColor:") = Void, UIColor;
overload externalInstanceMethod(static UIView, static "alpha") = Float;
overload externalInstanceMethod(static UIView, static "setAlpha:") = Void, Float;
overload externalInstanceMethod(static UIView, static "isOpaque") = Bool;
overload externalInstanceMethod(static UIView, static "setOpaque:") = Void, Bool;
overload externalInstanceMethod(static UIView, static "clearsContextBeforeDrawing") = Bool;
overload externalInstanceMethod(static UIView, static "setClearsContextBeforeDrawing:") = Void, Bool;
overload externalInstanceMethod(static UIView, static "isHidden") = Bool;
overload externalInstanceMethod(static UIView, static "setHidden:") = Void, Bool;
overload externalInstanceMethod(static UIView, static "contentMode") = UIViewContentMode;
overload externalInstanceMethod(static UIView, static "setContentMode:") = Void, UIViewContentMode;
overload externalInstanceMethod(static UIView, static "contentStretch") = CGRect;
overload externalInstanceMethod(static UIView, static "setContentStretch:") = Void, CGRect;
overload externalClassMethod(static UIView, static "beginAnimations:context:") = Void, NSString, RawPointer;
overload externalClassMethod(static UIView, static "commitAnimations") = Void;
overload externalClassMethod(static UIView, static "setAnimationDelegate:") = Void, Id;
overload externalClassMethod(static UIView, static "setAnimationWillStartSelector:") = Void, SelectorHandle;
overload externalClassMethod(static UIView, static "setAnimationDidStopSelector:") = Void, SelectorHandle;
overload externalClassMethod(static UIView, static "setAnimationDuration:") = Void, Double;
overload externalClassMethod(static UIView, static "setAnimationDelay:") = Void, Double;
overload externalClassMethod(static UIView, static "setAnimationStartDate:") = Void, NSDate;
overload externalClassMethod(static UIView, static "setAnimationCurve:") = Void, UIViewAnimationCurve;
overload externalClassMethod(static UIView, static "setAnimationRepeatCount:") = Void, Float;
overload externalClassMethod(static UIView, static "setAnimationRepeatAutoreverses:") = Void, Bool;
overload externalClassMethod(static UIView, static "setAnimationBeginsFromCurrentState:") = Void, Bool;
overload externalClassMethod(static UIView, static "setAnimationTransition:forView:cache:") = Void, UIViewAnimationTransition, UIView, Bool;
overload externalClassMethod(static UIView, static "setAnimationsEnabled:") = Void, Bool;
overload externalClassMethod(static UIView, static "areAnimationsEnabled") = Bool;
overload externalClassMethod(static UIView, static "animateWithDuration:delay:options:animations:completion:") = Void, Double, Double, UInt, UnknownType, UnknownType;
overload externalClassMethod(static UIView, static "animateWithDuration:animations:completion:") = Void, Double, UnknownType, UnknownType;
overload externalClassMethod(static UIView, static "animateWithDuration:animations:") = Void, Double, UnknownType;
overload externalClassMethod(static UIView, static "transitionWithView:duration:options:animations:completion:") = Void, UIView, Double, UInt, UnknownType, UnknownType;
overload externalClassMethod(static UIView, static "transitionFromView:toView:duration:options:completion:") = Void, UIView, UIView, Double, UInt, UnknownType;
overload externalInstanceMethod(static UIView, static "addGestureRecognizer:") = Void, UIGestureRecognizer;
overload externalInstanceMethod(static UIView, static "removeGestureRecognizer:") = Void, UIGestureRecognizer;
overload externalInstanceMethod(static UIView, static "gestureRecognizers") = NSArray;
overload externalInstanceMethod(static UIView, static "setGestureRecognizers:") = Void, NSArray;
overload externalInstanceMethod(static UIView, static "endEditing:") = Bool, Bool;

record UIViewController = externalClass(UIResponder);
overload externalInstanceMethod(static UIViewController, static "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static UIViewController, static "initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(static UIViewController, static "initWithNibName:bundle:") = Id, NSString, NSBundle;
overload externalInstanceMethod(static UIViewController, static "loadView") = Void;
overload externalInstanceMethod(static UIViewController, static "viewDidLoad") = Void;
overload externalInstanceMethod(static UIViewController, static "viewDidUnload") = Void;
overload externalInstanceMethod(static UIViewController, static "isViewLoaded") = Bool;
overload externalInstanceMethod(static UIViewController, static "viewWillAppear:") = Void, Bool;
overload externalInstanceMethod(static UIViewController, static "viewDidAppear:") = Void, Bool;
overload externalInstanceMethod(static UIViewController, static "viewWillDisappear:") = Void, Bool;
overload externalInstanceMethod(static UIViewController, static "viewDidDisappear:") = Void, Bool;
overload externalInstanceMethod(static UIViewController, static "didReceiveMemoryWarning") = Void;
overload externalInstanceMethod(static UIViewController, static "presentModalViewController:animated:") = Void, UIViewController, Bool;
overload externalInstanceMethod(static UIViewController, static "dismissModalViewControllerAnimated:") = Void, Bool;
overload externalInstanceMethod(static UIViewController, static "view") = UIView;
overload externalInstanceMethod(static UIViewController, static "setView:") = Void, UIView;
overload externalInstanceMethod(static UIViewController, static "nibName") = NSString;
overload externalInstanceMethod(static UIViewController, static "nibBundle") = NSBundle;
overload externalInstanceMethod(static UIViewController, static "title") = NSString;
overload externalInstanceMethod(static UIViewController, static "setTitle:") = Void, NSString;
overload externalInstanceMethod(static UIViewController, static "modalViewController") = UIViewController;
overload externalInstanceMethod(static UIViewController, static "modalTransitionStyle") = UIModalTransitionStyle;
overload externalInstanceMethod(static UIViewController, static "setModalTransitionStyle:") = Void, UIModalTransitionStyle;
overload externalInstanceMethod(static UIViewController, static "modalPresentationStyle") = UIModalPresentationStyle;
overload externalInstanceMethod(static UIViewController, static "setModalPresentationStyle:") = Void, UIModalPresentationStyle;
overload externalInstanceMethod(static UIViewController, static "wantsFullScreenLayout") = Bool;
overload externalInstanceMethod(static UIViewController, static "setWantsFullScreenLayout:") = Void, Bool;
overload externalInstanceMethod(static UIViewController, static "parentViewController") = UIViewController;
overload externalInstanceMethod(static UIViewController, static "shouldAutorotateToInterfaceOrientation:") = Bool, UIInterfaceOrientation;
overload externalInstanceMethod(static UIViewController, static "rotatingHeaderView") = UIView;
overload externalInstanceMethod(static UIViewController, static "rotatingFooterView") = UIView;
overload externalInstanceMethod(static UIViewController, static "willRotateToInterfaceOrientation:duration:") = Void, UIInterfaceOrientation, Double;
overload externalInstanceMethod(static UIViewController, static "didRotateFromInterfaceOrientation:") = Void, UIInterfaceOrientation;
overload externalInstanceMethod(static UIViewController, static "willAnimateRotationToInterfaceOrientation:duration:") = Void, UIInterfaceOrientation, Double;
overload externalInstanceMethod(static UIViewController, static "willAnimateFirstHalfOfRotationToInterfaceOrientation:duration:") = Void, UIInterfaceOrientation, Double;
overload externalInstanceMethod(static UIViewController, static "didAnimateFirstHalfOfRotationToInterfaceOrientation:") = Void, UIInterfaceOrientation;
overload externalInstanceMethod(static UIViewController, static "willAnimateSecondHalfOfRotationFromInterfaceOrientation:duration:") = Void, UIInterfaceOrientation, Double;
overload externalInstanceMethod(static UIViewController, static "interfaceOrientation") = UIInterfaceOrientation;
overload externalInstanceMethod(static UIViewController, static "setEditing:animated:") = Void, Bool, Bool;
overload externalInstanceMethod(static UIViewController, static "editButtonItem") = UIBarButtonItem;
overload externalInstanceMethod(static UIViewController, static "isEditing") = Bool;
overload externalInstanceMethod(static UIViewController, static "setEditing:") = Void, Bool;
overload externalInstanceMethod(static UIViewController, static "searchDisplayController") = UISearchDisplayController;
overload externalInstanceMethod(static UIViewController, static "navigationItem") = UINavigationItem;
overload externalInstanceMethod(static UIViewController, static "hidesBottomBarWhenPushed") = Bool;
overload externalInstanceMethod(static UIViewController, static "setHidesBottomBarWhenPushed:") = Void, Bool;
overload externalInstanceMethod(static UIViewController, static "navigationController") = UINavigationController;
overload externalInstanceMethod(static UIViewController, static "setToolbarItems:animated:") = Void, NSArray, Bool;
overload externalInstanceMethod(static UIViewController, static "toolbarItems") = NSArray;
overload externalInstanceMethod(static UIViewController, static "setToolbarItems:") = Void, NSArray;
overload externalInstanceMethod(static UIViewController, static "contentSizeForViewInPopover") = CGSize;
overload externalInstanceMethod(static UIViewController, static "setContentSizeForViewInPopover:") = Void, CGSize;
overload externalInstanceMethod(static UIViewController, static "isModalInPopover") = Bool;
overload externalInstanceMethod(static UIViewController, static "setModalInPopover:") = Void, Bool;
overload externalInstanceMethod(static UIViewController, static "splitViewController") = UISplitViewController;
overload externalInstanceMethod(static UIViewController, static "tabBarItem") = UITabBarItem;
overload externalInstanceMethod(static UIViewController, static "setTabBarItem:") = Void, UITabBarItem;
overload externalInstanceMethod(static UIViewController, static "tabBarController") = UITabBarController;

record UIWebView = externalClass(UIView);
overload externalInstanceMethod(static UIWebView, static "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static UIWebView, static "initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(static UIWebView, static "scrollViewDidScroll:") = Void, UIScrollView;
overload externalInstanceMethod(static UIWebView, static "scrollViewDidZoom:") = Void, UIScrollView;
overload externalInstanceMethod(static UIWebView, static "scrollViewWillBeginDragging:") = Void, UIScrollView;
overload externalInstanceMethod(static UIWebView, static "scrollViewDidEndDragging:willDecelerate:") = Void, UIScrollView, Bool;
overload externalInstanceMethod(static UIWebView, static "scrollViewWillBeginDecelerating:") = Void, UIScrollView;
overload externalInstanceMethod(static UIWebView, static "scrollViewDidEndDecelerating:") = Void, UIScrollView;
overload externalInstanceMethod(static UIWebView, static "scrollViewDidEndScrollingAnimation:") = Void, UIScrollView;
overload externalInstanceMethod(static UIWebView, static "viewForZoomingInScrollView:") = UIView, UIScrollView;
overload externalInstanceMethod(static UIWebView, static "scrollViewWillBeginZooming:withView:") = Void, UIScrollView, UIView;
overload externalInstanceMethod(static UIWebView, static "scrollViewDidEndZooming:withView:atScale:") = Void, UIScrollView, UIView, Float;
overload externalInstanceMethod(static UIWebView, static "scrollViewShouldScrollToTop:") = Bool, UIScrollView;
overload externalInstanceMethod(static UIWebView, static "scrollViewDidScrollToTop:") = Void, UIScrollView;
overload externalInstanceMethod(static UIWebView, static "loadRequest:") = Void, NSURLRequest;
overload externalInstanceMethod(static UIWebView, static "loadHTMLString:baseURL:") = Void, NSString, NSURL;
overload externalInstanceMethod(static UIWebView, static "loadData:MIMEType:textEncodingName:baseURL:") = Void, NSData, NSString, NSString, NSURL;
overload externalInstanceMethod(static UIWebView, static "reload") = Void;
overload externalInstanceMethod(static UIWebView, static "stopLoading") = Void;
overload externalInstanceMethod(static UIWebView, static "goBack") = Void;
overload externalInstanceMethod(static UIWebView, static "goForward") = Void;
overload externalInstanceMethod(static UIWebView, static "stringByEvaluatingJavaScriptFromString:") = NSString, NSString;
overload externalInstanceMethod(static UIWebView, static "delegate") = Id;
overload externalInstanceMethod(static UIWebView, static "setDelegate:") = Void, Id;
overload externalInstanceMethod(static UIWebView, static "request") = NSURLRequest;
overload externalInstanceMethod(static UIWebView, static "canGoBack") = Bool;
overload externalInstanceMethod(static UIWebView, static "canGoForward") = Bool;
overload externalInstanceMethod(static UIWebView, static "isLoading") = Bool;
overload externalInstanceMethod(static UIWebView, static "scalesPageToFit") = Bool;
overload externalInstanceMethod(static UIWebView, static "setScalesPageToFit:") = Void, Bool;
overload externalInstanceMethod(static UIWebView, static "detectsPhoneNumbers") = Bool;
overload externalInstanceMethod(static UIWebView, static "setDetectsPhoneNumbers:") = Void, Bool;
overload externalInstanceMethod(static UIWebView, static "dataDetectorTypes") = UInt;
overload externalInstanceMethod(static UIWebView, static "setDataDetectorTypes:") = Void, UInt;
overload externalInstanceMethod(static UIWebView, static "allowsInlineMediaPlayback") = Bool;
overload externalInstanceMethod(static UIWebView, static "setAllowsInlineMediaPlayback:") = Void, Bool;
overload externalInstanceMethod(static UIWebView, static "mediaPlaybackRequiresUserAction") = Bool;
overload externalInstanceMethod(static UIWebView, static "setMediaPlaybackRequiresUserAction:") = Void, Bool;

record UIWindow = externalClass(UIView);
overload externalInstanceMethod(static UIWindow, static "becomeKeyWindow") = Void;
overload externalInstanceMethod(static UIWindow, static "resignKeyWindow") = Void;
overload externalInstanceMethod(static UIWindow, static "makeKeyWindow") = Void;
overload externalInstanceMethod(static UIWindow, static "makeKeyAndVisible") = Void;
overload externalInstanceMethod(static UIWindow, static "sendEvent:") = Void, UIEvent;
overload externalInstanceMethod(static UIWindow, static "convertPoint:toWindow:") = CGPoint, CGPoint, UIWindow;
overload externalInstanceMethod(static UIWindow, static "convertPoint:fromWindow:") = CGPoint, CGPoint, UIWindow;
overload externalInstanceMethod(static UIWindow, static "convertRect:toWindow:") = CGRect, CGRect, UIWindow;
overload externalInstanceMethod(static UIWindow, static "convertRect:fromWindow:") = CGRect, CGRect, UIWindow;
overload externalInstanceMethod(static UIWindow, static "screen") = UIScreen;
overload externalInstanceMethod(static UIWindow, static "setScreen:") = Void, UIScreen;
overload externalInstanceMethod(static UIWindow, static "windowLevel") = Float;
overload externalInstanceMethod(static UIWindow, static "setWindowLevel:") = Void, Float;
overload externalInstanceMethod(static UIWindow, static "isKeyWindow") = Bool;
overload externalInstanceMethod(static UIWindow, static "rootViewController") = UIViewController;
overload externalInstanceMethod(static UIWindow, static "setRootViewController:") = Void, UIViewController;


alias UIAccelerationValue = Double;

alias UIAccessibilityTraits = UInt64;

external UIAccessibilityTraitNone : UInt64;

external UIAccessibilityTraitButton : UInt64;

external UIAccessibilityTraitLink : UInt64;

external UIAccessibilityTraitSearchField : UInt64;

external UIAccessibilityTraitImage : UInt64;

external UIAccessibilityTraitSelected : UInt64;

external UIAccessibilityTraitPlaysSound : UInt64;

external UIAccessibilityTraitKeyboardKey : UInt64;

external UIAccessibilityTraitStaticText : UInt64;

external UIAccessibilityTraitSummaryElement : UInt64;

external UIAccessibilityTraitNotEnabled : UInt64;

external UIAccessibilityTraitUpdatesFrequently : UInt64;

external UIAccessibilityTraitStartsMediaSession : UInt64;

external UIAccessibilityTraitAdjustable : UInt64;

alias UIAccessibilityNotifications = UInt;

external UIAccessibilityScreenChangedNotification : UInt;

external UIAccessibilityLayoutChangedNotification : UInt;

external UIAccessibilityAnnouncementNotification : UInt;

alias UIEventTypeTouches = 0;
alias UIEventTypeMotion = 1;
alias UIEventTypeRemoteControl = 2;

alias UIEventType = Int;

alias UIEventSubtypeNone = 0;
alias UIEventSubtypeMotionShake = 1;
alias UIEventSubtypeRemoteControlPlay = 100;
alias UIEventSubtypeRemoteControlPause = 101;
alias UIEventSubtypeRemoteControlStop = 102;
alias UIEventSubtypeRemoteControlTogglePlayPause = 103;
alias UIEventSubtypeRemoteControlNextTrack = 104;
alias UIEventSubtypeRemoteControlPreviousTrack = 105;
alias UIEventSubtypeRemoteControlBeginSeekingBackward = 106;
alias UIEventSubtypeRemoteControlEndSeekingBackward = 107;
alias UIEventSubtypeRemoteControlBeginSeekingForward = 108;
alias UIEventSubtypeRemoteControlEndSeekingForward = 109;

alias UIEventSubtype = Int;

alias UIBarStyleDefault = 0;
alias UIBarStyleBlack = 1;
alias UIBarStyleBlackOpaque = 1;
alias UIBarStyleBlackTranslucent = 2;

alias UIBarStyle = Int;

alias UIViewAnimationCurveEaseInOut = 0;
alias UIViewAnimationCurveEaseIn = 1;
alias UIViewAnimationCurveEaseOut = 2;
alias UIViewAnimationCurveLinear = 3;

alias UIViewAnimationCurve = Int;

alias UIViewContentModeScaleToFill = 0;
alias UIViewContentModeScaleAspectFit = 1;
alias UIViewContentModeScaleAspectFill = 2;
alias UIViewContentModeRedraw = 3;
alias UIViewContentModeCenter = 4;
alias UIViewContentModeTop = 5;
alias UIViewContentModeBottom = 6;
alias UIViewContentModeLeft = 7;
alias UIViewContentModeRight = 8;
alias UIViewContentModeTopLeft = 9;
alias UIViewContentModeTopRight = 10;
alias UIViewContentModeBottomLeft = 11;
alias UIViewContentModeBottomRight = 12;

alias UIViewContentMode = Int;

alias UIViewAnimationTransitionNone = 0;
alias UIViewAnimationTransitionFlipFromLeft = 1;
alias UIViewAnimationTransitionFlipFromRight = 2;
alias UIViewAnimationTransitionCurlUp = 3;
alias UIViewAnimationTransitionCurlDown = 4;

alias UIViewAnimationTransition = Int;

alias UIViewAutoresizingNone = 0;
alias UIViewAutoresizingFlexibleLeftMargin = 1;
alias UIViewAutoresizingFlexibleWidth = 2;
alias UIViewAutoresizingFlexibleRightMargin = 4;
alias UIViewAutoresizingFlexibleTopMargin = 8;
alias UIViewAutoresizingFlexibleHeight = 16;
alias UIViewAutoresizingFlexibleBottomMargin = 32;

alias UIViewAutoresizing = UInt;

alias UIViewAnimationOptionLayoutSubviews = 1;
alias UIViewAnimationOptionAllowUserInteraction = 2;
alias UIViewAnimationOptionBeginFromCurrentState = 4;
alias UIViewAnimationOptionRepeat = 8;
alias UIViewAnimationOptionAutoreverse = 16;
alias UIViewAnimationOptionOverrideInheritedDuration = 32;
alias UIViewAnimationOptionOverrideInheritedCurve = 64;
alias UIViewAnimationOptionAllowAnimatedContent = 128;
alias UIViewAnimationOptionShowHideTransitionViews = 256;
alias UIViewAnimationOptionCurveEaseInOut = 0;
alias UIViewAnimationOptionCurveEaseIn = 65536;
alias UIViewAnimationOptionCurveEaseOut = 131072;
alias UIViewAnimationOptionCurveLinear = 196608;
alias UIViewAnimationOptionTransitionNone = 0;
alias UIViewAnimationOptionTransitionFlipFromLeft = 1048576;
alias UIViewAnimationOptionTransitionFlipFromRight = 2097152;
alias UIViewAnimationOptionTransitionCurlUp = 3145728;
alias UIViewAnimationOptionTransitionCurlDown = 4194304;

alias UIViewAnimationOptions = UInt;

external UIAccessibilityPostNotification(
    notification : UInt,
    argument : Id);

external UIAccessibilityIsVoiceOverRunning() : Bool;

external UIAccessibilityVoiceOverStatusChanged : NSString;

alias UIActivityIndicatorViewStyleWhiteLarge = 0;
alias UIActivityIndicatorViewStyleWhite = 1;
alias UIActivityIndicatorViewStyleGray = 2;

alias UIActivityIndicatorViewStyle = Int;

alias UIControlEventTouchDown = 1;
alias UIControlEventTouchDownRepeat = 2;
alias UIControlEventTouchDragInside = 4;
alias UIControlEventTouchDragOutside = 8;
alias UIControlEventTouchDragEnter = 16;
alias UIControlEventTouchDragExit = 32;
alias UIControlEventTouchUpInside = 64;
alias UIControlEventTouchUpOutside = 128;
alias UIControlEventTouchCancel = 256;
alias UIControlEventValueChanged = 4096;
alias UIControlEventEditingDidBegin = 65536;
alias UIControlEventEditingChanged = 131072;
alias UIControlEventEditingDidEnd = 262144;
alias UIControlEventEditingDidEndOnExit = 524288;
alias UIControlEventAllTouchEvents = 4095;
alias UIControlEventAllEditingEvents = 983040;
alias UIControlEventApplicationReserved = 251658240;
alias UIControlEventSystemReserved = 4026531840;
alias UIControlEventAllEvents = 4294967295;

alias UIControlEvents = UInt;

alias UIControlContentVerticalAlignmentCenter = 0;
alias UIControlContentVerticalAlignmentTop = 1;
alias UIControlContentVerticalAlignmentBottom = 2;
alias UIControlContentVerticalAlignmentFill = 3;

alias UIControlContentVerticalAlignment = Int;

alias UIControlContentHorizontalAlignmentCenter = 0;
alias UIControlContentHorizontalAlignmentLeft = 1;
alias UIControlContentHorizontalAlignmentRight = 2;
alias UIControlContentHorizontalAlignmentFill = 3;

alias UIControlContentHorizontalAlignment = Int;

alias UIControlStateNormal = 0;
alias UIControlStateHighlighted = 1;
alias UIControlStateDisabled = 2;
alias UIControlStateSelected = 4;
alias UIControlStateApplication = 16711680;
alias UIControlStateReserved = 4278190080;

alias UIControlState = UInt;

alias UILineBreakModeWordWrap = 0;
alias UILineBreakModeCharacterWrap = 1;
alias UILineBreakModeClip = 2;
alias UILineBreakModeHeadTruncation = 3;
alias UILineBreakModeTailTruncation = 4;
alias UILineBreakModeMiddleTruncation = 5;

alias UILineBreakMode = Int;

alias UITextAlignmentLeft = 0;
alias UITextAlignmentCenter = 1;
alias UITextAlignmentRight = 2;

alias UITextAlignment = Int;

alias UIBaselineAdjustmentAlignBaselines = 0;
alias UIBaselineAdjustmentAlignCenters = 1;
alias UIBaselineAdjustmentNone = 2;

alias UIBaselineAdjustment = Int;

alias UITextAutocapitalizationTypeNone = 0;
alias UITextAutocapitalizationTypeWords = 1;
alias UITextAutocapitalizationTypeSentences = 2;
alias UITextAutocapitalizationTypeAllCharacters = 3;

alias UITextAutocapitalizationType = Int;

alias UITextAutocorrectionTypeDefault = 0;
alias UITextAutocorrectionTypeNo = 1;
alias UITextAutocorrectionTypeYes = 2;

alias UITextAutocorrectionType = Int;

alias UIKeyboardTypeDefault = 0;
alias UIKeyboardTypeASCIICapable = 1;
alias UIKeyboardTypeNumbersAndPunctuation = 2;
alias UIKeyboardTypeURL = 3;
alias UIKeyboardTypeNumberPad = 4;
alias UIKeyboardTypePhonePad = 5;
alias UIKeyboardTypeNamePhonePad = 6;
alias UIKeyboardTypeEmailAddress = 7;
alias UIKeyboardTypeDecimalPad = 8;
alias UIKeyboardTypeAlphabet = 1;

alias UIKeyboardType = Int;

alias UIKeyboardAppearanceDefault = 0;
alias UIKeyboardAppearanceAlert = 1;

alias UIKeyboardAppearance = Int;

alias UIReturnKeyDefault = 0;
alias UIReturnKeyGo = 1;
alias UIReturnKeyGoogle = 2;
alias UIReturnKeyJoin = 3;
alias UIReturnKeyNext = 4;
alias UIReturnKeyRoute = 5;
alias UIReturnKeySearch = 6;
alias UIReturnKeySend = 7;
alias UIReturnKeyYahoo = 8;
alias UIReturnKeyDone = 9;
alias UIReturnKeyEmergencyCall = 10;

alias UIReturnKeyType = Int;

alias UITextBorderStyleNone = 0;
alias UITextBorderStyleLine = 1;
alias UITextBorderStyleBezel = 2;
alias UITextBorderStyleRoundedRect = 3;

alias UITextBorderStyle = Int;

alias UITextFieldViewModeNever = 0;
alias UITextFieldViewModeWhileEditing = 1;
alias UITextFieldViewModeUnlessEditing = 2;
alias UITextFieldViewModeAlways = 3;

alias UITextFieldViewMode = Int;

external UITextFieldTextDidBeginEditingNotification : NSString;

external UITextFieldTextDidEndEditingNotification : NSString;

external UITextFieldTextDidChangeNotification : NSString;

alias UIActionSheetStyleAutomatic = 4294967295;
alias UIActionSheetStyleDefault = 0;
alias UIActionSheetStyleBlackTranslucent = 2;
alias UIActionSheetStyleBlackOpaque = 1;

alias UIActionSheetStyle = Int;

alias UIDeviceOrientationUnknown = 0;
alias UIDeviceOrientationPortrait = 1;
alias UIDeviceOrientationPortraitUpsideDown = 2;
alias UIDeviceOrientationLandscapeLeft = 3;
alias UIDeviceOrientationLandscapeRight = 4;
alias UIDeviceOrientationFaceUp = 5;
alias UIDeviceOrientationFaceDown = 6;

alias UIDeviceOrientation = Int;

alias UIDeviceBatteryStateUnknown = 0;
alias UIDeviceBatteryStateUnplugged = 1;
alias UIDeviceBatteryStateCharging = 2;
alias UIDeviceBatteryStateFull = 3;

alias UIDeviceBatteryState = Int;

alias UIUserInterfaceIdiomPhone = 0;
alias UIUserInterfaceIdiomPad = 1;

alias UIUserInterfaceIdiom = Int;

external UIDeviceOrientationDidChangeNotification : NSString;

external UIDeviceBatteryStateDidChangeNotification : NSString;

external UIDeviceBatteryLevelDidChangeNotification : NSString;

external UIDeviceProximityStateDidChangeNotification : NSString;

alias UIStatusBarStyleDefault = 0;
alias UIStatusBarStyleBlackTranslucent = 1;
alias UIStatusBarStyleBlackOpaque = 2;

alias UIStatusBarStyle = Int;

alias UIStatusBarAnimationNone = 0;
alias UIStatusBarAnimationFade = 1;
alias UIStatusBarAnimationSlide = 2;

alias UIStatusBarAnimation = Int;

alias UIInterfaceOrientationPortrait = 1;
alias UIInterfaceOrientationPortraitUpsideDown = 2;
alias UIInterfaceOrientationLandscapeLeft = 4;
alias UIInterfaceOrientationLandscapeRight = 3;

alias UIInterfaceOrientation = Int;

alias UIRemoteNotificationTypeNone = 0;
alias UIRemoteNotificationTypeBadge = 1;
alias UIRemoteNotificationTypeSound = 2;
alias UIRemoteNotificationTypeAlert = 4;

alias UIRemoteNotificationType = Int;

alias UIApplicationStateActive = 0;
alias UIApplicationStateInactive = 1;
alias UIApplicationStateBackground = 2;

alias UIApplicationState = Int;

alias UIBackgroundTaskIdentifier = UInt;

external UIBackgroundTaskInvalid : UInt;

external UIMinimumKeepAliveTimeout : Double;

external UIApplicationMain(
    argc : Int,
    argv : Pointer[Pointer[CChar]],
    principalClassName : NSString,
    delegateClassName : NSString) : Int;

external UITrackingRunLoopMode : NSString;

external UIApplicationDidEnterBackgroundNotification : NSString;

external UIApplicationWillEnterForegroundNotification : NSString;

external UIApplicationDidFinishLaunchingNotification : NSString;

external UIApplicationDidBecomeActiveNotification : NSString;

external UIApplicationWillResignActiveNotification : NSString;

external UIApplicationDidReceiveMemoryWarningNotification : NSString;

external UIApplicationWillTerminateNotification : NSString;

external UIApplicationSignificantTimeChangeNotification : NSString;

external UIApplicationWillChangeStatusBarOrientationNotification : NSString;

external UIApplicationDidChangeStatusBarOrientationNotification : NSString;

external UIApplicationStatusBarOrientationUserInfoKey : NSString;

external UIApplicationWillChangeStatusBarFrameNotification : NSString;

external UIApplicationDidChangeStatusBarFrameNotification : NSString;

external UIApplicationStatusBarFrameUserInfoKey : NSString;

external UIApplicationLaunchOptionsURLKey : NSString;

external UIApplicationLaunchOptionsSourceApplicationKey : NSString;

external UIApplicationLaunchOptionsRemoteNotificationKey : NSString;

external UIApplicationLaunchOptionsLocalNotificationKey : NSString;

external UIApplicationLaunchOptionsAnnotationKey : NSString;

external UIApplicationProtectedDataWillBecomeUnavailable : NSString;

external UIApplicationProtectedDataDidBecomeAvailable : NSString;

external UIApplicationLaunchOptionsLocationKey : NSString;

record Struct_UIEdgeInsets (
    top : Float,
    left : Float,
    bottom : Float,
    right : Float,
);

alias UIEdgeInsets = Struct_UIEdgeInsets;

external UIEdgeInsetsZero : UIEdgeInsets;

external NSStringFromCGPoint(
    point : CGPoint) : NSString;

external NSStringFromCGSize(
    size : CGSize) : NSString;

external NSStringFromCGRect(
    rect : CGRect) : NSString;

external NSStringFromCGAffineTransform(
    transform : CGAffineTransform) : NSString;

external NSStringFromUIEdgeInsets(
    insets : UIEdgeInsets) : NSString;

external CGPointFromString(
    string : NSString) : CGPoint;

external CGSizeFromString(
    string : NSString) : CGSize;

external CGRectFromString(
    string : NSString) : CGRect;

external CGAffineTransformFromString(
    string : NSString) : CGAffineTransform;

external UIEdgeInsetsFromString(
    string : NSString) : UIEdgeInsets;

alias UIBarButtonItemStylePlain = 0;
alias UIBarButtonItemStyleBordered = 1;
alias UIBarButtonItemStyleDone = 2;

alias UIBarButtonItemStyle = Int;

alias UIBarButtonSystemItemDone = 0;
alias UIBarButtonSystemItemCancel = 1;
alias UIBarButtonSystemItemEdit = 2;
alias UIBarButtonSystemItemSave = 3;
alias UIBarButtonSystemItemAdd = 4;
alias UIBarButtonSystemItemFlexibleSpace = 5;
alias UIBarButtonSystemItemFixedSpace = 6;
alias UIBarButtonSystemItemCompose = 7;
alias UIBarButtonSystemItemReply = 8;
alias UIBarButtonSystemItemAction = 9;
alias UIBarButtonSystemItemOrganize = 10;
alias UIBarButtonSystemItemBookmarks = 11;
alias UIBarButtonSystemItemSearch = 12;
alias UIBarButtonSystemItemRefresh = 13;
alias UIBarButtonSystemItemStop = 14;
alias UIBarButtonSystemItemCamera = 15;
alias UIBarButtonSystemItemTrash = 16;
alias UIBarButtonSystemItemPlay = 17;
alias UIBarButtonSystemItemPause = 18;
alias UIBarButtonSystemItemRewind = 19;
alias UIBarButtonSystemItemFastForward = 20;
alias UIBarButtonSystemItemUndo = 21;
alias UIBarButtonSystemItemRedo = 22;
alias UIBarButtonSystemItemPageCurl = 23;

alias UIBarButtonSystemItem = Int;

alias UIRectCornerTopLeft = 1;
alias UIRectCornerTopRight = 2;
alias UIRectCornerBottomLeft = 4;
alias UIRectCornerBottomRight = 8;
alias UIRectCornerAllCorners = 4294967295;

alias UIRectCorner = UInt;

alias UIButtonTypeCustom = 0;
alias UIButtonTypeRoundedRect = 1;
alias UIButtonTypeDetailDisclosure = 2;
alias UIButtonTypeInfoLight = 3;
alias UIButtonTypeInfoDark = 4;
alias UIButtonTypeContactAdd = 5;

alias UIButtonType = Int;

alias UIDataDetectorTypePhoneNumber = 1;
alias UIDataDetectorTypeLink = 2;
alias UIDataDetectorTypeAddress = 4;
alias UIDataDetectorTypeCalendarEvent = 8;
alias UIDataDetectorTypeNone = 0;
alias UIDataDetectorTypeAll = 4294967295;

alias UIDataDetectorTypes = UInt;

alias UIDatePickerModeTime = 0;
alias UIDatePickerModeDate = 1;
alias UIDatePickerModeDateAndTime = 2;
alias UIDatePickerModeCountDownTimer = 3;

alias UIDatePickerMode = Int;

alias UIModalTransitionStyleCoverVertical = 0;
alias UIModalTransitionStyleFlipHorizontal = 1;
alias UIModalTransitionStyleCrossDissolve = 2;
alias UIModalTransitionStylePartialCurl = 3;

alias UIModalTransitionStyle = Int;

alias UIModalPresentationFullScreen = 0;
alias UIModalPresentationPageSheet = 1;
alias UIModalPresentationFormSheet = 2;
alias UIModalPresentationCurrentContext = 3;

alias UIModalPresentationStyle = Int;

alias UIGestureRecognizerStatePossible = 0;
alias UIGestureRecognizerStateBegan = 1;
alias UIGestureRecognizerStateChanged = 2;
alias UIGestureRecognizerStateEnded = 3;
alias UIGestureRecognizerStateCancelled = 4;
alias UIGestureRecognizerStateFailed = 5;
alias UIGestureRecognizerStateRecognized = 3;

alias UIGestureRecognizerState = Int;

external UIGraphicsGetCurrentContext() : CGContextRef;

external UIGraphicsPushContext(
    context : CGContextRef);

external UIGraphicsPopContext();

external UIRectFillUsingBlendMode(
    rect : CGRect,
    blendMode : CGBlendMode);

external UIRectFill(
    rect : CGRect);

external UIRectFrameUsingBlendMode(
    rect : CGRect,
    blendMode : CGBlendMode);

external UIRectFrame(
    rect : CGRect);

external UIRectClip(
    rect : CGRect);

external UIGraphicsBeginImageContext(
    size : CGSize);

external UIGraphicsBeginImageContextWithOptions(
    size : CGSize,
    opaque : Bool,
    scale : Float);

external UIGraphicsGetImageFromCurrentImageContext() : UIImage;

external UIGraphicsEndImageContext();

external UIGraphicsBeginPDFContextToFile(
    path : NSString,
    bounds : CGRect,
    documentInfo : NSDictionary) : Bool;

external UIGraphicsBeginPDFContextToData(
    data : NSMutableData,
    bounds : CGRect,
    documentInfo : NSDictionary);

external UIGraphicsEndPDFContext();

external UIGraphicsBeginPDFPage();

external UIGraphicsBeginPDFPageWithInfo(
    bounds : CGRect,
    pageInfo : NSDictionary);

external UIGraphicsGetPDFContextBounds() : CGRect;

external UIGraphicsSetPDFContextURLForRect(
    url : NSURL,
    rect : CGRect);

external UIGraphicsAddPDFContextDestinationAtPoint(
    name : NSString,
    point : CGPoint);

external UIGraphicsSetPDFContextDestinationForRect(
    name : NSString,
    rect : CGRect);

alias UIImageOrientationUp = 0;
alias UIImageOrientationDown = 1;
alias UIImageOrientationLeft = 2;
alias UIImageOrientationRight = 3;
alias UIImageOrientationUpMirrored = 4;
alias UIImageOrientationDownMirrored = 5;
alias UIImageOrientationLeftMirrored = 6;
alias UIImageOrientationRightMirrored = 7;

alias UIImageOrientation = Int;

external UIImagePNGRepresentation(
    image : UIImage) : NSData;

external UIImageJPEGRepresentation(
    image : UIImage,
    compressionQuality : Float) : NSData;

external UINavigationControllerHideShowBarDuration : Float;

alias UIImagePickerControllerSourceTypePhotoLibrary = 0;
alias UIImagePickerControllerSourceTypeCamera = 1;
alias UIImagePickerControllerSourceTypeSavedPhotosAlbum = 2;

alias UIImagePickerControllerSourceType = UInt;

alias UIImagePickerControllerQualityTypeHigh = 0;
alias UIImagePickerControllerQualityType640x480 = 3;
alias UIImagePickerControllerQualityTypeMedium = 1;
alias UIImagePickerControllerQualityTypeLow = 2;

alias UIImagePickerControllerQualityType = UInt;

alias UIImagePickerControllerCameraCaptureModePhoto = 0;
alias UIImagePickerControllerCameraCaptureModeVideo = 1;

alias UIImagePickerControllerCameraCaptureMode = UInt;

alias UIImagePickerControllerCameraDeviceRear = 0;
alias UIImagePickerControllerCameraDeviceFront = 1;

alias UIImagePickerControllerCameraDevice = UInt;

alias UIImagePickerControllerCameraFlashModeOff = 4294967295;
alias UIImagePickerControllerCameraFlashModeAuto = 0;
alias UIImagePickerControllerCameraFlashModeOn = 1;

alias UIImagePickerControllerCameraFlashMode = Int;

external UIImagePickerControllerMediaType : NSString;

external UIImagePickerControllerOriginalImage : NSString;

external UIImagePickerControllerEditedImage : NSString;

external UIImagePickerControllerCropRect : NSString;

external UIImagePickerControllerMediaURL : NSString;

external UIImagePickerControllerReferenceURL : NSString;

external UIImagePickerControllerMediaMetadata : NSString;

external UIImageWriteToSavedPhotosAlbum(
    image : UIImage,
    completionTarget : Id,
    completionSelector : SelectorHandle,
    contextInfo : RawPointer);

external UIVideoAtPathIsCompatibleWithSavedPhotosAlbum(
    videoPath : NSString) : Bool;

external UISaveVideoAtPathToSavedPhotosAlbum(
    videoPath : NSString,
    completionTarget : Id,
    completionSelector : SelectorHandle,
    contextInfo : RawPointer);

external UILocalNotificationDefaultSoundName : NSString;

alias UIMenuControllerArrowDefault = 0;
alias UIMenuControllerArrowUp = 1;
alias UIMenuControllerArrowDown = 2;
alias UIMenuControllerArrowLeft = 3;
alias UIMenuControllerArrowRight = 4;

alias UIMenuControllerArrowDirection = Int;

external UIMenuControllerWillShowMenuNotification : NSString;

external UIMenuControllerDidShowMenuNotification : NSString;

external UIMenuControllerWillHideMenuNotification : NSString;

external UIMenuControllerDidHideMenuNotification : NSString;

external UIMenuControllerMenuFrameDidChangeNotification : NSString;

external UINibExternalObjects : NSString;

external UINibProxiedObjectsKey : NSString;

external UIPasteboardNameGeneral : NSString;

external UIPasteboardNameFind : NSString;

external UIPasteboardChangedNotification : NSString;

external UIPasteboardChangedTypesAddedKey : NSString;

external UIPasteboardChangedTypesRemovedKey : NSString;

external UIPasteboardRemovedNotification : NSString;

external UIPasteboardTypeListString : NSArray;

external UIPasteboardTypeListURL : NSArray;

external UIPasteboardTypeListImage : NSArray;

external UIPasteboardTypeListColor : NSArray;

alias UIPopoverArrowDirectionUp = 1;
alias UIPopoverArrowDirectionDown = 2;
alias UIPopoverArrowDirectionLeft = 4;
alias UIPopoverArrowDirectionRight = 8;
alias UIPopoverArrowDirectionAny = 15;
alias UIPopoverArrowDirectionUnknown = 4294967295;

alias UIPopoverArrowDirection = UInt;

alias UIProgressViewStyleDefault = 0;
alias UIProgressViewStyleBar = 1;

alias UIProgressViewStyle = Int;

external UIScreenDidConnectNotification : NSString;

external UIScreenDidDisconnectNotification : NSString;

external UIScreenModeDidChangeNotification : NSString;

alias UIScrollViewIndicatorStyleDefault = 0;
alias UIScrollViewIndicatorStyleBlack = 1;
alias UIScrollViewIndicatorStyleWhite = 2;

alias UIScrollViewIndicatorStyle = Int;

external UIScrollViewDecelerationRateNormal : Float;

external UIScrollViewDecelerationRateFast : Float;

alias UITableViewCellStyleDefault = 0;
alias UITableViewCellStyleValue1 = 1;
alias UITableViewCellStyleValue2 = 2;
alias UITableViewCellStyleSubtitle = 3;

alias UITableViewCellStyle = Int;

alias UITableViewCellSeparatorStyleNone = 0;
alias UITableViewCellSeparatorStyleSingleLine = 1;
alias UITableViewCellSeparatorStyleSingleLineEtched = 2;

alias UITableViewCellSeparatorStyle = Int;

alias UITableViewCellSelectionStyleNone = 0;
alias UITableViewCellSelectionStyleBlue = 1;
alias UITableViewCellSelectionStyleGray = 2;

alias UITableViewCellSelectionStyle = Int;

alias UITableViewCellEditingStyleNone = 0;
alias UITableViewCellEditingStyleDelete = 1;
alias UITableViewCellEditingStyleInsert = 2;

alias UITableViewCellEditingStyle = Int;

alias UITableViewCellAccessoryNone = 0;
alias UITableViewCellAccessoryDisclosureIndicator = 1;
alias UITableViewCellAccessoryDetailDisclosureButton = 2;
alias UITableViewCellAccessoryCheckmark = 3;

alias UITableViewCellAccessoryType = Int;

alias UITableViewCellStateDefaultMask = 0;
alias UITableViewCellStateShowingEditControlMask = 1;
alias UITableViewCellStateShowingDeleteConfirmationMask = 2;

alias UITableViewCellStateMask = UInt;

alias UITableViewStylePlain = 0;
alias UITableViewStyleGrouped = 1;

alias UITableViewStyle = Int;

alias UITableViewScrollPositionNone = 0;
alias UITableViewScrollPositionTop = 1;
alias UITableViewScrollPositionMiddle = 2;
alias UITableViewScrollPositionBottom = 3;

alias UITableViewScrollPosition = Int;

alias UITableViewRowAnimationFade = 0;
alias UITableViewRowAnimationRight = 1;
alias UITableViewRowAnimationLeft = 2;
alias UITableViewRowAnimationTop = 3;
alias UITableViewRowAnimationBottom = 4;
alias UITableViewRowAnimationNone = 5;
alias UITableViewRowAnimationMiddle = 6;

alias UITableViewRowAnimation = Int;

external UITableViewIndexSearch : NSString;

external UITableViewSelectionDidChangeNotification : NSString;

alias UISegmentedControlStylePlain = 0;
alias UISegmentedControlStyleBordered = 1;
alias UISegmentedControlStyleBar = 2;
alias UISegmentedControlStyleBezeled = 3;

alias UISegmentedControlStyle = Int;

alias UISegmentedControlNoSegment = 4294967295;

alias UISwipeGestureRecognizerDirectionRight = 1;
alias UISwipeGestureRecognizerDirectionLeft = 2;
alias UISwipeGestureRecognizerDirectionUp = 4;
alias UISwipeGestureRecognizerDirectionDown = 8;

alias UISwipeGestureRecognizerDirection = Int;

alias UITabBarSystemItemMore = 0;
alias UITabBarSystemItemFavorites = 1;
alias UITabBarSystemItemFeatured = 2;
alias UITabBarSystemItemTopRated = 3;
alias UITabBarSystemItemRecents = 4;
alias UITabBarSystemItemContacts = 5;
alias UITabBarSystemItemHistory = 6;
alias UITabBarSystemItemBookmarks = 7;
alias UITabBarSystemItemSearch = 8;
alias UITabBarSystemItemDownloads = 9;
alias UITabBarSystemItemMostRecent = 10;
alias UITabBarSystemItemMostViewed = 11;

alias UITabBarSystemItem = Int;

alias UITextStorageDirectionForward = 0;
alias UITextStorageDirectionBackward = 1;

alias UITextStorageDirection = Int;

alias UITextLayoutDirectionRight = 2;
alias UITextLayoutDirectionLeft = 3;
alias UITextLayoutDirectionUp = 4;
alias UITextLayoutDirectionDown = 5;

alias UITextLayoutDirection = Int;

alias UITextDirection = Int;

alias UITextWritingDirectionNatural = 4294967295;
alias UITextWritingDirectionLeftToRight = 0;
alias UITextWritingDirectionRightToLeft = 1;

alias UITextWritingDirection = Int;

alias UITextGranularityCharacter = 0;
alias UITextGranularityWord = 1;
alias UITextGranularitySentence = 2;
alias UITextGranularityParagraph = 3;
alias UITextGranularityLine = 4;
alias UITextGranularityDocument = 5;

alias UITextGranularity = Int;

external UITextInputTextBackgroundColorKey : NSString;

external UITextInputTextColorKey : NSString;

external UITextInputTextFontKey : NSString;

external UITextViewTextDidBeginEditingNotification : NSString;

external UITextViewTextDidChangeNotification : NSString;

external UITextViewTextDidEndEditingNotification : NSString;

alias UITouchPhaseBegan = 0;
alias UITouchPhaseMoved = 1;
alias UITouchPhaseStationary = 2;
alias UITouchPhaseEnded = 3;
alias UITouchPhaseCancelled = 4;

alias UITouchPhase = Int;

alias UIWebViewNavigationTypeLinkClicked = 0;
alias UIWebViewNavigationTypeFormSubmitted = 1;
alias UIWebViewNavigationTypeBackForward = 2;
alias UIWebViewNavigationTypeReload = 3;
alias UIWebViewNavigationTypeFormResubmitted = 4;
alias UIWebViewNavigationTypeOther = 5;

alias UIWebViewNavigationType = UInt;

alias UIWindowLevel = Float;

external UIWindowLevelNormal : Float;

external UIWindowLevelAlert : Float;

external UIWindowLevelStatusBar : Float;

external UIWindowDidBecomeVisibleNotification : NSString;

external UIWindowDidBecomeHiddenNotification : NSString;

external UIWindowDidBecomeKeyNotification : NSString;

external UIWindowDidResignKeyNotification : NSString;

external UIKeyboardWillShowNotification : NSString;

external UIKeyboardDidShowNotification : NSString;

external UIKeyboardWillHideNotification : NSString;

external UIKeyboardDidHideNotification : NSString;

external UIKeyboardFrameBeginUserInfoKey : NSString;

external UIKeyboardFrameEndUserInfoKey : NSString;

external UIKeyboardAnimationDurationUserInfoKey : NSString;

external UIKeyboardAnimationCurveUserInfoKey : NSString;

external UIKeyboardCenterBeginUserInfoKey : NSString;

external UIKeyboardCenterEndUserInfoKey : NSString;

external UIKeyboardBoundsUserInfoKey : NSString;
