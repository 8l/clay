// Automatically generated by clay-bindgen
// language: objective-c

import cocoa.objc.*;

import core.libc.*;
import cocoa.corefoundation.*;
import cocoa.applicationservices.*;
import cocoa.foundation.*;
import cocoa.quartzcore.*;

private alias OpaquePointer = RawPointer;
private alias UnknownType = Int;
private alias AUnionType = Int;


overload selector("AMSymbol") = NSString;
overload selector("CGAffineTransformValue") = CGAffineTransform;
overload selector("CGColor") = CGColorRef;
overload selector("CGImage") = CGImageRef;
overload selector("CGPath") = CGPathRef;
overload selector("CGPointValue") = CGPoint;
overload selector("CGRectValue") = CGRect;
overload selector("CGSizeValue") = CGSize;
overload selector("HTTPBody") = NSData;
overload selector("HTTPBodyStream") = NSInputStream;
overload selector("HTTPMethod") = NSString;
overload selector("HTTPShouldHandleCookies") = Bool;
overload selector("HTTPShouldUsePipelining") = Bool;
overload selector("ISOCountryCodes") = NSArray;
overload selector("ISOCurrencyCodes") = NSArray;
overload selector("ISOLanguageCodes") = NSArray;
overload selector("MIMEType") = NSString;
overload selector("PMSymbol") = NSString;
overload selector("TXTRecordData") = NSData;
overload selector("UIEdgeInsetsValue") = UIEdgeInsets;
overload selector("URL") = NSURL;
overload selector("URLByAppendingPathComponent:") = NSURL, NSString;
overload selector("URLByAppendingPathExtension:") = NSURL, NSString;
overload selector("URLByDeletingLastPathComponent") = NSURL;
overload selector("URLByDeletingPathExtension") = NSURL;
overload selector("URLByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:") = Id, NSData, UInt, NSURL, Pointer[Bool], Pointer[NSError];
overload selector("URLByResolvingSymlinksInPath") = NSURL;
overload selector("URLByStandardizingPath") = NSURL;
overload selector("URLForAuxiliaryExecutable:") = NSURL, NSString;
overload selector("URLForDirectory:inDomain:appropriateForURL:create:error:") = NSURL, UInt, UInt, NSURL, Bool, Pointer[NSError];
overload selector("URLForKey:") = NSURL, NSString;
overload selector("URLForResource:withExtension:") = NSURL, NSString, NSString;
overload selector("URLForResource:withExtension:subdirectory:") = NSURL, NSString, NSString, NSString;
overload selector("URLForResource:withExtension:subdirectory:inBundleWithURL:") = NSURL, NSString, NSString, NSString, NSURL;
overload selector("URLForResource:withExtension:subdirectory:localization:") = NSURL, NSString, NSString, NSString, NSString;
overload selector("URLProtocol:cachedResponseIsValid:") = Void, NSURLProtocol, NSCachedURLResponse;
overload selector("URLProtocol:didCancelAuthenticationChallenge:") = Void, NSURLProtocol, NSURLAuthenticationChallenge;
overload selector("URLProtocol:didFailWithError:") = Void, NSURLProtocol, NSError;
overload selector("URLProtocol:didLoadData:") = Void, NSURLProtocol, NSData;
overload selector("URLProtocol:didReceiveAuthenticationChallenge:") = Void, NSURLProtocol, NSURLAuthenticationChallenge;
overload selector("URLProtocol:didReceiveResponse:cacheStoragePolicy:") = Void, NSURLProtocol, NSURLResponse, UInt;
overload selector("URLProtocol:wasRedirectedToRequest:redirectResponse:") = Void, NSURLProtocol, NSURLRequest, NSURLResponse;
overload selector("URLProtocolDidFinishLoading:") = Void, NSURLProtocol;
overload selector("URLWithString:") = Id, NSString;
overload selector("URLWithString:relativeToURL:") = Id, NSString, NSURL;
overload selector("URLs") = NSArray;
overload selector("URLsForDirectory:inDomains:") = NSArray, UInt, UInt;
overload selector("URLsForResourcesWithExtension:subdirectory:") = NSArray, NSString, NSString;
overload selector("URLsForResourcesWithExtension:subdirectory:inBundleWithURL:") = NSArray, NSString, NSString, NSURL;
overload selector("URLsForResourcesWithExtension:subdirectory:localization:") = NSArray, NSString, NSString, NSString;
overload selector("UTF8String") = Pointer[CChar];
overload selector("UTI") = NSString;
overload selector("abbreviation") = NSString;
overload selector("abbreviationDictionary") = NSDictionary;
overload selector("abbreviationForDate:") = NSString, NSDate;
overload selector("abortParsing") = Void;
overload selector("absoluteString") = NSString;
overload selector("absoluteURL") = NSURL;
overload selector("accelerometer:didAccelerate:") = Void, UIAccelerometer, UIAcceleration;
overload selector("acceptConnectionInBackgroundAndNotify") = Void;
overload selector("acceptConnectionInBackgroundAndNotifyForModes:") = Void, NSArray;
overload selector("acceptInputForMode:beforeDate:") = Void, NSString, NSDate;
overload selector("accessInstanceVariablesDirectly") = Bool;
overload selector("accessibilityContainer") = Id;
overload selector("accessibilityDecrement") = Void;
overload selector("accessibilityElementAtIndex:") = Id, Int;
overload selector("accessibilityElementCount") = Int;
overload selector("accessibilityElementDidBecomeFocused") = Void;
overload selector("accessibilityElementDidLoseFocus") = Void;
overload selector("accessibilityElementIsFocused") = Bool;
overload selector("accessibilityFrame") = CGRect;
overload selector("accessibilityHint") = NSString;
overload selector("accessibilityIncrement") = Void;
overload selector("accessibilityLabel") = NSString;
overload selector("accessibilityLanguage") = NSString;
overload selector("accessibilityTraits") = UInt64;
overload selector("accessibilityValue") = NSString;
overload selector("accessoryAction") = SelectorHandle;
overload selector("accessoryType") = UITableViewCellAccessoryType;
overload selector("accessoryView") = UIView;
overload selector("action") = SelectorHandle;
overload selector("actionSheet:clickedButtonAtIndex:") = Void, UIActionSheet, Int;
overload selector("actionSheet:didDismissWithButtonIndex:") = Void, UIActionSheet, Int;
overload selector("actionSheet:willDismissWithButtonIndex:") = Void, UIActionSheet, Int;
overload selector("actionSheetCancel:") = Void, UIActionSheet;
overload selector("actionSheetStyle") = UIActionSheetStyle;
overload selector("actionsForTarget:forControlEvent:") = NSArray, Id, UInt;
overload selector("activeProcessorCount") = UInt;
overload selector("activityIndicatorViewStyle") = UIActivityIndicatorViewStyle;
overload selector("addArcWithCenter:radius:startAngle:endAngle:clockwise:") = Void, CGPoint, Float, Float, Float, Bool;
overload selector("addAttribute:value:range:") = Void, NSString, Id, NSRange;
overload selector("addAttributes:range:") = Void, NSDictionary, NSRange;
overload selector("addButtonWithTitle:") = Int, NSString;
overload selector("addCharactersInRange:") = Void, NSRange;
overload selector("addCharactersInString:") = Void, NSString;
overload selector("addClip") = Void;
overload selector("addCurveToPoint:controlPoint1:controlPoint2:") = Void, CGPoint, CGPoint, CGPoint;
overload selector("addDependency:") = Void, NSOperation;
overload selector("addEntriesFromDictionary:") = Void, NSDictionary;
overload selector("addExecutionBlock:") = Void, UnknownType;
overload selector("addFileWithPath:") = NSString, NSString;
overload selector("addFileWrapper:") = NSString, NSFileWrapper;
overload selector("addGestureRecognizer:") = Void, UIGestureRecognizer;
overload selector("addIndex:") = Void, UInt;
overload selector("addIndexes:") = Void, NSIndexSet;
overload selector("addIndexesInRange:") = Void, NSRange;
overload selector("addItems:") = Void, NSArray;
overload selector("addLineToPoint:") = Void, CGPoint;
overload selector("addObject:") = Void, Id;
overload selector("addObjectsFromArray:") = Void, NSArray;
overload selector("addObserver:forKeyPath:options:context:") = Void, NSObject, NSString, UInt, RawPointer;
overload selector("addObserver:selector:name:object:") = Void, Id, SelectorHandle, NSString, Id;
overload selector("addObserver:toObjectsAtIndexes:forKeyPath:options:context:") = Void, NSObject, NSIndexSet, NSString, UInt, RawPointer;
overload selector("addObserverForName:object:queue:usingBlock:") = Id, NSString, Id, NSOperationQueue, UnknownType;
overload selector("addOperation:") = Void, NSOperation;
overload selector("addOperationWithBlock:") = Void, UnknownType;
overload selector("addOperations:waitUntilFinished:") = Void, NSArray, Bool;
overload selector("addPort:forMode:") = Void, NSPort, NSString;
overload selector("addQuadCurveToPoint:controlPoint:") = Void, CGPoint, CGPoint;
overload selector("addRegularFileWithContents:preferredFilename:") = NSString, NSData, NSString;
overload selector("addSubview:") = Void, UIView;
overload selector("addSuiteNamed:") = Void, NSString;
overload selector("addSymbolicLinkWithDestination:preferredFilename:") = NSString, NSString, NSString;
overload selector("addTarget:action:") = Void, Id, SelectorHandle;
overload selector("addTarget:action:forControlEvents:") = Void, Id, SelectorHandle, UInt;
overload selector("addTimeInterval:") = Id, Double;
overload selector("addTimer:forMode:") = Void, NSTimer, NSString;
overload selector("addValue:forHTTPHeaderField:") = Void, NSString, NSString;
overload selector("addressCheckingResultWithRange:components:") = NSTextCheckingResult, NSRange, NSDictionary;
overload selector("addressComponents") = NSDictionary;
overload selector("addresses") = NSArray;
overload selector("adjustsFontSizeToFitWidth") = Bool;
overload selector("adjustsImageWhenDisabled") = Bool;
overload selector("adjustsImageWhenHighlighted") = Bool;
overload selector("alertAction") = NSString;
overload selector("alertBody") = NSString;
overload selector("alertLaunchImage") = NSString;
overload selector("alertView:clickedButtonAtIndex:") = Void, UIAlertView, Int;
overload selector("alertView:didDismissWithButtonIndex:") = Void, UIAlertView, Int;
overload selector("alertView:willDismissWithButtonIndex:") = Void, UIAlertView, Int;
overload selector("alertViewCancel:") = Void, UIAlertView;
overload selector("allBundles") = NSArray;
overload selector("allControlEvents") = UInt;
overload selector("allCredentials") = NSDictionary;
overload selector("allFrameworks") = NSArray;
overload selector("allHTTPHeaderFields") = NSDictionary;
overload selector("allHeaderFields") = NSDictionary;
overload selector("allKeys") = NSArray;
overload selector("allKeysForObject:") = NSArray, Id;
overload selector("allLanguages") = NSArray;
overload selector("allObjects") = NSArray;
overload selector("allScripts") = NSArray;
overload selector("allTargets") = NSSet;
overload selector("allTouches") = NSSet;
overload selector("allValues") = NSArray;
overload selector("alloc") = Id;
overload selector("allocWithZone:") = Id, Pointer[NSZone];
overload selector("allowableMovement") = Float;
overload selector("allowsEditing") = Bool;
overload selector("allowsFloats") = Bool;
overload selector("allowsImageEditing") = Bool;
overload selector("allowsInlineMediaPlayback") = Bool;
overload selector("allowsKeyedCoding") = Bool;
overload selector("allowsReverseTransformation") = Bool;
overload selector("allowsSelection") = Bool;
overload selector("allowsSelectionDuringEditing") = Bool;
overload selector("alpha") = Float;
overload selector("alphanumericCharacterSet") = Id;
overload selector("alwaysBounceHorizontal") = Bool;
overload selector("alwaysBounceVertical") = Bool;
overload selector("alwaysShowsDecimalSeparator") = Bool;
overload selector("andPredicateWithSubpredicates:") = NSPredicate, NSArray;
overload selector("animateWithDuration:animations:") = Void, Double, UnknownType;
overload selector("animateWithDuration:animations:completion:") = Void, Double, UnknownType, UnknownType;
overload selector("animateWithDuration:delay:options:animations:completion:") = Void, Double, Double, UInt, UnknownType, UnknownType;
overload selector("animationDuration") = Double;
overload selector("animationImages") = NSArray;
overload selector("animationRepeatCount") = Int;
overload selector("annotation") = Id;
overload selector("anyObject") = Id;
overload selector("appendAttributedString:") = Void, NSAttributedString;
overload selector("appendBytes:length:") = Void, RawPointer, UInt;
overload selector("appendData:") = Void, NSData;
overload varargSelector("appendFormat:") = Void, NSString;
overload selector("appendPath:") = Void, UIBezierPath;
overload selector("appendString:") = Void, NSString;
overload selector("application:didChangeStatusBarFrame:") = Void, UIApplication, CGRect;
overload selector("application:didChangeStatusBarOrientation:") = Void, UIApplication, UIInterfaceOrientation;
overload selector("application:didFailToRegisterForRemoteNotificationsWithError:") = Void, UIApplication, NSError;
overload selector("application:didFinishLaunchingWithOptions:") = Bool, UIApplication, NSDictionary;
overload selector("application:didReceiveLocalNotification:") = Void, UIApplication, UILocalNotification;
overload selector("application:didReceiveRemoteNotification:") = Void, UIApplication, NSDictionary;
overload selector("application:didRegisterForRemoteNotificationsWithDeviceToken:") = Void, UIApplication, NSData;
overload selector("application:handleOpenURL:") = Bool, UIApplication, NSURL;
overload selector("application:willChangeStatusBarFrame:") = Void, UIApplication, CGRect;
overload selector("application:willChangeStatusBarOrientation:duration:") = Void, UIApplication, UIInterfaceOrientation, Double;
overload selector("applicationDidBecomeActive:") = Void, UIApplication;
overload selector("applicationDidEnterBackground:") = Void, UIApplication;
overload selector("applicationDidFinishLaunching:") = Void, UIApplication;
overload selector("applicationDidReceiveMemoryWarning:") = Void, UIApplication;
overload selector("applicationFrame") = CGRect;
overload selector("applicationIconBadgeNumber") = Int;
overload selector("applicationProtectedDataDidBecomeAvailable:") = Void, UIApplication;
overload selector("applicationProtectedDataWillBecomeUnavailable:") = Void, UIApplication;
overload selector("applicationSignificantTimeChange:") = Void, UIApplication;
overload selector("applicationState") = UIApplicationState;
overload selector("applicationSupportsShakeToEdit") = Bool;
overload selector("applicationWillEnterForeground:") = Void, UIApplication;
overload selector("applicationWillResignActive:") = Void, UIApplication;
overload selector("applicationWillTerminate:") = Void, UIApplication;
overload selector("applyTransform:") = Void, CGAffineTransform;
overload selector("archiveRootObject:toFile:") = Bool, Id, NSString;
overload selector("archivedDataWithRootObject:") = NSData, Id;
overload selector("archiver:didEncodeObject:") = Void, NSKeyedArchiver, Id;
overload selector("archiver:willEncodeObject:") = Id, NSKeyedArchiver, Id;
overload selector("archiver:willReplaceObject:withObject:") = Void, NSKeyedArchiver, Id, Id;
overload selector("archiverDidFinish:") = Void, NSKeyedArchiver;
overload selector("archiverWillFinish:") = Void, NSKeyedArchiver;
overload selector("areAnimationsEnabled") = Bool;
overload selector("arguments") = NSArray;
overload selector("argumentsRetained") = Bool;
overload selector("array") = Id;
overload selector("arrayByAddingObject:") = NSArray, Id;
overload selector("arrayByAddingObjectsFromArray:") = NSArray, NSArray;
overload selector("arrayForKey:") = NSArray, NSString;
overload selector("arrayWithArray:") = Id, NSArray;
overload selector("arrayWithCapacity:") = Id, UInt;
overload selector("arrayWithContentsOfFile:") = Id, NSString;
overload selector("arrayWithContentsOfURL:") = Id, NSURL;
overload selector("arrayWithObject:") = Id, Id;
overload varargSelector("arrayWithObjects:") = Id, Id;
overload selector("arrayWithObjects:count:") = Id, Pointer[Id], UInt;
overload selector("arrowDirection") = UIMenuControllerArrowDirection;
overload selector("ascender") = Float;
overload selector("ascending") = Bool;
overload selector("attemptRecoveryFromError:optionIndex:") = Bool, NSError, UInt;
overload selector("attemptRecoveryFromError:optionIndex:delegate:didRecoverSelector:contextInfo:") = Void, NSError, UInt, Id, SelectorHandle, RawPointer;
overload selector("attribute:atIndex:effectiveRange:") = Id, NSString, UInt, NSRangePointer;
overload selector("attribute:atIndex:longestEffectiveRange:inRange:") = Id, NSString, UInt, NSRangePointer, NSRange;
overload selector("attributedStringForObjectValue:withDefaultAttributes:") = NSAttributedString, Id, NSDictionary;
overload selector("attributedSubstringFromRange:") = NSAttributedString, NSRange;
overload selector("attributesAtIndex:effectiveRange:") = NSDictionary, UInt, NSRangePointer;
overload selector("attributesAtIndex:longestEffectiveRange:inRange:") = NSDictionary, UInt, NSRangePointer, NSRange;
overload selector("attributesOfFileSystemForPath:error:") = NSDictionary, NSString, Pointer[NSError];
overload selector("attributesOfItemAtPath:error:") = NSDictionary, NSString, Pointer[NSError];
overload selector("authenticationMethod") = NSString;
overload selector("autoContentAccessingProxy") = Id;
overload selector("autocapitalizationType") = UITextAutocapitalizationType;
overload selector("autocorrectionType") = UITextAutocorrectionType;
overload selector("automaticallyNotifiesObserversForKey:") = Bool, NSString;
overload selector("autorelease") = Id;
overload selector("autoresizesSubviews") = Bool;
overload selector("autoresizingMask") = UInt;
overload selector("autoupdatingCurrentCalendar") = Id;
overload selector("autoupdatingCurrentLocale") = Id;
overload selector("availableCaptureModesForCameraDevice:") = NSArray, UInt;
overload selector("availableData") = NSData;
overload selector("availableLocaleIdentifiers") = NSArray;
overload selector("availableMediaTypesForSourceType:") = NSArray, UInt;
overload selector("availableModes") = NSArray;
overload selector("availableStringEncodings") = Pointer[UInt];
overload selector("awakeAfterUsingCoder:") = Id, NSCoder;
overload selector("awakeFromNib") = Void;
overload selector("backBarButtonItem") = UIBarButtonItem;
overload selector("backItem") = UINavigationItem;
overload selector("background") = UIImage;
overload selector("backgroundColor") = UIColor;
overload selector("backgroundImageForState:") = UIImage, UInt;
overload selector("backgroundRectForBounds:") = CGRect, CGRect;
overload selector("backgroundTimeRemaining") = Double;
overload selector("backgroundView") = UIView;
overload selector("badgeValue") = NSString;
overload selector("barStyle") = UIBarStyle;
overload selector("baseURL") = NSURL;
overload selector("baseWritingDirectionForPosition:inDirection:") = UITextWritingDirection, UITextPosition, UITextStorageDirection;
overload selector("baselineAdjustment") = UIBaselineAdjustment;
overload selector("batteryLevel") = Float;
overload selector("batteryState") = UIDeviceBatteryState;
overload selector("becomeFirstResponder") = Bool;
overload selector("becomeKeyWindow") = Void;
overload selector("beginAnimations:context:") = Void, NSString, RawPointer;
overload selector("beginBackgroundTaskWithExpirationHandler:") = UInt, UnknownType;
overload selector("beginContentAccess") = Bool;
overload selector("beginCustomizingItems:") = Void, NSArray;
overload selector("beginEditing") = Void;
overload selector("beginGeneratingDeviceOrientationNotifications") = Void;
overload selector("beginIgnoringInteractionEvents") = Void;
overload selector("beginReceivingRemoteControlEvents") = Void;
overload selector("beginTrackingWithTouch:withEvent:") = Bool, UITouch, UIEvent;
overload selector("beginUndoGrouping") = Void;
overload selector("beginUpdates") = Void;
overload selector("beginningOfDocument") = UITextPosition;
overload selector("bezierPath") = UIBezierPath;
overload selector("bezierPathWithArcCenter:radius:startAngle:endAngle:clockwise:") = UIBezierPath, CGPoint, Float, Float, Float, Bool;
overload selector("bezierPathWithCGPath:") = UIBezierPath, CGPathRef;
overload selector("bezierPathWithOvalInRect:") = UIBezierPath, CGRect;
overload selector("bezierPathWithRect:") = UIBezierPath, CGRect;
overload selector("bezierPathWithRoundedRect:byRoundingCorners:cornerRadii:") = UIBezierPath, CGRect, UInt, CGSize;
overload selector("bezierPathWithRoundedRect:cornerRadius:") = UIBezierPath, CGRect, Float;
overload selector("bitmapRepresentation") = NSData;
overload selector("blackColor") = UIColor;
overload selector("blockOperationWithBlock:") = Id, UnknownType;
overload selector("blueColor") = UIColor;
overload selector("boldSystemFontOfSize:") = UIFont, Float;
overload selector("bookmarkDataWithContentsOfURL:error:") = NSData, NSURL, Pointer[NSError];
overload selector("bookmarkDataWithOptions:includingResourceValuesForKeys:relativeToURL:error:") = NSData, UInt, NSArray, NSURL, Pointer[NSError];
overload selector("boolForKey:") = Bool, NSString;
overload selector("boolValue") = Bool;
overload selector("borderRectForBounds:") = CGRect, CGRect;
overload selector("borderStyle") = UITextBorderStyle;
overload selector("bounces") = Bool;
overload selector("bouncesZoom") = Bool;
overload selector("bounds") = CGRect;
overload selector("bringSubviewToFront:") = Void, UIView;
overload selector("broadcast") = Void;
overload selector("brownColor") = UIColor;
overload selector("builtInPlugInsPath") = NSString;
overload selector("builtInPlugInsURL") = NSURL;
overload selector("bundleForClass:") = NSBundle, Id;
overload selector("bundleIdentifier") = NSString;
overload selector("bundlePath") = NSString;
overload selector("bundleURL") = NSURL;
overload selector("bundleWithIdentifier:") = NSBundle, NSString;
overload selector("bundleWithPath:") = NSBundle, NSString;
overload selector("bundleWithURL:") = NSBundle, NSURL;
overload selector("buttonFontSize") = Float;
overload selector("buttonTitleAtIndex:") = NSString, Int;
overload selector("buttonType") = UIButtonType;
overload selector("buttonWithType:") = Id, UIButtonType;
overload selector("bytes") = RawPointer;
overload selector("cString") = Pointer[CChar];
overload selector("cStringLength") = UInt;
overload selector("cStringUsingEncoding:") = Pointer[CChar], UInt;
overload selector("cache:willEvictObject:") = Void, NSCache, Id;
overload selector("cachePolicy") = UInt;
overload selector("cachedResponse") = NSCachedURLResponse;
overload selector("cachedResponseForRequest:") = NSCachedURLResponse, NSURLRequest;
overload selector("calendar") = NSCalendar;
overload selector("calendarIdentifier") = NSString;
overload selector("callStackReturnAddresses") = NSArray;
overload selector("callStackSymbols") = NSArray;
overload selector("cameraCaptureMode") = UInt;
overload selector("cameraDevice") = UInt;
overload selector("cameraFlashMode") = Int;
overload selector("cameraOverlayView") = UIView;
overload selector("cameraViewTransform") = CGAffineTransform;
overload selector("canBeConvertedToEncoding:") = Bool, UInt;
overload selector("canBecomeFirstResponder") = Bool;
overload selector("canCancelContentTouches") = Bool;
overload selector("canEditVideoAtPath:") = Bool, NSString;
overload selector("canGoBack") = Bool;
overload selector("canGoForward") = Bool;
overload selector("canHandleRequest:") = Bool, NSURLRequest;
overload selector("canInitWithRequest:") = Bool, NSURLRequest;
overload selector("canOpenURL:") = Bool, NSURL;
overload selector("canPerformAction:withSender:") = Bool, SelectorHandle, Id;
overload selector("canRedo") = Bool;
overload selector("canResignFirstResponder") = Bool;
overload selector("canUndo") = Bool;
overload selector("cancel") = Void;
overload selector("cancelAllLocalNotifications") = Void;
overload selector("cancelAllOperations") = Void;
overload selector("cancelAuthenticationChallenge:") = Void, NSURLAuthenticationChallenge;
overload selector("cancelButtonIndex") = Int;
overload selector("cancelLocalNotification:") = Void, UILocalNotification;
overload selector("cancelPerformSelector:target:argument:") = Void, SelectorHandle, Id, Id;
overload selector("cancelPerformSelectorsWithTarget:") = Void, Id;
overload selector("cancelPreviousPerformRequestsWithTarget:") = Void, Id;
overload selector("cancelPreviousPerformRequestsWithTarget:selector:object:") = Void, Id, SelectorHandle, Id;
overload selector("cancelTrackingWithEvent:") = Void, UIEvent;
overload selector("cancelsTouchesInView") = Bool;
overload selector("canonicalLanguageIdentifierFromString:") = NSString, NSString;
overload selector("canonicalLocaleIdentifierFromString:") = NSString, NSString;
overload selector("canonicalRequestForRequest:") = NSURLRequest, NSURLRequest;
overload selector("capHeight") = Float;
overload selector("capitalizedLetterCharacterSet") = Id;
overload selector("capitalizedString") = NSString;
overload selector("caretRectForPosition:") = CGRect, UITextPosition;
overload selector("caseInsensitiveCompare:") = Int, NSString;
overload selector("caseSensitive") = Bool;
overload selector("cellForRowAtIndexPath:") = UITableViewCell, NSIndexPath;
overload selector("center") = CGPoint;
overload selector("certificates") = NSArray;
overload selector("changeCount") = Int;
overload selector("changeCurrentDirectoryPath:") = Bool, NSString;
overload selector("changeFileAttributes:atPath:") = Bool, NSDictionary, NSString;
overload selector("charValue") = CChar;
overload selector("characterAtIndex:") = UShort, UInt;
overload selector("characterDirectionForLanguage:") = UInt, NSString;
overload selector("characterIsMember:") = Bool, UShort;
overload selector("characterOffsetOfPosition:withinRange:") = Int, UITextPosition, UITextRange;
overload selector("characterRangeAtPoint:") = UITextRange, CGPoint;
overload selector("characterRangeByExtendingPosition:inDirection:") = UITextRange, UITextPosition, UITextLayoutDirection;
overload selector("characterSetWithBitmapRepresentation:") = Id, NSData;
overload selector("characterSetWithCharactersInString:") = Id, NSString;
overload selector("characterSetWithContentsOfFile:") = Id, NSString;
overload selector("characterSetWithRange:") = Id, NSRange;
overload selector("charactersToBeSkipped") = NSCharacterSet;
overload selector("checkResourceIsReachableAndReturnError:") = Bool, Pointer[NSError];
overload selector("checkingTypes") = UInt64;
overload selector("class") = Id;
overload selector("classFallbacksForKeyedArchiver") = NSArray;
overload selector("classForClassName:") = Id, NSString;
overload selector("classForCoder") = Id;
overload selector("classForKeyedArchiver") = Id;
overload selector("classForKeyedUnarchiver") = Id;
overload selector("classNameForClass:") = NSString, Id;
overload selector("classNamed:") = Id, NSString;
overload selector("clearButtonMode") = UITextFieldViewMode;
overload selector("clearButtonRectForBounds:") = CGRect, CGRect;
overload selector("clearColor") = UIColor;
overload selector("clearKeepAliveTimeout") = Void;
overload selector("clearsContextBeforeDrawing") = Bool;
overload selector("clearsOnBeginEditing") = Bool;
overload selector("clearsSelectionOnViewWillAppear") = Bool;
overload selector("client") = Id;
overload selector("clipsToBounds") = Bool;
overload selector("close") = Void;
overload selector("closeFile") = Void;
overload selector("closePath") = Void;
overload selector("closestPositionToPoint:") = UITextPosition, CGPoint;
overload selector("closestPositionToPoint:withinRange:") = UITextPosition, CGPoint, UITextRange;
overload selector("code") = Int;
overload selector("collection") = Id;
overload selector("color") = UIColor;
overload selector("colorWithAlphaComponent:") = UIColor, Float;
overload selector("colorWithCGColor:") = UIColor, CGColorRef;
overload selector("colorWithHue:saturation:brightness:alpha:") = UIColor, Float, Float, Float, Float;
overload selector("colorWithPatternImage:") = UIColor, UIImage;
overload selector("colorWithRed:green:blue:alpha:") = UIColor, Float, Float, Float, Float;
overload selector("colorWithWhite:alpha:") = UIColor, Float, Float;
overload selector("colors") = NSArray;
overload selector("columnNumber") = Int;
overload selector("comment") = NSString;
overload selector("commentURL") = NSURL;
overload selector("commitAnimations") = Void;
overload selector("commonISOCurrencyCodes") = NSArray;
overload selector("commonPrefixWithString:options:") = NSString, NSString, UInt;
overload selector("comparator") = NSComparator;
overload selector("compare:") = Int, NSNumber;
overload selector("compare:options:") = Int, NSString, UInt;
overload selector("compare:options:range:") = Int, NSString, UInt, NSRange;
overload selector("compare:options:range:locale:") = Int, NSString, UInt, NSRange, Id;
overload selector("compareObject:toObject:") = Int, Id, Id;
overload selector("comparePosition:toPosition:") = Int, UITextPosition, UITextPosition;
overload selector("comparisonPredicateModifier") = UInt;
overload selector("completePathIntoString:caseSensitive:matchesIntoArray:filterTypes:") = UInt, Pointer[NSString], Bool, Pointer[NSArray], NSArray;
overload selector("completionBlock") = UnknownType;
overload selector("components") = NSDictionary;
overload selector("components:fromDate:") = NSDateComponents, UInt, NSDate;
overload selector("components:fromDate:toDate:options:") = NSDateComponents, UInt, NSDate, NSDate, UInt;
overload selector("componentsFromLocaleIdentifier:") = NSDictionary, NSString;
overload selector("componentsJoinedByString:") = NSString, NSString;
overload selector("componentsSeparatedByCharactersInSet:") = NSArray, NSCharacterSet;
overload selector("componentsSeparatedByString:") = NSArray, NSString;
overload selector("componentsToDisplayForPath:") = NSArray, NSString;
overload selector("compoundPredicateType") = UInt;
overload selector("condition") = Int;
overload selector("conformsToProtocol:") = Bool, Id;
overload selector("connection:canAuthenticateAgainstProtectionSpace:") = Bool, NSURLConnection, NSURLProtectionSpace;
overload selector("connection:didCancelAuthenticationChallenge:") = Void, NSURLConnection, NSURLAuthenticationChallenge;
overload selector("connection:didFailWithError:") = Void, NSURLConnection, NSError;
overload selector("connection:didReceiveAuthenticationChallenge:") = Void, NSURLConnection, NSURLAuthenticationChallenge;
overload selector("connection:didReceiveData:") = Void, NSURLConnection, NSData;
overload selector("connection:didReceiveResponse:") = Void, NSURLConnection, NSURLResponse;
overload selector("connection:didSendBodyData:totalBytesWritten:totalBytesExpectedToWrite:") = Void, NSURLConnection, Int, Int, Int;
overload selector("connection:needNewBodyStream:") = NSInputStream, NSURLConnection, NSURLRequest;
overload selector("connection:willCacheResponse:") = NSCachedURLResponse, NSURLConnection, NSCachedURLResponse;
overload selector("connection:willSendRequest:redirectResponse:") = NSURLRequest, NSURLConnection, NSURLRequest, NSURLResponse;
overload selector("connectionDidFinishLoading:") = Void, NSURLConnection;
overload selector("connectionShouldUseCredentialStorage:") = Bool, NSURLConnection;
overload selector("connectionWithRequest:delegate:") = NSURLConnection, NSURLRequest, Id;
overload selector("constantValue") = Id;
overload selector("containsIndex:") = Bool, UInt;
overload selector("containsIndexes:") = Bool, NSIndexSet;
overload selector("containsIndexesInRange:") = Bool, NSRange;
overload selector("containsObject:") = Bool, Id;
overload selector("containsPasteboardTypes:") = Bool, NSArray;
overload selector("containsPasteboardTypes:inItemSet:") = Bool, NSArray, NSIndexSet;
overload selector("containsPoint:") = Bool, CGPoint;
overload selector("containsValueForKey:") = Bool, NSString;
overload selector("contentEdgeInsets") = UIEdgeInsets;
overload selector("contentHorizontalAlignment") = UIControlContentHorizontalAlignment;
overload selector("contentInset") = UIEdgeInsets;
overload selector("contentMode") = UIViewContentMode;
overload selector("contentOffset") = CGPoint;
overload selector("contentOffsetForSegmentAtIndex:") = CGSize, UInt;
overload selector("contentRectForBounds:") = CGRect, CGRect;
overload selector("contentScaleFactor") = Float;
overload selector("contentSize") = CGSize;
overload selector("contentSizeForViewInPopover") = CGSize;
overload selector("contentStretch") = CGRect;
overload selector("contentVerticalAlignment") = UIControlContentVerticalAlignment;
overload selector("contentView") = UIView;
overload selector("contentViewController") = UIViewController;
overload selector("contentsAtPath:") = NSData, NSString;
overload selector("contentsEqualAtPath:andPath:") = Bool, NSString, NSString;
overload selector("contentsOfDirectoryAtPath:error:") = NSArray, NSString, Pointer[NSError];
overload selector("contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:") = NSArray, NSURL, NSArray, UInt, Pointer[NSError];
overload selector("continueTrackingWithTouch:withEvent:") = Bool, UITouch, UIEvent;
overload selector("continueWithoutCredentialForAuthenticationChallenge:") = Void, NSURLAuthenticationChallenge;
overload selector("controlCharacterSet") = Id;
overload selector("convertPoint:fromView:") = CGPoint, CGPoint, UIView;
overload selector("convertPoint:fromWindow:") = CGPoint, CGPoint, UIWindow;
overload selector("convertPoint:toView:") = CGPoint, CGPoint, UIView;
overload selector("convertPoint:toWindow:") = CGPoint, CGPoint, UIWindow;
overload selector("convertRect:fromView:") = CGRect, CGRect, UIView;
overload selector("convertRect:fromWindow:") = CGRect, CGRect, UIWindow;
overload selector("convertRect:toView:") = CGRect, CGRect, UIView;
overload selector("convertRect:toWindow:") = CGRect, CGRect, UIWindow;
overload selector("cookieAcceptPolicy") = UInt;
overload selector("cookieWithProperties:") = Id, NSDictionary;
overload selector("cookies") = NSArray;
overload selector("cookiesForURL:") = NSArray, NSURL;
overload selector("cookiesWithResponseHeaderFields:forURL:") = NSArray, NSDictionary, NSURL;
overload selector("copy") = Id;
overload selector("copy:") = Void, Id;
overload selector("copyItemAtPath:toPath:error:") = Bool, NSString, NSString, Pointer[NSError];
overload selector("copyItemAtURL:toURL:error:") = Bool, NSURL, NSURL, Pointer[NSError];
overload selector("copyWithZone:") = Id, Pointer[NSZone];
overload selector("correctionCheckingResultWithRange:replacementString:") = NSTextCheckingResult, NSRange, NSString;
overload selector("count") = UInt;
overload selector("countByEnumeratingWithState:objects:count:") = UInt, Pointer[NSFastEnumerationState], Pointer[Id], UInt;
overload selector("countDownDuration") = Double;
overload selector("countForObject:") = UInt, Id;
overload selector("countLimit") = UInt;
overload selector("countOfIndexesInRange:") = UInt, NSRange;
overload selector("createDirectoryAtPath:attributes:") = Bool, NSString, NSDictionary;
overload selector("createDirectoryAtPath:withIntermediateDirectories:attributes:error:") = Bool, NSString, Bool, NSDictionary, Pointer[NSError];
overload selector("createFileAtPath:contents:attributes:") = Bool, NSString, NSData, NSDictionary;
overload selector("createSymbolicLinkAtPath:pathContent:") = Bool, NSString, NSString;
overload selector("createSymbolicLinkAtPath:withDestinationPath:error:") = Bool, NSString, NSString, Pointer[NSError];
overload selector("credentialForTrust:") = NSURLCredential, SecTrustRef;
overload selector("credentialWithIdentity:certificates:persistence:") = NSURLCredential, SecIdentityRef, NSArray, UInt;
overload selector("credentialWithUser:password:persistence:") = NSURLCredential, NSString, NSString, UInt;
overload selector("credentialsForProtectionSpace:") = NSDictionary, NSURLProtectionSpace;
overload selector("currencyCode") = NSString;
overload selector("currencyDecimalSeparator") = NSString;
overload selector("currencyGroupingSeparator") = NSString;
overload selector("currencySymbol") = NSString;
overload selector("currentBackgroundImage") = UIImage;
overload selector("currentCalendar") = Id;
overload selector("currentCollation") = Id;
overload selector("currentDevice") = UIDevice;
overload selector("currentDirectoryPath") = NSString;
overload selector("currentDiskUsage") = UInt;
overload selector("currentHandler") = NSAssertionHandler;
overload selector("currentImage") = UIImage;
overload selector("currentLocale") = Id;
overload selector("currentMaximumTrackImage") = UIImage;
overload selector("currentMemoryUsage") = UInt;
overload selector("currentMinimumTrackImage") = UIImage;
overload selector("currentMode") = Id;
overload selector("currentPage") = Int;
overload selector("currentPoint") = CGPoint;
overload selector("currentQueue") = Id;
overload selector("currentRunLoop") = NSRunLoop;
overload selector("currentThread") = NSThread;
overload selector("currentThumbImage") = UIImage;
overload selector("currentTitle") = NSString;
overload selector("currentTitleColor") = UIColor;
overload selector("currentTitleShadowColor") = UIColor;
overload selector("customSelector") = SelectorHandle;
overload selector("customView") = UIView;
overload selector("customizableViewControllers") = NSArray;
overload selector("cut:") = Void, Id;
overload selector("cyanColor") = UIColor;
overload selector("darkGrayColor") = UIColor;
overload selector("darkTextColor") = UIColor;
overload selector("dashCheckingResultWithRange:replacementString:") = NSTextCheckingResult, NSRange, NSString;
overload selector("data") = Id;
overload selector("dataDetectorTypes") = UInt;
overload selector("dataDetectorWithTypes:error:") = NSDataDetector, UInt64, Pointer[NSError];
overload selector("dataForKey:") = NSData, NSString;
overload selector("dataForPasteboardType:") = NSData, NSString;
overload selector("dataForPasteboardType:inItemSet:") = NSArray, NSString, NSIndexSet;
overload selector("dataFromPropertyList:format:errorDescription:") = NSData, Id, UInt, Pointer[NSString];
overload selector("dataFromTXTRecordDictionary:") = NSData, NSDictionary;
overload selector("dataSource") = Id;
overload selector("dataUsingEncoding:") = NSData, UInt;
overload selector("dataUsingEncoding:allowLossyConversion:") = NSData, UInt, Bool;
overload selector("dataWithBytes:length:") = Id, RawPointer, UInt;
overload selector("dataWithBytesNoCopy:length:") = Id, RawPointer, UInt;
overload selector("dataWithBytesNoCopy:length:freeWhenDone:") = Id, RawPointer, UInt, Bool;
overload selector("dataWithCapacity:") = Id, UInt;
overload selector("dataWithContentsOfFile:") = Id, NSString;
overload selector("dataWithContentsOfFile:options:error:") = Id, NSString, UInt, Pointer[NSError];
overload selector("dataWithContentsOfMappedFile:") = Id, NSString;
overload selector("dataWithContentsOfURL:") = Id, NSURL;
overload selector("dataWithContentsOfURL:options:error:") = Id, NSURL, UInt, Pointer[NSError];
overload selector("dataWithData:") = Id, NSData;
overload selector("dataWithLength:") = Id, UInt;
overload selector("dataWithPropertyList:format:options:error:") = NSData, Id, UInt, UInt, Pointer[NSError];
overload selector("date") = Id;
overload selector("dateByAddingComponents:toDate:options:") = NSDate, NSDateComponents, NSDate, UInt;
overload selector("dateByAddingTimeInterval:") = Id, Double;
overload selector("dateCheckingResultWithRange:date:") = NSTextCheckingResult, NSRange, NSDate;
overload selector("dateCheckingResultWithRange:date:timeZone:duration:") = NSTextCheckingResult, NSRange, NSDate, NSTimeZone, Double;
overload selector("dateFormat") = NSString;
overload selector("dateFormatFromTemplate:options:locale:") = NSString, NSString, UInt, NSLocale;
overload selector("dateFromComponents:") = NSDate, NSDateComponents;
overload selector("dateFromString:") = NSDate, NSString;
overload selector("datePickerMode") = UIDatePickerMode;
overload selector("dateStyle") = UInt;
overload selector("dateWithTimeInterval:sinceDate:") = Id, Double, NSDate;
overload selector("dateWithTimeIntervalSince1970:") = Id, Double;
overload selector("dateWithTimeIntervalSinceNow:") = Id, Double;
overload selector("dateWithTimeIntervalSinceReferenceDate:") = Id, Double;
overload selector("day") = Int;
overload selector("daylightSavingTimeOffset") = Double;
overload selector("daylightSavingTimeOffsetForDate:") = Double, NSDate;
overload selector("dealloc") = Void;
overload selector("decelerationRate") = Float;
overload selector("decimalDigitCharacterSet") = Id;
overload selector("decimalNumberByAdding:") = NSDecimalNumber, NSDecimalNumber;
overload selector("decimalNumberByAdding:withBehavior:") = NSDecimalNumber, NSDecimalNumber, Id;
overload selector("decimalNumberByDividingBy:") = NSDecimalNumber, NSDecimalNumber;
overload selector("decimalNumberByDividingBy:withBehavior:") = NSDecimalNumber, NSDecimalNumber, Id;
overload selector("decimalNumberByMultiplyingBy:") = NSDecimalNumber, NSDecimalNumber;
overload selector("decimalNumberByMultiplyingBy:withBehavior:") = NSDecimalNumber, NSDecimalNumber, Id;
overload selector("decimalNumberByMultiplyingByPowerOf10:") = NSDecimalNumber, Short;
overload selector("decimalNumberByMultiplyingByPowerOf10:withBehavior:") = NSDecimalNumber, Short, Id;
overload selector("decimalNumberByRaisingToPower:") = NSDecimalNumber, UInt;
overload selector("decimalNumberByRaisingToPower:withBehavior:") = NSDecimalNumber, UInt, Id;
overload selector("decimalNumberByRoundingAccordingToBehavior:") = NSDecimalNumber, Id;
overload selector("decimalNumberBySubtracting:") = NSDecimalNumber, NSDecimalNumber;
overload selector("decimalNumberBySubtracting:withBehavior:") = NSDecimalNumber, NSDecimalNumber, Id;
overload selector("decimalNumberHandlerWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:") = Id, UInt, Short, Bool, Bool, Bool, Bool;
overload selector("decimalNumberWithDecimal:") = NSDecimalNumber, NSDecimal;
overload selector("decimalNumberWithMantissa:exponent:isNegative:") = NSDecimalNumber, UInt64, Short, Bool;
overload selector("decimalNumberWithString:") = NSDecimalNumber, NSString;
overload selector("decimalNumberWithString:locale:") = NSDecimalNumber, NSString, Id;
overload selector("decimalSeparator") = NSString;
overload selector("decimalValue") = NSDecimal;
overload selector("decodeArrayOfObjCType:count:at:") = Void, Pointer[CChar], UInt, RawPointer;
overload selector("decodeBoolForKey:") = Bool, NSString;
overload selector("decodeBytesForKey:returnedLength:") = Pointer[CUChar], NSString, Pointer[UInt];
overload selector("decodeBytesWithReturnedLength:") = RawPointer, Pointer[UInt];
overload selector("decodeCGAffineTransformForKey:") = CGAffineTransform, NSString;
overload selector("decodeCGPointForKey:") = CGPoint, NSString;
overload selector("decodeCGRectForKey:") = CGRect, NSString;
overload selector("decodeCGSizeForKey:") = CGSize, NSString;
overload selector("decodeDataObject") = NSData;
overload selector("decodeDoubleForKey:") = Double, NSString;
overload selector("decodeFloatForKey:") = Float, NSString;
overload selector("decodeInt32ForKey:") = Int, NSString;
overload selector("decodeInt64ForKey:") = Int64, NSString;
overload selector("decodeIntForKey:") = Int, NSString;
overload selector("decodeIntegerForKey:") = Int, NSString;
overload selector("decodeObject") = Id;
overload selector("decodeObjectForKey:") = Id, NSString;
overload selector("decodeUIEdgeInsetsForKey:") = UIEdgeInsets, NSString;
overload selector("decodeValueOfObjCType:at:") = Void, Pointer[CChar], RawPointer;
overload varargSelector("decodeValuesOfObjCTypes:") = Void, Pointer[CChar];
overload selector("decomposableCharacterSet") = Id;
overload selector("decomposedStringWithCanonicalMapping") = NSString;
overload selector("decomposedStringWithCompatibilityMapping") = NSString;
overload selector("defaultBehavior") = Id;
overload selector("defaultCStringEncoding") = UInt;
overload selector("defaultCenter") = Id;
overload selector("defaultCredentialForProtectionSpace:") = NSURLCredential, NSURLProtectionSpace;
overload selector("defaultDate") = NSDate;
overload selector("defaultDecimalNumberHandler") = Id;
overload selector("defaultFormatterBehavior") = UInt;
overload selector("defaultManager") = NSFileManager;
overload selector("defaultQueue") = Id;
overload selector("defaultTimeZone") = NSTimeZone;
overload selector("defersCurrentPageDisplay") = Bool;
overload selector("delaysContentTouches") = Bool;
overload selector("delaysTouchesBegan") = Bool;
overload selector("delaysTouchesEnded") = Bool;
overload selector("delegate") = Id;
overload selector("delete:") = Void, Id;
overload selector("deleteBackward") = Void;
overload selector("deleteCharactersInRange:") = Void, NSRange;
overload selector("deleteCookie:") = Void, NSHTTPCookie;
overload selector("deleteRowsAtIndexPaths:withRowAnimation:") = Void, NSArray, UITableViewRowAnimation;
overload selector("deleteSections:withRowAnimation:") = Void, NSIndexSet, UITableViewRowAnimation;
overload selector("dependencies") = NSArray;
overload selector("dequeueNotificationsMatching:coalesceMask:") = Void, NSNotification, UInt;
overload selector("dequeueReusableCellWithIdentifier:") = UITableViewCell, NSString;
overload selector("descender") = Float;
overload selector("description") = NSString;
overload selector("descriptionInStringsFileFormat") = NSString;
overload selector("descriptionWithLocale:") = NSString, Id;
overload selector("descriptionWithLocale:indent:") = NSString, Id, UInt;
overload selector("deselectRowAtIndexPath:animated:") = Void, NSIndexPath, Bool;
overload selector("destinationOfSymbolicLinkAtPath:error:") = NSString, NSString, Pointer[NSError];
overload selector("destructiveButtonIndex") = Int;
overload selector("detachNewThreadSelector:toTarget:withObject:") = Void, SelectorHandle, Id, Id;
overload selector("detailTextLabel") = UILabel;
overload selector("detectsPhoneNumbers") = Bool;
overload selector("developmentLocalization") = NSString;
overload selector("dictionary") = Id;
overload selector("dictionaryForKey:") = NSDictionary, NSString;
overload selector("dictionaryFromTXTRecordData:") = NSDictionary, NSData;
overload selector("dictionaryRepresentation") = NSDictionary;
overload selector("dictionaryWithCapacity:") = Id, UInt;
overload selector("dictionaryWithContentsOfFile:") = Id, NSString;
overload selector("dictionaryWithContentsOfURL:") = Id, NSURL;
overload selector("dictionaryWithDictionary:") = Id, NSDictionary;
overload selector("dictionaryWithObject:forKey:") = Id, Id, Id;
overload selector("dictionaryWithObjects:forKeys:") = Id, NSArray, NSArray;
overload selector("dictionaryWithObjects:forKeys:count:") = Id, Pointer[Id], Pointer[Id], UInt;
overload varargSelector("dictionaryWithObjectsAndKeys:") = Id, Id;
overload selector("dictionaryWithValuesForKeys:") = NSDictionary, NSArray;
overload selector("didAddSubview:") = Void, UIView;
overload selector("didAnimateFirstHalfOfRotationToInterfaceOrientation:") = Void, UIInterfaceOrientation;
overload selector("didChange:valuesAtIndexes:forKey:") = Void, UInt, NSIndexSet, NSString;
overload selector("didChangeValueForKey:") = Void, NSString;
overload selector("didChangeValueForKey:withSetMutation:usingObjects:") = Void, NSString, UInt, NSSet;
overload selector("didMoveToSuperview") = Void;
overload selector("didMoveToWindow") = Void;
overload selector("didPresentActionSheet:") = Void, UIActionSheet;
overload selector("didPresentAlertView:") = Void, UIAlertView;
overload selector("didReceiveMemoryWarning") = Void;
overload selector("didRotateFromInterfaceOrientation:") = Void, UIInterfaceOrientation;
overload selector("didTransitionToState:") = Void, UInt;
overload selector("direction") = UISwipeGestureRecognizerDirection;
overload selector("directoryAttributes") = NSDictionary;
overload selector("directoryContentsAtPath:") = NSArray, NSString;
overload selector("disableUndoRegistration") = Void;
overload selector("disabledBackground") = UIImage;
overload selector("discardContentIfPossible") = Void;
overload selector("diskCapacity") = UInt;
overload selector("dismissMenuAnimated:") = Void, Bool;
overload selector("dismissModalViewControllerAnimated:") = Void, Bool;
overload selector("dismissPopoverAnimated:") = Void, Bool;
overload selector("dismissPreviewAnimated:") = Void, Bool;
overload selector("dismissWithClickedButtonIndex:animated:") = Void, Int, Bool;
overload selector("displayLinkWithTarget:selector:") = CADisplayLink, Id, SelectorHandle;
overload selector("displayNameAtPath:") = NSString, NSString;
overload selector("displayNameForKey:value:") = NSString, Id, Id;
overload selector("distantFuture") = Id;
overload selector("distantPast") = Id;
overload selector("distinguishedNames") = NSArray;
overload selector("documentInteractionController:canPerformAction:") = Bool, UIDocumentInteractionController, SelectorHandle;
overload selector("documentInteractionController:didEndSendingToApplication:") = Void, UIDocumentInteractionController, NSString;
overload selector("documentInteractionController:performAction:") = Bool, UIDocumentInteractionController, SelectorHandle;
overload selector("documentInteractionController:willBeginSendingToApplication:") = Void, UIDocumentInteractionController, NSString;
overload selector("documentInteractionControllerDidDismissOpenInMenu:") = Void, UIDocumentInteractionController;
overload selector("documentInteractionControllerDidDismissOptionsMenu:") = Void, UIDocumentInteractionController;
overload selector("documentInteractionControllerDidEndPreview:") = Void, UIDocumentInteractionController;
overload selector("documentInteractionControllerRectForPreview:") = CGRect, UIDocumentInteractionController;
overload selector("documentInteractionControllerViewControllerForPreview:") = UIViewController, UIDocumentInteractionController;
overload selector("documentInteractionControllerViewForPreview:") = UIView, UIDocumentInteractionController;
overload selector("documentInteractionControllerWillBeginPreview:") = Void, UIDocumentInteractionController;
overload selector("documentInteractionControllerWillPresentOpenInMenu:") = Void, UIDocumentInteractionController;
overload selector("documentInteractionControllerWillPresentOptionsMenu:") = Void, UIDocumentInteractionController;
overload selector("doesNotRecognizeSelector:") = Void, SelectorHandle;
overload selector("doesRelativeDateFormatting") = Bool;
overload selector("domain") = NSString;
overload selector("dominantLanguage") = NSString;
overload selector("dominantLanguageForScript:") = NSString, NSString;
overload selector("dominantScript") = NSString;
overload selector("doubleForKey:") = Double, NSString;
overload selector("doubleValue") = Double;
overload selector("drain") = Void;
overload selector("drawAsPatternInRect:") = Void, CGRect;
overload selector("drawAtPoint:") = Void, CGPoint;
overload selector("drawAtPoint:blendMode:alpha:") = Void, CGPoint, CGBlendMode, Float;
overload selector("drawAtPoint:forWidth:withFont:fontSize:lineBreakMode:baselineAdjustment:") = CGSize, CGPoint, Float, UIFont, Float, UILineBreakMode, UIBaselineAdjustment;
overload selector("drawAtPoint:forWidth:withFont:lineBreakMode:") = CGSize, CGPoint, Float, UIFont, UILineBreakMode;
overload selector("drawAtPoint:forWidth:withFont:minFontSize:actualFontSize:lineBreakMode:baselineAdjustment:") = CGSize, CGPoint, Float, UIFont, Float, Pointer[Float], UILineBreakMode, UIBaselineAdjustment;
overload selector("drawAtPoint:withFont:") = CGSize, CGPoint, UIFont;
overload selector("drawInRect:") = Void, CGRect;
overload selector("drawInRect:blendMode:alpha:") = Void, CGRect, CGBlendMode, Float;
overload selector("drawInRect:withFont:") = CGSize, CGRect, UIFont;
overload selector("drawInRect:withFont:lineBreakMode:") = CGSize, CGRect, UIFont, UILineBreakMode;
overload selector("drawInRect:withFont:lineBreakMode:alignment:") = CGSize, CGRect, UIFont, UILineBreakMode, UITextAlignment;
overload selector("drawPlaceholderInRect:") = Void, CGRect;
overload selector("drawRect:") = Void, CGRect;
overload selector("drawTextInRect:") = Void, CGRect;
overload selector("duration") = Double;
overload selector("earlierDate:") = NSDate, NSDate;
overload selector("editAction") = SelectorHandle;
overload selector("editButtonItem") = UIBarButtonItem;
overload selector("editingAccessoryType") = UITableViewCellAccessoryType;
overload selector("editingAccessoryView") = UIView;
overload selector("editingRectForBounds:") = CGRect, CGRect;
overload selector("editingStringForObjectValue:") = NSString, Id;
overload selector("editingStyle") = UITableViewCellEditingStyle;
overload selector("enableUndoRegistration") = Void;
overload selector("enabledRemoteNotificationTypes") = UIRemoteNotificationType;
overload selector("enablesReturnKeyAutomatically") = Bool;
overload selector("encodeArrayOfObjCType:count:at:") = Void, Pointer[CChar], UInt, RawPointer;
overload selector("encodeBool:forKey:") = Void, Bool, NSString;
overload selector("encodeBycopyObject:") = Void, Id;
overload selector("encodeByrefObject:") = Void, Id;
overload selector("encodeBytes:length:") = Void, RawPointer, UInt;
overload selector("encodeBytes:length:forKey:") = Void, Pointer[CUChar], UInt, NSString;
overload selector("encodeCGAffineTransform:forKey:") = Void, CGAffineTransform, NSString;
overload selector("encodeCGPoint:forKey:") = Void, CGPoint, NSString;
overload selector("encodeCGRect:forKey:") = Void, CGRect, NSString;
overload selector("encodeCGSize:forKey:") = Void, CGSize, NSString;
overload selector("encodeConditionalObject:") = Void, Id;
overload selector("encodeConditionalObject:forKey:") = Void, Id, NSString;
overload selector("encodeDataObject:") = Void, NSData;
overload selector("encodeDouble:forKey:") = Void, Double, NSString;
overload selector("encodeFloat:forKey:") = Void, Float, NSString;
overload selector("encodeInt32:forKey:") = Void, Int, NSString;
overload selector("encodeInt64:forKey:") = Void, Int64, NSString;
overload selector("encodeInt:forKey:") = Void, Int, NSString;
overload selector("encodeInteger:forKey:") = Void, Int, NSString;
overload selector("encodeObject:") = Void, Id;
overload selector("encodeObject:forKey:") = Void, Id, NSString;
overload selector("encodeRootObject:") = Void, Id;
overload selector("encodeUIEdgeInsets:forKey:") = Void, UIEdgeInsets, NSString;
overload selector("encodeValueOfObjCType:at:") = Void, Pointer[CChar], RawPointer;
overload varargSelector("encodeValuesOfObjCTypes:") = Void, Pointer[CChar];
overload selector("encodeWithCoder:") = Void, NSCoder;
overload selector("end") = UITextPosition;
overload selector("endBackgroundTask:") = Void, UInt;
overload selector("endContentAccess") = Void;
overload selector("endCustomizingAnimated:") = Bool, Bool;
overload selector("endEditing") = Void;
overload selector("endEditing:") = Bool, Bool;
overload selector("endGeneratingDeviceOrientationNotifications") = Void;
overload selector("endIgnoringInteractionEvents") = Void;
overload selector("endOfDocument") = UITextPosition;
overload selector("endReceivingRemoteControlEvents") = Void;
overload selector("endTrackingWithTouch:withEvent:") = Void, UITouch, UIEvent;
overload selector("endUndoGrouping") = Void;
overload selector("endUpdates") = Void;
overload selector("enqueueNotification:postingStyle:") = Void, NSNotification, UInt;
overload selector("enqueueNotification:postingStyle:coalesceMask:forModes:") = Void, NSNotification, UInt, UInt, NSArray;
overload selector("enumerateAttribute:inRange:options:usingBlock:") = Void, NSString, NSRange, UInt, UnknownType;
overload selector("enumerateAttributesInRange:options:usingBlock:") = Void, NSRange, UInt, UnknownType;
overload selector("enumerateIndexesInRange:options:usingBlock:") = Void, NSRange, UInt, UnknownType;
overload selector("enumerateIndexesUsingBlock:") = Void, UnknownType;
overload selector("enumerateIndexesWithOptions:usingBlock:") = Void, UInt, UnknownType;
overload selector("enumerateKeysAndObjectsUsingBlock:") = Void, UnknownType;
overload selector("enumerateKeysAndObjectsWithOptions:usingBlock:") = Void, UInt, UnknownType;
overload selector("enumerateLinesUsingBlock:") = Void, UnknownType;
overload selector("enumerateMatchesInString:options:range:usingBlock:") = Void, NSString, UInt, NSRange, UnknownType;
overload selector("enumerateObjectsAtIndexes:options:usingBlock:") = Void, NSIndexSet, UInt, UnknownType;
overload selector("enumerateObjectsUsingBlock:") = Void, UnknownType;
overload selector("enumerateObjectsWithOptions:usingBlock:") = Void, UInt, UnknownType;
overload selector("enumerateSubstringsInRange:options:usingBlock:") = Void, NSRange, UInt, UnknownType;
overload selector("enumeratorAtPath:") = NSDirectoryEnumerator, NSString;
overload selector("enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:") = NSDirectoryEnumerator, NSURL, NSArray, UInt, UnknownType;
overload selector("environment") = NSDictionary;
overload selector("era") = Int;
overload selector("eraSymbols") = NSArray;
overload selector("error") = NSError;
overload selector("errorWithDomain:code:userInfo:") = Id, NSString, Int, NSDictionary;
overload selector("escapedPatternForString:") = NSString, NSString;
overload selector("escapedTemplateForString:") = NSString, NSString;
overload selector("evaluateWithObject:") = Bool, Id;
overload selector("evaluateWithObject:substitutionVariables:") = Bool, Id, NSDictionary;
overload selector("evictsObjectsWithDiscardedContent") = Bool;
overload selector("exceptionDuringOperation:error:leftOperand:rightOperand:") = NSDecimalNumber, SelectorHandle, UInt, NSDecimalNumber, NSDecimalNumber;
overload selector("exceptionWithName:reason:userInfo:") = NSException, NSString, NSString, NSDictionary;
overload selector("exchangeObjectAtIndex:withObjectAtIndex:") = Void, UInt, UInt;
overload selector("exchangeSubviewAtIndex:withSubviewAtIndex:") = Void, Int, Int;
overload selector("executableArchitectures") = NSArray;
overload selector("executablePath") = NSString;
overload selector("executableURL") = NSURL;
overload selector("executionBlocks") = NSArray;
overload selector("exit") = Void;
overload selector("expectedContentLength") = Int64;
overload selector("expiresDate") = NSDate;
overload selector("exponentSymbol") = NSString;
overload selector("expressionBlock") = UnknownType;
overload selector("expressionForAggregate:") = NSExpression, NSArray;
overload selector("expressionForBlock:arguments:") = NSExpression, UnknownType, NSArray;
overload selector("expressionForConstantValue:") = NSExpression, Id;
overload selector("expressionForEvaluatedObject") = NSExpression;
overload selector("expressionForFunction:arguments:") = NSExpression, NSString, NSArray;
overload selector("expressionForFunction:selectorName:arguments:") = NSExpression, NSExpression, NSString, NSArray;
overload selector("expressionForIntersectSet:with:") = NSExpression, NSExpression, NSExpression;
overload selector("expressionForKeyPath:") = NSExpression, NSString;
overload selector("expressionForMinusSet:with:") = NSExpression, NSExpression, NSExpression;
overload selector("expressionForSubquery:usingIteratorVariable:predicate:") = NSExpression, NSExpression, NSString, Id;
overload selector("expressionForUnionSet:with:") = NSExpression, NSExpression, NSExpression;
overload selector("expressionForVariable:") = NSExpression, NSString;
overload selector("expressionType") = UInt;
overload selector("expressionValueWithObject:context:") = Id, Id, NSMutableDictionary;
overload selector("failureResponse") = NSURLResponse;
overload selector("familyName") = NSString;
overload selector("familyNames") = NSArray;
overload selector("fastestEncoding") = UInt;
overload selector("fileAttributes") = NSDictionary;
overload selector("fileAttributesAtPath:traverseLink:") = NSDictionary, NSString, Bool;
overload selector("fileCreationDate") = NSDate;
overload selector("fileDescriptor") = Int;
overload selector("fileExistsAtPath:") = Bool, NSString;
overload selector("fileExistsAtPath:isDirectory:") = Bool, NSString, Pointer[Bool];
overload selector("fileExtensionHidden") = Bool;
overload selector("fileGroupOwnerAccountID") = NSNumber;
overload selector("fileGroupOwnerAccountName") = NSString;
overload selector("fileHFSCreatorCode") = CULong;
overload selector("fileHFSTypeCode") = CULong;
overload selector("fileHandleForReading") = NSFileHandle;
overload selector("fileHandleForReadingAtPath:") = Id, NSString;
overload selector("fileHandleForReadingFromURL:error:") = Id, NSURL, Pointer[NSError];
overload selector("fileHandleForUpdatingAtPath:") = Id, NSString;
overload selector("fileHandleForUpdatingURL:error:") = Id, NSURL, Pointer[NSError];
overload selector("fileHandleForWriting") = NSFileHandle;
overload selector("fileHandleForWritingAtPath:") = Id, NSString;
overload selector("fileHandleForWritingToURL:error:") = Id, NSURL, Pointer[NSError];
overload selector("fileHandleWithNullDevice") = Id;
overload selector("fileHandleWithStandardError") = Id;
overload selector("fileHandleWithStandardInput") = Id;
overload selector("fileHandleWithStandardOutput") = Id;
overload selector("fileIsAppendOnly") = Bool;
overload selector("fileIsImmutable") = Bool;
overload selector("fileManager:shouldCopyItemAtPath:toPath:") = Bool, NSFileManager, NSString, NSString;
overload selector("fileManager:shouldCopyItemAtURL:toURL:") = Bool, NSFileManager, NSURL, NSURL;
overload selector("fileManager:shouldLinkItemAtPath:toPath:") = Bool, NSFileManager, NSString, NSString;
overload selector("fileManager:shouldLinkItemAtURL:toURL:") = Bool, NSFileManager, NSURL, NSURL;
overload selector("fileManager:shouldMoveItemAtPath:toPath:") = Bool, NSFileManager, NSString, NSString;
overload selector("fileManager:shouldMoveItemAtURL:toURL:") = Bool, NSFileManager, NSURL, NSURL;
overload selector("fileManager:shouldProceedAfterError:") = Bool, NSFileManager, NSDictionary;
overload selector("fileManager:shouldProceedAfterError:copyingItemAtPath:toPath:") = Bool, NSFileManager, NSError, NSString, NSString;
overload selector("fileManager:shouldProceedAfterError:copyingItemAtURL:toURL:") = Bool, NSFileManager, NSError, NSURL, NSURL;
overload selector("fileManager:shouldProceedAfterError:linkingItemAtPath:toPath:") = Bool, NSFileManager, NSError, NSString, NSString;
overload selector("fileManager:shouldProceedAfterError:linkingItemAtURL:toURL:") = Bool, NSFileManager, NSError, NSURL, NSURL;
overload selector("fileManager:shouldProceedAfterError:movingItemAtPath:toPath:") = Bool, NSFileManager, NSError, NSString, NSString;
overload selector("fileManager:shouldProceedAfterError:movingItemAtURL:toURL:") = Bool, NSFileManager, NSError, NSURL, NSURL;
overload selector("fileManager:shouldProceedAfterError:removingItemAtPath:") = Bool, NSFileManager, NSError, NSString;
overload selector("fileManager:shouldProceedAfterError:removingItemAtURL:") = Bool, NSFileManager, NSError, NSURL;
overload selector("fileManager:shouldRemoveItemAtPath:") = Bool, NSFileManager, NSString;
overload selector("fileManager:shouldRemoveItemAtURL:") = Bool, NSFileManager, NSURL;
overload selector("fileManager:willProcessPath:") = Void, NSFileManager, NSString;
overload selector("fileModificationDate") = NSDate;
overload selector("fileOwnerAccountID") = NSNumber;
overload selector("fileOwnerAccountName") = NSString;
overload selector("filePathURL") = NSURL;
overload selector("filePosixPermissions") = UInt;
overload selector("fileReferenceURL") = NSURL;
overload selector("fileSize") = UInt64;
overload selector("fileSystemAttributesAtPath:") = NSDictionary, NSString;
overload selector("fileSystemFileNumber") = UInt;
overload selector("fileSystemNumber") = Int;
overload selector("fileSystemRepresentation") = Pointer[CChar];
overload selector("fileSystemRepresentationWithPath:") = Pointer[CChar], NSString;
overload selector("fileType") = NSString;
overload selector("fileURLWithPath:") = Id, NSString;
overload selector("fileURLWithPath:isDirectory:") = Id, NSString, Bool;
overload selector("fileURLWithPathComponents:") = NSURL, NSArray;
overload selector("fileWrappers") = NSDictionary;
overload selector("filename") = NSString;
overload selector("fill") = Void;
overload selector("fillWithBlendMode:alpha:") = Void, CGBlendMode, Float;
overload selector("filterUsingPredicate:") = Void, NSPredicate;
overload selector("filteredArrayUsingPredicate:") = NSArray, NSPredicate;
overload selector("filteredSetUsingPredicate:") = NSSet, NSPredicate;
overload selector("finalize") = Void;
overload selector("finishDecoding") = Void;
overload selector("finishEncoding") = Void;
overload selector("fire") = Void;
overload selector("fireDate") = NSDate;
overload selector("firstIndex") = UInt;
overload selector("firstMatchInString:options:range:") = NSTextCheckingResult, NSString, UInt, NSRange;
overload selector("firstObjectCommonWithArray:") = Id, NSArray;
overload selector("firstOtherButtonIndex") = Int;
overload selector("firstRectForRange:") = CGRect, UITextRange;
overload selector("firstWeekday") = UInt;
overload selector("flashScrollIndicators") = Void;
overload selector("flatness") = Float;
overload selector("floatForKey:") = Float, NSString;
overload selector("floatValue") = Float;
overload selector("font") = UIFont;
overload selector("fontName") = NSString;
overload selector("fontNamesForFamilyName:") = NSArray, NSString;
overload selector("fontWithName:size:") = UIFont, NSString, Float;
overload selector("fontWithSize:") = UIFont, Float;
overload selector("formIntersectionWithCharacterSet:") = Void, NSCharacterSet;
overload selector("formUnionWithCharacterSet:") = Void, NSCharacterSet;
overload selector("formatWidth") = UInt;
overload selector("formatterBehavior") = UInt;
overload selector("forwardInvocation:") = Void, NSInvocation;
overload selector("forwardingTargetForSelector:") = Id, SelectorHandle;
overload selector("fragment") = NSString;
overload selector("frame") = CGRect;
overload selector("frameLength") = UInt;
overload selector("function") = NSString;
overload selector("generalPasteboard") = UIPasteboard;
overload selector("generatesCalendarDates") = Bool;
overload selector("generatesDecimalNumbers") = Bool;
overload selector("gestureRecognizer:shouldReceiveTouch:") = Bool, UIGestureRecognizer, UITouch;
overload selector("gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:") = Bool, UIGestureRecognizer, UIGestureRecognizer;
overload selector("gestureRecognizerShouldBegin:") = Bool, UIGestureRecognizer;
overload selector("gestureRecognizers") = NSArray;
overload selector("getArgument:atIndex:") = Void, RawPointer, Int;
overload selector("getArgumentTypeAtIndex:") = Pointer[CChar], UInt;
overload selector("getBuffer:length:") = Bool, Pointer[Pointer[CUChar]], Pointer[UInt];
overload selector("getBytes:") = Void, RawPointer;
overload selector("getBytes:length:") = Void, RawPointer, UInt;
overload selector("getBytes:maxLength:usedLength:encoding:options:range:remainingRange:") = Bool, RawPointer, UInt, Pointer[UInt], UInt, UInt, NSRange, NSRangePointer;
overload selector("getBytes:range:") = Void, RawPointer, NSRange;
overload selector("getCFRunLoop") = CFRunLoopRef;
overload selector("getCString:") = Void, Pointer[CChar];
overload selector("getCString:maxLength:") = Void, Pointer[CChar], UInt;
overload selector("getCString:maxLength:encoding:") = Bool, Pointer[CChar], UInt, UInt;
overload selector("getCString:maxLength:range:remainingRange:") = Void, Pointer[CChar], UInt, NSRange, NSRangePointer;
overload selector("getCharacters:") = Void, Pointer[UShort];
overload selector("getCharacters:range:") = Void, Pointer[UShort], NSRange;
overload selector("getFileSystemRepresentation:maxLength:") = Bool, Pointer[CChar], UInt;
overload selector("getIndexes:") = Void, Pointer[UInt];
overload selector("getIndexes:maxCount:inIndexRange:") = UInt, Pointer[UInt], UInt, NSRangePointer;
overload selector("getInputStream:outputStream:") = Bool, Pointer[NSInputStream], Pointer[NSOutputStream];
overload selector("getLineDash:count:phase:") = Void, Pointer[Float], Pointer[Int], Pointer[Float];
overload selector("getLineStart:end:contentsEnd:forRange:") = Void, Pointer[UInt], Pointer[UInt], Pointer[UInt], NSRange;
overload selector("getObjectValue:forString:errorDescription:") = Bool, Pointer[Id], NSString, Pointer[NSString];
overload selector("getObjectValue:forString:range:error:") = Bool, Pointer[Id], NSString, Pointer[NSRange], Pointer[NSError];
overload selector("getObjects:") = Void, Pointer[Id];
overload selector("getObjects:andKeys:") = Void, Pointer[Id], Pointer[Id];
overload selector("getObjects:range:") = Void, Pointer[Id], NSRange;
overload selector("getParagraphStart:end:contentsEnd:forRange:") = Void, Pointer[UInt], Pointer[UInt], Pointer[UInt], NSRange;
overload selector("getResourceValue:forKey:error:") = Bool, Pointer[Id], NSString, Pointer[NSError];
overload selector("getReturnValue:") = Void, RawPointer;
overload selector("getValue:") = Void, RawPointer;
overload selector("globallyUniqueString") = NSString;
overload selector("goBack") = Void;
overload selector("goForward") = Void;
overload selector("grammarCheckingResultWithRange:details:") = NSTextCheckingResult, NSRange, NSArray;
overload selector("grammarDetails") = NSArray;
overload selector("grayColor") = UIColor;
overload selector("greenColor") = UIColor;
overload selector("gregorianStartDate") = NSDate;
overload selector("groupTableViewBackgroundColor") = UIColor;
overload selector("groupingLevel") = Int;
overload selector("groupingSeparator") = NSString;
overload selector("groupingSize") = UInt;
overload selector("groupsByEvent") = Bool;
overload varargSelector("handleFailureInFunction:file:lineNumber:description:") = Void, NSString, NSString, Int, NSString;
overload varargSelector("handleFailureInMethod:object:file:lineNumber:description:") = Void, SelectorHandle, Id, NSString, Int, NSString;
overload selector("handleMachMessage:") = Void, RawPointer;
overload selector("handlePortMessage:") = Void, NSPortMessage;
overload selector("hasAction") = Bool;
overload selector("hasBytesAvailable") = Bool;
overload selector("hasMemberInPlane:") = Bool, CUChar;
overload selector("hasPassword") = Bool;
overload selector("hasPrefix:") = Bool, NSString;
overload selector("hasSpaceAvailable") = Bool;
overload selector("hasSuffix:") = Bool, NSString;
overload selector("hasText") = Bool;
overload selector("hash") = UInt;
overload selector("helpAnchor") = NSString;
overload selector("hidesAccessoryWhenEditing") = Bool;
overload selector("hidesBackButton") = Bool;
overload selector("hidesBottomBarWhenPushed") = Bool;
overload selector("hidesForSinglePage") = Bool;
overload selector("hidesWhenStopped") = Bool;
overload selector("highlightedAnimationImages") = NSArray;
overload selector("highlightedImage") = UIImage;
overload selector("highlightedTextColor") = UIColor;
overload selector("hitTest:withEvent:") = UIView, CGPoint, UIEvent;
overload selector("host") = NSString;
overload selector("hostName") = NSString;
overload selector("hour") = Int;
overload selector("icons") = NSArray;
overload selector("identity") = SecIdentityRef;
overload selector("illegalCharacterSet") = Id;
overload selector("image") = UIImage;
overload selector("imageEdgeInsets") = UIEdgeInsets;
overload selector("imageForSegmentAtIndex:") = UIImage, UInt;
overload selector("imageForState:") = UIImage, UInt;
overload selector("imageInsets") = UIEdgeInsets;
overload selector("imageNamed:") = UIImage, NSString;
overload selector("imageOrientation") = UIImageOrientation;
overload selector("imagePickerController:didFinishPickingImage:editingInfo:") = Void, UIImagePickerController, UIImage, NSDictionary;
overload selector("imagePickerController:didFinishPickingMediaWithInfo:") = Void, UIImagePickerController, NSDictionary;
overload selector("imagePickerControllerDidCancel:") = Void, UIImagePickerController;
overload selector("imageRectForContentRect:") = CGRect, CGRect;
overload selector("imageView") = UIImageView;
overload selector("imageWithCGImage:") = UIImage, CGImageRef;
overload selector("imageWithCGImage:scale:orientation:") = UIImage, CGImageRef, Float, UIImageOrientation;
overload selector("imageWithContentsOfFile:") = UIImage, NSString;
overload selector("imageWithData:") = UIImage, NSData;
overload selector("images") = NSArray;
overload selector("increaseLengthBy:") = Void, UInt;
overload selector("indentationLevel") = Int;
overload selector("indentationWidth") = Float;
overload selector("indexAtPosition:") = UInt, UInt;
overload selector("indexGreaterThanIndex:") = UInt, UInt;
overload selector("indexGreaterThanOrEqualToIndex:") = UInt, UInt;
overload selector("indexInRange:options:passingTest:") = UInt, NSRange, UInt, UnknownType;
overload selector("indexLessThanIndex:") = UInt, UInt;
overload selector("indexLessThanOrEqualToIndex:") = UInt, UInt;
overload selector("indexOfAccessibilityElement:") = Int, Id;
overload selector("indexOfObject:") = UInt, Id;
overload selector("indexOfObject:inRange:") = UInt, Id, NSRange;
overload selector("indexOfObject:inSortedRange:options:usingComparator:") = UInt, Id, NSRange, UInt, NSComparator;
overload selector("indexOfObjectAtIndexes:options:passingTest:") = UInt, NSIndexSet, UInt, UnknownType;
overload selector("indexOfObjectIdenticalTo:") = UInt, Id;
overload selector("indexOfObjectIdenticalTo:inRange:") = UInt, Id, NSRange;
overload selector("indexOfObjectPassingTest:") = UInt, UnknownType;
overload selector("indexOfObjectWithOptions:passingTest:") = UInt, UInt, UnknownType;
overload selector("indexPassingTest:") = UInt, UnknownType;
overload selector("indexPathByAddingIndex:") = NSIndexPath, UInt;
overload selector("indexPathByRemovingLastIndex") = NSIndexPath;
overload selector("indexPathForCell:") = NSIndexPath, UITableViewCell;
overload selector("indexPathForRow:inSection:") = NSIndexPath, UInt, UInt;
overload selector("indexPathForRowAtPoint:") = NSIndexPath, CGPoint;
overload selector("indexPathForSelectedRow") = NSIndexPath;
overload selector("indexPathWithIndex:") = Id, UInt;
overload selector("indexPathWithIndexes:length:") = Id, Pointer[UInt], UInt;
overload selector("indexPathsForRowsInRect:") = NSArray, CGRect;
overload selector("indexPathsForVisibleRows") = NSArray;
overload selector("indexSet") = Id;
overload selector("indexSetWithIndex:") = Id, UInt;
overload selector("indexSetWithIndexesInRange:") = Id, NSRange;
overload selector("indexWithOptions:passingTest:") = UInt, UInt, UnknownType;
overload selector("indexesInRange:options:passingTest:") = NSIndexSet, NSRange, UInt, UnknownType;
overload selector("indexesOfObjectsAtIndexes:options:passingTest:") = NSIndexSet, NSIndexSet, UInt, UnknownType;
overload selector("indexesOfObjectsPassingTest:") = NSIndexSet, UnknownType;
overload selector("indexesOfObjectsWithOptions:passingTest:") = NSIndexSet, UInt, UnknownType;
overload selector("indexesPassingTest:") = NSIndexSet, UnknownType;
overload selector("indexesWithOptions:passingTest:") = NSIndexSet, UInt, UnknownType;
overload selector("indicatorStyle") = UIScrollViewIndicatorStyle;
overload selector("infoDictionary") = NSDictionary;
overload selector("init") = Id;
overload selector("initByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:") = Id, NSData, UInt, NSURL, Pointer[Bool], Pointer[NSError];
overload selector("initDirectoryWithFileWrappers:") = Id, NSDictionary;
overload selector("initFileURLWithPath:") = Id, NSString;
overload selector("initFileURLWithPath:isDirectory:") = Id, NSString, Bool;
overload selector("initForReadingWithData:") = Id, NSData;
overload selector("initForWritingWithMutableData:") = Id, NSMutableData;
overload selector("initRegularFileWithContents:") = Id, NSData;
overload selector("initSymbolicLinkWithDestination:") = Id, NSString;
overload selector("initSymbolicLinkWithDestinationURL:") = Id, NSURL;
overload selector("initToBuffer:capacity:") = Id, Pointer[CUChar], UInt;
overload selector("initToFileAtPath:append:") = Id, NSString, Bool;
overload selector("initToMemory") = Id;
overload selector("initWithAccessibilityContainer:") = Id, Id;
overload selector("initWithActivityIndicatorStyle:") = Id, UIActivityIndicatorViewStyle;
overload selector("initWithArray:") = Id, NSArray;
overload selector("initWithArray:copyItems:") = Id, NSArray, Bool;
overload selector("initWithAttributedString:") = Id, NSAttributedString;
overload selector("initWithAuthenticationChallenge:sender:") = Id, NSURLAuthenticationChallenge, Id;
overload selector("initWithBarButtonSystemItem:target:action:") = Id, UIBarButtonSystemItem, Id, SelectorHandle;
overload selector("initWithBool:") = Id, Bool;
overload selector("initWithBytes:length:") = Id, RawPointer, UInt;
overload selector("initWithBytes:length:encoding:") = Id, RawPointer, UInt, UInt;
overload selector("initWithBytes:objCType:") = Id, RawPointer, Pointer[CChar];
overload selector("initWithBytesNoCopy:length:") = Id, RawPointer, UInt;
overload selector("initWithBytesNoCopy:length:encoding:freeWhenDone:") = Id, RawPointer, UInt, UInt, Bool;
overload selector("initWithBytesNoCopy:length:freeWhenDone:") = Id, RawPointer, UInt, Bool;
overload selector("initWithCGColor:") = UIColor, CGColorRef;
overload selector("initWithCGImage:") = Id, CGImageRef;
overload selector("initWithCGImage:scale:orientation:") = Id, CGImageRef, Float, UIImageOrientation;
overload selector("initWithCString:") = Id, Pointer[CChar];
overload selector("initWithCString:encoding:") = Id, Pointer[CChar], UInt;
overload selector("initWithCString:length:") = Id, Pointer[CChar], UInt;
overload selector("initWithCStringNoCopy:length:freeWhenDone:") = Id, Pointer[CChar], UInt, Bool;
overload selector("initWithCalendarIdentifier:") = Id, NSString;
overload selector("initWithCapacity:") = Id, UInt;
overload selector("initWithChar:") = Id, CChar;
overload selector("initWithCharacters:length:") = Id, Pointer[UShort], UInt;
overload selector("initWithCharactersNoCopy:length:freeWhenDone:") = Id, Pointer[UShort], UInt, Bool;
overload selector("initWithCoder:") = Id, NSCoder;
overload selector("initWithCondition:") = Id, Int;
overload selector("initWithContentViewController:") = Id, UIViewController;
overload selector("initWithContentsOfFile:") = Id, NSString;
overload selector("initWithContentsOfFile:encoding:error:") = Id, NSString, UInt, Pointer[NSError];
overload selector("initWithContentsOfFile:options:error:") = Id, NSString, UInt, Pointer[NSError];
overload selector("initWithContentsOfFile:usedEncoding:error:") = Id, NSString, Pointer[UInt], Pointer[NSError];
overload selector("initWithContentsOfMappedFile:") = Id, NSString;
overload selector("initWithContentsOfURL:") = Id, NSURL;
overload selector("initWithContentsOfURL:encoding:error:") = Id, NSURL, UInt, Pointer[NSError];
overload selector("initWithContentsOfURL:options:error:") = Id, NSURL, UInt, Pointer[NSError];
overload selector("initWithContentsOfURL:usedEncoding:error:") = Id, NSURL, Pointer[UInt], Pointer[NSError];
overload selector("initWithCustomView:") = Id, UIView;
overload selector("initWithData:") = Id, NSData;
overload selector("initWithData:encoding:") = Id, NSData, UInt;
overload selector("initWithDecimal:") = Id, NSDecimal;
overload selector("initWithDictionary:") = Id, NSDictionary;
overload selector("initWithDictionary:copyItems:") = Id, NSDictionary, Bool;
overload selector("initWithDomain:code:userInfo:") = Id, NSString, Int, NSDictionary;
overload selector("initWithDomain:type:name:") = Id, NSString, NSString, NSString;
overload selector("initWithDomain:type:name:port:") = Id, NSString, NSString, NSString, Int;
overload selector("initWithDominantScript:languageMap:") = Id, NSString, NSDictionary;
overload selector("initWithDouble:") = Id, Double;
overload selector("initWithExpressionType:") = Id, UInt;
overload selector("initWithFileAtPath:") = Id, NSString;
overload selector("initWithFileDescriptor:") = Id, Int;
overload selector("initWithFileDescriptor:closeOnDealloc:") = Id, Int, Bool;
overload selector("initWithFireDate:interval:target:selector:userInfo:repeats:") = Id, NSDate, Double, Id, SelectorHandle, Id, Bool;
overload selector("initWithFloat:") = Id, Float;
overload varargSelector("initWithFormat:") = Id, NSString;
overload selector("initWithFormat:arguments:") = Id, NSString, va_list;
overload varargSelector("initWithFormat:locale:") = Id, NSString, Id;
overload selector("initWithFormat:locale:arguments:") = Id, NSString, Id, va_list;
overload selector("initWithFrame:") = Id, CGRect;
overload selector("initWithFrame:reuseIdentifier:") = Id, CGRect, NSString;
overload selector("initWithFrame:style:") = Id, CGRect, UITableViewStyle;
overload selector("initWithHost:port:protocol:realm:authenticationMethod:") = Id, NSString, Int, NSString, NSString, NSString;
overload selector("initWithHue:saturation:brightness:alpha:") = UIColor, Float, Float, Float, Float;
overload selector("initWithIdentity:certificates:persistence:") = Id, SecIdentityRef, NSArray, UInt;
overload selector("initWithImage:") = Id, UIImage;
overload selector("initWithImage:highlightedImage:") = Id, UIImage, UIImage;
overload selector("initWithImage:style:target:action:") = Id, UIImage, UIBarButtonItemStyle, Id, SelectorHandle;
overload selector("initWithIndex:") = Id, UInt;
overload selector("initWithIndexSet:") = Id, NSIndexSet;
overload selector("initWithIndexes:length:") = Id, Pointer[UInt], UInt;
overload selector("initWithIndexesInRange:") = Id, NSRange;
overload selector("initWithInt:") = Id, Int;
overload selector("initWithInteger:") = Id, Int;
overload selector("initWithInvocation:") = Id, NSInvocation;
overload selector("initWithItems:") = Id, NSArray;
overload selector("initWithKey:ascending:") = Id, NSString, Bool;
overload selector("initWithKey:ascending:comparator:") = Id, NSString, Bool, NSComparator;
overload selector("initWithKey:ascending:selector:") = Id, NSString, Bool, SelectorHandle;
overload selector("initWithLeftExpression:rightExpression:customSelector:") = Id, NSExpression, NSExpression, SelectorHandle;
overload selector("initWithLeftExpression:rightExpression:modifier:type:options:") = Id, NSExpression, NSExpression, UInt, UInt, UInt;
overload selector("initWithLength:") = Id, UInt;
overload selector("initWithLocaleIdentifier:") = Id, NSString;
overload selector("initWithLong:") = Id, CLong;
overload selector("initWithLongLong:") = Id, Int64;
overload selector("initWithMachPort:") = Id, UInt;
overload selector("initWithMachPort:options:") = Id, UInt, UInt;
overload selector("initWithMantissa:exponent:isNegative:") = Id, UInt64, Short, Bool;
overload selector("initWithMemoryCapacity:diskCapacity:diskPath:") = Id, UInt, UInt, NSString;
overload selector("initWithName:") = Id, NSString;
overload selector("initWithName:data:") = Id, NSString, NSData;
overload selector("initWithName:reason:userInfo:") = Id, NSString, NSString, NSDictionary;
overload selector("initWithNibName:bundle:") = Id, NSString, NSBundle;
overload selector("initWithNotificationCenter:") = Id, NSNotificationCenter;
overload varargSelector("initWithObjects:") = Id, Id;
overload selector("initWithObjects:count:") = Id, Pointer[Id], UInt;
overload selector("initWithObjects:forKeys:") = Id, NSArray, NSArray;
overload selector("initWithObjects:forKeys:count:") = Id, Pointer[Id], Pointer[Id], UInt;
overload varargSelector("initWithObjectsAndKeys:") = Id, Id;
overload selector("initWithPath:") = Id, NSString;
overload selector("initWithPattern:options:error:") = Id, NSString, UInt, Pointer[NSError];
overload selector("initWithPatternImage:") = UIColor, UIImage;
overload selector("initWithProgressViewStyle:") = Id, UIProgressViewStyle;
overload selector("initWithProperties:") = Id, NSDictionary;
overload selector("initWithProtectionSpace:proposedCredential:previousFailureCount:failureResponse:error:sender:") = Id, NSURLProtectionSpace, NSURLCredential, Int, NSURLResponse, NSError, Id;
overload selector("initWithProxyHost:port:type:realm:authenticationMethod:") = Id, NSString, Int, NSString, NSString, NSString;
overload selector("initWithRed:green:blue:alpha:") = UIColor, Float, Float, Float, Float;
overload selector("initWithRequest:cachedResponse:client:") = Id, NSURLRequest, NSCachedURLResponse, Id;
overload selector("initWithRequest:delegate:") = Id, NSURLRequest, Id;
overload selector("initWithRequest:delegate:startImmediately:") = Id, NSURLRequest, Id, Bool;
overload selector("initWithResponse:data:") = Id, NSURLResponse, NSData;
overload selector("initWithResponse:data:userInfo:storagePolicy:") = Id, NSURLResponse, NSData, NSDictionary, UInt;
overload selector("initWithRootViewController:") = Id, UIViewController;
overload selector("initWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:") = Id, UInt, Short, Bool, Bool, Bool, Bool;
overload selector("initWithScheme:host:path:") = Id, NSString, NSString, NSString;
overload selector("initWithSearchBar:contentsController:") = Id, UISearchBar, UIViewController;
overload selector("initWithSerializedRepresentation:") = Id, NSData;
overload selector("initWithSet:") = Id, NSSet;
overload selector("initWithSet:copyItems:") = Id, NSSet, Bool;
overload selector("initWithShort:") = Id, Short;
overload selector("initWithStorageLocation:") = Id, NSURL;
overload selector("initWithString:") = Id, NSString;
overload selector("initWithString:attributes:") = Id, NSString, NSDictionary;
overload selector("initWithString:locale:") = Id, NSString, Id;
overload selector("initWithString:relativeToURL:") = Id, NSString, NSURL;
overload selector("initWithStyle:") = Id, UITableViewStyle;
overload selector("initWithStyle:reuseIdentifier:") = Id, UITableViewCellStyle, NSString;
overload selector("initWithTabBarSystemItem:tag:") = Id, UITabBarSystemItem, Int;
overload selector("initWithTarget:action:") = Id, Id, SelectorHandle;
overload selector("initWithTarget:selector:object:") = Id, Id, SelectorHandle, Id;
overload selector("initWithTextInput:") = Id, UIResponder;
overload selector("initWithTimeInterval:sinceDate:") = Id, Double, NSDate;
overload selector("initWithTimeIntervalSince1970:") = Id, Double;
overload selector("initWithTimeIntervalSinceNow:") = Id, Double;
overload selector("initWithTimeIntervalSinceReferenceDate:") = Id, Double;
overload selector("initWithTitle:") = Id, NSString;
overload selector("initWithTitle:action:") = Id, NSString, SelectorHandle;
overload varargSelector("initWithTitle:delegate:cancelButtonTitle:destructiveButtonTitle:otherButtonTitles:") = Id, NSString, Id, NSString, NSString, NSString;
overload selector("initWithTitle:image:tag:") = Id, NSString, UIImage, Int;
overload varargSelector("initWithTitle:message:delegate:cancelButtonTitle:otherButtonTitles:") = Id, NSString, NSString, Id, NSString, NSString;
overload selector("initWithTitle:style:target:action:") = Id, NSString, UIBarButtonItemStyle, Id, SelectorHandle;
overload selector("initWithTrust:") = Id, SecTrustRef;
overload selector("initWithType:subpredicates:") = Id, UInt, NSArray;
overload selector("initWithTypes:error:") = Id, UInt64, Pointer[NSError];
overload selector("initWithURL:") = Id, NSURL;
overload selector("initWithURL:MIMEType:expectedContentLength:textEncodingName:") = Id, NSURL, NSString, Int, NSString;
overload selector("initWithURL:append:") = Id, NSURL, Bool;
overload selector("initWithURL:cachePolicy:timeoutInterval:") = Id, NSURL, UInt, Double;
overload selector("initWithURL:options:error:") = Id, NSURL, UInt, Pointer[NSError];
overload selector("initWithUTF8String:") = Id, Pointer[CChar];
overload selector("initWithUnsignedChar:") = Id, CUChar;
overload selector("initWithUnsignedInt:") = Id, UInt;
overload selector("initWithUnsignedInteger:") = Id, UInt;
overload selector("initWithUnsignedLong:") = Id, CULong;
overload selector("initWithUnsignedLongLong:") = Id, UInt64;
overload selector("initWithUnsignedShort:") = Id, UShort;
overload selector("initWithUser:") = Id, NSString;
overload selector("initWithUser:password:persistence:") = Id, NSString, NSString, UInt;
overload selector("initWithWhite:alpha:") = UIColor, Float, Float;
overload selector("initialize") = Void;
overload selector("inputAccessoryView") = UIView;
overload selector("inputDelegate") = Id;
overload selector("inputStreamWithData:") = Id, NSData;
overload selector("inputStreamWithFileAtPath:") = Id, NSString;
overload selector("inputStreamWithURL:") = Id, NSURL;
overload selector("inputView") = UIView;
overload selector("insertAttributedString:atIndex:") = Void, NSAttributedString, UInt;
overload selector("insertObject:atIndex:") = Void, Id, UInt;
overload selector("insertObjects:atIndexes:") = Void, NSArray, NSIndexSet;
overload selector("insertRowsAtIndexPaths:withRowAnimation:") = Void, NSArray, UITableViewRowAnimation;
overload selector("insertSections:withRowAnimation:") = Void, NSIndexSet, UITableViewRowAnimation;
overload selector("insertSegmentWithImage:atIndex:animated:") = Void, UIImage, UInt, Bool;
overload selector("insertSegmentWithTitle:atIndex:animated:") = Void, NSString, UInt, Bool;
overload selector("insertString:atIndex:") = Void, NSString, UInt;
overload selector("insertSubview:aboveSubview:") = Void, UIView, UIView;
overload selector("insertSubview:atIndex:") = Void, UIView, Int;
overload selector("insertSubview:belowSubview:") = Void, UIView, UIView;
overload selector("insertText:") = Void, NSString;
overload selector("instanceMethodForSelector:") = IMP, SelectorHandle;
overload selector("instanceMethodSignatureForSelector:") = NSMethodSignature, SelectorHandle;
overload selector("instancesRespondToSelector:") = Bool, SelectorHandle;
overload selector("instantiateWithOwner:options:") = NSArray, Id, NSDictionary;
overload selector("intValue") = Int;
overload selector("integerForKey:") = Int, NSString;
overload selector("integerValue") = Int;
overload selector("interactionControllerWithURL:") = UIDocumentInteractionController, NSURL;
overload selector("interfaceOrientation") = UIInterfaceOrientation;
overload selector("internationalCurrencySymbol") = NSString;
overload selector("intersectSet:") = Void, NSSet;
overload selector("intersectsIndexesInRange:") = Bool, NSRange;
overload selector("intersectsSet:") = Bool, NSSet;
overload selector("invalidate") = Void;
overload selector("invert") = Void;
overload selector("invertedSet") = NSCharacterSet;
overload selector("invocation") = NSInvocation;
overload selector("invocationWithMethodSignature:") = NSInvocation, NSMethodSignature;
overload selector("invoke") = Void;
overload selector("invokeWithTarget:") = Void, Id;
overload selector("isAbsolutePath") = Bool;
overload selector("isAccessibilityElement") = Bool;
overload selector("isActive") = Bool;
overload selector("isAnimating") = Bool;
overload selector("isAtEnd") = Bool;
overload selector("isBatteryMonitoringEnabled") = Bool;
overload selector("isCameraDeviceAvailable:") = Bool, UInt;
overload selector("isCancelled") = Bool;
overload selector("isConcurrent") = Bool;
overload selector("isContentDiscarded") = Bool;
overload selector("isContinuous") = Bool;
overload selector("isCustomizing") = Bool;
overload selector("isDaylightSavingTime") = Bool;
overload selector("isDaylightSavingTimeForDate:") = Bool, NSDate;
overload selector("isDecelerating") = Bool;
overload selector("isDeletableFileAtPath:") = Bool, NSString;
overload selector("isDescendantOfView:") = Bool, UIView;
overload selector("isDirectionalLockEnabled") = Bool;
overload selector("isDirectory") = Bool;
overload selector("isDragging") = Bool;
overload selector("isEditable") = Bool;
overload selector("isEditing") = Bool;
overload selector("isEmpty") = Bool;
overload selector("isEnabled") = Bool;
overload selector("isEnabledForSegmentAtIndex:") = Bool, UInt;
overload selector("isEqual:") = Bool, Id;
overload selector("isEqualToArray:") = Bool, NSArray;
overload selector("isEqualToAttributedString:") = Bool, NSAttributedString;
overload selector("isEqualToData:") = Bool, NSData;
overload selector("isEqualToDate:") = Bool, NSDate;
overload selector("isEqualToDictionary:") = Bool, NSDictionary;
overload selector("isEqualToIndexSet:") = Bool, NSIndexSet;
overload selector("isEqualToNumber:") = Bool, NSNumber;
overload selector("isEqualToSet:") = Bool, NSSet;
overload selector("isEqualToString:") = Bool, NSString;
overload selector("isEqualToTimeZone:") = Bool, NSTimeZone;
overload selector("isEqualToValue:") = Bool, NSValue;
overload selector("isExclusiveTouch") = Bool;
overload selector("isExecutableFileAtPath:") = Bool, NSString;
overload selector("isExecuting") = Bool;
overload selector("isFileReferenceURL") = Bool;
overload selector("isFileURL") = Bool;
overload selector("isFinished") = Bool;
overload selector("isFirstResponder") = Bool;
overload selector("isFlashAvailableForCameraDevice:") = Bool, UInt;
overload selector("isGeneratingDeviceOrientationNotifications") = Bool;
overload selector("isHTTPOnly") = Bool;
overload selector("isHidden") = Bool;
overload selector("isHighlighted") = Bool;
overload selector("isIdleTimerDisabled") = Bool;
overload selector("isIgnoringInteractionEvents") = Bool;
overload selector("isKeyWindow") = Bool;
overload selector("isKindOfClass:") = Bool, Id;
overload selector("isLenient") = Bool;
overload selector("isLoaded") = Bool;
overload selector("isLoading") = Bool;
overload selector("isMainThread") = Bool;
overload selector("isMemberOfClass:") = Bool, Id;
overload selector("isMenuVisible") = Bool;
overload selector("isModalInPopover") = Bool;
overload selector("isMomentary") = Bool;
overload selector("isMultiThreaded") = Bool;
overload selector("isMultipleTouchEnabled") = Bool;
overload selector("isMultitaskingSupported") = Bool;
overload selector("isNavigationBarHidden") = Bool;
overload selector("isNetworkActivityIndicatorVisible") = Bool;
overload selector("isOn") = Bool;
overload selector("isOneway") = Bool;
overload selector("isOpaque") = Bool;
overload selector("isPagingEnabled") = Bool;
overload selector("isPartialStringValid:newEditingString:errorDescription:") = Bool, NSString, Pointer[NSString], Pointer[NSString];
overload selector("isPartialStringValid:proposedSelectedRange:originalString:originalSelectedRange:errorDescription:") = Bool, Pointer[NSString], NSRangePointer, NSString, NSRange, Pointer[NSString];
overload selector("isPartialStringValidationEnabled") = Bool;
overload selector("isPersistent") = Bool;
overload selector("isPopoverVisible") = Bool;
overload selector("isPosition:atBoundary:inDirection:") = Bool, UITextPosition, UITextGranularity, Int;
overload selector("isPosition:withinTextUnit:inDirection:") = Bool, UITextPosition, UITextGranularity, Int;
overload selector("isProtectedDataAvailable") = Bool;
overload selector("isProximityMonitoringEnabled") = Bool;
overload selector("isProximitySensingEnabled") = Bool;
overload selector("isProxy") = Bool;
overload selector("isReadableFileAtPath:") = Bool, NSString;
overload selector("isReady") = Bool;
overload selector("isRedoing") = Bool;
overload selector("isRegularFile") = Bool;
overload selector("isScrollEnabled") = Bool;
overload selector("isSearchResultsButtonSelected") = Bool;
overload selector("isSecure") = Bool;
overload selector("isSecureTextEntry") = Bool;
overload selector("isSelected") = Bool;
overload selector("isSessionOnly") = Bool;
overload selector("isSourceTypeAvailable:") = Bool, UInt;
overload selector("isStatusBarHidden") = Bool;
overload selector("isSubclassOfClass:") = Bool, Id;
overload selector("isSubsetOfSet:") = Bool, NSSet;
overload selector("isSupersetOfSet:") = Bool, NSCharacterSet;
overload selector("isSuspended") = Bool;
overload selector("isSymbolicLink") = Bool;
overload selector("isToolbarHidden") = Bool;
overload selector("isTouchInside") = Bool;
overload selector("isTracking") = Bool;
overload selector("isTranslucent") = Bool;
overload selector("isUndoRegistrationEnabled") = Bool;
overload selector("isUndoing") = Bool;
overload selector("isUserInteractionEnabled") = Bool;
overload selector("isValid") = Bool;
overload selector("isViewLoaded") = Bool;
overload selector("isVisible") = Bool;
overload selector("isWritableFileAtPath:") = Bool, NSString;
overload selector("isZoomBouncing") = Bool;
overload selector("isZooming") = Bool;
overload selector("italicSystemFontOfSize:") = UIFont, Float;
overload selector("itemSetWithPasteboardTypes:") = NSIndexSet, NSArray;
overload selector("items") = NSArray;
overload selector("key") = NSString;
overload selector("keyEnumerator") = NSEnumerator;
overload selector("keyForFileWrapper:") = NSString, NSFileWrapper;
overload selector("keyPath") = NSString;
overload selector("keyPathsForValuesAffectingValueForKey:") = NSSet, NSString;
overload selector("keyWindow") = UIWindow;
overload selector("keyboardAppearance") = UIKeyboardAppearance;
overload selector("keyboardType") = UIKeyboardType;
overload selector("keysOfEntriesPassingTest:") = NSSet, UnknownType;
overload selector("keysOfEntriesWithOptions:passingTest:") = NSSet, UInt, UnknownType;
overload selector("keysSortedByValueUsingComparator:") = NSArray, NSComparator;
overload selector("keysSortedByValueUsingSelector:") = NSArray, SelectorHandle;
overload selector("keysSortedByValueWithOptions:usingComparator:") = NSArray, UInt, NSComparator;
overload selector("knownTimeZoneNames") = NSArray;
overload selector("labelFontSize") = Float;
overload selector("languageMap") = NSDictionary;
overload selector("languagesForScript:") = NSArray, NSString;
overload selector("lastIndex") = UInt;
overload selector("lastObject") = Id;
overload selector("lastPathComponent") = NSString;
overload selector("laterDate:") = NSDate, NSDate;
overload selector("layer") = CALayer;
overload selector("layerClass") = Id;
overload selector("layoutIfNeeded") = Void;
overload selector("layoutSubviews") = Void;
overload selector("leading") = Float;
overload selector("leftBarButtonItem") = UIBarButtonItem;
overload selector("leftCapWidth") = Int;
overload selector("leftExpression") = NSExpression;
overload selector("leftView") = UIView;
overload selector("leftViewMode") = UITextFieldViewMode;
overload selector("leftViewRectForBounds:") = CGRect, CGRect;
overload selector("length") = UInt;
overload selector("lengthOfBytesUsingEncoding:") = UInt, UInt;
overload selector("letterCharacterSet") = Id;
overload selector("level") = UInt;
overload selector("levelsOfUndo") = UInt;
overload selector("lightGrayColor") = UIColor;
overload selector("lightTextColor") = UIColor;
overload selector("limitDateForMode:") = NSDate, NSString;
overload selector("lineBreakMode") = UILineBreakMode;
overload selector("lineCapStyle") = CGLineCap;
overload selector("lineDirectionForLanguage:") = UInt, NSString;
overload selector("lineHeight") = Float;
overload selector("lineJoinStyle") = CGLineJoin;
overload selector("lineNumber") = Int;
overload selector("lineRangeForRange:") = NSRange, NSRange;
overload selector("lineWidth") = Float;
overload selector("linkCheckingResultWithRange:URL:") = NSTextCheckingResult, NSRange, NSURL;
overload selector("linkItemAtPath:toPath:error:") = Bool, NSString, NSString, Pointer[NSError];
overload selector("linkItemAtURL:toURL:error:") = Bool, NSURL, NSURL, Pointer[NSError];
overload selector("load") = Bool;
overload selector("loadAndReturnError:") = Bool, Pointer[NSError];
overload selector("loadData:MIMEType:textEncodingName:baseURL:") = Void, NSData, NSString, NSString, NSURL;
overload selector("loadHTMLString:baseURL:") = Void, NSString, NSURL;
overload selector("loadNibNamed:owner:options:") = NSArray, NSString, Id, NSDictionary;
overload selector("loadRequest:") = Void, NSURLRequest;
overload selector("loadView") = Void;
overload selector("localTimeZone") = NSTimeZone;
overload selector("locale") = Id;
overload selector("localeIdentifier") = NSString;
overload selector("localeIdentifierFromComponents:") = NSString, NSDictionary;
overload selector("localeIdentifierFromWindowsLocaleCode:") = NSString, UInt;
overload selector("localizations") = NSArray;
overload selector("localizedCaseInsensitiveCompare:") = Int, NSString;
overload selector("localizedCompare:") = Int, NSString;
overload selector("localizedDescription") = NSString;
overload selector("localizedFailureReason") = NSString;
overload selector("localizedInfoDictionary") = NSDictionary;
overload selector("localizedModel") = NSString;
overload selector("localizedName:locale:") = NSString, Int, NSLocale;
overload selector("localizedNameOfStringEncoding:") = NSString, UInt;
overload selector("localizedRecoveryOptions") = NSArray;
overload selector("localizedRecoverySuggestion") = NSString;
overload selector("localizedScannerWithString:") = Id, NSString;
overload selector("localizedStandardCompare:") = Int, NSString;
overload selector("localizedStringForKey:value:table:") = NSString, NSString, NSString, NSString;
overload selector("localizedStringForStatusCode:") = NSString, Int;
overload selector("localizedStringFromDate:dateStyle:timeStyle:") = NSString, NSDate, UInt, UInt;
overload selector("localizedStringFromNumber:numberStyle:") = NSString, NSNumber, UInt;
overload varargSelector("localizedStringWithFormat:") = Id, NSString;
overload selector("locationInView:") = CGPoint, UIView;
overload selector("locationOfTouch:inView:") = CGPoint, UInt, UIView;
overload selector("lock") = Void;
overload selector("lockBeforeDate:") = Bool, NSDate;
overload selector("lockWhenCondition:") = Void, Int;
overload selector("lockWhenCondition:beforeDate:") = Bool, Int, NSDate;
overload selector("longCharacterIsMember:") = Bool, CULong;
overload selector("longEraSymbols") = NSArray;
overload selector("longLongValue") = Int64;
overload selector("longValue") = CLong;
overload selector("lossyCString") = Pointer[CChar];
overload selector("lowercaseLetterCharacterSet") = Id;
overload selector("lowercaseString") = NSString;
overload selector("machPort") = UInt;
overload selector("magentaColor") = UIColor;
overload selector("main") = Void;
overload selector("mainBundle") = NSBundle;
overload selector("mainDocumentURL") = NSURL;
overload selector("mainQueue") = Id;
overload selector("mainRunLoop") = NSRunLoop;
overload selector("mainScreen") = UIScreen;
overload selector("mainThread") = NSThread;
overload selector("makeKeyAndVisible") = Void;
overload selector("makeKeyWindow") = Void;
overload selector("makeObjectsPerformSelector:") = Void, SelectorHandle;
overload selector("makeObjectsPerformSelector:withObject:") = Void, SelectorHandle, Id;
overload selector("markedTextRange") = UITextRange;
overload selector("markedTextStyle") = NSDictionary;
overload selector("matchesContentsOfURL:") = Bool, NSURL;
overload selector("matchesInString:options:range:") = NSArray, NSString, UInt, NSRange;
overload selector("maxConcurrentOperationCount") = Int;
overload selector("maximum") = NSNumber;
overload selector("maximumDate") = NSDate;
overload selector("maximumDecimalNumber") = NSDecimalNumber;
overload selector("maximumFractionDigits") = UInt;
overload selector("maximumIntegerDigits") = UInt;
overload selector("maximumLengthOfBytesUsingEncoding:") = UInt, UInt;
overload selector("maximumNumberOfTouches") = UInt;
overload selector("maximumRangeOfUnit:") = NSRange, UInt;
overload selector("maximumSignificantDigits") = UInt;
overload selector("maximumTrackImageForState:") = UIImage, UInt;
overload selector("maximumValue") = Float;
overload selector("maximumValueImage") = UIImage;
overload selector("maximumValueImageRectForBounds:") = CGRect, CGRect;
overload selector("maximumZoomScale") = Float;
overload selector("mediaPlaybackRequiresUserAction") = Bool;
overload selector("mediaTypes") = NSArray;
overload selector("member:") = Id, Id;
overload selector("memoryCapacity") = UInt;
overload selector("menuFrame") = CGRect;
overload selector("menuItems") = NSArray;
overload selector("message") = NSString;
overload selector("methodForSelector:") = IMP, SelectorHandle;
overload selector("methodReturnLength") = UInt;
overload selector("methodReturnType") = Pointer[CChar];
overload selector("methodSignature") = NSMethodSignature;
overload selector("methodSignatureForSelector:") = NSMethodSignature, SelectorHandle;
overload selector("minimum") = NSNumber;
overload selector("minimumDate") = NSDate;
overload selector("minimumDaysInFirstWeek") = UInt;
overload selector("minimumDecimalNumber") = NSDecimalNumber;
overload selector("minimumFontSize") = Float;
overload selector("minimumFractionDigits") = UInt;
overload selector("minimumIntegerDigits") = UInt;
overload selector("minimumNumberOfTouches") = UInt;
overload selector("minimumPressDuration") = Double;
overload selector("minimumRangeOfUnit:") = NSRange, UInt;
overload selector("minimumSignificantDigits") = UInt;
overload selector("minimumTrackImageForState:") = UIImage, UInt;
overload selector("minimumValue") = Float;
overload selector("minimumValueImage") = UIImage;
overload selector("minimumValueImageRectForBounds:") = CGRect, CGRect;
overload selector("minimumZoomScale") = Float;
overload selector("minusSet:") = Void, NSSet;
overload selector("minusSign") = NSString;
overload selector("minute") = Int;
overload selector("minuteInterval") = Int;
overload selector("miterLimit") = Float;
overload selector("modalPresentationStyle") = UIModalPresentationStyle;
overload selector("modalTransitionStyle") = UIModalTransitionStyle;
overload selector("modalViewController") = UIViewController;
overload selector("model") = NSString;
overload selector("month") = Int;
overload selector("monthSymbols") = NSArray;
overload selector("moreNavigationController") = UINavigationController;
overload selector("motionBegan:withEvent:") = Void, UIEventSubtype, UIEvent;
overload selector("motionCancelled:withEvent:") = Void, UIEventSubtype, UIEvent;
overload selector("motionEnded:withEvent:") = Void, UIEventSubtype, UIEvent;
overload selector("mountedVolumeURLsIncludingResourceValuesForKeys:options:") = NSArray, NSArray, UInt;
overload selector("moveItemAtPath:toPath:error:") = Bool, NSString, NSString, Pointer[NSError];
overload selector("moveItemAtURL:toURL:error:") = Bool, NSURL, NSURL, Pointer[NSError];
overload selector("moveToPoint:") = Void, CGPoint;
overload selector("multiplier") = NSNumber;
overload selector("mutableArrayValueForKey:") = NSMutableArray, NSString;
overload selector("mutableArrayValueForKeyPath:") = NSMutableArray, NSString;
overload selector("mutableBytes") = RawPointer;
overload selector("mutableCopy") = Id;
overload selector("mutableCopyWithZone:") = Id, Pointer[NSZone];
overload selector("mutableSetValueForKey:") = NSMutableSet, NSString;
overload selector("mutableSetValueForKeyPath:") = NSMutableSet, NSString;
overload selector("mutableString") = NSMutableString;
overload selector("name") = NSString;
overload selector("navigationBar") = UINavigationBar;
overload selector("navigationBar:didPopItem:") = Void, UINavigationBar, UINavigationItem;
overload selector("navigationBar:didPushItem:") = Void, UINavigationBar, UINavigationItem;
overload selector("navigationBar:shouldPopItem:") = Bool, UINavigationBar, UINavigationItem;
overload selector("navigationBar:shouldPushItem:") = Bool, UINavigationBar, UINavigationItem;
overload selector("navigationController") = UINavigationController;
overload selector("navigationController:didShowViewController:animated:") = Void, UINavigationController, UIViewController, Bool;
overload selector("navigationController:willShowViewController:animated:") = Void, UINavigationController, UIViewController, Bool;
overload selector("navigationItem") = UINavigationItem;
overload selector("needsToBeUpdatedFromPath:") = Bool, NSString;
overload selector("negativeFormat") = NSString;
overload selector("negativeInfinitySymbol") = NSString;
overload selector("negativePrefix") = NSString;
overload selector("negativeSuffix") = NSString;
overload selector("netService:didNotPublish:") = Void, NSNetService, NSDictionary;
overload selector("netService:didNotResolve:") = Void, NSNetService, NSDictionary;
overload selector("netService:didUpdateTXTRecordData:") = Void, NSNetService, NSData;
overload selector("netServiceBrowser:didFindDomain:moreComing:") = Void, NSNetServiceBrowser, NSString, Bool;
overload selector("netServiceBrowser:didFindService:moreComing:") = Void, NSNetServiceBrowser, NSNetService, Bool;
overload selector("netServiceBrowser:didNotSearch:") = Void, NSNetServiceBrowser, NSDictionary;
overload selector("netServiceBrowser:didRemoveDomain:moreComing:") = Void, NSNetServiceBrowser, NSString, Bool;
overload selector("netServiceBrowser:didRemoveService:moreComing:") = Void, NSNetServiceBrowser, NSNetService, Bool;
overload selector("netServiceBrowserDidStopSearch:") = Void, NSNetServiceBrowser;
overload selector("netServiceBrowserWillSearch:") = Void, NSNetServiceBrowser;
overload selector("netServiceDidPublish:") = Void, NSNetService;
overload selector("netServiceDidResolveAddress:") = Void, NSNetService;
overload selector("netServiceDidStop:") = Void, NSNetService;
overload selector("netServiceWillPublish:") = Void, NSNetService;
overload selector("netServiceWillResolve:") = Void, NSNetService;
overload selector("networkServiceType") = UInt;
overload selector("new") = Id;
overload selector("newlineCharacterSet") = Id;
overload selector("nextDaylightSavingTimeTransition") = NSDate;
overload selector("nextDaylightSavingTimeTransitionAfterDate:") = NSDate, NSDate;
overload selector("nextObject") = Id;
overload selector("nextResponder") = UIResponder;
overload selector("nibBundle") = NSBundle;
overload selector("nibName") = NSString;
overload selector("nibWithData:bundle:") = UINib, NSData, NSBundle;
overload selector("nibWithNibName:bundle:") = UINib, NSString, NSBundle;
overload selector("nilSymbol") = NSString;
overload selector("nonBaseCharacterSet") = Id;
overload selector("nonretainedObjectValue") = Id;
overload selector("notANumber") = NSDecimalNumber;
overload selector("notANumberSymbol") = NSString;
overload selector("notPredicateWithSubpredicate:") = NSPredicate, NSPredicate;
overload selector("notificationWithName:object:") = Id, NSString, Id;
overload selector("notificationWithName:object:userInfo:") = Id, NSString, Id, NSDictionary;
overload selector("null") = NSNull;
overload selector("numberFromString:") = NSNumber, NSString;
overload selector("numberOfArguments") = UInt;
overload selector("numberOfButtons") = Int;
overload selector("numberOfCaptureGroups") = UInt;
overload selector("numberOfComponents") = Int;
overload selector("numberOfComponentsInPickerView:") = Int, UIPickerView;
overload selector("numberOfItems") = Int;
overload selector("numberOfLines") = Int;
overload selector("numberOfMatchesInString:options:range:") = UInt, NSString, UInt, NSRange;
overload selector("numberOfPages") = Int;
overload selector("numberOfRanges") = UInt;
overload selector("numberOfRowsInComponent:") = Int, Int;
overload selector("numberOfRowsInSection:") = Int, Int;
overload selector("numberOfSections") = Int;
overload selector("numberOfSectionsInTableView:") = Int, UITableView;
overload selector("numberOfSegments") = UInt;
overload selector("numberOfTapsRequired") = Int;
overload selector("numberOfTouches") = UInt;
overload selector("numberOfTouchesRequired") = Int;
overload selector("numberStyle") = UInt;
overload selector("numberWithBool:") = NSNumber, Bool;
overload selector("numberWithChar:") = NSNumber, CChar;
overload selector("numberWithDouble:") = NSNumber, Double;
overload selector("numberWithFloat:") = NSNumber, Float;
overload selector("numberWithInt:") = NSNumber, Int;
overload selector("numberWithInteger:") = NSNumber, Int;
overload selector("numberWithLong:") = NSNumber, CLong;
overload selector("numberWithLongLong:") = NSNumber, Int64;
overload selector("numberWithShort:") = NSNumber, Short;
overload selector("numberWithUnsignedChar:") = NSNumber, CUChar;
overload selector("numberWithUnsignedInt:") = NSNumber, UInt;
overload selector("numberWithUnsignedInteger:") = NSNumber, UInt;
overload selector("numberWithUnsignedLong:") = NSNumber, CULong;
overload selector("numberWithUnsignedLongLong:") = NSNumber, UInt64;
overload selector("numberWithUnsignedShort:") = NSNumber, UShort;
overload selector("objCType") = Pointer[CChar];
overload selector("object") = Id;
overload selector("objectAtIndex:") = Id, UInt;
overload selector("objectEnumerator") = NSEnumerator;
overload selector("objectForInfoDictionaryKey:") = Id, NSString;
overload selector("objectForKey:") = Id, Id;
overload selector("objectIsForcedForKey:") = Bool, NSString;
overload selector("objectIsForcedForKey:inDomain:") = Bool, NSString, NSString;
overload selector("objectZone") = Pointer[NSZone];
overload selector("objectsAtIndexes:") = NSArray, NSIndexSet;
overload selector("objectsForKeys:notFoundMarker:") = NSArray, NSArray, Id;
overload selector("objectsPassingTest:") = NSSet, UnknownType;
overload selector("objectsWithOptions:passingTest:") = NSSet, UInt, UnknownType;
overload selector("observationInfo") = RawPointer;
overload selector("observeValueForKeyPath:ofObject:change:context:") = Void, NSString, Id, NSDictionary, RawPointer;
overload selector("offsetFromPosition:toPosition:") = Int, UITextPosition, UITextPosition;
overload selector("offsetInFile") = UInt64;
overload selector("one") = NSDecimalNumber;
overload selector("open") = Void;
overload selector("openURL:") = Bool, NSURL;
overload selector("operand") = NSExpression;
overload selector("operatingSystem") = UInt;
overload selector("operatingSystemName") = NSString;
overload selector("operatingSystemVersionString") = NSString;
overload selector("operationCount") = UInt;
overload selector("operations") = NSArray;
overload selector("options") = UInt;
overload selector("orPredicateWithSubpredicates:") = NSPredicate, NSArray;
overload selector("orangeColor") = UIColor;
overload selector("ordinalityOfUnit:inUnit:forDate:") = UInt, UInt, UInt, NSDate;
overload selector("orientation") = UIDeviceOrientation;
overload selector("orthography") = NSOrthography;
overload selector("orthographyCheckingResultWithRange:orthography:") = NSTextCheckingResult, NSRange, NSOrthography;
overload selector("orthographyWithDominantScript:languageMap:") = Id, NSString, NSDictionary;
overload selector("outputFormat") = UInt;
overload selector("outputStreamToBuffer:capacity:") = Id, Pointer[CUChar], UInt;
overload selector("outputStreamToFileAtPath:append:") = Id, NSString, Bool;
overload selector("outputStreamToMemory") = Id;
overload selector("outputStreamWithURL:append:") = Id, NSURL, Bool;
overload selector("paddingCharacter") = NSString;
overload selector("paddingPosition") = UInt;
overload selector("paragraphRangeForRange:") = NSRange, NSRange;
overload selector("parameterString") = NSString;
overload selector("parentViewController") = UIViewController;
overload selector("parse") = Bool;
overload selector("parser:didEndElement:namespaceURI:qualifiedName:") = Void, NSXMLParser, NSString, NSString, NSString;
overload selector("parser:didEndMappingPrefix:") = Void, NSXMLParser, NSString;
overload selector("parser:didStartElement:namespaceURI:qualifiedName:attributes:") = Void, NSXMLParser, NSString, NSString, NSString, NSDictionary;
overload selector("parser:didStartMappingPrefix:toURI:") = Void, NSXMLParser, NSString, NSString;
overload selector("parser:foundAttributeDeclarationWithName:forElement:type:defaultValue:") = Void, NSXMLParser, NSString, NSString, NSString, NSString;
overload selector("parser:foundCDATA:") = Void, NSXMLParser, NSData;
overload selector("parser:foundCharacters:") = Void, NSXMLParser, NSString;
overload selector("parser:foundComment:") = Void, NSXMLParser, NSString;
overload selector("parser:foundElementDeclarationWithName:model:") = Void, NSXMLParser, NSString, NSString;
overload selector("parser:foundExternalEntityDeclarationWithName:publicID:systemID:") = Void, NSXMLParser, NSString, NSString, NSString;
overload selector("parser:foundIgnorableWhitespace:") = Void, NSXMLParser, NSString;
overload selector("parser:foundInternalEntityDeclarationWithName:value:") = Void, NSXMLParser, NSString, NSString;
overload selector("parser:foundNotationDeclarationWithName:publicID:systemID:") = Void, NSXMLParser, NSString, NSString, NSString;
overload selector("parser:foundProcessingInstructionWithTarget:data:") = Void, NSXMLParser, NSString, NSString;
overload selector("parser:foundUnparsedEntityDeclarationWithName:publicID:systemID:notationName:") = Void, NSXMLParser, NSString, NSString, NSString, NSString;
overload selector("parser:parseErrorOccurred:") = Void, NSXMLParser, NSError;
overload selector("parser:resolveExternalEntityName:systemID:") = NSData, NSXMLParser, NSString, NSString;
overload selector("parser:validationErrorOccurred:") = Void, NSXMLParser, NSError;
overload selector("parserDidEndDocument:") = Void, NSXMLParser;
overload selector("parserDidStartDocument:") = Void, NSXMLParser;
overload selector("parserError") = NSError;
overload selector("passthroughViews") = NSArray;
overload selector("password") = NSString;
overload selector("paste:") = Void, Id;
overload selector("pasteboardTypes") = NSArray;
overload selector("pasteboardTypesForItemSet:") = NSArray, NSIndexSet;
overload selector("pasteboardWithName:create:") = UIPasteboard, NSString, Bool;
overload selector("pasteboardWithUniqueName") = UIPasteboard;
overload selector("path") = NSString;
overload selector("pathComponents") = NSArray;
overload selector("pathContentOfSymbolicLinkAtPath:") = NSString, NSString;
overload selector("pathExtension") = NSString;
overload selector("pathForAuxiliaryExecutable:") = NSString, NSString;
overload selector("pathForResource:ofType:") = NSString, NSString, NSString;
overload selector("pathForResource:ofType:inDirectory:") = NSString, NSString, NSString, NSString;
overload selector("pathForResource:ofType:inDirectory:forLocalization:") = NSString, NSString, NSString, NSString, NSString;
overload selector("pathWithComponents:") = NSString, NSArray;
overload selector("pathsForResourcesOfType:inDirectory:") = NSArray, NSString, NSString;
overload selector("pathsForResourcesOfType:inDirectory:forLocalization:") = NSArray, NSString, NSString, NSString;
overload selector("pathsMatchingExtensions:") = NSArray, NSArray;
overload selector("pattern") = NSString;
overload selector("perMillSymbol") = NSString;
overload selector("percentSymbol") = NSString;
overload selector("performSelector:") = Id, SelectorHandle;
overload selector("performSelector:onThread:withObject:waitUntilDone:") = Void, SelectorHandle, NSThread, Id, Bool;
overload selector("performSelector:onThread:withObject:waitUntilDone:modes:") = Void, SelectorHandle, NSThread, Id, Bool, NSArray;
overload selector("performSelector:target:argument:order:modes:") = Void, SelectorHandle, Id, Id, UInt, NSArray;
overload selector("performSelector:withObject:") = Id, SelectorHandle, Id;
overload selector("performSelector:withObject:afterDelay:") = Void, SelectorHandle, Id, Double;
overload selector("performSelector:withObject:afterDelay:inModes:") = Void, SelectorHandle, Id, Double, NSArray;
overload selector("performSelector:withObject:withObject:") = Id, SelectorHandle, Id, Id;
overload selector("performSelectorInBackground:withObject:") = Void, SelectorHandle, Id;
overload selector("performSelectorOnMainThread:withObject:waitUntilDone:") = Void, SelectorHandle, Id, Bool;
overload selector("performSelectorOnMainThread:withObject:waitUntilDone:modes:") = Void, SelectorHandle, Id, Bool, NSArray;
overload selector("persistence") = UInt;
overload selector("persistentDomainForName:") = NSDictionary, NSString;
overload selector("persistentDomainNames") = NSArray;
overload selector("phase") = UITouchPhase;
overload selector("phoneNumber") = NSString;
overload selector("phoneNumberCheckingResultWithRange:phoneNumber:") = NSTextCheckingResult, NSRange, NSString;
overload selector("physicalMemory") = UInt64;
overload selector("pickerView:accessibilityHintForComponent:") = NSString, UIPickerView, Int;
overload selector("pickerView:accessibilityLabelForComponent:") = NSString, UIPickerView, Int;
overload selector("pickerView:didSelectRow:inComponent:") = Void, UIPickerView, Int, Int;
overload selector("pickerView:numberOfRowsInComponent:") = Int, UIPickerView, Int;
overload selector("pickerView:rowHeightForComponent:") = Float, UIPickerView, Int;
overload selector("pickerView:titleForRow:forComponent:") = NSString, UIPickerView, Int, Int;
overload selector("pickerView:viewForRow:forComponent:reusingView:") = UIView, UIPickerView, Int, Int, UIView;
overload selector("pickerView:widthForComponent:") = Float, UIPickerView, Int;
overload selector("pipe") = Id;
overload selector("pixelAspectRatio") = Float;
overload selector("placeholder") = NSString;
overload selector("placeholderRectForBounds:") = CGRect, CGRect;
overload selector("plusSign") = NSString;
overload selector("pointInside:withEvent:") = Bool, CGPoint, UIEvent;
overload selector("pointSize") = Float;
overload selector("pointerValue") = RawPointer;
overload selector("popNavigationItemAnimated:") = UINavigationItem, Bool;
overload selector("popToRootViewControllerAnimated:") = NSArray, Bool;
overload selector("popToViewController:animated:") = NSArray, UIViewController, Bool;
overload selector("popViewControllerAnimated:") = UIViewController, Bool;
overload selector("popoverArrowDirection") = UInt;
overload selector("popoverContentSize") = CGSize;
overload selector("popoverControllerDidDismissPopover:") = Void, UIPopoverController;
overload selector("popoverControllerShouldDismissPopover:") = Bool, UIPopoverController;
overload selector("port") = Id;
overload selector("portList") = NSArray;
overload selector("portWithMachPort:") = NSPort, UInt;
overload selector("portWithMachPort:options:") = NSPort, UInt, UInt;
overload selector("positionFromPosition:inDirection:offset:") = UITextPosition, UITextPosition, UITextLayoutDirection, Int;
overload selector("positionFromPosition:offset:") = UITextPosition, UITextPosition, Int;
overload selector("positionFromPosition:toBoundary:inDirection:") = UITextPosition, UITextPosition, UITextGranularity, Int;
overload selector("positionWithinRange:atCharacterOffset:") = UITextPosition, UITextRange, Int;
overload selector("positionWithinRange:farthestInDirection:") = UITextPosition, UITextRange, UITextLayoutDirection;
overload selector("positiveFormat") = NSString;
overload selector("positiveInfinitySymbol") = NSString;
overload selector("positivePrefix") = NSString;
overload selector("positiveSuffix") = NSString;
overload selector("possibleTitles") = NSSet;
overload selector("postNotification:") = Void, NSNotification;
overload selector("postNotificationName:object:") = Void, NSString, Id;
overload selector("postNotificationName:object:userInfo:") = Void, NSString, Id, NSDictionary;
overload selector("precomposedStringWithCanonicalMapping") = NSString;
overload selector("precomposedStringWithCompatibilityMapping") = NSString;
overload selector("predicate") = NSPredicate;
overload selector("predicateFormat") = NSString;
overload selector("predicateOperatorType") = UInt;
overload selector("predicateWithBlock:") = NSPredicate, UnknownType;
overload varargSelector("predicateWithFormat:") = NSPredicate, NSString;
overload selector("predicateWithFormat:argumentArray:") = NSPredicate, NSString, NSArray;
overload selector("predicateWithFormat:arguments:") = NSPredicate, NSString, va_list;
overload selector("predicateWithLeftExpression:rightExpression:customSelector:") = NSPredicate, NSExpression, NSExpression, SelectorHandle;
overload selector("predicateWithLeftExpression:rightExpression:modifier:type:options:") = NSPredicate, NSExpression, NSExpression, UInt, UInt, UInt;
overload selector("predicateWithSubstitutionVariables:") = NSPredicate, NSDictionary;
overload selector("predicateWithValue:") = NSPredicate, Bool;
overload selector("preferredFilename") = NSString;
overload selector("preferredLanguages") = NSArray;
overload selector("preferredLocalizations") = NSArray;
overload selector("preferredLocalizationsFromArray:") = NSArray, NSArray;
overload selector("preferredLocalizationsFromArray:forPreferences:") = NSArray, NSArray, NSArray;
overload selector("preflightAndReturnError:") = Bool, Pointer[NSError];
overload selector("prepareForReuse") = Void;
overload selector("prepareWithInvocationTarget:") = Id, Id;
overload selector("presentLocalNotificationNow:") = Void, UILocalNotification;
overload selector("presentModalViewController:animated:") = Void, UIViewController, Bool;
overload selector("presentOpenInMenuFromBarButtonItem:animated:") = Bool, UIBarButtonItem, Bool;
overload selector("presentOpenInMenuFromRect:inView:animated:") = Bool, CGRect, UIView, Bool;
overload selector("presentOptionsMenuFromBarButtonItem:animated:") = Bool, UIBarButtonItem, Bool;
overload selector("presentOptionsMenuFromRect:inView:animated:") = Bool, CGRect, UIView, Bool;
overload selector("presentPopoverFromBarButtonItem:permittedArrowDirections:animated:") = Void, UIBarButtonItem, UInt, Bool;
overload selector("presentPopoverFromRect:inView:permittedArrowDirections:animated:") = Void, CGRect, UIView, UInt, Bool;
overload selector("presentPreviewAnimated:") = Bool, Bool;
overload selector("previousFailureCount") = Int;
overload selector("previousLocationInView:") = CGPoint, UIView;
overload selector("principalClass") = Id;
overload selector("privateFrameworksPath") = NSString;
overload selector("privateFrameworksURL") = NSURL;
overload selector("processIdentifier") = Int;
overload selector("processInfo") = NSProcessInfo;
overload selector("processName") = NSString;
overload selector("processorCount") = UInt;
overload selector("progress") = Float;
overload selector("progressViewStyle") = UIProgressViewStyle;
overload selector("prompt") = NSString;
overload selector("properties") = NSDictionary;
overload selector("propertyForKey:") = Id, NSString;
overload selector("propertyForKey:inRequest:") = Id, NSString, NSURLRequest;
overload selector("propertyList") = Id;
overload selector("propertyList:isValidForFormat:") = Bool, Id, UInt;
overload selector("propertyListFromData:mutabilityOption:format:errorDescription:") = Id, NSData, UInt, Pointer[UInt], Pointer[NSString];
overload selector("propertyListFromStringsFileFormat") = NSDictionary;
overload selector("propertyListWithData:options:format:error:") = Id, NSData, UInt, Pointer[UInt], Pointer[NSError];
overload selector("propertyListWithStream:options:format:error:") = Id, NSInputStream, UInt, Pointer[UInt], Pointer[NSError];
overload selector("proposedCredential") = NSURLCredential;
overload selector("protectionSpace") = NSURLProtectionSpace;
overload selector("protocol") = NSString;
overload selector("proximityState") = Bool;
overload selector("proxyType") = NSString;
overload selector("publicID") = NSString;
overload selector("publish") = Void;
overload selector("publishWithOptions:") = Void, UInt;
overload selector("punctuationCharacterSet") = Id;
overload selector("purpleColor") = UIColor;
overload selector("pushNavigationItem:animated:") = Void, UINavigationItem, Bool;
overload selector("pushViewController:animated:") = Void, UIViewController, Bool;
overload selector("quarter") = Int;
overload selector("quarterSymbols") = NSArray;
overload selector("query") = NSString;
overload selector("queuePriority") = Int;
overload selector("quoteCheckingResultWithRange:replacementString:") = NSTextCheckingResult, NSRange, NSString;
overload selector("raise") = Void;
overload varargSelector("raise:format:") = Void, NSString, NSString;
overload selector("raise:format:arguments:") = Void, NSString, NSString, va_list;
overload selector("range") = NSRange;
overload selector("rangeAtIndex:") = NSRange, UInt;
overload selector("rangeEnclosingPosition:withGranularity:inDirection:") = UITextRange, UITextPosition, UITextGranularity, Int;
overload selector("rangeOfCharacterFromSet:") = NSRange, NSCharacterSet;
overload selector("rangeOfCharacterFromSet:options:") = NSRange, NSCharacterSet, UInt;
overload selector("rangeOfCharacterFromSet:options:range:") = NSRange, NSCharacterSet, UInt, NSRange;
overload selector("rangeOfComposedCharacterSequenceAtIndex:") = NSRange, UInt;
overload selector("rangeOfComposedCharacterSequencesForRange:") = NSRange, NSRange;
overload selector("rangeOfData:options:range:") = NSRange, NSData, UInt, NSRange;
overload selector("rangeOfFirstMatchInString:options:range:") = NSRange, NSString, UInt, NSRange;
overload selector("rangeOfString:") = NSRange, NSString;
overload selector("rangeOfString:options:") = NSRange, NSString, UInt;
overload selector("rangeOfString:options:range:") = NSRange, NSString, UInt, NSRange;
overload selector("rangeOfString:options:range:locale:") = NSRange, NSString, UInt, NSRange, NSLocale;
overload selector("rangeOfUnit:inUnit:forDate:") = NSRange, UInt, UInt, NSDate;
overload selector("rangeOfUnit:startDate:interval:forDate:") = Bool, UInt, Pointer[NSDate], Pointer[Double], NSDate;
overload selector("rangeValue") = NSRange;
overload selector("read:maxLength:") = Int, Pointer[CUChar], UInt;
overload selector("readDataOfLength:") = NSData, UInt;
overload selector("readDataToEndOfFile") = NSData;
overload selector("readFromURL:options:error:") = Bool, NSURL, UInt, Pointer[NSError];
overload selector("readInBackgroundAndNotify") = Void;
overload selector("readInBackgroundAndNotifyForModes:") = Void, NSArray;
overload selector("readToEndOfFileInBackgroundAndNotify") = Void;
overload selector("readToEndOfFileInBackgroundAndNotifyForModes:") = Void, NSArray;
overload selector("realm") = NSString;
overload selector("reason") = NSString;
overload selector("receivesCredentialSecurely") = Bool;
overload selector("recoveryAttempter") = Id;
overload selector("rectForFooterInSection:") = CGRect, Int;
overload selector("rectForHeaderInSection:") = CGRect, Int;
overload selector("rectForRowAtIndexPath:") = CGRect, NSIndexPath;
overload selector("rectForSection:") = CGRect, Int;
overload selector("redColor") = UIColor;
overload selector("redo") = Void;
overload selector("redoActionName") = NSString;
overload selector("redoMenuItemTitle") = NSString;
overload selector("redoMenuTitleForUndoActionName:") = NSString, NSString;
overload selector("registerClass:") = Bool, Id;
overload selector("registerDefaults:") = Void, NSDictionary;
overload selector("registerForRemoteNotificationTypes:") = Void, UIRemoteNotificationType;
overload selector("registerUndoWithTarget:selector:object:") = Void, Id, SelectorHandle, Id;
overload selector("regularExpression") = NSRegularExpression;
overload selector("regularExpressionCheckingResultWithRanges:count:regularExpression:") = NSTextCheckingResult, NSRangePointer, UInt, NSRegularExpression;
overload selector("regularExpressionWithPattern:options:error:") = NSRegularExpression, NSString, UInt, Pointer[NSError];
overload selector("regularFileContents") = NSData;
overload selector("relativePath") = NSString;
overload selector("relativeString") = NSString;
overload selector("release") = Void;
overload selector("reload") = Void;
overload selector("reloadAllComponents") = Void;
overload selector("reloadComponent:") = Void, Int;
overload selector("reloadData") = Void;
overload selector("reloadInputViews") = Void;
overload selector("reloadRowsAtIndexPaths:withRowAnimation:") = Void, NSArray, UITableViewRowAnimation;
overload selector("reloadSectionIndexTitles") = Void;
overload selector("reloadSections:withRowAnimation:") = Void, NSIndexSet, UITableViewRowAnimation;
overload selector("remoteControlReceivedWithEvent:") = Void, UIEvent;
overload selector("removeAllActions") = Void;
overload selector("removeAllActionsWithTarget:") = Void, Id;
overload selector("removeAllCachedResponses") = Void;
overload selector("removeAllIndexes") = Void;
overload selector("removeAllObjects") = Void;
overload selector("removeAllPoints") = Void;
overload selector("removeAllSegments") = Void;
overload selector("removeAttribute:range:") = Void, NSString, NSRange;
overload selector("removeCachedResponseForRequest:") = Void, NSURLRequest;
overload selector("removeCharactersInRange:") = Void, NSRange;
overload selector("removeCharactersInString:") = Void, NSString;
overload selector("removeCredential:forProtectionSpace:") = Void, NSURLCredential, NSURLProtectionSpace;
overload selector("removeDependency:") = Void, NSOperation;
overload selector("removeFileWrapper:") = Void, NSFileWrapper;
overload selector("removeFromRunLoop:forMode:") = Void, NSRunLoop, NSString;
overload selector("removeFromSuperview") = Void;
overload selector("removeGestureRecognizer:") = Void, UIGestureRecognizer;
overload selector("removeIndex:") = Void, UInt;
overload selector("removeIndexes:") = Void, NSIndexSet;
overload selector("removeIndexesInRange:") = Void, NSRange;
overload selector("removeItemAtPath:error:") = Bool, NSString, Pointer[NSError];
overload selector("removeItemAtURL:error:") = Bool, NSURL, Pointer[NSError];
overload selector("removeLastObject") = Void;
overload selector("removeObject:") = Void, Id;
overload selector("removeObject:inRange:") = Void, Id, NSRange;
overload selector("removeObjectAtIndex:") = Void, UInt;
overload selector("removeObjectForKey:") = Void, Id;
overload selector("removeObjectIdenticalTo:") = Void, Id;
overload selector("removeObjectIdenticalTo:inRange:") = Void, Id, NSRange;
overload selector("removeObjectsAtIndexes:") = Void, NSIndexSet;
overload selector("removeObjectsForKeys:") = Void, NSArray;
overload selector("removeObjectsFromIndices:numIndices:") = Void, Pointer[UInt], UInt;
overload selector("removeObjectsInArray:") = Void, NSArray;
overload selector("removeObjectsInRange:") = Void, NSRange;
overload selector("removeObserver:") = Void, Id;
overload selector("removeObserver:forKeyPath:") = Void, NSObject, NSString;
overload selector("removeObserver:fromObjectsAtIndexes:forKeyPath:") = Void, NSObject, NSIndexSet, NSString;
overload selector("removeObserver:name:object:") = Void, Id, NSString, Id;
overload selector("removePasteboardWithName:") = Void, NSString;
overload selector("removePersistentDomainForName:") = Void, NSString;
overload selector("removePort:forMode:") = Void, NSPort, NSString;
overload selector("removePropertyForKey:inRequest:") = Void, NSString, NSMutableURLRequest;
overload selector("removeSegmentAtIndex:animated:") = Void, UInt, Bool;
overload selector("removeSuiteNamed:") = Void, NSString;
overload selector("removeTarget:action:") = Void, Id, SelectorHandle;
overload selector("removeTarget:action:forControlEvents:") = Void, Id, SelectorHandle, UInt;
overload selector("removeVolatileDomainForName:") = Void, NSString;
overload selector("repeatCalendar") = NSCalendar;
overload selector("repeatInterval") = UInt;
overload selector("replaceBytesInRange:withBytes:") = Void, NSRange, RawPointer;
overload selector("replaceBytesInRange:withBytes:length:") = Void, NSRange, RawPointer, UInt;
overload selector("replaceCharactersInRange:withAttributedString:") = Void, NSRange, NSAttributedString;
overload selector("replaceCharactersInRange:withString:") = Void, NSRange, NSString;
overload selector("replaceItemAtURL:withItemAtURL:backupItemName:options:resultingItemURL:error:") = Bool, NSURL, NSURL, NSString, UInt, Pointer[NSURL], Pointer[NSError];
overload selector("replaceMatchesInString:options:range:withTemplate:") = UInt, NSMutableString, UInt, NSRange, NSString;
overload selector("replaceObjectAtIndex:withObject:") = Void, UInt, Id;
overload selector("replaceObjectsAtIndexes:withObjects:") = Void, NSIndexSet, NSArray;
overload selector("replaceObjectsInRange:withObjectsFromArray:") = Void, NSRange, NSArray;
overload selector("replaceObjectsInRange:withObjectsFromArray:range:") = Void, NSRange, NSArray, NSRange;
overload selector("replaceOccurrencesOfString:withString:options:range:") = UInt, NSString, NSString, UInt, NSRange;
overload selector("replaceRange:withText:") = Void, UITextRange, NSString;
overload selector("replacementCheckingResultWithRange:replacementString:") = NSTextCheckingResult, NSRange, NSString;
overload selector("replacementObjectForCoder:") = Id, NSCoder;
overload selector("replacementObjectForKeyedArchiver:") = Id, NSKeyedArchiver;
overload selector("replacementString") = NSString;
overload selector("replacementStringForResult:inString:offset:template:") = NSString, NSTextCheckingResult, NSString, Int, NSString;
overload selector("request") = NSURLRequest;
overload selector("requestHeaderFieldsWithCookies:") = NSDictionary, NSArray;
overload selector("requestIsCacheEquivalent:toRequest:") = Bool, NSURLRequest, NSURLRequest;
overload selector("requestWithURL:") = Id, NSURL;
overload selector("requestWithURL:cachePolicy:timeoutInterval:") = Id, NSURL, UInt, Double;
overload selector("requireGestureRecognizerToFail:") = Void, UIGestureRecognizer;
overload selector("reservedSpaceLength") = UInt;
overload selector("resetBytesInRange:") = Void, NSRange;
overload selector("resetStandardUserDefaults") = Void;
overload selector("resetSystemTimeZone") = Void;
overload selector("resignFirstResponder") = Bool;
overload selector("resignKeyWindow") = Void;
overload selector("resolve") = Void;
overload selector("resolveClassMethod:") = Bool, SelectorHandle;
overload selector("resolveInstanceMethod:") = Bool, SelectorHandle;
overload selector("resolveWithTimeout:") = Void, Double;
overload selector("resourcePath") = NSString;
overload selector("resourceSpecifier") = NSString;
overload selector("resourceURL") = NSURL;
overload selector("resourceValuesForKeys:error:") = NSDictionary, NSArray, Pointer[NSError];
overload selector("resourceValuesForKeys:fromBookmarkData:") = NSDictionary, NSArray, NSData;
overload selector("respondsToSelector:") = Bool, SelectorHandle;
overload selector("response") = NSURLResponse;
overload selector("result") = Id;
overload selector("resultType") = UInt64;
overload selector("retain") = Id;
overload selector("retainArguments") = Void;
overload selector("retainCount") = UInt;
overload selector("returnKeyType") = UIReturnKeyType;
overload selector("reuseIdentifier") = NSString;
overload selector("reverseObjectEnumerator") = NSEnumerator;
overload selector("reverseTransformedValue:") = Id, Id;
overload selector("reversedSortDescriptor") = Id;
overload selector("reversesTitleShadowWhenHighlighted") = Bool;
overload selector("rightBarButtonItem") = UIBarButtonItem;
overload selector("rightExpression") = NSExpression;
overload selector("rightView") = UIView;
overload selector("rightViewMode") = UITextFieldViewMode;
overload selector("rightViewRectForBounds:") = CGRect, CGRect;
overload selector("rootViewController") = UIViewController;
overload selector("rotatingFooterView") = UIView;
overload selector("rotatingHeaderView") = UIView;
overload selector("rotation") = Float;
overload selector("roundingIncrement") = NSNumber;
overload selector("roundingMode") = UInt;
overload selector("row") = UInt;
overload selector("rowHeight") = Float;
overload selector("rowSizeForComponent:") = CGSize, Int;
overload selector("run") = Void;
overload selector("runLoopModes") = NSArray;
overload selector("runMode:beforeDate:") = Bool, NSString, NSDate;
overload selector("runUntilDate:") = Void, NSDate;
overload selector("scale") = Short;
overload selector("scalesPageToFit") = Bool;
overload selector("scanCharactersFromSet:intoString:") = Bool, NSCharacterSet, Pointer[NSString];
overload selector("scanDecimal:") = Bool, Pointer[NSDecimal];
overload selector("scanDouble:") = Bool, Pointer[Double];
overload selector("scanFloat:") = Bool, Pointer[Float];
overload selector("scanHexDouble:") = Bool, Pointer[Double];
overload selector("scanHexFloat:") = Bool, Pointer[Float];
overload selector("scanHexInt:") = Bool, Pointer[UInt];
overload selector("scanHexLongLong:") = Bool, Pointer[UInt64];
overload selector("scanInt:") = Bool, Pointer[Int];
overload selector("scanInteger:") = Bool, Pointer[Int];
overload selector("scanLocation") = UInt;
overload selector("scanLongLong:") = Bool, Pointer[Int64];
overload selector("scanString:intoString:") = Bool, NSString, Pointer[NSString];
overload selector("scanUpToCharactersFromSet:intoString:") = Bool, NSCharacterSet, Pointer[NSString];
overload selector("scanUpToString:intoString:") = Bool, NSString, Pointer[NSString];
overload selector("scannerWithString:") = Id, NSString;
overload selector("scheduleInRunLoop:forMode:") = Void, NSRunLoop, NSString;
overload selector("scheduleLocalNotification:") = Void, UILocalNotification;
overload selector("scheduledLocalNotifications") = NSArray;
overload selector("scheduledTimerWithTimeInterval:invocation:repeats:") = NSTimer, Double, NSInvocation, Bool;
overload selector("scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:") = NSTimer, Double, Id, SelectorHandle, Id, Bool;
overload selector("scheme") = NSString;
overload selector("scopeButtonTitles") = NSArray;
overload selector("screen") = UIScreen;
overload selector("screens") = NSArray;
overload selector("scrollIndicatorInsets") = UIEdgeInsets;
overload selector("scrollRangeToVisible:") = Void, NSRange;
overload selector("scrollRectToVisible:animated:") = Void, CGRect, Bool;
overload selector("scrollToNearestSelectedRowAtScrollPosition:animated:") = Void, UITableViewScrollPosition, Bool;
overload selector("scrollToRowAtIndexPath:atScrollPosition:animated:") = Void, NSIndexPath, UITableViewScrollPosition, Bool;
overload selector("scrollViewDidEndDecelerating:") = Void, UIScrollView;
overload selector("scrollViewDidEndDragging:willDecelerate:") = Void, UIScrollView, Bool;
overload selector("scrollViewDidEndScrollingAnimation:") = Void, UIScrollView;
overload selector("scrollViewDidEndZooming:withView:atScale:") = Void, UIScrollView, UIView, Float;
overload selector("scrollViewDidScroll:") = Void, UIScrollView;
overload selector("scrollViewDidScrollToTop:") = Void, UIScrollView;
overload selector("scrollViewDidZoom:") = Void, UIScrollView;
overload selector("scrollViewShouldScrollToTop:") = Bool, UIScrollView;
overload selector("scrollViewTexturedBackgroundColor") = UIColor;
overload selector("scrollViewWillBeginDecelerating:") = Void, UIScrollView;
overload selector("scrollViewWillBeginDragging:") = Void, UIScrollView;
overload selector("scrollViewWillBeginZooming:withView:") = Void, UIScrollView, UIView;
overload selector("scrollsToTop") = Bool;
overload selector("searchBar") = UISearchBar;
overload selector("searchBar:selectedScopeButtonIndexDidChange:") = Void, UISearchBar, Int;
overload selector("searchBar:shouldChangeTextInRange:replacementText:") = Bool, UISearchBar, NSRange, NSString;
overload selector("searchBar:textDidChange:") = Void, UISearchBar, NSString;
overload selector("searchBarBookmarkButtonClicked:") = Void, UISearchBar;
overload selector("searchBarCancelButtonClicked:") = Void, UISearchBar;
overload selector("searchBarResultsListButtonClicked:") = Void, UISearchBar;
overload selector("searchBarSearchButtonClicked:") = Void, UISearchBar;
overload selector("searchBarShouldBeginEditing:") = Bool, UISearchBar;
overload selector("searchBarShouldEndEditing:") = Bool, UISearchBar;
overload selector("searchBarTextDidBeginEditing:") = Void, UISearchBar;
overload selector("searchBarTextDidEndEditing:") = Void, UISearchBar;
overload selector("searchContentsController") = UIViewController;
overload selector("searchDisplayController") = UISearchDisplayController;
overload selector("searchDisplayController:didHideSearchResultsTableView:") = Void, UISearchDisplayController, UITableView;
overload selector("searchDisplayController:didLoadSearchResultsTableView:") = Void, UISearchDisplayController, UITableView;
overload selector("searchDisplayController:didShowSearchResultsTableView:") = Void, UISearchDisplayController, UITableView;
overload selector("searchDisplayController:shouldReloadTableForSearchScope:") = Bool, UISearchDisplayController, Int;
overload selector("searchDisplayController:shouldReloadTableForSearchString:") = Bool, UISearchDisplayController, NSString;
overload selector("searchDisplayController:willHideSearchResultsTableView:") = Void, UISearchDisplayController, UITableView;
overload selector("searchDisplayController:willShowSearchResultsTableView:") = Void, UISearchDisplayController, UITableView;
overload selector("searchDisplayController:willUnloadSearchResultsTableView:") = Void, UISearchDisplayController, UITableView;
overload selector("searchDisplayControllerDidBeginSearch:") = Void, UISearchDisplayController;
overload selector("searchDisplayControllerDidEndSearch:") = Void, UISearchDisplayController;
overload selector("searchDisplayControllerWillBeginSearch:") = Void, UISearchDisplayController;
overload selector("searchDisplayControllerWillEndSearch:") = Void, UISearchDisplayController;
overload selector("searchForBrowsableDomains") = Void;
overload selector("searchForRegistrationDomains") = Void;
overload selector("searchForServicesOfType:inDomain:") = Void, NSString, NSString;
overload selector("searchResultsDataSource") = Id;
overload selector("searchResultsDelegate") = Id;
overload selector("searchResultsTableView") = UITableView;
overload selector("second") = Int;
overload selector("secondaryGroupingSize") = UInt;
overload selector("secondsFromGMT") = Int;
overload selector("secondsFromGMTForDate:") = Int, NSDate;
overload selector("section") = UInt;
overload selector("sectionFooterHeight") = Float;
overload selector("sectionForObject:collationStringSelector:") = Int, Id, SelectorHandle;
overload selector("sectionForSectionIndexTitleAtIndex:") = Int, Int;
overload selector("sectionHeaderHeight") = Float;
overload selector("sectionIndexMinimumDisplayRowCount") = Int;
overload selector("sectionIndexTitles") = NSArray;
overload selector("sectionIndexTitlesForTableView:") = NSArray, UITableView;
overload selector("sectionTitles") = NSArray;
overload selector("seekToEndOfFile") = UInt64;
overload selector("seekToFileOffset:") = Void, UInt64;
overload selector("segmentedControlStyle") = UISegmentedControlStyle;
overload selector("select:") = Void, Id;
overload selector("selectAll:") = Void, Id;
overload selector("selectRow:inComponent:animated:") = Void, Int, Int, Bool;
overload selector("selectRowAtIndexPath:animated:scrollPosition:") = Void, NSIndexPath, Bool, UITableViewScrollPosition;
overload selector("selectedBackgroundView") = UIView;
overload selector("selectedImage") = UIImage;
overload selector("selectedIndex") = UInt;
overload selector("selectedItem") = UITabBarItem;
overload selector("selectedRange") = NSRange;
overload selector("selectedRowInComponent:") = Int, Int;
overload selector("selectedScopeButtonIndex") = Int;
overload selector("selectedSegmentIndex") = Int;
overload selector("selectedTextColor") = UIColor;
overload selector("selectedTextRange") = UITextRange;
overload selector("selectedViewController") = UIViewController;
overload selector("selectionAffinity") = UITextStorageDirection;
overload selector("selectionDidChange:") = Void, Id;
overload selector("selectionStyle") = UITableViewCellSelectionStyle;
overload selector("selectionWillChange:") = Void, Id;
overload selector("selector") = SelectorHandle;
overload selector("self") = Id;
overload selector("sendAction:to:forEvent:") = Void, SelectorHandle, Id, UIEvent;
overload selector("sendAction:to:from:forEvent:") = Bool, SelectorHandle, Id, Id, UIEvent;
overload selector("sendActionsForControlEvents:") = Void, UInt;
overload selector("sendBeforeDate:components:from:reserved:") = Bool, NSDate, NSMutableArray, NSPort, UInt;
overload selector("sendBeforeDate:msgid:components:from:reserved:") = Bool, NSDate, UInt, NSMutableArray, NSPort, UInt;
overload selector("sendEvent:") = Void, UIEvent;
overload selector("sendSubviewToBack:") = Void, UIView;
overload selector("sendSynchronousRequest:returningResponse:error:") = NSData, NSURLRequest, Pointer[NSURLResponse], Pointer[NSError];
overload selector("sender") = Id;
overload selector("separatorColor") = UIColor;
overload selector("separatorStyle") = UITableViewCellSeparatorStyle;
overload selector("serializedRepresentation") = NSData;
overload selector("serverTrust") = SecTrustRef;
overload selector("set") = Id;
overload selector("setAMSymbol:") = Void, NSString;
overload selector("setAbbreviationDictionary:") = Void, NSDictionary;
overload selector("setAccessibilityContainer:") = Void, Id;
overload selector("setAccessibilityFrame:") = Void, CGRect;
overload selector("setAccessibilityHint:") = Void, NSString;
overload selector("setAccessibilityLabel:") = Void, NSString;
overload selector("setAccessibilityLanguage:") = Void, NSString;
overload selector("setAccessibilityTraits:") = Void, UInt64;
overload selector("setAccessibilityValue:") = Void, NSString;
overload selector("setAccessoryAction:") = Void, SelectorHandle;
overload selector("setAccessoryType:") = Void, UITableViewCellAccessoryType;
overload selector("setAccessoryView:") = Void, UIView;
overload selector("setAction:") = Void, SelectorHandle;
overload selector("setActionName:") = Void, NSString;
overload selector("setActionSheetStyle:") = Void, UIActionSheetStyle;
overload selector("setActive:") = Void, Bool;
overload selector("setActive:animated:") = Void, Bool, Bool;
overload selector("setActivityIndicatorViewStyle:") = Void, UIActivityIndicatorViewStyle;
overload selector("setAdjustsFontSizeToFitWidth:") = Void, Bool;
overload selector("setAdjustsImageWhenDisabled:") = Void, Bool;
overload selector("setAdjustsImageWhenHighlighted:") = Void, Bool;
overload selector("setAlertAction:") = Void, NSString;
overload selector("setAlertBody:") = Void, NSString;
overload selector("setAlertLaunchImage:") = Void, NSString;
overload selector("setAllHTTPHeaderFields:") = Void, NSDictionary;
overload selector("setAllowableMovement:") = Void, Float;
overload selector("setAllowsEditing:") = Void, Bool;
overload selector("setAllowsFloats:") = Void, Bool;
overload selector("setAllowsImageEditing:") = Void, Bool;
overload selector("setAllowsInlineMediaPlayback:") = Void, Bool;
overload selector("setAllowsSelection:") = Void, Bool;
overload selector("setAllowsSelectionDuringEditing:") = Void, Bool;
overload selector("setAlpha:") = Void, Float;
overload selector("setAlwaysBounceHorizontal:") = Void, Bool;
overload selector("setAlwaysBounceVertical:") = Void, Bool;
overload selector("setAlwaysShowsDecimalSeparator:") = Void, Bool;
overload selector("setAnimationBeginsFromCurrentState:") = Void, Bool;
overload selector("setAnimationCurve:") = Void, UIViewAnimationCurve;
overload selector("setAnimationDelay:") = Void, Double;
overload selector("setAnimationDelegate:") = Void, Id;
overload selector("setAnimationDidStopSelector:") = Void, SelectorHandle;
overload selector("setAnimationDuration:") = Void, Double;
overload selector("setAnimationImages:") = Void, NSArray;
overload selector("setAnimationRepeatAutoreverses:") = Void, Bool;
overload selector("setAnimationRepeatCount:") = Void, Float;
overload selector("setAnimationStartDate:") = Void, NSDate;
overload selector("setAnimationTransition:forView:cache:") = Void, UIViewAnimationTransition, UIView, Bool;
overload selector("setAnimationWillStartSelector:") = Void, SelectorHandle;
overload selector("setAnimationsEnabled:") = Void, Bool;
overload selector("setAnnotation:") = Void, Id;
overload selector("setApplicationIconBadgeNumber:") = Void, Int;
overload selector("setApplicationSupportsShakeToEdit:") = Void, Bool;
overload selector("setArgument:atIndex:") = Void, RawPointer, Int;
overload selector("setArray:") = Void, NSArray;
overload selector("setArrowDirection:") = Void, UIMenuControllerArrowDirection;
overload selector("setAttributedString:") = Void, NSAttributedString;
overload selector("setAttributes:ofItemAtPath:error:") = Bool, NSDictionary, NSString, Pointer[NSError];
overload selector("setAttributes:range:") = Void, NSDictionary, NSRange;
overload selector("setAutocapitalizationType:") = Void, UITextAutocapitalizationType;
overload selector("setAutocorrectionType:") = Void, UITextAutocorrectionType;
overload selector("setAutoresizesSubviews:") = Void, Bool;
overload selector("setAutoresizingMask:") = Void, UInt;
overload selector("setBackBarButtonItem:") = Void, UIBarButtonItem;
overload selector("setBackground:") = Void, UIImage;
overload selector("setBackgroundColor:") = Void, UIColor;
overload selector("setBackgroundImage:forState:") = Void, UIImage, UInt;
overload selector("setBackgroundView:") = Void, UIView;
overload selector("setBadgeValue:") = Void, NSString;
overload selector("setBarStyle:") = Void, UIBarStyle;
overload selector("setBaseWritingDirection:forRange:") = Void, UITextWritingDirection, UITextRange;
overload selector("setBaselineAdjustment:") = Void, UIBaselineAdjustment;
overload selector("setBatteryMonitoringEnabled:") = Void, Bool;
overload selector("setBool:forKey:") = Void, Bool, NSString;
overload selector("setBorderStyle:") = Void, UITextBorderStyle;
overload selector("setBounces:") = Void, Bool;
overload selector("setBouncesZoom:") = Void, Bool;
overload selector("setBounds:") = Void, CGRect;
overload selector("setByAddingObject:") = NSSet, Id;
overload selector("setByAddingObjectsFromArray:") = NSSet, NSArray;
overload selector("setByAddingObjectsFromSet:") = NSSet, NSSet;
overload selector("setCGPath:") = Void, CGPathRef;
overload selector("setCachePolicy:") = Void, UInt;
overload selector("setCalendar:") = Void, NSCalendar;
overload selector("setCameraCaptureMode:") = Void, UInt;
overload selector("setCameraDevice:") = Void, UInt;
overload selector("setCameraFlashMode:") = Void, Int;
overload selector("setCameraOverlayView:") = Void, UIView;
overload selector("setCameraViewTransform:") = Void, CGAffineTransform;
overload selector("setCanCancelContentTouches:") = Void, Bool;
overload selector("setCancelButtonIndex:") = Void, Int;
overload selector("setCancelsTouchesInView:") = Void, Bool;
overload selector("setCaseSensitive:") = Void, Bool;
overload selector("setCenter:") = Void, CGPoint;
overload selector("setCharactersToBeSkipped:") = Void, NSCharacterSet;
overload selector("setClass:forClassName:") = Void, Id, NSString;
overload selector("setClassName:forClass:") = Void, NSString, Id;
overload selector("setClearButtonMode:") = Void, UITextFieldViewMode;
overload selector("setClearsContextBeforeDrawing:") = Void, Bool;
overload selector("setClearsOnBeginEditing:") = Void, Bool;
overload selector("setClearsSelectionOnViewWillAppear:") = Void, Bool;
overload selector("setClipsToBounds:") = Void, Bool;
overload selector("setColor:") = Void, UIColor;
overload selector("setColors:") = Void, NSArray;
overload selector("setCompletionBlock:") = Void, UnknownType;
overload selector("setContentEdgeInsets:") = Void, UIEdgeInsets;
overload selector("setContentHorizontalAlignment:") = Void, UIControlContentHorizontalAlignment;
overload selector("setContentInset:") = Void, UIEdgeInsets;
overload selector("setContentMode:") = Void, UIViewContentMode;
overload selector("setContentOffset:") = Void, CGPoint;
overload selector("setContentOffset:animated:") = Void, CGPoint, Bool;
overload selector("setContentOffset:forSegmentAtIndex:") = Void, CGSize, UInt;
overload selector("setContentScaleFactor:") = Void, Float;
overload selector("setContentSize:") = Void, CGSize;
overload selector("setContentSizeForViewInPopover:") = Void, CGSize;
overload selector("setContentStretch:") = Void, CGRect;
overload selector("setContentVerticalAlignment:") = Void, UIControlContentVerticalAlignment;
overload selector("setContentViewController:") = Void, UIViewController;
overload selector("setContentViewController:animated:") = Void, UIViewController, Bool;
overload selector("setContinuous:") = Void, Bool;
overload selector("setCookie:") = Void, NSHTTPCookie;
overload selector("setCookieAcceptPolicy:") = Void, UInt;
overload selector("setCookies:forURL:mainDocumentURL:") = Void, NSArray, NSURL, NSURL;
overload selector("setCountDownDuration:") = Void, Double;
overload selector("setCountLimit:") = Void, UInt;
overload selector("setCredential:forProtectionSpace:") = Void, NSURLCredential, NSURLProtectionSpace;
overload selector("setCurrencyCode:") = Void, NSString;
overload selector("setCurrencyDecimalSeparator:") = Void, NSString;
overload selector("setCurrencyGroupingSeparator:") = Void, NSString;
overload selector("setCurrencySymbol:") = Void, NSString;
overload selector("setCurrentMode:") = Void, UIScreenMode;
overload selector("setCurrentPage:") = Void, Int;
overload selector("setCustomView:") = Void, UIView;
overload selector("setCustomizableViewControllers:") = Void, NSArray;
overload selector("setData:") = Void, NSData;
overload selector("setData:forPasteboardType:") = Void, NSData, NSString;
overload selector("setDataDetectorTypes:") = Void, UInt;
overload selector("setDataSource:") = Void, Id;
overload selector("setDate:") = Void, NSDate;
overload selector("setDate:animated:") = Void, NSDate, Bool;
overload selector("setDateFormat:") = Void, NSString;
overload selector("setDatePickerMode:") = Void, UIDatePickerMode;
overload selector("setDateStyle:") = Void, UInt;
overload selector("setDay:") = Void, Int;
overload selector("setDecelerationRate:") = Void, Float;
overload selector("setDecimalSeparator:") = Void, NSString;
overload selector("setDefaultBehavior:") = Void, Id;
overload selector("setDefaultCredential:forProtectionSpace:") = Void, NSURLCredential, NSURLProtectionSpace;
overload selector("setDefaultDate:") = Void, NSDate;
overload selector("setDefaultFormatterBehavior:") = Void, UInt;
overload selector("setDefaultTimeZone:") = Void, NSTimeZone;
overload selector("setDefersCurrentPageDisplay:") = Void, Bool;
overload selector("setDelaysContentTouches:") = Void, Bool;
overload selector("setDelaysTouchesBegan:") = Void, Bool;
overload selector("setDelaysTouchesEnded:") = Void, Bool;
overload selector("setDelegate:") = Void, Id;
overload selector("setDestructiveButtonIndex:") = Void, Int;
overload selector("setDetectsPhoneNumbers:") = Void, Bool;
overload selector("setDictionary:") = Void, NSDictionary;
overload selector("setDirection:") = Void, UISwipeGestureRecognizerDirection;
overload selector("setDirectionalLockEnabled:") = Void, Bool;
overload selector("setDisabledBackground:") = Void, UIImage;
overload selector("setDiskCapacity:") = Void, UInt;
overload selector("setDoesRelativeDateFormatting:") = Void, Bool;
overload selector("setDouble:forKey:") = Void, Double, NSString;
overload selector("setEditAction:") = Void, SelectorHandle;
overload selector("setEditable:") = Void, Bool;
overload selector("setEditing:") = Void, Bool;
overload selector("setEditing:animated:") = Void, Bool, Bool;
overload selector("setEditingAccessoryType:") = Void, UITableViewCellAccessoryType;
overload selector("setEditingAccessoryView:") = Void, UIView;
overload selector("setEnabled:") = Void, Bool;
overload selector("setEnabled:forSegmentAtIndex:") = Void, Bool, UInt;
overload selector("setEnablesReturnKeyAutomatically:") = Void, Bool;
overload selector("setEra:") = Void, Int;
overload selector("setEraSymbols:") = Void, NSArray;
overload selector("setEvictsObjectsWithDiscardedContent:") = Void, Bool;
overload selector("setExclusiveTouch:") = Void, Bool;
overload selector("setExponentSymbol:") = Void, NSString;
overload selector("setFileAttributes:") = Void, NSDictionary;
overload selector("setFilename:") = Void, NSString;
overload selector("setFill") = Void;
overload selector("setFireDate:") = Void, NSDate;
overload selector("setFirstWeekday:") = Void, UInt;
overload selector("setFlatness:") = Void, Float;
overload selector("setFloat:forKey:") = Void, Float, NSString;
overload selector("setFont:") = Void, UIFont;
overload selector("setFormatWidth:") = Void, UInt;
overload selector("setFormatterBehavior:") = Void, UInt;
overload selector("setFrame:") = Void, CGRect;
overload selector("setGeneratesCalendarDates:") = Void, Bool;
overload selector("setGeneratesDecimalNumbers:") = Void, Bool;
overload selector("setGestureRecognizers:") = Void, NSArray;
overload selector("setGregorianStartDate:") = Void, NSDate;
overload selector("setGroupingSeparator:") = Void, NSString;
overload selector("setGroupingSize:") = Void, UInt;
overload selector("setGroupsByEvent:") = Void, Bool;
overload selector("setHTTPBody:") = Void, NSData;
overload selector("setHTTPBodyStream:") = Void, NSInputStream;
overload selector("setHTTPMethod:") = Void, NSString;
overload selector("setHTTPShouldHandleCookies:") = Void, Bool;
overload selector("setHTTPShouldUsePipelining:") = Void, Bool;
overload selector("setHasAction:") = Void, Bool;
overload selector("setHidden:") = Void, Bool;
overload selector("setHidesAccessoryWhenEditing:") = Void, Bool;
overload selector("setHidesBackButton:") = Void, Bool;
overload selector("setHidesBackButton:animated:") = Void, Bool, Bool;
overload selector("setHidesBottomBarWhenPushed:") = Void, Bool;
overload selector("setHidesForSinglePage:") = Void, Bool;
overload selector("setHidesWhenStopped:") = Void, Bool;
overload selector("setHighlighted:") = Void, Bool;
overload selector("setHighlighted:animated:") = Void, Bool, Bool;
overload selector("setHighlightedAnimationImages:") = Void, NSArray;
overload selector("setHighlightedImage:") = Void, UIImage;
overload selector("setHighlightedTextColor:") = Void, UIColor;
overload selector("setHour:") = Void, Int;
overload selector("setIdleTimerDisabled:") = Void, Bool;
overload selector("setImage:") = Void, UIImage;
overload selector("setImage:forSegmentAtIndex:") = Void, UIImage, UInt;
overload selector("setImage:forState:") = Void, UIImage, UInt;
overload selector("setImageEdgeInsets:") = Void, UIEdgeInsets;
overload selector("setImageInsets:") = Void, UIEdgeInsets;
overload selector("setImages:") = Void, NSArray;
overload selector("setIndentationLevel:") = Void, Int;
overload selector("setIndentationWidth:") = Void, Float;
overload selector("setIndicatorStyle:") = Void, UIScrollViewIndicatorStyle;
overload selector("setInputAccessoryView:") = Void, UIView;
overload selector("setInputDelegate:") = Void, Id;
overload selector("setInputView:") = Void, UIView;
overload selector("setInteger:forKey:") = Void, Int, NSString;
overload selector("setInternationalCurrencySymbol:") = Void, NSString;
overload selector("setIsAccessibilityElement:") = Void, Bool;
overload selector("setItems:") = Void, NSArray;
overload selector("setItems:animated:") = Void, NSArray, Bool;
overload selector("setKeepAliveTimeout:handler:") = Bool, Double, UnknownType;
overload selector("setKeyboardAppearance:") = Void, UIKeyboardAppearance;
overload selector("setKeyboardType:") = Void, UIKeyboardType;
overload selector("setLeftBarButtonItem:") = Void, UIBarButtonItem;
overload selector("setLeftBarButtonItem:animated:") = Void, UIBarButtonItem, Bool;
overload selector("setLeftView:") = Void, UIView;
overload selector("setLeftViewMode:") = Void, UITextFieldViewMode;
overload selector("setLength:") = Void, UInt;
overload selector("setLenient:") = Void, Bool;
overload selector("setLevelsOfUndo:") = Void, UInt;
overload selector("setLineBreakMode:") = Void, UILineBreakMode;
overload selector("setLineCapStyle:") = Void, CGLineCap;
overload selector("setLineDash:count:phase:") = Void, Pointer[Float], Int, Float;
overload selector("setLineJoinStyle:") = Void, CGLineJoin;
overload selector("setLineWidth:") = Void, Float;
overload selector("setLocale:") = Void, NSLocale;
overload selector("setLongEraSymbols:") = Void, NSArray;
overload selector("setMainDocumentURL:") = Void, NSURL;
overload selector("setMarkedText:selectedRange:") = Void, NSString, NSRange;
overload selector("setMarkedTextStyle:") = Void, NSDictionary;
overload selector("setMaxConcurrentOperationCount:") = Void, Int;
overload selector("setMaximum:") = Void, NSNumber;
overload selector("setMaximumDate:") = Void, NSDate;
overload selector("setMaximumFractionDigits:") = Void, UInt;
overload selector("setMaximumIntegerDigits:") = Void, UInt;
overload selector("setMaximumNumberOfTouches:") = Void, UInt;
overload selector("setMaximumSignificantDigits:") = Void, UInt;
overload selector("setMaximumTrackImage:forState:") = Void, UIImage, UInt;
overload selector("setMaximumValue:") = Void, Float;
overload selector("setMaximumValueImage:") = Void, UIImage;
overload selector("setMaximumZoomScale:") = Void, Float;
overload selector("setMediaPlaybackRequiresUserAction:") = Void, Bool;
overload selector("setMediaTypes:") = Void, NSArray;
overload selector("setMemoryCapacity:") = Void, UInt;
overload selector("setMenuItems:") = Void, NSArray;
overload selector("setMenuVisible:") = Void, Bool;
overload selector("setMenuVisible:animated:") = Void, Bool, Bool;
overload selector("setMessage:") = Void, NSString;
overload selector("setMinimum:") = Void, NSNumber;
overload selector("setMinimumDate:") = Void, NSDate;
overload selector("setMinimumDaysInFirstWeek:") = Void, UInt;
overload selector("setMinimumFontSize:") = Void, Float;
overload selector("setMinimumFractionDigits:") = Void, UInt;
overload selector("setMinimumIntegerDigits:") = Void, UInt;
overload selector("setMinimumNumberOfTouches:") = Void, UInt;
overload selector("setMinimumPressDuration:") = Void, Double;
overload selector("setMinimumSignificantDigits:") = Void, UInt;
overload selector("setMinimumTrackImage:forState:") = Void, UIImage, UInt;
overload selector("setMinimumValue:") = Void, Float;
overload selector("setMinimumValueImage:") = Void, UIImage;
overload selector("setMinimumZoomScale:") = Void, Float;
overload selector("setMinusSign:") = Void, NSString;
overload selector("setMinute:") = Void, Int;
overload selector("setMinuteInterval:") = Void, Int;
overload selector("setMiterLimit:") = Void, Float;
overload selector("setModalInPopover:") = Void, Bool;
overload selector("setModalPresentationStyle:") = Void, UIModalPresentationStyle;
overload selector("setModalTransitionStyle:") = Void, UIModalTransitionStyle;
overload selector("setMomentary:") = Void, Bool;
overload selector("setMonth:") = Void, Int;
overload selector("setMonthSymbols:") = Void, NSArray;
overload selector("setMultipleTouchEnabled:") = Void, Bool;
overload selector("setMultiplier:") = Void, NSNumber;
overload selector("setName:") = Void, NSString;
overload selector("setNavigationBarHidden:") = Void, Bool;
overload selector("setNavigationBarHidden:animated:") = Void, Bool, Bool;
overload selector("setNeedsDisplay") = Void;
overload selector("setNeedsDisplayInRect:") = Void, CGRect;
overload selector("setNeedsLayout") = Void;
overload selector("setNegativeFormat:") = Void, NSString;
overload selector("setNegativeInfinitySymbol:") = Void, NSString;
overload selector("setNegativePrefix:") = Void, NSString;
overload selector("setNegativeSuffix:") = Void, NSString;
overload selector("setNetworkActivityIndicatorVisible:") = Void, Bool;
overload selector("setNetworkServiceType:") = Void, UInt;
overload selector("setNilSymbol:") = Void, NSString;
overload selector("setNilValueForKey:") = Void, NSString;
overload selector("setNotANumberSymbol:") = Void, NSString;
overload selector("setNumberOfLines:") = Void, Int;
overload selector("setNumberOfPages:") = Void, Int;
overload selector("setNumberOfTapsRequired:") = Void, Int;
overload selector("setNumberOfTouchesRequired:") = Void, Int;
overload selector("setNumberStyle:") = Void, UInt;
overload selector("setObject:forKey:") = Void, Id, Id;
overload selector("setObject:forKey:cost:") = Void, Id, Id, UInt;
overload selector("setObjectZone:") = Void, Pointer[NSZone];
overload selector("setObservationInfo:") = Void, RawPointer;
overload selector("setOn:") = Void, Bool;
overload selector("setOn:animated:") = Void, Bool, Bool;
overload selector("setOpaque:") = Void, Bool;
overload selector("setOutputFormat:") = Void, UInt;
overload selector("setPMSymbol:") = Void, NSString;
overload selector("setPaddingCharacter:") = Void, NSString;
overload selector("setPaddingPosition:") = Void, UInt;
overload selector("setPagingEnabled:") = Void, Bool;
overload selector("setPartialStringValidationEnabled:") = Void, Bool;
overload selector("setPassthroughViews:") = Void, NSArray;
overload selector("setPerMillSymbol:") = Void, NSString;
overload selector("setPercentSymbol:") = Void, NSString;
overload selector("setPersistent:") = Void, Bool;
overload selector("setPersistentDomain:forName:") = Void, NSDictionary, NSString;
overload selector("setPlaceholder:") = Void, NSString;
overload selector("setPlusSign:") = Void, NSString;
overload selector("setPopoverContentSize:") = Void, CGSize;
overload selector("setPopoverContentSize:animated:") = Void, CGSize, Bool;
overload selector("setPositiveFormat:") = Void, NSString;
overload selector("setPositiveInfinitySymbol:") = Void, NSString;
overload selector("setPositivePrefix:") = Void, NSString;
overload selector("setPositiveSuffix:") = Void, NSString;
overload selector("setPossibleTitles:") = Void, NSSet;
overload selector("setPreferredFilename:") = Void, NSString;
overload selector("setProcessName:") = Void, NSString;
overload selector("setProgress:") = Void, Float;
overload selector("setProgressViewStyle:") = Void, UIProgressViewStyle;
overload selector("setPrompt:") = Void, NSString;
overload selector("setProperty:forKey:") = Bool, Id, NSString;
overload selector("setProperty:forKey:inRequest:") = Void, Id, NSString, NSMutableURLRequest;
overload selector("setProximityMonitoringEnabled:") = Void, Bool;
overload selector("setProximitySensingEnabled:") = Void, Bool;
overload selector("setQuarter:") = Void, Int;
overload selector("setQuarterSymbols:") = Void, NSArray;
overload selector("setQueuePriority:") = Void, Int;
overload selector("setRepeatCalendar:") = Void, NSCalendar;
overload selector("setRepeatInterval:") = Void, UInt;
overload selector("setResourceValue:forKey:error:") = Bool, Id, NSString, Pointer[NSError];
overload selector("setResourceValues:error:") = Bool, NSDictionary, Pointer[NSError];
overload selector("setReturnKeyType:") = Void, UIReturnKeyType;
overload selector("setReturnValue:") = Void, RawPointer;
overload selector("setReversesTitleShadowWhenHighlighted:") = Void, Bool;
overload selector("setRightBarButtonItem:") = Void, UIBarButtonItem;
overload selector("setRightBarButtonItem:animated:") = Void, UIBarButtonItem, Bool;
overload selector("setRightView:") = Void, UIView;
overload selector("setRightViewMode:") = Void, UITextFieldViewMode;
overload selector("setRootViewController:") = Void, UIViewController;
overload selector("setRotation:") = Void, Float;
overload selector("setRoundingIncrement:") = Void, NSNumber;
overload selector("setRoundingMode:") = Void, UInt;
overload selector("setRowHeight:") = Void, Float;
overload selector("setRunLoopModes:") = Void, NSArray;
overload selector("setScale:") = Void, Float;
overload selector("setScalesPageToFit:") = Void, Bool;
overload selector("setScanLocation:") = Void, UInt;
overload selector("setScopeButtonTitles:") = Void, NSArray;
overload selector("setScreen:") = Void, UIScreen;
overload selector("setScrollEnabled:") = Void, Bool;
overload selector("setScrollIndicatorInsets:") = Void, UIEdgeInsets;
overload selector("setScrollsToTop:") = Void, Bool;
overload selector("setSearchResultsButtonSelected:") = Void, Bool;
overload selector("setSearchResultsDataSource:") = Void, Id;
overload selector("setSearchResultsDelegate:") = Void, Id;
overload selector("setSecond:") = Void, Int;
overload selector("setSecondaryGroupingSize:") = Void, UInt;
overload selector("setSectionFooterHeight:") = Void, Float;
overload selector("setSectionHeaderHeight:") = Void, Float;
overload selector("setSectionIndexMinimumDisplayRowCount:") = Void, Int;
overload selector("setSecureTextEntry:") = Void, Bool;
overload selector("setSegmentedControlStyle:") = Void, UISegmentedControlStyle;
overload selector("setSelected:") = Void, Bool;
overload selector("setSelected:animated:") = Void, Bool, Bool;
overload selector("setSelectedBackgroundView:") = Void, UIView;
overload selector("setSelectedImage:") = Void, UIImage;
overload selector("setSelectedIndex:") = Void, UInt;
overload selector("setSelectedItem:") = Void, UITabBarItem;
overload selector("setSelectedRange:") = Void, NSRange;
overload selector("setSelectedScopeButtonIndex:") = Void, Int;
overload selector("setSelectedSegmentIndex:") = Void, Int;
overload selector("setSelectedTextColor:") = Void, UIColor;
overload selector("setSelectedTextRange:") = Void, UITextRange;
overload selector("setSelectedViewController:") = Void, UIViewController;
overload selector("setSelectionAffinity:") = Void, UITextStorageDirection;
overload selector("setSelectionStyle:") = Void, UITableViewCellSelectionStyle;
overload selector("setSelector:") = Void, SelectorHandle;
overload selector("setSeparatorColor:") = Void, UIColor;
overload selector("setSeparatorStyle:") = Void, UITableViewCellSeparatorStyle;
overload selector("setSet:") = Void, NSSet;
overload selector("setShadowColor:") = Void, UIColor;
overload selector("setShadowOffset:") = Void, CGSize;
overload selector("setSharedURLCache:") = Void, NSURLCache;
overload selector("setShortMonthSymbols:") = Void, NSArray;
overload selector("setShortQuarterSymbols:") = Void, NSArray;
overload selector("setShortStandaloneMonthSymbols:") = Void, NSArray;
overload selector("setShortStandaloneQuarterSymbols:") = Void, NSArray;
overload selector("setShortStandaloneWeekdaySymbols:") = Void, NSArray;
overload selector("setShortWeekdaySymbols:") = Void, NSArray;
overload selector("setShouldIndentWhileEditing:") = Void, Bool;
overload selector("setShouldProcessNamespaces:") = Void, Bool;
overload selector("setShouldReportNamespacePrefixes:") = Void, Bool;
overload selector("setShouldResolveExternalEntities:") = Void, Bool;
overload selector("setShowsBookmarkButton:") = Void, Bool;
overload selector("setShowsCameraControls:") = Void, Bool;
overload selector("setShowsCancelButton:") = Void, Bool;
overload selector("setShowsCancelButton:animated:") = Void, Bool, Bool;
overload selector("setShowsHorizontalScrollIndicator:") = Void, Bool;
overload selector("setShowsReorderControl:") = Void, Bool;
overload selector("setShowsScopeBar:") = Void, Bool;
overload selector("setShowsSearchResultsButton:") = Void, Bool;
overload selector("setShowsSelectionIndicator:") = Void, Bool;
overload selector("setShowsTouchWhenHighlighted:") = Void, Bool;
overload selector("setShowsVerticalScrollIndicator:") = Void, Bool;
overload selector("setSoundName:") = Void, NSString;
overload selector("setSourceType:") = Void, UInt;
overload selector("setStackSize:") = Void, UInt;
overload selector("setStandaloneMonthSymbols:") = Void, NSArray;
overload selector("setStandaloneQuarterSymbols:") = Void, NSArray;
overload selector("setStandaloneWeekdaySymbols:") = Void, NSArray;
overload selector("setStatusBarHidden:") = Void, Bool;
overload selector("setStatusBarHidden:animated:") = Void, Bool, Bool;
overload selector("setStatusBarHidden:withAnimation:") = Void, Bool, UIStatusBarAnimation;
overload selector("setStatusBarOrientation:") = Void, UIInterfaceOrientation;
overload selector("setStatusBarOrientation:animated:") = Void, UIInterfaceOrientation, Bool;
overload selector("setStatusBarStyle:") = Void, UIStatusBarStyle;
overload selector("setStatusBarStyle:animated:") = Void, UIStatusBarStyle, Bool;
overload selector("setString:") = Void, NSString;
overload selector("setStrings:") = Void, NSArray;
overload selector("setStroke") = Void;
overload selector("setStyle:") = Void, UIBarButtonItemStyle;
overload selector("setSuspended:") = Void, Bool;
overload selector("setTXTRecordData:") = Bool, NSData;
overload selector("setTabBarItem:") = Void, UITabBarItem;
overload selector("setTableFooterView:") = Void, UIView;
overload selector("setTableHeaderView:") = Void, UIView;
overload selector("setTableView:") = Void, UITableView;
overload selector("setTag:") = Void, Int;
overload selector("setTarget:") = Void, Id;
overload selector("setTargetRect:inView:") = Void, CGRect, UIView;
overload selector("setText:") = Void, NSString;
overload selector("setTextAlignment:") = Void, UITextAlignment;
overload selector("setTextAttributesForNegativeInfinity:") = Void, NSDictionary;
overload selector("setTextAttributesForNegativeValues:") = Void, NSDictionary;
overload selector("setTextAttributesForNil:") = Void, NSDictionary;
overload selector("setTextAttributesForNotANumber:") = Void, NSDictionary;
overload selector("setTextAttributesForPositiveInfinity:") = Void, NSDictionary;
overload selector("setTextAttributesForPositiveValues:") = Void, NSDictionary;
overload selector("setTextAttributesForZero:") = Void, NSDictionary;
overload selector("setTextColor:") = Void, UIColor;
overload selector("setThreadPriority:") = Bool, Double;
overload selector("setThumbImage:forState:") = Void, UIImage, UInt;
overload selector("setTimeStyle:") = Void, UInt;
overload selector("setTimeZone:") = Void, NSTimeZone;
overload selector("setTimeoutInterval:") = Void, Double;
overload selector("setTintColor:") = Void, UIColor;
overload selector("setTitle:") = Void, NSString;
overload selector("setTitle:forSegmentAtIndex:") = Void, NSString, UInt;
overload selector("setTitle:forState:") = Void, NSString, UInt;
overload selector("setTitleColor:forState:") = Void, UIColor, UInt;
overload selector("setTitleEdgeInsets:") = Void, UIEdgeInsets;
overload selector("setTitleShadowColor:forState:") = Void, UIColor, UInt;
overload selector("setTitleShadowOffset:") = Void, CGSize;
overload selector("setTitleView:") = Void, UIView;
overload selector("setToolbarHidden:") = Void, Bool;
overload selector("setToolbarHidden:animated:") = Void, Bool, Bool;
overload selector("setToolbarItems:") = Void, NSArray;
overload selector("setToolbarItems:animated:") = Void, NSArray, Bool;
overload selector("setTotalCostLimit:") = Void, UInt;
overload selector("setTransform:") = Void, CGAffineTransform;
overload selector("setTranslation:inView:") = Void, CGPoint, UIView;
overload selector("setTranslucent:") = Void, Bool;
overload selector("setTwoDigitStartDate:") = Void, NSDate;
overload selector("setURL:") = Void, NSURL;
overload selector("setURL:forKey:") = Void, NSURL, NSString;
overload selector("setURLs:") = Void, NSArray;
overload selector("setUTI:") = Void, NSString;
overload selector("setUpdateInterval:") = Void, Double;
overload selector("setUserInfo:") = Void, NSDictionary;
overload selector("setUserInteractionEnabled:") = Void, Bool;
overload selector("setUsesEvenOddFillRule:") = Void, Bool;
overload selector("setUsesGroupingSeparator:") = Void, Bool;
overload selector("setUsesSignificantDigits:") = Void, Bool;
overload selector("setValue:") = Void, Float;
overload selector("setValue:animated:") = Void, Float, Bool;
overload selector("setValue:forHTTPHeaderField:") = Void, NSString, NSString;
overload selector("setValue:forKey:") = Void, Id, NSString;
overload selector("setValue:forKeyPath:") = Void, Id, NSString;
overload selector("setValue:forPasteboardType:") = Void, Id, NSString;
overload selector("setValue:forUndefinedKey:") = Void, Id, NSString;
overload selector("setValueTransformer:forName:") = Void, NSValueTransformer, NSString;
overload selector("setValuesForKeysWithDictionary:") = Void, NSDictionary;
overload selector("setVersion:") = Void, Int;
overload selector("setVeryShortMonthSymbols:") = Void, NSArray;
overload selector("setVeryShortStandaloneMonthSymbols:") = Void, NSArray;
overload selector("setVeryShortStandaloneWeekdaySymbols:") = Void, NSArray;
overload selector("setVeryShortWeekdaySymbols:") = Void, NSArray;
overload selector("setVideoMaximumDuration:") = Void, Double;
overload selector("setVideoPath:") = Void, NSString;
overload selector("setVideoQuality:") = Void, UInt;
overload selector("setView:") = Void, UIView;
overload selector("setViewControllers:") = Void, NSArray;
overload selector("setViewControllers:animated:") = Void, NSArray, Bool;
overload selector("setVolatileDomain:forName:") = Void, NSDictionary, NSString;
overload selector("setWantsFullScreenLayout:") = Void, Bool;
overload selector("setWeek:") = Void, Int;
overload selector("setWeekday:") = Void, Int;
overload selector("setWeekdayOrdinal:") = Void, Int;
overload selector("setWeekdaySymbols:") = Void, NSArray;
overload selector("setWidth:") = Void, Float;
overload selector("setWidth:forSegmentAtIndex:") = Void, Float, UInt;
overload selector("setWindowLevel:") = Void, Float;
overload selector("setWithArray:") = Id, NSArray;
overload selector("setWithCapacity:") = Id, UInt;
overload selector("setWithObject:") = Id, Id;
overload varargSelector("setWithObjects:") = Id, Id;
overload selector("setWithObjects:count:") = Id, Pointer[Id], UInt;
overload selector("setWithSet:") = Id, NSSet;
overload selector("setYear:") = Void, Int;
overload selector("setZeroSymbol:") = Void, NSString;
overload selector("setZoomScale:") = Void, Float;
overload selector("setZoomScale:animated:") = Void, Float, Bool;
overload selector("shadowColor") = UIColor;
overload selector("shadowOffset") = CGSize;
overload selector("sharedAccelerometer") = UIAccelerometer;
overload selector("sharedApplication") = UIApplication;
overload selector("sharedCredentialStorage") = NSURLCredentialStorage;
overload selector("sharedFrameworksPath") = NSString;
overload selector("sharedFrameworksURL") = NSURL;
overload selector("sharedHTTPCookieStorage") = NSHTTPCookieStorage;
overload selector("sharedMenuController") = UIMenuController;
overload selector("sharedSupportPath") = NSString;
overload selector("sharedSupportURL") = NSURL;
overload selector("sharedURLCache") = NSURLCache;
overload selector("shiftIndexesStartingAtIndex:by:") = Void, UInt, Int;
overload selector("shortMonthSymbols") = NSArray;
overload selector("shortQuarterSymbols") = NSArray;
overload selector("shortStandaloneMonthSymbols") = NSArray;
overload selector("shortStandaloneQuarterSymbols") = NSArray;
overload selector("shortStandaloneWeekdaySymbols") = NSArray;
overload selector("shortValue") = Short;
overload selector("shortWeekdaySymbols") = NSArray;
overload selector("shouldAutorotateToInterfaceOrientation:") = Bool, UIInterfaceOrientation;
overload selector("shouldIndentWhileEditing") = Bool;
overload selector("shouldProcessNamespaces") = Bool;
overload selector("shouldReportNamespacePrefixes") = Bool;
overload selector("shouldResolveExternalEntities") = Bool;
overload selector("show") = Void;
overload selector("showFromBarButtonItem:animated:") = Void, UIBarButtonItem, Bool;
overload selector("showFromRect:inView:animated:") = Void, CGRect, UIView, Bool;
overload selector("showFromTabBar:") = Void, UITabBar;
overload selector("showFromToolbar:") = Void, UIToolbar;
overload selector("showInView:") = Void, UIView;
overload selector("showingDeleteConfirmation") = Bool;
overload selector("showsBookmarkButton") = Bool;
overload selector("showsCameraControls") = Bool;
overload selector("showsCancelButton") = Bool;
overload selector("showsHorizontalScrollIndicator") = Bool;
overload selector("showsReorderControl") = Bool;
overload selector("showsScopeBar") = Bool;
overload selector("showsSearchResultsButton") = Bool;
overload selector("showsSelectionIndicator") = Bool;
overload selector("showsTouchWhenHighlighted") = Bool;
overload selector("showsVerticalScrollIndicator") = Bool;
overload selector("signal") = Void;
overload selector("signatureWithObjCTypes:") = NSMethodSignature, Pointer[CChar];
overload selector("size") = CGSize;
overload selector("sizeForNumberOfPages:") = CGSize, Int;
overload selector("sizeThatFits:") = CGSize, CGSize;
overload selector("sizeToFit") = Void;
overload selector("sizeWithFont:") = CGSize, UIFont;
overload selector("sizeWithFont:constrainedToSize:") = CGSize, UIFont, CGSize;
overload selector("sizeWithFont:constrainedToSize:lineBreakMode:") = CGSize, UIFont, CGSize, UILineBreakMode;
overload selector("sizeWithFont:forWidth:lineBreakMode:") = CGSize, UIFont, Float, UILineBreakMode;
overload selector("sizeWithFont:minFontSize:actualFontSize:forWidth:lineBreakMode:") = CGSize, UIFont, Float, Pointer[Float], Float, UILineBreakMode;
overload selector("skipDescendants") = Void;
overload selector("skipDescendents") = Void;
overload selector("sleepForTimeInterval:") = Void, Double;
overload selector("sleepUntilDate:") = Void, NSDate;
overload selector("smallSystemFontSize") = Float;
overload selector("smallestEncoding") = UInt;
overload selector("sortDescriptorWithKey:ascending:") = Id, NSString, Bool;
overload selector("sortDescriptorWithKey:ascending:comparator:") = Id, NSString, Bool, NSComparator;
overload selector("sortDescriptorWithKey:ascending:selector:") = Id, NSString, Bool, SelectorHandle;
overload selector("sortUsingComparator:") = Void, NSComparator;
overload selector("sortUsingDescriptors:") = Void, NSArray;
overload selector("sortUsingFunction:context:") = Void, CCodePointer[[Id,Id,RawPointer],[Int]], RawPointer;
overload selector("sortUsingSelector:") = Void, SelectorHandle;
overload selector("sortWithOptions:usingComparator:") = Void, UInt, NSComparator;
overload selector("sortedArrayFromArray:collationStringSelector:") = NSArray, NSArray, SelectorHandle;
overload selector("sortedArrayHint") = NSData;
overload selector("sortedArrayUsingComparator:") = NSArray, NSComparator;
overload selector("sortedArrayUsingDescriptors:") = NSArray, NSArray;
overload selector("sortedArrayUsingFunction:context:") = NSArray, CCodePointer[[Id,Id,RawPointer],[Int]], RawPointer;
overload selector("sortedArrayUsingFunction:context:hint:") = NSArray, CCodePointer[[Id,Id,RawPointer],[Int]], RawPointer, NSData;
overload selector("sortedArrayUsingSelector:") = NSArray, SelectorHandle;
overload selector("sortedArrayWithOptions:usingComparator:") = NSArray, UInt, NSComparator;
overload selector("soundName") = NSString;
overload selector("sourceType") = UInt;
overload selector("spellCheckingResultWithRange:") = NSTextCheckingResult, NSRange;
overload selector("splitViewController") = UISplitViewController;
overload selector("splitViewController:popoverController:willPresentViewController:") = Void, UISplitViewController, UIPopoverController, UIViewController;
overload selector("splitViewController:willHideViewController:withBarButtonItem:forPopoverController:") = Void, UISplitViewController, UIViewController, UIBarButtonItem, UIPopoverController;
overload selector("splitViewController:willShowViewController:invalidatingBarButtonItem:") = Void, UISplitViewController, UIViewController, UIBarButtonItem;
overload selector("stackSize") = UInt;
overload selector("standaloneMonthSymbols") = NSArray;
overload selector("standaloneQuarterSymbols") = NSArray;
overload selector("standaloneWeekdaySymbols") = NSArray;
overload selector("standardUserDefaults") = NSUserDefaults;
overload selector("standardizedURL") = NSURL;
overload selector("start") = UITextPosition;
overload selector("startAnimating") = Void;
overload selector("startLoading") = Void;
overload selector("startMonitoring") = Void;
overload selector("startVideoCapture") = Bool;
overload selector("state") = UInt;
overload selector("statusBarFrame") = CGRect;
overload selector("statusBarOrientation") = UIInterfaceOrientation;
overload selector("statusBarOrientationAnimationDuration") = Double;
overload selector("statusBarStyle") = UIStatusBarStyle;
overload selector("statusCode") = Int;
overload selector("stop") = Void;
overload selector("stopAnimating") = Void;
overload selector("stopLoading") = Void;
overload selector("stopMonitoring") = Void;
overload selector("stopVideoCapture") = Void;
overload selector("storagePolicy") = UInt;
overload selector("storeCachedResponse:forRequest:") = Void, NSCachedURLResponse, NSURLRequest;
overload selector("stream:handleEvent:") = Void, NSStream, UInt;
overload selector("streamError") = NSError;
overload selector("streamStatus") = UInt;
overload selector("stretchableImageWithLeftCapWidth:topCapHeight:") = UIImage, Int, Int;
overload selector("string") = Id;
overload selector("stringArrayForKey:") = NSArray, NSString;
overload selector("stringByAbbreviatingWithTildeInPath") = NSString;
overload selector("stringByAddingPercentEscapesUsingEncoding:") = NSString, UInt;
overload varargSelector("stringByAppendingFormat:") = NSString, NSString;
overload selector("stringByAppendingPathComponent:") = NSString, NSString;
overload selector("stringByAppendingPathExtension:") = NSString, NSString;
overload selector("stringByAppendingString:") = NSString, NSString;
overload selector("stringByDeletingLastPathComponent") = NSString;
overload selector("stringByDeletingPathExtension") = NSString;
overload selector("stringByEvaluatingJavaScriptFromString:") = NSString, NSString;
overload selector("stringByExpandingTildeInPath") = NSString;
overload selector("stringByFoldingWithOptions:locale:") = NSString, UInt, NSLocale;
overload selector("stringByPaddingToLength:withString:startingAtIndex:") = NSString, UInt, NSString, UInt;
overload selector("stringByReplacingCharactersInRange:withString:") = NSString, NSRange, NSString;
overload selector("stringByReplacingMatchesInString:options:range:withTemplate:") = NSString, NSString, UInt, NSRange, NSString;
overload selector("stringByReplacingOccurrencesOfString:withString:") = NSString, NSString, NSString;
overload selector("stringByReplacingOccurrencesOfString:withString:options:range:") = NSString, NSString, NSString, UInt, NSRange;
overload selector("stringByReplacingPercentEscapesUsingEncoding:") = NSString, UInt;
overload selector("stringByResolvingSymlinksInPath") = NSString;
overload selector("stringByStandardizingPath") = NSString;
overload selector("stringByTrimmingCharactersInSet:") = NSString, NSCharacterSet;
overload selector("stringForKey:") = NSString, NSString;
overload selector("stringForObjectValue:") = NSString, Id;
overload selector("stringFromDate:") = NSString, NSDate;
overload selector("stringFromNumber:") = NSString, NSNumber;
overload selector("stringValue") = NSString;
overload selector("stringWithCString:") = Id, Pointer[CChar];
overload selector("stringWithCString:encoding:") = Id, Pointer[CChar], UInt;
overload selector("stringWithCString:length:") = Id, Pointer[CChar], UInt;
overload selector("stringWithCapacity:") = Id, UInt;
overload selector("stringWithCharacters:length:") = Id, Pointer[UShort], UInt;
overload selector("stringWithContentsOfFile:") = Id, NSString;
overload selector("stringWithContentsOfFile:encoding:error:") = Id, NSString, UInt, Pointer[NSError];
overload selector("stringWithContentsOfFile:usedEncoding:error:") = Id, NSString, Pointer[UInt], Pointer[NSError];
overload selector("stringWithContentsOfURL:") = Id, NSURL;
overload selector("stringWithContentsOfURL:encoding:error:") = Id, NSURL, UInt, Pointer[NSError];
overload selector("stringWithContentsOfURL:usedEncoding:error:") = Id, NSURL, Pointer[UInt], Pointer[NSError];
overload selector("stringWithFileSystemRepresentation:length:") = NSString, Pointer[CChar], UInt;
overload varargSelector("stringWithFormat:") = Id, NSString;
overload selector("stringWithString:") = Id, NSString;
overload selector("stringWithUTF8String:") = Id, Pointer[CChar];
overload selector("strings") = NSArray;
overload selector("stringsByAppendingPaths:") = NSArray, NSArray;
overload selector("stroke") = Void;
overload selector("strokeWithBlendMode:alpha:") = Void, CGBlendMode, Float;
overload selector("style") = UIBarButtonItemStyle;
overload selector("subarrayWithRange:") = NSArray, NSRange;
overload selector("subdataWithRange:") = NSData, NSRange;
overload selector("subpathsAtPath:") = NSArray, NSString;
overload selector("subpathsOfDirectoryAtPath:error:") = NSArray, NSString, Pointer[NSError];
overload selector("subpredicates") = NSArray;
overload selector("substringFromIndex:") = NSString, UInt;
overload selector("substringToIndex:") = NSString, UInt;
overload selector("substringWithRange:") = NSString, NSRange;
overload selector("subtype") = UIEventSubtype;
overload selector("subviews") = NSArray;
overload selector("suggestedFilename") = NSString;
overload selector("superclass") = Id;
overload selector("superview") = UIView;
overload selector("symbolCharacterSet") = Id;
overload selector("symbolicLinkDestination") = NSString;
overload selector("symbolicLinkDestinationURL") = NSURL;
overload selector("synchronize") = Bool;
overload selector("synchronizeFile") = Void;
overload selector("systemFontOfSize:") = UIFont, Float;
overload selector("systemFontSize") = Float;
overload selector("systemID") = NSString;
overload selector("systemLocale") = Id;
overload selector("systemName") = NSString;
overload selector("systemTimeZone") = NSTimeZone;
overload selector("systemUptime") = Double;
overload selector("systemVersion") = UInt;
overload selector("tabBar") = UITabBar;
overload selector("tabBar:didBeginCustomizingItems:") = Void, UITabBar, NSArray;
overload selector("tabBar:didEndCustomizingItems:changed:") = Void, UITabBar, NSArray, Bool;
overload selector("tabBar:didSelectItem:") = Void, UITabBar, UITabBarItem;
overload selector("tabBar:willBeginCustomizingItems:") = Void, UITabBar, NSArray;
overload selector("tabBar:willEndCustomizingItems:changed:") = Void, UITabBar, NSArray, Bool;
overload selector("tabBarController") = UITabBarController;
overload selector("tabBarController:didEndCustomizingViewControllers:changed:") = Void, UITabBarController, NSArray, Bool;
overload selector("tabBarController:didSelectViewController:") = Void, UITabBarController, UIViewController;
overload selector("tabBarController:shouldSelectViewController:") = Bool, UITabBarController, UIViewController;
overload selector("tabBarController:willBeginCustomizingViewControllers:") = Void, UITabBarController, NSArray;
overload selector("tabBarController:willEndCustomizingViewControllers:changed:") = Void, UITabBarController, NSArray, Bool;
overload selector("tabBarItem") = UITabBarItem;
overload selector("tableFooterView") = UIView;
overload selector("tableHeaderView") = UIView;
overload selector("tableView") = UITableView;
overload selector("tableView:accessoryButtonTappedForRowWithIndexPath:") = Void, UITableView, NSIndexPath;
overload selector("tableView:accessoryTypeForRowWithIndexPath:") = UITableViewCellAccessoryType, UITableView, NSIndexPath;
overload selector("tableView:canEditRowAtIndexPath:") = Bool, UITableView, NSIndexPath;
overload selector("tableView:canMoveRowAtIndexPath:") = Bool, UITableView, NSIndexPath;
overload selector("tableView:cellForRowAtIndexPath:") = UITableViewCell, UITableView, NSIndexPath;
overload selector("tableView:commitEditingStyle:forRowAtIndexPath:") = Void, UITableView, UITableViewCellEditingStyle, NSIndexPath;
overload selector("tableView:didDeselectRowAtIndexPath:") = Void, UITableView, NSIndexPath;
overload selector("tableView:didEndEditingRowAtIndexPath:") = Void, UITableView, NSIndexPath;
overload selector("tableView:didSelectRowAtIndexPath:") = Void, UITableView, NSIndexPath;
overload selector("tableView:editingStyleForRowAtIndexPath:") = UITableViewCellEditingStyle, UITableView, NSIndexPath;
overload selector("tableView:heightForFooterInSection:") = Float, UITableView, Int;
overload selector("tableView:heightForHeaderInSection:") = Float, UITableView, Int;
overload selector("tableView:heightForRowAtIndexPath:") = Float, UITableView, NSIndexPath;
overload selector("tableView:indentationLevelForRowAtIndexPath:") = Int, UITableView, NSIndexPath;
overload selector("tableView:moveRowAtIndexPath:toIndexPath:") = Void, UITableView, NSIndexPath, NSIndexPath;
overload selector("tableView:numberOfRowsInSection:") = Int, UITableView, Int;
overload selector("tableView:sectionForSectionIndexTitle:atIndex:") = Int, UITableView, NSString, Int;
overload selector("tableView:shouldIndentWhileEditingRowAtIndexPath:") = Bool, UITableView, NSIndexPath;
overload selector("tableView:targetIndexPathForMoveFromRowAtIndexPath:toProposedIndexPath:") = NSIndexPath, UITableView, NSIndexPath, NSIndexPath;
overload selector("tableView:titleForDeleteConfirmationButtonForRowAtIndexPath:") = NSString, UITableView, NSIndexPath;
overload selector("tableView:titleForFooterInSection:") = NSString, UITableView, Int;
overload selector("tableView:titleForHeaderInSection:") = NSString, UITableView, Int;
overload selector("tableView:viewForFooterInSection:") = UIView, UITableView, Int;
overload selector("tableView:viewForHeaderInSection:") = UIView, UITableView, Int;
overload selector("tableView:willBeginEditingRowAtIndexPath:") = Void, UITableView, NSIndexPath;
overload selector("tableView:willDeselectRowAtIndexPath:") = NSIndexPath, UITableView, NSIndexPath;
overload selector("tableView:willDisplayCell:forRowAtIndexPath:") = Void, UITableView, UITableViewCell, NSIndexPath;
overload selector("tableView:willSelectRowAtIndexPath:") = NSIndexPath, UITableView, NSIndexPath;
overload selector("tag") = Int;
overload selector("takePicture") = Void;
overload selector("tapCount") = UInt;
overload selector("target") = Id;
overload selector("text") = NSString;
overload selector("textAlignment") = UITextAlignment;
overload selector("textAttributesForNegativeInfinity") = NSDictionary;
overload selector("textAttributesForNegativeValues") = NSDictionary;
overload selector("textAttributesForNil") = NSDictionary;
overload selector("textAttributesForNotANumber") = NSDictionary;
overload selector("textAttributesForPositiveInfinity") = NSDictionary;
overload selector("textAttributesForPositiveValues") = NSDictionary;
overload selector("textAttributesForZero") = NSDictionary;
overload selector("textColor") = UIColor;
overload selector("textDidChange:") = Void, Id;
overload selector("textEncodingName") = NSString;
overload selector("textField:shouldChangeCharactersInRange:replacementString:") = Bool, UITextField, NSRange, NSString;
overload selector("textFieldDidBeginEditing:") = Void, UITextField;
overload selector("textFieldDidEndEditing:") = Void, UITextField;
overload selector("textFieldShouldBeginEditing:") = Bool, UITextField;
overload selector("textFieldShouldClear:") = Bool, UITextField;
overload selector("textFieldShouldEndEditing:") = Bool, UITextField;
overload selector("textFieldShouldReturn:") = Bool, UITextField;
overload selector("textInRange:") = NSString, UITextRange;
overload selector("textInputView") = UIView;
overload selector("textLabel") = UILabel;
overload selector("textRangeFromPosition:toPosition:") = UITextRange, UITextPosition, UITextPosition;
overload selector("textRectForBounds:") = CGRect, CGRect;
overload selector("textRectForBounds:limitedToNumberOfLines:") = CGRect, CGRect, Int;
overload selector("textStylingAtPosition:inDirection:") = NSDictionary, UITextPosition, UITextStorageDirection;
overload selector("textView:shouldChangeTextInRange:replacementText:") = Bool, UITextView, NSRange, NSString;
overload selector("textViewDidBeginEditing:") = Void, UITextView;
overload selector("textViewDidChange:") = Void, UITextView;
overload selector("textViewDidChangeSelection:") = Void, UITextView;
overload selector("textViewDidEndEditing:") = Void, UITextView;
overload selector("textViewShouldBeginEditing:") = Bool, UITextView;
overload selector("textViewShouldEndEditing:") = Bool, UITextView;
overload selector("textWillChange:") = Void, Id;
overload selector("threadDictionary") = NSMutableDictionary;
overload selector("threadPriority") = Double;
overload selector("thumbImageForState:") = UIImage, UInt;
overload selector("thumbRectForBounds:trackRect:value:") = CGRect, CGRect, CGRect, Float;
overload selector("timeInterval") = Double;
overload selector("timeIntervalSince1970") = Double;
overload selector("timeIntervalSinceDate:") = Double, NSDate;
overload selector("timeIntervalSinceNow") = Double;
overload selector("timeIntervalSinceReferenceDate") = Double;
overload selector("timeStyle") = UInt;
overload selector("timeZone") = NSTimeZone;
overload selector("timeZoneDataVersion") = NSString;
overload selector("timeZoneForSecondsFromGMT:") = Id, Int;
overload selector("timeZoneWithAbbreviation:") = Id, NSString;
overload selector("timeZoneWithName:") = Id, NSString;
overload selector("timeZoneWithName:data:") = Id, NSString, NSData;
overload selector("timeoutInterval") = Double;
overload selector("timerWithTimeInterval:invocation:repeats:") = NSTimer, Double, NSInvocation, Bool;
overload selector("timerWithTimeInterval:target:selector:userInfo:repeats:") = NSTimer, Double, Id, SelectorHandle, Id, Bool;
overload selector("timestamp") = Double;
overload selector("tintColor") = UIColor;
overload selector("title") = NSString;
overload selector("titleColorForState:") = UIColor, UInt;
overload selector("titleEdgeInsets") = UIEdgeInsets;
overload selector("titleForSegmentAtIndex:") = NSString, UInt;
overload selector("titleForState:") = NSString, UInt;
overload selector("titleLabel") = UILabel;
overload selector("titleRectForContentRect:") = CGRect, CGRect;
overload selector("titleShadowColorForState:") = UIColor, UInt;
overload selector("titleShadowOffset") = CGSize;
overload selector("titleView") = UIView;
overload selector("tokenizer") = Id;
overload selector("toolbar") = UIToolbar;
overload selector("toolbarItems") = NSArray;
overload selector("topCapHeight") = Int;
overload selector("topItem") = UINavigationItem;
overload selector("topViewController") = UIViewController;
overload selector("totalCostLimit") = UInt;
overload selector("touchesBegan:withEvent:") = Void, NSSet, UIEvent;
overload selector("touchesCancelled:withEvent:") = Void, NSSet, UIEvent;
overload selector("touchesEnded:withEvent:") = Void, NSSet, UIEvent;
overload selector("touchesForGestureRecognizer:") = NSSet, UIGestureRecognizer;
overload selector("touchesForView:") = NSSet, UIView;
overload selector("touchesForWindow:") = NSSet, UIWindow;
overload selector("touchesMoved:withEvent:") = Void, NSSet, UIEvent;
overload selector("touchesShouldBegin:withEvent:inContentView:") = Bool, NSSet, UIEvent, UIView;
overload selector("touchesShouldCancelInContentView:") = Bool, UIView;
overload selector("trackRectForBounds:") = CGRect, CGRect;
overload selector("transform") = CGAffineTransform;
overload selector("transformedValue:") = Id, Id;
overload selector("transformedValueClass") = Id;
overload selector("transitInformationCheckingResultWithRange:components:") = NSTextCheckingResult, NSRange, NSDictionary;
overload selector("transitionFromView:toView:duration:options:completion:") = Void, UIView, UIView, Double, UInt, UnknownType;
overload selector("transitionWithView:duration:options:animations:completion:") = Void, UIView, Double, UInt, UnknownType, UnknownType;
overload selector("translationInView:") = CGPoint, UIView;
overload selector("truncateFileAtOffset:") = Void, UInt64;
overload selector("tryLock") = Bool;
overload selector("tryLockWhenCondition:") = Bool, Int;
overload selector("twoDigitStartDate") = NSDate;
overload selector("type") = NSString;
overload selector("unarchiveObjectWithData:") = Id, NSData;
overload selector("unarchiveObjectWithFile:") = Id, NSString;
overload selector("unarchiver:cannotDecodeObjectOfClassName:originalClasses:") = Id, NSKeyedUnarchiver, NSString, NSArray;
overload selector("unarchiver:didDecodeObject:") = Id, NSKeyedUnarchiver, Id;
overload selector("unarchiver:willReplaceObject:withObject:") = Void, NSKeyedUnarchiver, Id, Id;
overload selector("unarchiverDidFinish:") = Void, NSKeyedUnarchiver;
overload selector("unarchiverWillFinish:") = Void, NSKeyedUnarchiver;
overload selector("undo") = Void;
overload selector("undoActionName") = NSString;
overload selector("undoManager") = NSUndoManager;
overload selector("undoMenuItemTitle") = NSString;
overload selector("undoMenuTitleForUndoActionName:") = NSString, NSString;
overload selector("undoNestedGroup") = Void;
overload selector("unionSet:") = Void, NSSet;
overload selector("uniqueIdentifier") = NSString;
overload selector("unload") = Bool;
overload selector("unlock") = Void;
overload selector("unlockWithCondition:") = Void, Int;
overload selector("unmarkText") = Void;
overload selector("unregisterClass:") = Void, Id;
overload selector("unregisterForRemoteNotifications") = Void;
overload selector("unscheduleFromRunLoop:forMode:") = Void, NSRunLoop, NSString;
overload selector("unsignedCharValue") = CUChar;
overload selector("unsignedIntValue") = UInt;
overload selector("unsignedIntegerValue") = UInt;
overload selector("unsignedLongLongValue") = UInt64;
overload selector("unsignedLongValue") = CULong;
overload selector("unsignedShortValue") = UShort;
overload selector("update") = Void;
overload selector("updateCurrentPageDisplay") = Void;
overload selector("updateFromPath:") = Bool, NSString;
overload selector("updateInterval") = Double;
overload selector("uppercaseLetterCharacterSet") = Id;
overload selector("uppercaseString") = NSString;
overload selector("useCredential:forAuthenticationChallenge:") = Void, NSURLCredential, NSURLAuthenticationChallenge;
overload selector("user") = NSString;
overload selector("userInfo") = Id;
overload selector("userInterfaceIdiom") = UIUserInterfaceIdiom;
overload selector("usesEvenOddFillRule") = Bool;
overload selector("usesGroupingSeparator") = Bool;
overload selector("usesSignificantDigits") = Bool;
overload selector("validateValue:forKey:error:") = Bool, Pointer[Id], NSString, Pointer[NSError];
overload selector("validateValue:forKeyPath:error:") = Bool, Pointer[Id], NSString, Pointer[NSError];
overload selector("value") = NSString;
overload selector("value:withObjCType:") = NSValue, RawPointer, Pointer[CChar];
overload selector("valueForHTTPHeaderField:") = NSString, NSString;
overload selector("valueForKey:") = Id, NSString;
overload selector("valueForKeyPath:") = Id, NSString;
overload selector("valueForPasteboardType:") = Id, NSString;
overload selector("valueForUndefinedKey:") = Id, NSString;
overload selector("valueTransformerForName:") = NSValueTransformer, NSString;
overload selector("valueTransformerNames") = NSArray;
overload selector("valueWithBytes:objCType:") = NSValue, RawPointer, Pointer[CChar];
overload selector("valueWithCGAffineTransform:") = NSValue, CGAffineTransform;
overload selector("valueWithCGPoint:") = NSValue, CGPoint;
overload selector("valueWithCGRect:") = NSValue, CGRect;
overload selector("valueWithCGSize:") = NSValue, CGSize;
overload selector("valueWithNonretainedObject:") = NSValue, Id;
overload selector("valueWithPointer:") = NSValue, RawPointer;
overload selector("valueWithRange:") = NSValue, NSRange;
overload selector("valueWithUIEdgeInsets:") = NSValue, UIEdgeInsets;
overload selector("valuesForPasteboardType:inItemSet:") = NSArray, NSString, NSIndexSet;
overload selector("variable") = NSString;
overload selector("velocity") = Float;
overload selector("velocityInView:") = CGPoint, UIView;
overload selector("version") = Int;
overload selector("versionForClassName:") = Int, NSString;
overload selector("veryShortMonthSymbols") = NSArray;
overload selector("veryShortStandaloneMonthSymbols") = NSArray;
overload selector("veryShortStandaloneWeekdaySymbols") = NSArray;
overload selector("veryShortWeekdaySymbols") = NSArray;
overload selector("videoEditorController:didFailWithError:") = Void, UIVideoEditorController, NSError;
overload selector("videoEditorController:didSaveEditedVideoToPath:") = Void, UIVideoEditorController, NSString;
overload selector("videoEditorControllerDidCancel:") = Void, UIVideoEditorController;
overload selector("videoMaximumDuration") = Double;
overload selector("videoPath") = NSString;
overload selector("videoQuality") = UInt;
overload selector("view") = UIView;
overload selector("viewControllers") = NSArray;
overload selector("viewDidAppear:") = Void, Bool;
overload selector("viewDidDisappear:") = Void, Bool;
overload selector("viewDidLoad") = Void;
overload selector("viewDidUnload") = Void;
overload selector("viewFlipsideBackgroundColor") = UIColor;
overload selector("viewForRow:forComponent:") = UIView, Int, Int;
overload selector("viewForZoomingInScrollView:") = UIView, UIScrollView;
overload selector("viewWillAppear:") = Void, Bool;
overload selector("viewWillDisappear:") = Void, Bool;
overload selector("viewWithTag:") = UIView, Int;
overload selector("visibleCells") = NSArray;
overload selector("visibleViewController") = UIViewController;
overload selector("volatileDomainForName:") = NSDictionary, NSString;
overload selector("volatileDomainNames") = NSArray;
overload selector("wait") = Void;
overload selector("waitForDataInBackgroundAndNotify") = Void;
overload selector("waitForDataInBackgroundAndNotifyForModes:") = Void, NSArray;
overload selector("waitUntilAllOperationsAreFinished") = Void;
overload selector("waitUntilDate:") = Bool, NSDate;
overload selector("waitUntilFinished") = Void;
overload selector("wantsFullScreenLayout") = Bool;
overload selector("webView:didFailLoadWithError:") = Void, UIWebView, NSError;
overload selector("webView:shouldStartLoadWithRequest:navigationType:") = Bool, UIWebView, NSURLRequest, UInt;
overload selector("webViewDidFinishLoad:") = Void, UIWebView;
overload selector("webViewDidStartLoad:") = Void, UIWebView;
overload selector("week") = Int;
overload selector("weekday") = Int;
overload selector("weekdayOrdinal") = Int;
overload selector("weekdaySymbols") = NSArray;
overload selector("whiteColor") = UIColor;
overload selector("whitespaceAndNewlineCharacterSet") = Id;
overload selector("whitespaceCharacterSet") = Id;
overload selector("width") = Float;
overload selector("widthForSegmentAtIndex:") = Float, UInt;
overload selector("willAnimateFirstHalfOfRotationToInterfaceOrientation:duration:") = Void, UIInterfaceOrientation, Double;
overload selector("willAnimateRotationToInterfaceOrientation:duration:") = Void, UIInterfaceOrientation, Double;
overload selector("willAnimateSecondHalfOfRotationFromInterfaceOrientation:duration:") = Void, UIInterfaceOrientation, Double;
overload selector("willChange:valuesAtIndexes:forKey:") = Void, UInt, NSIndexSet, NSString;
overload selector("willChangeValueForKey:") = Void, NSString;
overload selector("willChangeValueForKey:withSetMutation:usingObjects:") = Void, NSString, UInt, NSSet;
overload selector("willMoveToSuperview:") = Void, UIView;
overload selector("willMoveToWindow:") = Void, UIWindow;
overload selector("willPresentActionSheet:") = Void, UIActionSheet;
overload selector("willPresentAlertView:") = Void, UIAlertView;
overload selector("willRemoveSubview:") = Void, UIView;
overload selector("willRotateToInterfaceOrientation:duration:") = Void, UIInterfaceOrientation, Double;
overload selector("willTransitionToState:") = Void, UInt;
overload selector("window") = UIWindow;
overload selector("windowLevel") = Float;
overload selector("windows") = NSArray;
overload selector("windowsLocaleCodeFromLocaleIdentifier:") = UInt, NSString;
overload selector("write:maxLength:") = Int, Pointer[CUChar], UInt;
overload selector("writeBookmarkData:toURL:options:error:") = Bool, NSData, NSURL, UInt, Pointer[NSError];
overload selector("writeData:") = Void, NSData;
overload selector("writePropertyList:toStream:format:options:error:") = Int, Id, NSOutputStream, UInt, UInt, Pointer[NSError];
overload selector("writeToFile:atomically:") = Bool, NSString, Bool;
overload selector("writeToFile:atomically:encoding:error:") = Bool, NSString, Bool, UInt, Pointer[NSError];
overload selector("writeToFile:atomically:updateFilenames:") = Bool, NSString, Bool, Bool;
overload selector("writeToFile:options:error:") = Bool, NSString, UInt, Pointer[NSError];
overload selector("writeToURL:atomically:") = Bool, NSURL, Bool;
overload selector("writeToURL:atomically:encoding:error:") = Bool, NSURL, Bool, UInt, Pointer[NSError];
overload selector("writeToURL:options:error:") = Bool, NSURL, UInt, Pointer[NSError];
overload selector("writeToURL:options:originalContentsURL:error:") = Bool, NSURL, UInt, NSURL, Pointer[NSError];
overload selector("x") = Double;
overload selector("xHeight") = Float;
overload selector("y") = Double;
overload selector("year") = Int;
overload selector("yellowColor") = UIColor;
overload selector("z") = Double;
overload selector("zero") = NSDecimalNumber;
overload selector("zeroSymbol") = NSString;
overload selector("zone") = Pointer[NSZone];
overload selector("zoomScale") = Float;
overload selector("zoomToRect:animated:") = Void, CGRect, Bool;

overload externalInstanceMethod(#NSBundle, "loadNibNamed:owner:options:") = NSArray, NSString, Id, NSDictionary;

overload externalInstanceMethod(#NSCoder, "encodeCGPoint:forKey:") = Void, CGPoint, NSString;
overload externalInstanceMethod(#NSCoder, "encodeCGSize:forKey:") = Void, CGSize, NSString;
overload externalInstanceMethod(#NSCoder, "encodeCGRect:forKey:") = Void, CGRect, NSString;
overload externalInstanceMethod(#NSCoder, "encodeCGAffineTransform:forKey:") = Void, CGAffineTransform, NSString;
overload externalInstanceMethod(#NSCoder, "encodeUIEdgeInsets:forKey:") = Void, UIEdgeInsets, NSString;
overload externalInstanceMethod(#NSCoder, "decodeCGPointForKey:") = CGPoint, NSString;
overload externalInstanceMethod(#NSCoder, "decodeCGSizeForKey:") = CGSize, NSString;
overload externalInstanceMethod(#NSCoder, "decodeCGRectForKey:") = CGRect, NSString;
overload externalInstanceMethod(#NSCoder, "decodeCGAffineTransformForKey:") = CGAffineTransform, NSString;
overload externalInstanceMethod(#NSCoder, "decodeUIEdgeInsetsForKey:") = UIEdgeInsets, NSString;

overload externalClassMethod(#NSIndexPath, "indexPathForRow:inSection:") = NSIndexPath, UInt, UInt;
overload externalInstanceMethod(#NSIndexPath, "section") = UInt;
overload externalInstanceMethod(#NSIndexPath, "row") = UInt;

overload externalInstanceMethod(#NSObject, "cut:") = Void, Id;
overload externalInstanceMethod(#NSObject, "copy:") = Void, Id;
overload externalInstanceMethod(#NSObject, "paste:") = Void, Id;
overload externalInstanceMethod(#NSObject, "select:") = Void, Id;
overload externalInstanceMethod(#NSObject, "selectAll:") = Void, Id;
overload externalInstanceMethod(#NSObject, "delete:") = Void, Id;
overload externalInstanceMethod(#NSObject, "isAccessibilityElement") = Bool;
overload externalInstanceMethod(#NSObject, "setIsAccessibilityElement:") = Void, Bool;
overload externalInstanceMethod(#NSObject, "accessibilityLabel") = NSString;
overload externalInstanceMethod(#NSObject, "setAccessibilityLabel:") = Void, NSString;
overload externalInstanceMethod(#NSObject, "accessibilityHint") = NSString;
overload externalInstanceMethod(#NSObject, "setAccessibilityHint:") = Void, NSString;
overload externalInstanceMethod(#NSObject, "accessibilityValue") = NSString;
overload externalInstanceMethod(#NSObject, "setAccessibilityValue:") = Void, NSString;
overload externalInstanceMethod(#NSObject, "accessibilityTraits") = UInt64;
overload externalInstanceMethod(#NSObject, "setAccessibilityTraits:") = Void, UInt64;
overload externalInstanceMethod(#NSObject, "accessibilityFrame") = CGRect;
overload externalInstanceMethod(#NSObject, "setAccessibilityFrame:") = Void, CGRect;
overload externalInstanceMethod(#NSObject, "accessibilityLanguage") = NSString;
overload externalInstanceMethod(#NSObject, "setAccessibilityLanguage:") = Void, NSString;
overload externalInstanceMethod(#NSObject, "accessibilityElementCount") = Int;
overload externalInstanceMethod(#NSObject, "accessibilityElementAtIndex:") = Id, Int;
overload externalInstanceMethod(#NSObject, "indexOfAccessibilityElement:") = Int, Id;
overload externalInstanceMethod(#NSObject, "accessibilityElementDidBecomeFocused") = Void;
overload externalInstanceMethod(#NSObject, "accessibilityElementDidLoseFocus") = Void;
overload externalInstanceMethod(#NSObject, "accessibilityElementIsFocused") = Bool;
overload externalInstanceMethod(#NSObject, "accessibilityIncrement") = Void;
overload externalInstanceMethod(#NSObject, "accessibilityDecrement") = Void;
overload externalInstanceMethod(#NSObject, "awakeFromNib") = Void;

overload externalInstanceMethod(#NSString, "sizeWithFont:") = CGSize, UIFont;
overload externalInstanceMethod(#NSString, "sizeWithFont:forWidth:lineBreakMode:") = CGSize, UIFont, Float, UILineBreakMode;
overload externalInstanceMethod(#NSString, "drawAtPoint:withFont:") = CGSize, CGPoint, UIFont;
overload externalInstanceMethod(#NSString, "drawAtPoint:forWidth:withFont:lineBreakMode:") = CGSize, CGPoint, Float, UIFont, UILineBreakMode;
overload externalInstanceMethod(#NSString, "sizeWithFont:constrainedToSize:") = CGSize, UIFont, CGSize;
overload externalInstanceMethod(#NSString, "sizeWithFont:constrainedToSize:lineBreakMode:") = CGSize, UIFont, CGSize, UILineBreakMode;
overload externalInstanceMethod(#NSString, "drawInRect:withFont:") = CGSize, CGRect, UIFont;
overload externalInstanceMethod(#NSString, "drawInRect:withFont:lineBreakMode:") = CGSize, CGRect, UIFont, UILineBreakMode;
overload externalInstanceMethod(#NSString, "drawInRect:withFont:lineBreakMode:alignment:") = CGSize, CGRect, UIFont, UILineBreakMode, UITextAlignment;
overload externalInstanceMethod(#NSString, "sizeWithFont:minFontSize:actualFontSize:forWidth:lineBreakMode:") = CGSize, UIFont, Float, Pointer[Float], Float, UILineBreakMode;
overload externalInstanceMethod(#NSString, "drawAtPoint:forWidth:withFont:fontSize:lineBreakMode:baselineAdjustment:") = CGSize, CGPoint, Float, UIFont, Float, UILineBreakMode, UIBaselineAdjustment;
overload externalInstanceMethod(#NSString, "drawAtPoint:forWidth:withFont:minFontSize:actualFontSize:lineBreakMode:baselineAdjustment:") = CGSize, CGPoint, Float, UIFont, Float, Pointer[Float], UILineBreakMode, UIBaselineAdjustment;

overload externalClassMethod(#NSValue, "valueWithCGPoint:") = NSValue, CGPoint;
overload externalClassMethod(#NSValue, "valueWithCGSize:") = NSValue, CGSize;
overload externalClassMethod(#NSValue, "valueWithCGRect:") = NSValue, CGRect;
overload externalClassMethod(#NSValue, "valueWithCGAffineTransform:") = NSValue, CGAffineTransform;
overload externalClassMethod(#NSValue, "valueWithUIEdgeInsets:") = NSValue, UIEdgeInsets;
overload externalInstanceMethod(#NSValue, "CGPointValue") = CGPoint;
overload externalInstanceMethod(#NSValue, "CGSizeValue") = CGSize;
overload externalInstanceMethod(#NSValue, "CGRectValue") = CGRect;
overload externalInstanceMethod(#NSValue, "CGAffineTransformValue") = CGAffineTransform;
overload externalInstanceMethod(#NSValue, "UIEdgeInsetsValue") = UIEdgeInsets;

record UIAcceleration = externalClass(NSObject);
overload externalInstanceMethod(#UIAcceleration, "timestamp") = Double;
overload externalInstanceMethod(#UIAcceleration, "x") = Double;
overload externalInstanceMethod(#UIAcceleration, "y") = Double;
overload externalInstanceMethod(#UIAcceleration, "z") = Double;

record UIAccelerometer = externalClass(NSObject);
overload externalClassMethod(#UIAccelerometer, "sharedAccelerometer") = UIAccelerometer;
overload externalInstanceMethod(#UIAccelerometer, "updateInterval") = Double;
overload externalInstanceMethod(#UIAccelerometer, "setUpdateInterval:") = Void, Double;
overload externalInstanceMethod(#UIAccelerometer, "delegate") = Id;
overload externalInstanceMethod(#UIAccelerometer, "setDelegate:") = Void, Id;

record UIAccessibilityElement = externalClass(NSObject);
overload externalInstanceMethod(#UIAccessibilityElement, "initWithAccessibilityContainer:") = Id, Id;
overload externalInstanceMethod(#UIAccessibilityElement, "accessibilityContainer") = Id;
overload externalInstanceMethod(#UIAccessibilityElement, "setAccessibilityContainer:") = Void, Id;
overload externalInstanceMethod(#UIAccessibilityElement, "isAccessibilityElement") = Bool;
overload externalInstanceMethod(#UIAccessibilityElement, "setIsAccessibilityElement:") = Void, Bool;
overload externalInstanceMethod(#UIAccessibilityElement, "accessibilityLabel") = NSString;
overload externalInstanceMethod(#UIAccessibilityElement, "setAccessibilityLabel:") = Void, NSString;
overload externalInstanceMethod(#UIAccessibilityElement, "accessibilityHint") = NSString;
overload externalInstanceMethod(#UIAccessibilityElement, "setAccessibilityHint:") = Void, NSString;
overload externalInstanceMethod(#UIAccessibilityElement, "accessibilityValue") = NSString;
overload externalInstanceMethod(#UIAccessibilityElement, "setAccessibilityValue:") = Void, NSString;
overload externalInstanceMethod(#UIAccessibilityElement, "accessibilityFrame") = CGRect;
overload externalInstanceMethod(#UIAccessibilityElement, "setAccessibilityFrame:") = Void, CGRect;
overload externalInstanceMethod(#UIAccessibilityElement, "accessibilityTraits") = UInt64;
overload externalInstanceMethod(#UIAccessibilityElement, "setAccessibilityTraits:") = Void, UInt64;

record UIActionSheet = externalClass(UIView);
overload externalVarargInstanceMethod(#UIActionSheet, "initWithTitle:delegate:cancelButtonTitle:destructiveButtonTitle:otherButtonTitles:") = Id, NSString, Id, NSString, NSString, NSString;
overload externalInstanceMethod(#UIActionSheet, "addButtonWithTitle:") = Int, NSString;
overload externalInstanceMethod(#UIActionSheet, "buttonTitleAtIndex:") = NSString, Int;
overload externalInstanceMethod(#UIActionSheet, "showFromToolbar:") = Void, UIToolbar;
overload externalInstanceMethod(#UIActionSheet, "showFromTabBar:") = Void, UITabBar;
overload externalInstanceMethod(#UIActionSheet, "showFromBarButtonItem:animated:") = Void, UIBarButtonItem, Bool;
overload externalInstanceMethod(#UIActionSheet, "showFromRect:inView:animated:") = Void, CGRect, UIView, Bool;
overload externalInstanceMethod(#UIActionSheet, "showInView:") = Void, UIView;
overload externalInstanceMethod(#UIActionSheet, "dismissWithClickedButtonIndex:animated:") = Void, Int, Bool;
overload externalInstanceMethod(#UIActionSheet, "delegate") = Id;
overload externalInstanceMethod(#UIActionSheet, "setDelegate:") = Void, Id;
overload externalInstanceMethod(#UIActionSheet, "title") = NSString;
overload externalInstanceMethod(#UIActionSheet, "setTitle:") = Void, NSString;
overload externalInstanceMethod(#UIActionSheet, "actionSheetStyle") = UIActionSheetStyle;
overload externalInstanceMethod(#UIActionSheet, "setActionSheetStyle:") = Void, UIActionSheetStyle;
overload externalInstanceMethod(#UIActionSheet, "numberOfButtons") = Int;
overload externalInstanceMethod(#UIActionSheet, "cancelButtonIndex") = Int;
overload externalInstanceMethod(#UIActionSheet, "setCancelButtonIndex:") = Void, Int;
overload externalInstanceMethod(#UIActionSheet, "destructiveButtonIndex") = Int;
overload externalInstanceMethod(#UIActionSheet, "setDestructiveButtonIndex:") = Void, Int;
overload externalInstanceMethod(#UIActionSheet, "firstOtherButtonIndex") = Int;
overload externalInstanceMethod(#UIActionSheet, "isVisible") = Bool;

record UIActivityIndicatorView = externalClass(UIView);
overload externalInstanceMethod(#UIActivityIndicatorView, "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#UIActivityIndicatorView, "initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#UIActivityIndicatorView, "initWithActivityIndicatorStyle:") = Id, UIActivityIndicatorViewStyle;
overload externalInstanceMethod(#UIActivityIndicatorView, "startAnimating") = Void;
overload externalInstanceMethod(#UIActivityIndicatorView, "stopAnimating") = Void;
overload externalInstanceMethod(#UIActivityIndicatorView, "isAnimating") = Bool;
overload externalInstanceMethod(#UIActivityIndicatorView, "activityIndicatorViewStyle") = UIActivityIndicatorViewStyle;
overload externalInstanceMethod(#UIActivityIndicatorView, "setActivityIndicatorViewStyle:") = Void, UIActivityIndicatorViewStyle;
overload externalInstanceMethod(#UIActivityIndicatorView, "hidesWhenStopped") = Bool;
overload externalInstanceMethod(#UIActivityIndicatorView, "setHidesWhenStopped:") = Void, Bool;

record UIAlertView = externalClass(UIView);
overload externalVarargInstanceMethod(#UIAlertView, "initWithTitle:message:delegate:cancelButtonTitle:otherButtonTitles:") = Id, NSString, NSString, Id, NSString, NSString;
overload externalInstanceMethod(#UIAlertView, "addButtonWithTitle:") = Int, NSString;
overload externalInstanceMethod(#UIAlertView, "buttonTitleAtIndex:") = NSString, Int;
overload externalInstanceMethod(#UIAlertView, "show") = Void;
overload externalInstanceMethod(#UIAlertView, "dismissWithClickedButtonIndex:animated:") = Void, Int, Bool;
overload externalInstanceMethod(#UIAlertView, "delegate") = Id;
overload externalInstanceMethod(#UIAlertView, "setDelegate:") = Void, Id;
overload externalInstanceMethod(#UIAlertView, "title") = NSString;
overload externalInstanceMethod(#UIAlertView, "setTitle:") = Void, NSString;
overload externalInstanceMethod(#UIAlertView, "message") = NSString;
overload externalInstanceMethod(#UIAlertView, "setMessage:") = Void, NSString;
overload externalInstanceMethod(#UIAlertView, "numberOfButtons") = Int;
overload externalInstanceMethod(#UIAlertView, "cancelButtonIndex") = Int;
overload externalInstanceMethod(#UIAlertView, "setCancelButtonIndex:") = Void, Int;
overload externalInstanceMethod(#UIAlertView, "firstOtherButtonIndex") = Int;
overload externalInstanceMethod(#UIAlertView, "isVisible") = Bool;

record UIApplication = externalClass(UIResponder);
overload externalInstanceMethod(#UIApplication, "actionSheet:clickedButtonAtIndex:") = Void, UIActionSheet, Int;
overload externalInstanceMethod(#UIApplication, "actionSheetCancel:") = Void, UIActionSheet;
overload externalInstanceMethod(#UIApplication, "willPresentActionSheet:") = Void, UIActionSheet;
overload externalInstanceMethod(#UIApplication, "didPresentActionSheet:") = Void, UIActionSheet;
overload externalInstanceMethod(#UIApplication, "actionSheet:willDismissWithButtonIndex:") = Void, UIActionSheet, Int;
overload externalInstanceMethod(#UIApplication, "actionSheet:didDismissWithButtonIndex:") = Void, UIActionSheet, Int;
overload externalClassMethod(#UIApplication, "sharedApplication") = UIApplication;
overload externalInstanceMethod(#UIApplication, "beginIgnoringInteractionEvents") = Void;
overload externalInstanceMethod(#UIApplication, "endIgnoringInteractionEvents") = Void;
overload externalInstanceMethod(#UIApplication, "isIgnoringInteractionEvents") = Bool;
overload externalInstanceMethod(#UIApplication, "openURL:") = Bool, NSURL;
overload externalInstanceMethod(#UIApplication, "canOpenURL:") = Bool, NSURL;
overload externalInstanceMethod(#UIApplication, "sendEvent:") = Void, UIEvent;
overload externalInstanceMethod(#UIApplication, "sendAction:to:from:forEvent:") = Bool, SelectorHandle, Id, Id, UIEvent;
overload externalInstanceMethod(#UIApplication, "setStatusBarStyle:animated:") = Void, UIStatusBarStyle, Bool;
overload externalInstanceMethod(#UIApplication, "setStatusBarHidden:withAnimation:") = Void, Bool, UIStatusBarAnimation;
overload externalInstanceMethod(#UIApplication, "setStatusBarOrientation:animated:") = Void, UIInterfaceOrientation, Bool;
overload externalInstanceMethod(#UIApplication, "beginBackgroundTaskWithExpirationHandler:") = UInt, UnknownType;
overload externalInstanceMethod(#UIApplication, "endBackgroundTask:") = Void, UInt;
overload externalInstanceMethod(#UIApplication, "setKeepAliveTimeout:handler:") = Bool, Double, UnknownType;
overload externalInstanceMethod(#UIApplication, "clearKeepAliveTimeout") = Void;
overload externalInstanceMethod(#UIApplication, "delegate") = Id;
overload externalInstanceMethod(#UIApplication, "setDelegate:") = Void, Id;
overload externalInstanceMethod(#UIApplication, "isIdleTimerDisabled") = Bool;
overload externalInstanceMethod(#UIApplication, "setIdleTimerDisabled:") = Void, Bool;
overload externalInstanceMethod(#UIApplication, "keyWindow") = UIWindow;
overload externalInstanceMethod(#UIApplication, "windows") = NSArray;
overload externalInstanceMethod(#UIApplication, "isNetworkActivityIndicatorVisible") = Bool;
overload externalInstanceMethod(#UIApplication, "setNetworkActivityIndicatorVisible:") = Void, Bool;
overload externalInstanceMethod(#UIApplication, "statusBarStyle") = UIStatusBarStyle;
overload externalInstanceMethod(#UIApplication, "setStatusBarStyle:") = Void, UIStatusBarStyle;
overload externalInstanceMethod(#UIApplication, "isStatusBarHidden") = Bool;
overload externalInstanceMethod(#UIApplication, "setStatusBarHidden:") = Void, Bool;
overload externalInstanceMethod(#UIApplication, "statusBarOrientation") = UIInterfaceOrientation;
overload externalInstanceMethod(#UIApplication, "setStatusBarOrientation:") = Void, UIInterfaceOrientation;
overload externalInstanceMethod(#UIApplication, "statusBarOrientationAnimationDuration") = Double;
overload externalInstanceMethod(#UIApplication, "statusBarFrame") = CGRect;
overload externalInstanceMethod(#UIApplication, "applicationIconBadgeNumber") = Int;
overload externalInstanceMethod(#UIApplication, "setApplicationIconBadgeNumber:") = Void, Int;
overload externalInstanceMethod(#UIApplication, "applicationSupportsShakeToEdit") = Bool;
overload externalInstanceMethod(#UIApplication, "setApplicationSupportsShakeToEdit:") = Void, Bool;
overload externalInstanceMethod(#UIApplication, "applicationState") = UIApplicationState;
overload externalInstanceMethod(#UIApplication, "backgroundTimeRemaining") = Double;
overload externalInstanceMethod(#UIApplication, "isProtectedDataAvailable") = Bool;
overload externalInstanceMethod(#UIApplication, "registerForRemoteNotificationTypes:") = Void, UIRemoteNotificationType;
overload externalInstanceMethod(#UIApplication, "unregisterForRemoteNotifications") = Void;
overload externalInstanceMethod(#UIApplication, "enabledRemoteNotificationTypes") = UIRemoteNotificationType;
overload externalInstanceMethod(#UIApplication, "presentLocalNotificationNow:") = Void, UILocalNotification;
overload externalInstanceMethod(#UIApplication, "scheduleLocalNotification:") = Void, UILocalNotification;
overload externalInstanceMethod(#UIApplication, "cancelLocalNotification:") = Void, UILocalNotification;
overload externalInstanceMethod(#UIApplication, "cancelAllLocalNotifications") = Void;
overload externalInstanceMethod(#UIApplication, "scheduledLocalNotifications") = NSArray;
overload externalInstanceMethod(#UIApplication, "beginReceivingRemoteControlEvents") = Void;
overload externalInstanceMethod(#UIApplication, "endReceivingRemoteControlEvents") = Void;
overload externalInstanceMethod(#UIApplication, "setStatusBarHidden:animated:") = Void, Bool, Bool;
overload externalInstanceMethod(#UIApplication, "isProximitySensingEnabled") = Bool;
overload externalInstanceMethod(#UIApplication, "setProximitySensingEnabled:") = Void, Bool;

record UIBarButtonItem = externalClass(UIBarItem);
overload externalInstanceMethod(#UIBarButtonItem, "initWithImage:style:target:action:") = Id, UIImage, UIBarButtonItemStyle, Id, SelectorHandle;
overload externalInstanceMethod(#UIBarButtonItem, "initWithTitle:style:target:action:") = Id, NSString, UIBarButtonItemStyle, Id, SelectorHandle;
overload externalInstanceMethod(#UIBarButtonItem, "initWithBarButtonSystemItem:target:action:") = Id, UIBarButtonSystemItem, Id, SelectorHandle;
overload externalInstanceMethod(#UIBarButtonItem, "initWithCustomView:") = Id, UIView;
overload externalInstanceMethod(#UIBarButtonItem, "style") = UIBarButtonItemStyle;
overload externalInstanceMethod(#UIBarButtonItem, "setStyle:") = Void, UIBarButtonItemStyle;
overload externalInstanceMethod(#UIBarButtonItem, "width") = Float;
overload externalInstanceMethod(#UIBarButtonItem, "setWidth:") = Void, Float;
overload externalInstanceMethod(#UIBarButtonItem, "possibleTitles") = NSSet;
overload externalInstanceMethod(#UIBarButtonItem, "setPossibleTitles:") = Void, NSSet;
overload externalInstanceMethod(#UIBarButtonItem, "customView") = UIView;
overload externalInstanceMethod(#UIBarButtonItem, "setCustomView:") = Void, UIView;
overload externalInstanceMethod(#UIBarButtonItem, "action") = SelectorHandle;
overload externalInstanceMethod(#UIBarButtonItem, "setAction:") = Void, SelectorHandle;
overload externalInstanceMethod(#UIBarButtonItem, "target") = Id;
overload externalInstanceMethod(#UIBarButtonItem, "setTarget:") = Void, Id;

record UIBarItem = externalClass(NSObject);
overload externalInstanceMethod(#UIBarItem, "isEnabled") = Bool;
overload externalInstanceMethod(#UIBarItem, "setEnabled:") = Void, Bool;
overload externalInstanceMethod(#UIBarItem, "title") = NSString;
overload externalInstanceMethod(#UIBarItem, "setTitle:") = Void, NSString;
overload externalInstanceMethod(#UIBarItem, "image") = UIImage;
overload externalInstanceMethod(#UIBarItem, "setImage:") = Void, UIImage;
overload externalInstanceMethod(#UIBarItem, "imageInsets") = UIEdgeInsets;
overload externalInstanceMethod(#UIBarItem, "setImageInsets:") = Void, UIEdgeInsets;
overload externalInstanceMethod(#UIBarItem, "tag") = Int;
overload externalInstanceMethod(#UIBarItem, "setTag:") = Void, Int;

record UIBezierPath = externalClass(NSObject);
overload externalInstanceMethod(#UIBezierPath, "copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#UIBezierPath, "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#UIBezierPath, "initWithCoder:") = Id, NSCoder;
overload externalClassMethod(#UIBezierPath, "bezierPath") = UIBezierPath;
overload externalClassMethod(#UIBezierPath, "bezierPathWithRect:") = UIBezierPath, CGRect;
overload externalClassMethod(#UIBezierPath, "bezierPathWithOvalInRect:") = UIBezierPath, CGRect;
overload externalClassMethod(#UIBezierPath, "bezierPathWithRoundedRect:cornerRadius:") = UIBezierPath, CGRect, Float;
overload externalClassMethod(#UIBezierPath, "bezierPathWithRoundedRect:byRoundingCorners:cornerRadii:") = UIBezierPath, CGRect, UInt, CGSize;
overload externalClassMethod(#UIBezierPath, "bezierPathWithArcCenter:radius:startAngle:endAngle:clockwise:") = UIBezierPath, CGPoint, Float, Float, Float, Bool;
overload externalClassMethod(#UIBezierPath, "bezierPathWithCGPath:") = UIBezierPath, CGPathRef;
overload externalInstanceMethod(#UIBezierPath, "moveToPoint:") = Void, CGPoint;
overload externalInstanceMethod(#UIBezierPath, "addLineToPoint:") = Void, CGPoint;
overload externalInstanceMethod(#UIBezierPath, "addCurveToPoint:controlPoint1:controlPoint2:") = Void, CGPoint, CGPoint, CGPoint;
overload externalInstanceMethod(#UIBezierPath, "addQuadCurveToPoint:controlPoint:") = Void, CGPoint, CGPoint;
overload externalInstanceMethod(#UIBezierPath, "addArcWithCenter:radius:startAngle:endAngle:clockwise:") = Void, CGPoint, Float, Float, Float, Bool;
overload externalInstanceMethod(#UIBezierPath, "closePath") = Void;
overload externalInstanceMethod(#UIBezierPath, "removeAllPoints") = Void;
overload externalInstanceMethod(#UIBezierPath, "appendPath:") = Void, UIBezierPath;
overload externalInstanceMethod(#UIBezierPath, "applyTransform:") = Void, CGAffineTransform;
overload externalInstanceMethod(#UIBezierPath, "containsPoint:") = Bool, CGPoint;
overload externalInstanceMethod(#UIBezierPath, "setLineDash:count:phase:") = Void, Pointer[Float], Int, Float;
overload externalInstanceMethod(#UIBezierPath, "getLineDash:count:phase:") = Void, Pointer[Float], Pointer[Int], Pointer[Float];
overload externalInstanceMethod(#UIBezierPath, "fill") = Void;
overload externalInstanceMethod(#UIBezierPath, "stroke") = Void;
overload externalInstanceMethod(#UIBezierPath, "fillWithBlendMode:alpha:") = Void, CGBlendMode, Float;
overload externalInstanceMethod(#UIBezierPath, "strokeWithBlendMode:alpha:") = Void, CGBlendMode, Float;
overload externalInstanceMethod(#UIBezierPath, "addClip") = Void;
overload externalInstanceMethod(#UIBezierPath, "CGPath") = CGPathRef;
overload externalInstanceMethod(#UIBezierPath, "setCGPath:") = Void, CGPathRef;
overload externalInstanceMethod(#UIBezierPath, "isEmpty") = Bool;
overload externalInstanceMethod(#UIBezierPath, "bounds") = CGRect;
overload externalInstanceMethod(#UIBezierPath, "currentPoint") = CGPoint;
overload externalInstanceMethod(#UIBezierPath, "lineWidth") = Float;
overload externalInstanceMethod(#UIBezierPath, "setLineWidth:") = Void, Float;
overload externalInstanceMethod(#UIBezierPath, "lineCapStyle") = CGLineCap;
overload externalInstanceMethod(#UIBezierPath, "setLineCapStyle:") = Void, CGLineCap;
overload externalInstanceMethod(#UIBezierPath, "lineJoinStyle") = CGLineJoin;
overload externalInstanceMethod(#UIBezierPath, "setLineJoinStyle:") = Void, CGLineJoin;
overload externalInstanceMethod(#UIBezierPath, "miterLimit") = Float;
overload externalInstanceMethod(#UIBezierPath, "setMiterLimit:") = Void, Float;
overload externalInstanceMethod(#UIBezierPath, "flatness") = Float;
overload externalInstanceMethod(#UIBezierPath, "setFlatness:") = Void, Float;
overload externalInstanceMethod(#UIBezierPath, "usesEvenOddFillRule") = Bool;
overload externalInstanceMethod(#UIBezierPath, "setUsesEvenOddFillRule:") = Void, Bool;

record UIButton = externalClass(UIControl);
overload externalInstanceMethod(#UIButton, "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#UIButton, "initWithCoder:") = Id, NSCoder;
overload externalClassMethod(#UIButton, "buttonWithType:") = Id, UIButtonType;
overload externalInstanceMethod(#UIButton, "setTitle:forState:") = Void, NSString, UInt;
overload externalInstanceMethod(#UIButton, "setTitleColor:forState:") = Void, UIColor, UInt;
overload externalInstanceMethod(#UIButton, "setTitleShadowColor:forState:") = Void, UIColor, UInt;
overload externalInstanceMethod(#UIButton, "setImage:forState:") = Void, UIImage, UInt;
overload externalInstanceMethod(#UIButton, "setBackgroundImage:forState:") = Void, UIImage, UInt;
overload externalInstanceMethod(#UIButton, "titleForState:") = NSString, UInt;
overload externalInstanceMethod(#UIButton, "titleColorForState:") = UIColor, UInt;
overload externalInstanceMethod(#UIButton, "titleShadowColorForState:") = UIColor, UInt;
overload externalInstanceMethod(#UIButton, "imageForState:") = UIImage, UInt;
overload externalInstanceMethod(#UIButton, "backgroundImageForState:") = UIImage, UInt;
overload externalInstanceMethod(#UIButton, "backgroundRectForBounds:") = CGRect, CGRect;
overload externalInstanceMethod(#UIButton, "contentRectForBounds:") = CGRect, CGRect;
overload externalInstanceMethod(#UIButton, "titleRectForContentRect:") = CGRect, CGRect;
overload externalInstanceMethod(#UIButton, "imageRectForContentRect:") = CGRect, CGRect;
overload externalInstanceMethod(#UIButton, "contentEdgeInsets") = UIEdgeInsets;
overload externalInstanceMethod(#UIButton, "setContentEdgeInsets:") = Void, UIEdgeInsets;
overload externalInstanceMethod(#UIButton, "titleEdgeInsets") = UIEdgeInsets;
overload externalInstanceMethod(#UIButton, "setTitleEdgeInsets:") = Void, UIEdgeInsets;
overload externalInstanceMethod(#UIButton, "reversesTitleShadowWhenHighlighted") = Bool;
overload externalInstanceMethod(#UIButton, "setReversesTitleShadowWhenHighlighted:") = Void, Bool;
overload externalInstanceMethod(#UIButton, "imageEdgeInsets") = UIEdgeInsets;
overload externalInstanceMethod(#UIButton, "setImageEdgeInsets:") = Void, UIEdgeInsets;
overload externalInstanceMethod(#UIButton, "adjustsImageWhenHighlighted") = Bool;
overload externalInstanceMethod(#UIButton, "setAdjustsImageWhenHighlighted:") = Void, Bool;
overload externalInstanceMethod(#UIButton, "adjustsImageWhenDisabled") = Bool;
overload externalInstanceMethod(#UIButton, "setAdjustsImageWhenDisabled:") = Void, Bool;
overload externalInstanceMethod(#UIButton, "showsTouchWhenHighlighted") = Bool;
overload externalInstanceMethod(#UIButton, "setShowsTouchWhenHighlighted:") = Void, Bool;
overload externalInstanceMethod(#UIButton, "buttonType") = UIButtonType;
overload externalInstanceMethod(#UIButton, "currentTitle") = NSString;
overload externalInstanceMethod(#UIButton, "currentTitleColor") = UIColor;
overload externalInstanceMethod(#UIButton, "currentTitleShadowColor") = UIColor;
overload externalInstanceMethod(#UIButton, "currentImage") = UIImage;
overload externalInstanceMethod(#UIButton, "currentBackgroundImage") = UIImage;
overload externalInstanceMethod(#UIButton, "titleLabel") = UILabel;
overload externalInstanceMethod(#UIButton, "imageView") = UIImageView;
overload externalInstanceMethod(#UIButton, "font") = UIFont;
overload externalInstanceMethod(#UIButton, "setFont:") = Void, UIFont;
overload externalInstanceMethod(#UIButton, "lineBreakMode") = UILineBreakMode;
overload externalInstanceMethod(#UIButton, "setLineBreakMode:") = Void, UILineBreakMode;
overload externalInstanceMethod(#UIButton, "titleShadowOffset") = CGSize;
overload externalInstanceMethod(#UIButton, "setTitleShadowOffset:") = Void, CGSize;

record UIColor = externalClass(NSObject);
overload externalInstanceMethod(#UIColor, "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#UIColor, "initWithCoder:") = Id, NSCoder;
overload externalClassMethod(#UIColor, "colorWithWhite:alpha:") = UIColor, Float, Float;
overload externalClassMethod(#UIColor, "colorWithHue:saturation:brightness:alpha:") = UIColor, Float, Float, Float, Float;
overload externalClassMethod(#UIColor, "colorWithRed:green:blue:alpha:") = UIColor, Float, Float, Float, Float;
overload externalClassMethod(#UIColor, "colorWithCGColor:") = UIColor, CGColorRef;
overload externalClassMethod(#UIColor, "colorWithPatternImage:") = UIColor, UIImage;
overload externalInstanceMethod(#UIColor, "initWithWhite:alpha:") = UIColor, Float, Float;
overload externalInstanceMethod(#UIColor, "initWithHue:saturation:brightness:alpha:") = UIColor, Float, Float, Float, Float;
overload externalInstanceMethod(#UIColor, "initWithRed:green:blue:alpha:") = UIColor, Float, Float, Float, Float;
overload externalInstanceMethod(#UIColor, "initWithCGColor:") = UIColor, CGColorRef;
overload externalInstanceMethod(#UIColor, "initWithPatternImage:") = UIColor, UIImage;
overload externalClassMethod(#UIColor, "blackColor") = UIColor;
overload externalClassMethod(#UIColor, "darkGrayColor") = UIColor;
overload externalClassMethod(#UIColor, "lightGrayColor") = UIColor;
overload externalClassMethod(#UIColor, "whiteColor") = UIColor;
overload externalClassMethod(#UIColor, "grayColor") = UIColor;
overload externalClassMethod(#UIColor, "redColor") = UIColor;
overload externalClassMethod(#UIColor, "greenColor") = UIColor;
overload externalClassMethod(#UIColor, "blueColor") = UIColor;
overload externalClassMethod(#UIColor, "cyanColor") = UIColor;
overload externalClassMethod(#UIColor, "yellowColor") = UIColor;
overload externalClassMethod(#UIColor, "magentaColor") = UIColor;
overload externalClassMethod(#UIColor, "orangeColor") = UIColor;
overload externalClassMethod(#UIColor, "purpleColor") = UIColor;
overload externalClassMethod(#UIColor, "brownColor") = UIColor;
overload externalClassMethod(#UIColor, "clearColor") = UIColor;
overload externalInstanceMethod(#UIColor, "set") = Void;
overload externalInstanceMethod(#UIColor, "setFill") = Void;
overload externalInstanceMethod(#UIColor, "setStroke") = Void;
overload externalInstanceMethod(#UIColor, "colorWithAlphaComponent:") = UIColor, Float;
overload externalInstanceMethod(#UIColor, "CGColor") = CGColorRef;
overload externalClassMethod(#UIColor, "lightTextColor") = UIColor;
overload externalClassMethod(#UIColor, "darkTextColor") = UIColor;
overload externalClassMethod(#UIColor, "groupTableViewBackgroundColor") = UIColor;
overload externalClassMethod(#UIColor, "viewFlipsideBackgroundColor") = UIColor;
overload externalClassMethod(#UIColor, "scrollViewTexturedBackgroundColor") = UIColor;

record UIControl = externalClass(UIView);
overload externalInstanceMethod(#UIControl, "beginTrackingWithTouch:withEvent:") = Bool, UITouch, UIEvent;
overload externalInstanceMethod(#UIControl, "continueTrackingWithTouch:withEvent:") = Bool, UITouch, UIEvent;
overload externalInstanceMethod(#UIControl, "endTrackingWithTouch:withEvent:") = Void, UITouch, UIEvent;
overload externalInstanceMethod(#UIControl, "cancelTrackingWithEvent:") = Void, UIEvent;
overload externalInstanceMethod(#UIControl, "addTarget:action:forControlEvents:") = Void, Id, SelectorHandle, UInt;
overload externalInstanceMethod(#UIControl, "removeTarget:action:forControlEvents:") = Void, Id, SelectorHandle, UInt;
overload externalInstanceMethod(#UIControl, "allTargets") = NSSet;
overload externalInstanceMethod(#UIControl, "allControlEvents") = UInt;
overload externalInstanceMethod(#UIControl, "actionsForTarget:forControlEvent:") = NSArray, Id, UInt;
overload externalInstanceMethod(#UIControl, "sendAction:to:forEvent:") = Void, SelectorHandle, Id, UIEvent;
overload externalInstanceMethod(#UIControl, "sendActionsForControlEvents:") = Void, UInt;
overload externalInstanceMethod(#UIControl, "isEnabled") = Bool;
overload externalInstanceMethod(#UIControl, "setEnabled:") = Void, Bool;
overload externalInstanceMethod(#UIControl, "isSelected") = Bool;
overload externalInstanceMethod(#UIControl, "setSelected:") = Void, Bool;
overload externalInstanceMethod(#UIControl, "isHighlighted") = Bool;
overload externalInstanceMethod(#UIControl, "setHighlighted:") = Void, Bool;
overload externalInstanceMethod(#UIControl, "contentVerticalAlignment") = UIControlContentVerticalAlignment;
overload externalInstanceMethod(#UIControl, "setContentVerticalAlignment:") = Void, UIControlContentVerticalAlignment;
overload externalInstanceMethod(#UIControl, "contentHorizontalAlignment") = UIControlContentHorizontalAlignment;
overload externalInstanceMethod(#UIControl, "setContentHorizontalAlignment:") = Void, UIControlContentHorizontalAlignment;
overload externalInstanceMethod(#UIControl, "state") = UInt;
overload externalInstanceMethod(#UIControl, "isTracking") = Bool;
overload externalInstanceMethod(#UIControl, "isTouchInside") = Bool;

record UIDatePicker = externalClass(UIControl);
overload externalInstanceMethod(#UIDatePicker, "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#UIDatePicker, "initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#UIDatePicker, "setDate:animated:") = Void, NSDate, Bool;
overload externalInstanceMethod(#UIDatePicker, "datePickerMode") = UIDatePickerMode;
overload externalInstanceMethod(#UIDatePicker, "setDatePickerMode:") = Void, UIDatePickerMode;
overload externalInstanceMethod(#UIDatePicker, "locale") = NSLocale;
overload externalInstanceMethod(#UIDatePicker, "setLocale:") = Void, NSLocale;
overload externalInstanceMethod(#UIDatePicker, "timeZone") = NSTimeZone;
overload externalInstanceMethod(#UIDatePicker, "setTimeZone:") = Void, NSTimeZone;
overload externalInstanceMethod(#UIDatePicker, "calendar") = NSCalendar;
overload externalInstanceMethod(#UIDatePicker, "setCalendar:") = Void, NSCalendar;
overload externalInstanceMethod(#UIDatePicker, "date") = NSDate;
overload externalInstanceMethod(#UIDatePicker, "setDate:") = Void, NSDate;
overload externalInstanceMethod(#UIDatePicker, "minimumDate") = NSDate;
overload externalInstanceMethod(#UIDatePicker, "setMinimumDate:") = Void, NSDate;
overload externalInstanceMethod(#UIDatePicker, "maximumDate") = NSDate;
overload externalInstanceMethod(#UIDatePicker, "setMaximumDate:") = Void, NSDate;
overload externalInstanceMethod(#UIDatePicker, "countDownDuration") = Double;
overload externalInstanceMethod(#UIDatePicker, "setCountDownDuration:") = Void, Double;
overload externalInstanceMethod(#UIDatePicker, "minuteInterval") = Int;
overload externalInstanceMethod(#UIDatePicker, "setMinuteInterval:") = Void, Int;

record UIDevice = externalClass(NSObject);
overload externalClassMethod(#UIDevice, "currentDevice") = UIDevice;
overload externalInstanceMethod(#UIDevice, "beginGeneratingDeviceOrientationNotifications") = Void;
overload externalInstanceMethod(#UIDevice, "endGeneratingDeviceOrientationNotifications") = Void;
overload externalInstanceMethod(#UIDevice, "name") = NSString;
overload externalInstanceMethod(#UIDevice, "model") = NSString;
overload externalInstanceMethod(#UIDevice, "localizedModel") = NSString;
overload externalInstanceMethod(#UIDevice, "systemName") = NSString;
overload externalInstanceMethod(#UIDevice, "systemVersion") = NSString;
overload externalInstanceMethod(#UIDevice, "orientation") = UIDeviceOrientation;
overload externalInstanceMethod(#UIDevice, "uniqueIdentifier") = NSString;
overload externalInstanceMethod(#UIDevice, "isGeneratingDeviceOrientationNotifications") = Bool;
overload externalInstanceMethod(#UIDevice, "isBatteryMonitoringEnabled") = Bool;
overload externalInstanceMethod(#UIDevice, "setBatteryMonitoringEnabled:") = Void, Bool;
overload externalInstanceMethod(#UIDevice, "batteryState") = UIDeviceBatteryState;
overload externalInstanceMethod(#UIDevice, "batteryLevel") = Float;
overload externalInstanceMethod(#UIDevice, "isProximityMonitoringEnabled") = Bool;
overload externalInstanceMethod(#UIDevice, "setProximityMonitoringEnabled:") = Void, Bool;
overload externalInstanceMethod(#UIDevice, "proximityState") = Bool;
overload externalInstanceMethod(#UIDevice, "isMultitaskingSupported") = Bool;
overload externalInstanceMethod(#UIDevice, "userInterfaceIdiom") = UIUserInterfaceIdiom;

record UIDocumentInteractionController = externalClass(NSObject);
overload externalInstanceMethod(#UIDocumentInteractionController, "actionSheet:clickedButtonAtIndex:") = Void, UIActionSheet, Int;
overload externalInstanceMethod(#UIDocumentInteractionController, "actionSheetCancel:") = Void, UIActionSheet;
overload externalInstanceMethod(#UIDocumentInteractionController, "willPresentActionSheet:") = Void, UIActionSheet;
overload externalInstanceMethod(#UIDocumentInteractionController, "didPresentActionSheet:") = Void, UIActionSheet;
overload externalInstanceMethod(#UIDocumentInteractionController, "actionSheet:willDismissWithButtonIndex:") = Void, UIActionSheet, Int;
overload externalInstanceMethod(#UIDocumentInteractionController, "actionSheet:didDismissWithButtonIndex:") = Void, UIActionSheet, Int;
overload externalClassMethod(#UIDocumentInteractionController, "interactionControllerWithURL:") = UIDocumentInteractionController, NSURL;
overload externalInstanceMethod(#UIDocumentInteractionController, "presentOptionsMenuFromRect:inView:animated:") = Bool, CGRect, UIView, Bool;
overload externalInstanceMethod(#UIDocumentInteractionController, "presentOptionsMenuFromBarButtonItem:animated:") = Bool, UIBarButtonItem, Bool;
overload externalInstanceMethod(#UIDocumentInteractionController, "presentPreviewAnimated:") = Bool, Bool;
overload externalInstanceMethod(#UIDocumentInteractionController, "presentOpenInMenuFromRect:inView:animated:") = Bool, CGRect, UIView, Bool;
overload externalInstanceMethod(#UIDocumentInteractionController, "presentOpenInMenuFromBarButtonItem:animated:") = Bool, UIBarButtonItem, Bool;
overload externalInstanceMethod(#UIDocumentInteractionController, "dismissPreviewAnimated:") = Void, Bool;
overload externalInstanceMethod(#UIDocumentInteractionController, "dismissMenuAnimated:") = Void, Bool;
overload externalInstanceMethod(#UIDocumentInteractionController, "delegate") = Id;
overload externalInstanceMethod(#UIDocumentInteractionController, "setDelegate:") = Void, Id;
overload externalInstanceMethod(#UIDocumentInteractionController, "URL") = NSURL;
overload externalInstanceMethod(#UIDocumentInteractionController, "setURL:") = Void, NSURL;
overload externalInstanceMethod(#UIDocumentInteractionController, "UTI") = NSString;
overload externalInstanceMethod(#UIDocumentInteractionController, "setUTI:") = Void, NSString;
overload externalInstanceMethod(#UIDocumentInteractionController, "name") = NSString;
overload externalInstanceMethod(#UIDocumentInteractionController, "setName:") = Void, NSString;
overload externalInstanceMethod(#UIDocumentInteractionController, "icons") = NSArray;
overload externalInstanceMethod(#UIDocumentInteractionController, "annotation") = Id;
overload externalInstanceMethod(#UIDocumentInteractionController, "setAnnotation:") = Void, Id;
overload externalInstanceMethod(#UIDocumentInteractionController, "gestureRecognizers") = NSArray;

record UIEvent = externalClass(NSObject);
overload externalInstanceMethod(#UIEvent, "allTouches") = NSSet;
overload externalInstanceMethod(#UIEvent, "touchesForWindow:") = NSSet, UIWindow;
overload externalInstanceMethod(#UIEvent, "touchesForView:") = NSSet, UIView;
overload externalInstanceMethod(#UIEvent, "touchesForGestureRecognizer:") = NSSet, UIGestureRecognizer;
overload externalInstanceMethod(#UIEvent, "type") = UIEventType;
overload externalInstanceMethod(#UIEvent, "subtype") = UIEventSubtype;
overload externalInstanceMethod(#UIEvent, "timestamp") = Double;

record UIFont = externalClass(NSObject);
overload externalClassMethod(#UIFont, "fontWithName:size:") = UIFont, NSString, Float;
overload externalClassMethod(#UIFont, "familyNames") = NSArray;
overload externalClassMethod(#UIFont, "fontNamesForFamilyName:") = NSArray, NSString;
overload externalClassMethod(#UIFont, "systemFontOfSize:") = UIFont, Float;
overload externalClassMethod(#UIFont, "boldSystemFontOfSize:") = UIFont, Float;
overload externalClassMethod(#UIFont, "italicSystemFontOfSize:") = UIFont, Float;
overload externalInstanceMethod(#UIFont, "fontWithSize:") = UIFont, Float;
overload externalInstanceMethod(#UIFont, "familyName") = NSString;
overload externalInstanceMethod(#UIFont, "fontName") = NSString;
overload externalInstanceMethod(#UIFont, "pointSize") = Float;
overload externalInstanceMethod(#UIFont, "ascender") = Float;
overload externalInstanceMethod(#UIFont, "descender") = Float;
overload externalInstanceMethod(#UIFont, "capHeight") = Float;
overload externalInstanceMethod(#UIFont, "xHeight") = Float;
overload externalInstanceMethod(#UIFont, "lineHeight") = Float;
overload externalInstanceMethod(#UIFont, "leading") = Float;
overload externalClassMethod(#UIFont, "labelFontSize") = Float;
overload externalClassMethod(#UIFont, "buttonFontSize") = Float;
overload externalClassMethod(#UIFont, "smallSystemFontSize") = Float;
overload externalClassMethod(#UIFont, "systemFontSize") = Float;

record UIGestureRecognizer = externalClass(NSObject);
overload externalInstanceMethod(#UIGestureRecognizer, "initWithTarget:action:") = Id, Id, SelectorHandle;
overload externalInstanceMethod(#UIGestureRecognizer, "addTarget:action:") = Void, Id, SelectorHandle;
overload externalInstanceMethod(#UIGestureRecognizer, "removeTarget:action:") = Void, Id, SelectorHandle;
overload externalInstanceMethod(#UIGestureRecognizer, "requireGestureRecognizerToFail:") = Void, UIGestureRecognizer;
overload externalInstanceMethod(#UIGestureRecognizer, "locationInView:") = CGPoint, UIView;
overload externalInstanceMethod(#UIGestureRecognizer, "numberOfTouches") = UInt;
overload externalInstanceMethod(#UIGestureRecognizer, "locationOfTouch:inView:") = CGPoint, UInt, UIView;
overload externalInstanceMethod(#UIGestureRecognizer, "state") = UIGestureRecognizerState;
overload externalInstanceMethod(#UIGestureRecognizer, "delegate") = Id;
overload externalInstanceMethod(#UIGestureRecognizer, "setDelegate:") = Void, Id;
overload externalInstanceMethod(#UIGestureRecognizer, "isEnabled") = Bool;
overload externalInstanceMethod(#UIGestureRecognizer, "setEnabled:") = Void, Bool;
overload externalInstanceMethod(#UIGestureRecognizer, "view") = UIView;
overload externalInstanceMethod(#UIGestureRecognizer, "cancelsTouchesInView") = Bool;
overload externalInstanceMethod(#UIGestureRecognizer, "setCancelsTouchesInView:") = Void, Bool;
overload externalInstanceMethod(#UIGestureRecognizer, "delaysTouchesBegan") = Bool;
overload externalInstanceMethod(#UIGestureRecognizer, "setDelaysTouchesBegan:") = Void, Bool;
overload externalInstanceMethod(#UIGestureRecognizer, "delaysTouchesEnded") = Bool;
overload externalInstanceMethod(#UIGestureRecognizer, "setDelaysTouchesEnded:") = Void, Bool;

record UIImage = externalClass(NSObject);
overload externalClassMethod(#UIImage, "imageNamed:") = UIImage, NSString;
overload externalClassMethod(#UIImage, "imageWithContentsOfFile:") = UIImage, NSString;
overload externalClassMethod(#UIImage, "imageWithData:") = UIImage, NSData;
overload externalClassMethod(#UIImage, "imageWithCGImage:") = UIImage, CGImageRef;
overload externalClassMethod(#UIImage, "imageWithCGImage:scale:orientation:") = UIImage, CGImageRef, Float, UIImageOrientation;
overload externalInstanceMethod(#UIImage, "initWithContentsOfFile:") = Id, NSString;
overload externalInstanceMethod(#UIImage, "initWithData:") = Id, NSData;
overload externalInstanceMethod(#UIImage, "initWithCGImage:") = Id, CGImageRef;
overload externalInstanceMethod(#UIImage, "initWithCGImage:scale:orientation:") = Id, CGImageRef, Float, UIImageOrientation;
overload externalInstanceMethod(#UIImage, "drawAtPoint:") = Void, CGPoint;
overload externalInstanceMethod(#UIImage, "drawAtPoint:blendMode:alpha:") = Void, CGPoint, CGBlendMode, Float;
overload externalInstanceMethod(#UIImage, "drawInRect:") = Void, CGRect;
overload externalInstanceMethod(#UIImage, "drawInRect:blendMode:alpha:") = Void, CGRect, CGBlendMode, Float;
overload externalInstanceMethod(#UIImage, "drawAsPatternInRect:") = Void, CGRect;
overload externalInstanceMethod(#UIImage, "stretchableImageWithLeftCapWidth:topCapHeight:") = UIImage, Int, Int;
overload externalInstanceMethod(#UIImage, "size") = CGSize;
overload externalInstanceMethod(#UIImage, "CGImage") = CGImageRef;
overload externalInstanceMethod(#UIImage, "imageOrientation") = UIImageOrientation;
overload externalInstanceMethod(#UIImage, "scale") = Float;
overload externalInstanceMethod(#UIImage, "leftCapWidth") = Int;
overload externalInstanceMethod(#UIImage, "topCapHeight") = Int;

record UIImagePickerController = externalClass(UINavigationController);
overload externalInstanceMethod(#UIImagePickerController, "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#UIImagePickerController, "initWithCoder:") = Id, NSCoder;
overload externalClassMethod(#UIImagePickerController, "isSourceTypeAvailable:") = Bool, UInt;
overload externalClassMethod(#UIImagePickerController, "availableMediaTypesForSourceType:") = NSArray, UInt;
overload externalClassMethod(#UIImagePickerController, "isCameraDeviceAvailable:") = Bool, UInt;
overload externalClassMethod(#UIImagePickerController, "isFlashAvailableForCameraDevice:") = Bool, UInt;
overload externalClassMethod(#UIImagePickerController, "availableCaptureModesForCameraDevice:") = NSArray, UInt;
overload externalInstanceMethod(#UIImagePickerController, "takePicture") = Void;
overload externalInstanceMethod(#UIImagePickerController, "startVideoCapture") = Bool;
overload externalInstanceMethod(#UIImagePickerController, "stopVideoCapture") = Void;
overload externalInstanceMethod(#UIImagePickerController, "delegate") = Id;
overload externalInstanceMethod(#UIImagePickerController, "setDelegate:") = Void, Id;
overload externalInstanceMethod(#UIImagePickerController, "sourceType") = UInt;
overload externalInstanceMethod(#UIImagePickerController, "setSourceType:") = Void, UInt;
overload externalInstanceMethod(#UIImagePickerController, "mediaTypes") = NSArray;
overload externalInstanceMethod(#UIImagePickerController, "setMediaTypes:") = Void, NSArray;
overload externalInstanceMethod(#UIImagePickerController, "allowsEditing") = Bool;
overload externalInstanceMethod(#UIImagePickerController, "setAllowsEditing:") = Void, Bool;
overload externalInstanceMethod(#UIImagePickerController, "allowsImageEditing") = Bool;
overload externalInstanceMethod(#UIImagePickerController, "setAllowsImageEditing:") = Void, Bool;
overload externalInstanceMethod(#UIImagePickerController, "videoMaximumDuration") = Double;
overload externalInstanceMethod(#UIImagePickerController, "setVideoMaximumDuration:") = Void, Double;
overload externalInstanceMethod(#UIImagePickerController, "videoQuality") = UInt;
overload externalInstanceMethod(#UIImagePickerController, "setVideoQuality:") = Void, UInt;
overload externalInstanceMethod(#UIImagePickerController, "showsCameraControls") = Bool;
overload externalInstanceMethod(#UIImagePickerController, "setShowsCameraControls:") = Void, Bool;
overload externalInstanceMethod(#UIImagePickerController, "cameraOverlayView") = UIView;
overload externalInstanceMethod(#UIImagePickerController, "setCameraOverlayView:") = Void, UIView;
overload externalInstanceMethod(#UIImagePickerController, "cameraViewTransform") = CGAffineTransform;
overload externalInstanceMethod(#UIImagePickerController, "setCameraViewTransform:") = Void, CGAffineTransform;
overload externalInstanceMethod(#UIImagePickerController, "cameraCaptureMode") = UInt;
overload externalInstanceMethod(#UIImagePickerController, "setCameraCaptureMode:") = Void, UInt;
overload externalInstanceMethod(#UIImagePickerController, "cameraDevice") = UInt;
overload externalInstanceMethod(#UIImagePickerController, "setCameraDevice:") = Void, UInt;
overload externalInstanceMethod(#UIImagePickerController, "cameraFlashMode") = Int;
overload externalInstanceMethod(#UIImagePickerController, "setCameraFlashMode:") = Void, Int;

record UIImageView = externalClass(UIView);
overload externalInstanceMethod(#UIImageView, "initWithImage:") = Id, UIImage;
overload externalInstanceMethod(#UIImageView, "initWithImage:highlightedImage:") = Id, UIImage, UIImage;
overload externalInstanceMethod(#UIImageView, "startAnimating") = Void;
overload externalInstanceMethod(#UIImageView, "stopAnimating") = Void;
overload externalInstanceMethod(#UIImageView, "isAnimating") = Bool;
overload externalInstanceMethod(#UIImageView, "image") = UIImage;
overload externalInstanceMethod(#UIImageView, "setImage:") = Void, UIImage;
overload externalInstanceMethod(#UIImageView, "highlightedImage") = UIImage;
overload externalInstanceMethod(#UIImageView, "setHighlightedImage:") = Void, UIImage;
overload externalInstanceMethod(#UIImageView, "isUserInteractionEnabled") = Bool;
overload externalInstanceMethod(#UIImageView, "setUserInteractionEnabled:") = Void, Bool;
overload externalInstanceMethod(#UIImageView, "isHighlighted") = Bool;
overload externalInstanceMethod(#UIImageView, "setHighlighted:") = Void, Bool;
overload externalInstanceMethod(#UIImageView, "animationImages") = NSArray;
overload externalInstanceMethod(#UIImageView, "setAnimationImages:") = Void, NSArray;
overload externalInstanceMethod(#UIImageView, "highlightedAnimationImages") = NSArray;
overload externalInstanceMethod(#UIImageView, "setHighlightedAnimationImages:") = Void, NSArray;
overload externalInstanceMethod(#UIImageView, "animationDuration") = Double;
overload externalInstanceMethod(#UIImageView, "setAnimationDuration:") = Void, Double;
overload externalInstanceMethod(#UIImageView, "animationRepeatCount") = Int;
overload externalInstanceMethod(#UIImageView, "setAnimationRepeatCount:") = Void, Int;

record UILabel = externalClass(UIView);
overload externalInstanceMethod(#UILabel, "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#UILabel, "initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#UILabel, "textRectForBounds:limitedToNumberOfLines:") = CGRect, CGRect, Int;
overload externalInstanceMethod(#UILabel, "drawTextInRect:") = Void, CGRect;
overload externalInstanceMethod(#UILabel, "text") = NSString;
overload externalInstanceMethod(#UILabel, "setText:") = Void, NSString;
overload externalInstanceMethod(#UILabel, "font") = UIFont;
overload externalInstanceMethod(#UILabel, "setFont:") = Void, UIFont;
overload externalInstanceMethod(#UILabel, "textColor") = UIColor;
overload externalInstanceMethod(#UILabel, "setTextColor:") = Void, UIColor;
overload externalInstanceMethod(#UILabel, "shadowColor") = UIColor;
overload externalInstanceMethod(#UILabel, "setShadowColor:") = Void, UIColor;
overload externalInstanceMethod(#UILabel, "shadowOffset") = CGSize;
overload externalInstanceMethod(#UILabel, "setShadowOffset:") = Void, CGSize;
overload externalInstanceMethod(#UILabel, "textAlignment") = UITextAlignment;
overload externalInstanceMethod(#UILabel, "setTextAlignment:") = Void, UITextAlignment;
overload externalInstanceMethod(#UILabel, "lineBreakMode") = UILineBreakMode;
overload externalInstanceMethod(#UILabel, "setLineBreakMode:") = Void, UILineBreakMode;
overload externalInstanceMethod(#UILabel, "highlightedTextColor") = UIColor;
overload externalInstanceMethod(#UILabel, "setHighlightedTextColor:") = Void, UIColor;
overload externalInstanceMethod(#UILabel, "isHighlighted") = Bool;
overload externalInstanceMethod(#UILabel, "setHighlighted:") = Void, Bool;
overload externalInstanceMethod(#UILabel, "isUserInteractionEnabled") = Bool;
overload externalInstanceMethod(#UILabel, "setUserInteractionEnabled:") = Void, Bool;
overload externalInstanceMethod(#UILabel, "isEnabled") = Bool;
overload externalInstanceMethod(#UILabel, "setEnabled:") = Void, Bool;
overload externalInstanceMethod(#UILabel, "numberOfLines") = Int;
overload externalInstanceMethod(#UILabel, "setNumberOfLines:") = Void, Int;
overload externalInstanceMethod(#UILabel, "adjustsFontSizeToFitWidth") = Bool;
overload externalInstanceMethod(#UILabel, "setAdjustsFontSizeToFitWidth:") = Void, Bool;
overload externalInstanceMethod(#UILabel, "minimumFontSize") = Float;
overload externalInstanceMethod(#UILabel, "setMinimumFontSize:") = Void, Float;
overload externalInstanceMethod(#UILabel, "baselineAdjustment") = UIBaselineAdjustment;
overload externalInstanceMethod(#UILabel, "setBaselineAdjustment:") = Void, UIBaselineAdjustment;

record UILocalNotification = externalClass(NSObject);
overload externalInstanceMethod(#UILocalNotification, "copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#UILocalNotification, "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#UILocalNotification, "initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#UILocalNotification, "fireDate") = NSDate;
overload externalInstanceMethod(#UILocalNotification, "setFireDate:") = Void, NSDate;
overload externalInstanceMethod(#UILocalNotification, "timeZone") = NSTimeZone;
overload externalInstanceMethod(#UILocalNotification, "setTimeZone:") = Void, NSTimeZone;
overload externalInstanceMethod(#UILocalNotification, "repeatInterval") = UInt;
overload externalInstanceMethod(#UILocalNotification, "setRepeatInterval:") = Void, UInt;
overload externalInstanceMethod(#UILocalNotification, "repeatCalendar") = NSCalendar;
overload externalInstanceMethod(#UILocalNotification, "setRepeatCalendar:") = Void, NSCalendar;
overload externalInstanceMethod(#UILocalNotification, "alertBody") = NSString;
overload externalInstanceMethod(#UILocalNotification, "setAlertBody:") = Void, NSString;
overload externalInstanceMethod(#UILocalNotification, "hasAction") = Bool;
overload externalInstanceMethod(#UILocalNotification, "setHasAction:") = Void, Bool;
overload externalInstanceMethod(#UILocalNotification, "alertAction") = NSString;
overload externalInstanceMethod(#UILocalNotification, "setAlertAction:") = Void, NSString;
overload externalInstanceMethod(#UILocalNotification, "alertLaunchImage") = NSString;
overload externalInstanceMethod(#UILocalNotification, "setAlertLaunchImage:") = Void, NSString;
overload externalInstanceMethod(#UILocalNotification, "soundName") = NSString;
overload externalInstanceMethod(#UILocalNotification, "setSoundName:") = Void, NSString;
overload externalInstanceMethod(#UILocalNotification, "applicationIconBadgeNumber") = Int;
overload externalInstanceMethod(#UILocalNotification, "setApplicationIconBadgeNumber:") = Void, Int;
overload externalInstanceMethod(#UILocalNotification, "userInfo") = NSDictionary;
overload externalInstanceMethod(#UILocalNotification, "setUserInfo:") = Void, NSDictionary;

record UILocalizedIndexedCollation = externalClass(NSObject);
overload externalClassMethod(#UILocalizedIndexedCollation, "currentCollation") = Id;
overload externalInstanceMethod(#UILocalizedIndexedCollation, "sectionForSectionIndexTitleAtIndex:") = Int, Int;
overload externalInstanceMethod(#UILocalizedIndexedCollation, "sectionForObject:collationStringSelector:") = Int, Id, SelectorHandle;
overload externalInstanceMethod(#UILocalizedIndexedCollation, "sortedArrayFromArray:collationStringSelector:") = NSArray, NSArray, SelectorHandle;
overload externalInstanceMethod(#UILocalizedIndexedCollation, "sectionTitles") = NSArray;
overload externalInstanceMethod(#UILocalizedIndexedCollation, "sectionIndexTitles") = NSArray;

record UILongPressGestureRecognizer = externalClass(UIGestureRecognizer);
overload externalInstanceMethod(#UILongPressGestureRecognizer, "numberOfTapsRequired") = Int;
overload externalInstanceMethod(#UILongPressGestureRecognizer, "setNumberOfTapsRequired:") = Void, Int;
overload externalInstanceMethod(#UILongPressGestureRecognizer, "numberOfTouchesRequired") = Int;
overload externalInstanceMethod(#UILongPressGestureRecognizer, "setNumberOfTouchesRequired:") = Void, Int;
overload externalInstanceMethod(#UILongPressGestureRecognizer, "minimumPressDuration") = Double;
overload externalInstanceMethod(#UILongPressGestureRecognizer, "setMinimumPressDuration:") = Void, Double;
overload externalInstanceMethod(#UILongPressGestureRecognizer, "allowableMovement") = Float;
overload externalInstanceMethod(#UILongPressGestureRecognizer, "setAllowableMovement:") = Void, Float;

record UIMenuController = externalClass(NSObject);
overload externalClassMethod(#UIMenuController, "sharedMenuController") = UIMenuController;
overload externalInstanceMethod(#UIMenuController, "setMenuVisible:animated:") = Void, Bool, Bool;
overload externalInstanceMethod(#UIMenuController, "setTargetRect:inView:") = Void, CGRect, UIView;
overload externalInstanceMethod(#UIMenuController, "update") = Void;
overload externalInstanceMethod(#UIMenuController, "isMenuVisible") = Bool;
overload externalInstanceMethod(#UIMenuController, "setMenuVisible:") = Void, Bool;
overload externalInstanceMethod(#UIMenuController, "arrowDirection") = UIMenuControllerArrowDirection;
overload externalInstanceMethod(#UIMenuController, "setArrowDirection:") = Void, UIMenuControllerArrowDirection;
overload externalInstanceMethod(#UIMenuController, "menuItems") = NSArray;
overload externalInstanceMethod(#UIMenuController, "setMenuItems:") = Void, NSArray;
overload externalInstanceMethod(#UIMenuController, "menuFrame") = CGRect;

record UIMenuItem = externalClass(NSObject);
overload externalInstanceMethod(#UIMenuItem, "initWithTitle:action:") = Id, NSString, SelectorHandle;
overload externalInstanceMethod(#UIMenuItem, "title") = NSString;
overload externalInstanceMethod(#UIMenuItem, "setTitle:") = Void, NSString;
overload externalInstanceMethod(#UIMenuItem, "action") = SelectorHandle;
overload externalInstanceMethod(#UIMenuItem, "setAction:") = Void, SelectorHandle;

record UINavigationBar = externalClass(UIView);
overload externalInstanceMethod(#UINavigationBar, "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#UINavigationBar, "initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#UINavigationBar, "pushNavigationItem:animated:") = Void, UINavigationItem, Bool;
overload externalInstanceMethod(#UINavigationBar, "popNavigationItemAnimated:") = UINavigationItem, Bool;
overload externalInstanceMethod(#UINavigationBar, "setItems:animated:") = Void, NSArray, Bool;
overload externalInstanceMethod(#UINavigationBar, "barStyle") = UIBarStyle;
overload externalInstanceMethod(#UINavigationBar, "setBarStyle:") = Void, UIBarStyle;
overload externalInstanceMethod(#UINavigationBar, "delegate") = Id;
overload externalInstanceMethod(#UINavigationBar, "setDelegate:") = Void, Id;
overload externalInstanceMethod(#UINavigationBar, "tintColor") = UIColor;
overload externalInstanceMethod(#UINavigationBar, "setTintColor:") = Void, UIColor;
overload externalInstanceMethod(#UINavigationBar, "isTranslucent") = Bool;
overload externalInstanceMethod(#UINavigationBar, "setTranslucent:") = Void, Bool;
overload externalInstanceMethod(#UINavigationBar, "topItem") = UINavigationItem;
overload externalInstanceMethod(#UINavigationBar, "backItem") = UINavigationItem;
overload externalInstanceMethod(#UINavigationBar, "items") = NSArray;
overload externalInstanceMethod(#UINavigationBar, "setItems:") = Void, NSArray;

record UINavigationController = externalClass(UIViewController);
overload externalInstanceMethod(#UINavigationController, "initWithRootViewController:") = Id, UIViewController;
overload externalInstanceMethod(#UINavigationController, "pushViewController:animated:") = Void, UIViewController, Bool;
overload externalInstanceMethod(#UINavigationController, "popViewControllerAnimated:") = UIViewController, Bool;
overload externalInstanceMethod(#UINavigationController, "popToViewController:animated:") = NSArray, UIViewController, Bool;
overload externalInstanceMethod(#UINavigationController, "popToRootViewControllerAnimated:") = NSArray, Bool;
overload externalInstanceMethod(#UINavigationController, "setViewControllers:animated:") = Void, NSArray, Bool;
overload externalInstanceMethod(#UINavigationController, "setNavigationBarHidden:animated:") = Void, Bool, Bool;
overload externalInstanceMethod(#UINavigationController, "setToolbarHidden:animated:") = Void, Bool, Bool;
overload externalInstanceMethod(#UINavigationController, "topViewController") = UIViewController;
overload externalInstanceMethod(#UINavigationController, "visibleViewController") = UIViewController;
overload externalInstanceMethod(#UINavigationController, "viewControllers") = NSArray;
overload externalInstanceMethod(#UINavigationController, "setViewControllers:") = Void, NSArray;
overload externalInstanceMethod(#UINavigationController, "isNavigationBarHidden") = Bool;
overload externalInstanceMethod(#UINavigationController, "setNavigationBarHidden:") = Void, Bool;
overload externalInstanceMethod(#UINavigationController, "navigationBar") = UINavigationBar;
overload externalInstanceMethod(#UINavigationController, "isToolbarHidden") = Bool;
overload externalInstanceMethod(#UINavigationController, "setToolbarHidden:") = Void, Bool;
overload externalInstanceMethod(#UINavigationController, "toolbar") = UIToolbar;
overload externalInstanceMethod(#UINavigationController, "delegate") = Id;
overload externalInstanceMethod(#UINavigationController, "setDelegate:") = Void, Id;

record UINavigationItem = externalClass(NSObject);
overload externalInstanceMethod(#UINavigationItem, "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#UINavigationItem, "initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#UINavigationItem, "initWithTitle:") = Id, NSString;
overload externalInstanceMethod(#UINavigationItem, "setHidesBackButton:animated:") = Void, Bool, Bool;
overload externalInstanceMethod(#UINavigationItem, "setLeftBarButtonItem:animated:") = Void, UIBarButtonItem, Bool;
overload externalInstanceMethod(#UINavigationItem, "setRightBarButtonItem:animated:") = Void, UIBarButtonItem, Bool;
overload externalInstanceMethod(#UINavigationItem, "title") = NSString;
overload externalInstanceMethod(#UINavigationItem, "setTitle:") = Void, NSString;
overload externalInstanceMethod(#UINavigationItem, "backBarButtonItem") = UIBarButtonItem;
overload externalInstanceMethod(#UINavigationItem, "setBackBarButtonItem:") = Void, UIBarButtonItem;
overload externalInstanceMethod(#UINavigationItem, "titleView") = UIView;
overload externalInstanceMethod(#UINavigationItem, "setTitleView:") = Void, UIView;
overload externalInstanceMethod(#UINavigationItem, "prompt") = NSString;
overload externalInstanceMethod(#UINavigationItem, "setPrompt:") = Void, NSString;
overload externalInstanceMethod(#UINavigationItem, "hidesBackButton") = Bool;
overload externalInstanceMethod(#UINavigationItem, "setHidesBackButton:") = Void, Bool;
overload externalInstanceMethod(#UINavigationItem, "leftBarButtonItem") = UIBarButtonItem;
overload externalInstanceMethod(#UINavigationItem, "setLeftBarButtonItem:") = Void, UIBarButtonItem;
overload externalInstanceMethod(#UINavigationItem, "rightBarButtonItem") = UIBarButtonItem;
overload externalInstanceMethod(#UINavigationItem, "setRightBarButtonItem:") = Void, UIBarButtonItem;

record UINib = externalClass(NSObject);
overload externalClassMethod(#UINib, "nibWithNibName:bundle:") = UINib, NSString, NSBundle;
overload externalClassMethod(#UINib, "nibWithData:bundle:") = UINib, NSData, NSBundle;
overload externalInstanceMethod(#UINib, "instantiateWithOwner:options:") = NSArray, Id, NSDictionary;

record UIPageControl = externalClass(UIControl);
overload externalInstanceMethod(#UIPageControl, "updateCurrentPageDisplay") = Void;
overload externalInstanceMethod(#UIPageControl, "sizeForNumberOfPages:") = CGSize, Int;
overload externalInstanceMethod(#UIPageControl, "numberOfPages") = Int;
overload externalInstanceMethod(#UIPageControl, "setNumberOfPages:") = Void, Int;
overload externalInstanceMethod(#UIPageControl, "currentPage") = Int;
overload externalInstanceMethod(#UIPageControl, "setCurrentPage:") = Void, Int;
overload externalInstanceMethod(#UIPageControl, "hidesForSinglePage") = Bool;
overload externalInstanceMethod(#UIPageControl, "setHidesForSinglePage:") = Void, Bool;
overload externalInstanceMethod(#UIPageControl, "defersCurrentPageDisplay") = Bool;
overload externalInstanceMethod(#UIPageControl, "setDefersCurrentPageDisplay:") = Void, Bool;

record UIPanGestureRecognizer = externalClass(UIGestureRecognizer);
overload externalInstanceMethod(#UIPanGestureRecognizer, "translationInView:") = CGPoint, UIView;
overload externalInstanceMethod(#UIPanGestureRecognizer, "setTranslation:inView:") = Void, CGPoint, UIView;
overload externalInstanceMethod(#UIPanGestureRecognizer, "velocityInView:") = CGPoint, UIView;
overload externalInstanceMethod(#UIPanGestureRecognizer, "minimumNumberOfTouches") = UInt;
overload externalInstanceMethod(#UIPanGestureRecognizer, "setMinimumNumberOfTouches:") = Void, UInt;
overload externalInstanceMethod(#UIPanGestureRecognizer, "maximumNumberOfTouches") = UInt;
overload externalInstanceMethod(#UIPanGestureRecognizer, "setMaximumNumberOfTouches:") = Void, UInt;

record UIPasteboard = externalClass(NSObject);
overload externalClassMethod(#UIPasteboard, "generalPasteboard") = UIPasteboard;
overload externalClassMethod(#UIPasteboard, "pasteboardWithName:create:") = UIPasteboard, NSString, Bool;
overload externalClassMethod(#UIPasteboard, "pasteboardWithUniqueName") = UIPasteboard;
overload externalClassMethod(#UIPasteboard, "removePasteboardWithName:") = Void, NSString;
overload externalInstanceMethod(#UIPasteboard, "pasteboardTypes") = NSArray;
overload externalInstanceMethod(#UIPasteboard, "containsPasteboardTypes:") = Bool, NSArray;
overload externalInstanceMethod(#UIPasteboard, "dataForPasteboardType:") = NSData, NSString;
overload externalInstanceMethod(#UIPasteboard, "valueForPasteboardType:") = Id, NSString;
overload externalInstanceMethod(#UIPasteboard, "setValue:forPasteboardType:") = Void, Id, NSString;
overload externalInstanceMethod(#UIPasteboard, "setData:forPasteboardType:") = Void, NSData, NSString;
overload externalInstanceMethod(#UIPasteboard, "pasteboardTypesForItemSet:") = NSArray, NSIndexSet;
overload externalInstanceMethod(#UIPasteboard, "containsPasteboardTypes:inItemSet:") = Bool, NSArray, NSIndexSet;
overload externalInstanceMethod(#UIPasteboard, "itemSetWithPasteboardTypes:") = NSIndexSet, NSArray;
overload externalInstanceMethod(#UIPasteboard, "valuesForPasteboardType:inItemSet:") = NSArray, NSString, NSIndexSet;
overload externalInstanceMethod(#UIPasteboard, "dataForPasteboardType:inItemSet:") = NSArray, NSString, NSIndexSet;
overload externalInstanceMethod(#UIPasteboard, "addItems:") = Void, NSArray;
overload externalInstanceMethod(#UIPasteboard, "name") = NSString;
overload externalInstanceMethod(#UIPasteboard, "isPersistent") = Bool;
overload externalInstanceMethod(#UIPasteboard, "setPersistent:") = Void, Bool;
overload externalInstanceMethod(#UIPasteboard, "changeCount") = Int;
overload externalInstanceMethod(#UIPasteboard, "numberOfItems") = Int;
overload externalInstanceMethod(#UIPasteboard, "items") = NSArray;
overload externalInstanceMethod(#UIPasteboard, "setItems:") = Void, NSArray;
overload externalInstanceMethod(#UIPasteboard, "string") = NSString;
overload externalInstanceMethod(#UIPasteboard, "setString:") = Void, NSString;
overload externalInstanceMethod(#UIPasteboard, "strings") = NSArray;
overload externalInstanceMethod(#UIPasteboard, "setStrings:") = Void, NSArray;
overload externalInstanceMethod(#UIPasteboard, "URL") = NSURL;
overload externalInstanceMethod(#UIPasteboard, "setURL:") = Void, NSURL;
overload externalInstanceMethod(#UIPasteboard, "URLs") = NSArray;
overload externalInstanceMethod(#UIPasteboard, "setURLs:") = Void, NSArray;
overload externalInstanceMethod(#UIPasteboard, "image") = UIImage;
overload externalInstanceMethod(#UIPasteboard, "setImage:") = Void, UIImage;
overload externalInstanceMethod(#UIPasteboard, "images") = NSArray;
overload externalInstanceMethod(#UIPasteboard, "setImages:") = Void, NSArray;
overload externalInstanceMethod(#UIPasteboard, "color") = UIColor;
overload externalInstanceMethod(#UIPasteboard, "setColor:") = Void, UIColor;
overload externalInstanceMethod(#UIPasteboard, "colors") = NSArray;
overload externalInstanceMethod(#UIPasteboard, "setColors:") = Void, NSArray;

record UIPickerView = externalClass(UIView);
overload externalInstanceMethod(#UIPickerView, "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#UIPickerView, "initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#UIPickerView, "numberOfRowsInComponent:") = Int, Int;
overload externalInstanceMethod(#UIPickerView, "rowSizeForComponent:") = CGSize, Int;
overload externalInstanceMethod(#UIPickerView, "viewForRow:forComponent:") = UIView, Int, Int;
overload externalInstanceMethod(#UIPickerView, "reloadAllComponents") = Void;
overload externalInstanceMethod(#UIPickerView, "reloadComponent:") = Void, Int;
overload externalInstanceMethod(#UIPickerView, "selectRow:inComponent:animated:") = Void, Int, Int, Bool;
overload externalInstanceMethod(#UIPickerView, "selectedRowInComponent:") = Int, Int;
overload externalInstanceMethod(#UIPickerView, "dataSource") = Id;
overload externalInstanceMethod(#UIPickerView, "setDataSource:") = Void, Id;
overload externalInstanceMethod(#UIPickerView, "delegate") = Id;
overload externalInstanceMethod(#UIPickerView, "setDelegate:") = Void, Id;
overload externalInstanceMethod(#UIPickerView, "showsSelectionIndicator") = Bool;
overload externalInstanceMethod(#UIPickerView, "setShowsSelectionIndicator:") = Void, Bool;
overload externalInstanceMethod(#UIPickerView, "numberOfComponents") = Int;

record UIPinchGestureRecognizer = externalClass(UIGestureRecognizer);
overload externalInstanceMethod(#UIPinchGestureRecognizer, "scale") = Float;
overload externalInstanceMethod(#UIPinchGestureRecognizer, "setScale:") = Void, Float;
overload externalInstanceMethod(#UIPinchGestureRecognizer, "velocity") = Float;

record UIPopoverController = externalClass(NSObject);
overload externalInstanceMethod(#UIPopoverController, "initWithContentViewController:") = Id, UIViewController;
overload externalInstanceMethod(#UIPopoverController, "setContentViewController:animated:") = Void, UIViewController, Bool;
overload externalInstanceMethod(#UIPopoverController, "setPopoverContentSize:animated:") = Void, CGSize, Bool;
overload externalInstanceMethod(#UIPopoverController, "presentPopoverFromRect:inView:permittedArrowDirections:animated:") = Void, CGRect, UIView, UInt, Bool;
overload externalInstanceMethod(#UIPopoverController, "presentPopoverFromBarButtonItem:permittedArrowDirections:animated:") = Void, UIBarButtonItem, UInt, Bool;
overload externalInstanceMethod(#UIPopoverController, "dismissPopoverAnimated:") = Void, Bool;
overload externalInstanceMethod(#UIPopoverController, "delegate") = Id;
overload externalInstanceMethod(#UIPopoverController, "setDelegate:") = Void, Id;
overload externalInstanceMethod(#UIPopoverController, "contentViewController") = UIViewController;
overload externalInstanceMethod(#UIPopoverController, "setContentViewController:") = Void, UIViewController;
overload externalInstanceMethod(#UIPopoverController, "popoverContentSize") = CGSize;
overload externalInstanceMethod(#UIPopoverController, "setPopoverContentSize:") = Void, CGSize;
overload externalInstanceMethod(#UIPopoverController, "isPopoverVisible") = Bool;
overload externalInstanceMethod(#UIPopoverController, "popoverArrowDirection") = UInt;
overload externalInstanceMethod(#UIPopoverController, "passthroughViews") = NSArray;
overload externalInstanceMethod(#UIPopoverController, "setPassthroughViews:") = Void, NSArray;

record UIProgressView = externalClass(UIView);
overload externalInstanceMethod(#UIProgressView, "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#UIProgressView, "initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#UIProgressView, "initWithProgressViewStyle:") = Id, UIProgressViewStyle;
overload externalInstanceMethod(#UIProgressView, "progressViewStyle") = UIProgressViewStyle;
overload externalInstanceMethod(#UIProgressView, "setProgressViewStyle:") = Void, UIProgressViewStyle;
overload externalInstanceMethod(#UIProgressView, "progress") = Float;
overload externalInstanceMethod(#UIProgressView, "setProgress:") = Void, Float;

record UIResponder = externalClass(NSObject);
overload externalInstanceMethod(#UIResponder, "nextResponder") = UIResponder;
overload externalInstanceMethod(#UIResponder, "canBecomeFirstResponder") = Bool;
overload externalInstanceMethod(#UIResponder, "becomeFirstResponder") = Bool;
overload externalInstanceMethod(#UIResponder, "canResignFirstResponder") = Bool;
overload externalInstanceMethod(#UIResponder, "resignFirstResponder") = Bool;
overload externalInstanceMethod(#UIResponder, "isFirstResponder") = Bool;
overload externalInstanceMethod(#UIResponder, "touchesBegan:withEvent:") = Void, NSSet, UIEvent;
overload externalInstanceMethod(#UIResponder, "touchesMoved:withEvent:") = Void, NSSet, UIEvent;
overload externalInstanceMethod(#UIResponder, "touchesEnded:withEvent:") = Void, NSSet, UIEvent;
overload externalInstanceMethod(#UIResponder, "touchesCancelled:withEvent:") = Void, NSSet, UIEvent;
overload externalInstanceMethod(#UIResponder, "motionBegan:withEvent:") = Void, UIEventSubtype, UIEvent;
overload externalInstanceMethod(#UIResponder, "motionEnded:withEvent:") = Void, UIEventSubtype, UIEvent;
overload externalInstanceMethod(#UIResponder, "motionCancelled:withEvent:") = Void, UIEventSubtype, UIEvent;
overload externalInstanceMethod(#UIResponder, "remoteControlReceivedWithEvent:") = Void, UIEvent;
overload externalInstanceMethod(#UIResponder, "canPerformAction:withSender:") = Bool, SelectorHandle, Id;
overload externalInstanceMethod(#UIResponder, "undoManager") = NSUndoManager;
overload externalInstanceMethod(#UIResponder, "reloadInputViews") = Void;
overload externalInstanceMethod(#UIResponder, "inputView") = UIView;
overload externalInstanceMethod(#UIResponder, "inputAccessoryView") = UIView;

record UIRotationGestureRecognizer = externalClass(UIGestureRecognizer);
overload externalInstanceMethod(#UIRotationGestureRecognizer, "rotation") = Float;
overload externalInstanceMethod(#UIRotationGestureRecognizer, "setRotation:") = Void, Float;
overload externalInstanceMethod(#UIRotationGestureRecognizer, "velocity") = Float;

record UIScreen = externalClass(NSObject);
overload externalClassMethod(#UIScreen, "screens") = NSArray;
overload externalClassMethod(#UIScreen, "mainScreen") = UIScreen;
overload externalInstanceMethod(#UIScreen, "displayLinkWithTarget:selector:") = CADisplayLink, Id, SelectorHandle;
overload externalInstanceMethod(#UIScreen, "bounds") = CGRect;
overload externalInstanceMethod(#UIScreen, "applicationFrame") = CGRect;
overload externalInstanceMethod(#UIScreen, "scale") = Float;
overload externalInstanceMethod(#UIScreen, "availableModes") = NSArray;
overload externalInstanceMethod(#UIScreen, "currentMode") = UIScreenMode;
overload externalInstanceMethod(#UIScreen, "setCurrentMode:") = Void, UIScreenMode;

record UIScreenMode = externalClass(NSObject);
overload externalInstanceMethod(#UIScreenMode, "size") = CGSize;
overload externalInstanceMethod(#UIScreenMode, "pixelAspectRatio") = Float;

record UIScrollView = externalClass(UIView);
overload externalInstanceMethod(#UIScrollView, "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#UIScrollView, "initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#UIScrollView, "setContentOffset:animated:") = Void, CGPoint, Bool;
overload externalInstanceMethod(#UIScrollView, "scrollRectToVisible:animated:") = Void, CGRect, Bool;
overload externalInstanceMethod(#UIScrollView, "flashScrollIndicators") = Void;
overload externalInstanceMethod(#UIScrollView, "touchesShouldBegin:withEvent:inContentView:") = Bool, NSSet, UIEvent, UIView;
overload externalInstanceMethod(#UIScrollView, "touchesShouldCancelInContentView:") = Bool, UIView;
overload externalInstanceMethod(#UIScrollView, "setZoomScale:animated:") = Void, Float, Bool;
overload externalInstanceMethod(#UIScrollView, "zoomToRect:animated:") = Void, CGRect, Bool;
overload externalInstanceMethod(#UIScrollView, "contentOffset") = CGPoint;
overload externalInstanceMethod(#UIScrollView, "setContentOffset:") = Void, CGPoint;
overload externalInstanceMethod(#UIScrollView, "contentSize") = CGSize;
overload externalInstanceMethod(#UIScrollView, "setContentSize:") = Void, CGSize;
overload externalInstanceMethod(#UIScrollView, "contentInset") = UIEdgeInsets;
overload externalInstanceMethod(#UIScrollView, "setContentInset:") = Void, UIEdgeInsets;
overload externalInstanceMethod(#UIScrollView, "delegate") = Id;
overload externalInstanceMethod(#UIScrollView, "setDelegate:") = Void, Id;
overload externalInstanceMethod(#UIScrollView, "isDirectionalLockEnabled") = Bool;
overload externalInstanceMethod(#UIScrollView, "setDirectionalLockEnabled:") = Void, Bool;
overload externalInstanceMethod(#UIScrollView, "bounces") = Bool;
overload externalInstanceMethod(#UIScrollView, "setBounces:") = Void, Bool;
overload externalInstanceMethod(#UIScrollView, "alwaysBounceVertical") = Bool;
overload externalInstanceMethod(#UIScrollView, "setAlwaysBounceVertical:") = Void, Bool;
overload externalInstanceMethod(#UIScrollView, "alwaysBounceHorizontal") = Bool;
overload externalInstanceMethod(#UIScrollView, "setAlwaysBounceHorizontal:") = Void, Bool;
overload externalInstanceMethod(#UIScrollView, "isPagingEnabled") = Bool;
overload externalInstanceMethod(#UIScrollView, "setPagingEnabled:") = Void, Bool;
overload externalInstanceMethod(#UIScrollView, "isScrollEnabled") = Bool;
overload externalInstanceMethod(#UIScrollView, "setScrollEnabled:") = Void, Bool;
overload externalInstanceMethod(#UIScrollView, "showsHorizontalScrollIndicator") = Bool;
overload externalInstanceMethod(#UIScrollView, "setShowsHorizontalScrollIndicator:") = Void, Bool;
overload externalInstanceMethod(#UIScrollView, "showsVerticalScrollIndicator") = Bool;
overload externalInstanceMethod(#UIScrollView, "setShowsVerticalScrollIndicator:") = Void, Bool;
overload externalInstanceMethod(#UIScrollView, "scrollIndicatorInsets") = UIEdgeInsets;
overload externalInstanceMethod(#UIScrollView, "setScrollIndicatorInsets:") = Void, UIEdgeInsets;
overload externalInstanceMethod(#UIScrollView, "indicatorStyle") = UIScrollViewIndicatorStyle;
overload externalInstanceMethod(#UIScrollView, "setIndicatorStyle:") = Void, UIScrollViewIndicatorStyle;
overload externalInstanceMethod(#UIScrollView, "decelerationRate") = Float;
overload externalInstanceMethod(#UIScrollView, "setDecelerationRate:") = Void, Float;
overload externalInstanceMethod(#UIScrollView, "isTracking") = Bool;
overload externalInstanceMethod(#UIScrollView, "isDragging") = Bool;
overload externalInstanceMethod(#UIScrollView, "isDecelerating") = Bool;
overload externalInstanceMethod(#UIScrollView, "delaysContentTouches") = Bool;
overload externalInstanceMethod(#UIScrollView, "setDelaysContentTouches:") = Void, Bool;
overload externalInstanceMethod(#UIScrollView, "canCancelContentTouches") = Bool;
overload externalInstanceMethod(#UIScrollView, "setCanCancelContentTouches:") = Void, Bool;
overload externalInstanceMethod(#UIScrollView, "minimumZoomScale") = Float;
overload externalInstanceMethod(#UIScrollView, "setMinimumZoomScale:") = Void, Float;
overload externalInstanceMethod(#UIScrollView, "maximumZoomScale") = Float;
overload externalInstanceMethod(#UIScrollView, "setMaximumZoomScale:") = Void, Float;
overload externalInstanceMethod(#UIScrollView, "zoomScale") = Float;
overload externalInstanceMethod(#UIScrollView, "setZoomScale:") = Void, Float;
overload externalInstanceMethod(#UIScrollView, "bouncesZoom") = Bool;
overload externalInstanceMethod(#UIScrollView, "setBouncesZoom:") = Void, Bool;
overload externalInstanceMethod(#UIScrollView, "isZooming") = Bool;
overload externalInstanceMethod(#UIScrollView, "isZoomBouncing") = Bool;
overload externalInstanceMethod(#UIScrollView, "scrollsToTop") = Bool;
overload externalInstanceMethod(#UIScrollView, "setScrollsToTop:") = Void, Bool;

record UISearchBar = externalClass(UIView);
overload externalInstanceMethod(#UISearchBar, "setShowsCancelButton:animated:") = Void, Bool, Bool;
overload externalInstanceMethod(#UISearchBar, "barStyle") = UIBarStyle;
overload externalInstanceMethod(#UISearchBar, "setBarStyle:") = Void, UIBarStyle;
overload externalInstanceMethod(#UISearchBar, "delegate") = Id;
overload externalInstanceMethod(#UISearchBar, "setDelegate:") = Void, Id;
overload externalInstanceMethod(#UISearchBar, "text") = NSString;
overload externalInstanceMethod(#UISearchBar, "setText:") = Void, NSString;
overload externalInstanceMethod(#UISearchBar, "prompt") = NSString;
overload externalInstanceMethod(#UISearchBar, "setPrompt:") = Void, NSString;
overload externalInstanceMethod(#UISearchBar, "placeholder") = NSString;
overload externalInstanceMethod(#UISearchBar, "setPlaceholder:") = Void, NSString;
overload externalInstanceMethod(#UISearchBar, "showsBookmarkButton") = Bool;
overload externalInstanceMethod(#UISearchBar, "setShowsBookmarkButton:") = Void, Bool;
overload externalInstanceMethod(#UISearchBar, "showsCancelButton") = Bool;
overload externalInstanceMethod(#UISearchBar, "setShowsCancelButton:") = Void, Bool;
overload externalInstanceMethod(#UISearchBar, "showsSearchResultsButton") = Bool;
overload externalInstanceMethod(#UISearchBar, "setShowsSearchResultsButton:") = Void, Bool;
overload externalInstanceMethod(#UISearchBar, "isSearchResultsButtonSelected") = Bool;
overload externalInstanceMethod(#UISearchBar, "setSearchResultsButtonSelected:") = Void, Bool;
overload externalInstanceMethod(#UISearchBar, "tintColor") = UIColor;
overload externalInstanceMethod(#UISearchBar, "setTintColor:") = Void, UIColor;
overload externalInstanceMethod(#UISearchBar, "isTranslucent") = Bool;
overload externalInstanceMethod(#UISearchBar, "setTranslucent:") = Void, Bool;
overload externalInstanceMethod(#UISearchBar, "autocapitalizationType") = UITextAutocapitalizationType;
overload externalInstanceMethod(#UISearchBar, "setAutocapitalizationType:") = Void, UITextAutocapitalizationType;
overload externalInstanceMethod(#UISearchBar, "autocorrectionType") = UITextAutocorrectionType;
overload externalInstanceMethod(#UISearchBar, "setAutocorrectionType:") = Void, UITextAutocorrectionType;
overload externalInstanceMethod(#UISearchBar, "keyboardType") = UIKeyboardType;
overload externalInstanceMethod(#UISearchBar, "setKeyboardType:") = Void, UIKeyboardType;
overload externalInstanceMethod(#UISearchBar, "scopeButtonTitles") = NSArray;
overload externalInstanceMethod(#UISearchBar, "setScopeButtonTitles:") = Void, NSArray;
overload externalInstanceMethod(#UISearchBar, "selectedScopeButtonIndex") = Int;
overload externalInstanceMethod(#UISearchBar, "setSelectedScopeButtonIndex:") = Void, Int;
overload externalInstanceMethod(#UISearchBar, "showsScopeBar") = Bool;
overload externalInstanceMethod(#UISearchBar, "setShowsScopeBar:") = Void, Bool;

record UISearchDisplayController = externalClass(NSObject);
overload externalInstanceMethod(#UISearchDisplayController, "initWithSearchBar:contentsController:") = Id, UISearchBar, UIViewController;
overload externalInstanceMethod(#UISearchDisplayController, "setActive:animated:") = Void, Bool, Bool;
overload externalInstanceMethod(#UISearchDisplayController, "delegate") = Id;
overload externalInstanceMethod(#UISearchDisplayController, "setDelegate:") = Void, Id;
overload externalInstanceMethod(#UISearchDisplayController, "isActive") = Bool;
overload externalInstanceMethod(#UISearchDisplayController, "setActive:") = Void, Bool;
overload externalInstanceMethod(#UISearchDisplayController, "searchBar") = UISearchBar;
overload externalInstanceMethod(#UISearchDisplayController, "searchContentsController") = UIViewController;
overload externalInstanceMethod(#UISearchDisplayController, "searchResultsTableView") = UITableView;
overload externalInstanceMethod(#UISearchDisplayController, "searchResultsDataSource") = Id;
overload externalInstanceMethod(#UISearchDisplayController, "setSearchResultsDataSource:") = Void, Id;
overload externalInstanceMethod(#UISearchDisplayController, "searchResultsDelegate") = Id;
overload externalInstanceMethod(#UISearchDisplayController, "setSearchResultsDelegate:") = Void, Id;

record UISegmentedControl = externalClass(UIControl);
overload externalInstanceMethod(#UISegmentedControl, "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#UISegmentedControl, "initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#UISegmentedControl, "initWithItems:") = Id, NSArray;
overload externalInstanceMethod(#UISegmentedControl, "insertSegmentWithTitle:atIndex:animated:") = Void, NSString, UInt, Bool;
overload externalInstanceMethod(#UISegmentedControl, "insertSegmentWithImage:atIndex:animated:") = Void, UIImage, UInt, Bool;
overload externalInstanceMethod(#UISegmentedControl, "removeSegmentAtIndex:animated:") = Void, UInt, Bool;
overload externalInstanceMethod(#UISegmentedControl, "removeAllSegments") = Void;
overload externalInstanceMethod(#UISegmentedControl, "setTitle:forSegmentAtIndex:") = Void, NSString, UInt;
overload externalInstanceMethod(#UISegmentedControl, "titleForSegmentAtIndex:") = NSString, UInt;
overload externalInstanceMethod(#UISegmentedControl, "setImage:forSegmentAtIndex:") = Void, UIImage, UInt;
overload externalInstanceMethod(#UISegmentedControl, "imageForSegmentAtIndex:") = UIImage, UInt;
overload externalInstanceMethod(#UISegmentedControl, "setWidth:forSegmentAtIndex:") = Void, Float, UInt;
overload externalInstanceMethod(#UISegmentedControl, "widthForSegmentAtIndex:") = Float, UInt;
overload externalInstanceMethod(#UISegmentedControl, "setContentOffset:forSegmentAtIndex:") = Void, CGSize, UInt;
overload externalInstanceMethod(#UISegmentedControl, "contentOffsetForSegmentAtIndex:") = CGSize, UInt;
overload externalInstanceMethod(#UISegmentedControl, "setEnabled:forSegmentAtIndex:") = Void, Bool, UInt;
overload externalInstanceMethod(#UISegmentedControl, "isEnabledForSegmentAtIndex:") = Bool, UInt;
overload externalInstanceMethod(#UISegmentedControl, "segmentedControlStyle") = UISegmentedControlStyle;
overload externalInstanceMethod(#UISegmentedControl, "setSegmentedControlStyle:") = Void, UISegmentedControlStyle;
overload externalInstanceMethod(#UISegmentedControl, "isMomentary") = Bool;
overload externalInstanceMethod(#UISegmentedControl, "setMomentary:") = Void, Bool;
overload externalInstanceMethod(#UISegmentedControl, "tintColor") = UIColor;
overload externalInstanceMethod(#UISegmentedControl, "setTintColor:") = Void, UIColor;
overload externalInstanceMethod(#UISegmentedControl, "numberOfSegments") = UInt;
overload externalInstanceMethod(#UISegmentedControl, "selectedSegmentIndex") = Int;
overload externalInstanceMethod(#UISegmentedControl, "setSelectedSegmentIndex:") = Void, Int;

record UISlider = externalClass(UIControl);
overload externalInstanceMethod(#UISlider, "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#UISlider, "initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#UISlider, "setValue:animated:") = Void, Float, Bool;
overload externalInstanceMethod(#UISlider, "setThumbImage:forState:") = Void, UIImage, UInt;
overload externalInstanceMethod(#UISlider, "setMinimumTrackImage:forState:") = Void, UIImage, UInt;
overload externalInstanceMethod(#UISlider, "setMaximumTrackImage:forState:") = Void, UIImage, UInt;
overload externalInstanceMethod(#UISlider, "thumbImageForState:") = UIImage, UInt;
overload externalInstanceMethod(#UISlider, "minimumTrackImageForState:") = UIImage, UInt;
overload externalInstanceMethod(#UISlider, "maximumTrackImageForState:") = UIImage, UInt;
overload externalInstanceMethod(#UISlider, "minimumValueImageRectForBounds:") = CGRect, CGRect;
overload externalInstanceMethod(#UISlider, "maximumValueImageRectForBounds:") = CGRect, CGRect;
overload externalInstanceMethod(#UISlider, "trackRectForBounds:") = CGRect, CGRect;
overload externalInstanceMethod(#UISlider, "thumbRectForBounds:trackRect:value:") = CGRect, CGRect, CGRect, Float;
overload externalInstanceMethod(#UISlider, "value") = Float;
overload externalInstanceMethod(#UISlider, "setValue:") = Void, Float;
overload externalInstanceMethod(#UISlider, "minimumValue") = Float;
overload externalInstanceMethod(#UISlider, "setMinimumValue:") = Void, Float;
overload externalInstanceMethod(#UISlider, "maximumValue") = Float;
overload externalInstanceMethod(#UISlider, "setMaximumValue:") = Void, Float;
overload externalInstanceMethod(#UISlider, "minimumValueImage") = UIImage;
overload externalInstanceMethod(#UISlider, "setMinimumValueImage:") = Void, UIImage;
overload externalInstanceMethod(#UISlider, "maximumValueImage") = UIImage;
overload externalInstanceMethod(#UISlider, "setMaximumValueImage:") = Void, UIImage;
overload externalInstanceMethod(#UISlider, "isContinuous") = Bool;
overload externalInstanceMethod(#UISlider, "setContinuous:") = Void, Bool;
overload externalInstanceMethod(#UISlider, "currentThumbImage") = UIImage;
overload externalInstanceMethod(#UISlider, "currentMinimumTrackImage") = UIImage;
overload externalInstanceMethod(#UISlider, "currentMaximumTrackImage") = UIImage;

record UISplitViewController = externalClass(UIViewController);
overload externalInstanceMethod(#UISplitViewController, "viewControllers") = NSArray;
overload externalInstanceMethod(#UISplitViewController, "setViewControllers:") = Void, NSArray;
overload externalInstanceMethod(#UISplitViewController, "delegate") = Id;
overload externalInstanceMethod(#UISplitViewController, "setDelegate:") = Void, Id;

record UISwipeGestureRecognizer = externalClass(UIGestureRecognizer);
overload externalInstanceMethod(#UISwipeGestureRecognizer, "numberOfTouchesRequired") = UInt;
overload externalInstanceMethod(#UISwipeGestureRecognizer, "setNumberOfTouchesRequired:") = Void, UInt;
overload externalInstanceMethod(#UISwipeGestureRecognizer, "direction") = UISwipeGestureRecognizerDirection;
overload externalInstanceMethod(#UISwipeGestureRecognizer, "setDirection:") = Void, UISwipeGestureRecognizerDirection;

record UISwitch = externalClass(UIControl);
overload externalInstanceMethod(#UISwitch, "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#UISwitch, "initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#UISwitch, "initWithFrame:") = Id, CGRect;
overload externalInstanceMethod(#UISwitch, "setOn:animated:") = Void, Bool, Bool;
overload externalInstanceMethod(#UISwitch, "isOn") = Bool;
overload externalInstanceMethod(#UISwitch, "setOn:") = Void, Bool;

record UITabBar = externalClass(UIView);
overload externalInstanceMethod(#UITabBar, "setItems:animated:") = Void, NSArray, Bool;
overload externalInstanceMethod(#UITabBar, "beginCustomizingItems:") = Void, NSArray;
overload externalInstanceMethod(#UITabBar, "endCustomizingAnimated:") = Bool, Bool;
overload externalInstanceMethod(#UITabBar, "isCustomizing") = Bool;
overload externalInstanceMethod(#UITabBar, "delegate") = Id;
overload externalInstanceMethod(#UITabBar, "setDelegate:") = Void, Id;
overload externalInstanceMethod(#UITabBar, "items") = NSArray;
overload externalInstanceMethod(#UITabBar, "setItems:") = Void, NSArray;
overload externalInstanceMethod(#UITabBar, "selectedItem") = UITabBarItem;
overload externalInstanceMethod(#UITabBar, "setSelectedItem:") = Void, UITabBarItem;

record UITabBarController = externalClass(UIViewController);
overload externalInstanceMethod(#UITabBarController, "tabBar:didSelectItem:") = Void, UITabBar, UITabBarItem;
overload externalInstanceMethod(#UITabBarController, "tabBar:willBeginCustomizingItems:") = Void, UITabBar, NSArray;
overload externalInstanceMethod(#UITabBarController, "tabBar:didBeginCustomizingItems:") = Void, UITabBar, NSArray;
overload externalInstanceMethod(#UITabBarController, "tabBar:willEndCustomizingItems:changed:") = Void, UITabBar, NSArray, Bool;
overload externalInstanceMethod(#UITabBarController, "tabBar:didEndCustomizingItems:changed:") = Void, UITabBar, NSArray, Bool;
overload externalInstanceMethod(#UITabBarController, "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#UITabBarController, "initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#UITabBarController, "setViewControllers:animated:") = Void, NSArray, Bool;
overload externalInstanceMethod(#UITabBarController, "viewControllers") = NSArray;
overload externalInstanceMethod(#UITabBarController, "setViewControllers:") = Void, NSArray;
overload externalInstanceMethod(#UITabBarController, "selectedViewController") = UIViewController;
overload externalInstanceMethod(#UITabBarController, "setSelectedViewController:") = Void, UIViewController;
overload externalInstanceMethod(#UITabBarController, "selectedIndex") = UInt;
overload externalInstanceMethod(#UITabBarController, "setSelectedIndex:") = Void, UInt;
overload externalInstanceMethod(#UITabBarController, "moreNavigationController") = UINavigationController;
overload externalInstanceMethod(#UITabBarController, "customizableViewControllers") = NSArray;
overload externalInstanceMethod(#UITabBarController, "setCustomizableViewControllers:") = Void, NSArray;
overload externalInstanceMethod(#UITabBarController, "tabBar") = UITabBar;
overload externalInstanceMethod(#UITabBarController, "delegate") = Id;
overload externalInstanceMethod(#UITabBarController, "setDelegate:") = Void, Id;

record UITabBarItem = externalClass(UIBarItem);
overload externalInstanceMethod(#UITabBarItem, "initWithTitle:image:tag:") = Id, NSString, UIImage, Int;
overload externalInstanceMethod(#UITabBarItem, "initWithTabBarSystemItem:tag:") = Id, UITabBarSystemItem, Int;
overload externalInstanceMethod(#UITabBarItem, "badgeValue") = NSString;
overload externalInstanceMethod(#UITabBarItem, "setBadgeValue:") = Void, NSString;

record UITableView = externalClass(UIScrollView);
overload externalInstanceMethod(#UITableView, "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#UITableView, "initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#UITableView, "initWithFrame:style:") = Id, CGRect, UITableViewStyle;
overload externalInstanceMethod(#UITableView, "reloadData") = Void;
overload externalInstanceMethod(#UITableView, "reloadSectionIndexTitles") = Void;
overload externalInstanceMethod(#UITableView, "numberOfSections") = Int;
overload externalInstanceMethod(#UITableView, "numberOfRowsInSection:") = Int, Int;
overload externalInstanceMethod(#UITableView, "rectForSection:") = CGRect, Int;
overload externalInstanceMethod(#UITableView, "rectForHeaderInSection:") = CGRect, Int;
overload externalInstanceMethod(#UITableView, "rectForFooterInSection:") = CGRect, Int;
overload externalInstanceMethod(#UITableView, "rectForRowAtIndexPath:") = CGRect, NSIndexPath;
overload externalInstanceMethod(#UITableView, "indexPathForRowAtPoint:") = NSIndexPath, CGPoint;
overload externalInstanceMethod(#UITableView, "indexPathForCell:") = NSIndexPath, UITableViewCell;
overload externalInstanceMethod(#UITableView, "indexPathsForRowsInRect:") = NSArray, CGRect;
overload externalInstanceMethod(#UITableView, "cellForRowAtIndexPath:") = UITableViewCell, NSIndexPath;
overload externalInstanceMethod(#UITableView, "visibleCells") = NSArray;
overload externalInstanceMethod(#UITableView, "indexPathsForVisibleRows") = NSArray;
overload externalInstanceMethod(#UITableView, "scrollToRowAtIndexPath:atScrollPosition:animated:") = Void, NSIndexPath, UITableViewScrollPosition, Bool;
overload externalInstanceMethod(#UITableView, "scrollToNearestSelectedRowAtScrollPosition:animated:") = Void, UITableViewScrollPosition, Bool;
overload externalInstanceMethod(#UITableView, "beginUpdates") = Void;
overload externalInstanceMethod(#UITableView, "endUpdates") = Void;
overload externalInstanceMethod(#UITableView, "insertSections:withRowAnimation:") = Void, NSIndexSet, UITableViewRowAnimation;
overload externalInstanceMethod(#UITableView, "deleteSections:withRowAnimation:") = Void, NSIndexSet, UITableViewRowAnimation;
overload externalInstanceMethod(#UITableView, "reloadSections:withRowAnimation:") = Void, NSIndexSet, UITableViewRowAnimation;
overload externalInstanceMethod(#UITableView, "insertRowsAtIndexPaths:withRowAnimation:") = Void, NSArray, UITableViewRowAnimation;
overload externalInstanceMethod(#UITableView, "deleteRowsAtIndexPaths:withRowAnimation:") = Void, NSArray, UITableViewRowAnimation;
overload externalInstanceMethod(#UITableView, "reloadRowsAtIndexPaths:withRowAnimation:") = Void, NSArray, UITableViewRowAnimation;
overload externalInstanceMethod(#UITableView, "setEditing:animated:") = Void, Bool, Bool;
overload externalInstanceMethod(#UITableView, "indexPathForSelectedRow") = NSIndexPath;
overload externalInstanceMethod(#UITableView, "selectRowAtIndexPath:animated:scrollPosition:") = Void, NSIndexPath, Bool, UITableViewScrollPosition;
overload externalInstanceMethod(#UITableView, "deselectRowAtIndexPath:animated:") = Void, NSIndexPath, Bool;
overload externalInstanceMethod(#UITableView, "dequeueReusableCellWithIdentifier:") = UITableViewCell, NSString;
overload externalInstanceMethod(#UITableView, "style") = UITableViewStyle;
overload externalInstanceMethod(#UITableView, "dataSource") = Id;
overload externalInstanceMethod(#UITableView, "setDataSource:") = Void, Id;
overload externalInstanceMethod(#UITableView, "delegate") = Id;
overload externalInstanceMethod(#UITableView, "setDelegate:") = Void, Id;
overload externalInstanceMethod(#UITableView, "rowHeight") = Float;
overload externalInstanceMethod(#UITableView, "setRowHeight:") = Void, Float;
overload externalInstanceMethod(#UITableView, "sectionHeaderHeight") = Float;
overload externalInstanceMethod(#UITableView, "setSectionHeaderHeight:") = Void, Float;
overload externalInstanceMethod(#UITableView, "sectionFooterHeight") = Float;
overload externalInstanceMethod(#UITableView, "setSectionFooterHeight:") = Void, Float;
overload externalInstanceMethod(#UITableView, "backgroundView") = UIView;
overload externalInstanceMethod(#UITableView, "setBackgroundView:") = Void, UIView;
overload externalInstanceMethod(#UITableView, "isEditing") = Bool;
overload externalInstanceMethod(#UITableView, "setEditing:") = Void, Bool;
overload externalInstanceMethod(#UITableView, "allowsSelection") = Bool;
overload externalInstanceMethod(#UITableView, "setAllowsSelection:") = Void, Bool;
overload externalInstanceMethod(#UITableView, "allowsSelectionDuringEditing") = Bool;
overload externalInstanceMethod(#UITableView, "setAllowsSelectionDuringEditing:") = Void, Bool;
overload externalInstanceMethod(#UITableView, "sectionIndexMinimumDisplayRowCount") = Int;
overload externalInstanceMethod(#UITableView, "setSectionIndexMinimumDisplayRowCount:") = Void, Int;
overload externalInstanceMethod(#UITableView, "separatorStyle") = UITableViewCellSeparatorStyle;
overload externalInstanceMethod(#UITableView, "setSeparatorStyle:") = Void, UITableViewCellSeparatorStyle;
overload externalInstanceMethod(#UITableView, "separatorColor") = UIColor;
overload externalInstanceMethod(#UITableView, "setSeparatorColor:") = Void, UIColor;
overload externalInstanceMethod(#UITableView, "tableHeaderView") = UIView;
overload externalInstanceMethod(#UITableView, "setTableHeaderView:") = Void, UIView;
overload externalInstanceMethod(#UITableView, "tableFooterView") = UIView;
overload externalInstanceMethod(#UITableView, "setTableFooterView:") = Void, UIView;

record UITableViewCell = externalClass(UIView);
overload externalInstanceMethod(#UITableViewCell, "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#UITableViewCell, "initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#UITableViewCell, "initWithStyle:reuseIdentifier:") = Id, UITableViewCellStyle, NSString;
overload externalInstanceMethod(#UITableViewCell, "prepareForReuse") = Void;
overload externalInstanceMethod(#UITableViewCell, "setSelected:animated:") = Void, Bool, Bool;
overload externalInstanceMethod(#UITableViewCell, "setHighlighted:animated:") = Void, Bool, Bool;
overload externalInstanceMethod(#UITableViewCell, "setEditing:animated:") = Void, Bool, Bool;
overload externalInstanceMethod(#UITableViewCell, "willTransitionToState:") = Void, UInt;
overload externalInstanceMethod(#UITableViewCell, "didTransitionToState:") = Void, UInt;
overload externalInstanceMethod(#UITableViewCell, "imageView") = UIImageView;
overload externalInstanceMethod(#UITableViewCell, "textLabel") = UILabel;
overload externalInstanceMethod(#UITableViewCell, "detailTextLabel") = UILabel;
overload externalInstanceMethod(#UITableViewCell, "contentView") = UIView;
overload externalInstanceMethod(#UITableViewCell, "backgroundView") = UIView;
overload externalInstanceMethod(#UITableViewCell, "setBackgroundView:") = Void, UIView;
overload externalInstanceMethod(#UITableViewCell, "selectedBackgroundView") = UIView;
overload externalInstanceMethod(#UITableViewCell, "setSelectedBackgroundView:") = Void, UIView;
overload externalInstanceMethod(#UITableViewCell, "reuseIdentifier") = NSString;
overload externalInstanceMethod(#UITableViewCell, "selectionStyle") = UITableViewCellSelectionStyle;
overload externalInstanceMethod(#UITableViewCell, "setSelectionStyle:") = Void, UITableViewCellSelectionStyle;
overload externalInstanceMethod(#UITableViewCell, "isSelected") = Bool;
overload externalInstanceMethod(#UITableViewCell, "setSelected:") = Void, Bool;
overload externalInstanceMethod(#UITableViewCell, "isHighlighted") = Bool;
overload externalInstanceMethod(#UITableViewCell, "setHighlighted:") = Void, Bool;
overload externalInstanceMethod(#UITableViewCell, "editingStyle") = UITableViewCellEditingStyle;
overload externalInstanceMethod(#UITableViewCell, "showsReorderControl") = Bool;
overload externalInstanceMethod(#UITableViewCell, "setShowsReorderControl:") = Void, Bool;
overload externalInstanceMethod(#UITableViewCell, "shouldIndentWhileEditing") = Bool;
overload externalInstanceMethod(#UITableViewCell, "setShouldIndentWhileEditing:") = Void, Bool;
overload externalInstanceMethod(#UITableViewCell, "accessoryType") = UITableViewCellAccessoryType;
overload externalInstanceMethod(#UITableViewCell, "setAccessoryType:") = Void, UITableViewCellAccessoryType;
overload externalInstanceMethod(#UITableViewCell, "accessoryView") = UIView;
overload externalInstanceMethod(#UITableViewCell, "setAccessoryView:") = Void, UIView;
overload externalInstanceMethod(#UITableViewCell, "editingAccessoryType") = UITableViewCellAccessoryType;
overload externalInstanceMethod(#UITableViewCell, "setEditingAccessoryType:") = Void, UITableViewCellAccessoryType;
overload externalInstanceMethod(#UITableViewCell, "editingAccessoryView") = UIView;
overload externalInstanceMethod(#UITableViewCell, "setEditingAccessoryView:") = Void, UIView;
overload externalInstanceMethod(#UITableViewCell, "indentationLevel") = Int;
overload externalInstanceMethod(#UITableViewCell, "setIndentationLevel:") = Void, Int;
overload externalInstanceMethod(#UITableViewCell, "indentationWidth") = Float;
overload externalInstanceMethod(#UITableViewCell, "setIndentationWidth:") = Void, Float;
overload externalInstanceMethod(#UITableViewCell, "isEditing") = Bool;
overload externalInstanceMethod(#UITableViewCell, "setEditing:") = Void, Bool;
overload externalInstanceMethod(#UITableViewCell, "showingDeleteConfirmation") = Bool;
overload externalInstanceMethod(#UITableViewCell, "initWithFrame:reuseIdentifier:") = Id, CGRect, NSString;
overload externalInstanceMethod(#UITableViewCell, "text") = NSString;
overload externalInstanceMethod(#UITableViewCell, "setText:") = Void, NSString;
overload externalInstanceMethod(#UITableViewCell, "font") = UIFont;
overload externalInstanceMethod(#UITableViewCell, "setFont:") = Void, UIFont;
overload externalInstanceMethod(#UITableViewCell, "textAlignment") = UITextAlignment;
overload externalInstanceMethod(#UITableViewCell, "setTextAlignment:") = Void, UITextAlignment;
overload externalInstanceMethod(#UITableViewCell, "lineBreakMode") = UILineBreakMode;
overload externalInstanceMethod(#UITableViewCell, "setLineBreakMode:") = Void, UILineBreakMode;
overload externalInstanceMethod(#UITableViewCell, "textColor") = UIColor;
overload externalInstanceMethod(#UITableViewCell, "setTextColor:") = Void, UIColor;
overload externalInstanceMethod(#UITableViewCell, "selectedTextColor") = UIColor;
overload externalInstanceMethod(#UITableViewCell, "setSelectedTextColor:") = Void, UIColor;
overload externalInstanceMethod(#UITableViewCell, "image") = UIImage;
overload externalInstanceMethod(#UITableViewCell, "setImage:") = Void, UIImage;
overload externalInstanceMethod(#UITableViewCell, "selectedImage") = UIImage;
overload externalInstanceMethod(#UITableViewCell, "setSelectedImage:") = Void, UIImage;
overload externalInstanceMethod(#UITableViewCell, "hidesAccessoryWhenEditing") = Bool;
overload externalInstanceMethod(#UITableViewCell, "setHidesAccessoryWhenEditing:") = Void, Bool;
overload externalInstanceMethod(#UITableViewCell, "target") = Id;
overload externalInstanceMethod(#UITableViewCell, "setTarget:") = Void, Id;
overload externalInstanceMethod(#UITableViewCell, "editAction") = SelectorHandle;
overload externalInstanceMethod(#UITableViewCell, "setEditAction:") = Void, SelectorHandle;
overload externalInstanceMethod(#UITableViewCell, "accessoryAction") = SelectorHandle;
overload externalInstanceMethod(#UITableViewCell, "setAccessoryAction:") = Void, SelectorHandle;

record UITableViewController = externalClass(UIViewController);
overload externalInstanceMethod(#UITableViewController, "tableView:willDisplayCell:forRowAtIndexPath:") = Void, UITableView, UITableViewCell, NSIndexPath;
overload externalInstanceMethod(#UITableViewController, "tableView:heightForRowAtIndexPath:") = Float, UITableView, NSIndexPath;
overload externalInstanceMethod(#UITableViewController, "tableView:heightForHeaderInSection:") = Float, UITableView, Int;
overload externalInstanceMethod(#UITableViewController, "tableView:heightForFooterInSection:") = Float, UITableView, Int;
overload externalInstanceMethod(#UITableViewController, "tableView:viewForHeaderInSection:") = UIView, UITableView, Int;
overload externalInstanceMethod(#UITableViewController, "tableView:viewForFooterInSection:") = UIView, UITableView, Int;
overload externalInstanceMethod(#UITableViewController, "tableView:accessoryTypeForRowWithIndexPath:") = UITableViewCellAccessoryType, UITableView, NSIndexPath;
overload externalInstanceMethod(#UITableViewController, "tableView:accessoryButtonTappedForRowWithIndexPath:") = Void, UITableView, NSIndexPath;
overload externalInstanceMethod(#UITableViewController, "tableView:willSelectRowAtIndexPath:") = NSIndexPath, UITableView, NSIndexPath;
overload externalInstanceMethod(#UITableViewController, "tableView:willDeselectRowAtIndexPath:") = NSIndexPath, UITableView, NSIndexPath;
overload externalInstanceMethod(#UITableViewController, "tableView:didSelectRowAtIndexPath:") = Void, UITableView, NSIndexPath;
overload externalInstanceMethod(#UITableViewController, "tableView:didDeselectRowAtIndexPath:") = Void, UITableView, NSIndexPath;
overload externalInstanceMethod(#UITableViewController, "tableView:editingStyleForRowAtIndexPath:") = UITableViewCellEditingStyle, UITableView, NSIndexPath;
overload externalInstanceMethod(#UITableViewController, "tableView:titleForDeleteConfirmationButtonForRowAtIndexPath:") = NSString, UITableView, NSIndexPath;
overload externalInstanceMethod(#UITableViewController, "tableView:shouldIndentWhileEditingRowAtIndexPath:") = Bool, UITableView, NSIndexPath;
overload externalInstanceMethod(#UITableViewController, "tableView:willBeginEditingRowAtIndexPath:") = Void, UITableView, NSIndexPath;
overload externalInstanceMethod(#UITableViewController, "tableView:didEndEditingRowAtIndexPath:") = Void, UITableView, NSIndexPath;
overload externalInstanceMethod(#UITableViewController, "tableView:targetIndexPathForMoveFromRowAtIndexPath:toProposedIndexPath:") = NSIndexPath, UITableView, NSIndexPath, NSIndexPath;
overload externalInstanceMethod(#UITableViewController, "tableView:indentationLevelForRowAtIndexPath:") = Int, UITableView, NSIndexPath;
overload externalInstanceMethod(#UITableViewController, "tableView:numberOfRowsInSection:") = Int, UITableView, Int;
overload externalInstanceMethod(#UITableViewController, "tableView:cellForRowAtIndexPath:") = UITableViewCell, UITableView, NSIndexPath;
overload externalInstanceMethod(#UITableViewController, "numberOfSectionsInTableView:") = Int, UITableView;
overload externalInstanceMethod(#UITableViewController, "tableView:titleForHeaderInSection:") = NSString, UITableView, Int;
overload externalInstanceMethod(#UITableViewController, "tableView:titleForFooterInSection:") = NSString, UITableView, Int;
overload externalInstanceMethod(#UITableViewController, "tableView:canEditRowAtIndexPath:") = Bool, UITableView, NSIndexPath;
overload externalInstanceMethod(#UITableViewController, "tableView:canMoveRowAtIndexPath:") = Bool, UITableView, NSIndexPath;
overload externalInstanceMethod(#UITableViewController, "sectionIndexTitlesForTableView:") = NSArray, UITableView;
overload externalInstanceMethod(#UITableViewController, "tableView:sectionForSectionIndexTitle:atIndex:") = Int, UITableView, NSString, Int;
overload externalInstanceMethod(#UITableViewController, "tableView:commitEditingStyle:forRowAtIndexPath:") = Void, UITableView, UITableViewCellEditingStyle, NSIndexPath;
overload externalInstanceMethod(#UITableViewController, "tableView:moveRowAtIndexPath:toIndexPath:") = Void, UITableView, NSIndexPath, NSIndexPath;
overload externalInstanceMethod(#UITableViewController, "initWithStyle:") = Id, UITableViewStyle;
overload externalInstanceMethod(#UITableViewController, "tableView") = UITableView;
overload externalInstanceMethod(#UITableViewController, "setTableView:") = Void, UITableView;
overload externalInstanceMethod(#UITableViewController, "clearsSelectionOnViewWillAppear") = Bool;
overload externalInstanceMethod(#UITableViewController, "setClearsSelectionOnViewWillAppear:") = Void, Bool;

record UITapGestureRecognizer = externalClass(UIGestureRecognizer);
overload externalInstanceMethod(#UITapGestureRecognizer, "numberOfTapsRequired") = UInt;
overload externalInstanceMethod(#UITapGestureRecognizer, "setNumberOfTapsRequired:") = Void, UInt;
overload externalInstanceMethod(#UITapGestureRecognizer, "numberOfTouchesRequired") = UInt;
overload externalInstanceMethod(#UITapGestureRecognizer, "setNumberOfTouchesRequired:") = Void, UInt;

record UITextField = externalClass(UIControl);
overload externalInstanceMethod(#UITextField, "autocapitalizationType") = UITextAutocapitalizationType;
overload externalInstanceMethod(#UITextField, "setAutocapitalizationType:") = Void, UITextAutocapitalizationType;
overload externalInstanceMethod(#UITextField, "autocorrectionType") = UITextAutocorrectionType;
overload externalInstanceMethod(#UITextField, "setAutocorrectionType:") = Void, UITextAutocorrectionType;
overload externalInstanceMethod(#UITextField, "keyboardType") = UIKeyboardType;
overload externalInstanceMethod(#UITextField, "setKeyboardType:") = Void, UIKeyboardType;
overload externalInstanceMethod(#UITextField, "keyboardAppearance") = UIKeyboardAppearance;
overload externalInstanceMethod(#UITextField, "setKeyboardAppearance:") = Void, UIKeyboardAppearance;
overload externalInstanceMethod(#UITextField, "returnKeyType") = UIReturnKeyType;
overload externalInstanceMethod(#UITextField, "setReturnKeyType:") = Void, UIReturnKeyType;
overload externalInstanceMethod(#UITextField, "enablesReturnKeyAutomatically") = Bool;
overload externalInstanceMethod(#UITextField, "setEnablesReturnKeyAutomatically:") = Void, Bool;
overload externalInstanceMethod(#UITextField, "isSecureTextEntry") = Bool;
overload externalInstanceMethod(#UITextField, "setSecureTextEntry:") = Void, Bool;
overload externalInstanceMethod(#UITextField, "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#UITextField, "initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#UITextField, "borderRectForBounds:") = CGRect, CGRect;
overload externalInstanceMethod(#UITextField, "textRectForBounds:") = CGRect, CGRect;
overload externalInstanceMethod(#UITextField, "placeholderRectForBounds:") = CGRect, CGRect;
overload externalInstanceMethod(#UITextField, "editingRectForBounds:") = CGRect, CGRect;
overload externalInstanceMethod(#UITextField, "clearButtonRectForBounds:") = CGRect, CGRect;
overload externalInstanceMethod(#UITextField, "leftViewRectForBounds:") = CGRect, CGRect;
overload externalInstanceMethod(#UITextField, "rightViewRectForBounds:") = CGRect, CGRect;
overload externalInstanceMethod(#UITextField, "drawTextInRect:") = Void, CGRect;
overload externalInstanceMethod(#UITextField, "drawPlaceholderInRect:") = Void, CGRect;
overload externalInstanceMethod(#UITextField, "text") = NSString;
overload externalInstanceMethod(#UITextField, "setText:") = Void, NSString;
overload externalInstanceMethod(#UITextField, "textColor") = UIColor;
overload externalInstanceMethod(#UITextField, "setTextColor:") = Void, UIColor;
overload externalInstanceMethod(#UITextField, "font") = UIFont;
overload externalInstanceMethod(#UITextField, "setFont:") = Void, UIFont;
overload externalInstanceMethod(#UITextField, "textAlignment") = UITextAlignment;
overload externalInstanceMethod(#UITextField, "setTextAlignment:") = Void, UITextAlignment;
overload externalInstanceMethod(#UITextField, "borderStyle") = UITextBorderStyle;
overload externalInstanceMethod(#UITextField, "setBorderStyle:") = Void, UITextBorderStyle;
overload externalInstanceMethod(#UITextField, "placeholder") = NSString;
overload externalInstanceMethod(#UITextField, "setPlaceholder:") = Void, NSString;
overload externalInstanceMethod(#UITextField, "clearsOnBeginEditing") = Bool;
overload externalInstanceMethod(#UITextField, "setClearsOnBeginEditing:") = Void, Bool;
overload externalInstanceMethod(#UITextField, "adjustsFontSizeToFitWidth") = Bool;
overload externalInstanceMethod(#UITextField, "setAdjustsFontSizeToFitWidth:") = Void, Bool;
overload externalInstanceMethod(#UITextField, "minimumFontSize") = Float;
overload externalInstanceMethod(#UITextField, "setMinimumFontSize:") = Void, Float;
overload externalInstanceMethod(#UITextField, "delegate") = Id;
overload externalInstanceMethod(#UITextField, "setDelegate:") = Void, Id;
overload externalInstanceMethod(#UITextField, "background") = UIImage;
overload externalInstanceMethod(#UITextField, "setBackground:") = Void, UIImage;
overload externalInstanceMethod(#UITextField, "disabledBackground") = UIImage;
overload externalInstanceMethod(#UITextField, "setDisabledBackground:") = Void, UIImage;
overload externalInstanceMethod(#UITextField, "isEditing") = Bool;
overload externalInstanceMethod(#UITextField, "clearButtonMode") = UITextFieldViewMode;
overload externalInstanceMethod(#UITextField, "setClearButtonMode:") = Void, UITextFieldViewMode;
overload externalInstanceMethod(#UITextField, "leftView") = UIView;
overload externalInstanceMethod(#UITextField, "setLeftView:") = Void, UIView;
overload externalInstanceMethod(#UITextField, "leftViewMode") = UITextFieldViewMode;
overload externalInstanceMethod(#UITextField, "setLeftViewMode:") = Void, UITextFieldViewMode;
overload externalInstanceMethod(#UITextField, "rightView") = UIView;
overload externalInstanceMethod(#UITextField, "setRightView:") = Void, UIView;
overload externalInstanceMethod(#UITextField, "rightViewMode") = UITextFieldViewMode;
overload externalInstanceMethod(#UITextField, "setRightViewMode:") = Void, UITextFieldViewMode;
overload externalInstanceMethod(#UITextField, "inputView") = UIView;
overload externalInstanceMethod(#UITextField, "setInputView:") = Void, UIView;
overload externalInstanceMethod(#UITextField, "inputAccessoryView") = UIView;
overload externalInstanceMethod(#UITextField, "setInputAccessoryView:") = Void, UIView;

record UITextInputStringTokenizer = externalClass(NSObject);
overload externalInstanceMethod(#UITextInputStringTokenizer, "rangeEnclosingPosition:withGranularity:inDirection:") = UITextRange, UITextPosition, UITextGranularity, Int;
overload externalInstanceMethod(#UITextInputStringTokenizer, "isPosition:atBoundary:inDirection:") = Bool, UITextPosition, UITextGranularity, Int;
overload externalInstanceMethod(#UITextInputStringTokenizer, "positionFromPosition:toBoundary:inDirection:") = UITextPosition, UITextPosition, UITextGranularity, Int;
overload externalInstanceMethod(#UITextInputStringTokenizer, "isPosition:withinTextUnit:inDirection:") = Bool, UITextPosition, UITextGranularity, Int;
overload externalInstanceMethod(#UITextInputStringTokenizer, "initWithTextInput:") = Id, UIResponder;

record UITextPosition = externalClass(NSObject);

record UITextRange = externalClass(NSObject);
overload externalInstanceMethod(#UITextRange, "isEmpty") = Bool;
overload externalInstanceMethod(#UITextRange, "start") = UITextPosition;
overload externalInstanceMethod(#UITextRange, "end") = UITextPosition;

record UITextView = externalClass(UIScrollView);
overload externalInstanceMethod(#UITextView, "autocapitalizationType") = UITextAutocapitalizationType;
overload externalInstanceMethod(#UITextView, "setAutocapitalizationType:") = Void, UITextAutocapitalizationType;
overload externalInstanceMethod(#UITextView, "autocorrectionType") = UITextAutocorrectionType;
overload externalInstanceMethod(#UITextView, "setAutocorrectionType:") = Void, UITextAutocorrectionType;
overload externalInstanceMethod(#UITextView, "keyboardType") = UIKeyboardType;
overload externalInstanceMethod(#UITextView, "setKeyboardType:") = Void, UIKeyboardType;
overload externalInstanceMethod(#UITextView, "keyboardAppearance") = UIKeyboardAppearance;
overload externalInstanceMethod(#UITextView, "setKeyboardAppearance:") = Void, UIKeyboardAppearance;
overload externalInstanceMethod(#UITextView, "returnKeyType") = UIReturnKeyType;
overload externalInstanceMethod(#UITextView, "setReturnKeyType:") = Void, UIReturnKeyType;
overload externalInstanceMethod(#UITextView, "enablesReturnKeyAutomatically") = Bool;
overload externalInstanceMethod(#UITextView, "setEnablesReturnKeyAutomatically:") = Void, Bool;
overload externalInstanceMethod(#UITextView, "isSecureTextEntry") = Bool;
overload externalInstanceMethod(#UITextView, "setSecureTextEntry:") = Void, Bool;
overload externalInstanceMethod(#UITextView, "hasText") = Bool;
overload externalInstanceMethod(#UITextView, "scrollRangeToVisible:") = Void, NSRange;
overload externalInstanceMethod(#UITextView, "delegate") = Id;
overload externalInstanceMethod(#UITextView, "setDelegate:") = Void, Id;
overload externalInstanceMethod(#UITextView, "text") = NSString;
overload externalInstanceMethod(#UITextView, "setText:") = Void, NSString;
overload externalInstanceMethod(#UITextView, "font") = UIFont;
overload externalInstanceMethod(#UITextView, "setFont:") = Void, UIFont;
overload externalInstanceMethod(#UITextView, "textColor") = UIColor;
overload externalInstanceMethod(#UITextView, "setTextColor:") = Void, UIColor;
overload externalInstanceMethod(#UITextView, "textAlignment") = UITextAlignment;
overload externalInstanceMethod(#UITextView, "setTextAlignment:") = Void, UITextAlignment;
overload externalInstanceMethod(#UITextView, "selectedRange") = NSRange;
overload externalInstanceMethod(#UITextView, "setSelectedRange:") = Void, NSRange;
overload externalInstanceMethod(#UITextView, "isEditable") = Bool;
overload externalInstanceMethod(#UITextView, "setEditable:") = Void, Bool;
overload externalInstanceMethod(#UITextView, "dataDetectorTypes") = UInt;
overload externalInstanceMethod(#UITextView, "setDataDetectorTypes:") = Void, UInt;
overload externalInstanceMethod(#UITextView, "inputView") = UIView;
overload externalInstanceMethod(#UITextView, "setInputView:") = Void, UIView;
overload externalInstanceMethod(#UITextView, "inputAccessoryView") = UIView;
overload externalInstanceMethod(#UITextView, "setInputAccessoryView:") = Void, UIView;

record UIToolbar = externalClass(UIView);
overload externalInstanceMethod(#UIToolbar, "setItems:animated:") = Void, NSArray, Bool;
overload externalInstanceMethod(#UIToolbar, "barStyle") = UIBarStyle;
overload externalInstanceMethod(#UIToolbar, "setBarStyle:") = Void, UIBarStyle;
overload externalInstanceMethod(#UIToolbar, "items") = NSArray;
overload externalInstanceMethod(#UIToolbar, "setItems:") = Void, NSArray;
overload externalInstanceMethod(#UIToolbar, "tintColor") = UIColor;
overload externalInstanceMethod(#UIToolbar, "setTintColor:") = Void, UIColor;
overload externalInstanceMethod(#UIToolbar, "isTranslucent") = Bool;
overload externalInstanceMethod(#UIToolbar, "setTranslucent:") = Void, Bool;

record UITouch = externalClass(NSObject);
overload externalInstanceMethod(#UITouch, "locationInView:") = CGPoint, UIView;
overload externalInstanceMethod(#UITouch, "previousLocationInView:") = CGPoint, UIView;
overload externalInstanceMethod(#UITouch, "timestamp") = Double;
overload externalInstanceMethod(#UITouch, "phase") = UITouchPhase;
overload externalInstanceMethod(#UITouch, "tapCount") = UInt;
overload externalInstanceMethod(#UITouch, "window") = UIWindow;
overload externalInstanceMethod(#UITouch, "view") = UIView;
overload externalInstanceMethod(#UITouch, "gestureRecognizers") = NSArray;

record UIVideoEditorController = externalClass(UINavigationController);
overload externalClassMethod(#UIVideoEditorController, "canEditVideoAtPath:") = Bool, NSString;
overload externalInstanceMethod(#UIVideoEditorController, "delegate") = Id;
overload externalInstanceMethod(#UIVideoEditorController, "setDelegate:") = Void, Id;
overload externalInstanceMethod(#UIVideoEditorController, "videoPath") = NSString;
overload externalInstanceMethod(#UIVideoEditorController, "setVideoPath:") = Void, NSString;
overload externalInstanceMethod(#UIVideoEditorController, "videoMaximumDuration") = Double;
overload externalInstanceMethod(#UIVideoEditorController, "setVideoMaximumDuration:") = Void, Double;
overload externalInstanceMethod(#UIVideoEditorController, "videoQuality") = UInt;
overload externalInstanceMethod(#UIVideoEditorController, "setVideoQuality:") = Void, UInt;

record UIView = externalClass(UIResponder);
overload externalInstanceMethod(#UIView, "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#UIView, "initWithCoder:") = Id, NSCoder;
overload externalClassMethod(#UIView, "layerClass") = Id;
overload externalInstanceMethod(#UIView, "initWithFrame:") = Id, CGRect;
overload externalInstanceMethod(#UIView, "isUserInteractionEnabled") = Bool;
overload externalInstanceMethod(#UIView, "setUserInteractionEnabled:") = Void, Bool;
overload externalInstanceMethod(#UIView, "tag") = Int;
overload externalInstanceMethod(#UIView, "setTag:") = Void, Int;
overload externalInstanceMethod(#UIView, "layer") = CALayer;
overload externalInstanceMethod(#UIView, "hitTest:withEvent:") = UIView, CGPoint, UIEvent;
overload externalInstanceMethod(#UIView, "pointInside:withEvent:") = Bool, CGPoint, UIEvent;
overload externalInstanceMethod(#UIView, "convertPoint:toView:") = CGPoint, CGPoint, UIView;
overload externalInstanceMethod(#UIView, "convertPoint:fromView:") = CGPoint, CGPoint, UIView;
overload externalInstanceMethod(#UIView, "convertRect:toView:") = CGRect, CGRect, UIView;
overload externalInstanceMethod(#UIView, "convertRect:fromView:") = CGRect, CGRect, UIView;
overload externalInstanceMethod(#UIView, "sizeThatFits:") = CGSize, CGSize;
overload externalInstanceMethod(#UIView, "sizeToFit") = Void;
overload externalInstanceMethod(#UIView, "frame") = CGRect;
overload externalInstanceMethod(#UIView, "setFrame:") = Void, CGRect;
overload externalInstanceMethod(#UIView, "bounds") = CGRect;
overload externalInstanceMethod(#UIView, "setBounds:") = Void, CGRect;
overload externalInstanceMethod(#UIView, "center") = CGPoint;
overload externalInstanceMethod(#UIView, "setCenter:") = Void, CGPoint;
overload externalInstanceMethod(#UIView, "transform") = CGAffineTransform;
overload externalInstanceMethod(#UIView, "setTransform:") = Void, CGAffineTransform;
overload externalInstanceMethod(#UIView, "contentScaleFactor") = Float;
overload externalInstanceMethod(#UIView, "setContentScaleFactor:") = Void, Float;
overload externalInstanceMethod(#UIView, "isMultipleTouchEnabled") = Bool;
overload externalInstanceMethod(#UIView, "setMultipleTouchEnabled:") = Void, Bool;
overload externalInstanceMethod(#UIView, "isExclusiveTouch") = Bool;
overload externalInstanceMethod(#UIView, "setExclusiveTouch:") = Void, Bool;
overload externalInstanceMethod(#UIView, "autoresizesSubviews") = Bool;
overload externalInstanceMethod(#UIView, "setAutoresizesSubviews:") = Void, Bool;
overload externalInstanceMethod(#UIView, "autoresizingMask") = UInt;
overload externalInstanceMethod(#UIView, "setAutoresizingMask:") = Void, UInt;
overload externalInstanceMethod(#UIView, "removeFromSuperview") = Void;
overload externalInstanceMethod(#UIView, "insertSubview:atIndex:") = Void, UIView, Int;
overload externalInstanceMethod(#UIView, "exchangeSubviewAtIndex:withSubviewAtIndex:") = Void, Int, Int;
overload externalInstanceMethod(#UIView, "addSubview:") = Void, UIView;
overload externalInstanceMethod(#UIView, "insertSubview:belowSubview:") = Void, UIView, UIView;
overload externalInstanceMethod(#UIView, "insertSubview:aboveSubview:") = Void, UIView, UIView;
overload externalInstanceMethod(#UIView, "bringSubviewToFront:") = Void, UIView;
overload externalInstanceMethod(#UIView, "sendSubviewToBack:") = Void, UIView;
overload externalInstanceMethod(#UIView, "didAddSubview:") = Void, UIView;
overload externalInstanceMethod(#UIView, "willRemoveSubview:") = Void, UIView;
overload externalInstanceMethod(#UIView, "willMoveToSuperview:") = Void, UIView;
overload externalInstanceMethod(#UIView, "didMoveToSuperview") = Void;
overload externalInstanceMethod(#UIView, "willMoveToWindow:") = Void, UIWindow;
overload externalInstanceMethod(#UIView, "didMoveToWindow") = Void;
overload externalInstanceMethod(#UIView, "isDescendantOfView:") = Bool, UIView;
overload externalInstanceMethod(#UIView, "viewWithTag:") = UIView, Int;
overload externalInstanceMethod(#UIView, "setNeedsLayout") = Void;
overload externalInstanceMethod(#UIView, "layoutIfNeeded") = Void;
overload externalInstanceMethod(#UIView, "layoutSubviews") = Void;
overload externalInstanceMethod(#UIView, "superview") = UIView;
overload externalInstanceMethod(#UIView, "subviews") = NSArray;
overload externalInstanceMethod(#UIView, "window") = UIWindow;
overload externalInstanceMethod(#UIView, "drawRect:") = Void, CGRect;
overload externalInstanceMethod(#UIView, "setNeedsDisplay") = Void;
overload externalInstanceMethod(#UIView, "setNeedsDisplayInRect:") = Void, CGRect;
overload externalInstanceMethod(#UIView, "clipsToBounds") = Bool;
overload externalInstanceMethod(#UIView, "setClipsToBounds:") = Void, Bool;
overload externalInstanceMethod(#UIView, "backgroundColor") = UIColor;
overload externalInstanceMethod(#UIView, "setBackgroundColor:") = Void, UIColor;
overload externalInstanceMethod(#UIView, "alpha") = Float;
overload externalInstanceMethod(#UIView, "setAlpha:") = Void, Float;
overload externalInstanceMethod(#UIView, "isOpaque") = Bool;
overload externalInstanceMethod(#UIView, "setOpaque:") = Void, Bool;
overload externalInstanceMethod(#UIView, "clearsContextBeforeDrawing") = Bool;
overload externalInstanceMethod(#UIView, "setClearsContextBeforeDrawing:") = Void, Bool;
overload externalInstanceMethod(#UIView, "isHidden") = Bool;
overload externalInstanceMethod(#UIView, "setHidden:") = Void, Bool;
overload externalInstanceMethod(#UIView, "contentMode") = UIViewContentMode;
overload externalInstanceMethod(#UIView, "setContentMode:") = Void, UIViewContentMode;
overload externalInstanceMethod(#UIView, "contentStretch") = CGRect;
overload externalInstanceMethod(#UIView, "setContentStretch:") = Void, CGRect;
overload externalClassMethod(#UIView, "beginAnimations:context:") = Void, NSString, RawPointer;
overload externalClassMethod(#UIView, "commitAnimations") = Void;
overload externalClassMethod(#UIView, "setAnimationDelegate:") = Void, Id;
overload externalClassMethod(#UIView, "setAnimationWillStartSelector:") = Void, SelectorHandle;
overload externalClassMethod(#UIView, "setAnimationDidStopSelector:") = Void, SelectorHandle;
overload externalClassMethod(#UIView, "setAnimationDuration:") = Void, Double;
overload externalClassMethod(#UIView, "setAnimationDelay:") = Void, Double;
overload externalClassMethod(#UIView, "setAnimationStartDate:") = Void, NSDate;
overload externalClassMethod(#UIView, "setAnimationCurve:") = Void, UIViewAnimationCurve;
overload externalClassMethod(#UIView, "setAnimationRepeatCount:") = Void, Float;
overload externalClassMethod(#UIView, "setAnimationRepeatAutoreverses:") = Void, Bool;
overload externalClassMethod(#UIView, "setAnimationBeginsFromCurrentState:") = Void, Bool;
overload externalClassMethod(#UIView, "setAnimationTransition:forView:cache:") = Void, UIViewAnimationTransition, UIView, Bool;
overload externalClassMethod(#UIView, "setAnimationsEnabled:") = Void, Bool;
overload externalClassMethod(#UIView, "areAnimationsEnabled") = Bool;
overload externalClassMethod(#UIView, "animateWithDuration:delay:options:animations:completion:") = Void, Double, Double, UInt, UnknownType, UnknownType;
overload externalClassMethod(#UIView, "animateWithDuration:animations:completion:") = Void, Double, UnknownType, UnknownType;
overload externalClassMethod(#UIView, "animateWithDuration:animations:") = Void, Double, UnknownType;
overload externalClassMethod(#UIView, "transitionWithView:duration:options:animations:completion:") = Void, UIView, Double, UInt, UnknownType, UnknownType;
overload externalClassMethod(#UIView, "transitionFromView:toView:duration:options:completion:") = Void, UIView, UIView, Double, UInt, UnknownType;
overload externalInstanceMethod(#UIView, "addGestureRecognizer:") = Void, UIGestureRecognizer;
overload externalInstanceMethod(#UIView, "removeGestureRecognizer:") = Void, UIGestureRecognizer;
overload externalInstanceMethod(#UIView, "gestureRecognizers") = NSArray;
overload externalInstanceMethod(#UIView, "setGestureRecognizers:") = Void, NSArray;
overload externalInstanceMethod(#UIView, "endEditing:") = Bool, Bool;

record UIViewController = externalClass(UIResponder);
overload externalInstanceMethod(#UIViewController, "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#UIViewController, "initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#UIViewController, "initWithNibName:bundle:") = Id, NSString, NSBundle;
overload externalInstanceMethod(#UIViewController, "loadView") = Void;
overload externalInstanceMethod(#UIViewController, "viewDidLoad") = Void;
overload externalInstanceMethod(#UIViewController, "viewDidUnload") = Void;
overload externalInstanceMethod(#UIViewController, "isViewLoaded") = Bool;
overload externalInstanceMethod(#UIViewController, "viewWillAppear:") = Void, Bool;
overload externalInstanceMethod(#UIViewController, "viewDidAppear:") = Void, Bool;
overload externalInstanceMethod(#UIViewController, "viewWillDisappear:") = Void, Bool;
overload externalInstanceMethod(#UIViewController, "viewDidDisappear:") = Void, Bool;
overload externalInstanceMethod(#UIViewController, "didReceiveMemoryWarning") = Void;
overload externalInstanceMethod(#UIViewController, "presentModalViewController:animated:") = Void, UIViewController, Bool;
overload externalInstanceMethod(#UIViewController, "dismissModalViewControllerAnimated:") = Void, Bool;
overload externalInstanceMethod(#UIViewController, "view") = UIView;
overload externalInstanceMethod(#UIViewController, "setView:") = Void, UIView;
overload externalInstanceMethod(#UIViewController, "nibName") = NSString;
overload externalInstanceMethod(#UIViewController, "nibBundle") = NSBundle;
overload externalInstanceMethod(#UIViewController, "title") = NSString;
overload externalInstanceMethod(#UIViewController, "setTitle:") = Void, NSString;
overload externalInstanceMethod(#UIViewController, "modalViewController") = UIViewController;
overload externalInstanceMethod(#UIViewController, "modalTransitionStyle") = UIModalTransitionStyle;
overload externalInstanceMethod(#UIViewController, "setModalTransitionStyle:") = Void, UIModalTransitionStyle;
overload externalInstanceMethod(#UIViewController, "modalPresentationStyle") = UIModalPresentationStyle;
overload externalInstanceMethod(#UIViewController, "setModalPresentationStyle:") = Void, UIModalPresentationStyle;
overload externalInstanceMethod(#UIViewController, "wantsFullScreenLayout") = Bool;
overload externalInstanceMethod(#UIViewController, "setWantsFullScreenLayout:") = Void, Bool;
overload externalInstanceMethod(#UIViewController, "parentViewController") = UIViewController;
overload externalInstanceMethod(#UIViewController, "shouldAutorotateToInterfaceOrientation:") = Bool, UIInterfaceOrientation;
overload externalInstanceMethod(#UIViewController, "rotatingHeaderView") = UIView;
overload externalInstanceMethod(#UIViewController, "rotatingFooterView") = UIView;
overload externalInstanceMethod(#UIViewController, "willRotateToInterfaceOrientation:duration:") = Void, UIInterfaceOrientation, Double;
overload externalInstanceMethod(#UIViewController, "didRotateFromInterfaceOrientation:") = Void, UIInterfaceOrientation;
overload externalInstanceMethod(#UIViewController, "willAnimateRotationToInterfaceOrientation:duration:") = Void, UIInterfaceOrientation, Double;
overload externalInstanceMethod(#UIViewController, "willAnimateFirstHalfOfRotationToInterfaceOrientation:duration:") = Void, UIInterfaceOrientation, Double;
overload externalInstanceMethod(#UIViewController, "didAnimateFirstHalfOfRotationToInterfaceOrientation:") = Void, UIInterfaceOrientation;
overload externalInstanceMethod(#UIViewController, "willAnimateSecondHalfOfRotationFromInterfaceOrientation:duration:") = Void, UIInterfaceOrientation, Double;
overload externalInstanceMethod(#UIViewController, "interfaceOrientation") = UIInterfaceOrientation;
overload externalInstanceMethod(#UIViewController, "setEditing:animated:") = Void, Bool, Bool;
overload externalInstanceMethod(#UIViewController, "editButtonItem") = UIBarButtonItem;
overload externalInstanceMethod(#UIViewController, "isEditing") = Bool;
overload externalInstanceMethod(#UIViewController, "setEditing:") = Void, Bool;
overload externalInstanceMethod(#UIViewController, "searchDisplayController") = UISearchDisplayController;
overload externalInstanceMethod(#UIViewController, "navigationItem") = UINavigationItem;
overload externalInstanceMethod(#UIViewController, "hidesBottomBarWhenPushed") = Bool;
overload externalInstanceMethod(#UIViewController, "setHidesBottomBarWhenPushed:") = Void, Bool;
overload externalInstanceMethod(#UIViewController, "navigationController") = UINavigationController;
overload externalInstanceMethod(#UIViewController, "setToolbarItems:animated:") = Void, NSArray, Bool;
overload externalInstanceMethod(#UIViewController, "toolbarItems") = NSArray;
overload externalInstanceMethod(#UIViewController, "setToolbarItems:") = Void, NSArray;
overload externalInstanceMethod(#UIViewController, "contentSizeForViewInPopover") = CGSize;
overload externalInstanceMethod(#UIViewController, "setContentSizeForViewInPopover:") = Void, CGSize;
overload externalInstanceMethod(#UIViewController, "isModalInPopover") = Bool;
overload externalInstanceMethod(#UIViewController, "setModalInPopover:") = Void, Bool;
overload externalInstanceMethod(#UIViewController, "splitViewController") = UISplitViewController;
overload externalInstanceMethod(#UIViewController, "tabBarItem") = UITabBarItem;
overload externalInstanceMethod(#UIViewController, "setTabBarItem:") = Void, UITabBarItem;
overload externalInstanceMethod(#UIViewController, "tabBarController") = UITabBarController;

record UIWebView = externalClass(UIView);
overload externalInstanceMethod(#UIWebView, "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#UIWebView, "initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#UIWebView, "scrollViewDidScroll:") = Void, UIScrollView;
overload externalInstanceMethod(#UIWebView, "scrollViewDidZoom:") = Void, UIScrollView;
overload externalInstanceMethod(#UIWebView, "scrollViewWillBeginDragging:") = Void, UIScrollView;
overload externalInstanceMethod(#UIWebView, "scrollViewDidEndDragging:willDecelerate:") = Void, UIScrollView, Bool;
overload externalInstanceMethod(#UIWebView, "scrollViewWillBeginDecelerating:") = Void, UIScrollView;
overload externalInstanceMethod(#UIWebView, "scrollViewDidEndDecelerating:") = Void, UIScrollView;
overload externalInstanceMethod(#UIWebView, "scrollViewDidEndScrollingAnimation:") = Void, UIScrollView;
overload externalInstanceMethod(#UIWebView, "viewForZoomingInScrollView:") = UIView, UIScrollView;
overload externalInstanceMethod(#UIWebView, "scrollViewWillBeginZooming:withView:") = Void, UIScrollView, UIView;
overload externalInstanceMethod(#UIWebView, "scrollViewDidEndZooming:withView:atScale:") = Void, UIScrollView, UIView, Float;
overload externalInstanceMethod(#UIWebView, "scrollViewShouldScrollToTop:") = Bool, UIScrollView;
overload externalInstanceMethod(#UIWebView, "scrollViewDidScrollToTop:") = Void, UIScrollView;
overload externalInstanceMethod(#UIWebView, "loadRequest:") = Void, NSURLRequest;
overload externalInstanceMethod(#UIWebView, "loadHTMLString:baseURL:") = Void, NSString, NSURL;
overload externalInstanceMethod(#UIWebView, "loadData:MIMEType:textEncodingName:baseURL:") = Void, NSData, NSString, NSString, NSURL;
overload externalInstanceMethod(#UIWebView, "reload") = Void;
overload externalInstanceMethod(#UIWebView, "stopLoading") = Void;
overload externalInstanceMethod(#UIWebView, "goBack") = Void;
overload externalInstanceMethod(#UIWebView, "goForward") = Void;
overload externalInstanceMethod(#UIWebView, "stringByEvaluatingJavaScriptFromString:") = NSString, NSString;
overload externalInstanceMethod(#UIWebView, "delegate") = Id;
overload externalInstanceMethod(#UIWebView, "setDelegate:") = Void, Id;
overload externalInstanceMethod(#UIWebView, "request") = NSURLRequest;
overload externalInstanceMethod(#UIWebView, "canGoBack") = Bool;
overload externalInstanceMethod(#UIWebView, "canGoForward") = Bool;
overload externalInstanceMethod(#UIWebView, "isLoading") = Bool;
overload externalInstanceMethod(#UIWebView, "scalesPageToFit") = Bool;
overload externalInstanceMethod(#UIWebView, "setScalesPageToFit:") = Void, Bool;
overload externalInstanceMethod(#UIWebView, "detectsPhoneNumbers") = Bool;
overload externalInstanceMethod(#UIWebView, "setDetectsPhoneNumbers:") = Void, Bool;
overload externalInstanceMethod(#UIWebView, "dataDetectorTypes") = UInt;
overload externalInstanceMethod(#UIWebView, "setDataDetectorTypes:") = Void, UInt;
overload externalInstanceMethod(#UIWebView, "allowsInlineMediaPlayback") = Bool;
overload externalInstanceMethod(#UIWebView, "setAllowsInlineMediaPlayback:") = Void, Bool;
overload externalInstanceMethod(#UIWebView, "mediaPlaybackRequiresUserAction") = Bool;
overload externalInstanceMethod(#UIWebView, "setMediaPlaybackRequiresUserAction:") = Void, Bool;

record UIWindow = externalClass(UIView);
overload externalInstanceMethod(#UIWindow, "becomeKeyWindow") = Void;
overload externalInstanceMethod(#UIWindow, "resignKeyWindow") = Void;
overload externalInstanceMethod(#UIWindow, "makeKeyWindow") = Void;
overload externalInstanceMethod(#UIWindow, "makeKeyAndVisible") = Void;
overload externalInstanceMethod(#UIWindow, "sendEvent:") = Void, UIEvent;
overload externalInstanceMethod(#UIWindow, "convertPoint:toWindow:") = CGPoint, CGPoint, UIWindow;
overload externalInstanceMethod(#UIWindow, "convertPoint:fromWindow:") = CGPoint, CGPoint, UIWindow;
overload externalInstanceMethod(#UIWindow, "convertRect:toWindow:") = CGRect, CGRect, UIWindow;
overload externalInstanceMethod(#UIWindow, "convertRect:fromWindow:") = CGRect, CGRect, UIWindow;
overload externalInstanceMethod(#UIWindow, "screen") = UIScreen;
overload externalInstanceMethod(#UIWindow, "setScreen:") = Void, UIScreen;
overload externalInstanceMethod(#UIWindow, "windowLevel") = Float;
overload externalInstanceMethod(#UIWindow, "setWindowLevel:") = Void, Float;
overload externalInstanceMethod(#UIWindow, "isKeyWindow") = Bool;
overload externalInstanceMethod(#UIWindow, "rootViewController") = UIViewController;
overload externalInstanceMethod(#UIWindow, "setRootViewController:") = Void, UIViewController;


alias UIAccelerationValue = Double;

alias UIAccessibilityTraits = UInt64;

external UIAccessibilityTraitNone : UInt64;

external UIAccessibilityTraitButton : UInt64;

external UIAccessibilityTraitLink : UInt64;

external UIAccessibilityTraitSearchField : UInt64;

external UIAccessibilityTraitImage : UInt64;

external UIAccessibilityTraitSelected : UInt64;

external UIAccessibilityTraitPlaysSound : UInt64;

external UIAccessibilityTraitKeyboardKey : UInt64;

external UIAccessibilityTraitStaticText : UInt64;

external UIAccessibilityTraitSummaryElement : UInt64;

external UIAccessibilityTraitNotEnabled : UInt64;

external UIAccessibilityTraitUpdatesFrequently : UInt64;

external UIAccessibilityTraitStartsMediaSession : UInt64;

external UIAccessibilityTraitAdjustable : UInt64;

alias UIAccessibilityNotifications = UInt;

external UIAccessibilityScreenChangedNotification : UInt;

external UIAccessibilityLayoutChangedNotification : UInt;

external UIAccessibilityAnnouncementNotification : UInt;

alias UIEventTypeTouches = 0;
alias UIEventTypeMotion = 1;
alias UIEventTypeRemoteControl = 2;

alias UIEventType = Int;

alias UIEventSubtypeNone = 0;
alias UIEventSubtypeMotionShake = 1;
alias UIEventSubtypeRemoteControlPlay = 100;
alias UIEventSubtypeRemoteControlPause = 101;
alias UIEventSubtypeRemoteControlStop = 102;
alias UIEventSubtypeRemoteControlTogglePlayPause = 103;
alias UIEventSubtypeRemoteControlNextTrack = 104;
alias UIEventSubtypeRemoteControlPreviousTrack = 105;
alias UIEventSubtypeRemoteControlBeginSeekingBackward = 106;
alias UIEventSubtypeRemoteControlEndSeekingBackward = 107;
alias UIEventSubtypeRemoteControlBeginSeekingForward = 108;
alias UIEventSubtypeRemoteControlEndSeekingForward = 109;

alias UIEventSubtype = Int;

alias UIBarStyleDefault = 0;
alias UIBarStyleBlack = 1;
alias UIBarStyleBlackOpaque = 1;
alias UIBarStyleBlackTranslucent = 2;

alias UIBarStyle = Int;

alias UIViewAnimationCurveEaseInOut = 0;
alias UIViewAnimationCurveEaseIn = 1;
alias UIViewAnimationCurveEaseOut = 2;
alias UIViewAnimationCurveLinear = 3;

alias UIViewAnimationCurve = Int;

alias UIViewContentModeScaleToFill = 0;
alias UIViewContentModeScaleAspectFit = 1;
alias UIViewContentModeScaleAspectFill = 2;
alias UIViewContentModeRedraw = 3;
alias UIViewContentModeCenter = 4;
alias UIViewContentModeTop = 5;
alias UIViewContentModeBottom = 6;
alias UIViewContentModeLeft = 7;
alias UIViewContentModeRight = 8;
alias UIViewContentModeTopLeft = 9;
alias UIViewContentModeTopRight = 10;
alias UIViewContentModeBottomLeft = 11;
alias UIViewContentModeBottomRight = 12;

alias UIViewContentMode = Int;

alias UIViewAnimationTransitionNone = 0;
alias UIViewAnimationTransitionFlipFromLeft = 1;
alias UIViewAnimationTransitionFlipFromRight = 2;
alias UIViewAnimationTransitionCurlUp = 3;
alias UIViewAnimationTransitionCurlDown = 4;

alias UIViewAnimationTransition = Int;

alias UIViewAutoresizingNone = 0;
alias UIViewAutoresizingFlexibleLeftMargin = 1;
alias UIViewAutoresizingFlexibleWidth = 2;
alias UIViewAutoresizingFlexibleRightMargin = 4;
alias UIViewAutoresizingFlexibleTopMargin = 8;
alias UIViewAutoresizingFlexibleHeight = 16;
alias UIViewAutoresizingFlexibleBottomMargin = 32;

alias UIViewAutoresizing = UInt;

alias UIViewAnimationOptionLayoutSubviews = 1;
alias UIViewAnimationOptionAllowUserInteraction = 2;
alias UIViewAnimationOptionBeginFromCurrentState = 4;
alias UIViewAnimationOptionRepeat = 8;
alias UIViewAnimationOptionAutoreverse = 16;
alias UIViewAnimationOptionOverrideInheritedDuration = 32;
alias UIViewAnimationOptionOverrideInheritedCurve = 64;
alias UIViewAnimationOptionAllowAnimatedContent = 128;
alias UIViewAnimationOptionShowHideTransitionViews = 256;
alias UIViewAnimationOptionCurveEaseInOut = 0;
alias UIViewAnimationOptionCurveEaseIn = 65536;
alias UIViewAnimationOptionCurveEaseOut = 131072;
alias UIViewAnimationOptionCurveLinear = 196608;
alias UIViewAnimationOptionTransitionNone = 0;
alias UIViewAnimationOptionTransitionFlipFromLeft = 1048576;
alias UIViewAnimationOptionTransitionFlipFromRight = 2097152;
alias UIViewAnimationOptionTransitionCurlUp = 3145728;
alias UIViewAnimationOptionTransitionCurlDown = 4194304;

alias UIViewAnimationOptions = UInt;

external UIAccessibilityPostNotification(
    notification : UInt,
    argument : Id);

external UIAccessibilityIsVoiceOverRunning() : Bool;

external UIAccessibilityVoiceOverStatusChanged : NSString;

alias UIActivityIndicatorViewStyleWhiteLarge = 0;
alias UIActivityIndicatorViewStyleWhite = 1;
alias UIActivityIndicatorViewStyleGray = 2;

alias UIActivityIndicatorViewStyle = Int;

alias UIControlEventTouchDown = 1;
alias UIControlEventTouchDownRepeat = 2;
alias UIControlEventTouchDragInside = 4;
alias UIControlEventTouchDragOutside = 8;
alias UIControlEventTouchDragEnter = 16;
alias UIControlEventTouchDragExit = 32;
alias UIControlEventTouchUpInside = 64;
alias UIControlEventTouchUpOutside = 128;
alias UIControlEventTouchCancel = 256;
alias UIControlEventValueChanged = 4096;
alias UIControlEventEditingDidBegin = 65536;
alias UIControlEventEditingChanged = 131072;
alias UIControlEventEditingDidEnd = 262144;
alias UIControlEventEditingDidEndOnExit = 524288;
alias UIControlEventAllTouchEvents = 4095;
alias UIControlEventAllEditingEvents = 983040;
alias UIControlEventApplicationReserved = 251658240;
alias UIControlEventSystemReserved = 4026531840;
alias UIControlEventAllEvents = 4294967295;

alias UIControlEvents = UInt;

alias UIControlContentVerticalAlignmentCenter = 0;
alias UIControlContentVerticalAlignmentTop = 1;
alias UIControlContentVerticalAlignmentBottom = 2;
alias UIControlContentVerticalAlignmentFill = 3;

alias UIControlContentVerticalAlignment = Int;

alias UIControlContentHorizontalAlignmentCenter = 0;
alias UIControlContentHorizontalAlignmentLeft = 1;
alias UIControlContentHorizontalAlignmentRight = 2;
alias UIControlContentHorizontalAlignmentFill = 3;

alias UIControlContentHorizontalAlignment = Int;

alias UIControlStateNormal = 0;
alias UIControlStateHighlighted = 1;
alias UIControlStateDisabled = 2;
alias UIControlStateSelected = 4;
alias UIControlStateApplication = 16711680;
alias UIControlStateReserved = 4278190080;

alias UIControlState = UInt;

alias UILineBreakModeWordWrap = 0;
alias UILineBreakModeCharacterWrap = 1;
alias UILineBreakModeClip = 2;
alias UILineBreakModeHeadTruncation = 3;
alias UILineBreakModeTailTruncation = 4;
alias UILineBreakModeMiddleTruncation = 5;

alias UILineBreakMode = Int;

alias UITextAlignmentLeft = 0;
alias UITextAlignmentCenter = 1;
alias UITextAlignmentRight = 2;

alias UITextAlignment = Int;

alias UIBaselineAdjustmentAlignBaselines = 0;
alias UIBaselineAdjustmentAlignCenters = 1;
alias UIBaselineAdjustmentNone = 2;

alias UIBaselineAdjustment = Int;

alias UITextAutocapitalizationTypeNone = 0;
alias UITextAutocapitalizationTypeWords = 1;
alias UITextAutocapitalizationTypeSentences = 2;
alias UITextAutocapitalizationTypeAllCharacters = 3;

alias UITextAutocapitalizationType = Int;

alias UITextAutocorrectionTypeDefault = 0;
alias UITextAutocorrectionTypeNo = 1;
alias UITextAutocorrectionTypeYes = 2;

alias UITextAutocorrectionType = Int;

alias UIKeyboardTypeDefault = 0;
alias UIKeyboardTypeASCIICapable = 1;
alias UIKeyboardTypeNumbersAndPunctuation = 2;
alias UIKeyboardTypeURL = 3;
alias UIKeyboardTypeNumberPad = 4;
alias UIKeyboardTypePhonePad = 5;
alias UIKeyboardTypeNamePhonePad = 6;
alias UIKeyboardTypeEmailAddress = 7;
alias UIKeyboardTypeDecimalPad = 8;
alias UIKeyboardTypeAlphabet = 1;

alias UIKeyboardType = Int;

alias UIKeyboardAppearanceDefault = 0;
alias UIKeyboardAppearanceAlert = 1;

alias UIKeyboardAppearance = Int;

alias UIReturnKeyDefault = 0;
alias UIReturnKeyGo = 1;
alias UIReturnKeyGoogle = 2;
alias UIReturnKeyJoin = 3;
alias UIReturnKeyNext = 4;
alias UIReturnKeyRoute = 5;
alias UIReturnKeySearch = 6;
alias UIReturnKeySend = 7;
alias UIReturnKeyYahoo = 8;
alias UIReturnKeyDone = 9;
alias UIReturnKeyEmergencyCall = 10;

alias UIReturnKeyType = Int;

alias UITextBorderStyleNone = 0;
alias UITextBorderStyleLine = 1;
alias UITextBorderStyleBezel = 2;
alias UITextBorderStyleRoundedRect = 3;

alias UITextBorderStyle = Int;

alias UITextFieldViewModeNever = 0;
alias UITextFieldViewModeWhileEditing = 1;
alias UITextFieldViewModeUnlessEditing = 2;
alias UITextFieldViewModeAlways = 3;

alias UITextFieldViewMode = Int;

external UITextFieldTextDidBeginEditingNotification : NSString;

external UITextFieldTextDidEndEditingNotification : NSString;

external UITextFieldTextDidChangeNotification : NSString;

alias UIActionSheetStyleAutomatic = 4294967295;
alias UIActionSheetStyleDefault = 0;
alias UIActionSheetStyleBlackTranslucent = 2;
alias UIActionSheetStyleBlackOpaque = 1;

alias UIActionSheetStyle = Int;

alias UIDeviceOrientationUnknown = 0;
alias UIDeviceOrientationPortrait = 1;
alias UIDeviceOrientationPortraitUpsideDown = 2;
alias UIDeviceOrientationLandscapeLeft = 3;
alias UIDeviceOrientationLandscapeRight = 4;
alias UIDeviceOrientationFaceUp = 5;
alias UIDeviceOrientationFaceDown = 6;

alias UIDeviceOrientation = Int;

alias UIDeviceBatteryStateUnknown = 0;
alias UIDeviceBatteryStateUnplugged = 1;
alias UIDeviceBatteryStateCharging = 2;
alias UIDeviceBatteryStateFull = 3;

alias UIDeviceBatteryState = Int;

alias UIUserInterfaceIdiomPhone = 0;
alias UIUserInterfaceIdiomPad = 1;

alias UIUserInterfaceIdiom = Int;

external UIDeviceOrientationDidChangeNotification : NSString;

external UIDeviceBatteryStateDidChangeNotification : NSString;

external UIDeviceBatteryLevelDidChangeNotification : NSString;

external UIDeviceProximityStateDidChangeNotification : NSString;

alias UIStatusBarStyleDefault = 0;
alias UIStatusBarStyleBlackTranslucent = 1;
alias UIStatusBarStyleBlackOpaque = 2;

alias UIStatusBarStyle = Int;

alias UIStatusBarAnimationNone = 0;
alias UIStatusBarAnimationFade = 1;
alias UIStatusBarAnimationSlide = 2;

alias UIStatusBarAnimation = Int;

alias UIInterfaceOrientationPortrait = 1;
alias UIInterfaceOrientationPortraitUpsideDown = 2;
alias UIInterfaceOrientationLandscapeLeft = 4;
alias UIInterfaceOrientationLandscapeRight = 3;

alias UIInterfaceOrientation = Int;

alias UIRemoteNotificationTypeNone = 0;
alias UIRemoteNotificationTypeBadge = 1;
alias UIRemoteNotificationTypeSound = 2;
alias UIRemoteNotificationTypeAlert = 4;

alias UIRemoteNotificationType = Int;

alias UIApplicationStateActive = 0;
alias UIApplicationStateInactive = 1;
alias UIApplicationStateBackground = 2;

alias UIApplicationState = Int;

alias UIBackgroundTaskIdentifier = UInt;

external UIBackgroundTaskInvalid : UInt;

external UIMinimumKeepAliveTimeout : Double;

external UIApplicationMain(
    argc : Int,
    argv : Pointer[Pointer[CChar]],
    principalClassName : NSString,
    delegateClassName : NSString) : Int;

external UITrackingRunLoopMode : NSString;

external UIApplicationDidEnterBackgroundNotification : NSString;

external UIApplicationWillEnterForegroundNotification : NSString;

external UIApplicationDidFinishLaunchingNotification : NSString;

external UIApplicationDidBecomeActiveNotification : NSString;

external UIApplicationWillResignActiveNotification : NSString;

external UIApplicationDidReceiveMemoryWarningNotification : NSString;

external UIApplicationWillTerminateNotification : NSString;

external UIApplicationSignificantTimeChangeNotification : NSString;

external UIApplicationWillChangeStatusBarOrientationNotification : NSString;

external UIApplicationDidChangeStatusBarOrientationNotification : NSString;

external UIApplicationStatusBarOrientationUserInfoKey : NSString;

external UIApplicationWillChangeStatusBarFrameNotification : NSString;

external UIApplicationDidChangeStatusBarFrameNotification : NSString;

external UIApplicationStatusBarFrameUserInfoKey : NSString;

external UIApplicationLaunchOptionsURLKey : NSString;

external UIApplicationLaunchOptionsSourceApplicationKey : NSString;

external UIApplicationLaunchOptionsRemoteNotificationKey : NSString;

external UIApplicationLaunchOptionsLocalNotificationKey : NSString;

external UIApplicationLaunchOptionsAnnotationKey : NSString;

external UIApplicationProtectedDataWillBecomeUnavailable : NSString;

external UIApplicationProtectedDataDidBecomeAvailable : NSString;

external UIApplicationLaunchOptionsLocationKey : NSString;

record Struct_UIEdgeInsets (
    top : Float,
    left : Float,
    bottom : Float,
    right : Float,
);

alias UIEdgeInsets = Struct_UIEdgeInsets;

external UIEdgeInsetsZero : UIEdgeInsets;

external NSStringFromCGPoint(
    point : CGPoint) : NSString;

external NSStringFromCGSize(
    size : CGSize) : NSString;

external NSStringFromCGRect(
    rect : CGRect) : NSString;

external NSStringFromCGAffineTransform(
    transform : CGAffineTransform) : NSString;

external NSStringFromUIEdgeInsets(
    insets : UIEdgeInsets) : NSString;

external CGPointFromString(
    string : NSString) : CGPoint;

external CGSizeFromString(
    string : NSString) : CGSize;

external CGRectFromString(
    string : NSString) : CGRect;

external CGAffineTransformFromString(
    string : NSString) : CGAffineTransform;

external UIEdgeInsetsFromString(
    string : NSString) : UIEdgeInsets;

alias UIBarButtonItemStylePlain = 0;
alias UIBarButtonItemStyleBordered = 1;
alias UIBarButtonItemStyleDone = 2;

alias UIBarButtonItemStyle = Int;

alias UIBarButtonSystemItemDone = 0;
alias UIBarButtonSystemItemCancel = 1;
alias UIBarButtonSystemItemEdit = 2;
alias UIBarButtonSystemItemSave = 3;
alias UIBarButtonSystemItemAdd = 4;
alias UIBarButtonSystemItemFlexibleSpace = 5;
alias UIBarButtonSystemItemFixedSpace = 6;
alias UIBarButtonSystemItemCompose = 7;
alias UIBarButtonSystemItemReply = 8;
alias UIBarButtonSystemItemAction = 9;
alias UIBarButtonSystemItemOrganize = 10;
alias UIBarButtonSystemItemBookmarks = 11;
alias UIBarButtonSystemItemSearch = 12;
alias UIBarButtonSystemItemRefresh = 13;
alias UIBarButtonSystemItemStop = 14;
alias UIBarButtonSystemItemCamera = 15;
alias UIBarButtonSystemItemTrash = 16;
alias UIBarButtonSystemItemPlay = 17;
alias UIBarButtonSystemItemPause = 18;
alias UIBarButtonSystemItemRewind = 19;
alias UIBarButtonSystemItemFastForward = 20;
alias UIBarButtonSystemItemUndo = 21;
alias UIBarButtonSystemItemRedo = 22;
alias UIBarButtonSystemItemPageCurl = 23;

alias UIBarButtonSystemItem = Int;

alias UIRectCornerTopLeft = 1;
alias UIRectCornerTopRight = 2;
alias UIRectCornerBottomLeft = 4;
alias UIRectCornerBottomRight = 8;
alias UIRectCornerAllCorners = 4294967295;

alias UIRectCorner = UInt;

alias UIButtonTypeCustom = 0;
alias UIButtonTypeRoundedRect = 1;
alias UIButtonTypeDetailDisclosure = 2;
alias UIButtonTypeInfoLight = 3;
alias UIButtonTypeInfoDark = 4;
alias UIButtonTypeContactAdd = 5;

alias UIButtonType = Int;

alias UIDataDetectorTypePhoneNumber = 1;
alias UIDataDetectorTypeLink = 2;
alias UIDataDetectorTypeAddress = 4;
alias UIDataDetectorTypeCalendarEvent = 8;
alias UIDataDetectorTypeNone = 0;
alias UIDataDetectorTypeAll = 4294967295;

alias UIDataDetectorTypes = UInt;

alias UIDatePickerModeTime = 0;
alias UIDatePickerModeDate = 1;
alias UIDatePickerModeDateAndTime = 2;
alias UIDatePickerModeCountDownTimer = 3;

alias UIDatePickerMode = Int;

alias UIModalTransitionStyleCoverVertical = 0;
alias UIModalTransitionStyleFlipHorizontal = 1;
alias UIModalTransitionStyleCrossDissolve = 2;
alias UIModalTransitionStylePartialCurl = 3;

alias UIModalTransitionStyle = Int;

alias UIModalPresentationFullScreen = 0;
alias UIModalPresentationPageSheet = 1;
alias UIModalPresentationFormSheet = 2;
alias UIModalPresentationCurrentContext = 3;

alias UIModalPresentationStyle = Int;

alias UIGestureRecognizerStatePossible = 0;
alias UIGestureRecognizerStateBegan = 1;
alias UIGestureRecognizerStateChanged = 2;
alias UIGestureRecognizerStateEnded = 3;
alias UIGestureRecognizerStateCancelled = 4;
alias UIGestureRecognizerStateFailed = 5;
alias UIGestureRecognizerStateRecognized = 3;

alias UIGestureRecognizerState = Int;

external UIGraphicsGetCurrentContext() : CGContextRef;

external UIGraphicsPushContext(
    context : CGContextRef);

external UIGraphicsPopContext();

external UIRectFillUsingBlendMode(
    rect : CGRect,
    blendMode : CGBlendMode);

external UIRectFill(
    rect : CGRect);

external UIRectFrameUsingBlendMode(
    rect : CGRect,
    blendMode : CGBlendMode);

external UIRectFrame(
    rect : CGRect);

external UIRectClip(
    rect : CGRect);

external UIGraphicsBeginImageContext(
    size : CGSize);

external UIGraphicsBeginImageContextWithOptions(
    size : CGSize,
    opaque : Bool,
    scale : Float);

external UIGraphicsGetImageFromCurrentImageContext() : UIImage;

external UIGraphicsEndImageContext();

external UIGraphicsBeginPDFContextToFile(
    path : NSString,
    bounds : CGRect,
    documentInfo : NSDictionary) : Bool;

external UIGraphicsBeginPDFContextToData(
    data : NSMutableData,
    bounds : CGRect,
    documentInfo : NSDictionary);

external UIGraphicsEndPDFContext();

external UIGraphicsBeginPDFPage();

external UIGraphicsBeginPDFPageWithInfo(
    bounds : CGRect,
    pageInfo : NSDictionary);

external UIGraphicsGetPDFContextBounds() : CGRect;

external UIGraphicsSetPDFContextURLForRect(
    url : NSURL,
    rect : CGRect);

external UIGraphicsAddPDFContextDestinationAtPoint(
    name : NSString,
    point : CGPoint);

external UIGraphicsSetPDFContextDestinationForRect(
    name : NSString,
    rect : CGRect);

alias UIImageOrientationUp = 0;
alias UIImageOrientationDown = 1;
alias UIImageOrientationLeft = 2;
alias UIImageOrientationRight = 3;
alias UIImageOrientationUpMirrored = 4;
alias UIImageOrientationDownMirrored = 5;
alias UIImageOrientationLeftMirrored = 6;
alias UIImageOrientationRightMirrored = 7;

alias UIImageOrientation = Int;

external UIImagePNGRepresentation(
    image : UIImage) : NSData;

external UIImageJPEGRepresentation(
    image : UIImage,
    compressionQuality : Float) : NSData;

external UINavigationControllerHideShowBarDuration : Float;

alias UIImagePickerControllerSourceTypePhotoLibrary = 0;
alias UIImagePickerControllerSourceTypeCamera = 1;
alias UIImagePickerControllerSourceTypeSavedPhotosAlbum = 2;

alias UIImagePickerControllerSourceType = UInt;

alias UIImagePickerControllerQualityTypeHigh = 0;
alias UIImagePickerControllerQualityType640x480 = 3;
alias UIImagePickerControllerQualityTypeMedium = 1;
alias UIImagePickerControllerQualityTypeLow = 2;

alias UIImagePickerControllerQualityType = UInt;

alias UIImagePickerControllerCameraCaptureModePhoto = 0;
alias UIImagePickerControllerCameraCaptureModeVideo = 1;

alias UIImagePickerControllerCameraCaptureMode = UInt;

alias UIImagePickerControllerCameraDeviceRear = 0;
alias UIImagePickerControllerCameraDeviceFront = 1;

alias UIImagePickerControllerCameraDevice = UInt;

alias UIImagePickerControllerCameraFlashModeOff = 4294967295;
alias UIImagePickerControllerCameraFlashModeAuto = 0;
alias UIImagePickerControllerCameraFlashModeOn = 1;

alias UIImagePickerControllerCameraFlashMode = Int;

external UIImagePickerControllerMediaType : NSString;

external UIImagePickerControllerOriginalImage : NSString;

external UIImagePickerControllerEditedImage : NSString;

external UIImagePickerControllerCropRect : NSString;

external UIImagePickerControllerMediaURL : NSString;

external UIImagePickerControllerReferenceURL : NSString;

external UIImagePickerControllerMediaMetadata : NSString;

external UIImageWriteToSavedPhotosAlbum(
    image : UIImage,
    completionTarget : Id,
    completionSelector : SelectorHandle,
    contextInfo : RawPointer);

external UIVideoAtPathIsCompatibleWithSavedPhotosAlbum(
    videoPath : NSString) : Bool;

external UISaveVideoAtPathToSavedPhotosAlbum(
    videoPath : NSString,
    completionTarget : Id,
    completionSelector : SelectorHandle,
    contextInfo : RawPointer);

external UILocalNotificationDefaultSoundName : NSString;

alias UIMenuControllerArrowDefault = 0;
alias UIMenuControllerArrowUp = 1;
alias UIMenuControllerArrowDown = 2;
alias UIMenuControllerArrowLeft = 3;
alias UIMenuControllerArrowRight = 4;

alias UIMenuControllerArrowDirection = Int;

external UIMenuControllerWillShowMenuNotification : NSString;

external UIMenuControllerDidShowMenuNotification : NSString;

external UIMenuControllerWillHideMenuNotification : NSString;

external UIMenuControllerDidHideMenuNotification : NSString;

external UIMenuControllerMenuFrameDidChangeNotification : NSString;

external UINibExternalObjects : NSString;

external UINibProxiedObjectsKey : NSString;

external UIPasteboardNameGeneral : NSString;

external UIPasteboardNameFind : NSString;

external UIPasteboardChangedNotification : NSString;

external UIPasteboardChangedTypesAddedKey : NSString;

external UIPasteboardChangedTypesRemovedKey : NSString;

external UIPasteboardRemovedNotification : NSString;

external UIPasteboardTypeListString : NSArray;

external UIPasteboardTypeListURL : NSArray;

external UIPasteboardTypeListImage : NSArray;

external UIPasteboardTypeListColor : NSArray;

alias UIPopoverArrowDirectionUp = 1;
alias UIPopoverArrowDirectionDown = 2;
alias UIPopoverArrowDirectionLeft = 4;
alias UIPopoverArrowDirectionRight = 8;
alias UIPopoverArrowDirectionAny = 15;
alias UIPopoverArrowDirectionUnknown = 4294967295;

alias UIPopoverArrowDirection = UInt;

alias UIProgressViewStyleDefault = 0;
alias UIProgressViewStyleBar = 1;

alias UIProgressViewStyle = Int;

external UIScreenDidConnectNotification : NSString;

external UIScreenDidDisconnectNotification : NSString;

external UIScreenModeDidChangeNotification : NSString;

alias UIScrollViewIndicatorStyleDefault = 0;
alias UIScrollViewIndicatorStyleBlack = 1;
alias UIScrollViewIndicatorStyleWhite = 2;

alias UIScrollViewIndicatorStyle = Int;

external UIScrollViewDecelerationRateNormal : Float;

external UIScrollViewDecelerationRateFast : Float;

alias UITableViewCellStyleDefault = 0;
alias UITableViewCellStyleValue1 = 1;
alias UITableViewCellStyleValue2 = 2;
alias UITableViewCellStyleSubtitle = 3;

alias UITableViewCellStyle = Int;

alias UITableViewCellSeparatorStyleNone = 0;
alias UITableViewCellSeparatorStyleSingleLine = 1;
alias UITableViewCellSeparatorStyleSingleLineEtched = 2;

alias UITableViewCellSeparatorStyle = Int;

alias UITableViewCellSelectionStyleNone = 0;
alias UITableViewCellSelectionStyleBlue = 1;
alias UITableViewCellSelectionStyleGray = 2;

alias UITableViewCellSelectionStyle = Int;

alias UITableViewCellEditingStyleNone = 0;
alias UITableViewCellEditingStyleDelete = 1;
alias UITableViewCellEditingStyleInsert = 2;

alias UITableViewCellEditingStyle = Int;

alias UITableViewCellAccessoryNone = 0;
alias UITableViewCellAccessoryDisclosureIndicator = 1;
alias UITableViewCellAccessoryDetailDisclosureButton = 2;
alias UITableViewCellAccessoryCheckmark = 3;

alias UITableViewCellAccessoryType = Int;

alias UITableViewCellStateDefaultMask = 0;
alias UITableViewCellStateShowingEditControlMask = 1;
alias UITableViewCellStateShowingDeleteConfirmationMask = 2;

alias UITableViewCellStateMask = UInt;

alias UITableViewStylePlain = 0;
alias UITableViewStyleGrouped = 1;

alias UITableViewStyle = Int;

alias UITableViewScrollPositionNone = 0;
alias UITableViewScrollPositionTop = 1;
alias UITableViewScrollPositionMiddle = 2;
alias UITableViewScrollPositionBottom = 3;

alias UITableViewScrollPosition = Int;

alias UITableViewRowAnimationFade = 0;
alias UITableViewRowAnimationRight = 1;
alias UITableViewRowAnimationLeft = 2;
alias UITableViewRowAnimationTop = 3;
alias UITableViewRowAnimationBottom = 4;
alias UITableViewRowAnimationNone = 5;
alias UITableViewRowAnimationMiddle = 6;

alias UITableViewRowAnimation = Int;

external UITableViewIndexSearch : NSString;

external UITableViewSelectionDidChangeNotification : NSString;

alias UISegmentedControlStylePlain = 0;
alias UISegmentedControlStyleBordered = 1;
alias UISegmentedControlStyleBar = 2;
alias UISegmentedControlStyleBezeled = 3;

alias UISegmentedControlStyle = Int;

alias UISegmentedControlNoSegment = 4294967295;

alias UISwipeGestureRecognizerDirectionRight = 1;
alias UISwipeGestureRecognizerDirectionLeft = 2;
alias UISwipeGestureRecognizerDirectionUp = 4;
alias UISwipeGestureRecognizerDirectionDown = 8;

alias UISwipeGestureRecognizerDirection = Int;

alias UITabBarSystemItemMore = 0;
alias UITabBarSystemItemFavorites = 1;
alias UITabBarSystemItemFeatured = 2;
alias UITabBarSystemItemTopRated = 3;
alias UITabBarSystemItemRecents = 4;
alias UITabBarSystemItemContacts = 5;
alias UITabBarSystemItemHistory = 6;
alias UITabBarSystemItemBookmarks = 7;
alias UITabBarSystemItemSearch = 8;
alias UITabBarSystemItemDownloads = 9;
alias UITabBarSystemItemMostRecent = 10;
alias UITabBarSystemItemMostViewed = 11;

alias UITabBarSystemItem = Int;

alias UITextStorageDirectionForward = 0;
alias UITextStorageDirectionBackward = 1;

alias UITextStorageDirection = Int;

alias UITextLayoutDirectionRight = 2;
alias UITextLayoutDirectionLeft = 3;
alias UITextLayoutDirectionUp = 4;
alias UITextLayoutDirectionDown = 5;

alias UITextLayoutDirection = Int;

alias UITextDirection = Int;

alias UITextWritingDirectionNatural = 4294967295;
alias UITextWritingDirectionLeftToRight = 0;
alias UITextWritingDirectionRightToLeft = 1;

alias UITextWritingDirection = Int;

alias UITextGranularityCharacter = 0;
alias UITextGranularityWord = 1;
alias UITextGranularitySentence = 2;
alias UITextGranularityParagraph = 3;
alias UITextGranularityLine = 4;
alias UITextGranularityDocument = 5;

alias UITextGranularity = Int;

external UITextInputTextBackgroundColorKey : NSString;

external UITextInputTextColorKey : NSString;

external UITextInputTextFontKey : NSString;

external UITextViewTextDidBeginEditingNotification : NSString;

external UITextViewTextDidChangeNotification : NSString;

external UITextViewTextDidEndEditingNotification : NSString;

alias UITouchPhaseBegan = 0;
alias UITouchPhaseMoved = 1;
alias UITouchPhaseStationary = 2;
alias UITouchPhaseEnded = 3;
alias UITouchPhaseCancelled = 4;

alias UITouchPhase = Int;

alias UIWebViewNavigationTypeLinkClicked = 0;
alias UIWebViewNavigationTypeFormSubmitted = 1;
alias UIWebViewNavigationTypeBackForward = 2;
alias UIWebViewNavigationTypeReload = 3;
alias UIWebViewNavigationTypeFormResubmitted = 4;
alias UIWebViewNavigationTypeOther = 5;

alias UIWebViewNavigationType = UInt;

alias UIWindowLevel = Float;

external UIWindowLevelNormal : Float;

external UIWindowLevelAlert : Float;

external UIWindowLevelStatusBar : Float;

external UIWindowDidBecomeVisibleNotification : NSString;

external UIWindowDidBecomeHiddenNotification : NSString;

external UIWindowDidBecomeKeyNotification : NSString;

external UIWindowDidResignKeyNotification : NSString;

external UIKeyboardWillShowNotification : NSString;

external UIKeyboardDidShowNotification : NSString;

external UIKeyboardWillHideNotification : NSString;

external UIKeyboardDidHideNotification : NSString;

external UIKeyboardFrameBeginUserInfoKey : NSString;

external UIKeyboardFrameEndUserInfoKey : NSString;

external UIKeyboardAnimationDurationUserInfoKey : NSString;

external UIKeyboardAnimationCurveUserInfoKey : NSString;

external UIKeyboardCenterBeginUserInfoKey : NSString;

external UIKeyboardCenterEndUserInfoKey : NSString;

external UIKeyboardBoundsUserInfoKey : NSString;
