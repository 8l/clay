// Automatically generated by clay-bindgen
// language: objective-c

import cocoa.objc.*;

import libc.*;
import cocoa.corefoundation.*;
import cocoa.applicationservices.*;
import cocoa.foundation.*;

private alias OpaquePointer = RawPointer;
private alias UnknownType = Int;
private alias AUnionType = Int;


overload selector("AMSymbol") = NSString;
overload selector("CATransform3DValue") = CATransform3D;
overload selector("DTD") = NSXMLDTD;
overload selector("DTDKind") = UInt;
overload selector("DTDNodeWithXMLString:") = Id, NSString;
overload selector("HTTPBody") = NSData;
overload selector("HTTPBodyStream") = NSInputStream;
overload selector("HTTPMethod") = NSString;
overload selector("HTTPShouldHandleCookies") = Bool;
overload selector("ISOCountryCodes") = NSArray;
overload selector("ISOCurrencyCodes") = NSArray;
overload selector("ISOLanguageCodes") = NSArray;
overload selector("MIMEType") = NSString;
overload selector("PMSymbol") = NSString;
overload selector("TXTRecordData") = NSData;
overload selector("URI") = NSString;
overload selector("URL") = NSURL;
overload selector("URL:resourceDataDidBecomeAvailable:") = Void, NSURL, NSData;
overload selector("URL:resourceDidFailLoadingWithReason:") = Void, NSURL, NSString;
overload selector("URLByAppendingPathComponent:") = NSURL, NSString;
overload selector("URLByAppendingPathExtension:") = NSURL, NSString;
overload selector("URLByDeletingLastPathComponent") = NSURL;
overload selector("URLByDeletingPathExtension") = NSURL;
overload selector("URLByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:") = Id, NSData, UInt, NSURL, Pointer[Bool], Pointer[NSError];
overload selector("URLByResolvingSymlinksInPath") = NSURL;
overload selector("URLByStandardizingPath") = NSURL;
overload selector("URLForAuxiliaryExecutable:") = NSURL, NSString;
overload selector("URLForDirectory:inDomain:appropriateForURL:create:error:") = NSURL, UInt, UInt, NSURL, Bool, Pointer[NSError];
overload selector("URLForKey:") = NSURL, NSString;
overload selector("URLForResource:withExtension:") = NSURL, NSString, NSString;
overload selector("URLForResource:withExtension:subdirectory:") = NSURL, NSString, NSString, NSString;
overload selector("URLForResource:withExtension:subdirectory:inBundleWithURL:") = NSURL, NSString, NSString, NSString, NSURL;
overload selector("URLForResource:withExtension:subdirectory:localization:") = NSURL, NSString, NSString, NSString, NSString;
overload selector("URLHandle:resourceDataDidBecomeAvailable:") = Void, NSURLHandle, NSData;
overload selector("URLHandle:resourceDidFailLoadingWithReason:") = Void, NSURLHandle, NSString;
overload selector("URLHandleClassForURL:") = Id, NSURL;
overload selector("URLHandleResourceDidBeginLoading:") = Void, NSURLHandle;
overload selector("URLHandleResourceDidCancelLoading:") = Void, NSURLHandle;
overload selector("URLHandleResourceDidFinishLoading:") = Void, NSURLHandle;
overload selector("URLHandleUsingCache:") = NSURLHandle, Bool;
overload selector("URLProtocol:cachedResponseIsValid:") = Void, NSURLProtocol, NSCachedURLResponse;
overload selector("URLProtocol:didCancelAuthenticationChallenge:") = Void, NSURLProtocol, NSURLAuthenticationChallenge;
overload selector("URLProtocol:didFailWithError:") = Void, NSURLProtocol, NSError;
overload selector("URLProtocol:didLoadData:") = Void, NSURLProtocol, NSData;
overload selector("URLProtocol:didReceiveAuthenticationChallenge:") = Void, NSURLProtocol, NSURLAuthenticationChallenge;
overload selector("URLProtocol:didReceiveResponse:cacheStoragePolicy:") = Void, NSURLProtocol, NSURLResponse, UInt;
overload selector("URLProtocol:wasRedirectedToRequest:redirectResponse:") = Void, NSURLProtocol, NSURLRequest, NSURLResponse;
overload selector("URLProtocolDidFinishLoading:") = Void, NSURLProtocol;
overload selector("URLResourceDidCancelLoading:") = Void, NSURL;
overload selector("URLResourceDidFinishLoading:") = Void, NSURL;
overload selector("URLWithString:") = Id, NSString;
overload selector("URLWithString:relativeToURL:") = Id, NSString, NSURL;
overload selector("URLsForDirectory:inDomains:") = NSArray, UInt, UInt;
overload selector("URLsForResourcesWithExtension:subdirectory:") = NSArray, NSString, NSString;
overload selector("URLsForResourcesWithExtension:subdirectory:inBundleWithURL:") = NSArray, NSString, NSString, NSURL;
overload selector("URLsForResourcesWithExtension:subdirectory:localization:") = NSArray, NSString, NSString, NSString;
overload selector("UTF8String") = Pointer[CChar];
overload selector("W") = Float;
overload selector("X") = Float;
overload selector("XMLData") = NSData;
overload selector("XMLDataWithOptions:") = NSData, UInt;
overload selector("XMLString") = NSString;
overload selector("XMLStringWithOptions:") = NSString, UInt;
overload selector("XPath") = NSString;
overload selector("Y") = Float;
overload selector("Z") = Float;
overload selector("abbreviation") = NSString;
overload selector("abbreviationDictionary") = NSDictionary;
overload selector("abbreviationForDate:") = NSString, NSDate;
overload selector("abortParsing") = Void;
overload selector("absoluteString") = NSString;
overload selector("absoluteURL") = NSURL;
overload selector("acceptConnectionInBackgroundAndNotify") = Void;
overload selector("acceptConnectionInBackgroundAndNotifyForModes:") = Void, NSArray;
overload selector("acceptInputForMode:beforeDate:") = Void, NSString, NSDate;
overload selector("accessInstanceVariablesDirectly") = Bool;
overload selector("acquireFunction") = CCodePointer[[RawPointer,CCodePointer[[RawPointer],[UInt]],CChar],[RawPointer]];
overload selector("actionForKey:") = Id, NSString;
overload selector("actionForLayer:forKey:") = Id, CALayer, NSString;
overload selector("actions") = NSDictionary;
overload selector("activeProcessorCount") = UInt;
overload selector("addAnimation:forKey:") = Void, CAAnimation, NSString;
overload selector("addAttribute:") = Void, NSXMLNode;
overload selector("addAttribute:value:range:") = Void, NSString, Id, NSRange;
overload selector("addAttributes:range:") = Void, NSDictionary, NSRange;
overload selector("addCharactersInRange:") = Void, NSRange;
overload selector("addCharactersInString:") = Void, NSString;
overload selector("addChild:") = Void, NSXMLNode;
overload selector("addClient:") = Void, Id;
overload selector("addConnection:toRunLoop:forMode:") = Void, NSConnection, NSRunLoop, NSString;
overload selector("addConstraint:") = Void, CAConstraint;
overload selector("addDependency:") = Void, NSOperation;
overload selector("addEntriesFromDictionary:") = Void, NSDictionary;
overload selector("addExecutionBlock:") = Void, UnknownType;
overload selector("addIndex:") = Void, UInt;
overload selector("addIndexes:") = Void, NSIndexSet;
overload selector("addIndexesInRange:") = Void, NSRange;
overload selector("addNamespace:") = Void, NSXMLNode;
overload selector("addObject:") = Void, Id;
overload selector("addObjectsFromArray:") = Void, NSArray;
overload selector("addObserver:forKeyPath:options:context:") = Void, NSObject, NSString, UInt, RawPointer;
overload selector("addObserver:selector:name:object:") = Void, Id, SelectorHandle, NSString, Id;
overload selector("addObserver:selector:name:object:suspensionBehavior:") = Void, Id, SelectorHandle, NSString, NSString, UInt;
overload selector("addObserver:toObjectsAtIndexes:forKeyPath:options:context:") = Void, NSObject, NSIndexSet, NSString, UInt, RawPointer;
overload selector("addObserverForName:object:queue:usingBlock:") = Id, NSString, Id, NSOperationQueue, UnknownType;
overload selector("addOperation:") = Void, NSOperation;
overload selector("addOperationWithBlock:") = Void, UnknownType;
overload selector("addOperations:waitUntilFinished:") = Void, NSArray, Bool;
overload selector("addPointer:") = Void, RawPointer;
overload selector("addPort:forMode:") = Void, NSPort, NSString;
overload selector("addRequestMode:") = Void, NSString;
overload selector("addRunLoop:") = Void, NSRunLoop;
overload selector("addSublayer:") = Void, CALayer;
overload selector("addSuiteNamed:") = Void, NSString;
overload selector("addTimeInterval:") = Id, Double;
overload selector("addTimer:forMode:") = Void, NSTimer, NSString;
overload selector("addUpdateRect:") = Void, CGRect;
overload selector("addValue:forHTTPHeaderField:") = Void, NSString, NSString;
overload selector("address") = Id;
overload selector("addressCheckingResultWithRange:components:") = NSTextCheckingResult, NSRange, NSDictionary;
overload selector("addressComponents") = NSDictionary;
overload selector("addresses") = NSArray;
overload selector("aeDesc") = Pointer[AEDesc];
overload selector("aeteResource:") = NSData, NSString;
overload selector("affineTransform") = CGAffineTransform;
overload selector("alignmentMode") = NSString;
overload selector("allBundles") = NSArray;
overload selector("allConnections") = NSArray;
overload selector("allCredentials") = NSDictionary;
overload selector("allFrameworks") = NSArray;
overload selector("allHTTPHeaderFields") = NSDictionary;
overload selector("allHeaderFields") = NSDictionary;
overload selector("allKeys") = NSArray;
overload selector("allKeysForObject:") = NSArray, Id;
overload selector("allLanguages") = NSArray;
overload selector("allObjects") = NSArray;
overload selector("allScripts") = NSArray;
overload selector("allValues") = NSArray;
overload selector("alloc") = Id;
overload selector("allocWithZone:") = Id, Pointer[NSZone];
overload selector("allowsFloats") = Bool;
overload selector("allowsKeyedCoding") = Bool;
overload selector("allowsNaturalLanguage") = Bool;
overload selector("allowsReverseTransformation") = Bool;
overload selector("alpha") = Float;
overload selector("alphaRange") = Float;
overload selector("alphaSpeed") = Float;
overload selector("alphanumericCharacterSet") = Id;
overload selector("alwaysShowsDecimalSeparator") = Bool;
overload selector("anchorPoint") = CGPoint;
overload selector("anchorPointZ") = Float;
overload selector("andPredicateWithSubpredicates:") = NSPredicate, NSArray;
overload selector("animation") = Id;
overload selector("animationDidStart:") = Void, CAAnimation;
overload selector("animationDidStop:finished:") = Void, CAAnimation, Bool;
overload selector("animationDuration") = Double;
overload selector("animationForKey:") = CAAnimation, NSString;
overload selector("animationKeys") = NSArray;
overload selector("animationTimingFunction") = CAMediaTimingFunction;
overload selector("animationWithKeyPath:") = Id, NSString;
overload selector("animations") = NSArray;
overload selector("anyObject") = Id;
overload selector("appendAttributedString:") = Void, NSAttributedString;
overload selector("appendBytes:length:") = Void, RawPointer, UInt;
overload selector("appendData:") = Void, NSData;
overload varargSelector("appendFormat:") = Void, NSString;
overload selector("appendString:") = Void, NSString;
overload selector("appendTransform:") = Void, NSAffineTransform;
overload selector("appleEvent") = NSAppleEventDescriptor;
overload selector("appleEventClassCode") = CULong;
overload selector("appleEventCode") = CULong;
overload selector("appleEventCodeForArgumentWithName:") = CULong, NSString;
overload selector("appleEventCodeForKey:") = CULong, NSString;
overload selector("appleEventCodeForReturnType") = CULong;
overload selector("appleEventCodeForSuite:") = CULong, NSString;
overload selector("appleEventForSuspensionID:") = NSAppleEventDescriptor, NSAppleEventManagerSuspensionID;
overload selector("appleEventWithEventClass:eventID:targetDescriptor:returnID:transactionID:") = NSAppleEventDescriptor, CULong, CULong, NSAppleEventDescriptor, Short, CLong;
overload varargSelector("apply:") = CIImage, CIKernel;
overload selector("apply:arguments:options:") = CIImage, CIKernel, NSArray, NSDictionary;
overload selector("archiveRootObject:toFile:") = Bool, Id, NSString;
overload selector("archivedDataWithRootObject:") = NSData, Id;
overload selector("archiver:didEncodeObject:") = Void, NSKeyedArchiver, Id;
overload selector("archiver:willEncodeObject:") = Id, NSKeyedArchiver, Id;
overload selector("archiver:willReplaceObject:withObject:") = Void, NSKeyedArchiver, Id, Id;
overload selector("archiverData") = NSMutableData;
overload selector("archiverDidFinish:") = Void, NSKeyedArchiver;
overload selector("archiverWillFinish:") = Void, NSKeyedArchiver;
overload selector("argumentNames") = NSArray;
overload selector("arguments") = Id;
overload selector("argumentsRetained") = Bool;
overload selector("array") = Id;
overload selector("arrayByAddingObject:") = NSArray, Id;
overload selector("arrayByAddingObjectsFromArray:") = NSArray, NSArray;
overload selector("arrayForKey:") = NSArray, NSString;
overload selector("arrayWithArray:") = Id, NSArray;
overload selector("arrayWithCapacity:") = Id, UInt;
overload selector("arrayWithContentsOfFile:") = Id, NSString;
overload selector("arrayWithContentsOfURL:") = Id, NSURL;
overload selector("arrayWithObject:") = Id, Id;
overload varargSelector("arrayWithObjects:") = Id, Id;
overload selector("arrayWithObjects:count:") = Id, Pointer[Id], UInt;
overload selector("ascending") = Bool;
overload selector("attemptRecoveryFromError:optionIndex:") = Bool, NSError, UInt;
overload selector("attemptRecoveryFromError:optionIndex:delegate:didRecoverSelector:contextInfo:") = Void, NSError, UInt, Id, SelectorHandle, RawPointer;
overload selector("attribute") = NSString;
overload selector("attribute:atIndex:effectiveRange:") = Id, NSString, UInt, NSRangePointer;
overload selector("attribute:atIndex:longestEffectiveRange:inRange:") = Id, NSString, UInt, NSRangePointer, NSRange;
overload selector("attributeDeclarationForName:elementName:") = NSXMLDTDNode, NSString, NSString;
overload selector("attributeDescriptorForKeyword:") = NSAppleEventDescriptor, CULong;
overload selector("attributeForLocalName:URI:") = NSXMLNode, NSString, NSString;
overload selector("attributeForName:") = NSXMLNode, NSString;
overload selector("attributeKeys") = NSArray;
overload selector("attributeWithName:URI:stringValue:") = Id, NSString, NSString, NSString;
overload selector("attributeWithName:stringValue:") = Id, NSString, NSString;
overload selector("attributedStringForNil") = NSAttributedString;
overload selector("attributedStringForNotANumber") = NSAttributedString;
overload selector("attributedStringForObjectValue:withDefaultAttributes:") = NSAttributedString, Id, NSDictionary;
overload selector("attributedStringForZero") = NSAttributedString;
overload selector("attributedSubstringFromRange:") = NSAttributedString, NSRange;
overload selector("attributes") = Id;
overload selector("attributesAtIndex:effectiveRange:") = NSDictionary, UInt, NSRangePointer;
overload selector("attributesAtIndex:longestEffectiveRange:inRange:") = NSDictionary, UInt, NSRangePointer, NSRange;
overload selector("attributesOfFileSystemForPath:error:") = NSDictionary, NSString, Pointer[NSError];
overload selector("attributesOfItemAtPath:error:") = NSDictionary, NSString, Pointer[NSError];
overload selector("authenticateComponents:withData:") = Bool, NSArray, NSData;
overload selector("authenticationDataForComponents:") = NSData, NSArray;
overload selector("authenticationMethod") = NSString;
overload selector("autoContentAccessingProxy") = Id;
overload selector("automaticallyNotifiesObserversForKey:") = Bool, NSString;
overload selector("autorelease") = Id;
overload selector("autoresizingMask") = UInt;
overload selector("autoreverses") = Bool;
overload selector("autoupdatingCurrentCalendar") = Id;
overload selector("autoupdatingCurrentLocale") = Id;
overload selector("availableData") = NSData;
overload selector("availableLocaleIdentifiers") = NSArray;
overload selector("availableResourceData") = NSData;
overload selector("availableStringEncodings") = Pointer[UInt];
overload selector("awakeAfterUsingCoder:") = Id, NSCoder;
overload selector("backgroundColor") = CGColorRef;
overload selector("backgroundFilters") = NSArray;
overload selector("backgroundLoadDidFailWithReason:") = Void, NSString;
overload selector("baseSpecifier") = NSScriptObjectSpecifier;
overload selector("baseURL") = NSURL;
overload selector("begin") = Void;
overload selector("beginContentAccess") = Bool;
overload selector("beginEditing") = Void;
overload selector("beginFrameAtTime:timeStamp:") = Void, Double, Pointer[CVTimeStamp];
overload selector("beginLoadInBackground") = Void;
overload selector("beginTime") = Double;
overload selector("beginUndoGrouping") = Void;
overload selector("birthRate") = Float;
overload selector("bitmapRepresentation") = NSData;
overload selector("blockOperationWithBlock:") = Id, UnknownType;
overload selector("blue") = Float;
overload selector("blueRange") = Float;
overload selector("blueSpeed") = Float;
overload selector("bookmarkDataWithContentsOfURL:error:") = NSData, NSURL, Pointer[NSError];
overload selector("bookmarkDataWithOptions:includingResourceValuesForKeys:relativeToURL:error:") = NSData, UInt, NSArray, NSURL, Pointer[NSError];
overload selector("boolForKey:") = Bool, NSString;
overload selector("boolValue") = Bool;
overload selector("booleanValue") = CUChar;
overload selector("borderColor") = CGColorRef;
overload selector("borderWidth") = Float;
overload selector("bounds") = CGRect;
overload selector("breakLock") = Void;
overload selector("broadcast") = Void;
overload selector("builtInPlugInsPath") = NSString;
overload selector("builtInPlugInsURL") = NSURL;
overload selector("bundleForClass:") = NSBundle, Id;
overload selector("bundleForSuite:") = NSBundle, NSString;
overload selector("bundleIdentifier") = NSString;
overload selector("bundlePath") = NSString;
overload selector("bundleURL") = NSURL;
overload selector("bundleWithIdentifier:") = NSBundle, NSString;
overload selector("bundleWithPath:") = NSBundle, NSString;
overload selector("bundleWithURL:") = NSBundle, NSURL;
overload selector("byValue") = Id;
overload selector("bytes") = RawPointer;
overload selector("cString") = Pointer[CChar];
overload selector("cStringLength") = UInt;
overload selector("cStringUsingEncoding:") = Pointer[CChar], UInt;
overload selector("cache:willEvictObject:") = Void, NSCache, Id;
overload selector("cachePolicy") = UInt;
overload selector("cachedHandleForURL:") = NSURLHandle, NSURL;
overload selector("cachedResponse") = NSCachedURLResponse;
overload selector("cachedResponseForRequest:") = NSCachedURLResponse, NSURLRequest;
overload selector("calculationMode") = NSString;
overload selector("calendar") = NSCalendar;
overload selector("calendarDate") = Id;
overload selector("calendarFormat") = NSString;
overload selector("calendarIdentifier") = NSString;
overload selector("callStackReturnAddresses") = NSArray;
overload selector("callStackSymbols") = NSArray;
overload selector("canBeConvertedToEncoding:") = Bool, UInt;
overload selector("canDrawInCGLContext:pixelFormat:forLayerTime:displayTime:") = Bool, CGLContextObj, CGLPixelFormatObj, Double, Pointer[CVTimeStamp];
overload selector("canHandleRequest:") = Bool, NSURLRequest;
overload selector("canInitWithRequest:") = Bool, NSURLRequest;
overload selector("canInitWithURL:") = Bool, NSURL;
overload selector("canRedo") = Bool;
overload selector("canResumeDownloadDecodedWithEncodingMIMEType:") = Bool, NSString;
overload selector("canUndo") = Bool;
overload selector("cancel") = Void;
overload selector("cancelAllOperations") = Void;
overload selector("cancelAuthenticationChallenge:") = Void, NSURLAuthenticationChallenge;
overload selector("cancelLoadInBackground") = Void;
overload selector("cancelPerformSelector:target:argument:") = Void, SelectorHandle, Id, Id;
overload selector("cancelPerformSelectorsWithTarget:") = Void, Id;
overload selector("cancelPreviousPerformRequestsWithTarget:") = Void, Id;
overload selector("cancelPreviousPerformRequestsWithTarget:selector:object:") = Void, Id, SelectorHandle, Id;
overload selector("canonicalLanguageIdentifierFromString:") = NSString, NSString;
overload selector("canonicalLocaleIdentifierFromString:") = NSString, NSString;
overload selector("canonicalRequestForRequest:") = NSURLRequest, NSURLRequest;
overload selector("canonicalXMLStringPreservingComments:") = NSString, Bool;
overload selector("capitalizedLetterCharacterSet") = Id;
overload selector("capitalizedString") = NSString;
overload selector("caseInsensitiveCompare:") = Int, NSString;
overload selector("caseSensitive") = Bool;
overload selector("certificates") = NSArray;
overload selector("changeCurrentDirectoryPath:") = Bool, NSString;
overload selector("changeFileAttributes:atPath:") = Bool, NSDictionary, NSString;
overload selector("charValue") = CChar;
overload selector("characterAtIndex:") = UShort, UInt;
overload selector("characterDirectionForLanguage:") = UInt, NSString;
overload selector("characterEncoding") = NSString;
overload selector("characterIsMember:") = Bool, UShort;
overload selector("characterSetWithBitmapRepresentation:") = Id, NSData;
overload selector("characterSetWithCharactersInString:") = Id, NSString;
overload selector("characterSetWithContentsOfFile:") = Id, NSString;
overload selector("characterSetWithRange:") = Id, NSRange;
overload selector("charactersToBeSkipped") = NSCharacterSet;
overload selector("checkResourceIsReachableAndReturnError:") = Bool, Pointer[NSError];
overload selector("childAtIndex:") = NSXMLNode, UInt;
overload selector("childCount") = UInt;
overload selector("childSpecifier") = NSScriptObjectSpecifier;
overload selector("children") = NSArray;
overload selector("class") = Id;
overload selector("classAttributes") = NSDictionary;
overload selector("classCode") = CULong;
overload selector("classDescription") = NSClassDescription;
overload selector("classDescriptionForClass:") = Id, Id;
overload selector("classDescriptionForKey:") = NSScriptClassDescription, NSString;
overload selector("classDescriptionWithAppleEventCode:") = NSScriptClassDescription, CULong;
overload selector("classDescriptionsInSuite:") = NSDictionary, NSString;
overload selector("classFallbacksForKeyedArchiver") = NSArray;
overload selector("classForArchiver") = Id;
overload selector("classForClassName:") = Id, NSString;
overload selector("classForCoder") = Id;
overload selector("classForKeyedArchiver") = Id;
overload selector("classForKeyedUnarchiver") = Id;
overload selector("classForPortCoder") = Id;
overload selector("className") = NSString;
overload selector("classNameDecodedForArchiveClassName:") = NSString, NSString;
overload selector("classNameEncodedForTrueClassName:") = NSString, NSString;
overload selector("classNameForClass:") = NSString, Id;
overload selector("classNamed:") = Id, NSString;
overload selector("clear") = Void;
overload selector("clearCaches") = Void;
overload selector("client") = Id;
overload selector("close") = Void;
overload selector("closeFile") = Void;
overload selector("code") = Int;
overload selector("coerceToDescriptorType:") = NSAppleEventDescriptor, CULong;
overload selector("coerceValue:forKey:") = Id, Id, NSString;
overload selector("coerceValue:toClass:") = Id, Id, Id;
overload selector("collectExhaustively") = Void;
overload selector("collectIfNeeded") = Void;
overload selector("collection") = Id;
overload selector("color") = CGColorRef;
overload selector("colorSpace") = CGColorSpaceRef;
overload selector("colorWithCGColor:") = CIColor, CGColorRef;
overload selector("colorWithRed:green:blue:") = CIColor, Float, Float, Float;
overload selector("colorWithRed:green:blue:alpha:") = CIColor, Float, Float, Float, Float;
overload selector("colorWithString:") = CIColor, NSString;
overload selector("colors") = NSArray;
overload selector("columnNumber") = Int;
overload selector("commandClassName") = NSString;
overload selector("commandDescription") = NSScriptCommandDescription;
overload selector("commandDescriptionWithAppleEventClass:andAppleEventCode:") = NSScriptCommandDescription, CULong, CULong;
overload selector("commandDescriptionsInSuite:") = NSDictionary, NSString;
overload selector("commandName") = NSString;
overload selector("comment") = NSString;
overload selector("commentURL") = NSURL;
overload selector("commentWithStringValue:") = Id, NSString;
overload selector("commit") = Void;
overload selector("commonISOCurrencyCodes") = NSArray;
overload selector("commonPrefixWithString:options:") = NSString, NSString, UInt;
overload selector("compact") = Void;
overload selector("comparator") = NSComparator;
overload selector("compare:") = Int, NSNumber;
overload selector("compare:options:") = Int, NSString, UInt;
overload selector("compare:options:range:") = Int, NSString, UInt, NSRange;
overload selector("compare:options:range:locale:") = Int, NSString, UInt, NSRange, Id;
overload selector("compareObject:toObject:") = Int, Id, Id;
overload selector("comparisonPredicateModifier") = UInt;
overload selector("compileAndReturnError:") = Bool, Pointer[NSDictionary];
overload selector("completePathIntoString:caseSensitive:matchesIntoArray:filterTypes:") = UInt, Pointer[NSString], Bool, Pointer[NSArray], NSArray;
overload selector("completionBlock") = UnknownType;
overload selector("components") = NSArray;
overload selector("components:fromDate:") = NSDateComponents, UInt, NSDate;
overload selector("components:fromDate:toDate:options:") = NSDateComponents, UInt, NSDate, NSDate, UInt;
overload selector("componentsFromLocaleIdentifier:") = NSDictionary, NSString;
overload selector("componentsJoinedByString:") = NSString, NSString;
overload selector("componentsSeparatedByCharactersInSet:") = NSArray, NSCharacterSet;
overload selector("componentsSeparatedByString:") = NSArray, NSString;
overload selector("componentsToDisplayForPath:") = NSArray, NSString;
overload selector("compositingFilter") = Id;
overload selector("compoundPredicateType") = UInt;
overload selector("condition") = Int;
overload selector("configureAsServer") = Void;
overload selector("conformsToProtocol:") = Bool, Id;
overload selector("connectObject:withKey:toObject:withKey:") = Void, Id, NSString, Id, NSString;
overload selector("connection") = NSConnection;
overload selector("connection:canAuthenticateAgainstProtectionSpace:") = Bool, NSURLConnection, NSURLProtectionSpace;
overload selector("connection:didCancelAuthenticationChallenge:") = Void, NSURLConnection, NSURLAuthenticationChallenge;
overload selector("connection:didFailWithError:") = Void, NSURLConnection, NSError;
overload selector("connection:didReceiveAuthenticationChallenge:") = Void, NSURLConnection, NSURLAuthenticationChallenge;
overload selector("connection:didReceiveData:") = Void, NSURLConnection, NSData;
overload selector("connection:didReceiveResponse:") = Void, NSURLConnection, NSURLResponse;
overload selector("connection:didSendBodyData:totalBytesWritten:totalBytesExpectedToWrite:") = Void, NSURLConnection, Int, Int, Int;
overload selector("connection:handleRequest:") = Bool, NSConnection, NSDistantObjectRequest;
overload selector("connection:needNewBodyStream:") = NSInputStream, NSURLConnection, NSURLRequest;
overload selector("connection:shouldMakeNewConnection:") = Bool, NSConnection, NSConnection;
overload selector("connection:willCacheResponse:") = NSCachedURLResponse, NSURLConnection, NSCachedURLResponse;
overload selector("connection:willSendRequest:redirectResponse:") = NSURLRequest, NSURLConnection, NSURLRequest, NSURLResponse;
overload selector("connectionDidFinishLoading:") = Void, NSURLConnection;
overload selector("connectionForProxy") = NSConnection;
overload selector("connectionShouldUseCredentialStorage:") = Bool, NSURLConnection;
overload selector("connectionWithReceivePort:sendPort:") = Id, NSPort, NSPort;
overload selector("connectionWithRegisteredName:host:") = Id, NSString, NSString;
overload selector("connectionWithRegisteredName:host:usingNameServer:") = Id, NSString, NSString, NSPortNameServer;
overload selector("connectionWithRequest:delegate:") = NSURLConnection, NSURLRequest, Id;
overload selector("constantValue") = Id;
overload selector("constraintWithAttribute:relativeTo:attribute:") = Id, Int, NSString, Int;
overload selector("constraintWithAttribute:relativeTo:attribute:offset:") = Id, Int, NSString, Int, Float;
overload selector("constraintWithAttribute:relativeTo:attribute:scale:offset:") = Id, Int, NSString, Int, Float, Float;
overload selector("constraints") = NSArray;
overload selector("containerClassDescription") = NSScriptClassDescription;
overload selector("containerIsObjectBeingTested") = Bool;
overload selector("containerIsRangeContainerObject") = Bool;
overload selector("containerSpecifier") = NSScriptObjectSpecifier;
overload selector("containsIndex:") = Bool, UInt;
overload selector("containsIndexes:") = Bool, NSIndexSet;
overload selector("containsIndexesInRange:") = Bool, NSRange;
overload selector("containsObject:") = Bool, Id;
overload selector("containsPoint:") = Bool, CGPoint;
overload selector("containsValueForKey:") = Bool, NSString;
overload selector("contents") = Id;
overload selector("contentsAreFlipped") = Bool;
overload selector("contentsAtPath:") = NSData, NSString;
overload selector("contentsCenter") = CGRect;
overload selector("contentsEqualAtPath:andPath:") = Bool, NSString, NSString;
overload selector("contentsGravity") = NSString;
overload selector("contentsOfDirectoryAtPath:error:") = NSArray, NSString, Pointer[NSError];
overload selector("contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:") = NSArray, NSURL, NSArray, UInt, Pointer[NSError];
overload selector("contentsRect") = CGRect;
overload selector("contextWithCGContext:options:") = CIContext, CGContextRef, NSDictionary;
overload selector("contextWithCGLContext:pixelFormat:colorSpace:options:") = CIContext, CGLContextObj, CGLPixelFormatObj, CGColorSpaceRef, NSDictionary;
overload selector("contextWithCGLContext:pixelFormat:options:") = CIContext, CGLContextObj, CGLPixelFormatObj, NSDictionary;
overload selector("continueWithoutCredentialForAuthenticationChallenge:") = Void, NSURLAuthenticationChallenge;
overload selector("controlCharacterSet") = Id;
overload selector("conversation") = Id;
overload selector("convertPoint:fromLayer:") = CGPoint, CGPoint, CALayer;
overload selector("convertPoint:toLayer:") = CGPoint, CGPoint, CALayer;
overload selector("convertRect:fromLayer:") = CGRect, CGRect, CALayer;
overload selector("convertRect:toLayer:") = CGRect, CGRect, CALayer;
overload selector("convertTime:fromLayer:") = Double, Double, CALayer;
overload selector("convertTime:toLayer:") = Double, Double, CALayer;
overload selector("cookieAcceptPolicy") = UInt;
overload selector("cookieWithProperties:") = Id, NSDictionary;
overload selector("cookies") = NSArray;
overload selector("cookiesForURL:") = NSArray, NSURL;
overload selector("cookiesWithResponseHeaderFields:forURL:") = NSArray, NSDictionary, NSURL;
overload selector("copy") = Id;
overload selector("copyCGLContextForPixelFormat:") = CGLContextObj, CGLPixelFormatObj;
overload selector("copyCGLPixelFormatForDisplayMask:") = CGLPixelFormatObj, UInt;
overload selector("copyItemAtPath:toPath:error:") = Bool, NSString, NSString, Pointer[NSError];
overload selector("copyItemAtURL:toURL:error:") = Bool, NSURL, NSURL, Pointer[NSError];
overload selector("copyPath:toPath:handler:") = Bool, NSString, NSString, Id;
overload selector("copyScriptingValue:forKey:withProperties:") = Id, Id, NSString, NSDictionary;
overload selector("copyWithZone:") = Id, Pointer[NSZone];
overload selector("cornerRadius") = Float;
overload selector("correctionCheckingResultWithRange:replacementString:") = NSTextCheckingResult, NSRange, NSString;
overload selector("count") = UInt;
overload selector("countByEnumeratingWithState:objects:count:") = UInt, Pointer[NSFastEnumerationState], Pointer[Id], UInt;
overload selector("countForObject:") = UInt, Id;
overload selector("countLimit") = UInt;
overload selector("countOfIndexesInRange:") = UInt, NSRange;
overload selector("createCGImage:fromRect:") = CGImageRef, CIImage, CGRect;
overload selector("createCGImage:fromRect:format:colorSpace:") = CGImageRef, CIImage, CGRect, Int, CGColorSpaceRef;
overload selector("createCGLayerWithSize:info:") = CGLayerRef, CGSize, CFDictionaryRef;
overload selector("createClassDescription") = NSScriptClassDescription;
overload selector("createCommandInstance") = NSScriptCommand;
overload selector("createCommandInstanceWithZone:") = NSScriptCommand, Pointer[NSZone];
overload selector("createConversationForConnection:") = Id, NSConnection;
overload selector("createDirectoryAtPath:attributes:") = Bool, NSString, NSDictionary;
overload selector("createDirectoryAtPath:withIntermediateDirectories:attributes:error:") = Bool, NSString, Bool, NSDictionary, Pointer[NSError];
overload selector("createFileAtPath:contents:attributes:") = Bool, NSString, NSData, NSDictionary;
overload selector("createSymbolicLinkAtPath:pathContent:") = Bool, NSString, NSString;
overload selector("createSymbolicLinkAtPath:withDestinationPath:error:") = Bool, NSString, NSString, Pointer[NSError];
overload selector("credentialForTrust:") = NSURLCredential, SecTrustRef;
overload selector("credentialWithIdentity:certificates:persistence:") = NSURLCredential, SecIdentityRef, NSArray, UInt;
overload selector("credentialWithUser:password:persistence:") = NSURLCredential, NSString, NSString, UInt;
overload selector("credentialsForProtectionSpace:") = NSDictionary, NSURLProtectionSpace;
overload selector("currencyCode") = NSString;
overload selector("currencyDecimalSeparator") = NSString;
overload selector("currencyGroupingSeparator") = NSString;
overload selector("currencySymbol") = NSString;
overload selector("currentAppleEvent") = NSAppleEventDescriptor;
overload selector("currentCalendar") = Id;
overload selector("currentCommand") = NSScriptCommand;
overload selector("currentConversation") = Id;
overload selector("currentDirectoryPath") = NSString;
overload selector("currentDiskUsage") = UInt;
overload selector("currentHandler") = NSAssertionHandler;
overload selector("currentHost") = NSHost;
overload selector("currentLocale") = Id;
overload selector("currentMemoryUsage") = UInt;
overload selector("currentMode") = NSString;
overload selector("currentQueue") = Id;
overload selector("currentReplyAppleEvent") = NSAppleEventDescriptor;
overload selector("currentRunLoop") = NSRunLoop;
overload selector("currentThread") = NSThread;
overload selector("customSelector") = SelectorHandle;
overload selector("dashCheckingResultWithRange:replacementString:") = NSTextCheckingResult, NSRange, NSString;
overload selector("data") = Id;
overload selector("dataForKey:") = NSData, NSString;
overload selector("dataFromPropertyList:format:errorDescription:") = NSData, Id, UInt, Pointer[NSString];
overload selector("dataFromTXTRecordDictionary:") = NSData, NSDictionary;
overload selector("dataUsingEncoding:") = NSData, UInt;
overload selector("dataUsingEncoding:allowLossyConversion:") = NSData, UInt, Bool;
overload selector("dataWithBytes:length:") = Id, RawPointer, UInt;
overload selector("dataWithBytesNoCopy:length:") = Id, RawPointer, UInt;
overload selector("dataWithBytesNoCopy:length:freeWhenDone:") = Id, RawPointer, UInt, Bool;
overload selector("dataWithCapacity:") = Id, UInt;
overload selector("dataWithContentsOfFile:") = Id, NSString;
overload selector("dataWithContentsOfFile:options:error:") = Id, NSString, UInt, Pointer[NSError];
overload selector("dataWithContentsOfMappedFile:") = Id, NSString;
overload selector("dataWithContentsOfURL:") = Id, NSURL;
overload selector("dataWithContentsOfURL:options:error:") = Id, NSURL, UInt, Pointer[NSError];
overload selector("dataWithData:") = Id, NSData;
overload selector("dataWithLength:") = Id, UInt;
overload selector("dataWithPropertyList:format:options:error:") = NSData, Id, UInt, UInt, Pointer[NSError];
overload selector("date") = Id;
overload selector("dateByAddingComponents:toDate:options:") = NSDate, NSDateComponents, NSDate, UInt;
overload selector("dateByAddingTimeInterval:") = Id, Double;
overload selector("dateByAddingYears:months:days:hours:minutes:seconds:") = NSCalendarDate, Int, Int, Int, Int, Int, Int;
overload selector("dateCheckingResultWithRange:date:") = NSTextCheckingResult, NSRange, NSDate;
overload selector("dateCheckingResultWithRange:date:timeZone:duration:") = NSTextCheckingResult, NSRange, NSDate, NSTimeZone, Double;
overload selector("dateFormat") = NSString;
overload selector("dateFormatFromTemplate:options:locale:") = NSString, NSString, UInt, NSLocale;
overload selector("dateFromComponents:") = NSDate, NSDateComponents;
overload selector("dateFromString:") = NSDate, NSString;
overload selector("dateStyle") = UInt;
overload selector("dateWithCalendarFormat:timeZone:") = NSCalendarDate, NSString, NSTimeZone;
overload selector("dateWithNaturalLanguageString:") = Id, NSString;
overload selector("dateWithNaturalLanguageString:locale:") = Id, NSString, Id;
overload selector("dateWithString:") = Id, NSString;
overload selector("dateWithString:calendarFormat:") = Id, NSString, NSString;
overload selector("dateWithString:calendarFormat:locale:") = Id, NSString, NSString, Id;
overload selector("dateWithTimeInterval:sinceDate:") = Id, Double, NSDate;
overload selector("dateWithTimeIntervalSince1970:") = Id, Double;
overload selector("dateWithTimeIntervalSinceNow:") = Id, Double;
overload selector("dateWithTimeIntervalSinceReferenceDate:") = Id, Double;
overload selector("dateWithYear:month:day:hour:minute:second:timeZone:") = Id, Int, UInt, UInt, UInt, UInt, UInt, NSTimeZone;
overload selector("day") = Int;
overload selector("dayOfCommonEra") = Int;
overload selector("dayOfMonth") = Int;
overload selector("dayOfWeek") = Int;
overload selector("dayOfYear") = Int;
overload selector("daylightSavingTimeOffset") = Double;
overload selector("daylightSavingTimeOffsetForDate:") = Double, NSDate;
overload selector("dealloc") = Void;
overload selector("decimalDigitCharacterSet") = Id;
overload selector("decimalNumberByAdding:") = NSDecimalNumber, NSDecimalNumber;
overload selector("decimalNumberByAdding:withBehavior:") = NSDecimalNumber, NSDecimalNumber, Id;
overload selector("decimalNumberByDividingBy:") = NSDecimalNumber, NSDecimalNumber;
overload selector("decimalNumberByDividingBy:withBehavior:") = NSDecimalNumber, NSDecimalNumber, Id;
overload selector("decimalNumberByMultiplyingBy:") = NSDecimalNumber, NSDecimalNumber;
overload selector("decimalNumberByMultiplyingBy:withBehavior:") = NSDecimalNumber, NSDecimalNumber, Id;
overload selector("decimalNumberByMultiplyingByPowerOf10:") = NSDecimalNumber, Short;
overload selector("decimalNumberByMultiplyingByPowerOf10:withBehavior:") = NSDecimalNumber, Short, Id;
overload selector("decimalNumberByRaisingToPower:") = NSDecimalNumber, UInt;
overload selector("decimalNumberByRaisingToPower:withBehavior:") = NSDecimalNumber, UInt, Id;
overload selector("decimalNumberByRoundingAccordingToBehavior:") = NSDecimalNumber, Id;
overload selector("decimalNumberBySubtracting:") = NSDecimalNumber, NSDecimalNumber;
overload selector("decimalNumberBySubtracting:withBehavior:") = NSDecimalNumber, NSDecimalNumber, Id;
overload selector("decimalNumberHandlerWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:") = Id, UInt, Short, Bool, Bool, Bool, Bool;
overload selector("decimalNumberWithDecimal:") = NSDecimalNumber, NSDecimal;
overload selector("decimalNumberWithMantissa:exponent:isNegative:") = NSDecimalNumber, UInt64, Short, Bool;
overload selector("decimalNumberWithString:") = NSDecimalNumber, NSString;
overload selector("decimalNumberWithString:locale:") = NSDecimalNumber, NSString, Id;
overload selector("decimalSeparator") = NSString;
overload selector("decimalValue") = NSDecimal;
overload selector("decodeArrayOfObjCType:count:at:") = Void, Pointer[CChar], UInt, RawPointer;
overload selector("decodeBoolForKey:") = Bool, NSString;
overload selector("decodeBytesForKey:returnedLength:") = Pointer[CUChar], NSString, Pointer[UInt];
overload selector("decodeBytesWithReturnedLength:") = RawPointer, Pointer[UInt];
overload selector("decodeClassName:asClassName:") = Void, NSString, NSString;
overload selector("decodeDataObject") = NSData;
overload selector("decodeDoubleForKey:") = Double, NSString;
overload selector("decodeFloatForKey:") = Float, NSString;
overload selector("decodeInt32ForKey:") = Int, NSString;
overload selector("decodeInt64ForKey:") = Int64, NSString;
overload selector("decodeIntForKey:") = Int, NSString;
overload selector("decodeIntegerForKey:") = Int, NSString;
overload selector("decodeNXObject") = Id;
overload selector("decodeObject") = Id;
overload selector("decodeObjectForKey:") = Id, NSString;
overload selector("decodePoint") = NSPoint;
overload selector("decodePointForKey:") = NSPoint, NSString;
overload selector("decodePortObject") = NSPort;
overload selector("decodePropertyList") = Id;
overload selector("decodeRect") = NSRect;
overload selector("decodeRectForKey:") = NSRect, NSString;
overload selector("decodeSize") = NSSize;
overload selector("decodeSizeForKey:") = NSSize, NSString;
overload selector("decodeValueOfObjCType:at:") = Void, Pointer[CChar], RawPointer;
overload varargSelector("decodeValuesOfObjCTypes:") = Void, Pointer[CChar];
overload selector("decomposableCharacterSet") = Id;
overload selector("decomposedStringWithCanonicalMapping") = NSString;
overload selector("decomposedStringWithCompatibilityMapping") = NSString;
overload selector("defaultActionForKey:") = Id, NSString;
overload selector("defaultBehavior") = Id;
overload selector("defaultCStringEncoding") = UInt;
overload selector("defaultCenter") = Id;
overload selector("defaultCollector") = Id;
overload selector("defaultConnection") = NSConnection;
overload selector("defaultCredentialForProtectionSpace:") = NSURLCredential, NSURLProtectionSpace;
overload selector("defaultDate") = NSDate;
overload selector("defaultDecimalNumberHandler") = Id;
overload selector("defaultFormatterBehavior") = UInt;
overload selector("defaultManager") = NSFileManager;
overload selector("defaultNameServerPortNumber") = UShort;
overload selector("defaultQueue") = Id;
overload selector("defaultSubcontainerAttributeKey") = NSString;
overload selector("defaultTimeZone") = NSTimeZone;
overload selector("defaultValueForKey:") = Id, NSString;
overload selector("definition") = CIFilterShape;
overload selector("delegate") = Id;
overload selector("deleteCharactersInRange:") = Void, NSRange;
overload selector("deleteCookie:") = Void, NSHTTPCookie;
overload selector("deletesFileUponFailure") = Bool;
overload selector("dependencies") = NSArray;
overload selector("dequeueNotificationsMatching:coalesceMask:") = Void, NSNotification, UInt;
overload selector("description") = NSString;
overload selector("descriptionFunction") = CCodePointer[[RawPointer],[NSString]];
overload selector("descriptionInStringsFileFormat") = NSString;
overload selector("descriptionWithCalendarFormat:") = NSString, NSString;
overload selector("descriptionWithCalendarFormat:locale:") = NSString, NSString, Id;
overload selector("descriptionWithCalendarFormat:timeZone:locale:") = NSString, NSString, NSTimeZone, Id;
overload selector("descriptionWithLocale:") = NSString, Id;
overload selector("descriptionWithLocale:indent:") = NSString, Id, UInt;
overload selector("descriptor") = NSAppleEventDescriptor;
overload selector("descriptorAtIndex:") = NSAppleEventDescriptor, Int;
overload selector("descriptorForKeyword:") = NSAppleEventDescriptor, CULong;
overload selector("descriptorType") = CULong;
overload selector("descriptorWithBoolean:") = NSAppleEventDescriptor, CUChar;
overload selector("descriptorWithDescriptorType:bytes:length:") = NSAppleEventDescriptor, CULong, RawPointer, UInt;
overload selector("descriptorWithDescriptorType:data:") = NSAppleEventDescriptor, CULong, NSData;
overload selector("descriptorWithEnumCode:") = NSAppleEventDescriptor, CULong;
overload selector("descriptorWithInt32:") = NSAppleEventDescriptor, CLong;
overload selector("descriptorWithString:") = NSAppleEventDescriptor, NSString;
overload selector("descriptorWithTypeCode:") = NSAppleEventDescriptor, CULong;
overload selector("destinationOfSymbolicLinkAtPath:error:") = NSString, NSString, Pointer[NSError];
overload selector("detach") = Void;
overload selector("detachNewThreadSelector:toTarget:withObject:") = Void, SelectorHandle, Id, Id;
overload selector("developmentLocalization") = NSString;
overload selector("dictionary") = Id;
overload selector("dictionaryForKey:") = NSDictionary, NSString;
overload selector("dictionaryFromTXTRecordData:") = NSDictionary, NSData;
overload selector("dictionaryRepresentation") = NSDictionary;
overload selector("dictionaryWithCapacity:") = Id, UInt;
overload selector("dictionaryWithContentsOfFile:") = Id, NSString;
overload selector("dictionaryWithContentsOfURL:") = Id, NSURL;
overload selector("dictionaryWithDictionary:") = Id, NSDictionary;
overload selector("dictionaryWithObject:forKey:") = Id, Id, Id;
overload selector("dictionaryWithObjects:forKeys:") = Id, NSArray, NSArray;
overload selector("dictionaryWithObjects:forKeys:count:") = Id, Pointer[Id], Pointer[Id], UInt;
overload varargSelector("dictionaryWithObjectsAndKeys:") = Id, Id;
overload selector("dictionaryWithValuesForKeys:") = NSDictionary, NSArray;
overload selector("didChange:valuesAtIndexes:forKey:") = Void, UInt, NSIndexSet, NSString;
overload selector("didChangeValueForKey:") = Void, NSString;
overload selector("didChangeValueForKey:withSetMutation:usingObjects:") = Void, NSString, UInt, NSSet;
overload selector("didLoadBytes:loadComplete:") = Void, NSData, Bool;
overload selector("directParameter") = Id;
overload selector("directoryAttributes") = NSDictionary;
overload selector("directoryContentsAtPath:") = NSArray, NSString;
overload selector("disable") = Void;
overload selector("disableActions") = Bool;
overload selector("disableCollectorForPointer:") = Void, RawPointer;
overload selector("disableSuddenTermination") = Void;
overload selector("disableUndoRegistration") = Void;
overload selector("disableUpdates") = Void;
overload selector("discardContentIfPossible") = Void;
overload selector("disconnectObject:withKey:toObject:withKey:") = Void, Id, NSString, Id, NSString;
overload selector("diskCapacity") = UInt;
overload selector("dispatch") = Void;
overload selector("dispatchRawAppleEvent:withRawReply:handlerRefCon:") = Short, Pointer[AppleEvent], Pointer[AppleEvent], CLong;
overload selector("display") = Void;
overload selector("displayIfNeeded") = Void;
overload selector("displayLayer:") = Void, CALayer;
overload selector("displayNameAtPath:") = NSString, NSString;
overload selector("displayNameForKey:value:") = NSString, Id, Id;
overload selector("distantFuture") = Id;
overload selector("distantPast") = Id;
overload selector("distinguishedNames") = NSArray;
overload selector("document") = Id;
overload selector("documentContentKind") = UInt;
overload selector("documentWithRootElement:") = Id, NSXMLElement;
overload selector("doesContain:") = Bool, Id;
overload selector("doesNotRecognizeSelector:") = Void, SelectorHandle;
overload selector("doesRelativeDateFormatting") = Bool;
overload selector("domain") = NSString;
overload selector("dominantLanguage") = NSString;
overload selector("dominantLanguageForScript:") = NSString, NSString;
overload selector("dominantScript") = NSString;
overload selector("doubleForKey:") = Double, NSString;
overload selector("doubleValue") = Double;
overload selector("download:canAuthenticateAgainstProtectionSpace:") = Bool, NSURLDownload, NSURLProtectionSpace;
overload selector("download:decideDestinationWithSuggestedFilename:") = Void, NSURLDownload, NSString;
overload selector("download:didCancelAuthenticationChallenge:") = Void, NSURLDownload, NSURLAuthenticationChallenge;
overload selector("download:didCreateDestination:") = Void, NSURLDownload, NSString;
overload selector("download:didFailWithError:") = Void, NSURLDownload, NSError;
overload selector("download:didReceiveAuthenticationChallenge:") = Void, NSURLDownload, NSURLAuthenticationChallenge;
overload selector("download:didReceiveDataOfLength:") = Void, NSURLDownload, UInt;
overload selector("download:didReceiveResponse:") = Void, NSURLDownload, NSURLResponse;
overload selector("download:shouldDecodeSourceDataOfMIMEType:") = Bool, NSURLDownload, NSString;
overload selector("download:willResumeWithResponse:fromByte:") = Void, NSURLDownload, NSURLResponse, Int64;
overload selector("download:willSendRequest:redirectResponse:") = NSURLRequest, NSURLDownload, NSURLRequest, NSURLResponse;
overload selector("downloadDidBegin:") = Void, NSURLDownload;
overload selector("downloadDidFinish:") = Void, NSURLDownload;
overload selector("downloadShouldUseCredentialStorage:") = Bool, NSURLDownload;
overload selector("drain") = Void;
overload selector("drawImage:atPoint:fromRect:") = Void, CIImage, CGPoint, CGRect;
overload selector("drawImage:inRect:fromRect:") = Void, CIImage, CGRect, CGRect;
overload selector("drawInCGLContext:pixelFormat:forLayerTime:displayTime:") = Void, CGLContextObj, CGLPixelFormatObj, Double, Pointer[CVTimeStamp];
overload selector("drawInContext:") = Void, CGContextRef;
overload selector("drawLayer:inContext:") = Void, CALayer, CGContextRef;
overload selector("duration") = Double;
overload selector("earlierDate:") = NSDate, NSDate;
overload selector("edgeAntialiasingMask") = UInt;
overload selector("editingStringForObjectValue:") = NSString, Id;
overload selector("elementDeclarationForName:") = NSXMLDTDNode, NSString;
overload selector("elementWithName:") = Id, NSString;
overload selector("elementWithName:URI:") = Id, NSString, NSString;
overload selector("elementWithName:children:attributes:") = Id, NSString, NSArray, NSArray;
overload selector("elementWithName:stringValue:") = Id, NSString, NSString;
overload selector("elementsForLocalName:URI:") = NSArray, NSString, NSString;
overload selector("elementsForName:") = NSArray, NSString;
overload selector("emissionLatitude") = Float;
overload selector("emissionLongitude") = Float;
overload selector("emissionRange") = Float;
overload selector("emitterCell") = Id;
overload selector("emitterCells") = NSArray;
overload selector("emitterDepth") = Float;
overload selector("emitterMode") = NSString;
overload selector("emitterPosition") = CGPoint;
overload selector("emitterShape") = NSString;
overload selector("emitterSize") = CGSize;
overload selector("emitterZPosition") = Float;
overload selector("emptyImage") = CIImage;
overload selector("enable") = Void;
overload selector("enableCollectorForPointer:") = Void, RawPointer;
overload selector("enableMultipleThreads") = Void;
overload selector("enableSuddenTermination") = Void;
overload selector("enableUndoRegistration") = Void;
overload selector("enableUpdates") = Void;
overload selector("encodeArrayOfObjCType:count:at:") = Void, Pointer[CChar], UInt, RawPointer;
overload selector("encodeBool:forKey:") = Void, Bool, NSString;
overload selector("encodeBycopyObject:") = Void, Id;
overload selector("encodeByrefObject:") = Void, Id;
overload selector("encodeBytes:length:") = Void, RawPointer, UInt;
overload selector("encodeBytes:length:forKey:") = Void, Pointer[CUChar], UInt, NSString;
overload selector("encodeClassName:intoClassName:") = Void, NSString, NSString;
overload selector("encodeConditionalObject:") = Void, Id;
overload selector("encodeConditionalObject:forKey:") = Void, Id, NSString;
overload selector("encodeDataObject:") = Void, NSData;
overload selector("encodeDouble:forKey:") = Void, Double, NSString;
overload selector("encodeFloat:forKey:") = Void, Float, NSString;
overload selector("encodeInt32:forKey:") = Void, Int, NSString;
overload selector("encodeInt64:forKey:") = Void, Int64, NSString;
overload selector("encodeInt:forKey:") = Void, Int, NSString;
overload selector("encodeInteger:forKey:") = Void, Int, NSString;
overload selector("encodeNXObject:") = Void, Id;
overload selector("encodeObject:") = Void, Id;
overload selector("encodeObject:forKey:") = Void, Id, NSString;
overload selector("encodePoint:") = Void, NSPoint;
overload selector("encodePoint:forKey:") = Void, NSPoint, NSString;
overload selector("encodePortObject:") = Void, NSPort;
overload selector("encodePropertyList:") = Void, Id;
overload selector("encodeRect:") = Void, NSRect;
overload selector("encodeRect:forKey:") = Void, NSRect, NSString;
overload selector("encodeRootObject:") = Void, Id;
overload selector("encodeSize:") = Void, NSSize;
overload selector("encodeSize:forKey:") = Void, NSSize, NSString;
overload selector("encodeValueOfObjCType:at:") = Void, Pointer[CChar], RawPointer;
overload varargSelector("encodeValuesOfObjCTypes:") = Void, Pointer[CChar];
overload selector("encodeWithCoder:") = Void, NSCoder;
overload selector("endContentAccess") = Void;
overload selector("endEditing") = Void;
overload selector("endFrame") = Void;
overload selector("endLoadInBackground") = Void;
overload selector("endPoint") = CGPoint;
overload selector("endProgress") = Float;
overload selector("endSpecifier") = NSScriptObjectSpecifier;
overload selector("endSubelementIdentifier") = UInt;
overload selector("endSubelementIndex") = Int;
overload selector("endUndoGrouping") = Void;
overload selector("enqueueNotification:postingStyle:") = Void, NSNotification, UInt;
overload selector("enqueueNotification:postingStyle:coalesceMask:forModes:") = Void, NSNotification, UInt, UInt, NSArray;
overload selector("entityDeclarationForName:") = NSXMLDTDNode, NSString;
overload selector("enumCodeValue") = CULong;
overload selector("enumerateAttribute:inRange:options:usingBlock:") = Void, NSString, NSRange, UInt, UnknownType;
overload selector("enumerateAttributesInRange:options:usingBlock:") = Void, NSRange, UInt, UnknownType;
overload selector("enumerateIndexesInRange:options:usingBlock:") = Void, NSRange, UInt, UnknownType;
overload selector("enumerateIndexesUsingBlock:") = Void, UnknownType;
overload selector("enumerateIndexesWithOptions:usingBlock:") = Void, UInt, UnknownType;
overload selector("enumerateKeysAndObjectsUsingBlock:") = Void, UnknownType;
overload selector("enumerateKeysAndObjectsWithOptions:usingBlock:") = Void, UInt, UnknownType;
overload selector("enumerateLinesUsingBlock:") = Void, UnknownType;
overload selector("enumerateObjectsAtIndexes:options:usingBlock:") = Void, NSIndexSet, UInt, UnknownType;
overload selector("enumerateObjectsUsingBlock:") = Void, UnknownType;
overload selector("enumerateObjectsWithOptions:usingBlock:") = Void, UInt, UnknownType;
overload selector("enumerateSubstringsInRange:options:usingBlock:") = Void, NSRange, UInt, UnknownType;
overload selector("enumeratorAtPath:") = NSDirectoryEnumerator, NSString;
overload selector("enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:") = NSDirectoryEnumerator, NSURL, NSArray, UInt, UnknownType;
overload selector("environment") = NSDictionary;
overload selector("era") = Int;
overload selector("eraSymbols") = NSArray;
overload selector("error") = NSError;
overload selector("errorWithDomain:code:userInfo:") = Id, NSString, Int, NSDictionary;
overload selector("evaluate") = Void;
overload selector("evaluateWithObject:") = Bool, Id;
overload selector("evaluateWithObject:substitutionVariables:") = Bool, Id, NSDictionary;
overload selector("evaluatedArguments") = NSDictionary;
overload selector("evaluatedReceivers") = Id;
overload selector("evaluationErrorNumber") = Int;
overload selector("evaluationErrorSpecifier") = NSScriptObjectSpecifier;
overload selector("eventClass") = CULong;
overload selector("eventID") = CULong;
overload selector("evictsObjectsWithDiscardedContent") = Bool;
overload selector("exceptionDuringOperation:error:leftOperand:rightOperand:") = NSDecimalNumber, SelectorHandle, UInt, NSDecimalNumber, NSDecimalNumber;
overload selector("exceptionWithName:reason:userInfo:") = NSException, NSString, NSString, NSDictionary;
overload selector("exchangeObjectAtIndex:withObjectAtIndex:") = Void, UInt, UInt;
overload selector("executableArchitectures") = NSArray;
overload selector("executablePath") = NSString;
overload selector("executableURL") = NSURL;
overload selector("executeAndReturnError:") = NSAppleEventDescriptor, Pointer[NSDictionary];
overload selector("executeAppleEvent:error:") = NSAppleEventDescriptor, NSAppleEventDescriptor, Pointer[NSDictionary];
overload selector("executeCommand") = Id;
overload selector("executionBlocks") = NSArray;
overload selector("exit") = Void;
overload selector("expectedContentLength") = Int64;
overload selector("expectedResourceDataSize") = Int64;
overload selector("expiresDate") = NSDate;
overload selector("exponentSymbol") = NSString;
overload selector("exportKey:fromObject:withName:") = Void, NSString, Id, NSString;
overload selector("exportedKeys") = NSDictionary;
overload selector("expressionBlock") = UnknownType;
overload selector("expressionForAggregate:") = NSExpression, NSArray;
overload selector("expressionForBlock:arguments:") = NSExpression, UnknownType, NSArray;
overload selector("expressionForConstantValue:") = NSExpression, Id;
overload selector("expressionForEvaluatedObject") = NSExpression;
overload selector("expressionForFunction:arguments:") = NSExpression, NSString, NSArray;
overload selector("expressionForFunction:selectorName:arguments:") = NSExpression, NSExpression, NSString, NSArray;
overload selector("expressionForIntersectSet:with:") = NSExpression, NSExpression, NSExpression;
overload selector("expressionForKeyPath:") = NSExpression, NSString;
overload selector("expressionForMinusSet:with:") = NSExpression, NSExpression, NSExpression;
overload selector("expressionForSubquery:usingIteratorVariable:predicate:") = NSExpression, NSExpression, NSString, Id;
overload selector("expressionForUnionSet:with:") = NSExpression, NSExpression, NSExpression;
overload selector("expressionForVariable:") = NSExpression, NSString;
overload selector("expressionType") = UInt;
overload selector("expressionValueWithObject:context:") = Id, Id, NSMutableDictionary;
overload selector("extent") = CGRect;
overload selector("fadeDuration") = Double;
overload selector("failureReason") = NSString;
overload selector("failureResponse") = NSURLResponse;
overload selector("fastestEncoding") = UInt;
overload selector("fileAttributes") = NSDictionary;
overload selector("fileAttributesAtPath:traverseLink:") = NSDictionary, NSString, Bool;
overload selector("fileCreationDate") = NSDate;
overload selector("fileDescriptor") = Int;
overload selector("fileExistsAtPath:") = Bool, NSString;
overload selector("fileExistsAtPath:isDirectory:") = Bool, NSString, Pointer[Bool];
overload selector("fileExtensionHidden") = Bool;
overload selector("fileGroupOwnerAccountID") = NSNumber;
overload selector("fileGroupOwnerAccountName") = NSString;
overload selector("fileHFSCreatorCode") = CULong;
overload selector("fileHFSTypeCode") = CULong;
overload selector("fileHandleForReading") = NSFileHandle;
overload selector("fileHandleForReadingAtPath:") = Id, NSString;
overload selector("fileHandleForReadingFromURL:error:") = Id, NSURL, Pointer[NSError];
overload selector("fileHandleForUpdatingAtPath:") = Id, NSString;
overload selector("fileHandleForUpdatingURL:error:") = Id, NSURL, Pointer[NSError];
overload selector("fileHandleForWriting") = NSFileHandle;
overload selector("fileHandleForWritingAtPath:") = Id, NSString;
overload selector("fileHandleForWritingToURL:error:") = Id, NSURL, Pointer[NSError];
overload selector("fileHandleWithNullDevice") = Id;
overload selector("fileHandleWithStandardError") = Id;
overload selector("fileHandleWithStandardInput") = Id;
overload selector("fileHandleWithStandardOutput") = Id;
overload selector("fileIsAppendOnly") = Bool;
overload selector("fileIsImmutable") = Bool;
overload selector("fileManager:shouldCopyItemAtPath:toPath:") = Bool, NSFileManager, NSString, NSString;
overload selector("fileManager:shouldCopyItemAtURL:toURL:") = Bool, NSFileManager, NSURL, NSURL;
overload selector("fileManager:shouldLinkItemAtPath:toPath:") = Bool, NSFileManager, NSString, NSString;
overload selector("fileManager:shouldLinkItemAtURL:toURL:") = Bool, NSFileManager, NSURL, NSURL;
overload selector("fileManager:shouldMoveItemAtPath:toPath:") = Bool, NSFileManager, NSString, NSString;
overload selector("fileManager:shouldMoveItemAtURL:toURL:") = Bool, NSFileManager, NSURL, NSURL;
overload selector("fileManager:shouldProceedAfterError:") = Bool, NSFileManager, NSDictionary;
overload selector("fileManager:shouldProceedAfterError:copyingItemAtPath:toPath:") = Bool, NSFileManager, NSError, NSString, NSString;
overload selector("fileManager:shouldProceedAfterError:copyingItemAtURL:toURL:") = Bool, NSFileManager, NSError, NSURL, NSURL;
overload selector("fileManager:shouldProceedAfterError:linkingItemAtPath:toPath:") = Bool, NSFileManager, NSError, NSString, NSString;
overload selector("fileManager:shouldProceedAfterError:linkingItemAtURL:toURL:") = Bool, NSFileManager, NSError, NSURL, NSURL;
overload selector("fileManager:shouldProceedAfterError:movingItemAtPath:toPath:") = Bool, NSFileManager, NSError, NSString, NSString;
overload selector("fileManager:shouldProceedAfterError:movingItemAtURL:toURL:") = Bool, NSFileManager, NSError, NSURL, NSURL;
overload selector("fileManager:shouldProceedAfterError:removingItemAtPath:") = Bool, NSFileManager, NSError, NSString;
overload selector("fileManager:shouldProceedAfterError:removingItemAtURL:") = Bool, NSFileManager, NSError, NSURL;
overload selector("fileManager:shouldRemoveItemAtPath:") = Bool, NSFileManager, NSString;
overload selector("fileManager:shouldRemoveItemAtURL:") = Bool, NSFileManager, NSURL;
overload selector("fileManager:willProcessPath:") = Void, NSFileManager, NSString;
overload selector("fileModificationDate") = NSDate;
overload selector("fileOwnerAccountID") = NSNumber;
overload selector("fileOwnerAccountName") = NSString;
overload selector("filePathURL") = NSURL;
overload selector("filePosixPermissions") = UInt;
overload selector("fileReferenceURL") = NSURL;
overload selector("fileSize") = UInt64;
overload selector("fileSystemAttributesAtPath:") = NSDictionary, NSString;
overload selector("fileSystemFileNumber") = UInt;
overload selector("fileSystemNumber") = Int;
overload selector("fileSystemRepresentation") = Pointer[CChar];
overload selector("fileSystemRepresentationWithPath:") = Pointer[CChar], NSString;
overload selector("fileType") = NSString;
overload selector("fileURLWithPath:") = Id, NSString;
overload selector("fileURLWithPath:isDirectory:") = Id, NSString, Bool;
overload selector("fileURLWithPathComponents:") = NSURL, NSArray;
overload selector("fillColor") = CGColorRef;
overload selector("fillMode") = NSString;
overload selector("fillRule") = NSString;
overload selector("filter") = Id;
overload selector("filterGenerator") = CIFilterGenerator;
overload selector("filterGeneratorWithContentsOfURL:") = CIFilterGenerator, NSURL;
overload selector("filterNamesInCategories:") = NSArray, NSArray;
overload selector("filterNamesInCategory:") = NSArray, NSString;
overload selector("filterUsingPredicate:") = Void, NSPredicate;
overload selector("filterWithImageData:options:") = CIFilter, NSData, NSDictionary;
overload selector("filterWithImageURL:options:") = CIFilter, NSURL, NSDictionary;
overload selector("filterWithName:") = CIFilter, NSString;
overload varargSelector("filterWithName:keysAndValues:") = CIFilter, NSString, Id;
overload selector("filteredArrayUsingPredicate:") = NSArray, NSPredicate;
overload selector("filteredSetUsingPredicate:") = NSSet, NSPredicate;
overload selector("filters") = NSArray;
overload selector("finalize") = Void;
overload selector("finishDecoding") = Void;
overload selector("finishEncoding") = Void;
overload selector("fire") = Void;
overload selector("fireDate") = NSDate;
overload selector("firstIndex") = UInt;
overload selector("firstObjectCommonWithArray:") = Id, NSArray;
overload selector("firstWeekday") = UInt;
overload selector("floatForKey:") = Float, NSString;
overload selector("floatValue") = Float;
overload selector("flush") = Void;
overload selector("flushCachedData") = Void;
overload selector("flushHostCache") = Void;
overload selector("font") = CFTypeRef;
overload selector("fontSize") = Float;
overload selector("foregroundColor") = CGColorRef;
overload selector("formIntersectionWithCharacterSet:") = Void, NSCharacterSet;
overload selector("formUnionWithCharacterSet:") = Void, NSCharacterSet;
overload selector("format") = NSString;
overload selector("formatWidth") = UInt;
overload selector("formatterBehavior") = UInt;
overload selector("forwardInvocation:") = Void, NSInvocation;
overload selector("forwardingTargetForSelector:") = Id, SelectorHandle;
overload selector("fragment") = NSString;
overload selector("frame") = CGRect;
overload selector("frameLength") = UInt;
overload selector("fromValue") = Id;
overload selector("function") = NSString;
overload selector("functionWithControlPoints::::") = Id, Float, Float, Float, Float;
overload selector("functionWithName:") = Id, NSString;
overload selector("generatesCalendarDates") = Bool;
overload selector("generatesDecimalNumbers") = Bool;
overload selector("getArgument:atIndex:") = Void, RawPointer, Int;
overload selector("getArgumentTypeAtIndex:") = Pointer[CChar], UInt;
overload selector("getBuffer:length:") = Bool, Pointer[Pointer[CUChar]], Pointer[UInt];
overload selector("getBytes:") = Void, RawPointer;
overload selector("getBytes:length:") = Void, RawPointer, UInt;
overload selector("getBytes:maxLength:usedLength:encoding:options:range:remainingRange:") = Bool, RawPointer, UInt, Pointer[UInt], UInt, UInt, NSRange, NSRangePointer;
overload selector("getBytes:range:") = Void, RawPointer, NSRange;
overload selector("getCFRunLoop") = CFRunLoopRef;
overload selector("getCString:") = Void, Pointer[CChar];
overload selector("getCString:maxLength:") = Void, Pointer[CChar], UInt;
overload selector("getCString:maxLength:encoding:") = Bool, Pointer[CChar], UInt, UInt;
overload selector("getCString:maxLength:range:remainingRange:") = Void, Pointer[CChar], UInt, NSRange, NSRangePointer;
overload selector("getCharacters:") = Void, Pointer[UShort];
overload selector("getCharacters:range:") = Void, Pointer[UShort], NSRange;
overload selector("getControlPointAtIndex:values:") = Void, CULong, Pointer[Float];
overload selector("getFileSystemRepresentation:maxLength:") = Bool, Pointer[CChar], UInt;
overload selector("getIndexes:") = Void, Pointer[UInt];
overload selector("getIndexes:maxCount:inIndexRange:") = UInt, Pointer[UInt], UInt, NSRangePointer;
overload selector("getInputStream:outputStream:") = Bool, Pointer[NSInputStream], Pointer[NSOutputStream];
overload selector("getLineStart:end:contentsEnd:forRange:") = Void, Pointer[UInt], Pointer[UInt], Pointer[UInt], NSRange;
overload selector("getObjectValue:forString:errorDescription:") = Bool, Pointer[Id], NSString, Pointer[NSString];
overload selector("getObjectValue:forString:range:error:") = Bool, Pointer[Id], NSString, Pointer[NSRange], Pointer[NSError];
overload selector("getObjects:") = Void, Pointer[Id];
overload selector("getObjects:andKeys:") = Void, Pointer[Id], Pointer[Id];
overload selector("getObjects:range:") = Void, Pointer[Id], NSRange;
overload selector("getParagraphStart:end:contentsEnd:forRange:") = Void, Pointer[UInt], Pointer[UInt], Pointer[UInt], NSRange;
overload selector("getResourceValue:forKey:error:") = Bool, Pointer[Id], NSString, Pointer[NSError];
overload selector("getReturnValue:") = Void, RawPointer;
overload selector("getStreamsToHost:port:inputStream:outputStream:") = Void, NSHost, Int, Pointer[NSInputStream], Pointer[NSOutputStream];
overload selector("getValue:") = Void, RawPointer;
overload selector("globallyUniqueString") = NSString;
overload selector("grammarCheckingResultWithRange:details:") = NSTextCheckingResult, NSRange, NSArray;
overload selector("grammarDetails") = NSArray;
overload selector("green") = Float;
overload selector("greenRange") = Float;
overload selector("greenSpeed") = Float;
overload selector("gregorianStartDate") = NSDate;
overload selector("groupedResults") = NSArray;
overload selector("groupingAttributes") = NSArray;
overload selector("groupingLevel") = Int;
overload selector("groupingSeparator") = NSString;
overload selector("groupingSize") = UInt;
overload selector("groupsByEvent") = Bool;
overload varargSelector("handleFailureInFunction:file:lineNumber:description:") = Void, NSString, NSString, Int, NSString;
overload varargSelector("handleFailureInMethod:object:file:lineNumber:description:") = Void, SelectorHandle, Id, NSString, Int, NSString;
overload selector("handleMachMessage:") = Void, RawPointer;
overload selector("handlePortMessage:") = Void, NSPortMessage;
overload selector("handleQueryWithUnboundKey:") = Id, NSString;
overload selector("handleTakeValue:forUnboundKey:") = Void, Id, NSString;
overload selector("hasBytesAvailable") = Bool;
overload selector("hasMemberInPlane:") = Bool, CUChar;
overload selector("hasOrderedToManyRelationshipForKey:") = Bool, NSString;
overload selector("hasPassword") = Bool;
overload selector("hasPrefix:") = Bool, NSString;
overload selector("hasPropertyForKey:") = Bool, NSString;
overload selector("hasReadablePropertyForKey:") = Bool, NSString;
overload selector("hasSpaceAvailable") = Bool;
overload selector("hasSuffix:") = Bool, NSString;
overload selector("hasThousandSeparators") = Bool;
overload selector("hasWritablePropertyForKey:") = Bool, NSString;
overload selector("hash") = UInt;
overload selector("hashFunction") = CCodePointer[[RawPointer,CCodePointer[[RawPointer],[UInt]]],[UInt]];
overload selector("hashTableWithOptions:") = Id, UInt;
overload selector("hashTableWithWeakObjects") = Id;
overload selector("helpAnchor") = NSString;
overload selector("hitTest:") = CALayer, CGPoint;
overload selector("host") = NSString;
overload selector("hostName") = NSString;
overload selector("hostWithAddress:") = NSHost, NSString;
overload selector("hostWithName:") = NSHost, NSString;
overload selector("hour") = Int;
overload selector("hourOfDay") = Int;
overload selector("identity") = SecIdentityRef;
overload selector("illegalCharacterSet") = Id;
overload selector("image") = CIImage;
overload selector("imageAccumulatorWithExtent:format:") = CIImageAccumulator, CGRect, Int;
overload selector("imageByApplyingTransform:") = CIImage, CGAffineTransform;
overload selector("imageByCroppingToRect:") = CIImage, CGRect;
overload selector("imageWithBitmapData:bytesPerRow:size:format:colorSpace:") = CIImage, NSData, CULong, CGSize, Int, CGColorSpaceRef;
overload selector("imageWithCGImage:") = CIImage, CGImageRef;
overload selector("imageWithCGImage:options:") = CIImage, CGImageRef, NSDictionary;
overload selector("imageWithCGLayer:") = CIImage, CGLayerRef;
overload selector("imageWithCGLayer:options:") = CIImage, CGLayerRef, NSDictionary;
overload selector("imageWithCVImageBuffer:") = CIImage, CVImageBufferRef;
overload selector("imageWithCVImageBuffer:options:") = CIImage, CVImageBufferRef, NSDictionary;
overload selector("imageWithColor:") = CIImage, CIColor;
overload selector("imageWithContentsOfURL:") = CIImage, NSURL;
overload selector("imageWithContentsOfURL:options:") = CIImage, NSURL, NSDictionary;
overload selector("imageWithData:") = CIImage, NSData;
overload selector("imageWithData:options:") = CIImage, NSData, NSDictionary;
overload selector("imageWithIOSurface:") = CIImage, IOSurfaceRef;
overload selector("imageWithIOSurface:options:") = CIImage, IOSurfaceRef, NSDictionary;
overload selector("imageWithImageProvider:size::format:colorSpace:options:") = CIImage, Id, CULong, CULong, Int, CGColorSpaceRef, NSDictionary;
overload selector("imageWithTexture:size:flipped:colorSpace:") = CIImage, UInt, CGSize, Bool, CGColorSpaceRef;
overload selector("implementationClassName") = NSString;
overload selector("increaseLengthBy:") = Void, UInt;
overload selector("independentConversationQueueing") = Bool;
overload selector("index") = UInt;
overload selector("indexAtPosition:") = UInt, UInt;
overload selector("indexGreaterThanIndex:") = UInt, UInt;
overload selector("indexGreaterThanOrEqualToIndex:") = UInt, UInt;
overload selector("indexInRange:options:passingTest:") = UInt, NSRange, UInt, UnknownType;
overload selector("indexLessThanIndex:") = UInt, UInt;
overload selector("indexLessThanOrEqualToIndex:") = UInt, UInt;
overload selector("indexOfObject:") = UInt, Id;
overload selector("indexOfObject:inRange:") = UInt, Id, NSRange;
overload selector("indexOfObject:inSortedRange:options:usingComparator:") = UInt, Id, NSRange, UInt, NSComparator;
overload selector("indexOfObjectAtIndexes:options:passingTest:") = UInt, NSIndexSet, UInt, UnknownType;
overload selector("indexOfObjectIdenticalTo:") = UInt, Id;
overload selector("indexOfObjectIdenticalTo:inRange:") = UInt, Id, NSRange;
overload selector("indexOfObjectPassingTest:") = UInt, UnknownType;
overload selector("indexOfObjectWithOptions:passingTest:") = UInt, UInt, UnknownType;
overload selector("indexOfResult:") = UInt, Id;
overload selector("indexPassingTest:") = UInt, UnknownType;
overload selector("indexPathByAddingIndex:") = NSIndexPath, UInt;
overload selector("indexPathByRemovingLastIndex") = NSIndexPath;
overload selector("indexPathWithIndex:") = Id, UInt;
overload selector("indexPathWithIndexes:length:") = Id, Pointer[UInt], UInt;
overload selector("indexSet") = Id;
overload selector("indexSetWithIndex:") = Id, UInt;
overload selector("indexSetWithIndexesInRange:") = Id, NSRange;
overload selector("indexWithOptions:passingTest:") = UInt, UInt, UnknownType;
overload selector("indexesInRange:options:passingTest:") = NSIndexSet, NSRange, UInt, UnknownType;
overload selector("indexesOfObjectsAtIndexes:options:passingTest:") = NSIndexSet, NSIndexSet, UInt, UnknownType;
overload selector("indexesOfObjectsPassingTest:") = NSIndexSet, UnknownType;
overload selector("indexesOfObjectsWithOptions:passingTest:") = NSIndexSet, UInt, UnknownType;
overload selector("indexesPassingTest:") = NSIndexSet, UnknownType;
overload selector("indexesWithOptions:passingTest:") = NSIndexSet, UInt, UnknownType;
overload selector("indicesOfObjectsByEvaluatingObjectSpecifier:") = NSArray, NSScriptObjectSpecifier;
overload selector("indicesOfObjectsByEvaluatingWithContainer:count:") = Pointer[Int], Id, Pointer[Int];
overload selector("infoDictionary") = NSDictionary;
overload selector("init") = Id;
overload selector("initAndTestWithTests:") = Id, NSArray;
overload selector("initByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:") = Id, NSData, UInt, NSURL, Pointer[Bool], Pointer[NSError];
overload selector("initFileURLWithPath:") = Id, NSString;
overload selector("initFileURLWithPath:isDirectory:") = Id, NSString, Bool;
overload selector("initForReadingWithData:") = Id, NSData;
overload selector("initForWritingWithMutableData:") = Id, NSMutableData;
overload selector("initListDescriptor") = Id;
overload selector("initNotTestWithTest:") = Id, NSScriptWhoseTest;
overload selector("initOrTestWithTests:") = Id, NSArray;
overload selector("initRecordDescriptor") = Id;
overload selector("initRemoteWithProtocolFamily:socketType:protocol:address:") = Id, Int, Int, Int, NSData;
overload selector("initRemoteWithTCPPort:host:") = Id, UShort, NSString;
overload selector("initToBuffer:capacity:") = Id, Pointer[CUChar], UInt;
overload selector("initToFileAtPath:append:") = Id, NSString, Bool;
overload selector("initToMemory") = Id;
overload selector("initWithAEDescNoCopy:") = Id, Pointer[AEDesc];
overload selector("initWithArray:") = Id, NSArray;
overload selector("initWithArray:copyItems:") = Id, NSArray, Bool;
overload selector("initWithAttribute:relativeTo:attribute:scale:offset:") = Id, Int, NSString, Int, Float, Float;
overload selector("initWithAttributedString:") = Id, NSAttributedString;
overload selector("initWithAuthenticationChallenge:sender:") = Id, NSURLAuthenticationChallenge, Id;
overload selector("initWithBitmapData:bytesPerRow:size:format:colorSpace:") = Id, NSData, CULong, CGSize, Int, CGColorSpaceRef;
overload selector("initWithBool:") = Id, Bool;
overload selector("initWithBytes:length:") = Id, RawPointer, UInt;
overload selector("initWithBytes:length:encoding:") = Id, RawPointer, UInt, UInt;
overload selector("initWithBytes:objCType:") = Id, RawPointer, Pointer[CChar];
overload selector("initWithBytesNoCopy:length:") = Id, RawPointer, UInt;
overload selector("initWithBytesNoCopy:length:encoding:freeWhenDone:") = Id, RawPointer, UInt, UInt, Bool;
overload selector("initWithBytesNoCopy:length:freeWhenDone:") = Id, RawPointer, UInt, Bool;
overload selector("initWithCGColor:") = Id, CGColorRef;
overload selector("initWithCGImage:") = Id, CGImageRef;
overload selector("initWithCGImage:options:") = Id, CGImageRef, NSDictionary;
overload selector("initWithCGLayer:") = Id, CGLayerRef;
overload selector("initWithCGLayer:options:") = Id, CGLayerRef, NSDictionary;
overload selector("initWithCString:") = Id, Pointer[CChar];
overload selector("initWithCString:encoding:") = Id, Pointer[CChar], UInt;
overload selector("initWithCString:length:") = Id, Pointer[CChar], UInt;
overload selector("initWithCStringNoCopy:length:freeWhenDone:") = Id, Pointer[CChar], UInt, Bool;
overload selector("initWithCVImageBuffer:") = Id, CVImageBufferRef;
overload selector("initWithCVImageBuffer:options:") = Id, CVImageBufferRef, NSDictionary;
overload selector("initWithCalendarIdentifier:") = Id, NSString;
overload selector("initWithCapacity:") = Id, UInt;
overload selector("initWithChar:") = Id, CChar;
overload selector("initWithCharacters:length:") = Id, Pointer[UShort], UInt;
overload selector("initWithCharactersNoCopy:length:freeWhenDone:") = Id, Pointer[UShort], UInt, Bool;
overload selector("initWithCoder:") = Id, NSCoder;
overload selector("initWithColor:") = Id, CIColor;
overload selector("initWithCommandDescription:") = Id, NSScriptCommandDescription;
overload selector("initWithCondition:") = Id, Int;
overload selector("initWithContainerClassDescription:containerSpecifier:key:") = Id, NSScriptClassDescription, NSScriptObjectSpecifier, NSString;
overload selector("initWithContainerClassDescription:containerSpecifier:key:index:") = Id, NSScriptClassDescription, NSScriptObjectSpecifier, NSString, Int;
overload selector("initWithContainerClassDescription:containerSpecifier:key:name:") = Id, NSScriptClassDescription, NSScriptObjectSpecifier, NSString, NSString;
overload selector("initWithContainerClassDescription:containerSpecifier:key:relativePosition:baseSpecifier:") = Id, NSScriptClassDescription, NSScriptObjectSpecifier, NSString, UInt, NSScriptObjectSpecifier;
overload selector("initWithContainerClassDescription:containerSpecifier:key:startSpecifier:endSpecifier:") = Id, NSScriptClassDescription, NSScriptObjectSpecifier, NSString, NSScriptObjectSpecifier, NSScriptObjectSpecifier;
overload selector("initWithContainerClassDescription:containerSpecifier:key:test:") = Id, NSScriptClassDescription, NSScriptObjectSpecifier, NSString, NSScriptWhoseTest;
overload selector("initWithContainerClassDescription:containerSpecifier:key:uniqueID:") = Id, NSScriptClassDescription, NSScriptObjectSpecifier, NSString, Id;
overload selector("initWithContainerSpecifier:key:") = Id, NSScriptObjectSpecifier, NSString;
overload selector("initWithContentsOfFile:") = Id, NSString;
overload selector("initWithContentsOfFile:encoding:error:") = Id, NSString, UInt, Pointer[NSError];
overload selector("initWithContentsOfFile:options:error:") = Id, NSString, UInt, Pointer[NSError];
overload selector("initWithContentsOfFile:usedEncoding:error:") = Id, NSString, Pointer[UInt], Pointer[NSError];
overload selector("initWithContentsOfMappedFile:") = Id, NSString;
overload selector("initWithContentsOfURL:") = Id, NSURL;
overload selector("initWithContentsOfURL:encoding:error:") = Id, NSURL, UInt, Pointer[NSError];
overload selector("initWithContentsOfURL:error:") = Id, NSURL, Pointer[NSDictionary];
overload selector("initWithContentsOfURL:options:") = Id, NSURL, NSDictionary;
overload selector("initWithContentsOfURL:options:error:") = Id, NSURL, UInt, Pointer[NSError];
overload selector("initWithContentsOfURL:usedEncoding:error:") = Id, NSURL, Pointer[UInt], Pointer[NSError];
overload selector("initWithControlPoints::::") = Id, Float, Float, Float, Float;
overload selector("initWithData:") = Id, NSData;
overload selector("initWithData:encoding:") = Id, NSData, UInt;
overload selector("initWithData:options:") = Id, NSData, NSDictionary;
overload selector("initWithData:options:error:") = Id, NSData, UInt, Pointer[NSError];
overload selector("initWithDateFormat:allowNaturalLanguage:") = Id, NSString, Bool;
overload selector("initWithDecimal:") = Id, NSDecimal;
overload selector("initWithDescriptorType:bytes:length:") = Id, CULong, RawPointer, UInt;
overload selector("initWithDescriptorType:data:") = Id, CULong, NSData;
overload selector("initWithDictionary:") = Id, NSDictionary;
overload selector("initWithDictionary:copyItems:") = Id, NSDictionary, Bool;
overload selector("initWithDomain:code:userInfo:") = Id, NSString, Int, NSDictionary;
overload selector("initWithDomain:type:name:") = Id, NSString, NSString, NSString;
overload selector("initWithDomain:type:name:port:") = Id, NSString, NSString, NSString, Int;
overload selector("initWithDominantScript:languageMap:") = Id, NSString, NSDictionary;
overload selector("initWithDouble:") = Id, Double;
overload selector("initWithEventClass:eventID:targetDescriptor:returnID:transactionID:") = Id, CULong, CULong, NSAppleEventDescriptor, Short, CLong;
overload selector("initWithExpressionType:") = Id, UInt;
overload selector("initWithExtent:format:") = Id, CGRect, Int;
overload selector("initWithFileAtPath:") = Id, NSString;
overload selector("initWithFileDescriptor:") = Id, Int;
overload selector("initWithFileDescriptor:closeOnDealloc:") = Id, Int, Bool;
overload selector("initWithFireDate:interval:target:selector:userInfo:repeats:") = Id, NSDate, Double, Id, SelectorHandle, Id, Bool;
overload selector("initWithFloat:") = Id, Float;
overload varargSelector("initWithFormat:") = Id, NSString;
overload selector("initWithFormat:arguments:") = Id, NSString, va_list;
overload varargSelector("initWithFormat:locale:") = Id, NSString, Id;
overload selector("initWithFormat:locale:arguments:") = Id, NSString, Id, va_list;
overload selector("initWithHost:port:protocol:realm:authenticationMethod:") = Id, NSString, Int, NSString, NSString, NSString;
overload selector("initWithIOSurface:") = Id, IOSurfaceRef;
overload selector("initWithIOSurface:options:") = Id, IOSurfaceRef, NSDictionary;
overload selector("initWithIdentity:certificates:persistence:") = Id, SecIdentityRef, NSArray, UInt;
overload selector("initWithImage:") = Id, CIImage;
overload varargSelector("initWithImage:keysAndValues:") = Id, CIImage, Id;
overload selector("initWithImage:options:") = Id, CIImage, NSDictionary;
overload selector("initWithImageProvider:size::format:colorSpace:options:") = Id, Id, CULong, CULong, Int, CGColorSpaceRef, NSDictionary;
overload selector("initWithIndex:") = Id, UInt;
overload selector("initWithIndexSet:") = Id, NSIndexSet;
overload selector("initWithIndexes:length:") = Id, Pointer[UInt], UInt;
overload selector("initWithIndexesInRange:") = Id, NSRange;
overload selector("initWithInt:") = Id, Int;
overload selector("initWithInteger:") = Id, Int;
overload selector("initWithInvocation:") = Id, NSInvocation;
overload selector("initWithKey:ascending:") = Id, NSString, Bool;
overload selector("initWithKey:ascending:comparator:") = Id, NSString, Bool, NSComparator;
overload selector("initWithKey:ascending:selector:") = Id, NSString, Bool, SelectorHandle;
overload selector("initWithKeyOptions:valueOptions:capacity:") = Id, UInt, UInt, UInt;
overload selector("initWithKeyPointerFunctions:valuePointerFunctions:capacity:") = Id, NSPointerFunctions, NSPointerFunctions, UInt;
overload selector("initWithKind:") = Id, UInt;
overload selector("initWithKind:options:") = Id, UInt, UInt;
overload selector("initWithLayer:") = Id, Id;
overload selector("initWithLeftExpression:rightExpression:customSelector:") = Id, NSExpression, NSExpression, SelectorHandle;
overload selector("initWithLeftExpression:rightExpression:modifier:type:options:") = Id, NSExpression, NSExpression, UInt, UInt, UInt;
overload selector("initWithLength:") = Id, UInt;
overload selector("initWithLocal:connection:") = Id, Id, NSConnection;
overload selector("initWithLocaleIdentifier:") = Id, NSString;
overload selector("initWithLong:") = Id, CLong;
overload selector("initWithLongLong:") = Id, Int64;
overload selector("initWithMachPort:") = Id, UInt;
overload selector("initWithMachPort:options:") = Id, UInt, UInt;
overload selector("initWithMantissa:exponent:isNegative:") = Id, UInt64, Short, Bool;
overload selector("initWithMemoryCapacity:diskCapacity:diskPath:") = Id, UInt, UInt, NSString;
overload selector("initWithName:") = Id, NSString;
overload selector("initWithName:URI:") = Id, NSString, NSString;
overload selector("initWithName:data:") = Id, NSString, NSData;
overload selector("initWithName:reason:userInfo:") = Id, NSString, NSString, NSDictionary;
overload selector("initWithName:stringValue:") = Id, NSString, NSString;
overload selector("initWithNotificationCenter:") = Id, NSNotificationCenter;
overload selector("initWithObjectSpecifier:comparisonOperator:testObject:") = Id, NSScriptObjectSpecifier, UInt, Id;
overload varargSelector("initWithObjects:") = Id, Id;
overload selector("initWithObjects:count:") = Id, Pointer[Id], UInt;
overload selector("initWithObjects:forKeys:") = Id, NSArray, NSArray;
overload selector("initWithObjects:forKeys:count:") = Id, Pointer[Id], Pointer[Id], UInt;
overload varargSelector("initWithObjectsAndKeys:") = Id, Id;
overload selector("initWithOptions:") = Id, UInt;
overload selector("initWithOptions:capacity:") = Id, UInt, UInt;
overload selector("initWithPath:") = Id, NSString;
overload selector("initWithPointerFunctions:") = Id, NSPointerFunctions;
overload selector("initWithPointerFunctions:capacity:") = Id, NSPointerFunctions, UInt;
overload selector("initWithPosition:objectSpecifier:") = Id, UInt, NSScriptObjectSpecifier;
overload selector("initWithProperties:") = Id, NSDictionary;
overload selector("initWithProtectionSpace:proposedCredential:previousFailureCount:failureResponse:error:sender:") = Id, NSURLProtectionSpace, NSURLCredential, Int, NSURLResponse, NSError, Id;
overload selector("initWithProtocolFamily:socketType:protocol:address:") = Id, Int, Int, Int, NSData;
overload selector("initWithProtocolFamily:socketType:protocol:socket:") = Id, Int, Int, Int, Int;
overload selector("initWithProxyHost:port:type:realm:authenticationMethod:") = Id, NSString, Int, NSString, NSString, NSString;
overload selector("initWithReceivePort:sendPort:") = Id, NSPort, NSPort;
overload selector("initWithReceivePort:sendPort:components:") = Id, NSPort, NSPort, NSArray;
overload selector("initWithRect:") = Id, CGRect;
overload selector("initWithRequest:cachedResponse:client:") = Id, NSURLRequest, NSCachedURLResponse, Id;
overload selector("initWithRequest:delegate:") = Id, NSURLRequest, Id;
overload selector("initWithRequest:delegate:startImmediately:") = Id, NSURLRequest, Id, Bool;
overload selector("initWithResponse:data:") = Id, NSURLResponse, NSData;
overload selector("initWithResponse:data:userInfo:storagePolicy:") = Id, NSURLResponse, NSData, NSDictionary, UInt;
overload selector("initWithResumeData:delegate:path:") = Id, NSData, Id, NSString;
overload selector("initWithRootElement:") = Id, NSXMLElement;
overload selector("initWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:") = Id, UInt, Short, Bool, Bool, Bool, Bool;
overload selector("initWithScheme:host:path:") = Id, NSString, NSString, NSString;
overload selector("initWithSendPort:receivePort:components:") = Id, NSPort, NSPort, NSArray;
overload selector("initWithSet:") = Id, NSSet;
overload selector("initWithSet:copyItems:") = Id, NSSet, Bool;
overload selector("initWithShort:") = Id, Short;
overload selector("initWithSource:") = Id, NSString;
overload selector("initWithStorageLocation:") = Id, NSURL;
overload selector("initWithString:") = Id, NSString;
overload selector("initWithString:attributes:") = Id, NSString, NSDictionary;
overload selector("initWithString:calendarFormat:") = Id, NSString, NSString;
overload selector("initWithString:calendarFormat:locale:") = Id, NSString, NSString, Id;
overload selector("initWithString:locale:") = Id, NSString, Id;
overload selector("initWithString:relativeToURL:") = Id, NSString, NSURL;
overload selector("initWithSuiteName:className:dictionary:") = Id, NSString, NSString, NSDictionary;
overload selector("initWithSuiteName:commandName:dictionary:") = Id, NSString, NSString, NSDictionary;
overload selector("initWithTCPPort:") = Id, UShort;
overload selector("initWithTarget:connection:") = Id, Id, NSConnection;
overload selector("initWithTarget:protocol:") = Id, NSObject, Id;
overload selector("initWithTarget:selector:object:") = Id, Id, SelectorHandle, Id;
overload selector("initWithTexture:size:flipped:colorSpace:") = Id, UInt, CGSize, Bool, CGColorSpaceRef;
overload selector("initWithTimeInterval:sinceDate:") = Id, Double, NSDate;
overload selector("initWithTimeIntervalSince1970:") = Id, Double;
overload selector("initWithTimeIntervalSinceNow:") = Id, Double;
overload selector("initWithTimeIntervalSinceReferenceDate:") = Id, Double;
overload selector("initWithTransform:") = Id, NSAffineTransform;
overload selector("initWithTrust:") = Id, SecTrustRef;
overload selector("initWithType:subpredicates:") = Id, UInt, NSArray;
overload selector("initWithURL:") = Id, NSURL;
overload selector("initWithURL:MIMEType:expectedContentLength:textEncodingName:") = Id, NSURL, NSString, Int, NSString;
overload selector("initWithURL:append:") = Id, NSURL, Bool;
overload selector("initWithURL:cachePolicy:timeoutInterval:") = Id, NSURL, UInt, Double;
overload selector("initWithURL:cached:") = Id, NSURL, Bool;
overload selector("initWithUTF8String:") = Id, Pointer[CChar];
overload selector("initWithUnsignedChar:") = Id, CUChar;
overload selector("initWithUnsignedInt:") = Id, UInt;
overload selector("initWithUnsignedInteger:") = Id, UInt;
overload selector("initWithUnsignedLong:") = Id, CULong;
overload selector("initWithUnsignedLongLong:") = Id, UInt64;
overload selector("initWithUnsignedShort:") = Id, UShort;
overload selector("initWithUser:") = Id, NSString;
overload selector("initWithUser:password:persistence:") = Id, NSString, NSString, UInt;
overload selector("initWithValues:count:") = Id, Pointer[Float], CULong;
overload selector("initWithX:") = Id, Float;
overload selector("initWithX:Y:") = Id, Float, Float;
overload selector("initWithX:Y:Z:") = Id, Float, Float, Float;
overload selector("initWithX:Y:Z:W:") = Id, Float, Float, Float, Float;
overload selector("initWithXMLString:") = Id, NSString;
overload selector("initWithXMLString:error:") = Id, NSString, Pointer[NSError];
overload selector("initWithXMLString:options:error:") = Id, NSString, UInt, Pointer[NSError];
overload selector("initWithYear:month:day:hour:minute:second:timeZone:") = Id, Int, UInt, UInt, UInt, UInt, UInt, NSTimeZone;
overload selector("initialize") = Void;
overload selector("inputKeys") = NSArray;
overload selector("inputStreamWithData:") = Id, NSData;
overload selector("inputStreamWithFileAtPath:") = Id, NSString;
overload selector("inputStreamWithURL:") = Id, NSURL;
overload selector("insertAttributedString:atIndex:") = Void, NSAttributedString, UInt;
overload selector("insertChild:atIndex:") = Void, NSXMLNode, UInt;
overload selector("insertChildren:atIndex:") = Void, NSArray, UInt;
overload selector("insertDescriptor:atIndex:") = Void, NSAppleEventDescriptor, Int;
overload selector("insertObject:atIndex:") = Void, Id, UInt;
overload selector("insertObjects:atIndexes:") = Void, NSArray, NSIndexSet;
overload selector("insertPointer:atIndex:") = Void, RawPointer, UInt;
overload selector("insertString:atIndex:") = Void, NSString, UInt;
overload selector("insertSublayer:above:") = Void, CALayer, CALayer;
overload selector("insertSublayer:atIndex:") = Void, CALayer, UInt;
overload selector("insertSublayer:below:") = Void, CALayer, CALayer;
overload selector("insertValue:atIndex:inPropertyWithKey:") = Void, Id, UInt, NSString;
overload selector("insertValue:inPropertyWithKey:") = Void, Id, NSString;
overload selector("insertionContainer") = Id;
overload selector("insertionIndex") = Int;
overload selector("insertionKey") = NSString;
overload selector("insertionReplaces") = Bool;
overload selector("insetByX:Y:") = CIFilterShape, Int, Int;
overload selector("instanceAlphaOffset") = Float;
overload selector("instanceBlueOffset") = Float;
overload selector("instanceColor") = CGColorRef;
overload selector("instanceCount") = Int;
overload selector("instanceDelay") = Double;
overload selector("instanceGreenOffset") = Float;
overload selector("instanceMethodForSelector:") = IMP, SelectorHandle;
overload selector("instanceMethodSignatureForSelector:") = NSMethodSignature, SelectorHandle;
overload selector("instanceRedOffset") = Float;
overload selector("instanceTransform") = CATransform3D;
overload selector("instancesRespondToSelector:") = Bool, SelectorHandle;
overload selector("int32Value") = CLong;
overload selector("intValue") = Int;
overload selector("integerForKey:") = Int, NSString;
overload selector("integerValue") = Int;
overload selector("internationalCurrencySymbol") = NSString;
overload selector("interrupt") = Void;
overload selector("intersectHashTable:") = Void, NSHashTable;
overload selector("intersectSet:") = Void, NSSet;
overload selector("intersectWith:") = CIFilterShape, CIFilterShape;
overload selector("intersectWithRect:") = CIFilterShape, CGRect;
overload selector("intersectsHashTable:") = Bool, NSHashTable;
overload selector("intersectsIndexesInRange:") = Bool, NSRange;
overload selector("intersectsSet:") = Bool, NSSet;
overload selector("invalidate") = Void;
overload selector("invalidateClassDescriptionCache") = Void;
overload selector("invalidateLayoutOfLayer:") = Void, CALayer;
overload selector("inverseForRelationshipKey:") = NSString, NSString;
overload selector("invert") = Void;
overload selector("invertedSet") = NSCharacterSet;
overload selector("invocation") = NSInvocation;
overload selector("invocationWithMethodSignature:") = NSInvocation, NSMethodSignature;
overload selector("invoke") = Void;
overload selector("invokeWithTarget:") = Void, Id;
overload selector("isAbsolutePath") = Bool;
overload selector("isAdditive") = Bool;
overload selector("isAsynchronous") = Bool;
overload selector("isAtEnd") = Bool;
overload selector("isBycopy") = Bool;
overload selector("isByref") = Bool;
overload selector("isCancelled") = Bool;
overload selector("isCaseInsensitiveLike:") = Bool, NSString;
overload selector("isCollecting") = Bool;
overload selector("isCompiled") = Bool;
overload selector("isConcurrent") = Bool;
overload selector("isContentDiscarded") = Bool;
overload selector("isCumulative") = Bool;
overload selector("isDaylightSavingTime") = Bool;
overload selector("isDaylightSavingTimeForDate:") = Bool, NSDate;
overload selector("isDeletableFileAtPath:") = Bool, NSString;
overload selector("isDoubleSided") = Bool;
overload selector("isEnabled") = Bool;
overload selector("isEqual:") = Bool, Id;
overload selector("isEqualFunction") = CCodePointer[[RawPointer,RawPointer,CCodePointer[[RawPointer],[UInt]]],[CChar]];
overload selector("isEqualTo:") = Bool, Id;
overload selector("isEqualToArray:") = Bool, NSArray;
overload selector("isEqualToAttributedString:") = Bool, NSAttributedString;
overload selector("isEqualToData:") = Bool, NSData;
overload selector("isEqualToDate:") = Bool, NSDate;
overload selector("isEqualToDictionary:") = Bool, NSDictionary;
overload selector("isEqualToHashTable:") = Bool, NSHashTable;
overload selector("isEqualToHost:") = Bool, NSHost;
overload selector("isEqualToIndexSet:") = Bool, NSIndexSet;
overload selector("isEqualToNumber:") = Bool, NSNumber;
overload selector("isEqualToSet:") = Bool, NSSet;
overload selector("isEqualToString:") = Bool, NSString;
overload selector("isEqualToTimeZone:") = Bool, NSTimeZone;
overload selector("isEqualToValue:") = Bool, NSValue;
overload selector("isExecutableFileAtPath:") = Bool, NSString;
overload selector("isExecuting") = Bool;
overload selector("isExternal") = Bool;
overload selector("isFileReferenceURL") = Bool;
overload selector("isFileURL") = Bool;
overload selector("isFinished") = Bool;
overload selector("isGathering") = Bool;
overload selector("isGeometryFlipped") = Bool;
overload selector("isGreaterThan:") = Bool, Id;
overload selector("isGreaterThanOrEqualTo:") = Bool, Id;
overload selector("isHTTPOnly") = Bool;
overload selector("isHidden") = Bool;
overload selector("isHostCacheEnabled") = Bool;
overload selector("isKindOfClass:") = Bool, Id;
overload selector("isLenient") = Bool;
overload selector("isLessThan:") = Bool, Id;
overload selector("isLessThanOrEqualTo:") = Bool, Id;
overload selector("isLike:") = Bool, NSString;
overload selector("isLoaded") = Bool;
overload selector("isLocationRequiredToCreateForKey:") = Bool, NSString;
overload selector("isMainThread") = Bool;
overload selector("isMemberOfClass:") = Bool, Id;
overload selector("isMultiThreaded") = Bool;
overload selector("isNotEqualTo:") = Bool, Id;
overload selector("isOneway") = Bool;
overload selector("isOpaque") = Bool;
overload selector("isOptionalArgumentWithName:") = Bool, NSString;
overload selector("isPartialStringValid:newEditingString:errorDescription:") = Bool, NSString, Pointer[NSString], Pointer[NSString];
overload selector("isPartialStringValid:proposedSelectedRange:originalString:originalSelectedRange:errorDescription:") = Bool, Pointer[NSString], NSRangePointer, NSString, NSRange, Pointer[NSString];
overload selector("isPartialStringValidationEnabled") = Bool;
overload selector("isProxy") = Bool;
overload selector("isReadOnlyKey:") = Bool, NSString;
overload selector("isReadableFileAtPath:") = Bool, NSString;
overload selector("isReady") = Bool;
overload selector("isRedoing") = Bool;
overload selector("isRemovedOnCompletion") = Bool;
overload selector("isRunning") = Bool;
overload selector("isSecure") = Bool;
overload selector("isSessionOnly") = Bool;
overload selector("isStandalone") = Bool;
overload selector("isStarted") = Bool;
overload selector("isStopped") = Bool;
overload selector("isSubclassOfClass:") = Bool, Id;
overload selector("isSubsetOfHashTable:") = Bool, NSHashTable;
overload selector("isSubsetOfSet:") = Bool, NSSet;
overload selector("isSupersetOfSet:") = Bool, NSCharacterSet;
overload selector("isSuspended") = Bool;
overload selector("isTrue") = Bool;
overload selector("isUndoRegistrationEnabled") = Bool;
overload selector("isUndoing") = Bool;
overload selector("isValid") = Bool;
overload selector("isWellFormed") = Bool;
overload selector("isWordInUserDictionaries:caseSensitive:") = Bool, NSString, Bool;
overload selector("isWrapped") = Bool;
overload selector("isWritableFileAtPath:") = Bool, NSString;
overload selector("kernelsWithString:") = NSArray, NSString;
overload selector("key") = NSString;
overload selector("keyClassDescription") = NSScriptClassDescription;
overload selector("keyEnumerator") = NSEnumerator;
overload selector("keyPath") = NSString;
overload selector("keyPathsForValuesAffectingValueForKey:") = NSSet, NSString;
overload selector("keyPointerFunctions") = NSPointerFunctions;
overload selector("keySpecifier") = NSScriptObjectSpecifier;
overload selector("keyTimes") = NSArray;
overload selector("keyWithAppleEventCode:") = NSString, CULong;
overload selector("keysOfEntriesPassingTest:") = NSSet, UnknownType;
overload selector("keysOfEntriesWithOptions:passingTest:") = NSSet, UInt, UnknownType;
overload selector("keysSortedByValueUsingComparator:") = NSArray, NSComparator;
overload selector("keysSortedByValueUsingSelector:") = NSArray, SelectorHandle;
overload selector("keysSortedByValueWithOptions:usingComparator:") = NSArray, UInt, NSComparator;
overload selector("keywordForDescriptorAtIndex:") = CULong, Int;
overload selector("kind") = UInt;
overload selector("knownTimeZoneNames") = NSArray;
overload selector("languageMap") = NSDictionary;
overload selector("languagesForScript:") = NSArray, NSString;
overload selector("lastIndex") = UInt;
overload selector("lastObject") = Id;
overload selector("lastPathComponent") = NSString;
overload selector("laterDate:") = NSDate, NSDate;
overload selector("launch") = Void;
overload selector("launchPath") = NSString;
overload selector("launchedTaskWithLaunchPath:arguments:") = NSTask, NSString, NSArray;
overload selector("layer") = Id;
overload selector("layoutIfNeeded") = Void;
overload selector("layoutManager") = Id;
overload selector("layoutSublayers") = Void;
overload selector("layoutSublayersOfLayer:") = Void, CALayer;
overload selector("leftExpression") = NSExpression;
overload selector("length") = UInt;
overload selector("lengthOfBytesUsingEncoding:") = UInt, UInt;
overload selector("letterCharacterSet") = Id;
overload selector("level") = UInt;
overload selector("levelsOfDetail") = CULong;
overload selector("levelsOfDetailBias") = CULong;
overload selector("levelsOfUndo") = UInt;
overload selector("lifetime") = Float;
overload selector("lifetimeRange") = Float;
overload selector("limitDateForMode:") = NSDate, NSString;
overload selector("lineCap") = NSString;
overload selector("lineDashPattern") = NSArray;
overload selector("lineDashPhase") = Float;
overload selector("lineDirectionForLanguage:") = UInt, NSString;
overload selector("lineJoin") = NSString;
overload selector("lineNumber") = Int;
overload selector("lineRangeForRange:") = NSRange, NSRange;
overload selector("lineWidth") = Float;
overload selector("linkCheckingResultWithRange:URL:") = NSTextCheckingResult, NSRange, NSURL;
overload selector("linkItemAtPath:toPath:error:") = Bool, NSString, NSString, Pointer[NSError];
overload selector("linkItemAtURL:toURL:error:") = Bool, NSURL, NSURL, Pointer[NSError];
overload selector("linkPath:toPath:handler:") = Bool, NSString, NSString, Id;
overload selector("listDescriptor") = NSAppleEventDescriptor;
overload selector("load") = Bool;
overload selector("load:") = Bool, RawPointer;
overload selector("loadAllPlugIns") = Void;
overload selector("loadAndReturnError:") = Bool, Pointer[NSError];
overload selector("loadInBackground") = Void;
overload selector("loadInForeground") = NSData;
overload selector("loadNonExecutablePlugIns") = Void;
overload selector("loadPlugIn:allowNonExecutable:") = Void, NSURL, Bool;
overload selector("loadResourceDataNotifyingClient:usingCache:") = Void, Id, Bool;
overload selector("loadSuiteWithDictionary:fromBundle:") = Void, NSDictionary, NSBundle;
overload selector("loadSuitesFromBundle:") = Void, NSBundle;
overload selector("localName") = NSString;
overload selector("localNameForName:") = NSString, NSString;
overload selector("localObjects") = NSArray;
overload selector("localTimeZone") = NSTimeZone;
overload selector("locale") = Id;
overload selector("localeIdentifier") = NSString;
overload selector("localeIdentifierFromComponents:") = NSString, NSDictionary;
overload selector("localeIdentifierFromWindowsLocaleCode:") = NSString, UInt;
overload selector("localizations") = NSArray;
overload selector("localizedCaseInsensitiveCompare:") = Int, NSString;
overload selector("localizedCompare:") = Int, NSString;
overload selector("localizedDescription") = NSString;
overload selector("localizedDescriptionForFilterName:") = NSString, NSString;
overload selector("localizedFailureReason") = NSString;
overload selector("localizedInfoDictionary") = NSDictionary;
overload selector("localizedName") = NSString;
overload selector("localizedName:locale:") = NSString, Int, NSLocale;
overload selector("localizedNameForCategory:") = NSString, NSString;
overload selector("localizedNameForFilterName:") = NSString, NSString;
overload selector("localizedNameOfStringEncoding:") = NSString, UInt;
overload selector("localizedRecoveryOptions") = NSArray;
overload selector("localizedRecoverySuggestion") = NSString;
overload selector("localizedReferenceDocumentationForFilterName:") = NSURL, NSString;
overload selector("localizedScannerWithString:") = Id, NSString;
overload selector("localizedStandardCompare:") = Int, NSString;
overload selector("localizedStringForKey:value:table:") = NSString, NSString, NSString, NSString;
overload selector("localizedStringForStatusCode:") = NSString, Int;
overload selector("localizedStringFromDate:dateStyle:timeStyle:") = NSString, NSDate, UInt, UInt;
overload selector("localizedStringFromNumber:numberStyle:") = NSString, NSNumber, UInt;
overload varargSelector("localizedStringWithFormat:") = Id, NSString;
overload selector("localizesFormat") = Bool;
overload selector("locations") = NSArray;
overload selector("lock") = Void;
overload selector("lockBeforeDate:") = Bool, NSDate;
overload selector("lockDate") = NSDate;
overload selector("lockWhenCondition:") = Void, Int;
overload selector("lockWhenCondition:beforeDate:") = Bool, Int, NSDate;
overload selector("lockWithPath:") = NSDistributedLock, NSString;
overload selector("longCharacterIsMember:") = Bool, CULong;
overload selector("longEraSymbols") = NSArray;
overload selector("longLongValue") = Int64;
overload selector("longValue") = CLong;
overload selector("lossyCString") = Pointer[CChar];
overload selector("lowercaseLetterCharacterSet") = Id;
overload selector("lowercaseString") = NSString;
overload selector("machPort") = UInt;
overload selector("magnificationFilter") = NSString;
overload selector("main") = Void;
overload selector("mainBundle") = NSBundle;
overload selector("mainDocumentURL") = NSURL;
overload selector("mainQueue") = Id;
overload selector("mainRunLoop") = NSRunLoop;
overload selector("mainThread") = NSThread;
overload selector("makeNewConnection:sender:") = Bool, NSConnection, NSConnection;
overload selector("makeObjectsPerformSelector:") = Void, SelectorHandle;
overload selector("makeObjectsPerformSelector:withObject:") = Void, SelectorHandle, Id;
overload selector("mapTableWithKeyOptions:valueOptions:") = Id, UInt, UInt;
overload selector("mapTableWithStrongToStrongObjects") = Id;
overload selector("mapTableWithStrongToWeakObjects") = Id;
overload selector("mapTableWithWeakToStrongObjects") = Id;
overload selector("mapTableWithWeakToWeakObjects") = Id;
overload selector("mask") = CALayer;
overload selector("masksToBounds") = Bool;
overload selector("matchesAppleEventCode:") = Bool, CULong;
overload selector("maxConcurrentOperationCount") = Int;
overload selector("maximum") = NSNumber;
overload selector("maximumDecimalNumber") = NSDecimalNumber;
overload selector("maximumFractionDigits") = UInt;
overload selector("maximumIntegerDigits") = UInt;
overload selector("maximumLengthOfBytesUsingEncoding:") = UInt, UInt;
overload selector("maximumRangeOfUnit:") = NSRange, UInt;
overload selector("maximumSignificantDigits") = UInt;
overload selector("member:") = Id, Id;
overload selector("memoryCapacity") = UInt;
overload selector("metadataQuery:replacementObjectForResultObject:") = Id, NSMetadataQuery, NSMetadataItem;
overload selector("metadataQuery:replacementValueForAttribute:value:") = Id, NSMetadataQuery, NSString, Id;
overload selector("methodForSelector:") = IMP, SelectorHandle;
overload selector("methodReturnLength") = UInt;
overload selector("methodReturnType") = Pointer[CChar];
overload selector("methodSignature") = NSMethodSignature;
overload selector("methodSignatureForSelector:") = NSMethodSignature, SelectorHandle;
overload selector("minificationFilter") = NSString;
overload selector("minificationFilterBias") = Float;
overload selector("minimum") = NSNumber;
overload selector("minimumDaysInFirstWeek") = UInt;
overload selector("minimumDecimalNumber") = NSDecimalNumber;
overload selector("minimumFractionDigits") = UInt;
overload selector("minimumIntegerDigits") = UInt;
overload selector("minimumRangeOfUnit:") = NSRange, UInt;
overload selector("minimumSignificantDigits") = UInt;
overload selector("minusHashTable:") = Void, NSHashTable;
overload selector("minusSet:") = Void, NSSet;
overload selector("minusSign") = NSString;
overload selector("minute") = Int;
overload selector("minuteOfHour") = Int;
overload selector("miterLimit") = Float;
overload selector("modelLayer") = Id;
overload selector("month") = Int;
overload selector("monthOfYear") = Int;
overload selector("monthSymbols") = NSArray;
overload selector("mountedVolumeURLsIncludingResourceValuesForKeys:options:") = NSArray, NSArray, UInt;
overload selector("moveItemAtPath:toPath:error:") = Bool, NSString, NSString, Pointer[NSError];
overload selector("moveItemAtURL:toURL:error:") = Bool, NSURL, NSURL, Pointer[NSError];
overload selector("movePath:toPath:handler:") = Bool, NSString, NSString, Id;
overload selector("msgid") = UInt;
overload selector("multipleThreadsEnabled") = Bool;
overload selector("multiplier") = NSNumber;
overload selector("mutableArrayValueForKey:") = NSMutableArray, NSString;
overload selector("mutableArrayValueForKeyPath:") = NSMutableArray, NSString;
overload selector("mutableBytes") = RawPointer;
overload selector("mutableCopy") = Id;
overload selector("mutableCopyWithZone:") = Id, Pointer[NSZone];
overload selector("mutableSetValueForKey:") = NSMutableSet, NSString;
overload selector("mutableSetValueForKeyPath:") = NSMutableSet, NSString;
overload selector("mutableString") = NSMutableString;
overload selector("name") = NSString;
overload selector("names") = NSArray;
overload selector("namespaceForPrefix:") = NSXMLNode, NSString;
overload selector("namespaceWithName:stringValue:") = Id, NSString, NSString;
overload selector("namespaces") = NSArray;
overload selector("needsDisplay") = Bool;
overload selector("needsDisplayForKey:") = Bool, NSString;
overload selector("needsDisplayOnBoundsChange") = Bool;
overload selector("needsLayout") = Bool;
overload selector("negativeFormat") = NSString;
overload selector("negativeInfinitySymbol") = NSString;
overload selector("negativePrefix") = NSString;
overload selector("negativeSuffix") = NSString;
overload selector("netService:didNotPublish:") = Void, NSNetService, NSDictionary;
overload selector("netService:didNotResolve:") = Void, NSNetService, NSDictionary;
overload selector("netService:didUpdateTXTRecordData:") = Void, NSNetService, NSData;
overload selector("netServiceBrowser:didFindDomain:moreComing:") = Void, NSNetServiceBrowser, NSString, Bool;
overload selector("netServiceBrowser:didFindService:moreComing:") = Void, NSNetServiceBrowser, NSNetService, Bool;
overload selector("netServiceBrowser:didNotSearch:") = Void, NSNetServiceBrowser, NSDictionary;
overload selector("netServiceBrowser:didRemoveDomain:moreComing:") = Void, NSNetServiceBrowser, NSString, Bool;
overload selector("netServiceBrowser:didRemoveService:moreComing:") = Void, NSNetServiceBrowser, NSNetService, Bool;
overload selector("netServiceBrowserDidStopSearch:") = Void, NSNetServiceBrowser;
overload selector("netServiceBrowserWillSearch:") = Void, NSNetServiceBrowser;
overload selector("netServiceDidPublish:") = Void, NSNetService;
overload selector("netServiceDidResolveAddress:") = Void, NSNetService;
overload selector("netServiceDidStop:") = Void, NSNetService;
overload selector("netServiceWillPublish:") = Void, NSNetService;
overload selector("netServiceWillResolve:") = Void, NSNetService;
overload selector("new") = Id;
overload selector("newScriptingObjectOfClass:forValueForKey:withContentsValue:properties:") = Id, Id, NSString, Id, NSDictionary;
overload selector("newlineCharacterSet") = Id;
overload selector("nextDaylightSavingTimeTransition") = NSDate;
overload selector("nextDaylightSavingTimeTransitionAfterDate:") = NSDate, NSDate;
overload selector("nextFrameTime") = Double;
overload selector("nextNode") = NSXMLNode;
overload selector("nextObject") = Id;
overload selector("nextSibling") = NSXMLNode;
overload selector("nilSymbol") = NSString;
overload selector("nodesForXPath:error:") = NSArray, NSString, Pointer[NSError];
overload selector("nonBaseCharacterSet") = Id;
overload selector("nonretainedObjectValue") = Id;
overload selector("normalizeAdjacentTextNodesPreservingCDATA:") = Void, Bool;
overload selector("notANumber") = NSDecimalNumber;
overload selector("notANumberSymbol") = NSString;
overload selector("notPredicateWithSubpredicate:") = NSPredicate, NSPredicate;
overload selector("notationDeclarationForName:") = NSXMLDTDNode, NSString;
overload selector("notationName") = NSString;
overload selector("notificationBatchingInterval") = Double;
overload selector("notificationCenterForType:") = NSDistributedNotificationCenter, NSString;
overload selector("notificationWithName:object:") = Id, NSString, Id;
overload selector("notificationWithName:object:userInfo:") = Id, NSString, Id, NSDictionary;
overload selector("null") = NSNull;
overload selector("nullDescriptor") = NSAppleEventDescriptor;
overload selector("numberFromString:") = NSNumber, NSString;
overload selector("numberOfArguments") = UInt;
overload selector("numberOfComponents") = CULong;
overload selector("numberOfItems") = Int;
overload selector("numberStyle") = UInt;
overload selector("numberWithBool:") = NSNumber, Bool;
overload selector("numberWithChar:") = NSNumber, CChar;
overload selector("numberWithDouble:") = NSNumber, Double;
overload selector("numberWithFloat:") = NSNumber, Float;
overload selector("numberWithInt:") = NSNumber, Int;
overload selector("numberWithInteger:") = NSNumber, Int;
overload selector("numberWithLong:") = NSNumber, CLong;
overload selector("numberWithLongLong:") = NSNumber, Int64;
overload selector("numberWithShort:") = NSNumber, Short;
overload selector("numberWithUnsignedChar:") = NSNumber, CUChar;
overload selector("numberWithUnsignedInt:") = NSNumber, UInt;
overload selector("numberWithUnsignedInteger:") = NSNumber, UInt;
overload selector("numberWithUnsignedLong:") = NSNumber, CULong;
overload selector("numberWithUnsignedLongLong:") = NSNumber, UInt64;
overload selector("numberWithUnsignedShort:") = NSNumber, UShort;
overload selector("objCType") = Pointer[CChar];
overload selector("object") = Id;
overload selector("objectAtIndex:") = Id, UInt;
overload selector("objectBeingTested") = Id;
overload selector("objectByApplyingXSLT:arguments:error:") = Id, NSData, NSDictionary, Pointer[NSError];
overload selector("objectByApplyingXSLTAtURL:arguments:error:") = Id, NSURL, NSDictionary, Pointer[NSError];
overload selector("objectByApplyingXSLTString:arguments:error:") = Id, NSString, NSDictionary, Pointer[NSError];
overload selector("objectEnumerator") = NSEnumerator;
overload selector("objectForInfoDictionaryKey:") = Id, NSString;
overload selector("objectForKey:") = Id, Id;
overload selector("objectIsForcedForKey:") = Bool, NSString;
overload selector("objectIsForcedForKey:inDomain:") = Bool, NSString, NSString;
overload selector("objectSpecifier") = NSScriptObjectSpecifier;
overload selector("objectSpecifierWithDescriptor:") = NSScriptObjectSpecifier, NSAppleEventDescriptor;
overload selector("objectValue") = Id;
overload selector("objectZone") = Pointer[NSZone];
overload selector("objectsAtIndexes:") = NSArray, NSIndexSet;
overload selector("objectsByEvaluatingSpecifier") = Id;
overload selector("objectsByEvaluatingWithContainers:") = Id, Id;
overload selector("objectsForKeys:notFoundMarker:") = NSArray, NSArray, Id;
overload selector("objectsForXQuery:constants:error:") = NSArray, NSString, NSDictionary, Pointer[NSError];
overload selector("objectsForXQuery:error:") = NSArray, NSString, Pointer[NSError];
overload selector("objectsPassingTest:") = NSSet, UnknownType;
overload selector("objectsWithOptions:passingTest:") = NSSet, UInt, UnknownType;
overload selector("observationInfo") = RawPointer;
overload selector("observeValueForKeyPath:ofObject:change:context:") = Void, NSString, Id, NSDictionary, RawPointer;
overload selector("offset") = Float;
overload selector("offsetInFile") = UInt64;
overload selector("one") = NSDecimalNumber;
overload selector("opacity") = Float;
overload selector("open") = Void;
overload selector("operand") = NSExpression;
overload selector("operatingSystem") = UInt;
overload selector("operatingSystemName") = NSString;
overload selector("operatingSystemVersionString") = NSString;
overload selector("operationCount") = UInt;
overload selector("operations") = NSArray;
overload selector("options") = UInt;
overload selector("orPredicateWithSubpredicates:") = NSPredicate, NSArray;
overload selector("ordinalityOfUnit:inUnit:forDate:") = UInt, UInt, UInt, NSDate;
overload selector("orthography") = NSOrthography;
overload selector("orthographyCheckingResultWithRange:orthography:") = NSTextCheckingResult, NSRange, NSOrthography;
overload selector("orthographyWithDominantScript:languageMap:") = Id, NSString, NSDictionary;
overload selector("outputFormat") = UInt;
overload selector("outputKeys") = NSArray;
overload selector("outputStreamToBuffer:capacity:") = Id, Pointer[CUChar], UInt;
overload selector("outputStreamToFileAtPath:append:") = Id, NSString, Bool;
overload selector("outputStreamToMemory") = Id;
overload selector("outputStreamWithURL:append:") = Id, NSURL, Bool;
overload selector("paddingCharacter") = NSString;
overload selector("paddingPosition") = UInt;
overload selector("paragraphRangeForRange:") = NSRange, NSRange;
overload selector("paramDescriptorForKeyword:") = NSAppleEventDescriptor, CULong;
overload selector("parameterString") = NSString;
overload selector("parent") = NSXMLNode;
overload selector("parse") = Bool;
overload selector("parser:didEndElement:namespaceURI:qualifiedName:") = Void, NSXMLParser, NSString, NSString, NSString;
overload selector("parser:didEndMappingPrefix:") = Void, NSXMLParser, NSString;
overload selector("parser:didStartElement:namespaceURI:qualifiedName:attributes:") = Void, NSXMLParser, NSString, NSString, NSString, NSDictionary;
overload selector("parser:didStartMappingPrefix:toURI:") = Void, NSXMLParser, NSString, NSString;
overload selector("parser:foundAttributeDeclarationWithName:forElement:type:defaultValue:") = Void, NSXMLParser, NSString, NSString, NSString, NSString;
overload selector("parser:foundCDATA:") = Void, NSXMLParser, NSData;
overload selector("parser:foundCharacters:") = Void, NSXMLParser, NSString;
overload selector("parser:foundComment:") = Void, NSXMLParser, NSString;
overload selector("parser:foundElementDeclarationWithName:model:") = Void, NSXMLParser, NSString, NSString;
overload selector("parser:foundExternalEntityDeclarationWithName:publicID:systemID:") = Void, NSXMLParser, NSString, NSString, NSString;
overload selector("parser:foundIgnorableWhitespace:") = Void, NSXMLParser, NSString;
overload selector("parser:foundInternalEntityDeclarationWithName:value:") = Void, NSXMLParser, NSString, NSString;
overload selector("parser:foundNotationDeclarationWithName:publicID:systemID:") = Void, NSXMLParser, NSString, NSString, NSString;
overload selector("parser:foundProcessingInstructionWithTarget:data:") = Void, NSXMLParser, NSString, NSString;
overload selector("parser:foundUnparsedEntityDeclarationWithName:publicID:systemID:notationName:") = Void, NSXMLParser, NSString, NSString, NSString, NSString;
overload selector("parser:parseErrorOccurred:") = Void, NSXMLParser, NSError;
overload selector("parser:resolveExternalEntityName:systemID:") = NSData, NSXMLParser, NSString, NSString;
overload selector("parser:validationErrorOccurred:") = Void, NSXMLParser, NSError;
overload selector("parserDidEndDocument:") = Void, NSXMLParser;
overload selector("parserDidStartDocument:") = Void, NSXMLParser;
overload selector("parserError") = NSError;
overload selector("password") = NSString;
overload selector("path") = NSString;
overload selector("pathComponents") = NSArray;
overload selector("pathContentOfSymbolicLinkAtPath:") = NSString, NSString;
overload selector("pathExtension") = NSString;
overload selector("pathForAuxiliaryExecutable:") = NSString, NSString;
overload selector("pathForResource:ofType:") = NSString, NSString, NSString;
overload selector("pathForResource:ofType:inDirectory:") = NSString, NSString, NSString, NSString;
overload selector("pathForResource:ofType:inDirectory:forLocalization:") = NSString, NSString, NSString, NSString, NSString;
overload selector("pathWithComponents:") = NSString, NSArray;
overload selector("pathsForResourcesOfType:inDirectory:") = NSArray, NSString, NSString;
overload selector("pathsForResourcesOfType:inDirectory:forLocalization:") = NSArray, NSString, NSString, NSString;
overload selector("pathsMatchingExtensions:") = NSArray, NSArray;
overload selector("perMillSymbol") = NSString;
overload selector("percentSymbol") = NSString;
overload selector("performDefaultImplementation") = Id;
overload selector("performSelector:") = Id, SelectorHandle;
overload selector("performSelector:onThread:withObject:waitUntilDone:") = Void, SelectorHandle, NSThread, Id, Bool;
overload selector("performSelector:onThread:withObject:waitUntilDone:modes:") = Void, SelectorHandle, NSThread, Id, Bool, NSArray;
overload selector("performSelector:target:argument:order:modes:") = Void, SelectorHandle, Id, Id, UInt, NSArray;
overload selector("performSelector:withObject:") = Id, SelectorHandle, Id;
overload selector("performSelector:withObject:afterDelay:") = Void, SelectorHandle, Id, Double;
overload selector("performSelector:withObject:afterDelay:inModes:") = Void, SelectorHandle, Id, Double, NSArray;
overload selector("performSelector:withObject:withObject:") = Id, SelectorHandle, Id, Id;
overload selector("performSelectorInBackground:withObject:") = Void, SelectorHandle, Id;
overload selector("performSelectorOnMainThread:withObject:waitUntilDone:") = Void, SelectorHandle, Id, Bool;
overload selector("performSelectorOnMainThread:withObject:waitUntilDone:modes:") = Void, SelectorHandle, Id, Bool, NSArray;
overload selector("persistence") = UInt;
overload selector("persistentDomainForName:") = NSDictionary, NSString;
overload selector("persistentDomainNames") = NSArray;
overload selector("physicalMemory") = UInt64;
overload selector("pipe") = Id;
overload selector("plusSign") = NSString;
overload selector("pointValue") = NSPoint;
overload selector("pointerArrayWithOptions:") = Id, UInt;
overload selector("pointerArrayWithPointerFunctions:") = Id, NSPointerFunctions;
overload selector("pointerArrayWithStrongObjects") = Id;
overload selector("pointerArrayWithWeakObjects") = Id;
overload selector("pointerAtIndex:") = RawPointer, UInt;
overload selector("pointerFunctions") = NSPointerFunctions;
overload selector("pointerFunctionsWithOptions:") = Id, UInt;
overload selector("pointerValue") = RawPointer;
overload selector("port") = Id;
overload selector("portCoderWithReceivePort:sendPort:components:") = Id, NSPort, NSPort, NSArray;
overload selector("portForName:") = NSPort, NSString;
overload selector("portForName:host:") = NSPort, NSString, NSString;
overload selector("portForName:host:nameServerPortNumber:") = NSPort, NSString, NSString, UShort;
overload selector("portList") = NSArray;
overload selector("portWithMachPort:") = NSPort, UInt;
overload selector("portWithMachPort:options:") = NSPort, UInt, UInt;
overload selector("poseAsClass:") = Void, Id;
overload selector("position") = UInt;
overload selector("positiveFormat") = NSString;
overload selector("positiveInfinitySymbol") = NSString;
overload selector("positivePrefix") = NSString;
overload selector("positiveSuffix") = NSString;
overload selector("postNotification:") = Void, NSNotification;
overload selector("postNotificationName:object:") = Void, NSString, Id;
overload selector("postNotificationName:object:userInfo:") = Void, NSString, Id, NSDictionary;
overload selector("postNotificationName:object:userInfo:deliverImmediately:") = Void, NSString, NSString, NSDictionary, Bool;
overload selector("postNotificationName:object:userInfo:options:") = Void, NSString, NSString, NSDictionary, UInt;
overload selector("precomposedStringWithCanonicalMapping") = NSString;
overload selector("precomposedStringWithCompatibilityMapping") = NSString;
overload selector("predefinedEntityDeclarationForName:") = NSXMLDTDNode, NSString;
overload selector("predefinedNamespaceForPrefix:") = NSXMLNode, NSString;
overload selector("predicate") = NSPredicate;
overload selector("predicateFormat") = NSString;
overload selector("predicateOperatorType") = UInt;
overload selector("predicateWithBlock:") = NSPredicate, UnknownType;
overload varargSelector("predicateWithFormat:") = NSPredicate, NSString;
overload selector("predicateWithFormat:argumentArray:") = NSPredicate, NSString, NSArray;
overload selector("predicateWithFormat:arguments:") = NSPredicate, NSString, va_list;
overload selector("predicateWithLeftExpression:rightExpression:customSelector:") = NSPredicate, NSExpression, NSExpression, SelectorHandle;
overload selector("predicateWithLeftExpression:rightExpression:modifier:type:options:") = NSPredicate, NSExpression, NSExpression, UInt, UInt, UInt;
overload selector("predicateWithSubstitutionVariables:") = NSPredicate, NSDictionary;
overload selector("predicateWithValue:") = NSPredicate, Bool;
overload selector("preferredFrameSize") = CGSize;
overload selector("preferredLanguages") = NSArray;
overload selector("preferredLocalizations") = NSArray;
overload selector("preferredLocalizationsFromArray:") = NSArray, NSArray;
overload selector("preferredLocalizationsFromArray:forPreferences:") = NSArray, NSArray, NSArray;
overload selector("preferredSizeOfLayer:") = CGSize, CALayer;
overload selector("prefix") = NSString;
overload selector("prefixForName:") = NSString, NSString;
overload selector("preflightAndReturnError:") = Bool, Pointer[NSError];
overload selector("prepareWithInvocationTarget:") = Id, Id;
overload selector("prependTransform:") = Void, NSAffineTransform;
overload selector("presentationLayer") = Id;
overload selector("preservesDepth") = Bool;
overload selector("previousFailureCount") = Int;
overload selector("previousNode") = NSXMLNode;
overload selector("previousSibling") = NSXMLNode;
overload selector("principalClass") = Id;
overload selector("privateFrameworksPath") = NSString;
overload selector("privateFrameworksURL") = NSURL;
overload selector("processIdentifier") = Int;
overload selector("processInfo") = NSProcessInfo;
overload selector("processName") = NSString;
overload selector("processingInstructionWithName:stringValue:") = Id, NSString, NSString;
overload selector("processorCount") = UInt;
overload selector("properties") = NSDictionary;
overload selector("propertyForKey:") = Id, NSString;
overload selector("propertyForKey:inRequest:") = Id, NSString, NSURLRequest;
overload selector("propertyForKeyIfAvailable:") = Id, NSString;
overload selector("propertyList") = Id;
overload selector("propertyList:isValidForFormat:") = Bool, Id, UInt;
overload selector("propertyListFromData:mutabilityOption:format:errorDescription:") = Id, NSData, UInt, Pointer[UInt], Pointer[NSString];
overload selector("propertyListFromStringsFileFormat") = NSDictionary;
overload selector("propertyListWithData:options:format:error:") = Id, NSData, UInt, Pointer[UInt], Pointer[NSError];
overload selector("propertyListWithStream:options:format:error:") = Id, NSInputStream, UInt, Pointer[UInt], Pointer[NSError];
overload selector("proposedCredential") = NSURLCredential;
overload selector("protectionSpace") = NSURLProtectionSpace;
overload selector("protocol") = Int;
overload selector("protocolCheckerWithTarget:protocol:") = Id, NSObject, Id;
overload selector("protocolFamily") = Int;
overload selector("protocolSpecificInformation") = NSString;
overload selector("provideImageData:bytesPerRow:origin::size::userInfo:") = Void, RawPointer, CULong, CULong, CULong, CULong, CULong, Id;
overload selector("proxyType") = NSString;
overload selector("proxyWithLocal:connection:") = NSDistantObject, Id, NSConnection;
overload selector("proxyWithTarget:connection:") = NSDistantObject, Id, NSConnection;
overload selector("publicID") = NSString;
overload selector("publish") = Void;
overload selector("publishWithOptions:") = Void, UInt;
overload selector("punctuationCharacterSet") = Id;
overload selector("quarter") = Int;
overload selector("quarterSymbols") = NSArray;
overload selector("query") = NSString;
overload selector("queuePriority") = Int;
overload selector("quoteCheckingResultWithRange:replacementString:") = NSTextCheckingResult, NSRange, NSString;
overload selector("raise") = Void;
overload varargSelector("raise:format:") = Void, NSString, NSString;
overload selector("raise:format:arguments:") = Void, NSString, NSString, va_list;
overload selector("range") = NSRange;
overload selector("rangeContainerObject") = Id;
overload selector("rangeOfCharacterFromSet:") = NSRange, NSCharacterSet;
overload selector("rangeOfCharacterFromSet:options:") = NSRange, NSCharacterSet, UInt;
overload selector("rangeOfCharacterFromSet:options:range:") = NSRange, NSCharacterSet, UInt, NSRange;
overload selector("rangeOfComposedCharacterSequenceAtIndex:") = NSRange, UInt;
overload selector("rangeOfComposedCharacterSequencesForRange:") = NSRange, NSRange;
overload selector("rangeOfData:options:range:") = NSRange, NSData, UInt, NSRange;
overload selector("rangeOfString:") = NSRange, NSString;
overload selector("rangeOfString:options:") = NSRange, NSString, UInt;
overload selector("rangeOfString:options:range:") = NSRange, NSString, UInt, NSRange;
overload selector("rangeOfString:options:range:locale:") = NSRange, NSString, UInt, NSRange, NSLocale;
overload selector("rangeOfUnit:inUnit:forDate:") = NSRange, UInt, UInt, NSDate;
overload selector("rangeOfUnit:startDate:interval:forDate:") = Bool, UInt, Pointer[NSDate], Pointer[Double], NSDate;
overload selector("rangeValue") = NSRange;
overload selector("read:maxLength:") = Int, Pointer[CUChar], UInt;
overload selector("readDataOfLength:") = NSData, UInt;
overload selector("readDataToEndOfFile") = NSData;
overload selector("readInBackgroundAndNotify") = Void;
overload selector("readInBackgroundAndNotifyForModes:") = Void, NSArray;
overload selector("readToEndOfFileInBackgroundAndNotify") = Void;
overload selector("readToEndOfFileInBackgroundAndNotifyForModes:") = Void, NSArray;
overload selector("realm") = NSString;
overload selector("reason") = NSString;
overload selector("receivePort") = NSPort;
overload selector("receiversSpecifier") = NSScriptObjectSpecifier;
overload selector("receivesCredentialSecurely") = Bool;
overload selector("reclaimResources") = Void;
overload selector("recordDescriptor") = NSAppleEventDescriptor;
overload selector("recoveryAttempter") = Id;
overload selector("rectValue") = NSRect;
overload selector("red") = Float;
overload selector("redRange") = Float;
overload selector("redSpeed") = Float;
overload selector("redo") = Void;
overload selector("redoActionName") = NSString;
overload selector("redoMenuItemTitle") = NSString;
overload selector("redoMenuTitleForUndoActionName:") = NSString, NSString;
overload selector("registerClass:") = Bool, Id;
overload selector("registerClassDescription:") = Void, NSScriptClassDescription;
overload selector("registerClassDescription:forClass:") = Void, NSClassDescription, Id;
overload selector("registerCoercer:selector:toConvertFromClass:toClass:") = Void, Id, SelectorHandle, Id, Id;
overload selector("registerCommandDescription:") = Void, NSScriptCommandDescription;
overload selector("registerDefaults:") = Void, NSDictionary;
overload selector("registerFilterName:") = Void, NSString;
overload selector("registerFilterName:constructor:classAttributes:") = Void, NSString, Id, NSDictionary;
overload selector("registerLanguage:byVendor:") = Bool, NSString, NSString;
overload selector("registerName:") = Bool, NSString;
overload selector("registerName:withNameServer:") = Bool, NSString, NSPortNameServer;
overload selector("registerPort:name:") = Bool, NSPort, NSString;
overload selector("registerPort:name:nameServerPortNumber:") = Bool, NSPort, NSString, UShort;
overload selector("registerURLHandleClass:") = Void, Id;
overload selector("registerUndoWithTarget:selector:object:") = Void, Id, SelectorHandle, Id;
overload selector("relativePath") = NSString;
overload selector("relativePosition") = UInt;
overload selector("relativeString") = NSString;
overload selector("release") = Void;
overload selector("releaseCGLContext:") = Void, CGLContextObj;
overload selector("releaseCGLPixelFormat:") = Void, CGLPixelFormatObj;
overload selector("relinquishFunction") = CCodePointer[[RawPointer,CCodePointer[[RawPointer],[UInt]]],[]];
overload selector("remoteObjects") = NSArray;
overload selector("removeAllActions") = Void;
overload selector("removeAllActionsWithTarget:") = Void, Id;
overload selector("removeAllAnimations") = Void;
overload selector("removeAllCachedResponses") = Void;
overload selector("removeAllIndexes") = Void;
overload selector("removeAllObjects") = Void;
overload selector("removeAnimationForKey:") = Void, NSString;
overload selector("removeAttribute:range:") = Void, NSString, NSRange;
overload selector("removeAttributeForName:") = Void, NSString;
overload selector("removeCachedResponseForRequest:") = Void, NSURLRequest;
overload selector("removeCharactersInRange:") = Void, NSRange;
overload selector("removeCharactersInString:") = Void, NSString;
overload selector("removeChildAtIndex:") = Void, UInt;
overload selector("removeClient:") = Void, Id;
overload selector("removeConnection:fromRunLoop:forMode:") = Void, NSConnection, NSRunLoop, NSString;
overload selector("removeCredential:forProtectionSpace:") = Void, NSURLCredential, NSURLProtectionSpace;
overload selector("removeDependency:") = Void, NSOperation;
overload selector("removeDescriptorAtIndex:") = Void, Int;
overload selector("removeDescriptorWithKeyword:") = Void, CULong;
overload selector("removeEventHandlerForEventClass:andEventID:") = Void, CULong, CULong;
overload selector("removeExportedKey:") = Void, NSString;
overload selector("removeFileAtPath:handler:") = Bool, NSString, Id;
overload selector("removeFromRunLoop:forMode:") = Void, NSRunLoop, NSString;
overload selector("removeFromSuperlayer") = Void;
overload selector("removeIndex:") = Void, UInt;
overload selector("removeIndexes:") = Void, NSIndexSet;
overload selector("removeIndexesInRange:") = Void, NSRange;
overload selector("removeItemAtPath:error:") = Bool, NSString, Pointer[NSError];
overload selector("removeItemAtURL:error:") = Bool, NSURL, Pointer[NSError];
overload selector("removeLastObject") = Void;
overload selector("removeNamespaceForPrefix:") = Void, NSString;
overload selector("removeObject:") = Void, Id;
overload selector("removeObject:inRange:") = Void, Id, NSRange;
overload selector("removeObjectAtIndex:") = Void, UInt;
overload selector("removeObjectForKey:") = Void, Id;
overload selector("removeObjectIdenticalTo:") = Void, Id;
overload selector("removeObjectIdenticalTo:inRange:") = Void, Id, NSRange;
overload selector("removeObjectsAtIndexes:") = Void, NSIndexSet;
overload selector("removeObjectsForKeys:") = Void, NSArray;
overload selector("removeObjectsFromIndices:numIndices:") = Void, Pointer[UInt], UInt;
overload selector("removeObjectsInArray:") = Void, NSArray;
overload selector("removeObjectsInRange:") = Void, NSRange;
overload selector("removeObserver:") = Void, Id;
overload selector("removeObserver:forKeyPath:") = Void, NSObject, NSString;
overload selector("removeObserver:fromObjectsAtIndexes:forKeyPath:") = Void, NSObject, NSIndexSet, NSString;
overload selector("removeObserver:name:object:") = Void, Id, NSString, Id;
overload selector("removeParamDescriptorWithKeyword:") = Void, CULong;
overload selector("removePersistentDomainForName:") = Void, NSString;
overload selector("removePointerAtIndex:") = Void, UInt;
overload selector("removePort:forMode:") = Void, NSPort, NSString;
overload selector("removePortForName:") = Bool, NSString;
overload selector("removePropertyForKey:inRequest:") = Void, NSString, NSMutableURLRequest;
overload selector("removeRequestMode:") = Void, NSString;
overload selector("removeRunLoop:") = Void, NSRunLoop;
overload selector("removeSuiteNamed:") = Void, NSString;
overload selector("removeValueAtIndex:fromPropertyWithKey:") = Void, UInt, NSString;
overload selector("removeVolatileDomainForName:") = Void, NSString;
overload selector("render") = Void;
overload selector("render:toBitmap:rowBytes:bounds:format:colorSpace:") = Void, CIImage, RawPointer, Int, CGRect, Int, CGColorSpaceRef;
overload selector("render:toIOSurface:bounds:colorSpace:") = Void, CIImage, IOSurfaceRef, CGRect, CGColorSpaceRef;
overload selector("renderInContext:") = Void, CGContextRef;
overload selector("renderMode") = NSString;
overload selector("rendererWithCGLContext:options:") = CARenderer, RawPointer, NSDictionary;
overload selector("repeatCount") = Float;
overload selector("repeatDuration") = Double;
overload selector("replaceBytesInRange:withBytes:") = Void, NSRange, RawPointer;
overload selector("replaceBytesInRange:withBytes:length:") = Void, NSRange, RawPointer, UInt;
overload selector("replaceCharactersInRange:withAttributedString:") = Void, NSRange, NSAttributedString;
overload selector("replaceCharactersInRange:withString:") = Void, NSRange, NSString;
overload selector("replaceChildAtIndex:withNode:") = Void, UInt, NSXMLNode;
overload selector("replaceItemAtURL:withItemAtURL:backupItemName:options:resultingItemURL:error:") = Bool, NSURL, NSURL, NSString, UInt, Pointer[NSURL], Pointer[NSError];
overload selector("replaceObject:withObject:") = Void, Id, Id;
overload selector("replaceObjectAtIndex:withObject:") = Void, UInt, Id;
overload selector("replaceObjectsAtIndexes:withObjects:") = Void, NSIndexSet, NSArray;
overload selector("replaceObjectsInRange:withObjectsFromArray:") = Void, NSRange, NSArray;
overload selector("replaceObjectsInRange:withObjectsFromArray:range:") = Void, NSRange, NSArray, NSRange;
overload selector("replaceOccurrencesOfString:withString:options:range:") = UInt, NSString, NSString, UInt, NSRange;
overload selector("replacePointerAtIndex:withPointer:") = Void, UInt, RawPointer;
overload selector("replaceSublayer:with:") = Void, CALayer, CALayer;
overload selector("replaceValueAtIndex:inPropertyWithKey:withValue:") = Void, UInt, NSString, Id;
overload selector("replacementCheckingResultWithRange:replacementString:") = NSTextCheckingResult, NSRange, NSString;
overload selector("replacementClassForClass:") = Id, Id;
overload selector("replacementObjectForArchiver:") = Id, NSArchiver;
overload selector("replacementObjectForCoder:") = Id, NSCoder;
overload selector("replacementObjectForKeyedArchiver:") = Id, NSKeyedArchiver;
overload selector("replacementObjectForPortCoder:") = Id, NSPortCoder;
overload selector("replacementString") = NSString;
overload selector("replyAppleEventForSuspensionID:") = NSAppleEventDescriptor, NSAppleEventManagerSuspensionID;
overload selector("replyTimeout") = Double;
overload selector("replyWithException:") = Void, NSException;
overload selector("request") = NSURLRequest;
overload selector("requestHeaderFieldsWithCookies:") = NSDictionary, NSArray;
overload selector("requestIsCacheEquivalent:toRequest:") = Bool, NSURLRequest, NSURLRequest;
overload selector("requestModes") = NSArray;
overload selector("requestTimeout") = Double;
overload selector("requestWithURL:") = Id, NSURL;
overload selector("requestWithURL:cachePolicy:timeoutInterval:") = Id, NSURL, UInt, Double;
overload selector("reservedSpaceLength") = UInt;
overload selector("resetBytesInRange:") = Void, NSRange;
overload selector("resetStandardUserDefaults") = Void;
overload selector("resetSystemTimeZone") = Void;
overload selector("resizeSublayersWithOldSize:") = Void, CGSize;
overload selector("resizeWithOldSuperlayerSize:") = Void, CGSize;
overload selector("resolve") = Void;
overload selector("resolveClassMethod:") = Bool, SelectorHandle;
overload selector("resolveInstanceMethod:") = Bool, SelectorHandle;
overload selector("resolveNamespaceForName:") = NSXMLNode, NSString;
overload selector("resolvePrefixForNamespaceURI:") = NSString, NSString;
overload selector("resolveWithTimeout:") = Void, Double;
overload selector("resolvedKeyDictionary") = NSDictionary;
overload selector("resourceData") = NSData;
overload selector("resourceDataUsingCache:") = NSData, Bool;
overload selector("resourcePath") = NSString;
overload selector("resourceSpecifier") = NSString;
overload selector("resourceURL") = NSURL;
overload selector("resourceValuesForKeys:error:") = NSDictionary, NSArray, Pointer[NSError];
overload selector("resourceValuesForKeys:fromBookmarkData:") = NSDictionary, NSArray, NSData;
overload selector("respondsToSelector:") = Bool, SelectorHandle;
overload selector("response") = NSURLResponse;
overload selector("result") = Id;
overload selector("resultAtIndex:") = Id, UInt;
overload selector("resultCount") = UInt;
overload selector("resultType") = UInt64;
overload selector("results") = NSArray;
overload selector("resume") = Bool;
overload selector("resumeData") = NSData;
overload selector("resumeExecutionWithResult:") = Void, Id;
overload selector("resumeWithSuspensionID:") = Void, NSAppleEventManagerSuspensionID;
overload selector("retain") = Id;
overload selector("retainArguments") = Void;
overload selector("retainCount") = UInt;
overload selector("returnID") = Short;
overload selector("returnType") = NSString;
overload selector("reverseObjectEnumerator") = NSEnumerator;
overload selector("reverseTransformedValue:") = Id, Id;
overload selector("reversedSortDescriptor") = Id;
overload selector("rightExpression") = NSExpression;
overload selector("rootDocument") = NSXMLDocument;
overload selector("rootElement") = NSXMLElement;
overload selector("rootObject") = Id;
overload selector("rootProxy") = NSDistantObject;
overload selector("rootProxyForConnectionWithRegisteredName:host:") = NSDistantObject, NSString, NSString;
overload selector("rootProxyForConnectionWithRegisteredName:host:usingNameServer:") = NSDistantObject, NSString, NSString, NSPortNameServer;
overload selector("rotateByDegrees:") = Void, Float;
overload selector("rotateByRadians:") = Void, Float;
overload selector("rotationMode") = NSString;
overload selector("roundingBehavior") = NSDecimalNumberHandler;
overload selector("roundingIncrement") = NSNumber;
overload selector("roundingMode") = UInt;
overload selector("run") = Void;
overload selector("runActionForKey:object:arguments:") = Void, NSString, Id, NSDictionary;
overload selector("runInNewThread") = Void;
overload selector("runLoopModes") = NSArray;
overload selector("runMode:beforeDate:") = Bool, NSString, NSDate;
overload selector("runUntilDate:") = Void, NSDate;
overload selector("samplerWithImage:") = CISampler, CIImage;
overload varargSelector("samplerWithImage:keysAndValues:") = CISampler, CIImage, Id;
overload selector("samplerWithImage:options:") = CISampler, CIImage, NSDictionary;
overload selector("saveOptions") = UInt;
overload selector("scale") = Short;
overload selector("scaleBy:") = Void, Float;
overload selector("scaleRange") = Float;
overload selector("scaleSpeed") = Float;
overload selector("scaleXBy:yBy:") = Void, Float, Float;
overload selector("scanCharactersFromSet:intoString:") = Bool, NSCharacterSet, Pointer[NSString];
overload selector("scanDecimal:") = Bool, Pointer[NSDecimal];
overload selector("scanDouble:") = Bool, Pointer[Double];
overload selector("scanFloat:") = Bool, Pointer[Float];
overload selector("scanHexDouble:") = Bool, Pointer[Double];
overload selector("scanHexFloat:") = Bool, Pointer[Float];
overload selector("scanHexInt:") = Bool, Pointer[UInt];
overload selector("scanHexLongLong:") = Bool, Pointer[UInt64];
overload selector("scanInt:") = Bool, Pointer[Int];
overload selector("scanInteger:") = Bool, Pointer[Int];
overload selector("scanLocation") = UInt;
overload selector("scanLongLong:") = Bool, Pointer[Int64];
overload selector("scanString:intoString:") = Bool, NSString, Pointer[NSString];
overload selector("scanUpToCharactersFromSet:intoString:") = Bool, NSCharacterSet, Pointer[NSString];
overload selector("scanUpToString:intoString:") = Bool, NSString, Pointer[NSString];
overload selector("scannerWithString:") = Id, NSString;
overload selector("scheduleInRunLoop:forMode:") = Void, NSRunLoop, NSString;
overload selector("scheduledTimerWithTimeInterval:invocation:repeats:") = NSTimer, Double, NSInvocation, Bool;
overload selector("scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:") = NSTimer, Double, Id, SelectorHandle, Id, Bool;
overload selector("scheme") = NSString;
overload selector("scriptErrorExpectedTypeDescriptor") = NSAppleEventDescriptor;
overload selector("scriptErrorNumber") = Int;
overload selector("scriptErrorOffendingObjectDescriptor") = NSAppleEventDescriptor;
overload selector("scriptErrorString") = NSString;
overload selector("scriptingBeginsWith:") = Bool, Id;
overload selector("scriptingContains:") = Bool, Id;
overload selector("scriptingEndsWith:") = Bool, Id;
overload selector("scriptingIsEqualTo:") = Bool, Id;
overload selector("scriptingIsGreaterThan:") = Bool, Id;
overload selector("scriptingIsGreaterThanOrEqualTo:") = Bool, Id;
overload selector("scriptingIsLessThan:") = Bool, Id;
overload selector("scriptingIsLessThanOrEqualTo:") = Bool, Id;
overload selector("scriptingProperties") = NSDictionary;
overload selector("scriptingValueForSpecifier:") = Id, NSScriptObjectSpecifier;
overload selector("scrollMode") = NSString;
overload selector("scrollPoint:") = Void, CGPoint;
overload selector("scrollRectToVisible:") = Void, CGRect;
overload selector("scrollToPoint:") = Void, CGPoint;
overload selector("scrollToRect:") = Void, CGRect;
overload selector("searchForAllDomains") = Void;
overload selector("searchForBrowsableDomains") = Void;
overload selector("searchForRegistrationDomains") = Void;
overload selector("searchForServicesOfType:inDomain:") = Void, NSString, NSString;
overload selector("searchScopes") = NSArray;
overload selector("second") = Int;
overload selector("secondOfMinute") = Int;
overload selector("secondaryGroupingSize") = UInt;
overload selector("secondsFromGMT") = Int;
overload selector("secondsFromGMTForDate:") = Int, NSDate;
overload selector("seed") = UInt;
overload selector("seekToEndOfFile") = UInt64;
overload selector("seekToFileOffset:") = Void, UInt64;
overload selector("selector") = SelectorHandle;
overload selector("selectorForCommand:") = SelectorHandle, NSScriptCommandDescription;
overload selector("self") = Id;
overload selector("sendBeforeDate:") = Bool, NSDate;
overload selector("sendBeforeDate:components:from:reserved:") = Bool, NSDate, NSMutableArray, NSPort, UInt;
overload selector("sendBeforeDate:msgid:components:from:reserved:") = Bool, NSDate, UInt, NSMutableArray, NSPort, UInt;
overload selector("sendPort") = NSPort;
overload selector("sendSynchronousRequest:returningResponse:error:") = NSData, NSURLRequest, Pointer[NSURLResponse], Pointer[NSError];
overload selector("sender") = Id;
overload selector("serverTrust") = SecTrustRef;
overload selector("serviceConnectionWithName:rootObject:") = Id, NSString, Id;
overload selector("serviceConnectionWithName:rootObject:usingNameServer:") = Id, NSString, Id, NSPortNameServer;
overload selector("servicePortWithName:") = NSPort, NSString;
overload selector("set") = Id;
overload selector("setAMSymbol:") = Void, NSString;
overload selector("setAbbreviationDictionary:") = Void, NSDictionary;
overload selector("setAcquireFunction:") = Void, CCodePointer[[RawPointer,CCodePointer[[RawPointer],[UInt]],CChar],[RawPointer]];
overload selector("setActionName:") = Void, NSString;
overload selector("setActions:") = Void, NSDictionary;
overload selector("setAdditive:") = Void, Bool;
overload selector("setAffineTransform:") = Void, CGAffineTransform;
overload selector("setAlignmentMode:") = Void, NSString;
overload selector("setAllHTTPHeaderFields:") = Void, NSDictionary;
overload selector("setAllowsFloats:") = Void, Bool;
overload selector("setAlphaRange:") = Void, Float;
overload selector("setAlphaSpeed:") = Void, Float;
overload selector("setAlwaysShowsDecimalSeparator:") = Void, Bool;
overload selector("setAnchorPoint:") = Void, CGPoint;
overload selector("setAnchorPointZ:") = Void, Float;
overload selector("setAnimationDuration:") = Void, Double;
overload selector("setAnimationTimingFunction:") = Void, CAMediaTimingFunction;
overload selector("setAnimations:") = Void, NSArray;
overload selector("setArgument:atIndex:") = Void, RawPointer, Int;
overload selector("setArguments:") = Void, NSArray;
overload selector("setArray:") = Void, NSArray;
overload selector("setAsynchronous:") = Void, Bool;
overload selector("setAttributeDescriptor:forKeyword:") = Void, NSAppleEventDescriptor, CULong;
overload selector("setAttributedString:") = Void, NSAttributedString;
overload selector("setAttributedStringForNil:") = Void, NSAttributedString;
overload selector("setAttributedStringForNotANumber:") = Void, NSAttributedString;
overload selector("setAttributedStringForZero:") = Void, NSAttributedString;
overload selector("setAttributes:") = Void, NSArray;
overload selector("setAttributes:forExportedKey:") = Void, NSDictionary, NSString;
overload selector("setAttributes:ofItemAtPath:error:") = Bool, NSDictionary, NSString, Pointer[NSError];
overload selector("setAttributes:range:") = Void, NSDictionary, NSRange;
overload selector("setAttributesAsDictionary:") = Void, NSDictionary;
overload selector("setAutoresizingMask:") = Void, UInt;
overload selector("setAutoreverses:") = Void, Bool;
overload selector("setBackgroundColor:") = Void, CGColorRef;
overload selector("setBackgroundFilters:") = Void, NSArray;
overload selector("setBaseSpecifier:") = Void, NSScriptObjectSpecifier;
overload selector("setBeginTime:") = Void, Double;
overload selector("setBirthRate:") = Void, Float;
overload selector("setBlueRange:") = Void, Float;
overload selector("setBlueSpeed:") = Void, Float;
overload selector("setBool:forKey:") = Void, Bool, NSString;
overload selector("setBorderColor:") = Void, CGColorRef;
overload selector("setBorderWidth:") = Void, Float;
overload selector("setBounds:") = Void, CGRect;
overload selector("setByAddingObject:") = NSSet, Id;
overload selector("setByAddingObjectsFromArray:") = NSSet, NSArray;
overload selector("setByAddingObjectsFromSet:") = NSSet, NSSet;
overload selector("setByValue:") = Void, Id;
overload selector("setCachePolicy:") = Void, UInt;
overload selector("setCalculationMode:") = Void, NSString;
overload selector("setCalendar:") = Void, NSCalendar;
overload selector("setCalendarFormat:") = Void, NSString;
overload selector("setCaseSensitive:") = Void, Bool;
overload selector("setCharacterEncoding:") = Void, NSString;
overload selector("setCharactersToBeSkipped:") = Void, NSCharacterSet;
overload selector("setChildSpecifier:") = Void, NSScriptObjectSpecifier;
overload selector("setChildren:") = Void, NSArray;
overload selector("setClass:forClassName:") = Void, Id, NSString;
overload selector("setClassAttributes:") = Void, NSDictionary;
overload selector("setClassName:forClass:") = Void, NSString, Id;
overload selector("setColor:") = Void, CGColorRef;
overload selector("setColors:") = Void, NSArray;
overload selector("setCompletionBlock:") = Void, UnknownType;
overload selector("setCompositingFilter:") = Void, Id;
overload selector("setConstraints:") = Void, NSArray;
overload selector("setContainerClassDescription:") = Void, NSScriptClassDescription;
overload selector("setContainerIsObjectBeingTested:") = Void, Bool;
overload selector("setContainerIsRangeContainerObject:") = Void, Bool;
overload selector("setContainerSpecifier:") = Void, NSScriptObjectSpecifier;
overload selector("setContents:") = Void, Id;
overload selector("setContentsCenter:") = Void, CGRect;
overload selector("setContentsGravity:") = Void, NSString;
overload selector("setContentsRect:") = Void, CGRect;
overload selector("setCookie:") = Void, NSHTTPCookie;
overload selector("setCookieAcceptPolicy:") = Void, UInt;
overload selector("setCookies:forURL:mainDocumentURL:") = Void, NSArray, NSURL, NSURL;
overload selector("setCornerRadius:") = Void, Float;
overload selector("setCount:") = Void, UInt;
overload selector("setCountLimit:") = Void, UInt;
overload selector("setCredential:forProtectionSpace:") = Void, NSURLCredential, NSURLProtectionSpace;
overload selector("setCumulative:") = Void, Bool;
overload selector("setCurrencyCode:") = Void, NSString;
overload selector("setCurrencyDecimalSeparator:") = Void, NSString;
overload selector("setCurrencyGroupingSeparator:") = Void, NSString;
overload selector("setCurrencySymbol:") = Void, NSString;
overload selector("setCurrentAppleEventAndReplyEventWithSuspensionID:") = Void, NSAppleEventManagerSuspensionID;
overload selector("setCurrentDirectoryPath:") = Void, NSString;
overload selector("setDTD:") = Void, NSXMLDTD;
overload selector("setDTDKind:") = Void, UInt;
overload selector("setData:") = Void, NSData;
overload selector("setDateFormat:") = Void, NSString;
overload selector("setDateStyle:") = Void, UInt;
overload selector("setDay:") = Void, Int;
overload selector("setDecimalSeparator:") = Void, NSString;
overload selector("setDefaultBehavior:") = Void, Id;
overload selector("setDefaultCredential:forProtectionSpace:") = Void, NSURLCredential, NSURLProtectionSpace;
overload selector("setDefaultDate:") = Void, NSDate;
overload selector("setDefaultFormatterBehavior:") = Void, UInt;
overload selector("setDefaultNameServerPortNumber:") = Void, UShort;
overload selector("setDefaultTimeZone:") = Void, NSTimeZone;
overload selector("setDefaults") = Void;
overload selector("setDelegate:") = Void, Id;
overload selector("setDeletesFileUponFailure:") = Void, Bool;
overload selector("setDescriptionFunction:") = Void, CCodePointer[[RawPointer],[NSString]];
overload selector("setDescriptor:forKeyword:") = Void, NSAppleEventDescriptor, CULong;
overload selector("setDestination:allowOverwrite:") = Void, NSString, Bool;
overload selector("setDictionary:") = Void, NSDictionary;
overload selector("setDirectParameter:") = Void, Id;
overload selector("setDisableActions:") = Void, Bool;
overload selector("setDiskCapacity:") = Void, UInt;
overload selector("setDocumentContentKind:") = Void, UInt;
overload selector("setDoesRelativeDateFormatting:") = Void, Bool;
overload selector("setDouble:forKey:") = Void, Double, NSString;
overload selector("setDoubleSided:") = Void, Bool;
overload selector("setDuration:") = Void, Double;
overload selector("setEdgeAntialiasingMask:") = Void, UInt;
overload selector("setEmissionLatitude:") = Void, Float;
overload selector("setEmissionLongitude:") = Void, Float;
overload selector("setEmissionRange:") = Void, Float;
overload selector("setEmitterCells:") = Void, NSArray;
overload selector("setEmitterDepth:") = Void, Float;
overload selector("setEmitterMode:") = Void, NSString;
overload selector("setEmitterPosition:") = Void, CGPoint;
overload selector("setEmitterShape:") = Void, NSString;
overload selector("setEmitterSize:") = Void, CGSize;
overload selector("setEmitterZPosition:") = Void, Float;
overload selector("setEnabled:") = Void, Bool;
overload selector("setEndPoint:") = Void, CGPoint;
overload selector("setEndProgress:") = Void, Float;
overload selector("setEndSpecifier:") = Void, NSScriptObjectSpecifier;
overload selector("setEndSubelementIdentifier:") = Void, UInt;
overload selector("setEndSubelementIndex:") = Void, Int;
overload selector("setEnvironment:") = Void, NSDictionary;
overload selector("setEra:") = Void, Int;
overload selector("setEraSymbols:") = Void, NSArray;
overload selector("setEvaluationErrorNumber:") = Void, Int;
overload selector("setEventHandler:andSelector:forEventClass:andEventID:") = Void, Id, SelectorHandle, CULong, CULong;
overload selector("setEvictsObjectsWithDiscardedContent:") = Void, Bool;
overload selector("setExponentSymbol:") = Void, NSString;
overload selector("setFillColor:") = Void, CGColorRef;
overload selector("setFillMode:") = Void, NSString;
overload selector("setFillRule:") = Void, NSString;
overload selector("setFilter:") = Void, Id;
overload selector("setFilters:") = Void, NSArray;
overload selector("setFireDate:") = Void, NSDate;
overload selector("setFirstWeekday:") = Void, UInt;
overload selector("setFloat:forKey:") = Void, Float, NSString;
overload selector("setFont:") = Void, CFTypeRef;
overload selector("setFontSize:") = Void, Float;
overload selector("setForegroundColor:") = Void, CGColorRef;
overload selector("setFormat:") = Void, NSString;
overload selector("setFormatWidth:") = Void, UInt;
overload selector("setFormatterBehavior:") = Void, UInt;
overload selector("setFrame:") = Void, CGRect;
overload selector("setFromValue:") = Void, Id;
overload selector("setGeneratesCalendarDates:") = Void, Bool;
overload selector("setGeneratesDecimalNumbers:") = Void, Bool;
overload selector("setGeometryFlipped:") = Void, Bool;
overload selector("setGreenRange:") = Void, Float;
overload selector("setGreenSpeed:") = Void, Float;
overload selector("setGregorianStartDate:") = Void, NSDate;
overload selector("setGroupingAttributes:") = Void, NSArray;
overload selector("setGroupingSeparator:") = Void, NSString;
overload selector("setGroupingSize:") = Void, UInt;
overload selector("setGroupsByEvent:") = Void, Bool;
overload selector("setHTTPBody:") = Void, NSData;
overload selector("setHTTPBodyStream:") = Void, NSInputStream;
overload selector("setHTTPMethod:") = Void, NSString;
overload selector("setHTTPShouldHandleCookies:") = Void, Bool;
overload selector("setHasThousandSeparators:") = Void, Bool;
overload selector("setHashFunction:") = Void, CCodePointer[[RawPointer,CCodePointer[[RawPointer],[UInt]]],[UInt]];
overload selector("setHidden:") = Void, Bool;
overload selector("setHostCacheEnabled:") = Void, Bool;
overload selector("setHour:") = Void, Int;
overload selector("setImage:") = Void, CIImage;
overload selector("setImage:dirtyRect:") = Void, CIImage, CGRect;
overload selector("setIndependentConversationQueueing:") = Void, Bool;
overload selector("setIndex:") = Void, Int;
overload selector("setInsertionClassDescription:") = Void, NSScriptClassDescription;
overload selector("setInstanceAlphaOffset:") = Void, Float;
overload selector("setInstanceBlueOffset:") = Void, Float;
overload selector("setInstanceColor:") = Void, CGColorRef;
overload selector("setInstanceCount:") = Void, Int;
overload selector("setInstanceDelay:") = Void, Double;
overload selector("setInstanceGreenOffset:") = Void, Float;
overload selector("setInstanceRedOffset:") = Void, Float;
overload selector("setInstanceTransform:") = Void, CATransform3D;
overload selector("setInteger:forKey:") = Void, Int, NSString;
overload selector("setInternationalCurrencySymbol:") = Void, NSString;
overload selector("setIsEqualFunction:") = Void, CCodePointer[[RawPointer,RawPointer,CCodePointer[[RawPointer],[UInt]]],[CChar]];
overload selector("setKey:") = Void, NSString;
overload selector("setKeyPath:") = Void, NSString;
overload selector("setKeyTimes:") = Void, NSArray;
overload selector("setKeys:triggerChangeNotificationsForDependentKey:") = Void, NSArray, NSString;
overload selector("setLaunchPath:") = Void, NSString;
overload selector("setLayer:") = Void, CALayer;
overload selector("setLayoutManager:") = Void, Id;
overload selector("setLength:") = Void, UInt;
overload selector("setLenient:") = Void, Bool;
overload selector("setLevelsOfDetail:") = Void, CULong;
overload selector("setLevelsOfDetailBias:") = Void, CULong;
overload selector("setLevelsOfUndo:") = Void, UInt;
overload selector("setLifetime:") = Void, Float;
overload selector("setLifetimeRange:") = Void, Float;
overload selector("setLineCap:") = Void, NSString;
overload selector("setLineDashPattern:") = Void, NSArray;
overload selector("setLineDashPhase:") = Void, Float;
overload selector("setLineJoin:") = Void, NSString;
overload selector("setLineWidth:") = Void, Float;
overload selector("setLocale:") = Void, NSLocale;
overload selector("setLocalizesFormat:") = Void, Bool;
overload selector("setLocations:") = Void, NSArray;
overload selector("setLongEraSymbols:") = Void, NSArray;
overload selector("setMIMEType:") = Void, NSString;
overload selector("setMagnificationFilter:") = Void, NSString;
overload selector("setMainDocumentURL:") = Void, NSURL;
overload selector("setMask:") = Void, CALayer;
overload selector("setMasksToBounds:") = Void, Bool;
overload selector("setMaxConcurrentOperationCount:") = Void, Int;
overload selector("setMaximum:") = Void, NSNumber;
overload selector("setMaximumFractionDigits:") = Void, UInt;
overload selector("setMaximumIntegerDigits:") = Void, UInt;
overload selector("setMaximumSignificantDigits:") = Void, UInt;
overload selector("setMemoryCapacity:") = Void, UInt;
overload selector("setMinificationFilter:") = Void, NSString;
overload selector("setMinificationFilterBias:") = Void, Float;
overload selector("setMinimum:") = Void, NSNumber;
overload selector("setMinimumDaysInFirstWeek:") = Void, UInt;
overload selector("setMinimumFractionDigits:") = Void, UInt;
overload selector("setMinimumIntegerDigits:") = Void, UInt;
overload selector("setMinimumSignificantDigits:") = Void, UInt;
overload selector("setMinusSign:") = Void, NSString;
overload selector("setMinute:") = Void, Int;
overload selector("setMiterLimit:") = Void, Float;
overload selector("setMonth:") = Void, Int;
overload selector("setMonthSymbols:") = Void, NSArray;
overload selector("setMsgid:") = Void, UInt;
overload selector("setMultiplier:") = Void, NSNumber;
overload selector("setName:") = Void, NSString;
overload selector("setNamespaces:") = Void, NSArray;
overload selector("setNeedsDisplay") = Void;
overload selector("setNeedsDisplayInRect:") = Void, CGRect;
overload selector("setNeedsDisplayOnBoundsChange:") = Void, Bool;
overload selector("setNeedsLayout") = Void;
overload selector("setNegativeFormat:") = Void, NSString;
overload selector("setNegativeInfinitySymbol:") = Void, NSString;
overload selector("setNegativePrefix:") = Void, NSString;
overload selector("setNegativeSuffix:") = Void, NSString;
overload selector("setNilSymbol:") = Void, NSString;
overload selector("setNilValueForKey:") = Void, NSString;
overload selector("setNotANumberSymbol:") = Void, NSString;
overload selector("setNotationName:") = Void, NSString;
overload selector("setNotificationBatchingInterval:") = Void, Double;
overload selector("setNumberStyle:") = Void, UInt;
overload selector("setObject:forKey:") = Void, Id, Id;
overload selector("setObject:forKey:cost:") = Void, Id, Id, UInt;
overload selector("setObjectBeingTested:") = Void, Id;
overload selector("setObjectValue:") = Void, Id;
overload selector("setObjectZone:") = Void, Pointer[NSZone];
overload selector("setObservationInfo:") = Void, RawPointer;
overload selector("setOpacity:") = Void, Float;
overload selector("setOpaque:") = Void, Bool;
overload selector("setOutputFormat:") = Void, UInt;
overload selector("setPMSymbol:") = Void, NSString;
overload selector("setPaddingCharacter:") = Void, NSString;
overload selector("setPaddingPosition:") = Void, UInt;
overload selector("setParamDescriptor:forKeyword:") = Void, NSAppleEventDescriptor, CULong;
overload selector("setPartialStringValidationEnabled:") = Void, Bool;
overload selector("setPath:") = Void, CGPathRef;
overload selector("setPerMillSymbol:") = Void, NSString;
overload selector("setPercentSymbol:") = Void, NSString;
overload selector("setPersistentDomain:forName:") = Void, NSDictionary, NSString;
overload selector("setPlusSign:") = Void, NSString;
overload selector("setPosition:") = Void, CGPoint;
overload selector("setPositiveFormat:") = Void, NSString;
overload selector("setPositiveInfinitySymbol:") = Void, NSString;
overload selector("setPositivePrefix:") = Void, NSString;
overload selector("setPositiveSuffix:") = Void, NSString;
overload selector("setPredicate:") = Void, NSPredicate;
overload selector("setPreservesDepth:") = Void, Bool;
overload selector("setProcessName:") = Void, NSString;
overload selector("setProperty:forKey:") = Bool, Id, NSString;
overload selector("setProperty:forKey:inRequest:") = Void, Id, NSString, NSMutableURLRequest;
overload selector("setProtocolForProxy:") = Void, Id;
overload selector("setProtocolSpecificInformation:") = Void, NSString;
overload selector("setPublicID:") = Void, NSString;
overload selector("setQuarter:") = Void, Int;
overload selector("setQuarterSymbols:") = Void, NSArray;
overload selector("setQueuePriority:") = Void, Int;
overload selector("setROISelector:") = Void, SelectorHandle;
overload selector("setRangeContainerObject:") = Void, Id;
overload selector("setReceiversSpecifier:") = Void, NSScriptObjectSpecifier;
overload selector("setRedRange:") = Void, Float;
overload selector("setRedSpeed:") = Void, Float;
overload selector("setRelativePosition:") = Void, UInt;
overload selector("setRelinquishFunction:") = Void, CCodePointer[[RawPointer,CCodePointer[[RawPointer],[UInt]]],[]];
overload selector("setRemovedOnCompletion:") = Void, Bool;
overload selector("setRenderMode:") = Void, NSString;
overload selector("setRepeatCount:") = Void, Float;
overload selector("setRepeatDuration:") = Void, Double;
overload selector("setReplyTimeout:") = Void, Double;
overload selector("setRepresentation") = NSSet;
overload selector("setRequestTimeout:") = Void, Double;
overload selector("setResourceData:") = Bool, NSData;
overload selector("setResourceValue:forKey:error:") = Bool, Id, NSString, Pointer[NSError];
overload selector("setResourceValues:error:") = Bool, NSDictionary, Pointer[NSError];
overload selector("setReturnValue:") = Void, RawPointer;
overload selector("setRootElement:") = Void, NSXMLNode;
overload selector("setRootObject:") = Void, Id;
overload selector("setRotationMode:") = Void, NSString;
overload selector("setRoundingBehavior:") = Void, NSDecimalNumberHandler;
overload selector("setRoundingIncrement:") = Void, NSNumber;
overload selector("setRoundingMode:") = Void, UInt;
overload selector("setRunLoopModes:") = Void, NSArray;
overload selector("setScale:") = Void, Float;
overload selector("setScaleRange:") = Void, Float;
overload selector("setScaleSpeed:") = Void, Float;
overload selector("setScanLocation:") = Void, UInt;
overload selector("setScriptErrorExpectedTypeDescriptor:") = Void, NSAppleEventDescriptor;
overload selector("setScriptErrorNumber:") = Void, Int;
overload selector("setScriptErrorOffendingObjectDescriptor:") = Void, NSAppleEventDescriptor;
overload selector("setScriptErrorString:") = Void, NSString;
overload selector("setScriptingProperties:") = Void, NSDictionary;
overload selector("setScrollMode:") = Void, NSString;
overload selector("setSearchScopes:") = Void, NSArray;
overload selector("setSecond:") = Void, Int;
overload selector("setSecondaryGroupingSize:") = Void, UInt;
overload selector("setSeed:") = Void, UInt;
overload selector("setSelector:") = Void, SelectorHandle;
overload selector("setSet:") = Void, NSSet;
overload selector("setShadowColor:") = Void, CGColorRef;
overload selector("setShadowOffset:") = Void, CGSize;
overload selector("setShadowOpacity:") = Void, Float;
overload selector("setShadowRadius:") = Void, Float;
overload selector("setSharedScriptSuiteRegistry:") = Void, NSScriptSuiteRegistry;
overload selector("setSharedURLCache:") = Void, NSURLCache;
overload selector("setShortMonthSymbols:") = Void, NSArray;
overload selector("setShortQuarterSymbols:") = Void, NSArray;
overload selector("setShortStandaloneMonthSymbols:") = Void, NSArray;
overload selector("setShortStandaloneQuarterSymbols:") = Void, NSArray;
overload selector("setShortStandaloneWeekdaySymbols:") = Void, NSArray;
overload selector("setShortWeekdaySymbols:") = Void, NSArray;
overload selector("setShouldProcessNamespaces:") = Void, Bool;
overload selector("setShouldReportNamespacePrefixes:") = Void, Bool;
overload selector("setShouldResolveExternalEntities:") = Void, Bool;
overload selector("setSizeFunction:") = Void, CCodePointer[[RawPointer],[UInt]];
overload selector("setSortDescriptors:") = Void, NSArray;
overload selector("setSpeed:") = Void, Float;
overload selector("setSpin:") = Void, Float;
overload selector("setSpinRange:") = Void, Float;
overload selector("setStackSize:") = Void, UInt;
overload selector("setStandalone:") = Void, Bool;
overload selector("setStandaloneMonthSymbols:") = Void, NSArray;
overload selector("setStandaloneQuarterSymbols:") = Void, NSArray;
overload selector("setStandaloneWeekdaySymbols:") = Void, NSArray;
overload selector("setStandardError:") = Void, Id;
overload selector("setStandardInput:") = Void, Id;
overload selector("setStandardOutput:") = Void, Id;
overload selector("setStartPoint:") = Void, CGPoint;
overload selector("setStartProgress:") = Void, Float;
overload selector("setStartSpecifier:") = Void, NSScriptObjectSpecifier;
overload selector("setStartSubelementIdentifier:") = Void, UInt;
overload selector("setStartSubelementIndex:") = Void, Int;
overload selector("setString:") = Void, NSString;
overload selector("setStringValue:") = Void, NSString;
overload selector("setStringValue:resolvingEntities:") = Void, NSString, Bool;
overload selector("setStrokeColor:") = Void, CGColorRef;
overload selector("setStyle:") = Void, NSDictionary;
overload selector("setSublayerTransform:") = Void, CATransform3D;
overload selector("setSublayers:") = Void, NSArray;
overload selector("setSubtype:") = Void, NSString;
overload selector("setSuspended:") = Void, Bool;
overload selector("setSystemID:") = Void, NSString;
overload selector("setTXTRecordData:") = Bool, NSData;
overload selector("setTarget:") = Void, Id;
overload selector("setTest:") = Void, NSScriptWhoseTest;
overload selector("setTextAttributesForNegativeInfinity:") = Void, NSDictionary;
overload selector("setTextAttributesForNegativeValues:") = Void, NSDictionary;
overload selector("setTextAttributesForNil:") = Void, NSDictionary;
overload selector("setTextAttributesForNotANumber:") = Void, NSDictionary;
overload selector("setTextAttributesForPositiveInfinity:") = Void, NSDictionary;
overload selector("setTextAttributesForPositiveValues:") = Void, NSDictionary;
overload selector("setTextAttributesForZero:") = Void, NSDictionary;
overload selector("setThousandSeparator:") = Void, NSString;
overload selector("setThreadPriority:") = Bool, Double;
overload selector("setTileSize:") = Void, CGSize;
overload selector("setTimeOffset:") = Void, Double;
overload selector("setTimeStyle:") = Void, UInt;
overload selector("setTimeZone:") = Void, NSTimeZone;
overload selector("setTimeoutInterval:") = Void, Double;
overload selector("setTimingFunction:") = Void, CAMediaTimingFunction;
overload selector("setTimingFunctions:") = Void, NSArray;
overload selector("setToValue:") = Void, Id;
overload selector("setTopLevelObject:") = Void, Id;
overload selector("setTotalCostLimit:") = Void, UInt;
overload selector("setTransform:") = Void, CATransform3D;
overload selector("setTransformStruct:") = Void, NSAffineTransformStruct;
overload selector("setTruncationMode:") = Void, NSString;
overload selector("setTwoDigitStartDate:") = Void, NSDate;
overload selector("setType:") = Void, NSString;
overload selector("setURI:") = Void, NSString;
overload selector("setURL:") = Void, NSURL;
overload selector("setURL:forKey:") = Void, NSURL, NSString;
overload selector("setUniqueID:") = Void, Id;
overload selector("setUsesGroupingSeparator:") = Void, Bool;
overload selector("setUsesSignificantDigits:") = Void, Bool;
overload selector("setUsesStrongWriteBarrier:") = Void, Bool;
overload selector("setUsesWeakReadAndWriteBarriers:") = Void, Bool;
overload selector("setValue:forHTTPHeaderField:") = Void, NSString, NSString;
overload selector("setValue:forKey:") = Void, Id, NSString;
overload selector("setValue:forKeyPath:") = Void, Id, NSString;
overload selector("setValue:forUndefinedKey:") = Void, Id, NSString;
overload selector("setValueFunction:") = Void, CAValueFunction;
overload selector("setValueListAttributes:") = Void, NSArray;
overload selector("setValueTransformer:forName:") = Void, NSValueTransformer, NSString;
overload selector("setValues:") = Void, NSArray;
overload selector("setValuesForKeysWithDictionary:") = Void, NSDictionary;
overload selector("setVelocity:") = Void, Float;
overload selector("setVelocityRange:") = Void, Float;
overload selector("setVersion:") = Void, Int;
overload selector("setVeryShortMonthSymbols:") = Void, NSArray;
overload selector("setVeryShortStandaloneMonthSymbols:") = Void, NSArray;
overload selector("setVeryShortStandaloneWeekdaySymbols:") = Void, NSArray;
overload selector("setVeryShortWeekdaySymbols:") = Void, NSArray;
overload selector("setVolatileDomain:forName:") = Void, NSDictionary, NSString;
overload selector("setWeek:") = Void, Int;
overload selector("setWeekday:") = Void, Int;
overload selector("setWeekdayOrdinal:") = Void, Int;
overload selector("setWeekdaySymbols:") = Void, NSArray;
overload selector("setWithArray:") = Id, NSArray;
overload selector("setWithCapacity:") = Id, UInt;
overload selector("setWithObject:") = Id, Id;
overload varargSelector("setWithObjects:") = Id, Id;
overload selector("setWithObjects:count:") = Id, Pointer[Id], UInt;
overload selector("setWithSet:") = Id, NSSet;
overload selector("setWrapped:") = Void, Bool;
overload selector("setXAcceleration:") = Void, Float;
overload selector("setYAcceleration:") = Void, Float;
overload selector("setYear:") = Void, Int;
overload selector("setZAcceleration:") = Void, Float;
overload selector("setZPosition:") = Void, Float;
overload selector("setZeroSymbol:") = Void, NSString;
overload selector("shadowColor") = CGColorRef;
overload selector("shadowOffset") = CGSize;
overload selector("shadowOpacity") = Float;
overload selector("shadowRadius") = Float;
overload selector("shapeWithRect:") = Id, CGRect;
overload selector("sharedAppleEventManager") = NSAppleEventManager;
overload selector("sharedCoercionHandler") = NSScriptCoercionHandler;
overload selector("sharedCredentialStorage") = NSURLCredentialStorage;
overload selector("sharedFrameworksPath") = NSString;
overload selector("sharedFrameworksURL") = NSURL;
overload selector("sharedHTTPCookieStorage") = NSHTTPCookieStorage;
overload selector("sharedInstance") = Id;
overload selector("sharedScriptExecutionContext") = NSScriptExecutionContext;
overload selector("sharedScriptSuiteRegistry") = NSScriptSuiteRegistry;
overload selector("sharedSupportPath") = NSString;
overload selector("sharedSupportURL") = NSURL;
overload selector("sharedURLCache") = NSURLCache;
overload selector("shiftIndexesStartingAtIndex:by:") = Void, UInt, Int;
overload selector("shortMonthSymbols") = NSArray;
overload selector("shortQuarterSymbols") = NSArray;
overload selector("shortStandaloneMonthSymbols") = NSArray;
overload selector("shortStandaloneQuarterSymbols") = NSArray;
overload selector("shortStandaloneWeekdaySymbols") = NSArray;
overload selector("shortValue") = Short;
overload selector("shortWeekdaySymbols") = NSArray;
overload selector("shouldArchiveValueForKey:") = Bool, NSString;
overload selector("shouldProcessNamespaces") = Bool;
overload selector("shouldReportNamespacePrefixes") = Bool;
overload selector("shouldResolveExternalEntities") = Bool;
overload selector("signal") = Void;
overload selector("signatureWithObjCTypes:") = NSMethodSignature, Pointer[CChar];
overload selector("sizeFunction") = CCodePointer[[RawPointer],[UInt]];
overload selector("sizeValue") = NSSize;
overload selector("skipDescendants") = Void;
overload selector("skipDescendents") = Void;
overload selector("sleepForTimeInterval:") = Void, Double;
overload selector("sleepUntilDate:") = Void, NSDate;
overload selector("smallestEncoding") = UInt;
overload selector("socket") = Int;
overload selector("socketType") = Int;
overload selector("sortDescriptorWithKey:ascending:") = Id, NSString, Bool;
overload selector("sortDescriptorWithKey:ascending:comparator:") = Id, NSString, Bool, NSComparator;
overload selector("sortDescriptorWithKey:ascending:selector:") = Id, NSString, Bool, SelectorHandle;
overload selector("sortDescriptors") = NSArray;
overload selector("sortUsingComparator:") = Void, NSComparator;
overload selector("sortUsingDescriptors:") = Void, NSArray;
overload selector("sortUsingFunction:context:") = Void, CCodePointer[[Id,Id,RawPointer],[Int]], RawPointer;
overload selector("sortUsingSelector:") = Void, SelectorHandle;
overload selector("sortWithOptions:usingComparator:") = Void, UInt, NSComparator;
overload selector("sortedArrayHint") = NSData;
overload selector("sortedArrayUsingComparator:") = NSArray, NSComparator;
overload selector("sortedArrayUsingDescriptors:") = NSArray, NSArray;
overload selector("sortedArrayUsingFunction:context:") = NSArray, CCodePointer[[Id,Id,RawPointer],[Int]], RawPointer;
overload selector("sortedArrayUsingFunction:context:hint:") = NSArray, CCodePointer[[Id,Id,RawPointer],[Int]], RawPointer, NSData;
overload selector("sortedArrayUsingSelector:") = NSArray, SelectorHandle;
overload selector("sortedArrayWithOptions:usingComparator:") = NSArray, UInt, NSComparator;
overload selector("source") = NSString;
overload selector("sourceAttribute") = Int;
overload selector("sourceName") = NSString;
overload selector("speed") = Float;
overload selector("spellCheckingResultWithRange:") = NSTextCheckingResult, NSRange;
overload selector("spellServer:checkGrammarInString:language:details:") = NSRange, NSSpellServer, NSString, NSString, Pointer[NSArray];
overload selector("spellServer:checkString:offset:types:options:orthography:wordCount:") = NSArray, NSSpellServer, NSString, UInt, UInt64, NSDictionary, NSOrthography, Pointer[Int];
overload selector("spellServer:didForgetWord:inLanguage:") = Void, NSSpellServer, NSString, NSString;
overload selector("spellServer:didLearnWord:inLanguage:") = Void, NSSpellServer, NSString, NSString;
overload selector("spellServer:findMisspelledWordInString:language:wordCount:countOnly:") = NSRange, NSSpellServer, NSString, NSString, Pointer[Int], Bool;
overload selector("spellServer:suggestCompletionsForPartialWordRange:inString:language:") = NSArray, NSSpellServer, NSRange, NSString, NSString;
overload selector("spellServer:suggestGuessesForWord:inLanguage:") = NSArray, NSSpellServer, NSString, NSString;
overload selector("spin") = Float;
overload selector("spinRange") = Float;
overload selector("stackSize") = UInt;
overload selector("standaloneMonthSymbols") = NSArray;
overload selector("standaloneQuarterSymbols") = NSArray;
overload selector("standaloneWeekdaySymbols") = NSArray;
overload selector("standardError") = Id;
overload selector("standardInput") = Id;
overload selector("standardOutput") = Id;
overload selector("standardUserDefaults") = NSUserDefaults;
overload selector("standardizedURL") = NSURL;
overload selector("start") = Void;
overload selector("startLoading") = Void;
overload selector("startMonitoring") = Void;
overload selector("startPoint") = CGPoint;
overload selector("startProgress") = Float;
overload selector("startQuery") = Bool;
overload selector("startSpecifier") = NSScriptObjectSpecifier;
overload selector("startSubelementIdentifier") = UInt;
overload selector("startSubelementIndex") = Int;
overload selector("statistics") = NSDictionary;
overload selector("status") = UInt;
overload selector("statusCode") = Int;
overload selector("stop") = Void;
overload selector("stopLoading") = Void;
overload selector("stopMonitoring") = Void;
overload selector("stopQuery") = Void;
overload selector("storagePolicy") = UInt;
overload selector("storeCachedResponse:forRequest:") = Void, NSCachedURLResponse, NSURLRequest;
overload selector("storedValueForKey:") = Id, NSString;
overload selector("stream:handleEvent:") = Void, NSStream, UInt;
overload selector("streamError") = NSError;
overload selector("streamStatus") = UInt;
overload selector("string") = Id;
overload selector("stringArrayForKey:") = NSArray, NSString;
overload selector("stringByAbbreviatingWithTildeInPath") = NSString;
overload selector("stringByAddingPercentEscapesUsingEncoding:") = NSString, UInt;
overload varargSelector("stringByAppendingFormat:") = NSString, NSString;
overload selector("stringByAppendingPathComponent:") = NSString, NSString;
overload selector("stringByAppendingPathExtension:") = NSString, NSString;
overload selector("stringByAppendingString:") = NSString, NSString;
overload selector("stringByDeletingLastPathComponent") = NSString;
overload selector("stringByDeletingPathExtension") = NSString;
overload selector("stringByExpandingTildeInPath") = NSString;
overload selector("stringByFoldingWithOptions:locale:") = NSString, UInt, NSLocale;
overload selector("stringByPaddingToLength:withString:startingAtIndex:") = NSString, UInt, NSString, UInt;
overload selector("stringByReplacingCharactersInRange:withString:") = NSString, NSRange, NSString;
overload selector("stringByReplacingOccurrencesOfString:withString:") = NSString, NSString, NSString;
overload selector("stringByReplacingOccurrencesOfString:withString:options:range:") = NSString, NSString, NSString, UInt, NSRange;
overload selector("stringByReplacingPercentEscapesUsingEncoding:") = NSString, UInt;
overload selector("stringByResolvingSymlinksInPath") = NSString;
overload selector("stringByStandardizingPath") = NSString;
overload selector("stringByTrimmingCharactersInSet:") = NSString, NSCharacterSet;
overload selector("stringForKey:") = NSString, NSString;
overload selector("stringForObjectValue:") = NSString, Id;
overload selector("stringFromDate:") = NSString, NSDate;
overload selector("stringFromNumber:") = NSString, NSNumber;
overload selector("stringRepresentation") = NSString;
overload selector("stringValue") = NSString;
overload selector("stringWithCString:") = Id, Pointer[CChar];
overload selector("stringWithCString:encoding:") = Id, Pointer[CChar], UInt;
overload selector("stringWithCString:length:") = Id, Pointer[CChar], UInt;
overload selector("stringWithCapacity:") = Id, UInt;
overload selector("stringWithCharacters:length:") = Id, Pointer[UShort], UInt;
overload selector("stringWithContentsOfFile:") = Id, NSString;
overload selector("stringWithContentsOfFile:encoding:error:") = Id, NSString, UInt, Pointer[NSError];
overload selector("stringWithContentsOfFile:usedEncoding:error:") = Id, NSString, Pointer[UInt], Pointer[NSError];
overload selector("stringWithContentsOfURL:") = Id, NSURL;
overload selector("stringWithContentsOfURL:encoding:error:") = Id, NSURL, UInt, Pointer[NSError];
overload selector("stringWithContentsOfURL:usedEncoding:error:") = Id, NSURL, Pointer[UInt], Pointer[NSError];
overload selector("stringWithFileSystemRepresentation:length:") = NSString, Pointer[CChar], UInt;
overload varargSelector("stringWithFormat:") = Id, NSString;
overload selector("stringWithString:") = Id, NSString;
overload selector("stringWithUTF8String:") = Id, Pointer[CChar];
overload selector("stringsByAppendingPaths:") = NSArray, NSArray;
overload selector("strokeColor") = CGColorRef;
overload selector("style") = NSDictionary;
overload selector("subarrayWithRange:") = NSArray, NSRange;
overload selector("subdataWithRange:") = NSData, NSRange;
overload selector("subgroups") = NSArray;
overload selector("sublayerTransform") = CATransform3D;
overload selector("sublayers") = NSArray;
overload selector("subpathsAtPath:") = NSArray, NSString;
overload selector("subpathsOfDirectoryAtPath:error:") = NSArray, NSString, Pointer[NSError];
overload selector("subpredicates") = NSArray;
overload selector("substringFromIndex:") = NSString, UInt;
overload selector("substringToIndex:") = NSString, UInt;
overload selector("substringWithRange:") = NSString, NSRange;
overload selector("subtype") = NSString;
overload selector("suggestedFilename") = NSString;
overload selector("suiteForAppleEventCode:") = NSString, CULong;
overload selector("suiteName") = NSString;
overload selector("suiteNames") = NSArray;
overload selector("superclass") = Id;
overload selector("superclassDescription") = NSScriptClassDescription;
overload selector("superlayer") = CALayer;
overload selector("supportsCommand:") = Bool, NSScriptCommandDescription;
overload selector("suspend") = Bool;
overload selector("suspendCurrentAppleEvent") = NSAppleEventManagerSuspensionID;
overload selector("suspendExecution") = Void;
overload selector("suspended") = Bool;
overload selector("symbolCharacterSet") = Id;
overload selector("synchronize") = Bool;
overload selector("synchronizeFile") = Void;
overload selector("systemDefaultPortNameServer") = NSPortNameServer;
overload selector("systemID") = NSString;
overload selector("systemLocale") = Id;
overload selector("systemTimeZone") = NSTimeZone;
overload selector("systemUptime") = Double;
overload selector("systemVersion") = UInt;
overload selector("takeStoredValue:forKey:") = Void, Id, NSString;
overload selector("takeValue:forKey:") = Void, Id, NSString;
overload selector("takeValue:forKeyPath:") = Void, Id, NSString;
overload selector("takeValuesFromDictionary:") = Void, NSDictionary;
overload selector("target") = Id;
overload selector("terminate") = Void;
overload selector("terminationReason") = Int;
overload selector("terminationStatus") = Int;
overload selector("test") = NSScriptWhoseTest;
overload selector("textAttributesForNegativeInfinity") = NSDictionary;
overload selector("textAttributesForNegativeValues") = NSDictionary;
overload selector("textAttributesForNil") = NSDictionary;
overload selector("textAttributesForNotANumber") = NSDictionary;
overload selector("textAttributesForPositiveInfinity") = NSDictionary;
overload selector("textAttributesForPositiveValues") = NSDictionary;
overload selector("textAttributesForZero") = NSDictionary;
overload selector("textEncodingName") = NSString;
overload selector("textWithStringValue:") = Id, NSString;
overload selector("thousandSeparator") = NSString;
overload selector("threadDictionary") = NSMutableDictionary;
overload selector("threadPriority") = Double;
overload selector("tileSize") = CGSize;
overload selector("timeInterval") = Double;
overload selector("timeIntervalSince1970") = Double;
overload selector("timeIntervalSinceDate:") = Double, NSDate;
overload selector("timeIntervalSinceNow") = Double;
overload selector("timeIntervalSinceReferenceDate") = Double;
overload selector("timeOffset") = Double;
overload selector("timeStyle") = UInt;
overload selector("timeZone") = NSTimeZone;
overload selector("timeZoneDataVersion") = NSString;
overload selector("timeZoneForSecondsFromGMT:") = Id, Int;
overload selector("timeZoneWithAbbreviation:") = Id, NSString;
overload selector("timeZoneWithName:") = Id, NSString;
overload selector("timeZoneWithName:data:") = Id, NSString, NSData;
overload selector("timeoutInterval") = Double;
overload selector("timerWithTimeInterval:invocation:repeats:") = NSTimer, Double, NSInvocation, Bool;
overload selector("timerWithTimeInterval:target:selector:userInfo:repeats:") = NSTimer, Double, Id, SelectorHandle, Id, Bool;
overload selector("timingFunction") = CAMediaTimingFunction;
overload selector("timingFunctions") = NSArray;
overload selector("toManyRelationshipKeys") = NSArray;
overload selector("toOneRelationshipKeys") = NSArray;
overload selector("toValue") = Id;
overload selector("topLevelObject") = Id;
overload selector("totalCostLimit") = UInt;
overload selector("transactionID") = CLong;
overload selector("transform") = NSAffineTransform;
overload selector("transformBy:interior:") = CIFilterShape, CGAffineTransform, Bool;
overload selector("transformPoint:") = NSPoint, NSPoint;
overload selector("transformSize:") = NSSize, NSSize;
overload selector("transformStruct") = NSAffineTransformStruct;
overload selector("transformedValue:") = Id, Id;
overload selector("transformedValueClass") = Id;
overload selector("translateXBy:yBy:") = Void, Float, Float;
overload selector("truncateFileAtOffset:") = Void, UInt64;
overload selector("truncationMode") = NSString;
overload selector("tryLock") = Bool;
overload selector("tryLockWhenCondition:") = Bool, Int;
overload selector("twoDigitStartDate") = NSDate;
overload selector("type") = NSString;
overload selector("typeCodeValue") = CULong;
overload selector("typeForArgumentWithName:") = NSString, NSString;
overload selector("typeForKey:") = NSString, NSString;
overload selector("unableToSetNilForKey:") = Void, NSString;
overload selector("unarchiveObjectWithData:") = Id, NSData;
overload selector("unarchiveObjectWithFile:") = Id, NSString;
overload selector("unarchiver:cannotDecodeObjectOfClassName:originalClasses:") = Id, NSKeyedUnarchiver, NSString, NSArray;
overload selector("unarchiver:didDecodeObject:") = Id, NSKeyedUnarchiver, Id;
overload selector("unarchiver:willReplaceObject:withObject:") = Void, NSKeyedUnarchiver, Id, Id;
overload selector("unarchiverDidFinish:") = Void, NSKeyedUnarchiver;
overload selector("unarchiverWillFinish:") = Void, NSKeyedUnarchiver;
overload selector("undo") = Void;
overload selector("undoActionName") = NSString;
overload selector("undoMenuItemTitle") = NSString;
overload selector("undoMenuTitleForUndoActionName:") = NSString, NSString;
overload selector("undoNestedGroup") = Void;
overload selector("unionHashTable:") = Void, NSHashTable;
overload selector("unionSet:") = Void, NSSet;
overload selector("unionWith:") = CIFilterShape, CIFilterShape;
overload selector("unionWithRect:") = CIFilterShape, CGRect;
overload selector("uniqueID") = Id;
overload selector("unload") = Bool;
overload selector("unlock") = Void;
overload selector("unlockWithCondition:") = Void, Int;
overload selector("unregisterClass:") = Void, Id;
overload selector("unscheduleFromRunLoop:forMode:") = Void, NSRunLoop, NSString;
overload selector("unsignedCharValue") = CUChar;
overload selector("unsignedIntValue") = UInt;
overload selector("unsignedIntegerValue") = UInt;
overload selector("unsignedLongLongValue") = UInt64;
overload selector("unsignedLongValue") = CULong;
overload selector("unsignedShortValue") = UShort;
overload selector("updateBounds") = CGRect;
overload selector("uppercaseLetterCharacterSet") = Id;
overload selector("uppercaseString") = NSString;
overload selector("url") = NSURL;
overload selector("useCredential:forAuthenticationChallenge:") = Void, NSURLCredential, NSURLAuthenticationChallenge;
overload selector("useStoredAccessor") = Bool;
overload selector("user") = NSString;
overload selector("userInfo") = Id;
overload selector("usesGroupingSeparator") = Bool;
overload selector("usesSignificantDigits") = Bool;
overload selector("usesStrongWriteBarrier") = Bool;
overload selector("usesWeakReadAndWriteBarriers") = Bool;
overload selector("validateAndReturnError:") = Bool, Pointer[NSError];
overload selector("validateValue:forKey:error:") = Bool, Pointer[Id], NSString, Pointer[NSError];
overload selector("validateValue:forKeyPath:error:") = Bool, Pointer[Id], NSString, Pointer[NSError];
overload selector("value") = Id;
overload selector("value:withObjCType:") = NSValue, RawPointer, Pointer[CChar];
overload selector("valueAtIndex:") = Float, CULong;
overload selector("valueAtIndex:inPropertyWithKey:") = Id, UInt, NSString;
overload selector("valueForAttribute:") = Id, NSString;
overload selector("valueForHTTPHeaderField:") = NSString, NSString;
overload selector("valueForKey:") = Id, NSString;
overload selector("valueForKeyPath:") = Id, NSString;
overload selector("valueForUndefinedKey:") = Id, NSString;
overload selector("valueFunction") = CAValueFunction;
overload selector("valueListAttributes") = NSArray;
overload selector("valueLists") = NSDictionary;
overload selector("valueOfAttribute:forResultAtIndex:") = Id, NSString, UInt;
overload selector("valuePointerFunctions") = NSPointerFunctions;
overload selector("valueTransformerForName:") = NSValueTransformer, NSString;
overload selector("valueTransformerNames") = NSArray;
overload selector("valueWithBytes:objCType:") = NSValue, RawPointer, Pointer[CChar];
overload selector("valueWithCATransform3D:") = NSValue, CATransform3D;
overload selector("valueWithName:inPropertyWithKey:") = Id, NSString, NSString;
overload selector("valueWithNonretainedObject:") = NSValue, Id;
overload selector("valueWithPoint:") = NSValue, NSPoint;
overload selector("valueWithPointer:") = NSValue, RawPointer;
overload selector("valueWithRange:") = NSValue, NSRange;
overload selector("valueWithRect:") = NSValue, NSRect;
overload selector("valueWithSize:") = NSValue, NSSize;
overload selector("valueWithUniqueID:inPropertyWithKey:") = Id, Id, NSString;
overload selector("values") = NSArray;
overload selector("valuesForAttributes:") = NSDictionary, NSArray;
overload selector("valuesForKeys:") = NSDictionary, NSArray;
overload selector("variable") = NSString;
overload selector("vectorWithString:") = CIVector, NSString;
overload selector("vectorWithValues:count:") = CIVector, Pointer[Float], CULong;
overload selector("vectorWithX:") = CIVector, Float;
overload selector("vectorWithX:Y:") = CIVector, Float, Float;
overload selector("vectorWithX:Y:Z:") = CIVector, Float, Float, Float;
overload selector("vectorWithX:Y:Z:W:") = CIVector, Float, Float, Float, Float;
overload selector("velocity") = Float;
overload selector("velocityRange") = Float;
overload selector("version") = Int;
overload selector("versionForClassName:") = Int, NSString;
overload selector("veryShortMonthSymbols") = NSArray;
overload selector("veryShortStandaloneMonthSymbols") = NSArray;
overload selector("veryShortStandaloneWeekdaySymbols") = NSArray;
overload selector("veryShortWeekdaySymbols") = NSArray;
overload selector("visibleRect") = CGRect;
overload selector("volatileDomainForName:") = NSDictionary, NSString;
overload selector("volatileDomainNames") = NSArray;
overload selector("wait") = Void;
overload selector("waitForDataInBackgroundAndNotify") = Void;
overload selector("waitForDataInBackgroundAndNotifyForModes:") = Void, NSArray;
overload selector("waitUntilAllOperationsAreFinished") = Void;
overload selector("waitUntilDate:") = Bool, NSDate;
overload selector("waitUntilExit") = Void;
overload selector("waitUntilFinished") = Void;
overload selector("week") = Int;
overload selector("weekday") = Int;
overload selector("weekdayOrdinal") = Int;
overload selector("weekdaySymbols") = NSArray;
overload selector("whitespaceAndNewlineCharacterSet") = Id;
overload selector("whitespaceCharacterSet") = Id;
overload selector("willChange:valuesAtIndexes:forKey:") = Void, UInt, NSIndexSet, NSString;
overload selector("willChangeValueForKey:") = Void, NSString;
overload selector("willChangeValueForKey:withSetMutation:usingObjects:") = Void, NSString, UInt, NSSet;
overload selector("windowsLocaleCodeFromLocaleIdentifier:") = UInt, NSString;
overload selector("write:maxLength:") = Int, Pointer[CUChar], UInt;
overload selector("writeBookmarkData:toURL:options:error:") = Bool, NSData, NSURL, UInt, Pointer[NSError];
overload selector("writeData:") = Bool, NSData;
overload selector("writeProperty:forKey:") = Bool, Id, NSString;
overload selector("writePropertyList:toStream:format:options:error:") = Int, Id, NSOutputStream, UInt, UInt, Pointer[NSError];
overload selector("writeToFile:atomically:") = Bool, NSString, Bool;
overload selector("writeToFile:atomically:encoding:error:") = Bool, NSString, Bool, UInt, Pointer[NSError];
overload selector("writeToFile:options:error:") = Bool, NSString, UInt, Pointer[NSError];
overload selector("writeToURL:atomically:") = Bool, NSURL, Bool;
overload selector("writeToURL:atomically:encoding:error:") = Bool, NSURL, Bool, UInt, Pointer[NSError];
overload selector("writeToURL:options:error:") = Bool, NSURL, UInt, Pointer[NSError];
overload selector("xAcceleration") = Float;
overload selector("yAcceleration") = Float;
overload selector("year") = Int;
overload selector("yearOfCommonEra") = Int;
overload selector("years:months:days:hours:minutes:seconds:sinceDate:") = Void, Pointer[Int], Pointer[Int], Pointer[Int], Pointer[Int], Pointer[Int], Pointer[Int], NSCalendarDate;
overload selector("zAcceleration") = Float;
overload selector("zPosition") = Float;
overload selector("zero") = NSDecimalNumber;
overload selector("zeroSymbol") = NSString;
overload selector("zone") = Pointer[NSZone];

record CAAnimation = externalClass(NSObject);
overload externalInstanceMethod(#CAAnimation, "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#CAAnimation, "initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#CAAnimation, "copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#CAAnimation, "beginTime") = Double;
overload externalInstanceMethod(#CAAnimation, "setBeginTime:") = Void, Double;
overload externalInstanceMethod(#CAAnimation, "duration") = Double;
overload externalInstanceMethod(#CAAnimation, "setDuration:") = Void, Double;
overload externalInstanceMethod(#CAAnimation, "speed") = Float;
overload externalInstanceMethod(#CAAnimation, "setSpeed:") = Void, Float;
overload externalInstanceMethod(#CAAnimation, "timeOffset") = Double;
overload externalInstanceMethod(#CAAnimation, "setTimeOffset:") = Void, Double;
overload externalInstanceMethod(#CAAnimation, "repeatCount") = Float;
overload externalInstanceMethod(#CAAnimation, "setRepeatCount:") = Void, Float;
overload externalInstanceMethod(#CAAnimation, "repeatDuration") = Double;
overload externalInstanceMethod(#CAAnimation, "setRepeatDuration:") = Void, Double;
overload externalInstanceMethod(#CAAnimation, "autoreverses") = Bool;
overload externalInstanceMethod(#CAAnimation, "setAutoreverses:") = Void, Bool;
overload externalInstanceMethod(#CAAnimation, "fillMode") = NSString;
overload externalInstanceMethod(#CAAnimation, "setFillMode:") = Void, NSString;
overload externalInstanceMethod(#CAAnimation, "runActionForKey:object:arguments:") = Void, NSString, Id, NSDictionary;
overload externalClassMethod(#CAAnimation, "animation") = Id;
overload externalClassMethod(#CAAnimation, "defaultValueForKey:") = Id, NSString;
overload externalInstanceMethod(#CAAnimation, "shouldArchiveValueForKey:") = Bool, NSString;
overload externalInstanceMethod(#CAAnimation, "timingFunction") = CAMediaTimingFunction;
overload externalInstanceMethod(#CAAnimation, "setTimingFunction:") = Void, CAMediaTimingFunction;
overload externalInstanceMethod(#CAAnimation, "delegate") = Id;
overload externalInstanceMethod(#CAAnimation, "setDelegate:") = Void, Id;
overload externalInstanceMethod(#CAAnimation, "isRemovedOnCompletion") = Bool;
overload externalInstanceMethod(#CAAnimation, "setRemovedOnCompletion:") = Void, Bool;

record CAAnimationGroup = externalClass(CAAnimation);
overload externalInstanceMethod(#CAAnimationGroup, "animations") = NSArray;
overload externalInstanceMethod(#CAAnimationGroup, "setAnimations:") = Void, NSArray;

record CABasicAnimation = externalClass(CAPropertyAnimation);
overload externalInstanceMethod(#CABasicAnimation, "fromValue") = Id;
overload externalInstanceMethod(#CABasicAnimation, "setFromValue:") = Void, Id;
overload externalInstanceMethod(#CABasicAnimation, "toValue") = Id;
overload externalInstanceMethod(#CABasicAnimation, "setToValue:") = Void, Id;
overload externalInstanceMethod(#CABasicAnimation, "byValue") = Id;
overload externalInstanceMethod(#CABasicAnimation, "setByValue:") = Void, Id;

record CAConstraint = externalClass(NSObject);
overload externalInstanceMethod(#CAConstraint, "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#CAConstraint, "initWithCoder:") = Id, NSCoder;
overload externalClassMethod(#CAConstraint, "constraintWithAttribute:relativeTo:attribute:scale:offset:") = Id, Int, NSString, Int, Float, Float;
overload externalClassMethod(#CAConstraint, "constraintWithAttribute:relativeTo:attribute:offset:") = Id, Int, NSString, Int, Float;
overload externalClassMethod(#CAConstraint, "constraintWithAttribute:relativeTo:attribute:") = Id, Int, NSString, Int;
overload externalInstanceMethod(#CAConstraint, "initWithAttribute:relativeTo:attribute:scale:offset:") = Id, Int, NSString, Int, Float, Float;
overload externalInstanceMethod(#CAConstraint, "attribute") = Int;
overload externalInstanceMethod(#CAConstraint, "sourceName") = NSString;
overload externalInstanceMethod(#CAConstraint, "sourceAttribute") = Int;
overload externalInstanceMethod(#CAConstraint, "scale") = Float;
overload externalInstanceMethod(#CAConstraint, "offset") = Float;

record CAConstraintLayoutManager = externalClass(NSObject);
overload externalClassMethod(#CAConstraintLayoutManager, "layoutManager") = Id;

record CAEmitterCell = externalClass(NSObject);
overload externalInstanceMethod(#CAEmitterCell, "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#CAEmitterCell, "initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#CAEmitterCell, "beginTime") = Double;
overload externalInstanceMethod(#CAEmitterCell, "setBeginTime:") = Void, Double;
overload externalInstanceMethod(#CAEmitterCell, "duration") = Double;
overload externalInstanceMethod(#CAEmitterCell, "setDuration:") = Void, Double;
overload externalInstanceMethod(#CAEmitterCell, "speed") = Float;
overload externalInstanceMethod(#CAEmitterCell, "setSpeed:") = Void, Float;
overload externalInstanceMethod(#CAEmitterCell, "timeOffset") = Double;
overload externalInstanceMethod(#CAEmitterCell, "setTimeOffset:") = Void, Double;
overload externalInstanceMethod(#CAEmitterCell, "repeatCount") = Float;
overload externalInstanceMethod(#CAEmitterCell, "setRepeatCount:") = Void, Float;
overload externalInstanceMethod(#CAEmitterCell, "repeatDuration") = Double;
overload externalInstanceMethod(#CAEmitterCell, "setRepeatDuration:") = Void, Double;
overload externalInstanceMethod(#CAEmitterCell, "autoreverses") = Bool;
overload externalInstanceMethod(#CAEmitterCell, "setAutoreverses:") = Void, Bool;
overload externalInstanceMethod(#CAEmitterCell, "fillMode") = NSString;
overload externalInstanceMethod(#CAEmitterCell, "setFillMode:") = Void, NSString;
overload externalClassMethod(#CAEmitterCell, "emitterCell") = Id;
overload externalClassMethod(#CAEmitterCell, "defaultValueForKey:") = Id, NSString;
overload externalInstanceMethod(#CAEmitterCell, "shouldArchiveValueForKey:") = Bool, NSString;
overload externalInstanceMethod(#CAEmitterCell, "name") = NSString;
overload externalInstanceMethod(#CAEmitterCell, "setName:") = Void, NSString;
overload externalInstanceMethod(#CAEmitterCell, "isEnabled") = Bool;
overload externalInstanceMethod(#CAEmitterCell, "setEnabled:") = Void, Bool;
overload externalInstanceMethod(#CAEmitterCell, "birthRate") = Float;
overload externalInstanceMethod(#CAEmitterCell, "setBirthRate:") = Void, Float;
overload externalInstanceMethod(#CAEmitterCell, "lifetime") = Float;
overload externalInstanceMethod(#CAEmitterCell, "setLifetime:") = Void, Float;
overload externalInstanceMethod(#CAEmitterCell, "lifetimeRange") = Float;
overload externalInstanceMethod(#CAEmitterCell, "setLifetimeRange:") = Void, Float;
overload externalInstanceMethod(#CAEmitterCell, "emissionLatitude") = Float;
overload externalInstanceMethod(#CAEmitterCell, "setEmissionLatitude:") = Void, Float;
overload externalInstanceMethod(#CAEmitterCell, "emissionLongitude") = Float;
overload externalInstanceMethod(#CAEmitterCell, "setEmissionLongitude:") = Void, Float;
overload externalInstanceMethod(#CAEmitterCell, "emissionRange") = Float;
overload externalInstanceMethod(#CAEmitterCell, "setEmissionRange:") = Void, Float;
overload externalInstanceMethod(#CAEmitterCell, "velocity") = Float;
overload externalInstanceMethod(#CAEmitterCell, "setVelocity:") = Void, Float;
overload externalInstanceMethod(#CAEmitterCell, "velocityRange") = Float;
overload externalInstanceMethod(#CAEmitterCell, "setVelocityRange:") = Void, Float;
overload externalInstanceMethod(#CAEmitterCell, "xAcceleration") = Float;
overload externalInstanceMethod(#CAEmitterCell, "setXAcceleration:") = Void, Float;
overload externalInstanceMethod(#CAEmitterCell, "yAcceleration") = Float;
overload externalInstanceMethod(#CAEmitterCell, "setYAcceleration:") = Void, Float;
overload externalInstanceMethod(#CAEmitterCell, "zAcceleration") = Float;
overload externalInstanceMethod(#CAEmitterCell, "setZAcceleration:") = Void, Float;
overload externalInstanceMethod(#CAEmitterCell, "scale") = Float;
overload externalInstanceMethod(#CAEmitterCell, "setScale:") = Void, Float;
overload externalInstanceMethod(#CAEmitterCell, "scaleRange") = Float;
overload externalInstanceMethod(#CAEmitterCell, "setScaleRange:") = Void, Float;
overload externalInstanceMethod(#CAEmitterCell, "scaleSpeed") = Float;
overload externalInstanceMethod(#CAEmitterCell, "setScaleSpeed:") = Void, Float;
overload externalInstanceMethod(#CAEmitterCell, "spin") = Float;
overload externalInstanceMethod(#CAEmitterCell, "setSpin:") = Void, Float;
overload externalInstanceMethod(#CAEmitterCell, "spinRange") = Float;
overload externalInstanceMethod(#CAEmitterCell, "setSpinRange:") = Void, Float;
overload externalInstanceMethod(#CAEmitterCell, "color") = CGColorRef;
overload externalInstanceMethod(#CAEmitterCell, "setColor:") = Void, CGColorRef;
overload externalInstanceMethod(#CAEmitterCell, "redRange") = Float;
overload externalInstanceMethod(#CAEmitterCell, "setRedRange:") = Void, Float;
overload externalInstanceMethod(#CAEmitterCell, "greenRange") = Float;
overload externalInstanceMethod(#CAEmitterCell, "setGreenRange:") = Void, Float;
overload externalInstanceMethod(#CAEmitterCell, "blueRange") = Float;
overload externalInstanceMethod(#CAEmitterCell, "setBlueRange:") = Void, Float;
overload externalInstanceMethod(#CAEmitterCell, "alphaRange") = Float;
overload externalInstanceMethod(#CAEmitterCell, "setAlphaRange:") = Void, Float;
overload externalInstanceMethod(#CAEmitterCell, "redSpeed") = Float;
overload externalInstanceMethod(#CAEmitterCell, "setRedSpeed:") = Void, Float;
overload externalInstanceMethod(#CAEmitterCell, "greenSpeed") = Float;
overload externalInstanceMethod(#CAEmitterCell, "setGreenSpeed:") = Void, Float;
overload externalInstanceMethod(#CAEmitterCell, "blueSpeed") = Float;
overload externalInstanceMethod(#CAEmitterCell, "setBlueSpeed:") = Void, Float;
overload externalInstanceMethod(#CAEmitterCell, "alphaSpeed") = Float;
overload externalInstanceMethod(#CAEmitterCell, "setAlphaSpeed:") = Void, Float;
overload externalInstanceMethod(#CAEmitterCell, "contents") = Id;
overload externalInstanceMethod(#CAEmitterCell, "setContents:") = Void, Id;
overload externalInstanceMethod(#CAEmitterCell, "contentsRect") = CGRect;
overload externalInstanceMethod(#CAEmitterCell, "setContentsRect:") = Void, CGRect;
overload externalInstanceMethod(#CAEmitterCell, "minificationFilter") = NSString;
overload externalInstanceMethod(#CAEmitterCell, "setMinificationFilter:") = Void, NSString;
overload externalInstanceMethod(#CAEmitterCell, "magnificationFilter") = NSString;
overload externalInstanceMethod(#CAEmitterCell, "setMagnificationFilter:") = Void, NSString;
overload externalInstanceMethod(#CAEmitterCell, "minificationFilterBias") = Float;
overload externalInstanceMethod(#CAEmitterCell, "setMinificationFilterBias:") = Void, Float;
overload externalInstanceMethod(#CAEmitterCell, "emitterCells") = NSArray;
overload externalInstanceMethod(#CAEmitterCell, "setEmitterCells:") = Void, NSArray;
overload externalInstanceMethod(#CAEmitterCell, "style") = NSDictionary;
overload externalInstanceMethod(#CAEmitterCell, "setStyle:") = Void, NSDictionary;

record CAEmitterLayer = externalClass(CALayer);
overload externalInstanceMethod(#CAEmitterLayer, "emitterCells") = NSArray;
overload externalInstanceMethod(#CAEmitterLayer, "setEmitterCells:") = Void, NSArray;
overload externalInstanceMethod(#CAEmitterLayer, "birthRate") = Float;
overload externalInstanceMethod(#CAEmitterLayer, "setBirthRate:") = Void, Float;
overload externalInstanceMethod(#CAEmitterLayer, "lifetime") = Float;
overload externalInstanceMethod(#CAEmitterLayer, "setLifetime:") = Void, Float;
overload externalInstanceMethod(#CAEmitterLayer, "emitterPosition") = CGPoint;
overload externalInstanceMethod(#CAEmitterLayer, "setEmitterPosition:") = Void, CGPoint;
overload externalInstanceMethod(#CAEmitterLayer, "emitterZPosition") = Float;
overload externalInstanceMethod(#CAEmitterLayer, "setEmitterZPosition:") = Void, Float;
overload externalInstanceMethod(#CAEmitterLayer, "emitterSize") = CGSize;
overload externalInstanceMethod(#CAEmitterLayer, "setEmitterSize:") = Void, CGSize;
overload externalInstanceMethod(#CAEmitterLayer, "emitterDepth") = Float;
overload externalInstanceMethod(#CAEmitterLayer, "setEmitterDepth:") = Void, Float;
overload externalInstanceMethod(#CAEmitterLayer, "emitterShape") = NSString;
overload externalInstanceMethod(#CAEmitterLayer, "setEmitterShape:") = Void, NSString;
overload externalInstanceMethod(#CAEmitterLayer, "emitterMode") = NSString;
overload externalInstanceMethod(#CAEmitterLayer, "setEmitterMode:") = Void, NSString;
overload externalInstanceMethod(#CAEmitterLayer, "renderMode") = NSString;
overload externalInstanceMethod(#CAEmitterLayer, "setRenderMode:") = Void, NSString;
overload externalInstanceMethod(#CAEmitterLayer, "preservesDepth") = Bool;
overload externalInstanceMethod(#CAEmitterLayer, "setPreservesDepth:") = Void, Bool;
overload externalInstanceMethod(#CAEmitterLayer, "velocity") = Float;
overload externalInstanceMethod(#CAEmitterLayer, "setVelocity:") = Void, Float;
overload externalInstanceMethod(#CAEmitterLayer, "scale") = Float;
overload externalInstanceMethod(#CAEmitterLayer, "setScale:") = Void, Float;
overload externalInstanceMethod(#CAEmitterLayer, "spin") = Float;
overload externalInstanceMethod(#CAEmitterLayer, "setSpin:") = Void, Float;
overload externalInstanceMethod(#CAEmitterLayer, "seed") = UInt;
overload externalInstanceMethod(#CAEmitterLayer, "setSeed:") = Void, UInt;

record CAGradientLayer = externalClass(CALayer);
overload externalInstanceMethod(#CAGradientLayer, "colors") = NSArray;
overload externalInstanceMethod(#CAGradientLayer, "setColors:") = Void, NSArray;
overload externalInstanceMethod(#CAGradientLayer, "locations") = NSArray;
overload externalInstanceMethod(#CAGradientLayer, "setLocations:") = Void, NSArray;
overload externalInstanceMethod(#CAGradientLayer, "startPoint") = CGPoint;
overload externalInstanceMethod(#CAGradientLayer, "setStartPoint:") = Void, CGPoint;
overload externalInstanceMethod(#CAGradientLayer, "endPoint") = CGPoint;
overload externalInstanceMethod(#CAGradientLayer, "setEndPoint:") = Void, CGPoint;
overload externalInstanceMethod(#CAGradientLayer, "type") = NSString;
overload externalInstanceMethod(#CAGradientLayer, "setType:") = Void, NSString;

record CAKeyframeAnimation = externalClass(CAPropertyAnimation);
overload externalInstanceMethod(#CAKeyframeAnimation, "values") = NSArray;
overload externalInstanceMethod(#CAKeyframeAnimation, "setValues:") = Void, NSArray;
overload externalInstanceMethod(#CAKeyframeAnimation, "path") = CGPathRef;
overload externalInstanceMethod(#CAKeyframeAnimation, "setPath:") = Void, CGPathRef;
overload externalInstanceMethod(#CAKeyframeAnimation, "keyTimes") = NSArray;
overload externalInstanceMethod(#CAKeyframeAnimation, "setKeyTimes:") = Void, NSArray;
overload externalInstanceMethod(#CAKeyframeAnimation, "timingFunctions") = NSArray;
overload externalInstanceMethod(#CAKeyframeAnimation, "setTimingFunctions:") = Void, NSArray;
overload externalInstanceMethod(#CAKeyframeAnimation, "calculationMode") = NSString;
overload externalInstanceMethod(#CAKeyframeAnimation, "setCalculationMode:") = Void, NSString;
overload externalInstanceMethod(#CAKeyframeAnimation, "rotationMode") = NSString;
overload externalInstanceMethod(#CAKeyframeAnimation, "setRotationMode:") = Void, NSString;

record CALayer = externalClass(NSObject);
overload externalInstanceMethod(#CALayer, "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#CALayer, "initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#CALayer, "beginTime") = Double;
overload externalInstanceMethod(#CALayer, "setBeginTime:") = Void, Double;
overload externalInstanceMethod(#CALayer, "duration") = Double;
overload externalInstanceMethod(#CALayer, "setDuration:") = Void, Double;
overload externalInstanceMethod(#CALayer, "speed") = Float;
overload externalInstanceMethod(#CALayer, "setSpeed:") = Void, Float;
overload externalInstanceMethod(#CALayer, "timeOffset") = Double;
overload externalInstanceMethod(#CALayer, "setTimeOffset:") = Void, Double;
overload externalInstanceMethod(#CALayer, "repeatCount") = Float;
overload externalInstanceMethod(#CALayer, "setRepeatCount:") = Void, Float;
overload externalInstanceMethod(#CALayer, "repeatDuration") = Double;
overload externalInstanceMethod(#CALayer, "setRepeatDuration:") = Void, Double;
overload externalInstanceMethod(#CALayer, "autoreverses") = Bool;
overload externalInstanceMethod(#CALayer, "setAutoreverses:") = Void, Bool;
overload externalInstanceMethod(#CALayer, "fillMode") = NSString;
overload externalInstanceMethod(#CALayer, "setFillMode:") = Void, NSString;
overload externalClassMethod(#CALayer, "layer") = Id;
overload externalInstanceMethod(#CALayer, "init") = Id;
overload externalInstanceMethod(#CALayer, "initWithLayer:") = Id, Id;
overload externalInstanceMethod(#CALayer, "presentationLayer") = Id;
overload externalInstanceMethod(#CALayer, "modelLayer") = Id;
overload externalClassMethod(#CALayer, "defaultValueForKey:") = Id, NSString;
overload externalClassMethod(#CALayer, "needsDisplayForKey:") = Bool, NSString;
overload externalInstanceMethod(#CALayer, "shouldArchiveValueForKey:") = Bool, NSString;
overload externalInstanceMethod(#CALayer, "affineTransform") = CGAffineTransform;
overload externalInstanceMethod(#CALayer, "setAffineTransform:") = Void, CGAffineTransform;
overload externalInstanceMethod(#CALayer, "contentsAreFlipped") = Bool;
overload externalInstanceMethod(#CALayer, "removeFromSuperlayer") = Void;
overload externalInstanceMethod(#CALayer, "addSublayer:") = Void, CALayer;
overload externalInstanceMethod(#CALayer, "insertSublayer:atIndex:") = Void, CALayer, UInt;
overload externalInstanceMethod(#CALayer, "insertSublayer:below:") = Void, CALayer, CALayer;
overload externalInstanceMethod(#CALayer, "insertSublayer:above:") = Void, CALayer, CALayer;
overload externalInstanceMethod(#CALayer, "replaceSublayer:with:") = Void, CALayer, CALayer;
overload externalInstanceMethod(#CALayer, "convertPoint:fromLayer:") = CGPoint, CGPoint, CALayer;
overload externalInstanceMethod(#CALayer, "convertPoint:toLayer:") = CGPoint, CGPoint, CALayer;
overload externalInstanceMethod(#CALayer, "convertRect:fromLayer:") = CGRect, CGRect, CALayer;
overload externalInstanceMethod(#CALayer, "convertRect:toLayer:") = CGRect, CGRect, CALayer;
overload externalInstanceMethod(#CALayer, "convertTime:fromLayer:") = Double, Double, CALayer;
overload externalInstanceMethod(#CALayer, "convertTime:toLayer:") = Double, Double, CALayer;
overload externalInstanceMethod(#CALayer, "hitTest:") = CALayer, CGPoint;
overload externalInstanceMethod(#CALayer, "containsPoint:") = Bool, CGPoint;
overload externalInstanceMethod(#CALayer, "display") = Void;
overload externalInstanceMethod(#CALayer, "setNeedsDisplay") = Void;
overload externalInstanceMethod(#CALayer, "setNeedsDisplayInRect:") = Void, CGRect;
overload externalInstanceMethod(#CALayer, "needsDisplay") = Bool;
overload externalInstanceMethod(#CALayer, "displayIfNeeded") = Void;
overload externalInstanceMethod(#CALayer, "drawInContext:") = Void, CGContextRef;
overload externalInstanceMethod(#CALayer, "renderInContext:") = Void, CGContextRef;
overload externalInstanceMethod(#CALayer, "preferredFrameSize") = CGSize;
overload externalInstanceMethod(#CALayer, "setNeedsLayout") = Void;
overload externalInstanceMethod(#CALayer, "needsLayout") = Bool;
overload externalInstanceMethod(#CALayer, "layoutIfNeeded") = Void;
overload externalInstanceMethod(#CALayer, "layoutSublayers") = Void;
overload externalInstanceMethod(#CALayer, "resizeSublayersWithOldSize:") = Void, CGSize;
overload externalInstanceMethod(#CALayer, "resizeWithOldSuperlayerSize:") = Void, CGSize;
overload externalClassMethod(#CALayer, "defaultActionForKey:") = Id, NSString;
overload externalInstanceMethod(#CALayer, "actionForKey:") = Id, NSString;
overload externalInstanceMethod(#CALayer, "addAnimation:forKey:") = Void, CAAnimation, NSString;
overload externalInstanceMethod(#CALayer, "removeAllAnimations") = Void;
overload externalInstanceMethod(#CALayer, "removeAnimationForKey:") = Void, NSString;
overload externalInstanceMethod(#CALayer, "animationKeys") = NSArray;
overload externalInstanceMethod(#CALayer, "animationForKey:") = CAAnimation, NSString;
overload externalInstanceMethod(#CALayer, "bounds") = CGRect;
overload externalInstanceMethod(#CALayer, "setBounds:") = Void, CGRect;
overload externalInstanceMethod(#CALayer, "position") = CGPoint;
overload externalInstanceMethod(#CALayer, "setPosition:") = Void, CGPoint;
overload externalInstanceMethod(#CALayer, "zPosition") = Float;
overload externalInstanceMethod(#CALayer, "setZPosition:") = Void, Float;
overload externalInstanceMethod(#CALayer, "anchorPoint") = CGPoint;
overload externalInstanceMethod(#CALayer, "setAnchorPoint:") = Void, CGPoint;
overload externalInstanceMethod(#CALayer, "anchorPointZ") = Float;
overload externalInstanceMethod(#CALayer, "setAnchorPointZ:") = Void, Float;
overload externalInstanceMethod(#CALayer, "transform") = CATransform3D;
overload externalInstanceMethod(#CALayer, "setTransform:") = Void, CATransform3D;
overload externalInstanceMethod(#CALayer, "frame") = CGRect;
overload externalInstanceMethod(#CALayer, "setFrame:") = Void, CGRect;
overload externalInstanceMethod(#CALayer, "isHidden") = Bool;
overload externalInstanceMethod(#CALayer, "setHidden:") = Void, Bool;
overload externalInstanceMethod(#CALayer, "isDoubleSided") = Bool;
overload externalInstanceMethod(#CALayer, "setDoubleSided:") = Void, Bool;
overload externalInstanceMethod(#CALayer, "isGeometryFlipped") = Bool;
overload externalInstanceMethod(#CALayer, "setGeometryFlipped:") = Void, Bool;
overload externalInstanceMethod(#CALayer, "superlayer") = CALayer;
overload externalInstanceMethod(#CALayer, "sublayers") = NSArray;
overload externalInstanceMethod(#CALayer, "setSublayers:") = Void, NSArray;
overload externalInstanceMethod(#CALayer, "sublayerTransform") = CATransform3D;
overload externalInstanceMethod(#CALayer, "setSublayerTransform:") = Void, CATransform3D;
overload externalInstanceMethod(#CALayer, "mask") = CALayer;
overload externalInstanceMethod(#CALayer, "setMask:") = Void, CALayer;
overload externalInstanceMethod(#CALayer, "masksToBounds") = Bool;
overload externalInstanceMethod(#CALayer, "setMasksToBounds:") = Void, Bool;
overload externalInstanceMethod(#CALayer, "contents") = Id;
overload externalInstanceMethod(#CALayer, "setContents:") = Void, Id;
overload externalInstanceMethod(#CALayer, "contentsRect") = CGRect;
overload externalInstanceMethod(#CALayer, "setContentsRect:") = Void, CGRect;
overload externalInstanceMethod(#CALayer, "contentsGravity") = NSString;
overload externalInstanceMethod(#CALayer, "setContentsGravity:") = Void, NSString;
overload externalInstanceMethod(#CALayer, "contentsCenter") = CGRect;
overload externalInstanceMethod(#CALayer, "setContentsCenter:") = Void, CGRect;
overload externalInstanceMethod(#CALayer, "minificationFilter") = NSString;
overload externalInstanceMethod(#CALayer, "setMinificationFilter:") = Void, NSString;
overload externalInstanceMethod(#CALayer, "magnificationFilter") = NSString;
overload externalInstanceMethod(#CALayer, "setMagnificationFilter:") = Void, NSString;
overload externalInstanceMethod(#CALayer, "minificationFilterBias") = Float;
overload externalInstanceMethod(#CALayer, "setMinificationFilterBias:") = Void, Float;
overload externalInstanceMethod(#CALayer, "isOpaque") = Bool;
overload externalInstanceMethod(#CALayer, "setOpaque:") = Void, Bool;
overload externalInstanceMethod(#CALayer, "needsDisplayOnBoundsChange") = Bool;
overload externalInstanceMethod(#CALayer, "setNeedsDisplayOnBoundsChange:") = Void, Bool;
overload externalInstanceMethod(#CALayer, "edgeAntialiasingMask") = UInt;
overload externalInstanceMethod(#CALayer, "setEdgeAntialiasingMask:") = Void, UInt;
overload externalInstanceMethod(#CALayer, "backgroundColor") = CGColorRef;
overload externalInstanceMethod(#CALayer, "setBackgroundColor:") = Void, CGColorRef;
overload externalInstanceMethod(#CALayer, "cornerRadius") = Float;
overload externalInstanceMethod(#CALayer, "setCornerRadius:") = Void, Float;
overload externalInstanceMethod(#CALayer, "borderWidth") = Float;
overload externalInstanceMethod(#CALayer, "setBorderWidth:") = Void, Float;
overload externalInstanceMethod(#CALayer, "borderColor") = CGColorRef;
overload externalInstanceMethod(#CALayer, "setBorderColor:") = Void, CGColorRef;
overload externalInstanceMethod(#CALayer, "opacity") = Float;
overload externalInstanceMethod(#CALayer, "setOpacity:") = Void, Float;
overload externalInstanceMethod(#CALayer, "compositingFilter") = Id;
overload externalInstanceMethod(#CALayer, "setCompositingFilter:") = Void, Id;
overload externalInstanceMethod(#CALayer, "filters") = NSArray;
overload externalInstanceMethod(#CALayer, "setFilters:") = Void, NSArray;
overload externalInstanceMethod(#CALayer, "backgroundFilters") = NSArray;
overload externalInstanceMethod(#CALayer, "setBackgroundFilters:") = Void, NSArray;
overload externalInstanceMethod(#CALayer, "shadowColor") = CGColorRef;
overload externalInstanceMethod(#CALayer, "setShadowColor:") = Void, CGColorRef;
overload externalInstanceMethod(#CALayer, "shadowOpacity") = Float;
overload externalInstanceMethod(#CALayer, "setShadowOpacity:") = Void, Float;
overload externalInstanceMethod(#CALayer, "shadowOffset") = CGSize;
overload externalInstanceMethod(#CALayer, "setShadowOffset:") = Void, CGSize;
overload externalInstanceMethod(#CALayer, "shadowRadius") = Float;
overload externalInstanceMethod(#CALayer, "setShadowRadius:") = Void, Float;
overload externalInstanceMethod(#CALayer, "autoresizingMask") = UInt;
overload externalInstanceMethod(#CALayer, "setAutoresizingMask:") = Void, UInt;
overload externalInstanceMethod(#CALayer, "layoutManager") = Id;
overload externalInstanceMethod(#CALayer, "setLayoutManager:") = Void, Id;
overload externalInstanceMethod(#CALayer, "actions") = NSDictionary;
overload externalInstanceMethod(#CALayer, "setActions:") = Void, NSDictionary;
overload externalInstanceMethod(#CALayer, "name") = NSString;
overload externalInstanceMethod(#CALayer, "setName:") = Void, NSString;
overload externalInstanceMethod(#CALayer, "delegate") = Id;
overload externalInstanceMethod(#CALayer, "setDelegate:") = Void, Id;
overload externalInstanceMethod(#CALayer, "style") = NSDictionary;
overload externalInstanceMethod(#CALayer, "setStyle:") = Void, NSDictionary;
overload externalInstanceMethod(#CALayer, "addConstraint:") = Void, CAConstraint;
overload externalInstanceMethod(#CALayer, "constraints") = NSArray;
overload externalInstanceMethod(#CALayer, "setConstraints:") = Void, NSArray;
overload externalInstanceMethod(#CALayer, "scrollPoint:") = Void, CGPoint;
overload externalInstanceMethod(#CALayer, "scrollRectToVisible:") = Void, CGRect;
overload externalInstanceMethod(#CALayer, "visibleRect") = CGRect;

record CAMediaTimingFunction = externalClass(NSObject);
overload externalInstanceMethod(#CAMediaTimingFunction, "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#CAMediaTimingFunction, "initWithCoder:") = Id, NSCoder;
overload externalClassMethod(#CAMediaTimingFunction, "functionWithName:") = Id, NSString;
overload externalClassMethod(#CAMediaTimingFunction, "functionWithControlPoints::::") = Id, Float, Float, Float, Float;
overload externalInstanceMethod(#CAMediaTimingFunction, "initWithControlPoints::::") = Id, Float, Float, Float, Float;
overload externalInstanceMethod(#CAMediaTimingFunction, "getControlPointAtIndex:values:") = Void, CULong, Pointer[Float];

record CAOpenGLLayer = externalClass(CALayer);
overload externalInstanceMethod(#CAOpenGLLayer, "canDrawInCGLContext:pixelFormat:forLayerTime:displayTime:") = Bool, CGLContextObj, CGLPixelFormatObj, Double, Pointer[CVTimeStamp];
overload externalInstanceMethod(#CAOpenGLLayer, "drawInCGLContext:pixelFormat:forLayerTime:displayTime:") = Void, CGLContextObj, CGLPixelFormatObj, Double, Pointer[CVTimeStamp];
overload externalInstanceMethod(#CAOpenGLLayer, "copyCGLPixelFormatForDisplayMask:") = CGLPixelFormatObj, UInt;
overload externalInstanceMethod(#CAOpenGLLayer, "releaseCGLPixelFormat:") = Void, CGLPixelFormatObj;
overload externalInstanceMethod(#CAOpenGLLayer, "copyCGLContextForPixelFormat:") = CGLContextObj, CGLPixelFormatObj;
overload externalInstanceMethod(#CAOpenGLLayer, "releaseCGLContext:") = Void, CGLContextObj;
overload externalInstanceMethod(#CAOpenGLLayer, "isAsynchronous") = Bool;
overload externalInstanceMethod(#CAOpenGLLayer, "setAsynchronous:") = Void, Bool;

record CAPropertyAnimation = externalClass(CAAnimation);
overload externalClassMethod(#CAPropertyAnimation, "animationWithKeyPath:") = Id, NSString;
overload externalInstanceMethod(#CAPropertyAnimation, "keyPath") = NSString;
overload externalInstanceMethod(#CAPropertyAnimation, "setKeyPath:") = Void, NSString;
overload externalInstanceMethod(#CAPropertyAnimation, "isAdditive") = Bool;
overload externalInstanceMethod(#CAPropertyAnimation, "setAdditive:") = Void, Bool;
overload externalInstanceMethod(#CAPropertyAnimation, "isCumulative") = Bool;
overload externalInstanceMethod(#CAPropertyAnimation, "setCumulative:") = Void, Bool;
overload externalInstanceMethod(#CAPropertyAnimation, "valueFunction") = CAValueFunction;
overload externalInstanceMethod(#CAPropertyAnimation, "setValueFunction:") = Void, CAValueFunction;

record CARenderer = externalClass(NSObject);
overload externalClassMethod(#CARenderer, "rendererWithCGLContext:options:") = CARenderer, RawPointer, NSDictionary;
overload externalInstanceMethod(#CARenderer, "beginFrameAtTime:timeStamp:") = Void, Double, Pointer[CVTimeStamp];
overload externalInstanceMethod(#CARenderer, "updateBounds") = CGRect;
overload externalInstanceMethod(#CARenderer, "addUpdateRect:") = Void, CGRect;
overload externalInstanceMethod(#CARenderer, "render") = Void;
overload externalInstanceMethod(#CARenderer, "nextFrameTime") = Double;
overload externalInstanceMethod(#CARenderer, "endFrame") = Void;
overload externalInstanceMethod(#CARenderer, "layer") = CALayer;
overload externalInstanceMethod(#CARenderer, "setLayer:") = Void, CALayer;
overload externalInstanceMethod(#CARenderer, "bounds") = CGRect;
overload externalInstanceMethod(#CARenderer, "setBounds:") = Void, CGRect;

record CAReplicatorLayer = externalClass(CALayer);
overload externalInstanceMethod(#CAReplicatorLayer, "instanceCount") = Int;
overload externalInstanceMethod(#CAReplicatorLayer, "setInstanceCount:") = Void, Int;
overload externalInstanceMethod(#CAReplicatorLayer, "preservesDepth") = Bool;
overload externalInstanceMethod(#CAReplicatorLayer, "setPreservesDepth:") = Void, Bool;
overload externalInstanceMethod(#CAReplicatorLayer, "instanceDelay") = Double;
overload externalInstanceMethod(#CAReplicatorLayer, "setInstanceDelay:") = Void, Double;
overload externalInstanceMethod(#CAReplicatorLayer, "instanceTransform") = CATransform3D;
overload externalInstanceMethod(#CAReplicatorLayer, "setInstanceTransform:") = Void, CATransform3D;
overload externalInstanceMethod(#CAReplicatorLayer, "instanceColor") = CGColorRef;
overload externalInstanceMethod(#CAReplicatorLayer, "setInstanceColor:") = Void, CGColorRef;
overload externalInstanceMethod(#CAReplicatorLayer, "instanceRedOffset") = Float;
overload externalInstanceMethod(#CAReplicatorLayer, "setInstanceRedOffset:") = Void, Float;
overload externalInstanceMethod(#CAReplicatorLayer, "instanceGreenOffset") = Float;
overload externalInstanceMethod(#CAReplicatorLayer, "setInstanceGreenOffset:") = Void, Float;
overload externalInstanceMethod(#CAReplicatorLayer, "instanceBlueOffset") = Float;
overload externalInstanceMethod(#CAReplicatorLayer, "setInstanceBlueOffset:") = Void, Float;
overload externalInstanceMethod(#CAReplicatorLayer, "instanceAlphaOffset") = Float;
overload externalInstanceMethod(#CAReplicatorLayer, "setInstanceAlphaOffset:") = Void, Float;

record CAScrollLayer = externalClass(CALayer);
overload externalInstanceMethod(#CAScrollLayer, "scrollToPoint:") = Void, CGPoint;
overload externalInstanceMethod(#CAScrollLayer, "scrollToRect:") = Void, CGRect;
overload externalInstanceMethod(#CAScrollLayer, "scrollMode") = NSString;
overload externalInstanceMethod(#CAScrollLayer, "setScrollMode:") = Void, NSString;

record CAShapeLayer = externalClass(CALayer);
overload externalInstanceMethod(#CAShapeLayer, "path") = CGPathRef;
overload externalInstanceMethod(#CAShapeLayer, "setPath:") = Void, CGPathRef;
overload externalInstanceMethod(#CAShapeLayer, "fillColor") = CGColorRef;
overload externalInstanceMethod(#CAShapeLayer, "setFillColor:") = Void, CGColorRef;
overload externalInstanceMethod(#CAShapeLayer, "fillRule") = NSString;
overload externalInstanceMethod(#CAShapeLayer, "setFillRule:") = Void, NSString;
overload externalInstanceMethod(#CAShapeLayer, "strokeColor") = CGColorRef;
overload externalInstanceMethod(#CAShapeLayer, "setStrokeColor:") = Void, CGColorRef;
overload externalInstanceMethod(#CAShapeLayer, "lineWidth") = Float;
overload externalInstanceMethod(#CAShapeLayer, "setLineWidth:") = Void, Float;
overload externalInstanceMethod(#CAShapeLayer, "miterLimit") = Float;
overload externalInstanceMethod(#CAShapeLayer, "setMiterLimit:") = Void, Float;
overload externalInstanceMethod(#CAShapeLayer, "lineCap") = NSString;
overload externalInstanceMethod(#CAShapeLayer, "setLineCap:") = Void, NSString;
overload externalInstanceMethod(#CAShapeLayer, "lineJoin") = NSString;
overload externalInstanceMethod(#CAShapeLayer, "setLineJoin:") = Void, NSString;
overload externalInstanceMethod(#CAShapeLayer, "lineDashPhase") = Float;
overload externalInstanceMethod(#CAShapeLayer, "setLineDashPhase:") = Void, Float;
overload externalInstanceMethod(#CAShapeLayer, "lineDashPattern") = NSArray;
overload externalInstanceMethod(#CAShapeLayer, "setLineDashPattern:") = Void, NSArray;

record CATextLayer = externalClass(CALayer);
overload externalInstanceMethod(#CATextLayer, "string") = Id;
overload externalInstanceMethod(#CATextLayer, "setString:") = Void, Id;
overload externalInstanceMethod(#CATextLayer, "font") = CFTypeRef;
overload externalInstanceMethod(#CATextLayer, "setFont:") = Void, CFTypeRef;
overload externalInstanceMethod(#CATextLayer, "fontSize") = Float;
overload externalInstanceMethod(#CATextLayer, "setFontSize:") = Void, Float;
overload externalInstanceMethod(#CATextLayer, "foregroundColor") = CGColorRef;
overload externalInstanceMethod(#CATextLayer, "setForegroundColor:") = Void, CGColorRef;
overload externalInstanceMethod(#CATextLayer, "isWrapped") = Bool;
overload externalInstanceMethod(#CATextLayer, "setWrapped:") = Void, Bool;
overload externalInstanceMethod(#CATextLayer, "truncationMode") = NSString;
overload externalInstanceMethod(#CATextLayer, "setTruncationMode:") = Void, NSString;
overload externalInstanceMethod(#CATextLayer, "alignmentMode") = NSString;
overload externalInstanceMethod(#CATextLayer, "setAlignmentMode:") = Void, NSString;

record CATiledLayer = externalClass(CALayer);
overload externalClassMethod(#CATiledLayer, "fadeDuration") = Double;
overload externalInstanceMethod(#CATiledLayer, "levelsOfDetail") = CULong;
overload externalInstanceMethod(#CATiledLayer, "setLevelsOfDetail:") = Void, CULong;
overload externalInstanceMethod(#CATiledLayer, "levelsOfDetailBias") = CULong;
overload externalInstanceMethod(#CATiledLayer, "setLevelsOfDetailBias:") = Void, CULong;
overload externalInstanceMethod(#CATiledLayer, "tileSize") = CGSize;
overload externalInstanceMethod(#CATiledLayer, "setTileSize:") = Void, CGSize;

record CATransaction = externalClass(NSObject);
overload externalClassMethod(#CATransaction, "begin") = Void;
overload externalClassMethod(#CATransaction, "commit") = Void;
overload externalClassMethod(#CATransaction, "flush") = Void;
overload externalClassMethod(#CATransaction, "lock") = Void;
overload externalClassMethod(#CATransaction, "unlock") = Void;
overload externalClassMethod(#CATransaction, "animationDuration") = Double;
overload externalClassMethod(#CATransaction, "setAnimationDuration:") = Void, Double;
overload externalClassMethod(#CATransaction, "animationTimingFunction") = CAMediaTimingFunction;
overload externalClassMethod(#CATransaction, "setAnimationTimingFunction:") = Void, CAMediaTimingFunction;
overload externalClassMethod(#CATransaction, "disableActions") = Bool;
overload externalClassMethod(#CATransaction, "setDisableActions:") = Void, Bool;
overload externalClassMethod(#CATransaction, "completionBlock") = UnknownType;
overload externalClassMethod(#CATransaction, "setCompletionBlock:") = Void, UnknownType;
overload externalClassMethod(#CATransaction, "valueForKey:") = Id, NSString;
overload externalClassMethod(#CATransaction, "setValue:forKey:") = Void, Id, NSString;

record CATransformLayer = externalClass(CALayer);

record CATransition = externalClass(CAAnimation);
overload externalInstanceMethod(#CATransition, "type") = NSString;
overload externalInstanceMethod(#CATransition, "setType:") = Void, NSString;
overload externalInstanceMethod(#CATransition, "subtype") = NSString;
overload externalInstanceMethod(#CATransition, "setSubtype:") = Void, NSString;
overload externalInstanceMethod(#CATransition, "startProgress") = Float;
overload externalInstanceMethod(#CATransition, "setStartProgress:") = Void, Float;
overload externalInstanceMethod(#CATransition, "endProgress") = Float;
overload externalInstanceMethod(#CATransition, "setEndProgress:") = Void, Float;
overload externalInstanceMethod(#CATransition, "filter") = Id;
overload externalInstanceMethod(#CATransition, "setFilter:") = Void, Id;

record CAValueFunction = externalClass(NSObject);
overload externalInstanceMethod(#CAValueFunction, "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#CAValueFunction, "initWithCoder:") = Id, NSCoder;
overload externalClassMethod(#CAValueFunction, "functionWithName:") = Id, NSString;
overload externalInstanceMethod(#CAValueFunction, "name") = NSString;

record CIColor = externalClass(NSObject);
overload externalInstanceMethod(#CIColor, "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#CIColor, "initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#CIColor, "copyWithZone:") = Id, Pointer[NSZone];
overload externalClassMethod(#CIColor, "colorWithCGColor:") = CIColor, CGColorRef;
overload externalClassMethod(#CIColor, "colorWithRed:green:blue:alpha:") = CIColor, Float, Float, Float, Float;
overload externalClassMethod(#CIColor, "colorWithRed:green:blue:") = CIColor, Float, Float, Float;
overload externalClassMethod(#CIColor, "colorWithString:") = CIColor, NSString;
overload externalInstanceMethod(#CIColor, "initWithCGColor:") = Id, CGColorRef;
overload externalInstanceMethod(#CIColor, "numberOfComponents") = CULong;
overload externalInstanceMethod(#CIColor, "components") = Pointer[Float];
overload externalInstanceMethod(#CIColor, "alpha") = Float;
overload externalInstanceMethod(#CIColor, "colorSpace") = CGColorSpaceRef;
overload externalInstanceMethod(#CIColor, "red") = Float;
overload externalInstanceMethod(#CIColor, "green") = Float;
overload externalInstanceMethod(#CIColor, "blue") = Float;
overload externalInstanceMethod(#CIColor, "stringRepresentation") = NSString;

record CIContext = externalClass(NSObject);
overload externalClassMethod(#CIContext, "contextWithCGLContext:pixelFormat:colorSpace:options:") = CIContext, CGLContextObj, CGLPixelFormatObj, CGColorSpaceRef, NSDictionary;
overload externalClassMethod(#CIContext, "contextWithCGLContext:pixelFormat:options:") = CIContext, CGLContextObj, CGLPixelFormatObj, NSDictionary;
overload externalClassMethod(#CIContext, "contextWithCGContext:options:") = CIContext, CGContextRef, NSDictionary;
overload externalInstanceMethod(#CIContext, "drawImage:atPoint:fromRect:") = Void, CIImage, CGPoint, CGRect;
overload externalInstanceMethod(#CIContext, "drawImage:inRect:fromRect:") = Void, CIImage, CGRect, CGRect;
overload externalInstanceMethod(#CIContext, "createCGImage:fromRect:") = CGImageRef, CIImage, CGRect;
overload externalInstanceMethod(#CIContext, "createCGImage:fromRect:format:colorSpace:") = CGImageRef, CIImage, CGRect, Int, CGColorSpaceRef;
overload externalInstanceMethod(#CIContext, "createCGLayerWithSize:info:") = CGLayerRef, CGSize, CFDictionaryRef;
overload externalInstanceMethod(#CIContext, "render:toBitmap:rowBytes:bounds:format:colorSpace:") = Void, CIImage, RawPointer, Int, CGRect, Int, CGColorSpaceRef;
overload externalInstanceMethod(#CIContext, "render:toIOSurface:bounds:colorSpace:") = Void, CIImage, IOSurfaceRef, CGRect, CGColorSpaceRef;
overload externalInstanceMethod(#CIContext, "reclaimResources") = Void;
overload externalInstanceMethod(#CIContext, "clearCaches") = Void;

record CIFilter = externalClass(NSObject);
overload externalInstanceMethod(#CIFilter, "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#CIFilter, "initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#CIFilter, "copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#CIFilter, "inputKeys") = NSArray;
overload externalInstanceMethod(#CIFilter, "outputKeys") = NSArray;
overload externalInstanceMethod(#CIFilter, "setDefaults") = Void;
overload externalInstanceMethod(#CIFilter, "attributes") = NSDictionary;
overload externalInstanceMethod(#CIFilter, "apply:arguments:options:") = CIImage, CIKernel, NSArray, NSDictionary;
overload externalVarargInstanceMethod(#CIFilter, "apply:") = CIImage, CIKernel;
overload externalClassMethod(#CIFilter, "filterWithName:") = CIFilter, NSString;
overload externalVarargClassMethod(#CIFilter, "filterWithName:keysAndValues:") = CIFilter, NSString, Id;
overload externalClassMethod(#CIFilter, "filterNamesInCategory:") = NSArray, NSString;
overload externalClassMethod(#CIFilter, "filterNamesInCategories:") = NSArray, NSArray;
overload externalClassMethod(#CIFilter, "registerFilterName:constructor:classAttributes:") = Void, NSString, Id, NSDictionary;
overload externalClassMethod(#CIFilter, "localizedNameForFilterName:") = NSString, NSString;
overload externalClassMethod(#CIFilter, "localizedNameForCategory:") = NSString, NSString;
overload externalClassMethod(#CIFilter, "localizedDescriptionForFilterName:") = NSString, NSString;
overload externalClassMethod(#CIFilter, "localizedReferenceDocumentationForFilterName:") = NSURL, NSString;
overload externalClassMethod(#CIFilter, "filterWithImageURL:options:") = CIFilter, NSURL, NSDictionary;
overload externalClassMethod(#CIFilter, "filterWithImageData:options:") = CIFilter, NSData, NSDictionary;
overload externalInstanceMethod(#CIFilter, "name") = NSString;
overload externalInstanceMethod(#CIFilter, "setName:") = Void, NSString;
overload externalInstanceMethod(#CIFilter, "isEnabled") = Bool;
overload externalInstanceMethod(#CIFilter, "setEnabled:") = Void, Bool;

record CIFilterGenerator = externalClass(NSObject);
overload externalInstanceMethod(#CIFilterGenerator, "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#CIFilterGenerator, "initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#CIFilterGenerator, "copyWithZone:") = Id, Pointer[NSZone];
overload externalClassMethod(#CIFilterGenerator, "filterGenerator") = CIFilterGenerator;
overload externalClassMethod(#CIFilterGenerator, "filterGeneratorWithContentsOfURL:") = CIFilterGenerator, NSURL;
overload externalInstanceMethod(#CIFilterGenerator, "initWithContentsOfURL:") = Id, NSURL;
overload externalInstanceMethod(#CIFilterGenerator, "connectObject:withKey:toObject:withKey:") = Void, Id, NSString, Id, NSString;
overload externalInstanceMethod(#CIFilterGenerator, "disconnectObject:withKey:toObject:withKey:") = Void, Id, NSString, Id, NSString;
overload externalInstanceMethod(#CIFilterGenerator, "exportKey:fromObject:withName:") = Void, NSString, Id, NSString;
overload externalInstanceMethod(#CIFilterGenerator, "removeExportedKey:") = Void, NSString;
overload externalInstanceMethod(#CIFilterGenerator, "exportedKeys") = NSDictionary;
overload externalInstanceMethod(#CIFilterGenerator, "setAttributes:forExportedKey:") = Void, NSDictionary, NSString;
overload externalInstanceMethod(#CIFilterGenerator, "classAttributes") = NSDictionary;
overload externalInstanceMethod(#CIFilterGenerator, "setClassAttributes:") = Void, NSDictionary;
overload externalInstanceMethod(#CIFilterGenerator, "filter") = CIFilter;
overload externalInstanceMethod(#CIFilterGenerator, "registerFilterName:") = Void, NSString;
overload externalInstanceMethod(#CIFilterGenerator, "writeToURL:atomically:") = Bool, NSURL, Bool;

record CIFilterShape = externalClass(NSObject);
overload externalInstanceMethod(#CIFilterShape, "copyWithZone:") = Id, Pointer[NSZone];
overload externalClassMethod(#CIFilterShape, "shapeWithRect:") = Id, CGRect;
overload externalInstanceMethod(#CIFilterShape, "initWithRect:") = Id, CGRect;
overload externalInstanceMethod(#CIFilterShape, "transformBy:interior:") = CIFilterShape, CGAffineTransform, Bool;
overload externalInstanceMethod(#CIFilterShape, "insetByX:Y:") = CIFilterShape, Int, Int;
overload externalInstanceMethod(#CIFilterShape, "unionWith:") = CIFilterShape, CIFilterShape;
overload externalInstanceMethod(#CIFilterShape, "unionWithRect:") = CIFilterShape, CGRect;
overload externalInstanceMethod(#CIFilterShape, "intersectWith:") = CIFilterShape, CIFilterShape;
overload externalInstanceMethod(#CIFilterShape, "intersectWithRect:") = CIFilterShape, CGRect;

record CIImage = externalClass(NSObject);
overload externalInstanceMethod(#CIImage, "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#CIImage, "initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#CIImage, "copyWithZone:") = Id, Pointer[NSZone];
overload externalClassMethod(#CIImage, "imageWithCGImage:") = CIImage, CGImageRef;
overload externalClassMethod(#CIImage, "imageWithCGImage:options:") = CIImage, CGImageRef, NSDictionary;
overload externalClassMethod(#CIImage, "imageWithCGLayer:") = CIImage, CGLayerRef;
overload externalClassMethod(#CIImage, "imageWithCGLayer:options:") = CIImage, CGLayerRef, NSDictionary;
overload externalClassMethod(#CIImage, "imageWithBitmapData:bytesPerRow:size:format:colorSpace:") = CIImage, NSData, CULong, CGSize, Int, CGColorSpaceRef;
overload externalClassMethod(#CIImage, "imageWithTexture:size:flipped:colorSpace:") = CIImage, UInt, CGSize, Bool, CGColorSpaceRef;
overload externalClassMethod(#CIImage, "imageWithContentsOfURL:") = CIImage, NSURL;
overload externalClassMethod(#CIImage, "imageWithContentsOfURL:options:") = CIImage, NSURL, NSDictionary;
overload externalClassMethod(#CIImage, "imageWithData:") = CIImage, NSData;
overload externalClassMethod(#CIImage, "imageWithData:options:") = CIImage, NSData, NSDictionary;
overload externalClassMethod(#CIImage, "imageWithCVImageBuffer:") = CIImage, CVImageBufferRef;
overload externalClassMethod(#CIImage, "imageWithCVImageBuffer:options:") = CIImage, CVImageBufferRef, NSDictionary;
overload externalClassMethod(#CIImage, "imageWithIOSurface:") = CIImage, IOSurfaceRef;
overload externalClassMethod(#CIImage, "imageWithIOSurface:options:") = CIImage, IOSurfaceRef, NSDictionary;
overload externalClassMethod(#CIImage, "imageWithColor:") = CIImage, CIColor;
overload externalClassMethod(#CIImage, "emptyImage") = CIImage;
overload externalInstanceMethod(#CIImage, "initWithCGImage:") = Id, CGImageRef;
overload externalInstanceMethod(#CIImage, "initWithCGImage:options:") = Id, CGImageRef, NSDictionary;
overload externalInstanceMethod(#CIImage, "initWithCGLayer:") = Id, CGLayerRef;
overload externalInstanceMethod(#CIImage, "initWithCGLayer:options:") = Id, CGLayerRef, NSDictionary;
overload externalInstanceMethod(#CIImage, "initWithData:") = Id, NSData;
overload externalInstanceMethod(#CIImage, "initWithData:options:") = Id, NSData, NSDictionary;
overload externalInstanceMethod(#CIImage, "initWithBitmapData:bytesPerRow:size:format:colorSpace:") = Id, NSData, CULong, CGSize, Int, CGColorSpaceRef;
overload externalInstanceMethod(#CIImage, "initWithTexture:size:flipped:colorSpace:") = Id, UInt, CGSize, Bool, CGColorSpaceRef;
overload externalInstanceMethod(#CIImage, "initWithContentsOfURL:") = Id, NSURL;
overload externalInstanceMethod(#CIImage, "initWithContentsOfURL:options:") = Id, NSURL, NSDictionary;
overload externalInstanceMethod(#CIImage, "initWithIOSurface:") = Id, IOSurfaceRef;
overload externalInstanceMethod(#CIImage, "initWithIOSurface:options:") = Id, IOSurfaceRef, NSDictionary;
overload externalInstanceMethod(#CIImage, "initWithCVImageBuffer:") = Id, CVImageBufferRef;
overload externalInstanceMethod(#CIImage, "initWithCVImageBuffer:options:") = Id, CVImageBufferRef, NSDictionary;
overload externalInstanceMethod(#CIImage, "initWithColor:") = Id, CIColor;
overload externalInstanceMethod(#CIImage, "imageByApplyingTransform:") = CIImage, CGAffineTransform;
overload externalInstanceMethod(#CIImage, "imageByCroppingToRect:") = CIImage, CGRect;
overload externalInstanceMethod(#CIImage, "extent") = CGRect;
overload externalInstanceMethod(#CIImage, "definition") = CIFilterShape;
overload externalInstanceMethod(#CIImage, "url") = NSURL;
overload externalInstanceMethod(#CIImage, "colorSpace") = CGColorSpaceRef;
overload externalClassMethod(#CIImage, "imageWithImageProvider:size::format:colorSpace:options:") = CIImage, Id, CULong, CULong, Int, CGColorSpaceRef, NSDictionary;
overload externalInstanceMethod(#CIImage, "initWithImageProvider:size::format:colorSpace:options:") = Id, Id, CULong, CULong, Int, CGColorSpaceRef, NSDictionary;

record CIImageAccumulator = externalClass(NSObject);
overload externalClassMethod(#CIImageAccumulator, "imageAccumulatorWithExtent:format:") = CIImageAccumulator, CGRect, Int;
overload externalInstanceMethod(#CIImageAccumulator, "initWithExtent:format:") = Id, CGRect, Int;
overload externalInstanceMethod(#CIImageAccumulator, "extent") = CGRect;
overload externalInstanceMethod(#CIImageAccumulator, "format") = Int;
overload externalInstanceMethod(#CIImageAccumulator, "image") = CIImage;
overload externalInstanceMethod(#CIImageAccumulator, "setImage:") = Void, CIImage;
overload externalInstanceMethod(#CIImageAccumulator, "setImage:dirtyRect:") = Void, CIImage, CGRect;
overload externalInstanceMethod(#CIImageAccumulator, "clear") = Void;

record CIKernel = externalClass(NSObject);
overload externalClassMethod(#CIKernel, "kernelsWithString:") = NSArray, NSString;
overload externalInstanceMethod(#CIKernel, "name") = NSString;
overload externalInstanceMethod(#CIKernel, "setROISelector:") = Void, SelectorHandle;

record CIPlugIn = externalClass(NSObject);
overload externalClassMethod(#CIPlugIn, "loadAllPlugIns") = Void;
overload externalClassMethod(#CIPlugIn, "loadNonExecutablePlugIns") = Void;
overload externalClassMethod(#CIPlugIn, "loadPlugIn:allowNonExecutable:") = Void, NSURL, Bool;

record CISampler = externalClass(NSObject);
overload externalInstanceMethod(#CISampler, "copyWithZone:") = Id, Pointer[NSZone];
overload externalClassMethod(#CISampler, "samplerWithImage:") = CISampler, CIImage;
overload externalVarargClassMethod(#CISampler, "samplerWithImage:keysAndValues:") = CISampler, CIImage, Id;
overload externalClassMethod(#CISampler, "samplerWithImage:options:") = CISampler, CIImage, NSDictionary;
overload externalInstanceMethod(#CISampler, "initWithImage:") = Id, CIImage;
overload externalVarargInstanceMethod(#CISampler, "initWithImage:keysAndValues:") = Id, CIImage, Id;
overload externalInstanceMethod(#CISampler, "initWithImage:options:") = Id, CIImage, NSDictionary;
overload externalInstanceMethod(#CISampler, "definition") = CIFilterShape;
overload externalInstanceMethod(#CISampler, "extent") = CGRect;

record CIVector = externalClass(NSObject);
overload externalInstanceMethod(#CIVector, "copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#CIVector, "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#CIVector, "initWithCoder:") = Id, NSCoder;
overload externalClassMethod(#CIVector, "vectorWithValues:count:") = CIVector, Pointer[Float], CULong;
overload externalClassMethod(#CIVector, "vectorWithX:") = CIVector, Float;
overload externalClassMethod(#CIVector, "vectorWithX:Y:") = CIVector, Float, Float;
overload externalClassMethod(#CIVector, "vectorWithX:Y:Z:") = CIVector, Float, Float, Float;
overload externalClassMethod(#CIVector, "vectorWithX:Y:Z:W:") = CIVector, Float, Float, Float, Float;
overload externalClassMethod(#CIVector, "vectorWithString:") = CIVector, NSString;
overload externalInstanceMethod(#CIVector, "initWithValues:count:") = Id, Pointer[Float], CULong;
overload externalInstanceMethod(#CIVector, "initWithX:") = Id, Float;
overload externalInstanceMethod(#CIVector, "initWithX:Y:") = Id, Float, Float;
overload externalInstanceMethod(#CIVector, "initWithX:Y:Z:") = Id, Float, Float, Float;
overload externalInstanceMethod(#CIVector, "initWithX:Y:Z:W:") = Id, Float, Float, Float, Float;
overload externalInstanceMethod(#CIVector, "initWithString:") = Id, NSString;
overload externalInstanceMethod(#CIVector, "valueAtIndex:") = Float, CULong;
overload externalInstanceMethod(#CIVector, "count") = CULong;
overload externalInstanceMethod(#CIVector, "X") = Float;
overload externalInstanceMethod(#CIVector, "Y") = Float;
overload externalInstanceMethod(#CIVector, "Z") = Float;
overload externalInstanceMethod(#CIVector, "W") = Float;
overload externalInstanceMethod(#CIVector, "stringRepresentation") = NSString;

overload externalInstanceMethod(#NSObject, "provideImageData:bytesPerRow:origin::size::userInfo:") = Void, RawPointer, CULong, CULong, CULong, CULong, CULong, Id;
overload externalInstanceMethod(#NSObject, "preferredSizeOfLayer:") = CGSize, CALayer;
overload externalInstanceMethod(#NSObject, "invalidateLayoutOfLayer:") = Void, CALayer;
overload externalInstanceMethod(#NSObject, "layoutSublayersOfLayer:") = Void, CALayer;
overload externalInstanceMethod(#NSObject, "displayLayer:") = Void, CALayer;
overload externalInstanceMethod(#NSObject, "drawLayer:inContext:") = Void, CALayer, CGContextRef;
overload externalInstanceMethod(#NSObject, "layoutSublayersOfLayer:") = Void, CALayer;
overload externalInstanceMethod(#NSObject, "actionForLayer:forKey:") = Id, CALayer, NSString;
overload externalInstanceMethod(#NSObject, "animationDidStart:") = Void, CAAnimation;
overload externalInstanceMethod(#NSObject, "animationDidStop:finished:") = Void, CAAnimation, Bool;

overload externalClassMethod(#NSValue, "valueWithCATransform3D:") = NSValue, CATransform3D;
overload externalInstanceMethod(#NSValue, "CATransform3DValue") = CATransform3D;


external kCIAttributeFilterName : NSString;

external kCIAttributeFilterDisplayName : NSString;

external kCIAttributeDescription : NSString;

external kCIAttributeReferenceDocumentation : NSString;

external kCIAttributeFilterCategories : NSString;

external kCIAttributeClass : NSString;

external kCIAttributeType : NSString;

external kCIAttributeMin : NSString;

external kCIAttributeMax : NSString;

external kCIAttributeSliderMin : NSString;

external kCIAttributeSliderMax : NSString;

external kCIAttributeDefault : NSString;

external kCIAttributeIdentity : NSString;

external kCIAttributeName : NSString;

external kCIAttributeDisplayName : NSString;

external kCIUIParameterSet : NSString;

external kCIUISetBasic : NSString;

external kCIUISetIntermediate : NSString;

external kCIUISetAdvanced : NSString;

external kCIUISetDevelopment : NSString;

external kCIAttributeTypeTime : NSString;

external kCIAttributeTypeScalar : NSString;

external kCIAttributeTypeDistance : NSString;

external kCIAttributeTypeAngle : NSString;

external kCIAttributeTypeBoolean : NSString;

external kCIAttributeTypeInteger : NSString;

external kCIAttributeTypeCount : NSString;

external kCIAttributeTypePosition : NSString;

external kCIAttributeTypeOffset : NSString;

external kCIAttributeTypePosition3 : NSString;

external kCIAttributeTypeRectangle : NSString;

external kCIAttributeTypeOpaqueColor : NSString;

external kCIAttributeTypeGradient : NSString;

external kCICategoryDistortionEffect : NSString;

external kCICategoryGeometryAdjustment : NSString;

external kCICategoryCompositeOperation : NSString;

external kCICategoryHalftoneEffect : NSString;

external kCICategoryColorAdjustment : NSString;

external kCICategoryColorEffect : NSString;

external kCICategoryTransition : NSString;

external kCICategoryTileEffect : NSString;

external kCICategoryGenerator : NSString;

external kCICategoryReduction : NSString;

external kCICategoryGradient : NSString;

external kCICategoryStylize : NSString;

external kCICategorySharpen : NSString;

external kCICategoryBlur : NSString;

external kCICategoryVideo : NSString;

external kCICategoryStillImage : NSString;

external kCICategoryInterlaced : NSString;

external kCICategoryNonSquarePixels : NSString;

external kCICategoryHighDynamicRange : NSString;

external kCICategoryBuiltIn : NSString;

external kCICategoryFilterGenerator : NSString;

external kCIApplyOptionExtent : NSString;

external kCIApplyOptionDefinition : NSString;

external kCIApplyOptionUserInfo : NSString;

external kCIOutputImageKey : NSString;

external kCIInputBackgroundImageKey : NSString;

external kCIInputImageKey : NSString;

external kCIInputTimeKey : NSString;

external kCIInputTransformKey : NSString;

external kCIInputScaleKey : NSString;

external kCIInputAspectRatioKey : NSString;

external kCIInputCenterKey : NSString;

external kCIInputRadiusKey : NSString;

external kCIInputAngleKey : NSString;

external kCIInputRefractionKey : NSString;

external kCIInputWidthKey : NSString;

external kCIInputSharpnessKey : NSString;

external kCIInputIntensityKey : NSString;

external kCIInputEVKey : NSString;

external kCIInputSaturationKey : NSString;

external kCIInputColorKey : NSString;

external kCIInputBrightnessKey : NSString;

external kCIInputContrastKey : NSString;

external kCIInputGradientImageKey : NSString;

external kCIInputMaskImageKey : NSString;

external kCIInputShadingImageKey : NSString;

external kCIInputTargetImageKey : NSString;

external kCIInputExtentKey : NSString;

external kCIFilterGeneratorExportedKey : NSString;

external kCIFilterGeneratorExportedKeyTargetObject : NSString;

external kCIFilterGeneratorExportedKeyName : NSString;

external kCIImageProviderTileSize : NSString;

external kCIImageProviderUserInfo : NSString;

external kCISamplerAffineMatrix : NSString;

external kCISamplerWrapMode : NSString;

external kCISamplerFilterMode : NSString;

external kCISamplerWrapBlack : NSString;

external kCISamplerWrapClamp : NSString;

external kCISamplerFilterNearest : NSString;

external kCISamplerFilterLinear : NSString;

external CACurrentMediaTime() : Double;

record Struct_CATransform3D (
    m11 : Float,
    m12 : Float,
    m13 : Float,
    m14 : Float,
    m21 : Float,
    m22 : Float,
    m23 : Float,
    m24 : Float,
    m31 : Float,
    m32 : Float,
    m33 : Float,
    m34 : Float,
    m41 : Float,
    m42 : Float,
    m43 : Float,
    m44 : Float,
);

alias CATransform3D = Struct_CATransform3D;

external CATransform3DIdentity : CATransform3D;

external CATransform3DIsIdentity(
    t : CATransform3D) : Bool;

external CATransform3DEqualToTransform(
    a : CATransform3D,
    b : CATransform3D) : Bool;

external CATransform3DMakeTranslation(
    tx : Float,
    ty : Float,
    tz : Float) : CATransform3D;

external CATransform3DMakeScale(
    sx : Float,
    sy : Float,
    sz : Float) : CATransform3D;

external CATransform3DMakeRotation(
    angle : Float,
    x : Float,
    y : Float,
    z : Float) : CATransform3D;

external CATransform3DTranslate(
    t : CATransform3D,
    tx : Float,
    ty : Float,
    tz : Float) : CATransform3D;

external CATransform3DScale(
    t : CATransform3D,
    sx : Float,
    sy : Float,
    sz : Float) : CATransform3D;

external CATransform3DRotate(
    t : CATransform3D,
    angle : Float,
    x : Float,
    y : Float,
    z : Float) : CATransform3D;

external CATransform3DConcat(
    a : CATransform3D,
    b : CATransform3D) : CATransform3D;

external CATransform3DInvert(
    t : CATransform3D) : CATransform3D;

external CATransform3DMakeAffineTransform(
    m : CGAffineTransform) : CATransform3D;

external CATransform3DIsAffine(
    t : CATransform3D) : Bool;

external CATransform3DGetAffineTransform(
    t : CATransform3D) : CGAffineTransform;

external kCAFillModeForwards : NSString;

external kCAFillModeBackwards : NSString;

external kCAFillModeBoth : NSString;

external kCAFillModeRemoved : NSString;

external kCAFillModeFrozen : NSString;

alias kCALayerNotSizable = 0;
alias kCALayerMinXMargin = 1;
alias kCALayerWidthSizable = 2;
alias kCALayerMaxXMargin = 4;
alias kCALayerMinYMargin = 8;
alias kCALayerHeightSizable = 16;
alias kCALayerMaxYMargin = 32;

alias kCALayerLeftEdge = 1;
alias kCALayerRightEdge = 2;
alias kCALayerBottomEdge = 4;
alias kCALayerTopEdge = 8;

external kCAGravityCenter : NSString;

external kCAGravityTop : NSString;

external kCAGravityBottom : NSString;

external kCAGravityLeft : NSString;

external kCAGravityRight : NSString;

external kCAGravityTopLeft : NSString;

external kCAGravityTopRight : NSString;

external kCAGravityBottomLeft : NSString;

external kCAGravityBottomRight : NSString;

external kCAGravityResize : NSString;

external kCAGravityResizeAspect : NSString;

external kCAGravityResizeAspectFill : NSString;

external kCAFilterNearest : NSString;

external kCAFilterLinear : NSString;

external kCAFilterTrilinear : NSString;

external kCAOnOrderIn : NSString;

external kCAOnOrderOut : NSString;

external kCATransition : NSString;

external kCAAnimationLinear : NSString;

external kCAAnimationDiscrete : NSString;

external kCAAnimationPaced : NSString;

external kCAAnimationRotateAuto : NSString;

external kCAAnimationRotateAutoReverse : NSString;

external kCATransitionFade : NSString;

external kCATransitionMoveIn : NSString;

external kCATransitionPush : NSString;

external kCATransitionReveal : NSString;

external kCATransitionFromRight : NSString;

external kCATransitionFromLeft : NSString;

external kCATransitionFromTop : NSString;

external kCATransitionFromBottom : NSString;

alias kCAConstraintMinX = 0;
alias kCAConstraintMidX = 1;
alias kCAConstraintMaxX = 2;
alias kCAConstraintWidth = 3;
alias kCAConstraintMinY = 4;
alias kCAConstraintMidY = 5;
alias kCAConstraintMaxY = 6;
alias kCAConstraintHeight = 7;

alias CAConstraintAttribute = Int;

external kCAEmitterLayerPoint : NSString;

external kCAEmitterLayerLine : NSString;

external kCAEmitterLayerRectangle : NSString;

external kCAEmitterLayerCuboid : NSString;

external kCAEmitterLayerCircle : NSString;

external kCAEmitterLayerSphere : NSString;

external kCAEmitterLayerPoints : NSString;

external kCAEmitterLayerOutline : NSString;

external kCAEmitterLayerSurface : NSString;

external kCAEmitterLayerVolume : NSString;

external kCAEmitterLayerUnordered : NSString;

external kCAEmitterLayerOldestFirst : NSString;

external kCAEmitterLayerOldestLast : NSString;

external kCAEmitterLayerBackToFront : NSString;

external kCAEmitterLayerAdditive : NSString;

external kCAGradientLayerAxial : NSString;

external kCAMediaTimingFunctionLinear : NSString;

external kCAMediaTimingFunctionEaseIn : NSString;

external kCAMediaTimingFunctionEaseOut : NSString;

external kCAMediaTimingFunctionEaseInEaseOut : NSString;

external kCAMediaTimingFunctionDefault : NSString;

external kCAScrollNone : NSString;

external kCAScrollVertically : NSString;

external kCAScrollHorizontally : NSString;

external kCAScrollBoth : NSString;

external kCAFillRuleNonZero : NSString;

external kCAFillRuleEvenOdd : NSString;

external kCALineJoinMiter : NSString;

external kCALineJoinRound : NSString;

external kCALineJoinBevel : NSString;

external kCALineCapButt : NSString;

external kCALineCapRound : NSString;

external kCALineCapSquare : NSString;

external kCATruncationNone : NSString;

external kCATruncationStart : NSString;

external kCATruncationEnd : NSString;

external kCATruncationMiddle : NSString;

external kCAAlignmentNatural : NSString;

external kCAAlignmentLeft : NSString;

external kCAAlignmentRight : NSString;

external kCAAlignmentCenter : NSString;

external kCAAlignmentJustified : NSString;

external kCATransactionAnimationDuration : NSString;

external kCATransactionDisableActions : NSString;

external kCATransactionAnimationTimingFunction : NSString;

external kCATransactionCompletionBlock : NSString;

external kCAValueFunctionRotateX : NSString;

external kCAValueFunctionRotateY : NSString;

external kCAValueFunctionRotateZ : NSString;

external kCAValueFunctionScale : NSString;

external kCAValueFunctionScaleX : NSString;

external kCAValueFunctionScaleY : NSString;

external kCAValueFunctionScaleZ : NSString;

external kCAValueFunctionTranslate : NSString;

external kCAValueFunctionTranslateX : NSString;

external kCAValueFunctionTranslateY : NSString;

external kCAValueFunctionTranslateZ : NSString;
