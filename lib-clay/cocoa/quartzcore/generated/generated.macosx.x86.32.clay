// Automatically generated by clay-bindgen
// language: objective-c

import cocoa.objc.*;

import libc.*;
import cocoa.corefoundation.*;
import cocoa.applicationservices.*;
import cocoa.foundation.*;

private alias OpaquePointer = RawPointer;
private alias UnknownType = Int;
private alias AUnionType = Int;


overload selector(static #"AMSymbol") = NSString;
overload selector(static #"CATransform3DValue") = CATransform3D;
overload selector(static #"DTD") = NSXMLDTD;
overload selector(static #"DTDKind") = UInt;
overload selector(static #"DTDNodeWithXMLString:") = Id, NSString;
overload selector(static #"HTTPBody") = NSData;
overload selector(static #"HTTPBodyStream") = NSInputStream;
overload selector(static #"HTTPMethod") = NSString;
overload selector(static #"HTTPShouldHandleCookies") = Bool;
overload selector(static #"ISOCountryCodes") = NSArray;
overload selector(static #"ISOCurrencyCodes") = NSArray;
overload selector(static #"ISOLanguageCodes") = NSArray;
overload selector(static #"MIMEType") = NSString;
overload selector(static #"PMSymbol") = NSString;
overload selector(static #"TXTRecordData") = NSData;
overload selector(static #"URI") = NSString;
overload selector(static #"URL") = NSURL;
overload selector(static #"URL:resourceDataDidBecomeAvailable:") = Void, NSURL, NSData;
overload selector(static #"URL:resourceDidFailLoadingWithReason:") = Void, NSURL, NSString;
overload selector(static #"URLByAppendingPathComponent:") = NSURL, NSString;
overload selector(static #"URLByAppendingPathExtension:") = NSURL, NSString;
overload selector(static #"URLByDeletingLastPathComponent") = NSURL;
overload selector(static #"URLByDeletingPathExtension") = NSURL;
overload selector(static #"URLByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:") = Id, NSData, UInt, NSURL, Pointer[Bool], Pointer[NSError];
overload selector(static #"URLByResolvingSymlinksInPath") = NSURL;
overload selector(static #"URLByStandardizingPath") = NSURL;
overload selector(static #"URLForAuxiliaryExecutable:") = NSURL, NSString;
overload selector(static #"URLForDirectory:inDomain:appropriateForURL:create:error:") = NSURL, UInt, UInt, NSURL, Bool, Pointer[NSError];
overload selector(static #"URLForKey:") = NSURL, NSString;
overload selector(static #"URLForResource:withExtension:") = NSURL, NSString, NSString;
overload selector(static #"URLForResource:withExtension:subdirectory:") = NSURL, NSString, NSString, NSString;
overload selector(static #"URLForResource:withExtension:subdirectory:inBundleWithURL:") = NSURL, NSString, NSString, NSString, NSURL;
overload selector(static #"URLForResource:withExtension:subdirectory:localization:") = NSURL, NSString, NSString, NSString, NSString;
overload selector(static #"URLHandle:resourceDataDidBecomeAvailable:") = Void, NSURLHandle, NSData;
overload selector(static #"URLHandle:resourceDidFailLoadingWithReason:") = Void, NSURLHandle, NSString;
overload selector(static #"URLHandleClassForURL:") = Id, NSURL;
overload selector(static #"URLHandleResourceDidBeginLoading:") = Void, NSURLHandle;
overload selector(static #"URLHandleResourceDidCancelLoading:") = Void, NSURLHandle;
overload selector(static #"URLHandleResourceDidFinishLoading:") = Void, NSURLHandle;
overload selector(static #"URLHandleUsingCache:") = NSURLHandle, Bool;
overload selector(static #"URLProtocol:cachedResponseIsValid:") = Void, NSURLProtocol, NSCachedURLResponse;
overload selector(static #"URLProtocol:didCancelAuthenticationChallenge:") = Void, NSURLProtocol, NSURLAuthenticationChallenge;
overload selector(static #"URLProtocol:didFailWithError:") = Void, NSURLProtocol, NSError;
overload selector(static #"URLProtocol:didLoadData:") = Void, NSURLProtocol, NSData;
overload selector(static #"URLProtocol:didReceiveAuthenticationChallenge:") = Void, NSURLProtocol, NSURLAuthenticationChallenge;
overload selector(static #"URLProtocol:didReceiveResponse:cacheStoragePolicy:") = Void, NSURLProtocol, NSURLResponse, UInt;
overload selector(static #"URLProtocol:wasRedirectedToRequest:redirectResponse:") = Void, NSURLProtocol, NSURLRequest, NSURLResponse;
overload selector(static #"URLProtocolDidFinishLoading:") = Void, NSURLProtocol;
overload selector(static #"URLResourceDidCancelLoading:") = Void, NSURL;
overload selector(static #"URLResourceDidFinishLoading:") = Void, NSURL;
overload selector(static #"URLWithString:") = Id, NSString;
overload selector(static #"URLWithString:relativeToURL:") = Id, NSString, NSURL;
overload selector(static #"URLsForDirectory:inDomains:") = NSArray, UInt, UInt;
overload selector(static #"URLsForResourcesWithExtension:subdirectory:") = NSArray, NSString, NSString;
overload selector(static #"URLsForResourcesWithExtension:subdirectory:inBundleWithURL:") = NSArray, NSString, NSString, NSURL;
overload selector(static #"URLsForResourcesWithExtension:subdirectory:localization:") = NSArray, NSString, NSString, NSString;
overload selector(static #"UTF8String") = Pointer[CChar];
overload selector(static #"W") = Float;
overload selector(static #"X") = Float;
overload selector(static #"XMLData") = NSData;
overload selector(static #"XMLDataWithOptions:") = NSData, UInt;
overload selector(static #"XMLString") = NSString;
overload selector(static #"XMLStringWithOptions:") = NSString, UInt;
overload selector(static #"XPath") = NSString;
overload selector(static #"Y") = Float;
overload selector(static #"Z") = Float;
overload selector(static #"abbreviation") = NSString;
overload selector(static #"abbreviationDictionary") = NSDictionary;
overload selector(static #"abbreviationForDate:") = NSString, NSDate;
overload selector(static #"abortParsing") = Void;
overload selector(static #"absoluteString") = NSString;
overload selector(static #"absoluteURL") = NSURL;
overload selector(static #"acceptConnectionInBackgroundAndNotify") = Void;
overload selector(static #"acceptConnectionInBackgroundAndNotifyForModes:") = Void, NSArray;
overload selector(static #"acceptInputForMode:beforeDate:") = Void, NSString, NSDate;
overload selector(static #"accessInstanceVariablesDirectly") = Bool;
overload selector(static #"acquireFunction") = CCodePointer[(RawPointer,CCodePointer[(RawPointer),(UInt)],CChar),(RawPointer)];
overload selector(static #"actionForKey:") = Id, NSString;
overload selector(static #"actionForLayer:forKey:") = Id, CALayer, NSString;
overload selector(static #"actions") = NSDictionary;
overload selector(static #"activeProcessorCount") = UInt;
overload selector(static #"addAnimation:forKey:") = Void, CAAnimation, NSString;
overload selector(static #"addAttribute:") = Void, NSXMLNode;
overload selector(static #"addAttribute:value:range:") = Void, NSString, Id, NSRange;
overload selector(static #"addAttributes:range:") = Void, NSDictionary, NSRange;
overload selector(static #"addCharactersInRange:") = Void, NSRange;
overload selector(static #"addCharactersInString:") = Void, NSString;
overload selector(static #"addChild:") = Void, NSXMLNode;
overload selector(static #"addClient:") = Void, Id;
overload selector(static #"addConnection:toRunLoop:forMode:") = Void, NSConnection, NSRunLoop, NSString;
overload selector(static #"addConstraint:") = Void, CAConstraint;
overload selector(static #"addDependency:") = Void, NSOperation;
overload selector(static #"addEntriesFromDictionary:") = Void, NSDictionary;
overload selector(static #"addExecutionBlock:") = Void, UnknownType;
overload selector(static #"addIndex:") = Void, UInt;
overload selector(static #"addIndexes:") = Void, NSIndexSet;
overload selector(static #"addIndexesInRange:") = Void, NSRange;
overload selector(static #"addNamespace:") = Void, NSXMLNode;
overload selector(static #"addObject:") = Void, Id;
overload selector(static #"addObjectsFromArray:") = Void, NSArray;
overload selector(static #"addObserver:forKeyPath:options:context:") = Void, NSObject, NSString, UInt, RawPointer;
overload selector(static #"addObserver:selector:name:object:") = Void, Id, SelectorHandle, NSString, Id;
overload selector(static #"addObserver:selector:name:object:suspensionBehavior:") = Void, Id, SelectorHandle, NSString, NSString, UInt;
overload selector(static #"addObserver:toObjectsAtIndexes:forKeyPath:options:context:") = Void, NSObject, NSIndexSet, NSString, UInt, RawPointer;
overload selector(static #"addObserverForName:object:queue:usingBlock:") = Id, NSString, Id, NSOperationQueue, UnknownType;
overload selector(static #"addOperation:") = Void, NSOperation;
overload selector(static #"addOperationWithBlock:") = Void, UnknownType;
overload selector(static #"addOperations:waitUntilFinished:") = Void, NSArray, Bool;
overload selector(static #"addPointer:") = Void, RawPointer;
overload selector(static #"addPort:forMode:") = Void, NSPort, NSString;
overload selector(static #"addRequestMode:") = Void, NSString;
overload selector(static #"addRunLoop:") = Void, NSRunLoop;
overload selector(static #"addSublayer:") = Void, CALayer;
overload selector(static #"addSuiteNamed:") = Void, NSString;
overload selector(static #"addTimeInterval:") = Id, Double;
overload selector(static #"addTimer:forMode:") = Void, NSTimer, NSString;
overload selector(static #"addUpdateRect:") = Void, CGRect;
overload selector(static #"addValue:forHTTPHeaderField:") = Void, NSString, NSString;
overload selector(static #"address") = Id;
overload selector(static #"addressCheckingResultWithRange:components:") = NSTextCheckingResult, NSRange, NSDictionary;
overload selector(static #"addressComponents") = NSDictionary;
overload selector(static #"addresses") = NSArray;
overload selector(static #"aeDesc") = Pointer[AEDesc];
overload selector(static #"aeteResource:") = NSData, NSString;
overload selector(static #"affineTransform") = CGAffineTransform;
overload selector(static #"alignmentMode") = NSString;
overload selector(static #"allBundles") = NSArray;
overload selector(static #"allConnections") = NSArray;
overload selector(static #"allCredentials") = NSDictionary;
overload selector(static #"allFrameworks") = NSArray;
overload selector(static #"allHTTPHeaderFields") = NSDictionary;
overload selector(static #"allHeaderFields") = NSDictionary;
overload selector(static #"allKeys") = NSArray;
overload selector(static #"allKeysForObject:") = NSArray, Id;
overload selector(static #"allLanguages") = NSArray;
overload selector(static #"allObjects") = NSArray;
overload selector(static #"allScripts") = NSArray;
overload selector(static #"allValues") = NSArray;
overload selector(static #"alloc") = Id;
overload selector(static #"allocWithZone:") = Id, Pointer[NSZone];
overload selector(static #"allowsFloats") = Bool;
overload selector(static #"allowsKeyedCoding") = Bool;
overload selector(static #"allowsNaturalLanguage") = Bool;
overload selector(static #"allowsReverseTransformation") = Bool;
overload selector(static #"alpha") = Float;
overload selector(static #"alphaRange") = Float;
overload selector(static #"alphaSpeed") = Float;
overload selector(static #"alphanumericCharacterSet") = Id;
overload selector(static #"alwaysShowsDecimalSeparator") = Bool;
overload selector(static #"anchorPoint") = CGPoint;
overload selector(static #"anchorPointZ") = Float;
overload selector(static #"andPredicateWithSubpredicates:") = NSPredicate, NSArray;
overload selector(static #"animation") = Id;
overload selector(static #"animationDidStart:") = Void, CAAnimation;
overload selector(static #"animationDidStop:finished:") = Void, CAAnimation, Bool;
overload selector(static #"animationDuration") = Double;
overload selector(static #"animationForKey:") = CAAnimation, NSString;
overload selector(static #"animationKeys") = NSArray;
overload selector(static #"animationTimingFunction") = CAMediaTimingFunction;
overload selector(static #"animationWithKeyPath:") = Id, NSString;
overload selector(static #"animations") = NSArray;
overload selector(static #"anyObject") = Id;
overload selector(static #"appendAttributedString:") = Void, NSAttributedString;
overload selector(static #"appendBytes:length:") = Void, RawPointer, UInt;
overload selector(static #"appendData:") = Void, NSData;
overload varargSelector(static #"appendFormat:") = Void, NSString;
overload selector(static #"appendString:") = Void, NSString;
overload selector(static #"appendTransform:") = Void, NSAffineTransform;
overload selector(static #"appleEvent") = NSAppleEventDescriptor;
overload selector(static #"appleEventClassCode") = CULong;
overload selector(static #"appleEventCode") = CULong;
overload selector(static #"appleEventCodeForArgumentWithName:") = CULong, NSString;
overload selector(static #"appleEventCodeForKey:") = CULong, NSString;
overload selector(static #"appleEventCodeForReturnType") = CULong;
overload selector(static #"appleEventCodeForSuite:") = CULong, NSString;
overload selector(static #"appleEventForSuspensionID:") = NSAppleEventDescriptor, NSAppleEventManagerSuspensionID;
overload selector(static #"appleEventWithEventClass:eventID:targetDescriptor:returnID:transactionID:") = NSAppleEventDescriptor, CULong, CULong, NSAppleEventDescriptor, Short, CLong;
overload varargSelector(static #"apply:") = CIImage, CIKernel;
overload selector(static #"apply:arguments:options:") = CIImage, CIKernel, NSArray, NSDictionary;
overload selector(static #"archiveRootObject:toFile:") = Bool, Id, NSString;
overload selector(static #"archivedDataWithRootObject:") = NSData, Id;
overload selector(static #"archiver:didEncodeObject:") = Void, NSKeyedArchiver, Id;
overload selector(static #"archiver:willEncodeObject:") = Id, NSKeyedArchiver, Id;
overload selector(static #"archiver:willReplaceObject:withObject:") = Void, NSKeyedArchiver, Id, Id;
overload selector(static #"archiverData") = NSMutableData;
overload selector(static #"archiverDidFinish:") = Void, NSKeyedArchiver;
overload selector(static #"archiverWillFinish:") = Void, NSKeyedArchiver;
overload selector(static #"argumentNames") = NSArray;
overload selector(static #"arguments") = Id;
overload selector(static #"argumentsRetained") = Bool;
overload selector(static #"array") = Id;
overload selector(static #"arrayByAddingObject:") = NSArray, Id;
overload selector(static #"arrayByAddingObjectsFromArray:") = NSArray, NSArray;
overload selector(static #"arrayForKey:") = NSArray, NSString;
overload selector(static #"arrayWithArray:") = Id, NSArray;
overload selector(static #"arrayWithCapacity:") = Id, UInt;
overload selector(static #"arrayWithContentsOfFile:") = Id, NSString;
overload selector(static #"arrayWithContentsOfURL:") = Id, NSURL;
overload selector(static #"arrayWithObject:") = Id, Id;
overload varargSelector(static #"arrayWithObjects:") = Id, Id;
overload selector(static #"arrayWithObjects:count:") = Id, Pointer[Id], UInt;
overload selector(static #"ascending") = Bool;
overload selector(static #"attemptRecoveryFromError:optionIndex:") = Bool, NSError, UInt;
overload selector(static #"attemptRecoveryFromError:optionIndex:delegate:didRecoverSelector:contextInfo:") = Void, NSError, UInt, Id, SelectorHandle, RawPointer;
overload selector(static #"attribute") = NSString;
overload selector(static #"attribute:atIndex:effectiveRange:") = Id, NSString, UInt, NSRangePointer;
overload selector(static #"attribute:atIndex:longestEffectiveRange:inRange:") = Id, NSString, UInt, NSRangePointer, NSRange;
overload selector(static #"attributeDeclarationForName:elementName:") = NSXMLDTDNode, NSString, NSString;
overload selector(static #"attributeDescriptorForKeyword:") = NSAppleEventDescriptor, CULong;
overload selector(static #"attributeForLocalName:URI:") = NSXMLNode, NSString, NSString;
overload selector(static #"attributeForName:") = NSXMLNode, NSString;
overload selector(static #"attributeKeys") = NSArray;
overload selector(static #"attributeWithName:URI:stringValue:") = Id, NSString, NSString, NSString;
overload selector(static #"attributeWithName:stringValue:") = Id, NSString, NSString;
overload selector(static #"attributedStringForNil") = NSAttributedString;
overload selector(static #"attributedStringForNotANumber") = NSAttributedString;
overload selector(static #"attributedStringForObjectValue:withDefaultAttributes:") = NSAttributedString, Id, NSDictionary;
overload selector(static #"attributedStringForZero") = NSAttributedString;
overload selector(static #"attributedSubstringFromRange:") = NSAttributedString, NSRange;
overload selector(static #"attributes") = Id;
overload selector(static #"attributesAtIndex:effectiveRange:") = NSDictionary, UInt, NSRangePointer;
overload selector(static #"attributesAtIndex:longestEffectiveRange:inRange:") = NSDictionary, UInt, NSRangePointer, NSRange;
overload selector(static #"attributesOfFileSystemForPath:error:") = NSDictionary, NSString, Pointer[NSError];
overload selector(static #"attributesOfItemAtPath:error:") = NSDictionary, NSString, Pointer[NSError];
overload selector(static #"authenticateComponents:withData:") = Bool, NSArray, NSData;
overload selector(static #"authenticationDataForComponents:") = NSData, NSArray;
overload selector(static #"authenticationMethod") = NSString;
overload selector(static #"autoContentAccessingProxy") = Id;
overload selector(static #"automaticallyNotifiesObserversForKey:") = Bool, NSString;
overload selector(static #"autorelease") = Id;
overload selector(static #"autoresizingMask") = UInt;
overload selector(static #"autoreverses") = Bool;
overload selector(static #"autoupdatingCurrentCalendar") = Id;
overload selector(static #"autoupdatingCurrentLocale") = Id;
overload selector(static #"availableData") = NSData;
overload selector(static #"availableLocaleIdentifiers") = NSArray;
overload selector(static #"availableResourceData") = NSData;
overload selector(static #"availableStringEncodings") = Pointer[UInt];
overload selector(static #"awakeAfterUsingCoder:") = Id, NSCoder;
overload selector(static #"backgroundColor") = CGColorRef;
overload selector(static #"backgroundFilters") = NSArray;
overload selector(static #"backgroundLoadDidFailWithReason:") = Void, NSString;
overload selector(static #"baseSpecifier") = NSScriptObjectSpecifier;
overload selector(static #"baseURL") = NSURL;
overload selector(static #"begin") = Void;
overload selector(static #"beginContentAccess") = Bool;
overload selector(static #"beginEditing") = Void;
overload selector(static #"beginFrameAtTime:timeStamp:") = Void, Double, Pointer[CVTimeStamp];
overload selector(static #"beginLoadInBackground") = Void;
overload selector(static #"beginTime") = Double;
overload selector(static #"beginUndoGrouping") = Void;
overload selector(static #"birthRate") = Float;
overload selector(static #"bitmapRepresentation") = NSData;
overload selector(static #"blockOperationWithBlock:") = Id, UnknownType;
overload selector(static #"blue") = Float;
overload selector(static #"blueRange") = Float;
overload selector(static #"blueSpeed") = Float;
overload selector(static #"bookmarkDataWithContentsOfURL:error:") = NSData, NSURL, Pointer[NSError];
overload selector(static #"bookmarkDataWithOptions:includingResourceValuesForKeys:relativeToURL:error:") = NSData, UInt, NSArray, NSURL, Pointer[NSError];
overload selector(static #"boolForKey:") = Bool, NSString;
overload selector(static #"boolValue") = Bool;
overload selector(static #"booleanValue") = CUChar;
overload selector(static #"borderColor") = CGColorRef;
overload selector(static #"borderWidth") = Float;
overload selector(static #"bounds") = CGRect;
overload selector(static #"breakLock") = Void;
overload selector(static #"broadcast") = Void;
overload selector(static #"builtInPlugInsPath") = NSString;
overload selector(static #"builtInPlugInsURL") = NSURL;
overload selector(static #"bundleForClass:") = NSBundle, Id;
overload selector(static #"bundleForSuite:") = NSBundle, NSString;
overload selector(static #"bundleIdentifier") = NSString;
overload selector(static #"bundlePath") = NSString;
overload selector(static #"bundleURL") = NSURL;
overload selector(static #"bundleWithIdentifier:") = NSBundle, NSString;
overload selector(static #"bundleWithPath:") = NSBundle, NSString;
overload selector(static #"bundleWithURL:") = NSBundle, NSURL;
overload selector(static #"byValue") = Id;
overload selector(static #"bytes") = RawPointer;
overload selector(static #"cString") = Pointer[CChar];
overload selector(static #"cStringLength") = UInt;
overload selector(static #"cStringUsingEncoding:") = Pointer[CChar], UInt;
overload selector(static #"cache:willEvictObject:") = Void, NSCache, Id;
overload selector(static #"cachePolicy") = UInt;
overload selector(static #"cachedHandleForURL:") = NSURLHandle, NSURL;
overload selector(static #"cachedResponse") = NSCachedURLResponse;
overload selector(static #"cachedResponseForRequest:") = NSCachedURLResponse, NSURLRequest;
overload selector(static #"calculationMode") = NSString;
overload selector(static #"calendar") = NSCalendar;
overload selector(static #"calendarDate") = Id;
overload selector(static #"calendarFormat") = NSString;
overload selector(static #"calendarIdentifier") = NSString;
overload selector(static #"callStackReturnAddresses") = NSArray;
overload selector(static #"callStackSymbols") = NSArray;
overload selector(static #"canBeConvertedToEncoding:") = Bool, UInt;
overload selector(static #"canDrawInCGLContext:pixelFormat:forLayerTime:displayTime:") = Bool, CGLContextObj, CGLPixelFormatObj, Double, Pointer[CVTimeStamp];
overload selector(static #"canHandleRequest:") = Bool, NSURLRequest;
overload selector(static #"canInitWithRequest:") = Bool, NSURLRequest;
overload selector(static #"canInitWithURL:") = Bool, NSURL;
overload selector(static #"canRedo") = Bool;
overload selector(static #"canResumeDownloadDecodedWithEncodingMIMEType:") = Bool, NSString;
overload selector(static #"canUndo") = Bool;
overload selector(static #"cancel") = Void;
overload selector(static #"cancelAllOperations") = Void;
overload selector(static #"cancelAuthenticationChallenge:") = Void, NSURLAuthenticationChallenge;
overload selector(static #"cancelLoadInBackground") = Void;
overload selector(static #"cancelPerformSelector:target:argument:") = Void, SelectorHandle, Id, Id;
overload selector(static #"cancelPerformSelectorsWithTarget:") = Void, Id;
overload selector(static #"cancelPreviousPerformRequestsWithTarget:") = Void, Id;
overload selector(static #"cancelPreviousPerformRequestsWithTarget:selector:object:") = Void, Id, SelectorHandle, Id;
overload selector(static #"canonicalLanguageIdentifierFromString:") = NSString, NSString;
overload selector(static #"canonicalLocaleIdentifierFromString:") = NSString, NSString;
overload selector(static #"canonicalRequestForRequest:") = NSURLRequest, NSURLRequest;
overload selector(static #"canonicalXMLStringPreservingComments:") = NSString, Bool;
overload selector(static #"capitalizedLetterCharacterSet") = Id;
overload selector(static #"capitalizedString") = NSString;
overload selector(static #"caseInsensitiveCompare:") = Int, NSString;
overload selector(static #"caseSensitive") = Bool;
overload selector(static #"certificates") = NSArray;
overload selector(static #"changeCurrentDirectoryPath:") = Bool, NSString;
overload selector(static #"changeFileAttributes:atPath:") = Bool, NSDictionary, NSString;
overload selector(static #"charValue") = CChar;
overload selector(static #"characterAtIndex:") = UShort, UInt;
overload selector(static #"characterDirectionForLanguage:") = UInt, NSString;
overload selector(static #"characterEncoding") = NSString;
overload selector(static #"characterIsMember:") = Bool, UShort;
overload selector(static #"characterSetWithBitmapRepresentation:") = Id, NSData;
overload selector(static #"characterSetWithCharactersInString:") = Id, NSString;
overload selector(static #"characterSetWithContentsOfFile:") = Id, NSString;
overload selector(static #"characterSetWithRange:") = Id, NSRange;
overload selector(static #"charactersToBeSkipped") = NSCharacterSet;
overload selector(static #"checkResourceIsReachableAndReturnError:") = Bool, Pointer[NSError];
overload selector(static #"childAtIndex:") = NSXMLNode, UInt;
overload selector(static #"childCount") = UInt;
overload selector(static #"childSpecifier") = NSScriptObjectSpecifier;
overload selector(static #"children") = NSArray;
overload selector(static #"class") = Id;
overload selector(static #"classAttributes") = NSDictionary;
overload selector(static #"classCode") = CULong;
overload selector(static #"classDescription") = NSClassDescription;
overload selector(static #"classDescriptionForClass:") = Id, Id;
overload selector(static #"classDescriptionForKey:") = NSScriptClassDescription, NSString;
overload selector(static #"classDescriptionWithAppleEventCode:") = NSScriptClassDescription, CULong;
overload selector(static #"classDescriptionsInSuite:") = NSDictionary, NSString;
overload selector(static #"classFallbacksForKeyedArchiver") = NSArray;
overload selector(static #"classForArchiver") = Id;
overload selector(static #"classForClassName:") = Id, NSString;
overload selector(static #"classForCoder") = Id;
overload selector(static #"classForKeyedArchiver") = Id;
overload selector(static #"classForKeyedUnarchiver") = Id;
overload selector(static #"classForPortCoder") = Id;
overload selector(static #"className") = NSString;
overload selector(static #"classNameDecodedForArchiveClassName:") = NSString, NSString;
overload selector(static #"classNameEncodedForTrueClassName:") = NSString, NSString;
overload selector(static #"classNameForClass:") = NSString, Id;
overload selector(static #"classNamed:") = Id, NSString;
overload selector(static #"clear") = Void;
overload selector(static #"clearCaches") = Void;
overload selector(static #"client") = Id;
overload selector(static #"close") = Void;
overload selector(static #"closeFile") = Void;
overload selector(static #"code") = Int;
overload selector(static #"coerceToDescriptorType:") = NSAppleEventDescriptor, CULong;
overload selector(static #"coerceValue:forKey:") = Id, Id, NSString;
overload selector(static #"coerceValue:toClass:") = Id, Id, Id;
overload selector(static #"collectExhaustively") = Void;
overload selector(static #"collectIfNeeded") = Void;
overload selector(static #"collection") = Id;
overload selector(static #"color") = CGColorRef;
overload selector(static #"colorSpace") = CGColorSpaceRef;
overload selector(static #"colorWithCGColor:") = CIColor, CGColorRef;
overload selector(static #"colorWithRed:green:blue:") = CIColor, Float, Float, Float;
overload selector(static #"colorWithRed:green:blue:alpha:") = CIColor, Float, Float, Float, Float;
overload selector(static #"colorWithString:") = CIColor, NSString;
overload selector(static #"colors") = NSArray;
overload selector(static #"columnNumber") = Int;
overload selector(static #"commandClassName") = NSString;
overload selector(static #"commandDescription") = NSScriptCommandDescription;
overload selector(static #"commandDescriptionWithAppleEventClass:andAppleEventCode:") = NSScriptCommandDescription, CULong, CULong;
overload selector(static #"commandDescriptionsInSuite:") = NSDictionary, NSString;
overload selector(static #"commandName") = NSString;
overload selector(static #"comment") = NSString;
overload selector(static #"commentURL") = NSURL;
overload selector(static #"commentWithStringValue:") = Id, NSString;
overload selector(static #"commit") = Void;
overload selector(static #"commonISOCurrencyCodes") = NSArray;
overload selector(static #"commonPrefixWithString:options:") = NSString, NSString, UInt;
overload selector(static #"compact") = Void;
overload selector(static #"comparator") = NSComparator;
overload selector(static #"compare:") = Int, NSNumber;
overload selector(static #"compare:options:") = Int, NSString, UInt;
overload selector(static #"compare:options:range:") = Int, NSString, UInt, NSRange;
overload selector(static #"compare:options:range:locale:") = Int, NSString, UInt, NSRange, Id;
overload selector(static #"compareObject:toObject:") = Int, Id, Id;
overload selector(static #"comparisonPredicateModifier") = UInt;
overload selector(static #"compileAndReturnError:") = Bool, Pointer[NSDictionary];
overload selector(static #"completePathIntoString:caseSensitive:matchesIntoArray:filterTypes:") = UInt, Pointer[NSString], Bool, Pointer[NSArray], NSArray;
overload selector(static #"completionBlock") = UnknownType;
overload selector(static #"components") = NSArray;
overload selector(static #"components:fromDate:") = NSDateComponents, UInt, NSDate;
overload selector(static #"components:fromDate:toDate:options:") = NSDateComponents, UInt, NSDate, NSDate, UInt;
overload selector(static #"componentsFromLocaleIdentifier:") = NSDictionary, NSString;
overload selector(static #"componentsJoinedByString:") = NSString, NSString;
overload selector(static #"componentsSeparatedByCharactersInSet:") = NSArray, NSCharacterSet;
overload selector(static #"componentsSeparatedByString:") = NSArray, NSString;
overload selector(static #"componentsToDisplayForPath:") = NSArray, NSString;
overload selector(static #"compositingFilter") = Id;
overload selector(static #"compoundPredicateType") = UInt;
overload selector(static #"condition") = Int;
overload selector(static #"configureAsServer") = Void;
overload selector(static #"conformsToProtocol:") = Bool, Id;
overload selector(static #"connectObject:withKey:toObject:withKey:") = Void, Id, NSString, Id, NSString;
overload selector(static #"connection") = NSConnection;
overload selector(static #"connection:canAuthenticateAgainstProtectionSpace:") = Bool, NSURLConnection, NSURLProtectionSpace;
overload selector(static #"connection:didCancelAuthenticationChallenge:") = Void, NSURLConnection, NSURLAuthenticationChallenge;
overload selector(static #"connection:didFailWithError:") = Void, NSURLConnection, NSError;
overload selector(static #"connection:didReceiveAuthenticationChallenge:") = Void, NSURLConnection, NSURLAuthenticationChallenge;
overload selector(static #"connection:didReceiveData:") = Void, NSURLConnection, NSData;
overload selector(static #"connection:didReceiveResponse:") = Void, NSURLConnection, NSURLResponse;
overload selector(static #"connection:didSendBodyData:totalBytesWritten:totalBytesExpectedToWrite:") = Void, NSURLConnection, Int, Int, Int;
overload selector(static #"connection:handleRequest:") = Bool, NSConnection, NSDistantObjectRequest;
overload selector(static #"connection:needNewBodyStream:") = NSInputStream, NSURLConnection, NSURLRequest;
overload selector(static #"connection:shouldMakeNewConnection:") = Bool, NSConnection, NSConnection;
overload selector(static #"connection:willCacheResponse:") = NSCachedURLResponse, NSURLConnection, NSCachedURLResponse;
overload selector(static #"connection:willSendRequest:redirectResponse:") = NSURLRequest, NSURLConnection, NSURLRequest, NSURLResponse;
overload selector(static #"connectionDidFinishLoading:") = Void, NSURLConnection;
overload selector(static #"connectionForProxy") = NSConnection;
overload selector(static #"connectionShouldUseCredentialStorage:") = Bool, NSURLConnection;
overload selector(static #"connectionWithReceivePort:sendPort:") = Id, NSPort, NSPort;
overload selector(static #"connectionWithRegisteredName:host:") = Id, NSString, NSString;
overload selector(static #"connectionWithRegisteredName:host:usingNameServer:") = Id, NSString, NSString, NSPortNameServer;
overload selector(static #"connectionWithRequest:delegate:") = NSURLConnection, NSURLRequest, Id;
overload selector(static #"constantValue") = Id;
overload selector(static #"constraintWithAttribute:relativeTo:attribute:") = Id, Int, NSString, Int;
overload selector(static #"constraintWithAttribute:relativeTo:attribute:offset:") = Id, Int, NSString, Int, Float;
overload selector(static #"constraintWithAttribute:relativeTo:attribute:scale:offset:") = Id, Int, NSString, Int, Float, Float;
overload selector(static #"constraints") = NSArray;
overload selector(static #"containerClassDescription") = NSScriptClassDescription;
overload selector(static #"containerIsObjectBeingTested") = Bool;
overload selector(static #"containerIsRangeContainerObject") = Bool;
overload selector(static #"containerSpecifier") = NSScriptObjectSpecifier;
overload selector(static #"containsIndex:") = Bool, UInt;
overload selector(static #"containsIndexes:") = Bool, NSIndexSet;
overload selector(static #"containsIndexesInRange:") = Bool, NSRange;
overload selector(static #"containsObject:") = Bool, Id;
overload selector(static #"containsPoint:") = Bool, CGPoint;
overload selector(static #"containsValueForKey:") = Bool, NSString;
overload selector(static #"contents") = Id;
overload selector(static #"contentsAreFlipped") = Bool;
overload selector(static #"contentsAtPath:") = NSData, NSString;
overload selector(static #"contentsCenter") = CGRect;
overload selector(static #"contentsEqualAtPath:andPath:") = Bool, NSString, NSString;
overload selector(static #"contentsGravity") = NSString;
overload selector(static #"contentsOfDirectoryAtPath:error:") = NSArray, NSString, Pointer[NSError];
overload selector(static #"contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:") = NSArray, NSURL, NSArray, UInt, Pointer[NSError];
overload selector(static #"contentsRect") = CGRect;
overload selector(static #"contextWithCGContext:options:") = CIContext, CGContextRef, NSDictionary;
overload selector(static #"contextWithCGLContext:pixelFormat:colorSpace:options:") = CIContext, CGLContextObj, CGLPixelFormatObj, CGColorSpaceRef, NSDictionary;
overload selector(static #"contextWithCGLContext:pixelFormat:options:") = CIContext, CGLContextObj, CGLPixelFormatObj, NSDictionary;
overload selector(static #"continueWithoutCredentialForAuthenticationChallenge:") = Void, NSURLAuthenticationChallenge;
overload selector(static #"controlCharacterSet") = Id;
overload selector(static #"conversation") = Id;
overload selector(static #"convertPoint:fromLayer:") = CGPoint, CGPoint, CALayer;
overload selector(static #"convertPoint:toLayer:") = CGPoint, CGPoint, CALayer;
overload selector(static #"convertRect:fromLayer:") = CGRect, CGRect, CALayer;
overload selector(static #"convertRect:toLayer:") = CGRect, CGRect, CALayer;
overload selector(static #"convertTime:fromLayer:") = Double, Double, CALayer;
overload selector(static #"convertTime:toLayer:") = Double, Double, CALayer;
overload selector(static #"cookieAcceptPolicy") = UInt;
overload selector(static #"cookieWithProperties:") = Id, NSDictionary;
overload selector(static #"cookies") = NSArray;
overload selector(static #"cookiesForURL:") = NSArray, NSURL;
overload selector(static #"cookiesWithResponseHeaderFields:forURL:") = NSArray, NSDictionary, NSURL;
overload selector(static #"copy") = Id;
overload selector(static #"copyCGLContextForPixelFormat:") = CGLContextObj, CGLPixelFormatObj;
overload selector(static #"copyCGLPixelFormatForDisplayMask:") = CGLPixelFormatObj, UInt;
overload selector(static #"copyItemAtPath:toPath:error:") = Bool, NSString, NSString, Pointer[NSError];
overload selector(static #"copyItemAtURL:toURL:error:") = Bool, NSURL, NSURL, Pointer[NSError];
overload selector(static #"copyPath:toPath:handler:") = Bool, NSString, NSString, Id;
overload selector(static #"copyScriptingValue:forKey:withProperties:") = Id, Id, NSString, NSDictionary;
overload selector(static #"copyWithZone:") = Id, Pointer[NSZone];
overload selector(static #"cornerRadius") = Float;
overload selector(static #"correctionCheckingResultWithRange:replacementString:") = NSTextCheckingResult, NSRange, NSString;
overload selector(static #"count") = UInt;
overload selector(static #"countByEnumeratingWithState:objects:count:") = UInt, Pointer[NSFastEnumerationState], Pointer[Id], UInt;
overload selector(static #"countForObject:") = UInt, Id;
overload selector(static #"countLimit") = UInt;
overload selector(static #"countOfIndexesInRange:") = UInt, NSRange;
overload selector(static #"createCGImage:fromRect:") = CGImageRef, CIImage, CGRect;
overload selector(static #"createCGImage:fromRect:format:colorSpace:") = CGImageRef, CIImage, CGRect, Int, CGColorSpaceRef;
overload selector(static #"createCGLayerWithSize:info:") = CGLayerRef, CGSize, CFDictionaryRef;
overload selector(static #"createClassDescription") = NSScriptClassDescription;
overload selector(static #"createCommandInstance") = NSScriptCommand;
overload selector(static #"createCommandInstanceWithZone:") = NSScriptCommand, Pointer[NSZone];
overload selector(static #"createConversationForConnection:") = Id, NSConnection;
overload selector(static #"createDirectoryAtPath:attributes:") = Bool, NSString, NSDictionary;
overload selector(static #"createDirectoryAtPath:withIntermediateDirectories:attributes:error:") = Bool, NSString, Bool, NSDictionary, Pointer[NSError];
overload selector(static #"createFileAtPath:contents:attributes:") = Bool, NSString, NSData, NSDictionary;
overload selector(static #"createSymbolicLinkAtPath:pathContent:") = Bool, NSString, NSString;
overload selector(static #"createSymbolicLinkAtPath:withDestinationPath:error:") = Bool, NSString, NSString, Pointer[NSError];
overload selector(static #"credentialForTrust:") = NSURLCredential, SecTrustRef;
overload selector(static #"credentialWithIdentity:certificates:persistence:") = NSURLCredential, SecIdentityRef, NSArray, UInt;
overload selector(static #"credentialWithUser:password:persistence:") = NSURLCredential, NSString, NSString, UInt;
overload selector(static #"credentialsForProtectionSpace:") = NSDictionary, NSURLProtectionSpace;
overload selector(static #"currencyCode") = NSString;
overload selector(static #"currencyDecimalSeparator") = NSString;
overload selector(static #"currencyGroupingSeparator") = NSString;
overload selector(static #"currencySymbol") = NSString;
overload selector(static #"currentAppleEvent") = NSAppleEventDescriptor;
overload selector(static #"currentCalendar") = Id;
overload selector(static #"currentCommand") = NSScriptCommand;
overload selector(static #"currentConversation") = Id;
overload selector(static #"currentDirectoryPath") = NSString;
overload selector(static #"currentDiskUsage") = UInt;
overload selector(static #"currentHandler") = NSAssertionHandler;
overload selector(static #"currentHost") = NSHost;
overload selector(static #"currentLocale") = Id;
overload selector(static #"currentMemoryUsage") = UInt;
overload selector(static #"currentMode") = NSString;
overload selector(static #"currentQueue") = Id;
overload selector(static #"currentReplyAppleEvent") = NSAppleEventDescriptor;
overload selector(static #"currentRunLoop") = NSRunLoop;
overload selector(static #"currentThread") = NSThread;
overload selector(static #"customSelector") = SelectorHandle;
overload selector(static #"dashCheckingResultWithRange:replacementString:") = NSTextCheckingResult, NSRange, NSString;
overload selector(static #"data") = Id;
overload selector(static #"dataForKey:") = NSData, NSString;
overload selector(static #"dataFromPropertyList:format:errorDescription:") = NSData, Id, UInt, Pointer[NSString];
overload selector(static #"dataFromTXTRecordDictionary:") = NSData, NSDictionary;
overload selector(static #"dataUsingEncoding:") = NSData, UInt;
overload selector(static #"dataUsingEncoding:allowLossyConversion:") = NSData, UInt, Bool;
overload selector(static #"dataWithBytes:length:") = Id, RawPointer, UInt;
overload selector(static #"dataWithBytesNoCopy:length:") = Id, RawPointer, UInt;
overload selector(static #"dataWithBytesNoCopy:length:freeWhenDone:") = Id, RawPointer, UInt, Bool;
overload selector(static #"dataWithCapacity:") = Id, UInt;
overload selector(static #"dataWithContentsOfFile:") = Id, NSString;
overload selector(static #"dataWithContentsOfFile:options:error:") = Id, NSString, UInt, Pointer[NSError];
overload selector(static #"dataWithContentsOfMappedFile:") = Id, NSString;
overload selector(static #"dataWithContentsOfURL:") = Id, NSURL;
overload selector(static #"dataWithContentsOfURL:options:error:") = Id, NSURL, UInt, Pointer[NSError];
overload selector(static #"dataWithData:") = Id, NSData;
overload selector(static #"dataWithLength:") = Id, UInt;
overload selector(static #"dataWithPropertyList:format:options:error:") = NSData, Id, UInt, UInt, Pointer[NSError];
overload selector(static #"date") = Id;
overload selector(static #"dateByAddingComponents:toDate:options:") = NSDate, NSDateComponents, NSDate, UInt;
overload selector(static #"dateByAddingTimeInterval:") = Id, Double;
overload selector(static #"dateByAddingYears:months:days:hours:minutes:seconds:") = NSCalendarDate, Int, Int, Int, Int, Int, Int;
overload selector(static #"dateCheckingResultWithRange:date:") = NSTextCheckingResult, NSRange, NSDate;
overload selector(static #"dateCheckingResultWithRange:date:timeZone:duration:") = NSTextCheckingResult, NSRange, NSDate, NSTimeZone, Double;
overload selector(static #"dateFormat") = NSString;
overload selector(static #"dateFormatFromTemplate:options:locale:") = NSString, NSString, UInt, NSLocale;
overload selector(static #"dateFromComponents:") = NSDate, NSDateComponents;
overload selector(static #"dateFromString:") = NSDate, NSString;
overload selector(static #"dateStyle") = UInt;
overload selector(static #"dateWithCalendarFormat:timeZone:") = NSCalendarDate, NSString, NSTimeZone;
overload selector(static #"dateWithNaturalLanguageString:") = Id, NSString;
overload selector(static #"dateWithNaturalLanguageString:locale:") = Id, NSString, Id;
overload selector(static #"dateWithString:") = Id, NSString;
overload selector(static #"dateWithString:calendarFormat:") = Id, NSString, NSString;
overload selector(static #"dateWithString:calendarFormat:locale:") = Id, NSString, NSString, Id;
overload selector(static #"dateWithTimeInterval:sinceDate:") = Id, Double, NSDate;
overload selector(static #"dateWithTimeIntervalSince1970:") = Id, Double;
overload selector(static #"dateWithTimeIntervalSinceNow:") = Id, Double;
overload selector(static #"dateWithTimeIntervalSinceReferenceDate:") = Id, Double;
overload selector(static #"dateWithYear:month:day:hour:minute:second:timeZone:") = Id, Int, UInt, UInt, UInt, UInt, UInt, NSTimeZone;
overload selector(static #"day") = Int;
overload selector(static #"dayOfCommonEra") = Int;
overload selector(static #"dayOfMonth") = Int;
overload selector(static #"dayOfWeek") = Int;
overload selector(static #"dayOfYear") = Int;
overload selector(static #"daylightSavingTimeOffset") = Double;
overload selector(static #"daylightSavingTimeOffsetForDate:") = Double, NSDate;
overload selector(static #"dealloc") = Void;
overload selector(static #"decimalDigitCharacterSet") = Id;
overload selector(static #"decimalNumberByAdding:") = NSDecimalNumber, NSDecimalNumber;
overload selector(static #"decimalNumberByAdding:withBehavior:") = NSDecimalNumber, NSDecimalNumber, Id;
overload selector(static #"decimalNumberByDividingBy:") = NSDecimalNumber, NSDecimalNumber;
overload selector(static #"decimalNumberByDividingBy:withBehavior:") = NSDecimalNumber, NSDecimalNumber, Id;
overload selector(static #"decimalNumberByMultiplyingBy:") = NSDecimalNumber, NSDecimalNumber;
overload selector(static #"decimalNumberByMultiplyingBy:withBehavior:") = NSDecimalNumber, NSDecimalNumber, Id;
overload selector(static #"decimalNumberByMultiplyingByPowerOf10:") = NSDecimalNumber, Short;
overload selector(static #"decimalNumberByMultiplyingByPowerOf10:withBehavior:") = NSDecimalNumber, Short, Id;
overload selector(static #"decimalNumberByRaisingToPower:") = NSDecimalNumber, UInt;
overload selector(static #"decimalNumberByRaisingToPower:withBehavior:") = NSDecimalNumber, UInt, Id;
overload selector(static #"decimalNumberByRoundingAccordingToBehavior:") = NSDecimalNumber, Id;
overload selector(static #"decimalNumberBySubtracting:") = NSDecimalNumber, NSDecimalNumber;
overload selector(static #"decimalNumberBySubtracting:withBehavior:") = NSDecimalNumber, NSDecimalNumber, Id;
overload selector(static #"decimalNumberHandlerWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:") = Id, UInt, Short, Bool, Bool, Bool, Bool;
overload selector(static #"decimalNumberWithDecimal:") = NSDecimalNumber, NSDecimal;
overload selector(static #"decimalNumberWithMantissa:exponent:isNegative:") = NSDecimalNumber, UInt64, Short, Bool;
overload selector(static #"decimalNumberWithString:") = NSDecimalNumber, NSString;
overload selector(static #"decimalNumberWithString:locale:") = NSDecimalNumber, NSString, Id;
overload selector(static #"decimalSeparator") = NSString;
overload selector(static #"decimalValue") = NSDecimal;
overload selector(static #"decodeArrayOfObjCType:count:at:") = Void, Pointer[CChar], UInt, RawPointer;
overload selector(static #"decodeBoolForKey:") = Bool, NSString;
overload selector(static #"decodeBytesForKey:returnedLength:") = Pointer[CUChar], NSString, Pointer[UInt];
overload selector(static #"decodeBytesWithReturnedLength:") = RawPointer, Pointer[UInt];
overload selector(static #"decodeClassName:asClassName:") = Void, NSString, NSString;
overload selector(static #"decodeDataObject") = NSData;
overload selector(static #"decodeDoubleForKey:") = Double, NSString;
overload selector(static #"decodeFloatForKey:") = Float, NSString;
overload selector(static #"decodeInt32ForKey:") = Int, NSString;
overload selector(static #"decodeInt64ForKey:") = Int64, NSString;
overload selector(static #"decodeIntForKey:") = Int, NSString;
overload selector(static #"decodeIntegerForKey:") = Int, NSString;
overload selector(static #"decodeNXObject") = Id;
overload selector(static #"decodeObject") = Id;
overload selector(static #"decodeObjectForKey:") = Id, NSString;
overload selector(static #"decodePoint") = NSPoint;
overload selector(static #"decodePointForKey:") = NSPoint, NSString;
overload selector(static #"decodePortObject") = NSPort;
overload selector(static #"decodePropertyList") = Id;
overload selector(static #"decodeRect") = NSRect;
overload selector(static #"decodeRectForKey:") = NSRect, NSString;
overload selector(static #"decodeSize") = NSSize;
overload selector(static #"decodeSizeForKey:") = NSSize, NSString;
overload selector(static #"decodeValueOfObjCType:at:") = Void, Pointer[CChar], RawPointer;
overload varargSelector(static #"decodeValuesOfObjCTypes:") = Void, Pointer[CChar];
overload selector(static #"decomposableCharacterSet") = Id;
overload selector(static #"decomposedStringWithCanonicalMapping") = NSString;
overload selector(static #"decomposedStringWithCompatibilityMapping") = NSString;
overload selector(static #"defaultActionForKey:") = Id, NSString;
overload selector(static #"defaultBehavior") = Id;
overload selector(static #"defaultCStringEncoding") = UInt;
overload selector(static #"defaultCenter") = Id;
overload selector(static #"defaultCollector") = Id;
overload selector(static #"defaultConnection") = NSConnection;
overload selector(static #"defaultCredentialForProtectionSpace:") = NSURLCredential, NSURLProtectionSpace;
overload selector(static #"defaultDate") = NSDate;
overload selector(static #"defaultDecimalNumberHandler") = Id;
overload selector(static #"defaultFormatterBehavior") = UInt;
overload selector(static #"defaultManager") = NSFileManager;
overload selector(static #"defaultNameServerPortNumber") = UShort;
overload selector(static #"defaultQueue") = Id;
overload selector(static #"defaultSubcontainerAttributeKey") = NSString;
overload selector(static #"defaultTimeZone") = NSTimeZone;
overload selector(static #"defaultValueForKey:") = Id, NSString;
overload selector(static #"definition") = CIFilterShape;
overload selector(static #"delegate") = Id;
overload selector(static #"deleteCharactersInRange:") = Void, NSRange;
overload selector(static #"deleteCookie:") = Void, NSHTTPCookie;
overload selector(static #"deletesFileUponFailure") = Bool;
overload selector(static #"dependencies") = NSArray;
overload selector(static #"dequeueNotificationsMatching:coalesceMask:") = Void, NSNotification, UInt;
overload selector(static #"description") = NSString;
overload selector(static #"descriptionFunction") = CCodePointer[(RawPointer),(NSString)];
overload selector(static #"descriptionInStringsFileFormat") = NSString;
overload selector(static #"descriptionWithCalendarFormat:") = NSString, NSString;
overload selector(static #"descriptionWithCalendarFormat:locale:") = NSString, NSString, Id;
overload selector(static #"descriptionWithCalendarFormat:timeZone:locale:") = NSString, NSString, NSTimeZone, Id;
overload selector(static #"descriptionWithLocale:") = NSString, Id;
overload selector(static #"descriptionWithLocale:indent:") = NSString, Id, UInt;
overload selector(static #"descriptor") = NSAppleEventDescriptor;
overload selector(static #"descriptorAtIndex:") = NSAppleEventDescriptor, Int;
overload selector(static #"descriptorForKeyword:") = NSAppleEventDescriptor, CULong;
overload selector(static #"descriptorType") = CULong;
overload selector(static #"descriptorWithBoolean:") = NSAppleEventDescriptor, CUChar;
overload selector(static #"descriptorWithDescriptorType:bytes:length:") = NSAppleEventDescriptor, CULong, RawPointer, UInt;
overload selector(static #"descriptorWithDescriptorType:data:") = NSAppleEventDescriptor, CULong, NSData;
overload selector(static #"descriptorWithEnumCode:") = NSAppleEventDescriptor, CULong;
overload selector(static #"descriptorWithInt32:") = NSAppleEventDescriptor, CLong;
overload selector(static #"descriptorWithString:") = NSAppleEventDescriptor, NSString;
overload selector(static #"descriptorWithTypeCode:") = NSAppleEventDescriptor, CULong;
overload selector(static #"destinationOfSymbolicLinkAtPath:error:") = NSString, NSString, Pointer[NSError];
overload selector(static #"detach") = Void;
overload selector(static #"detachNewThreadSelector:toTarget:withObject:") = Void, SelectorHandle, Id, Id;
overload selector(static #"developmentLocalization") = NSString;
overload selector(static #"dictionary") = Id;
overload selector(static #"dictionaryForKey:") = NSDictionary, NSString;
overload selector(static #"dictionaryFromTXTRecordData:") = NSDictionary, NSData;
overload selector(static #"dictionaryRepresentation") = NSDictionary;
overload selector(static #"dictionaryWithCapacity:") = Id, UInt;
overload selector(static #"dictionaryWithContentsOfFile:") = Id, NSString;
overload selector(static #"dictionaryWithContentsOfURL:") = Id, NSURL;
overload selector(static #"dictionaryWithDictionary:") = Id, NSDictionary;
overload selector(static #"dictionaryWithObject:forKey:") = Id, Id, Id;
overload selector(static #"dictionaryWithObjects:forKeys:") = Id, NSArray, NSArray;
overload selector(static #"dictionaryWithObjects:forKeys:count:") = Id, Pointer[Id], Pointer[Id], UInt;
overload varargSelector(static #"dictionaryWithObjectsAndKeys:") = Id, Id;
overload selector(static #"dictionaryWithValuesForKeys:") = NSDictionary, NSArray;
overload selector(static #"didChange:valuesAtIndexes:forKey:") = Void, UInt, NSIndexSet, NSString;
overload selector(static #"didChangeValueForKey:") = Void, NSString;
overload selector(static #"didChangeValueForKey:withSetMutation:usingObjects:") = Void, NSString, UInt, NSSet;
overload selector(static #"didLoadBytes:loadComplete:") = Void, NSData, Bool;
overload selector(static #"directParameter") = Id;
overload selector(static #"directoryAttributes") = NSDictionary;
overload selector(static #"directoryContentsAtPath:") = NSArray, NSString;
overload selector(static #"disable") = Void;
overload selector(static #"disableActions") = Bool;
overload selector(static #"disableCollectorForPointer:") = Void, RawPointer;
overload selector(static #"disableSuddenTermination") = Void;
overload selector(static #"disableUndoRegistration") = Void;
overload selector(static #"disableUpdates") = Void;
overload selector(static #"discardContentIfPossible") = Void;
overload selector(static #"disconnectObject:withKey:toObject:withKey:") = Void, Id, NSString, Id, NSString;
overload selector(static #"diskCapacity") = UInt;
overload selector(static #"dispatch") = Void;
overload selector(static #"dispatchRawAppleEvent:withRawReply:handlerRefCon:") = Short, Pointer[AppleEvent], Pointer[AppleEvent], CLong;
overload selector(static #"display") = Void;
overload selector(static #"displayIfNeeded") = Void;
overload selector(static #"displayLayer:") = Void, CALayer;
overload selector(static #"displayNameAtPath:") = NSString, NSString;
overload selector(static #"displayNameForKey:value:") = NSString, Id, Id;
overload selector(static #"distantFuture") = Id;
overload selector(static #"distantPast") = Id;
overload selector(static #"distinguishedNames") = NSArray;
overload selector(static #"document") = Id;
overload selector(static #"documentContentKind") = UInt;
overload selector(static #"documentWithRootElement:") = Id, NSXMLElement;
overload selector(static #"doesContain:") = Bool, Id;
overload selector(static #"doesNotRecognizeSelector:") = Void, SelectorHandle;
overload selector(static #"doesRelativeDateFormatting") = Bool;
overload selector(static #"domain") = NSString;
overload selector(static #"dominantLanguage") = NSString;
overload selector(static #"dominantLanguageForScript:") = NSString, NSString;
overload selector(static #"dominantScript") = NSString;
overload selector(static #"doubleForKey:") = Double, NSString;
overload selector(static #"doubleValue") = Double;
overload selector(static #"download:canAuthenticateAgainstProtectionSpace:") = Bool, NSURLDownload, NSURLProtectionSpace;
overload selector(static #"download:decideDestinationWithSuggestedFilename:") = Void, NSURLDownload, NSString;
overload selector(static #"download:didCancelAuthenticationChallenge:") = Void, NSURLDownload, NSURLAuthenticationChallenge;
overload selector(static #"download:didCreateDestination:") = Void, NSURLDownload, NSString;
overload selector(static #"download:didFailWithError:") = Void, NSURLDownload, NSError;
overload selector(static #"download:didReceiveAuthenticationChallenge:") = Void, NSURLDownload, NSURLAuthenticationChallenge;
overload selector(static #"download:didReceiveDataOfLength:") = Void, NSURLDownload, UInt;
overload selector(static #"download:didReceiveResponse:") = Void, NSURLDownload, NSURLResponse;
overload selector(static #"download:shouldDecodeSourceDataOfMIMEType:") = Bool, NSURLDownload, NSString;
overload selector(static #"download:willResumeWithResponse:fromByte:") = Void, NSURLDownload, NSURLResponse, Int64;
overload selector(static #"download:willSendRequest:redirectResponse:") = NSURLRequest, NSURLDownload, NSURLRequest, NSURLResponse;
overload selector(static #"downloadDidBegin:") = Void, NSURLDownload;
overload selector(static #"downloadDidFinish:") = Void, NSURLDownload;
overload selector(static #"downloadShouldUseCredentialStorage:") = Bool, NSURLDownload;
overload selector(static #"drain") = Void;
overload selector(static #"drawImage:atPoint:fromRect:") = Void, CIImage, CGPoint, CGRect;
overload selector(static #"drawImage:inRect:fromRect:") = Void, CIImage, CGRect, CGRect;
overload selector(static #"drawInCGLContext:pixelFormat:forLayerTime:displayTime:") = Void, CGLContextObj, CGLPixelFormatObj, Double, Pointer[CVTimeStamp];
overload selector(static #"drawInContext:") = Void, CGContextRef;
overload selector(static #"drawLayer:inContext:") = Void, CALayer, CGContextRef;
overload selector(static #"duration") = Double;
overload selector(static #"earlierDate:") = NSDate, NSDate;
overload selector(static #"edgeAntialiasingMask") = UInt;
overload selector(static #"editingStringForObjectValue:") = NSString, Id;
overload selector(static #"elementDeclarationForName:") = NSXMLDTDNode, NSString;
overload selector(static #"elementWithName:") = Id, NSString;
overload selector(static #"elementWithName:URI:") = Id, NSString, NSString;
overload selector(static #"elementWithName:children:attributes:") = Id, NSString, NSArray, NSArray;
overload selector(static #"elementWithName:stringValue:") = Id, NSString, NSString;
overload selector(static #"elementsForLocalName:URI:") = NSArray, NSString, NSString;
overload selector(static #"elementsForName:") = NSArray, NSString;
overload selector(static #"emissionLatitude") = Float;
overload selector(static #"emissionLongitude") = Float;
overload selector(static #"emissionRange") = Float;
overload selector(static #"emitterCell") = Id;
overload selector(static #"emitterCells") = NSArray;
overload selector(static #"emitterDepth") = Float;
overload selector(static #"emitterMode") = NSString;
overload selector(static #"emitterPosition") = CGPoint;
overload selector(static #"emitterShape") = NSString;
overload selector(static #"emitterSize") = CGSize;
overload selector(static #"emitterZPosition") = Float;
overload selector(static #"emptyImage") = CIImage;
overload selector(static #"enable") = Void;
overload selector(static #"enableCollectorForPointer:") = Void, RawPointer;
overload selector(static #"enableMultipleThreads") = Void;
overload selector(static #"enableSuddenTermination") = Void;
overload selector(static #"enableUndoRegistration") = Void;
overload selector(static #"enableUpdates") = Void;
overload selector(static #"encodeArrayOfObjCType:count:at:") = Void, Pointer[CChar], UInt, RawPointer;
overload selector(static #"encodeBool:forKey:") = Void, Bool, NSString;
overload selector(static #"encodeBycopyObject:") = Void, Id;
overload selector(static #"encodeByrefObject:") = Void, Id;
overload selector(static #"encodeBytes:length:") = Void, RawPointer, UInt;
overload selector(static #"encodeBytes:length:forKey:") = Void, Pointer[CUChar], UInt, NSString;
overload selector(static #"encodeClassName:intoClassName:") = Void, NSString, NSString;
overload selector(static #"encodeConditionalObject:") = Void, Id;
overload selector(static #"encodeConditionalObject:forKey:") = Void, Id, NSString;
overload selector(static #"encodeDataObject:") = Void, NSData;
overload selector(static #"encodeDouble:forKey:") = Void, Double, NSString;
overload selector(static #"encodeFloat:forKey:") = Void, Float, NSString;
overload selector(static #"encodeInt32:forKey:") = Void, Int, NSString;
overload selector(static #"encodeInt64:forKey:") = Void, Int64, NSString;
overload selector(static #"encodeInt:forKey:") = Void, Int, NSString;
overload selector(static #"encodeInteger:forKey:") = Void, Int, NSString;
overload selector(static #"encodeNXObject:") = Void, Id;
overload selector(static #"encodeObject:") = Void, Id;
overload selector(static #"encodeObject:forKey:") = Void, Id, NSString;
overload selector(static #"encodePoint:") = Void, NSPoint;
overload selector(static #"encodePoint:forKey:") = Void, NSPoint, NSString;
overload selector(static #"encodePortObject:") = Void, NSPort;
overload selector(static #"encodePropertyList:") = Void, Id;
overload selector(static #"encodeRect:") = Void, NSRect;
overload selector(static #"encodeRect:forKey:") = Void, NSRect, NSString;
overload selector(static #"encodeRootObject:") = Void, Id;
overload selector(static #"encodeSize:") = Void, NSSize;
overload selector(static #"encodeSize:forKey:") = Void, NSSize, NSString;
overload selector(static #"encodeValueOfObjCType:at:") = Void, Pointer[CChar], RawPointer;
overload varargSelector(static #"encodeValuesOfObjCTypes:") = Void, Pointer[CChar];
overload selector(static #"encodeWithCoder:") = Void, NSCoder;
overload selector(static #"endContentAccess") = Void;
overload selector(static #"endEditing") = Void;
overload selector(static #"endFrame") = Void;
overload selector(static #"endLoadInBackground") = Void;
overload selector(static #"endPoint") = CGPoint;
overload selector(static #"endProgress") = Float;
overload selector(static #"endSpecifier") = NSScriptObjectSpecifier;
overload selector(static #"endSubelementIdentifier") = UInt;
overload selector(static #"endSubelementIndex") = Int;
overload selector(static #"endUndoGrouping") = Void;
overload selector(static #"enqueueNotification:postingStyle:") = Void, NSNotification, UInt;
overload selector(static #"enqueueNotification:postingStyle:coalesceMask:forModes:") = Void, NSNotification, UInt, UInt, NSArray;
overload selector(static #"entityDeclarationForName:") = NSXMLDTDNode, NSString;
overload selector(static #"enumCodeValue") = CULong;
overload selector(static #"enumerateAttribute:inRange:options:usingBlock:") = Void, NSString, NSRange, UInt, UnknownType;
overload selector(static #"enumerateAttributesInRange:options:usingBlock:") = Void, NSRange, UInt, UnknownType;
overload selector(static #"enumerateIndexesInRange:options:usingBlock:") = Void, NSRange, UInt, UnknownType;
overload selector(static #"enumerateIndexesUsingBlock:") = Void, UnknownType;
overload selector(static #"enumerateIndexesWithOptions:usingBlock:") = Void, UInt, UnknownType;
overload selector(static #"enumerateKeysAndObjectsUsingBlock:") = Void, UnknownType;
overload selector(static #"enumerateKeysAndObjectsWithOptions:usingBlock:") = Void, UInt, UnknownType;
overload selector(static #"enumerateLinesUsingBlock:") = Void, UnknownType;
overload selector(static #"enumerateObjectsAtIndexes:options:usingBlock:") = Void, NSIndexSet, UInt, UnknownType;
overload selector(static #"enumerateObjectsUsingBlock:") = Void, UnknownType;
overload selector(static #"enumerateObjectsWithOptions:usingBlock:") = Void, UInt, UnknownType;
overload selector(static #"enumerateSubstringsInRange:options:usingBlock:") = Void, NSRange, UInt, UnknownType;
overload selector(static #"enumeratorAtPath:") = NSDirectoryEnumerator, NSString;
overload selector(static #"enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:") = NSDirectoryEnumerator, NSURL, NSArray, UInt, UnknownType;
overload selector(static #"environment") = NSDictionary;
overload selector(static #"era") = Int;
overload selector(static #"eraSymbols") = NSArray;
overload selector(static #"error") = NSError;
overload selector(static #"errorWithDomain:code:userInfo:") = Id, NSString, Int, NSDictionary;
overload selector(static #"evaluate") = Void;
overload selector(static #"evaluateWithObject:") = Bool, Id;
overload selector(static #"evaluateWithObject:substitutionVariables:") = Bool, Id, NSDictionary;
overload selector(static #"evaluatedArguments") = NSDictionary;
overload selector(static #"evaluatedReceivers") = Id;
overload selector(static #"evaluationErrorNumber") = Int;
overload selector(static #"evaluationErrorSpecifier") = NSScriptObjectSpecifier;
overload selector(static #"eventClass") = CULong;
overload selector(static #"eventID") = CULong;
overload selector(static #"evictsObjectsWithDiscardedContent") = Bool;
overload selector(static #"exceptionDuringOperation:error:leftOperand:rightOperand:") = NSDecimalNumber, SelectorHandle, UInt, NSDecimalNumber, NSDecimalNumber;
overload selector(static #"exceptionWithName:reason:userInfo:") = NSException, NSString, NSString, NSDictionary;
overload selector(static #"exchangeObjectAtIndex:withObjectAtIndex:") = Void, UInt, UInt;
overload selector(static #"executableArchitectures") = NSArray;
overload selector(static #"executablePath") = NSString;
overload selector(static #"executableURL") = NSURL;
overload selector(static #"executeAndReturnError:") = NSAppleEventDescriptor, Pointer[NSDictionary];
overload selector(static #"executeAppleEvent:error:") = NSAppleEventDescriptor, NSAppleEventDescriptor, Pointer[NSDictionary];
overload selector(static #"executeCommand") = Id;
overload selector(static #"executionBlocks") = NSArray;
overload selector(static #"exit") = Void;
overload selector(static #"expectedContentLength") = Int64;
overload selector(static #"expectedResourceDataSize") = Int64;
overload selector(static #"expiresDate") = NSDate;
overload selector(static #"exponentSymbol") = NSString;
overload selector(static #"exportKey:fromObject:withName:") = Void, NSString, Id, NSString;
overload selector(static #"exportedKeys") = NSDictionary;
overload selector(static #"expressionBlock") = UnknownType;
overload selector(static #"expressionForAggregate:") = NSExpression, NSArray;
overload selector(static #"expressionForBlock:arguments:") = NSExpression, UnknownType, NSArray;
overload selector(static #"expressionForConstantValue:") = NSExpression, Id;
overload selector(static #"expressionForEvaluatedObject") = NSExpression;
overload selector(static #"expressionForFunction:arguments:") = NSExpression, NSString, NSArray;
overload selector(static #"expressionForFunction:selectorName:arguments:") = NSExpression, NSExpression, NSString, NSArray;
overload selector(static #"expressionForIntersectSet:with:") = NSExpression, NSExpression, NSExpression;
overload selector(static #"expressionForKeyPath:") = NSExpression, NSString;
overload selector(static #"expressionForMinusSet:with:") = NSExpression, NSExpression, NSExpression;
overload selector(static #"expressionForSubquery:usingIteratorVariable:predicate:") = NSExpression, NSExpression, NSString, Id;
overload selector(static #"expressionForUnionSet:with:") = NSExpression, NSExpression, NSExpression;
overload selector(static #"expressionForVariable:") = NSExpression, NSString;
overload selector(static #"expressionType") = UInt;
overload selector(static #"expressionValueWithObject:context:") = Id, Id, NSMutableDictionary;
overload selector(static #"extent") = CGRect;
overload selector(static #"fadeDuration") = Double;
overload selector(static #"failureReason") = NSString;
overload selector(static #"failureResponse") = NSURLResponse;
overload selector(static #"fastestEncoding") = UInt;
overload selector(static #"fileAttributes") = NSDictionary;
overload selector(static #"fileAttributesAtPath:traverseLink:") = NSDictionary, NSString, Bool;
overload selector(static #"fileCreationDate") = NSDate;
overload selector(static #"fileDescriptor") = Int;
overload selector(static #"fileExistsAtPath:") = Bool, NSString;
overload selector(static #"fileExistsAtPath:isDirectory:") = Bool, NSString, Pointer[Bool];
overload selector(static #"fileExtensionHidden") = Bool;
overload selector(static #"fileGroupOwnerAccountID") = NSNumber;
overload selector(static #"fileGroupOwnerAccountName") = NSString;
overload selector(static #"fileHFSCreatorCode") = CULong;
overload selector(static #"fileHFSTypeCode") = CULong;
overload selector(static #"fileHandleForReading") = NSFileHandle;
overload selector(static #"fileHandleForReadingAtPath:") = Id, NSString;
overload selector(static #"fileHandleForReadingFromURL:error:") = Id, NSURL, Pointer[NSError];
overload selector(static #"fileHandleForUpdatingAtPath:") = Id, NSString;
overload selector(static #"fileHandleForUpdatingURL:error:") = Id, NSURL, Pointer[NSError];
overload selector(static #"fileHandleForWriting") = NSFileHandle;
overload selector(static #"fileHandleForWritingAtPath:") = Id, NSString;
overload selector(static #"fileHandleForWritingToURL:error:") = Id, NSURL, Pointer[NSError];
overload selector(static #"fileHandleWithNullDevice") = Id;
overload selector(static #"fileHandleWithStandardError") = Id;
overload selector(static #"fileHandleWithStandardInput") = Id;
overload selector(static #"fileHandleWithStandardOutput") = Id;
overload selector(static #"fileIsAppendOnly") = Bool;
overload selector(static #"fileIsImmutable") = Bool;
overload selector(static #"fileManager:shouldCopyItemAtPath:toPath:") = Bool, NSFileManager, NSString, NSString;
overload selector(static #"fileManager:shouldCopyItemAtURL:toURL:") = Bool, NSFileManager, NSURL, NSURL;
overload selector(static #"fileManager:shouldLinkItemAtPath:toPath:") = Bool, NSFileManager, NSString, NSString;
overload selector(static #"fileManager:shouldLinkItemAtURL:toURL:") = Bool, NSFileManager, NSURL, NSURL;
overload selector(static #"fileManager:shouldMoveItemAtPath:toPath:") = Bool, NSFileManager, NSString, NSString;
overload selector(static #"fileManager:shouldMoveItemAtURL:toURL:") = Bool, NSFileManager, NSURL, NSURL;
overload selector(static #"fileManager:shouldProceedAfterError:") = Bool, NSFileManager, NSDictionary;
overload selector(static #"fileManager:shouldProceedAfterError:copyingItemAtPath:toPath:") = Bool, NSFileManager, NSError, NSString, NSString;
overload selector(static #"fileManager:shouldProceedAfterError:copyingItemAtURL:toURL:") = Bool, NSFileManager, NSError, NSURL, NSURL;
overload selector(static #"fileManager:shouldProceedAfterError:linkingItemAtPath:toPath:") = Bool, NSFileManager, NSError, NSString, NSString;
overload selector(static #"fileManager:shouldProceedAfterError:linkingItemAtURL:toURL:") = Bool, NSFileManager, NSError, NSURL, NSURL;
overload selector(static #"fileManager:shouldProceedAfterError:movingItemAtPath:toPath:") = Bool, NSFileManager, NSError, NSString, NSString;
overload selector(static #"fileManager:shouldProceedAfterError:movingItemAtURL:toURL:") = Bool, NSFileManager, NSError, NSURL, NSURL;
overload selector(static #"fileManager:shouldProceedAfterError:removingItemAtPath:") = Bool, NSFileManager, NSError, NSString;
overload selector(static #"fileManager:shouldProceedAfterError:removingItemAtURL:") = Bool, NSFileManager, NSError, NSURL;
overload selector(static #"fileManager:shouldRemoveItemAtPath:") = Bool, NSFileManager, NSString;
overload selector(static #"fileManager:shouldRemoveItemAtURL:") = Bool, NSFileManager, NSURL;
overload selector(static #"fileManager:willProcessPath:") = Void, NSFileManager, NSString;
overload selector(static #"fileModificationDate") = NSDate;
overload selector(static #"fileOwnerAccountID") = NSNumber;
overload selector(static #"fileOwnerAccountName") = NSString;
overload selector(static #"filePathURL") = NSURL;
overload selector(static #"filePosixPermissions") = UInt;
overload selector(static #"fileReferenceURL") = NSURL;
overload selector(static #"fileSize") = UInt64;
overload selector(static #"fileSystemAttributesAtPath:") = NSDictionary, NSString;
overload selector(static #"fileSystemFileNumber") = UInt;
overload selector(static #"fileSystemNumber") = Int;
overload selector(static #"fileSystemRepresentation") = Pointer[CChar];
overload selector(static #"fileSystemRepresentationWithPath:") = Pointer[CChar], NSString;
overload selector(static #"fileType") = NSString;
overload selector(static #"fileURLWithPath:") = Id, NSString;
overload selector(static #"fileURLWithPath:isDirectory:") = Id, NSString, Bool;
overload selector(static #"fileURLWithPathComponents:") = NSURL, NSArray;
overload selector(static #"fillColor") = CGColorRef;
overload selector(static #"fillMode") = NSString;
overload selector(static #"fillRule") = NSString;
overload selector(static #"filter") = Id;
overload selector(static #"filterGenerator") = CIFilterGenerator;
overload selector(static #"filterGeneratorWithContentsOfURL:") = CIFilterGenerator, NSURL;
overload selector(static #"filterNamesInCategories:") = NSArray, NSArray;
overload selector(static #"filterNamesInCategory:") = NSArray, NSString;
overload selector(static #"filterUsingPredicate:") = Void, NSPredicate;
overload selector(static #"filterWithImageData:options:") = CIFilter, NSData, NSDictionary;
overload selector(static #"filterWithImageURL:options:") = CIFilter, NSURL, NSDictionary;
overload selector(static #"filterWithName:") = CIFilter, NSString;
overload varargSelector(static #"filterWithName:keysAndValues:") = CIFilter, NSString, Id;
overload selector(static #"filteredArrayUsingPredicate:") = NSArray, NSPredicate;
overload selector(static #"filteredSetUsingPredicate:") = NSSet, NSPredicate;
overload selector(static #"filters") = NSArray;
overload selector(static #"finalize") = Void;
overload selector(static #"finishDecoding") = Void;
overload selector(static #"finishEncoding") = Void;
overload selector(static #"fire") = Void;
overload selector(static #"fireDate") = NSDate;
overload selector(static #"firstIndex") = UInt;
overload selector(static #"firstObjectCommonWithArray:") = Id, NSArray;
overload selector(static #"firstWeekday") = UInt;
overload selector(static #"floatForKey:") = Float, NSString;
overload selector(static #"floatValue") = Float;
overload selector(static #"flush") = Void;
overload selector(static #"flushCachedData") = Void;
overload selector(static #"flushHostCache") = Void;
overload selector(static #"font") = CFTypeRef;
overload selector(static #"fontSize") = Float;
overload selector(static #"foregroundColor") = CGColorRef;
overload selector(static #"formIntersectionWithCharacterSet:") = Void, NSCharacterSet;
overload selector(static #"formUnionWithCharacterSet:") = Void, NSCharacterSet;
overload selector(static #"format") = NSString;
overload selector(static #"formatWidth") = UInt;
overload selector(static #"formatterBehavior") = UInt;
overload selector(static #"forwardInvocation:") = Void, NSInvocation;
overload selector(static #"forwardingTargetForSelector:") = Id, SelectorHandle;
overload selector(static #"fragment") = NSString;
overload selector(static #"frame") = CGRect;
overload selector(static #"frameLength") = UInt;
overload selector(static #"fromValue") = Id;
overload selector(static #"function") = NSString;
overload selector(static #"functionWithControlPoints::::") = Id, Float, Float, Float, Float;
overload selector(static #"functionWithName:") = Id, NSString;
overload selector(static #"generatesCalendarDates") = Bool;
overload selector(static #"generatesDecimalNumbers") = Bool;
overload selector(static #"getArgument:atIndex:") = Void, RawPointer, Int;
overload selector(static #"getArgumentTypeAtIndex:") = Pointer[CChar], UInt;
overload selector(static #"getBuffer:length:") = Bool, Pointer[Pointer[CUChar]], Pointer[UInt];
overload selector(static #"getBytes:") = Void, RawPointer;
overload selector(static #"getBytes:length:") = Void, RawPointer, UInt;
overload selector(static #"getBytes:maxLength:usedLength:encoding:options:range:remainingRange:") = Bool, RawPointer, UInt, Pointer[UInt], UInt, UInt, NSRange, NSRangePointer;
overload selector(static #"getBytes:range:") = Void, RawPointer, NSRange;
overload selector(static #"getCFRunLoop") = CFRunLoopRef;
overload selector(static #"getCString:") = Void, Pointer[CChar];
overload selector(static #"getCString:maxLength:") = Void, Pointer[CChar], UInt;
overload selector(static #"getCString:maxLength:encoding:") = Bool, Pointer[CChar], UInt, UInt;
overload selector(static #"getCString:maxLength:range:remainingRange:") = Void, Pointer[CChar], UInt, NSRange, NSRangePointer;
overload selector(static #"getCharacters:") = Void, Pointer[UShort];
overload selector(static #"getCharacters:range:") = Void, Pointer[UShort], NSRange;
overload selector(static #"getControlPointAtIndex:values:") = Void, CULong, Pointer[Float];
overload selector(static #"getFileSystemRepresentation:maxLength:") = Bool, Pointer[CChar], UInt;
overload selector(static #"getIndexes:") = Void, Pointer[UInt];
overload selector(static #"getIndexes:maxCount:inIndexRange:") = UInt, Pointer[UInt], UInt, NSRangePointer;
overload selector(static #"getInputStream:outputStream:") = Bool, Pointer[NSInputStream], Pointer[NSOutputStream];
overload selector(static #"getLineStart:end:contentsEnd:forRange:") = Void, Pointer[UInt], Pointer[UInt], Pointer[UInt], NSRange;
overload selector(static #"getObjectValue:forString:errorDescription:") = Bool, Pointer[Id], NSString, Pointer[NSString];
overload selector(static #"getObjectValue:forString:range:error:") = Bool, Pointer[Id], NSString, Pointer[NSRange], Pointer[NSError];
overload selector(static #"getObjects:") = Void, Pointer[Id];
overload selector(static #"getObjects:andKeys:") = Void, Pointer[Id], Pointer[Id];
overload selector(static #"getObjects:range:") = Void, Pointer[Id], NSRange;
overload selector(static #"getParagraphStart:end:contentsEnd:forRange:") = Void, Pointer[UInt], Pointer[UInt], Pointer[UInt], NSRange;
overload selector(static #"getResourceValue:forKey:error:") = Bool, Pointer[Id], NSString, Pointer[NSError];
overload selector(static #"getReturnValue:") = Void, RawPointer;
overload selector(static #"getStreamsToHost:port:inputStream:outputStream:") = Void, NSHost, Int, Pointer[NSInputStream], Pointer[NSOutputStream];
overload selector(static #"getValue:") = Void, RawPointer;
overload selector(static #"globallyUniqueString") = NSString;
overload selector(static #"grammarCheckingResultWithRange:details:") = NSTextCheckingResult, NSRange, NSArray;
overload selector(static #"grammarDetails") = NSArray;
overload selector(static #"green") = Float;
overload selector(static #"greenRange") = Float;
overload selector(static #"greenSpeed") = Float;
overload selector(static #"gregorianStartDate") = NSDate;
overload selector(static #"groupedResults") = NSArray;
overload selector(static #"groupingAttributes") = NSArray;
overload selector(static #"groupingLevel") = Int;
overload selector(static #"groupingSeparator") = NSString;
overload selector(static #"groupingSize") = UInt;
overload selector(static #"groupsByEvent") = Bool;
overload varargSelector(static #"handleFailureInFunction:file:lineNumber:description:") = Void, NSString, NSString, Int, NSString;
overload varargSelector(static #"handleFailureInMethod:object:file:lineNumber:description:") = Void, SelectorHandle, Id, NSString, Int, NSString;
overload selector(static #"handleMachMessage:") = Void, RawPointer;
overload selector(static #"handlePortMessage:") = Void, NSPortMessage;
overload selector(static #"handleQueryWithUnboundKey:") = Id, NSString;
overload selector(static #"handleTakeValue:forUnboundKey:") = Void, Id, NSString;
overload selector(static #"hasBytesAvailable") = Bool;
overload selector(static #"hasMemberInPlane:") = Bool, CUChar;
overload selector(static #"hasOrderedToManyRelationshipForKey:") = Bool, NSString;
overload selector(static #"hasPassword") = Bool;
overload selector(static #"hasPrefix:") = Bool, NSString;
overload selector(static #"hasPropertyForKey:") = Bool, NSString;
overload selector(static #"hasReadablePropertyForKey:") = Bool, NSString;
overload selector(static #"hasSpaceAvailable") = Bool;
overload selector(static #"hasSuffix:") = Bool, NSString;
overload selector(static #"hasThousandSeparators") = Bool;
overload selector(static #"hasWritablePropertyForKey:") = Bool, NSString;
overload selector(static #"hash") = UInt;
overload selector(static #"hashFunction") = CCodePointer[(RawPointer,CCodePointer[(RawPointer),(UInt)]),(UInt)];
overload selector(static #"hashTableWithOptions:") = Id, UInt;
overload selector(static #"hashTableWithWeakObjects") = Id;
overload selector(static #"helpAnchor") = NSString;
overload selector(static #"hitTest:") = CALayer, CGPoint;
overload selector(static #"host") = NSString;
overload selector(static #"hostName") = NSString;
overload selector(static #"hostWithAddress:") = NSHost, NSString;
overload selector(static #"hostWithName:") = NSHost, NSString;
overload selector(static #"hour") = Int;
overload selector(static #"hourOfDay") = Int;
overload selector(static #"identity") = SecIdentityRef;
overload selector(static #"illegalCharacterSet") = Id;
overload selector(static #"image") = CIImage;
overload selector(static #"imageAccumulatorWithExtent:format:") = CIImageAccumulator, CGRect, Int;
overload selector(static #"imageByApplyingTransform:") = CIImage, CGAffineTransform;
overload selector(static #"imageByCroppingToRect:") = CIImage, CGRect;
overload selector(static #"imageWithBitmapData:bytesPerRow:size:format:colorSpace:") = CIImage, NSData, CULong, CGSize, Int, CGColorSpaceRef;
overload selector(static #"imageWithCGImage:") = CIImage, CGImageRef;
overload selector(static #"imageWithCGImage:options:") = CIImage, CGImageRef, NSDictionary;
overload selector(static #"imageWithCGLayer:") = CIImage, CGLayerRef;
overload selector(static #"imageWithCGLayer:options:") = CIImage, CGLayerRef, NSDictionary;
overload selector(static #"imageWithCVImageBuffer:") = CIImage, CVImageBufferRef;
overload selector(static #"imageWithCVImageBuffer:options:") = CIImage, CVImageBufferRef, NSDictionary;
overload selector(static #"imageWithColor:") = CIImage, CIColor;
overload selector(static #"imageWithContentsOfURL:") = CIImage, NSURL;
overload selector(static #"imageWithContentsOfURL:options:") = CIImage, NSURL, NSDictionary;
overload selector(static #"imageWithData:") = CIImage, NSData;
overload selector(static #"imageWithData:options:") = CIImage, NSData, NSDictionary;
overload selector(static #"imageWithIOSurface:") = CIImage, IOSurfaceRef;
overload selector(static #"imageWithIOSurface:options:") = CIImage, IOSurfaceRef, NSDictionary;
overload selector(static #"imageWithImageProvider:size::format:colorSpace:options:") = CIImage, Id, CULong, CULong, Int, CGColorSpaceRef, NSDictionary;
overload selector(static #"imageWithTexture:size:flipped:colorSpace:") = CIImage, UInt, CGSize, Bool, CGColorSpaceRef;
overload selector(static #"implementationClassName") = NSString;
overload selector(static #"increaseLengthBy:") = Void, UInt;
overload selector(static #"independentConversationQueueing") = Bool;
overload selector(static #"index") = UInt;
overload selector(static #"indexAtPosition:") = UInt, UInt;
overload selector(static #"indexGreaterThanIndex:") = UInt, UInt;
overload selector(static #"indexGreaterThanOrEqualToIndex:") = UInt, UInt;
overload selector(static #"indexInRange:options:passingTest:") = UInt, NSRange, UInt, UnknownType;
overload selector(static #"indexLessThanIndex:") = UInt, UInt;
overload selector(static #"indexLessThanOrEqualToIndex:") = UInt, UInt;
overload selector(static #"indexOfObject:") = UInt, Id;
overload selector(static #"indexOfObject:inRange:") = UInt, Id, NSRange;
overload selector(static #"indexOfObject:inSortedRange:options:usingComparator:") = UInt, Id, NSRange, UInt, NSComparator;
overload selector(static #"indexOfObjectAtIndexes:options:passingTest:") = UInt, NSIndexSet, UInt, UnknownType;
overload selector(static #"indexOfObjectIdenticalTo:") = UInt, Id;
overload selector(static #"indexOfObjectIdenticalTo:inRange:") = UInt, Id, NSRange;
overload selector(static #"indexOfObjectPassingTest:") = UInt, UnknownType;
overload selector(static #"indexOfObjectWithOptions:passingTest:") = UInt, UInt, UnknownType;
overload selector(static #"indexOfResult:") = UInt, Id;
overload selector(static #"indexPassingTest:") = UInt, UnknownType;
overload selector(static #"indexPathByAddingIndex:") = NSIndexPath, UInt;
overload selector(static #"indexPathByRemovingLastIndex") = NSIndexPath;
overload selector(static #"indexPathWithIndex:") = Id, UInt;
overload selector(static #"indexPathWithIndexes:length:") = Id, Pointer[UInt], UInt;
overload selector(static #"indexSet") = Id;
overload selector(static #"indexSetWithIndex:") = Id, UInt;
overload selector(static #"indexSetWithIndexesInRange:") = Id, NSRange;
overload selector(static #"indexWithOptions:passingTest:") = UInt, UInt, UnknownType;
overload selector(static #"indexesInRange:options:passingTest:") = NSIndexSet, NSRange, UInt, UnknownType;
overload selector(static #"indexesOfObjectsAtIndexes:options:passingTest:") = NSIndexSet, NSIndexSet, UInt, UnknownType;
overload selector(static #"indexesOfObjectsPassingTest:") = NSIndexSet, UnknownType;
overload selector(static #"indexesOfObjectsWithOptions:passingTest:") = NSIndexSet, UInt, UnknownType;
overload selector(static #"indexesPassingTest:") = NSIndexSet, UnknownType;
overload selector(static #"indexesWithOptions:passingTest:") = NSIndexSet, UInt, UnknownType;
overload selector(static #"indicesOfObjectsByEvaluatingObjectSpecifier:") = NSArray, NSScriptObjectSpecifier;
overload selector(static #"indicesOfObjectsByEvaluatingWithContainer:count:") = Pointer[Int], Id, Pointer[Int];
overload selector(static #"infoDictionary") = NSDictionary;
overload selector(static #"init") = Id;
overload selector(static #"initAndTestWithTests:") = Id, NSArray;
overload selector(static #"initByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:") = Id, NSData, UInt, NSURL, Pointer[Bool], Pointer[NSError];
overload selector(static #"initFileURLWithPath:") = Id, NSString;
overload selector(static #"initFileURLWithPath:isDirectory:") = Id, NSString, Bool;
overload selector(static #"initForReadingWithData:") = Id, NSData;
overload selector(static #"initForWritingWithMutableData:") = Id, NSMutableData;
overload selector(static #"initListDescriptor") = Id;
overload selector(static #"initNotTestWithTest:") = Id, NSScriptWhoseTest;
overload selector(static #"initOrTestWithTests:") = Id, NSArray;
overload selector(static #"initRecordDescriptor") = Id;
overload selector(static #"initRemoteWithProtocolFamily:socketType:protocol:address:") = Id, Int, Int, Int, NSData;
overload selector(static #"initRemoteWithTCPPort:host:") = Id, UShort, NSString;
overload selector(static #"initToBuffer:capacity:") = Id, Pointer[CUChar], UInt;
overload selector(static #"initToFileAtPath:append:") = Id, NSString, Bool;
overload selector(static #"initToMemory") = Id;
overload selector(static #"initWithAEDescNoCopy:") = Id, Pointer[AEDesc];
overload selector(static #"initWithArray:") = Id, NSArray;
overload selector(static #"initWithArray:copyItems:") = Id, NSArray, Bool;
overload selector(static #"initWithAttribute:relativeTo:attribute:scale:offset:") = Id, Int, NSString, Int, Float, Float;
overload selector(static #"initWithAttributedString:") = Id, NSAttributedString;
overload selector(static #"initWithAuthenticationChallenge:sender:") = Id, NSURLAuthenticationChallenge, Id;
overload selector(static #"initWithBitmapData:bytesPerRow:size:format:colorSpace:") = Id, NSData, CULong, CGSize, Int, CGColorSpaceRef;
overload selector(static #"initWithBool:") = Id, Bool;
overload selector(static #"initWithBytes:length:") = Id, RawPointer, UInt;
overload selector(static #"initWithBytes:length:encoding:") = Id, RawPointer, UInt, UInt;
overload selector(static #"initWithBytes:objCType:") = Id, RawPointer, Pointer[CChar];
overload selector(static #"initWithBytesNoCopy:length:") = Id, RawPointer, UInt;
overload selector(static #"initWithBytesNoCopy:length:encoding:freeWhenDone:") = Id, RawPointer, UInt, UInt, Bool;
overload selector(static #"initWithBytesNoCopy:length:freeWhenDone:") = Id, RawPointer, UInt, Bool;
overload selector(static #"initWithCGColor:") = Id, CGColorRef;
overload selector(static #"initWithCGImage:") = Id, CGImageRef;
overload selector(static #"initWithCGImage:options:") = Id, CGImageRef, NSDictionary;
overload selector(static #"initWithCGLayer:") = Id, CGLayerRef;
overload selector(static #"initWithCGLayer:options:") = Id, CGLayerRef, NSDictionary;
overload selector(static #"initWithCString:") = Id, Pointer[CChar];
overload selector(static #"initWithCString:encoding:") = Id, Pointer[CChar], UInt;
overload selector(static #"initWithCString:length:") = Id, Pointer[CChar], UInt;
overload selector(static #"initWithCStringNoCopy:length:freeWhenDone:") = Id, Pointer[CChar], UInt, Bool;
overload selector(static #"initWithCVImageBuffer:") = Id, CVImageBufferRef;
overload selector(static #"initWithCVImageBuffer:options:") = Id, CVImageBufferRef, NSDictionary;
overload selector(static #"initWithCalendarIdentifier:") = Id, NSString;
overload selector(static #"initWithCapacity:") = Id, UInt;
overload selector(static #"initWithChar:") = Id, CChar;
overload selector(static #"initWithCharacters:length:") = Id, Pointer[UShort], UInt;
overload selector(static #"initWithCharactersNoCopy:length:freeWhenDone:") = Id, Pointer[UShort], UInt, Bool;
overload selector(static #"initWithCoder:") = Id, NSCoder;
overload selector(static #"initWithColor:") = Id, CIColor;
overload selector(static #"initWithCommandDescription:") = Id, NSScriptCommandDescription;
overload selector(static #"initWithCondition:") = Id, Int;
overload selector(static #"initWithContainerClassDescription:containerSpecifier:key:") = Id, NSScriptClassDescription, NSScriptObjectSpecifier, NSString;
overload selector(static #"initWithContainerClassDescription:containerSpecifier:key:index:") = Id, NSScriptClassDescription, NSScriptObjectSpecifier, NSString, Int;
overload selector(static #"initWithContainerClassDescription:containerSpecifier:key:name:") = Id, NSScriptClassDescription, NSScriptObjectSpecifier, NSString, NSString;
overload selector(static #"initWithContainerClassDescription:containerSpecifier:key:relativePosition:baseSpecifier:") = Id, NSScriptClassDescription, NSScriptObjectSpecifier, NSString, UInt, NSScriptObjectSpecifier;
overload selector(static #"initWithContainerClassDescription:containerSpecifier:key:startSpecifier:endSpecifier:") = Id, NSScriptClassDescription, NSScriptObjectSpecifier, NSString, NSScriptObjectSpecifier, NSScriptObjectSpecifier;
overload selector(static #"initWithContainerClassDescription:containerSpecifier:key:test:") = Id, NSScriptClassDescription, NSScriptObjectSpecifier, NSString, NSScriptWhoseTest;
overload selector(static #"initWithContainerClassDescription:containerSpecifier:key:uniqueID:") = Id, NSScriptClassDescription, NSScriptObjectSpecifier, NSString, Id;
overload selector(static #"initWithContainerSpecifier:key:") = Id, NSScriptObjectSpecifier, NSString;
overload selector(static #"initWithContentsOfFile:") = Id, NSString;
overload selector(static #"initWithContentsOfFile:encoding:error:") = Id, NSString, UInt, Pointer[NSError];
overload selector(static #"initWithContentsOfFile:options:error:") = Id, NSString, UInt, Pointer[NSError];
overload selector(static #"initWithContentsOfFile:usedEncoding:error:") = Id, NSString, Pointer[UInt], Pointer[NSError];
overload selector(static #"initWithContentsOfMappedFile:") = Id, NSString;
overload selector(static #"initWithContentsOfURL:") = Id, NSURL;
overload selector(static #"initWithContentsOfURL:encoding:error:") = Id, NSURL, UInt, Pointer[NSError];
overload selector(static #"initWithContentsOfURL:error:") = Id, NSURL, Pointer[NSDictionary];
overload selector(static #"initWithContentsOfURL:options:") = Id, NSURL, NSDictionary;
overload selector(static #"initWithContentsOfURL:options:error:") = Id, NSURL, UInt, Pointer[NSError];
overload selector(static #"initWithContentsOfURL:usedEncoding:error:") = Id, NSURL, Pointer[UInt], Pointer[NSError];
overload selector(static #"initWithControlPoints::::") = Id, Float, Float, Float, Float;
overload selector(static #"initWithData:") = Id, NSData;
overload selector(static #"initWithData:encoding:") = Id, NSData, UInt;
overload selector(static #"initWithData:options:") = Id, NSData, NSDictionary;
overload selector(static #"initWithData:options:error:") = Id, NSData, UInt, Pointer[NSError];
overload selector(static #"initWithDateFormat:allowNaturalLanguage:") = Id, NSString, Bool;
overload selector(static #"initWithDecimal:") = Id, NSDecimal;
overload selector(static #"initWithDescriptorType:bytes:length:") = Id, CULong, RawPointer, UInt;
overload selector(static #"initWithDescriptorType:data:") = Id, CULong, NSData;
overload selector(static #"initWithDictionary:") = Id, NSDictionary;
overload selector(static #"initWithDictionary:copyItems:") = Id, NSDictionary, Bool;
overload selector(static #"initWithDomain:code:userInfo:") = Id, NSString, Int, NSDictionary;
overload selector(static #"initWithDomain:type:name:") = Id, NSString, NSString, NSString;
overload selector(static #"initWithDomain:type:name:port:") = Id, NSString, NSString, NSString, Int;
overload selector(static #"initWithDominantScript:languageMap:") = Id, NSString, NSDictionary;
overload selector(static #"initWithDouble:") = Id, Double;
overload selector(static #"initWithEventClass:eventID:targetDescriptor:returnID:transactionID:") = Id, CULong, CULong, NSAppleEventDescriptor, Short, CLong;
overload selector(static #"initWithExpressionType:") = Id, UInt;
overload selector(static #"initWithExtent:format:") = Id, CGRect, Int;
overload selector(static #"initWithFileAtPath:") = Id, NSString;
overload selector(static #"initWithFileDescriptor:") = Id, Int;
overload selector(static #"initWithFileDescriptor:closeOnDealloc:") = Id, Int, Bool;
overload selector(static #"initWithFireDate:interval:target:selector:userInfo:repeats:") = Id, NSDate, Double, Id, SelectorHandle, Id, Bool;
overload selector(static #"initWithFloat:") = Id, Float;
overload varargSelector(static #"initWithFormat:") = Id, NSString;
overload selector(static #"initWithFormat:arguments:") = Id, NSString, va_list;
overload varargSelector(static #"initWithFormat:locale:") = Id, NSString, Id;
overload selector(static #"initWithFormat:locale:arguments:") = Id, NSString, Id, va_list;
overload selector(static #"initWithHost:port:protocol:realm:authenticationMethod:") = Id, NSString, Int, NSString, NSString, NSString;
overload selector(static #"initWithIOSurface:") = Id, IOSurfaceRef;
overload selector(static #"initWithIOSurface:options:") = Id, IOSurfaceRef, NSDictionary;
overload selector(static #"initWithIdentity:certificates:persistence:") = Id, SecIdentityRef, NSArray, UInt;
overload selector(static #"initWithImage:") = Id, CIImage;
overload varargSelector(static #"initWithImage:keysAndValues:") = Id, CIImage, Id;
overload selector(static #"initWithImage:options:") = Id, CIImage, NSDictionary;
overload selector(static #"initWithImageProvider:size::format:colorSpace:options:") = Id, Id, CULong, CULong, Int, CGColorSpaceRef, NSDictionary;
overload selector(static #"initWithIndex:") = Id, UInt;
overload selector(static #"initWithIndexSet:") = Id, NSIndexSet;
overload selector(static #"initWithIndexes:length:") = Id, Pointer[UInt], UInt;
overload selector(static #"initWithIndexesInRange:") = Id, NSRange;
overload selector(static #"initWithInt:") = Id, Int;
overload selector(static #"initWithInteger:") = Id, Int;
overload selector(static #"initWithInvocation:") = Id, NSInvocation;
overload selector(static #"initWithKey:ascending:") = Id, NSString, Bool;
overload selector(static #"initWithKey:ascending:comparator:") = Id, NSString, Bool, NSComparator;
overload selector(static #"initWithKey:ascending:selector:") = Id, NSString, Bool, SelectorHandle;
overload selector(static #"initWithKeyOptions:valueOptions:capacity:") = Id, UInt, UInt, UInt;
overload selector(static #"initWithKeyPointerFunctions:valuePointerFunctions:capacity:") = Id, NSPointerFunctions, NSPointerFunctions, UInt;
overload selector(static #"initWithKind:") = Id, UInt;
overload selector(static #"initWithKind:options:") = Id, UInt, UInt;
overload selector(static #"initWithLayer:") = Id, Id;
overload selector(static #"initWithLeftExpression:rightExpression:customSelector:") = Id, NSExpression, NSExpression, SelectorHandle;
overload selector(static #"initWithLeftExpression:rightExpression:modifier:type:options:") = Id, NSExpression, NSExpression, UInt, UInt, UInt;
overload selector(static #"initWithLength:") = Id, UInt;
overload selector(static #"initWithLocal:connection:") = Id, Id, NSConnection;
overload selector(static #"initWithLocaleIdentifier:") = Id, NSString;
overload selector(static #"initWithLong:") = Id, CLong;
overload selector(static #"initWithLongLong:") = Id, Int64;
overload selector(static #"initWithMachPort:") = Id, UInt;
overload selector(static #"initWithMachPort:options:") = Id, UInt, UInt;
overload selector(static #"initWithMantissa:exponent:isNegative:") = Id, UInt64, Short, Bool;
overload selector(static #"initWithMemoryCapacity:diskCapacity:diskPath:") = Id, UInt, UInt, NSString;
overload selector(static #"initWithName:") = Id, NSString;
overload selector(static #"initWithName:URI:") = Id, NSString, NSString;
overload selector(static #"initWithName:data:") = Id, NSString, NSData;
overload selector(static #"initWithName:reason:userInfo:") = Id, NSString, NSString, NSDictionary;
overload selector(static #"initWithName:stringValue:") = Id, NSString, NSString;
overload selector(static #"initWithNotificationCenter:") = Id, NSNotificationCenter;
overload selector(static #"initWithObjectSpecifier:comparisonOperator:testObject:") = Id, NSScriptObjectSpecifier, UInt, Id;
overload varargSelector(static #"initWithObjects:") = Id, Id;
overload selector(static #"initWithObjects:count:") = Id, Pointer[Id], UInt;
overload selector(static #"initWithObjects:forKeys:") = Id, NSArray, NSArray;
overload selector(static #"initWithObjects:forKeys:count:") = Id, Pointer[Id], Pointer[Id], UInt;
overload varargSelector(static #"initWithObjectsAndKeys:") = Id, Id;
overload selector(static #"initWithOptions:") = Id, UInt;
overload selector(static #"initWithOptions:capacity:") = Id, UInt, UInt;
overload selector(static #"initWithPath:") = Id, NSString;
overload selector(static #"initWithPointerFunctions:") = Id, NSPointerFunctions;
overload selector(static #"initWithPointerFunctions:capacity:") = Id, NSPointerFunctions, UInt;
overload selector(static #"initWithPosition:objectSpecifier:") = Id, UInt, NSScriptObjectSpecifier;
overload selector(static #"initWithProperties:") = Id, NSDictionary;
overload selector(static #"initWithProtectionSpace:proposedCredential:previousFailureCount:failureResponse:error:sender:") = Id, NSURLProtectionSpace, NSURLCredential, Int, NSURLResponse, NSError, Id;
overload selector(static #"initWithProtocolFamily:socketType:protocol:address:") = Id, Int, Int, Int, NSData;
overload selector(static #"initWithProtocolFamily:socketType:protocol:socket:") = Id, Int, Int, Int, Int;
overload selector(static #"initWithProxyHost:port:type:realm:authenticationMethod:") = Id, NSString, Int, NSString, NSString, NSString;
overload selector(static #"initWithReceivePort:sendPort:") = Id, NSPort, NSPort;
overload selector(static #"initWithReceivePort:sendPort:components:") = Id, NSPort, NSPort, NSArray;
overload selector(static #"initWithRect:") = Id, CGRect;
overload selector(static #"initWithRequest:cachedResponse:client:") = Id, NSURLRequest, NSCachedURLResponse, Id;
overload selector(static #"initWithRequest:delegate:") = Id, NSURLRequest, Id;
overload selector(static #"initWithRequest:delegate:startImmediately:") = Id, NSURLRequest, Id, Bool;
overload selector(static #"initWithResponse:data:") = Id, NSURLResponse, NSData;
overload selector(static #"initWithResponse:data:userInfo:storagePolicy:") = Id, NSURLResponse, NSData, NSDictionary, UInt;
overload selector(static #"initWithResumeData:delegate:path:") = Id, NSData, Id, NSString;
overload selector(static #"initWithRootElement:") = Id, NSXMLElement;
overload selector(static #"initWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:") = Id, UInt, Short, Bool, Bool, Bool, Bool;
overload selector(static #"initWithScheme:host:path:") = Id, NSString, NSString, NSString;
overload selector(static #"initWithSendPort:receivePort:components:") = Id, NSPort, NSPort, NSArray;
overload selector(static #"initWithSet:") = Id, NSSet;
overload selector(static #"initWithSet:copyItems:") = Id, NSSet, Bool;
overload selector(static #"initWithShort:") = Id, Short;
overload selector(static #"initWithSource:") = Id, NSString;
overload selector(static #"initWithStorageLocation:") = Id, NSURL;
overload selector(static #"initWithString:") = Id, NSString;
overload selector(static #"initWithString:attributes:") = Id, NSString, NSDictionary;
overload selector(static #"initWithString:calendarFormat:") = Id, NSString, NSString;
overload selector(static #"initWithString:calendarFormat:locale:") = Id, NSString, NSString, Id;
overload selector(static #"initWithString:locale:") = Id, NSString, Id;
overload selector(static #"initWithString:relativeToURL:") = Id, NSString, NSURL;
overload selector(static #"initWithSuiteName:className:dictionary:") = Id, NSString, NSString, NSDictionary;
overload selector(static #"initWithSuiteName:commandName:dictionary:") = Id, NSString, NSString, NSDictionary;
overload selector(static #"initWithTCPPort:") = Id, UShort;
overload selector(static #"initWithTarget:connection:") = Id, Id, NSConnection;
overload selector(static #"initWithTarget:protocol:") = Id, NSObject, Id;
overload selector(static #"initWithTarget:selector:object:") = Id, Id, SelectorHandle, Id;
overload selector(static #"initWithTexture:size:flipped:colorSpace:") = Id, UInt, CGSize, Bool, CGColorSpaceRef;
overload selector(static #"initWithTimeInterval:sinceDate:") = Id, Double, NSDate;
overload selector(static #"initWithTimeIntervalSince1970:") = Id, Double;
overload selector(static #"initWithTimeIntervalSinceNow:") = Id, Double;
overload selector(static #"initWithTimeIntervalSinceReferenceDate:") = Id, Double;
overload selector(static #"initWithTransform:") = Id, NSAffineTransform;
overload selector(static #"initWithTrust:") = Id, SecTrustRef;
overload selector(static #"initWithType:subpredicates:") = Id, UInt, NSArray;
overload selector(static #"initWithURL:") = Id, NSURL;
overload selector(static #"initWithURL:MIMEType:expectedContentLength:textEncodingName:") = Id, NSURL, NSString, Int, NSString;
overload selector(static #"initWithURL:append:") = Id, NSURL, Bool;
overload selector(static #"initWithURL:cachePolicy:timeoutInterval:") = Id, NSURL, UInt, Double;
overload selector(static #"initWithURL:cached:") = Id, NSURL, Bool;
overload selector(static #"initWithUTF8String:") = Id, Pointer[CChar];
overload selector(static #"initWithUnsignedChar:") = Id, CUChar;
overload selector(static #"initWithUnsignedInt:") = Id, UInt;
overload selector(static #"initWithUnsignedInteger:") = Id, UInt;
overload selector(static #"initWithUnsignedLong:") = Id, CULong;
overload selector(static #"initWithUnsignedLongLong:") = Id, UInt64;
overload selector(static #"initWithUnsignedShort:") = Id, UShort;
overload selector(static #"initWithUser:") = Id, NSString;
overload selector(static #"initWithUser:password:persistence:") = Id, NSString, NSString, UInt;
overload selector(static #"initWithValues:count:") = Id, Pointer[Float], CULong;
overload selector(static #"initWithX:") = Id, Float;
overload selector(static #"initWithX:Y:") = Id, Float, Float;
overload selector(static #"initWithX:Y:Z:") = Id, Float, Float, Float;
overload selector(static #"initWithX:Y:Z:W:") = Id, Float, Float, Float, Float;
overload selector(static #"initWithXMLString:") = Id, NSString;
overload selector(static #"initWithXMLString:error:") = Id, NSString, Pointer[NSError];
overload selector(static #"initWithXMLString:options:error:") = Id, NSString, UInt, Pointer[NSError];
overload selector(static #"initWithYear:month:day:hour:minute:second:timeZone:") = Id, Int, UInt, UInt, UInt, UInt, UInt, NSTimeZone;
overload selector(static #"initialize") = Void;
overload selector(static #"inputKeys") = NSArray;
overload selector(static #"inputStreamWithData:") = Id, NSData;
overload selector(static #"inputStreamWithFileAtPath:") = Id, NSString;
overload selector(static #"inputStreamWithURL:") = Id, NSURL;
overload selector(static #"insertAttributedString:atIndex:") = Void, NSAttributedString, UInt;
overload selector(static #"insertChild:atIndex:") = Void, NSXMLNode, UInt;
overload selector(static #"insertChildren:atIndex:") = Void, NSArray, UInt;
overload selector(static #"insertDescriptor:atIndex:") = Void, NSAppleEventDescriptor, Int;
overload selector(static #"insertObject:atIndex:") = Void, Id, UInt;
overload selector(static #"insertObjects:atIndexes:") = Void, NSArray, NSIndexSet;
overload selector(static #"insertPointer:atIndex:") = Void, RawPointer, UInt;
overload selector(static #"insertString:atIndex:") = Void, NSString, UInt;
overload selector(static #"insertSublayer:above:") = Void, CALayer, CALayer;
overload selector(static #"insertSublayer:atIndex:") = Void, CALayer, UInt;
overload selector(static #"insertSublayer:below:") = Void, CALayer, CALayer;
overload selector(static #"insertValue:atIndex:inPropertyWithKey:") = Void, Id, UInt, NSString;
overload selector(static #"insertValue:inPropertyWithKey:") = Void, Id, NSString;
overload selector(static #"insertionContainer") = Id;
overload selector(static #"insertionIndex") = Int;
overload selector(static #"insertionKey") = NSString;
overload selector(static #"insertionReplaces") = Bool;
overload selector(static #"insetByX:Y:") = CIFilterShape, Int, Int;
overload selector(static #"instanceAlphaOffset") = Float;
overload selector(static #"instanceBlueOffset") = Float;
overload selector(static #"instanceColor") = CGColorRef;
overload selector(static #"instanceCount") = Int;
overload selector(static #"instanceDelay") = Double;
overload selector(static #"instanceGreenOffset") = Float;
overload selector(static #"instanceMethodForSelector:") = IMP, SelectorHandle;
overload selector(static #"instanceMethodSignatureForSelector:") = NSMethodSignature, SelectorHandle;
overload selector(static #"instanceRedOffset") = Float;
overload selector(static #"instanceTransform") = CATransform3D;
overload selector(static #"instancesRespondToSelector:") = Bool, SelectorHandle;
overload selector(static #"int32Value") = CLong;
overload selector(static #"intValue") = Int;
overload selector(static #"integerForKey:") = Int, NSString;
overload selector(static #"integerValue") = Int;
overload selector(static #"internationalCurrencySymbol") = NSString;
overload selector(static #"interrupt") = Void;
overload selector(static #"intersectHashTable:") = Void, NSHashTable;
overload selector(static #"intersectSet:") = Void, NSSet;
overload selector(static #"intersectWith:") = CIFilterShape, CIFilterShape;
overload selector(static #"intersectWithRect:") = CIFilterShape, CGRect;
overload selector(static #"intersectsHashTable:") = Bool, NSHashTable;
overload selector(static #"intersectsIndexesInRange:") = Bool, NSRange;
overload selector(static #"intersectsSet:") = Bool, NSSet;
overload selector(static #"invalidate") = Void;
overload selector(static #"invalidateClassDescriptionCache") = Void;
overload selector(static #"invalidateLayoutOfLayer:") = Void, CALayer;
overload selector(static #"inverseForRelationshipKey:") = NSString, NSString;
overload selector(static #"invert") = Void;
overload selector(static #"invertedSet") = NSCharacterSet;
overload selector(static #"invocation") = NSInvocation;
overload selector(static #"invocationWithMethodSignature:") = NSInvocation, NSMethodSignature;
overload selector(static #"invoke") = Void;
overload selector(static #"invokeWithTarget:") = Void, Id;
overload selector(static #"isAbsolutePath") = Bool;
overload selector(static #"isAdditive") = Bool;
overload selector(static #"isAsynchronous") = Bool;
overload selector(static #"isAtEnd") = Bool;
overload selector(static #"isBycopy") = Bool;
overload selector(static #"isByref") = Bool;
overload selector(static #"isCancelled") = Bool;
overload selector(static #"isCaseInsensitiveLike:") = Bool, NSString;
overload selector(static #"isCollecting") = Bool;
overload selector(static #"isCompiled") = Bool;
overload selector(static #"isConcurrent") = Bool;
overload selector(static #"isContentDiscarded") = Bool;
overload selector(static #"isCumulative") = Bool;
overload selector(static #"isDaylightSavingTime") = Bool;
overload selector(static #"isDaylightSavingTimeForDate:") = Bool, NSDate;
overload selector(static #"isDeletableFileAtPath:") = Bool, NSString;
overload selector(static #"isDoubleSided") = Bool;
overload selector(static #"isEnabled") = Bool;
overload selector(static #"isEqual:") = Bool, Id;
overload selector(static #"isEqualFunction") = CCodePointer[(RawPointer,RawPointer,CCodePointer[(RawPointer),(UInt)]),(CChar)];
overload selector(static #"isEqualTo:") = Bool, Id;
overload selector(static #"isEqualToArray:") = Bool, NSArray;
overload selector(static #"isEqualToAttributedString:") = Bool, NSAttributedString;
overload selector(static #"isEqualToData:") = Bool, NSData;
overload selector(static #"isEqualToDate:") = Bool, NSDate;
overload selector(static #"isEqualToDictionary:") = Bool, NSDictionary;
overload selector(static #"isEqualToHashTable:") = Bool, NSHashTable;
overload selector(static #"isEqualToHost:") = Bool, NSHost;
overload selector(static #"isEqualToIndexSet:") = Bool, NSIndexSet;
overload selector(static #"isEqualToNumber:") = Bool, NSNumber;
overload selector(static #"isEqualToSet:") = Bool, NSSet;
overload selector(static #"isEqualToString:") = Bool, NSString;
overload selector(static #"isEqualToTimeZone:") = Bool, NSTimeZone;
overload selector(static #"isEqualToValue:") = Bool, NSValue;
overload selector(static #"isExecutableFileAtPath:") = Bool, NSString;
overload selector(static #"isExecuting") = Bool;
overload selector(static #"isExternal") = Bool;
overload selector(static #"isFileReferenceURL") = Bool;
overload selector(static #"isFileURL") = Bool;
overload selector(static #"isFinished") = Bool;
overload selector(static #"isGathering") = Bool;
overload selector(static #"isGeometryFlipped") = Bool;
overload selector(static #"isGreaterThan:") = Bool, Id;
overload selector(static #"isGreaterThanOrEqualTo:") = Bool, Id;
overload selector(static #"isHTTPOnly") = Bool;
overload selector(static #"isHidden") = Bool;
overload selector(static #"isHostCacheEnabled") = Bool;
overload selector(static #"isKindOfClass:") = Bool, Id;
overload selector(static #"isLenient") = Bool;
overload selector(static #"isLessThan:") = Bool, Id;
overload selector(static #"isLessThanOrEqualTo:") = Bool, Id;
overload selector(static #"isLike:") = Bool, NSString;
overload selector(static #"isLoaded") = Bool;
overload selector(static #"isLocationRequiredToCreateForKey:") = Bool, NSString;
overload selector(static #"isMainThread") = Bool;
overload selector(static #"isMemberOfClass:") = Bool, Id;
overload selector(static #"isMultiThreaded") = Bool;
overload selector(static #"isNotEqualTo:") = Bool, Id;
overload selector(static #"isOneway") = Bool;
overload selector(static #"isOpaque") = Bool;
overload selector(static #"isOptionalArgumentWithName:") = Bool, NSString;
overload selector(static #"isPartialStringValid:newEditingString:errorDescription:") = Bool, NSString, Pointer[NSString], Pointer[NSString];
overload selector(static #"isPartialStringValid:proposedSelectedRange:originalString:originalSelectedRange:errorDescription:") = Bool, Pointer[NSString], NSRangePointer, NSString, NSRange, Pointer[NSString];
overload selector(static #"isPartialStringValidationEnabled") = Bool;
overload selector(static #"isProxy") = Bool;
overload selector(static #"isReadOnlyKey:") = Bool, NSString;
overload selector(static #"isReadableFileAtPath:") = Bool, NSString;
overload selector(static #"isReady") = Bool;
overload selector(static #"isRedoing") = Bool;
overload selector(static #"isRemovedOnCompletion") = Bool;
overload selector(static #"isRunning") = Bool;
overload selector(static #"isSecure") = Bool;
overload selector(static #"isSessionOnly") = Bool;
overload selector(static #"isStandalone") = Bool;
overload selector(static #"isStarted") = Bool;
overload selector(static #"isStopped") = Bool;
overload selector(static #"isSubclassOfClass:") = Bool, Id;
overload selector(static #"isSubsetOfHashTable:") = Bool, NSHashTable;
overload selector(static #"isSubsetOfSet:") = Bool, NSSet;
overload selector(static #"isSupersetOfSet:") = Bool, NSCharacterSet;
overload selector(static #"isSuspended") = Bool;
overload selector(static #"isTrue") = Bool;
overload selector(static #"isUndoRegistrationEnabled") = Bool;
overload selector(static #"isUndoing") = Bool;
overload selector(static #"isValid") = Bool;
overload selector(static #"isWellFormed") = Bool;
overload selector(static #"isWordInUserDictionaries:caseSensitive:") = Bool, NSString, Bool;
overload selector(static #"isWrapped") = Bool;
overload selector(static #"isWritableFileAtPath:") = Bool, NSString;
overload selector(static #"kernelsWithString:") = NSArray, NSString;
overload selector(static #"key") = NSString;
overload selector(static #"keyClassDescription") = NSScriptClassDescription;
overload selector(static #"keyEnumerator") = NSEnumerator;
overload selector(static #"keyPath") = NSString;
overload selector(static #"keyPathsForValuesAffectingValueForKey:") = NSSet, NSString;
overload selector(static #"keyPointerFunctions") = NSPointerFunctions;
overload selector(static #"keySpecifier") = NSScriptObjectSpecifier;
overload selector(static #"keyTimes") = NSArray;
overload selector(static #"keyWithAppleEventCode:") = NSString, CULong;
overload selector(static #"keysOfEntriesPassingTest:") = NSSet, UnknownType;
overload selector(static #"keysOfEntriesWithOptions:passingTest:") = NSSet, UInt, UnknownType;
overload selector(static #"keysSortedByValueUsingComparator:") = NSArray, NSComparator;
overload selector(static #"keysSortedByValueUsingSelector:") = NSArray, SelectorHandle;
overload selector(static #"keysSortedByValueWithOptions:usingComparator:") = NSArray, UInt, NSComparator;
overload selector(static #"keywordForDescriptorAtIndex:") = CULong, Int;
overload selector(static #"kind") = UInt;
overload selector(static #"knownTimeZoneNames") = NSArray;
overload selector(static #"languageMap") = NSDictionary;
overload selector(static #"languagesForScript:") = NSArray, NSString;
overload selector(static #"lastIndex") = UInt;
overload selector(static #"lastObject") = Id;
overload selector(static #"lastPathComponent") = NSString;
overload selector(static #"laterDate:") = NSDate, NSDate;
overload selector(static #"launch") = Void;
overload selector(static #"launchPath") = NSString;
overload selector(static #"launchedTaskWithLaunchPath:arguments:") = NSTask, NSString, NSArray;
overload selector(static #"layer") = Id;
overload selector(static #"layoutIfNeeded") = Void;
overload selector(static #"layoutManager") = Id;
overload selector(static #"layoutSublayers") = Void;
overload selector(static #"layoutSublayersOfLayer:") = Void, CALayer;
overload selector(static #"leftExpression") = NSExpression;
overload selector(static #"length") = UInt;
overload selector(static #"lengthOfBytesUsingEncoding:") = UInt, UInt;
overload selector(static #"letterCharacterSet") = Id;
overload selector(static #"level") = UInt;
overload selector(static #"levelsOfDetail") = CULong;
overload selector(static #"levelsOfDetailBias") = CULong;
overload selector(static #"levelsOfUndo") = UInt;
overload selector(static #"lifetime") = Float;
overload selector(static #"lifetimeRange") = Float;
overload selector(static #"limitDateForMode:") = NSDate, NSString;
overload selector(static #"lineCap") = NSString;
overload selector(static #"lineDashPattern") = NSArray;
overload selector(static #"lineDashPhase") = Float;
overload selector(static #"lineDirectionForLanguage:") = UInt, NSString;
overload selector(static #"lineJoin") = NSString;
overload selector(static #"lineNumber") = Int;
overload selector(static #"lineRangeForRange:") = NSRange, NSRange;
overload selector(static #"lineWidth") = Float;
overload selector(static #"linkCheckingResultWithRange:URL:") = NSTextCheckingResult, NSRange, NSURL;
overload selector(static #"linkItemAtPath:toPath:error:") = Bool, NSString, NSString, Pointer[NSError];
overload selector(static #"linkItemAtURL:toURL:error:") = Bool, NSURL, NSURL, Pointer[NSError];
overload selector(static #"linkPath:toPath:handler:") = Bool, NSString, NSString, Id;
overload selector(static #"listDescriptor") = NSAppleEventDescriptor;
overload selector(static #"load") = Bool;
overload selector(static #"load:") = Bool, RawPointer;
overload selector(static #"loadAllPlugIns") = Void;
overload selector(static #"loadAndReturnError:") = Bool, Pointer[NSError];
overload selector(static #"loadInBackground") = Void;
overload selector(static #"loadInForeground") = NSData;
overload selector(static #"loadNonExecutablePlugIns") = Void;
overload selector(static #"loadPlugIn:allowNonExecutable:") = Void, NSURL, Bool;
overload selector(static #"loadResourceDataNotifyingClient:usingCache:") = Void, Id, Bool;
overload selector(static #"loadSuiteWithDictionary:fromBundle:") = Void, NSDictionary, NSBundle;
overload selector(static #"loadSuitesFromBundle:") = Void, NSBundle;
overload selector(static #"localName") = NSString;
overload selector(static #"localNameForName:") = NSString, NSString;
overload selector(static #"localObjects") = NSArray;
overload selector(static #"localTimeZone") = NSTimeZone;
overload selector(static #"locale") = Id;
overload selector(static #"localeIdentifier") = NSString;
overload selector(static #"localeIdentifierFromComponents:") = NSString, NSDictionary;
overload selector(static #"localeIdentifierFromWindowsLocaleCode:") = NSString, UInt;
overload selector(static #"localizations") = NSArray;
overload selector(static #"localizedCaseInsensitiveCompare:") = Int, NSString;
overload selector(static #"localizedCompare:") = Int, NSString;
overload selector(static #"localizedDescription") = NSString;
overload selector(static #"localizedDescriptionForFilterName:") = NSString, NSString;
overload selector(static #"localizedFailureReason") = NSString;
overload selector(static #"localizedInfoDictionary") = NSDictionary;
overload selector(static #"localizedName") = NSString;
overload selector(static #"localizedName:locale:") = NSString, Int, NSLocale;
overload selector(static #"localizedNameForCategory:") = NSString, NSString;
overload selector(static #"localizedNameForFilterName:") = NSString, NSString;
overload selector(static #"localizedNameOfStringEncoding:") = NSString, UInt;
overload selector(static #"localizedRecoveryOptions") = NSArray;
overload selector(static #"localizedRecoverySuggestion") = NSString;
overload selector(static #"localizedReferenceDocumentationForFilterName:") = NSURL, NSString;
overload selector(static #"localizedScannerWithString:") = Id, NSString;
overload selector(static #"localizedStandardCompare:") = Int, NSString;
overload selector(static #"localizedStringForKey:value:table:") = NSString, NSString, NSString, NSString;
overload selector(static #"localizedStringForStatusCode:") = NSString, Int;
overload selector(static #"localizedStringFromDate:dateStyle:timeStyle:") = NSString, NSDate, UInt, UInt;
overload selector(static #"localizedStringFromNumber:numberStyle:") = NSString, NSNumber, UInt;
overload varargSelector(static #"localizedStringWithFormat:") = Id, NSString;
overload selector(static #"localizesFormat") = Bool;
overload selector(static #"locations") = NSArray;
overload selector(static #"lock") = Void;
overload selector(static #"lockBeforeDate:") = Bool, NSDate;
overload selector(static #"lockDate") = NSDate;
overload selector(static #"lockWhenCondition:") = Void, Int;
overload selector(static #"lockWhenCondition:beforeDate:") = Bool, Int, NSDate;
overload selector(static #"lockWithPath:") = NSDistributedLock, NSString;
overload selector(static #"longCharacterIsMember:") = Bool, CULong;
overload selector(static #"longEraSymbols") = NSArray;
overload selector(static #"longLongValue") = Int64;
overload selector(static #"longValue") = CLong;
overload selector(static #"lossyCString") = Pointer[CChar];
overload selector(static #"lowercaseLetterCharacterSet") = Id;
overload selector(static #"lowercaseString") = NSString;
overload selector(static #"machPort") = UInt;
overload selector(static #"magnificationFilter") = NSString;
overload selector(static #"main") = Void;
overload selector(static #"mainBundle") = NSBundle;
overload selector(static #"mainDocumentURL") = NSURL;
overload selector(static #"mainQueue") = Id;
overload selector(static #"mainRunLoop") = NSRunLoop;
overload selector(static #"mainThread") = NSThread;
overload selector(static #"makeNewConnection:sender:") = Bool, NSConnection, NSConnection;
overload selector(static #"makeObjectsPerformSelector:") = Void, SelectorHandle;
overload selector(static #"makeObjectsPerformSelector:withObject:") = Void, SelectorHandle, Id;
overload selector(static #"mapTableWithKeyOptions:valueOptions:") = Id, UInt, UInt;
overload selector(static #"mapTableWithStrongToStrongObjects") = Id;
overload selector(static #"mapTableWithStrongToWeakObjects") = Id;
overload selector(static #"mapTableWithWeakToStrongObjects") = Id;
overload selector(static #"mapTableWithWeakToWeakObjects") = Id;
overload selector(static #"mask") = CALayer;
overload selector(static #"masksToBounds") = Bool;
overload selector(static #"matchesAppleEventCode:") = Bool, CULong;
overload selector(static #"maxConcurrentOperationCount") = Int;
overload selector(static #"maximum") = NSNumber;
overload selector(static #"maximumDecimalNumber") = NSDecimalNumber;
overload selector(static #"maximumFractionDigits") = UInt;
overload selector(static #"maximumIntegerDigits") = UInt;
overload selector(static #"maximumLengthOfBytesUsingEncoding:") = UInt, UInt;
overload selector(static #"maximumRangeOfUnit:") = NSRange, UInt;
overload selector(static #"maximumSignificantDigits") = UInt;
overload selector(static #"member:") = Id, Id;
overload selector(static #"memoryCapacity") = UInt;
overload selector(static #"metadataQuery:replacementObjectForResultObject:") = Id, NSMetadataQuery, NSMetadataItem;
overload selector(static #"metadataQuery:replacementValueForAttribute:value:") = Id, NSMetadataQuery, NSString, Id;
overload selector(static #"methodForSelector:") = IMP, SelectorHandle;
overload selector(static #"methodReturnLength") = UInt;
overload selector(static #"methodReturnType") = Pointer[CChar];
overload selector(static #"methodSignature") = NSMethodSignature;
overload selector(static #"methodSignatureForSelector:") = NSMethodSignature, SelectorHandle;
overload selector(static #"minificationFilter") = NSString;
overload selector(static #"minificationFilterBias") = Float;
overload selector(static #"minimum") = NSNumber;
overload selector(static #"minimumDaysInFirstWeek") = UInt;
overload selector(static #"minimumDecimalNumber") = NSDecimalNumber;
overload selector(static #"minimumFractionDigits") = UInt;
overload selector(static #"minimumIntegerDigits") = UInt;
overload selector(static #"minimumRangeOfUnit:") = NSRange, UInt;
overload selector(static #"minimumSignificantDigits") = UInt;
overload selector(static #"minusHashTable:") = Void, NSHashTable;
overload selector(static #"minusSet:") = Void, NSSet;
overload selector(static #"minusSign") = NSString;
overload selector(static #"minute") = Int;
overload selector(static #"minuteOfHour") = Int;
overload selector(static #"miterLimit") = Float;
overload selector(static #"modelLayer") = Id;
overload selector(static #"month") = Int;
overload selector(static #"monthOfYear") = Int;
overload selector(static #"monthSymbols") = NSArray;
overload selector(static #"mountedVolumeURLsIncludingResourceValuesForKeys:options:") = NSArray, NSArray, UInt;
overload selector(static #"moveItemAtPath:toPath:error:") = Bool, NSString, NSString, Pointer[NSError];
overload selector(static #"moveItemAtURL:toURL:error:") = Bool, NSURL, NSURL, Pointer[NSError];
overload selector(static #"movePath:toPath:handler:") = Bool, NSString, NSString, Id;
overload selector(static #"msgid") = UInt;
overload selector(static #"multipleThreadsEnabled") = Bool;
overload selector(static #"multiplier") = NSNumber;
overload selector(static #"mutableArrayValueForKey:") = NSMutableArray, NSString;
overload selector(static #"mutableArrayValueForKeyPath:") = NSMutableArray, NSString;
overload selector(static #"mutableBytes") = RawPointer;
overload selector(static #"mutableCopy") = Id;
overload selector(static #"mutableCopyWithZone:") = Id, Pointer[NSZone];
overload selector(static #"mutableSetValueForKey:") = NSMutableSet, NSString;
overload selector(static #"mutableSetValueForKeyPath:") = NSMutableSet, NSString;
overload selector(static #"mutableString") = NSMutableString;
overload selector(static #"name") = NSString;
overload selector(static #"names") = NSArray;
overload selector(static #"namespaceForPrefix:") = NSXMLNode, NSString;
overload selector(static #"namespaceWithName:stringValue:") = Id, NSString, NSString;
overload selector(static #"namespaces") = NSArray;
overload selector(static #"needsDisplay") = Bool;
overload selector(static #"needsDisplayForKey:") = Bool, NSString;
overload selector(static #"needsDisplayOnBoundsChange") = Bool;
overload selector(static #"needsLayout") = Bool;
overload selector(static #"negativeFormat") = NSString;
overload selector(static #"negativeInfinitySymbol") = NSString;
overload selector(static #"negativePrefix") = NSString;
overload selector(static #"negativeSuffix") = NSString;
overload selector(static #"netService:didNotPublish:") = Void, NSNetService, NSDictionary;
overload selector(static #"netService:didNotResolve:") = Void, NSNetService, NSDictionary;
overload selector(static #"netService:didUpdateTXTRecordData:") = Void, NSNetService, NSData;
overload selector(static #"netServiceBrowser:didFindDomain:moreComing:") = Void, NSNetServiceBrowser, NSString, Bool;
overload selector(static #"netServiceBrowser:didFindService:moreComing:") = Void, NSNetServiceBrowser, NSNetService, Bool;
overload selector(static #"netServiceBrowser:didNotSearch:") = Void, NSNetServiceBrowser, NSDictionary;
overload selector(static #"netServiceBrowser:didRemoveDomain:moreComing:") = Void, NSNetServiceBrowser, NSString, Bool;
overload selector(static #"netServiceBrowser:didRemoveService:moreComing:") = Void, NSNetServiceBrowser, NSNetService, Bool;
overload selector(static #"netServiceBrowserDidStopSearch:") = Void, NSNetServiceBrowser;
overload selector(static #"netServiceBrowserWillSearch:") = Void, NSNetServiceBrowser;
overload selector(static #"netServiceDidPublish:") = Void, NSNetService;
overload selector(static #"netServiceDidResolveAddress:") = Void, NSNetService;
overload selector(static #"netServiceDidStop:") = Void, NSNetService;
overload selector(static #"netServiceWillPublish:") = Void, NSNetService;
overload selector(static #"netServiceWillResolve:") = Void, NSNetService;
overload selector(static #"new") = Id;
overload selector(static #"newScriptingObjectOfClass:forValueForKey:withContentsValue:properties:") = Id, Id, NSString, Id, NSDictionary;
overload selector(static #"newlineCharacterSet") = Id;
overload selector(static #"nextDaylightSavingTimeTransition") = NSDate;
overload selector(static #"nextDaylightSavingTimeTransitionAfterDate:") = NSDate, NSDate;
overload selector(static #"nextFrameTime") = Double;
overload selector(static #"nextNode") = NSXMLNode;
overload selector(static #"nextObject") = Id;
overload selector(static #"nextSibling") = NSXMLNode;
overload selector(static #"nilSymbol") = NSString;
overload selector(static #"nodesForXPath:error:") = NSArray, NSString, Pointer[NSError];
overload selector(static #"nonBaseCharacterSet") = Id;
overload selector(static #"nonretainedObjectValue") = Id;
overload selector(static #"normalizeAdjacentTextNodesPreservingCDATA:") = Void, Bool;
overload selector(static #"notANumber") = NSDecimalNumber;
overload selector(static #"notANumberSymbol") = NSString;
overload selector(static #"notPredicateWithSubpredicate:") = NSPredicate, NSPredicate;
overload selector(static #"notationDeclarationForName:") = NSXMLDTDNode, NSString;
overload selector(static #"notationName") = NSString;
overload selector(static #"notificationBatchingInterval") = Double;
overload selector(static #"notificationCenterForType:") = NSDistributedNotificationCenter, NSString;
overload selector(static #"notificationWithName:object:") = Id, NSString, Id;
overload selector(static #"notificationWithName:object:userInfo:") = Id, NSString, Id, NSDictionary;
overload selector(static #"null") = NSNull;
overload selector(static #"nullDescriptor") = NSAppleEventDescriptor;
overload selector(static #"numberFromString:") = NSNumber, NSString;
overload selector(static #"numberOfArguments") = UInt;
overload selector(static #"numberOfComponents") = CULong;
overload selector(static #"numberOfItems") = Int;
overload selector(static #"numberStyle") = UInt;
overload selector(static #"numberWithBool:") = NSNumber, Bool;
overload selector(static #"numberWithChar:") = NSNumber, CChar;
overload selector(static #"numberWithDouble:") = NSNumber, Double;
overload selector(static #"numberWithFloat:") = NSNumber, Float;
overload selector(static #"numberWithInt:") = NSNumber, Int;
overload selector(static #"numberWithInteger:") = NSNumber, Int;
overload selector(static #"numberWithLong:") = NSNumber, CLong;
overload selector(static #"numberWithLongLong:") = NSNumber, Int64;
overload selector(static #"numberWithShort:") = NSNumber, Short;
overload selector(static #"numberWithUnsignedChar:") = NSNumber, CUChar;
overload selector(static #"numberWithUnsignedInt:") = NSNumber, UInt;
overload selector(static #"numberWithUnsignedInteger:") = NSNumber, UInt;
overload selector(static #"numberWithUnsignedLong:") = NSNumber, CULong;
overload selector(static #"numberWithUnsignedLongLong:") = NSNumber, UInt64;
overload selector(static #"numberWithUnsignedShort:") = NSNumber, UShort;
overload selector(static #"objCType") = Pointer[CChar];
overload selector(static #"object") = Id;
overload selector(static #"objectAtIndex:") = Id, UInt;
overload selector(static #"objectBeingTested") = Id;
overload selector(static #"objectByApplyingXSLT:arguments:error:") = Id, NSData, NSDictionary, Pointer[NSError];
overload selector(static #"objectByApplyingXSLTAtURL:arguments:error:") = Id, NSURL, NSDictionary, Pointer[NSError];
overload selector(static #"objectByApplyingXSLTString:arguments:error:") = Id, NSString, NSDictionary, Pointer[NSError];
overload selector(static #"objectEnumerator") = NSEnumerator;
overload selector(static #"objectForInfoDictionaryKey:") = Id, NSString;
overload selector(static #"objectForKey:") = Id, Id;
overload selector(static #"objectIsForcedForKey:") = Bool, NSString;
overload selector(static #"objectIsForcedForKey:inDomain:") = Bool, NSString, NSString;
overload selector(static #"objectSpecifier") = NSScriptObjectSpecifier;
overload selector(static #"objectSpecifierWithDescriptor:") = NSScriptObjectSpecifier, NSAppleEventDescriptor;
overload selector(static #"objectValue") = Id;
overload selector(static #"objectZone") = Pointer[NSZone];
overload selector(static #"objectsAtIndexes:") = NSArray, NSIndexSet;
overload selector(static #"objectsByEvaluatingSpecifier") = Id;
overload selector(static #"objectsByEvaluatingWithContainers:") = Id, Id;
overload selector(static #"objectsForKeys:notFoundMarker:") = NSArray, NSArray, Id;
overload selector(static #"objectsForXQuery:constants:error:") = NSArray, NSString, NSDictionary, Pointer[NSError];
overload selector(static #"objectsForXQuery:error:") = NSArray, NSString, Pointer[NSError];
overload selector(static #"objectsPassingTest:") = NSSet, UnknownType;
overload selector(static #"objectsWithOptions:passingTest:") = NSSet, UInt, UnknownType;
overload selector(static #"observationInfo") = RawPointer;
overload selector(static #"observeValueForKeyPath:ofObject:change:context:") = Void, NSString, Id, NSDictionary, RawPointer;
overload selector(static #"offset") = Float;
overload selector(static #"offsetInFile") = UInt64;
overload selector(static #"one") = NSDecimalNumber;
overload selector(static #"opacity") = Float;
overload selector(static #"open") = Void;
overload selector(static #"operand") = NSExpression;
overload selector(static #"operatingSystem") = UInt;
overload selector(static #"operatingSystemName") = NSString;
overload selector(static #"operatingSystemVersionString") = NSString;
overload selector(static #"operationCount") = UInt;
overload selector(static #"operations") = NSArray;
overload selector(static #"options") = UInt;
overload selector(static #"orPredicateWithSubpredicates:") = NSPredicate, NSArray;
overload selector(static #"ordinalityOfUnit:inUnit:forDate:") = UInt, UInt, UInt, NSDate;
overload selector(static #"orthography") = NSOrthography;
overload selector(static #"orthographyCheckingResultWithRange:orthography:") = NSTextCheckingResult, NSRange, NSOrthography;
overload selector(static #"orthographyWithDominantScript:languageMap:") = Id, NSString, NSDictionary;
overload selector(static #"outputFormat") = UInt;
overload selector(static #"outputKeys") = NSArray;
overload selector(static #"outputStreamToBuffer:capacity:") = Id, Pointer[CUChar], UInt;
overload selector(static #"outputStreamToFileAtPath:append:") = Id, NSString, Bool;
overload selector(static #"outputStreamToMemory") = Id;
overload selector(static #"outputStreamWithURL:append:") = Id, NSURL, Bool;
overload selector(static #"paddingCharacter") = NSString;
overload selector(static #"paddingPosition") = UInt;
overload selector(static #"paragraphRangeForRange:") = NSRange, NSRange;
overload selector(static #"paramDescriptorForKeyword:") = NSAppleEventDescriptor, CULong;
overload selector(static #"parameterString") = NSString;
overload selector(static #"parent") = NSXMLNode;
overload selector(static #"parse") = Bool;
overload selector(static #"parser:didEndElement:namespaceURI:qualifiedName:") = Void, NSXMLParser, NSString, NSString, NSString;
overload selector(static #"parser:didEndMappingPrefix:") = Void, NSXMLParser, NSString;
overload selector(static #"parser:didStartElement:namespaceURI:qualifiedName:attributes:") = Void, NSXMLParser, NSString, NSString, NSString, NSDictionary;
overload selector(static #"parser:didStartMappingPrefix:toURI:") = Void, NSXMLParser, NSString, NSString;
overload selector(static #"parser:foundAttributeDeclarationWithName:forElement:type:defaultValue:") = Void, NSXMLParser, NSString, NSString, NSString, NSString;
overload selector(static #"parser:foundCDATA:") = Void, NSXMLParser, NSData;
overload selector(static #"parser:foundCharacters:") = Void, NSXMLParser, NSString;
overload selector(static #"parser:foundComment:") = Void, NSXMLParser, NSString;
overload selector(static #"parser:foundElementDeclarationWithName:model:") = Void, NSXMLParser, NSString, NSString;
overload selector(static #"parser:foundExternalEntityDeclarationWithName:publicID:systemID:") = Void, NSXMLParser, NSString, NSString, NSString;
overload selector(static #"parser:foundIgnorableWhitespace:") = Void, NSXMLParser, NSString;
overload selector(static #"parser:foundInternalEntityDeclarationWithName:value:") = Void, NSXMLParser, NSString, NSString;
overload selector(static #"parser:foundNotationDeclarationWithName:publicID:systemID:") = Void, NSXMLParser, NSString, NSString, NSString;
overload selector(static #"parser:foundProcessingInstructionWithTarget:data:") = Void, NSXMLParser, NSString, NSString;
overload selector(static #"parser:foundUnparsedEntityDeclarationWithName:publicID:systemID:notationName:") = Void, NSXMLParser, NSString, NSString, NSString, NSString;
overload selector(static #"parser:parseErrorOccurred:") = Void, NSXMLParser, NSError;
overload selector(static #"parser:resolveExternalEntityName:systemID:") = NSData, NSXMLParser, NSString, NSString;
overload selector(static #"parser:validationErrorOccurred:") = Void, NSXMLParser, NSError;
overload selector(static #"parserDidEndDocument:") = Void, NSXMLParser;
overload selector(static #"parserDidStartDocument:") = Void, NSXMLParser;
overload selector(static #"parserError") = NSError;
overload selector(static #"password") = NSString;
overload selector(static #"path") = NSString;
overload selector(static #"pathComponents") = NSArray;
overload selector(static #"pathContentOfSymbolicLinkAtPath:") = NSString, NSString;
overload selector(static #"pathExtension") = NSString;
overload selector(static #"pathForAuxiliaryExecutable:") = NSString, NSString;
overload selector(static #"pathForResource:ofType:") = NSString, NSString, NSString;
overload selector(static #"pathForResource:ofType:inDirectory:") = NSString, NSString, NSString, NSString;
overload selector(static #"pathForResource:ofType:inDirectory:forLocalization:") = NSString, NSString, NSString, NSString, NSString;
overload selector(static #"pathWithComponents:") = NSString, NSArray;
overload selector(static #"pathsForResourcesOfType:inDirectory:") = NSArray, NSString, NSString;
overload selector(static #"pathsForResourcesOfType:inDirectory:forLocalization:") = NSArray, NSString, NSString, NSString;
overload selector(static #"pathsMatchingExtensions:") = NSArray, NSArray;
overload selector(static #"perMillSymbol") = NSString;
overload selector(static #"percentSymbol") = NSString;
overload selector(static #"performDefaultImplementation") = Id;
overload selector(static #"performSelector:") = Id, SelectorHandle;
overload selector(static #"performSelector:onThread:withObject:waitUntilDone:") = Void, SelectorHandle, NSThread, Id, Bool;
overload selector(static #"performSelector:onThread:withObject:waitUntilDone:modes:") = Void, SelectorHandle, NSThread, Id, Bool, NSArray;
overload selector(static #"performSelector:target:argument:order:modes:") = Void, SelectorHandle, Id, Id, UInt, NSArray;
overload selector(static #"performSelector:withObject:") = Id, SelectorHandle, Id;
overload selector(static #"performSelector:withObject:afterDelay:") = Void, SelectorHandle, Id, Double;
overload selector(static #"performSelector:withObject:afterDelay:inModes:") = Void, SelectorHandle, Id, Double, NSArray;
overload selector(static #"performSelector:withObject:withObject:") = Id, SelectorHandle, Id, Id;
overload selector(static #"performSelectorInBackground:withObject:") = Void, SelectorHandle, Id;
overload selector(static #"performSelectorOnMainThread:withObject:waitUntilDone:") = Void, SelectorHandle, Id, Bool;
overload selector(static #"performSelectorOnMainThread:withObject:waitUntilDone:modes:") = Void, SelectorHandle, Id, Bool, NSArray;
overload selector(static #"persistence") = UInt;
overload selector(static #"persistentDomainForName:") = NSDictionary, NSString;
overload selector(static #"persistentDomainNames") = NSArray;
overload selector(static #"physicalMemory") = UInt64;
overload selector(static #"pipe") = Id;
overload selector(static #"plusSign") = NSString;
overload selector(static #"pointValue") = NSPoint;
overload selector(static #"pointerArrayWithOptions:") = Id, UInt;
overload selector(static #"pointerArrayWithPointerFunctions:") = Id, NSPointerFunctions;
overload selector(static #"pointerArrayWithStrongObjects") = Id;
overload selector(static #"pointerArrayWithWeakObjects") = Id;
overload selector(static #"pointerAtIndex:") = RawPointer, UInt;
overload selector(static #"pointerFunctions") = NSPointerFunctions;
overload selector(static #"pointerFunctionsWithOptions:") = Id, UInt;
overload selector(static #"pointerValue") = RawPointer;
overload selector(static #"port") = Id;
overload selector(static #"portCoderWithReceivePort:sendPort:components:") = Id, NSPort, NSPort, NSArray;
overload selector(static #"portForName:") = NSPort, NSString;
overload selector(static #"portForName:host:") = NSPort, NSString, NSString;
overload selector(static #"portForName:host:nameServerPortNumber:") = NSPort, NSString, NSString, UShort;
overload selector(static #"portList") = NSArray;
overload selector(static #"portWithMachPort:") = NSPort, UInt;
overload selector(static #"portWithMachPort:options:") = NSPort, UInt, UInt;
overload selector(static #"poseAsClass:") = Void, Id;
overload selector(static #"position") = UInt;
overload selector(static #"positiveFormat") = NSString;
overload selector(static #"positiveInfinitySymbol") = NSString;
overload selector(static #"positivePrefix") = NSString;
overload selector(static #"positiveSuffix") = NSString;
overload selector(static #"postNotification:") = Void, NSNotification;
overload selector(static #"postNotificationName:object:") = Void, NSString, Id;
overload selector(static #"postNotificationName:object:userInfo:") = Void, NSString, Id, NSDictionary;
overload selector(static #"postNotificationName:object:userInfo:deliverImmediately:") = Void, NSString, NSString, NSDictionary, Bool;
overload selector(static #"postNotificationName:object:userInfo:options:") = Void, NSString, NSString, NSDictionary, UInt;
overload selector(static #"precomposedStringWithCanonicalMapping") = NSString;
overload selector(static #"precomposedStringWithCompatibilityMapping") = NSString;
overload selector(static #"predefinedEntityDeclarationForName:") = NSXMLDTDNode, NSString;
overload selector(static #"predefinedNamespaceForPrefix:") = NSXMLNode, NSString;
overload selector(static #"predicate") = NSPredicate;
overload selector(static #"predicateFormat") = NSString;
overload selector(static #"predicateOperatorType") = UInt;
overload selector(static #"predicateWithBlock:") = NSPredicate, UnknownType;
overload varargSelector(static #"predicateWithFormat:") = NSPredicate, NSString;
overload selector(static #"predicateWithFormat:argumentArray:") = NSPredicate, NSString, NSArray;
overload selector(static #"predicateWithFormat:arguments:") = NSPredicate, NSString, va_list;
overload selector(static #"predicateWithLeftExpression:rightExpression:customSelector:") = NSPredicate, NSExpression, NSExpression, SelectorHandle;
overload selector(static #"predicateWithLeftExpression:rightExpression:modifier:type:options:") = NSPredicate, NSExpression, NSExpression, UInt, UInt, UInt;
overload selector(static #"predicateWithSubstitutionVariables:") = NSPredicate, NSDictionary;
overload selector(static #"predicateWithValue:") = NSPredicate, Bool;
overload selector(static #"preferredFrameSize") = CGSize;
overload selector(static #"preferredLanguages") = NSArray;
overload selector(static #"preferredLocalizations") = NSArray;
overload selector(static #"preferredLocalizationsFromArray:") = NSArray, NSArray;
overload selector(static #"preferredLocalizationsFromArray:forPreferences:") = NSArray, NSArray, NSArray;
overload selector(static #"preferredSizeOfLayer:") = CGSize, CALayer;
overload selector(static #"prefix") = NSString;
overload selector(static #"prefixForName:") = NSString, NSString;
overload selector(static #"preflightAndReturnError:") = Bool, Pointer[NSError];
overload selector(static #"prepareWithInvocationTarget:") = Id, Id;
overload selector(static #"prependTransform:") = Void, NSAffineTransform;
overload selector(static #"presentationLayer") = Id;
overload selector(static #"preservesDepth") = Bool;
overload selector(static #"previousFailureCount") = Int;
overload selector(static #"previousNode") = NSXMLNode;
overload selector(static #"previousSibling") = NSXMLNode;
overload selector(static #"principalClass") = Id;
overload selector(static #"privateFrameworksPath") = NSString;
overload selector(static #"privateFrameworksURL") = NSURL;
overload selector(static #"processIdentifier") = Int;
overload selector(static #"processInfo") = NSProcessInfo;
overload selector(static #"processName") = NSString;
overload selector(static #"processingInstructionWithName:stringValue:") = Id, NSString, NSString;
overload selector(static #"processorCount") = UInt;
overload selector(static #"properties") = NSDictionary;
overload selector(static #"propertyForKey:") = Id, NSString;
overload selector(static #"propertyForKey:inRequest:") = Id, NSString, NSURLRequest;
overload selector(static #"propertyForKeyIfAvailable:") = Id, NSString;
overload selector(static #"propertyList") = Id;
overload selector(static #"propertyList:isValidForFormat:") = Bool, Id, UInt;
overload selector(static #"propertyListFromData:mutabilityOption:format:errorDescription:") = Id, NSData, UInt, Pointer[UInt], Pointer[NSString];
overload selector(static #"propertyListFromStringsFileFormat") = NSDictionary;
overload selector(static #"propertyListWithData:options:format:error:") = Id, NSData, UInt, Pointer[UInt], Pointer[NSError];
overload selector(static #"propertyListWithStream:options:format:error:") = Id, NSInputStream, UInt, Pointer[UInt], Pointer[NSError];
overload selector(static #"proposedCredential") = NSURLCredential;
overload selector(static #"protectionSpace") = NSURLProtectionSpace;
overload selector(static #"protocol") = Int;
overload selector(static #"protocolCheckerWithTarget:protocol:") = Id, NSObject, Id;
overload selector(static #"protocolFamily") = Int;
overload selector(static #"protocolSpecificInformation") = NSString;
overload selector(static #"provideImageData:bytesPerRow:origin::size::userInfo:") = Void, RawPointer, CULong, CULong, CULong, CULong, CULong, Id;
overload selector(static #"proxyType") = NSString;
overload selector(static #"proxyWithLocal:connection:") = NSDistantObject, Id, NSConnection;
overload selector(static #"proxyWithTarget:connection:") = NSDistantObject, Id, NSConnection;
overload selector(static #"publicID") = NSString;
overload selector(static #"publish") = Void;
overload selector(static #"publishWithOptions:") = Void, UInt;
overload selector(static #"punctuationCharacterSet") = Id;
overload selector(static #"quarter") = Int;
overload selector(static #"quarterSymbols") = NSArray;
overload selector(static #"query") = NSString;
overload selector(static #"queuePriority") = Int;
overload selector(static #"quoteCheckingResultWithRange:replacementString:") = NSTextCheckingResult, NSRange, NSString;
overload selector(static #"raise") = Void;
overload varargSelector(static #"raise:format:") = Void, NSString, NSString;
overload selector(static #"raise:format:arguments:") = Void, NSString, NSString, va_list;
overload selector(static #"range") = NSRange;
overload selector(static #"rangeContainerObject") = Id;
overload selector(static #"rangeOfCharacterFromSet:") = NSRange, NSCharacterSet;
overload selector(static #"rangeOfCharacterFromSet:options:") = NSRange, NSCharacterSet, UInt;
overload selector(static #"rangeOfCharacterFromSet:options:range:") = NSRange, NSCharacterSet, UInt, NSRange;
overload selector(static #"rangeOfComposedCharacterSequenceAtIndex:") = NSRange, UInt;
overload selector(static #"rangeOfComposedCharacterSequencesForRange:") = NSRange, NSRange;
overload selector(static #"rangeOfData:options:range:") = NSRange, NSData, UInt, NSRange;
overload selector(static #"rangeOfString:") = NSRange, NSString;
overload selector(static #"rangeOfString:options:") = NSRange, NSString, UInt;
overload selector(static #"rangeOfString:options:range:") = NSRange, NSString, UInt, NSRange;
overload selector(static #"rangeOfString:options:range:locale:") = NSRange, NSString, UInt, NSRange, NSLocale;
overload selector(static #"rangeOfUnit:inUnit:forDate:") = NSRange, UInt, UInt, NSDate;
overload selector(static #"rangeOfUnit:startDate:interval:forDate:") = Bool, UInt, Pointer[NSDate], Pointer[Double], NSDate;
overload selector(static #"rangeValue") = NSRange;
overload selector(static #"read:maxLength:") = Int, Pointer[CUChar], UInt;
overload selector(static #"readDataOfLength:") = NSData, UInt;
overload selector(static #"readDataToEndOfFile") = NSData;
overload selector(static #"readInBackgroundAndNotify") = Void;
overload selector(static #"readInBackgroundAndNotifyForModes:") = Void, NSArray;
overload selector(static #"readToEndOfFileInBackgroundAndNotify") = Void;
overload selector(static #"readToEndOfFileInBackgroundAndNotifyForModes:") = Void, NSArray;
overload selector(static #"realm") = NSString;
overload selector(static #"reason") = NSString;
overload selector(static #"receivePort") = NSPort;
overload selector(static #"receiversSpecifier") = NSScriptObjectSpecifier;
overload selector(static #"receivesCredentialSecurely") = Bool;
overload selector(static #"reclaimResources") = Void;
overload selector(static #"recordDescriptor") = NSAppleEventDescriptor;
overload selector(static #"recoveryAttempter") = Id;
overload selector(static #"rectValue") = NSRect;
overload selector(static #"red") = Float;
overload selector(static #"redRange") = Float;
overload selector(static #"redSpeed") = Float;
overload selector(static #"redo") = Void;
overload selector(static #"redoActionName") = NSString;
overload selector(static #"redoMenuItemTitle") = NSString;
overload selector(static #"redoMenuTitleForUndoActionName:") = NSString, NSString;
overload selector(static #"registerClass:") = Bool, Id;
overload selector(static #"registerClassDescription:") = Void, NSScriptClassDescription;
overload selector(static #"registerClassDescription:forClass:") = Void, NSClassDescription, Id;
overload selector(static #"registerCoercer:selector:toConvertFromClass:toClass:") = Void, Id, SelectorHandle, Id, Id;
overload selector(static #"registerCommandDescription:") = Void, NSScriptCommandDescription;
overload selector(static #"registerDefaults:") = Void, NSDictionary;
overload selector(static #"registerFilterName:") = Void, NSString;
overload selector(static #"registerFilterName:constructor:classAttributes:") = Void, NSString, Id, NSDictionary;
overload selector(static #"registerLanguage:byVendor:") = Bool, NSString, NSString;
overload selector(static #"registerName:") = Bool, NSString;
overload selector(static #"registerName:withNameServer:") = Bool, NSString, NSPortNameServer;
overload selector(static #"registerPort:name:") = Bool, NSPort, NSString;
overload selector(static #"registerPort:name:nameServerPortNumber:") = Bool, NSPort, NSString, UShort;
overload selector(static #"registerURLHandleClass:") = Void, Id;
overload selector(static #"registerUndoWithTarget:selector:object:") = Void, Id, SelectorHandle, Id;
overload selector(static #"relativePath") = NSString;
overload selector(static #"relativePosition") = UInt;
overload selector(static #"relativeString") = NSString;
overload selector(static #"release") = Void;
overload selector(static #"releaseCGLContext:") = Void, CGLContextObj;
overload selector(static #"releaseCGLPixelFormat:") = Void, CGLPixelFormatObj;
overload selector(static #"relinquishFunction") = CCodePointer[(RawPointer,CCodePointer[(RawPointer),(UInt)]),()];
overload selector(static #"remoteObjects") = NSArray;
overload selector(static #"removeAllActions") = Void;
overload selector(static #"removeAllActionsWithTarget:") = Void, Id;
overload selector(static #"removeAllAnimations") = Void;
overload selector(static #"removeAllCachedResponses") = Void;
overload selector(static #"removeAllIndexes") = Void;
overload selector(static #"removeAllObjects") = Void;
overload selector(static #"removeAnimationForKey:") = Void, NSString;
overload selector(static #"removeAttribute:range:") = Void, NSString, NSRange;
overload selector(static #"removeAttributeForName:") = Void, NSString;
overload selector(static #"removeCachedResponseForRequest:") = Void, NSURLRequest;
overload selector(static #"removeCharactersInRange:") = Void, NSRange;
overload selector(static #"removeCharactersInString:") = Void, NSString;
overload selector(static #"removeChildAtIndex:") = Void, UInt;
overload selector(static #"removeClient:") = Void, Id;
overload selector(static #"removeConnection:fromRunLoop:forMode:") = Void, NSConnection, NSRunLoop, NSString;
overload selector(static #"removeCredential:forProtectionSpace:") = Void, NSURLCredential, NSURLProtectionSpace;
overload selector(static #"removeDependency:") = Void, NSOperation;
overload selector(static #"removeDescriptorAtIndex:") = Void, Int;
overload selector(static #"removeDescriptorWithKeyword:") = Void, CULong;
overload selector(static #"removeEventHandlerForEventClass:andEventID:") = Void, CULong, CULong;
overload selector(static #"removeExportedKey:") = Void, NSString;
overload selector(static #"removeFileAtPath:handler:") = Bool, NSString, Id;
overload selector(static #"removeFromRunLoop:forMode:") = Void, NSRunLoop, NSString;
overload selector(static #"removeFromSuperlayer") = Void;
overload selector(static #"removeIndex:") = Void, UInt;
overload selector(static #"removeIndexes:") = Void, NSIndexSet;
overload selector(static #"removeIndexesInRange:") = Void, NSRange;
overload selector(static #"removeItemAtPath:error:") = Bool, NSString, Pointer[NSError];
overload selector(static #"removeItemAtURL:error:") = Bool, NSURL, Pointer[NSError];
overload selector(static #"removeLastObject") = Void;
overload selector(static #"removeNamespaceForPrefix:") = Void, NSString;
overload selector(static #"removeObject:") = Void, Id;
overload selector(static #"removeObject:inRange:") = Void, Id, NSRange;
overload selector(static #"removeObjectAtIndex:") = Void, UInt;
overload selector(static #"removeObjectForKey:") = Void, Id;
overload selector(static #"removeObjectIdenticalTo:") = Void, Id;
overload selector(static #"removeObjectIdenticalTo:inRange:") = Void, Id, NSRange;
overload selector(static #"removeObjectsAtIndexes:") = Void, NSIndexSet;
overload selector(static #"removeObjectsForKeys:") = Void, NSArray;
overload selector(static #"removeObjectsFromIndices:numIndices:") = Void, Pointer[UInt], UInt;
overload selector(static #"removeObjectsInArray:") = Void, NSArray;
overload selector(static #"removeObjectsInRange:") = Void, NSRange;
overload selector(static #"removeObserver:") = Void, Id;
overload selector(static #"removeObserver:forKeyPath:") = Void, NSObject, NSString;
overload selector(static #"removeObserver:fromObjectsAtIndexes:forKeyPath:") = Void, NSObject, NSIndexSet, NSString;
overload selector(static #"removeObserver:name:object:") = Void, Id, NSString, Id;
overload selector(static #"removeParamDescriptorWithKeyword:") = Void, CULong;
overload selector(static #"removePersistentDomainForName:") = Void, NSString;
overload selector(static #"removePointerAtIndex:") = Void, UInt;
overload selector(static #"removePort:forMode:") = Void, NSPort, NSString;
overload selector(static #"removePortForName:") = Bool, NSString;
overload selector(static #"removePropertyForKey:inRequest:") = Void, NSString, NSMutableURLRequest;
overload selector(static #"removeRequestMode:") = Void, NSString;
overload selector(static #"removeRunLoop:") = Void, NSRunLoop;
overload selector(static #"removeSuiteNamed:") = Void, NSString;
overload selector(static #"removeValueAtIndex:fromPropertyWithKey:") = Void, UInt, NSString;
overload selector(static #"removeVolatileDomainForName:") = Void, NSString;
overload selector(static #"render") = Void;
overload selector(static #"render:toBitmap:rowBytes:bounds:format:colorSpace:") = Void, CIImage, RawPointer, Int, CGRect, Int, CGColorSpaceRef;
overload selector(static #"render:toIOSurface:bounds:colorSpace:") = Void, CIImage, IOSurfaceRef, CGRect, CGColorSpaceRef;
overload selector(static #"renderInContext:") = Void, CGContextRef;
overload selector(static #"renderMode") = NSString;
overload selector(static #"rendererWithCGLContext:options:") = CARenderer, RawPointer, NSDictionary;
overload selector(static #"repeatCount") = Float;
overload selector(static #"repeatDuration") = Double;
overload selector(static #"replaceBytesInRange:withBytes:") = Void, NSRange, RawPointer;
overload selector(static #"replaceBytesInRange:withBytes:length:") = Void, NSRange, RawPointer, UInt;
overload selector(static #"replaceCharactersInRange:withAttributedString:") = Void, NSRange, NSAttributedString;
overload selector(static #"replaceCharactersInRange:withString:") = Void, NSRange, NSString;
overload selector(static #"replaceChildAtIndex:withNode:") = Void, UInt, NSXMLNode;
overload selector(static #"replaceItemAtURL:withItemAtURL:backupItemName:options:resultingItemURL:error:") = Bool, NSURL, NSURL, NSString, UInt, Pointer[NSURL], Pointer[NSError];
overload selector(static #"replaceObject:withObject:") = Void, Id, Id;
overload selector(static #"replaceObjectAtIndex:withObject:") = Void, UInt, Id;
overload selector(static #"replaceObjectsAtIndexes:withObjects:") = Void, NSIndexSet, NSArray;
overload selector(static #"replaceObjectsInRange:withObjectsFromArray:") = Void, NSRange, NSArray;
overload selector(static #"replaceObjectsInRange:withObjectsFromArray:range:") = Void, NSRange, NSArray, NSRange;
overload selector(static #"replaceOccurrencesOfString:withString:options:range:") = UInt, NSString, NSString, UInt, NSRange;
overload selector(static #"replacePointerAtIndex:withPointer:") = Void, UInt, RawPointer;
overload selector(static #"replaceSublayer:with:") = Void, CALayer, CALayer;
overload selector(static #"replaceValueAtIndex:inPropertyWithKey:withValue:") = Void, UInt, NSString, Id;
overload selector(static #"replacementCheckingResultWithRange:replacementString:") = NSTextCheckingResult, NSRange, NSString;
overload selector(static #"replacementClassForClass:") = Id, Id;
overload selector(static #"replacementObjectForArchiver:") = Id, NSArchiver;
overload selector(static #"replacementObjectForCoder:") = Id, NSCoder;
overload selector(static #"replacementObjectForKeyedArchiver:") = Id, NSKeyedArchiver;
overload selector(static #"replacementObjectForPortCoder:") = Id, NSPortCoder;
overload selector(static #"replacementString") = NSString;
overload selector(static #"replyAppleEventForSuspensionID:") = NSAppleEventDescriptor, NSAppleEventManagerSuspensionID;
overload selector(static #"replyTimeout") = Double;
overload selector(static #"replyWithException:") = Void, NSException;
overload selector(static #"request") = NSURLRequest;
overload selector(static #"requestHeaderFieldsWithCookies:") = NSDictionary, NSArray;
overload selector(static #"requestIsCacheEquivalent:toRequest:") = Bool, NSURLRequest, NSURLRequest;
overload selector(static #"requestModes") = NSArray;
overload selector(static #"requestTimeout") = Double;
overload selector(static #"requestWithURL:") = Id, NSURL;
overload selector(static #"requestWithURL:cachePolicy:timeoutInterval:") = Id, NSURL, UInt, Double;
overload selector(static #"reservedSpaceLength") = UInt;
overload selector(static #"resetBytesInRange:") = Void, NSRange;
overload selector(static #"resetStandardUserDefaults") = Void;
overload selector(static #"resetSystemTimeZone") = Void;
overload selector(static #"resizeSublayersWithOldSize:") = Void, CGSize;
overload selector(static #"resizeWithOldSuperlayerSize:") = Void, CGSize;
overload selector(static #"resolve") = Void;
overload selector(static #"resolveClassMethod:") = Bool, SelectorHandle;
overload selector(static #"resolveInstanceMethod:") = Bool, SelectorHandle;
overload selector(static #"resolveNamespaceForName:") = NSXMLNode, NSString;
overload selector(static #"resolvePrefixForNamespaceURI:") = NSString, NSString;
overload selector(static #"resolveWithTimeout:") = Void, Double;
overload selector(static #"resolvedKeyDictionary") = NSDictionary;
overload selector(static #"resourceData") = NSData;
overload selector(static #"resourceDataUsingCache:") = NSData, Bool;
overload selector(static #"resourcePath") = NSString;
overload selector(static #"resourceSpecifier") = NSString;
overload selector(static #"resourceURL") = NSURL;
overload selector(static #"resourceValuesForKeys:error:") = NSDictionary, NSArray, Pointer[NSError];
overload selector(static #"resourceValuesForKeys:fromBookmarkData:") = NSDictionary, NSArray, NSData;
overload selector(static #"respondsToSelector:") = Bool, SelectorHandle;
overload selector(static #"response") = NSURLResponse;
overload selector(static #"result") = Id;
overload selector(static #"resultAtIndex:") = Id, UInt;
overload selector(static #"resultCount") = UInt;
overload selector(static #"resultType") = UInt64;
overload selector(static #"results") = NSArray;
overload selector(static #"resume") = Bool;
overload selector(static #"resumeData") = NSData;
overload selector(static #"resumeExecutionWithResult:") = Void, Id;
overload selector(static #"resumeWithSuspensionID:") = Void, NSAppleEventManagerSuspensionID;
overload selector(static #"retain") = Id;
overload selector(static #"retainArguments") = Void;
overload selector(static #"retainCount") = UInt;
overload selector(static #"returnID") = Short;
overload selector(static #"returnType") = NSString;
overload selector(static #"reverseObjectEnumerator") = NSEnumerator;
overload selector(static #"reverseTransformedValue:") = Id, Id;
overload selector(static #"reversedSortDescriptor") = Id;
overload selector(static #"rightExpression") = NSExpression;
overload selector(static #"rootDocument") = NSXMLDocument;
overload selector(static #"rootElement") = NSXMLElement;
overload selector(static #"rootObject") = Id;
overload selector(static #"rootProxy") = NSDistantObject;
overload selector(static #"rootProxyForConnectionWithRegisteredName:host:") = NSDistantObject, NSString, NSString;
overload selector(static #"rootProxyForConnectionWithRegisteredName:host:usingNameServer:") = NSDistantObject, NSString, NSString, NSPortNameServer;
overload selector(static #"rotateByDegrees:") = Void, Float;
overload selector(static #"rotateByRadians:") = Void, Float;
overload selector(static #"rotationMode") = NSString;
overload selector(static #"roundingBehavior") = NSDecimalNumberHandler;
overload selector(static #"roundingIncrement") = NSNumber;
overload selector(static #"roundingMode") = UInt;
overload selector(static #"run") = Void;
overload selector(static #"runActionForKey:object:arguments:") = Void, NSString, Id, NSDictionary;
overload selector(static #"runInNewThread") = Void;
overload selector(static #"runLoopModes") = NSArray;
overload selector(static #"runMode:beforeDate:") = Bool, NSString, NSDate;
overload selector(static #"runUntilDate:") = Void, NSDate;
overload selector(static #"samplerWithImage:") = CISampler, CIImage;
overload varargSelector(static #"samplerWithImage:keysAndValues:") = CISampler, CIImage, Id;
overload selector(static #"samplerWithImage:options:") = CISampler, CIImage, NSDictionary;
overload selector(static #"saveOptions") = UInt;
overload selector(static #"scale") = Short;
overload selector(static #"scaleBy:") = Void, Float;
overload selector(static #"scaleRange") = Float;
overload selector(static #"scaleSpeed") = Float;
overload selector(static #"scaleXBy:yBy:") = Void, Float, Float;
overload selector(static #"scanCharactersFromSet:intoString:") = Bool, NSCharacterSet, Pointer[NSString];
overload selector(static #"scanDecimal:") = Bool, Pointer[NSDecimal];
overload selector(static #"scanDouble:") = Bool, Pointer[Double];
overload selector(static #"scanFloat:") = Bool, Pointer[Float];
overload selector(static #"scanHexDouble:") = Bool, Pointer[Double];
overload selector(static #"scanHexFloat:") = Bool, Pointer[Float];
overload selector(static #"scanHexInt:") = Bool, Pointer[UInt];
overload selector(static #"scanHexLongLong:") = Bool, Pointer[UInt64];
overload selector(static #"scanInt:") = Bool, Pointer[Int];
overload selector(static #"scanInteger:") = Bool, Pointer[Int];
overload selector(static #"scanLocation") = UInt;
overload selector(static #"scanLongLong:") = Bool, Pointer[Int64];
overload selector(static #"scanString:intoString:") = Bool, NSString, Pointer[NSString];
overload selector(static #"scanUpToCharactersFromSet:intoString:") = Bool, NSCharacterSet, Pointer[NSString];
overload selector(static #"scanUpToString:intoString:") = Bool, NSString, Pointer[NSString];
overload selector(static #"scannerWithString:") = Id, NSString;
overload selector(static #"scheduleInRunLoop:forMode:") = Void, NSRunLoop, NSString;
overload selector(static #"scheduledTimerWithTimeInterval:invocation:repeats:") = NSTimer, Double, NSInvocation, Bool;
overload selector(static #"scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:") = NSTimer, Double, Id, SelectorHandle, Id, Bool;
overload selector(static #"scheme") = NSString;
overload selector(static #"scriptErrorExpectedTypeDescriptor") = NSAppleEventDescriptor;
overload selector(static #"scriptErrorNumber") = Int;
overload selector(static #"scriptErrorOffendingObjectDescriptor") = NSAppleEventDescriptor;
overload selector(static #"scriptErrorString") = NSString;
overload selector(static #"scriptingBeginsWith:") = Bool, Id;
overload selector(static #"scriptingContains:") = Bool, Id;
overload selector(static #"scriptingEndsWith:") = Bool, Id;
overload selector(static #"scriptingIsEqualTo:") = Bool, Id;
overload selector(static #"scriptingIsGreaterThan:") = Bool, Id;
overload selector(static #"scriptingIsGreaterThanOrEqualTo:") = Bool, Id;
overload selector(static #"scriptingIsLessThan:") = Bool, Id;
overload selector(static #"scriptingIsLessThanOrEqualTo:") = Bool, Id;
overload selector(static #"scriptingProperties") = NSDictionary;
overload selector(static #"scriptingValueForSpecifier:") = Id, NSScriptObjectSpecifier;
overload selector(static #"scrollMode") = NSString;
overload selector(static #"scrollPoint:") = Void, CGPoint;
overload selector(static #"scrollRectToVisible:") = Void, CGRect;
overload selector(static #"scrollToPoint:") = Void, CGPoint;
overload selector(static #"scrollToRect:") = Void, CGRect;
overload selector(static #"searchForAllDomains") = Void;
overload selector(static #"searchForBrowsableDomains") = Void;
overload selector(static #"searchForRegistrationDomains") = Void;
overload selector(static #"searchForServicesOfType:inDomain:") = Void, NSString, NSString;
overload selector(static #"searchScopes") = NSArray;
overload selector(static #"second") = Int;
overload selector(static #"secondOfMinute") = Int;
overload selector(static #"secondaryGroupingSize") = UInt;
overload selector(static #"secondsFromGMT") = Int;
overload selector(static #"secondsFromGMTForDate:") = Int, NSDate;
overload selector(static #"seed") = UInt;
overload selector(static #"seekToEndOfFile") = UInt64;
overload selector(static #"seekToFileOffset:") = Void, UInt64;
overload selector(static #"selector") = SelectorHandle;
overload selector(static #"selectorForCommand:") = SelectorHandle, NSScriptCommandDescription;
overload selector(static #"self") = Id;
overload selector(static #"sendBeforeDate:") = Bool, NSDate;
overload selector(static #"sendBeforeDate:components:from:reserved:") = Bool, NSDate, NSMutableArray, NSPort, UInt;
overload selector(static #"sendBeforeDate:msgid:components:from:reserved:") = Bool, NSDate, UInt, NSMutableArray, NSPort, UInt;
overload selector(static #"sendPort") = NSPort;
overload selector(static #"sendSynchronousRequest:returningResponse:error:") = NSData, NSURLRequest, Pointer[NSURLResponse], Pointer[NSError];
overload selector(static #"sender") = Id;
overload selector(static #"serverTrust") = SecTrustRef;
overload selector(static #"serviceConnectionWithName:rootObject:") = Id, NSString, Id;
overload selector(static #"serviceConnectionWithName:rootObject:usingNameServer:") = Id, NSString, Id, NSPortNameServer;
overload selector(static #"servicePortWithName:") = NSPort, NSString;
overload selector(static #"set") = Id;
overload selector(static #"setAMSymbol:") = Void, NSString;
overload selector(static #"setAbbreviationDictionary:") = Void, NSDictionary;
overload selector(static #"setAcquireFunction:") = Void, CCodePointer[(RawPointer,CCodePointer[(RawPointer),(UInt)],CChar),(RawPointer)];
overload selector(static #"setActionName:") = Void, NSString;
overload selector(static #"setActions:") = Void, NSDictionary;
overload selector(static #"setAdditive:") = Void, Bool;
overload selector(static #"setAffineTransform:") = Void, CGAffineTransform;
overload selector(static #"setAlignmentMode:") = Void, NSString;
overload selector(static #"setAllHTTPHeaderFields:") = Void, NSDictionary;
overload selector(static #"setAllowsFloats:") = Void, Bool;
overload selector(static #"setAlphaRange:") = Void, Float;
overload selector(static #"setAlphaSpeed:") = Void, Float;
overload selector(static #"setAlwaysShowsDecimalSeparator:") = Void, Bool;
overload selector(static #"setAnchorPoint:") = Void, CGPoint;
overload selector(static #"setAnchorPointZ:") = Void, Float;
overload selector(static #"setAnimationDuration:") = Void, Double;
overload selector(static #"setAnimationTimingFunction:") = Void, CAMediaTimingFunction;
overload selector(static #"setAnimations:") = Void, NSArray;
overload selector(static #"setArgument:atIndex:") = Void, RawPointer, Int;
overload selector(static #"setArguments:") = Void, NSArray;
overload selector(static #"setArray:") = Void, NSArray;
overload selector(static #"setAsynchronous:") = Void, Bool;
overload selector(static #"setAttributeDescriptor:forKeyword:") = Void, NSAppleEventDescriptor, CULong;
overload selector(static #"setAttributedString:") = Void, NSAttributedString;
overload selector(static #"setAttributedStringForNil:") = Void, NSAttributedString;
overload selector(static #"setAttributedStringForNotANumber:") = Void, NSAttributedString;
overload selector(static #"setAttributedStringForZero:") = Void, NSAttributedString;
overload selector(static #"setAttributes:") = Void, NSArray;
overload selector(static #"setAttributes:forExportedKey:") = Void, NSDictionary, NSString;
overload selector(static #"setAttributes:ofItemAtPath:error:") = Bool, NSDictionary, NSString, Pointer[NSError];
overload selector(static #"setAttributes:range:") = Void, NSDictionary, NSRange;
overload selector(static #"setAttributesAsDictionary:") = Void, NSDictionary;
overload selector(static #"setAutoresizingMask:") = Void, UInt;
overload selector(static #"setAutoreverses:") = Void, Bool;
overload selector(static #"setBackgroundColor:") = Void, CGColorRef;
overload selector(static #"setBackgroundFilters:") = Void, NSArray;
overload selector(static #"setBaseSpecifier:") = Void, NSScriptObjectSpecifier;
overload selector(static #"setBeginTime:") = Void, Double;
overload selector(static #"setBirthRate:") = Void, Float;
overload selector(static #"setBlueRange:") = Void, Float;
overload selector(static #"setBlueSpeed:") = Void, Float;
overload selector(static #"setBool:forKey:") = Void, Bool, NSString;
overload selector(static #"setBorderColor:") = Void, CGColorRef;
overload selector(static #"setBorderWidth:") = Void, Float;
overload selector(static #"setBounds:") = Void, CGRect;
overload selector(static #"setByAddingObject:") = NSSet, Id;
overload selector(static #"setByAddingObjectsFromArray:") = NSSet, NSArray;
overload selector(static #"setByAddingObjectsFromSet:") = NSSet, NSSet;
overload selector(static #"setByValue:") = Void, Id;
overload selector(static #"setCachePolicy:") = Void, UInt;
overload selector(static #"setCalculationMode:") = Void, NSString;
overload selector(static #"setCalendar:") = Void, NSCalendar;
overload selector(static #"setCalendarFormat:") = Void, NSString;
overload selector(static #"setCaseSensitive:") = Void, Bool;
overload selector(static #"setCharacterEncoding:") = Void, NSString;
overload selector(static #"setCharactersToBeSkipped:") = Void, NSCharacterSet;
overload selector(static #"setChildSpecifier:") = Void, NSScriptObjectSpecifier;
overload selector(static #"setChildren:") = Void, NSArray;
overload selector(static #"setClass:forClassName:") = Void, Id, NSString;
overload selector(static #"setClassAttributes:") = Void, NSDictionary;
overload selector(static #"setClassName:forClass:") = Void, NSString, Id;
overload selector(static #"setColor:") = Void, CGColorRef;
overload selector(static #"setColors:") = Void, NSArray;
overload selector(static #"setCompletionBlock:") = Void, UnknownType;
overload selector(static #"setCompositingFilter:") = Void, Id;
overload selector(static #"setConstraints:") = Void, NSArray;
overload selector(static #"setContainerClassDescription:") = Void, NSScriptClassDescription;
overload selector(static #"setContainerIsObjectBeingTested:") = Void, Bool;
overload selector(static #"setContainerIsRangeContainerObject:") = Void, Bool;
overload selector(static #"setContainerSpecifier:") = Void, NSScriptObjectSpecifier;
overload selector(static #"setContents:") = Void, Id;
overload selector(static #"setContentsCenter:") = Void, CGRect;
overload selector(static #"setContentsGravity:") = Void, NSString;
overload selector(static #"setContentsRect:") = Void, CGRect;
overload selector(static #"setCookie:") = Void, NSHTTPCookie;
overload selector(static #"setCookieAcceptPolicy:") = Void, UInt;
overload selector(static #"setCookies:forURL:mainDocumentURL:") = Void, NSArray, NSURL, NSURL;
overload selector(static #"setCornerRadius:") = Void, Float;
overload selector(static #"setCount:") = Void, UInt;
overload selector(static #"setCountLimit:") = Void, UInt;
overload selector(static #"setCredential:forProtectionSpace:") = Void, NSURLCredential, NSURLProtectionSpace;
overload selector(static #"setCumulative:") = Void, Bool;
overload selector(static #"setCurrencyCode:") = Void, NSString;
overload selector(static #"setCurrencyDecimalSeparator:") = Void, NSString;
overload selector(static #"setCurrencyGroupingSeparator:") = Void, NSString;
overload selector(static #"setCurrencySymbol:") = Void, NSString;
overload selector(static #"setCurrentAppleEventAndReplyEventWithSuspensionID:") = Void, NSAppleEventManagerSuspensionID;
overload selector(static #"setCurrentDirectoryPath:") = Void, NSString;
overload selector(static #"setDTD:") = Void, NSXMLDTD;
overload selector(static #"setDTDKind:") = Void, UInt;
overload selector(static #"setData:") = Void, NSData;
overload selector(static #"setDateFormat:") = Void, NSString;
overload selector(static #"setDateStyle:") = Void, UInt;
overload selector(static #"setDay:") = Void, Int;
overload selector(static #"setDecimalSeparator:") = Void, NSString;
overload selector(static #"setDefaultBehavior:") = Void, Id;
overload selector(static #"setDefaultCredential:forProtectionSpace:") = Void, NSURLCredential, NSURLProtectionSpace;
overload selector(static #"setDefaultDate:") = Void, NSDate;
overload selector(static #"setDefaultFormatterBehavior:") = Void, UInt;
overload selector(static #"setDefaultNameServerPortNumber:") = Void, UShort;
overload selector(static #"setDefaultTimeZone:") = Void, NSTimeZone;
overload selector(static #"setDefaults") = Void;
overload selector(static #"setDelegate:") = Void, Id;
overload selector(static #"setDeletesFileUponFailure:") = Void, Bool;
overload selector(static #"setDescriptionFunction:") = Void, CCodePointer[(RawPointer),(NSString)];
overload selector(static #"setDescriptor:forKeyword:") = Void, NSAppleEventDescriptor, CULong;
overload selector(static #"setDestination:allowOverwrite:") = Void, NSString, Bool;
overload selector(static #"setDictionary:") = Void, NSDictionary;
overload selector(static #"setDirectParameter:") = Void, Id;
overload selector(static #"setDisableActions:") = Void, Bool;
overload selector(static #"setDiskCapacity:") = Void, UInt;
overload selector(static #"setDocumentContentKind:") = Void, UInt;
overload selector(static #"setDoesRelativeDateFormatting:") = Void, Bool;
overload selector(static #"setDouble:forKey:") = Void, Double, NSString;
overload selector(static #"setDoubleSided:") = Void, Bool;
overload selector(static #"setDuration:") = Void, Double;
overload selector(static #"setEdgeAntialiasingMask:") = Void, UInt;
overload selector(static #"setEmissionLatitude:") = Void, Float;
overload selector(static #"setEmissionLongitude:") = Void, Float;
overload selector(static #"setEmissionRange:") = Void, Float;
overload selector(static #"setEmitterCells:") = Void, NSArray;
overload selector(static #"setEmitterDepth:") = Void, Float;
overload selector(static #"setEmitterMode:") = Void, NSString;
overload selector(static #"setEmitterPosition:") = Void, CGPoint;
overload selector(static #"setEmitterShape:") = Void, NSString;
overload selector(static #"setEmitterSize:") = Void, CGSize;
overload selector(static #"setEmitterZPosition:") = Void, Float;
overload selector(static #"setEnabled:") = Void, Bool;
overload selector(static #"setEndPoint:") = Void, CGPoint;
overload selector(static #"setEndProgress:") = Void, Float;
overload selector(static #"setEndSpecifier:") = Void, NSScriptObjectSpecifier;
overload selector(static #"setEndSubelementIdentifier:") = Void, UInt;
overload selector(static #"setEndSubelementIndex:") = Void, Int;
overload selector(static #"setEnvironment:") = Void, NSDictionary;
overload selector(static #"setEra:") = Void, Int;
overload selector(static #"setEraSymbols:") = Void, NSArray;
overload selector(static #"setEvaluationErrorNumber:") = Void, Int;
overload selector(static #"setEventHandler:andSelector:forEventClass:andEventID:") = Void, Id, SelectorHandle, CULong, CULong;
overload selector(static #"setEvictsObjectsWithDiscardedContent:") = Void, Bool;
overload selector(static #"setExponentSymbol:") = Void, NSString;
overload selector(static #"setFillColor:") = Void, CGColorRef;
overload selector(static #"setFillMode:") = Void, NSString;
overload selector(static #"setFillRule:") = Void, NSString;
overload selector(static #"setFilter:") = Void, Id;
overload selector(static #"setFilters:") = Void, NSArray;
overload selector(static #"setFireDate:") = Void, NSDate;
overload selector(static #"setFirstWeekday:") = Void, UInt;
overload selector(static #"setFloat:forKey:") = Void, Float, NSString;
overload selector(static #"setFont:") = Void, CFTypeRef;
overload selector(static #"setFontSize:") = Void, Float;
overload selector(static #"setForegroundColor:") = Void, CGColorRef;
overload selector(static #"setFormat:") = Void, NSString;
overload selector(static #"setFormatWidth:") = Void, UInt;
overload selector(static #"setFormatterBehavior:") = Void, UInt;
overload selector(static #"setFrame:") = Void, CGRect;
overload selector(static #"setFromValue:") = Void, Id;
overload selector(static #"setGeneratesCalendarDates:") = Void, Bool;
overload selector(static #"setGeneratesDecimalNumbers:") = Void, Bool;
overload selector(static #"setGeometryFlipped:") = Void, Bool;
overload selector(static #"setGreenRange:") = Void, Float;
overload selector(static #"setGreenSpeed:") = Void, Float;
overload selector(static #"setGregorianStartDate:") = Void, NSDate;
overload selector(static #"setGroupingAttributes:") = Void, NSArray;
overload selector(static #"setGroupingSeparator:") = Void, NSString;
overload selector(static #"setGroupingSize:") = Void, UInt;
overload selector(static #"setGroupsByEvent:") = Void, Bool;
overload selector(static #"setHTTPBody:") = Void, NSData;
overload selector(static #"setHTTPBodyStream:") = Void, NSInputStream;
overload selector(static #"setHTTPMethod:") = Void, NSString;
overload selector(static #"setHTTPShouldHandleCookies:") = Void, Bool;
overload selector(static #"setHasThousandSeparators:") = Void, Bool;
overload selector(static #"setHashFunction:") = Void, CCodePointer[(RawPointer,CCodePointer[(RawPointer),(UInt)]),(UInt)];
overload selector(static #"setHidden:") = Void, Bool;
overload selector(static #"setHostCacheEnabled:") = Void, Bool;
overload selector(static #"setHour:") = Void, Int;
overload selector(static #"setImage:") = Void, CIImage;
overload selector(static #"setImage:dirtyRect:") = Void, CIImage, CGRect;
overload selector(static #"setIndependentConversationQueueing:") = Void, Bool;
overload selector(static #"setIndex:") = Void, Int;
overload selector(static #"setInsertionClassDescription:") = Void, NSScriptClassDescription;
overload selector(static #"setInstanceAlphaOffset:") = Void, Float;
overload selector(static #"setInstanceBlueOffset:") = Void, Float;
overload selector(static #"setInstanceColor:") = Void, CGColorRef;
overload selector(static #"setInstanceCount:") = Void, Int;
overload selector(static #"setInstanceDelay:") = Void, Double;
overload selector(static #"setInstanceGreenOffset:") = Void, Float;
overload selector(static #"setInstanceRedOffset:") = Void, Float;
overload selector(static #"setInstanceTransform:") = Void, CATransform3D;
overload selector(static #"setInteger:forKey:") = Void, Int, NSString;
overload selector(static #"setInternationalCurrencySymbol:") = Void, NSString;
overload selector(static #"setIsEqualFunction:") = Void, CCodePointer[(RawPointer,RawPointer,CCodePointer[(RawPointer),(UInt)]),(CChar)];
overload selector(static #"setKey:") = Void, NSString;
overload selector(static #"setKeyPath:") = Void, NSString;
overload selector(static #"setKeyTimes:") = Void, NSArray;
overload selector(static #"setKeys:triggerChangeNotificationsForDependentKey:") = Void, NSArray, NSString;
overload selector(static #"setLaunchPath:") = Void, NSString;
overload selector(static #"setLayer:") = Void, CALayer;
overload selector(static #"setLayoutManager:") = Void, Id;
overload selector(static #"setLength:") = Void, UInt;
overload selector(static #"setLenient:") = Void, Bool;
overload selector(static #"setLevelsOfDetail:") = Void, CULong;
overload selector(static #"setLevelsOfDetailBias:") = Void, CULong;
overload selector(static #"setLevelsOfUndo:") = Void, UInt;
overload selector(static #"setLifetime:") = Void, Float;
overload selector(static #"setLifetimeRange:") = Void, Float;
overload selector(static #"setLineCap:") = Void, NSString;
overload selector(static #"setLineDashPattern:") = Void, NSArray;
overload selector(static #"setLineDashPhase:") = Void, Float;
overload selector(static #"setLineJoin:") = Void, NSString;
overload selector(static #"setLineWidth:") = Void, Float;
overload selector(static #"setLocale:") = Void, NSLocale;
overload selector(static #"setLocalizesFormat:") = Void, Bool;
overload selector(static #"setLocations:") = Void, NSArray;
overload selector(static #"setLongEraSymbols:") = Void, NSArray;
overload selector(static #"setMIMEType:") = Void, NSString;
overload selector(static #"setMagnificationFilter:") = Void, NSString;
overload selector(static #"setMainDocumentURL:") = Void, NSURL;
overload selector(static #"setMask:") = Void, CALayer;
overload selector(static #"setMasksToBounds:") = Void, Bool;
overload selector(static #"setMaxConcurrentOperationCount:") = Void, Int;
overload selector(static #"setMaximum:") = Void, NSNumber;
overload selector(static #"setMaximumFractionDigits:") = Void, UInt;
overload selector(static #"setMaximumIntegerDigits:") = Void, UInt;
overload selector(static #"setMaximumSignificantDigits:") = Void, UInt;
overload selector(static #"setMemoryCapacity:") = Void, UInt;
overload selector(static #"setMinificationFilter:") = Void, NSString;
overload selector(static #"setMinificationFilterBias:") = Void, Float;
overload selector(static #"setMinimum:") = Void, NSNumber;
overload selector(static #"setMinimumDaysInFirstWeek:") = Void, UInt;
overload selector(static #"setMinimumFractionDigits:") = Void, UInt;
overload selector(static #"setMinimumIntegerDigits:") = Void, UInt;
overload selector(static #"setMinimumSignificantDigits:") = Void, UInt;
overload selector(static #"setMinusSign:") = Void, NSString;
overload selector(static #"setMinute:") = Void, Int;
overload selector(static #"setMiterLimit:") = Void, Float;
overload selector(static #"setMonth:") = Void, Int;
overload selector(static #"setMonthSymbols:") = Void, NSArray;
overload selector(static #"setMsgid:") = Void, UInt;
overload selector(static #"setMultiplier:") = Void, NSNumber;
overload selector(static #"setName:") = Void, NSString;
overload selector(static #"setNamespaces:") = Void, NSArray;
overload selector(static #"setNeedsDisplay") = Void;
overload selector(static #"setNeedsDisplayInRect:") = Void, CGRect;
overload selector(static #"setNeedsDisplayOnBoundsChange:") = Void, Bool;
overload selector(static #"setNeedsLayout") = Void;
overload selector(static #"setNegativeFormat:") = Void, NSString;
overload selector(static #"setNegativeInfinitySymbol:") = Void, NSString;
overload selector(static #"setNegativePrefix:") = Void, NSString;
overload selector(static #"setNegativeSuffix:") = Void, NSString;
overload selector(static #"setNilSymbol:") = Void, NSString;
overload selector(static #"setNilValueForKey:") = Void, NSString;
overload selector(static #"setNotANumberSymbol:") = Void, NSString;
overload selector(static #"setNotationName:") = Void, NSString;
overload selector(static #"setNotificationBatchingInterval:") = Void, Double;
overload selector(static #"setNumberStyle:") = Void, UInt;
overload selector(static #"setObject:forKey:") = Void, Id, Id;
overload selector(static #"setObject:forKey:cost:") = Void, Id, Id, UInt;
overload selector(static #"setObjectBeingTested:") = Void, Id;
overload selector(static #"setObjectValue:") = Void, Id;
overload selector(static #"setObjectZone:") = Void, Pointer[NSZone];
overload selector(static #"setObservationInfo:") = Void, RawPointer;
overload selector(static #"setOpacity:") = Void, Float;
overload selector(static #"setOpaque:") = Void, Bool;
overload selector(static #"setOutputFormat:") = Void, UInt;
overload selector(static #"setPMSymbol:") = Void, NSString;
overload selector(static #"setPaddingCharacter:") = Void, NSString;
overload selector(static #"setPaddingPosition:") = Void, UInt;
overload selector(static #"setParamDescriptor:forKeyword:") = Void, NSAppleEventDescriptor, CULong;
overload selector(static #"setPartialStringValidationEnabled:") = Void, Bool;
overload selector(static #"setPath:") = Void, CGPathRef;
overload selector(static #"setPerMillSymbol:") = Void, NSString;
overload selector(static #"setPercentSymbol:") = Void, NSString;
overload selector(static #"setPersistentDomain:forName:") = Void, NSDictionary, NSString;
overload selector(static #"setPlusSign:") = Void, NSString;
overload selector(static #"setPosition:") = Void, CGPoint;
overload selector(static #"setPositiveFormat:") = Void, NSString;
overload selector(static #"setPositiveInfinitySymbol:") = Void, NSString;
overload selector(static #"setPositivePrefix:") = Void, NSString;
overload selector(static #"setPositiveSuffix:") = Void, NSString;
overload selector(static #"setPredicate:") = Void, NSPredicate;
overload selector(static #"setPreservesDepth:") = Void, Bool;
overload selector(static #"setProcessName:") = Void, NSString;
overload selector(static #"setProperty:forKey:") = Bool, Id, NSString;
overload selector(static #"setProperty:forKey:inRequest:") = Void, Id, NSString, NSMutableURLRequest;
overload selector(static #"setProtocolForProxy:") = Void, Id;
overload selector(static #"setProtocolSpecificInformation:") = Void, NSString;
overload selector(static #"setPublicID:") = Void, NSString;
overload selector(static #"setQuarter:") = Void, Int;
overload selector(static #"setQuarterSymbols:") = Void, NSArray;
overload selector(static #"setQueuePriority:") = Void, Int;
overload selector(static #"setROISelector:") = Void, SelectorHandle;
overload selector(static #"setRangeContainerObject:") = Void, Id;
overload selector(static #"setReceiversSpecifier:") = Void, NSScriptObjectSpecifier;
overload selector(static #"setRedRange:") = Void, Float;
overload selector(static #"setRedSpeed:") = Void, Float;
overload selector(static #"setRelativePosition:") = Void, UInt;
overload selector(static #"setRelinquishFunction:") = Void, CCodePointer[(RawPointer,CCodePointer[(RawPointer),(UInt)]),()];
overload selector(static #"setRemovedOnCompletion:") = Void, Bool;
overload selector(static #"setRenderMode:") = Void, NSString;
overload selector(static #"setRepeatCount:") = Void, Float;
overload selector(static #"setRepeatDuration:") = Void, Double;
overload selector(static #"setReplyTimeout:") = Void, Double;
overload selector(static #"setRepresentation") = NSSet;
overload selector(static #"setRequestTimeout:") = Void, Double;
overload selector(static #"setResourceData:") = Bool, NSData;
overload selector(static #"setResourceValue:forKey:error:") = Bool, Id, NSString, Pointer[NSError];
overload selector(static #"setResourceValues:error:") = Bool, NSDictionary, Pointer[NSError];
overload selector(static #"setReturnValue:") = Void, RawPointer;
overload selector(static #"setRootElement:") = Void, NSXMLNode;
overload selector(static #"setRootObject:") = Void, Id;
overload selector(static #"setRotationMode:") = Void, NSString;
overload selector(static #"setRoundingBehavior:") = Void, NSDecimalNumberHandler;
overload selector(static #"setRoundingIncrement:") = Void, NSNumber;
overload selector(static #"setRoundingMode:") = Void, UInt;
overload selector(static #"setRunLoopModes:") = Void, NSArray;
overload selector(static #"setScale:") = Void, Float;
overload selector(static #"setScaleRange:") = Void, Float;
overload selector(static #"setScaleSpeed:") = Void, Float;
overload selector(static #"setScanLocation:") = Void, UInt;
overload selector(static #"setScriptErrorExpectedTypeDescriptor:") = Void, NSAppleEventDescriptor;
overload selector(static #"setScriptErrorNumber:") = Void, Int;
overload selector(static #"setScriptErrorOffendingObjectDescriptor:") = Void, NSAppleEventDescriptor;
overload selector(static #"setScriptErrorString:") = Void, NSString;
overload selector(static #"setScriptingProperties:") = Void, NSDictionary;
overload selector(static #"setScrollMode:") = Void, NSString;
overload selector(static #"setSearchScopes:") = Void, NSArray;
overload selector(static #"setSecond:") = Void, Int;
overload selector(static #"setSecondaryGroupingSize:") = Void, UInt;
overload selector(static #"setSeed:") = Void, UInt;
overload selector(static #"setSelector:") = Void, SelectorHandle;
overload selector(static #"setSet:") = Void, NSSet;
overload selector(static #"setShadowColor:") = Void, CGColorRef;
overload selector(static #"setShadowOffset:") = Void, CGSize;
overload selector(static #"setShadowOpacity:") = Void, Float;
overload selector(static #"setShadowRadius:") = Void, Float;
overload selector(static #"setSharedScriptSuiteRegistry:") = Void, NSScriptSuiteRegistry;
overload selector(static #"setSharedURLCache:") = Void, NSURLCache;
overload selector(static #"setShortMonthSymbols:") = Void, NSArray;
overload selector(static #"setShortQuarterSymbols:") = Void, NSArray;
overload selector(static #"setShortStandaloneMonthSymbols:") = Void, NSArray;
overload selector(static #"setShortStandaloneQuarterSymbols:") = Void, NSArray;
overload selector(static #"setShortStandaloneWeekdaySymbols:") = Void, NSArray;
overload selector(static #"setShortWeekdaySymbols:") = Void, NSArray;
overload selector(static #"setShouldProcessNamespaces:") = Void, Bool;
overload selector(static #"setShouldReportNamespacePrefixes:") = Void, Bool;
overload selector(static #"setShouldResolveExternalEntities:") = Void, Bool;
overload selector(static #"setSizeFunction:") = Void, CCodePointer[(RawPointer),(UInt)];
overload selector(static #"setSortDescriptors:") = Void, NSArray;
overload selector(static #"setSpeed:") = Void, Float;
overload selector(static #"setSpin:") = Void, Float;
overload selector(static #"setSpinRange:") = Void, Float;
overload selector(static #"setStackSize:") = Void, UInt;
overload selector(static #"setStandalone:") = Void, Bool;
overload selector(static #"setStandaloneMonthSymbols:") = Void, NSArray;
overload selector(static #"setStandaloneQuarterSymbols:") = Void, NSArray;
overload selector(static #"setStandaloneWeekdaySymbols:") = Void, NSArray;
overload selector(static #"setStandardError:") = Void, Id;
overload selector(static #"setStandardInput:") = Void, Id;
overload selector(static #"setStandardOutput:") = Void, Id;
overload selector(static #"setStartPoint:") = Void, CGPoint;
overload selector(static #"setStartProgress:") = Void, Float;
overload selector(static #"setStartSpecifier:") = Void, NSScriptObjectSpecifier;
overload selector(static #"setStartSubelementIdentifier:") = Void, UInt;
overload selector(static #"setStartSubelementIndex:") = Void, Int;
overload selector(static #"setString:") = Void, NSString;
overload selector(static #"setStringValue:") = Void, NSString;
overload selector(static #"setStringValue:resolvingEntities:") = Void, NSString, Bool;
overload selector(static #"setStrokeColor:") = Void, CGColorRef;
overload selector(static #"setStyle:") = Void, NSDictionary;
overload selector(static #"setSublayerTransform:") = Void, CATransform3D;
overload selector(static #"setSublayers:") = Void, NSArray;
overload selector(static #"setSubtype:") = Void, NSString;
overload selector(static #"setSuspended:") = Void, Bool;
overload selector(static #"setSystemID:") = Void, NSString;
overload selector(static #"setTXTRecordData:") = Bool, NSData;
overload selector(static #"setTarget:") = Void, Id;
overload selector(static #"setTest:") = Void, NSScriptWhoseTest;
overload selector(static #"setTextAttributesForNegativeInfinity:") = Void, NSDictionary;
overload selector(static #"setTextAttributesForNegativeValues:") = Void, NSDictionary;
overload selector(static #"setTextAttributesForNil:") = Void, NSDictionary;
overload selector(static #"setTextAttributesForNotANumber:") = Void, NSDictionary;
overload selector(static #"setTextAttributesForPositiveInfinity:") = Void, NSDictionary;
overload selector(static #"setTextAttributesForPositiveValues:") = Void, NSDictionary;
overload selector(static #"setTextAttributesForZero:") = Void, NSDictionary;
overload selector(static #"setThousandSeparator:") = Void, NSString;
overload selector(static #"setThreadPriority:") = Bool, Double;
overload selector(static #"setTileSize:") = Void, CGSize;
overload selector(static #"setTimeOffset:") = Void, Double;
overload selector(static #"setTimeStyle:") = Void, UInt;
overload selector(static #"setTimeZone:") = Void, NSTimeZone;
overload selector(static #"setTimeoutInterval:") = Void, Double;
overload selector(static #"setTimingFunction:") = Void, CAMediaTimingFunction;
overload selector(static #"setTimingFunctions:") = Void, NSArray;
overload selector(static #"setToValue:") = Void, Id;
overload selector(static #"setTopLevelObject:") = Void, Id;
overload selector(static #"setTotalCostLimit:") = Void, UInt;
overload selector(static #"setTransform:") = Void, CATransform3D;
overload selector(static #"setTransformStruct:") = Void, NSAffineTransformStruct;
overload selector(static #"setTruncationMode:") = Void, NSString;
overload selector(static #"setTwoDigitStartDate:") = Void, NSDate;
overload selector(static #"setType:") = Void, NSString;
overload selector(static #"setURI:") = Void, NSString;
overload selector(static #"setURL:") = Void, NSURL;
overload selector(static #"setURL:forKey:") = Void, NSURL, NSString;
overload selector(static #"setUniqueID:") = Void, Id;
overload selector(static #"setUsesGroupingSeparator:") = Void, Bool;
overload selector(static #"setUsesSignificantDigits:") = Void, Bool;
overload selector(static #"setUsesStrongWriteBarrier:") = Void, Bool;
overload selector(static #"setUsesWeakReadAndWriteBarriers:") = Void, Bool;
overload selector(static #"setValue:forHTTPHeaderField:") = Void, NSString, NSString;
overload selector(static #"setValue:forKey:") = Void, Id, NSString;
overload selector(static #"setValue:forKeyPath:") = Void, Id, NSString;
overload selector(static #"setValue:forUndefinedKey:") = Void, Id, NSString;
overload selector(static #"setValueFunction:") = Void, CAValueFunction;
overload selector(static #"setValueListAttributes:") = Void, NSArray;
overload selector(static #"setValueTransformer:forName:") = Void, NSValueTransformer, NSString;
overload selector(static #"setValues:") = Void, NSArray;
overload selector(static #"setValuesForKeysWithDictionary:") = Void, NSDictionary;
overload selector(static #"setVelocity:") = Void, Float;
overload selector(static #"setVelocityRange:") = Void, Float;
overload selector(static #"setVersion:") = Void, Int;
overload selector(static #"setVeryShortMonthSymbols:") = Void, NSArray;
overload selector(static #"setVeryShortStandaloneMonthSymbols:") = Void, NSArray;
overload selector(static #"setVeryShortStandaloneWeekdaySymbols:") = Void, NSArray;
overload selector(static #"setVeryShortWeekdaySymbols:") = Void, NSArray;
overload selector(static #"setVolatileDomain:forName:") = Void, NSDictionary, NSString;
overload selector(static #"setWeek:") = Void, Int;
overload selector(static #"setWeekday:") = Void, Int;
overload selector(static #"setWeekdayOrdinal:") = Void, Int;
overload selector(static #"setWeekdaySymbols:") = Void, NSArray;
overload selector(static #"setWithArray:") = Id, NSArray;
overload selector(static #"setWithCapacity:") = Id, UInt;
overload selector(static #"setWithObject:") = Id, Id;
overload varargSelector(static #"setWithObjects:") = Id, Id;
overload selector(static #"setWithObjects:count:") = Id, Pointer[Id], UInt;
overload selector(static #"setWithSet:") = Id, NSSet;
overload selector(static #"setWrapped:") = Void, Bool;
overload selector(static #"setXAcceleration:") = Void, Float;
overload selector(static #"setYAcceleration:") = Void, Float;
overload selector(static #"setYear:") = Void, Int;
overload selector(static #"setZAcceleration:") = Void, Float;
overload selector(static #"setZPosition:") = Void, Float;
overload selector(static #"setZeroSymbol:") = Void, NSString;
overload selector(static #"shadowColor") = CGColorRef;
overload selector(static #"shadowOffset") = CGSize;
overload selector(static #"shadowOpacity") = Float;
overload selector(static #"shadowRadius") = Float;
overload selector(static #"shapeWithRect:") = Id, CGRect;
overload selector(static #"sharedAppleEventManager") = NSAppleEventManager;
overload selector(static #"sharedCoercionHandler") = NSScriptCoercionHandler;
overload selector(static #"sharedCredentialStorage") = NSURLCredentialStorage;
overload selector(static #"sharedFrameworksPath") = NSString;
overload selector(static #"sharedFrameworksURL") = NSURL;
overload selector(static #"sharedHTTPCookieStorage") = NSHTTPCookieStorage;
overload selector(static #"sharedInstance") = Id;
overload selector(static #"sharedScriptExecutionContext") = NSScriptExecutionContext;
overload selector(static #"sharedScriptSuiteRegistry") = NSScriptSuiteRegistry;
overload selector(static #"sharedSupportPath") = NSString;
overload selector(static #"sharedSupportURL") = NSURL;
overload selector(static #"sharedURLCache") = NSURLCache;
overload selector(static #"shiftIndexesStartingAtIndex:by:") = Void, UInt, Int;
overload selector(static #"shortMonthSymbols") = NSArray;
overload selector(static #"shortQuarterSymbols") = NSArray;
overload selector(static #"shortStandaloneMonthSymbols") = NSArray;
overload selector(static #"shortStandaloneQuarterSymbols") = NSArray;
overload selector(static #"shortStandaloneWeekdaySymbols") = NSArray;
overload selector(static #"shortValue") = Short;
overload selector(static #"shortWeekdaySymbols") = NSArray;
overload selector(static #"shouldArchiveValueForKey:") = Bool, NSString;
overload selector(static #"shouldProcessNamespaces") = Bool;
overload selector(static #"shouldReportNamespacePrefixes") = Bool;
overload selector(static #"shouldResolveExternalEntities") = Bool;
overload selector(static #"signal") = Void;
overload selector(static #"signatureWithObjCTypes:") = NSMethodSignature, Pointer[CChar];
overload selector(static #"sizeFunction") = CCodePointer[(RawPointer),(UInt)];
overload selector(static #"sizeValue") = NSSize;
overload selector(static #"skipDescendants") = Void;
overload selector(static #"skipDescendents") = Void;
overload selector(static #"sleepForTimeInterval:") = Void, Double;
overload selector(static #"sleepUntilDate:") = Void, NSDate;
overload selector(static #"smallestEncoding") = UInt;
overload selector(static #"socket") = Int;
overload selector(static #"socketType") = Int;
overload selector(static #"sortDescriptorWithKey:ascending:") = Id, NSString, Bool;
overload selector(static #"sortDescriptorWithKey:ascending:comparator:") = Id, NSString, Bool, NSComparator;
overload selector(static #"sortDescriptorWithKey:ascending:selector:") = Id, NSString, Bool, SelectorHandle;
overload selector(static #"sortDescriptors") = NSArray;
overload selector(static #"sortUsingComparator:") = Void, NSComparator;
overload selector(static #"sortUsingDescriptors:") = Void, NSArray;
overload selector(static #"sortUsingFunction:context:") = Void, CCodePointer[(Id,Id,RawPointer),(Int)], RawPointer;
overload selector(static #"sortUsingSelector:") = Void, SelectorHandle;
overload selector(static #"sortWithOptions:usingComparator:") = Void, UInt, NSComparator;
overload selector(static #"sortedArrayHint") = NSData;
overload selector(static #"sortedArrayUsingComparator:") = NSArray, NSComparator;
overload selector(static #"sortedArrayUsingDescriptors:") = NSArray, NSArray;
overload selector(static #"sortedArrayUsingFunction:context:") = NSArray, CCodePointer[(Id,Id,RawPointer),(Int)], RawPointer;
overload selector(static #"sortedArrayUsingFunction:context:hint:") = NSArray, CCodePointer[(Id,Id,RawPointer),(Int)], RawPointer, NSData;
overload selector(static #"sortedArrayUsingSelector:") = NSArray, SelectorHandle;
overload selector(static #"sortedArrayWithOptions:usingComparator:") = NSArray, UInt, NSComparator;
overload selector(static #"source") = NSString;
overload selector(static #"sourceAttribute") = Int;
overload selector(static #"sourceName") = NSString;
overload selector(static #"speed") = Float;
overload selector(static #"spellCheckingResultWithRange:") = NSTextCheckingResult, NSRange;
overload selector(static #"spellServer:checkGrammarInString:language:details:") = NSRange, NSSpellServer, NSString, NSString, Pointer[NSArray];
overload selector(static #"spellServer:checkString:offset:types:options:orthography:wordCount:") = NSArray, NSSpellServer, NSString, UInt, UInt64, NSDictionary, NSOrthography, Pointer[Int];
overload selector(static #"spellServer:didForgetWord:inLanguage:") = Void, NSSpellServer, NSString, NSString;
overload selector(static #"spellServer:didLearnWord:inLanguage:") = Void, NSSpellServer, NSString, NSString;
overload selector(static #"spellServer:findMisspelledWordInString:language:wordCount:countOnly:") = NSRange, NSSpellServer, NSString, NSString, Pointer[Int], Bool;
overload selector(static #"spellServer:suggestCompletionsForPartialWordRange:inString:language:") = NSArray, NSSpellServer, NSRange, NSString, NSString;
overload selector(static #"spellServer:suggestGuessesForWord:inLanguage:") = NSArray, NSSpellServer, NSString, NSString;
overload selector(static #"spin") = Float;
overload selector(static #"spinRange") = Float;
overload selector(static #"stackSize") = UInt;
overload selector(static #"standaloneMonthSymbols") = NSArray;
overload selector(static #"standaloneQuarterSymbols") = NSArray;
overload selector(static #"standaloneWeekdaySymbols") = NSArray;
overload selector(static #"standardError") = Id;
overload selector(static #"standardInput") = Id;
overload selector(static #"standardOutput") = Id;
overload selector(static #"standardUserDefaults") = NSUserDefaults;
overload selector(static #"standardizedURL") = NSURL;
overload selector(static #"start") = Void;
overload selector(static #"startLoading") = Void;
overload selector(static #"startMonitoring") = Void;
overload selector(static #"startPoint") = CGPoint;
overload selector(static #"startProgress") = Float;
overload selector(static #"startQuery") = Bool;
overload selector(static #"startSpecifier") = NSScriptObjectSpecifier;
overload selector(static #"startSubelementIdentifier") = UInt;
overload selector(static #"startSubelementIndex") = Int;
overload selector(static #"statistics") = NSDictionary;
overload selector(static #"status") = UInt;
overload selector(static #"statusCode") = Int;
overload selector(static #"stop") = Void;
overload selector(static #"stopLoading") = Void;
overload selector(static #"stopMonitoring") = Void;
overload selector(static #"stopQuery") = Void;
overload selector(static #"storagePolicy") = UInt;
overload selector(static #"storeCachedResponse:forRequest:") = Void, NSCachedURLResponse, NSURLRequest;
overload selector(static #"storedValueForKey:") = Id, NSString;
overload selector(static #"stream:handleEvent:") = Void, NSStream, UInt;
overload selector(static #"streamError") = NSError;
overload selector(static #"streamStatus") = UInt;
overload selector(static #"string") = Id;
overload selector(static #"stringArrayForKey:") = NSArray, NSString;
overload selector(static #"stringByAbbreviatingWithTildeInPath") = NSString;
overload selector(static #"stringByAddingPercentEscapesUsingEncoding:") = NSString, UInt;
overload varargSelector(static #"stringByAppendingFormat:") = NSString, NSString;
overload selector(static #"stringByAppendingPathComponent:") = NSString, NSString;
overload selector(static #"stringByAppendingPathExtension:") = NSString, NSString;
overload selector(static #"stringByAppendingString:") = NSString, NSString;
overload selector(static #"stringByDeletingLastPathComponent") = NSString;
overload selector(static #"stringByDeletingPathExtension") = NSString;
overload selector(static #"stringByExpandingTildeInPath") = NSString;
overload selector(static #"stringByFoldingWithOptions:locale:") = NSString, UInt, NSLocale;
overload selector(static #"stringByPaddingToLength:withString:startingAtIndex:") = NSString, UInt, NSString, UInt;
overload selector(static #"stringByReplacingCharactersInRange:withString:") = NSString, NSRange, NSString;
overload selector(static #"stringByReplacingOccurrencesOfString:withString:") = NSString, NSString, NSString;
overload selector(static #"stringByReplacingOccurrencesOfString:withString:options:range:") = NSString, NSString, NSString, UInt, NSRange;
overload selector(static #"stringByReplacingPercentEscapesUsingEncoding:") = NSString, UInt;
overload selector(static #"stringByResolvingSymlinksInPath") = NSString;
overload selector(static #"stringByStandardizingPath") = NSString;
overload selector(static #"stringByTrimmingCharactersInSet:") = NSString, NSCharacterSet;
overload selector(static #"stringForKey:") = NSString, NSString;
overload selector(static #"stringForObjectValue:") = NSString, Id;
overload selector(static #"stringFromDate:") = NSString, NSDate;
overload selector(static #"stringFromNumber:") = NSString, NSNumber;
overload selector(static #"stringRepresentation") = NSString;
overload selector(static #"stringValue") = NSString;
overload selector(static #"stringWithCString:") = Id, Pointer[CChar];
overload selector(static #"stringWithCString:encoding:") = Id, Pointer[CChar], UInt;
overload selector(static #"stringWithCString:length:") = Id, Pointer[CChar], UInt;
overload selector(static #"stringWithCapacity:") = Id, UInt;
overload selector(static #"stringWithCharacters:length:") = Id, Pointer[UShort], UInt;
overload selector(static #"stringWithContentsOfFile:") = Id, NSString;
overload selector(static #"stringWithContentsOfFile:encoding:error:") = Id, NSString, UInt, Pointer[NSError];
overload selector(static #"stringWithContentsOfFile:usedEncoding:error:") = Id, NSString, Pointer[UInt], Pointer[NSError];
overload selector(static #"stringWithContentsOfURL:") = Id, NSURL;
overload selector(static #"stringWithContentsOfURL:encoding:error:") = Id, NSURL, UInt, Pointer[NSError];
overload selector(static #"stringWithContentsOfURL:usedEncoding:error:") = Id, NSURL, Pointer[UInt], Pointer[NSError];
overload selector(static #"stringWithFileSystemRepresentation:length:") = NSString, Pointer[CChar], UInt;
overload varargSelector(static #"stringWithFormat:") = Id, NSString;
overload selector(static #"stringWithString:") = Id, NSString;
overload selector(static #"stringWithUTF8String:") = Id, Pointer[CChar];
overload selector(static #"stringsByAppendingPaths:") = NSArray, NSArray;
overload selector(static #"strokeColor") = CGColorRef;
overload selector(static #"style") = NSDictionary;
overload selector(static #"subarrayWithRange:") = NSArray, NSRange;
overload selector(static #"subdataWithRange:") = NSData, NSRange;
overload selector(static #"subgroups") = NSArray;
overload selector(static #"sublayerTransform") = CATransform3D;
overload selector(static #"sublayers") = NSArray;
overload selector(static #"subpathsAtPath:") = NSArray, NSString;
overload selector(static #"subpathsOfDirectoryAtPath:error:") = NSArray, NSString, Pointer[NSError];
overload selector(static #"subpredicates") = NSArray;
overload selector(static #"substringFromIndex:") = NSString, UInt;
overload selector(static #"substringToIndex:") = NSString, UInt;
overload selector(static #"substringWithRange:") = NSString, NSRange;
overload selector(static #"subtype") = NSString;
overload selector(static #"suggestedFilename") = NSString;
overload selector(static #"suiteForAppleEventCode:") = NSString, CULong;
overload selector(static #"suiteName") = NSString;
overload selector(static #"suiteNames") = NSArray;
overload selector(static #"superclass") = Id;
overload selector(static #"superclassDescription") = NSScriptClassDescription;
overload selector(static #"superlayer") = CALayer;
overload selector(static #"supportsCommand:") = Bool, NSScriptCommandDescription;
overload selector(static #"suspend") = Bool;
overload selector(static #"suspendCurrentAppleEvent") = NSAppleEventManagerSuspensionID;
overload selector(static #"suspendExecution") = Void;
overload selector(static #"suspended") = Bool;
overload selector(static #"symbolCharacterSet") = Id;
overload selector(static #"synchronize") = Bool;
overload selector(static #"synchronizeFile") = Void;
overload selector(static #"systemDefaultPortNameServer") = NSPortNameServer;
overload selector(static #"systemID") = NSString;
overload selector(static #"systemLocale") = Id;
overload selector(static #"systemTimeZone") = NSTimeZone;
overload selector(static #"systemUptime") = Double;
overload selector(static #"systemVersion") = UInt;
overload selector(static #"takeStoredValue:forKey:") = Void, Id, NSString;
overload selector(static #"takeValue:forKey:") = Void, Id, NSString;
overload selector(static #"takeValue:forKeyPath:") = Void, Id, NSString;
overload selector(static #"takeValuesFromDictionary:") = Void, NSDictionary;
overload selector(static #"target") = Id;
overload selector(static #"terminate") = Void;
overload selector(static #"terminationReason") = Int;
overload selector(static #"terminationStatus") = Int;
overload selector(static #"test") = NSScriptWhoseTest;
overload selector(static #"textAttributesForNegativeInfinity") = NSDictionary;
overload selector(static #"textAttributesForNegativeValues") = NSDictionary;
overload selector(static #"textAttributesForNil") = NSDictionary;
overload selector(static #"textAttributesForNotANumber") = NSDictionary;
overload selector(static #"textAttributesForPositiveInfinity") = NSDictionary;
overload selector(static #"textAttributesForPositiveValues") = NSDictionary;
overload selector(static #"textAttributesForZero") = NSDictionary;
overload selector(static #"textEncodingName") = NSString;
overload selector(static #"textWithStringValue:") = Id, NSString;
overload selector(static #"thousandSeparator") = NSString;
overload selector(static #"threadDictionary") = NSMutableDictionary;
overload selector(static #"threadPriority") = Double;
overload selector(static #"tileSize") = CGSize;
overload selector(static #"timeInterval") = Double;
overload selector(static #"timeIntervalSince1970") = Double;
overload selector(static #"timeIntervalSinceDate:") = Double, NSDate;
overload selector(static #"timeIntervalSinceNow") = Double;
overload selector(static #"timeIntervalSinceReferenceDate") = Double;
overload selector(static #"timeOffset") = Double;
overload selector(static #"timeStyle") = UInt;
overload selector(static #"timeZone") = NSTimeZone;
overload selector(static #"timeZoneDataVersion") = NSString;
overload selector(static #"timeZoneForSecondsFromGMT:") = Id, Int;
overload selector(static #"timeZoneWithAbbreviation:") = Id, NSString;
overload selector(static #"timeZoneWithName:") = Id, NSString;
overload selector(static #"timeZoneWithName:data:") = Id, NSString, NSData;
overload selector(static #"timeoutInterval") = Double;
overload selector(static #"timerWithTimeInterval:invocation:repeats:") = NSTimer, Double, NSInvocation, Bool;
overload selector(static #"timerWithTimeInterval:target:selector:userInfo:repeats:") = NSTimer, Double, Id, SelectorHandle, Id, Bool;
overload selector(static #"timingFunction") = CAMediaTimingFunction;
overload selector(static #"timingFunctions") = NSArray;
overload selector(static #"toManyRelationshipKeys") = NSArray;
overload selector(static #"toOneRelationshipKeys") = NSArray;
overload selector(static #"toValue") = Id;
overload selector(static #"topLevelObject") = Id;
overload selector(static #"totalCostLimit") = UInt;
overload selector(static #"transactionID") = CLong;
overload selector(static #"transform") = NSAffineTransform;
overload selector(static #"transformBy:interior:") = CIFilterShape, CGAffineTransform, Bool;
overload selector(static #"transformPoint:") = NSPoint, NSPoint;
overload selector(static #"transformSize:") = NSSize, NSSize;
overload selector(static #"transformStruct") = NSAffineTransformStruct;
overload selector(static #"transformedValue:") = Id, Id;
overload selector(static #"transformedValueClass") = Id;
overload selector(static #"translateXBy:yBy:") = Void, Float, Float;
overload selector(static #"truncateFileAtOffset:") = Void, UInt64;
overload selector(static #"truncationMode") = NSString;
overload selector(static #"tryLock") = Bool;
overload selector(static #"tryLockWhenCondition:") = Bool, Int;
overload selector(static #"twoDigitStartDate") = NSDate;
overload selector(static #"type") = NSString;
overload selector(static #"typeCodeValue") = CULong;
overload selector(static #"typeForArgumentWithName:") = NSString, NSString;
overload selector(static #"typeForKey:") = NSString, NSString;
overload selector(static #"unableToSetNilForKey:") = Void, NSString;
overload selector(static #"unarchiveObjectWithData:") = Id, NSData;
overload selector(static #"unarchiveObjectWithFile:") = Id, NSString;
overload selector(static #"unarchiver:cannotDecodeObjectOfClassName:originalClasses:") = Id, NSKeyedUnarchiver, NSString, NSArray;
overload selector(static #"unarchiver:didDecodeObject:") = Id, NSKeyedUnarchiver, Id;
overload selector(static #"unarchiver:willReplaceObject:withObject:") = Void, NSKeyedUnarchiver, Id, Id;
overload selector(static #"unarchiverDidFinish:") = Void, NSKeyedUnarchiver;
overload selector(static #"unarchiverWillFinish:") = Void, NSKeyedUnarchiver;
overload selector(static #"undo") = Void;
overload selector(static #"undoActionName") = NSString;
overload selector(static #"undoMenuItemTitle") = NSString;
overload selector(static #"undoMenuTitleForUndoActionName:") = NSString, NSString;
overload selector(static #"undoNestedGroup") = Void;
overload selector(static #"unionHashTable:") = Void, NSHashTable;
overload selector(static #"unionSet:") = Void, NSSet;
overload selector(static #"unionWith:") = CIFilterShape, CIFilterShape;
overload selector(static #"unionWithRect:") = CIFilterShape, CGRect;
overload selector(static #"uniqueID") = Id;
overload selector(static #"unload") = Bool;
overload selector(static #"unlock") = Void;
overload selector(static #"unlockWithCondition:") = Void, Int;
overload selector(static #"unregisterClass:") = Void, Id;
overload selector(static #"unscheduleFromRunLoop:forMode:") = Void, NSRunLoop, NSString;
overload selector(static #"unsignedCharValue") = CUChar;
overload selector(static #"unsignedIntValue") = UInt;
overload selector(static #"unsignedIntegerValue") = UInt;
overload selector(static #"unsignedLongLongValue") = UInt64;
overload selector(static #"unsignedLongValue") = CULong;
overload selector(static #"unsignedShortValue") = UShort;
overload selector(static #"updateBounds") = CGRect;
overload selector(static #"uppercaseLetterCharacterSet") = Id;
overload selector(static #"uppercaseString") = NSString;
overload selector(static #"url") = NSURL;
overload selector(static #"useCredential:forAuthenticationChallenge:") = Void, NSURLCredential, NSURLAuthenticationChallenge;
overload selector(static #"useStoredAccessor") = Bool;
overload selector(static #"user") = NSString;
overload selector(static #"userInfo") = Id;
overload selector(static #"usesGroupingSeparator") = Bool;
overload selector(static #"usesSignificantDigits") = Bool;
overload selector(static #"usesStrongWriteBarrier") = Bool;
overload selector(static #"usesWeakReadAndWriteBarriers") = Bool;
overload selector(static #"validateAndReturnError:") = Bool, Pointer[NSError];
overload selector(static #"validateValue:forKey:error:") = Bool, Pointer[Id], NSString, Pointer[NSError];
overload selector(static #"validateValue:forKeyPath:error:") = Bool, Pointer[Id], NSString, Pointer[NSError];
overload selector(static #"value") = Id;
overload selector(static #"value:withObjCType:") = NSValue, RawPointer, Pointer[CChar];
overload selector(static #"valueAtIndex:") = Float, CULong;
overload selector(static #"valueAtIndex:inPropertyWithKey:") = Id, UInt, NSString;
overload selector(static #"valueForAttribute:") = Id, NSString;
overload selector(static #"valueForHTTPHeaderField:") = NSString, NSString;
overload selector(static #"valueForKey:") = Id, NSString;
overload selector(static #"valueForKeyPath:") = Id, NSString;
overload selector(static #"valueForUndefinedKey:") = Id, NSString;
overload selector(static #"valueFunction") = CAValueFunction;
overload selector(static #"valueListAttributes") = NSArray;
overload selector(static #"valueLists") = NSDictionary;
overload selector(static #"valueOfAttribute:forResultAtIndex:") = Id, NSString, UInt;
overload selector(static #"valuePointerFunctions") = NSPointerFunctions;
overload selector(static #"valueTransformerForName:") = NSValueTransformer, NSString;
overload selector(static #"valueTransformerNames") = NSArray;
overload selector(static #"valueWithBytes:objCType:") = NSValue, RawPointer, Pointer[CChar];
overload selector(static #"valueWithCATransform3D:") = NSValue, CATransform3D;
overload selector(static #"valueWithName:inPropertyWithKey:") = Id, NSString, NSString;
overload selector(static #"valueWithNonretainedObject:") = NSValue, Id;
overload selector(static #"valueWithPoint:") = NSValue, NSPoint;
overload selector(static #"valueWithPointer:") = NSValue, RawPointer;
overload selector(static #"valueWithRange:") = NSValue, NSRange;
overload selector(static #"valueWithRect:") = NSValue, NSRect;
overload selector(static #"valueWithSize:") = NSValue, NSSize;
overload selector(static #"valueWithUniqueID:inPropertyWithKey:") = Id, Id, NSString;
overload selector(static #"values") = NSArray;
overload selector(static #"valuesForAttributes:") = NSDictionary, NSArray;
overload selector(static #"valuesForKeys:") = NSDictionary, NSArray;
overload selector(static #"variable") = NSString;
overload selector(static #"vectorWithString:") = CIVector, NSString;
overload selector(static #"vectorWithValues:count:") = CIVector, Pointer[Float], CULong;
overload selector(static #"vectorWithX:") = CIVector, Float;
overload selector(static #"vectorWithX:Y:") = CIVector, Float, Float;
overload selector(static #"vectorWithX:Y:Z:") = CIVector, Float, Float, Float;
overload selector(static #"vectorWithX:Y:Z:W:") = CIVector, Float, Float, Float, Float;
overload selector(static #"velocity") = Float;
overload selector(static #"velocityRange") = Float;
overload selector(static #"version") = Int;
overload selector(static #"versionForClassName:") = Int, NSString;
overload selector(static #"veryShortMonthSymbols") = NSArray;
overload selector(static #"veryShortStandaloneMonthSymbols") = NSArray;
overload selector(static #"veryShortStandaloneWeekdaySymbols") = NSArray;
overload selector(static #"veryShortWeekdaySymbols") = NSArray;
overload selector(static #"visibleRect") = CGRect;
overload selector(static #"volatileDomainForName:") = NSDictionary, NSString;
overload selector(static #"volatileDomainNames") = NSArray;
overload selector(static #"wait") = Void;
overload selector(static #"waitForDataInBackgroundAndNotify") = Void;
overload selector(static #"waitForDataInBackgroundAndNotifyForModes:") = Void, NSArray;
overload selector(static #"waitUntilAllOperationsAreFinished") = Void;
overload selector(static #"waitUntilDate:") = Bool, NSDate;
overload selector(static #"waitUntilExit") = Void;
overload selector(static #"waitUntilFinished") = Void;
overload selector(static #"week") = Int;
overload selector(static #"weekday") = Int;
overload selector(static #"weekdayOrdinal") = Int;
overload selector(static #"weekdaySymbols") = NSArray;
overload selector(static #"whitespaceAndNewlineCharacterSet") = Id;
overload selector(static #"whitespaceCharacterSet") = Id;
overload selector(static #"willChange:valuesAtIndexes:forKey:") = Void, UInt, NSIndexSet, NSString;
overload selector(static #"willChangeValueForKey:") = Void, NSString;
overload selector(static #"willChangeValueForKey:withSetMutation:usingObjects:") = Void, NSString, UInt, NSSet;
overload selector(static #"windowsLocaleCodeFromLocaleIdentifier:") = UInt, NSString;
overload selector(static #"write:maxLength:") = Int, Pointer[CUChar], UInt;
overload selector(static #"writeBookmarkData:toURL:options:error:") = Bool, NSData, NSURL, UInt, Pointer[NSError];
overload selector(static #"writeData:") = Bool, NSData;
overload selector(static #"writeProperty:forKey:") = Bool, Id, NSString;
overload selector(static #"writePropertyList:toStream:format:options:error:") = Int, Id, NSOutputStream, UInt, UInt, Pointer[NSError];
overload selector(static #"writeToFile:atomically:") = Bool, NSString, Bool;
overload selector(static #"writeToFile:atomically:encoding:error:") = Bool, NSString, Bool, UInt, Pointer[NSError];
overload selector(static #"writeToFile:options:error:") = Bool, NSString, UInt, Pointer[NSError];
overload selector(static #"writeToURL:atomically:") = Bool, NSURL, Bool;
overload selector(static #"writeToURL:atomically:encoding:error:") = Bool, NSURL, Bool, UInt, Pointer[NSError];
overload selector(static #"writeToURL:options:error:") = Bool, NSURL, UInt, Pointer[NSError];
overload selector(static #"xAcceleration") = Float;
overload selector(static #"yAcceleration") = Float;
overload selector(static #"year") = Int;
overload selector(static #"yearOfCommonEra") = Int;
overload selector(static #"years:months:days:hours:minutes:seconds:sinceDate:") = Void, Pointer[Int], Pointer[Int], Pointer[Int], Pointer[Int], Pointer[Int], Pointer[Int], NSCalendarDate;
overload selector(static #"zAcceleration") = Float;
overload selector(static #"zPosition") = Float;
overload selector(static #"zero") = NSDecimalNumber;
overload selector(static #"zeroSymbol") = NSString;
overload selector(static #"zone") = Pointer[NSZone];

record CAAnimation = externalClass(NSObject);
overload externalInstanceMethod(static CAAnimation, static #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static CAAnimation, static #"initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(static CAAnimation, static #"copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(static CAAnimation, static #"beginTime") = Double;
overload externalInstanceMethod(static CAAnimation, static #"setBeginTime:") = Void, Double;
overload externalInstanceMethod(static CAAnimation, static #"duration") = Double;
overload externalInstanceMethod(static CAAnimation, static #"setDuration:") = Void, Double;
overload externalInstanceMethod(static CAAnimation, static #"speed") = Float;
overload externalInstanceMethod(static CAAnimation, static #"setSpeed:") = Void, Float;
overload externalInstanceMethod(static CAAnimation, static #"timeOffset") = Double;
overload externalInstanceMethod(static CAAnimation, static #"setTimeOffset:") = Void, Double;
overload externalInstanceMethod(static CAAnimation, static #"repeatCount") = Float;
overload externalInstanceMethod(static CAAnimation, static #"setRepeatCount:") = Void, Float;
overload externalInstanceMethod(static CAAnimation, static #"repeatDuration") = Double;
overload externalInstanceMethod(static CAAnimation, static #"setRepeatDuration:") = Void, Double;
overload externalInstanceMethod(static CAAnimation, static #"autoreverses") = Bool;
overload externalInstanceMethod(static CAAnimation, static #"setAutoreverses:") = Void, Bool;
overload externalInstanceMethod(static CAAnimation, static #"fillMode") = NSString;
overload externalInstanceMethod(static CAAnimation, static #"setFillMode:") = Void, NSString;
overload externalInstanceMethod(static CAAnimation, static #"runActionForKey:object:arguments:") = Void, NSString, Id, NSDictionary;
overload externalClassMethod(static CAAnimation, static #"animation") = Id;
overload externalClassMethod(static CAAnimation, static #"defaultValueForKey:") = Id, NSString;
overload externalInstanceMethod(static CAAnimation, static #"shouldArchiveValueForKey:") = Bool, NSString;
overload externalInstanceMethod(static CAAnimation, static #"timingFunction") = CAMediaTimingFunction;
overload externalInstanceMethod(static CAAnimation, static #"setTimingFunction:") = Void, CAMediaTimingFunction;
overload externalInstanceMethod(static CAAnimation, static #"delegate") = Id;
overload externalInstanceMethod(static CAAnimation, static #"setDelegate:") = Void, Id;
overload externalInstanceMethod(static CAAnimation, static #"isRemovedOnCompletion") = Bool;
overload externalInstanceMethod(static CAAnimation, static #"setRemovedOnCompletion:") = Void, Bool;

record CAAnimationGroup = externalClass(CAAnimation);
overload externalInstanceMethod(static CAAnimationGroup, static #"animations") = NSArray;
overload externalInstanceMethod(static CAAnimationGroup, static #"setAnimations:") = Void, NSArray;

record CABasicAnimation = externalClass(CAPropertyAnimation);
overload externalInstanceMethod(static CABasicAnimation, static #"fromValue") = Id;
overload externalInstanceMethod(static CABasicAnimation, static #"setFromValue:") = Void, Id;
overload externalInstanceMethod(static CABasicAnimation, static #"toValue") = Id;
overload externalInstanceMethod(static CABasicAnimation, static #"setToValue:") = Void, Id;
overload externalInstanceMethod(static CABasicAnimation, static #"byValue") = Id;
overload externalInstanceMethod(static CABasicAnimation, static #"setByValue:") = Void, Id;

record CAConstraint = externalClass(NSObject);
overload externalInstanceMethod(static CAConstraint, static #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static CAConstraint, static #"initWithCoder:") = Id, NSCoder;
overload externalClassMethod(static CAConstraint, static #"constraintWithAttribute:relativeTo:attribute:scale:offset:") = Id, Int, NSString, Int, Float, Float;
overload externalClassMethod(static CAConstraint, static #"constraintWithAttribute:relativeTo:attribute:offset:") = Id, Int, NSString, Int, Float;
overload externalClassMethod(static CAConstraint, static #"constraintWithAttribute:relativeTo:attribute:") = Id, Int, NSString, Int;
overload externalInstanceMethod(static CAConstraint, static #"initWithAttribute:relativeTo:attribute:scale:offset:") = Id, Int, NSString, Int, Float, Float;
overload externalInstanceMethod(static CAConstraint, static #"attribute") = Int;
overload externalInstanceMethod(static CAConstraint, static #"sourceName") = NSString;
overload externalInstanceMethod(static CAConstraint, static #"sourceAttribute") = Int;
overload externalInstanceMethod(static CAConstraint, static #"scale") = Float;
overload externalInstanceMethod(static CAConstraint, static #"offset") = Float;

record CAConstraintLayoutManager = externalClass(NSObject);
overload externalClassMethod(static CAConstraintLayoutManager, static #"layoutManager") = Id;

record CAEmitterCell = externalClass(NSObject);
overload externalInstanceMethod(static CAEmitterCell, static #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static CAEmitterCell, static #"initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(static CAEmitterCell, static #"beginTime") = Double;
overload externalInstanceMethod(static CAEmitterCell, static #"setBeginTime:") = Void, Double;
overload externalInstanceMethod(static CAEmitterCell, static #"duration") = Double;
overload externalInstanceMethod(static CAEmitterCell, static #"setDuration:") = Void, Double;
overload externalInstanceMethod(static CAEmitterCell, static #"speed") = Float;
overload externalInstanceMethod(static CAEmitterCell, static #"setSpeed:") = Void, Float;
overload externalInstanceMethod(static CAEmitterCell, static #"timeOffset") = Double;
overload externalInstanceMethod(static CAEmitterCell, static #"setTimeOffset:") = Void, Double;
overload externalInstanceMethod(static CAEmitterCell, static #"repeatCount") = Float;
overload externalInstanceMethod(static CAEmitterCell, static #"setRepeatCount:") = Void, Float;
overload externalInstanceMethod(static CAEmitterCell, static #"repeatDuration") = Double;
overload externalInstanceMethod(static CAEmitterCell, static #"setRepeatDuration:") = Void, Double;
overload externalInstanceMethod(static CAEmitterCell, static #"autoreverses") = Bool;
overload externalInstanceMethod(static CAEmitterCell, static #"setAutoreverses:") = Void, Bool;
overload externalInstanceMethod(static CAEmitterCell, static #"fillMode") = NSString;
overload externalInstanceMethod(static CAEmitterCell, static #"setFillMode:") = Void, NSString;
overload externalClassMethod(static CAEmitterCell, static #"emitterCell") = Id;
overload externalClassMethod(static CAEmitterCell, static #"defaultValueForKey:") = Id, NSString;
overload externalInstanceMethod(static CAEmitterCell, static #"shouldArchiveValueForKey:") = Bool, NSString;
overload externalInstanceMethod(static CAEmitterCell, static #"name") = NSString;
overload externalInstanceMethod(static CAEmitterCell, static #"setName:") = Void, NSString;
overload externalInstanceMethod(static CAEmitterCell, static #"isEnabled") = Bool;
overload externalInstanceMethod(static CAEmitterCell, static #"setEnabled:") = Void, Bool;
overload externalInstanceMethod(static CAEmitterCell, static #"birthRate") = Float;
overload externalInstanceMethod(static CAEmitterCell, static #"setBirthRate:") = Void, Float;
overload externalInstanceMethod(static CAEmitterCell, static #"lifetime") = Float;
overload externalInstanceMethod(static CAEmitterCell, static #"setLifetime:") = Void, Float;
overload externalInstanceMethod(static CAEmitterCell, static #"lifetimeRange") = Float;
overload externalInstanceMethod(static CAEmitterCell, static #"setLifetimeRange:") = Void, Float;
overload externalInstanceMethod(static CAEmitterCell, static #"emissionLatitude") = Float;
overload externalInstanceMethod(static CAEmitterCell, static #"setEmissionLatitude:") = Void, Float;
overload externalInstanceMethod(static CAEmitterCell, static #"emissionLongitude") = Float;
overload externalInstanceMethod(static CAEmitterCell, static #"setEmissionLongitude:") = Void, Float;
overload externalInstanceMethod(static CAEmitterCell, static #"emissionRange") = Float;
overload externalInstanceMethod(static CAEmitterCell, static #"setEmissionRange:") = Void, Float;
overload externalInstanceMethod(static CAEmitterCell, static #"velocity") = Float;
overload externalInstanceMethod(static CAEmitterCell, static #"setVelocity:") = Void, Float;
overload externalInstanceMethod(static CAEmitterCell, static #"velocityRange") = Float;
overload externalInstanceMethod(static CAEmitterCell, static #"setVelocityRange:") = Void, Float;
overload externalInstanceMethod(static CAEmitterCell, static #"xAcceleration") = Float;
overload externalInstanceMethod(static CAEmitterCell, static #"setXAcceleration:") = Void, Float;
overload externalInstanceMethod(static CAEmitterCell, static #"yAcceleration") = Float;
overload externalInstanceMethod(static CAEmitterCell, static #"setYAcceleration:") = Void, Float;
overload externalInstanceMethod(static CAEmitterCell, static #"zAcceleration") = Float;
overload externalInstanceMethod(static CAEmitterCell, static #"setZAcceleration:") = Void, Float;
overload externalInstanceMethod(static CAEmitterCell, static #"scale") = Float;
overload externalInstanceMethod(static CAEmitterCell, static #"setScale:") = Void, Float;
overload externalInstanceMethod(static CAEmitterCell, static #"scaleRange") = Float;
overload externalInstanceMethod(static CAEmitterCell, static #"setScaleRange:") = Void, Float;
overload externalInstanceMethod(static CAEmitterCell, static #"scaleSpeed") = Float;
overload externalInstanceMethod(static CAEmitterCell, static #"setScaleSpeed:") = Void, Float;
overload externalInstanceMethod(static CAEmitterCell, static #"spin") = Float;
overload externalInstanceMethod(static CAEmitterCell, static #"setSpin:") = Void, Float;
overload externalInstanceMethod(static CAEmitterCell, static #"spinRange") = Float;
overload externalInstanceMethod(static CAEmitterCell, static #"setSpinRange:") = Void, Float;
overload externalInstanceMethod(static CAEmitterCell, static #"color") = CGColorRef;
overload externalInstanceMethod(static CAEmitterCell, static #"setColor:") = Void, CGColorRef;
overload externalInstanceMethod(static CAEmitterCell, static #"redRange") = Float;
overload externalInstanceMethod(static CAEmitterCell, static #"setRedRange:") = Void, Float;
overload externalInstanceMethod(static CAEmitterCell, static #"greenRange") = Float;
overload externalInstanceMethod(static CAEmitterCell, static #"setGreenRange:") = Void, Float;
overload externalInstanceMethod(static CAEmitterCell, static #"blueRange") = Float;
overload externalInstanceMethod(static CAEmitterCell, static #"setBlueRange:") = Void, Float;
overload externalInstanceMethod(static CAEmitterCell, static #"alphaRange") = Float;
overload externalInstanceMethod(static CAEmitterCell, static #"setAlphaRange:") = Void, Float;
overload externalInstanceMethod(static CAEmitterCell, static #"redSpeed") = Float;
overload externalInstanceMethod(static CAEmitterCell, static #"setRedSpeed:") = Void, Float;
overload externalInstanceMethod(static CAEmitterCell, static #"greenSpeed") = Float;
overload externalInstanceMethod(static CAEmitterCell, static #"setGreenSpeed:") = Void, Float;
overload externalInstanceMethod(static CAEmitterCell, static #"blueSpeed") = Float;
overload externalInstanceMethod(static CAEmitterCell, static #"setBlueSpeed:") = Void, Float;
overload externalInstanceMethod(static CAEmitterCell, static #"alphaSpeed") = Float;
overload externalInstanceMethod(static CAEmitterCell, static #"setAlphaSpeed:") = Void, Float;
overload externalInstanceMethod(static CAEmitterCell, static #"contents") = Id;
overload externalInstanceMethod(static CAEmitterCell, static #"setContents:") = Void, Id;
overload externalInstanceMethod(static CAEmitterCell, static #"contentsRect") = CGRect;
overload externalInstanceMethod(static CAEmitterCell, static #"setContentsRect:") = Void, CGRect;
overload externalInstanceMethod(static CAEmitterCell, static #"minificationFilter") = NSString;
overload externalInstanceMethod(static CAEmitterCell, static #"setMinificationFilter:") = Void, NSString;
overload externalInstanceMethod(static CAEmitterCell, static #"magnificationFilter") = NSString;
overload externalInstanceMethod(static CAEmitterCell, static #"setMagnificationFilter:") = Void, NSString;
overload externalInstanceMethod(static CAEmitterCell, static #"minificationFilterBias") = Float;
overload externalInstanceMethod(static CAEmitterCell, static #"setMinificationFilterBias:") = Void, Float;
overload externalInstanceMethod(static CAEmitterCell, static #"emitterCells") = NSArray;
overload externalInstanceMethod(static CAEmitterCell, static #"setEmitterCells:") = Void, NSArray;
overload externalInstanceMethod(static CAEmitterCell, static #"style") = NSDictionary;
overload externalInstanceMethod(static CAEmitterCell, static #"setStyle:") = Void, NSDictionary;

record CAEmitterLayer = externalClass(CALayer);
overload externalInstanceMethod(static CAEmitterLayer, static #"emitterCells") = NSArray;
overload externalInstanceMethod(static CAEmitterLayer, static #"setEmitterCells:") = Void, NSArray;
overload externalInstanceMethod(static CAEmitterLayer, static #"birthRate") = Float;
overload externalInstanceMethod(static CAEmitterLayer, static #"setBirthRate:") = Void, Float;
overload externalInstanceMethod(static CAEmitterLayer, static #"lifetime") = Float;
overload externalInstanceMethod(static CAEmitterLayer, static #"setLifetime:") = Void, Float;
overload externalInstanceMethod(static CAEmitterLayer, static #"emitterPosition") = CGPoint;
overload externalInstanceMethod(static CAEmitterLayer, static #"setEmitterPosition:") = Void, CGPoint;
overload externalInstanceMethod(static CAEmitterLayer, static #"emitterZPosition") = Float;
overload externalInstanceMethod(static CAEmitterLayer, static #"setEmitterZPosition:") = Void, Float;
overload externalInstanceMethod(static CAEmitterLayer, static #"emitterSize") = CGSize;
overload externalInstanceMethod(static CAEmitterLayer, static #"setEmitterSize:") = Void, CGSize;
overload externalInstanceMethod(static CAEmitterLayer, static #"emitterDepth") = Float;
overload externalInstanceMethod(static CAEmitterLayer, static #"setEmitterDepth:") = Void, Float;
overload externalInstanceMethod(static CAEmitterLayer, static #"emitterShape") = NSString;
overload externalInstanceMethod(static CAEmitterLayer, static #"setEmitterShape:") = Void, NSString;
overload externalInstanceMethod(static CAEmitterLayer, static #"emitterMode") = NSString;
overload externalInstanceMethod(static CAEmitterLayer, static #"setEmitterMode:") = Void, NSString;
overload externalInstanceMethod(static CAEmitterLayer, static #"renderMode") = NSString;
overload externalInstanceMethod(static CAEmitterLayer, static #"setRenderMode:") = Void, NSString;
overload externalInstanceMethod(static CAEmitterLayer, static #"preservesDepth") = Bool;
overload externalInstanceMethod(static CAEmitterLayer, static #"setPreservesDepth:") = Void, Bool;
overload externalInstanceMethod(static CAEmitterLayer, static #"velocity") = Float;
overload externalInstanceMethod(static CAEmitterLayer, static #"setVelocity:") = Void, Float;
overload externalInstanceMethod(static CAEmitterLayer, static #"scale") = Float;
overload externalInstanceMethod(static CAEmitterLayer, static #"setScale:") = Void, Float;
overload externalInstanceMethod(static CAEmitterLayer, static #"spin") = Float;
overload externalInstanceMethod(static CAEmitterLayer, static #"setSpin:") = Void, Float;
overload externalInstanceMethod(static CAEmitterLayer, static #"seed") = UInt;
overload externalInstanceMethod(static CAEmitterLayer, static #"setSeed:") = Void, UInt;

record CAGradientLayer = externalClass(CALayer);
overload externalInstanceMethod(static CAGradientLayer, static #"colors") = NSArray;
overload externalInstanceMethod(static CAGradientLayer, static #"setColors:") = Void, NSArray;
overload externalInstanceMethod(static CAGradientLayer, static #"locations") = NSArray;
overload externalInstanceMethod(static CAGradientLayer, static #"setLocations:") = Void, NSArray;
overload externalInstanceMethod(static CAGradientLayer, static #"startPoint") = CGPoint;
overload externalInstanceMethod(static CAGradientLayer, static #"setStartPoint:") = Void, CGPoint;
overload externalInstanceMethod(static CAGradientLayer, static #"endPoint") = CGPoint;
overload externalInstanceMethod(static CAGradientLayer, static #"setEndPoint:") = Void, CGPoint;
overload externalInstanceMethod(static CAGradientLayer, static #"type") = NSString;
overload externalInstanceMethod(static CAGradientLayer, static #"setType:") = Void, NSString;

record CAKeyframeAnimation = externalClass(CAPropertyAnimation);
overload externalInstanceMethod(static CAKeyframeAnimation, static #"values") = NSArray;
overload externalInstanceMethod(static CAKeyframeAnimation, static #"setValues:") = Void, NSArray;
overload externalInstanceMethod(static CAKeyframeAnimation, static #"path") = CGPathRef;
overload externalInstanceMethod(static CAKeyframeAnimation, static #"setPath:") = Void, CGPathRef;
overload externalInstanceMethod(static CAKeyframeAnimation, static #"keyTimes") = NSArray;
overload externalInstanceMethod(static CAKeyframeAnimation, static #"setKeyTimes:") = Void, NSArray;
overload externalInstanceMethod(static CAKeyframeAnimation, static #"timingFunctions") = NSArray;
overload externalInstanceMethod(static CAKeyframeAnimation, static #"setTimingFunctions:") = Void, NSArray;
overload externalInstanceMethod(static CAKeyframeAnimation, static #"calculationMode") = NSString;
overload externalInstanceMethod(static CAKeyframeAnimation, static #"setCalculationMode:") = Void, NSString;
overload externalInstanceMethod(static CAKeyframeAnimation, static #"rotationMode") = NSString;
overload externalInstanceMethod(static CAKeyframeAnimation, static #"setRotationMode:") = Void, NSString;

record CALayer = externalClass(NSObject);
overload externalInstanceMethod(static CALayer, static #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static CALayer, static #"initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(static CALayer, static #"beginTime") = Double;
overload externalInstanceMethod(static CALayer, static #"setBeginTime:") = Void, Double;
overload externalInstanceMethod(static CALayer, static #"duration") = Double;
overload externalInstanceMethod(static CALayer, static #"setDuration:") = Void, Double;
overload externalInstanceMethod(static CALayer, static #"speed") = Float;
overload externalInstanceMethod(static CALayer, static #"setSpeed:") = Void, Float;
overload externalInstanceMethod(static CALayer, static #"timeOffset") = Double;
overload externalInstanceMethod(static CALayer, static #"setTimeOffset:") = Void, Double;
overload externalInstanceMethod(static CALayer, static #"repeatCount") = Float;
overload externalInstanceMethod(static CALayer, static #"setRepeatCount:") = Void, Float;
overload externalInstanceMethod(static CALayer, static #"repeatDuration") = Double;
overload externalInstanceMethod(static CALayer, static #"setRepeatDuration:") = Void, Double;
overload externalInstanceMethod(static CALayer, static #"autoreverses") = Bool;
overload externalInstanceMethod(static CALayer, static #"setAutoreverses:") = Void, Bool;
overload externalInstanceMethod(static CALayer, static #"fillMode") = NSString;
overload externalInstanceMethod(static CALayer, static #"setFillMode:") = Void, NSString;
overload externalClassMethod(static CALayer, static #"layer") = Id;
overload externalInstanceMethod(static CALayer, static #"init") = Id;
overload externalInstanceMethod(static CALayer, static #"initWithLayer:") = Id, Id;
overload externalInstanceMethod(static CALayer, static #"presentationLayer") = Id;
overload externalInstanceMethod(static CALayer, static #"modelLayer") = Id;
overload externalClassMethod(static CALayer, static #"defaultValueForKey:") = Id, NSString;
overload externalClassMethod(static CALayer, static #"needsDisplayForKey:") = Bool, NSString;
overload externalInstanceMethod(static CALayer, static #"shouldArchiveValueForKey:") = Bool, NSString;
overload externalInstanceMethod(static CALayer, static #"affineTransform") = CGAffineTransform;
overload externalInstanceMethod(static CALayer, static #"setAffineTransform:") = Void, CGAffineTransform;
overload externalInstanceMethod(static CALayer, static #"contentsAreFlipped") = Bool;
overload externalInstanceMethod(static CALayer, static #"removeFromSuperlayer") = Void;
overload externalInstanceMethod(static CALayer, static #"addSublayer:") = Void, CALayer;
overload externalInstanceMethod(static CALayer, static #"insertSublayer:atIndex:") = Void, CALayer, UInt;
overload externalInstanceMethod(static CALayer, static #"insertSublayer:below:") = Void, CALayer, CALayer;
overload externalInstanceMethod(static CALayer, static #"insertSublayer:above:") = Void, CALayer, CALayer;
overload externalInstanceMethod(static CALayer, static #"replaceSublayer:with:") = Void, CALayer, CALayer;
overload externalInstanceMethod(static CALayer, static #"convertPoint:fromLayer:") = CGPoint, CGPoint, CALayer;
overload externalInstanceMethod(static CALayer, static #"convertPoint:toLayer:") = CGPoint, CGPoint, CALayer;
overload externalInstanceMethod(static CALayer, static #"convertRect:fromLayer:") = CGRect, CGRect, CALayer;
overload externalInstanceMethod(static CALayer, static #"convertRect:toLayer:") = CGRect, CGRect, CALayer;
overload externalInstanceMethod(static CALayer, static #"convertTime:fromLayer:") = Double, Double, CALayer;
overload externalInstanceMethod(static CALayer, static #"convertTime:toLayer:") = Double, Double, CALayer;
overload externalInstanceMethod(static CALayer, static #"hitTest:") = CALayer, CGPoint;
overload externalInstanceMethod(static CALayer, static #"containsPoint:") = Bool, CGPoint;
overload externalInstanceMethod(static CALayer, static #"display") = Void;
overload externalInstanceMethod(static CALayer, static #"setNeedsDisplay") = Void;
overload externalInstanceMethod(static CALayer, static #"setNeedsDisplayInRect:") = Void, CGRect;
overload externalInstanceMethod(static CALayer, static #"needsDisplay") = Bool;
overload externalInstanceMethod(static CALayer, static #"displayIfNeeded") = Void;
overload externalInstanceMethod(static CALayer, static #"drawInContext:") = Void, CGContextRef;
overload externalInstanceMethod(static CALayer, static #"renderInContext:") = Void, CGContextRef;
overload externalInstanceMethod(static CALayer, static #"preferredFrameSize") = CGSize;
overload externalInstanceMethod(static CALayer, static #"setNeedsLayout") = Void;
overload externalInstanceMethod(static CALayer, static #"needsLayout") = Bool;
overload externalInstanceMethod(static CALayer, static #"layoutIfNeeded") = Void;
overload externalInstanceMethod(static CALayer, static #"layoutSublayers") = Void;
overload externalInstanceMethod(static CALayer, static #"resizeSublayersWithOldSize:") = Void, CGSize;
overload externalInstanceMethod(static CALayer, static #"resizeWithOldSuperlayerSize:") = Void, CGSize;
overload externalClassMethod(static CALayer, static #"defaultActionForKey:") = Id, NSString;
overload externalInstanceMethod(static CALayer, static #"actionForKey:") = Id, NSString;
overload externalInstanceMethod(static CALayer, static #"addAnimation:forKey:") = Void, CAAnimation, NSString;
overload externalInstanceMethod(static CALayer, static #"removeAllAnimations") = Void;
overload externalInstanceMethod(static CALayer, static #"removeAnimationForKey:") = Void, NSString;
overload externalInstanceMethod(static CALayer, static #"animationKeys") = NSArray;
overload externalInstanceMethod(static CALayer, static #"animationForKey:") = CAAnimation, NSString;
overload externalInstanceMethod(static CALayer, static #"bounds") = CGRect;
overload externalInstanceMethod(static CALayer, static #"setBounds:") = Void, CGRect;
overload externalInstanceMethod(static CALayer, static #"position") = CGPoint;
overload externalInstanceMethod(static CALayer, static #"setPosition:") = Void, CGPoint;
overload externalInstanceMethod(static CALayer, static #"zPosition") = Float;
overload externalInstanceMethod(static CALayer, static #"setZPosition:") = Void, Float;
overload externalInstanceMethod(static CALayer, static #"anchorPoint") = CGPoint;
overload externalInstanceMethod(static CALayer, static #"setAnchorPoint:") = Void, CGPoint;
overload externalInstanceMethod(static CALayer, static #"anchorPointZ") = Float;
overload externalInstanceMethod(static CALayer, static #"setAnchorPointZ:") = Void, Float;
overload externalInstanceMethod(static CALayer, static #"transform") = CATransform3D;
overload externalInstanceMethod(static CALayer, static #"setTransform:") = Void, CATransform3D;
overload externalInstanceMethod(static CALayer, static #"frame") = CGRect;
overload externalInstanceMethod(static CALayer, static #"setFrame:") = Void, CGRect;
overload externalInstanceMethod(static CALayer, static #"isHidden") = Bool;
overload externalInstanceMethod(static CALayer, static #"setHidden:") = Void, Bool;
overload externalInstanceMethod(static CALayer, static #"isDoubleSided") = Bool;
overload externalInstanceMethod(static CALayer, static #"setDoubleSided:") = Void, Bool;
overload externalInstanceMethod(static CALayer, static #"isGeometryFlipped") = Bool;
overload externalInstanceMethod(static CALayer, static #"setGeometryFlipped:") = Void, Bool;
overload externalInstanceMethod(static CALayer, static #"superlayer") = CALayer;
overload externalInstanceMethod(static CALayer, static #"sublayers") = NSArray;
overload externalInstanceMethod(static CALayer, static #"setSublayers:") = Void, NSArray;
overload externalInstanceMethod(static CALayer, static #"sublayerTransform") = CATransform3D;
overload externalInstanceMethod(static CALayer, static #"setSublayerTransform:") = Void, CATransform3D;
overload externalInstanceMethod(static CALayer, static #"mask") = CALayer;
overload externalInstanceMethod(static CALayer, static #"setMask:") = Void, CALayer;
overload externalInstanceMethod(static CALayer, static #"masksToBounds") = Bool;
overload externalInstanceMethod(static CALayer, static #"setMasksToBounds:") = Void, Bool;
overload externalInstanceMethod(static CALayer, static #"contents") = Id;
overload externalInstanceMethod(static CALayer, static #"setContents:") = Void, Id;
overload externalInstanceMethod(static CALayer, static #"contentsRect") = CGRect;
overload externalInstanceMethod(static CALayer, static #"setContentsRect:") = Void, CGRect;
overload externalInstanceMethod(static CALayer, static #"contentsGravity") = NSString;
overload externalInstanceMethod(static CALayer, static #"setContentsGravity:") = Void, NSString;
overload externalInstanceMethod(static CALayer, static #"contentsCenter") = CGRect;
overload externalInstanceMethod(static CALayer, static #"setContentsCenter:") = Void, CGRect;
overload externalInstanceMethod(static CALayer, static #"minificationFilter") = NSString;
overload externalInstanceMethod(static CALayer, static #"setMinificationFilter:") = Void, NSString;
overload externalInstanceMethod(static CALayer, static #"magnificationFilter") = NSString;
overload externalInstanceMethod(static CALayer, static #"setMagnificationFilter:") = Void, NSString;
overload externalInstanceMethod(static CALayer, static #"minificationFilterBias") = Float;
overload externalInstanceMethod(static CALayer, static #"setMinificationFilterBias:") = Void, Float;
overload externalInstanceMethod(static CALayer, static #"isOpaque") = Bool;
overload externalInstanceMethod(static CALayer, static #"setOpaque:") = Void, Bool;
overload externalInstanceMethod(static CALayer, static #"needsDisplayOnBoundsChange") = Bool;
overload externalInstanceMethod(static CALayer, static #"setNeedsDisplayOnBoundsChange:") = Void, Bool;
overload externalInstanceMethod(static CALayer, static #"edgeAntialiasingMask") = UInt;
overload externalInstanceMethod(static CALayer, static #"setEdgeAntialiasingMask:") = Void, UInt;
overload externalInstanceMethod(static CALayer, static #"backgroundColor") = CGColorRef;
overload externalInstanceMethod(static CALayer, static #"setBackgroundColor:") = Void, CGColorRef;
overload externalInstanceMethod(static CALayer, static #"cornerRadius") = Float;
overload externalInstanceMethod(static CALayer, static #"setCornerRadius:") = Void, Float;
overload externalInstanceMethod(static CALayer, static #"borderWidth") = Float;
overload externalInstanceMethod(static CALayer, static #"setBorderWidth:") = Void, Float;
overload externalInstanceMethod(static CALayer, static #"borderColor") = CGColorRef;
overload externalInstanceMethod(static CALayer, static #"setBorderColor:") = Void, CGColorRef;
overload externalInstanceMethod(static CALayer, static #"opacity") = Float;
overload externalInstanceMethod(static CALayer, static #"setOpacity:") = Void, Float;
overload externalInstanceMethod(static CALayer, static #"compositingFilter") = Id;
overload externalInstanceMethod(static CALayer, static #"setCompositingFilter:") = Void, Id;
overload externalInstanceMethod(static CALayer, static #"filters") = NSArray;
overload externalInstanceMethod(static CALayer, static #"setFilters:") = Void, NSArray;
overload externalInstanceMethod(static CALayer, static #"backgroundFilters") = NSArray;
overload externalInstanceMethod(static CALayer, static #"setBackgroundFilters:") = Void, NSArray;
overload externalInstanceMethod(static CALayer, static #"shadowColor") = CGColorRef;
overload externalInstanceMethod(static CALayer, static #"setShadowColor:") = Void, CGColorRef;
overload externalInstanceMethod(static CALayer, static #"shadowOpacity") = Float;
overload externalInstanceMethod(static CALayer, static #"setShadowOpacity:") = Void, Float;
overload externalInstanceMethod(static CALayer, static #"shadowOffset") = CGSize;
overload externalInstanceMethod(static CALayer, static #"setShadowOffset:") = Void, CGSize;
overload externalInstanceMethod(static CALayer, static #"shadowRadius") = Float;
overload externalInstanceMethod(static CALayer, static #"setShadowRadius:") = Void, Float;
overload externalInstanceMethod(static CALayer, static #"autoresizingMask") = UInt;
overload externalInstanceMethod(static CALayer, static #"setAutoresizingMask:") = Void, UInt;
overload externalInstanceMethod(static CALayer, static #"layoutManager") = Id;
overload externalInstanceMethod(static CALayer, static #"setLayoutManager:") = Void, Id;
overload externalInstanceMethod(static CALayer, static #"actions") = NSDictionary;
overload externalInstanceMethod(static CALayer, static #"setActions:") = Void, NSDictionary;
overload externalInstanceMethod(static CALayer, static #"name") = NSString;
overload externalInstanceMethod(static CALayer, static #"setName:") = Void, NSString;
overload externalInstanceMethod(static CALayer, static #"delegate") = Id;
overload externalInstanceMethod(static CALayer, static #"setDelegate:") = Void, Id;
overload externalInstanceMethod(static CALayer, static #"style") = NSDictionary;
overload externalInstanceMethod(static CALayer, static #"setStyle:") = Void, NSDictionary;
overload externalInstanceMethod(static CALayer, static #"addConstraint:") = Void, CAConstraint;
overload externalInstanceMethod(static CALayer, static #"constraints") = NSArray;
overload externalInstanceMethod(static CALayer, static #"setConstraints:") = Void, NSArray;
overload externalInstanceMethod(static CALayer, static #"scrollPoint:") = Void, CGPoint;
overload externalInstanceMethod(static CALayer, static #"scrollRectToVisible:") = Void, CGRect;
overload externalInstanceMethod(static CALayer, static #"visibleRect") = CGRect;

record CAMediaTimingFunction = externalClass(NSObject);
overload externalInstanceMethod(static CAMediaTimingFunction, static #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static CAMediaTimingFunction, static #"initWithCoder:") = Id, NSCoder;
overload externalClassMethod(static CAMediaTimingFunction, static #"functionWithName:") = Id, NSString;
overload externalClassMethod(static CAMediaTimingFunction, static #"functionWithControlPoints::::") = Id, Float, Float, Float, Float;
overload externalInstanceMethod(static CAMediaTimingFunction, static #"initWithControlPoints::::") = Id, Float, Float, Float, Float;
overload externalInstanceMethod(static CAMediaTimingFunction, static #"getControlPointAtIndex:values:") = Void, CULong, Pointer[Float];

record CAOpenGLLayer = externalClass(CALayer);
overload externalInstanceMethod(static CAOpenGLLayer, static #"canDrawInCGLContext:pixelFormat:forLayerTime:displayTime:") = Bool, CGLContextObj, CGLPixelFormatObj, Double, Pointer[CVTimeStamp];
overload externalInstanceMethod(static CAOpenGLLayer, static #"drawInCGLContext:pixelFormat:forLayerTime:displayTime:") = Void, CGLContextObj, CGLPixelFormatObj, Double, Pointer[CVTimeStamp];
overload externalInstanceMethod(static CAOpenGLLayer, static #"copyCGLPixelFormatForDisplayMask:") = CGLPixelFormatObj, UInt;
overload externalInstanceMethod(static CAOpenGLLayer, static #"releaseCGLPixelFormat:") = Void, CGLPixelFormatObj;
overload externalInstanceMethod(static CAOpenGLLayer, static #"copyCGLContextForPixelFormat:") = CGLContextObj, CGLPixelFormatObj;
overload externalInstanceMethod(static CAOpenGLLayer, static #"releaseCGLContext:") = Void, CGLContextObj;
overload externalInstanceMethod(static CAOpenGLLayer, static #"isAsynchronous") = Bool;
overload externalInstanceMethod(static CAOpenGLLayer, static #"setAsynchronous:") = Void, Bool;

record CAPropertyAnimation = externalClass(CAAnimation);
overload externalClassMethod(static CAPropertyAnimation, static #"animationWithKeyPath:") = Id, NSString;
overload externalInstanceMethod(static CAPropertyAnimation, static #"keyPath") = NSString;
overload externalInstanceMethod(static CAPropertyAnimation, static #"setKeyPath:") = Void, NSString;
overload externalInstanceMethod(static CAPropertyAnimation, static #"isAdditive") = Bool;
overload externalInstanceMethod(static CAPropertyAnimation, static #"setAdditive:") = Void, Bool;
overload externalInstanceMethod(static CAPropertyAnimation, static #"isCumulative") = Bool;
overload externalInstanceMethod(static CAPropertyAnimation, static #"setCumulative:") = Void, Bool;
overload externalInstanceMethod(static CAPropertyAnimation, static #"valueFunction") = CAValueFunction;
overload externalInstanceMethod(static CAPropertyAnimation, static #"setValueFunction:") = Void, CAValueFunction;

record CARenderer = externalClass(NSObject);
overload externalClassMethod(static CARenderer, static #"rendererWithCGLContext:options:") = CARenderer, RawPointer, NSDictionary;
overload externalInstanceMethod(static CARenderer, static #"beginFrameAtTime:timeStamp:") = Void, Double, Pointer[CVTimeStamp];
overload externalInstanceMethod(static CARenderer, static #"updateBounds") = CGRect;
overload externalInstanceMethod(static CARenderer, static #"addUpdateRect:") = Void, CGRect;
overload externalInstanceMethod(static CARenderer, static #"render") = Void;
overload externalInstanceMethod(static CARenderer, static #"nextFrameTime") = Double;
overload externalInstanceMethod(static CARenderer, static #"endFrame") = Void;
overload externalInstanceMethod(static CARenderer, static #"layer") = CALayer;
overload externalInstanceMethod(static CARenderer, static #"setLayer:") = Void, CALayer;
overload externalInstanceMethod(static CARenderer, static #"bounds") = CGRect;
overload externalInstanceMethod(static CARenderer, static #"setBounds:") = Void, CGRect;

record CAReplicatorLayer = externalClass(CALayer);
overload externalInstanceMethod(static CAReplicatorLayer, static #"instanceCount") = Int;
overload externalInstanceMethod(static CAReplicatorLayer, static #"setInstanceCount:") = Void, Int;
overload externalInstanceMethod(static CAReplicatorLayer, static #"preservesDepth") = Bool;
overload externalInstanceMethod(static CAReplicatorLayer, static #"setPreservesDepth:") = Void, Bool;
overload externalInstanceMethod(static CAReplicatorLayer, static #"instanceDelay") = Double;
overload externalInstanceMethod(static CAReplicatorLayer, static #"setInstanceDelay:") = Void, Double;
overload externalInstanceMethod(static CAReplicatorLayer, static #"instanceTransform") = CATransform3D;
overload externalInstanceMethod(static CAReplicatorLayer, static #"setInstanceTransform:") = Void, CATransform3D;
overload externalInstanceMethod(static CAReplicatorLayer, static #"instanceColor") = CGColorRef;
overload externalInstanceMethod(static CAReplicatorLayer, static #"setInstanceColor:") = Void, CGColorRef;
overload externalInstanceMethod(static CAReplicatorLayer, static #"instanceRedOffset") = Float;
overload externalInstanceMethod(static CAReplicatorLayer, static #"setInstanceRedOffset:") = Void, Float;
overload externalInstanceMethod(static CAReplicatorLayer, static #"instanceGreenOffset") = Float;
overload externalInstanceMethod(static CAReplicatorLayer, static #"setInstanceGreenOffset:") = Void, Float;
overload externalInstanceMethod(static CAReplicatorLayer, static #"instanceBlueOffset") = Float;
overload externalInstanceMethod(static CAReplicatorLayer, static #"setInstanceBlueOffset:") = Void, Float;
overload externalInstanceMethod(static CAReplicatorLayer, static #"instanceAlphaOffset") = Float;
overload externalInstanceMethod(static CAReplicatorLayer, static #"setInstanceAlphaOffset:") = Void, Float;

record CAScrollLayer = externalClass(CALayer);
overload externalInstanceMethod(static CAScrollLayer, static #"scrollToPoint:") = Void, CGPoint;
overload externalInstanceMethod(static CAScrollLayer, static #"scrollToRect:") = Void, CGRect;
overload externalInstanceMethod(static CAScrollLayer, static #"scrollMode") = NSString;
overload externalInstanceMethod(static CAScrollLayer, static #"setScrollMode:") = Void, NSString;

record CAShapeLayer = externalClass(CALayer);
overload externalInstanceMethod(static CAShapeLayer, static #"path") = CGPathRef;
overload externalInstanceMethod(static CAShapeLayer, static #"setPath:") = Void, CGPathRef;
overload externalInstanceMethod(static CAShapeLayer, static #"fillColor") = CGColorRef;
overload externalInstanceMethod(static CAShapeLayer, static #"setFillColor:") = Void, CGColorRef;
overload externalInstanceMethod(static CAShapeLayer, static #"fillRule") = NSString;
overload externalInstanceMethod(static CAShapeLayer, static #"setFillRule:") = Void, NSString;
overload externalInstanceMethod(static CAShapeLayer, static #"strokeColor") = CGColorRef;
overload externalInstanceMethod(static CAShapeLayer, static #"setStrokeColor:") = Void, CGColorRef;
overload externalInstanceMethod(static CAShapeLayer, static #"lineWidth") = Float;
overload externalInstanceMethod(static CAShapeLayer, static #"setLineWidth:") = Void, Float;
overload externalInstanceMethod(static CAShapeLayer, static #"miterLimit") = Float;
overload externalInstanceMethod(static CAShapeLayer, static #"setMiterLimit:") = Void, Float;
overload externalInstanceMethod(static CAShapeLayer, static #"lineCap") = NSString;
overload externalInstanceMethod(static CAShapeLayer, static #"setLineCap:") = Void, NSString;
overload externalInstanceMethod(static CAShapeLayer, static #"lineJoin") = NSString;
overload externalInstanceMethod(static CAShapeLayer, static #"setLineJoin:") = Void, NSString;
overload externalInstanceMethod(static CAShapeLayer, static #"lineDashPhase") = Float;
overload externalInstanceMethod(static CAShapeLayer, static #"setLineDashPhase:") = Void, Float;
overload externalInstanceMethod(static CAShapeLayer, static #"lineDashPattern") = NSArray;
overload externalInstanceMethod(static CAShapeLayer, static #"setLineDashPattern:") = Void, NSArray;

record CATextLayer = externalClass(CALayer);
overload externalInstanceMethod(static CATextLayer, static #"string") = Id;
overload externalInstanceMethod(static CATextLayer, static #"setString:") = Void, Id;
overload externalInstanceMethod(static CATextLayer, static #"font") = CFTypeRef;
overload externalInstanceMethod(static CATextLayer, static #"setFont:") = Void, CFTypeRef;
overload externalInstanceMethod(static CATextLayer, static #"fontSize") = Float;
overload externalInstanceMethod(static CATextLayer, static #"setFontSize:") = Void, Float;
overload externalInstanceMethod(static CATextLayer, static #"foregroundColor") = CGColorRef;
overload externalInstanceMethod(static CATextLayer, static #"setForegroundColor:") = Void, CGColorRef;
overload externalInstanceMethod(static CATextLayer, static #"isWrapped") = Bool;
overload externalInstanceMethod(static CATextLayer, static #"setWrapped:") = Void, Bool;
overload externalInstanceMethod(static CATextLayer, static #"truncationMode") = NSString;
overload externalInstanceMethod(static CATextLayer, static #"setTruncationMode:") = Void, NSString;
overload externalInstanceMethod(static CATextLayer, static #"alignmentMode") = NSString;
overload externalInstanceMethod(static CATextLayer, static #"setAlignmentMode:") = Void, NSString;

record CATiledLayer = externalClass(CALayer);
overload externalClassMethod(static CATiledLayer, static #"fadeDuration") = Double;
overload externalInstanceMethod(static CATiledLayer, static #"levelsOfDetail") = CULong;
overload externalInstanceMethod(static CATiledLayer, static #"setLevelsOfDetail:") = Void, CULong;
overload externalInstanceMethod(static CATiledLayer, static #"levelsOfDetailBias") = CULong;
overload externalInstanceMethod(static CATiledLayer, static #"setLevelsOfDetailBias:") = Void, CULong;
overload externalInstanceMethod(static CATiledLayer, static #"tileSize") = CGSize;
overload externalInstanceMethod(static CATiledLayer, static #"setTileSize:") = Void, CGSize;

record CATransaction = externalClass(NSObject);
overload externalClassMethod(static CATransaction, static #"begin") = Void;
overload externalClassMethod(static CATransaction, static #"commit") = Void;
overload externalClassMethod(static CATransaction, static #"flush") = Void;
overload externalClassMethod(static CATransaction, static #"lock") = Void;
overload externalClassMethod(static CATransaction, static #"unlock") = Void;
overload externalClassMethod(static CATransaction, static #"animationDuration") = Double;
overload externalClassMethod(static CATransaction, static #"setAnimationDuration:") = Void, Double;
overload externalClassMethod(static CATransaction, static #"animationTimingFunction") = CAMediaTimingFunction;
overload externalClassMethod(static CATransaction, static #"setAnimationTimingFunction:") = Void, CAMediaTimingFunction;
overload externalClassMethod(static CATransaction, static #"disableActions") = Bool;
overload externalClassMethod(static CATransaction, static #"setDisableActions:") = Void, Bool;
overload externalClassMethod(static CATransaction, static #"completionBlock") = UnknownType;
overload externalClassMethod(static CATransaction, static #"setCompletionBlock:") = Void, UnknownType;
overload externalClassMethod(static CATransaction, static #"valueForKey:") = Id, NSString;
overload externalClassMethod(static CATransaction, static #"setValue:forKey:") = Void, Id, NSString;

record CATransformLayer = externalClass(CALayer);

record CATransition = externalClass(CAAnimation);
overload externalInstanceMethod(static CATransition, static #"type") = NSString;
overload externalInstanceMethod(static CATransition, static #"setType:") = Void, NSString;
overload externalInstanceMethod(static CATransition, static #"subtype") = NSString;
overload externalInstanceMethod(static CATransition, static #"setSubtype:") = Void, NSString;
overload externalInstanceMethod(static CATransition, static #"startProgress") = Float;
overload externalInstanceMethod(static CATransition, static #"setStartProgress:") = Void, Float;
overload externalInstanceMethod(static CATransition, static #"endProgress") = Float;
overload externalInstanceMethod(static CATransition, static #"setEndProgress:") = Void, Float;
overload externalInstanceMethod(static CATransition, static #"filter") = Id;
overload externalInstanceMethod(static CATransition, static #"setFilter:") = Void, Id;

record CAValueFunction = externalClass(NSObject);
overload externalInstanceMethod(static CAValueFunction, static #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static CAValueFunction, static #"initWithCoder:") = Id, NSCoder;
overload externalClassMethod(static CAValueFunction, static #"functionWithName:") = Id, NSString;
overload externalInstanceMethod(static CAValueFunction, static #"name") = NSString;

record CIColor = externalClass(NSObject);
overload externalInstanceMethod(static CIColor, static #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static CIColor, static #"initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(static CIColor, static #"copyWithZone:") = Id, Pointer[NSZone];
overload externalClassMethod(static CIColor, static #"colorWithCGColor:") = CIColor, CGColorRef;
overload externalClassMethod(static CIColor, static #"colorWithRed:green:blue:alpha:") = CIColor, Float, Float, Float, Float;
overload externalClassMethod(static CIColor, static #"colorWithRed:green:blue:") = CIColor, Float, Float, Float;
overload externalClassMethod(static CIColor, static #"colorWithString:") = CIColor, NSString;
overload externalInstanceMethod(static CIColor, static #"initWithCGColor:") = Id, CGColorRef;
overload externalInstanceMethod(static CIColor, static #"numberOfComponents") = CULong;
overload externalInstanceMethod(static CIColor, static #"components") = Pointer[Float];
overload externalInstanceMethod(static CIColor, static #"alpha") = Float;
overload externalInstanceMethod(static CIColor, static #"colorSpace") = CGColorSpaceRef;
overload externalInstanceMethod(static CIColor, static #"red") = Float;
overload externalInstanceMethod(static CIColor, static #"green") = Float;
overload externalInstanceMethod(static CIColor, static #"blue") = Float;
overload externalInstanceMethod(static CIColor, static #"stringRepresentation") = NSString;

record CIContext = externalClass(NSObject);
overload externalClassMethod(static CIContext, static #"contextWithCGLContext:pixelFormat:colorSpace:options:") = CIContext, CGLContextObj, CGLPixelFormatObj, CGColorSpaceRef, NSDictionary;
overload externalClassMethod(static CIContext, static #"contextWithCGLContext:pixelFormat:options:") = CIContext, CGLContextObj, CGLPixelFormatObj, NSDictionary;
overload externalClassMethod(static CIContext, static #"contextWithCGContext:options:") = CIContext, CGContextRef, NSDictionary;
overload externalInstanceMethod(static CIContext, static #"drawImage:atPoint:fromRect:") = Void, CIImage, CGPoint, CGRect;
overload externalInstanceMethod(static CIContext, static #"drawImage:inRect:fromRect:") = Void, CIImage, CGRect, CGRect;
overload externalInstanceMethod(static CIContext, static #"createCGImage:fromRect:") = CGImageRef, CIImage, CGRect;
overload externalInstanceMethod(static CIContext, static #"createCGImage:fromRect:format:colorSpace:") = CGImageRef, CIImage, CGRect, Int, CGColorSpaceRef;
overload externalInstanceMethod(static CIContext, static #"createCGLayerWithSize:info:") = CGLayerRef, CGSize, CFDictionaryRef;
overload externalInstanceMethod(static CIContext, static #"render:toBitmap:rowBytes:bounds:format:colorSpace:") = Void, CIImage, RawPointer, Int, CGRect, Int, CGColorSpaceRef;
overload externalInstanceMethod(static CIContext, static #"render:toIOSurface:bounds:colorSpace:") = Void, CIImage, IOSurfaceRef, CGRect, CGColorSpaceRef;
overload externalInstanceMethod(static CIContext, static #"reclaimResources") = Void;
overload externalInstanceMethod(static CIContext, static #"clearCaches") = Void;

record CIFilter = externalClass(NSObject);
overload externalInstanceMethod(static CIFilter, static #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static CIFilter, static #"initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(static CIFilter, static #"copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(static CIFilter, static #"inputKeys") = NSArray;
overload externalInstanceMethod(static CIFilter, static #"outputKeys") = NSArray;
overload externalInstanceMethod(static CIFilter, static #"setDefaults") = Void;
overload externalInstanceMethod(static CIFilter, static #"attributes") = NSDictionary;
overload externalInstanceMethod(static CIFilter, static #"apply:arguments:options:") = CIImage, CIKernel, NSArray, NSDictionary;
overload externalVarargInstanceMethod(static CIFilter, static #"apply:") = CIImage, CIKernel;
overload externalClassMethod(static CIFilter, static #"filterWithName:") = CIFilter, NSString;
overload externalVarargClassMethod(static CIFilter, static #"filterWithName:keysAndValues:") = CIFilter, NSString, Id;
overload externalClassMethod(static CIFilter, static #"filterNamesInCategory:") = NSArray, NSString;
overload externalClassMethod(static CIFilter, static #"filterNamesInCategories:") = NSArray, NSArray;
overload externalClassMethod(static CIFilter, static #"registerFilterName:constructor:classAttributes:") = Void, NSString, Id, NSDictionary;
overload externalClassMethod(static CIFilter, static #"localizedNameForFilterName:") = NSString, NSString;
overload externalClassMethod(static CIFilter, static #"localizedNameForCategory:") = NSString, NSString;
overload externalClassMethod(static CIFilter, static #"localizedDescriptionForFilterName:") = NSString, NSString;
overload externalClassMethod(static CIFilter, static #"localizedReferenceDocumentationForFilterName:") = NSURL, NSString;
overload externalClassMethod(static CIFilter, static #"filterWithImageURL:options:") = CIFilter, NSURL, NSDictionary;
overload externalClassMethod(static CIFilter, static #"filterWithImageData:options:") = CIFilter, NSData, NSDictionary;
overload externalInstanceMethod(static CIFilter, static #"name") = NSString;
overload externalInstanceMethod(static CIFilter, static #"setName:") = Void, NSString;
overload externalInstanceMethod(static CIFilter, static #"isEnabled") = Bool;
overload externalInstanceMethod(static CIFilter, static #"setEnabled:") = Void, Bool;

record CIFilterGenerator = externalClass(NSObject);
overload externalInstanceMethod(static CIFilterGenerator, static #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static CIFilterGenerator, static #"initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(static CIFilterGenerator, static #"copyWithZone:") = Id, Pointer[NSZone];
overload externalClassMethod(static CIFilterGenerator, static #"filterGenerator") = CIFilterGenerator;
overload externalClassMethod(static CIFilterGenerator, static #"filterGeneratorWithContentsOfURL:") = CIFilterGenerator, NSURL;
overload externalInstanceMethod(static CIFilterGenerator, static #"initWithContentsOfURL:") = Id, NSURL;
overload externalInstanceMethod(static CIFilterGenerator, static #"connectObject:withKey:toObject:withKey:") = Void, Id, NSString, Id, NSString;
overload externalInstanceMethod(static CIFilterGenerator, static #"disconnectObject:withKey:toObject:withKey:") = Void, Id, NSString, Id, NSString;
overload externalInstanceMethod(static CIFilterGenerator, static #"exportKey:fromObject:withName:") = Void, NSString, Id, NSString;
overload externalInstanceMethod(static CIFilterGenerator, static #"removeExportedKey:") = Void, NSString;
overload externalInstanceMethod(static CIFilterGenerator, static #"exportedKeys") = NSDictionary;
overload externalInstanceMethod(static CIFilterGenerator, static #"setAttributes:forExportedKey:") = Void, NSDictionary, NSString;
overload externalInstanceMethod(static CIFilterGenerator, static #"classAttributes") = NSDictionary;
overload externalInstanceMethod(static CIFilterGenerator, static #"setClassAttributes:") = Void, NSDictionary;
overload externalInstanceMethod(static CIFilterGenerator, static #"filter") = CIFilter;
overload externalInstanceMethod(static CIFilterGenerator, static #"registerFilterName:") = Void, NSString;
overload externalInstanceMethod(static CIFilterGenerator, static #"writeToURL:atomically:") = Bool, NSURL, Bool;

record CIFilterShape = externalClass(NSObject);
overload externalInstanceMethod(static CIFilterShape, static #"copyWithZone:") = Id, Pointer[NSZone];
overload externalClassMethod(static CIFilterShape, static #"shapeWithRect:") = Id, CGRect;
overload externalInstanceMethod(static CIFilterShape, static #"initWithRect:") = Id, CGRect;
overload externalInstanceMethod(static CIFilterShape, static #"transformBy:interior:") = CIFilterShape, CGAffineTransform, Bool;
overload externalInstanceMethod(static CIFilterShape, static #"insetByX:Y:") = CIFilterShape, Int, Int;
overload externalInstanceMethod(static CIFilterShape, static #"unionWith:") = CIFilterShape, CIFilterShape;
overload externalInstanceMethod(static CIFilterShape, static #"unionWithRect:") = CIFilterShape, CGRect;
overload externalInstanceMethod(static CIFilterShape, static #"intersectWith:") = CIFilterShape, CIFilterShape;
overload externalInstanceMethod(static CIFilterShape, static #"intersectWithRect:") = CIFilterShape, CGRect;

record CIImage = externalClass(NSObject);
overload externalInstanceMethod(static CIImage, static #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static CIImage, static #"initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(static CIImage, static #"copyWithZone:") = Id, Pointer[NSZone];
overload externalClassMethod(static CIImage, static #"imageWithCGImage:") = CIImage, CGImageRef;
overload externalClassMethod(static CIImage, static #"imageWithCGImage:options:") = CIImage, CGImageRef, NSDictionary;
overload externalClassMethod(static CIImage, static #"imageWithCGLayer:") = CIImage, CGLayerRef;
overload externalClassMethod(static CIImage, static #"imageWithCGLayer:options:") = CIImage, CGLayerRef, NSDictionary;
overload externalClassMethod(static CIImage, static #"imageWithBitmapData:bytesPerRow:size:format:colorSpace:") = CIImage, NSData, CULong, CGSize, Int, CGColorSpaceRef;
overload externalClassMethod(static CIImage, static #"imageWithTexture:size:flipped:colorSpace:") = CIImage, UInt, CGSize, Bool, CGColorSpaceRef;
overload externalClassMethod(static CIImage, static #"imageWithContentsOfURL:") = CIImage, NSURL;
overload externalClassMethod(static CIImage, static #"imageWithContentsOfURL:options:") = CIImage, NSURL, NSDictionary;
overload externalClassMethod(static CIImage, static #"imageWithData:") = CIImage, NSData;
overload externalClassMethod(static CIImage, static #"imageWithData:options:") = CIImage, NSData, NSDictionary;
overload externalClassMethod(static CIImage, static #"imageWithCVImageBuffer:") = CIImage, CVImageBufferRef;
overload externalClassMethod(static CIImage, static #"imageWithCVImageBuffer:options:") = CIImage, CVImageBufferRef, NSDictionary;
overload externalClassMethod(static CIImage, static #"imageWithIOSurface:") = CIImage, IOSurfaceRef;
overload externalClassMethod(static CIImage, static #"imageWithIOSurface:options:") = CIImage, IOSurfaceRef, NSDictionary;
overload externalClassMethod(static CIImage, static #"imageWithColor:") = CIImage, CIColor;
overload externalClassMethod(static CIImage, static #"emptyImage") = CIImage;
overload externalInstanceMethod(static CIImage, static #"initWithCGImage:") = Id, CGImageRef;
overload externalInstanceMethod(static CIImage, static #"initWithCGImage:options:") = Id, CGImageRef, NSDictionary;
overload externalInstanceMethod(static CIImage, static #"initWithCGLayer:") = Id, CGLayerRef;
overload externalInstanceMethod(static CIImage, static #"initWithCGLayer:options:") = Id, CGLayerRef, NSDictionary;
overload externalInstanceMethod(static CIImage, static #"initWithData:") = Id, NSData;
overload externalInstanceMethod(static CIImage, static #"initWithData:options:") = Id, NSData, NSDictionary;
overload externalInstanceMethod(static CIImage, static #"initWithBitmapData:bytesPerRow:size:format:colorSpace:") = Id, NSData, CULong, CGSize, Int, CGColorSpaceRef;
overload externalInstanceMethod(static CIImage, static #"initWithTexture:size:flipped:colorSpace:") = Id, UInt, CGSize, Bool, CGColorSpaceRef;
overload externalInstanceMethod(static CIImage, static #"initWithContentsOfURL:") = Id, NSURL;
overload externalInstanceMethod(static CIImage, static #"initWithContentsOfURL:options:") = Id, NSURL, NSDictionary;
overload externalInstanceMethod(static CIImage, static #"initWithIOSurface:") = Id, IOSurfaceRef;
overload externalInstanceMethod(static CIImage, static #"initWithIOSurface:options:") = Id, IOSurfaceRef, NSDictionary;
overload externalInstanceMethod(static CIImage, static #"initWithCVImageBuffer:") = Id, CVImageBufferRef;
overload externalInstanceMethod(static CIImage, static #"initWithCVImageBuffer:options:") = Id, CVImageBufferRef, NSDictionary;
overload externalInstanceMethod(static CIImage, static #"initWithColor:") = Id, CIColor;
overload externalInstanceMethod(static CIImage, static #"imageByApplyingTransform:") = CIImage, CGAffineTransform;
overload externalInstanceMethod(static CIImage, static #"imageByCroppingToRect:") = CIImage, CGRect;
overload externalInstanceMethod(static CIImage, static #"extent") = CGRect;
overload externalInstanceMethod(static CIImage, static #"definition") = CIFilterShape;
overload externalInstanceMethod(static CIImage, static #"url") = NSURL;
overload externalInstanceMethod(static CIImage, static #"colorSpace") = CGColorSpaceRef;
overload externalClassMethod(static CIImage, static #"imageWithImageProvider:size::format:colorSpace:options:") = CIImage, Id, CULong, CULong, Int, CGColorSpaceRef, NSDictionary;
overload externalInstanceMethod(static CIImage, static #"initWithImageProvider:size::format:colorSpace:options:") = Id, Id, CULong, CULong, Int, CGColorSpaceRef, NSDictionary;

record CIImageAccumulator = externalClass(NSObject);
overload externalClassMethod(static CIImageAccumulator, static #"imageAccumulatorWithExtent:format:") = CIImageAccumulator, CGRect, Int;
overload externalInstanceMethod(static CIImageAccumulator, static #"initWithExtent:format:") = Id, CGRect, Int;
overload externalInstanceMethod(static CIImageAccumulator, static #"extent") = CGRect;
overload externalInstanceMethod(static CIImageAccumulator, static #"format") = Int;
overload externalInstanceMethod(static CIImageAccumulator, static #"image") = CIImage;
overload externalInstanceMethod(static CIImageAccumulator, static #"setImage:") = Void, CIImage;
overload externalInstanceMethod(static CIImageAccumulator, static #"setImage:dirtyRect:") = Void, CIImage, CGRect;
overload externalInstanceMethod(static CIImageAccumulator, static #"clear") = Void;

record CIKernel = externalClass(NSObject);
overload externalClassMethod(static CIKernel, static #"kernelsWithString:") = NSArray, NSString;
overload externalInstanceMethod(static CIKernel, static #"name") = NSString;
overload externalInstanceMethod(static CIKernel, static #"setROISelector:") = Void, SelectorHandle;

record CIPlugIn = externalClass(NSObject);
overload externalClassMethod(static CIPlugIn, static #"loadAllPlugIns") = Void;
overload externalClassMethod(static CIPlugIn, static #"loadNonExecutablePlugIns") = Void;
overload externalClassMethod(static CIPlugIn, static #"loadPlugIn:allowNonExecutable:") = Void, NSURL, Bool;

record CISampler = externalClass(NSObject);
overload externalInstanceMethod(static CISampler, static #"copyWithZone:") = Id, Pointer[NSZone];
overload externalClassMethod(static CISampler, static #"samplerWithImage:") = CISampler, CIImage;
overload externalVarargClassMethod(static CISampler, static #"samplerWithImage:keysAndValues:") = CISampler, CIImage, Id;
overload externalClassMethod(static CISampler, static #"samplerWithImage:options:") = CISampler, CIImage, NSDictionary;
overload externalInstanceMethod(static CISampler, static #"initWithImage:") = Id, CIImage;
overload externalVarargInstanceMethod(static CISampler, static #"initWithImage:keysAndValues:") = Id, CIImage, Id;
overload externalInstanceMethod(static CISampler, static #"initWithImage:options:") = Id, CIImage, NSDictionary;
overload externalInstanceMethod(static CISampler, static #"definition") = CIFilterShape;
overload externalInstanceMethod(static CISampler, static #"extent") = CGRect;

record CIVector = externalClass(NSObject);
overload externalInstanceMethod(static CIVector, static #"copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(static CIVector, static #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static CIVector, static #"initWithCoder:") = Id, NSCoder;
overload externalClassMethod(static CIVector, static #"vectorWithValues:count:") = CIVector, Pointer[Float], CULong;
overload externalClassMethod(static CIVector, static #"vectorWithX:") = CIVector, Float;
overload externalClassMethod(static CIVector, static #"vectorWithX:Y:") = CIVector, Float, Float;
overload externalClassMethod(static CIVector, static #"vectorWithX:Y:Z:") = CIVector, Float, Float, Float;
overload externalClassMethod(static CIVector, static #"vectorWithX:Y:Z:W:") = CIVector, Float, Float, Float, Float;
overload externalClassMethod(static CIVector, static #"vectorWithString:") = CIVector, NSString;
overload externalInstanceMethod(static CIVector, static #"initWithValues:count:") = Id, Pointer[Float], CULong;
overload externalInstanceMethod(static CIVector, static #"initWithX:") = Id, Float;
overload externalInstanceMethod(static CIVector, static #"initWithX:Y:") = Id, Float, Float;
overload externalInstanceMethod(static CIVector, static #"initWithX:Y:Z:") = Id, Float, Float, Float;
overload externalInstanceMethod(static CIVector, static #"initWithX:Y:Z:W:") = Id, Float, Float, Float, Float;
overload externalInstanceMethod(static CIVector, static #"initWithString:") = Id, NSString;
overload externalInstanceMethod(static CIVector, static #"valueAtIndex:") = Float, CULong;
overload externalInstanceMethod(static CIVector, static #"count") = CULong;
overload externalInstanceMethod(static CIVector, static #"X") = Float;
overload externalInstanceMethod(static CIVector, static #"Y") = Float;
overload externalInstanceMethod(static CIVector, static #"Z") = Float;
overload externalInstanceMethod(static CIVector, static #"W") = Float;
overload externalInstanceMethod(static CIVector, static #"stringRepresentation") = NSString;

overload externalInstanceMethod(static NSObject, static #"provideImageData:bytesPerRow:origin::size::userInfo:") = Void, RawPointer, CULong, CULong, CULong, CULong, CULong, Id;
overload externalInstanceMethod(static NSObject, static #"preferredSizeOfLayer:") = CGSize, CALayer;
overload externalInstanceMethod(static NSObject, static #"invalidateLayoutOfLayer:") = Void, CALayer;
overload externalInstanceMethod(static NSObject, static #"layoutSublayersOfLayer:") = Void, CALayer;
overload externalInstanceMethod(static NSObject, static #"displayLayer:") = Void, CALayer;
overload externalInstanceMethod(static NSObject, static #"drawLayer:inContext:") = Void, CALayer, CGContextRef;
overload externalInstanceMethod(static NSObject, static #"layoutSublayersOfLayer:") = Void, CALayer;
overload externalInstanceMethod(static NSObject, static #"actionForLayer:forKey:") = Id, CALayer, NSString;
overload externalInstanceMethod(static NSObject, static #"animationDidStart:") = Void, CAAnimation;
overload externalInstanceMethod(static NSObject, static #"animationDidStop:finished:") = Void, CAAnimation, Bool;

overload externalClassMethod(static NSValue, static #"valueWithCATransform3D:") = NSValue, CATransform3D;
overload externalInstanceMethod(static NSValue, static #"CATransform3DValue") = CATransform3D;


external kCIAttributeFilterName : NSString;

external kCIAttributeFilterDisplayName : NSString;

external kCIAttributeDescription : NSString;

external kCIAttributeReferenceDocumentation : NSString;

external kCIAttributeFilterCategories : NSString;

external kCIAttributeClass : NSString;

external kCIAttributeType : NSString;

external kCIAttributeMin : NSString;

external kCIAttributeMax : NSString;

external kCIAttributeSliderMin : NSString;

external kCIAttributeSliderMax : NSString;

external kCIAttributeDefault : NSString;

external kCIAttributeIdentity : NSString;

external kCIAttributeName : NSString;

external kCIAttributeDisplayName : NSString;

external kCIUIParameterSet : NSString;

external kCIUISetBasic : NSString;

external kCIUISetIntermediate : NSString;

external kCIUISetAdvanced : NSString;

external kCIUISetDevelopment : NSString;

external kCIAttributeTypeTime : NSString;

external kCIAttributeTypeScalar : NSString;

external kCIAttributeTypeDistance : NSString;

external kCIAttributeTypeAngle : NSString;

external kCIAttributeTypeBoolean : NSString;

external kCIAttributeTypeInteger : NSString;

external kCIAttributeTypeCount : NSString;

external kCIAttributeTypePosition : NSString;

external kCIAttributeTypeOffset : NSString;

external kCIAttributeTypePosition3 : NSString;

external kCIAttributeTypeRectangle : NSString;

external kCIAttributeTypeOpaqueColor : NSString;

external kCIAttributeTypeGradient : NSString;

external kCICategoryDistortionEffect : NSString;

external kCICategoryGeometryAdjustment : NSString;

external kCICategoryCompositeOperation : NSString;

external kCICategoryHalftoneEffect : NSString;

external kCICategoryColorAdjustment : NSString;

external kCICategoryColorEffect : NSString;

external kCICategoryTransition : NSString;

external kCICategoryTileEffect : NSString;

external kCICategoryGenerator : NSString;

external kCICategoryReduction : NSString;

external kCICategoryGradient : NSString;

external kCICategoryStylize : NSString;

external kCICategorySharpen : NSString;

external kCICategoryBlur : NSString;

external kCICategoryVideo : NSString;

external kCICategoryStillImage : NSString;

external kCICategoryInterlaced : NSString;

external kCICategoryNonSquarePixels : NSString;

external kCICategoryHighDynamicRange : NSString;

external kCICategoryBuiltIn : NSString;

external kCICategoryFilterGenerator : NSString;

external kCIApplyOptionExtent : NSString;

external kCIApplyOptionDefinition : NSString;

external kCIApplyOptionUserInfo : NSString;

external kCIOutputImageKey : NSString;

external kCIInputBackgroundImageKey : NSString;

external kCIInputImageKey : NSString;

external kCIInputTimeKey : NSString;

external kCIInputTransformKey : NSString;

external kCIInputScaleKey : NSString;

external kCIInputAspectRatioKey : NSString;

external kCIInputCenterKey : NSString;

external kCIInputRadiusKey : NSString;

external kCIInputAngleKey : NSString;

external kCIInputRefractionKey : NSString;

external kCIInputWidthKey : NSString;

external kCIInputSharpnessKey : NSString;

external kCIInputIntensityKey : NSString;

external kCIInputEVKey : NSString;

external kCIInputSaturationKey : NSString;

external kCIInputColorKey : NSString;

external kCIInputBrightnessKey : NSString;

external kCIInputContrastKey : NSString;

external kCIInputGradientImageKey : NSString;

external kCIInputMaskImageKey : NSString;

external kCIInputShadingImageKey : NSString;

external kCIInputTargetImageKey : NSString;

external kCIInputExtentKey : NSString;

external kCIFilterGeneratorExportedKey : NSString;

external kCIFilterGeneratorExportedKeyTargetObject : NSString;

external kCIFilterGeneratorExportedKeyName : NSString;

external kCIImageProviderTileSize : NSString;

external kCIImageProviderUserInfo : NSString;

external kCISamplerAffineMatrix : NSString;

external kCISamplerWrapMode : NSString;

external kCISamplerFilterMode : NSString;

external kCISamplerWrapBlack : NSString;

external kCISamplerWrapClamp : NSString;

external kCISamplerFilterNearest : NSString;

external kCISamplerFilterLinear : NSString;

external CACurrentMediaTime() : Double;

record Struct_CATransform3D (
    m11 : Float,
    m12 : Float,
    m13 : Float,
    m14 : Float,
    m21 : Float,
    m22 : Float,
    m23 : Float,
    m24 : Float,
    m31 : Float,
    m32 : Float,
    m33 : Float,
    m34 : Float,
    m41 : Float,
    m42 : Float,
    m43 : Float,
    m44 : Float,
);

alias CATransform3D = Struct_CATransform3D;

external CATransform3DIdentity : CATransform3D;

external CATransform3DIsIdentity(
    t : CATransform3D) : Bool;

external CATransform3DEqualToTransform(
    a : CATransform3D,
    b : CATransform3D) : Bool;

external CATransform3DMakeTranslation(
    tx : Float,
    ty : Float,
    tz : Float) : CATransform3D;

external CATransform3DMakeScale(
    sx : Float,
    sy : Float,
    sz : Float) : CATransform3D;

external CATransform3DMakeRotation(
    angle : Float,
    x : Float,
    y : Float,
    z : Float) : CATransform3D;

external CATransform3DTranslate(
    t : CATransform3D,
    tx : Float,
    ty : Float,
    tz : Float) : CATransform3D;

external CATransform3DScale(
    t : CATransform3D,
    sx : Float,
    sy : Float,
    sz : Float) : CATransform3D;

external CATransform3DRotate(
    t : CATransform3D,
    angle : Float,
    x : Float,
    y : Float,
    z : Float) : CATransform3D;

external CATransform3DConcat(
    a : CATransform3D,
    b : CATransform3D) : CATransform3D;

external CATransform3DInvert(
    t : CATransform3D) : CATransform3D;

external CATransform3DMakeAffineTransform(
    m : CGAffineTransform) : CATransform3D;

external CATransform3DIsAffine(
    t : CATransform3D) : Bool;

external CATransform3DGetAffineTransform(
    t : CATransform3D) : CGAffineTransform;

external kCAFillModeForwards : NSString;

external kCAFillModeBackwards : NSString;

external kCAFillModeBoth : NSString;

external kCAFillModeRemoved : NSString;

external kCAFillModeFrozen : NSString;

alias kCALayerNotSizable = 0;
alias kCALayerMinXMargin = 1;
alias kCALayerWidthSizable = 2;
alias kCALayerMaxXMargin = 4;
alias kCALayerMinYMargin = 8;
alias kCALayerHeightSizable = 16;
alias kCALayerMaxYMargin = 32;

alias kCALayerLeftEdge = 1;
alias kCALayerRightEdge = 2;
alias kCALayerBottomEdge = 4;
alias kCALayerTopEdge = 8;

external kCAGravityCenter : NSString;

external kCAGravityTop : NSString;

external kCAGravityBottom : NSString;

external kCAGravityLeft : NSString;

external kCAGravityRight : NSString;

external kCAGravityTopLeft : NSString;

external kCAGravityTopRight : NSString;

external kCAGravityBottomLeft : NSString;

external kCAGravityBottomRight : NSString;

external kCAGravityResize : NSString;

external kCAGravityResizeAspect : NSString;

external kCAGravityResizeAspectFill : NSString;

external kCAFilterNearest : NSString;

external kCAFilterLinear : NSString;

external kCAFilterTrilinear : NSString;

external kCAOnOrderIn : NSString;

external kCAOnOrderOut : NSString;

external kCATransition : NSString;

external kCAAnimationLinear : NSString;

external kCAAnimationDiscrete : NSString;

external kCAAnimationPaced : NSString;

external kCAAnimationRotateAuto : NSString;

external kCAAnimationRotateAutoReverse : NSString;

external kCATransitionFade : NSString;

external kCATransitionMoveIn : NSString;

external kCATransitionPush : NSString;

external kCATransitionReveal : NSString;

external kCATransitionFromRight : NSString;

external kCATransitionFromLeft : NSString;

external kCATransitionFromTop : NSString;

external kCATransitionFromBottom : NSString;

alias kCAConstraintMinX = 0;
alias kCAConstraintMidX = 1;
alias kCAConstraintMaxX = 2;
alias kCAConstraintWidth = 3;
alias kCAConstraintMinY = 4;
alias kCAConstraintMidY = 5;
alias kCAConstraintMaxY = 6;
alias kCAConstraintHeight = 7;

alias CAConstraintAttribute = Int;

external kCAEmitterLayerPoint : NSString;

external kCAEmitterLayerLine : NSString;

external kCAEmitterLayerRectangle : NSString;

external kCAEmitterLayerCuboid : NSString;

external kCAEmitterLayerCircle : NSString;

external kCAEmitterLayerSphere : NSString;

external kCAEmitterLayerPoints : NSString;

external kCAEmitterLayerOutline : NSString;

external kCAEmitterLayerSurface : NSString;

external kCAEmitterLayerVolume : NSString;

external kCAEmitterLayerUnordered : NSString;

external kCAEmitterLayerOldestFirst : NSString;

external kCAEmitterLayerOldestLast : NSString;

external kCAEmitterLayerBackToFront : NSString;

external kCAEmitterLayerAdditive : NSString;

external kCAGradientLayerAxial : NSString;

external kCAMediaTimingFunctionLinear : NSString;

external kCAMediaTimingFunctionEaseIn : NSString;

external kCAMediaTimingFunctionEaseOut : NSString;

external kCAMediaTimingFunctionEaseInEaseOut : NSString;

external kCAMediaTimingFunctionDefault : NSString;

external kCAScrollNone : NSString;

external kCAScrollVertically : NSString;

external kCAScrollHorizontally : NSString;

external kCAScrollBoth : NSString;

external kCAFillRuleNonZero : NSString;

external kCAFillRuleEvenOdd : NSString;

external kCALineJoinMiter : NSString;

external kCALineJoinRound : NSString;

external kCALineJoinBevel : NSString;

external kCALineCapButt : NSString;

external kCALineCapRound : NSString;

external kCALineCapSquare : NSString;

external kCATruncationNone : NSString;

external kCATruncationStart : NSString;

external kCATruncationEnd : NSString;

external kCATruncationMiddle : NSString;

external kCAAlignmentNatural : NSString;

external kCAAlignmentLeft : NSString;

external kCAAlignmentRight : NSString;

external kCAAlignmentCenter : NSString;

external kCAAlignmentJustified : NSString;

external kCATransactionAnimationDuration : NSString;

external kCATransactionDisableActions : NSString;

external kCATransactionAnimationTimingFunction : NSString;

external kCATransactionCompletionBlock : NSString;

external kCAValueFunctionRotateX : NSString;

external kCAValueFunctionRotateY : NSString;

external kCAValueFunctionRotateZ : NSString;

external kCAValueFunctionScale : NSString;

external kCAValueFunctionScaleX : NSString;

external kCAValueFunctionScaleY : NSString;

external kCAValueFunctionScaleZ : NSString;

external kCAValueFunctionTranslate : NSString;

external kCAValueFunctionTranslateX : NSString;

external kCAValueFunctionTranslateY : NSString;

external kCAValueFunctionTranslateZ : NSString;
