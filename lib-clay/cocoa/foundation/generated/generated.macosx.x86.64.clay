// Automatically generated by clay-bindgen
// language: objective-c

import cocoa.objc.*;

import libc.*;
import unix.*;
import cocoa.corefoundation.*;

private alias OpaquePointer = RawPointer;
private alias UnknownType = Int;
private alias AUnionType = Int;

record NSAffineTransform = externalClass(NSObject);
record NSAppleEventDescriptor = externalClass(NSObject);
record NSAppleEventManager = externalClass(NSObject);
record NSAppleScript = externalClass(NSObject);
record NSArchiver = externalClass(NSCoder);
record NSArray = externalClass(NSObject);
record NSAssertionHandler = externalClass(NSObject);
record NSAttributedString = externalClass(NSObject);
record NSAutoreleasePool = externalClass(NSObject);
record NSBlockOperation = externalClass(NSOperation);
record NSBundle = externalClass(NSObject);
record NSCache = externalClass(NSObject);
record NSCachedURLResponse = externalClass(NSObject);
record NSCalendar = externalClass(NSObject);
record NSCalendarDate = externalClass(NSDate);
record NSCharacterSet = externalClass(NSObject);
record NSClassDescription = externalClass(NSObject);
record NSCloneCommand = externalClass(NSScriptCommand);
record NSCloseCommand = externalClass(NSScriptCommand);
record NSCoder = externalClass(NSObject);
record NSComparisonPredicate = externalClass(NSPredicate);
record NSCompoundPredicate = externalClass(NSPredicate);
record NSCondition = externalClass(NSObject);
record NSConditionLock = externalClass(NSObject);
record NSConnection = externalClass(NSObject);
record NSConstantString = externalClass(NSSimpleCString);
record NSCountCommand = externalClass(NSScriptCommand);
record NSCountedSet = externalClass(NSMutableSet);
record NSCreateCommand = externalClass(NSScriptCommand);
record NSData = externalClass(NSObject);
record NSDate = externalClass(NSObject);
record NSDateComponents = externalClass(NSObject);
record NSDateFormatter = externalClass(NSFormatter);
record NSDecimalNumber = externalClass(NSNumber);
record NSDecimalNumberHandler = externalClass(NSObject);
record NSDeleteCommand = externalClass(NSScriptCommand);
record NSDictionary = externalClass(NSObject);
record NSDirectoryEnumerator = externalClass(NSEnumerator);
record NSDistantObject = externalClass(NSProxy);
record NSDistantObjectRequest = externalClass(NSObject);
record NSDistributedLock = externalClass(NSObject);
record NSDistributedNotificationCenter = externalClass(NSNotificationCenter);
record NSEnumerator = externalClass(NSObject);
record NSError = externalClass(NSObject);
record NSException = externalClass(NSObject);
record NSExistsCommand = externalClass(NSScriptCommand);
record NSExpression = externalClass(NSObject);
record NSFileHandle = externalClass(NSObject);
record NSFileManager = externalClass(NSObject);
record NSFormatter = externalClass(NSObject);
record NSGarbageCollector = externalClass(NSObject);
record NSGetCommand = externalClass(NSScriptCommand);
record NSHTTPCookie = externalClass(NSObject);
record NSHTTPCookieStorage = externalClass(NSObject);
record NSHTTPURLResponse = externalClass(NSURLResponse);
record NSHashTable = externalClass(NSObject);
record NSHost = externalClass(NSObject);
record NSIndexPath = externalClass(NSObject);
record NSIndexSet = externalClass(NSObject);
record NSIndexSpecifier = externalClass(NSScriptObjectSpecifier);
record NSInputStream = externalClass(NSStream);
record NSInvocation = externalClass(NSObject);
record NSInvocationOperation = externalClass(NSOperation);
record NSKeyedArchiver = externalClass(NSCoder);
record NSKeyedUnarchiver = externalClass(NSCoder);
record NSLocale = externalClass(NSObject);
record NSLock = externalClass(NSObject);
record NSLogicalTest = externalClass(NSScriptWhoseTest);
record NSMachBootstrapServer = externalClass(NSPortNameServer);
record NSMachPort = externalClass(NSPort);
record NSMapTable = externalClass(NSObject);
record NSMessagePort = externalClass(NSPort);
record NSMessagePortNameServer = externalClass(NSPortNameServer);
record NSMetadataItem = externalClass(NSObject);
record NSMetadataQuery = externalClass(NSObject);
record NSMetadataQueryAttributeValueTuple = externalClass(NSObject);
record NSMetadataQueryResultGroup = externalClass(NSObject);
record NSMethodSignature = externalClass(NSObject);
record NSMiddleSpecifier = externalClass(NSScriptObjectSpecifier);
record NSMoveCommand = externalClass(NSScriptCommand);
record NSMutableArray = externalClass(NSArray);
record NSMutableAttributedString = externalClass(NSAttributedString);
record NSMutableCharacterSet = externalClass(NSCharacterSet);
record NSMutableData = externalClass(NSData);
record NSMutableDictionary = externalClass(NSDictionary);
record NSMutableIndexSet = externalClass(NSIndexSet);
record NSMutableSet = externalClass(NSSet);
record NSMutableString = externalClass(NSString);
record NSMutableURLRequest = externalClass(NSURLRequest);
record NSNameSpecifier = externalClass(NSScriptObjectSpecifier);
record NSNetService = externalClass(NSObject);
record NSNetServiceBrowser = externalClass(NSObject);
record NSNotification = externalClass(NSObject);
record NSNotificationCenter = externalClass(NSObject);
record NSNotificationQueue = externalClass(NSObject);
record NSNull = externalClass(NSObject);
record NSNumber = externalClass(NSValue);
record NSNumberFormatter = externalClass(NSFormatter);
record NSObject = externalClass(Void);
record NSOperation = externalClass(NSObject);
record NSOperationQueue = externalClass(NSObject);
record NSOrthography = externalClass(NSObject);
record NSOutputStream = externalClass(NSStream);
record NSPipe = externalClass(NSObject);
record NSPointerArray = externalClass(NSObject);
record NSPointerFunctions = externalClass(NSObject);
record NSPort = externalClass(NSObject);
record NSPortCoder = externalClass(NSCoder);
record NSPortMessage = externalClass(NSObject);
record NSPortNameServer = externalClass(NSObject);
record NSPositionalSpecifier = externalClass(NSObject);
record NSPredicate = externalClass(NSObject);
record NSProcessInfo = externalClass(NSObject);
record NSPropertyListSerialization = externalClass(NSObject);
record NSPropertySpecifier = externalClass(NSScriptObjectSpecifier);
record NSProtocolChecker = externalClass(NSProxy);
record NSProxy = externalClass(Void);
record NSPurgeableData = externalClass(NSMutableData);
record NSQuitCommand = externalClass(NSScriptCommand);
record NSRandomSpecifier = externalClass(NSScriptObjectSpecifier);
record NSRangeSpecifier = externalClass(NSScriptObjectSpecifier);
record NSRecursiveLock = externalClass(NSObject);
record NSRelativeSpecifier = externalClass(NSScriptObjectSpecifier);
record NSRunLoop = externalClass(NSObject);
record NSScanner = externalClass(NSObject);
record NSScriptClassDescription = externalClass(NSClassDescription);
record NSScriptCoercionHandler = externalClass(NSObject);
record NSScriptCommand = externalClass(NSObject);
record NSScriptCommandDescription = externalClass(NSObject);
record NSScriptExecutionContext = externalClass(NSObject);
record NSScriptObjectSpecifier = externalClass(NSObject);
record NSScriptSuiteRegistry = externalClass(NSObject);
record NSScriptWhoseTest = externalClass(NSObject);
record NSSet = externalClass(NSObject);
record NSSetCommand = externalClass(NSScriptCommand);
record NSSimpleCString = externalClass(NSString);
record NSSocketPort = externalClass(NSPort);
record NSSocketPortNameServer = externalClass(NSPortNameServer);
record NSSortDescriptor = externalClass(NSObject);
record NSSpecifierTest = externalClass(NSScriptWhoseTest);
record NSSpellServer = externalClass(NSObject);
record NSStream = externalClass(NSObject);
record NSString = externalClass(NSObject);
record NSTask = externalClass(NSObject);
record NSTextCheckingResult = externalClass(NSObject);
record NSThread = externalClass(NSObject);
record NSTimeZone = externalClass(NSObject);
record NSTimer = externalClass(NSObject);
record NSURL = externalClass(NSObject);
record NSURLAuthenticationChallenge = externalClass(NSObject);
record NSURLCache = externalClass(NSObject);
record NSURLConnection = externalClass(NSObject);
record NSURLCredential = externalClass(NSObject);
record NSURLCredentialStorage = externalClass(NSObject);
record NSURLDownload = externalClass(NSObject);
record NSURLHandle = externalClass(NSObject);
record NSURLProtectionSpace = externalClass(NSObject);
record NSURLProtocol = externalClass(NSObject);
record NSURLRequest = externalClass(NSObject);
record NSURLResponse = externalClass(NSObject);
record NSUnarchiver = externalClass(NSCoder);
record NSUndoManager = externalClass(NSObject);
record NSUniqueIDSpecifier = externalClass(NSScriptObjectSpecifier);
record NSUserDefaults = externalClass(NSObject);
record NSValue = externalClass(NSObject);
record NSValueTransformer = externalClass(NSObject);
record NSWhoseSpecifier = externalClass(NSScriptObjectSpecifier);
record NSXMLDTD = externalClass(NSXMLNode);
record NSXMLDTDNode = externalClass(NSXMLNode);
record NSXMLDocument = externalClass(NSXMLNode);
record NSXMLElement = externalClass(NSXMLNode);
record NSXMLNode = externalClass(NSObject);
record NSXMLParser = externalClass(NSObject);
overload selector(static #"AMSymbol") = NSString;
overload selector(static #"DTD") = NSXMLDTD;
overload selector(static #"DTDKind") = CULong;
overload selector(static #"DTDNodeWithXMLString:") = Id, NSString;
overload selector(static #"HTTPBody") = NSData;
overload selector(static #"HTTPBodyStream") = NSInputStream;
overload selector(static #"HTTPMethod") = NSString;
overload selector(static #"HTTPShouldHandleCookies") = Bool;
overload selector(static #"ISOCountryCodes") = NSArray;
overload selector(static #"ISOCurrencyCodes") = NSArray;
overload selector(static #"ISOLanguageCodes") = NSArray;
overload selector(static #"MIMEType") = NSString;
overload selector(static #"PMSymbol") = NSString;
overload selector(static #"TXTRecordData") = NSData;
overload selector(static #"URI") = NSString;
overload selector(static #"URL") = NSURL;
overload selector(static #"URL:resourceDataDidBecomeAvailable:") = Void, NSURL, NSData;
overload selector(static #"URL:resourceDidFailLoadingWithReason:") = Void, NSURL, NSString;
overload selector(static #"URLByAppendingPathComponent:") = NSURL, NSString;
overload selector(static #"URLByAppendingPathExtension:") = NSURL, NSString;
overload selector(static #"URLByDeletingLastPathComponent") = NSURL;
overload selector(static #"URLByDeletingPathExtension") = NSURL;
overload selector(static #"URLByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:") = Id, NSData, CULong, NSURL, Pointer[Bool], Pointer[NSError];
overload selector(static #"URLByResolvingSymlinksInPath") = NSURL;
overload selector(static #"URLByStandardizingPath") = NSURL;
overload selector(static #"URLForAuxiliaryExecutable:") = NSURL, NSString;
overload selector(static #"URLForDirectory:inDomain:appropriateForURL:create:error:") = NSURL, CULong, CULong, NSURL, Bool, Pointer[NSError];
overload selector(static #"URLForKey:") = NSURL, NSString;
overload selector(static #"URLForResource:withExtension:") = NSURL, NSString, NSString;
overload selector(static #"URLForResource:withExtension:subdirectory:") = NSURL, NSString, NSString, NSString;
overload selector(static #"URLForResource:withExtension:subdirectory:inBundleWithURL:") = NSURL, NSString, NSString, NSString, NSURL;
overload selector(static #"URLForResource:withExtension:subdirectory:localization:") = NSURL, NSString, NSString, NSString, NSString;
overload selector(static #"URLHandleClassForURL:") = Id, NSURL;
overload selector(static #"URLHandleUsingCache:") = NSURLHandle, Bool;
overload selector(static #"URLResourceDidCancelLoading:") = Void, NSURL;
overload selector(static #"URLResourceDidFinishLoading:") = Void, NSURL;
overload selector(static #"URLWithString:") = Id, NSString;
overload selector(static #"URLWithString:relativeToURL:") = Id, NSString, NSURL;
overload selector(static #"URLsForDirectory:inDomains:") = NSArray, CULong, CULong;
overload selector(static #"URLsForResourcesWithExtension:subdirectory:") = NSArray, NSString, NSString;
overload selector(static #"URLsForResourcesWithExtension:subdirectory:inBundleWithURL:") = NSArray, NSString, NSString, NSURL;
overload selector(static #"URLsForResourcesWithExtension:subdirectory:localization:") = NSArray, NSString, NSString, NSString;
overload selector(static #"UTF8String") = Pointer[CChar];
overload selector(static #"XMLData") = NSData;
overload selector(static #"XMLDataWithOptions:") = NSData, CULong;
overload selector(static #"XMLString") = NSString;
overload selector(static #"XMLStringWithOptions:") = NSString, CULong;
overload selector(static #"XPath") = NSString;
overload selector(static #"abbreviation") = NSString;
overload selector(static #"abbreviationDictionary") = NSDictionary;
overload selector(static #"abbreviationForDate:") = NSString, NSDate;
overload selector(static #"abortParsing") = Void;
overload selector(static #"absoluteString") = NSString;
overload selector(static #"absoluteURL") = NSURL;
overload selector(static #"acceptConnectionInBackgroundAndNotify") = Void;
overload selector(static #"acceptConnectionInBackgroundAndNotifyForModes:") = Void, NSArray;
overload selector(static #"acceptInputForMode:beforeDate:") = Void, NSString, NSDate;
overload selector(static #"accessInstanceVariablesDirectly") = Bool;
overload selector(static #"acquireFunction") = CCodePointer[(RawPointer,CCodePointer[(RawPointer),(CULong)],CChar),(RawPointer)];
overload selector(static #"activeProcessorCount") = CULong;
overload selector(static #"addAttribute:") = Void, NSXMLNode;
overload selector(static #"addAttribute:value:range:") = Void, NSString, Id, NSRange;
overload selector(static #"addAttributes:range:") = Void, NSDictionary, NSRange;
overload selector(static #"addCharactersInRange:") = Void, NSRange;
overload selector(static #"addCharactersInString:") = Void, NSString;
overload selector(static #"addChild:") = Void, NSXMLNode;
overload selector(static #"addClient:") = Void, Id;
overload selector(static #"addConnection:toRunLoop:forMode:") = Void, NSConnection, NSRunLoop, NSString;
overload selector(static #"addDependency:") = Void, NSOperation;
overload selector(static #"addEntriesFromDictionary:") = Void, NSDictionary;
overload selector(static #"addExecutionBlock:") = Void, UnknownType;
overload selector(static #"addIndex:") = Void, CULong;
overload selector(static #"addIndexes:") = Void, NSIndexSet;
overload selector(static #"addIndexesInRange:") = Void, NSRange;
overload selector(static #"addNamespace:") = Void, NSXMLNode;
overload selector(static #"addObject:") = Void, Id;
overload selector(static #"addObjectsFromArray:") = Void, NSArray;
overload selector(static #"addObserver:forKeyPath:options:context:") = Void, NSObject, NSString, CULong, RawPointer;
overload selector(static #"addObserver:selector:name:object:") = Void, Id, SelectorHandle, NSString, Id;
overload selector(static #"addObserver:selector:name:object:suspensionBehavior:") = Void, Id, SelectorHandle, NSString, NSString, CULong;
overload selector(static #"addObserver:toObjectsAtIndexes:forKeyPath:options:context:") = Void, NSObject, NSIndexSet, NSString, CULong, RawPointer;
overload selector(static #"addObserverForName:object:queue:usingBlock:") = Id, NSString, Id, NSOperationQueue, UnknownType;
overload selector(static #"addOperation:") = Void, NSOperation;
overload selector(static #"addOperationWithBlock:") = Void, UnknownType;
overload selector(static #"addOperations:waitUntilFinished:") = Void, NSArray, Bool;
overload selector(static #"addPointer:") = Void, RawPointer;
overload selector(static #"addPort:forMode:") = Void, NSPort, NSString;
overload selector(static #"addRequestMode:") = Void, NSString;
overload selector(static #"addRunLoop:") = Void, NSRunLoop;
overload selector(static #"addSuiteNamed:") = Void, NSString;
overload selector(static #"addTimeInterval:") = Id, Double;
overload selector(static #"addTimer:forMode:") = Void, NSTimer, NSString;
overload selector(static #"addValue:forHTTPHeaderField:") = Void, NSString, NSString;
overload selector(static #"address") = Id;
overload selector(static #"addressCheckingResultWithRange:components:") = NSTextCheckingResult, NSRange, NSDictionary;
overload selector(static #"addressComponents") = NSDictionary;
overload selector(static #"addresses") = NSArray;
overload selector(static #"aeDesc") = Pointer[AEDesc];
overload selector(static #"aeteResource:") = NSData, NSString;
overload selector(static #"allBundles") = NSArray;
overload selector(static #"allConnections") = NSArray;
overload selector(static #"allCredentials") = NSDictionary;
overload selector(static #"allFrameworks") = NSArray;
overload selector(static #"allHTTPHeaderFields") = NSDictionary;
overload selector(static #"allHeaderFields") = NSDictionary;
overload selector(static #"allKeys") = NSArray;
overload selector(static #"allKeysForObject:") = NSArray, Id;
overload selector(static #"allLanguages") = NSArray;
overload selector(static #"allObjects") = NSArray;
overload selector(static #"allScripts") = NSArray;
overload selector(static #"allValues") = NSArray;
overload selector(static #"alloc") = Id;
overload selector(static #"allocWithZone:") = Id, Pointer[NSZone];
overload selector(static #"allowsFloats") = Bool;
overload selector(static #"allowsKeyedCoding") = Bool;
overload selector(static #"allowsNaturalLanguage") = Bool;
overload selector(static #"allowsReverseTransformation") = Bool;
overload selector(static #"alphanumericCharacterSet") = Id;
overload selector(static #"alwaysShowsDecimalSeparator") = Bool;
overload selector(static #"andPredicateWithSubpredicates:") = NSPredicate, NSArray;
overload selector(static #"anyObject") = Id;
overload selector(static #"appendAttributedString:") = Void, NSAttributedString;
overload selector(static #"appendBytes:length:") = Void, RawPointer, CULong;
overload selector(static #"appendData:") = Void, NSData;
overload varargSelector(static #"appendFormat:") = Void, NSString;
overload selector(static #"appendString:") = Void, NSString;
overload selector(static #"appendTransform:") = Void, NSAffineTransform;
overload selector(static #"appleEvent") = NSAppleEventDescriptor;
overload selector(static #"appleEventClassCode") = UInt;
overload selector(static #"appleEventCode") = UInt;
overload selector(static #"appleEventCodeForArgumentWithName:") = UInt, NSString;
overload selector(static #"appleEventCodeForKey:") = UInt, NSString;
overload selector(static #"appleEventCodeForReturnType") = UInt;
overload selector(static #"appleEventCodeForSuite:") = UInt, NSString;
overload selector(static #"appleEventForSuspensionID:") = NSAppleEventDescriptor, NSAppleEventManagerSuspensionID;
overload selector(static #"appleEventWithEventClass:eventID:targetDescriptor:returnID:transactionID:") = NSAppleEventDescriptor, UInt, UInt, NSAppleEventDescriptor, Short, Int;
overload selector(static #"archiveRootObject:toFile:") = Bool, Id, NSString;
overload selector(static #"archivedDataWithRootObject:") = NSData, Id;
overload selector(static #"archiverData") = NSMutableData;
overload selector(static #"argumentNames") = NSArray;
overload selector(static #"arguments") = Id;
overload selector(static #"argumentsRetained") = Bool;
overload selector(static #"array") = Id;
overload selector(static #"arrayByAddingObject:") = NSArray, Id;
overload selector(static #"arrayByAddingObjectsFromArray:") = NSArray, NSArray;
overload selector(static #"arrayForKey:") = NSArray, NSString;
overload selector(static #"arrayWithArray:") = Id, NSArray;
overload selector(static #"arrayWithCapacity:") = Id, CULong;
overload selector(static #"arrayWithContentsOfFile:") = Id, NSString;
overload selector(static #"arrayWithContentsOfURL:") = Id, NSURL;
overload selector(static #"arrayWithObject:") = Id, Id;
overload varargSelector(static #"arrayWithObjects:") = Id, Id;
overload selector(static #"arrayWithObjects:count:") = Id, Pointer[Id], CULong;
overload selector(static #"ascending") = Bool;
overload selector(static #"attemptRecoveryFromError:optionIndex:") = Bool, NSError, CULong;
overload selector(static #"attemptRecoveryFromError:optionIndex:delegate:didRecoverSelector:contextInfo:") = Void, NSError, CULong, Id, SelectorHandle, RawPointer;
overload selector(static #"attribute") = NSString;
overload selector(static #"attribute:atIndex:effectiveRange:") = Id, NSString, CULong, NSRangePointer;
overload selector(static #"attribute:atIndex:longestEffectiveRange:inRange:") = Id, NSString, CULong, NSRangePointer, NSRange;
overload selector(static #"attributeDeclarationForName:elementName:") = NSXMLDTDNode, NSString, NSString;
overload selector(static #"attributeDescriptorForKeyword:") = NSAppleEventDescriptor, UInt;
overload selector(static #"attributeForLocalName:URI:") = NSXMLNode, NSString, NSString;
overload selector(static #"attributeForName:") = NSXMLNode, NSString;
overload selector(static #"attributeKeys") = NSArray;
overload selector(static #"attributeWithName:URI:stringValue:") = Id, NSString, NSString, NSString;
overload selector(static #"attributeWithName:stringValue:") = Id, NSString, NSString;
overload selector(static #"attributedStringForNil") = NSAttributedString;
overload selector(static #"attributedStringForNotANumber") = NSAttributedString;
overload selector(static #"attributedStringForObjectValue:withDefaultAttributes:") = NSAttributedString, Id, NSDictionary;
overload selector(static #"attributedStringForZero") = NSAttributedString;
overload selector(static #"attributedSubstringFromRange:") = NSAttributedString, NSRange;
overload selector(static #"attributes") = NSArray;
overload selector(static #"attributesAtIndex:effectiveRange:") = NSDictionary, CULong, NSRangePointer;
overload selector(static #"attributesAtIndex:longestEffectiveRange:inRange:") = NSDictionary, CULong, NSRangePointer, NSRange;
overload selector(static #"attributesOfFileSystemForPath:error:") = NSDictionary, NSString, Pointer[NSError];
overload selector(static #"attributesOfItemAtPath:error:") = NSDictionary, NSString, Pointer[NSError];
overload selector(static #"authenticationMethod") = NSString;
overload selector(static #"autoContentAccessingProxy") = Id;
overload selector(static #"automaticallyNotifiesObserversForKey:") = Bool, NSString;
overload selector(static #"autoupdatingCurrentCalendar") = Id;
overload selector(static #"autoupdatingCurrentLocale") = Id;
overload selector(static #"availableData") = NSData;
overload selector(static #"availableLocaleIdentifiers") = NSArray;
overload selector(static #"availableResourceData") = NSData;
overload selector(static #"availableStringEncodings") = Pointer[CULong];
overload selector(static #"awakeAfterUsingCoder:") = Id, NSCoder;
overload selector(static #"backgroundLoadDidFailWithReason:") = Void, NSString;
overload selector(static #"baseSpecifier") = NSScriptObjectSpecifier;
overload selector(static #"baseURL") = NSURL;
overload selector(static #"beginEditing") = Void;
overload selector(static #"beginLoadInBackground") = Void;
overload selector(static #"beginUndoGrouping") = Void;
overload selector(static #"bitmapRepresentation") = NSData;
overload selector(static #"blockOperationWithBlock:") = Id, UnknownType;
overload selector(static #"bookmarkDataWithContentsOfURL:error:") = NSData, NSURL, Pointer[NSError];
overload selector(static #"bookmarkDataWithOptions:includingResourceValuesForKeys:relativeToURL:error:") = NSData, CULong, NSArray, NSURL, Pointer[NSError];
overload selector(static #"boolForKey:") = Bool, NSString;
overload selector(static #"boolValue") = Bool;
overload selector(static #"booleanValue") = CUChar;
overload selector(static #"breakLock") = Void;
overload selector(static #"broadcast") = Void;
overload selector(static #"builtInPlugInsPath") = NSString;
overload selector(static #"builtInPlugInsURL") = NSURL;
overload selector(static #"bundleForClass:") = NSBundle, Id;
overload selector(static #"bundleForSuite:") = NSBundle, NSString;
overload selector(static #"bundleIdentifier") = NSString;
overload selector(static #"bundlePath") = NSString;
overload selector(static #"bundleURL") = NSURL;
overload selector(static #"bundleWithIdentifier:") = NSBundle, NSString;
overload selector(static #"bundleWithPath:") = NSBundle, NSString;
overload selector(static #"bundleWithURL:") = NSBundle, NSURL;
overload selector(static #"bytes") = RawPointer;
overload selector(static #"cString") = Pointer[CChar];
overload selector(static #"cStringLength") = CULong;
overload selector(static #"cStringUsingEncoding:") = Pointer[CChar], CULong;
overload selector(static #"cachePolicy") = CULong;
overload selector(static #"cachedHandleForURL:") = NSURLHandle, NSURL;
overload selector(static #"cachedResponse") = NSCachedURLResponse;
overload selector(static #"cachedResponseForRequest:") = NSCachedURLResponse, NSURLRequest;
overload selector(static #"calendar") = NSCalendar;
overload selector(static #"calendarDate") = Id;
overload selector(static #"calendarFormat") = NSString;
overload selector(static #"calendarIdentifier") = NSString;
overload selector(static #"callStackReturnAddresses") = NSArray;
overload selector(static #"callStackSymbols") = NSArray;
overload selector(static #"canBeConvertedToEncoding:") = Bool, CULong;
overload selector(static #"canHandleRequest:") = Bool, NSURLRequest;
overload selector(static #"canInitWithRequest:") = Bool, NSURLRequest;
overload selector(static #"canInitWithURL:") = Bool, NSURL;
overload selector(static #"canRedo") = Bool;
overload selector(static #"canResumeDownloadDecodedWithEncodingMIMEType:") = Bool, NSString;
overload selector(static #"canUndo") = Bool;
overload selector(static #"cancel") = Void;
overload selector(static #"cancelAllOperations") = Void;
overload selector(static #"cancelLoadInBackground") = Void;
overload selector(static #"cancelPerformSelector:target:argument:") = Void, SelectorHandle, Id, Id;
overload selector(static #"cancelPerformSelectorsWithTarget:") = Void, Id;
overload selector(static #"cancelPreviousPerformRequestsWithTarget:") = Void, Id;
overload selector(static #"cancelPreviousPerformRequestsWithTarget:selector:object:") = Void, Id, SelectorHandle, Id;
overload selector(static #"canonicalLanguageIdentifierFromString:") = NSString, NSString;
overload selector(static #"canonicalLocaleIdentifierFromString:") = NSString, NSString;
overload selector(static #"canonicalRequestForRequest:") = NSURLRequest, NSURLRequest;
overload selector(static #"canonicalXMLStringPreservingComments:") = NSString, Bool;
overload selector(static #"capitalizedLetterCharacterSet") = Id;
overload selector(static #"capitalizedString") = NSString;
overload selector(static #"caseInsensitiveCompare:") = CLong, NSString;
overload selector(static #"caseSensitive") = Bool;
overload selector(static #"certificates") = NSArray;
overload selector(static #"changeCurrentDirectoryPath:") = Bool, NSString;
overload selector(static #"changeFileAttributes:atPath:") = Bool, NSDictionary, NSString;
overload selector(static #"charValue") = CChar;
overload selector(static #"characterAtIndex:") = UShort, CULong;
overload selector(static #"characterDirectionForLanguage:") = CULong, NSString;
overload selector(static #"characterEncoding") = NSString;
overload selector(static #"characterIsMember:") = Bool, UShort;
overload selector(static #"characterSetWithBitmapRepresentation:") = Id, NSData;
overload selector(static #"characterSetWithCharactersInString:") = Id, NSString;
overload selector(static #"characterSetWithContentsOfFile:") = Id, NSString;
overload selector(static #"characterSetWithRange:") = Id, NSRange;
overload selector(static #"charactersToBeSkipped") = NSCharacterSet;
overload selector(static #"checkResourceIsReachableAndReturnError:") = Bool, Pointer[NSError];
overload selector(static #"childAtIndex:") = NSXMLNode, CULong;
overload selector(static #"childCount") = CULong;
overload selector(static #"childSpecifier") = NSScriptObjectSpecifier;
overload selector(static #"children") = NSArray;
overload selector(static #"class") = Id;
overload selector(static #"classCode") = UInt;
overload selector(static #"classDescription") = NSClassDescription;
overload selector(static #"classDescriptionForClass:") = Id, Id;
overload selector(static #"classDescriptionForKey:") = NSScriptClassDescription, NSString;
overload selector(static #"classDescriptionWithAppleEventCode:") = NSScriptClassDescription, UInt;
overload selector(static #"classDescriptionsInSuite:") = NSDictionary, NSString;
overload selector(static #"classFallbacksForKeyedArchiver") = NSArray;
overload selector(static #"classForArchiver") = Id;
overload selector(static #"classForClassName:") = Id, NSString;
overload selector(static #"classForCoder") = Id;
overload selector(static #"classForKeyedArchiver") = Id;
overload selector(static #"classForKeyedUnarchiver") = Id;
overload selector(static #"classForPortCoder") = Id;
overload selector(static #"className") = NSString;
overload selector(static #"classNameDecodedForArchiveClassName:") = NSString, NSString;
overload selector(static #"classNameEncodedForTrueClassName:") = NSString, NSString;
overload selector(static #"classNameForClass:") = NSString, Id;
overload selector(static #"classNamed:") = Id, NSString;
overload selector(static #"client") = Id;
overload selector(static #"close") = Void;
overload selector(static #"closeFile") = Void;
overload selector(static #"code") = CLong;
overload selector(static #"coerceToDescriptorType:") = NSAppleEventDescriptor, UInt;
overload selector(static #"coerceValue:forKey:") = Id, Id, NSString;
overload selector(static #"coerceValue:toClass:") = Id, Id, Id;
overload selector(static #"collectExhaustively") = Void;
overload selector(static #"collectIfNeeded") = Void;
overload selector(static #"collection") = Id;
overload selector(static #"columnNumber") = CLong;
overload selector(static #"commandClassName") = NSString;
overload selector(static #"commandDescription") = NSScriptCommandDescription;
overload selector(static #"commandDescriptionWithAppleEventClass:andAppleEventCode:") = NSScriptCommandDescription, UInt, UInt;
overload selector(static #"commandDescriptionsInSuite:") = NSDictionary, NSString;
overload selector(static #"commandName") = NSString;
overload selector(static #"comment") = NSString;
overload selector(static #"commentURL") = NSURL;
overload selector(static #"commentWithStringValue:") = Id, NSString;
overload selector(static #"commonISOCurrencyCodes") = NSArray;
overload selector(static #"commonPrefixWithString:options:") = NSString, NSString, CULong;
overload selector(static #"compact") = Void;
overload selector(static #"comparator") = NSComparator;
overload selector(static #"compare:") = CLong, NSNumber;
overload selector(static #"compare:options:") = CLong, NSString, CULong;
overload selector(static #"compare:options:range:") = CLong, NSString, CULong, NSRange;
overload selector(static #"compare:options:range:locale:") = CLong, NSString, CULong, NSRange, Id;
overload selector(static #"compareObject:toObject:") = CLong, Id, Id;
overload selector(static #"comparisonPredicateModifier") = CULong;
overload selector(static #"compileAndReturnError:") = Bool, Pointer[NSDictionary];
overload selector(static #"completePathIntoString:caseSensitive:matchesIntoArray:filterTypes:") = CULong, Pointer[NSString], Bool, Pointer[NSArray], NSArray;
overload selector(static #"completionBlock") = UnknownType;
overload selector(static #"components") = NSArray;
overload selector(static #"components:fromDate:") = NSDateComponents, CULong, NSDate;
overload selector(static #"components:fromDate:toDate:options:") = NSDateComponents, CULong, NSDate, NSDate, CULong;
overload selector(static #"componentsFromLocaleIdentifier:") = NSDictionary, NSString;
overload selector(static #"componentsJoinedByString:") = NSString, NSString;
overload selector(static #"componentsSeparatedByCharactersInSet:") = NSArray, NSCharacterSet;
overload selector(static #"componentsSeparatedByString:") = NSArray, NSString;
overload selector(static #"componentsToDisplayForPath:") = NSArray, NSString;
overload selector(static #"compoundPredicateType") = CULong;
overload selector(static #"condition") = CLong;
overload selector(static #"configureAsServer") = Void;
overload selector(static #"conformsToProtocol:") = Bool, Id;
overload selector(static #"connection") = NSConnection;
overload selector(static #"connection:canAuthenticateAgainstProtectionSpace:") = Bool, NSURLConnection, NSURLProtectionSpace;
overload selector(static #"connection:didCancelAuthenticationChallenge:") = Void, NSURLConnection, NSURLAuthenticationChallenge;
overload selector(static #"connection:didFailWithError:") = Void, NSURLConnection, NSError;
overload selector(static #"connection:didReceiveAuthenticationChallenge:") = Void, NSURLConnection, NSURLAuthenticationChallenge;
overload selector(static #"connection:didReceiveData:") = Void, NSURLConnection, NSData;
overload selector(static #"connection:didReceiveResponse:") = Void, NSURLConnection, NSURLResponse;
overload selector(static #"connection:didSendBodyData:totalBytesWritten:totalBytesExpectedToWrite:") = Void, NSURLConnection, CLong, CLong, CLong;
overload selector(static #"connection:needNewBodyStream:") = NSInputStream, NSURLConnection, NSURLRequest;
overload selector(static #"connection:willCacheResponse:") = NSCachedURLResponse, NSURLConnection, NSCachedURLResponse;
overload selector(static #"connection:willSendRequest:redirectResponse:") = NSURLRequest, NSURLConnection, NSURLRequest, NSURLResponse;
overload selector(static #"connectionDidFinishLoading:") = Void, NSURLConnection;
overload selector(static #"connectionForProxy") = NSConnection;
overload selector(static #"connectionShouldUseCredentialStorage:") = Bool, NSURLConnection;
overload selector(static #"connectionWithReceivePort:sendPort:") = Id, NSPort, NSPort;
overload selector(static #"connectionWithRegisteredName:host:") = Id, NSString, NSString;
overload selector(static #"connectionWithRegisteredName:host:usingNameServer:") = Id, NSString, NSString, NSPortNameServer;
overload selector(static #"connectionWithRequest:delegate:") = NSURLConnection, NSURLRequest, Id;
overload selector(static #"constantValue") = Id;
overload selector(static #"containerClassDescription") = NSScriptClassDescription;
overload selector(static #"containerIsObjectBeingTested") = Bool;
overload selector(static #"containerIsRangeContainerObject") = Bool;
overload selector(static #"containerSpecifier") = NSScriptObjectSpecifier;
overload selector(static #"containsIndex:") = Bool, CULong;
overload selector(static #"containsIndexes:") = Bool, NSIndexSet;
overload selector(static #"containsIndexesInRange:") = Bool, NSRange;
overload selector(static #"containsObject:") = Bool, Id;
overload selector(static #"containsValueForKey:") = Bool, NSString;
overload selector(static #"contentsAtPath:") = NSData, NSString;
overload selector(static #"contentsEqualAtPath:andPath:") = Bool, NSString, NSString;
overload selector(static #"contentsOfDirectoryAtPath:error:") = NSArray, NSString, Pointer[NSError];
overload selector(static #"contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:") = NSArray, NSURL, NSArray, CULong, Pointer[NSError];
overload selector(static #"controlCharacterSet") = Id;
overload selector(static #"conversation") = Id;
overload selector(static #"cookieAcceptPolicy") = CULong;
overload selector(static #"cookieWithProperties:") = Id, NSDictionary;
overload selector(static #"cookies") = NSArray;
overload selector(static #"cookiesForURL:") = NSArray, NSURL;
overload selector(static #"cookiesWithResponseHeaderFields:forURL:") = NSArray, NSDictionary, NSURL;
overload selector(static #"copy") = Id;
overload selector(static #"copyItemAtPath:toPath:error:") = Bool, NSString, NSString, Pointer[NSError];
overload selector(static #"copyItemAtURL:toURL:error:") = Bool, NSURL, NSURL, Pointer[NSError];
overload selector(static #"copyPath:toPath:handler:") = Bool, NSString, NSString, Id;
overload selector(static #"copyScriptingValue:forKey:withProperties:") = Id, Id, NSString, NSDictionary;
overload selector(static #"copyWithZone:") = Id, Pointer[NSZone];
overload selector(static #"correctionCheckingResultWithRange:replacementString:") = NSTextCheckingResult, NSRange, NSString;
overload selector(static #"count") = CULong;
overload selector(static #"countForObject:") = CULong, Id;
overload selector(static #"countLimit") = CULong;
overload selector(static #"countOfIndexesInRange:") = CULong, NSRange;
overload selector(static #"createClassDescription") = NSScriptClassDescription;
overload selector(static #"createCommandInstance") = NSScriptCommand;
overload selector(static #"createCommandInstanceWithZone:") = NSScriptCommand, Pointer[NSZone];
overload selector(static #"createDirectoryAtPath:attributes:") = Bool, NSString, NSDictionary;
overload selector(static #"createDirectoryAtPath:withIntermediateDirectories:attributes:error:") = Bool, NSString, Bool, NSDictionary, Pointer[NSError];
overload selector(static #"createFileAtPath:contents:attributes:") = Bool, NSString, NSData, NSDictionary;
overload selector(static #"createSymbolicLinkAtPath:pathContent:") = Bool, NSString, NSString;
overload selector(static #"createSymbolicLinkAtPath:withDestinationPath:error:") = Bool, NSString, NSString, Pointer[NSError];
overload selector(static #"credentialForTrust:") = NSURLCredential, SecTrustRef;
overload selector(static #"credentialWithIdentity:certificates:persistence:") = NSURLCredential, SecIdentityRef, NSArray, CULong;
overload selector(static #"credentialWithUser:password:persistence:") = NSURLCredential, NSString, NSString, CULong;
overload selector(static #"credentialsForProtectionSpace:") = NSDictionary, NSURLProtectionSpace;
overload selector(static #"currencyCode") = NSString;
overload selector(static #"currencyDecimalSeparator") = NSString;
overload selector(static #"currencyGroupingSeparator") = NSString;
overload selector(static #"currencySymbol") = NSString;
overload selector(static #"currentAppleEvent") = NSAppleEventDescriptor;
overload selector(static #"currentCalendar") = Id;
overload selector(static #"currentCommand") = NSScriptCommand;
overload selector(static #"currentConversation") = Id;
overload selector(static #"currentDirectoryPath") = NSString;
overload selector(static #"currentDiskUsage") = CULong;
overload selector(static #"currentHandler") = NSAssertionHandler;
overload selector(static #"currentHost") = NSHost;
overload selector(static #"currentLocale") = Id;
overload selector(static #"currentMemoryUsage") = CULong;
overload selector(static #"currentMode") = NSString;
overload selector(static #"currentQueue") = Id;
overload selector(static #"currentReplyAppleEvent") = NSAppleEventDescriptor;
overload selector(static #"currentRunLoop") = NSRunLoop;
overload selector(static #"currentThread") = NSThread;
overload selector(static #"customSelector") = SelectorHandle;
overload selector(static #"dashCheckingResultWithRange:replacementString:") = NSTextCheckingResult, NSRange, NSString;
overload selector(static #"data") = Id;
overload selector(static #"dataForKey:") = NSData, NSString;
overload selector(static #"dataFromPropertyList:format:errorDescription:") = NSData, Id, CULong, Pointer[NSString];
overload selector(static #"dataFromTXTRecordDictionary:") = NSData, NSDictionary;
overload selector(static #"dataUsingEncoding:") = NSData, CULong;
overload selector(static #"dataUsingEncoding:allowLossyConversion:") = NSData, CULong, Bool;
overload selector(static #"dataWithBytes:length:") = Id, RawPointer, CULong;
overload selector(static #"dataWithBytesNoCopy:length:") = Id, RawPointer, CULong;
overload selector(static #"dataWithBytesNoCopy:length:freeWhenDone:") = Id, RawPointer, CULong, Bool;
overload selector(static #"dataWithCapacity:") = Id, CULong;
overload selector(static #"dataWithContentsOfFile:") = Id, NSString;
overload selector(static #"dataWithContentsOfFile:options:error:") = Id, NSString, CULong, Pointer[NSError];
overload selector(static #"dataWithContentsOfMappedFile:") = Id, NSString;
overload selector(static #"dataWithContentsOfURL:") = Id, NSURL;
overload selector(static #"dataWithContentsOfURL:options:error:") = Id, NSURL, CULong, Pointer[NSError];
overload selector(static #"dataWithData:") = Id, NSData;
overload selector(static #"dataWithLength:") = Id, CULong;
overload selector(static #"dataWithPropertyList:format:options:error:") = NSData, Id, CULong, CULong, Pointer[NSError];
overload selector(static #"date") = Id;
overload selector(static #"dateByAddingComponents:toDate:options:") = NSDate, NSDateComponents, NSDate, CULong;
overload selector(static #"dateByAddingTimeInterval:") = Id, Double;
overload selector(static #"dateByAddingYears:months:days:hours:minutes:seconds:") = NSCalendarDate, CLong, CLong, CLong, CLong, CLong, CLong;
overload selector(static #"dateCheckingResultWithRange:date:") = NSTextCheckingResult, NSRange, NSDate;
overload selector(static #"dateCheckingResultWithRange:date:timeZone:duration:") = NSTextCheckingResult, NSRange, NSDate, NSTimeZone, Double;
overload selector(static #"dateFormat") = NSString;
overload selector(static #"dateFormatFromTemplate:options:locale:") = NSString, NSString, CULong, NSLocale;
overload selector(static #"dateFromComponents:") = NSDate, NSDateComponents;
overload selector(static #"dateFromString:") = NSDate, NSString;
overload selector(static #"dateStyle") = CULong;
overload selector(static #"dateWithCalendarFormat:timeZone:") = NSCalendarDate, NSString, NSTimeZone;
overload selector(static #"dateWithNaturalLanguageString:") = Id, NSString;
overload selector(static #"dateWithNaturalLanguageString:locale:") = Id, NSString, Id;
overload selector(static #"dateWithString:") = Id, NSString;
overload selector(static #"dateWithString:calendarFormat:") = Id, NSString, NSString;
overload selector(static #"dateWithString:calendarFormat:locale:") = Id, NSString, NSString, Id;
overload selector(static #"dateWithTimeInterval:sinceDate:") = Id, Double, NSDate;
overload selector(static #"dateWithTimeIntervalSince1970:") = Id, Double;
overload selector(static #"dateWithTimeIntervalSinceNow:") = Id, Double;
overload selector(static #"dateWithTimeIntervalSinceReferenceDate:") = Id, Double;
overload selector(static #"dateWithYear:month:day:hour:minute:second:timeZone:") = Id, CLong, CULong, CULong, CULong, CULong, CULong, NSTimeZone;
overload selector(static #"day") = CLong;
overload selector(static #"dayOfCommonEra") = CLong;
overload selector(static #"dayOfMonth") = CLong;
overload selector(static #"dayOfWeek") = CLong;
overload selector(static #"dayOfYear") = CLong;
overload selector(static #"daylightSavingTimeOffset") = Double;
overload selector(static #"daylightSavingTimeOffsetForDate:") = Double, NSDate;
overload selector(static #"dealloc") = Void;
overload selector(static #"decimalDigitCharacterSet") = Id;
overload selector(static #"decimalNumberByAdding:") = NSDecimalNumber, NSDecimalNumber;
overload selector(static #"decimalNumberByAdding:withBehavior:") = NSDecimalNumber, NSDecimalNumber, Id;
overload selector(static #"decimalNumberByDividingBy:") = NSDecimalNumber, NSDecimalNumber;
overload selector(static #"decimalNumberByDividingBy:withBehavior:") = NSDecimalNumber, NSDecimalNumber, Id;
overload selector(static #"decimalNumberByMultiplyingBy:") = NSDecimalNumber, NSDecimalNumber;
overload selector(static #"decimalNumberByMultiplyingBy:withBehavior:") = NSDecimalNumber, NSDecimalNumber, Id;
overload selector(static #"decimalNumberByMultiplyingByPowerOf10:") = NSDecimalNumber, Short;
overload selector(static #"decimalNumberByMultiplyingByPowerOf10:withBehavior:") = NSDecimalNumber, Short, Id;
overload selector(static #"decimalNumberByRaisingToPower:") = NSDecimalNumber, CULong;
overload selector(static #"decimalNumberByRaisingToPower:withBehavior:") = NSDecimalNumber, CULong, Id;
overload selector(static #"decimalNumberByRoundingAccordingToBehavior:") = NSDecimalNumber, Id;
overload selector(static #"decimalNumberBySubtracting:") = NSDecimalNumber, NSDecimalNumber;
overload selector(static #"decimalNumberBySubtracting:withBehavior:") = NSDecimalNumber, NSDecimalNumber, Id;
overload selector(static #"decimalNumberHandlerWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:") = Id, CULong, Short, Bool, Bool, Bool, Bool;
overload selector(static #"decimalNumberWithDecimal:") = NSDecimalNumber, NSDecimal;
overload selector(static #"decimalNumberWithMantissa:exponent:isNegative:") = NSDecimalNumber, UInt64, Short, Bool;
overload selector(static #"decimalNumberWithString:") = NSDecimalNumber, NSString;
overload selector(static #"decimalNumberWithString:locale:") = NSDecimalNumber, NSString, Id;
overload selector(static #"decimalSeparator") = NSString;
overload selector(static #"decimalValue") = NSDecimal;
overload selector(static #"decodeArrayOfObjCType:count:at:") = Void, Pointer[CChar], CULong, RawPointer;
overload selector(static #"decodeBoolForKey:") = Bool, NSString;
overload selector(static #"decodeBytesForKey:returnedLength:") = Pointer[CUChar], NSString, Pointer[CULong];
overload selector(static #"decodeBytesWithReturnedLength:") = RawPointer, Pointer[CULong];
overload selector(static #"decodeClassName:asClassName:") = Void, NSString, NSString;
overload selector(static #"decodeDataObject") = NSData;
overload selector(static #"decodeDoubleForKey:") = Double, NSString;
overload selector(static #"decodeFloatForKey:") = Float, NSString;
overload selector(static #"decodeInt32ForKey:") = Int, NSString;
overload selector(static #"decodeInt64ForKey:") = Int64, NSString;
overload selector(static #"decodeIntForKey:") = Int, NSString;
overload selector(static #"decodeIntegerForKey:") = CLong, NSString;
overload selector(static #"decodeNXObject") = Id;
overload selector(static #"decodeObject") = Id;
overload selector(static #"decodeObjectForKey:") = Id, NSString;
overload selector(static #"decodePoint") = NSPoint;
overload selector(static #"decodePointForKey:") = NSPoint, NSString;
overload selector(static #"decodePortObject") = NSPort;
overload selector(static #"decodePropertyList") = Id;
overload selector(static #"decodeRect") = NSRect;
overload selector(static #"decodeRectForKey:") = NSRect, NSString;
overload selector(static #"decodeSize") = NSSize;
overload selector(static #"decodeSizeForKey:") = NSSize, NSString;
overload selector(static #"decodeValueOfObjCType:at:") = Void, Pointer[CChar], RawPointer;
overload varargSelector(static #"decodeValuesOfObjCTypes:") = Void, Pointer[CChar];
overload selector(static #"decomposableCharacterSet") = Id;
overload selector(static #"decomposedStringWithCanonicalMapping") = NSString;
overload selector(static #"decomposedStringWithCompatibilityMapping") = NSString;
overload selector(static #"defaultBehavior") = Id;
overload selector(static #"defaultCStringEncoding") = CULong;
overload selector(static #"defaultCenter") = Id;
overload selector(static #"defaultCollector") = Id;
overload selector(static #"defaultConnection") = NSConnection;
overload selector(static #"defaultCredentialForProtectionSpace:") = NSURLCredential, NSURLProtectionSpace;
overload selector(static #"defaultDate") = NSDate;
overload selector(static #"defaultDecimalNumberHandler") = Id;
overload selector(static #"defaultFormatterBehavior") = CULong;
overload selector(static #"defaultManager") = NSFileManager;
overload selector(static #"defaultNameServerPortNumber") = UShort;
overload selector(static #"defaultQueue") = Id;
overload selector(static #"defaultSubcontainerAttributeKey") = NSString;
overload selector(static #"defaultTimeZone") = NSTimeZone;
overload selector(static #"delegate") = Id;
overload selector(static #"deleteCharactersInRange:") = Void, NSRange;
overload selector(static #"deleteCookie:") = Void, NSHTTPCookie;
overload selector(static #"deletesFileUponFailure") = Bool;
overload selector(static #"dependencies") = NSArray;
overload selector(static #"dequeueNotificationsMatching:coalesceMask:") = Void, NSNotification, CULong;
overload selector(static #"description") = NSString;
overload selector(static #"descriptionFunction") = CCodePointer[(RawPointer),(NSString)];
overload selector(static #"descriptionInStringsFileFormat") = NSString;
overload selector(static #"descriptionWithCalendarFormat:") = NSString, NSString;
overload selector(static #"descriptionWithCalendarFormat:locale:") = NSString, NSString, Id;
overload selector(static #"descriptionWithCalendarFormat:timeZone:locale:") = NSString, NSString, NSTimeZone, Id;
overload selector(static #"descriptionWithLocale:") = NSString, Id;
overload selector(static #"descriptionWithLocale:indent:") = NSString, Id, CULong;
overload selector(static #"descriptor") = NSAppleEventDescriptor;
overload selector(static #"descriptorAtIndex:") = NSAppleEventDescriptor, CLong;
overload selector(static #"descriptorForKeyword:") = NSAppleEventDescriptor, UInt;
overload selector(static #"descriptorType") = UInt;
overload selector(static #"descriptorWithBoolean:") = NSAppleEventDescriptor, CUChar;
overload selector(static #"descriptorWithDescriptorType:bytes:length:") = NSAppleEventDescriptor, UInt, RawPointer, CULong;
overload selector(static #"descriptorWithDescriptorType:data:") = NSAppleEventDescriptor, UInt, NSData;
overload selector(static #"descriptorWithEnumCode:") = NSAppleEventDescriptor, UInt;
overload selector(static #"descriptorWithInt32:") = NSAppleEventDescriptor, Int;
overload selector(static #"descriptorWithString:") = NSAppleEventDescriptor, NSString;
overload selector(static #"descriptorWithTypeCode:") = NSAppleEventDescriptor, UInt;
overload selector(static #"destinationOfSymbolicLinkAtPath:error:") = NSString, NSString, Pointer[NSError];
overload selector(static #"detach") = Void;
overload selector(static #"detachNewThreadSelector:toTarget:withObject:") = Void, SelectorHandle, Id, Id;
overload selector(static #"developmentLocalization") = NSString;
overload selector(static #"dictionary") = Id;
overload selector(static #"dictionaryForKey:") = NSDictionary, NSString;
overload selector(static #"dictionaryFromTXTRecordData:") = NSDictionary, NSData;
overload selector(static #"dictionaryRepresentation") = NSDictionary;
overload selector(static #"dictionaryWithCapacity:") = Id, CULong;
overload selector(static #"dictionaryWithContentsOfFile:") = Id, NSString;
overload selector(static #"dictionaryWithContentsOfURL:") = Id, NSURL;
overload selector(static #"dictionaryWithDictionary:") = Id, NSDictionary;
overload selector(static #"dictionaryWithObject:forKey:") = Id, Id, Id;
overload selector(static #"dictionaryWithObjects:forKeys:") = Id, NSArray, NSArray;
overload selector(static #"dictionaryWithObjects:forKeys:count:") = Id, Pointer[Id], Pointer[Id], CULong;
overload varargSelector(static #"dictionaryWithObjectsAndKeys:") = Id, Id;
overload selector(static #"dictionaryWithValuesForKeys:") = NSDictionary, NSArray;
overload selector(static #"didChange:valuesAtIndexes:forKey:") = Void, CULong, NSIndexSet, NSString;
overload selector(static #"didChangeValueForKey:") = Void, NSString;
overload selector(static #"didChangeValueForKey:withSetMutation:usingObjects:") = Void, NSString, CULong, NSSet;
overload selector(static #"didLoadBytes:loadComplete:") = Void, NSData, Bool;
overload selector(static #"directParameter") = Id;
overload selector(static #"directoryAttributes") = NSDictionary;
overload selector(static #"directoryContentsAtPath:") = NSArray, NSString;
overload selector(static #"disable") = Void;
overload selector(static #"disableCollectorForPointer:") = Void, RawPointer;
overload selector(static #"disableSuddenTermination") = Void;
overload selector(static #"disableUndoRegistration") = Void;
overload selector(static #"disableUpdates") = Void;
overload selector(static #"diskCapacity") = CULong;
overload selector(static #"dispatch") = Void;
overload selector(static #"dispatchRawAppleEvent:withRawReply:handlerRefCon:") = Short, Pointer[AppleEvent], Pointer[AppleEvent], SRefCon;
overload selector(static #"displayNameAtPath:") = NSString, NSString;
overload selector(static #"displayNameForKey:value:") = NSString, Id, Id;
overload selector(static #"distantFuture") = Id;
overload selector(static #"distantPast") = Id;
overload selector(static #"distinguishedNames") = NSArray;
overload selector(static #"document") = Id;
overload selector(static #"documentContentKind") = CULong;
overload selector(static #"documentWithRootElement:") = Id, NSXMLElement;
overload selector(static #"doesContain:") = Bool, Id;
overload selector(static #"doesNotRecognizeSelector:") = Void, SelectorHandle;
overload selector(static #"doesRelativeDateFormatting") = Bool;
overload selector(static #"domain") = NSString;
overload selector(static #"dominantLanguage") = NSString;
overload selector(static #"dominantLanguageForScript:") = NSString, NSString;
overload selector(static #"dominantScript") = NSString;
overload selector(static #"doubleForKey:") = Double, NSString;
overload selector(static #"doubleValue") = Double;
overload selector(static #"download:canAuthenticateAgainstProtectionSpace:") = Bool, NSURLDownload, NSURLProtectionSpace;
overload selector(static #"download:decideDestinationWithSuggestedFilename:") = Void, NSURLDownload, NSString;
overload selector(static #"download:didCancelAuthenticationChallenge:") = Void, NSURLDownload, NSURLAuthenticationChallenge;
overload selector(static #"download:didCreateDestination:") = Void, NSURLDownload, NSString;
overload selector(static #"download:didFailWithError:") = Void, NSURLDownload, NSError;
overload selector(static #"download:didReceiveAuthenticationChallenge:") = Void, NSURLDownload, NSURLAuthenticationChallenge;
overload selector(static #"download:didReceiveDataOfLength:") = Void, NSURLDownload, CULong;
overload selector(static #"download:didReceiveResponse:") = Void, NSURLDownload, NSURLResponse;
overload selector(static #"download:shouldDecodeSourceDataOfMIMEType:") = Bool, NSURLDownload, NSString;
overload selector(static #"download:willResumeWithResponse:fromByte:") = Void, NSURLDownload, NSURLResponse, Int64;
overload selector(static #"download:willSendRequest:redirectResponse:") = NSURLRequest, NSURLDownload, NSURLRequest, NSURLResponse;
overload selector(static #"downloadDidBegin:") = Void, NSURLDownload;
overload selector(static #"downloadDidFinish:") = Void, NSURLDownload;
overload selector(static #"downloadShouldUseCredentialStorage:") = Bool, NSURLDownload;
overload selector(static #"drain") = Void;
overload selector(static #"duration") = Double;
overload selector(static #"earlierDate:") = NSDate, NSDate;
overload selector(static #"editingStringForObjectValue:") = NSString, Id;
overload selector(static #"elementDeclarationForName:") = NSXMLDTDNode, NSString;
overload selector(static #"elementWithName:") = Id, NSString;
overload selector(static #"elementWithName:URI:") = Id, NSString, NSString;
overload selector(static #"elementWithName:children:attributes:") = Id, NSString, NSArray, NSArray;
overload selector(static #"elementWithName:stringValue:") = Id, NSString, NSString;
overload selector(static #"elementsForLocalName:URI:") = NSArray, NSString, NSString;
overload selector(static #"elementsForName:") = NSArray, NSString;
overload selector(static #"enable") = Void;
overload selector(static #"enableCollectorForPointer:") = Void, RawPointer;
overload selector(static #"enableMultipleThreads") = Void;
overload selector(static #"enableSuddenTermination") = Void;
overload selector(static #"enableUndoRegistration") = Void;
overload selector(static #"enableUpdates") = Void;
overload selector(static #"encodeArrayOfObjCType:count:at:") = Void, Pointer[CChar], CULong, RawPointer;
overload selector(static #"encodeBool:forKey:") = Void, Bool, NSString;
overload selector(static #"encodeBycopyObject:") = Void, Id;
overload selector(static #"encodeByrefObject:") = Void, Id;
overload selector(static #"encodeBytes:length:") = Void, RawPointer, CULong;
overload selector(static #"encodeBytes:length:forKey:") = Void, Pointer[CUChar], CULong, NSString;
overload selector(static #"encodeClassName:intoClassName:") = Void, NSString, NSString;
overload selector(static #"encodeConditionalObject:") = Void, Id;
overload selector(static #"encodeConditionalObject:forKey:") = Void, Id, NSString;
overload selector(static #"encodeDataObject:") = Void, NSData;
overload selector(static #"encodeDouble:forKey:") = Void, Double, NSString;
overload selector(static #"encodeFloat:forKey:") = Void, Float, NSString;
overload selector(static #"encodeInt32:forKey:") = Void, Int, NSString;
overload selector(static #"encodeInt64:forKey:") = Void, Int64, NSString;
overload selector(static #"encodeInt:forKey:") = Void, Int, NSString;
overload selector(static #"encodeInteger:forKey:") = Void, CLong, NSString;
overload selector(static #"encodeNXObject:") = Void, Id;
overload selector(static #"encodeObject:") = Void, Id;
overload selector(static #"encodeObject:forKey:") = Void, Id, NSString;
overload selector(static #"encodePoint:") = Void, NSPoint;
overload selector(static #"encodePoint:forKey:") = Void, NSPoint, NSString;
overload selector(static #"encodePortObject:") = Void, NSPort;
overload selector(static #"encodePropertyList:") = Void, Id;
overload selector(static #"encodeRect:") = Void, NSRect;
overload selector(static #"encodeRect:forKey:") = Void, NSRect, NSString;
overload selector(static #"encodeRootObject:") = Void, Id;
overload selector(static #"encodeSize:") = Void, NSSize;
overload selector(static #"encodeSize:forKey:") = Void, NSSize, NSString;
overload selector(static #"encodeValueOfObjCType:at:") = Void, Pointer[CChar], RawPointer;
overload varargSelector(static #"encodeValuesOfObjCTypes:") = Void, Pointer[CChar];
overload selector(static #"endEditing") = Void;
overload selector(static #"endLoadInBackground") = Void;
overload selector(static #"endSpecifier") = NSScriptObjectSpecifier;
overload selector(static #"endSubelementIdentifier") = CULong;
overload selector(static #"endSubelementIndex") = CLong;
overload selector(static #"endUndoGrouping") = Void;
overload selector(static #"enqueueNotification:postingStyle:") = Void, NSNotification, CULong;
overload selector(static #"enqueueNotification:postingStyle:coalesceMask:forModes:") = Void, NSNotification, CULong, CULong, NSArray;
overload selector(static #"entityDeclarationForName:") = NSXMLDTDNode, NSString;
overload selector(static #"enumCodeValue") = UInt;
overload selector(static #"enumerateAttribute:inRange:options:usingBlock:") = Void, NSString, NSRange, CULong, UnknownType;
overload selector(static #"enumerateAttributesInRange:options:usingBlock:") = Void, NSRange, CULong, UnknownType;
overload selector(static #"enumerateIndexesInRange:options:usingBlock:") = Void, NSRange, CULong, UnknownType;
overload selector(static #"enumerateIndexesUsingBlock:") = Void, UnknownType;
overload selector(static #"enumerateIndexesWithOptions:usingBlock:") = Void, CULong, UnknownType;
overload selector(static #"enumerateKeysAndObjectsUsingBlock:") = Void, UnknownType;
overload selector(static #"enumerateKeysAndObjectsWithOptions:usingBlock:") = Void, CULong, UnknownType;
overload selector(static #"enumerateLinesUsingBlock:") = Void, UnknownType;
overload selector(static #"enumerateObjectsAtIndexes:options:usingBlock:") = Void, NSIndexSet, CULong, UnknownType;
overload selector(static #"enumerateObjectsUsingBlock:") = Void, UnknownType;
overload selector(static #"enumerateObjectsWithOptions:usingBlock:") = Void, CULong, UnknownType;
overload selector(static #"enumerateSubstringsInRange:options:usingBlock:") = Void, NSRange, CULong, UnknownType;
overload selector(static #"enumeratorAtPath:") = NSDirectoryEnumerator, NSString;
overload selector(static #"enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:") = NSDirectoryEnumerator, NSURL, NSArray, CULong, UnknownType;
overload selector(static #"environment") = NSDictionary;
overload selector(static #"era") = CLong;
overload selector(static #"eraSymbols") = NSArray;
overload selector(static #"error") = NSError;
overload selector(static #"errorWithDomain:code:userInfo:") = Id, NSString, CLong, NSDictionary;
overload selector(static #"evaluate") = Void;
overload selector(static #"evaluateWithObject:") = Bool, Id;
overload selector(static #"evaluateWithObject:substitutionVariables:") = Bool, Id, NSDictionary;
overload selector(static #"evaluatedArguments") = NSDictionary;
overload selector(static #"evaluatedReceivers") = Id;
overload selector(static #"evaluationErrorNumber") = CLong;
overload selector(static #"evaluationErrorSpecifier") = NSScriptObjectSpecifier;
overload selector(static #"eventClass") = UInt;
overload selector(static #"eventID") = UInt;
overload selector(static #"evictsObjectsWithDiscardedContent") = Bool;
overload selector(static #"exceptionWithName:reason:userInfo:") = NSException, NSString, NSString, NSDictionary;
overload selector(static #"exchangeObjectAtIndex:withObjectAtIndex:") = Void, CULong, CULong;
overload selector(static #"executableArchitectures") = NSArray;
overload selector(static #"executablePath") = NSString;
overload selector(static #"executableURL") = NSURL;
overload selector(static #"executeAndReturnError:") = NSAppleEventDescriptor, Pointer[NSDictionary];
overload selector(static #"executeAppleEvent:error:") = NSAppleEventDescriptor, NSAppleEventDescriptor, Pointer[NSDictionary];
overload selector(static #"executeCommand") = Id;
overload selector(static #"executionBlocks") = NSArray;
overload selector(static #"exit") = Void;
overload selector(static #"expectedContentLength") = Int64;
overload selector(static #"expectedResourceDataSize") = Int64;
overload selector(static #"expiresDate") = NSDate;
overload selector(static #"exponentSymbol") = NSString;
overload selector(static #"expressionBlock") = UnknownType;
overload selector(static #"expressionForAggregate:") = NSExpression, NSArray;
overload selector(static #"expressionForBlock:arguments:") = NSExpression, UnknownType, NSArray;
overload selector(static #"expressionForConstantValue:") = NSExpression, Id;
overload selector(static #"expressionForEvaluatedObject") = NSExpression;
overload selector(static #"expressionForFunction:arguments:") = NSExpression, NSString, NSArray;
overload selector(static #"expressionForFunction:selectorName:arguments:") = NSExpression, NSExpression, NSString, NSArray;
overload selector(static #"expressionForIntersectSet:with:") = NSExpression, NSExpression, NSExpression;
overload selector(static #"expressionForKeyPath:") = NSExpression, NSString;
overload selector(static #"expressionForMinusSet:with:") = NSExpression, NSExpression, NSExpression;
overload selector(static #"expressionForSubquery:usingIteratorVariable:predicate:") = NSExpression, NSExpression, NSString, Id;
overload selector(static #"expressionForUnionSet:with:") = NSExpression, NSExpression, NSExpression;
overload selector(static #"expressionForVariable:") = NSExpression, NSString;
overload selector(static #"expressionType") = CULong;
overload selector(static #"expressionValueWithObject:context:") = Id, Id, NSMutableDictionary;
overload selector(static #"failureReason") = NSString;
overload selector(static #"failureResponse") = NSURLResponse;
overload selector(static #"fastestEncoding") = CULong;
overload selector(static #"fileAttributes") = NSDictionary;
overload selector(static #"fileAttributesAtPath:traverseLink:") = NSDictionary, NSString, Bool;
overload selector(static #"fileCreationDate") = NSDate;
overload selector(static #"fileDescriptor") = Int;
overload selector(static #"fileExistsAtPath:") = Bool, NSString;
overload selector(static #"fileExistsAtPath:isDirectory:") = Bool, NSString, Pointer[Bool];
overload selector(static #"fileExtensionHidden") = Bool;
overload selector(static #"fileGroupOwnerAccountID") = NSNumber;
overload selector(static #"fileGroupOwnerAccountName") = NSString;
overload selector(static #"fileHFSCreatorCode") = UInt;
overload selector(static #"fileHFSTypeCode") = UInt;
overload selector(static #"fileHandleForReading") = NSFileHandle;
overload selector(static #"fileHandleForReadingAtPath:") = Id, NSString;
overload selector(static #"fileHandleForReadingFromURL:error:") = Id, NSURL, Pointer[NSError];
overload selector(static #"fileHandleForUpdatingAtPath:") = Id, NSString;
overload selector(static #"fileHandleForUpdatingURL:error:") = Id, NSURL, Pointer[NSError];
overload selector(static #"fileHandleForWriting") = NSFileHandle;
overload selector(static #"fileHandleForWritingAtPath:") = Id, NSString;
overload selector(static #"fileHandleForWritingToURL:error:") = Id, NSURL, Pointer[NSError];
overload selector(static #"fileHandleWithNullDevice") = Id;
overload selector(static #"fileHandleWithStandardError") = Id;
overload selector(static #"fileHandleWithStandardInput") = Id;
overload selector(static #"fileHandleWithStandardOutput") = Id;
overload selector(static #"fileIsAppendOnly") = Bool;
overload selector(static #"fileIsImmutable") = Bool;
overload selector(static #"fileManager:shouldCopyItemAtPath:toPath:") = Bool, NSFileManager, NSString, NSString;
overload selector(static #"fileManager:shouldCopyItemAtURL:toURL:") = Bool, NSFileManager, NSURL, NSURL;
overload selector(static #"fileManager:shouldLinkItemAtPath:toPath:") = Bool, NSFileManager, NSString, NSString;
overload selector(static #"fileManager:shouldLinkItemAtURL:toURL:") = Bool, NSFileManager, NSURL, NSURL;
overload selector(static #"fileManager:shouldMoveItemAtPath:toPath:") = Bool, NSFileManager, NSString, NSString;
overload selector(static #"fileManager:shouldMoveItemAtURL:toURL:") = Bool, NSFileManager, NSURL, NSURL;
overload selector(static #"fileManager:shouldProceedAfterError:") = Bool, NSFileManager, NSDictionary;
overload selector(static #"fileManager:shouldProceedAfterError:copyingItemAtPath:toPath:") = Bool, NSFileManager, NSError, NSString, NSString;
overload selector(static #"fileManager:shouldProceedAfterError:copyingItemAtURL:toURL:") = Bool, NSFileManager, NSError, NSURL, NSURL;
overload selector(static #"fileManager:shouldProceedAfterError:linkingItemAtPath:toPath:") = Bool, NSFileManager, NSError, NSString, NSString;
overload selector(static #"fileManager:shouldProceedAfterError:linkingItemAtURL:toURL:") = Bool, NSFileManager, NSError, NSURL, NSURL;
overload selector(static #"fileManager:shouldProceedAfterError:movingItemAtPath:toPath:") = Bool, NSFileManager, NSError, NSString, NSString;
overload selector(static #"fileManager:shouldProceedAfterError:movingItemAtURL:toURL:") = Bool, NSFileManager, NSError, NSURL, NSURL;
overload selector(static #"fileManager:shouldProceedAfterError:removingItemAtPath:") = Bool, NSFileManager, NSError, NSString;
overload selector(static #"fileManager:shouldProceedAfterError:removingItemAtURL:") = Bool, NSFileManager, NSError, NSURL;
overload selector(static #"fileManager:shouldRemoveItemAtPath:") = Bool, NSFileManager, NSString;
overload selector(static #"fileManager:shouldRemoveItemAtURL:") = Bool, NSFileManager, NSURL;
overload selector(static #"fileManager:willProcessPath:") = Void, NSFileManager, NSString;
overload selector(static #"fileModificationDate") = NSDate;
overload selector(static #"fileOwnerAccountID") = NSNumber;
overload selector(static #"fileOwnerAccountName") = NSString;
overload selector(static #"filePathURL") = NSURL;
overload selector(static #"filePosixPermissions") = CULong;
overload selector(static #"fileReferenceURL") = NSURL;
overload selector(static #"fileSize") = UInt64;
overload selector(static #"fileSystemAttributesAtPath:") = NSDictionary, NSString;
overload selector(static #"fileSystemFileNumber") = CULong;
overload selector(static #"fileSystemNumber") = CLong;
overload selector(static #"fileSystemRepresentation") = Pointer[CChar];
overload selector(static #"fileSystemRepresentationWithPath:") = Pointer[CChar], NSString;
overload selector(static #"fileType") = NSString;
overload selector(static #"fileURLWithPath:") = Id, NSString;
overload selector(static #"fileURLWithPath:isDirectory:") = Id, NSString, Bool;
overload selector(static #"fileURLWithPathComponents:") = NSURL, NSArray;
overload selector(static #"filterUsingPredicate:") = Void, NSPredicate;
overload selector(static #"filteredArrayUsingPredicate:") = NSArray, NSPredicate;
overload selector(static #"filteredSetUsingPredicate:") = NSSet, NSPredicate;
overload selector(static #"finalize") = Void;
overload selector(static #"finishDecoding") = Void;
overload selector(static #"finishEncoding") = Void;
overload selector(static #"fire") = Void;
overload selector(static #"fireDate") = NSDate;
overload selector(static #"firstIndex") = CULong;
overload selector(static #"firstObjectCommonWithArray:") = Id, NSArray;
overload selector(static #"firstWeekday") = CULong;
overload selector(static #"floatForKey:") = Float, NSString;
overload selector(static #"floatValue") = Float;
overload selector(static #"flushCachedData") = Void;
overload selector(static #"flushHostCache") = Void;
overload selector(static #"formIntersectionWithCharacterSet:") = Void, NSCharacterSet;
overload selector(static #"formUnionWithCharacterSet:") = Void, NSCharacterSet;
overload selector(static #"format") = NSString;
overload selector(static #"formatWidth") = CULong;
overload selector(static #"formatterBehavior") = CULong;
overload selector(static #"forwardInvocation:") = Void, NSInvocation;
overload selector(static #"forwardingTargetForSelector:") = Id, SelectorHandle;
overload selector(static #"fragment") = NSString;
overload selector(static #"frameLength") = CULong;
overload selector(static #"function") = NSString;
overload selector(static #"generatesCalendarDates") = Bool;
overload selector(static #"generatesDecimalNumbers") = Bool;
overload selector(static #"getArgument:atIndex:") = Void, RawPointer, CLong;
overload selector(static #"getArgumentTypeAtIndex:") = Pointer[CChar], CULong;
overload selector(static #"getBuffer:length:") = Bool, Pointer[Pointer[CUChar]], Pointer[CULong];
overload selector(static #"getBytes:") = Void, RawPointer;
overload selector(static #"getBytes:length:") = Void, RawPointer, CULong;
overload selector(static #"getBytes:maxLength:usedLength:encoding:options:range:remainingRange:") = Bool, RawPointer, CULong, Pointer[CULong], CULong, CULong, NSRange, NSRangePointer;
overload selector(static #"getBytes:range:") = Void, RawPointer, NSRange;
overload selector(static #"getCFRunLoop") = CFRunLoopRef;
overload selector(static #"getCString:") = Void, Pointer[CChar];
overload selector(static #"getCString:maxLength:") = Void, Pointer[CChar], CULong;
overload selector(static #"getCString:maxLength:encoding:") = Bool, Pointer[CChar], CULong, CULong;
overload selector(static #"getCString:maxLength:range:remainingRange:") = Void, Pointer[CChar], CULong, NSRange, NSRangePointer;
overload selector(static #"getCharacters:") = Void, Pointer[UShort];
overload selector(static #"getCharacters:range:") = Void, Pointer[UShort], NSRange;
overload selector(static #"getFileSystemRepresentation:maxLength:") = Bool, Pointer[CChar], CULong;
overload selector(static #"getIndexes:") = Void, Pointer[CULong];
overload selector(static #"getIndexes:maxCount:inIndexRange:") = CULong, Pointer[CULong], CULong, NSRangePointer;
overload selector(static #"getInputStream:outputStream:") = Bool, Pointer[NSInputStream], Pointer[NSOutputStream];
overload selector(static #"getLineStart:end:contentsEnd:forRange:") = Void, Pointer[CULong], Pointer[CULong], Pointer[CULong], NSRange;
overload selector(static #"getObjectValue:forString:errorDescription:") = Bool, Pointer[Id], NSString, Pointer[NSString];
overload selector(static #"getObjectValue:forString:range:error:") = Bool, Pointer[Id], NSString, Pointer[NSRange], Pointer[NSError];
overload selector(static #"getObjects:") = Void, Pointer[Id];
overload selector(static #"getObjects:andKeys:") = Void, Pointer[Id], Pointer[Id];
overload selector(static #"getObjects:range:") = Void, Pointer[Id], NSRange;
overload selector(static #"getParagraphStart:end:contentsEnd:forRange:") = Void, Pointer[CULong], Pointer[CULong], Pointer[CULong], NSRange;
overload selector(static #"getResourceValue:forKey:error:") = Bool, Pointer[Id], NSString, Pointer[NSError];
overload selector(static #"getReturnValue:") = Void, RawPointer;
overload selector(static #"getStreamsToHost:port:inputStream:outputStream:") = Void, NSHost, CLong, Pointer[NSInputStream], Pointer[NSOutputStream];
overload selector(static #"getValue:") = Void, RawPointer;
overload selector(static #"globallyUniqueString") = NSString;
overload selector(static #"grammarCheckingResultWithRange:details:") = NSTextCheckingResult, NSRange, NSArray;
overload selector(static #"grammarDetails") = NSArray;
overload selector(static #"gregorianStartDate") = NSDate;
overload selector(static #"groupedResults") = NSArray;
overload selector(static #"groupingAttributes") = NSArray;
overload selector(static #"groupingLevel") = CLong;
overload selector(static #"groupingSeparator") = NSString;
overload selector(static #"groupingSize") = CULong;
overload selector(static #"groupsByEvent") = Bool;
overload varargSelector(static #"handleFailureInFunction:file:lineNumber:description:") = Void, NSString, NSString, CLong, NSString;
overload varargSelector(static #"handleFailureInMethod:object:file:lineNumber:description:") = Void, SelectorHandle, Id, NSString, CLong, NSString;
overload selector(static #"handleQueryWithUnboundKey:") = Id, NSString;
overload selector(static #"handleTakeValue:forUnboundKey:") = Void, Id, NSString;
overload selector(static #"hasBytesAvailable") = Bool;
overload selector(static #"hasMemberInPlane:") = Bool, CUChar;
overload selector(static #"hasOrderedToManyRelationshipForKey:") = Bool, NSString;
overload selector(static #"hasPassword") = Bool;
overload selector(static #"hasPrefix:") = Bool, NSString;
overload selector(static #"hasPropertyForKey:") = Bool, NSString;
overload selector(static #"hasReadablePropertyForKey:") = Bool, NSString;
overload selector(static #"hasSpaceAvailable") = Bool;
overload selector(static #"hasSuffix:") = Bool, NSString;
overload selector(static #"hasThousandSeparators") = Bool;
overload selector(static #"hasWritablePropertyForKey:") = Bool, NSString;
overload selector(static #"hash") = CULong;
overload selector(static #"hashFunction") = CCodePointer[(RawPointer,CCodePointer[(RawPointer),(CULong)]),(CULong)];
overload selector(static #"hashTableWithOptions:") = Id, CULong;
overload selector(static #"hashTableWithWeakObjects") = Id;
overload selector(static #"helpAnchor") = NSString;
overload selector(static #"host") = NSString;
overload selector(static #"hostName") = NSString;
overload selector(static #"hostWithAddress:") = NSHost, NSString;
overload selector(static #"hostWithName:") = NSHost, NSString;
overload selector(static #"hour") = CLong;
overload selector(static #"hourOfDay") = CLong;
overload selector(static #"identity") = SecIdentityRef;
overload selector(static #"illegalCharacterSet") = Id;
overload selector(static #"implementationClassName") = NSString;
overload selector(static #"increaseLengthBy:") = Void, CULong;
overload selector(static #"independentConversationQueueing") = Bool;
overload selector(static #"index") = CULong;
overload selector(static #"indexAtPosition:") = CULong, CULong;
overload selector(static #"indexGreaterThanIndex:") = CULong, CULong;
overload selector(static #"indexGreaterThanOrEqualToIndex:") = CULong, CULong;
overload selector(static #"indexInRange:options:passingTest:") = CULong, NSRange, CULong, UnknownType;
overload selector(static #"indexLessThanIndex:") = CULong, CULong;
overload selector(static #"indexLessThanOrEqualToIndex:") = CULong, CULong;
overload selector(static #"indexOfObject:") = CULong, Id;
overload selector(static #"indexOfObject:inRange:") = CULong, Id, NSRange;
overload selector(static #"indexOfObject:inSortedRange:options:usingComparator:") = CULong, Id, NSRange, CULong, NSComparator;
overload selector(static #"indexOfObjectAtIndexes:options:passingTest:") = CULong, NSIndexSet, CULong, UnknownType;
overload selector(static #"indexOfObjectIdenticalTo:") = CULong, Id;
overload selector(static #"indexOfObjectIdenticalTo:inRange:") = CULong, Id, NSRange;
overload selector(static #"indexOfObjectPassingTest:") = CULong, UnknownType;
overload selector(static #"indexOfObjectWithOptions:passingTest:") = CULong, CULong, UnknownType;
overload selector(static #"indexOfResult:") = CULong, Id;
overload selector(static #"indexPassingTest:") = CULong, UnknownType;
overload selector(static #"indexPathByAddingIndex:") = NSIndexPath, CULong;
overload selector(static #"indexPathByRemovingLastIndex") = NSIndexPath;
overload selector(static #"indexPathWithIndex:") = Id, CULong;
overload selector(static #"indexPathWithIndexes:length:") = Id, Pointer[CULong], CULong;
overload selector(static #"indexSet") = Id;
overload selector(static #"indexSetWithIndex:") = Id, CULong;
overload selector(static #"indexSetWithIndexesInRange:") = Id, NSRange;
overload selector(static #"indexWithOptions:passingTest:") = CULong, CULong, UnknownType;
overload selector(static #"indexesInRange:options:passingTest:") = NSIndexSet, NSRange, CULong, UnknownType;
overload selector(static #"indexesOfObjectsAtIndexes:options:passingTest:") = NSIndexSet, NSIndexSet, CULong, UnknownType;
overload selector(static #"indexesOfObjectsPassingTest:") = NSIndexSet, UnknownType;
overload selector(static #"indexesOfObjectsWithOptions:passingTest:") = NSIndexSet, CULong, UnknownType;
overload selector(static #"indexesPassingTest:") = NSIndexSet, UnknownType;
overload selector(static #"indexesWithOptions:passingTest:") = NSIndexSet, CULong, UnknownType;
overload selector(static #"indicesOfObjectsByEvaluatingObjectSpecifier:") = NSArray, NSScriptObjectSpecifier;
overload selector(static #"indicesOfObjectsByEvaluatingWithContainer:count:") = Pointer[CLong], Id, Pointer[CLong];
overload selector(static #"infoDictionary") = NSDictionary;
overload selector(static #"init") = Id;
overload selector(static #"initAndTestWithTests:") = Id, NSArray;
overload selector(static #"initByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:") = Id, NSData, CULong, NSURL, Pointer[Bool], Pointer[NSError];
overload selector(static #"initFileURLWithPath:") = Id, NSString;
overload selector(static #"initFileURLWithPath:isDirectory:") = Id, NSString, Bool;
overload selector(static #"initForReadingWithData:") = Id, NSData;
overload selector(static #"initForWritingWithMutableData:") = Id, NSMutableData;
overload selector(static #"initListDescriptor") = Id;
overload selector(static #"initNotTestWithTest:") = Id, NSScriptWhoseTest;
overload selector(static #"initOrTestWithTests:") = Id, NSArray;
overload selector(static #"initRecordDescriptor") = Id;
overload selector(static #"initRemoteWithProtocolFamily:socketType:protocol:address:") = Id, Int, Int, Int, NSData;
overload selector(static #"initRemoteWithTCPPort:host:") = Id, UShort, NSString;
overload selector(static #"initToBuffer:capacity:") = Id, Pointer[CUChar], CULong;
overload selector(static #"initToFileAtPath:append:") = Id, NSString, Bool;
overload selector(static #"initToMemory") = Id;
overload selector(static #"initWithAEDescNoCopy:") = Id, Pointer[AEDesc];
overload selector(static #"initWithArray:") = Id, NSArray;
overload selector(static #"initWithArray:copyItems:") = Id, NSArray, Bool;
overload selector(static #"initWithAttributedString:") = Id, NSAttributedString;
overload selector(static #"initWithAuthenticationChallenge:sender:") = Id, NSURLAuthenticationChallenge, Id;
overload selector(static #"initWithBool:") = Id, Bool;
overload selector(static #"initWithBytes:length:") = Id, RawPointer, CULong;
overload selector(static #"initWithBytes:length:encoding:") = Id, RawPointer, CULong, CULong;
overload selector(static #"initWithBytes:objCType:") = Id, RawPointer, Pointer[CChar];
overload selector(static #"initWithBytesNoCopy:length:") = Id, RawPointer, CULong;
overload selector(static #"initWithBytesNoCopy:length:encoding:freeWhenDone:") = Id, RawPointer, CULong, CULong, Bool;
overload selector(static #"initWithBytesNoCopy:length:freeWhenDone:") = Id, RawPointer, CULong, Bool;
overload selector(static #"initWithCString:") = Id, Pointer[CChar];
overload selector(static #"initWithCString:encoding:") = Id, Pointer[CChar], CULong;
overload selector(static #"initWithCString:length:") = Id, Pointer[CChar], CULong;
overload selector(static #"initWithCStringNoCopy:length:freeWhenDone:") = Id, Pointer[CChar], CULong, Bool;
overload selector(static #"initWithCalendarIdentifier:") = Id, NSString;
overload selector(static #"initWithCapacity:") = Id, CULong;
overload selector(static #"initWithChar:") = Id, CChar;
overload selector(static #"initWithCharacters:length:") = Id, Pointer[UShort], CULong;
overload selector(static #"initWithCharactersNoCopy:length:freeWhenDone:") = Id, Pointer[UShort], CULong, Bool;
overload selector(static #"initWithCommandDescription:") = Id, NSScriptCommandDescription;
overload selector(static #"initWithCondition:") = Id, CLong;
overload selector(static #"initWithContainerClassDescription:containerSpecifier:key:") = Id, NSScriptClassDescription, NSScriptObjectSpecifier, NSString;
overload selector(static #"initWithContainerClassDescription:containerSpecifier:key:index:") = Id, NSScriptClassDescription, NSScriptObjectSpecifier, NSString, CLong;
overload selector(static #"initWithContainerClassDescription:containerSpecifier:key:name:") = Id, NSScriptClassDescription, NSScriptObjectSpecifier, NSString, NSString;
overload selector(static #"initWithContainerClassDescription:containerSpecifier:key:relativePosition:baseSpecifier:") = Id, NSScriptClassDescription, NSScriptObjectSpecifier, NSString, CULong, NSScriptObjectSpecifier;
overload selector(static #"initWithContainerClassDescription:containerSpecifier:key:startSpecifier:endSpecifier:") = Id, NSScriptClassDescription, NSScriptObjectSpecifier, NSString, NSScriptObjectSpecifier, NSScriptObjectSpecifier;
overload selector(static #"initWithContainerClassDescription:containerSpecifier:key:test:") = Id, NSScriptClassDescription, NSScriptObjectSpecifier, NSString, NSScriptWhoseTest;
overload selector(static #"initWithContainerClassDescription:containerSpecifier:key:uniqueID:") = Id, NSScriptClassDescription, NSScriptObjectSpecifier, NSString, Id;
overload selector(static #"initWithContainerSpecifier:key:") = Id, NSScriptObjectSpecifier, NSString;
overload selector(static #"initWithContentsOfFile:") = Id, NSString;
overload selector(static #"initWithContentsOfFile:encoding:error:") = Id, NSString, CULong, Pointer[NSError];
overload selector(static #"initWithContentsOfFile:options:error:") = Id, NSString, CULong, Pointer[NSError];
overload selector(static #"initWithContentsOfFile:usedEncoding:error:") = Id, NSString, Pointer[CULong], Pointer[NSError];
overload selector(static #"initWithContentsOfMappedFile:") = Id, NSString;
overload selector(static #"initWithContentsOfURL:") = Id, NSURL;
overload selector(static #"initWithContentsOfURL:encoding:error:") = Id, NSURL, CULong, Pointer[NSError];
overload selector(static #"initWithContentsOfURL:error:") = Id, NSURL, Pointer[NSDictionary];
overload selector(static #"initWithContentsOfURL:options:error:") = Id, NSURL, CULong, Pointer[NSError];
overload selector(static #"initWithContentsOfURL:usedEncoding:error:") = Id, NSURL, Pointer[CULong], Pointer[NSError];
overload selector(static #"initWithData:") = Id, NSData;
overload selector(static #"initWithData:encoding:") = Id, NSData, CULong;
overload selector(static #"initWithData:options:error:") = Id, NSData, CULong, Pointer[NSError];
overload selector(static #"initWithDateFormat:allowNaturalLanguage:") = Id, NSString, Bool;
overload selector(static #"initWithDecimal:") = Id, NSDecimal;
overload selector(static #"initWithDescriptorType:bytes:length:") = Id, UInt, RawPointer, CULong;
overload selector(static #"initWithDescriptorType:data:") = Id, UInt, NSData;
overload selector(static #"initWithDictionary:") = Id, NSDictionary;
overload selector(static #"initWithDictionary:copyItems:") = Id, NSDictionary, Bool;
overload selector(static #"initWithDomain:code:userInfo:") = Id, NSString, CLong, NSDictionary;
overload selector(static #"initWithDomain:type:name:") = Id, NSString, NSString, NSString;
overload selector(static #"initWithDomain:type:name:port:") = Id, NSString, NSString, NSString, Int;
overload selector(static #"initWithDominantScript:languageMap:") = Id, NSString, NSDictionary;
overload selector(static #"initWithDouble:") = Id, Double;
overload selector(static #"initWithEventClass:eventID:targetDescriptor:returnID:transactionID:") = Id, UInt, UInt, NSAppleEventDescriptor, Short, Int;
overload selector(static #"initWithExpressionType:") = Id, CULong;
overload selector(static #"initWithFileAtPath:") = Id, NSString;
overload selector(static #"initWithFileDescriptor:") = Id, Int;
overload selector(static #"initWithFileDescriptor:closeOnDealloc:") = Id, Int, Bool;
overload selector(static #"initWithFireDate:interval:target:selector:userInfo:repeats:") = Id, NSDate, Double, Id, SelectorHandle, Id, Bool;
overload selector(static #"initWithFloat:") = Id, Float;
overload varargSelector(static #"initWithFormat:") = Id, NSString;
overload selector(static #"initWithFormat:arguments:") = Id, NSString, Pointer[__va_list_tag];
overload varargSelector(static #"initWithFormat:locale:") = Id, NSString, Id;
overload selector(static #"initWithFormat:locale:arguments:") = Id, NSString, Id, Pointer[__va_list_tag];
overload selector(static #"initWithHost:port:protocol:realm:authenticationMethod:") = Id, NSString, CLong, NSString, NSString, NSString;
overload selector(static #"initWithIdentity:certificates:persistence:") = Id, SecIdentityRef, NSArray, CULong;
overload selector(static #"initWithIndex:") = Id, CULong;
overload selector(static #"initWithIndexSet:") = Id, NSIndexSet;
overload selector(static #"initWithIndexes:length:") = Id, Pointer[CULong], CULong;
overload selector(static #"initWithIndexesInRange:") = Id, NSRange;
overload selector(static #"initWithInt:") = Id, Int;
overload selector(static #"initWithInteger:") = Id, CLong;
overload selector(static #"initWithInvocation:") = Id, NSInvocation;
overload selector(static #"initWithKey:ascending:") = Id, NSString, Bool;
overload selector(static #"initWithKey:ascending:comparator:") = Id, NSString, Bool, NSComparator;
overload selector(static #"initWithKey:ascending:selector:") = Id, NSString, Bool, SelectorHandle;
overload selector(static #"initWithKeyOptions:valueOptions:capacity:") = Id, CULong, CULong, CULong;
overload selector(static #"initWithKeyPointerFunctions:valuePointerFunctions:capacity:") = Id, NSPointerFunctions, NSPointerFunctions, CULong;
overload selector(static #"initWithKind:") = Id, CULong;
overload selector(static #"initWithKind:options:") = Id, CULong, CULong;
overload selector(static #"initWithLeftExpression:rightExpression:customSelector:") = Id, NSExpression, NSExpression, SelectorHandle;
overload selector(static #"initWithLeftExpression:rightExpression:modifier:type:options:") = Id, NSExpression, NSExpression, CULong, CULong, CULong;
overload selector(static #"initWithLength:") = Id, CULong;
overload selector(static #"initWithLocal:connection:") = Id, Id, NSConnection;
overload selector(static #"initWithLocaleIdentifier:") = Id, NSString;
overload selector(static #"initWithLong:") = Id, CLong;
overload selector(static #"initWithLongLong:") = Id, Int64;
overload selector(static #"initWithMachPort:") = Id, UInt;
overload selector(static #"initWithMachPort:options:") = Id, UInt, CULong;
overload selector(static #"initWithMantissa:exponent:isNegative:") = Id, UInt64, Short, Bool;
overload selector(static #"initWithMemoryCapacity:diskCapacity:diskPath:") = Id, CULong, CULong, NSString;
overload selector(static #"initWithName:") = Id, NSString;
overload selector(static #"initWithName:URI:") = Id, NSString, NSString;
overload selector(static #"initWithName:data:") = Id, NSString, NSData;
overload selector(static #"initWithName:reason:userInfo:") = Id, NSString, NSString, NSDictionary;
overload selector(static #"initWithName:stringValue:") = Id, NSString, NSString;
overload selector(static #"initWithNotificationCenter:") = Id, NSNotificationCenter;
overload selector(static #"initWithObjectSpecifier:comparisonOperator:testObject:") = Id, NSScriptObjectSpecifier, CULong, Id;
overload varargSelector(static #"initWithObjects:") = Id, Id;
overload selector(static #"initWithObjects:count:") = Id, Pointer[Id], CULong;
overload selector(static #"initWithObjects:forKeys:") = Id, NSArray, NSArray;
overload selector(static #"initWithObjects:forKeys:count:") = Id, Pointer[Id], Pointer[Id], CULong;
overload varargSelector(static #"initWithObjectsAndKeys:") = Id, Id;
overload selector(static #"initWithOptions:") = Id, CULong;
overload selector(static #"initWithOptions:capacity:") = Id, CULong, CULong;
overload selector(static #"initWithPath:") = Id, NSString;
overload selector(static #"initWithPointerFunctions:") = Id, NSPointerFunctions;
overload selector(static #"initWithPointerFunctions:capacity:") = Id, NSPointerFunctions, CULong;
overload selector(static #"initWithPosition:objectSpecifier:") = Id, CULong, NSScriptObjectSpecifier;
overload selector(static #"initWithProperties:") = Id, NSDictionary;
overload selector(static #"initWithProtectionSpace:proposedCredential:previousFailureCount:failureResponse:error:sender:") = Id, NSURLProtectionSpace, NSURLCredential, CLong, NSURLResponse, NSError, Id;
overload selector(static #"initWithProtocolFamily:socketType:protocol:address:") = Id, Int, Int, Int, NSData;
overload selector(static #"initWithProtocolFamily:socketType:protocol:socket:") = Id, Int, Int, Int, Int;
overload selector(static #"initWithProxyHost:port:type:realm:authenticationMethod:") = Id, NSString, CLong, NSString, NSString, NSString;
overload selector(static #"initWithReceivePort:sendPort:") = Id, NSPort, NSPort;
overload selector(static #"initWithReceivePort:sendPort:components:") = Id, NSPort, NSPort, NSArray;
overload selector(static #"initWithRequest:cachedResponse:client:") = Id, NSURLRequest, NSCachedURLResponse, Id;
overload selector(static #"initWithRequest:delegate:") = Id, NSURLRequest, Id;
overload selector(static #"initWithRequest:delegate:startImmediately:") = Id, NSURLRequest, Id, Bool;
overload selector(static #"initWithResponse:data:") = Id, NSURLResponse, NSData;
overload selector(static #"initWithResponse:data:userInfo:storagePolicy:") = Id, NSURLResponse, NSData, NSDictionary, CULong;
overload selector(static #"initWithResumeData:delegate:path:") = Id, NSData, Id, NSString;
overload selector(static #"initWithRootElement:") = Id, NSXMLElement;
overload selector(static #"initWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:") = Id, CULong, Short, Bool, Bool, Bool, Bool;
overload selector(static #"initWithScheme:host:path:") = Id, NSString, NSString, NSString;
overload selector(static #"initWithSendPort:receivePort:components:") = Id, NSPort, NSPort, NSArray;
overload selector(static #"initWithSet:") = Id, NSSet;
overload selector(static #"initWithSet:copyItems:") = Id, NSSet, Bool;
overload selector(static #"initWithShort:") = Id, Short;
overload selector(static #"initWithSource:") = Id, NSString;
overload selector(static #"initWithStorageLocation:") = Id, NSURL;
overload selector(static #"initWithString:") = Id, NSString;
overload selector(static #"initWithString:attributes:") = Id, NSString, NSDictionary;
overload selector(static #"initWithString:calendarFormat:") = Id, NSString, NSString;
overload selector(static #"initWithString:calendarFormat:locale:") = Id, NSString, NSString, Id;
overload selector(static #"initWithString:locale:") = Id, NSString, Id;
overload selector(static #"initWithString:relativeToURL:") = Id, NSString, NSURL;
overload selector(static #"initWithSuiteName:className:dictionary:") = Id, NSString, NSString, NSDictionary;
overload selector(static #"initWithSuiteName:commandName:dictionary:") = Id, NSString, NSString, NSDictionary;
overload selector(static #"initWithTCPPort:") = Id, UShort;
overload selector(static #"initWithTarget:connection:") = Id, Id, NSConnection;
overload selector(static #"initWithTarget:protocol:") = Id, NSObject, Id;
overload selector(static #"initWithTarget:selector:object:") = Id, Id, SelectorHandle, Id;
overload selector(static #"initWithTimeInterval:sinceDate:") = Id, Double, NSDate;
overload selector(static #"initWithTimeIntervalSince1970:") = Id, Double;
overload selector(static #"initWithTimeIntervalSinceNow:") = Id, Double;
overload selector(static #"initWithTimeIntervalSinceReferenceDate:") = Id, Double;
overload selector(static #"initWithTransform:") = Id, NSAffineTransform;
overload selector(static #"initWithTrust:") = Id, SecTrustRef;
overload selector(static #"initWithType:subpredicates:") = Id, CULong, NSArray;
overload selector(static #"initWithURL:") = Id, NSURL;
overload selector(static #"initWithURL:MIMEType:expectedContentLength:textEncodingName:") = Id, NSURL, NSString, CLong, NSString;
overload selector(static #"initWithURL:append:") = Id, NSURL, Bool;
overload selector(static #"initWithURL:cachePolicy:timeoutInterval:") = Id, NSURL, CULong, Double;
overload selector(static #"initWithURL:cached:") = Id, NSURL, Bool;
overload selector(static #"initWithUTF8String:") = Id, Pointer[CChar];
overload selector(static #"initWithUnsignedChar:") = Id, CUChar;
overload selector(static #"initWithUnsignedInt:") = Id, UInt;
overload selector(static #"initWithUnsignedInteger:") = Id, CULong;
overload selector(static #"initWithUnsignedLong:") = Id, CULong;
overload selector(static #"initWithUnsignedLongLong:") = Id, UInt64;
overload selector(static #"initWithUnsignedShort:") = Id, UShort;
overload selector(static #"initWithUser:") = Id, NSString;
overload selector(static #"initWithUser:password:persistence:") = Id, NSString, NSString, CULong;
overload selector(static #"initWithXMLString:") = Id, NSString;
overload selector(static #"initWithXMLString:error:") = Id, NSString, Pointer[NSError];
overload selector(static #"initWithXMLString:options:error:") = Id, NSString, CULong, Pointer[NSError];
overload selector(static #"initWithYear:month:day:hour:minute:second:timeZone:") = Id, CLong, CULong, CULong, CULong, CULong, CULong, NSTimeZone;
overload selector(static #"initialize") = Void;
overload selector(static #"inputStreamWithData:") = Id, NSData;
overload selector(static #"inputStreamWithFileAtPath:") = Id, NSString;
overload selector(static #"inputStreamWithURL:") = Id, NSURL;
overload selector(static #"insertAttributedString:atIndex:") = Void, NSAttributedString, CULong;
overload selector(static #"insertChild:atIndex:") = Void, NSXMLNode, CULong;
overload selector(static #"insertChildren:atIndex:") = Void, NSArray, CULong;
overload selector(static #"insertDescriptor:atIndex:") = Void, NSAppleEventDescriptor, CLong;
overload selector(static #"insertObject:atIndex:") = Void, Id, CULong;
overload selector(static #"insertObjects:atIndexes:") = Void, NSArray, NSIndexSet;
overload selector(static #"insertPointer:atIndex:") = Void, RawPointer, CULong;
overload selector(static #"insertString:atIndex:") = Void, NSString, CULong;
overload selector(static #"insertValue:atIndex:inPropertyWithKey:") = Void, Id, CULong, NSString;
overload selector(static #"insertValue:inPropertyWithKey:") = Void, Id, NSString;
overload selector(static #"insertionContainer") = Id;
overload selector(static #"insertionIndex") = CLong;
overload selector(static #"insertionKey") = NSString;
overload selector(static #"insertionReplaces") = Bool;
overload selector(static #"instanceMethodForSelector:") = IMP, SelectorHandle;
overload selector(static #"instanceMethodSignatureForSelector:") = NSMethodSignature, SelectorHandle;
overload selector(static #"instancesRespondToSelector:") = Bool, SelectorHandle;
overload selector(static #"int32Value") = Int;
overload selector(static #"intValue") = Int;
overload selector(static #"integerForKey:") = CLong, NSString;
overload selector(static #"integerValue") = CLong;
overload selector(static #"internationalCurrencySymbol") = NSString;
overload selector(static #"interrupt") = Void;
overload selector(static #"intersectHashTable:") = Void, NSHashTable;
overload selector(static #"intersectSet:") = Void, NSSet;
overload selector(static #"intersectsHashTable:") = Bool, NSHashTable;
overload selector(static #"intersectsIndexesInRange:") = Bool, NSRange;
overload selector(static #"intersectsSet:") = Bool, NSSet;
overload selector(static #"invalidate") = Void;
overload selector(static #"invalidateClassDescriptionCache") = Void;
overload selector(static #"inverseForRelationshipKey:") = NSString, NSString;
overload selector(static #"invert") = Void;
overload selector(static #"invertedSet") = NSCharacterSet;
overload selector(static #"invocation") = NSInvocation;
overload selector(static #"invocationWithMethodSignature:") = NSInvocation, NSMethodSignature;
overload selector(static #"invoke") = Void;
overload selector(static #"invokeWithTarget:") = Void, Id;
overload selector(static #"isAbsolutePath") = Bool;
overload selector(static #"isAtEnd") = Bool;
overload selector(static #"isBycopy") = Bool;
overload selector(static #"isByref") = Bool;
overload selector(static #"isCancelled") = Bool;
overload selector(static #"isCaseInsensitiveLike:") = Bool, NSString;
overload selector(static #"isCollecting") = Bool;
overload selector(static #"isCompiled") = Bool;
overload selector(static #"isConcurrent") = Bool;
overload selector(static #"isDaylightSavingTime") = Bool;
overload selector(static #"isDaylightSavingTimeForDate:") = Bool, NSDate;
overload selector(static #"isDeletableFileAtPath:") = Bool, NSString;
overload selector(static #"isEnabled") = Bool;
overload selector(static #"isEqualFunction") = CCodePointer[(RawPointer,RawPointer,CCodePointer[(RawPointer),(CULong)]),(CChar)];
overload selector(static #"isEqualTo:") = Bool, Id;
overload selector(static #"isEqualToArray:") = Bool, NSArray;
overload selector(static #"isEqualToAttributedString:") = Bool, NSAttributedString;
overload selector(static #"isEqualToData:") = Bool, NSData;
overload selector(static #"isEqualToDate:") = Bool, NSDate;
overload selector(static #"isEqualToDictionary:") = Bool, NSDictionary;
overload selector(static #"isEqualToHashTable:") = Bool, NSHashTable;
overload selector(static #"isEqualToHost:") = Bool, NSHost;
overload selector(static #"isEqualToIndexSet:") = Bool, NSIndexSet;
overload selector(static #"isEqualToNumber:") = Bool, NSNumber;
overload selector(static #"isEqualToSet:") = Bool, NSSet;
overload selector(static #"isEqualToString:") = Bool, NSString;
overload selector(static #"isEqualToTimeZone:") = Bool, NSTimeZone;
overload selector(static #"isEqualToValue:") = Bool, NSValue;
overload selector(static #"isExecutableFileAtPath:") = Bool, NSString;
overload selector(static #"isExecuting") = Bool;
overload selector(static #"isExternal") = Bool;
overload selector(static #"isFileReferenceURL") = Bool;
overload selector(static #"isFileURL") = Bool;
overload selector(static #"isFinished") = Bool;
overload selector(static #"isGathering") = Bool;
overload selector(static #"isGreaterThan:") = Bool, Id;
overload selector(static #"isGreaterThanOrEqualTo:") = Bool, Id;
overload selector(static #"isHTTPOnly") = Bool;
overload selector(static #"isHostCacheEnabled") = Bool;
overload selector(static #"isLenient") = Bool;
overload selector(static #"isLessThan:") = Bool, Id;
overload selector(static #"isLessThanOrEqualTo:") = Bool, Id;
overload selector(static #"isLike:") = Bool, NSString;
overload selector(static #"isLoaded") = Bool;
overload selector(static #"isLocationRequiredToCreateForKey:") = Bool, NSString;
overload selector(static #"isMainThread") = Bool;
overload selector(static #"isMultiThreaded") = Bool;
overload selector(static #"isNotEqualTo:") = Bool, Id;
overload selector(static #"isOneway") = Bool;
overload selector(static #"isOptionalArgumentWithName:") = Bool, NSString;
overload selector(static #"isPartialStringValid:newEditingString:errorDescription:") = Bool, NSString, Pointer[NSString], Pointer[NSString];
overload selector(static #"isPartialStringValid:proposedSelectedRange:originalString:originalSelectedRange:errorDescription:") = Bool, Pointer[NSString], NSRangePointer, NSString, NSRange, Pointer[NSString];
overload selector(static #"isPartialStringValidationEnabled") = Bool;
overload selector(static #"isProxy") = Bool;
overload selector(static #"isReadOnlyKey:") = Bool, NSString;
overload selector(static #"isReadableFileAtPath:") = Bool, NSString;
overload selector(static #"isReady") = Bool;
overload selector(static #"isRedoing") = Bool;
overload selector(static #"isRunning") = Bool;
overload selector(static #"isSecure") = Bool;
overload selector(static #"isSessionOnly") = Bool;
overload selector(static #"isStandalone") = Bool;
overload selector(static #"isStarted") = Bool;
overload selector(static #"isStopped") = Bool;
overload selector(static #"isSubclassOfClass:") = Bool, Id;
overload selector(static #"isSubsetOfHashTable:") = Bool, NSHashTable;
overload selector(static #"isSubsetOfSet:") = Bool, NSSet;
overload selector(static #"isSupersetOfSet:") = Bool, NSCharacterSet;
overload selector(static #"isSuspended") = Bool;
overload selector(static #"isTrue") = Bool;
overload selector(static #"isUndoRegistrationEnabled") = Bool;
overload selector(static #"isUndoing") = Bool;
overload selector(static #"isValid") = Bool;
overload selector(static #"isWellFormed") = Bool;
overload selector(static #"isWordInUserDictionaries:caseSensitive:") = Bool, NSString, Bool;
overload selector(static #"isWritableFileAtPath:") = Bool, NSString;
overload selector(static #"key") = NSString;
overload selector(static #"keyClassDescription") = NSScriptClassDescription;
overload selector(static #"keyEnumerator") = NSEnumerator;
overload selector(static #"keyPath") = NSString;
overload selector(static #"keyPathsForValuesAffectingValueForKey:") = NSSet, NSString;
overload selector(static #"keyPointerFunctions") = NSPointerFunctions;
overload selector(static #"keySpecifier") = NSScriptObjectSpecifier;
overload selector(static #"keyWithAppleEventCode:") = NSString, UInt;
overload selector(static #"keysOfEntriesPassingTest:") = NSSet, UnknownType;
overload selector(static #"keysOfEntriesWithOptions:passingTest:") = NSSet, CULong, UnknownType;
overload selector(static #"keysSortedByValueUsingComparator:") = NSArray, NSComparator;
overload selector(static #"keysSortedByValueUsingSelector:") = NSArray, SelectorHandle;
overload selector(static #"keysSortedByValueWithOptions:usingComparator:") = NSArray, CULong, NSComparator;
overload selector(static #"keywordForDescriptorAtIndex:") = UInt, CLong;
overload selector(static #"kind") = CULong;
overload selector(static #"knownTimeZoneNames") = NSArray;
overload selector(static #"languageMap") = NSDictionary;
overload selector(static #"languagesForScript:") = NSArray, NSString;
overload selector(static #"lastIndex") = CULong;
overload selector(static #"lastObject") = Id;
overload selector(static #"lastPathComponent") = NSString;
overload selector(static #"laterDate:") = NSDate, NSDate;
overload selector(static #"launch") = Void;
overload selector(static #"launchPath") = NSString;
overload selector(static #"launchedTaskWithLaunchPath:arguments:") = NSTask, NSString, NSArray;
overload selector(static #"leftExpression") = NSExpression;
overload selector(static #"length") = CULong;
overload selector(static #"lengthOfBytesUsingEncoding:") = CULong, CULong;
overload selector(static #"letterCharacterSet") = Id;
overload selector(static #"level") = CULong;
overload selector(static #"levelsOfUndo") = CULong;
overload selector(static #"limitDateForMode:") = NSDate, NSString;
overload selector(static #"lineDirectionForLanguage:") = CULong, NSString;
overload selector(static #"lineNumber") = CLong;
overload selector(static #"lineRangeForRange:") = NSRange, NSRange;
overload selector(static #"linkCheckingResultWithRange:URL:") = NSTextCheckingResult, NSRange, NSURL;
overload selector(static #"linkItemAtPath:toPath:error:") = Bool, NSString, NSString, Pointer[NSError];
overload selector(static #"linkItemAtURL:toURL:error:") = Bool, NSURL, NSURL, Pointer[NSError];
overload selector(static #"linkPath:toPath:handler:") = Bool, NSString, NSString, Id;
overload selector(static #"listDescriptor") = NSAppleEventDescriptor;
overload selector(static #"load") = Bool;
overload selector(static #"loadAndReturnError:") = Bool, Pointer[NSError];
overload selector(static #"loadInBackground") = Void;
overload selector(static #"loadInForeground") = NSData;
overload selector(static #"loadResourceDataNotifyingClient:usingCache:") = Void, Id, Bool;
overload selector(static #"loadSuiteWithDictionary:fromBundle:") = Void, NSDictionary, NSBundle;
overload selector(static #"loadSuitesFromBundle:") = Void, NSBundle;
overload selector(static #"localName") = NSString;
overload selector(static #"localNameForName:") = NSString, NSString;
overload selector(static #"localObjects") = NSArray;
overload selector(static #"localTimeZone") = NSTimeZone;
overload selector(static #"locale") = Id;
overload selector(static #"localeIdentifier") = NSString;
overload selector(static #"localeIdentifierFromComponents:") = NSString, NSDictionary;
overload selector(static #"localeIdentifierFromWindowsLocaleCode:") = NSString, UInt;
overload selector(static #"localizations") = NSArray;
overload selector(static #"localizedCaseInsensitiveCompare:") = CLong, NSString;
overload selector(static #"localizedCompare:") = CLong, NSString;
overload selector(static #"localizedDescription") = NSString;
overload selector(static #"localizedFailureReason") = NSString;
overload selector(static #"localizedInfoDictionary") = NSDictionary;
overload selector(static #"localizedName") = NSString;
overload selector(static #"localizedName:locale:") = NSString, CLong, NSLocale;
overload selector(static #"localizedNameOfStringEncoding:") = NSString, CULong;
overload selector(static #"localizedRecoveryOptions") = NSArray;
overload selector(static #"localizedRecoverySuggestion") = NSString;
overload selector(static #"localizedScannerWithString:") = Id, NSString;
overload selector(static #"localizedStandardCompare:") = CLong, NSString;
overload selector(static #"localizedStringForKey:value:table:") = NSString, NSString, NSString, NSString;
overload selector(static #"localizedStringForStatusCode:") = NSString, CLong;
overload selector(static #"localizedStringFromDate:dateStyle:timeStyle:") = NSString, NSDate, CULong, CULong;
overload selector(static #"localizedStringFromNumber:numberStyle:") = NSString, NSNumber, CULong;
overload varargSelector(static #"localizedStringWithFormat:") = Id, NSString;
overload selector(static #"localizesFormat") = Bool;
overload selector(static #"lockBeforeDate:") = Bool, NSDate;
overload selector(static #"lockDate") = NSDate;
overload selector(static #"lockWhenCondition:") = Void, CLong;
overload selector(static #"lockWhenCondition:beforeDate:") = Bool, CLong, NSDate;
overload selector(static #"lockWithPath:") = NSDistributedLock, NSString;
overload selector(static #"longCharacterIsMember:") = Bool, UInt;
overload selector(static #"longEraSymbols") = NSArray;
overload selector(static #"longLongValue") = Int64;
overload selector(static #"longValue") = CLong;
overload selector(static #"lossyCString") = Pointer[CChar];
overload selector(static #"lowercaseLetterCharacterSet") = Id;
overload selector(static #"lowercaseString") = NSString;
overload selector(static #"machPort") = UInt;
overload selector(static #"main") = Void;
overload selector(static #"mainBundle") = NSBundle;
overload selector(static #"mainDocumentURL") = NSURL;
overload selector(static #"mainQueue") = Id;
overload selector(static #"mainRunLoop") = NSRunLoop;
overload selector(static #"mainThread") = NSThread;
overload selector(static #"makeObjectsPerformSelector:") = Void, SelectorHandle;
overload selector(static #"makeObjectsPerformSelector:withObject:") = Void, SelectorHandle, Id;
overload selector(static #"mapTableWithKeyOptions:valueOptions:") = Id, CULong, CULong;
overload selector(static #"mapTableWithStrongToStrongObjects") = Id;
overload selector(static #"mapTableWithStrongToWeakObjects") = Id;
overload selector(static #"mapTableWithWeakToStrongObjects") = Id;
overload selector(static #"mapTableWithWeakToWeakObjects") = Id;
overload selector(static #"matchesAppleEventCode:") = Bool, UInt;
overload selector(static #"maxConcurrentOperationCount") = CLong;
overload selector(static #"maximum") = NSNumber;
overload selector(static #"maximumDecimalNumber") = NSDecimalNumber;
overload selector(static #"maximumFractionDigits") = CULong;
overload selector(static #"maximumIntegerDigits") = CULong;
overload selector(static #"maximumLengthOfBytesUsingEncoding:") = CULong, CULong;
overload selector(static #"maximumRangeOfUnit:") = NSRange, CULong;
overload selector(static #"maximumSignificantDigits") = CULong;
overload selector(static #"member:") = Id, Id;
overload selector(static #"memoryCapacity") = CULong;
overload selector(static #"methodForSelector:") = IMP, SelectorHandle;
overload selector(static #"methodReturnLength") = CULong;
overload selector(static #"methodReturnType") = Pointer[CChar];
overload selector(static #"methodSignature") = NSMethodSignature;
overload selector(static #"methodSignatureForSelector:") = NSMethodSignature, SelectorHandle;
overload selector(static #"minimum") = NSNumber;
overload selector(static #"minimumDaysInFirstWeek") = CULong;
overload selector(static #"minimumDecimalNumber") = NSDecimalNumber;
overload selector(static #"minimumFractionDigits") = CULong;
overload selector(static #"minimumIntegerDigits") = CULong;
overload selector(static #"minimumRangeOfUnit:") = NSRange, CULong;
overload selector(static #"minimumSignificantDigits") = CULong;
overload selector(static #"minusHashTable:") = Void, NSHashTable;
overload selector(static #"minusSet:") = Void, NSSet;
overload selector(static #"minusSign") = NSString;
overload selector(static #"minute") = CLong;
overload selector(static #"minuteOfHour") = CLong;
overload selector(static #"month") = CLong;
overload selector(static #"monthOfYear") = CLong;
overload selector(static #"monthSymbols") = NSArray;
overload selector(static #"mountedVolumeURLsIncludingResourceValuesForKeys:options:") = NSArray, NSArray, CULong;
overload selector(static #"moveItemAtPath:toPath:error:") = Bool, NSString, NSString, Pointer[NSError];
overload selector(static #"moveItemAtURL:toURL:error:") = Bool, NSURL, NSURL, Pointer[NSError];
overload selector(static #"movePath:toPath:handler:") = Bool, NSString, NSString, Id;
overload selector(static #"msgid") = UInt;
overload selector(static #"multipleThreadsEnabled") = Bool;
overload selector(static #"multiplier") = NSNumber;
overload selector(static #"mutableArrayValueForKey:") = NSMutableArray, NSString;
overload selector(static #"mutableArrayValueForKeyPath:") = NSMutableArray, NSString;
overload selector(static #"mutableBytes") = RawPointer;
overload selector(static #"mutableCopy") = Id;
overload selector(static #"mutableCopyWithZone:") = Id, Pointer[NSZone];
overload selector(static #"mutableSetValueForKey:") = NSMutableSet, NSString;
overload selector(static #"mutableSetValueForKeyPath:") = NSMutableSet, NSString;
overload selector(static #"mutableString") = NSMutableString;
overload selector(static #"name") = NSString;
overload selector(static #"names") = NSArray;
overload selector(static #"namespaceForPrefix:") = NSXMLNode, NSString;
overload selector(static #"namespaceWithName:stringValue:") = Id, NSString, NSString;
overload selector(static #"namespaces") = NSArray;
overload selector(static #"negativeFormat") = NSString;
overload selector(static #"negativeInfinitySymbol") = NSString;
overload selector(static #"negativePrefix") = NSString;
overload selector(static #"negativeSuffix") = NSString;
overload selector(static #"new") = Id;
overload selector(static #"newScriptingObjectOfClass:forValueForKey:withContentsValue:properties:") = Id, Id, NSString, Id, NSDictionary;
overload selector(static #"newlineCharacterSet") = Id;
overload selector(static #"nextDaylightSavingTimeTransition") = NSDate;
overload selector(static #"nextDaylightSavingTimeTransitionAfterDate:") = NSDate, NSDate;
overload selector(static #"nextNode") = NSXMLNode;
overload selector(static #"nextObject") = Id;
overload selector(static #"nextSibling") = NSXMLNode;
overload selector(static #"nilSymbol") = NSString;
overload selector(static #"nodesForXPath:error:") = NSArray, NSString, Pointer[NSError];
overload selector(static #"nonBaseCharacterSet") = Id;
overload selector(static #"nonretainedObjectValue") = Id;
overload selector(static #"normalizeAdjacentTextNodesPreservingCDATA:") = Void, Bool;
overload selector(static #"notANumber") = NSDecimalNumber;
overload selector(static #"notANumberSymbol") = NSString;
overload selector(static #"notPredicateWithSubpredicate:") = NSPredicate, NSPredicate;
overload selector(static #"notationDeclarationForName:") = NSXMLDTDNode, NSString;
overload selector(static #"notationName") = NSString;
overload selector(static #"notificationBatchingInterval") = Double;
overload selector(static #"notificationCenterForType:") = NSDistributedNotificationCenter, NSString;
overload selector(static #"notificationWithName:object:") = Id, NSString, Id;
overload selector(static #"notificationWithName:object:userInfo:") = Id, NSString, Id, NSDictionary;
overload selector(static #"null") = NSNull;
overload selector(static #"nullDescriptor") = NSAppleEventDescriptor;
overload selector(static #"numberFromString:") = NSNumber, NSString;
overload selector(static #"numberOfArguments") = CULong;
overload selector(static #"numberOfItems") = CLong;
overload selector(static #"numberStyle") = CULong;
overload selector(static #"numberWithBool:") = NSNumber, Bool;
overload selector(static #"numberWithChar:") = NSNumber, CChar;
overload selector(static #"numberWithDouble:") = NSNumber, Double;
overload selector(static #"numberWithFloat:") = NSNumber, Float;
overload selector(static #"numberWithInt:") = NSNumber, Int;
overload selector(static #"numberWithInteger:") = NSNumber, CLong;
overload selector(static #"numberWithLong:") = NSNumber, CLong;
overload selector(static #"numberWithLongLong:") = NSNumber, Int64;
overload selector(static #"numberWithShort:") = NSNumber, Short;
overload selector(static #"numberWithUnsignedChar:") = NSNumber, CUChar;
overload selector(static #"numberWithUnsignedInt:") = NSNumber, UInt;
overload selector(static #"numberWithUnsignedInteger:") = NSNumber, CULong;
overload selector(static #"numberWithUnsignedLong:") = NSNumber, CULong;
overload selector(static #"numberWithUnsignedLongLong:") = NSNumber, UInt64;
overload selector(static #"numberWithUnsignedShort:") = NSNumber, UShort;
overload selector(static #"objCType") = Pointer[CChar];
overload selector(static #"object") = Id;
overload selector(static #"objectAtIndex:") = Id, CULong;
overload selector(static #"objectBeingTested") = Id;
overload selector(static #"objectByApplyingXSLT:arguments:error:") = Id, NSData, NSDictionary, Pointer[NSError];
overload selector(static #"objectByApplyingXSLTAtURL:arguments:error:") = Id, NSURL, NSDictionary, Pointer[NSError];
overload selector(static #"objectByApplyingXSLTString:arguments:error:") = Id, NSString, NSDictionary, Pointer[NSError];
overload selector(static #"objectEnumerator") = NSEnumerator;
overload selector(static #"objectForInfoDictionaryKey:") = Id, NSString;
overload selector(static #"objectForKey:") = Id, Id;
overload selector(static #"objectIsForcedForKey:") = Bool, NSString;
overload selector(static #"objectIsForcedForKey:inDomain:") = Bool, NSString, NSString;
overload selector(static #"objectSpecifier") = NSScriptObjectSpecifier;
overload selector(static #"objectSpecifierWithDescriptor:") = NSScriptObjectSpecifier, NSAppleEventDescriptor;
overload selector(static #"objectValue") = Id;
overload selector(static #"objectZone") = Pointer[NSZone];
overload selector(static #"objectsAtIndexes:") = NSArray, NSIndexSet;
overload selector(static #"objectsByEvaluatingSpecifier") = Id;
overload selector(static #"objectsByEvaluatingWithContainers:") = Id, Id;
overload selector(static #"objectsForKeys:notFoundMarker:") = NSArray, NSArray, Id;
overload selector(static #"objectsForXQuery:constants:error:") = NSArray, NSString, NSDictionary, Pointer[NSError];
overload selector(static #"objectsForXQuery:error:") = NSArray, NSString, Pointer[NSError];
overload selector(static #"objectsPassingTest:") = NSSet, UnknownType;
overload selector(static #"objectsWithOptions:passingTest:") = NSSet, CULong, UnknownType;
overload selector(static #"observationInfo") = RawPointer;
overload selector(static #"observeValueForKeyPath:ofObject:change:context:") = Void, NSString, Id, NSDictionary, RawPointer;
overload selector(static #"offsetInFile") = UInt64;
overload selector(static #"one") = NSDecimalNumber;
overload selector(static #"open") = Void;
overload selector(static #"operand") = NSExpression;
overload selector(static #"operatingSystem") = CULong;
overload selector(static #"operatingSystemName") = NSString;
overload selector(static #"operatingSystemVersionString") = NSString;
overload selector(static #"operationCount") = CULong;
overload selector(static #"operations") = NSArray;
overload selector(static #"options") = CULong;
overload selector(static #"orPredicateWithSubpredicates:") = NSPredicate, NSArray;
overload selector(static #"ordinalityOfUnit:inUnit:forDate:") = CULong, CULong, CULong, NSDate;
overload selector(static #"orthography") = NSOrthography;
overload selector(static #"orthographyCheckingResultWithRange:orthography:") = NSTextCheckingResult, NSRange, NSOrthography;
overload selector(static #"orthographyWithDominantScript:languageMap:") = Id, NSString, NSDictionary;
overload selector(static #"outputFormat") = CULong;
overload selector(static #"outputStreamToBuffer:capacity:") = Id, Pointer[CUChar], CULong;
overload selector(static #"outputStreamToFileAtPath:append:") = Id, NSString, Bool;
overload selector(static #"outputStreamToMemory") = Id;
overload selector(static #"outputStreamWithURL:append:") = Id, NSURL, Bool;
overload selector(static #"paddingCharacter") = NSString;
overload selector(static #"paddingPosition") = CULong;
overload selector(static #"paragraphRangeForRange:") = NSRange, NSRange;
overload selector(static #"paramDescriptorForKeyword:") = NSAppleEventDescriptor, UInt;
overload selector(static #"parameterString") = NSString;
overload selector(static #"parent") = NSXMLNode;
overload selector(static #"parse") = Bool;
overload selector(static #"parserError") = NSError;
overload selector(static #"password") = NSString;
overload selector(static #"path") = NSString;
overload selector(static #"pathComponents") = NSArray;
overload selector(static #"pathContentOfSymbolicLinkAtPath:") = NSString, NSString;
overload selector(static #"pathExtension") = NSString;
overload selector(static #"pathForAuxiliaryExecutable:") = NSString, NSString;
overload selector(static #"pathForResource:ofType:") = NSString, NSString, NSString;
overload selector(static #"pathForResource:ofType:inDirectory:") = NSString, NSString, NSString, NSString;
overload selector(static #"pathForResource:ofType:inDirectory:forLocalization:") = NSString, NSString, NSString, NSString, NSString;
overload selector(static #"pathWithComponents:") = NSString, NSArray;
overload selector(static #"pathsForResourcesOfType:inDirectory:") = NSArray, NSString, NSString;
overload selector(static #"pathsForResourcesOfType:inDirectory:forLocalization:") = NSArray, NSString, NSString, NSString;
overload selector(static #"pathsMatchingExtensions:") = NSArray, NSArray;
overload selector(static #"perMillSymbol") = NSString;
overload selector(static #"percentSymbol") = NSString;
overload selector(static #"performDefaultImplementation") = Id;
overload selector(static #"performSelector:onThread:withObject:waitUntilDone:") = Void, SelectorHandle, NSThread, Id, Bool;
overload selector(static #"performSelector:onThread:withObject:waitUntilDone:modes:") = Void, SelectorHandle, NSThread, Id, Bool, NSArray;
overload selector(static #"performSelector:target:argument:order:modes:") = Void, SelectorHandle, Id, Id, CULong, NSArray;
overload selector(static #"performSelector:withObject:afterDelay:") = Void, SelectorHandle, Id, Double;
overload selector(static #"performSelector:withObject:afterDelay:inModes:") = Void, SelectorHandle, Id, Double, NSArray;
overload selector(static #"performSelectorInBackground:withObject:") = Void, SelectorHandle, Id;
overload selector(static #"performSelectorOnMainThread:withObject:waitUntilDone:") = Void, SelectorHandle, Id, Bool;
overload selector(static #"performSelectorOnMainThread:withObject:waitUntilDone:modes:") = Void, SelectorHandle, Id, Bool, NSArray;
overload selector(static #"persistence") = CULong;
overload selector(static #"persistentDomainForName:") = NSDictionary, NSString;
overload selector(static #"persistentDomainNames") = NSArray;
overload selector(static #"physicalMemory") = UInt64;
overload selector(static #"pipe") = Id;
overload selector(static #"plusSign") = NSString;
overload selector(static #"pointValue") = NSPoint;
overload selector(static #"pointerArrayWithOptions:") = Id, CULong;
overload selector(static #"pointerArrayWithPointerFunctions:") = Id, NSPointerFunctions;
overload selector(static #"pointerArrayWithStrongObjects") = Id;
overload selector(static #"pointerArrayWithWeakObjects") = Id;
overload selector(static #"pointerAtIndex:") = RawPointer, CULong;
overload selector(static #"pointerFunctions") = NSPointerFunctions;
overload selector(static #"pointerFunctionsWithOptions:") = Id, CULong;
overload selector(static #"pointerValue") = RawPointer;
overload selector(static #"port") = Id;
overload selector(static #"portCoderWithReceivePort:sendPort:components:") = Id, NSPort, NSPort, NSArray;
overload selector(static #"portForName:") = NSPort, NSString;
overload selector(static #"portForName:host:") = NSPort, NSString, NSString;
overload selector(static #"portForName:host:nameServerPortNumber:") = NSPort, NSString, NSString, UShort;
overload selector(static #"portList") = NSArray;
overload selector(static #"portWithMachPort:") = NSPort, UInt;
overload selector(static #"portWithMachPort:options:") = NSPort, UInt, CULong;
overload selector(static #"poseAsClass:") = Void, Id;
overload selector(static #"position") = CULong;
overload selector(static #"positiveFormat") = NSString;
overload selector(static #"positiveInfinitySymbol") = NSString;
overload selector(static #"positivePrefix") = NSString;
overload selector(static #"positiveSuffix") = NSString;
overload selector(static #"postNotification:") = Void, NSNotification;
overload selector(static #"postNotificationName:object:") = Void, NSString, Id;
overload selector(static #"postNotificationName:object:userInfo:") = Void, NSString, Id, NSDictionary;
overload selector(static #"postNotificationName:object:userInfo:deliverImmediately:") = Void, NSString, NSString, NSDictionary, Bool;
overload selector(static #"postNotificationName:object:userInfo:options:") = Void, NSString, NSString, NSDictionary, CULong;
overload selector(static #"precomposedStringWithCanonicalMapping") = NSString;
overload selector(static #"precomposedStringWithCompatibilityMapping") = NSString;
overload selector(static #"predefinedEntityDeclarationForName:") = NSXMLDTDNode, NSString;
overload selector(static #"predefinedNamespaceForPrefix:") = NSXMLNode, NSString;
overload selector(static #"predicate") = NSPredicate;
overload selector(static #"predicateFormat") = NSString;
overload selector(static #"predicateOperatorType") = CULong;
overload selector(static #"predicateWithBlock:") = NSPredicate, UnknownType;
overload varargSelector(static #"predicateWithFormat:") = NSPredicate, NSString;
overload selector(static #"predicateWithFormat:argumentArray:") = NSPredicate, NSString, NSArray;
overload selector(static #"predicateWithFormat:arguments:") = NSPredicate, NSString, Pointer[__va_list_tag];
overload selector(static #"predicateWithLeftExpression:rightExpression:customSelector:") = NSPredicate, NSExpression, NSExpression, SelectorHandle;
overload selector(static #"predicateWithLeftExpression:rightExpression:modifier:type:options:") = NSPredicate, NSExpression, NSExpression, CULong, CULong, CULong;
overload selector(static #"predicateWithSubstitutionVariables:") = NSPredicate, NSDictionary;
overload selector(static #"predicateWithValue:") = NSPredicate, Bool;
overload selector(static #"preferredLanguages") = NSArray;
overload selector(static #"preferredLocalizations") = NSArray;
overload selector(static #"preferredLocalizationsFromArray:") = NSArray, NSArray;
overload selector(static #"preferredLocalizationsFromArray:forPreferences:") = NSArray, NSArray, NSArray;
overload selector(static #"prefix") = NSString;
overload selector(static #"prefixForName:") = NSString, NSString;
overload selector(static #"preflightAndReturnError:") = Bool, Pointer[NSError];
overload selector(static #"prepareWithInvocationTarget:") = Id, Id;
overload selector(static #"prependTransform:") = Void, NSAffineTransform;
overload selector(static #"previousFailureCount") = CLong;
overload selector(static #"previousNode") = NSXMLNode;
overload selector(static #"previousSibling") = NSXMLNode;
overload selector(static #"principalClass") = Id;
overload selector(static #"privateFrameworksPath") = NSString;
overload selector(static #"privateFrameworksURL") = NSURL;
overload selector(static #"processIdentifier") = Int;
overload selector(static #"processInfo") = NSProcessInfo;
overload selector(static #"processName") = NSString;
overload selector(static #"processingInstructionWithName:stringValue:") = Id, NSString, NSString;
overload selector(static #"processorCount") = CULong;
overload selector(static #"properties") = NSDictionary;
overload selector(static #"propertyForKey:") = Id, NSString;
overload selector(static #"propertyForKey:inRequest:") = Id, NSString, NSURLRequest;
overload selector(static #"propertyForKeyIfAvailable:") = Id, NSString;
overload selector(static #"propertyList") = Id;
overload selector(static #"propertyList:isValidForFormat:") = Bool, Id, CULong;
overload selector(static #"propertyListFromData:mutabilityOption:format:errorDescription:") = Id, NSData, CULong, Pointer[CULong], Pointer[NSString];
overload selector(static #"propertyListFromStringsFileFormat") = NSDictionary;
overload selector(static #"propertyListWithData:options:format:error:") = Id, NSData, CULong, Pointer[CULong], Pointer[NSError];
overload selector(static #"propertyListWithStream:options:format:error:") = Id, NSInputStream, CULong, Pointer[CULong], Pointer[NSError];
overload selector(static #"proposedCredential") = NSURLCredential;
overload selector(static #"protectionSpace") = NSURLProtectionSpace;
overload selector(static #"protocol") = Int;
overload selector(static #"protocolCheckerWithTarget:protocol:") = Id, NSObject, Id;
overload selector(static #"protocolFamily") = Int;
overload selector(static #"protocolSpecificInformation") = NSString;
overload selector(static #"proxyType") = NSString;
overload selector(static #"proxyWithLocal:connection:") = NSDistantObject, Id, NSConnection;
overload selector(static #"proxyWithTarget:connection:") = NSDistantObject, Id, NSConnection;
overload selector(static #"publicID") = NSString;
overload selector(static #"publish") = Void;
overload selector(static #"publishWithOptions:") = Void, CULong;
overload selector(static #"punctuationCharacterSet") = Id;
overload selector(static #"quarter") = CLong;
overload selector(static #"quarterSymbols") = NSArray;
overload selector(static #"query") = NSString;
overload selector(static #"queuePriority") = CLong;
overload selector(static #"quoteCheckingResultWithRange:replacementString:") = NSTextCheckingResult, NSRange, NSString;
overload selector(static #"raise") = Void;
overload varargSelector(static #"raise:format:") = Void, NSString, NSString;
overload selector(static #"raise:format:arguments:") = Void, NSString, NSString, Pointer[__va_list_tag];
overload selector(static #"range") = NSRange;
overload selector(static #"rangeContainerObject") = Id;
overload selector(static #"rangeOfCharacterFromSet:") = NSRange, NSCharacterSet;
overload selector(static #"rangeOfCharacterFromSet:options:") = NSRange, NSCharacterSet, CULong;
overload selector(static #"rangeOfCharacterFromSet:options:range:") = NSRange, NSCharacterSet, CULong, NSRange;
overload selector(static #"rangeOfComposedCharacterSequenceAtIndex:") = NSRange, CULong;
overload selector(static #"rangeOfComposedCharacterSequencesForRange:") = NSRange, NSRange;
overload selector(static #"rangeOfData:options:range:") = NSRange, NSData, CULong, NSRange;
overload selector(static #"rangeOfString:") = NSRange, NSString;
overload selector(static #"rangeOfString:options:") = NSRange, NSString, CULong;
overload selector(static #"rangeOfString:options:range:") = NSRange, NSString, CULong, NSRange;
overload selector(static #"rangeOfString:options:range:locale:") = NSRange, NSString, CULong, NSRange, NSLocale;
overload selector(static #"rangeOfUnit:inUnit:forDate:") = NSRange, CULong, CULong, NSDate;
overload selector(static #"rangeOfUnit:startDate:interval:forDate:") = Bool, CULong, Pointer[NSDate], Pointer[Double], NSDate;
overload selector(static #"rangeValue") = NSRange;
overload selector(static #"read:maxLength:") = CLong, Pointer[CUChar], CULong;
overload selector(static #"readDataOfLength:") = NSData, CULong;
overload selector(static #"readDataToEndOfFile") = NSData;
overload selector(static #"readInBackgroundAndNotify") = Void;
overload selector(static #"readInBackgroundAndNotifyForModes:") = Void, NSArray;
overload selector(static #"readToEndOfFileInBackgroundAndNotify") = Void;
overload selector(static #"readToEndOfFileInBackgroundAndNotifyForModes:") = Void, NSArray;
overload selector(static #"realm") = NSString;
overload selector(static #"reason") = NSString;
overload selector(static #"receivePort") = NSPort;
overload selector(static #"receiversSpecifier") = NSScriptObjectSpecifier;
overload selector(static #"receivesCredentialSecurely") = Bool;
overload selector(static #"recordDescriptor") = NSAppleEventDescriptor;
overload selector(static #"recoveryAttempter") = Id;
overload selector(static #"rectValue") = NSRect;
overload selector(static #"redo") = Void;
overload selector(static #"redoActionName") = NSString;
overload selector(static #"redoMenuItemTitle") = NSString;
overload selector(static #"redoMenuTitleForUndoActionName:") = NSString, NSString;
overload selector(static #"registerClass:") = Bool, Id;
overload selector(static #"registerClassDescription:") = Void, NSScriptClassDescription;
overload selector(static #"registerClassDescription:forClass:") = Void, NSClassDescription, Id;
overload selector(static #"registerCoercer:selector:toConvertFromClass:toClass:") = Void, Id, SelectorHandle, Id, Id;
overload selector(static #"registerCommandDescription:") = Void, NSScriptCommandDescription;
overload selector(static #"registerDefaults:") = Void, NSDictionary;
overload selector(static #"registerLanguage:byVendor:") = Bool, NSString, NSString;
overload selector(static #"registerName:") = Bool, NSString;
overload selector(static #"registerName:withNameServer:") = Bool, NSString, NSPortNameServer;
overload selector(static #"registerPort:name:") = Bool, NSPort, NSString;
overload selector(static #"registerPort:name:nameServerPortNumber:") = Bool, NSPort, NSString, UShort;
overload selector(static #"registerURLHandleClass:") = Void, Id;
overload selector(static #"registerUndoWithTarget:selector:object:") = Void, Id, SelectorHandle, Id;
overload selector(static #"relativePath") = NSString;
overload selector(static #"relativePosition") = CULong;
overload selector(static #"relativeString") = NSString;
overload selector(static #"relinquishFunction") = CCodePointer[(RawPointer,CCodePointer[(RawPointer),(CULong)]),()];
overload selector(static #"remoteObjects") = NSArray;
overload selector(static #"removeAllActions") = Void;
overload selector(static #"removeAllActionsWithTarget:") = Void, Id;
overload selector(static #"removeAllCachedResponses") = Void;
overload selector(static #"removeAllIndexes") = Void;
overload selector(static #"removeAllObjects") = Void;
overload selector(static #"removeAttribute:range:") = Void, NSString, NSRange;
overload selector(static #"removeAttributeForName:") = Void, NSString;
overload selector(static #"removeCachedResponseForRequest:") = Void, NSURLRequest;
overload selector(static #"removeCharactersInRange:") = Void, NSRange;
overload selector(static #"removeCharactersInString:") = Void, NSString;
overload selector(static #"removeChildAtIndex:") = Void, CULong;
overload selector(static #"removeClient:") = Void, Id;
overload selector(static #"removeConnection:fromRunLoop:forMode:") = Void, NSConnection, NSRunLoop, NSString;
overload selector(static #"removeCredential:forProtectionSpace:") = Void, NSURLCredential, NSURLProtectionSpace;
overload selector(static #"removeDependency:") = Void, NSOperation;
overload selector(static #"removeDescriptorAtIndex:") = Void, CLong;
overload selector(static #"removeDescriptorWithKeyword:") = Void, UInt;
overload selector(static #"removeEventHandlerForEventClass:andEventID:") = Void, UInt, UInt;
overload selector(static #"removeFileAtPath:handler:") = Bool, NSString, Id;
overload selector(static #"removeFromRunLoop:forMode:") = Void, NSRunLoop, NSString;
overload selector(static #"removeIndex:") = Void, CULong;
overload selector(static #"removeIndexes:") = Void, NSIndexSet;
overload selector(static #"removeIndexesInRange:") = Void, NSRange;
overload selector(static #"removeItemAtPath:error:") = Bool, NSString, Pointer[NSError];
overload selector(static #"removeItemAtURL:error:") = Bool, NSURL, Pointer[NSError];
overload selector(static #"removeLastObject") = Void;
overload selector(static #"removeNamespaceForPrefix:") = Void, NSString;
overload selector(static #"removeObject:") = Void, Id;
overload selector(static #"removeObject:inRange:") = Void, Id, NSRange;
overload selector(static #"removeObjectAtIndex:") = Void, CULong;
overload selector(static #"removeObjectForKey:") = Void, Id;
overload selector(static #"removeObjectIdenticalTo:") = Void, Id;
overload selector(static #"removeObjectIdenticalTo:inRange:") = Void, Id, NSRange;
overload selector(static #"removeObjectsAtIndexes:") = Void, NSIndexSet;
overload selector(static #"removeObjectsForKeys:") = Void, NSArray;
overload selector(static #"removeObjectsFromIndices:numIndices:") = Void, Pointer[CULong], CULong;
overload selector(static #"removeObjectsInArray:") = Void, NSArray;
overload selector(static #"removeObjectsInRange:") = Void, NSRange;
overload selector(static #"removeObserver:") = Void, Id;
overload selector(static #"removeObserver:forKeyPath:") = Void, NSObject, NSString;
overload selector(static #"removeObserver:fromObjectsAtIndexes:forKeyPath:") = Void, NSObject, NSIndexSet, NSString;
overload selector(static #"removeObserver:name:object:") = Void, Id, NSString, Id;
overload selector(static #"removeParamDescriptorWithKeyword:") = Void, UInt;
overload selector(static #"removePersistentDomainForName:") = Void, NSString;
overload selector(static #"removePointerAtIndex:") = Void, CULong;
overload selector(static #"removePort:forMode:") = Void, NSPort, NSString;
overload selector(static #"removePortForName:") = Bool, NSString;
overload selector(static #"removePropertyForKey:inRequest:") = Void, NSString, NSMutableURLRequest;
overload selector(static #"removeRequestMode:") = Void, NSString;
overload selector(static #"removeRunLoop:") = Void, NSRunLoop;
overload selector(static #"removeSuiteNamed:") = Void, NSString;
overload selector(static #"removeValueAtIndex:fromPropertyWithKey:") = Void, CULong, NSString;
overload selector(static #"removeVolatileDomainForName:") = Void, NSString;
overload selector(static #"replaceBytesInRange:withBytes:") = Void, NSRange, RawPointer;
overload selector(static #"replaceBytesInRange:withBytes:length:") = Void, NSRange, RawPointer, CULong;
overload selector(static #"replaceCharactersInRange:withAttributedString:") = Void, NSRange, NSAttributedString;
overload selector(static #"replaceCharactersInRange:withString:") = Void, NSRange, NSString;
overload selector(static #"replaceChildAtIndex:withNode:") = Void, CULong, NSXMLNode;
overload selector(static #"replaceItemAtURL:withItemAtURL:backupItemName:options:resultingItemURL:error:") = Bool, NSURL, NSURL, NSString, CULong, Pointer[NSURL], Pointer[NSError];
overload selector(static #"replaceObject:withObject:") = Void, Id, Id;
overload selector(static #"replaceObjectAtIndex:withObject:") = Void, CULong, Id;
overload selector(static #"replaceObjectsAtIndexes:withObjects:") = Void, NSIndexSet, NSArray;
overload selector(static #"replaceObjectsInRange:withObjectsFromArray:") = Void, NSRange, NSArray;
overload selector(static #"replaceObjectsInRange:withObjectsFromArray:range:") = Void, NSRange, NSArray, NSRange;
overload selector(static #"replaceOccurrencesOfString:withString:options:range:") = CULong, NSString, NSString, CULong, NSRange;
overload selector(static #"replacePointerAtIndex:withPointer:") = Void, CULong, RawPointer;
overload selector(static #"replaceValueAtIndex:inPropertyWithKey:withValue:") = Void, CULong, NSString, Id;
overload selector(static #"replacementCheckingResultWithRange:replacementString:") = NSTextCheckingResult, NSRange, NSString;
overload selector(static #"replacementClassForClass:") = Id, Id;
overload selector(static #"replacementObjectForArchiver:") = Id, NSArchiver;
overload selector(static #"replacementObjectForCoder:") = Id, NSCoder;
overload selector(static #"replacementObjectForKeyedArchiver:") = Id, NSKeyedArchiver;
overload selector(static #"replacementObjectForPortCoder:") = Id, NSPortCoder;
overload selector(static #"replacementString") = NSString;
overload selector(static #"replyAppleEventForSuspensionID:") = NSAppleEventDescriptor, NSAppleEventManagerSuspensionID;
overload selector(static #"replyTimeout") = Double;
overload selector(static #"replyWithException:") = Void, NSException;
overload selector(static #"request") = NSURLRequest;
overload selector(static #"requestHeaderFieldsWithCookies:") = NSDictionary, NSArray;
overload selector(static #"requestIsCacheEquivalent:toRequest:") = Bool, NSURLRequest, NSURLRequest;
overload selector(static #"requestModes") = NSArray;
overload selector(static #"requestTimeout") = Double;
overload selector(static #"requestWithURL:") = Id, NSURL;
overload selector(static #"requestWithURL:cachePolicy:timeoutInterval:") = Id, NSURL, CULong, Double;
overload selector(static #"reservedSpaceLength") = CULong;
overload selector(static #"resetBytesInRange:") = Void, NSRange;
overload selector(static #"resetStandardUserDefaults") = Void;
overload selector(static #"resetSystemTimeZone") = Void;
overload selector(static #"resolve") = Void;
overload selector(static #"resolveClassMethod:") = Bool, SelectorHandle;
overload selector(static #"resolveInstanceMethod:") = Bool, SelectorHandle;
overload selector(static #"resolveNamespaceForName:") = NSXMLNode, NSString;
overload selector(static #"resolvePrefixForNamespaceURI:") = NSString, NSString;
overload selector(static #"resolveWithTimeout:") = Void, Double;
overload selector(static #"resolvedKeyDictionary") = NSDictionary;
overload selector(static #"resourceData") = NSData;
overload selector(static #"resourceDataUsingCache:") = NSData, Bool;
overload selector(static #"resourcePath") = NSString;
overload selector(static #"resourceSpecifier") = NSString;
overload selector(static #"resourceURL") = NSURL;
overload selector(static #"resourceValuesForKeys:error:") = NSDictionary, NSArray, Pointer[NSError];
overload selector(static #"resourceValuesForKeys:fromBookmarkData:") = NSDictionary, NSArray, NSData;
overload selector(static #"respondsToSelector:") = Bool, SelectorHandle;
overload selector(static #"response") = NSURLResponse;
overload selector(static #"result") = Id;
overload selector(static #"resultAtIndex:") = Id, CULong;
overload selector(static #"resultCount") = CULong;
overload selector(static #"resultType") = UInt64;
overload selector(static #"results") = NSArray;
overload selector(static #"resume") = Bool;
overload selector(static #"resumeData") = NSData;
overload selector(static #"resumeExecutionWithResult:") = Void, Id;
overload selector(static #"resumeWithSuspensionID:") = Void, NSAppleEventManagerSuspensionID;
overload selector(static #"retainArguments") = Void;
overload selector(static #"returnID") = Short;
overload selector(static #"returnType") = NSString;
overload selector(static #"reverseObjectEnumerator") = NSEnumerator;
overload selector(static #"reverseTransformedValue:") = Id, Id;
overload selector(static #"reversedSortDescriptor") = Id;
overload selector(static #"rightExpression") = NSExpression;
overload selector(static #"rootDocument") = NSXMLDocument;
overload selector(static #"rootElement") = NSXMLElement;
overload selector(static #"rootObject") = Id;
overload selector(static #"rootProxy") = NSDistantObject;
overload selector(static #"rootProxyForConnectionWithRegisteredName:host:") = NSDistantObject, NSString, NSString;
overload selector(static #"rootProxyForConnectionWithRegisteredName:host:usingNameServer:") = NSDistantObject, NSString, NSString, NSPortNameServer;
overload selector(static #"rotateByDegrees:") = Void, Double;
overload selector(static #"rotateByRadians:") = Void, Double;
overload selector(static #"roundingBehavior") = NSDecimalNumberHandler;
overload selector(static #"roundingIncrement") = NSNumber;
overload selector(static #"roundingMode") = CULong;
overload selector(static #"run") = Void;
overload selector(static #"runInNewThread") = Void;
overload selector(static #"runLoopModes") = NSArray;
overload selector(static #"runMode:beforeDate:") = Bool, NSString, NSDate;
overload selector(static #"runUntilDate:") = Void, NSDate;
overload selector(static #"saveOptions") = CULong;
overload selector(static #"scaleBy:") = Void, Double;
overload selector(static #"scaleXBy:yBy:") = Void, Double, Double;
overload selector(static #"scanCharactersFromSet:intoString:") = Bool, NSCharacterSet, Pointer[NSString];
overload selector(static #"scanDecimal:") = Bool, Pointer[NSDecimal];
overload selector(static #"scanDouble:") = Bool, Pointer[Double];
overload selector(static #"scanFloat:") = Bool, Pointer[Float];
overload selector(static #"scanHexDouble:") = Bool, Pointer[Double];
overload selector(static #"scanHexFloat:") = Bool, Pointer[Float];
overload selector(static #"scanHexInt:") = Bool, Pointer[UInt];
overload selector(static #"scanHexLongLong:") = Bool, Pointer[UInt64];
overload selector(static #"scanInt:") = Bool, Pointer[Int];
overload selector(static #"scanInteger:") = Bool, Pointer[CLong];
overload selector(static #"scanLocation") = CULong;
overload selector(static #"scanLongLong:") = Bool, Pointer[Int64];
overload selector(static #"scanString:intoString:") = Bool, NSString, Pointer[NSString];
overload selector(static #"scanUpToCharactersFromSet:intoString:") = Bool, NSCharacterSet, Pointer[NSString];
overload selector(static #"scanUpToString:intoString:") = Bool, NSString, Pointer[NSString];
overload selector(static #"scannerWithString:") = Id, NSString;
overload selector(static #"scheduleInRunLoop:forMode:") = Void, NSRunLoop, NSString;
overload selector(static #"scheduledTimerWithTimeInterval:invocation:repeats:") = NSTimer, Double, NSInvocation, Bool;
overload selector(static #"scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:") = NSTimer, Double, Id, SelectorHandle, Id, Bool;
overload selector(static #"scheme") = NSString;
overload selector(static #"scriptErrorExpectedTypeDescriptor") = NSAppleEventDescriptor;
overload selector(static #"scriptErrorNumber") = Int;
overload selector(static #"scriptErrorOffendingObjectDescriptor") = NSAppleEventDescriptor;
overload selector(static #"scriptErrorString") = NSString;
overload selector(static #"scriptingBeginsWith:") = Bool, Id;
overload selector(static #"scriptingContains:") = Bool, Id;
overload selector(static #"scriptingEndsWith:") = Bool, Id;
overload selector(static #"scriptingIsEqualTo:") = Bool, Id;
overload selector(static #"scriptingIsGreaterThan:") = Bool, Id;
overload selector(static #"scriptingIsGreaterThanOrEqualTo:") = Bool, Id;
overload selector(static #"scriptingIsLessThan:") = Bool, Id;
overload selector(static #"scriptingIsLessThanOrEqualTo:") = Bool, Id;
overload selector(static #"scriptingProperties") = NSDictionary;
overload selector(static #"scriptingValueForSpecifier:") = Id, NSScriptObjectSpecifier;
overload selector(static #"searchForAllDomains") = Void;
overload selector(static #"searchForBrowsableDomains") = Void;
overload selector(static #"searchForRegistrationDomains") = Void;
overload selector(static #"searchForServicesOfType:inDomain:") = Void, NSString, NSString;
overload selector(static #"searchScopes") = NSArray;
overload selector(static #"second") = CLong;
overload selector(static #"secondOfMinute") = CLong;
overload selector(static #"secondaryGroupingSize") = CULong;
overload selector(static #"secondsFromGMT") = CLong;
overload selector(static #"secondsFromGMTForDate:") = CLong, NSDate;
overload selector(static #"seekToEndOfFile") = UInt64;
overload selector(static #"seekToFileOffset:") = Void, UInt64;
overload selector(static #"selector") = SelectorHandle;
overload selector(static #"selectorForCommand:") = SelectorHandle, NSScriptCommandDescription;
overload selector(static #"sendBeforeDate:") = Bool, NSDate;
overload selector(static #"sendBeforeDate:components:from:reserved:") = Bool, NSDate, NSMutableArray, NSPort, CULong;
overload selector(static #"sendBeforeDate:msgid:components:from:reserved:") = Bool, NSDate, CULong, NSMutableArray, NSPort, CULong;
overload selector(static #"sendPort") = NSPort;
overload selector(static #"sendSynchronousRequest:returningResponse:error:") = NSData, NSURLRequest, Pointer[NSURLResponse], Pointer[NSError];
overload selector(static #"sender") = Id;
overload selector(static #"serverTrust") = SecTrustRef;
overload selector(static #"serviceConnectionWithName:rootObject:") = Id, NSString, Id;
overload selector(static #"serviceConnectionWithName:rootObject:usingNameServer:") = Id, NSString, Id, NSPortNameServer;
overload selector(static #"servicePortWithName:") = NSPort, NSString;
overload selector(static #"set") = Id;
overload selector(static #"setAMSymbol:") = Void, NSString;
overload selector(static #"setAbbreviationDictionary:") = Void, NSDictionary;
overload selector(static #"setAcquireFunction:") = Void, CCodePointer[(RawPointer,CCodePointer[(RawPointer),(CULong)],CChar),(RawPointer)];
overload selector(static #"setActionName:") = Void, NSString;
overload selector(static #"setAllHTTPHeaderFields:") = Void, NSDictionary;
overload selector(static #"setAllowsFloats:") = Void, Bool;
overload selector(static #"setAlwaysShowsDecimalSeparator:") = Void, Bool;
overload selector(static #"setArgument:atIndex:") = Void, RawPointer, CLong;
overload selector(static #"setArguments:") = Void, NSArray;
overload selector(static #"setArray:") = Void, NSArray;
overload selector(static #"setAttributeDescriptor:forKeyword:") = Void, NSAppleEventDescriptor, UInt;
overload selector(static #"setAttributedString:") = Void, NSAttributedString;
overload selector(static #"setAttributedStringForNil:") = Void, NSAttributedString;
overload selector(static #"setAttributedStringForNotANumber:") = Void, NSAttributedString;
overload selector(static #"setAttributedStringForZero:") = Void, NSAttributedString;
overload selector(static #"setAttributes:") = Void, NSArray;
overload selector(static #"setAttributes:ofItemAtPath:error:") = Bool, NSDictionary, NSString, Pointer[NSError];
overload selector(static #"setAttributes:range:") = Void, NSDictionary, NSRange;
overload selector(static #"setAttributesAsDictionary:") = Void, NSDictionary;
overload selector(static #"setBaseSpecifier:") = Void, NSScriptObjectSpecifier;
overload selector(static #"setBool:forKey:") = Void, Bool, NSString;
overload selector(static #"setByAddingObject:") = NSSet, Id;
overload selector(static #"setByAddingObjectsFromArray:") = NSSet, NSArray;
overload selector(static #"setByAddingObjectsFromSet:") = NSSet, NSSet;
overload selector(static #"setCachePolicy:") = Void, CULong;
overload selector(static #"setCalendar:") = Void, NSCalendar;
overload selector(static #"setCalendarFormat:") = Void, NSString;
overload selector(static #"setCaseSensitive:") = Void, Bool;
overload selector(static #"setCharacterEncoding:") = Void, NSString;
overload selector(static #"setCharactersToBeSkipped:") = Void, NSCharacterSet;
overload selector(static #"setChildSpecifier:") = Void, NSScriptObjectSpecifier;
overload selector(static #"setChildren:") = Void, NSArray;
overload selector(static #"setClass:forClassName:") = Void, Id, NSString;
overload selector(static #"setClassName:forClass:") = Void, NSString, Id;
overload selector(static #"setCompletionBlock:") = Void, UnknownType;
overload selector(static #"setContainerClassDescription:") = Void, NSScriptClassDescription;
overload selector(static #"setContainerIsObjectBeingTested:") = Void, Bool;
overload selector(static #"setContainerIsRangeContainerObject:") = Void, Bool;
overload selector(static #"setContainerSpecifier:") = Void, NSScriptObjectSpecifier;
overload selector(static #"setCookie:") = Void, NSHTTPCookie;
overload selector(static #"setCookieAcceptPolicy:") = Void, CULong;
overload selector(static #"setCookies:forURL:mainDocumentURL:") = Void, NSArray, NSURL, NSURL;
overload selector(static #"setCount:") = Void, CULong;
overload selector(static #"setCountLimit:") = Void, CULong;
overload selector(static #"setCredential:forProtectionSpace:") = Void, NSURLCredential, NSURLProtectionSpace;
overload selector(static #"setCurrencyCode:") = Void, NSString;
overload selector(static #"setCurrencyDecimalSeparator:") = Void, NSString;
overload selector(static #"setCurrencyGroupingSeparator:") = Void, NSString;
overload selector(static #"setCurrencySymbol:") = Void, NSString;
overload selector(static #"setCurrentAppleEventAndReplyEventWithSuspensionID:") = Void, NSAppleEventManagerSuspensionID;
overload selector(static #"setCurrentDirectoryPath:") = Void, NSString;
overload selector(static #"setDTD:") = Void, NSXMLDTD;
overload selector(static #"setDTDKind:") = Void, CULong;
overload selector(static #"setData:") = Void, NSData;
overload selector(static #"setDateFormat:") = Void, NSString;
overload selector(static #"setDateStyle:") = Void, CULong;
overload selector(static #"setDay:") = Void, CLong;
overload selector(static #"setDecimalSeparator:") = Void, NSString;
overload selector(static #"setDefaultBehavior:") = Void, Id;
overload selector(static #"setDefaultCredential:forProtectionSpace:") = Void, NSURLCredential, NSURLProtectionSpace;
overload selector(static #"setDefaultDate:") = Void, NSDate;
overload selector(static #"setDefaultFormatterBehavior:") = Void, CULong;
overload selector(static #"setDefaultNameServerPortNumber:") = Void, UShort;
overload selector(static #"setDefaultTimeZone:") = Void, NSTimeZone;
overload selector(static #"setDelegate:") = Void, Id;
overload selector(static #"setDeletesFileUponFailure:") = Void, Bool;
overload selector(static #"setDescriptionFunction:") = Void, CCodePointer[(RawPointer),(NSString)];
overload selector(static #"setDescriptor:forKeyword:") = Void, NSAppleEventDescriptor, UInt;
overload selector(static #"setDestination:allowOverwrite:") = Void, NSString, Bool;
overload selector(static #"setDictionary:") = Void, NSDictionary;
overload selector(static #"setDirectParameter:") = Void, Id;
overload selector(static #"setDiskCapacity:") = Void, CULong;
overload selector(static #"setDocumentContentKind:") = Void, CULong;
overload selector(static #"setDoesRelativeDateFormatting:") = Void, Bool;
overload selector(static #"setDouble:forKey:") = Void, Double, NSString;
overload selector(static #"setEndSpecifier:") = Void, NSScriptObjectSpecifier;
overload selector(static #"setEndSubelementIdentifier:") = Void, CULong;
overload selector(static #"setEndSubelementIndex:") = Void, CLong;
overload selector(static #"setEnvironment:") = Void, NSDictionary;
overload selector(static #"setEra:") = Void, CLong;
overload selector(static #"setEraSymbols:") = Void, NSArray;
overload selector(static #"setEvaluationErrorNumber:") = Void, CLong;
overload selector(static #"setEventHandler:andSelector:forEventClass:andEventID:") = Void, Id, SelectorHandle, UInt, UInt;
overload selector(static #"setEvictsObjectsWithDiscardedContent:") = Void, Bool;
overload selector(static #"setExponentSymbol:") = Void, NSString;
overload selector(static #"setFireDate:") = Void, NSDate;
overload selector(static #"setFirstWeekday:") = Void, CULong;
overload selector(static #"setFloat:forKey:") = Void, Float, NSString;
overload selector(static #"setFormat:") = Void, NSString;
overload selector(static #"setFormatWidth:") = Void, CULong;
overload selector(static #"setFormatterBehavior:") = Void, CULong;
overload selector(static #"setGeneratesCalendarDates:") = Void, Bool;
overload selector(static #"setGeneratesDecimalNumbers:") = Void, Bool;
overload selector(static #"setGregorianStartDate:") = Void, NSDate;
overload selector(static #"setGroupingAttributes:") = Void, NSArray;
overload selector(static #"setGroupingSeparator:") = Void, NSString;
overload selector(static #"setGroupingSize:") = Void, CULong;
overload selector(static #"setGroupsByEvent:") = Void, Bool;
overload selector(static #"setHTTPBody:") = Void, NSData;
overload selector(static #"setHTTPBodyStream:") = Void, NSInputStream;
overload selector(static #"setHTTPMethod:") = Void, NSString;
overload selector(static #"setHTTPShouldHandleCookies:") = Void, Bool;
overload selector(static #"setHasThousandSeparators:") = Void, Bool;
overload selector(static #"setHashFunction:") = Void, CCodePointer[(RawPointer,CCodePointer[(RawPointer),(CULong)]),(CULong)];
overload selector(static #"setHostCacheEnabled:") = Void, Bool;
overload selector(static #"setHour:") = Void, CLong;
overload selector(static #"setIndependentConversationQueueing:") = Void, Bool;
overload selector(static #"setIndex:") = Void, CLong;
overload selector(static #"setInsertionClassDescription:") = Void, NSScriptClassDescription;
overload selector(static #"setInteger:forKey:") = Void, CLong, NSString;
overload selector(static #"setInternationalCurrencySymbol:") = Void, NSString;
overload selector(static #"setIsEqualFunction:") = Void, CCodePointer[(RawPointer,RawPointer,CCodePointer[(RawPointer),(CULong)]),(CChar)];
overload selector(static #"setKey:") = Void, NSString;
overload selector(static #"setKeys:triggerChangeNotificationsForDependentKey:") = Void, NSArray, NSString;
overload selector(static #"setLaunchPath:") = Void, NSString;
overload selector(static #"setLength:") = Void, CULong;
overload selector(static #"setLenient:") = Void, Bool;
overload selector(static #"setLevelsOfUndo:") = Void, CULong;
overload selector(static #"setLocale:") = Void, NSLocale;
overload selector(static #"setLocalizesFormat:") = Void, Bool;
overload selector(static #"setLongEraSymbols:") = Void, NSArray;
overload selector(static #"setMIMEType:") = Void, NSString;
overload selector(static #"setMainDocumentURL:") = Void, NSURL;
overload selector(static #"setMaxConcurrentOperationCount:") = Void, CLong;
overload selector(static #"setMaximum:") = Void, NSNumber;
overload selector(static #"setMaximumFractionDigits:") = Void, CULong;
overload selector(static #"setMaximumIntegerDigits:") = Void, CULong;
overload selector(static #"setMaximumSignificantDigits:") = Void, CULong;
overload selector(static #"setMemoryCapacity:") = Void, CULong;
overload selector(static #"setMinimum:") = Void, NSNumber;
overload selector(static #"setMinimumDaysInFirstWeek:") = Void, CULong;
overload selector(static #"setMinimumFractionDigits:") = Void, CULong;
overload selector(static #"setMinimumIntegerDigits:") = Void, CULong;
overload selector(static #"setMinimumSignificantDigits:") = Void, CULong;
overload selector(static #"setMinusSign:") = Void, NSString;
overload selector(static #"setMinute:") = Void, CLong;
overload selector(static #"setMonth:") = Void, CLong;
overload selector(static #"setMonthSymbols:") = Void, NSArray;
overload selector(static #"setMsgid:") = Void, UInt;
overload selector(static #"setMultiplier:") = Void, NSNumber;
overload selector(static #"setName:") = Void, NSString;
overload selector(static #"setNamespaces:") = Void, NSArray;
overload selector(static #"setNegativeFormat:") = Void, NSString;
overload selector(static #"setNegativeInfinitySymbol:") = Void, NSString;
overload selector(static #"setNegativePrefix:") = Void, NSString;
overload selector(static #"setNegativeSuffix:") = Void, NSString;
overload selector(static #"setNilSymbol:") = Void, NSString;
overload selector(static #"setNilValueForKey:") = Void, NSString;
overload selector(static #"setNotANumberSymbol:") = Void, NSString;
overload selector(static #"setNotationName:") = Void, NSString;
overload selector(static #"setNotificationBatchingInterval:") = Void, Double;
overload selector(static #"setNumberStyle:") = Void, CULong;
overload selector(static #"setObject:forKey:") = Void, Id, Id;
overload selector(static #"setObject:forKey:cost:") = Void, Id, Id, CULong;
overload selector(static #"setObjectBeingTested:") = Void, Id;
overload selector(static #"setObjectValue:") = Void, Id;
overload selector(static #"setObjectZone:") = Void, Pointer[NSZone];
overload selector(static #"setObservationInfo:") = Void, RawPointer;
overload selector(static #"setOutputFormat:") = Void, CULong;
overload selector(static #"setPMSymbol:") = Void, NSString;
overload selector(static #"setPaddingCharacter:") = Void, NSString;
overload selector(static #"setPaddingPosition:") = Void, CULong;
overload selector(static #"setParamDescriptor:forKeyword:") = Void, NSAppleEventDescriptor, UInt;
overload selector(static #"setPartialStringValidationEnabled:") = Void, Bool;
overload selector(static #"setPerMillSymbol:") = Void, NSString;
overload selector(static #"setPercentSymbol:") = Void, NSString;
overload selector(static #"setPersistentDomain:forName:") = Void, NSDictionary, NSString;
overload selector(static #"setPlusSign:") = Void, NSString;
overload selector(static #"setPositiveFormat:") = Void, NSString;
overload selector(static #"setPositiveInfinitySymbol:") = Void, NSString;
overload selector(static #"setPositivePrefix:") = Void, NSString;
overload selector(static #"setPositiveSuffix:") = Void, NSString;
overload selector(static #"setPredicate:") = Void, NSPredicate;
overload selector(static #"setProcessName:") = Void, NSString;
overload selector(static #"setProperty:forKey:") = Bool, Id, NSString;
overload selector(static #"setProperty:forKey:inRequest:") = Void, Id, NSString, NSMutableURLRequest;
overload selector(static #"setProtocolForProxy:") = Void, Id;
overload selector(static #"setProtocolSpecificInformation:") = Void, NSString;
overload selector(static #"setPublicID:") = Void, NSString;
overload selector(static #"setQuarter:") = Void, CLong;
overload selector(static #"setQuarterSymbols:") = Void, NSArray;
overload selector(static #"setQueuePriority:") = Void, CLong;
overload selector(static #"setRangeContainerObject:") = Void, Id;
overload selector(static #"setReceiversSpecifier:") = Void, NSScriptObjectSpecifier;
overload selector(static #"setRelativePosition:") = Void, CULong;
overload selector(static #"setRelinquishFunction:") = Void, CCodePointer[(RawPointer,CCodePointer[(RawPointer),(CULong)]),()];
overload selector(static #"setReplyTimeout:") = Void, Double;
overload selector(static #"setRepresentation") = NSSet;
overload selector(static #"setRequestTimeout:") = Void, Double;
overload selector(static #"setResourceData:") = Bool, NSData;
overload selector(static #"setResourceValue:forKey:error:") = Bool, Id, NSString, Pointer[NSError];
overload selector(static #"setResourceValues:error:") = Bool, NSDictionary, Pointer[NSError];
overload selector(static #"setReturnValue:") = Void, RawPointer;
overload selector(static #"setRootElement:") = Void, NSXMLNode;
overload selector(static #"setRootObject:") = Void, Id;
overload selector(static #"setRoundingBehavior:") = Void, NSDecimalNumberHandler;
overload selector(static #"setRoundingIncrement:") = Void, NSNumber;
overload selector(static #"setRoundingMode:") = Void, CULong;
overload selector(static #"setRunLoopModes:") = Void, NSArray;
overload selector(static #"setScanLocation:") = Void, CULong;
overload selector(static #"setScriptErrorExpectedTypeDescriptor:") = Void, NSAppleEventDescriptor;
overload selector(static #"setScriptErrorNumber:") = Void, Int;
overload selector(static #"setScriptErrorOffendingObjectDescriptor:") = Void, NSAppleEventDescriptor;
overload selector(static #"setScriptErrorString:") = Void, NSString;
overload selector(static #"setScriptingProperties:") = Void, NSDictionary;
overload selector(static #"setSearchScopes:") = Void, NSArray;
overload selector(static #"setSecond:") = Void, CLong;
overload selector(static #"setSecondaryGroupingSize:") = Void, CULong;
overload selector(static #"setSelector:") = Void, SelectorHandle;
overload selector(static #"setSet:") = Void, NSSet;
overload selector(static #"setSharedScriptSuiteRegistry:") = Void, NSScriptSuiteRegistry;
overload selector(static #"setSharedURLCache:") = Void, NSURLCache;
overload selector(static #"setShortMonthSymbols:") = Void, NSArray;
overload selector(static #"setShortQuarterSymbols:") = Void, NSArray;
overload selector(static #"setShortStandaloneMonthSymbols:") = Void, NSArray;
overload selector(static #"setShortStandaloneQuarterSymbols:") = Void, NSArray;
overload selector(static #"setShortStandaloneWeekdaySymbols:") = Void, NSArray;
overload selector(static #"setShortWeekdaySymbols:") = Void, NSArray;
overload selector(static #"setShouldProcessNamespaces:") = Void, Bool;
overload selector(static #"setShouldReportNamespacePrefixes:") = Void, Bool;
overload selector(static #"setShouldResolveExternalEntities:") = Void, Bool;
overload selector(static #"setSizeFunction:") = Void, CCodePointer[(RawPointer),(CULong)];
overload selector(static #"setSortDescriptors:") = Void, NSArray;
overload selector(static #"setStackSize:") = Void, CULong;
overload selector(static #"setStandalone:") = Void, Bool;
overload selector(static #"setStandaloneMonthSymbols:") = Void, NSArray;
overload selector(static #"setStandaloneQuarterSymbols:") = Void, NSArray;
overload selector(static #"setStandaloneWeekdaySymbols:") = Void, NSArray;
overload selector(static #"setStandardError:") = Void, Id;
overload selector(static #"setStandardInput:") = Void, Id;
overload selector(static #"setStandardOutput:") = Void, Id;
overload selector(static #"setStartSpecifier:") = Void, NSScriptObjectSpecifier;
overload selector(static #"setStartSubelementIdentifier:") = Void, CULong;
overload selector(static #"setStartSubelementIndex:") = Void, CLong;
overload selector(static #"setString:") = Void, NSString;
overload selector(static #"setStringValue:") = Void, NSString;
overload selector(static #"setStringValue:resolvingEntities:") = Void, NSString, Bool;
overload selector(static #"setSuspended:") = Void, Bool;
overload selector(static #"setSystemID:") = Void, NSString;
overload selector(static #"setTXTRecordData:") = Bool, NSData;
overload selector(static #"setTarget:") = Void, Id;
overload selector(static #"setTest:") = Void, NSScriptWhoseTest;
overload selector(static #"setTextAttributesForNegativeInfinity:") = Void, NSDictionary;
overload selector(static #"setTextAttributesForNegativeValues:") = Void, NSDictionary;
overload selector(static #"setTextAttributesForNil:") = Void, NSDictionary;
overload selector(static #"setTextAttributesForNotANumber:") = Void, NSDictionary;
overload selector(static #"setTextAttributesForPositiveInfinity:") = Void, NSDictionary;
overload selector(static #"setTextAttributesForPositiveValues:") = Void, NSDictionary;
overload selector(static #"setTextAttributesForZero:") = Void, NSDictionary;
overload selector(static #"setThousandSeparator:") = Void, NSString;
overload selector(static #"setThreadPriority:") = Bool, Double;
overload selector(static #"setTimeStyle:") = Void, CULong;
overload selector(static #"setTimeZone:") = Void, NSTimeZone;
overload selector(static #"setTimeoutInterval:") = Void, Double;
overload selector(static #"setTopLevelObject:") = Void, Id;
overload selector(static #"setTotalCostLimit:") = Void, CULong;
overload selector(static #"setTransformStruct:") = Void, NSAffineTransformStruct;
overload selector(static #"setTwoDigitStartDate:") = Void, NSDate;
overload selector(static #"setURI:") = Void, NSString;
overload selector(static #"setURL:") = Void, NSURL;
overload selector(static #"setURL:forKey:") = Void, NSURL, NSString;
overload selector(static #"setUniqueID:") = Void, Id;
overload selector(static #"setUsesGroupingSeparator:") = Void, Bool;
overload selector(static #"setUsesSignificantDigits:") = Void, Bool;
overload selector(static #"setUsesStrongWriteBarrier:") = Void, Bool;
overload selector(static #"setUsesWeakReadAndWriteBarriers:") = Void, Bool;
overload selector(static #"setValue:forHTTPHeaderField:") = Void, NSString, NSString;
overload selector(static #"setValue:forKey:") = Void, Id, NSString;
overload selector(static #"setValue:forKeyPath:") = Void, Id, NSString;
overload selector(static #"setValue:forUndefinedKey:") = Void, Id, NSString;
overload selector(static #"setValueListAttributes:") = Void, NSArray;
overload selector(static #"setValueTransformer:forName:") = Void, NSValueTransformer, NSString;
overload selector(static #"setValuesForKeysWithDictionary:") = Void, NSDictionary;
overload selector(static #"setVersion:") = Void, CLong;
overload selector(static #"setVeryShortMonthSymbols:") = Void, NSArray;
overload selector(static #"setVeryShortStandaloneMonthSymbols:") = Void, NSArray;
overload selector(static #"setVeryShortStandaloneWeekdaySymbols:") = Void, NSArray;
overload selector(static #"setVeryShortWeekdaySymbols:") = Void, NSArray;
overload selector(static #"setVolatileDomain:forName:") = Void, NSDictionary, NSString;
overload selector(static #"setWeek:") = Void, CLong;
overload selector(static #"setWeekday:") = Void, CLong;
overload selector(static #"setWeekdayOrdinal:") = Void, CLong;
overload selector(static #"setWeekdaySymbols:") = Void, NSArray;
overload selector(static #"setWithArray:") = Id, NSArray;
overload selector(static #"setWithCapacity:") = Id, CULong;
overload selector(static #"setWithObject:") = Id, Id;
overload varargSelector(static #"setWithObjects:") = Id, Id;
overload selector(static #"setWithObjects:count:") = Id, Pointer[Id], CULong;
overload selector(static #"setWithSet:") = Id, NSSet;
overload selector(static #"setYear:") = Void, CLong;
overload selector(static #"setZeroSymbol:") = Void, NSString;
overload selector(static #"sharedAppleEventManager") = NSAppleEventManager;
overload selector(static #"sharedCoercionHandler") = NSScriptCoercionHandler;
overload selector(static #"sharedCredentialStorage") = NSURLCredentialStorage;
overload selector(static #"sharedFrameworksPath") = NSString;
overload selector(static #"sharedFrameworksURL") = NSURL;
overload selector(static #"sharedHTTPCookieStorage") = NSHTTPCookieStorage;
overload selector(static #"sharedInstance") = Id;
overload selector(static #"sharedScriptExecutionContext") = NSScriptExecutionContext;
overload selector(static #"sharedScriptSuiteRegistry") = NSScriptSuiteRegistry;
overload selector(static #"sharedSupportPath") = NSString;
overload selector(static #"sharedSupportURL") = NSURL;
overload selector(static #"sharedURLCache") = NSURLCache;
overload selector(static #"shiftIndexesStartingAtIndex:by:") = Void, CULong, CLong;
overload selector(static #"shortMonthSymbols") = NSArray;
overload selector(static #"shortQuarterSymbols") = NSArray;
overload selector(static #"shortStandaloneMonthSymbols") = NSArray;
overload selector(static #"shortStandaloneQuarterSymbols") = NSArray;
overload selector(static #"shortStandaloneWeekdaySymbols") = NSArray;
overload selector(static #"shortValue") = Short;
overload selector(static #"shortWeekdaySymbols") = NSArray;
overload selector(static #"shouldProcessNamespaces") = Bool;
overload selector(static #"shouldReportNamespacePrefixes") = Bool;
overload selector(static #"shouldResolveExternalEntities") = Bool;
overload selector(static #"signal") = Void;
overload selector(static #"signatureWithObjCTypes:") = NSMethodSignature, Pointer[CChar];
overload selector(static #"sizeFunction") = CCodePointer[(RawPointer),(CULong)];
overload selector(static #"sizeValue") = NSSize;
overload selector(static #"skipDescendants") = Void;
overload selector(static #"skipDescendents") = Void;
overload selector(static #"sleepForTimeInterval:") = Void, Double;
overload selector(static #"sleepUntilDate:") = Void, NSDate;
overload selector(static #"smallestEncoding") = CULong;
overload selector(static #"socket") = Int;
overload selector(static #"socketType") = Int;
overload selector(static #"sortDescriptorWithKey:ascending:") = Id, NSString, Bool;
overload selector(static #"sortDescriptorWithKey:ascending:comparator:") = Id, NSString, Bool, NSComparator;
overload selector(static #"sortDescriptorWithKey:ascending:selector:") = Id, NSString, Bool, SelectorHandle;
overload selector(static #"sortDescriptors") = NSArray;
overload selector(static #"sortUsingComparator:") = Void, NSComparator;
overload selector(static #"sortUsingDescriptors:") = Void, NSArray;
overload selector(static #"sortUsingFunction:context:") = Void, CCodePointer[(Id,Id,RawPointer),(CLong)], RawPointer;
overload selector(static #"sortUsingSelector:") = Void, SelectorHandle;
overload selector(static #"sortWithOptions:usingComparator:") = Void, CULong, NSComparator;
overload selector(static #"sortedArrayHint") = NSData;
overload selector(static #"sortedArrayUsingComparator:") = NSArray, NSComparator;
overload selector(static #"sortedArrayUsingDescriptors:") = NSArray, NSArray;
overload selector(static #"sortedArrayUsingFunction:context:") = NSArray, CCodePointer[(Id,Id,RawPointer),(CLong)], RawPointer;
overload selector(static #"sortedArrayUsingFunction:context:hint:") = NSArray, CCodePointer[(Id,Id,RawPointer),(CLong)], RawPointer, NSData;
overload selector(static #"sortedArrayUsingSelector:") = NSArray, SelectorHandle;
overload selector(static #"sortedArrayWithOptions:usingComparator:") = NSArray, CULong, NSComparator;
overload selector(static #"source") = NSString;
overload selector(static #"spellCheckingResultWithRange:") = NSTextCheckingResult, NSRange;
overload selector(static #"stackSize") = CULong;
overload selector(static #"standaloneMonthSymbols") = NSArray;
overload selector(static #"standaloneQuarterSymbols") = NSArray;
overload selector(static #"standaloneWeekdaySymbols") = NSArray;
overload selector(static #"standardError") = Id;
overload selector(static #"standardInput") = Id;
overload selector(static #"standardOutput") = Id;
overload selector(static #"standardUserDefaults") = NSUserDefaults;
overload selector(static #"standardizedURL") = NSURL;
overload selector(static #"start") = Void;
overload selector(static #"startLoading") = Void;
overload selector(static #"startMonitoring") = Void;
overload selector(static #"startQuery") = Bool;
overload selector(static #"startSpecifier") = NSScriptObjectSpecifier;
overload selector(static #"startSubelementIdentifier") = CULong;
overload selector(static #"startSubelementIndex") = CLong;
overload selector(static #"statistics") = NSDictionary;
overload selector(static #"status") = CULong;
overload selector(static #"statusCode") = CLong;
overload selector(static #"stop") = Void;
overload selector(static #"stopLoading") = Void;
overload selector(static #"stopMonitoring") = Void;
overload selector(static #"stopQuery") = Void;
overload selector(static #"storagePolicy") = CULong;
overload selector(static #"storeCachedResponse:forRequest:") = Void, NSCachedURLResponse, NSURLRequest;
overload selector(static #"storedValueForKey:") = Id, NSString;
overload selector(static #"streamError") = NSError;
overload selector(static #"streamStatus") = CULong;
overload selector(static #"string") = Id;
overload selector(static #"stringArrayForKey:") = NSArray, NSString;
overload selector(static #"stringByAbbreviatingWithTildeInPath") = NSString;
overload selector(static #"stringByAddingPercentEscapesUsingEncoding:") = NSString, CULong;
overload varargSelector(static #"stringByAppendingFormat:") = NSString, NSString;
overload selector(static #"stringByAppendingPathComponent:") = NSString, NSString;
overload selector(static #"stringByAppendingPathExtension:") = NSString, NSString;
overload selector(static #"stringByAppendingString:") = NSString, NSString;
overload selector(static #"stringByDeletingLastPathComponent") = NSString;
overload selector(static #"stringByDeletingPathExtension") = NSString;
overload selector(static #"stringByExpandingTildeInPath") = NSString;
overload selector(static #"stringByFoldingWithOptions:locale:") = NSString, CULong, NSLocale;
overload selector(static #"stringByPaddingToLength:withString:startingAtIndex:") = NSString, CULong, NSString, CULong;
overload selector(static #"stringByReplacingCharactersInRange:withString:") = NSString, NSRange, NSString;
overload selector(static #"stringByReplacingOccurrencesOfString:withString:") = NSString, NSString, NSString;
overload selector(static #"stringByReplacingOccurrencesOfString:withString:options:range:") = NSString, NSString, NSString, CULong, NSRange;
overload selector(static #"stringByReplacingPercentEscapesUsingEncoding:") = NSString, CULong;
overload selector(static #"stringByResolvingSymlinksInPath") = NSString;
overload selector(static #"stringByStandardizingPath") = NSString;
overload selector(static #"stringByTrimmingCharactersInSet:") = NSString, NSCharacterSet;
overload selector(static #"stringForKey:") = NSString, NSString;
overload selector(static #"stringForObjectValue:") = NSString, Id;
overload selector(static #"stringFromDate:") = NSString, NSDate;
overload selector(static #"stringFromNumber:") = NSString, NSNumber;
overload selector(static #"stringValue") = NSString;
overload selector(static #"stringWithCString:") = Id, Pointer[CChar];
overload selector(static #"stringWithCString:encoding:") = Id, Pointer[CChar], CULong;
overload selector(static #"stringWithCString:length:") = Id, Pointer[CChar], CULong;
overload selector(static #"stringWithCapacity:") = Id, CULong;
overload selector(static #"stringWithCharacters:length:") = Id, Pointer[UShort], CULong;
overload selector(static #"stringWithContentsOfFile:") = Id, NSString;
overload selector(static #"stringWithContentsOfFile:encoding:error:") = Id, NSString, CULong, Pointer[NSError];
overload selector(static #"stringWithContentsOfFile:usedEncoding:error:") = Id, NSString, Pointer[CULong], Pointer[NSError];
overload selector(static #"stringWithContentsOfURL:") = Id, NSURL;
overload selector(static #"stringWithContentsOfURL:encoding:error:") = Id, NSURL, CULong, Pointer[NSError];
overload selector(static #"stringWithContentsOfURL:usedEncoding:error:") = Id, NSURL, Pointer[CULong], Pointer[NSError];
overload selector(static #"stringWithFileSystemRepresentation:length:") = NSString, Pointer[CChar], CULong;
overload varargSelector(static #"stringWithFormat:") = Id, NSString;
overload selector(static #"stringWithString:") = Id, NSString;
overload selector(static #"stringWithUTF8String:") = Id, Pointer[CChar];
overload selector(static #"stringsByAppendingPaths:") = NSArray, NSArray;
overload selector(static #"subarrayWithRange:") = NSArray, NSRange;
overload selector(static #"subdataWithRange:") = NSData, NSRange;
overload selector(static #"subgroups") = NSArray;
overload selector(static #"subpathsAtPath:") = NSArray, NSString;
overload selector(static #"subpathsOfDirectoryAtPath:error:") = NSArray, NSString, Pointer[NSError];
overload selector(static #"subpredicates") = NSArray;
overload selector(static #"substringFromIndex:") = NSString, CULong;
overload selector(static #"substringToIndex:") = NSString, CULong;
overload selector(static #"substringWithRange:") = NSString, NSRange;
overload selector(static #"suggestedFilename") = NSString;
overload selector(static #"suiteForAppleEventCode:") = NSString, UInt;
overload selector(static #"suiteName") = NSString;
overload selector(static #"suiteNames") = NSArray;
overload selector(static #"superclass") = Id;
overload selector(static #"superclassDescription") = NSScriptClassDescription;
overload selector(static #"supportsCommand:") = Bool, NSScriptCommandDescription;
overload selector(static #"suspend") = Bool;
overload selector(static #"suspendCurrentAppleEvent") = NSAppleEventManagerSuspensionID;
overload selector(static #"suspendExecution") = Void;
overload selector(static #"suspended") = Bool;
overload selector(static #"symbolCharacterSet") = Id;
overload selector(static #"synchronize") = Bool;
overload selector(static #"synchronizeFile") = Void;
overload selector(static #"systemDefaultPortNameServer") = NSPortNameServer;
overload selector(static #"systemID") = NSString;
overload selector(static #"systemLocale") = Id;
overload selector(static #"systemTimeZone") = NSTimeZone;
overload selector(static #"systemUptime") = Double;
overload selector(static #"systemVersion") = UInt;
overload selector(static #"takeStoredValue:forKey:") = Void, Id, NSString;
overload selector(static #"takeValue:forKey:") = Void, Id, NSString;
overload selector(static #"takeValue:forKeyPath:") = Void, Id, NSString;
overload selector(static #"takeValuesFromDictionary:") = Void, NSDictionary;
overload selector(static #"target") = Id;
overload selector(static #"terminate") = Void;
overload selector(static #"terminationReason") = CLong;
overload selector(static #"terminationStatus") = Int;
overload selector(static #"test") = NSScriptWhoseTest;
overload selector(static #"textAttributesForNegativeInfinity") = NSDictionary;
overload selector(static #"textAttributesForNegativeValues") = NSDictionary;
overload selector(static #"textAttributesForNil") = NSDictionary;
overload selector(static #"textAttributesForNotANumber") = NSDictionary;
overload selector(static #"textAttributesForPositiveInfinity") = NSDictionary;
overload selector(static #"textAttributesForPositiveValues") = NSDictionary;
overload selector(static #"textAttributesForZero") = NSDictionary;
overload selector(static #"textEncodingName") = NSString;
overload selector(static #"textWithStringValue:") = Id, NSString;
overload selector(static #"thousandSeparator") = NSString;
overload selector(static #"threadDictionary") = NSMutableDictionary;
overload selector(static #"threadPriority") = Double;
overload selector(static #"timeInterval") = Double;
overload selector(static #"timeIntervalSince1970") = Double;
overload selector(static #"timeIntervalSinceDate:") = Double, NSDate;
overload selector(static #"timeIntervalSinceNow") = Double;
overload selector(static #"timeIntervalSinceReferenceDate") = Double;
overload selector(static #"timeStyle") = CULong;
overload selector(static #"timeZone") = NSTimeZone;
overload selector(static #"timeZoneDataVersion") = NSString;
overload selector(static #"timeZoneForSecondsFromGMT:") = Id, CLong;
overload selector(static #"timeZoneWithAbbreviation:") = Id, NSString;
overload selector(static #"timeZoneWithName:") = Id, NSString;
overload selector(static #"timeZoneWithName:data:") = Id, NSString, NSData;
overload selector(static #"timeoutInterval") = Double;
overload selector(static #"timerWithTimeInterval:invocation:repeats:") = NSTimer, Double, NSInvocation, Bool;
overload selector(static #"timerWithTimeInterval:target:selector:userInfo:repeats:") = NSTimer, Double, Id, SelectorHandle, Id, Bool;
overload selector(static #"toManyRelationshipKeys") = NSArray;
overload selector(static #"toOneRelationshipKeys") = NSArray;
overload selector(static #"topLevelObject") = Id;
overload selector(static #"totalCostLimit") = CULong;
overload selector(static #"transactionID") = Int;
overload selector(static #"transform") = NSAffineTransform;
overload selector(static #"transformPoint:") = NSPoint, NSPoint;
overload selector(static #"transformSize:") = NSSize, NSSize;
overload selector(static #"transformStruct") = NSAffineTransformStruct;
overload selector(static #"transformedValue:") = Id, Id;
overload selector(static #"transformedValueClass") = Id;
overload selector(static #"translateXBy:yBy:") = Void, Double, Double;
overload selector(static #"truncateFileAtOffset:") = Void, UInt64;
overload selector(static #"tryLock") = Bool;
overload selector(static #"tryLockWhenCondition:") = Bool, CLong;
overload selector(static #"twoDigitStartDate") = NSDate;
overload selector(static #"type") = NSString;
overload selector(static #"typeCodeValue") = UInt;
overload selector(static #"typeForArgumentWithName:") = NSString, NSString;
overload selector(static #"typeForKey:") = NSString, NSString;
overload selector(static #"unableToSetNilForKey:") = Void, NSString;
overload selector(static #"unarchiveObjectWithData:") = Id, NSData;
overload selector(static #"unarchiveObjectWithFile:") = Id, NSString;
overload selector(static #"undo") = Void;
overload selector(static #"undoActionName") = NSString;
overload selector(static #"undoMenuItemTitle") = NSString;
overload selector(static #"undoMenuTitleForUndoActionName:") = NSString, NSString;
overload selector(static #"undoNestedGroup") = Void;
overload selector(static #"unionHashTable:") = Void, NSHashTable;
overload selector(static #"unionSet:") = Void, NSSet;
overload selector(static #"uniqueID") = Id;
overload selector(static #"unload") = Bool;
overload selector(static #"unlock") = Void;
overload selector(static #"unlockWithCondition:") = Void, CLong;
overload selector(static #"unregisterClass:") = Void, Id;
overload selector(static #"unscheduleFromRunLoop:forMode:") = Void, NSRunLoop, NSString;
overload selector(static #"unsignedCharValue") = CUChar;
overload selector(static #"unsignedIntValue") = UInt;
overload selector(static #"unsignedIntegerValue") = CULong;
overload selector(static #"unsignedLongLongValue") = UInt64;
overload selector(static #"unsignedLongValue") = CULong;
overload selector(static #"unsignedShortValue") = UShort;
overload selector(static #"uppercaseLetterCharacterSet") = Id;
overload selector(static #"uppercaseString") = NSString;
overload selector(static #"useStoredAccessor") = Bool;
overload selector(static #"user") = NSString;
overload selector(static #"userInfo") = Id;
overload selector(static #"usesGroupingSeparator") = Bool;
overload selector(static #"usesSignificantDigits") = Bool;
overload selector(static #"usesStrongWriteBarrier") = Bool;
overload selector(static #"usesWeakReadAndWriteBarriers") = Bool;
overload selector(static #"validateAndReturnError:") = Bool, Pointer[NSError];
overload selector(static #"validateValue:forKey:error:") = Bool, Pointer[Id], NSString, Pointer[NSError];
overload selector(static #"validateValue:forKeyPath:error:") = Bool, Pointer[Id], NSString, Pointer[NSError];
overload selector(static #"value") = Id;
overload selector(static #"value:withObjCType:") = NSValue, RawPointer, Pointer[CChar];
overload selector(static #"valueAtIndex:inPropertyWithKey:") = Id, CULong, NSString;
overload selector(static #"valueForAttribute:") = Id, NSString;
overload selector(static #"valueForHTTPHeaderField:") = NSString, NSString;
overload selector(static #"valueForKey:") = Id, NSString;
overload selector(static #"valueForKeyPath:") = Id, NSString;
overload selector(static #"valueForUndefinedKey:") = Id, NSString;
overload selector(static #"valueListAttributes") = NSArray;
overload selector(static #"valueLists") = NSDictionary;
overload selector(static #"valueOfAttribute:forResultAtIndex:") = Id, NSString, CULong;
overload selector(static #"valuePointerFunctions") = NSPointerFunctions;
overload selector(static #"valueTransformerForName:") = NSValueTransformer, NSString;
overload selector(static #"valueTransformerNames") = NSArray;
overload selector(static #"valueWithBytes:objCType:") = NSValue, RawPointer, Pointer[CChar];
overload selector(static #"valueWithName:inPropertyWithKey:") = Id, NSString, NSString;
overload selector(static #"valueWithNonretainedObject:") = NSValue, Id;
overload selector(static #"valueWithPoint:") = NSValue, NSPoint;
overload selector(static #"valueWithPointer:") = NSValue, RawPointer;
overload selector(static #"valueWithRange:") = NSValue, NSRange;
overload selector(static #"valueWithRect:") = NSValue, NSRect;
overload selector(static #"valueWithSize:") = NSValue, NSSize;
overload selector(static #"valueWithUniqueID:inPropertyWithKey:") = Id, Id, NSString;
overload selector(static #"valuesForAttributes:") = NSDictionary, NSArray;
overload selector(static #"valuesForKeys:") = NSDictionary, NSArray;
overload selector(static #"variable") = NSString;
overload selector(static #"version") = CLong;
overload selector(static #"versionForClassName:") = CLong, NSString;
overload selector(static #"veryShortMonthSymbols") = NSArray;
overload selector(static #"veryShortStandaloneMonthSymbols") = NSArray;
overload selector(static #"veryShortStandaloneWeekdaySymbols") = NSArray;
overload selector(static #"veryShortWeekdaySymbols") = NSArray;
overload selector(static #"volatileDomainForName:") = NSDictionary, NSString;
overload selector(static #"volatileDomainNames") = NSArray;
overload selector(static #"wait") = Void;
overload selector(static #"waitForDataInBackgroundAndNotify") = Void;
overload selector(static #"waitForDataInBackgroundAndNotifyForModes:") = Void, NSArray;
overload selector(static #"waitUntilAllOperationsAreFinished") = Void;
overload selector(static #"waitUntilDate:") = Bool, NSDate;
overload selector(static #"waitUntilExit") = Void;
overload selector(static #"waitUntilFinished") = Void;
overload selector(static #"week") = CLong;
overload selector(static #"weekday") = CLong;
overload selector(static #"weekdayOrdinal") = CLong;
overload selector(static #"weekdaySymbols") = NSArray;
overload selector(static #"whitespaceAndNewlineCharacterSet") = Id;
overload selector(static #"whitespaceCharacterSet") = Id;
overload selector(static #"willChange:valuesAtIndexes:forKey:") = Void, CULong, NSIndexSet, NSString;
overload selector(static #"willChangeValueForKey:") = Void, NSString;
overload selector(static #"willChangeValueForKey:withSetMutation:usingObjects:") = Void, NSString, CULong, NSSet;
overload selector(static #"windowsLocaleCodeFromLocaleIdentifier:") = UInt, NSString;
overload selector(static #"write:maxLength:") = CLong, Pointer[CUChar], CULong;
overload selector(static #"writeBookmarkData:toURL:options:error:") = Bool, NSData, NSURL, CULong, Pointer[NSError];
overload selector(static #"writeData:") = Bool, NSData;
overload selector(static #"writeProperty:forKey:") = Bool, Id, NSString;
overload selector(static #"writePropertyList:toStream:format:options:error:") = CLong, Id, NSOutputStream, CULong, CULong, Pointer[NSError];
overload selector(static #"writeToFile:atomically:") = Bool, NSString, Bool;
overload selector(static #"writeToFile:atomically:encoding:error:") = Bool, NSString, Bool, CULong, Pointer[NSError];
overload selector(static #"writeToFile:options:error:") = Bool, NSString, CULong, Pointer[NSError];
overload selector(static #"writeToURL:atomically:") = Bool, NSURL, Bool;
overload selector(static #"writeToURL:atomically:encoding:error:") = Bool, NSURL, Bool, CULong, Pointer[NSError];
overload selector(static #"writeToURL:options:error:") = Bool, NSURL, CULong, Pointer[NSError];
overload selector(static #"year") = CLong;
overload selector(static #"yearOfCommonEra") = CLong;
overload selector(static #"years:months:days:hours:minutes:seconds:sinceDate:") = Void, Pointer[CLong], Pointer[CLong], Pointer[CLong], Pointer[CLong], Pointer[CLong], Pointer[CLong], NSCalendarDate;
overload selector(static #"zero") = NSDecimalNumber;
overload selector(static #"zeroSymbol") = NSString;
overload selector(static #"zone") = Pointer[NSZone];


external NSFoundationVersionNumber : Double;

alias NSInteger = CLong;

alias NSUInteger = CULong;

external NSStringFromSelector(
    aSelector : SelectorHandle) NSString;

external NSSelectorFromString(
    aSelectorName : NSString) SelectorHandle;

external NSStringFromClass(
    aClass : Id) NSString;

external NSClassFromString(
    aClassName : NSString) Id;

external NSStringFromProtocol(
    proto : Id) NSString;

external NSProtocolFromString(
    namestr : NSString) Id;

external NSGetSizeAndAlignment(
    typePtr : Pointer[CChar],
    sizep : Pointer[CULong],
    alignp : Pointer[CULong]) Pointer[CChar];

external NSLog(
    format : NSString,
    ...);

external NSLogv(
    format : NSString,
    args : Pointer[__va_list_tag]);

alias NSOrderedAscending = 4294967295;
alias NSOrderedSame = 0;
alias NSOrderedDescending = 1;

alias NSComparisonResult = CLong;

alias NSComparator = UnknownType;

alias NSEnumerationConcurrent = 1;
alias NSEnumerationReverse = 2;

alias NSEnumerationOptions = CULong;

alias NSSortConcurrent = 1;
alias NSSortStable = 16;

alias NSSortOptions = CULong;

alias NSNotFound = 9223372036854775807;

alias NSZone = Opaque;

external NSDefaultMallocZone() Pointer[NSZone];

external NSCreateZone(
    startSize : CULong,
    granularity : CULong,
    canFree : Bool) Pointer[NSZone];

external NSRecycleZone(
    zone : Pointer[NSZone]);

external NSSetZoneName(
    zone : Pointer[NSZone],
    name : NSString);

external NSZoneName(
    zone : Pointer[NSZone]) NSString;

external NSZoneFromPointer(
    ptr : RawPointer) Pointer[NSZone];

external NSZoneMalloc(
    zone : Pointer[NSZone],
    size : CULong) RawPointer;

external NSZoneCalloc(
    zone : Pointer[NSZone],
    numElems : CULong,
    byteSize : CULong) RawPointer;

external NSZoneRealloc(
    zone : Pointer[NSZone],
    ptr : RawPointer,
    size : CULong) RawPointer;

external NSZoneFree(
    zone : Pointer[NSZone],
    ptr : RawPointer);

alias NSScannedOption = 1;
alias NSCollectorDisabledOption = 2;

external NSAllocateCollectable(
    size : CULong,
    options : CULong) RawPointer;

external NSReallocateCollectable(
    ptr : RawPointer,
    size : CULong,
    options : CULong) RawPointer;

external NSPageSize() CULong;

external NSLogPageSize() CULong;

external NSRoundUpToMultipleOfPageSize(
    bytes : CULong) CULong;

external NSRoundDownToMultipleOfPageSize(
    bytes : CULong) CULong;

external NSAllocateMemoryPages(
    bytes : CULong) RawPointer;

external NSDeallocateMemoryPages(
    ptr : RawPointer,
    bytes : CULong);

external NSCopyMemoryPages(
    source : RawPointer,
    dest : RawPointer,
    bytes : CULong);

external NSRealMemoryAvailable() CULong;

external NSAllocateObject(
    aClass : Id,
    extraBytes : CULong,
    zone : Pointer[NSZone]) Id;

external NSDeallocateObject(
    object : Id);

external NSCopyObject(
    object : Id,
    extraBytes : CULong,
    zone : Pointer[NSZone]) Id;

external NSShouldRetainWithZone(
    anObject : Id,
    requestedZone : Pointer[NSZone]) Bool;

external NSIncrementExtraRefCount(
    object : Id);

external NSDecrementExtraRefCountWasZero(
    object : Id) Bool;

external NSExtraRefCount(
    object : Id) CULong;

record UnnamedStruct71 (
    state : CULong,
    itemsPtr : Pointer[Id],
    mutationsPtr : Pointer[CULong],
    extra : Array[CULong,5],
);

alias NSFastEnumerationState = UnnamedStruct71;

record Struct__NSRange (
    location : CULong,
    length : CULong,
);

alias NSRange = Struct__NSRange;

alias NSRangePointer = Pointer[NSRange];

external NSUnionRange(
    range1 : NSRange,
    range2 : NSRange) NSRange;

external NSIntersectionRange(
    range1 : NSRange,
    range2 : NSRange) NSRange;

external NSStringFromRange(
    range : NSRange) NSString;

external NSRangeFromString(
    aString : NSString) NSRange;

external NSBundleDidLoadNotification : NSString;

external NSLoadedClasses : NSString;

alias NS_UnknownByteOrder = 0;
alias NS_LittleEndian = 1;
alias NS_BigEndian = 2;

record UnnamedStruct72 (
    v : UInt,
);

alias NSSwappedFloat = UnnamedStruct72;

record UnnamedStruct73 (
    v : UInt64,
);

alias NSSwappedDouble = UnnamedStruct73;

external NSSystemClockDidChangeNotification : NSString;

alias NSTimeInterval = Double;

alias NSEraCalendarUnit = 2;
alias NSYearCalendarUnit = 4;
alias NSMonthCalendarUnit = 8;
alias NSDayCalendarUnit = 16;
alias NSHourCalendarUnit = 32;
alias NSMinuteCalendarUnit = 64;
alias NSSecondCalendarUnit = 128;
alias NSWeekCalendarUnit = 256;
alias NSWeekdayCalendarUnit = 512;
alias NSWeekdayOrdinalCalendarUnit = 1024;
alias NSQuarterCalendarUnit = 2048;

alias NSCalendarUnit = CULong;

alias NSWrapCalendarComponents = 1;

alias NSUndefinedDateComponent = 9223372036854775807;

alias unichar = UShort;

external NSParseErrorException : NSString;

alias NSCaseInsensitiveSearch = 1;
alias NSLiteralSearch = 2;
alias NSBackwardsSearch = 4;
alias NSAnchoredSearch = 8;
alias NSNumericSearch = 64;
alias NSDiacriticInsensitiveSearch = 128;
alias NSWidthInsensitiveSearch = 256;
alias NSForcedOrderingSearch = 512;

alias NSStringCompareOptions = CULong;

alias NSASCIIStringEncoding = 1;
alias NSNEXTSTEPStringEncoding = 2;
alias NSJapaneseEUCStringEncoding = 3;
alias NSUTF8StringEncoding = 4;
alias NSISOLatin1StringEncoding = 5;
alias NSSymbolStringEncoding = 6;
alias NSNonLossyASCIIStringEncoding = 7;
alias NSShiftJISStringEncoding = 8;
alias NSISOLatin2StringEncoding = 9;
alias NSUnicodeStringEncoding = 10;
alias NSWindowsCP1251StringEncoding = 11;
alias NSWindowsCP1252StringEncoding = 12;
alias NSWindowsCP1253StringEncoding = 13;
alias NSWindowsCP1254StringEncoding = 14;
alias NSWindowsCP1250StringEncoding = 15;
alias NSISO2022JPStringEncoding = 21;
alias NSMacOSRomanStringEncoding = 30;
alias NSUTF16StringEncoding = 10;
alias NSUTF16BigEndianStringEncoding = 2415919360;
alias NSUTF16LittleEndianStringEncoding = 2483028224;
alias NSUTF32StringEncoding = 2348810496;
alias NSUTF32BigEndianStringEncoding = 2550137088;
alias NSUTF32LittleEndianStringEncoding = 2617245952;

alias NSStringEncoding = CULong;

alias NSStringEncodingConversionAllowLossy = 1;
alias NSStringEncodingConversionExternalRepresentation = 2;

alias NSStringEncodingConversionOptions = CULong;

external NSCharacterConversionException : NSString;

alias NSOpenStepUnicodeReservedBase = 62464;

external NXReadNSObjectFromCoder(
    decoder : NSCoder) NSObject;

alias NSDataReadingMapped = 1;
alias NSDataReadingUncached = 2;

alias NSDataReadingOptions = CULong;

alias NSDataWritingAtomic = 1;

alias NSDataWritingOptions = CULong;

alias NSMappedRead = 1;
alias NSUncachedRead = 2;

alias NSAtomicWrite = 1;

alias NSDataSearchBackwards = 1;
alias NSDataSearchAnchored = 2;

alias NSDataSearchOptions = CULong;

alias NSRoundPlain = 0;
alias NSRoundDown = 1;
alias NSRoundUp = 2;
alias NSRoundBankers = 3;

alias NSRoundingMode = CULong;

alias NSCalculationNoError = 0;
alias NSCalculationLossOfPrecision = 1;
alias NSCalculationUnderflow = 2;
alias NSCalculationOverflow = 3;
alias NSCalculationDivideByZero = 4;

alias NSCalculationError = CULong;

record UnnamedStruct74 (
    _exponent : Int,
    _length : UInt,
    _isNegative : UInt,
    _isCompact : UInt,
    _reserved : UInt,
    _mantissa : Array[UShort,8],
);

alias NSDecimal = UnnamedStruct74;

external NSDecimalCopy(
    destination : Pointer[NSDecimal],
    source : Pointer[NSDecimal]);

external NSDecimalCompact(
    number : Pointer[NSDecimal]);

external NSDecimalCompare(
    leftOperand : Pointer[NSDecimal],
    rightOperand : Pointer[NSDecimal]) CLong;

external NSDecimalRound(
    result : Pointer[NSDecimal],
    number : Pointer[NSDecimal],
    scale : CLong,
    roundingMode : CULong);

external NSDecimalNormalize(
    number1 : Pointer[NSDecimal],
    number2 : Pointer[NSDecimal],
    roundingMode : CULong) CULong;

external NSDecimalAdd(
    result : Pointer[NSDecimal],
    leftOperand : Pointer[NSDecimal],
    rightOperand : Pointer[NSDecimal],
    roundingMode : CULong) CULong;

external NSDecimalSubtract(
    result : Pointer[NSDecimal],
    leftOperand : Pointer[NSDecimal],
    rightOperand : Pointer[NSDecimal],
    roundingMode : CULong) CULong;

external NSDecimalMultiply(
    result : Pointer[NSDecimal],
    leftOperand : Pointer[NSDecimal],
    rightOperand : Pointer[NSDecimal],
    roundingMode : CULong) CULong;

external NSDecimalDivide(
    result : Pointer[NSDecimal],
    leftOperand : Pointer[NSDecimal],
    rightOperand : Pointer[NSDecimal],
    roundingMode : CULong) CULong;

external NSDecimalPower(
    result : Pointer[NSDecimal],
    number : Pointer[NSDecimal],
    power : CULong,
    roundingMode : CULong) CULong;

external NSDecimalMultiplyByPowerOf10(
    result : Pointer[NSDecimal],
    number : Pointer[NSDecimal],
    power : Short,
    roundingMode : CULong) CULong;

external NSDecimalString(
    dcm : Pointer[NSDecimal],
    locale : Id) NSString;

external NSDecimalNumberExactnessException : NSString;

external NSDecimalNumberOverflowException : NSString;

external NSDecimalNumberUnderflowException : NSString;

external NSDecimalNumberDivideByZeroException : NSString;

external NSCocoaErrorDomain : NSString;

external NSPOSIXErrorDomain : NSString;

external NSOSStatusErrorDomain : NSString;

external NSMachErrorDomain : NSString;

external NSUnderlyingErrorKey : NSString;

external NSLocalizedDescriptionKey : NSString;

external NSLocalizedFailureReasonErrorKey : NSString;

external NSLocalizedRecoverySuggestionErrorKey : NSString;

external NSLocalizedRecoveryOptionsErrorKey : NSString;

external NSRecoveryAttempterErrorKey : NSString;

external NSHelpAnchorErrorKey : NSString;

external NSStringEncodingErrorKey : NSString;

external NSURLErrorKey : NSString;

external NSFilePathErrorKey : NSString;

external NSGenericException : NSString;

external NSRangeException : NSString;

external NSInvalidArgumentException : NSString;

external NSInternalInconsistencyException : NSString;

external NSMallocException : NSString;

external NSObjectInaccessibleException : NSString;

external NSObjectNotAvailableException : NSString;

external NSDestinationInvalidException : NSString;

external NSPortTimeoutException : NSString;

external NSInvalidSendPortException : NSString;

external NSInvalidReceivePortException : NSString;

external NSPortSendException : NSString;

external NSPortReceiveException : NSString;

external NSOldStyleException : NSString;

external NSGetUncaughtExceptionHandler() CCodePointer[(NSException),()];

external NSSetUncaughtExceptionHandler(
    argument0 : CCodePointer[(NSException),()]);

external NSAssertionHandlerKey : NSString;

external NSFileHandleOperationException : NSString;

external NSFileHandleReadCompletionNotification : NSString;

external NSFileHandleReadToEndOfFileCompletionNotification : NSString;

external NSFileHandleConnectionAcceptedNotification : NSString;

external NSFileHandleDataAvailableNotification : NSString;

external NSFileHandleNotificationDataItem : NSString;

external NSFileHandleNotificationFileHandleItem : NSString;

external NSFileHandleNotificationMonitorModes : NSString;

external NSUserName() NSString;

external NSFullUserName() NSString;

external NSHomeDirectory() NSString;

external NSHomeDirectoryForUser(
    userName : NSString) NSString;

external NSTemporaryDirectory() NSString;

external NSOpenStepRootDirectory() NSString;

alias NSApplicationDirectory = 1;
alias NSDemoApplicationDirectory = 2;
alias NSDeveloperApplicationDirectory = 3;
alias NSAdminApplicationDirectory = 4;
alias NSLibraryDirectory = 5;
alias NSDeveloperDirectory = 6;
alias NSUserDirectory = 7;
alias NSDocumentationDirectory = 8;
alias NSDocumentDirectory = 9;
alias NSCoreServiceDirectory = 10;
alias NSAutosavedInformationDirectory = 11;
alias NSDesktopDirectory = 12;
alias NSCachesDirectory = 13;
alias NSApplicationSupportDirectory = 14;
alias NSDownloadsDirectory = 15;
alias NSInputMethodsDirectory = 16;
alias NSMoviesDirectory = 17;
alias NSMusicDirectory = 18;
alias NSPicturesDirectory = 19;
alias NSPrinterDescriptionDirectory = 20;
alias NSSharedPublicDirectory = 21;
alias NSPreferencePanesDirectory = 22;
alias NSItemReplacementDirectory = 99;
alias NSAllApplicationsDirectory = 100;
alias NSAllLibrariesDirectory = 101;

alias NSSearchPathDirectory = CULong;

alias NSUserDomainMask = 1;
alias NSLocalDomainMask = 2;
alias NSNetworkDomainMask = 4;
alias NSSystemDomainMask = 8;
alias NSAllDomainsMask = 65535;

alias NSSearchPathDomainMask = CULong;

external NSSearchPathForDirectoriesInDomains(
    directory : CULong,
    domainMask : CULong,
    expandTilde : Bool) NSArray;

alias NSVolumeEnumerationSkipHiddenVolumes = 2;
alias NSVolumeEnumerationProduceFileReferenceURLs = 4;

alias NSVolumeEnumerationOptions = CULong;

alias NSDirectoryEnumerationSkipsSubdirectoryDescendants = 1;
alias NSDirectoryEnumerationSkipsPackageDescendants = 2;
alias NSDirectoryEnumerationSkipsHiddenFiles = 4;

alias NSDirectoryEnumerationOptions = CULong;

alias NSFileManagerItemReplacementUsingNewMetadataOnly = 1;
alias NSFileManagerItemReplacementWithoutDeletingBackupItem = 2;

alias NSFileManagerItemReplacementOptions = CULong;

external NSFileType : NSString;

external NSFileTypeDirectory : NSString;

external NSFileTypeRegular : NSString;

external NSFileTypeSymbolicLink : NSString;

external NSFileTypeSocket : NSString;

external NSFileTypeCharacterSpecial : NSString;

external NSFileTypeBlockSpecial : NSString;

external NSFileTypeUnknown : NSString;

external NSFileSize : NSString;

external NSFileModificationDate : NSString;

external NSFileReferenceCount : NSString;

external NSFileDeviceIdentifier : NSString;

external NSFileOwnerAccountName : NSString;

external NSFileGroupOwnerAccountName : NSString;

external NSFilePosixPermissions : NSString;

external NSFileSystemNumber : NSString;

external NSFileSystemFileNumber : NSString;

external NSFileExtensionHidden : NSString;

external NSFileHFSCreatorCode : NSString;

external NSFileHFSTypeCode : NSString;

external NSFileImmutable : NSString;

external NSFileAppendOnly : NSString;

external NSFileCreationDate : NSString;

external NSFileOwnerAccountID : NSString;

external NSFileGroupOwnerAccountID : NSString;

external NSFileBusy : NSString;

external NSFileSystemSize : NSString;

external NSFileSystemFreeSize : NSString;

external NSFileSystemNodes : NSString;

external NSFileSystemFreeNodes : NSString;

external NSUndefinedKeyException : NSString;

external NSAverageKeyValueOperator : NSString;

external NSCountKeyValueOperator : NSString;

external NSDistinctUnionOfArraysKeyValueOperator : NSString;

external NSDistinctUnionOfObjectsKeyValueOperator : NSString;

external NSDistinctUnionOfSetsKeyValueOperator : NSString;

external NSMaximumKeyValueOperator : NSString;

external NSMinimumKeyValueOperator : NSString;

external NSSumKeyValueOperator : NSString;

external NSUnionOfArraysKeyValueOperator : NSString;

external NSUnionOfObjectsKeyValueOperator : NSString;

external NSUnionOfSetsKeyValueOperator : NSString;

alias NSKeyValueObservingOptionNew = 1;
alias NSKeyValueObservingOptionOld = 2;
alias NSKeyValueObservingOptionInitial = 4;
alias NSKeyValueObservingOptionPrior = 8;

alias NSKeyValueObservingOptions = CULong;

alias NSKeyValueChangeSetting = 1;
alias NSKeyValueChangeInsertion = 2;
alias NSKeyValueChangeRemoval = 3;
alias NSKeyValueChangeReplacement = 4;

alias NSKeyValueChange = CULong;

alias NSKeyValueUnionSetMutation = 1;
alias NSKeyValueMinusSetMutation = 2;
alias NSKeyValueIntersectSetMutation = 3;
alias NSKeyValueSetSetMutation = 4;

alias NSKeyValueSetMutationKind = CULong;

external NSKeyValueChangeKindKey : NSString;

external NSKeyValueChangeNewKey : NSString;

external NSKeyValueChangeOldKey : NSString;

external NSKeyValueChangeIndexesKey : NSString;

external NSKeyValueChangeNotificationIsPriorKey : NSString;

alias NSPropertyListImmutable = 0;
alias NSPropertyListMutableContainers = 1;
alias NSPropertyListMutableContainersAndLeaves = 2;

alias NSPropertyListMutabilityOptions = CULong;

alias NSPropertyListOpenStepFormat = 1;
alias NSPropertyListXMLFormat_v1_0 = 100;
alias NSPropertyListBinaryFormat_v1_0 = 200;

alias NSPropertyListFormat = CULong;

alias NSPropertyListReadOptions = CULong;

alias NSPropertyListWriteOptions = CULong;

alias NSPoint = CGPoint;

alias NSPointPointer = Pointer[NSPoint];

alias NSPointArray = Pointer[NSPoint];

alias NSSize = CGSize;

alias NSSizePointer = Pointer[NSSize];

alias NSSizeArray = Pointer[NSSize];

alias NSRect = CGRect;

alias NSRectPointer = Pointer[NSRect];

alias NSRectArray = Pointer[NSRect];

alias NSRectEdge = CULong;

external NSZeroPoint : NSPoint;

external NSZeroSize : NSSize;

external NSZeroRect : NSRect;

external NSEqualPoints(
    aPoint : NSPoint,
    bPoint : NSPoint) Bool;

external NSEqualSizes(
    aSize : NSSize,
    bSize : NSSize) Bool;

external NSEqualRects(
    aRect : NSRect,
    bRect : NSRect) Bool;

external NSIsEmptyRect(
    aRect : NSRect) Bool;

external NSInsetRect(
    aRect : NSRect,
    dX : Double,
    dY : Double) NSRect;

external NSIntegralRect(
    aRect : NSRect) NSRect;

external NSUnionRect(
    aRect : NSRect,
    bRect : NSRect) NSRect;

external NSIntersectionRect(
    aRect : NSRect,
    bRect : NSRect) NSRect;

external NSOffsetRect(
    aRect : NSRect,
    dX : Double,
    dY : Double) NSRect;

external NSDivideRect(
    inRect : NSRect,
    slice : Pointer[NSRect],
    rem : Pointer[NSRect],
    amount : Double,
    edge : CULong);

external NSPointInRect(
    aPoint : NSPoint,
    aRect : NSRect) Bool;

external NSMouseInRect(
    aPoint : NSPoint,
    aRect : NSRect,
    flipped : Bool) Bool;

external NSContainsRect(
    aRect : NSRect,
    bRect : NSRect) Bool;

external NSIntersectsRect(
    aRect : NSRect,
    bRect : NSRect) Bool;

external NSStringFromPoint(
    aPoint : NSPoint) NSString;

external NSStringFromSize(
    aSize : NSSize) NSString;

external NSStringFromRect(
    aRect : NSRect) NSString;

external NSPointFromString(
    aString : NSString) NSPoint;

external NSSizeFromString(
    aString : NSString) NSSize;

external NSRectFromString(
    aString : NSString) NSRect;

external NSInvalidArchiveOperationException : NSString;

external NSInvalidUnarchiveOperationException : NSString;

external NSCurrentLocaleDidChangeNotification : NSString;

external NSLocaleIdentifier : NSString;

external NSLocaleLanguageCode : NSString;

external NSLocaleCountryCode : NSString;

external NSLocaleScriptCode : NSString;

external NSLocaleVariantCode : NSString;

external NSLocaleExemplarCharacterSet : NSString;

external NSLocaleCalendar : NSString;

external NSLocaleCollationIdentifier : NSString;

external NSLocaleUsesMetricSystem : NSString;

external NSLocaleMeasurementSystem : NSString;

external NSLocaleDecimalSeparator : NSString;

external NSLocaleGroupingSeparator : NSString;

external NSLocaleCurrencySymbol : NSString;

external NSLocaleCurrencyCode : NSString;

external NSLocaleCollatorIdentifier : NSString;

external NSLocaleQuotationBeginDelimiterKey : NSString;

external NSLocaleQuotationEndDelimiterKey : NSString;

external NSLocaleAlternateQuotationBeginDelimiterKey : NSString;

external NSLocaleAlternateQuotationEndDelimiterKey : NSString;

external NSGregorianCalendar : NSString;

external NSBuddhistCalendar : NSString;

external NSChineseCalendar : NSString;

external NSHebrewCalendar : NSString;

external NSIslamicCalendar : NSString;

external NSIslamicCivilCalendar : NSString;

external NSJapaneseCalendar : NSString;

external NSRepublicOfChinaCalendar : NSString;

external NSPersianCalendar : NSString;

external NSIndianCalendar : NSString;

external NSISO8601Calendar : NSString;

alias NSPostWhenIdle = 1;
alias NSPostASAP = 2;
alias NSPostNow = 3;

alias NSPostingStyle = CULong;

alias NSNotificationNoCoalescing = 0;
alias NSNotificationCoalescingOnName = 1;
alias NSNotificationCoalescingOnSender = 2;

alias NSNotificationCoalescing = CULong;

alias NSSocketNativeHandle = Int;

external NSPortDidBecomeInvalidNotification : NSString;

alias NSWindowsNTOperatingSystem = 1;
alias NSWindows95OperatingSystem = 2;
alias NSSolarisOperatingSystem = 3;
alias NSHPUXOperatingSystem = 4;
alias NSMACHOperatingSystem = 5;
alias NSSunOSOperatingSystem = 6;
alias NSOSF1OperatingSystem = 7;

external NSDefaultRunLoopMode : NSString;

external NSRunLoopCommonModes : NSString;

alias NSStreamStatusNotOpen = 0;
alias NSStreamStatusOpening = 1;
alias NSStreamStatusOpen = 2;
alias NSStreamStatusReading = 3;
alias NSStreamStatusWriting = 4;
alias NSStreamStatusAtEnd = 5;
alias NSStreamStatusClosed = 6;
alias NSStreamStatusError = 7;

alias NSStreamStatus = CULong;

alias NSStreamEventNone = 0;
alias NSStreamEventOpenCompleted = 1;
alias NSStreamEventHasBytesAvailable = 2;
alias NSStreamEventHasSpaceAvailable = 4;
alias NSStreamEventErrorOccurred = 8;
alias NSStreamEventEndEncountered = 16;

alias NSStreamEvent = CULong;

external NSStreamSocketSecurityLevelKey : NSString;

external NSStreamSocketSecurityLevelNone : NSString;

external NSStreamSocketSecurityLevelSSLv2 : NSString;

external NSStreamSocketSecurityLevelSSLv3 : NSString;

external NSStreamSocketSecurityLevelTLSv1 : NSString;

external NSStreamSocketSecurityLevelNegotiatedSSL : NSString;

external NSStreamSOCKSProxyConfigurationKey : NSString;

external NSStreamSOCKSProxyHostKey : NSString;

external NSStreamSOCKSProxyPortKey : NSString;

external NSStreamSOCKSProxyVersionKey : NSString;

external NSStreamSOCKSProxyUserKey : NSString;

external NSStreamSOCKSProxyPasswordKey : NSString;

external NSStreamSOCKSProxyVersion4 : NSString;

external NSStreamSOCKSProxyVersion5 : NSString;

external NSStreamDataWrittenToMemoryStreamKey : NSString;

external NSStreamFileCurrentOffsetKey : NSString;

external NSStreamSocketSSLErrorDomain : NSString;

external NSStreamSOCKSErrorDomain : NSString;

external NSWillBecomeMultiThreadedNotification : NSString;

external NSDidBecomeSingleThreadedNotification : NSString;

external NSThreadWillExitNotification : NSString;

external NSSystemTimeZoneDidChangeNotification : NSString;

external NSHTTPPropertyStatusCodeKey : NSString;

external NSHTTPPropertyStatusReasonKey : NSString;

external NSHTTPPropertyServerHTTPVersionKey : NSString;

external NSHTTPPropertyRedirectionHeadersKey : NSString;

external NSHTTPPropertyErrorPageDataKey : NSString;

external NSHTTPPropertyHTTPProxy : NSString;

external NSFTPPropertyUserLoginKey : NSString;

external NSFTPPropertyUserPasswordKey : NSString;

external NSFTPPropertyActiveTransferModeKey : NSString;

external NSFTPPropertyFileOffsetKey : NSString;

external NSFTPPropertyFTPProxy : NSString;

alias NSURLHandleNotLoaded = 0;
alias NSURLHandleLoadSucceeded = 1;
alias NSURLHandleLoadInProgress = 2;
alias NSURLHandleLoadFailed = 3;

alias NSURLHandleStatus = CULong;

alias NSURLBookmarkCreationPreferFileIDResolution = 256;
alias NSURLBookmarkCreationMinimalBookmark = 512;
alias NSURLBookmarkCreationSuitableForBookmarkFile = 1024;

alias NSURLBookmarkResolutionWithoutUI = 256;
alias NSURLBookmarkResolutionWithoutMounting = 512;

alias NSURLBookmarkCreationOptions = CULong;

alias NSURLBookmarkResolutionOptions = CULong;

alias NSURLBookmarkFileCreationOptions = CULong;

external NSURLFileScheme : NSString;

external NSURLNameKey : NSString;

external NSURLLocalizedNameKey : NSString;

external NSURLIsRegularFileKey : NSString;

external NSURLIsDirectoryKey : NSString;

external NSURLIsSymbolicLinkKey : NSString;

external NSURLIsVolumeKey : NSString;

external NSURLIsPackageKey : NSString;

external NSURLIsSystemImmutableKey : NSString;

external NSURLIsUserImmutableKey : NSString;

external NSURLIsHiddenKey : NSString;

external NSURLHasHiddenExtensionKey : NSString;

external NSURLCreationDateKey : NSString;

external NSURLContentAccessDateKey : NSString;

external NSURLContentModificationDateKey : NSString;

external NSURLAttributeModificationDateKey : NSString;

external NSURLLinkCountKey : NSString;

external NSURLParentDirectoryURLKey : NSString;

external NSURLVolumeURLKey : NSString;

external NSURLTypeIdentifierKey : NSString;

external NSURLLocalizedTypeDescriptionKey : NSString;

external NSURLLabelNumberKey : NSString;

external NSURLLabelColorKey : NSString;

external NSURLLocalizedLabelKey : NSString;

external NSURLEffectiveIconKey : NSString;

external NSURLCustomIconKey : NSString;

external NSURLFileSizeKey : NSString;

external NSURLFileAllocatedSizeKey : NSString;

external NSURLIsAliasFileKey : NSString;

external NSURLVolumeLocalizedFormatDescriptionKey : NSString;

external NSURLVolumeTotalCapacityKey : NSString;

external NSURLVolumeAvailableCapacityKey : NSString;

external NSURLVolumeResourceCountKey : NSString;

external NSURLVolumeSupportsPersistentIDsKey : NSString;

external NSURLVolumeSupportsSymbolicLinksKey : NSString;

external NSURLVolumeSupportsHardLinksKey : NSString;

external NSURLVolumeSupportsJournalingKey : NSString;

external NSURLVolumeIsJournalingKey : NSString;

external NSURLVolumeSupportsSparseFilesKey : NSString;

external NSURLVolumeSupportsZeroRunsKey : NSString;

external NSURLVolumeSupportsCaseSensitiveNamesKey : NSString;

external NSURLVolumeSupportsCasePreservedNamesKey : NSString;

external NSGlobalDomain : NSString;

external NSArgumentDomain : NSString;

external NSRegistrationDomain : NSString;

external NSUserDefaultsDidChangeNotification : NSString;

external NSWeekDayNameArray : NSString;

external NSShortWeekDayNameArray : NSString;

external NSMonthNameArray : NSString;

external NSShortMonthNameArray : NSString;

external NSTimeFormatString : NSString;

external NSDateFormatString : NSString;

external NSTimeDateFormatString : NSString;

external NSShortTimeDateFormatString : NSString;

external NSCurrencySymbol : NSString;

external NSDecimalSeparator : NSString;

external NSThousandsSeparator : NSString;

external NSDecimalDigits : NSString;

external NSAMPMDesignation : NSString;

external NSHourNameDesignations : NSString;

external NSYearMonthWeekDesignations : NSString;

external NSEarlierTimeDesignations : NSString;

external NSLaterTimeDesignations : NSString;

external NSThisDayDesignations : NSString;

external NSNextDayDesignations : NSString;

external NSNextNextDayDesignations : NSString;

external NSPriorDayDesignations : NSString;

external NSDateTimeOrdering : NSString;

external NSInternationalCurrencyString : NSString;

external NSShortDateFormatString : NSString;

external NSPositiveCurrencyFormatString : NSString;

external NSNegativeCurrencyFormatString : NSString;

alias NSFileNoSuchFileError = 4;
alias NSFileLockingError = 255;
alias NSFileReadUnknownError = 256;
alias NSFileReadNoPermissionError = 257;
alias NSFileReadInvalidFileNameError = 258;
alias NSFileReadCorruptFileError = 259;
alias NSFileReadNoSuchFileError = 260;
alias NSFileReadInapplicableStringEncodingError = 261;
alias NSFileReadUnsupportedSchemeError = 262;
alias NSFileReadTooLargeError = 263;
alias NSFileReadUnknownStringEncodingError = 264;
alias NSFileWriteUnknownError = 512;
alias NSFileWriteNoPermissionError = 513;
alias NSFileWriteInvalidFileNameError = 514;
alias NSFileWriteInapplicableStringEncodingError = 517;
alias NSFileWriteUnsupportedSchemeError = 518;
alias NSFileWriteOutOfSpaceError = 640;
alias NSFileWriteVolumeReadOnlyError = 642;
alias NSKeyValueValidationError = 1024;
alias NSFormattingError = 2048;
alias NSUserCancelledError = 3072;
alias NSExecutableNotLoadableError = 3584;
alias NSExecutableArchitectureMismatchError = 3585;
alias NSExecutableRuntimeMismatchError = 3586;
alias NSExecutableLoadError = 3587;
alias NSExecutableLinkError = 3588;
alias NSFileErrorMinimum = 0;
alias NSFileErrorMaximum = 1023;
alias NSValidationErrorMinimum = 1024;
alias NSValidationErrorMaximum = 2047;
alias NSExecutableErrorMinimum = 3584;
alias NSExecutableErrorMaximum = 3839;
alias NSFormattingErrorMinimum = 2048;
alias NSFormattingErrorMaximum = 2559;
alias NSPropertyListReadCorruptError = 3840;
alias NSPropertyListReadUnknownVersionError = 3841;
alias NSPropertyListReadStreamError = 3842;
alias NSPropertyListWriteStreamError = 3851;
alias NSPropertyListErrorMinimum = 3840;
alias NSPropertyListErrorMaximum = 4095;

external NSInvocationOperationVoidResultException : NSString;

external NSInvocationOperationCancelledException : NSString;

external NSHTTPCookieName : NSString;

external NSHTTPCookieValue : NSString;

external NSHTTPCookieOriginURL : NSString;

external NSHTTPCookieVersion : NSString;

external NSHTTPCookieDomain : NSString;

external NSHTTPCookiePath : NSString;

external NSHTTPCookieSecure : NSString;

external NSHTTPCookieExpires : NSString;

external NSHTTPCookieComment : NSString;

external NSHTTPCookieCommentURL : NSString;

external NSHTTPCookieDiscard : NSString;

external NSHTTPCookieMaximumAge : NSString;

external NSHTTPCookiePort : NSString;

alias NSHTTPCookieAcceptPolicyAlways = 0;
alias NSHTTPCookieAcceptPolicyNever = 1;
alias NSHTTPCookieAcceptPolicyOnlyFromMainDocumentDomain = 2;

alias NSHTTPCookieAcceptPolicy = CULong;

external NSHTTPCookieManagerAcceptPolicyChangedNotification : NSString;

external NSHTTPCookieManagerCookiesChangedNotification : NSString;

external NSNetServicesErrorCode : NSString;

external NSNetServicesErrorDomain : NSString;

alias NSNetServicesUnknownError = 4294895296;
alias NSNetServicesCollisionError = 4294895295;
alias NSNetServicesNotFoundError = 4294895294;
alias NSNetServicesActivityInProgress = 4294895293;
alias NSNetServicesBadArgumentError = 4294895292;
alias NSNetServicesCancelledError = 4294895291;
alias NSNetServicesInvalidError = 4294895290;
alias NSNetServicesTimeoutError = 4294895289;

alias NSNetServicesError = CLong;

alias NSNetServiceNoAutoRename = 1;

alias NSNetServiceOptions = CULong;

alias NSURLCacheStorageAllowed = 0;
alias NSURLCacheStorageAllowedInMemoryOnly = 1;
alias NSURLCacheStorageNotAllowed = 2;

alias NSURLCacheStoragePolicy = CULong;

alias NSURLCredentialPersistenceNone = 0;
alias NSURLCredentialPersistenceForSession = 1;
alias NSURLCredentialPersistencePermanent = 2;

alias NSURLCredentialPersistence = CULong;

external NSURLCredentialStorageChangedNotification : NSString;

external NSURLErrorDomain : NSString;

external NSURLErrorFailingURLErrorKey : NSString;

external NSURLErrorFailingURLStringErrorKey : NSString;

external NSErrorFailingURLStringKey : NSString;

external NSURLErrorFailingURLPeerTrustErrorKey : NSString;

alias NSURLErrorUnknown = 4294967295;
alias NSURLErrorCancelled = 4294966297;
alias NSURLErrorBadURL = 4294966296;
alias NSURLErrorTimedOut = 4294966295;
alias NSURLErrorUnsupportedURL = 4294966294;
alias NSURLErrorCannotFindHost = 4294966293;
alias NSURLErrorCannotConnectToHost = 4294966292;
alias NSURLErrorNetworkConnectionLost = 4294966291;
alias NSURLErrorDNSLookupFailed = 4294966290;
alias NSURLErrorHTTPTooManyRedirects = 4294966289;
alias NSURLErrorResourceUnavailable = 4294966288;
alias NSURLErrorNotConnectedToInternet = 4294966287;
alias NSURLErrorRedirectToNonExistentLocation = 4294966286;
alias NSURLErrorBadServerResponse = 4294966285;
alias NSURLErrorUserCancelledAuthentication = 4294966284;
alias NSURLErrorUserAuthenticationRequired = 4294966283;
alias NSURLErrorZeroByteResource = 4294966282;
alias NSURLErrorCannotDecodeRawData = 4294966281;
alias NSURLErrorCannotDecodeContentData = 4294966280;
alias NSURLErrorCannotParseResponse = 4294966279;
alias NSURLErrorFileDoesNotExist = 4294966196;
alias NSURLErrorFileIsDirectory = 4294966195;
alias NSURLErrorNoPermissionsToReadFile = 4294966194;
alias NSURLErrorDataLengthExceedsMaximum = 4294966193;
alias NSURLErrorSecureConnectionFailed = 4294966096;
alias NSURLErrorServerCertificateHasBadDate = 4294966095;
alias NSURLErrorServerCertificateUntrusted = 4294966094;
alias NSURLErrorServerCertificateHasUnknownRoot = 4294966093;
alias NSURLErrorServerCertificateNotYetValid = 4294966092;
alias NSURLErrorClientCertificateRejected = 4294966091;
alias NSURLErrorClientCertificateRequired = 4294966090;
alias NSURLErrorCannotLoadFromNetwork = 4294965296;
alias NSURLErrorCannotCreateFile = 4294964296;
alias NSURLErrorCannotOpenFile = 4294964295;
alias NSURLErrorCannotCloseFile = 4294964294;
alias NSURLErrorCannotWriteToFile = 4294964293;
alias NSURLErrorCannotRemoveFile = 4294964292;
alias NSURLErrorCannotMoveFile = 4294964291;
alias NSURLErrorDownloadDecodingFailedMidStream = 4294964290;
alias NSURLErrorDownloadDecodingFailedToComplete = 4294964289;

external NSURLProtectionSpaceHTTP : NSString;

external NSURLProtectionSpaceHTTPS : NSString;

external NSURLProtectionSpaceFTP : NSString;

external NSURLProtectionSpaceHTTPProxy : NSString;

external NSURLProtectionSpaceHTTPSProxy : NSString;

external NSURLProtectionSpaceFTPProxy : NSString;

external NSURLProtectionSpaceSOCKSProxy : NSString;

external NSURLAuthenticationMethodDefault : NSString;

external NSURLAuthenticationMethodHTTPBasic : NSString;

external NSURLAuthenticationMethodHTTPDigest : NSString;

external NSURLAuthenticationMethodHTMLForm : NSString;

external NSURLAuthenticationMethodNTLM : NSString;

external NSURLAuthenticationMethodNegotiate : NSString;

external NSURLAuthenticationMethodClientCertificate : NSString;

external NSURLAuthenticationMethodServerTrust : NSString;

alias NSURLRequestUseProtocolCachePolicy = 0;
alias NSURLRequestReloadIgnoringLocalCacheData = 1;
alias NSURLRequestReloadIgnoringLocalAndRemoteCacheData = 4;
alias NSURLRequestReloadIgnoringCacheData = 1;
alias NSURLRequestReturnCacheDataElseLoad = 2;
alias NSURLRequestReturnCacheDataDontLoad = 3;
alias NSURLRequestReloadRevalidatingCacheData = 5;

alias NSURLRequestCachePolicy = CULong;

external NSXMLParserErrorDomain : NSString;

alias NSXMLParserInternalError = 1;
alias NSXMLParserOutOfMemoryError = 2;
alias NSXMLParserDocumentStartError = 3;
alias NSXMLParserEmptyDocumentError = 4;
alias NSXMLParserPrematureDocumentEndError = 5;
alias NSXMLParserInvalidHexCharacterRefError = 6;
alias NSXMLParserInvalidDecimalCharacterRefError = 7;
alias NSXMLParserInvalidCharacterRefError = 8;
alias NSXMLParserInvalidCharacterError = 9;
alias NSXMLParserCharacterRefAtEOFError = 10;
alias NSXMLParserCharacterRefInPrologError = 11;
alias NSXMLParserCharacterRefInEpilogError = 12;
alias NSXMLParserCharacterRefInDTDError = 13;
alias NSXMLParserEntityRefAtEOFError = 14;
alias NSXMLParserEntityRefInPrologError = 15;
alias NSXMLParserEntityRefInEpilogError = 16;
alias NSXMLParserEntityRefInDTDError = 17;
alias NSXMLParserParsedEntityRefAtEOFError = 18;
alias NSXMLParserParsedEntityRefInPrologError = 19;
alias NSXMLParserParsedEntityRefInEpilogError = 20;
alias NSXMLParserParsedEntityRefInInternalSubsetError = 21;
alias NSXMLParserEntityReferenceWithoutNameError = 22;
alias NSXMLParserEntityReferenceMissingSemiError = 23;
alias NSXMLParserParsedEntityRefNoNameError = 24;
alias NSXMLParserParsedEntityRefMissingSemiError = 25;
alias NSXMLParserUndeclaredEntityError = 26;
alias NSXMLParserUnparsedEntityError = 28;
alias NSXMLParserEntityIsExternalError = 29;
alias NSXMLParserEntityIsParameterError = 30;
alias NSXMLParserUnknownEncodingError = 31;
alias NSXMLParserEncodingNotSupportedError = 32;
alias NSXMLParserStringNotStartedError = 33;
alias NSXMLParserStringNotClosedError = 34;
alias NSXMLParserNamespaceDeclarationError = 35;
alias NSXMLParserEntityNotStartedError = 36;
alias NSXMLParserEntityNotFinishedError = 37;
alias NSXMLParserLessThanSymbolInAttributeError = 38;
alias NSXMLParserAttributeNotStartedError = 39;
alias NSXMLParserAttributeNotFinishedError = 40;
alias NSXMLParserAttributeHasNoValueError = 41;
alias NSXMLParserAttributeRedefinedError = 42;
alias NSXMLParserLiteralNotStartedError = 43;
alias NSXMLParserLiteralNotFinishedError = 44;
alias NSXMLParserCommentNotFinishedError = 45;
alias NSXMLParserProcessingInstructionNotStartedError = 46;
alias NSXMLParserProcessingInstructionNotFinishedError = 47;
alias NSXMLParserNotationNotStartedError = 48;
alias NSXMLParserNotationNotFinishedError = 49;
alias NSXMLParserAttributeListNotStartedError = 50;
alias NSXMLParserAttributeListNotFinishedError = 51;
alias NSXMLParserMixedContentDeclNotStartedError = 52;
alias NSXMLParserMixedContentDeclNotFinishedError = 53;
alias NSXMLParserElementContentDeclNotStartedError = 54;
alias NSXMLParserElementContentDeclNotFinishedError = 55;
alias NSXMLParserXMLDeclNotStartedError = 56;
alias NSXMLParserXMLDeclNotFinishedError = 57;
alias NSXMLParserConditionalSectionNotStartedError = 58;
alias NSXMLParserConditionalSectionNotFinishedError = 59;
alias NSXMLParserExternalSubsetNotFinishedError = 60;
alias NSXMLParserDOCTYPEDeclNotFinishedError = 61;
alias NSXMLParserMisplacedCDATAEndStringError = 62;
alias NSXMLParserCDATANotFinishedError = 63;
alias NSXMLParserMisplacedXMLDeclarationError = 64;
alias NSXMLParserSpaceRequiredError = 65;
alias NSXMLParserSeparatorRequiredError = 66;
alias NSXMLParserNMTOKENRequiredError = 67;
alias NSXMLParserNAMERequiredError = 68;
alias NSXMLParserPCDATARequiredError = 69;
alias NSXMLParserURIRequiredError = 70;
alias NSXMLParserPublicIdentifierRequiredError = 71;
alias NSXMLParserLTRequiredError = 72;
alias NSXMLParserGTRequiredError = 73;
alias NSXMLParserLTSlashRequiredError = 74;
alias NSXMLParserEqualExpectedError = 75;
alias NSXMLParserTagNameMismatchError = 76;
alias NSXMLParserUnfinishedTagError = 77;
alias NSXMLParserStandaloneValueError = 78;
alias NSXMLParserInvalidEncodingNameError = 79;
alias NSXMLParserCommentContainsDoubleHyphenError = 80;
alias NSXMLParserInvalidEncodingError = 81;
alias NSXMLParserExternalStandaloneEntityError = 82;
alias NSXMLParserInvalidConditionalSectionError = 83;
alias NSXMLParserEntityValueRequiredError = 84;
alias NSXMLParserNotWellBalancedError = 85;
alias NSXMLParserExtraContentError = 86;
alias NSXMLParserInvalidCharacterInEntityError = 87;
alias NSXMLParserParsedEntityRefInInternalError = 88;
alias NSXMLParserEntityRefLoopError = 89;
alias NSXMLParserEntityBoundaryError = 90;
alias NSXMLParserInvalidURIError = 91;
alias NSXMLParserURIFragmentError = 92;
alias NSXMLParserNoDTDError = 94;
alias NSXMLParserDelegateAbortedParseError = 512;

alias NSXMLParserError = CLong;

external NSInconsistentArchiveException : NSString;

external NSConnectionReplyMode : NSString;

external NSConnectionDidDieNotification : NSString;

external NSFailedAuthenticationException : NSString;

external NSConnectionDidInitializeNotification : NSString;

external NSLocalNotificationCenterType : NSString;

alias NSNotificationSuspensionBehaviorDrop = 1;
alias NSNotificationSuspensionBehaviorCoalesce = 2;
alias NSNotificationSuspensionBehaviorHold = 3;
alias NSNotificationSuspensionBehaviorDeliverImmediately = 4;

alias NSNotificationSuspensionBehavior = CULong;

alias NSTaskTerminationReasonExit = 1;
alias NSTaskTerminationReasonUncaughtSignal = 2;

alias NSTaskTerminationReason = CLong;

external NSTaskDidTerminateNotification : NSString;

alias NSXMLNodeOptionsNone = 0;
alias NSXMLNodeIsCDATA = 1;
alias NSXMLNodeExpandEmptyElement = 2;
alias NSXMLNodeCompactEmptyElement = 4;
alias NSXMLNodeUseSingleQuotes = 8;
alias NSXMLNodeUseDoubleQuotes = 16;
alias NSXMLDocumentTidyHTML = 512;
alias NSXMLDocumentTidyXML = 1024;
alias NSXMLDocumentValidate = 8192;
alias NSXMLDocumentXInclude = 65536;
alias NSXMLNodePrettyPrint = 131072;
alias NSXMLDocumentIncludeContentTypeDeclaration = 262144;
alias NSXMLNodePreserveNamespaceOrder = 1048576;
alias NSXMLNodePreserveAttributeOrder = 2097152;
alias NSXMLNodePreserveEntities = 4194304;
alias NSXMLNodePreservePrefixes = 8388608;
alias NSXMLNodePreserveCDATA = 16777216;
alias NSXMLNodePreserveWhitespace = 33554432;
alias NSXMLNodePreserveDTD = 67108864;
alias NSXMLNodePreserveCharacterReferences = 134217728;
alias NSXMLNodePreserveEmptyElements = 6;
alias NSXMLNodePreserveQuotes = 24;
alias NSXMLNodePreserveAll = 4293918750;

alias NSXMLInvalidKind = 0;
alias NSXMLDocumentKind = 1;
alias NSXMLElementKind = 2;
alias NSXMLAttributeKind = 3;
alias NSXMLNamespaceKind = 4;
alias NSXMLProcessingInstructionKind = 5;
alias NSXMLCommentKind = 6;
alias NSXMLTextKind = 7;
alias NSXMLDTDKind = 8;
alias NSXMLEntityDeclarationKind = 9;
alias NSXMLAttributeDeclarationKind = 10;
alias NSXMLElementDeclarationKind = 11;
alias NSXMLNotationDeclarationKind = 12;

alias NSXMLNodeKind = CULong;

alias NSXMLEntityGeneralKind = 1;
alias NSXMLEntityParsedKind = 2;
alias NSXMLEntityUnparsedKind = 3;
alias NSXMLEntityParameterKind = 4;
alias NSXMLEntityPredefined = 5;
alias NSXMLAttributeCDATAKind = 6;
alias NSXMLAttributeIDKind = 7;
alias NSXMLAttributeIDRefKind = 8;
alias NSXMLAttributeIDRefsKind = 9;
alias NSXMLAttributeEntityKind = 10;
alias NSXMLAttributeEntitiesKind = 11;
alias NSXMLAttributeNMTokenKind = 12;
alias NSXMLAttributeNMTokensKind = 13;
alias NSXMLAttributeEnumerationKind = 14;
alias NSXMLAttributeNotationKind = 15;
alias NSXMLElementDeclarationUndefinedKind = 16;
alias NSXMLElementDeclarationEmptyKind = 17;
alias NSXMLElementDeclarationAnyKind = 18;
alias NSXMLElementDeclarationMixedKind = 19;
alias NSXMLElementDeclarationElementKind = 20;

alias NSXMLDTDNodeKind = CULong;

alias NSXMLDocumentXMLKind = 0;
alias NSXMLDocumentXHTMLKind = 1;
alias NSXMLDocumentHTMLKind = 2;
alias NSXMLDocumentTextKind = 3;

alias NSXMLDocumentContentKind = CULong;

record UnnamedStruct115 (
    m11 : Double,
    m12 : Double,
    m21 : Double,
    m22 : Double,
    tX : Double,
    tY : Double,
);

alias NSAffineTransformStruct = UnnamedStruct115;

alias NSAppleEventManagerSuspensionID = OpaquePointer;

external NSAppleEventTimeOutDefault : Double;

external NSAppleEventTimeOutNone : Double;

external NSAppleEventManagerWillProcessFirstEventNotification : NSString;

external NSAppleScriptErrorMessage : NSString;

external NSAppleScriptErrorNumber : NSString;

external NSAppleScriptErrorAppName : NSString;

external NSAppleScriptErrorBriefMessage : NSString;

external NSAppleScriptErrorRange : NSString;

external NSClassDescriptionNeededForClassNotification : NSString;

alias NSCaseInsensitivePredicateOption = 1;
alias NSDiacriticInsensitivePredicateOption = 2;

alias NSDirectPredicateModifier = 0;
alias NSAllPredicateModifier = 1;
alias NSAnyPredicateModifier = 2;

alias NSComparisonPredicateModifier = CULong;

alias NSLessThanPredicateOperatorType = 0;
alias NSLessThanOrEqualToPredicateOperatorType = 1;
alias NSGreaterThanPredicateOperatorType = 2;
alias NSGreaterThanOrEqualToPredicateOperatorType = 3;
alias NSEqualToPredicateOperatorType = 4;
alias NSNotEqualToPredicateOperatorType = 5;
alias NSMatchesPredicateOperatorType = 6;
alias NSLikePredicateOperatorType = 7;
alias NSBeginsWithPredicateOperatorType = 8;
alias NSEndsWithPredicateOperatorType = 9;
alias NSInPredicateOperatorType = 10;
alias NSCustomSelectorPredicateOperatorType = 11;
alias NSContainsPredicateOperatorType = 99;
alias NSBetweenPredicateOperatorType = 100;

alias NSPredicateOperatorType = CULong;

alias NSNotPredicateType = 0;
alias NSAndPredicateType = 1;
alias NSOrPredicateType = 2;

alias NSCompoundPredicateType = CULong;

alias NSConstantValueExpressionType = 0;
alias NSEvaluatedObjectExpressionType = 1;
alias NSVariableExpressionType = 2;
alias NSKeyPathExpressionType = 3;
alias NSFunctionExpressionType = 4;
alias NSUnionSetExpressionType = 5;
alias NSIntersectSetExpressionType = 6;
alias NSMinusSetExpressionType = 7;
alias NSSubqueryExpressionType = 13;
alias NSAggregateExpressionType = 14;
alias NSBlockExpressionType = 19;

alias NSExpressionType = CULong;

external NSFileTypeForHFSTypeCode(
    hfsFileTypeCode : UInt) NSString;

external NSHFSTypeCodeFromFileType(
    fileTypeString : NSString) UInt;

external NSHFSTypeOfFile(
    fullFilePath : NSString) NSString;

alias NSPointerFunctionsStrongMemory = 0;
alias NSPointerFunctionsZeroingWeakMemory = 1;
alias NSPointerFunctionsOpaqueMemory = 2;
alias NSPointerFunctionsMallocMemory = 3;
alias NSPointerFunctionsMachVirtualMemory = 4;
alias NSPointerFunctionsObjectPersonality = 0;
alias NSPointerFunctionsOpaquePersonality = 256;
alias NSPointerFunctionsObjectPointerPersonality = 512;
alias NSPointerFunctionsCStringPersonality = 768;
alias NSPointerFunctionsStructPersonality = 1024;
alias NSPointerFunctionsIntegerPersonality = 1280;
alias NSPointerFunctionsCopyIn = 65536;

alias NSPointerFunctionsOptions = CULong;

alias NSHashTableStrongMemory = 0;
alias NSHashTableZeroingWeakMemory = 1;
alias NSHashTableCopyIn = 65536;
alias NSHashTableObjectPointerPersonality = 512;

alias NSHashTableOptions = CULong;

record UnnamedStruct119 (
    _pi : CULong,
    _si : CULong,
    _bs : RawPointer,
);

alias NSHashEnumerator = UnnamedStruct119;

external NSFreeHashTable(
    table : NSHashTable);

external NSResetHashTable(
    table : NSHashTable);

external NSCompareHashTables(
    table1 : NSHashTable,
    table2 : NSHashTable) Bool;

external NSCopyHashTableWithZone(
    table : NSHashTable,
    zone : Pointer[NSZone]) NSHashTable;

external NSHashGet(
    table : NSHashTable,
    pointer : RawPointer) RawPointer;

external NSHashInsert(
    table : NSHashTable,
    pointer : RawPointer);

external NSHashInsertKnownAbsent(
    table : NSHashTable,
    pointer : RawPointer);

external NSHashInsertIfAbsent(
    table : NSHashTable,
    pointer : RawPointer) RawPointer;

external NSHashRemove(
    table : NSHashTable,
    pointer : RawPointer);

external NSEnumerateHashTable(
    table : NSHashTable) NSHashEnumerator;

external NSNextHashEnumeratorItem(
    enumerator : Pointer[NSHashEnumerator]) RawPointer;

external NSEndHashTableEnumeration(
    enumerator : Pointer[NSHashEnumerator]);

external NSCountHashTable(
    table : NSHashTable) CULong;

external NSStringFromHashTable(
    table : NSHashTable) NSString;

external NSAllHashTableObjects(
    table : NSHashTable) NSArray;

record UnnamedStruct120 (
    hash : CCodePointer[(NSHashTable,RawPointer),(CULong)],
    isEqual : CCodePointer[(NSHashTable,RawPointer,RawPointer),(CChar)],
    retain : CCodePointer[(NSHashTable,RawPointer),()],
    release : CCodePointer[(NSHashTable,RawPointer),()],
    describe : CCodePointer[(NSHashTable,RawPointer),(NSString)],
);

alias NSHashTableCallBacks = UnnamedStruct120;

external NSCreateHashTableWithZone(
    callBacks : NSHashTableCallBacks,
    capacity : CULong,
    zone : Pointer[NSZone]) NSHashTable;

external NSCreateHashTable(
    callBacks : NSHashTableCallBacks,
    capacity : CULong) NSHashTable;

external NSIntegerHashCallBacks : NSHashTableCallBacks;

external NSNonOwnedPointerHashCallBacks : NSHashTableCallBacks;

external NSNonRetainedObjectHashCallBacks : NSHashTableCallBacks;

external NSObjectHashCallBacks : NSHashTableCallBacks;

external NSOwnedObjectIdentityHashCallBacks : NSHashTableCallBacks;

external NSOwnedPointerHashCallBacks : NSHashTableCallBacks;

external NSPointerToStructHashCallBacks : NSHashTableCallBacks;

external NSIntHashCallBacks : NSHashTableCallBacks;

alias NSMapTableStrongMemory = 0;
alias NSMapTableZeroingWeakMemory = 1;
alias NSMapTableCopyIn = 65536;
alias NSMapTableObjectPointerPersonality = 512;

alias NSMapTableOptions = CULong;

record UnnamedStruct121 (
    _pi : CULong,
    _si : CULong,
    _bs : RawPointer,
);

alias NSMapEnumerator = UnnamedStruct121;

external NSFreeMapTable(
    table : NSMapTable);

external NSResetMapTable(
    table : NSMapTable);

external NSCompareMapTables(
    table1 : NSMapTable,
    table2 : NSMapTable) Bool;

external NSCopyMapTableWithZone(
    table : NSMapTable,
    zone : Pointer[NSZone]) NSMapTable;

external NSMapMember(
    table : NSMapTable,
    key : RawPointer,
    originalKey : Pointer[RawPointer],
    value : Pointer[RawPointer]) Bool;

external NSMapGet(
    table : NSMapTable,
    key : RawPointer) RawPointer;

external NSMapInsert(
    table : NSMapTable,
    key : RawPointer,
    value : RawPointer);

external NSMapInsertKnownAbsent(
    table : NSMapTable,
    key : RawPointer,
    value : RawPointer);

external NSMapInsertIfAbsent(
    table : NSMapTable,
    key : RawPointer,
    value : RawPointer) RawPointer;

external NSMapRemove(
    table : NSMapTable,
    key : RawPointer);

external NSEnumerateMapTable(
    table : NSMapTable) NSMapEnumerator;

external NSNextMapEnumeratorPair(
    enumerator : Pointer[NSMapEnumerator],
    key : Pointer[RawPointer],
    value : Pointer[RawPointer]) Bool;

external NSEndMapTableEnumeration(
    enumerator : Pointer[NSMapEnumerator]);

external NSCountMapTable(
    table : NSMapTable) CULong;

external NSStringFromMapTable(
    table : NSMapTable) NSString;

external NSAllMapTableKeys(
    table : NSMapTable) NSArray;

external NSAllMapTableValues(
    table : NSMapTable) NSArray;

record UnnamedStruct122 (
    hash : CCodePointer[(NSMapTable,RawPointer),(CULong)],
    isEqual : CCodePointer[(NSMapTable,RawPointer,RawPointer),(CChar)],
    retain : CCodePointer[(NSMapTable,RawPointer),()],
    release : CCodePointer[(NSMapTable,RawPointer),()],
    describe : CCodePointer[(NSMapTable,RawPointer),(NSString)],
    notAKeyMarker : RawPointer,
);

alias NSMapTableKeyCallBacks = UnnamedStruct122;

record UnnamedStruct123 (
    retain : CCodePointer[(NSMapTable,RawPointer),()],
    release : CCodePointer[(NSMapTable,RawPointer),()],
    describe : CCodePointer[(NSMapTable,RawPointer),(NSString)],
);

alias NSMapTableValueCallBacks = UnnamedStruct123;

external NSCreateMapTableWithZone(
    keyCallBacks : NSMapTableKeyCallBacks,
    valueCallBacks : NSMapTableValueCallBacks,
    capacity : CULong,
    zone : Pointer[NSZone]) NSMapTable;

external NSCreateMapTable(
    keyCallBacks : NSMapTableKeyCallBacks,
    valueCallBacks : NSMapTableValueCallBacks,
    capacity : CULong) NSMapTable;

external NSIntegerMapKeyCallBacks : NSMapTableKeyCallBacks;

external NSNonOwnedPointerMapKeyCallBacks : NSMapTableKeyCallBacks;

external NSNonOwnedPointerOrNullMapKeyCallBacks : NSMapTableKeyCallBacks;

external NSNonRetainedObjectMapKeyCallBacks : NSMapTableKeyCallBacks;

external NSObjectMapKeyCallBacks : NSMapTableKeyCallBacks;

external NSOwnedPointerMapKeyCallBacks : NSMapTableKeyCallBacks;

external NSIntMapKeyCallBacks : NSMapTableKeyCallBacks;

external NSIntegerMapValueCallBacks : NSMapTableValueCallBacks;

external NSNonOwnedPointerMapValueCallBacks : NSMapTableValueCallBacks;

external NSObjectMapValueCallBacks : NSMapTableValueCallBacks;

external NSNonRetainedObjectMapValueCallBacks : NSMapTableValueCallBacks;

external NSOwnedPointerMapValueCallBacks : NSMapTableValueCallBacks;

external NSIntMapValueCallBacks : NSMapTableValueCallBacks;

external NSMetadataQueryDidStartGatheringNotification : NSString;

external NSMetadataQueryGatheringProgressNotification : NSString;

external NSMetadataQueryDidFinishGatheringNotification : NSString;

external NSMetadataQueryDidUpdateNotification : NSString;

external NSMetadataQueryResultContentRelevanceAttribute : NSString;

external NSMetadataQueryUserHomeScope : NSString;

external NSMetadataQueryLocalComputerScope : NSString;

external NSMetadataQueryNetworkScope : NSString;

alias NSNoScriptError = 0;
alias NSReceiverEvaluationScriptError = 1;
alias NSKeySpecifierEvaluationScriptError = 2;
alias NSArgumentEvaluationScriptError = 3;
alias NSReceiversCantHandleCommandScriptError = 4;
alias NSRequiredArgumentsMissingScriptError = 5;
alias NSArgumentsWrongScriptError = 6;
alias NSUnknownKeyScriptError = 7;
alias NSInternalScriptError = 8;
alias NSOperationNotSupportedForKeyScriptError = 9;
alias NSCannotCreateScriptCommandError = 10;

external NSOperationNotSupportedForKeyException : NSString;

alias NSNoSpecifierError = 0;
alias NSNoTopLevelContainersSpecifierError = 1;
alias NSContainerSpecifierError = 2;
alias NSUnknownKeySpecifierError = 3;
alias NSInvalidIndexSpecifierError = 4;
alias NSInternalSpecifierError = 5;
alias NSOperationNotSupportedForKeySpecifierError = 6;

alias NSPositionAfter = 0;
alias NSPositionBefore = 1;
alias NSPositionBeginning = 2;
alias NSPositionEnd = 3;
alias NSPositionReplace = 4;

alias NSInsertionPosition = CULong;

alias NSRelativeAfter = 0;
alias NSRelativeBefore = 1;

alias NSRelativePosition = CULong;

alias NSIndexSubelement = 0;
alias NSEverySubelement = 1;
alias NSMiddleSubelement = 2;
alias NSRandomSubelement = 3;
alias NSNoSubelement = 4;

alias NSWhoseSubelementIdentifier = CULong;

alias NSSaveOptionsYes = 0;
alias NSSaveOptionsNo = 1;
alias NSSaveOptionsAsk = 2;

alias NSSaveOptions = CULong;

alias NSEqualToComparison = 0;
alias NSLessThanOrEqualToComparison = 1;
alias NSLessThanComparison = 2;
alias NSGreaterThanOrEqualToComparison = 3;
alias NSGreaterThanComparison = 4;
alias NSBeginsWithComparison = 5;
alias NSEndsWithComparison = 6;
alias NSContainsComparison = 7;

alias NSTestComparisonOperation = CULong;

alias NSTextCheckingTypeOrthography = 1;
alias NSTextCheckingTypeSpelling = 2;
alias NSTextCheckingTypeGrammar = 4;
alias NSTextCheckingTypeDate = 8;
alias NSTextCheckingTypeAddress = 16;
alias NSTextCheckingTypeLink = 32;
alias NSTextCheckingTypeQuote = 64;
alias NSTextCheckingTypeDash = 128;
alias NSTextCheckingTypeReplacement = 256;
alias NSTextCheckingTypeCorrection = 512;

alias NSTextCheckingType = UInt64;

alias NSTextCheckingAllSystemTypes = 4294967295;
alias NSTextCheckingAllCustomTypes = 18446744069414584320;
alias NSTextCheckingAllTypes = 18446744073709551615;

alias NSTextCheckingTypes = UInt64;

external NSTextCheckingNameKey : NSString;

external NSTextCheckingJobTitleKey : NSString;

external NSTextCheckingOrganizationKey : NSString;

external NSTextCheckingStreetKey : NSString;

external NSTextCheckingCityKey : NSString;

external NSTextCheckingStateKey : NSString;

external NSTextCheckingZIPKey : NSString;

external NSTextCheckingCountryKey : NSString;

external NSTextCheckingPhoneKey : NSString;

alias NSUndoCloseGroupingRunLoopOrdering = 350000;

external NSUndoManagerCheckpointNotification : NSString;

external NSUndoManagerWillUndoChangeNotification : NSString;

external NSUndoManagerWillRedoChangeNotification : NSString;

external NSUndoManagerDidUndoChangeNotification : NSString;

external NSUndoManagerDidRedoChangeNotification : NSString;

external NSUndoManagerDidOpenUndoGroupNotification : NSString;

external NSUndoManagerWillCloseUndoGroupNotification : NSString;

external NSNegateBooleanTransformerName : NSString;

external NSIsNilTransformerName : NSString;

external NSIsNotNilTransformerName : NSString;

external NSUnarchiveFromDataTransformerName : NSString;

external NSKeyedUnarchiveFromDataTransformerName : NSString;
