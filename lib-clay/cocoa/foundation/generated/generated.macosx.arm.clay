// Automatically generated by clay-bindgen
// language: objective-c

import cocoa.objc.*;

import core.libc.*;
import cocoa.corefoundation.*;
import cocoa.applicationservices.*;

private alias OpaquePointer = RawPointer;
private alias UnknownType = Int;
private alias AUnionType = Int;


overload selector("AMSymbol") = NSString;
overload selector("HTTPBody") = NSData;
overload selector("HTTPBodyStream") = NSInputStream;
overload selector("HTTPMethod") = NSString;
overload selector("HTTPShouldHandleCookies") = Bool;
overload selector("HTTPShouldUsePipelining") = Bool;
overload selector("ISOCountryCodes") = NSArray;
overload selector("ISOCurrencyCodes") = NSArray;
overload selector("ISOLanguageCodes") = NSArray;
overload selector("MIMEType") = NSString;
overload selector("PMSymbol") = NSString;
overload selector("TXTRecordData") = NSData;
overload selector("URL") = NSURL;
overload selector("URLByAppendingPathComponent:") = NSURL, NSString;
overload selector("URLByAppendingPathExtension:") = NSURL, NSString;
overload selector("URLByDeletingLastPathComponent") = NSURL;
overload selector("URLByDeletingPathExtension") = NSURL;
overload selector("URLByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:") = Id, NSData, UInt, NSURL, Pointer[Bool], Pointer[NSError];
overload selector("URLByResolvingSymlinksInPath") = NSURL;
overload selector("URLByStandardizingPath") = NSURL;
overload selector("URLForAuxiliaryExecutable:") = NSURL, NSString;
overload selector("URLForDirectory:inDomain:appropriateForURL:create:error:") = NSURL, UInt, UInt, NSURL, Bool, Pointer[NSError];
overload selector("URLForKey:") = NSURL, NSString;
overload selector("URLForResource:withExtension:") = NSURL, NSString, NSString;
overload selector("URLForResource:withExtension:subdirectory:") = NSURL, NSString, NSString, NSString;
overload selector("URLForResource:withExtension:subdirectory:inBundleWithURL:") = NSURL, NSString, NSString, NSString, NSURL;
overload selector("URLForResource:withExtension:subdirectory:localization:") = NSURL, NSString, NSString, NSString, NSString;
overload selector("URLProtocol:cachedResponseIsValid:") = Void, NSURLProtocol, NSCachedURLResponse;
overload selector("URLProtocol:didCancelAuthenticationChallenge:") = Void, NSURLProtocol, NSURLAuthenticationChallenge;
overload selector("URLProtocol:didFailWithError:") = Void, NSURLProtocol, NSError;
overload selector("URLProtocol:didLoadData:") = Void, NSURLProtocol, NSData;
overload selector("URLProtocol:didReceiveAuthenticationChallenge:") = Void, NSURLProtocol, NSURLAuthenticationChallenge;
overload selector("URLProtocol:didReceiveResponse:cacheStoragePolicy:") = Void, NSURLProtocol, NSURLResponse, UInt;
overload selector("URLProtocol:wasRedirectedToRequest:redirectResponse:") = Void, NSURLProtocol, NSURLRequest, NSURLResponse;
overload selector("URLProtocolDidFinishLoading:") = Void, NSURLProtocol;
overload selector("URLWithString:") = Id, NSString;
overload selector("URLWithString:relativeToURL:") = Id, NSString, NSURL;
overload selector("URLsForDirectory:inDomains:") = NSArray, UInt, UInt;
overload selector("URLsForResourcesWithExtension:subdirectory:") = NSArray, NSString, NSString;
overload selector("URLsForResourcesWithExtension:subdirectory:inBundleWithURL:") = NSArray, NSString, NSString, NSURL;
overload selector("URLsForResourcesWithExtension:subdirectory:localization:") = NSArray, NSString, NSString, NSString;
overload selector("UTF8String") = Pointer[CChar];
overload selector("abbreviation") = NSString;
overload selector("abbreviationDictionary") = NSDictionary;
overload selector("abbreviationForDate:") = NSString, NSDate;
overload selector("abortParsing") = Void;
overload selector("absoluteString") = NSString;
overload selector("absoluteURL") = NSURL;
overload selector("acceptConnectionInBackgroundAndNotify") = Void;
overload selector("acceptConnectionInBackgroundAndNotifyForModes:") = Void, NSArray;
overload selector("acceptInputForMode:beforeDate:") = Void, NSString, NSDate;
overload selector("accessInstanceVariablesDirectly") = Bool;
overload selector("activeProcessorCount") = UInt;
overload selector("addAttribute:value:range:") = Void, NSString, Id, NSRange;
overload selector("addAttributes:range:") = Void, NSDictionary, NSRange;
overload selector("addCharactersInRange:") = Void, NSRange;
overload selector("addCharactersInString:") = Void, NSString;
overload selector("addDependency:") = Void, NSOperation;
overload selector("addEntriesFromDictionary:") = Void, NSDictionary;
overload selector("addExecutionBlock:") = Void, UnknownType;
overload selector("addFileWithPath:") = NSString, NSString;
overload selector("addFileWrapper:") = NSString, NSFileWrapper;
overload selector("addIndex:") = Void, UInt;
overload selector("addIndexes:") = Void, NSIndexSet;
overload selector("addIndexesInRange:") = Void, NSRange;
overload selector("addObject:") = Void, Id;
overload selector("addObjectsFromArray:") = Void, NSArray;
overload selector("addObserver:forKeyPath:options:context:") = Void, NSObject, NSString, UInt, RawPointer;
overload selector("addObserver:selector:name:object:") = Void, Id, SelectorHandle, NSString, Id;
overload selector("addObserver:toObjectsAtIndexes:forKeyPath:options:context:") = Void, NSObject, NSIndexSet, NSString, UInt, RawPointer;
overload selector("addObserverForName:object:queue:usingBlock:") = Id, NSString, Id, NSOperationQueue, UnknownType;
overload selector("addOperation:") = Void, NSOperation;
overload selector("addOperationWithBlock:") = Void, UnknownType;
overload selector("addOperations:waitUntilFinished:") = Void, NSArray, Bool;
overload selector("addPort:forMode:") = Void, NSPort, NSString;
overload selector("addRegularFileWithContents:preferredFilename:") = NSString, NSData, NSString;
overload selector("addSuiteNamed:") = Void, NSString;
overload selector("addSymbolicLinkWithDestination:preferredFilename:") = NSString, NSString, NSString;
overload selector("addTimeInterval:") = Id, Double;
overload selector("addTimer:forMode:") = Void, NSTimer, NSString;
overload selector("addValue:forHTTPHeaderField:") = Void, NSString, NSString;
overload selector("addressCheckingResultWithRange:components:") = NSTextCheckingResult, NSRange, NSDictionary;
overload selector("addressComponents") = NSDictionary;
overload selector("addresses") = NSArray;
overload selector("allBundles") = NSArray;
overload selector("allCredentials") = NSDictionary;
overload selector("allFrameworks") = NSArray;
overload selector("allHTTPHeaderFields") = NSDictionary;
overload selector("allHeaderFields") = NSDictionary;
overload selector("allKeys") = NSArray;
overload selector("allKeysForObject:") = NSArray, Id;
overload selector("allLanguages") = NSArray;
overload selector("allObjects") = NSArray;
overload selector("allScripts") = NSArray;
overload selector("allValues") = NSArray;
overload selector("alloc") = Id;
overload selector("allocWithZone:") = Id, Pointer[NSZone];
overload selector("allowsFloats") = Bool;
overload selector("allowsKeyedCoding") = Bool;
overload selector("allowsReverseTransformation") = Bool;
overload selector("alphanumericCharacterSet") = Id;
overload selector("alwaysShowsDecimalSeparator") = Bool;
overload selector("andPredicateWithSubpredicates:") = NSPredicate, NSArray;
overload selector("anyObject") = Id;
overload selector("appendAttributedString:") = Void, NSAttributedString;
overload selector("appendBytes:length:") = Void, RawPointer, UInt;
overload selector("appendData:") = Void, NSData;
overload varargSelector("appendFormat:") = Void, NSString;
overload selector("appendString:") = Void, NSString;
overload selector("archiveRootObject:toFile:") = Bool, Id, NSString;
overload selector("archivedDataWithRootObject:") = NSData, Id;
overload selector("archiver:didEncodeObject:") = Void, NSKeyedArchiver, Id;
overload selector("archiver:willEncodeObject:") = Id, NSKeyedArchiver, Id;
overload selector("archiver:willReplaceObject:withObject:") = Void, NSKeyedArchiver, Id, Id;
overload selector("archiverDidFinish:") = Void, NSKeyedArchiver;
overload selector("archiverWillFinish:") = Void, NSKeyedArchiver;
overload selector("arguments") = NSArray;
overload selector("argumentsRetained") = Bool;
overload selector("array") = Id;
overload selector("arrayByAddingObject:") = NSArray, Id;
overload selector("arrayByAddingObjectsFromArray:") = NSArray, NSArray;
overload selector("arrayForKey:") = NSArray, NSString;
overload selector("arrayWithArray:") = Id, NSArray;
overload selector("arrayWithCapacity:") = Id, UInt;
overload selector("arrayWithContentsOfFile:") = Id, NSString;
overload selector("arrayWithContentsOfURL:") = Id, NSURL;
overload selector("arrayWithObject:") = Id, Id;
overload varargSelector("arrayWithObjects:") = Id, Id;
overload selector("arrayWithObjects:count:") = Id, Pointer[Id], UInt;
overload selector("ascending") = Bool;
overload selector("attemptRecoveryFromError:optionIndex:") = Bool, NSError, UInt;
overload selector("attemptRecoveryFromError:optionIndex:delegate:didRecoverSelector:contextInfo:") = Void, NSError, UInt, Id, SelectorHandle, RawPointer;
overload selector("attribute:atIndex:effectiveRange:") = Id, NSString, UInt, NSRangePointer;
overload selector("attribute:atIndex:longestEffectiveRange:inRange:") = Id, NSString, UInt, NSRangePointer, NSRange;
overload selector("attributedStringForObjectValue:withDefaultAttributes:") = NSAttributedString, Id, NSDictionary;
overload selector("attributedSubstringFromRange:") = NSAttributedString, NSRange;
overload selector("attributesAtIndex:effectiveRange:") = NSDictionary, UInt, NSRangePointer;
overload selector("attributesAtIndex:longestEffectiveRange:inRange:") = NSDictionary, UInt, NSRangePointer, NSRange;
overload selector("attributesOfFileSystemForPath:error:") = NSDictionary, NSString, Pointer[NSError];
overload selector("attributesOfItemAtPath:error:") = NSDictionary, NSString, Pointer[NSError];
overload selector("authenticationMethod") = NSString;
overload selector("autoContentAccessingProxy") = Id;
overload selector("automaticallyNotifiesObserversForKey:") = Bool, NSString;
overload selector("autorelease") = Id;
overload selector("autoupdatingCurrentCalendar") = Id;
overload selector("autoupdatingCurrentLocale") = Id;
overload selector("availableData") = NSData;
overload selector("availableLocaleIdentifiers") = NSArray;
overload selector("availableStringEncodings") = Pointer[UInt];
overload selector("awakeAfterUsingCoder:") = Id, NSCoder;
overload selector("baseURL") = NSURL;
overload selector("beginContentAccess") = Bool;
overload selector("beginEditing") = Void;
overload selector("beginUndoGrouping") = Void;
overload selector("bitmapRepresentation") = NSData;
overload selector("blockOperationWithBlock:") = Id, UnknownType;
overload selector("bookmarkDataWithContentsOfURL:error:") = NSData, NSURL, Pointer[NSError];
overload selector("bookmarkDataWithOptions:includingResourceValuesForKeys:relativeToURL:error:") = NSData, UInt, NSArray, NSURL, Pointer[NSError];
overload selector("boolForKey:") = Bool, NSString;
overload selector("boolValue") = Bool;
overload selector("broadcast") = Void;
overload selector("builtInPlugInsPath") = NSString;
overload selector("builtInPlugInsURL") = NSURL;
overload selector("bundleForClass:") = NSBundle, Id;
overload selector("bundleIdentifier") = NSString;
overload selector("bundlePath") = NSString;
overload selector("bundleURL") = NSURL;
overload selector("bundleWithIdentifier:") = NSBundle, NSString;
overload selector("bundleWithPath:") = NSBundle, NSString;
overload selector("bundleWithURL:") = NSBundle, NSURL;
overload selector("bytes") = RawPointer;
overload selector("cString") = Pointer[CChar];
overload selector("cStringLength") = UInt;
overload selector("cStringUsingEncoding:") = Pointer[CChar], UInt;
overload selector("cache:willEvictObject:") = Void, NSCache, Id;
overload selector("cachePolicy") = UInt;
overload selector("cachedResponse") = NSCachedURLResponse;
overload selector("cachedResponseForRequest:") = NSCachedURLResponse, NSURLRequest;
overload selector("calendar") = NSCalendar;
overload selector("calendarIdentifier") = NSString;
overload selector("callStackReturnAddresses") = NSArray;
overload selector("callStackSymbols") = NSArray;
overload selector("canBeConvertedToEncoding:") = Bool, UInt;
overload selector("canHandleRequest:") = Bool, NSURLRequest;
overload selector("canInitWithRequest:") = Bool, NSURLRequest;
overload selector("canRedo") = Bool;
overload selector("canUndo") = Bool;
overload selector("cancel") = Void;
overload selector("cancelAllOperations") = Void;
overload selector("cancelAuthenticationChallenge:") = Void, NSURLAuthenticationChallenge;
overload selector("cancelPerformSelector:target:argument:") = Void, SelectorHandle, Id, Id;
overload selector("cancelPerformSelectorsWithTarget:") = Void, Id;
overload selector("cancelPreviousPerformRequestsWithTarget:") = Void, Id;
overload selector("cancelPreviousPerformRequestsWithTarget:selector:object:") = Void, Id, SelectorHandle, Id;
overload selector("canonicalLanguageIdentifierFromString:") = NSString, NSString;
overload selector("canonicalLocaleIdentifierFromString:") = NSString, NSString;
overload selector("canonicalRequestForRequest:") = NSURLRequest, NSURLRequest;
overload selector("capitalizedLetterCharacterSet") = Id;
overload selector("capitalizedString") = NSString;
overload selector("caseInsensitiveCompare:") = Int, NSString;
overload selector("caseSensitive") = Bool;
overload selector("certificates") = NSArray;
overload selector("changeCurrentDirectoryPath:") = Bool, NSString;
overload selector("changeFileAttributes:atPath:") = Bool, NSDictionary, NSString;
overload selector("charValue") = CChar;
overload selector("characterAtIndex:") = UShort, UInt;
overload selector("characterDirectionForLanguage:") = UInt, NSString;
overload selector("characterIsMember:") = Bool, UShort;
overload selector("characterSetWithBitmapRepresentation:") = Id, NSData;
overload selector("characterSetWithCharactersInString:") = Id, NSString;
overload selector("characterSetWithContentsOfFile:") = Id, NSString;
overload selector("characterSetWithRange:") = Id, NSRange;
overload selector("charactersToBeSkipped") = NSCharacterSet;
overload selector("checkResourceIsReachableAndReturnError:") = Bool, Pointer[NSError];
overload selector("checkingTypes") = UInt64;
overload selector("class") = Id;
overload selector("classFallbacksForKeyedArchiver") = NSArray;
overload selector("classForClassName:") = Id, NSString;
overload selector("classForCoder") = Id;
overload selector("classForKeyedArchiver") = Id;
overload selector("classForKeyedUnarchiver") = Id;
overload selector("classNameForClass:") = NSString, Id;
overload selector("classNamed:") = Id, NSString;
overload selector("client") = Id;
overload selector("close") = Void;
overload selector("closeFile") = Void;
overload selector("code") = Int;
overload selector("collection") = Id;
overload selector("columnNumber") = Int;
overload selector("comment") = NSString;
overload selector("commentURL") = NSURL;
overload selector("commonISOCurrencyCodes") = NSArray;
overload selector("commonPrefixWithString:options:") = NSString, NSString, UInt;
overload selector("comparator") = NSComparator;
overload selector("compare:") = Int, NSNumber;
overload selector("compare:options:") = Int, NSString, UInt;
overload selector("compare:options:range:") = Int, NSString, UInt, NSRange;
overload selector("compare:options:range:locale:") = Int, NSString, UInt, NSRange, Id;
overload selector("compareObject:toObject:") = Int, Id, Id;
overload selector("comparisonPredicateModifier") = UInt;
overload selector("completePathIntoString:caseSensitive:matchesIntoArray:filterTypes:") = UInt, Pointer[NSString], Bool, Pointer[NSArray], NSArray;
overload selector("completionBlock") = UnknownType;
overload selector("components") = NSDictionary;
overload selector("components:fromDate:") = NSDateComponents, UInt, NSDate;
overload selector("components:fromDate:toDate:options:") = NSDateComponents, UInt, NSDate, NSDate, UInt;
overload selector("componentsFromLocaleIdentifier:") = NSDictionary, NSString;
overload selector("componentsJoinedByString:") = NSString, NSString;
overload selector("componentsSeparatedByCharactersInSet:") = NSArray, NSCharacterSet;
overload selector("componentsSeparatedByString:") = NSArray, NSString;
overload selector("componentsToDisplayForPath:") = NSArray, NSString;
overload selector("compoundPredicateType") = UInt;
overload selector("condition") = Int;
overload selector("conformsToProtocol:") = Bool, Id;
overload selector("connection:canAuthenticateAgainstProtectionSpace:") = Bool, NSURLConnection, NSURLProtectionSpace;
overload selector("connection:didCancelAuthenticationChallenge:") = Void, NSURLConnection, NSURLAuthenticationChallenge;
overload selector("connection:didFailWithError:") = Void, NSURLConnection, NSError;
overload selector("connection:didReceiveAuthenticationChallenge:") = Void, NSURLConnection, NSURLAuthenticationChallenge;
overload selector("connection:didReceiveData:") = Void, NSURLConnection, NSData;
overload selector("connection:didReceiveResponse:") = Void, NSURLConnection, NSURLResponse;
overload selector("connection:didSendBodyData:totalBytesWritten:totalBytesExpectedToWrite:") = Void, NSURLConnection, Int, Int, Int;
overload selector("connection:needNewBodyStream:") = NSInputStream, NSURLConnection, NSURLRequest;
overload selector("connection:willCacheResponse:") = NSCachedURLResponse, NSURLConnection, NSCachedURLResponse;
overload selector("connection:willSendRequest:redirectResponse:") = NSURLRequest, NSURLConnection, NSURLRequest, NSURLResponse;
overload selector("connectionDidFinishLoading:") = Void, NSURLConnection;
overload selector("connectionShouldUseCredentialStorage:") = Bool, NSURLConnection;
overload selector("connectionWithRequest:delegate:") = NSURLConnection, NSURLRequest, Id;
overload selector("constantValue") = Id;
overload selector("containsIndex:") = Bool, UInt;
overload selector("containsIndexes:") = Bool, NSIndexSet;
overload selector("containsIndexesInRange:") = Bool, NSRange;
overload selector("containsObject:") = Bool, Id;
overload selector("containsValueForKey:") = Bool, NSString;
overload selector("contentsAtPath:") = NSData, NSString;
overload selector("contentsEqualAtPath:andPath:") = Bool, NSString, NSString;
overload selector("contentsOfDirectoryAtPath:error:") = NSArray, NSString, Pointer[NSError];
overload selector("contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:") = NSArray, NSURL, NSArray, UInt, Pointer[NSError];
overload selector("continueWithoutCredentialForAuthenticationChallenge:") = Void, NSURLAuthenticationChallenge;
overload selector("controlCharacterSet") = Id;
overload selector("cookieAcceptPolicy") = UInt;
overload selector("cookieWithProperties:") = Id, NSDictionary;
overload selector("cookies") = NSArray;
overload selector("cookiesForURL:") = NSArray, NSURL;
overload selector("cookiesWithResponseHeaderFields:forURL:") = NSArray, NSDictionary, NSURL;
overload selector("copy") = Id;
overload selector("copyItemAtPath:toPath:error:") = Bool, NSString, NSString, Pointer[NSError];
overload selector("copyItemAtURL:toURL:error:") = Bool, NSURL, NSURL, Pointer[NSError];
overload selector("copyWithZone:") = Id, Pointer[NSZone];
overload selector("correctionCheckingResultWithRange:replacementString:") = NSTextCheckingResult, NSRange, NSString;
overload selector("count") = UInt;
overload selector("countByEnumeratingWithState:objects:count:") = UInt, Pointer[NSFastEnumerationState], Pointer[Id], UInt;
overload selector("countForObject:") = UInt, Id;
overload selector("countLimit") = UInt;
overload selector("countOfIndexesInRange:") = UInt, NSRange;
overload selector("createDirectoryAtPath:attributes:") = Bool, NSString, NSDictionary;
overload selector("createDirectoryAtPath:withIntermediateDirectories:attributes:error:") = Bool, NSString, Bool, NSDictionary, Pointer[NSError];
overload selector("createFileAtPath:contents:attributes:") = Bool, NSString, NSData, NSDictionary;
overload selector("createSymbolicLinkAtPath:pathContent:") = Bool, NSString, NSString;
overload selector("createSymbolicLinkAtPath:withDestinationPath:error:") = Bool, NSString, NSString, Pointer[NSError];
overload selector("credentialForTrust:") = NSURLCredential, SecTrustRef;
overload selector("credentialWithIdentity:certificates:persistence:") = NSURLCredential, SecIdentityRef, NSArray, UInt;
overload selector("credentialWithUser:password:persistence:") = NSURLCredential, NSString, NSString, UInt;
overload selector("credentialsForProtectionSpace:") = NSDictionary, NSURLProtectionSpace;
overload selector("currencyCode") = NSString;
overload selector("currencyDecimalSeparator") = NSString;
overload selector("currencyGroupingSeparator") = NSString;
overload selector("currencySymbol") = NSString;
overload selector("currentCalendar") = Id;
overload selector("currentDirectoryPath") = NSString;
overload selector("currentDiskUsage") = UInt;
overload selector("currentHandler") = NSAssertionHandler;
overload selector("currentLocale") = Id;
overload selector("currentMemoryUsage") = UInt;
overload selector("currentMode") = NSString;
overload selector("currentQueue") = Id;
overload selector("currentRunLoop") = NSRunLoop;
overload selector("currentThread") = NSThread;
overload selector("customSelector") = SelectorHandle;
overload selector("dashCheckingResultWithRange:replacementString:") = NSTextCheckingResult, NSRange, NSString;
overload selector("data") = Id;
overload selector("dataDetectorWithTypes:error:") = NSDataDetector, UInt64, Pointer[NSError];
overload selector("dataForKey:") = NSData, NSString;
overload selector("dataFromPropertyList:format:errorDescription:") = NSData, Id, UInt, Pointer[NSString];
overload selector("dataFromTXTRecordDictionary:") = NSData, NSDictionary;
overload selector("dataUsingEncoding:") = NSData, UInt;
overload selector("dataUsingEncoding:allowLossyConversion:") = NSData, UInt, Bool;
overload selector("dataWithBytes:length:") = Id, RawPointer, UInt;
overload selector("dataWithBytesNoCopy:length:") = Id, RawPointer, UInt;
overload selector("dataWithBytesNoCopy:length:freeWhenDone:") = Id, RawPointer, UInt, Bool;
overload selector("dataWithCapacity:") = Id, UInt;
overload selector("dataWithContentsOfFile:") = Id, NSString;
overload selector("dataWithContentsOfFile:options:error:") = Id, NSString, UInt, Pointer[NSError];
overload selector("dataWithContentsOfMappedFile:") = Id, NSString;
overload selector("dataWithContentsOfURL:") = Id, NSURL;
overload selector("dataWithContentsOfURL:options:error:") = Id, NSURL, UInt, Pointer[NSError];
overload selector("dataWithData:") = Id, NSData;
overload selector("dataWithLength:") = Id, UInt;
overload selector("dataWithPropertyList:format:options:error:") = NSData, Id, UInt, UInt, Pointer[NSError];
overload selector("date") = Id;
overload selector("dateByAddingComponents:toDate:options:") = NSDate, NSDateComponents, NSDate, UInt;
overload selector("dateByAddingTimeInterval:") = Id, Double;
overload selector("dateCheckingResultWithRange:date:") = NSTextCheckingResult, NSRange, NSDate;
overload selector("dateCheckingResultWithRange:date:timeZone:duration:") = NSTextCheckingResult, NSRange, NSDate, NSTimeZone, Double;
overload selector("dateFormat") = NSString;
overload selector("dateFormatFromTemplate:options:locale:") = NSString, NSString, UInt, NSLocale;
overload selector("dateFromComponents:") = NSDate, NSDateComponents;
overload selector("dateFromString:") = NSDate, NSString;
overload selector("dateStyle") = UInt;
overload selector("dateWithTimeInterval:sinceDate:") = Id, Double, NSDate;
overload selector("dateWithTimeIntervalSince1970:") = Id, Double;
overload selector("dateWithTimeIntervalSinceNow:") = Id, Double;
overload selector("dateWithTimeIntervalSinceReferenceDate:") = Id, Double;
overload selector("day") = Int;
overload selector("daylightSavingTimeOffset") = Double;
overload selector("daylightSavingTimeOffsetForDate:") = Double, NSDate;
overload selector("dealloc") = Void;
overload selector("decimalDigitCharacterSet") = Id;
overload selector("decimalNumberByAdding:") = NSDecimalNumber, NSDecimalNumber;
overload selector("decimalNumberByAdding:withBehavior:") = NSDecimalNumber, NSDecimalNumber, Id;
overload selector("decimalNumberByDividingBy:") = NSDecimalNumber, NSDecimalNumber;
overload selector("decimalNumberByDividingBy:withBehavior:") = NSDecimalNumber, NSDecimalNumber, Id;
overload selector("decimalNumberByMultiplyingBy:") = NSDecimalNumber, NSDecimalNumber;
overload selector("decimalNumberByMultiplyingBy:withBehavior:") = NSDecimalNumber, NSDecimalNumber, Id;
overload selector("decimalNumberByMultiplyingByPowerOf10:") = NSDecimalNumber, Short;
overload selector("decimalNumberByMultiplyingByPowerOf10:withBehavior:") = NSDecimalNumber, Short, Id;
overload selector("decimalNumberByRaisingToPower:") = NSDecimalNumber, UInt;
overload selector("decimalNumberByRaisingToPower:withBehavior:") = NSDecimalNumber, UInt, Id;
overload selector("decimalNumberByRoundingAccordingToBehavior:") = NSDecimalNumber, Id;
overload selector("decimalNumberBySubtracting:") = NSDecimalNumber, NSDecimalNumber;
overload selector("decimalNumberBySubtracting:withBehavior:") = NSDecimalNumber, NSDecimalNumber, Id;
overload selector("decimalNumberHandlerWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:") = Id, UInt, Short, Bool, Bool, Bool, Bool;
overload selector("decimalNumberWithDecimal:") = NSDecimalNumber, NSDecimal;
overload selector("decimalNumberWithMantissa:exponent:isNegative:") = NSDecimalNumber, UInt64, Short, Bool;
overload selector("decimalNumberWithString:") = NSDecimalNumber, NSString;
overload selector("decimalNumberWithString:locale:") = NSDecimalNumber, NSString, Id;
overload selector("decimalSeparator") = NSString;
overload selector("decimalValue") = NSDecimal;
overload selector("decodeArrayOfObjCType:count:at:") = Void, Pointer[CChar], UInt, RawPointer;
overload selector("decodeBoolForKey:") = Bool, NSString;
overload selector("decodeBytesForKey:returnedLength:") = Pointer[CUChar], NSString, Pointer[UInt];
overload selector("decodeBytesWithReturnedLength:") = RawPointer, Pointer[UInt];
overload selector("decodeDataObject") = NSData;
overload selector("decodeDoubleForKey:") = Double, NSString;
overload selector("decodeFloatForKey:") = Float, NSString;
overload selector("decodeInt32ForKey:") = Int, NSString;
overload selector("decodeInt64ForKey:") = Int64, NSString;
overload selector("decodeIntForKey:") = Int, NSString;
overload selector("decodeIntegerForKey:") = Int, NSString;
overload selector("decodeObject") = Id;
overload selector("decodeObjectForKey:") = Id, NSString;
overload selector("decodeValueOfObjCType:at:") = Void, Pointer[CChar], RawPointer;
overload varargSelector("decodeValuesOfObjCTypes:") = Void, Pointer[CChar];
overload selector("decomposableCharacterSet") = Id;
overload selector("decomposedStringWithCanonicalMapping") = NSString;
overload selector("decomposedStringWithCompatibilityMapping") = NSString;
overload selector("defaultBehavior") = Id;
overload selector("defaultCStringEncoding") = UInt;
overload selector("defaultCenter") = Id;
overload selector("defaultCredentialForProtectionSpace:") = NSURLCredential, NSURLProtectionSpace;
overload selector("defaultDate") = NSDate;
overload selector("defaultDecimalNumberHandler") = Id;
overload selector("defaultFormatterBehavior") = UInt;
overload selector("defaultManager") = NSFileManager;
overload selector("defaultQueue") = Id;
overload selector("defaultTimeZone") = NSTimeZone;
overload selector("delegate") = Id;
overload selector("deleteCharactersInRange:") = Void, NSRange;
overload selector("deleteCookie:") = Void, NSHTTPCookie;
overload selector("dependencies") = NSArray;
overload selector("dequeueNotificationsMatching:coalesceMask:") = Void, NSNotification, UInt;
overload selector("description") = NSString;
overload selector("descriptionInStringsFileFormat") = NSString;
overload selector("descriptionWithLocale:") = NSString, Id;
overload selector("descriptionWithLocale:indent:") = NSString, Id, UInt;
overload selector("destinationOfSymbolicLinkAtPath:error:") = NSString, NSString, Pointer[NSError];
overload selector("detachNewThreadSelector:toTarget:withObject:") = Void, SelectorHandle, Id, Id;
overload selector("developmentLocalization") = NSString;
overload selector("dictionary") = Id;
overload selector("dictionaryForKey:") = NSDictionary, NSString;
overload selector("dictionaryFromTXTRecordData:") = NSDictionary, NSData;
overload selector("dictionaryRepresentation") = NSDictionary;
overload selector("dictionaryWithCapacity:") = Id, UInt;
overload selector("dictionaryWithContentsOfFile:") = Id, NSString;
overload selector("dictionaryWithContentsOfURL:") = Id, NSURL;
overload selector("dictionaryWithDictionary:") = Id, NSDictionary;
overload selector("dictionaryWithObject:forKey:") = Id, Id, Id;
overload selector("dictionaryWithObjects:forKeys:") = Id, NSArray, NSArray;
overload selector("dictionaryWithObjects:forKeys:count:") = Id, Pointer[Id], Pointer[Id], UInt;
overload varargSelector("dictionaryWithObjectsAndKeys:") = Id, Id;
overload selector("dictionaryWithValuesForKeys:") = NSDictionary, NSArray;
overload selector("didChange:valuesAtIndexes:forKey:") = Void, UInt, NSIndexSet, NSString;
overload selector("didChangeValueForKey:") = Void, NSString;
overload selector("didChangeValueForKey:withSetMutation:usingObjects:") = Void, NSString, UInt, NSSet;
overload selector("directoryAttributes") = NSDictionary;
overload selector("directoryContentsAtPath:") = NSArray, NSString;
overload selector("disableUndoRegistration") = Void;
overload selector("discardContentIfPossible") = Void;
overload selector("diskCapacity") = UInt;
overload selector("displayNameAtPath:") = NSString, NSString;
overload selector("displayNameForKey:value:") = NSString, Id, Id;
overload selector("distantFuture") = Id;
overload selector("distantPast") = Id;
overload selector("distinguishedNames") = NSArray;
overload selector("doesNotRecognizeSelector:") = Void, SelectorHandle;
overload selector("doesRelativeDateFormatting") = Bool;
overload selector("domain") = NSString;
overload selector("dominantLanguage") = NSString;
overload selector("dominantLanguageForScript:") = NSString, NSString;
overload selector("dominantScript") = NSString;
overload selector("doubleForKey:") = Double, NSString;
overload selector("doubleValue") = Double;
overload selector("drain") = Void;
overload selector("duration") = Double;
overload selector("earlierDate:") = NSDate, NSDate;
overload selector("editingStringForObjectValue:") = NSString, Id;
overload selector("enableUndoRegistration") = Void;
overload selector("encodeArrayOfObjCType:count:at:") = Void, Pointer[CChar], UInt, RawPointer;
overload selector("encodeBool:forKey:") = Void, Bool, NSString;
overload selector("encodeBycopyObject:") = Void, Id;
overload selector("encodeByrefObject:") = Void, Id;
overload selector("encodeBytes:length:") = Void, RawPointer, UInt;
overload selector("encodeBytes:length:forKey:") = Void, Pointer[CUChar], UInt, NSString;
overload selector("encodeConditionalObject:") = Void, Id;
overload selector("encodeConditionalObject:forKey:") = Void, Id, NSString;
overload selector("encodeDataObject:") = Void, NSData;
overload selector("encodeDouble:forKey:") = Void, Double, NSString;
overload selector("encodeFloat:forKey:") = Void, Float, NSString;
overload selector("encodeInt32:forKey:") = Void, Int, NSString;
overload selector("encodeInt64:forKey:") = Void, Int64, NSString;
overload selector("encodeInt:forKey:") = Void, Int, NSString;
overload selector("encodeInteger:forKey:") = Void, Int, NSString;
overload selector("encodeObject:") = Void, Id;
overload selector("encodeObject:forKey:") = Void, Id, NSString;
overload selector("encodeRootObject:") = Void, Id;
overload selector("encodeValueOfObjCType:at:") = Void, Pointer[CChar], RawPointer;
overload varargSelector("encodeValuesOfObjCTypes:") = Void, Pointer[CChar];
overload selector("encodeWithCoder:") = Void, NSCoder;
overload selector("endContentAccess") = Void;
overload selector("endEditing") = Void;
overload selector("endUndoGrouping") = Void;
overload selector("enqueueNotification:postingStyle:") = Void, NSNotification, UInt;
overload selector("enqueueNotification:postingStyle:coalesceMask:forModes:") = Void, NSNotification, UInt, UInt, NSArray;
overload selector("enumerateAttribute:inRange:options:usingBlock:") = Void, NSString, NSRange, UInt, UnknownType;
overload selector("enumerateAttributesInRange:options:usingBlock:") = Void, NSRange, UInt, UnknownType;
overload selector("enumerateIndexesInRange:options:usingBlock:") = Void, NSRange, UInt, UnknownType;
overload selector("enumerateIndexesUsingBlock:") = Void, UnknownType;
overload selector("enumerateIndexesWithOptions:usingBlock:") = Void, UInt, UnknownType;
overload selector("enumerateKeysAndObjectsUsingBlock:") = Void, UnknownType;
overload selector("enumerateKeysAndObjectsWithOptions:usingBlock:") = Void, UInt, UnknownType;
overload selector("enumerateLinesUsingBlock:") = Void, UnknownType;
overload selector("enumerateMatchesInString:options:range:usingBlock:") = Void, NSString, UInt, NSRange, UnknownType;
overload selector("enumerateObjectsAtIndexes:options:usingBlock:") = Void, NSIndexSet, UInt, UnknownType;
overload selector("enumerateObjectsUsingBlock:") = Void, UnknownType;
overload selector("enumerateObjectsWithOptions:usingBlock:") = Void, UInt, UnknownType;
overload selector("enumerateSubstringsInRange:options:usingBlock:") = Void, NSRange, UInt, UnknownType;
overload selector("enumeratorAtPath:") = NSDirectoryEnumerator, NSString;
overload selector("enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:") = NSDirectoryEnumerator, NSURL, NSArray, UInt, UnknownType;
overload selector("environment") = NSDictionary;
overload selector("era") = Int;
overload selector("eraSymbols") = NSArray;
overload selector("error") = NSError;
overload selector("errorWithDomain:code:userInfo:") = Id, NSString, Int, NSDictionary;
overload selector("escapedPatternForString:") = NSString, NSString;
overload selector("escapedTemplateForString:") = NSString, NSString;
overload selector("evaluateWithObject:") = Bool, Id;
overload selector("evaluateWithObject:substitutionVariables:") = Bool, Id, NSDictionary;
overload selector("evictsObjectsWithDiscardedContent") = Bool;
overload selector("exceptionDuringOperation:error:leftOperand:rightOperand:") = NSDecimalNumber, SelectorHandle, UInt, NSDecimalNumber, NSDecimalNumber;
overload selector("exceptionWithName:reason:userInfo:") = NSException, NSString, NSString, NSDictionary;
overload selector("exchangeObjectAtIndex:withObjectAtIndex:") = Void, UInt, UInt;
overload selector("executableArchitectures") = NSArray;
overload selector("executablePath") = NSString;
overload selector("executableURL") = NSURL;
overload selector("executionBlocks") = NSArray;
overload selector("exit") = Void;
overload selector("expectedContentLength") = Int64;
overload selector("expiresDate") = NSDate;
overload selector("exponentSymbol") = NSString;
overload selector("expressionBlock") = UnknownType;
overload selector("expressionForAggregate:") = NSExpression, NSArray;
overload selector("expressionForBlock:arguments:") = NSExpression, UnknownType, NSArray;
overload selector("expressionForConstantValue:") = NSExpression, Id;
overload selector("expressionForEvaluatedObject") = NSExpression;
overload selector("expressionForFunction:arguments:") = NSExpression, NSString, NSArray;
overload selector("expressionForFunction:selectorName:arguments:") = NSExpression, NSExpression, NSString, NSArray;
overload selector("expressionForIntersectSet:with:") = NSExpression, NSExpression, NSExpression;
overload selector("expressionForKeyPath:") = NSExpression, NSString;
overload selector("expressionForMinusSet:with:") = NSExpression, NSExpression, NSExpression;
overload selector("expressionForSubquery:usingIteratorVariable:predicate:") = NSExpression, NSExpression, NSString, Id;
overload selector("expressionForUnionSet:with:") = NSExpression, NSExpression, NSExpression;
overload selector("expressionForVariable:") = NSExpression, NSString;
overload selector("expressionType") = UInt;
overload selector("expressionValueWithObject:context:") = Id, Id, NSMutableDictionary;
overload selector("failureResponse") = NSURLResponse;
overload selector("fastestEncoding") = UInt;
overload selector("fileAttributes") = NSDictionary;
overload selector("fileAttributesAtPath:traverseLink:") = NSDictionary, NSString, Bool;
overload selector("fileCreationDate") = NSDate;
overload selector("fileDescriptor") = Int;
overload selector("fileExistsAtPath:") = Bool, NSString;
overload selector("fileExistsAtPath:isDirectory:") = Bool, NSString, Pointer[Bool];
overload selector("fileExtensionHidden") = Bool;
overload selector("fileGroupOwnerAccountID") = NSNumber;
overload selector("fileGroupOwnerAccountName") = NSString;
overload selector("fileHFSCreatorCode") = CULong;
overload selector("fileHFSTypeCode") = CULong;
overload selector("fileHandleForReading") = NSFileHandle;
overload selector("fileHandleForReadingAtPath:") = Id, NSString;
overload selector("fileHandleForReadingFromURL:error:") = Id, NSURL, Pointer[NSError];
overload selector("fileHandleForUpdatingAtPath:") = Id, NSString;
overload selector("fileHandleForUpdatingURL:error:") = Id, NSURL, Pointer[NSError];
overload selector("fileHandleForWriting") = NSFileHandle;
overload selector("fileHandleForWritingAtPath:") = Id, NSString;
overload selector("fileHandleForWritingToURL:error:") = Id, NSURL, Pointer[NSError];
overload selector("fileHandleWithNullDevice") = Id;
overload selector("fileHandleWithStandardError") = Id;
overload selector("fileHandleWithStandardInput") = Id;
overload selector("fileHandleWithStandardOutput") = Id;
overload selector("fileIsAppendOnly") = Bool;
overload selector("fileIsImmutable") = Bool;
overload selector("fileManager:shouldCopyItemAtPath:toPath:") = Bool, NSFileManager, NSString, NSString;
overload selector("fileManager:shouldCopyItemAtURL:toURL:") = Bool, NSFileManager, NSURL, NSURL;
overload selector("fileManager:shouldLinkItemAtPath:toPath:") = Bool, NSFileManager, NSString, NSString;
overload selector("fileManager:shouldLinkItemAtURL:toURL:") = Bool, NSFileManager, NSURL, NSURL;
overload selector("fileManager:shouldMoveItemAtPath:toPath:") = Bool, NSFileManager, NSString, NSString;
overload selector("fileManager:shouldMoveItemAtURL:toURL:") = Bool, NSFileManager, NSURL, NSURL;
overload selector("fileManager:shouldProceedAfterError:") = Bool, NSFileManager, NSDictionary;
overload selector("fileManager:shouldProceedAfterError:copyingItemAtPath:toPath:") = Bool, NSFileManager, NSError, NSString, NSString;
overload selector("fileManager:shouldProceedAfterError:copyingItemAtURL:toURL:") = Bool, NSFileManager, NSError, NSURL, NSURL;
overload selector("fileManager:shouldProceedAfterError:linkingItemAtPath:toPath:") = Bool, NSFileManager, NSError, NSString, NSString;
overload selector("fileManager:shouldProceedAfterError:linkingItemAtURL:toURL:") = Bool, NSFileManager, NSError, NSURL, NSURL;
overload selector("fileManager:shouldProceedAfterError:movingItemAtPath:toPath:") = Bool, NSFileManager, NSError, NSString, NSString;
overload selector("fileManager:shouldProceedAfterError:movingItemAtURL:toURL:") = Bool, NSFileManager, NSError, NSURL, NSURL;
overload selector("fileManager:shouldProceedAfterError:removingItemAtPath:") = Bool, NSFileManager, NSError, NSString;
overload selector("fileManager:shouldProceedAfterError:removingItemAtURL:") = Bool, NSFileManager, NSError, NSURL;
overload selector("fileManager:shouldRemoveItemAtPath:") = Bool, NSFileManager, NSString;
overload selector("fileManager:shouldRemoveItemAtURL:") = Bool, NSFileManager, NSURL;
overload selector("fileManager:willProcessPath:") = Void, NSFileManager, NSString;
overload selector("fileModificationDate") = NSDate;
overload selector("fileOwnerAccountID") = NSNumber;
overload selector("fileOwnerAccountName") = NSString;
overload selector("filePathURL") = NSURL;
overload selector("filePosixPermissions") = UInt;
overload selector("fileReferenceURL") = NSURL;
overload selector("fileSize") = UInt64;
overload selector("fileSystemAttributesAtPath:") = NSDictionary, NSString;
overload selector("fileSystemFileNumber") = UInt;
overload selector("fileSystemNumber") = Int;
overload selector("fileSystemRepresentation") = Pointer[CChar];
overload selector("fileSystemRepresentationWithPath:") = Pointer[CChar], NSString;
overload selector("fileType") = NSString;
overload selector("fileURLWithPath:") = Id, NSString;
overload selector("fileURLWithPath:isDirectory:") = Id, NSString, Bool;
overload selector("fileURLWithPathComponents:") = NSURL, NSArray;
overload selector("fileWrappers") = NSDictionary;
overload selector("filename") = NSString;
overload selector("filterUsingPredicate:") = Void, NSPredicate;
overload selector("filteredArrayUsingPredicate:") = NSArray, NSPredicate;
overload selector("filteredSetUsingPredicate:") = NSSet, NSPredicate;
overload selector("finalize") = Void;
overload selector("finishDecoding") = Void;
overload selector("finishEncoding") = Void;
overload selector("fire") = Void;
overload selector("fireDate") = NSDate;
overload selector("firstIndex") = UInt;
overload selector("firstMatchInString:options:range:") = NSTextCheckingResult, NSString, UInt, NSRange;
overload selector("firstObjectCommonWithArray:") = Id, NSArray;
overload selector("firstWeekday") = UInt;
overload selector("floatForKey:") = Float, NSString;
overload selector("floatValue") = Float;
overload selector("formIntersectionWithCharacterSet:") = Void, NSCharacterSet;
overload selector("formUnionWithCharacterSet:") = Void, NSCharacterSet;
overload selector("formatWidth") = UInt;
overload selector("formatterBehavior") = UInt;
overload selector("forwardInvocation:") = Void, NSInvocation;
overload selector("forwardingTargetForSelector:") = Id, SelectorHandle;
overload selector("fragment") = NSString;
overload selector("frameLength") = UInt;
overload selector("function") = NSString;
overload selector("generatesCalendarDates") = Bool;
overload selector("generatesDecimalNumbers") = Bool;
overload selector("getArgument:atIndex:") = Void, RawPointer, Int;
overload selector("getArgumentTypeAtIndex:") = Pointer[CChar], UInt;
overload selector("getBuffer:length:") = Bool, Pointer[Pointer[CUChar]], Pointer[UInt];
overload selector("getBytes:") = Void, RawPointer;
overload selector("getBytes:length:") = Void, RawPointer, UInt;
overload selector("getBytes:maxLength:usedLength:encoding:options:range:remainingRange:") = Bool, RawPointer, UInt, Pointer[UInt], UInt, UInt, NSRange, NSRangePointer;
overload selector("getBytes:range:") = Void, RawPointer, NSRange;
overload selector("getCFRunLoop") = CFRunLoopRef;
overload selector("getCString:") = Void, Pointer[CChar];
overload selector("getCString:maxLength:") = Void, Pointer[CChar], UInt;
overload selector("getCString:maxLength:encoding:") = Bool, Pointer[CChar], UInt, UInt;
overload selector("getCString:maxLength:range:remainingRange:") = Void, Pointer[CChar], UInt, NSRange, NSRangePointer;
overload selector("getCharacters:") = Void, Pointer[UShort];
overload selector("getCharacters:range:") = Void, Pointer[UShort], NSRange;
overload selector("getFileSystemRepresentation:maxLength:") = Bool, Pointer[CChar], UInt;
overload selector("getIndexes:") = Void, Pointer[UInt];
overload selector("getIndexes:maxCount:inIndexRange:") = UInt, Pointer[UInt], UInt, NSRangePointer;
overload selector("getInputStream:outputStream:") = Bool, Pointer[NSInputStream], Pointer[NSOutputStream];
overload selector("getLineStart:end:contentsEnd:forRange:") = Void, Pointer[UInt], Pointer[UInt], Pointer[UInt], NSRange;
overload selector("getObjectValue:forString:errorDescription:") = Bool, Pointer[Id], NSString, Pointer[NSString];
overload selector("getObjectValue:forString:range:error:") = Bool, Pointer[Id], NSString, Pointer[NSRange], Pointer[NSError];
overload selector("getObjects:") = Void, Pointer[Id];
overload selector("getObjects:andKeys:") = Void, Pointer[Id], Pointer[Id];
overload selector("getObjects:range:") = Void, Pointer[Id], NSRange;
overload selector("getParagraphStart:end:contentsEnd:forRange:") = Void, Pointer[UInt], Pointer[UInt], Pointer[UInt], NSRange;
overload selector("getResourceValue:forKey:error:") = Bool, Pointer[Id], NSString, Pointer[NSError];
overload selector("getReturnValue:") = Void, RawPointer;
overload selector("getValue:") = Void, RawPointer;
overload selector("globallyUniqueString") = NSString;
overload selector("grammarCheckingResultWithRange:details:") = NSTextCheckingResult, NSRange, NSArray;
overload selector("grammarDetails") = NSArray;
overload selector("gregorianStartDate") = NSDate;
overload selector("groupingLevel") = Int;
overload selector("groupingSeparator") = NSString;
overload selector("groupingSize") = UInt;
overload selector("groupsByEvent") = Bool;
overload varargSelector("handleFailureInFunction:file:lineNumber:description:") = Void, NSString, NSString, Int, NSString;
overload varargSelector("handleFailureInMethod:object:file:lineNumber:description:") = Void, SelectorHandle, Id, NSString, Int, NSString;
overload selector("handleMachMessage:") = Void, RawPointer;
overload selector("handlePortMessage:") = Void, NSPortMessage;
overload selector("hasBytesAvailable") = Bool;
overload selector("hasMemberInPlane:") = Bool, CUChar;
overload selector("hasPassword") = Bool;
overload selector("hasPrefix:") = Bool, NSString;
overload selector("hasSpaceAvailable") = Bool;
overload selector("hasSuffix:") = Bool, NSString;
overload selector("hash") = UInt;
overload selector("helpAnchor") = NSString;
overload selector("host") = NSString;
overload selector("hostName") = NSString;
overload selector("hour") = Int;
overload selector("identity") = SecIdentityRef;
overload selector("illegalCharacterSet") = Id;
overload selector("increaseLengthBy:") = Void, UInt;
overload selector("indexAtPosition:") = UInt, UInt;
overload selector("indexGreaterThanIndex:") = UInt, UInt;
overload selector("indexGreaterThanOrEqualToIndex:") = UInt, UInt;
overload selector("indexInRange:options:passingTest:") = UInt, NSRange, UInt, UnknownType;
overload selector("indexLessThanIndex:") = UInt, UInt;
overload selector("indexLessThanOrEqualToIndex:") = UInt, UInt;
overload selector("indexOfObject:") = UInt, Id;
overload selector("indexOfObject:inRange:") = UInt, Id, NSRange;
overload selector("indexOfObject:inSortedRange:options:usingComparator:") = UInt, Id, NSRange, UInt, NSComparator;
overload selector("indexOfObjectAtIndexes:options:passingTest:") = UInt, NSIndexSet, UInt, UnknownType;
overload selector("indexOfObjectIdenticalTo:") = UInt, Id;
overload selector("indexOfObjectIdenticalTo:inRange:") = UInt, Id, NSRange;
overload selector("indexOfObjectPassingTest:") = UInt, UnknownType;
overload selector("indexOfObjectWithOptions:passingTest:") = UInt, UInt, UnknownType;
overload selector("indexPassingTest:") = UInt, UnknownType;
overload selector("indexPathByAddingIndex:") = NSIndexPath, UInt;
overload selector("indexPathByRemovingLastIndex") = NSIndexPath;
overload selector("indexPathWithIndex:") = Id, UInt;
overload selector("indexPathWithIndexes:length:") = Id, Pointer[UInt], UInt;
overload selector("indexSet") = Id;
overload selector("indexSetWithIndex:") = Id, UInt;
overload selector("indexSetWithIndexesInRange:") = Id, NSRange;
overload selector("indexWithOptions:passingTest:") = UInt, UInt, UnknownType;
overload selector("indexesInRange:options:passingTest:") = NSIndexSet, NSRange, UInt, UnknownType;
overload selector("indexesOfObjectsAtIndexes:options:passingTest:") = NSIndexSet, NSIndexSet, UInt, UnknownType;
overload selector("indexesOfObjectsPassingTest:") = NSIndexSet, UnknownType;
overload selector("indexesOfObjectsWithOptions:passingTest:") = NSIndexSet, UInt, UnknownType;
overload selector("indexesPassingTest:") = NSIndexSet, UnknownType;
overload selector("indexesWithOptions:passingTest:") = NSIndexSet, UInt, UnknownType;
overload selector("infoDictionary") = NSDictionary;
overload selector("init") = Id;
overload selector("initByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:") = Id, NSData, UInt, NSURL, Pointer[Bool], Pointer[NSError];
overload selector("initDirectoryWithFileWrappers:") = Id, NSDictionary;
overload selector("initFileURLWithPath:") = Id, NSString;
overload selector("initFileURLWithPath:isDirectory:") = Id, NSString, Bool;
overload selector("initForReadingWithData:") = Id, NSData;
overload selector("initForWritingWithMutableData:") = Id, NSMutableData;
overload selector("initRegularFileWithContents:") = Id, NSData;
overload selector("initSymbolicLinkWithDestination:") = Id, NSString;
overload selector("initSymbolicLinkWithDestinationURL:") = Id, NSURL;
overload selector("initToBuffer:capacity:") = Id, Pointer[CUChar], UInt;
overload selector("initToFileAtPath:append:") = Id, NSString, Bool;
overload selector("initToMemory") = Id;
overload selector("initWithArray:") = Id, NSArray;
overload selector("initWithArray:copyItems:") = Id, NSArray, Bool;
overload selector("initWithAttributedString:") = Id, NSAttributedString;
overload selector("initWithAuthenticationChallenge:sender:") = Id, NSURLAuthenticationChallenge, Id;
overload selector("initWithBool:") = Id, Bool;
overload selector("initWithBytes:length:") = Id, RawPointer, UInt;
overload selector("initWithBytes:length:encoding:") = Id, RawPointer, UInt, UInt;
overload selector("initWithBytes:objCType:") = Id, RawPointer, Pointer[CChar];
overload selector("initWithBytesNoCopy:length:") = Id, RawPointer, UInt;
overload selector("initWithBytesNoCopy:length:encoding:freeWhenDone:") = Id, RawPointer, UInt, UInt, Bool;
overload selector("initWithBytesNoCopy:length:freeWhenDone:") = Id, RawPointer, UInt, Bool;
overload selector("initWithCString:") = Id, Pointer[CChar];
overload selector("initWithCString:encoding:") = Id, Pointer[CChar], UInt;
overload selector("initWithCString:length:") = Id, Pointer[CChar], UInt;
overload selector("initWithCStringNoCopy:length:freeWhenDone:") = Id, Pointer[CChar], UInt, Bool;
overload selector("initWithCalendarIdentifier:") = Id, NSString;
overload selector("initWithCapacity:") = Id, UInt;
overload selector("initWithChar:") = Id, CChar;
overload selector("initWithCharacters:length:") = Id, Pointer[UShort], UInt;
overload selector("initWithCharactersNoCopy:length:freeWhenDone:") = Id, Pointer[UShort], UInt, Bool;
overload selector("initWithCoder:") = Id, NSCoder;
overload selector("initWithCondition:") = Id, Int;
overload selector("initWithContentsOfFile:") = Id, NSString;
overload selector("initWithContentsOfFile:encoding:error:") = Id, NSString, UInt, Pointer[NSError];
overload selector("initWithContentsOfFile:options:error:") = Id, NSString, UInt, Pointer[NSError];
overload selector("initWithContentsOfFile:usedEncoding:error:") = Id, NSString, Pointer[UInt], Pointer[NSError];
overload selector("initWithContentsOfMappedFile:") = Id, NSString;
overload selector("initWithContentsOfURL:") = Id, NSURL;
overload selector("initWithContentsOfURL:encoding:error:") = Id, NSURL, UInt, Pointer[NSError];
overload selector("initWithContentsOfURL:options:error:") = Id, NSURL, UInt, Pointer[NSError];
overload selector("initWithContentsOfURL:usedEncoding:error:") = Id, NSURL, Pointer[UInt], Pointer[NSError];
overload selector("initWithData:") = Id, NSData;
overload selector("initWithData:encoding:") = Id, NSData, UInt;
overload selector("initWithDecimal:") = Id, NSDecimal;
overload selector("initWithDictionary:") = Id, NSDictionary;
overload selector("initWithDictionary:copyItems:") = Id, NSDictionary, Bool;
overload selector("initWithDomain:code:userInfo:") = Id, NSString, Int, NSDictionary;
overload selector("initWithDomain:type:name:") = Id, NSString, NSString, NSString;
overload selector("initWithDomain:type:name:port:") = Id, NSString, NSString, NSString, Int;
overload selector("initWithDominantScript:languageMap:") = Id, NSString, NSDictionary;
overload selector("initWithDouble:") = Id, Double;
overload selector("initWithExpressionType:") = Id, UInt;
overload selector("initWithFileAtPath:") = Id, NSString;
overload selector("initWithFileDescriptor:") = Id, Int;
overload selector("initWithFileDescriptor:closeOnDealloc:") = Id, Int, Bool;
overload selector("initWithFireDate:interval:target:selector:userInfo:repeats:") = Id, NSDate, Double, Id, SelectorHandle, Id, Bool;
overload selector("initWithFloat:") = Id, Float;
overload varargSelector("initWithFormat:") = Id, NSString;
overload selector("initWithFormat:arguments:") = Id, NSString, va_list;
overload varargSelector("initWithFormat:locale:") = Id, NSString, Id;
overload selector("initWithFormat:locale:arguments:") = Id, NSString, Id, va_list;
overload selector("initWithHost:port:protocol:realm:authenticationMethod:") = Id, NSString, Int, NSString, NSString, NSString;
overload selector("initWithIdentity:certificates:persistence:") = Id, SecIdentityRef, NSArray, UInt;
overload selector("initWithIndex:") = Id, UInt;
overload selector("initWithIndexSet:") = Id, NSIndexSet;
overload selector("initWithIndexes:length:") = Id, Pointer[UInt], UInt;
overload selector("initWithIndexesInRange:") = Id, NSRange;
overload selector("initWithInt:") = Id, Int;
overload selector("initWithInteger:") = Id, Int;
overload selector("initWithInvocation:") = Id, NSInvocation;
overload selector("initWithKey:ascending:") = Id, NSString, Bool;
overload selector("initWithKey:ascending:comparator:") = Id, NSString, Bool, NSComparator;
overload selector("initWithKey:ascending:selector:") = Id, NSString, Bool, SelectorHandle;
overload selector("initWithLeftExpression:rightExpression:customSelector:") = Id, NSExpression, NSExpression, SelectorHandle;
overload selector("initWithLeftExpression:rightExpression:modifier:type:options:") = Id, NSExpression, NSExpression, UInt, UInt, UInt;
overload selector("initWithLength:") = Id, UInt;
overload selector("initWithLocaleIdentifier:") = Id, NSString;
overload selector("initWithLong:") = Id, CLong;
overload selector("initWithLongLong:") = Id, Int64;
overload selector("initWithMachPort:") = Id, UInt;
overload selector("initWithMachPort:options:") = Id, UInt, UInt;
overload selector("initWithMantissa:exponent:isNegative:") = Id, UInt64, Short, Bool;
overload selector("initWithMemoryCapacity:diskCapacity:diskPath:") = Id, UInt, UInt, NSString;
overload selector("initWithName:") = Id, NSString;
overload selector("initWithName:data:") = Id, NSString, NSData;
overload selector("initWithName:reason:userInfo:") = Id, NSString, NSString, NSDictionary;
overload selector("initWithNotificationCenter:") = Id, NSNotificationCenter;
overload varargSelector("initWithObjects:") = Id, Id;
overload selector("initWithObjects:count:") = Id, Pointer[Id], UInt;
overload selector("initWithObjects:forKeys:") = Id, NSArray, NSArray;
overload selector("initWithObjects:forKeys:count:") = Id, Pointer[Id], Pointer[Id], UInt;
overload varargSelector("initWithObjectsAndKeys:") = Id, Id;
overload selector("initWithPath:") = Id, NSString;
overload selector("initWithPattern:options:error:") = Id, NSString, UInt, Pointer[NSError];
overload selector("initWithProperties:") = Id, NSDictionary;
overload selector("initWithProtectionSpace:proposedCredential:previousFailureCount:failureResponse:error:sender:") = Id, NSURLProtectionSpace, NSURLCredential, Int, NSURLResponse, NSError, Id;
overload selector("initWithProxyHost:port:type:realm:authenticationMethod:") = Id, NSString, Int, NSString, NSString, NSString;
overload selector("initWithRequest:cachedResponse:client:") = Id, NSURLRequest, NSCachedURLResponse, Id;
overload selector("initWithRequest:delegate:") = Id, NSURLRequest, Id;
overload selector("initWithRequest:delegate:startImmediately:") = Id, NSURLRequest, Id, Bool;
overload selector("initWithResponse:data:") = Id, NSURLResponse, NSData;
overload selector("initWithResponse:data:userInfo:storagePolicy:") = Id, NSURLResponse, NSData, NSDictionary, UInt;
overload selector("initWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:") = Id, UInt, Short, Bool, Bool, Bool, Bool;
overload selector("initWithScheme:host:path:") = Id, NSString, NSString, NSString;
overload selector("initWithSerializedRepresentation:") = Id, NSData;
overload selector("initWithSet:") = Id, NSSet;
overload selector("initWithSet:copyItems:") = Id, NSSet, Bool;
overload selector("initWithShort:") = Id, Short;
overload selector("initWithStorageLocation:") = Id, NSURL;
overload selector("initWithString:") = Id, NSString;
overload selector("initWithString:attributes:") = Id, NSString, NSDictionary;
overload selector("initWithString:locale:") = Id, NSString, Id;
overload selector("initWithString:relativeToURL:") = Id, NSString, NSURL;
overload selector("initWithTarget:selector:object:") = Id, Id, SelectorHandle, Id;
overload selector("initWithTimeInterval:sinceDate:") = Id, Double, NSDate;
overload selector("initWithTimeIntervalSince1970:") = Id, Double;
overload selector("initWithTimeIntervalSinceNow:") = Id, Double;
overload selector("initWithTimeIntervalSinceReferenceDate:") = Id, Double;
overload selector("initWithTrust:") = Id, SecTrustRef;
overload selector("initWithType:subpredicates:") = Id, UInt, NSArray;
overload selector("initWithTypes:error:") = Id, UInt64, Pointer[NSError];
overload selector("initWithURL:") = Id, NSURL;
overload selector("initWithURL:MIMEType:expectedContentLength:textEncodingName:") = Id, NSURL, NSString, Int, NSString;
overload selector("initWithURL:append:") = Id, NSURL, Bool;
overload selector("initWithURL:cachePolicy:timeoutInterval:") = Id, NSURL, UInt, Double;
overload selector("initWithURL:options:error:") = Id, NSURL, UInt, Pointer[NSError];
overload selector("initWithUTF8String:") = Id, Pointer[CChar];
overload selector("initWithUnsignedChar:") = Id, CUChar;
overload selector("initWithUnsignedInt:") = Id, UInt;
overload selector("initWithUnsignedInteger:") = Id, UInt;
overload selector("initWithUnsignedLong:") = Id, CULong;
overload selector("initWithUnsignedLongLong:") = Id, UInt64;
overload selector("initWithUnsignedShort:") = Id, UShort;
overload selector("initWithUser:") = Id, NSString;
overload selector("initWithUser:password:persistence:") = Id, NSString, NSString, UInt;
overload selector("initialize") = Void;
overload selector("inputStreamWithData:") = Id, NSData;
overload selector("inputStreamWithFileAtPath:") = Id, NSString;
overload selector("inputStreamWithURL:") = Id, NSURL;
overload selector("insertAttributedString:atIndex:") = Void, NSAttributedString, UInt;
overload selector("insertObject:atIndex:") = Void, Id, UInt;
overload selector("insertObjects:atIndexes:") = Void, NSArray, NSIndexSet;
overload selector("insertString:atIndex:") = Void, NSString, UInt;
overload selector("instanceMethodForSelector:") = IMP, SelectorHandle;
overload selector("instanceMethodSignatureForSelector:") = NSMethodSignature, SelectorHandle;
overload selector("instancesRespondToSelector:") = Bool, SelectorHandle;
overload selector("intValue") = Int;
overload selector("integerForKey:") = Int, NSString;
overload selector("integerValue") = Int;
overload selector("internationalCurrencySymbol") = NSString;
overload selector("intersectSet:") = Void, NSSet;
overload selector("intersectsIndexesInRange:") = Bool, NSRange;
overload selector("intersectsSet:") = Bool, NSSet;
overload selector("invalidate") = Void;
overload selector("invert") = Void;
overload selector("invertedSet") = NSCharacterSet;
overload selector("invocation") = NSInvocation;
overload selector("invocationWithMethodSignature:") = NSInvocation, NSMethodSignature;
overload selector("invoke") = Void;
overload selector("invokeWithTarget:") = Void, Id;
overload selector("isAbsolutePath") = Bool;
overload selector("isAtEnd") = Bool;
overload selector("isCancelled") = Bool;
overload selector("isConcurrent") = Bool;
overload selector("isContentDiscarded") = Bool;
overload selector("isDaylightSavingTime") = Bool;
overload selector("isDaylightSavingTimeForDate:") = Bool, NSDate;
overload selector("isDeletableFileAtPath:") = Bool, NSString;
overload selector("isDirectory") = Bool;
overload selector("isEqual:") = Bool, Id;
overload selector("isEqualToArray:") = Bool, NSArray;
overload selector("isEqualToAttributedString:") = Bool, NSAttributedString;
overload selector("isEqualToData:") = Bool, NSData;
overload selector("isEqualToDate:") = Bool, NSDate;
overload selector("isEqualToDictionary:") = Bool, NSDictionary;
overload selector("isEqualToIndexSet:") = Bool, NSIndexSet;
overload selector("isEqualToNumber:") = Bool, NSNumber;
overload selector("isEqualToSet:") = Bool, NSSet;
overload selector("isEqualToString:") = Bool, NSString;
overload selector("isEqualToTimeZone:") = Bool, NSTimeZone;
overload selector("isEqualToValue:") = Bool, NSValue;
overload selector("isExecutableFileAtPath:") = Bool, NSString;
overload selector("isExecuting") = Bool;
overload selector("isFileReferenceURL") = Bool;
overload selector("isFileURL") = Bool;
overload selector("isFinished") = Bool;
overload selector("isHTTPOnly") = Bool;
overload selector("isKindOfClass:") = Bool, Id;
overload selector("isLenient") = Bool;
overload selector("isLoaded") = Bool;
overload selector("isMainThread") = Bool;
overload selector("isMemberOfClass:") = Bool, Id;
overload selector("isMultiThreaded") = Bool;
overload selector("isOneway") = Bool;
overload selector("isPartialStringValid:newEditingString:errorDescription:") = Bool, NSString, Pointer[NSString], Pointer[NSString];
overload selector("isPartialStringValid:proposedSelectedRange:originalString:originalSelectedRange:errorDescription:") = Bool, Pointer[NSString], NSRangePointer, NSString, NSRange, Pointer[NSString];
overload selector("isPartialStringValidationEnabled") = Bool;
overload selector("isProxy") = Bool;
overload selector("isReadableFileAtPath:") = Bool, NSString;
overload selector("isReady") = Bool;
overload selector("isRedoing") = Bool;
overload selector("isRegularFile") = Bool;
overload selector("isSecure") = Bool;
overload selector("isSessionOnly") = Bool;
overload selector("isSubclassOfClass:") = Bool, Id;
overload selector("isSubsetOfSet:") = Bool, NSSet;
overload selector("isSupersetOfSet:") = Bool, NSCharacterSet;
overload selector("isSuspended") = Bool;
overload selector("isSymbolicLink") = Bool;
overload selector("isUndoRegistrationEnabled") = Bool;
overload selector("isUndoing") = Bool;
overload selector("isValid") = Bool;
overload selector("isWritableFileAtPath:") = Bool, NSString;
overload selector("key") = NSString;
overload selector("keyEnumerator") = NSEnumerator;
overload selector("keyForFileWrapper:") = NSString, NSFileWrapper;
overload selector("keyPath") = NSString;
overload selector("keyPathsForValuesAffectingValueForKey:") = NSSet, NSString;
overload selector("keysOfEntriesPassingTest:") = NSSet, UnknownType;
overload selector("keysOfEntriesWithOptions:passingTest:") = NSSet, UInt, UnknownType;
overload selector("keysSortedByValueUsingComparator:") = NSArray, NSComparator;
overload selector("keysSortedByValueUsingSelector:") = NSArray, SelectorHandle;
overload selector("keysSortedByValueWithOptions:usingComparator:") = NSArray, UInt, NSComparator;
overload selector("knownTimeZoneNames") = NSArray;
overload selector("languageMap") = NSDictionary;
overload selector("languagesForScript:") = NSArray, NSString;
overload selector("lastIndex") = UInt;
overload selector("lastObject") = Id;
overload selector("lastPathComponent") = NSString;
overload selector("laterDate:") = NSDate, NSDate;
overload selector("leftExpression") = NSExpression;
overload selector("length") = UInt;
overload selector("lengthOfBytesUsingEncoding:") = UInt, UInt;
overload selector("letterCharacterSet") = Id;
overload selector("level") = UInt;
overload selector("levelsOfUndo") = UInt;
overload selector("limitDateForMode:") = NSDate, NSString;
overload selector("lineDirectionForLanguage:") = UInt, NSString;
overload selector("lineNumber") = Int;
overload selector("lineRangeForRange:") = NSRange, NSRange;
overload selector("linkCheckingResultWithRange:URL:") = NSTextCheckingResult, NSRange, NSURL;
overload selector("linkItemAtPath:toPath:error:") = Bool, NSString, NSString, Pointer[NSError];
overload selector("linkItemAtURL:toURL:error:") = Bool, NSURL, NSURL, Pointer[NSError];
overload selector("load") = Bool;
overload selector("loadAndReturnError:") = Bool, Pointer[NSError];
overload selector("localTimeZone") = NSTimeZone;
overload selector("locale") = Id;
overload selector("localeIdentifier") = NSString;
overload selector("localeIdentifierFromComponents:") = NSString, NSDictionary;
overload selector("localeIdentifierFromWindowsLocaleCode:") = NSString, UInt;
overload selector("localizations") = NSArray;
overload selector("localizedCaseInsensitiveCompare:") = Int, NSString;
overload selector("localizedCompare:") = Int, NSString;
overload selector("localizedDescription") = NSString;
overload selector("localizedFailureReason") = NSString;
overload selector("localizedInfoDictionary") = NSDictionary;
overload selector("localizedName:locale:") = NSString, Int, NSLocale;
overload selector("localizedNameOfStringEncoding:") = NSString, UInt;
overload selector("localizedRecoveryOptions") = NSArray;
overload selector("localizedRecoverySuggestion") = NSString;
overload selector("localizedScannerWithString:") = Id, NSString;
overload selector("localizedStandardCompare:") = Int, NSString;
overload selector("localizedStringForKey:value:table:") = NSString, NSString, NSString, NSString;
overload selector("localizedStringForStatusCode:") = NSString, Int;
overload selector("localizedStringFromDate:dateStyle:timeStyle:") = NSString, NSDate, UInt, UInt;
overload selector("localizedStringFromNumber:numberStyle:") = NSString, NSNumber, UInt;
overload varargSelector("localizedStringWithFormat:") = Id, NSString;
overload selector("lock") = Void;
overload selector("lockBeforeDate:") = Bool, NSDate;
overload selector("lockWhenCondition:") = Void, Int;
overload selector("lockWhenCondition:beforeDate:") = Bool, Int, NSDate;
overload selector("longCharacterIsMember:") = Bool, CULong;
overload selector("longEraSymbols") = NSArray;
overload selector("longLongValue") = Int64;
overload selector("longValue") = CLong;
overload selector("lossyCString") = Pointer[CChar];
overload selector("lowercaseLetterCharacterSet") = Id;
overload selector("lowercaseString") = NSString;
overload selector("machPort") = UInt;
overload selector("main") = Void;
overload selector("mainBundle") = NSBundle;
overload selector("mainDocumentURL") = NSURL;
overload selector("mainQueue") = Id;
overload selector("mainRunLoop") = NSRunLoop;
overload selector("mainThread") = NSThread;
overload selector("makeObjectsPerformSelector:") = Void, SelectorHandle;
overload selector("makeObjectsPerformSelector:withObject:") = Void, SelectorHandle, Id;
overload selector("matchesContentsOfURL:") = Bool, NSURL;
overload selector("matchesInString:options:range:") = NSArray, NSString, UInt, NSRange;
overload selector("maxConcurrentOperationCount") = Int;
overload selector("maximum") = NSNumber;
overload selector("maximumDecimalNumber") = NSDecimalNumber;
overload selector("maximumFractionDigits") = UInt;
overload selector("maximumIntegerDigits") = UInt;
overload selector("maximumLengthOfBytesUsingEncoding:") = UInt, UInt;
overload selector("maximumRangeOfUnit:") = NSRange, UInt;
overload selector("maximumSignificantDigits") = UInt;
overload selector("member:") = Id, Id;
overload selector("memoryCapacity") = UInt;
overload selector("methodForSelector:") = IMP, SelectorHandle;
overload selector("methodReturnLength") = UInt;
overload selector("methodReturnType") = Pointer[CChar];
overload selector("methodSignature") = NSMethodSignature;
overload selector("methodSignatureForSelector:") = NSMethodSignature, SelectorHandle;
overload selector("minimum") = NSNumber;
overload selector("minimumDaysInFirstWeek") = UInt;
overload selector("minimumDecimalNumber") = NSDecimalNumber;
overload selector("minimumFractionDigits") = UInt;
overload selector("minimumIntegerDigits") = UInt;
overload selector("minimumRangeOfUnit:") = NSRange, UInt;
overload selector("minimumSignificantDigits") = UInt;
overload selector("minusSet:") = Void, NSSet;
overload selector("minusSign") = NSString;
overload selector("minute") = Int;
overload selector("month") = Int;
overload selector("monthSymbols") = NSArray;
overload selector("mountedVolumeURLsIncludingResourceValuesForKeys:options:") = NSArray, NSArray, UInt;
overload selector("moveItemAtPath:toPath:error:") = Bool, NSString, NSString, Pointer[NSError];
overload selector("moveItemAtURL:toURL:error:") = Bool, NSURL, NSURL, Pointer[NSError];
overload selector("multiplier") = NSNumber;
overload selector("mutableArrayValueForKey:") = NSMutableArray, NSString;
overload selector("mutableArrayValueForKeyPath:") = NSMutableArray, NSString;
overload selector("mutableBytes") = RawPointer;
overload selector("mutableCopy") = Id;
overload selector("mutableCopyWithZone:") = Id, Pointer[NSZone];
overload selector("mutableSetValueForKey:") = NSMutableSet, NSString;
overload selector("mutableSetValueForKeyPath:") = NSMutableSet, NSString;
overload selector("mutableString") = NSMutableString;
overload selector("name") = NSString;
overload selector("needsToBeUpdatedFromPath:") = Bool, NSString;
overload selector("negativeFormat") = NSString;
overload selector("negativeInfinitySymbol") = NSString;
overload selector("negativePrefix") = NSString;
overload selector("negativeSuffix") = NSString;
overload selector("netService:didNotPublish:") = Void, NSNetService, NSDictionary;
overload selector("netService:didNotResolve:") = Void, NSNetService, NSDictionary;
overload selector("netService:didUpdateTXTRecordData:") = Void, NSNetService, NSData;
overload selector("netServiceBrowser:didFindDomain:moreComing:") = Void, NSNetServiceBrowser, NSString, Bool;
overload selector("netServiceBrowser:didFindService:moreComing:") = Void, NSNetServiceBrowser, NSNetService, Bool;
overload selector("netServiceBrowser:didNotSearch:") = Void, NSNetServiceBrowser, NSDictionary;
overload selector("netServiceBrowser:didRemoveDomain:moreComing:") = Void, NSNetServiceBrowser, NSString, Bool;
overload selector("netServiceBrowser:didRemoveService:moreComing:") = Void, NSNetServiceBrowser, NSNetService, Bool;
overload selector("netServiceBrowserDidStopSearch:") = Void, NSNetServiceBrowser;
overload selector("netServiceBrowserWillSearch:") = Void, NSNetServiceBrowser;
overload selector("netServiceDidPublish:") = Void, NSNetService;
overload selector("netServiceDidResolveAddress:") = Void, NSNetService;
overload selector("netServiceDidStop:") = Void, NSNetService;
overload selector("netServiceWillPublish:") = Void, NSNetService;
overload selector("netServiceWillResolve:") = Void, NSNetService;
overload selector("networkServiceType") = UInt;
overload selector("new") = Id;
overload selector("newlineCharacterSet") = Id;
overload selector("nextDaylightSavingTimeTransition") = NSDate;
overload selector("nextDaylightSavingTimeTransitionAfterDate:") = NSDate, NSDate;
overload selector("nextObject") = Id;
overload selector("nilSymbol") = NSString;
overload selector("nonBaseCharacterSet") = Id;
overload selector("nonretainedObjectValue") = Id;
overload selector("notANumber") = NSDecimalNumber;
overload selector("notANumberSymbol") = NSString;
overload selector("notPredicateWithSubpredicate:") = NSPredicate, NSPredicate;
overload selector("notificationWithName:object:") = Id, NSString, Id;
overload selector("notificationWithName:object:userInfo:") = Id, NSString, Id, NSDictionary;
overload selector("null") = NSNull;
overload selector("numberFromString:") = NSNumber, NSString;
overload selector("numberOfArguments") = UInt;
overload selector("numberOfCaptureGroups") = UInt;
overload selector("numberOfMatchesInString:options:range:") = UInt, NSString, UInt, NSRange;
overload selector("numberOfRanges") = UInt;
overload selector("numberStyle") = UInt;
overload selector("numberWithBool:") = NSNumber, Bool;
overload selector("numberWithChar:") = NSNumber, CChar;
overload selector("numberWithDouble:") = NSNumber, Double;
overload selector("numberWithFloat:") = NSNumber, Float;
overload selector("numberWithInt:") = NSNumber, Int;
overload selector("numberWithInteger:") = NSNumber, Int;
overload selector("numberWithLong:") = NSNumber, CLong;
overload selector("numberWithLongLong:") = NSNumber, Int64;
overload selector("numberWithShort:") = NSNumber, Short;
overload selector("numberWithUnsignedChar:") = NSNumber, CUChar;
overload selector("numberWithUnsignedInt:") = NSNumber, UInt;
overload selector("numberWithUnsignedInteger:") = NSNumber, UInt;
overload selector("numberWithUnsignedLong:") = NSNumber, CULong;
overload selector("numberWithUnsignedLongLong:") = NSNumber, UInt64;
overload selector("numberWithUnsignedShort:") = NSNumber, UShort;
overload selector("objCType") = Pointer[CChar];
overload selector("object") = Id;
overload selector("objectAtIndex:") = Id, UInt;
overload selector("objectEnumerator") = NSEnumerator;
overload selector("objectForInfoDictionaryKey:") = Id, NSString;
overload selector("objectForKey:") = Id, Id;
overload selector("objectIsForcedForKey:") = Bool, NSString;
overload selector("objectIsForcedForKey:inDomain:") = Bool, NSString, NSString;
overload selector("objectZone") = Pointer[NSZone];
overload selector("objectsAtIndexes:") = NSArray, NSIndexSet;
overload selector("objectsForKeys:notFoundMarker:") = NSArray, NSArray, Id;
overload selector("objectsPassingTest:") = NSSet, UnknownType;
overload selector("objectsWithOptions:passingTest:") = NSSet, UInt, UnknownType;
overload selector("observationInfo") = RawPointer;
overload selector("observeValueForKeyPath:ofObject:change:context:") = Void, NSString, Id, NSDictionary, RawPointer;
overload selector("offsetInFile") = UInt64;
overload selector("one") = NSDecimalNumber;
overload selector("open") = Void;
overload selector("operand") = NSExpression;
overload selector("operatingSystem") = UInt;
overload selector("operatingSystemName") = NSString;
overload selector("operatingSystemVersionString") = NSString;
overload selector("operationCount") = UInt;
overload selector("operations") = NSArray;
overload selector("options") = UInt;
overload selector("orPredicateWithSubpredicates:") = NSPredicate, NSArray;
overload selector("ordinalityOfUnit:inUnit:forDate:") = UInt, UInt, UInt, NSDate;
overload selector("orthography") = NSOrthography;
overload selector("orthographyCheckingResultWithRange:orthography:") = NSTextCheckingResult, NSRange, NSOrthography;
overload selector("orthographyWithDominantScript:languageMap:") = Id, NSString, NSDictionary;
overload selector("outputFormat") = UInt;
overload selector("outputStreamToBuffer:capacity:") = Id, Pointer[CUChar], UInt;
overload selector("outputStreamToFileAtPath:append:") = Id, NSString, Bool;
overload selector("outputStreamToMemory") = Id;
overload selector("outputStreamWithURL:append:") = Id, NSURL, Bool;
overload selector("paddingCharacter") = NSString;
overload selector("paddingPosition") = UInt;
overload selector("paragraphRangeForRange:") = NSRange, NSRange;
overload selector("parameterString") = NSString;
overload selector("parse") = Bool;
overload selector("parser:didEndElement:namespaceURI:qualifiedName:") = Void, NSXMLParser, NSString, NSString, NSString;
overload selector("parser:didEndMappingPrefix:") = Void, NSXMLParser, NSString;
overload selector("parser:didStartElement:namespaceURI:qualifiedName:attributes:") = Void, NSXMLParser, NSString, NSString, NSString, NSDictionary;
overload selector("parser:didStartMappingPrefix:toURI:") = Void, NSXMLParser, NSString, NSString;
overload selector("parser:foundAttributeDeclarationWithName:forElement:type:defaultValue:") = Void, NSXMLParser, NSString, NSString, NSString, NSString;
overload selector("parser:foundCDATA:") = Void, NSXMLParser, NSData;
overload selector("parser:foundCharacters:") = Void, NSXMLParser, NSString;
overload selector("parser:foundComment:") = Void, NSXMLParser, NSString;
overload selector("parser:foundElementDeclarationWithName:model:") = Void, NSXMLParser, NSString, NSString;
overload selector("parser:foundExternalEntityDeclarationWithName:publicID:systemID:") = Void, NSXMLParser, NSString, NSString, NSString;
overload selector("parser:foundIgnorableWhitespace:") = Void, NSXMLParser, NSString;
overload selector("parser:foundInternalEntityDeclarationWithName:value:") = Void, NSXMLParser, NSString, NSString;
overload selector("parser:foundNotationDeclarationWithName:publicID:systemID:") = Void, NSXMLParser, NSString, NSString, NSString;
overload selector("parser:foundProcessingInstructionWithTarget:data:") = Void, NSXMLParser, NSString, NSString;
overload selector("parser:foundUnparsedEntityDeclarationWithName:publicID:systemID:notationName:") = Void, NSXMLParser, NSString, NSString, NSString, NSString;
overload selector("parser:parseErrorOccurred:") = Void, NSXMLParser, NSError;
overload selector("parser:resolveExternalEntityName:systemID:") = NSData, NSXMLParser, NSString, NSString;
overload selector("parser:validationErrorOccurred:") = Void, NSXMLParser, NSError;
overload selector("parserDidEndDocument:") = Void, NSXMLParser;
overload selector("parserDidStartDocument:") = Void, NSXMLParser;
overload selector("parserError") = NSError;
overload selector("password") = NSString;
overload selector("path") = NSString;
overload selector("pathComponents") = NSArray;
overload selector("pathContentOfSymbolicLinkAtPath:") = NSString, NSString;
overload selector("pathExtension") = NSString;
overload selector("pathForAuxiliaryExecutable:") = NSString, NSString;
overload selector("pathForResource:ofType:") = NSString, NSString, NSString;
overload selector("pathForResource:ofType:inDirectory:") = NSString, NSString, NSString, NSString;
overload selector("pathForResource:ofType:inDirectory:forLocalization:") = NSString, NSString, NSString, NSString, NSString;
overload selector("pathWithComponents:") = NSString, NSArray;
overload selector("pathsForResourcesOfType:inDirectory:") = NSArray, NSString, NSString;
overload selector("pathsForResourcesOfType:inDirectory:forLocalization:") = NSArray, NSString, NSString, NSString;
overload selector("pathsMatchingExtensions:") = NSArray, NSArray;
overload selector("pattern") = NSString;
overload selector("perMillSymbol") = NSString;
overload selector("percentSymbol") = NSString;
overload selector("performSelector:") = Id, SelectorHandle;
overload selector("performSelector:onThread:withObject:waitUntilDone:") = Void, SelectorHandle, NSThread, Id, Bool;
overload selector("performSelector:onThread:withObject:waitUntilDone:modes:") = Void, SelectorHandle, NSThread, Id, Bool, NSArray;
overload selector("performSelector:target:argument:order:modes:") = Void, SelectorHandle, Id, Id, UInt, NSArray;
overload selector("performSelector:withObject:") = Id, SelectorHandle, Id;
overload selector("performSelector:withObject:afterDelay:") = Void, SelectorHandle, Id, Double;
overload selector("performSelector:withObject:afterDelay:inModes:") = Void, SelectorHandle, Id, Double, NSArray;
overload selector("performSelector:withObject:withObject:") = Id, SelectorHandle, Id, Id;
overload selector("performSelectorInBackground:withObject:") = Void, SelectorHandle, Id;
overload selector("performSelectorOnMainThread:withObject:waitUntilDone:") = Void, SelectorHandle, Id, Bool;
overload selector("performSelectorOnMainThread:withObject:waitUntilDone:modes:") = Void, SelectorHandle, Id, Bool, NSArray;
overload selector("persistence") = UInt;
overload selector("persistentDomainForName:") = NSDictionary, NSString;
overload selector("persistentDomainNames") = NSArray;
overload selector("phoneNumber") = NSString;
overload selector("phoneNumberCheckingResultWithRange:phoneNumber:") = NSTextCheckingResult, NSRange, NSString;
overload selector("physicalMemory") = UInt64;
overload selector("pipe") = Id;
overload selector("plusSign") = NSString;
overload selector("pointerValue") = RawPointer;
overload selector("port") = Id;
overload selector("portList") = NSArray;
overload selector("portWithMachPort:") = NSPort, UInt;
overload selector("portWithMachPort:options:") = NSPort, UInt, UInt;
overload selector("positiveFormat") = NSString;
overload selector("positiveInfinitySymbol") = NSString;
overload selector("positivePrefix") = NSString;
overload selector("positiveSuffix") = NSString;
overload selector("postNotification:") = Void, NSNotification;
overload selector("postNotificationName:object:") = Void, NSString, Id;
overload selector("postNotificationName:object:userInfo:") = Void, NSString, Id, NSDictionary;
overload selector("precomposedStringWithCanonicalMapping") = NSString;
overload selector("precomposedStringWithCompatibilityMapping") = NSString;
overload selector("predicate") = NSPredicate;
overload selector("predicateFormat") = NSString;
overload selector("predicateOperatorType") = UInt;
overload selector("predicateWithBlock:") = NSPredicate, UnknownType;
overload varargSelector("predicateWithFormat:") = NSPredicate, NSString;
overload selector("predicateWithFormat:argumentArray:") = NSPredicate, NSString, NSArray;
overload selector("predicateWithFormat:arguments:") = NSPredicate, NSString, va_list;
overload selector("predicateWithLeftExpression:rightExpression:customSelector:") = NSPredicate, NSExpression, NSExpression, SelectorHandle;
overload selector("predicateWithLeftExpression:rightExpression:modifier:type:options:") = NSPredicate, NSExpression, NSExpression, UInt, UInt, UInt;
overload selector("predicateWithSubstitutionVariables:") = NSPredicate, NSDictionary;
overload selector("predicateWithValue:") = NSPredicate, Bool;
overload selector("preferredFilename") = NSString;
overload selector("preferredLanguages") = NSArray;
overload selector("preferredLocalizations") = NSArray;
overload selector("preferredLocalizationsFromArray:") = NSArray, NSArray;
overload selector("preferredLocalizationsFromArray:forPreferences:") = NSArray, NSArray, NSArray;
overload selector("preflightAndReturnError:") = Bool, Pointer[NSError];
overload selector("prepareWithInvocationTarget:") = Id, Id;
overload selector("previousFailureCount") = Int;
overload selector("principalClass") = Id;
overload selector("privateFrameworksPath") = NSString;
overload selector("privateFrameworksURL") = NSURL;
overload selector("processIdentifier") = Int;
overload selector("processInfo") = NSProcessInfo;
overload selector("processName") = NSString;
overload selector("processorCount") = UInt;
overload selector("properties") = NSDictionary;
overload selector("propertyForKey:") = Id, NSString;
overload selector("propertyForKey:inRequest:") = Id, NSString, NSURLRequest;
overload selector("propertyList") = Id;
overload selector("propertyList:isValidForFormat:") = Bool, Id, UInt;
overload selector("propertyListFromData:mutabilityOption:format:errorDescription:") = Id, NSData, UInt, Pointer[UInt], Pointer[NSString];
overload selector("propertyListFromStringsFileFormat") = NSDictionary;
overload selector("propertyListWithData:options:format:error:") = Id, NSData, UInt, Pointer[UInt], Pointer[NSError];
overload selector("propertyListWithStream:options:format:error:") = Id, NSInputStream, UInt, Pointer[UInt], Pointer[NSError];
overload selector("proposedCredential") = NSURLCredential;
overload selector("protectionSpace") = NSURLProtectionSpace;
overload selector("protocol") = NSString;
overload selector("proxyType") = NSString;
overload selector("publicID") = NSString;
overload selector("publish") = Void;
overload selector("publishWithOptions:") = Void, UInt;
overload selector("punctuationCharacterSet") = Id;
overload selector("quarter") = Int;
overload selector("quarterSymbols") = NSArray;
overload selector("query") = NSString;
overload selector("queuePriority") = Int;
overload selector("quoteCheckingResultWithRange:replacementString:") = NSTextCheckingResult, NSRange, NSString;
overload selector("raise") = Void;
overload varargSelector("raise:format:") = Void, NSString, NSString;
overload selector("raise:format:arguments:") = Void, NSString, NSString, va_list;
overload selector("range") = NSRange;
overload selector("rangeAtIndex:") = NSRange, UInt;
overload selector("rangeOfCharacterFromSet:") = NSRange, NSCharacterSet;
overload selector("rangeOfCharacterFromSet:options:") = NSRange, NSCharacterSet, UInt;
overload selector("rangeOfCharacterFromSet:options:range:") = NSRange, NSCharacterSet, UInt, NSRange;
overload selector("rangeOfComposedCharacterSequenceAtIndex:") = NSRange, UInt;
overload selector("rangeOfComposedCharacterSequencesForRange:") = NSRange, NSRange;
overload selector("rangeOfData:options:range:") = NSRange, NSData, UInt, NSRange;
overload selector("rangeOfFirstMatchInString:options:range:") = NSRange, NSString, UInt, NSRange;
overload selector("rangeOfString:") = NSRange, NSString;
overload selector("rangeOfString:options:") = NSRange, NSString, UInt;
overload selector("rangeOfString:options:range:") = NSRange, NSString, UInt, NSRange;
overload selector("rangeOfString:options:range:locale:") = NSRange, NSString, UInt, NSRange, NSLocale;
overload selector("rangeOfUnit:inUnit:forDate:") = NSRange, UInt, UInt, NSDate;
overload selector("rangeOfUnit:startDate:interval:forDate:") = Bool, UInt, Pointer[NSDate], Pointer[Double], NSDate;
overload selector("rangeValue") = NSRange;
overload selector("read:maxLength:") = Int, Pointer[CUChar], UInt;
overload selector("readDataOfLength:") = NSData, UInt;
overload selector("readDataToEndOfFile") = NSData;
overload selector("readFromURL:options:error:") = Bool, NSURL, UInt, Pointer[NSError];
overload selector("readInBackgroundAndNotify") = Void;
overload selector("readInBackgroundAndNotifyForModes:") = Void, NSArray;
overload selector("readToEndOfFileInBackgroundAndNotify") = Void;
overload selector("readToEndOfFileInBackgroundAndNotifyForModes:") = Void, NSArray;
overload selector("realm") = NSString;
overload selector("reason") = NSString;
overload selector("receivesCredentialSecurely") = Bool;
overload selector("recoveryAttempter") = Id;
overload selector("redo") = Void;
overload selector("redoActionName") = NSString;
overload selector("redoMenuItemTitle") = NSString;
overload selector("redoMenuTitleForUndoActionName:") = NSString, NSString;
overload selector("registerClass:") = Bool, Id;
overload selector("registerDefaults:") = Void, NSDictionary;
overload selector("registerUndoWithTarget:selector:object:") = Void, Id, SelectorHandle, Id;
overload selector("regularExpression") = NSRegularExpression;
overload selector("regularExpressionCheckingResultWithRanges:count:regularExpression:") = NSTextCheckingResult, NSRangePointer, UInt, NSRegularExpression;
overload selector("regularExpressionWithPattern:options:error:") = NSRegularExpression, NSString, UInt, Pointer[NSError];
overload selector("regularFileContents") = NSData;
overload selector("relativePath") = NSString;
overload selector("relativeString") = NSString;
overload selector("release") = Void;
overload selector("removeAllActions") = Void;
overload selector("removeAllActionsWithTarget:") = Void, Id;
overload selector("removeAllCachedResponses") = Void;
overload selector("removeAllIndexes") = Void;
overload selector("removeAllObjects") = Void;
overload selector("removeAttribute:range:") = Void, NSString, NSRange;
overload selector("removeCachedResponseForRequest:") = Void, NSURLRequest;
overload selector("removeCharactersInRange:") = Void, NSRange;
overload selector("removeCharactersInString:") = Void, NSString;
overload selector("removeCredential:forProtectionSpace:") = Void, NSURLCredential, NSURLProtectionSpace;
overload selector("removeDependency:") = Void, NSOperation;
overload selector("removeFileWrapper:") = Void, NSFileWrapper;
overload selector("removeFromRunLoop:forMode:") = Void, NSRunLoop, NSString;
overload selector("removeIndex:") = Void, UInt;
overload selector("removeIndexes:") = Void, NSIndexSet;
overload selector("removeIndexesInRange:") = Void, NSRange;
overload selector("removeItemAtPath:error:") = Bool, NSString, Pointer[NSError];
overload selector("removeItemAtURL:error:") = Bool, NSURL, Pointer[NSError];
overload selector("removeLastObject") = Void;
overload selector("removeObject:") = Void, Id;
overload selector("removeObject:inRange:") = Void, Id, NSRange;
overload selector("removeObjectAtIndex:") = Void, UInt;
overload selector("removeObjectForKey:") = Void, Id;
overload selector("removeObjectIdenticalTo:") = Void, Id;
overload selector("removeObjectIdenticalTo:inRange:") = Void, Id, NSRange;
overload selector("removeObjectsAtIndexes:") = Void, NSIndexSet;
overload selector("removeObjectsForKeys:") = Void, NSArray;
overload selector("removeObjectsFromIndices:numIndices:") = Void, Pointer[UInt], UInt;
overload selector("removeObjectsInArray:") = Void, NSArray;
overload selector("removeObjectsInRange:") = Void, NSRange;
overload selector("removeObserver:") = Void, Id;
overload selector("removeObserver:forKeyPath:") = Void, NSObject, NSString;
overload selector("removeObserver:fromObjectsAtIndexes:forKeyPath:") = Void, NSObject, NSIndexSet, NSString;
overload selector("removeObserver:name:object:") = Void, Id, NSString, Id;
overload selector("removePersistentDomainForName:") = Void, NSString;
overload selector("removePort:forMode:") = Void, NSPort, NSString;
overload selector("removePropertyForKey:inRequest:") = Void, NSString, NSMutableURLRequest;
overload selector("removeSuiteNamed:") = Void, NSString;
overload selector("removeVolatileDomainForName:") = Void, NSString;
overload selector("replaceBytesInRange:withBytes:") = Void, NSRange, RawPointer;
overload selector("replaceBytesInRange:withBytes:length:") = Void, NSRange, RawPointer, UInt;
overload selector("replaceCharactersInRange:withAttributedString:") = Void, NSRange, NSAttributedString;
overload selector("replaceCharactersInRange:withString:") = Void, NSRange, NSString;
overload selector("replaceItemAtURL:withItemAtURL:backupItemName:options:resultingItemURL:error:") = Bool, NSURL, NSURL, NSString, UInt, Pointer[NSURL], Pointer[NSError];
overload selector("replaceMatchesInString:options:range:withTemplate:") = UInt, NSMutableString, UInt, NSRange, NSString;
overload selector("replaceObjectAtIndex:withObject:") = Void, UInt, Id;
overload selector("replaceObjectsAtIndexes:withObjects:") = Void, NSIndexSet, NSArray;
overload selector("replaceObjectsInRange:withObjectsFromArray:") = Void, NSRange, NSArray;
overload selector("replaceObjectsInRange:withObjectsFromArray:range:") = Void, NSRange, NSArray, NSRange;
overload selector("replaceOccurrencesOfString:withString:options:range:") = UInt, NSString, NSString, UInt, NSRange;
overload selector("replacementCheckingResultWithRange:replacementString:") = NSTextCheckingResult, NSRange, NSString;
overload selector("replacementObjectForCoder:") = Id, NSCoder;
overload selector("replacementObjectForKeyedArchiver:") = Id, NSKeyedArchiver;
overload selector("replacementString") = NSString;
overload selector("replacementStringForResult:inString:offset:template:") = NSString, NSTextCheckingResult, NSString, Int, NSString;
overload selector("request") = NSURLRequest;
overload selector("requestHeaderFieldsWithCookies:") = NSDictionary, NSArray;
overload selector("requestIsCacheEquivalent:toRequest:") = Bool, NSURLRequest, NSURLRequest;
overload selector("requestWithURL:") = Id, NSURL;
overload selector("requestWithURL:cachePolicy:timeoutInterval:") = Id, NSURL, UInt, Double;
overload selector("reservedSpaceLength") = UInt;
overload selector("resetBytesInRange:") = Void, NSRange;
overload selector("resetStandardUserDefaults") = Void;
overload selector("resetSystemTimeZone") = Void;
overload selector("resolve") = Void;
overload selector("resolveClassMethod:") = Bool, SelectorHandle;
overload selector("resolveInstanceMethod:") = Bool, SelectorHandle;
overload selector("resolveWithTimeout:") = Void, Double;
overload selector("resourcePath") = NSString;
overload selector("resourceSpecifier") = NSString;
overload selector("resourceURL") = NSURL;
overload selector("resourceValuesForKeys:error:") = NSDictionary, NSArray, Pointer[NSError];
overload selector("resourceValuesForKeys:fromBookmarkData:") = NSDictionary, NSArray, NSData;
overload selector("respondsToSelector:") = Bool, SelectorHandle;
overload selector("response") = NSURLResponse;
overload selector("result") = Id;
overload selector("resultType") = UInt64;
overload selector("retain") = Id;
overload selector("retainArguments") = Void;
overload selector("retainCount") = UInt;
overload selector("reverseObjectEnumerator") = NSEnumerator;
overload selector("reverseTransformedValue:") = Id, Id;
overload selector("reversedSortDescriptor") = Id;
overload selector("rightExpression") = NSExpression;
overload selector("roundingIncrement") = NSNumber;
overload selector("roundingMode") = UInt;
overload selector("run") = Void;
overload selector("runLoopModes") = NSArray;
overload selector("runMode:beforeDate:") = Bool, NSString, NSDate;
overload selector("runUntilDate:") = Void, NSDate;
overload selector("scale") = Short;
overload selector("scanCharactersFromSet:intoString:") = Bool, NSCharacterSet, Pointer[NSString];
overload selector("scanDecimal:") = Bool, Pointer[NSDecimal];
overload selector("scanDouble:") = Bool, Pointer[Double];
overload selector("scanFloat:") = Bool, Pointer[Float];
overload selector("scanHexDouble:") = Bool, Pointer[Double];
overload selector("scanHexFloat:") = Bool, Pointer[Float];
overload selector("scanHexInt:") = Bool, Pointer[UInt];
overload selector("scanHexLongLong:") = Bool, Pointer[UInt64];
overload selector("scanInt:") = Bool, Pointer[Int];
overload selector("scanInteger:") = Bool, Pointer[Int];
overload selector("scanLocation") = UInt;
overload selector("scanLongLong:") = Bool, Pointer[Int64];
overload selector("scanString:intoString:") = Bool, NSString, Pointer[NSString];
overload selector("scanUpToCharactersFromSet:intoString:") = Bool, NSCharacterSet, Pointer[NSString];
overload selector("scanUpToString:intoString:") = Bool, NSString, Pointer[NSString];
overload selector("scannerWithString:") = Id, NSString;
overload selector("scheduleInRunLoop:forMode:") = Void, NSRunLoop, NSString;
overload selector("scheduledTimerWithTimeInterval:invocation:repeats:") = NSTimer, Double, NSInvocation, Bool;
overload selector("scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:") = NSTimer, Double, Id, SelectorHandle, Id, Bool;
overload selector("scheme") = NSString;
overload selector("searchForBrowsableDomains") = Void;
overload selector("searchForRegistrationDomains") = Void;
overload selector("searchForServicesOfType:inDomain:") = Void, NSString, NSString;
overload selector("second") = Int;
overload selector("secondaryGroupingSize") = UInt;
overload selector("secondsFromGMT") = Int;
overload selector("secondsFromGMTForDate:") = Int, NSDate;
overload selector("seekToEndOfFile") = UInt64;
overload selector("seekToFileOffset:") = Void, UInt64;
overload selector("selector") = SelectorHandle;
overload selector("self") = Id;
overload selector("sendBeforeDate:components:from:reserved:") = Bool, NSDate, NSMutableArray, NSPort, UInt;
overload selector("sendBeforeDate:msgid:components:from:reserved:") = Bool, NSDate, UInt, NSMutableArray, NSPort, UInt;
overload selector("sendSynchronousRequest:returningResponse:error:") = NSData, NSURLRequest, Pointer[NSURLResponse], Pointer[NSError];
overload selector("sender") = Id;
overload selector("serializedRepresentation") = NSData;
overload selector("serverTrust") = SecTrustRef;
overload selector("set") = Id;
overload selector("setAMSymbol:") = Void, NSString;
overload selector("setAbbreviationDictionary:") = Void, NSDictionary;
overload selector("setActionName:") = Void, NSString;
overload selector("setAllHTTPHeaderFields:") = Void, NSDictionary;
overload selector("setAllowsFloats:") = Void, Bool;
overload selector("setAlwaysShowsDecimalSeparator:") = Void, Bool;
overload selector("setArgument:atIndex:") = Void, RawPointer, Int;
overload selector("setArray:") = Void, NSArray;
overload selector("setAttributedString:") = Void, NSAttributedString;
overload selector("setAttributes:ofItemAtPath:error:") = Bool, NSDictionary, NSString, Pointer[NSError];
overload selector("setAttributes:range:") = Void, NSDictionary, NSRange;
overload selector("setBool:forKey:") = Void, Bool, NSString;
overload selector("setByAddingObject:") = NSSet, Id;
overload selector("setByAddingObjectsFromArray:") = NSSet, NSArray;
overload selector("setByAddingObjectsFromSet:") = NSSet, NSSet;
overload selector("setCachePolicy:") = Void, UInt;
overload selector("setCalendar:") = Void, NSCalendar;
overload selector("setCaseSensitive:") = Void, Bool;
overload selector("setCharactersToBeSkipped:") = Void, NSCharacterSet;
overload selector("setClass:forClassName:") = Void, Id, NSString;
overload selector("setClassName:forClass:") = Void, NSString, Id;
overload selector("setCompletionBlock:") = Void, UnknownType;
overload selector("setCookie:") = Void, NSHTTPCookie;
overload selector("setCookieAcceptPolicy:") = Void, UInt;
overload selector("setCookies:forURL:mainDocumentURL:") = Void, NSArray, NSURL, NSURL;
overload selector("setCountLimit:") = Void, UInt;
overload selector("setCredential:forProtectionSpace:") = Void, NSURLCredential, NSURLProtectionSpace;
overload selector("setCurrencyCode:") = Void, NSString;
overload selector("setCurrencyDecimalSeparator:") = Void, NSString;
overload selector("setCurrencyGroupingSeparator:") = Void, NSString;
overload selector("setCurrencySymbol:") = Void, NSString;
overload selector("setData:") = Void, NSData;
overload selector("setDateFormat:") = Void, NSString;
overload selector("setDateStyle:") = Void, UInt;
overload selector("setDay:") = Void, Int;
overload selector("setDecimalSeparator:") = Void, NSString;
overload selector("setDefaultBehavior:") = Void, Id;
overload selector("setDefaultCredential:forProtectionSpace:") = Void, NSURLCredential, NSURLProtectionSpace;
overload selector("setDefaultDate:") = Void, NSDate;
overload selector("setDefaultFormatterBehavior:") = Void, UInt;
overload selector("setDefaultTimeZone:") = Void, NSTimeZone;
overload selector("setDelegate:") = Void, Id;
overload selector("setDictionary:") = Void, NSDictionary;
overload selector("setDiskCapacity:") = Void, UInt;
overload selector("setDoesRelativeDateFormatting:") = Void, Bool;
overload selector("setDouble:forKey:") = Void, Double, NSString;
overload selector("setEra:") = Void, Int;
overload selector("setEraSymbols:") = Void, NSArray;
overload selector("setEvictsObjectsWithDiscardedContent:") = Void, Bool;
overload selector("setExponentSymbol:") = Void, NSString;
overload selector("setFileAttributes:") = Void, NSDictionary;
overload selector("setFilename:") = Void, NSString;
overload selector("setFireDate:") = Void, NSDate;
overload selector("setFirstWeekday:") = Void, UInt;
overload selector("setFloat:forKey:") = Void, Float, NSString;
overload selector("setFormatWidth:") = Void, UInt;
overload selector("setFormatterBehavior:") = Void, UInt;
overload selector("setGeneratesCalendarDates:") = Void, Bool;
overload selector("setGeneratesDecimalNumbers:") = Void, Bool;
overload selector("setGregorianStartDate:") = Void, NSDate;
overload selector("setGroupingSeparator:") = Void, NSString;
overload selector("setGroupingSize:") = Void, UInt;
overload selector("setGroupsByEvent:") = Void, Bool;
overload selector("setHTTPBody:") = Void, NSData;
overload selector("setHTTPBodyStream:") = Void, NSInputStream;
overload selector("setHTTPMethod:") = Void, NSString;
overload selector("setHTTPShouldHandleCookies:") = Void, Bool;
overload selector("setHTTPShouldUsePipelining:") = Void, Bool;
overload selector("setHour:") = Void, Int;
overload selector("setInteger:forKey:") = Void, Int, NSString;
overload selector("setInternationalCurrencySymbol:") = Void, NSString;
overload selector("setLength:") = Void, UInt;
overload selector("setLenient:") = Void, Bool;
overload selector("setLevelsOfUndo:") = Void, UInt;
overload selector("setLocale:") = Void, NSLocale;
overload selector("setLongEraSymbols:") = Void, NSArray;
overload selector("setMainDocumentURL:") = Void, NSURL;
overload selector("setMaxConcurrentOperationCount:") = Void, Int;
overload selector("setMaximum:") = Void, NSNumber;
overload selector("setMaximumFractionDigits:") = Void, UInt;
overload selector("setMaximumIntegerDigits:") = Void, UInt;
overload selector("setMaximumSignificantDigits:") = Void, UInt;
overload selector("setMemoryCapacity:") = Void, UInt;
overload selector("setMinimum:") = Void, NSNumber;
overload selector("setMinimumDaysInFirstWeek:") = Void, UInt;
overload selector("setMinimumFractionDigits:") = Void, UInt;
overload selector("setMinimumIntegerDigits:") = Void, UInt;
overload selector("setMinimumSignificantDigits:") = Void, UInt;
overload selector("setMinusSign:") = Void, NSString;
overload selector("setMinute:") = Void, Int;
overload selector("setMonth:") = Void, Int;
overload selector("setMonthSymbols:") = Void, NSArray;
overload selector("setMultiplier:") = Void, NSNumber;
overload selector("setName:") = Void, NSString;
overload selector("setNegativeFormat:") = Void, NSString;
overload selector("setNegativeInfinitySymbol:") = Void, NSString;
overload selector("setNegativePrefix:") = Void, NSString;
overload selector("setNegativeSuffix:") = Void, NSString;
overload selector("setNetworkServiceType:") = Void, UInt;
overload selector("setNilSymbol:") = Void, NSString;
overload selector("setNilValueForKey:") = Void, NSString;
overload selector("setNotANumberSymbol:") = Void, NSString;
overload selector("setNumberStyle:") = Void, UInt;
overload selector("setObject:forKey:") = Void, Id, Id;
overload selector("setObject:forKey:cost:") = Void, Id, Id, UInt;
overload selector("setObjectZone:") = Void, Pointer[NSZone];
overload selector("setObservationInfo:") = Void, RawPointer;
overload selector("setOutputFormat:") = Void, UInt;
overload selector("setPMSymbol:") = Void, NSString;
overload selector("setPaddingCharacter:") = Void, NSString;
overload selector("setPaddingPosition:") = Void, UInt;
overload selector("setPartialStringValidationEnabled:") = Void, Bool;
overload selector("setPerMillSymbol:") = Void, NSString;
overload selector("setPercentSymbol:") = Void, NSString;
overload selector("setPersistentDomain:forName:") = Void, NSDictionary, NSString;
overload selector("setPlusSign:") = Void, NSString;
overload selector("setPositiveFormat:") = Void, NSString;
overload selector("setPositiveInfinitySymbol:") = Void, NSString;
overload selector("setPositivePrefix:") = Void, NSString;
overload selector("setPositiveSuffix:") = Void, NSString;
overload selector("setPreferredFilename:") = Void, NSString;
overload selector("setProcessName:") = Void, NSString;
overload selector("setProperty:forKey:") = Bool, Id, NSString;
overload selector("setProperty:forKey:inRequest:") = Void, Id, NSString, NSMutableURLRequest;
overload selector("setQuarter:") = Void, Int;
overload selector("setQuarterSymbols:") = Void, NSArray;
overload selector("setQueuePriority:") = Void, Int;
overload selector("setResourceValue:forKey:error:") = Bool, Id, NSString, Pointer[NSError];
overload selector("setResourceValues:error:") = Bool, NSDictionary, Pointer[NSError];
overload selector("setReturnValue:") = Void, RawPointer;
overload selector("setRoundingIncrement:") = Void, NSNumber;
overload selector("setRoundingMode:") = Void, UInt;
overload selector("setRunLoopModes:") = Void, NSArray;
overload selector("setScanLocation:") = Void, UInt;
overload selector("setSecond:") = Void, Int;
overload selector("setSecondaryGroupingSize:") = Void, UInt;
overload selector("setSelector:") = Void, SelectorHandle;
overload selector("setSet:") = Void, NSSet;
overload selector("setSharedURLCache:") = Void, NSURLCache;
overload selector("setShortMonthSymbols:") = Void, NSArray;
overload selector("setShortQuarterSymbols:") = Void, NSArray;
overload selector("setShortStandaloneMonthSymbols:") = Void, NSArray;
overload selector("setShortStandaloneQuarterSymbols:") = Void, NSArray;
overload selector("setShortStandaloneWeekdaySymbols:") = Void, NSArray;
overload selector("setShortWeekdaySymbols:") = Void, NSArray;
overload selector("setShouldProcessNamespaces:") = Void, Bool;
overload selector("setShouldReportNamespacePrefixes:") = Void, Bool;
overload selector("setShouldResolveExternalEntities:") = Void, Bool;
overload selector("setStackSize:") = Void, UInt;
overload selector("setStandaloneMonthSymbols:") = Void, NSArray;
overload selector("setStandaloneQuarterSymbols:") = Void, NSArray;
overload selector("setStandaloneWeekdaySymbols:") = Void, NSArray;
overload selector("setString:") = Void, NSString;
overload selector("setSuspended:") = Void, Bool;
overload selector("setTXTRecordData:") = Bool, NSData;
overload selector("setTarget:") = Void, Id;
overload selector("setTextAttributesForNegativeInfinity:") = Void, NSDictionary;
overload selector("setTextAttributesForNegativeValues:") = Void, NSDictionary;
overload selector("setTextAttributesForNil:") = Void, NSDictionary;
overload selector("setTextAttributesForNotANumber:") = Void, NSDictionary;
overload selector("setTextAttributesForPositiveInfinity:") = Void, NSDictionary;
overload selector("setTextAttributesForPositiveValues:") = Void, NSDictionary;
overload selector("setTextAttributesForZero:") = Void, NSDictionary;
overload selector("setThreadPriority:") = Bool, Double;
overload selector("setTimeStyle:") = Void, UInt;
overload selector("setTimeZone:") = Void, NSTimeZone;
overload selector("setTimeoutInterval:") = Void, Double;
overload selector("setTotalCostLimit:") = Void, UInt;
overload selector("setTwoDigitStartDate:") = Void, NSDate;
overload selector("setURL:") = Void, NSURL;
overload selector("setURL:forKey:") = Void, NSURL, NSString;
overload selector("setUsesGroupingSeparator:") = Void, Bool;
overload selector("setUsesSignificantDigits:") = Void, Bool;
overload selector("setValue:forHTTPHeaderField:") = Void, NSString, NSString;
overload selector("setValue:forKey:") = Void, Id, NSString;
overload selector("setValue:forKeyPath:") = Void, Id, NSString;
overload selector("setValue:forUndefinedKey:") = Void, Id, NSString;
overload selector("setValueTransformer:forName:") = Void, NSValueTransformer, NSString;
overload selector("setValuesForKeysWithDictionary:") = Void, NSDictionary;
overload selector("setVersion:") = Void, Int;
overload selector("setVeryShortMonthSymbols:") = Void, NSArray;
overload selector("setVeryShortStandaloneMonthSymbols:") = Void, NSArray;
overload selector("setVeryShortStandaloneWeekdaySymbols:") = Void, NSArray;
overload selector("setVeryShortWeekdaySymbols:") = Void, NSArray;
overload selector("setVolatileDomain:forName:") = Void, NSDictionary, NSString;
overload selector("setWeek:") = Void, Int;
overload selector("setWeekday:") = Void, Int;
overload selector("setWeekdayOrdinal:") = Void, Int;
overload selector("setWeekdaySymbols:") = Void, NSArray;
overload selector("setWithArray:") = Id, NSArray;
overload selector("setWithCapacity:") = Id, UInt;
overload selector("setWithObject:") = Id, Id;
overload varargSelector("setWithObjects:") = Id, Id;
overload selector("setWithObjects:count:") = Id, Pointer[Id], UInt;
overload selector("setWithSet:") = Id, NSSet;
overload selector("setYear:") = Void, Int;
overload selector("setZeroSymbol:") = Void, NSString;
overload selector("sharedCredentialStorage") = NSURLCredentialStorage;
overload selector("sharedFrameworksPath") = NSString;
overload selector("sharedFrameworksURL") = NSURL;
overload selector("sharedHTTPCookieStorage") = NSHTTPCookieStorage;
overload selector("sharedSupportPath") = NSString;
overload selector("sharedSupportURL") = NSURL;
overload selector("sharedURLCache") = NSURLCache;
overload selector("shiftIndexesStartingAtIndex:by:") = Void, UInt, Int;
overload selector("shortMonthSymbols") = NSArray;
overload selector("shortQuarterSymbols") = NSArray;
overload selector("shortStandaloneMonthSymbols") = NSArray;
overload selector("shortStandaloneQuarterSymbols") = NSArray;
overload selector("shortStandaloneWeekdaySymbols") = NSArray;
overload selector("shortValue") = Short;
overload selector("shortWeekdaySymbols") = NSArray;
overload selector("shouldProcessNamespaces") = Bool;
overload selector("shouldReportNamespacePrefixes") = Bool;
overload selector("shouldResolveExternalEntities") = Bool;
overload selector("signal") = Void;
overload selector("signatureWithObjCTypes:") = NSMethodSignature, Pointer[CChar];
overload selector("skipDescendants") = Void;
overload selector("skipDescendents") = Void;
overload selector("sleepForTimeInterval:") = Void, Double;
overload selector("sleepUntilDate:") = Void, NSDate;
overload selector("smallestEncoding") = UInt;
overload selector("sortDescriptorWithKey:ascending:") = Id, NSString, Bool;
overload selector("sortDescriptorWithKey:ascending:comparator:") = Id, NSString, Bool, NSComparator;
overload selector("sortDescriptorWithKey:ascending:selector:") = Id, NSString, Bool, SelectorHandle;
overload selector("sortUsingComparator:") = Void, NSComparator;
overload selector("sortUsingDescriptors:") = Void, NSArray;
overload selector("sortUsingFunction:context:") = Void, CCodePointer[[Id,Id,RawPointer],[Int]], RawPointer;
overload selector("sortUsingSelector:") = Void, SelectorHandle;
overload selector("sortWithOptions:usingComparator:") = Void, UInt, NSComparator;
overload selector("sortedArrayHint") = NSData;
overload selector("sortedArrayUsingComparator:") = NSArray, NSComparator;
overload selector("sortedArrayUsingDescriptors:") = NSArray, NSArray;
overload selector("sortedArrayUsingFunction:context:") = NSArray, CCodePointer[[Id,Id,RawPointer],[Int]], RawPointer;
overload selector("sortedArrayUsingFunction:context:hint:") = NSArray, CCodePointer[[Id,Id,RawPointer],[Int]], RawPointer, NSData;
overload selector("sortedArrayUsingSelector:") = NSArray, SelectorHandle;
overload selector("sortedArrayWithOptions:usingComparator:") = NSArray, UInt, NSComparator;
overload selector("spellCheckingResultWithRange:") = NSTextCheckingResult, NSRange;
overload selector("stackSize") = UInt;
overload selector("standaloneMonthSymbols") = NSArray;
overload selector("standaloneQuarterSymbols") = NSArray;
overload selector("standaloneWeekdaySymbols") = NSArray;
overload selector("standardUserDefaults") = NSUserDefaults;
overload selector("standardizedURL") = NSURL;
overload selector("start") = Void;
overload selector("startLoading") = Void;
overload selector("startMonitoring") = Void;
overload selector("statusCode") = Int;
overload selector("stop") = Void;
overload selector("stopLoading") = Void;
overload selector("stopMonitoring") = Void;
overload selector("storagePolicy") = UInt;
overload selector("storeCachedResponse:forRequest:") = Void, NSCachedURLResponse, NSURLRequest;
overload selector("stream:handleEvent:") = Void, NSStream, UInt;
overload selector("streamError") = NSError;
overload selector("streamStatus") = UInt;
overload selector("string") = Id;
overload selector("stringArrayForKey:") = NSArray, NSString;
overload selector("stringByAbbreviatingWithTildeInPath") = NSString;
overload selector("stringByAddingPercentEscapesUsingEncoding:") = NSString, UInt;
overload varargSelector("stringByAppendingFormat:") = NSString, NSString;
overload selector("stringByAppendingPathComponent:") = NSString, NSString;
overload selector("stringByAppendingPathExtension:") = NSString, NSString;
overload selector("stringByAppendingString:") = NSString, NSString;
overload selector("stringByDeletingLastPathComponent") = NSString;
overload selector("stringByDeletingPathExtension") = NSString;
overload selector("stringByExpandingTildeInPath") = NSString;
overload selector("stringByFoldingWithOptions:locale:") = NSString, UInt, NSLocale;
overload selector("stringByPaddingToLength:withString:startingAtIndex:") = NSString, UInt, NSString, UInt;
overload selector("stringByReplacingCharactersInRange:withString:") = NSString, NSRange, NSString;
overload selector("stringByReplacingMatchesInString:options:range:withTemplate:") = NSString, NSString, UInt, NSRange, NSString;
overload selector("stringByReplacingOccurrencesOfString:withString:") = NSString, NSString, NSString;
overload selector("stringByReplacingOccurrencesOfString:withString:options:range:") = NSString, NSString, NSString, UInt, NSRange;
overload selector("stringByReplacingPercentEscapesUsingEncoding:") = NSString, UInt;
overload selector("stringByResolvingSymlinksInPath") = NSString;
overload selector("stringByStandardizingPath") = NSString;
overload selector("stringByTrimmingCharactersInSet:") = NSString, NSCharacterSet;
overload selector("stringForKey:") = NSString, NSString;
overload selector("stringForObjectValue:") = NSString, Id;
overload selector("stringFromDate:") = NSString, NSDate;
overload selector("stringFromNumber:") = NSString, NSNumber;
overload selector("stringValue") = NSString;
overload selector("stringWithCString:") = Id, Pointer[CChar];
overload selector("stringWithCString:encoding:") = Id, Pointer[CChar], UInt;
overload selector("stringWithCString:length:") = Id, Pointer[CChar], UInt;
overload selector("stringWithCapacity:") = Id, UInt;
overload selector("stringWithCharacters:length:") = Id, Pointer[UShort], UInt;
overload selector("stringWithContentsOfFile:") = Id, NSString;
overload selector("stringWithContentsOfFile:encoding:error:") = Id, NSString, UInt, Pointer[NSError];
overload selector("stringWithContentsOfFile:usedEncoding:error:") = Id, NSString, Pointer[UInt], Pointer[NSError];
overload selector("stringWithContentsOfURL:") = Id, NSURL;
overload selector("stringWithContentsOfURL:encoding:error:") = Id, NSURL, UInt, Pointer[NSError];
overload selector("stringWithContentsOfURL:usedEncoding:error:") = Id, NSURL, Pointer[UInt], Pointer[NSError];
overload selector("stringWithFileSystemRepresentation:length:") = NSString, Pointer[CChar], UInt;
overload varargSelector("stringWithFormat:") = Id, NSString;
overload selector("stringWithString:") = Id, NSString;
overload selector("stringWithUTF8String:") = Id, Pointer[CChar];
overload selector("stringsByAppendingPaths:") = NSArray, NSArray;
overload selector("subarrayWithRange:") = NSArray, NSRange;
overload selector("subdataWithRange:") = NSData, NSRange;
overload selector("subpathsAtPath:") = NSArray, NSString;
overload selector("subpathsOfDirectoryAtPath:error:") = NSArray, NSString, Pointer[NSError];
overload selector("subpredicates") = NSArray;
overload selector("substringFromIndex:") = NSString, UInt;
overload selector("substringToIndex:") = NSString, UInt;
overload selector("substringWithRange:") = NSString, NSRange;
overload selector("suggestedFilename") = NSString;
overload selector("superclass") = Id;
overload selector("symbolCharacterSet") = Id;
overload selector("symbolicLinkDestination") = NSString;
overload selector("symbolicLinkDestinationURL") = NSURL;
overload selector("synchronize") = Bool;
overload selector("synchronizeFile") = Void;
overload selector("systemID") = NSString;
overload selector("systemLocale") = Id;
overload selector("systemTimeZone") = NSTimeZone;
overload selector("systemUptime") = Double;
overload selector("systemVersion") = UInt;
overload selector("target") = Id;
overload selector("textAttributesForNegativeInfinity") = NSDictionary;
overload selector("textAttributesForNegativeValues") = NSDictionary;
overload selector("textAttributesForNil") = NSDictionary;
overload selector("textAttributesForNotANumber") = NSDictionary;
overload selector("textAttributesForPositiveInfinity") = NSDictionary;
overload selector("textAttributesForPositiveValues") = NSDictionary;
overload selector("textAttributesForZero") = NSDictionary;
overload selector("textEncodingName") = NSString;
overload selector("threadDictionary") = NSMutableDictionary;
overload selector("threadPriority") = Double;
overload selector("timeInterval") = Double;
overload selector("timeIntervalSince1970") = Double;
overload selector("timeIntervalSinceDate:") = Double, NSDate;
overload selector("timeIntervalSinceNow") = Double;
overload selector("timeIntervalSinceReferenceDate") = Double;
overload selector("timeStyle") = UInt;
overload selector("timeZone") = NSTimeZone;
overload selector("timeZoneDataVersion") = NSString;
overload selector("timeZoneForSecondsFromGMT:") = Id, Int;
overload selector("timeZoneWithAbbreviation:") = Id, NSString;
overload selector("timeZoneWithName:") = Id, NSString;
overload selector("timeZoneWithName:data:") = Id, NSString, NSData;
overload selector("timeoutInterval") = Double;
overload selector("timerWithTimeInterval:invocation:repeats:") = NSTimer, Double, NSInvocation, Bool;
overload selector("timerWithTimeInterval:target:selector:userInfo:repeats:") = NSTimer, Double, Id, SelectorHandle, Id, Bool;
overload selector("totalCostLimit") = UInt;
overload selector("transformedValue:") = Id, Id;
overload selector("transformedValueClass") = Id;
overload selector("transitInformationCheckingResultWithRange:components:") = NSTextCheckingResult, NSRange, NSDictionary;
overload selector("truncateFileAtOffset:") = Void, UInt64;
overload selector("tryLock") = Bool;
overload selector("tryLockWhenCondition:") = Bool, Int;
overload selector("twoDigitStartDate") = NSDate;
overload selector("type") = NSString;
overload selector("unarchiveObjectWithData:") = Id, NSData;
overload selector("unarchiveObjectWithFile:") = Id, NSString;
overload selector("unarchiver:cannotDecodeObjectOfClassName:originalClasses:") = Id, NSKeyedUnarchiver, NSString, NSArray;
overload selector("unarchiver:didDecodeObject:") = Id, NSKeyedUnarchiver, Id;
overload selector("unarchiver:willReplaceObject:withObject:") = Void, NSKeyedUnarchiver, Id, Id;
overload selector("unarchiverDidFinish:") = Void, NSKeyedUnarchiver;
overload selector("unarchiverWillFinish:") = Void, NSKeyedUnarchiver;
overload selector("undo") = Void;
overload selector("undoActionName") = NSString;
overload selector("undoMenuItemTitle") = NSString;
overload selector("undoMenuTitleForUndoActionName:") = NSString, NSString;
overload selector("undoNestedGroup") = Void;
overload selector("unionSet:") = Void, NSSet;
overload selector("unload") = Bool;
overload selector("unlock") = Void;
overload selector("unlockWithCondition:") = Void, Int;
overload selector("unregisterClass:") = Void, Id;
overload selector("unscheduleFromRunLoop:forMode:") = Void, NSRunLoop, NSString;
overload selector("unsignedCharValue") = CUChar;
overload selector("unsignedIntValue") = UInt;
overload selector("unsignedIntegerValue") = UInt;
overload selector("unsignedLongLongValue") = UInt64;
overload selector("unsignedLongValue") = CULong;
overload selector("unsignedShortValue") = UShort;
overload selector("updateFromPath:") = Bool, NSString;
overload selector("uppercaseLetterCharacterSet") = Id;
overload selector("uppercaseString") = NSString;
overload selector("useCredential:forAuthenticationChallenge:") = Void, NSURLCredential, NSURLAuthenticationChallenge;
overload selector("user") = NSString;
overload selector("userInfo") = Id;
overload selector("usesGroupingSeparator") = Bool;
overload selector("usesSignificantDigits") = Bool;
overload selector("validateValue:forKey:error:") = Bool, Pointer[Id], NSString, Pointer[NSError];
overload selector("validateValue:forKeyPath:error:") = Bool, Pointer[Id], NSString, Pointer[NSError];
overload selector("value") = NSString;
overload selector("value:withObjCType:") = NSValue, RawPointer, Pointer[CChar];
overload selector("valueForHTTPHeaderField:") = NSString, NSString;
overload selector("valueForKey:") = Id, NSString;
overload selector("valueForKeyPath:") = Id, NSString;
overload selector("valueForUndefinedKey:") = Id, NSString;
overload selector("valueTransformerForName:") = NSValueTransformer, NSString;
overload selector("valueTransformerNames") = NSArray;
overload selector("valueWithBytes:objCType:") = NSValue, RawPointer, Pointer[CChar];
overload selector("valueWithNonretainedObject:") = NSValue, Id;
overload selector("valueWithPointer:") = NSValue, RawPointer;
overload selector("valueWithRange:") = NSValue, NSRange;
overload selector("variable") = NSString;
overload selector("version") = Int;
overload selector("versionForClassName:") = Int, NSString;
overload selector("veryShortMonthSymbols") = NSArray;
overload selector("veryShortStandaloneMonthSymbols") = NSArray;
overload selector("veryShortStandaloneWeekdaySymbols") = NSArray;
overload selector("veryShortWeekdaySymbols") = NSArray;
overload selector("volatileDomainForName:") = NSDictionary, NSString;
overload selector("volatileDomainNames") = NSArray;
overload selector("wait") = Void;
overload selector("waitForDataInBackgroundAndNotify") = Void;
overload selector("waitForDataInBackgroundAndNotifyForModes:") = Void, NSArray;
overload selector("waitUntilAllOperationsAreFinished") = Void;
overload selector("waitUntilDate:") = Bool, NSDate;
overload selector("waitUntilFinished") = Void;
overload selector("week") = Int;
overload selector("weekday") = Int;
overload selector("weekdayOrdinal") = Int;
overload selector("weekdaySymbols") = NSArray;
overload selector("whitespaceAndNewlineCharacterSet") = Id;
overload selector("whitespaceCharacterSet") = Id;
overload selector("willChange:valuesAtIndexes:forKey:") = Void, UInt, NSIndexSet, NSString;
overload selector("willChangeValueForKey:") = Void, NSString;
overload selector("willChangeValueForKey:withSetMutation:usingObjects:") = Void, NSString, UInt, NSSet;
overload selector("windowsLocaleCodeFromLocaleIdentifier:") = UInt, NSString;
overload selector("write:maxLength:") = Int, Pointer[CUChar], UInt;
overload selector("writeBookmarkData:toURL:options:error:") = Bool, NSData, NSURL, UInt, Pointer[NSError];
overload selector("writeData:") = Void, NSData;
overload selector("writePropertyList:toStream:format:options:error:") = Int, Id, NSOutputStream, UInt, UInt, Pointer[NSError];
overload selector("writeToFile:atomically:") = Bool, NSString, Bool;
overload selector("writeToFile:atomically:encoding:error:") = Bool, NSString, Bool, UInt, Pointer[NSError];
overload selector("writeToFile:atomically:updateFilenames:") = Bool, NSString, Bool, Bool;
overload selector("writeToFile:options:error:") = Bool, NSString, UInt, Pointer[NSError];
overload selector("writeToURL:atomically:") = Bool, NSURL, Bool;
overload selector("writeToURL:atomically:encoding:error:") = Bool, NSURL, Bool, UInt, Pointer[NSError];
overload selector("writeToURL:options:error:") = Bool, NSURL, UInt, Pointer[NSError];
overload selector("writeToURL:options:originalContentsURL:error:") = Bool, NSURL, UInt, NSURL, Pointer[NSError];
overload selector("year") = Int;
overload selector("zero") = NSDecimalNumber;
overload selector("zeroSymbol") = NSString;
overload selector("zone") = Pointer[NSZone];

record NSArray = externalClass(NSObject);
overload externalInstanceMethod(#NSArray, "copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#NSArray, "mutableCopyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#NSArray, "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSArray, "initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#NSArray, "countByEnumeratingWithState:objects:count:") = UInt, Pointer[NSFastEnumerationState], Pointer[Id], UInt;
overload externalInstanceMethod(#NSArray, "count") = UInt;
overload externalInstanceMethod(#NSArray, "objectAtIndex:") = Id, UInt;
overload externalInstanceMethod(#NSArray, "arrayByAddingObject:") = NSArray, Id;
overload externalInstanceMethod(#NSArray, "arrayByAddingObjectsFromArray:") = NSArray, NSArray;
overload externalInstanceMethod(#NSArray, "componentsJoinedByString:") = NSString, NSString;
overload externalInstanceMethod(#NSArray, "containsObject:") = Bool, Id;
overload externalInstanceMethod(#NSArray, "description") = NSString;
overload externalInstanceMethod(#NSArray, "descriptionWithLocale:") = NSString, Id;
overload externalInstanceMethod(#NSArray, "descriptionWithLocale:indent:") = NSString, Id, UInt;
overload externalInstanceMethod(#NSArray, "firstObjectCommonWithArray:") = Id, NSArray;
overload externalInstanceMethod(#NSArray, "getObjects:range:") = Void, Pointer[Id], NSRange;
overload externalInstanceMethod(#NSArray, "indexOfObject:") = UInt, Id;
overload externalInstanceMethod(#NSArray, "indexOfObject:inRange:") = UInt, Id, NSRange;
overload externalInstanceMethod(#NSArray, "indexOfObjectIdenticalTo:") = UInt, Id;
overload externalInstanceMethod(#NSArray, "indexOfObjectIdenticalTo:inRange:") = UInt, Id, NSRange;
overload externalInstanceMethod(#NSArray, "isEqualToArray:") = Bool, NSArray;
overload externalInstanceMethod(#NSArray, "lastObject") = Id;
overload externalInstanceMethod(#NSArray, "objectEnumerator") = NSEnumerator;
overload externalInstanceMethod(#NSArray, "reverseObjectEnumerator") = NSEnumerator;
overload externalInstanceMethod(#NSArray, "sortedArrayHint") = NSData;
overload externalInstanceMethod(#NSArray, "sortedArrayUsingFunction:context:") = NSArray, CCodePointer[[Id,Id,RawPointer],[Int]], RawPointer;
overload externalInstanceMethod(#NSArray, "sortedArrayUsingFunction:context:hint:") = NSArray, CCodePointer[[Id,Id,RawPointer],[Int]], RawPointer, NSData;
overload externalInstanceMethod(#NSArray, "sortedArrayUsingSelector:") = NSArray, SelectorHandle;
overload externalInstanceMethod(#NSArray, "subarrayWithRange:") = NSArray, NSRange;
overload externalInstanceMethod(#NSArray, "writeToFile:atomically:") = Bool, NSString, Bool;
overload externalInstanceMethod(#NSArray, "writeToURL:atomically:") = Bool, NSURL, Bool;
overload externalInstanceMethod(#NSArray, "makeObjectsPerformSelector:") = Void, SelectorHandle;
overload externalInstanceMethod(#NSArray, "makeObjectsPerformSelector:withObject:") = Void, SelectorHandle, Id;
overload externalInstanceMethod(#NSArray, "objectsAtIndexes:") = NSArray, NSIndexSet;
overload externalInstanceMethod(#NSArray, "enumerateObjectsUsingBlock:") = Void, UnknownType;
overload externalInstanceMethod(#NSArray, "enumerateObjectsWithOptions:usingBlock:") = Void, UInt, UnknownType;
overload externalInstanceMethod(#NSArray, "enumerateObjectsAtIndexes:options:usingBlock:") = Void, NSIndexSet, UInt, UnknownType;
overload externalInstanceMethod(#NSArray, "indexOfObjectPassingTest:") = UInt, UnknownType;
overload externalInstanceMethod(#NSArray, "indexOfObjectWithOptions:passingTest:") = UInt, UInt, UnknownType;
overload externalInstanceMethod(#NSArray, "indexOfObjectAtIndexes:options:passingTest:") = UInt, NSIndexSet, UInt, UnknownType;
overload externalInstanceMethod(#NSArray, "indexesOfObjectsPassingTest:") = NSIndexSet, UnknownType;
overload externalInstanceMethod(#NSArray, "indexesOfObjectsWithOptions:passingTest:") = NSIndexSet, UInt, UnknownType;
overload externalInstanceMethod(#NSArray, "indexesOfObjectsAtIndexes:options:passingTest:") = NSIndexSet, NSIndexSet, UInt, UnknownType;
overload externalInstanceMethod(#NSArray, "sortedArrayUsingComparator:") = NSArray, NSComparator;
overload externalInstanceMethod(#NSArray, "sortedArrayWithOptions:usingComparator:") = NSArray, UInt, NSComparator;
overload externalInstanceMethod(#NSArray, "indexOfObject:inSortedRange:options:usingComparator:") = UInt, Id, NSRange, UInt, NSComparator;
overload externalClassMethod(#NSArray, "array") = Id;
overload externalClassMethod(#NSArray, "arrayWithObject:") = Id, Id;
overload externalClassMethod(#NSArray, "arrayWithObjects:count:") = Id, Pointer[Id], UInt;
overload externalVarargClassMethod(#NSArray, "arrayWithObjects:") = Id, Id;
overload externalClassMethod(#NSArray, "arrayWithArray:") = Id, NSArray;
overload externalInstanceMethod(#NSArray, "initWithObjects:count:") = Id, Pointer[Id], UInt;
overload externalVarargInstanceMethod(#NSArray, "initWithObjects:") = Id, Id;
overload externalInstanceMethod(#NSArray, "initWithArray:") = Id, NSArray;
overload externalInstanceMethod(#NSArray, "initWithArray:copyItems:") = Id, NSArray, Bool;
overload externalClassMethod(#NSArray, "arrayWithContentsOfFile:") = Id, NSString;
overload externalClassMethod(#NSArray, "arrayWithContentsOfURL:") = Id, NSURL;
overload externalInstanceMethod(#NSArray, "initWithContentsOfFile:") = Id, NSString;
overload externalInstanceMethod(#NSArray, "initWithContentsOfURL:") = Id, NSURL;
overload externalInstanceMethod(#NSArray, "getObjects:") = Void, Pointer[Id];
overload externalInstanceMethod(#NSArray, "pathsMatchingExtensions:") = NSArray, NSArray;
overload externalInstanceMethod(#NSArray, "valueForKey:") = Id, NSString;
overload externalInstanceMethod(#NSArray, "setValue:forKey:") = Void, Id, NSString;
overload externalInstanceMethod(#NSArray, "addObserver:toObjectsAtIndexes:forKeyPath:options:context:") = Void, NSObject, NSIndexSet, NSString, UInt, RawPointer;
overload externalInstanceMethod(#NSArray, "removeObserver:fromObjectsAtIndexes:forKeyPath:") = Void, NSObject, NSIndexSet, NSString;
overload externalInstanceMethod(#NSArray, "addObserver:forKeyPath:options:context:") = Void, NSObject, NSString, UInt, RawPointer;
overload externalInstanceMethod(#NSArray, "removeObserver:forKeyPath:") = Void, NSObject, NSString;
overload externalInstanceMethod(#NSArray, "sortedArrayUsingDescriptors:") = NSArray, NSArray;
overload externalInstanceMethod(#NSArray, "filteredArrayUsingPredicate:") = NSArray, NSPredicate;

record NSAssertionHandler = externalClass(NSObject);
overload externalClassMethod(#NSAssertionHandler, "currentHandler") = NSAssertionHandler;
overload externalVarargInstanceMethod(#NSAssertionHandler, "handleFailureInMethod:object:file:lineNumber:description:") = Void, SelectorHandle, Id, NSString, Int, NSString;
overload externalVarargInstanceMethod(#NSAssertionHandler, "handleFailureInFunction:file:lineNumber:description:") = Void, NSString, NSString, Int, NSString;

record NSAttributedString = externalClass(NSObject);
overload externalInstanceMethod(#NSAttributedString, "copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#NSAttributedString, "mutableCopyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#NSAttributedString, "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSAttributedString, "initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#NSAttributedString, "string") = NSString;
overload externalInstanceMethod(#NSAttributedString, "attributesAtIndex:effectiveRange:") = NSDictionary, UInt, NSRangePointer;
overload externalInstanceMethod(#NSAttributedString, "length") = UInt;
overload externalInstanceMethod(#NSAttributedString, "attribute:atIndex:effectiveRange:") = Id, NSString, UInt, NSRangePointer;
overload externalInstanceMethod(#NSAttributedString, "attributedSubstringFromRange:") = NSAttributedString, NSRange;
overload externalInstanceMethod(#NSAttributedString, "attributesAtIndex:longestEffectiveRange:inRange:") = NSDictionary, UInt, NSRangePointer, NSRange;
overload externalInstanceMethod(#NSAttributedString, "attribute:atIndex:longestEffectiveRange:inRange:") = Id, NSString, UInt, NSRangePointer, NSRange;
overload externalInstanceMethod(#NSAttributedString, "isEqualToAttributedString:") = Bool, NSAttributedString;
overload externalInstanceMethod(#NSAttributedString, "initWithString:") = Id, NSString;
overload externalInstanceMethod(#NSAttributedString, "initWithString:attributes:") = Id, NSString, NSDictionary;
overload externalInstanceMethod(#NSAttributedString, "initWithAttributedString:") = Id, NSAttributedString;
overload externalInstanceMethod(#NSAttributedString, "enumerateAttributesInRange:options:usingBlock:") = Void, NSRange, UInt, UnknownType;
overload externalInstanceMethod(#NSAttributedString, "enumerateAttribute:inRange:options:usingBlock:") = Void, NSString, NSRange, UInt, UnknownType;

record NSAutoreleasePool = externalClass(NSObject);
overload externalClassMethod(#NSAutoreleasePool, "addObject:") = Void, Id;
overload externalInstanceMethod(#NSAutoreleasePool, "addObject:") = Void, Id;
overload externalInstanceMethod(#NSAutoreleasePool, "drain") = Void;

record NSBlockOperation = externalClass(NSOperation);
overload externalClassMethod(#NSBlockOperation, "blockOperationWithBlock:") = Id, UnknownType;
overload externalInstanceMethod(#NSBlockOperation, "addExecutionBlock:") = Void, UnknownType;
overload externalInstanceMethod(#NSBlockOperation, "executionBlocks") = NSArray;

record NSBundle = externalClass(NSObject);
overload externalClassMethod(#NSBundle, "mainBundle") = NSBundle;
overload externalClassMethod(#NSBundle, "bundleWithPath:") = NSBundle, NSString;
overload externalInstanceMethod(#NSBundle, "initWithPath:") = Id, NSString;
overload externalClassMethod(#NSBundle, "bundleWithURL:") = NSBundle, NSURL;
overload externalInstanceMethod(#NSBundle, "initWithURL:") = Id, NSURL;
overload externalClassMethod(#NSBundle, "bundleForClass:") = NSBundle, Id;
overload externalClassMethod(#NSBundle, "bundleWithIdentifier:") = NSBundle, NSString;
overload externalClassMethod(#NSBundle, "allBundles") = NSArray;
overload externalClassMethod(#NSBundle, "allFrameworks") = NSArray;
overload externalInstanceMethod(#NSBundle, "load") = Bool;
overload externalInstanceMethod(#NSBundle, "isLoaded") = Bool;
overload externalInstanceMethod(#NSBundle, "unload") = Bool;
overload externalInstanceMethod(#NSBundle, "preflightAndReturnError:") = Bool, Pointer[NSError];
overload externalInstanceMethod(#NSBundle, "loadAndReturnError:") = Bool, Pointer[NSError];
overload externalInstanceMethod(#NSBundle, "bundleURL") = NSURL;
overload externalInstanceMethod(#NSBundle, "resourceURL") = NSURL;
overload externalInstanceMethod(#NSBundle, "executableURL") = NSURL;
overload externalInstanceMethod(#NSBundle, "URLForAuxiliaryExecutable:") = NSURL, NSString;
overload externalInstanceMethod(#NSBundle, "privateFrameworksURL") = NSURL;
overload externalInstanceMethod(#NSBundle, "sharedFrameworksURL") = NSURL;
overload externalInstanceMethod(#NSBundle, "sharedSupportURL") = NSURL;
overload externalInstanceMethod(#NSBundle, "builtInPlugInsURL") = NSURL;
overload externalInstanceMethod(#NSBundle, "bundlePath") = NSString;
overload externalInstanceMethod(#NSBundle, "resourcePath") = NSString;
overload externalInstanceMethod(#NSBundle, "executablePath") = NSString;
overload externalInstanceMethod(#NSBundle, "pathForAuxiliaryExecutable:") = NSString, NSString;
overload externalInstanceMethod(#NSBundle, "privateFrameworksPath") = NSString;
overload externalInstanceMethod(#NSBundle, "sharedFrameworksPath") = NSString;
overload externalInstanceMethod(#NSBundle, "sharedSupportPath") = NSString;
overload externalInstanceMethod(#NSBundle, "builtInPlugInsPath") = NSString;
overload externalClassMethod(#NSBundle, "URLForResource:withExtension:subdirectory:inBundleWithURL:") = NSURL, NSString, NSString, NSString, NSURL;
overload externalClassMethod(#NSBundle, "URLsForResourcesWithExtension:subdirectory:inBundleWithURL:") = NSArray, NSString, NSString, NSURL;
overload externalInstanceMethod(#NSBundle, "URLForResource:withExtension:") = NSURL, NSString, NSString;
overload externalInstanceMethod(#NSBundle, "URLForResource:withExtension:subdirectory:") = NSURL, NSString, NSString, NSString;
overload externalInstanceMethod(#NSBundle, "URLForResource:withExtension:subdirectory:localization:") = NSURL, NSString, NSString, NSString, NSString;
overload externalInstanceMethod(#NSBundle, "URLsForResourcesWithExtension:subdirectory:") = NSArray, NSString, NSString;
overload externalInstanceMethod(#NSBundle, "URLsForResourcesWithExtension:subdirectory:localization:") = NSArray, NSString, NSString, NSString;
overload externalClassMethod(#NSBundle, "pathForResource:ofType:inDirectory:") = NSString, NSString, NSString, NSString;
overload externalClassMethod(#NSBundle, "pathsForResourcesOfType:inDirectory:") = NSArray, NSString, NSString;
overload externalInstanceMethod(#NSBundle, "pathForResource:ofType:") = NSString, NSString, NSString;
overload externalInstanceMethod(#NSBundle, "pathForResource:ofType:inDirectory:") = NSString, NSString, NSString, NSString;
overload externalInstanceMethod(#NSBundle, "pathForResource:ofType:inDirectory:forLocalization:") = NSString, NSString, NSString, NSString, NSString;
overload externalInstanceMethod(#NSBundle, "pathsForResourcesOfType:inDirectory:") = NSArray, NSString, NSString;
overload externalInstanceMethod(#NSBundle, "pathsForResourcesOfType:inDirectory:forLocalization:") = NSArray, NSString, NSString, NSString;
overload externalInstanceMethod(#NSBundle, "localizedStringForKey:value:table:") = NSString, NSString, NSString, NSString;
overload externalInstanceMethod(#NSBundle, "bundleIdentifier") = NSString;
overload externalInstanceMethod(#NSBundle, "infoDictionary") = NSDictionary;
overload externalInstanceMethod(#NSBundle, "localizedInfoDictionary") = NSDictionary;
overload externalInstanceMethod(#NSBundle, "objectForInfoDictionaryKey:") = Id, NSString;
overload externalInstanceMethod(#NSBundle, "classNamed:") = Id, NSString;
overload externalInstanceMethod(#NSBundle, "principalClass") = Id;
overload externalInstanceMethod(#NSBundle, "localizations") = NSArray;
overload externalInstanceMethod(#NSBundle, "preferredLocalizations") = NSArray;
overload externalInstanceMethod(#NSBundle, "developmentLocalization") = NSString;
overload externalClassMethod(#NSBundle, "preferredLocalizationsFromArray:") = NSArray, NSArray;
overload externalClassMethod(#NSBundle, "preferredLocalizationsFromArray:forPreferences:") = NSArray, NSArray, NSArray;
overload externalInstanceMethod(#NSBundle, "executableArchitectures") = NSArray;

record NSCache = externalClass(NSObject);
overload externalInstanceMethod(#NSCache, "setName:") = Void, NSString;
overload externalInstanceMethod(#NSCache, "name") = NSString;
overload externalInstanceMethod(#NSCache, "setDelegate:") = Void, Id;
overload externalInstanceMethod(#NSCache, "delegate") = Id;
overload externalInstanceMethod(#NSCache, "objectForKey:") = Id, Id;
overload externalInstanceMethod(#NSCache, "setObject:forKey:") = Void, Id, Id;
overload externalInstanceMethod(#NSCache, "setObject:forKey:cost:") = Void, Id, Id, UInt;
overload externalInstanceMethod(#NSCache, "removeObjectForKey:") = Void, Id;
overload externalInstanceMethod(#NSCache, "removeAllObjects") = Void;
overload externalInstanceMethod(#NSCache, "setTotalCostLimit:") = Void, UInt;
overload externalInstanceMethod(#NSCache, "totalCostLimit") = UInt;
overload externalInstanceMethod(#NSCache, "setCountLimit:") = Void, UInt;
overload externalInstanceMethod(#NSCache, "countLimit") = UInt;
overload externalInstanceMethod(#NSCache, "evictsObjectsWithDiscardedContent") = Bool;
overload externalInstanceMethod(#NSCache, "setEvictsObjectsWithDiscardedContent:") = Void, Bool;

record NSCachedURLResponse = externalClass(NSObject);
overload externalInstanceMethod(#NSCachedURLResponse, "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSCachedURLResponse, "initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#NSCachedURLResponse, "copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#NSCachedURLResponse, "initWithResponse:data:") = Id, NSURLResponse, NSData;
overload externalInstanceMethod(#NSCachedURLResponse, "initWithResponse:data:userInfo:storagePolicy:") = Id, NSURLResponse, NSData, NSDictionary, UInt;
overload externalInstanceMethod(#NSCachedURLResponse, "response") = NSURLResponse;
overload externalInstanceMethod(#NSCachedURLResponse, "data") = NSData;
overload externalInstanceMethod(#NSCachedURLResponse, "userInfo") = NSDictionary;
overload externalInstanceMethod(#NSCachedURLResponse, "storagePolicy") = UInt;

record NSCalendar = externalClass(NSObject);
overload externalInstanceMethod(#NSCalendar, "copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#NSCalendar, "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSCalendar, "initWithCoder:") = Id, NSCoder;
overload externalClassMethod(#NSCalendar, "currentCalendar") = Id;
overload externalClassMethod(#NSCalendar, "autoupdatingCurrentCalendar") = Id;
overload externalInstanceMethod(#NSCalendar, "initWithCalendarIdentifier:") = Id, NSString;
overload externalInstanceMethod(#NSCalendar, "calendarIdentifier") = NSString;
overload externalInstanceMethod(#NSCalendar, "setLocale:") = Void, NSLocale;
overload externalInstanceMethod(#NSCalendar, "locale") = NSLocale;
overload externalInstanceMethod(#NSCalendar, "setTimeZone:") = Void, NSTimeZone;
overload externalInstanceMethod(#NSCalendar, "timeZone") = NSTimeZone;
overload externalInstanceMethod(#NSCalendar, "setFirstWeekday:") = Void, UInt;
overload externalInstanceMethod(#NSCalendar, "firstWeekday") = UInt;
overload externalInstanceMethod(#NSCalendar, "setMinimumDaysInFirstWeek:") = Void, UInt;
overload externalInstanceMethod(#NSCalendar, "minimumDaysInFirstWeek") = UInt;
overload externalInstanceMethod(#NSCalendar, "minimumRangeOfUnit:") = NSRange, UInt;
overload externalInstanceMethod(#NSCalendar, "maximumRangeOfUnit:") = NSRange, UInt;
overload externalInstanceMethod(#NSCalendar, "rangeOfUnit:inUnit:forDate:") = NSRange, UInt, UInt, NSDate;
overload externalInstanceMethod(#NSCalendar, "ordinalityOfUnit:inUnit:forDate:") = UInt, UInt, UInt, NSDate;
overload externalInstanceMethod(#NSCalendar, "rangeOfUnit:startDate:interval:forDate:") = Bool, UInt, Pointer[NSDate], Pointer[Double], NSDate;
overload externalInstanceMethod(#NSCalendar, "dateFromComponents:") = NSDate, NSDateComponents;
overload externalInstanceMethod(#NSCalendar, "components:fromDate:") = NSDateComponents, UInt, NSDate;
overload externalInstanceMethod(#NSCalendar, "dateByAddingComponents:toDate:options:") = NSDate, NSDateComponents, NSDate, UInt;
overload externalInstanceMethod(#NSCalendar, "components:fromDate:toDate:options:") = NSDateComponents, UInt, NSDate, NSDate, UInt;

record NSCharacterSet = externalClass(NSObject);
overload externalInstanceMethod(#NSCharacterSet, "copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#NSCharacterSet, "mutableCopyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#NSCharacterSet, "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSCharacterSet, "initWithCoder:") = Id, NSCoder;
overload externalClassMethod(#NSCharacterSet, "controlCharacterSet") = Id;
overload externalClassMethod(#NSCharacterSet, "whitespaceCharacterSet") = Id;
overload externalClassMethod(#NSCharacterSet, "whitespaceAndNewlineCharacterSet") = Id;
overload externalClassMethod(#NSCharacterSet, "decimalDigitCharacterSet") = Id;
overload externalClassMethod(#NSCharacterSet, "letterCharacterSet") = Id;
overload externalClassMethod(#NSCharacterSet, "lowercaseLetterCharacterSet") = Id;
overload externalClassMethod(#NSCharacterSet, "uppercaseLetterCharacterSet") = Id;
overload externalClassMethod(#NSCharacterSet, "nonBaseCharacterSet") = Id;
overload externalClassMethod(#NSCharacterSet, "alphanumericCharacterSet") = Id;
overload externalClassMethod(#NSCharacterSet, "decomposableCharacterSet") = Id;
overload externalClassMethod(#NSCharacterSet, "illegalCharacterSet") = Id;
overload externalClassMethod(#NSCharacterSet, "punctuationCharacterSet") = Id;
overload externalClassMethod(#NSCharacterSet, "capitalizedLetterCharacterSet") = Id;
overload externalClassMethod(#NSCharacterSet, "symbolCharacterSet") = Id;
overload externalClassMethod(#NSCharacterSet, "newlineCharacterSet") = Id;
overload externalClassMethod(#NSCharacterSet, "characterSetWithRange:") = Id, NSRange;
overload externalClassMethod(#NSCharacterSet, "characterSetWithCharactersInString:") = Id, NSString;
overload externalClassMethod(#NSCharacterSet, "characterSetWithBitmapRepresentation:") = Id, NSData;
overload externalClassMethod(#NSCharacterSet, "characterSetWithContentsOfFile:") = Id, NSString;
overload externalInstanceMethod(#NSCharacterSet, "characterIsMember:") = Bool, UShort;
overload externalInstanceMethod(#NSCharacterSet, "bitmapRepresentation") = NSData;
overload externalInstanceMethod(#NSCharacterSet, "invertedSet") = NSCharacterSet;
overload externalInstanceMethod(#NSCharacterSet, "longCharacterIsMember:") = Bool, CULong;
overload externalInstanceMethod(#NSCharacterSet, "isSupersetOfSet:") = Bool, NSCharacterSet;
overload externalInstanceMethod(#NSCharacterSet, "hasMemberInPlane:") = Bool, CUChar;

record NSCoder = externalClass(NSObject);
overload externalInstanceMethod(#NSCoder, "encodeValueOfObjCType:at:") = Void, Pointer[CChar], RawPointer;
overload externalInstanceMethod(#NSCoder, "encodeDataObject:") = Void, NSData;
overload externalInstanceMethod(#NSCoder, "decodeValueOfObjCType:at:") = Void, Pointer[CChar], RawPointer;
overload externalInstanceMethod(#NSCoder, "decodeDataObject") = NSData;
overload externalInstanceMethod(#NSCoder, "versionForClassName:") = Int, NSString;
overload externalInstanceMethod(#NSCoder, "encodeObject:") = Void, Id;
overload externalInstanceMethod(#NSCoder, "encodeRootObject:") = Void, Id;
overload externalInstanceMethod(#NSCoder, "encodeBycopyObject:") = Void, Id;
overload externalInstanceMethod(#NSCoder, "encodeByrefObject:") = Void, Id;
overload externalInstanceMethod(#NSCoder, "encodeConditionalObject:") = Void, Id;
overload externalVarargInstanceMethod(#NSCoder, "encodeValuesOfObjCTypes:") = Void, Pointer[CChar];
overload externalInstanceMethod(#NSCoder, "encodeArrayOfObjCType:count:at:") = Void, Pointer[CChar], UInt, RawPointer;
overload externalInstanceMethod(#NSCoder, "encodeBytes:length:") = Void, RawPointer, UInt;
overload externalInstanceMethod(#NSCoder, "decodeObject") = Id;
overload externalVarargInstanceMethod(#NSCoder, "decodeValuesOfObjCTypes:") = Void, Pointer[CChar];
overload externalInstanceMethod(#NSCoder, "decodeArrayOfObjCType:count:at:") = Void, Pointer[CChar], UInt, RawPointer;
overload externalInstanceMethod(#NSCoder, "decodeBytesWithReturnedLength:") = RawPointer, Pointer[UInt];
overload externalInstanceMethod(#NSCoder, "setObjectZone:") = Void, Pointer[NSZone];
overload externalInstanceMethod(#NSCoder, "objectZone") = Pointer[NSZone];
overload externalInstanceMethod(#NSCoder, "systemVersion") = UInt;
overload externalInstanceMethod(#NSCoder, "allowsKeyedCoding") = Bool;
overload externalInstanceMethod(#NSCoder, "encodeObject:forKey:") = Void, Id, NSString;
overload externalInstanceMethod(#NSCoder, "encodeConditionalObject:forKey:") = Void, Id, NSString;
overload externalInstanceMethod(#NSCoder, "encodeBool:forKey:") = Void, Bool, NSString;
overload externalInstanceMethod(#NSCoder, "encodeInt:forKey:") = Void, Int, NSString;
overload externalInstanceMethod(#NSCoder, "encodeInt32:forKey:") = Void, Int, NSString;
overload externalInstanceMethod(#NSCoder, "encodeInt64:forKey:") = Void, Int64, NSString;
overload externalInstanceMethod(#NSCoder, "encodeFloat:forKey:") = Void, Float, NSString;
overload externalInstanceMethod(#NSCoder, "encodeDouble:forKey:") = Void, Double, NSString;
overload externalInstanceMethod(#NSCoder, "encodeBytes:length:forKey:") = Void, Pointer[CUChar], UInt, NSString;
overload externalInstanceMethod(#NSCoder, "containsValueForKey:") = Bool, NSString;
overload externalInstanceMethod(#NSCoder, "decodeObjectForKey:") = Id, NSString;
overload externalInstanceMethod(#NSCoder, "decodeBoolForKey:") = Bool, NSString;
overload externalInstanceMethod(#NSCoder, "decodeIntForKey:") = Int, NSString;
overload externalInstanceMethod(#NSCoder, "decodeInt32ForKey:") = Int, NSString;
overload externalInstanceMethod(#NSCoder, "decodeInt64ForKey:") = Int64, NSString;
overload externalInstanceMethod(#NSCoder, "decodeFloatForKey:") = Float, NSString;
overload externalInstanceMethod(#NSCoder, "decodeDoubleForKey:") = Double, NSString;
overload externalInstanceMethod(#NSCoder, "decodeBytesForKey:returnedLength:") = Pointer[CUChar], NSString, Pointer[UInt];
overload externalInstanceMethod(#NSCoder, "encodeInteger:forKey:") = Void, Int, NSString;
overload externalInstanceMethod(#NSCoder, "decodeIntegerForKey:") = Int, NSString;

record NSComparisonPredicate = externalClass(NSPredicate);
overload externalClassMethod(#NSComparisonPredicate, "predicateWithLeftExpression:rightExpression:modifier:type:options:") = NSPredicate, NSExpression, NSExpression, UInt, UInt, UInt;
overload externalClassMethod(#NSComparisonPredicate, "predicateWithLeftExpression:rightExpression:customSelector:") = NSPredicate, NSExpression, NSExpression, SelectorHandle;
overload externalInstanceMethod(#NSComparisonPredicate, "initWithLeftExpression:rightExpression:modifier:type:options:") = Id, NSExpression, NSExpression, UInt, UInt, UInt;
overload externalInstanceMethod(#NSComparisonPredicate, "initWithLeftExpression:rightExpression:customSelector:") = Id, NSExpression, NSExpression, SelectorHandle;
overload externalInstanceMethod(#NSComparisonPredicate, "predicateOperatorType") = UInt;
overload externalInstanceMethod(#NSComparisonPredicate, "comparisonPredicateModifier") = UInt;
overload externalInstanceMethod(#NSComparisonPredicate, "leftExpression") = NSExpression;
overload externalInstanceMethod(#NSComparisonPredicate, "rightExpression") = NSExpression;
overload externalInstanceMethod(#NSComparisonPredicate, "customSelector") = SelectorHandle;
overload externalInstanceMethod(#NSComparisonPredicate, "options") = UInt;

record NSCompoundPredicate = externalClass(NSPredicate);
overload externalInstanceMethod(#NSCompoundPredicate, "initWithType:subpredicates:") = Id, UInt, NSArray;
overload externalInstanceMethod(#NSCompoundPredicate, "compoundPredicateType") = UInt;
overload externalInstanceMethod(#NSCompoundPredicate, "subpredicates") = NSArray;
overload externalClassMethod(#NSCompoundPredicate, "andPredicateWithSubpredicates:") = NSPredicate, NSArray;
overload externalClassMethod(#NSCompoundPredicate, "orPredicateWithSubpredicates:") = NSPredicate, NSArray;
overload externalClassMethod(#NSCompoundPredicate, "notPredicateWithSubpredicate:") = NSPredicate, NSPredicate;

record NSCondition = externalClass(NSObject);
overload externalInstanceMethod(#NSCondition, "lock") = Void;
overload externalInstanceMethod(#NSCondition, "unlock") = Void;
overload externalInstanceMethod(#NSCondition, "wait") = Void;
overload externalInstanceMethod(#NSCondition, "waitUntilDate:") = Bool, NSDate;
overload externalInstanceMethod(#NSCondition, "signal") = Void;
overload externalInstanceMethod(#NSCondition, "broadcast") = Void;
overload externalInstanceMethod(#NSCondition, "setName:") = Void, NSString;
overload externalInstanceMethod(#NSCondition, "name") = NSString;

record NSConditionLock = externalClass(NSObject);
overload externalInstanceMethod(#NSConditionLock, "lock") = Void;
overload externalInstanceMethod(#NSConditionLock, "unlock") = Void;
overload externalInstanceMethod(#NSConditionLock, "initWithCondition:") = Id, Int;
overload externalInstanceMethod(#NSConditionLock, "condition") = Int;
overload externalInstanceMethod(#NSConditionLock, "lockWhenCondition:") = Void, Int;
overload externalInstanceMethod(#NSConditionLock, "tryLock") = Bool;
overload externalInstanceMethod(#NSConditionLock, "tryLockWhenCondition:") = Bool, Int;
overload externalInstanceMethod(#NSConditionLock, "unlockWithCondition:") = Void, Int;
overload externalInstanceMethod(#NSConditionLock, "lockBeforeDate:") = Bool, NSDate;
overload externalInstanceMethod(#NSConditionLock, "lockWhenCondition:beforeDate:") = Bool, Int, NSDate;
overload externalInstanceMethod(#NSConditionLock, "setName:") = Void, NSString;
overload externalInstanceMethod(#NSConditionLock, "name") = NSString;

record NSConstantString = externalClass(NSSimpleCString);

record NSCountedSet = externalClass(NSMutableSet);
overload externalInstanceMethod(#NSCountedSet, "initWithCapacity:") = Id, UInt;
overload externalInstanceMethod(#NSCountedSet, "initWithArray:") = Id, NSArray;
overload externalInstanceMethod(#NSCountedSet, "initWithSet:") = Id, NSSet;
overload externalInstanceMethod(#NSCountedSet, "countForObject:") = UInt, Id;
overload externalInstanceMethod(#NSCountedSet, "objectEnumerator") = NSEnumerator;
overload externalInstanceMethod(#NSCountedSet, "addObject:") = Void, Id;
overload externalInstanceMethod(#NSCountedSet, "removeObject:") = Void, Id;

record NSData = externalClass(NSObject);
overload externalInstanceMethod(#NSData, "copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#NSData, "mutableCopyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#NSData, "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSData, "initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#NSData, "length") = UInt;
overload externalInstanceMethod(#NSData, "bytes") = RawPointer;
overload externalInstanceMethod(#NSData, "description") = NSString;
overload externalInstanceMethod(#NSData, "getBytes:length:") = Void, RawPointer, UInt;
overload externalInstanceMethod(#NSData, "getBytes:range:") = Void, RawPointer, NSRange;
overload externalInstanceMethod(#NSData, "isEqualToData:") = Bool, NSData;
overload externalInstanceMethod(#NSData, "subdataWithRange:") = NSData, NSRange;
overload externalInstanceMethod(#NSData, "writeToFile:atomically:") = Bool, NSString, Bool;
overload externalInstanceMethod(#NSData, "writeToURL:atomically:") = Bool, NSURL, Bool;
overload externalInstanceMethod(#NSData, "writeToFile:options:error:") = Bool, NSString, UInt, Pointer[NSError];
overload externalInstanceMethod(#NSData, "writeToURL:options:error:") = Bool, NSURL, UInt, Pointer[NSError];
overload externalInstanceMethod(#NSData, "rangeOfData:options:range:") = NSRange, NSData, UInt, NSRange;
overload externalClassMethod(#NSData, "data") = Id;
overload externalClassMethod(#NSData, "dataWithBytes:length:") = Id, RawPointer, UInt;
overload externalClassMethod(#NSData, "dataWithBytesNoCopy:length:") = Id, RawPointer, UInt;
overload externalClassMethod(#NSData, "dataWithBytesNoCopy:length:freeWhenDone:") = Id, RawPointer, UInt, Bool;
overload externalClassMethod(#NSData, "dataWithContentsOfFile:options:error:") = Id, NSString, UInt, Pointer[NSError];
overload externalClassMethod(#NSData, "dataWithContentsOfURL:options:error:") = Id, NSURL, UInt, Pointer[NSError];
overload externalClassMethod(#NSData, "dataWithContentsOfFile:") = Id, NSString;
overload externalClassMethod(#NSData, "dataWithContentsOfURL:") = Id, NSURL;
overload externalClassMethod(#NSData, "dataWithContentsOfMappedFile:") = Id, NSString;
overload externalInstanceMethod(#NSData, "initWithBytes:length:") = Id, RawPointer, UInt;
overload externalInstanceMethod(#NSData, "initWithBytesNoCopy:length:") = Id, RawPointer, UInt;
overload externalInstanceMethod(#NSData, "initWithBytesNoCopy:length:freeWhenDone:") = Id, RawPointer, UInt, Bool;
overload externalInstanceMethod(#NSData, "initWithContentsOfFile:options:error:") = Id, NSString, UInt, Pointer[NSError];
overload externalInstanceMethod(#NSData, "initWithContentsOfURL:options:error:") = Id, NSURL, UInt, Pointer[NSError];
overload externalInstanceMethod(#NSData, "initWithContentsOfFile:") = Id, NSString;
overload externalInstanceMethod(#NSData, "initWithContentsOfURL:") = Id, NSURL;
overload externalInstanceMethod(#NSData, "initWithContentsOfMappedFile:") = Id, NSString;
overload externalInstanceMethod(#NSData, "initWithData:") = Id, NSData;
overload externalClassMethod(#NSData, "dataWithData:") = Id, NSData;
overload externalInstanceMethod(#NSData, "getBytes:") = Void, RawPointer;

record NSDataDetector = externalClass(NSRegularExpression);
overload externalClassMethod(#NSDataDetector, "dataDetectorWithTypes:error:") = NSDataDetector, UInt64, Pointer[NSError];
overload externalInstanceMethod(#NSDataDetector, "initWithTypes:error:") = Id, UInt64, Pointer[NSError];
overload externalInstanceMethod(#NSDataDetector, "checkingTypes") = UInt64;

record NSDate = externalClass(NSObject);
overload externalInstanceMethod(#NSDate, "copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#NSDate, "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSDate, "initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#NSDate, "timeIntervalSinceReferenceDate") = Double;
overload externalInstanceMethod(#NSDate, "timeIntervalSinceDate:") = Double, NSDate;
overload externalInstanceMethod(#NSDate, "timeIntervalSinceNow") = Double;
overload externalInstanceMethod(#NSDate, "timeIntervalSince1970") = Double;
overload externalInstanceMethod(#NSDate, "addTimeInterval:") = Id, Double;
overload externalInstanceMethod(#NSDate, "dateByAddingTimeInterval:") = Id, Double;
overload externalInstanceMethod(#NSDate, "earlierDate:") = NSDate, NSDate;
overload externalInstanceMethod(#NSDate, "laterDate:") = NSDate, NSDate;
overload externalInstanceMethod(#NSDate, "compare:") = Int, NSDate;
overload externalInstanceMethod(#NSDate, "isEqualToDate:") = Bool, NSDate;
overload externalInstanceMethod(#NSDate, "description") = NSString;
overload externalInstanceMethod(#NSDate, "descriptionWithLocale:") = NSString, Id;
overload externalClassMethod(#NSDate, "timeIntervalSinceReferenceDate") = Double;
overload externalClassMethod(#NSDate, "date") = Id;
overload externalClassMethod(#NSDate, "dateWithTimeIntervalSinceNow:") = Id, Double;
overload externalClassMethod(#NSDate, "dateWithTimeIntervalSinceReferenceDate:") = Id, Double;
overload externalClassMethod(#NSDate, "dateWithTimeIntervalSince1970:") = Id, Double;
overload externalClassMethod(#NSDate, "dateWithTimeInterval:sinceDate:") = Id, Double, NSDate;
overload externalClassMethod(#NSDate, "distantFuture") = Id;
overload externalClassMethod(#NSDate, "distantPast") = Id;
overload externalInstanceMethod(#NSDate, "init") = Id;
overload externalInstanceMethod(#NSDate, "initWithTimeIntervalSinceNow:") = Id, Double;
overload externalInstanceMethod(#NSDate, "initWithTimeIntervalSinceReferenceDate:") = Id, Double;
overload externalInstanceMethod(#NSDate, "initWithTimeIntervalSince1970:") = Id, Double;
overload externalInstanceMethod(#NSDate, "initWithTimeInterval:sinceDate:") = Id, Double, NSDate;

record NSDateComponents = externalClass(NSObject);
overload externalInstanceMethod(#NSDateComponents, "copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#NSDateComponents, "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSDateComponents, "initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#NSDateComponents, "calendar") = NSCalendar;
overload externalInstanceMethod(#NSDateComponents, "timeZone") = NSTimeZone;
overload externalInstanceMethod(#NSDateComponents, "era") = Int;
overload externalInstanceMethod(#NSDateComponents, "year") = Int;
overload externalInstanceMethod(#NSDateComponents, "month") = Int;
overload externalInstanceMethod(#NSDateComponents, "day") = Int;
overload externalInstanceMethod(#NSDateComponents, "hour") = Int;
overload externalInstanceMethod(#NSDateComponents, "minute") = Int;
overload externalInstanceMethod(#NSDateComponents, "second") = Int;
overload externalInstanceMethod(#NSDateComponents, "week") = Int;
overload externalInstanceMethod(#NSDateComponents, "weekday") = Int;
overload externalInstanceMethod(#NSDateComponents, "weekdayOrdinal") = Int;
overload externalInstanceMethod(#NSDateComponents, "quarter") = Int;
overload externalInstanceMethod(#NSDateComponents, "setCalendar:") = Void, NSCalendar;
overload externalInstanceMethod(#NSDateComponents, "setTimeZone:") = Void, NSTimeZone;
overload externalInstanceMethod(#NSDateComponents, "setEra:") = Void, Int;
overload externalInstanceMethod(#NSDateComponents, "setYear:") = Void, Int;
overload externalInstanceMethod(#NSDateComponents, "setMonth:") = Void, Int;
overload externalInstanceMethod(#NSDateComponents, "setDay:") = Void, Int;
overload externalInstanceMethod(#NSDateComponents, "setHour:") = Void, Int;
overload externalInstanceMethod(#NSDateComponents, "setMinute:") = Void, Int;
overload externalInstanceMethod(#NSDateComponents, "setSecond:") = Void, Int;
overload externalInstanceMethod(#NSDateComponents, "setWeek:") = Void, Int;
overload externalInstanceMethod(#NSDateComponents, "setWeekday:") = Void, Int;
overload externalInstanceMethod(#NSDateComponents, "setWeekdayOrdinal:") = Void, Int;
overload externalInstanceMethod(#NSDateComponents, "setQuarter:") = Void, Int;
overload externalInstanceMethod(#NSDateComponents, "date") = NSDate;

record NSDateFormatter = externalClass(NSFormatter);
overload externalInstanceMethod(#NSDateFormatter, "getObjectValue:forString:range:error:") = Bool, Pointer[Id], NSString, Pointer[NSRange], Pointer[NSError];
overload externalInstanceMethod(#NSDateFormatter, "stringFromDate:") = NSString, NSDate;
overload externalInstanceMethod(#NSDateFormatter, "dateFromString:") = NSDate, NSString;
overload externalClassMethod(#NSDateFormatter, "localizedStringFromDate:dateStyle:timeStyle:") = NSString, NSDate, UInt, UInt;
overload externalClassMethod(#NSDateFormatter, "dateFormatFromTemplate:options:locale:") = NSString, NSString, UInt, NSLocale;
overload externalInstanceMethod(#NSDateFormatter, "dateFormat") = NSString;
overload externalInstanceMethod(#NSDateFormatter, "dateStyle") = UInt;
overload externalInstanceMethod(#NSDateFormatter, "setDateStyle:") = Void, UInt;
overload externalInstanceMethod(#NSDateFormatter, "timeStyle") = UInt;
overload externalInstanceMethod(#NSDateFormatter, "setTimeStyle:") = Void, UInt;
overload externalInstanceMethod(#NSDateFormatter, "locale") = NSLocale;
overload externalInstanceMethod(#NSDateFormatter, "setLocale:") = Void, NSLocale;
overload externalInstanceMethod(#NSDateFormatter, "generatesCalendarDates") = Bool;
overload externalInstanceMethod(#NSDateFormatter, "setGeneratesCalendarDates:") = Void, Bool;
overload externalInstanceMethod(#NSDateFormatter, "formatterBehavior") = UInt;
overload externalInstanceMethod(#NSDateFormatter, "setFormatterBehavior:") = Void, UInt;
overload externalClassMethod(#NSDateFormatter, "defaultFormatterBehavior") = UInt;
overload externalClassMethod(#NSDateFormatter, "setDefaultFormatterBehavior:") = Void, UInt;
overload externalInstanceMethod(#NSDateFormatter, "setDateFormat:") = Void, NSString;
overload externalInstanceMethod(#NSDateFormatter, "timeZone") = NSTimeZone;
overload externalInstanceMethod(#NSDateFormatter, "setTimeZone:") = Void, NSTimeZone;
overload externalInstanceMethod(#NSDateFormatter, "calendar") = NSCalendar;
overload externalInstanceMethod(#NSDateFormatter, "setCalendar:") = Void, NSCalendar;
overload externalInstanceMethod(#NSDateFormatter, "isLenient") = Bool;
overload externalInstanceMethod(#NSDateFormatter, "setLenient:") = Void, Bool;
overload externalInstanceMethod(#NSDateFormatter, "twoDigitStartDate") = NSDate;
overload externalInstanceMethod(#NSDateFormatter, "setTwoDigitStartDate:") = Void, NSDate;
overload externalInstanceMethod(#NSDateFormatter, "defaultDate") = NSDate;
overload externalInstanceMethod(#NSDateFormatter, "setDefaultDate:") = Void, NSDate;
overload externalInstanceMethod(#NSDateFormatter, "eraSymbols") = NSArray;
overload externalInstanceMethod(#NSDateFormatter, "setEraSymbols:") = Void, NSArray;
overload externalInstanceMethod(#NSDateFormatter, "monthSymbols") = NSArray;
overload externalInstanceMethod(#NSDateFormatter, "setMonthSymbols:") = Void, NSArray;
overload externalInstanceMethod(#NSDateFormatter, "shortMonthSymbols") = NSArray;
overload externalInstanceMethod(#NSDateFormatter, "setShortMonthSymbols:") = Void, NSArray;
overload externalInstanceMethod(#NSDateFormatter, "weekdaySymbols") = NSArray;
overload externalInstanceMethod(#NSDateFormatter, "setWeekdaySymbols:") = Void, NSArray;
overload externalInstanceMethod(#NSDateFormatter, "shortWeekdaySymbols") = NSArray;
overload externalInstanceMethod(#NSDateFormatter, "setShortWeekdaySymbols:") = Void, NSArray;
overload externalInstanceMethod(#NSDateFormatter, "AMSymbol") = NSString;
overload externalInstanceMethod(#NSDateFormatter, "setAMSymbol:") = Void, NSString;
overload externalInstanceMethod(#NSDateFormatter, "PMSymbol") = NSString;
overload externalInstanceMethod(#NSDateFormatter, "setPMSymbol:") = Void, NSString;
overload externalInstanceMethod(#NSDateFormatter, "longEraSymbols") = NSArray;
overload externalInstanceMethod(#NSDateFormatter, "setLongEraSymbols:") = Void, NSArray;
overload externalInstanceMethod(#NSDateFormatter, "veryShortMonthSymbols") = NSArray;
overload externalInstanceMethod(#NSDateFormatter, "setVeryShortMonthSymbols:") = Void, NSArray;
overload externalInstanceMethod(#NSDateFormatter, "standaloneMonthSymbols") = NSArray;
overload externalInstanceMethod(#NSDateFormatter, "setStandaloneMonthSymbols:") = Void, NSArray;
overload externalInstanceMethod(#NSDateFormatter, "shortStandaloneMonthSymbols") = NSArray;
overload externalInstanceMethod(#NSDateFormatter, "setShortStandaloneMonthSymbols:") = Void, NSArray;
overload externalInstanceMethod(#NSDateFormatter, "veryShortStandaloneMonthSymbols") = NSArray;
overload externalInstanceMethod(#NSDateFormatter, "setVeryShortStandaloneMonthSymbols:") = Void, NSArray;
overload externalInstanceMethod(#NSDateFormatter, "veryShortWeekdaySymbols") = NSArray;
overload externalInstanceMethod(#NSDateFormatter, "setVeryShortWeekdaySymbols:") = Void, NSArray;
overload externalInstanceMethod(#NSDateFormatter, "standaloneWeekdaySymbols") = NSArray;
overload externalInstanceMethod(#NSDateFormatter, "setStandaloneWeekdaySymbols:") = Void, NSArray;
overload externalInstanceMethod(#NSDateFormatter, "shortStandaloneWeekdaySymbols") = NSArray;
overload externalInstanceMethod(#NSDateFormatter, "setShortStandaloneWeekdaySymbols:") = Void, NSArray;
overload externalInstanceMethod(#NSDateFormatter, "veryShortStandaloneWeekdaySymbols") = NSArray;
overload externalInstanceMethod(#NSDateFormatter, "setVeryShortStandaloneWeekdaySymbols:") = Void, NSArray;
overload externalInstanceMethod(#NSDateFormatter, "quarterSymbols") = NSArray;
overload externalInstanceMethod(#NSDateFormatter, "setQuarterSymbols:") = Void, NSArray;
overload externalInstanceMethod(#NSDateFormatter, "shortQuarterSymbols") = NSArray;
overload externalInstanceMethod(#NSDateFormatter, "setShortQuarterSymbols:") = Void, NSArray;
overload externalInstanceMethod(#NSDateFormatter, "standaloneQuarterSymbols") = NSArray;
overload externalInstanceMethod(#NSDateFormatter, "setStandaloneQuarterSymbols:") = Void, NSArray;
overload externalInstanceMethod(#NSDateFormatter, "shortStandaloneQuarterSymbols") = NSArray;
overload externalInstanceMethod(#NSDateFormatter, "setShortStandaloneQuarterSymbols:") = Void, NSArray;
overload externalInstanceMethod(#NSDateFormatter, "gregorianStartDate") = NSDate;
overload externalInstanceMethod(#NSDateFormatter, "setGregorianStartDate:") = Void, NSDate;
overload externalInstanceMethod(#NSDateFormatter, "doesRelativeDateFormatting") = Bool;
overload externalInstanceMethod(#NSDateFormatter, "setDoesRelativeDateFormatting:") = Void, Bool;

record NSDecimalNumber = externalClass(NSNumber);
overload externalInstanceMethod(#NSDecimalNumber, "initWithMantissa:exponent:isNegative:") = Id, UInt64, Short, Bool;
overload externalInstanceMethod(#NSDecimalNumber, "initWithDecimal:") = Id, NSDecimal;
overload externalInstanceMethod(#NSDecimalNumber, "initWithString:") = Id, NSString;
overload externalInstanceMethod(#NSDecimalNumber, "initWithString:locale:") = Id, NSString, Id;
overload externalInstanceMethod(#NSDecimalNumber, "descriptionWithLocale:") = NSString, Id;
overload externalInstanceMethod(#NSDecimalNumber, "decimalValue") = NSDecimal;
overload externalClassMethod(#NSDecimalNumber, "decimalNumberWithMantissa:exponent:isNegative:") = NSDecimalNumber, UInt64, Short, Bool;
overload externalClassMethod(#NSDecimalNumber, "decimalNumberWithDecimal:") = NSDecimalNumber, NSDecimal;
overload externalClassMethod(#NSDecimalNumber, "decimalNumberWithString:") = NSDecimalNumber, NSString;
overload externalClassMethod(#NSDecimalNumber, "decimalNumberWithString:locale:") = NSDecimalNumber, NSString, Id;
overload externalClassMethod(#NSDecimalNumber, "zero") = NSDecimalNumber;
overload externalClassMethod(#NSDecimalNumber, "one") = NSDecimalNumber;
overload externalClassMethod(#NSDecimalNumber, "minimumDecimalNumber") = NSDecimalNumber;
overload externalClassMethod(#NSDecimalNumber, "maximumDecimalNumber") = NSDecimalNumber;
overload externalClassMethod(#NSDecimalNumber, "notANumber") = NSDecimalNumber;
overload externalInstanceMethod(#NSDecimalNumber, "decimalNumberByAdding:") = NSDecimalNumber, NSDecimalNumber;
overload externalInstanceMethod(#NSDecimalNumber, "decimalNumberByAdding:withBehavior:") = NSDecimalNumber, NSDecimalNumber, Id;
overload externalInstanceMethod(#NSDecimalNumber, "decimalNumberBySubtracting:") = NSDecimalNumber, NSDecimalNumber;
overload externalInstanceMethod(#NSDecimalNumber, "decimalNumberBySubtracting:withBehavior:") = NSDecimalNumber, NSDecimalNumber, Id;
overload externalInstanceMethod(#NSDecimalNumber, "decimalNumberByMultiplyingBy:") = NSDecimalNumber, NSDecimalNumber;
overload externalInstanceMethod(#NSDecimalNumber, "decimalNumberByMultiplyingBy:withBehavior:") = NSDecimalNumber, NSDecimalNumber, Id;
overload externalInstanceMethod(#NSDecimalNumber, "decimalNumberByDividingBy:") = NSDecimalNumber, NSDecimalNumber;
overload externalInstanceMethod(#NSDecimalNumber, "decimalNumberByDividingBy:withBehavior:") = NSDecimalNumber, NSDecimalNumber, Id;
overload externalInstanceMethod(#NSDecimalNumber, "decimalNumberByRaisingToPower:") = NSDecimalNumber, UInt;
overload externalInstanceMethod(#NSDecimalNumber, "decimalNumberByRaisingToPower:withBehavior:") = NSDecimalNumber, UInt, Id;
overload externalInstanceMethod(#NSDecimalNumber, "decimalNumberByMultiplyingByPowerOf10:") = NSDecimalNumber, Short;
overload externalInstanceMethod(#NSDecimalNumber, "decimalNumberByMultiplyingByPowerOf10:withBehavior:") = NSDecimalNumber, Short, Id;
overload externalInstanceMethod(#NSDecimalNumber, "decimalNumberByRoundingAccordingToBehavior:") = NSDecimalNumber, Id;
overload externalInstanceMethod(#NSDecimalNumber, "compare:") = Int, NSNumber;
overload externalClassMethod(#NSDecimalNumber, "setDefaultBehavior:") = Void, Id;
overload externalClassMethod(#NSDecimalNumber, "defaultBehavior") = Id;
overload externalInstanceMethod(#NSDecimalNumber, "objCType") = Pointer[CChar];
overload externalInstanceMethod(#NSDecimalNumber, "doubleValue") = Double;

record NSDecimalNumberHandler = externalClass(NSObject);
overload externalInstanceMethod(#NSDecimalNumberHandler, "roundingMode") = UInt;
overload externalInstanceMethod(#NSDecimalNumberHandler, "scale") = Short;
overload externalInstanceMethod(#NSDecimalNumberHandler, "exceptionDuringOperation:error:leftOperand:rightOperand:") = NSDecimalNumber, SelectorHandle, UInt, NSDecimalNumber, NSDecimalNumber;
overload externalInstanceMethod(#NSDecimalNumberHandler, "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSDecimalNumberHandler, "initWithCoder:") = Id, NSCoder;
overload externalClassMethod(#NSDecimalNumberHandler, "defaultDecimalNumberHandler") = Id;
overload externalInstanceMethod(#NSDecimalNumberHandler, "initWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:") = Id, UInt, Short, Bool, Bool, Bool, Bool;
overload externalClassMethod(#NSDecimalNumberHandler, "decimalNumberHandlerWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:") = Id, UInt, Short, Bool, Bool, Bool, Bool;

record NSDictionary = externalClass(NSObject);
overload externalInstanceMethod(#NSDictionary, "copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#NSDictionary, "mutableCopyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#NSDictionary, "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSDictionary, "initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#NSDictionary, "countByEnumeratingWithState:objects:count:") = UInt, Pointer[NSFastEnumerationState], Pointer[Id], UInt;
overload externalInstanceMethod(#NSDictionary, "count") = UInt;
overload externalInstanceMethod(#NSDictionary, "objectForKey:") = Id, Id;
overload externalInstanceMethod(#NSDictionary, "keyEnumerator") = NSEnumerator;
overload externalInstanceMethod(#NSDictionary, "allKeys") = NSArray;
overload externalInstanceMethod(#NSDictionary, "allKeysForObject:") = NSArray, Id;
overload externalInstanceMethod(#NSDictionary, "allValues") = NSArray;
overload externalInstanceMethod(#NSDictionary, "description") = NSString;
overload externalInstanceMethod(#NSDictionary, "descriptionInStringsFileFormat") = NSString;
overload externalInstanceMethod(#NSDictionary, "descriptionWithLocale:") = NSString, Id;
overload externalInstanceMethod(#NSDictionary, "descriptionWithLocale:indent:") = NSString, Id, UInt;
overload externalInstanceMethod(#NSDictionary, "isEqualToDictionary:") = Bool, NSDictionary;
overload externalInstanceMethod(#NSDictionary, "objectEnumerator") = NSEnumerator;
overload externalInstanceMethod(#NSDictionary, "objectsForKeys:notFoundMarker:") = NSArray, NSArray, Id;
overload externalInstanceMethod(#NSDictionary, "writeToFile:atomically:") = Bool, NSString, Bool;
overload externalInstanceMethod(#NSDictionary, "writeToURL:atomically:") = Bool, NSURL, Bool;
overload externalInstanceMethod(#NSDictionary, "keysSortedByValueUsingSelector:") = NSArray, SelectorHandle;
overload externalInstanceMethod(#NSDictionary, "getObjects:andKeys:") = Void, Pointer[Id], Pointer[Id];
overload externalInstanceMethod(#NSDictionary, "enumerateKeysAndObjectsUsingBlock:") = Void, UnknownType;
overload externalInstanceMethod(#NSDictionary, "enumerateKeysAndObjectsWithOptions:usingBlock:") = Void, UInt, UnknownType;
overload externalInstanceMethod(#NSDictionary, "keysSortedByValueUsingComparator:") = NSArray, NSComparator;
overload externalInstanceMethod(#NSDictionary, "keysSortedByValueWithOptions:usingComparator:") = NSArray, UInt, NSComparator;
overload externalInstanceMethod(#NSDictionary, "keysOfEntriesPassingTest:") = NSSet, UnknownType;
overload externalInstanceMethod(#NSDictionary, "keysOfEntriesWithOptions:passingTest:") = NSSet, UInt, UnknownType;
overload externalClassMethod(#NSDictionary, "dictionary") = Id;
overload externalClassMethod(#NSDictionary, "dictionaryWithObject:forKey:") = Id, Id, Id;
overload externalClassMethod(#NSDictionary, "dictionaryWithObjects:forKeys:count:") = Id, Pointer[Id], Pointer[Id], UInt;
overload externalVarargClassMethod(#NSDictionary, "dictionaryWithObjectsAndKeys:") = Id, Id;
overload externalClassMethod(#NSDictionary, "dictionaryWithDictionary:") = Id, NSDictionary;
overload externalClassMethod(#NSDictionary, "dictionaryWithObjects:forKeys:") = Id, NSArray, NSArray;
overload externalInstanceMethod(#NSDictionary, "initWithObjects:forKeys:count:") = Id, Pointer[Id], Pointer[Id], UInt;
overload externalVarargInstanceMethod(#NSDictionary, "initWithObjectsAndKeys:") = Id, Id;
overload externalInstanceMethod(#NSDictionary, "initWithDictionary:") = Id, NSDictionary;
overload externalInstanceMethod(#NSDictionary, "initWithDictionary:copyItems:") = Id, NSDictionary, Bool;
overload externalInstanceMethod(#NSDictionary, "initWithObjects:forKeys:") = Id, NSArray, NSArray;
overload externalClassMethod(#NSDictionary, "dictionaryWithContentsOfFile:") = Id, NSString;
overload externalClassMethod(#NSDictionary, "dictionaryWithContentsOfURL:") = Id, NSURL;
overload externalInstanceMethod(#NSDictionary, "initWithContentsOfFile:") = Id, NSString;
overload externalInstanceMethod(#NSDictionary, "initWithContentsOfURL:") = Id, NSURL;
overload externalInstanceMethod(#NSDictionary, "fileSize") = UInt64;
overload externalInstanceMethod(#NSDictionary, "fileModificationDate") = NSDate;
overload externalInstanceMethod(#NSDictionary, "fileType") = NSString;
overload externalInstanceMethod(#NSDictionary, "filePosixPermissions") = UInt;
overload externalInstanceMethod(#NSDictionary, "fileOwnerAccountName") = NSString;
overload externalInstanceMethod(#NSDictionary, "fileGroupOwnerAccountName") = NSString;
overload externalInstanceMethod(#NSDictionary, "fileSystemNumber") = Int;
overload externalInstanceMethod(#NSDictionary, "fileSystemFileNumber") = UInt;
overload externalInstanceMethod(#NSDictionary, "fileExtensionHidden") = Bool;
overload externalInstanceMethod(#NSDictionary, "fileHFSCreatorCode") = CULong;
overload externalInstanceMethod(#NSDictionary, "fileHFSTypeCode") = CULong;
overload externalInstanceMethod(#NSDictionary, "fileIsImmutable") = Bool;
overload externalInstanceMethod(#NSDictionary, "fileIsAppendOnly") = Bool;
overload externalInstanceMethod(#NSDictionary, "fileCreationDate") = NSDate;
overload externalInstanceMethod(#NSDictionary, "fileOwnerAccountID") = NSNumber;
overload externalInstanceMethod(#NSDictionary, "fileGroupOwnerAccountID") = NSNumber;
overload externalInstanceMethod(#NSDictionary, "valueForKey:") = Id, NSString;

record NSDirectoryEnumerator = externalClass(NSEnumerator);
overload externalInstanceMethod(#NSDirectoryEnumerator, "fileAttributes") = NSDictionary;
overload externalInstanceMethod(#NSDirectoryEnumerator, "directoryAttributes") = NSDictionary;
overload externalInstanceMethod(#NSDirectoryEnumerator, "skipDescendents") = Void;
overload externalInstanceMethod(#NSDirectoryEnumerator, "level") = UInt;
overload externalInstanceMethod(#NSDirectoryEnumerator, "skipDescendants") = Void;

record NSEnumerator = externalClass(NSObject);
overload externalInstanceMethod(#NSEnumerator, "countByEnumeratingWithState:objects:count:") = UInt, Pointer[NSFastEnumerationState], Pointer[Id], UInt;
overload externalInstanceMethod(#NSEnumerator, "nextObject") = Id;
overload externalInstanceMethod(#NSEnumerator, "allObjects") = NSArray;

record NSError = externalClass(NSObject);
overload externalInstanceMethod(#NSError, "copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#NSError, "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSError, "initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#NSError, "initWithDomain:code:userInfo:") = Id, NSString, Int, NSDictionary;
overload externalClassMethod(#NSError, "errorWithDomain:code:userInfo:") = Id, NSString, Int, NSDictionary;
overload externalInstanceMethod(#NSError, "domain") = NSString;
overload externalInstanceMethod(#NSError, "code") = Int;
overload externalInstanceMethod(#NSError, "userInfo") = NSDictionary;
overload externalInstanceMethod(#NSError, "localizedDescription") = NSString;
overload externalInstanceMethod(#NSError, "localizedFailureReason") = NSString;
overload externalInstanceMethod(#NSError, "localizedRecoverySuggestion") = NSString;
overload externalInstanceMethod(#NSError, "localizedRecoveryOptions") = NSArray;
overload externalInstanceMethod(#NSError, "recoveryAttempter") = Id;
overload externalInstanceMethod(#NSError, "helpAnchor") = NSString;

record NSException = externalClass(NSObject);
overload externalInstanceMethod(#NSException, "copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#NSException, "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSException, "initWithCoder:") = Id, NSCoder;
overload externalClassMethod(#NSException, "exceptionWithName:reason:userInfo:") = NSException, NSString, NSString, NSDictionary;
overload externalInstanceMethod(#NSException, "initWithName:reason:userInfo:") = Id, NSString, NSString, NSDictionary;
overload externalInstanceMethod(#NSException, "name") = NSString;
overload externalInstanceMethod(#NSException, "reason") = NSString;
overload externalInstanceMethod(#NSException, "userInfo") = NSDictionary;
overload externalInstanceMethod(#NSException, "callStackReturnAddresses") = NSArray;
overload externalInstanceMethod(#NSException, "callStackSymbols") = NSArray;
overload externalInstanceMethod(#NSException, "raise") = Void;
overload externalVarargClassMethod(#NSException, "raise:format:") = Void, NSString, NSString;
overload externalClassMethod(#NSException, "raise:format:arguments:") = Void, NSString, NSString, va_list;

record NSExpression = externalClass(NSObject);
overload externalInstanceMethod(#NSExpression, "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSExpression, "initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#NSExpression, "copyWithZone:") = Id, Pointer[NSZone];
overload externalClassMethod(#NSExpression, "expressionForConstantValue:") = NSExpression, Id;
overload externalClassMethod(#NSExpression, "expressionForEvaluatedObject") = NSExpression;
overload externalClassMethod(#NSExpression, "expressionForVariable:") = NSExpression, NSString;
overload externalClassMethod(#NSExpression, "expressionForKeyPath:") = NSExpression, NSString;
overload externalClassMethod(#NSExpression, "expressionForFunction:arguments:") = NSExpression, NSString, NSArray;
overload externalClassMethod(#NSExpression, "expressionForAggregate:") = NSExpression, NSArray;
overload externalClassMethod(#NSExpression, "expressionForUnionSet:with:") = NSExpression, NSExpression, NSExpression;
overload externalClassMethod(#NSExpression, "expressionForIntersectSet:with:") = NSExpression, NSExpression, NSExpression;
overload externalClassMethod(#NSExpression, "expressionForMinusSet:with:") = NSExpression, NSExpression, NSExpression;
overload externalClassMethod(#NSExpression, "expressionForSubquery:usingIteratorVariable:predicate:") = NSExpression, NSExpression, NSString, Id;
overload externalClassMethod(#NSExpression, "expressionForFunction:selectorName:arguments:") = NSExpression, NSExpression, NSString, NSArray;
overload externalClassMethod(#NSExpression, "expressionForBlock:arguments:") = NSExpression, UnknownType, NSArray;
overload externalInstanceMethod(#NSExpression, "initWithExpressionType:") = Id, UInt;
overload externalInstanceMethod(#NSExpression, "expressionType") = UInt;
overload externalInstanceMethod(#NSExpression, "constantValue") = Id;
overload externalInstanceMethod(#NSExpression, "keyPath") = NSString;
overload externalInstanceMethod(#NSExpression, "function") = NSString;
overload externalInstanceMethod(#NSExpression, "variable") = NSString;
overload externalInstanceMethod(#NSExpression, "operand") = NSExpression;
overload externalInstanceMethod(#NSExpression, "arguments") = NSArray;
overload externalInstanceMethod(#NSExpression, "collection") = Id;
overload externalInstanceMethod(#NSExpression, "predicate") = NSPredicate;
overload externalInstanceMethod(#NSExpression, "leftExpression") = NSExpression;
overload externalInstanceMethod(#NSExpression, "rightExpression") = NSExpression;
overload externalInstanceMethod(#NSExpression, "expressionBlock") = UnknownType;
overload externalInstanceMethod(#NSExpression, "expressionValueWithObject:context:") = Id, Id, NSMutableDictionary;

record NSFileHandle = externalClass(NSObject);
overload externalInstanceMethod(#NSFileHandle, "availableData") = NSData;
overload externalInstanceMethod(#NSFileHandle, "readDataToEndOfFile") = NSData;
overload externalInstanceMethod(#NSFileHandle, "readDataOfLength:") = NSData, UInt;
overload externalInstanceMethod(#NSFileHandle, "writeData:") = Void, NSData;
overload externalInstanceMethod(#NSFileHandle, "offsetInFile") = UInt64;
overload externalInstanceMethod(#NSFileHandle, "seekToEndOfFile") = UInt64;
overload externalInstanceMethod(#NSFileHandle, "seekToFileOffset:") = Void, UInt64;
overload externalInstanceMethod(#NSFileHandle, "truncateFileAtOffset:") = Void, UInt64;
overload externalInstanceMethod(#NSFileHandle, "synchronizeFile") = Void;
overload externalInstanceMethod(#NSFileHandle, "closeFile") = Void;
overload externalClassMethod(#NSFileHandle, "fileHandleWithStandardInput") = Id;
overload externalClassMethod(#NSFileHandle, "fileHandleWithStandardOutput") = Id;
overload externalClassMethod(#NSFileHandle, "fileHandleWithStandardError") = Id;
overload externalClassMethod(#NSFileHandle, "fileHandleWithNullDevice") = Id;
overload externalClassMethod(#NSFileHandle, "fileHandleForReadingAtPath:") = Id, NSString;
overload externalClassMethod(#NSFileHandle, "fileHandleForWritingAtPath:") = Id, NSString;
overload externalClassMethod(#NSFileHandle, "fileHandleForUpdatingAtPath:") = Id, NSString;
overload externalClassMethod(#NSFileHandle, "fileHandleForReadingFromURL:error:") = Id, NSURL, Pointer[NSError];
overload externalClassMethod(#NSFileHandle, "fileHandleForWritingToURL:error:") = Id, NSURL, Pointer[NSError];
overload externalClassMethod(#NSFileHandle, "fileHandleForUpdatingURL:error:") = Id, NSURL, Pointer[NSError];
overload externalInstanceMethod(#NSFileHandle, "readInBackgroundAndNotifyForModes:") = Void, NSArray;
overload externalInstanceMethod(#NSFileHandle, "readInBackgroundAndNotify") = Void;
overload externalInstanceMethod(#NSFileHandle, "readToEndOfFileInBackgroundAndNotifyForModes:") = Void, NSArray;
overload externalInstanceMethod(#NSFileHandle, "readToEndOfFileInBackgroundAndNotify") = Void;
overload externalInstanceMethod(#NSFileHandle, "acceptConnectionInBackgroundAndNotifyForModes:") = Void, NSArray;
overload externalInstanceMethod(#NSFileHandle, "acceptConnectionInBackgroundAndNotify") = Void;
overload externalInstanceMethod(#NSFileHandle, "waitForDataInBackgroundAndNotifyForModes:") = Void, NSArray;
overload externalInstanceMethod(#NSFileHandle, "waitForDataInBackgroundAndNotify") = Void;
overload externalInstanceMethod(#NSFileHandle, "initWithFileDescriptor:closeOnDealloc:") = Id, Int, Bool;
overload externalInstanceMethod(#NSFileHandle, "initWithFileDescriptor:") = Id, Int;
overload externalInstanceMethod(#NSFileHandle, "fileDescriptor") = Int;

record NSFileManager = externalClass(NSObject);
overload externalClassMethod(#NSFileManager, "defaultManager") = NSFileManager;
overload externalInstanceMethod(#NSFileManager, "mountedVolumeURLsIncludingResourceValuesForKeys:options:") = NSArray, NSArray, UInt;
overload externalInstanceMethod(#NSFileManager, "contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:") = NSArray, NSURL, NSArray, UInt, Pointer[NSError];
overload externalInstanceMethod(#NSFileManager, "URLsForDirectory:inDomains:") = NSArray, UInt, UInt;
overload externalInstanceMethod(#NSFileManager, "URLForDirectory:inDomain:appropriateForURL:create:error:") = NSURL, UInt, UInt, NSURL, Bool, Pointer[NSError];
overload externalInstanceMethod(#NSFileManager, "setDelegate:") = Void, Id;
overload externalInstanceMethod(#NSFileManager, "delegate") = Id;
overload externalInstanceMethod(#NSFileManager, "setAttributes:ofItemAtPath:error:") = Bool, NSDictionary, NSString, Pointer[NSError];
overload externalInstanceMethod(#NSFileManager, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:") = Bool, NSString, Bool, NSDictionary, Pointer[NSError];
overload externalInstanceMethod(#NSFileManager, "contentsOfDirectoryAtPath:error:") = NSArray, NSString, Pointer[NSError];
overload externalInstanceMethod(#NSFileManager, "subpathsOfDirectoryAtPath:error:") = NSArray, NSString, Pointer[NSError];
overload externalInstanceMethod(#NSFileManager, "attributesOfItemAtPath:error:") = NSDictionary, NSString, Pointer[NSError];
overload externalInstanceMethod(#NSFileManager, "attributesOfFileSystemForPath:error:") = NSDictionary, NSString, Pointer[NSError];
overload externalInstanceMethod(#NSFileManager, "createSymbolicLinkAtPath:withDestinationPath:error:") = Bool, NSString, NSString, Pointer[NSError];
overload externalInstanceMethod(#NSFileManager, "destinationOfSymbolicLinkAtPath:error:") = NSString, NSString, Pointer[NSError];
overload externalInstanceMethod(#NSFileManager, "copyItemAtPath:toPath:error:") = Bool, NSString, NSString, Pointer[NSError];
overload externalInstanceMethod(#NSFileManager, "moveItemAtPath:toPath:error:") = Bool, NSString, NSString, Pointer[NSError];
overload externalInstanceMethod(#NSFileManager, "linkItemAtPath:toPath:error:") = Bool, NSString, NSString, Pointer[NSError];
overload externalInstanceMethod(#NSFileManager, "removeItemAtPath:error:") = Bool, NSString, Pointer[NSError];
overload externalInstanceMethod(#NSFileManager, "copyItemAtURL:toURL:error:") = Bool, NSURL, NSURL, Pointer[NSError];
overload externalInstanceMethod(#NSFileManager, "moveItemAtURL:toURL:error:") = Bool, NSURL, NSURL, Pointer[NSError];
overload externalInstanceMethod(#NSFileManager, "linkItemAtURL:toURL:error:") = Bool, NSURL, NSURL, Pointer[NSError];
overload externalInstanceMethod(#NSFileManager, "removeItemAtURL:error:") = Bool, NSURL, Pointer[NSError];
overload externalInstanceMethod(#NSFileManager, "fileAttributesAtPath:traverseLink:") = NSDictionary, NSString, Bool;
overload externalInstanceMethod(#NSFileManager, "changeFileAttributes:atPath:") = Bool, NSDictionary, NSString;
overload externalInstanceMethod(#NSFileManager, "directoryContentsAtPath:") = NSArray, NSString;
overload externalInstanceMethod(#NSFileManager, "fileSystemAttributesAtPath:") = NSDictionary, NSString;
overload externalInstanceMethod(#NSFileManager, "pathContentOfSymbolicLinkAtPath:") = NSString, NSString;
overload externalInstanceMethod(#NSFileManager, "createSymbolicLinkAtPath:pathContent:") = Bool, NSString, NSString;
overload externalInstanceMethod(#NSFileManager, "createDirectoryAtPath:attributes:") = Bool, NSString, NSDictionary;
overload externalInstanceMethod(#NSFileManager, "currentDirectoryPath") = NSString;
overload externalInstanceMethod(#NSFileManager, "changeCurrentDirectoryPath:") = Bool, NSString;
overload externalInstanceMethod(#NSFileManager, "fileExistsAtPath:") = Bool, NSString;
overload externalInstanceMethod(#NSFileManager, "fileExistsAtPath:isDirectory:") = Bool, NSString, Pointer[Bool];
overload externalInstanceMethod(#NSFileManager, "isReadableFileAtPath:") = Bool, NSString;
overload externalInstanceMethod(#NSFileManager, "isWritableFileAtPath:") = Bool, NSString;
overload externalInstanceMethod(#NSFileManager, "isExecutableFileAtPath:") = Bool, NSString;
overload externalInstanceMethod(#NSFileManager, "isDeletableFileAtPath:") = Bool, NSString;
overload externalInstanceMethod(#NSFileManager, "contentsEqualAtPath:andPath:") = Bool, NSString, NSString;
overload externalInstanceMethod(#NSFileManager, "displayNameAtPath:") = NSString, NSString;
overload externalInstanceMethod(#NSFileManager, "componentsToDisplayForPath:") = NSArray, NSString;
overload externalInstanceMethod(#NSFileManager, "enumeratorAtPath:") = NSDirectoryEnumerator, NSString;
overload externalInstanceMethod(#NSFileManager, "enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:") = NSDirectoryEnumerator, NSURL, NSArray, UInt, UnknownType;
overload externalInstanceMethod(#NSFileManager, "subpathsAtPath:") = NSArray, NSString;
overload externalInstanceMethod(#NSFileManager, "contentsAtPath:") = NSData, NSString;
overload externalInstanceMethod(#NSFileManager, "createFileAtPath:contents:attributes:") = Bool, NSString, NSData, NSDictionary;
overload externalInstanceMethod(#NSFileManager, "fileSystemRepresentationWithPath:") = Pointer[CChar], NSString;
overload externalInstanceMethod(#NSFileManager, "stringWithFileSystemRepresentation:length:") = NSString, Pointer[CChar], UInt;
overload externalInstanceMethod(#NSFileManager, "replaceItemAtURL:withItemAtURL:backupItemName:options:resultingItemURL:error:") = Bool, NSURL, NSURL, NSString, UInt, Pointer[NSURL], Pointer[NSError];

record NSFileWrapper = externalClass(NSObject);
overload externalInstanceMethod(#NSFileWrapper, "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSFileWrapper, "initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#NSFileWrapper, "initWithURL:options:error:") = Id, NSURL, UInt, Pointer[NSError];
overload externalInstanceMethod(#NSFileWrapper, "initDirectoryWithFileWrappers:") = Id, NSDictionary;
overload externalInstanceMethod(#NSFileWrapper, "initRegularFileWithContents:") = Id, NSData;
overload externalInstanceMethod(#NSFileWrapper, "initSymbolicLinkWithDestinationURL:") = Id, NSURL;
overload externalInstanceMethod(#NSFileWrapper, "initWithSerializedRepresentation:") = Id, NSData;
overload externalInstanceMethod(#NSFileWrapper, "isDirectory") = Bool;
overload externalInstanceMethod(#NSFileWrapper, "isRegularFile") = Bool;
overload externalInstanceMethod(#NSFileWrapper, "isSymbolicLink") = Bool;
overload externalInstanceMethod(#NSFileWrapper, "setPreferredFilename:") = Void, NSString;
overload externalInstanceMethod(#NSFileWrapper, "preferredFilename") = NSString;
overload externalInstanceMethod(#NSFileWrapper, "setFilename:") = Void, NSString;
overload externalInstanceMethod(#NSFileWrapper, "filename") = NSString;
overload externalInstanceMethod(#NSFileWrapper, "setFileAttributes:") = Void, NSDictionary;
overload externalInstanceMethod(#NSFileWrapper, "fileAttributes") = NSDictionary;
overload externalInstanceMethod(#NSFileWrapper, "matchesContentsOfURL:") = Bool, NSURL;
overload externalInstanceMethod(#NSFileWrapper, "readFromURL:options:error:") = Bool, NSURL, UInt, Pointer[NSError];
overload externalInstanceMethod(#NSFileWrapper, "writeToURL:options:originalContentsURL:error:") = Bool, NSURL, UInt, NSURL, Pointer[NSError];
overload externalInstanceMethod(#NSFileWrapper, "serializedRepresentation") = NSData;
overload externalInstanceMethod(#NSFileWrapper, "addFileWrapper:") = NSString, NSFileWrapper;
overload externalInstanceMethod(#NSFileWrapper, "addRegularFileWithContents:preferredFilename:") = NSString, NSData, NSString;
overload externalInstanceMethod(#NSFileWrapper, "removeFileWrapper:") = Void, NSFileWrapper;
overload externalInstanceMethod(#NSFileWrapper, "fileWrappers") = NSDictionary;
overload externalInstanceMethod(#NSFileWrapper, "keyForFileWrapper:") = NSString, NSFileWrapper;
overload externalInstanceMethod(#NSFileWrapper, "regularFileContents") = NSData;
overload externalInstanceMethod(#NSFileWrapper, "symbolicLinkDestinationURL") = NSURL;
overload externalInstanceMethod(#NSFileWrapper, "initWithPath:") = Id, NSString;
overload externalInstanceMethod(#NSFileWrapper, "initSymbolicLinkWithDestination:") = Id, NSString;
overload externalInstanceMethod(#NSFileWrapper, "needsToBeUpdatedFromPath:") = Bool, NSString;
overload externalInstanceMethod(#NSFileWrapper, "updateFromPath:") = Bool, NSString;
overload externalInstanceMethod(#NSFileWrapper, "writeToFile:atomically:updateFilenames:") = Bool, NSString, Bool, Bool;
overload externalInstanceMethod(#NSFileWrapper, "addFileWithPath:") = NSString, NSString;
overload externalInstanceMethod(#NSFileWrapper, "addSymbolicLinkWithDestination:preferredFilename:") = NSString, NSString, NSString;
overload externalInstanceMethod(#NSFileWrapper, "symbolicLinkDestination") = NSString;

record NSFormatter = externalClass(NSObject);
overload externalInstanceMethod(#NSFormatter, "copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#NSFormatter, "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSFormatter, "initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#NSFormatter, "stringForObjectValue:") = NSString, Id;
overload externalInstanceMethod(#NSFormatter, "attributedStringForObjectValue:withDefaultAttributes:") = NSAttributedString, Id, NSDictionary;
overload externalInstanceMethod(#NSFormatter, "editingStringForObjectValue:") = NSString, Id;
overload externalInstanceMethod(#NSFormatter, "getObjectValue:forString:errorDescription:") = Bool, Pointer[Id], NSString, Pointer[NSString];
overload externalInstanceMethod(#NSFormatter, "isPartialStringValid:newEditingString:errorDescription:") = Bool, NSString, Pointer[NSString], Pointer[NSString];
overload externalInstanceMethod(#NSFormatter, "isPartialStringValid:proposedSelectedRange:originalString:originalSelectedRange:errorDescription:") = Bool, Pointer[NSString], NSRangePointer, NSString, NSRange, Pointer[NSString];

record NSHTTPCookie = externalClass(NSObject);
overload externalInstanceMethod(#NSHTTPCookie, "initWithProperties:") = Id, NSDictionary;
overload externalClassMethod(#NSHTTPCookie, "cookieWithProperties:") = Id, NSDictionary;
overload externalClassMethod(#NSHTTPCookie, "requestHeaderFieldsWithCookies:") = NSDictionary, NSArray;
overload externalClassMethod(#NSHTTPCookie, "cookiesWithResponseHeaderFields:forURL:") = NSArray, NSDictionary, NSURL;
overload externalInstanceMethod(#NSHTTPCookie, "properties") = NSDictionary;
overload externalInstanceMethod(#NSHTTPCookie, "version") = UInt;
overload externalInstanceMethod(#NSHTTPCookie, "name") = NSString;
overload externalInstanceMethod(#NSHTTPCookie, "value") = NSString;
overload externalInstanceMethod(#NSHTTPCookie, "expiresDate") = NSDate;
overload externalInstanceMethod(#NSHTTPCookie, "isSessionOnly") = Bool;
overload externalInstanceMethod(#NSHTTPCookie, "domain") = NSString;
overload externalInstanceMethod(#NSHTTPCookie, "path") = NSString;
overload externalInstanceMethod(#NSHTTPCookie, "isSecure") = Bool;
overload externalInstanceMethod(#NSHTTPCookie, "isHTTPOnly") = Bool;
overload externalInstanceMethod(#NSHTTPCookie, "comment") = NSString;
overload externalInstanceMethod(#NSHTTPCookie, "commentURL") = NSURL;
overload externalInstanceMethod(#NSHTTPCookie, "portList") = NSArray;

record NSHTTPCookieStorage = externalClass(NSObject);
overload externalClassMethod(#NSHTTPCookieStorage, "sharedHTTPCookieStorage") = NSHTTPCookieStorage;
overload externalInstanceMethod(#NSHTTPCookieStorage, "initWithStorageLocation:") = Id, NSURL;
overload externalInstanceMethod(#NSHTTPCookieStorage, "cookies") = NSArray;
overload externalInstanceMethod(#NSHTTPCookieStorage, "setCookie:") = Void, NSHTTPCookie;
overload externalInstanceMethod(#NSHTTPCookieStorage, "deleteCookie:") = Void, NSHTTPCookie;
overload externalInstanceMethod(#NSHTTPCookieStorage, "cookiesForURL:") = NSArray, NSURL;
overload externalInstanceMethod(#NSHTTPCookieStorage, "setCookies:forURL:mainDocumentURL:") = Void, NSArray, NSURL, NSURL;
overload externalInstanceMethod(#NSHTTPCookieStorage, "cookieAcceptPolicy") = UInt;
overload externalInstanceMethod(#NSHTTPCookieStorage, "setCookieAcceptPolicy:") = Void, UInt;

record NSHTTPURLResponse = externalClass(NSURLResponse);
overload externalInstanceMethod(#NSHTTPURLResponse, "statusCode") = Int;
overload externalInstanceMethod(#NSHTTPURLResponse, "allHeaderFields") = NSDictionary;
overload externalClassMethod(#NSHTTPURLResponse, "localizedStringForStatusCode:") = NSString, Int;

record NSIndexPath = externalClass(NSObject);
overload externalInstanceMethod(#NSIndexPath, "copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#NSIndexPath, "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSIndexPath, "initWithCoder:") = Id, NSCoder;
overload externalClassMethod(#NSIndexPath, "indexPathWithIndex:") = Id, UInt;
overload externalClassMethod(#NSIndexPath, "indexPathWithIndexes:length:") = Id, Pointer[UInt], UInt;
overload externalInstanceMethod(#NSIndexPath, "initWithIndex:") = Id, UInt;
overload externalInstanceMethod(#NSIndexPath, "initWithIndexes:length:") = Id, Pointer[UInt], UInt;
overload externalInstanceMethod(#NSIndexPath, "indexPathByAddingIndex:") = NSIndexPath, UInt;
overload externalInstanceMethod(#NSIndexPath, "indexPathByRemovingLastIndex") = NSIndexPath;
overload externalInstanceMethod(#NSIndexPath, "indexAtPosition:") = UInt, UInt;
overload externalInstanceMethod(#NSIndexPath, "length") = UInt;
overload externalInstanceMethod(#NSIndexPath, "getIndexes:") = Void, Pointer[UInt];
overload externalInstanceMethod(#NSIndexPath, "compare:") = Int, NSIndexPath;

record NSIndexSet = externalClass(NSObject);
overload externalInstanceMethod(#NSIndexSet, "copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#NSIndexSet, "mutableCopyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#NSIndexSet, "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSIndexSet, "initWithCoder:") = Id, NSCoder;
overload externalClassMethod(#NSIndexSet, "indexSet") = Id;
overload externalClassMethod(#NSIndexSet, "indexSetWithIndex:") = Id, UInt;
overload externalClassMethod(#NSIndexSet, "indexSetWithIndexesInRange:") = Id, NSRange;
overload externalInstanceMethod(#NSIndexSet, "init") = Id;
overload externalInstanceMethod(#NSIndexSet, "initWithIndex:") = Id, UInt;
overload externalInstanceMethod(#NSIndexSet, "initWithIndexesInRange:") = Id, NSRange;
overload externalInstanceMethod(#NSIndexSet, "initWithIndexSet:") = Id, NSIndexSet;
overload externalInstanceMethod(#NSIndexSet, "isEqualToIndexSet:") = Bool, NSIndexSet;
overload externalInstanceMethod(#NSIndexSet, "count") = UInt;
overload externalInstanceMethod(#NSIndexSet, "firstIndex") = UInt;
overload externalInstanceMethod(#NSIndexSet, "lastIndex") = UInt;
overload externalInstanceMethod(#NSIndexSet, "indexGreaterThanIndex:") = UInt, UInt;
overload externalInstanceMethod(#NSIndexSet, "indexLessThanIndex:") = UInt, UInt;
overload externalInstanceMethod(#NSIndexSet, "indexGreaterThanOrEqualToIndex:") = UInt, UInt;
overload externalInstanceMethod(#NSIndexSet, "indexLessThanOrEqualToIndex:") = UInt, UInt;
overload externalInstanceMethod(#NSIndexSet, "getIndexes:maxCount:inIndexRange:") = UInt, Pointer[UInt], UInt, NSRangePointer;
overload externalInstanceMethod(#NSIndexSet, "countOfIndexesInRange:") = UInt, NSRange;
overload externalInstanceMethod(#NSIndexSet, "containsIndex:") = Bool, UInt;
overload externalInstanceMethod(#NSIndexSet, "containsIndexesInRange:") = Bool, NSRange;
overload externalInstanceMethod(#NSIndexSet, "containsIndexes:") = Bool, NSIndexSet;
overload externalInstanceMethod(#NSIndexSet, "intersectsIndexesInRange:") = Bool, NSRange;
overload externalInstanceMethod(#NSIndexSet, "enumerateIndexesUsingBlock:") = Void, UnknownType;
overload externalInstanceMethod(#NSIndexSet, "enumerateIndexesWithOptions:usingBlock:") = Void, UInt, UnknownType;
overload externalInstanceMethod(#NSIndexSet, "enumerateIndexesInRange:options:usingBlock:") = Void, NSRange, UInt, UnknownType;
overload externalInstanceMethod(#NSIndexSet, "indexPassingTest:") = UInt, UnknownType;
overload externalInstanceMethod(#NSIndexSet, "indexWithOptions:passingTest:") = UInt, UInt, UnknownType;
overload externalInstanceMethod(#NSIndexSet, "indexInRange:options:passingTest:") = UInt, NSRange, UInt, UnknownType;
overload externalInstanceMethod(#NSIndexSet, "indexesPassingTest:") = NSIndexSet, UnknownType;
overload externalInstanceMethod(#NSIndexSet, "indexesWithOptions:passingTest:") = NSIndexSet, UInt, UnknownType;
overload externalInstanceMethod(#NSIndexSet, "indexesInRange:options:passingTest:") = NSIndexSet, NSRange, UInt, UnknownType;

record NSInputStream = externalClass(NSStream);
overload externalInstanceMethod(#NSInputStream, "read:maxLength:") = Int, Pointer[CUChar], UInt;
overload externalInstanceMethod(#NSInputStream, "getBuffer:length:") = Bool, Pointer[Pointer[CUChar]], Pointer[UInt];
overload externalInstanceMethod(#NSInputStream, "hasBytesAvailable") = Bool;
overload externalInstanceMethod(#NSInputStream, "initWithData:") = Id, NSData;
overload externalInstanceMethod(#NSInputStream, "initWithFileAtPath:") = Id, NSString;
overload externalInstanceMethod(#NSInputStream, "initWithURL:") = Id, NSURL;
overload externalClassMethod(#NSInputStream, "inputStreamWithData:") = Id, NSData;
overload externalClassMethod(#NSInputStream, "inputStreamWithFileAtPath:") = Id, NSString;
overload externalClassMethod(#NSInputStream, "inputStreamWithURL:") = Id, NSURL;

record NSInvocation = externalClass(NSObject);
overload externalClassMethod(#NSInvocation, "invocationWithMethodSignature:") = NSInvocation, NSMethodSignature;
overload externalInstanceMethod(#NSInvocation, "methodSignature") = NSMethodSignature;
overload externalInstanceMethod(#NSInvocation, "retainArguments") = Void;
overload externalInstanceMethod(#NSInvocation, "argumentsRetained") = Bool;
overload externalInstanceMethod(#NSInvocation, "target") = Id;
overload externalInstanceMethod(#NSInvocation, "setTarget:") = Void, Id;
overload externalInstanceMethod(#NSInvocation, "selector") = SelectorHandle;
overload externalInstanceMethod(#NSInvocation, "setSelector:") = Void, SelectorHandle;
overload externalInstanceMethod(#NSInvocation, "getReturnValue:") = Void, RawPointer;
overload externalInstanceMethod(#NSInvocation, "setReturnValue:") = Void, RawPointer;
overload externalInstanceMethod(#NSInvocation, "getArgument:atIndex:") = Void, RawPointer, Int;
overload externalInstanceMethod(#NSInvocation, "setArgument:atIndex:") = Void, RawPointer, Int;
overload externalInstanceMethod(#NSInvocation, "invoke") = Void;
overload externalInstanceMethod(#NSInvocation, "invokeWithTarget:") = Void, Id;

record NSInvocationOperation = externalClass(NSOperation);
overload externalInstanceMethod(#NSInvocationOperation, "initWithTarget:selector:object:") = Id, Id, SelectorHandle, Id;
overload externalInstanceMethod(#NSInvocationOperation, "initWithInvocation:") = Id, NSInvocation;
overload externalInstanceMethod(#NSInvocationOperation, "invocation") = NSInvocation;
overload externalInstanceMethod(#NSInvocationOperation, "result") = Id;

record NSKeyedArchiver = externalClass(NSCoder);
overload externalClassMethod(#NSKeyedArchiver, "archivedDataWithRootObject:") = NSData, Id;
overload externalClassMethod(#NSKeyedArchiver, "archiveRootObject:toFile:") = Bool, Id, NSString;
overload externalInstanceMethod(#NSKeyedArchiver, "initForWritingWithMutableData:") = Id, NSMutableData;
overload externalInstanceMethod(#NSKeyedArchiver, "setDelegate:") = Void, Id;
overload externalInstanceMethod(#NSKeyedArchiver, "delegate") = Id;
overload externalInstanceMethod(#NSKeyedArchiver, "setOutputFormat:") = Void, UInt;
overload externalInstanceMethod(#NSKeyedArchiver, "outputFormat") = UInt;
overload externalInstanceMethod(#NSKeyedArchiver, "finishEncoding") = Void;
overload externalClassMethod(#NSKeyedArchiver, "setClassName:forClass:") = Void, NSString, Id;
overload externalInstanceMethod(#NSKeyedArchiver, "setClassName:forClass:") = Void, NSString, Id;
overload externalClassMethod(#NSKeyedArchiver, "classNameForClass:") = NSString, Id;
overload externalInstanceMethod(#NSKeyedArchiver, "classNameForClass:") = NSString, Id;
overload externalInstanceMethod(#NSKeyedArchiver, "encodeObject:forKey:") = Void, Id, NSString;
overload externalInstanceMethod(#NSKeyedArchiver, "encodeConditionalObject:forKey:") = Void, Id, NSString;
overload externalInstanceMethod(#NSKeyedArchiver, "encodeBool:forKey:") = Void, Bool, NSString;
overload externalInstanceMethod(#NSKeyedArchiver, "encodeInt:forKey:") = Void, Int, NSString;
overload externalInstanceMethod(#NSKeyedArchiver, "encodeInt32:forKey:") = Void, Int, NSString;
overload externalInstanceMethod(#NSKeyedArchiver, "encodeInt64:forKey:") = Void, Int64, NSString;
overload externalInstanceMethod(#NSKeyedArchiver, "encodeFloat:forKey:") = Void, Float, NSString;
overload externalInstanceMethod(#NSKeyedArchiver, "encodeDouble:forKey:") = Void, Double, NSString;
overload externalInstanceMethod(#NSKeyedArchiver, "encodeBytes:length:forKey:") = Void, Pointer[CUChar], UInt, NSString;

record NSKeyedUnarchiver = externalClass(NSCoder);
overload externalClassMethod(#NSKeyedUnarchiver, "unarchiveObjectWithData:") = Id, NSData;
overload externalClassMethod(#NSKeyedUnarchiver, "unarchiveObjectWithFile:") = Id, NSString;
overload externalInstanceMethod(#NSKeyedUnarchiver, "initForReadingWithData:") = Id, NSData;
overload externalInstanceMethod(#NSKeyedUnarchiver, "setDelegate:") = Void, Id;
overload externalInstanceMethod(#NSKeyedUnarchiver, "delegate") = Id;
overload externalInstanceMethod(#NSKeyedUnarchiver, "finishDecoding") = Void;
overload externalClassMethod(#NSKeyedUnarchiver, "setClass:forClassName:") = Void, Id, NSString;
overload externalInstanceMethod(#NSKeyedUnarchiver, "setClass:forClassName:") = Void, Id, NSString;
overload externalClassMethod(#NSKeyedUnarchiver, "classForClassName:") = Id, NSString;
overload externalInstanceMethod(#NSKeyedUnarchiver, "classForClassName:") = Id, NSString;
overload externalInstanceMethod(#NSKeyedUnarchiver, "containsValueForKey:") = Bool, NSString;
overload externalInstanceMethod(#NSKeyedUnarchiver, "decodeObjectForKey:") = Id, NSString;
overload externalInstanceMethod(#NSKeyedUnarchiver, "decodeBoolForKey:") = Bool, NSString;
overload externalInstanceMethod(#NSKeyedUnarchiver, "decodeIntForKey:") = Int, NSString;
overload externalInstanceMethod(#NSKeyedUnarchiver, "decodeInt32ForKey:") = Int, NSString;
overload externalInstanceMethod(#NSKeyedUnarchiver, "decodeInt64ForKey:") = Int64, NSString;
overload externalInstanceMethod(#NSKeyedUnarchiver, "decodeFloatForKey:") = Float, NSString;
overload externalInstanceMethod(#NSKeyedUnarchiver, "decodeDoubleForKey:") = Double, NSString;
overload externalInstanceMethod(#NSKeyedUnarchiver, "decodeBytesForKey:returnedLength:") = Pointer[CUChar], NSString, Pointer[UInt];

record NSLocale = externalClass(NSObject);
overload externalInstanceMethod(#NSLocale, "copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#NSLocale, "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSLocale, "initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#NSLocale, "objectForKey:") = Id, Id;
overload externalInstanceMethod(#NSLocale, "displayNameForKey:value:") = NSString, Id, Id;
overload externalInstanceMethod(#NSLocale, "localeIdentifier") = NSString;
overload externalClassMethod(#NSLocale, "systemLocale") = Id;
overload externalClassMethod(#NSLocale, "currentLocale") = Id;
overload externalClassMethod(#NSLocale, "autoupdatingCurrentLocale") = Id;
overload externalInstanceMethod(#NSLocale, "initWithLocaleIdentifier:") = Id, NSString;
overload externalClassMethod(#NSLocale, "availableLocaleIdentifiers") = NSArray;
overload externalClassMethod(#NSLocale, "ISOLanguageCodes") = NSArray;
overload externalClassMethod(#NSLocale, "ISOCountryCodes") = NSArray;
overload externalClassMethod(#NSLocale, "ISOCurrencyCodes") = NSArray;
overload externalClassMethod(#NSLocale, "commonISOCurrencyCodes") = NSArray;
overload externalClassMethod(#NSLocale, "preferredLanguages") = NSArray;
overload externalClassMethod(#NSLocale, "componentsFromLocaleIdentifier:") = NSDictionary, NSString;
overload externalClassMethod(#NSLocale, "localeIdentifierFromComponents:") = NSString, NSDictionary;
overload externalClassMethod(#NSLocale, "canonicalLocaleIdentifierFromString:") = NSString, NSString;
overload externalClassMethod(#NSLocale, "canonicalLanguageIdentifierFromString:") = NSString, NSString;
overload externalClassMethod(#NSLocale, "localeIdentifierFromWindowsLocaleCode:") = NSString, UInt;
overload externalClassMethod(#NSLocale, "windowsLocaleCodeFromLocaleIdentifier:") = UInt, NSString;
overload externalClassMethod(#NSLocale, "characterDirectionForLanguage:") = UInt, NSString;
overload externalClassMethod(#NSLocale, "lineDirectionForLanguage:") = UInt, NSString;

record NSLock = externalClass(NSObject);
overload externalInstanceMethod(#NSLock, "lock") = Void;
overload externalInstanceMethod(#NSLock, "unlock") = Void;
overload externalInstanceMethod(#NSLock, "tryLock") = Bool;
overload externalInstanceMethod(#NSLock, "lockBeforeDate:") = Bool, NSDate;
overload externalInstanceMethod(#NSLock, "setName:") = Void, NSString;
overload externalInstanceMethod(#NSLock, "name") = NSString;

record NSMachPort = externalClass(NSPort);
overload externalClassMethod(#NSMachPort, "portWithMachPort:") = NSPort, UInt;
overload externalInstanceMethod(#NSMachPort, "initWithMachPort:") = Id, UInt;
overload externalInstanceMethod(#NSMachPort, "setDelegate:") = Void, Id;
overload externalInstanceMethod(#NSMachPort, "delegate") = Id;
overload externalClassMethod(#NSMachPort, "portWithMachPort:options:") = NSPort, UInt, UInt;
overload externalInstanceMethod(#NSMachPort, "initWithMachPort:options:") = Id, UInt, UInt;
overload externalInstanceMethod(#NSMachPort, "machPort") = UInt;
overload externalInstanceMethod(#NSMachPort, "scheduleInRunLoop:forMode:") = Void, NSRunLoop, NSString;
overload externalInstanceMethod(#NSMachPort, "removeFromRunLoop:forMode:") = Void, NSRunLoop, NSString;

record NSMessagePort = externalClass(NSPort);

record NSMethodSignature = externalClass(NSObject);
overload externalClassMethod(#NSMethodSignature, "signatureWithObjCTypes:") = NSMethodSignature, Pointer[CChar];
overload externalInstanceMethod(#NSMethodSignature, "numberOfArguments") = UInt;
overload externalInstanceMethod(#NSMethodSignature, "getArgumentTypeAtIndex:") = Pointer[CChar], UInt;
overload externalInstanceMethod(#NSMethodSignature, "frameLength") = UInt;
overload externalInstanceMethod(#NSMethodSignature, "isOneway") = Bool;
overload externalInstanceMethod(#NSMethodSignature, "methodReturnType") = Pointer[CChar];
overload externalInstanceMethod(#NSMethodSignature, "methodReturnLength") = UInt;

record NSMutableArray = externalClass(NSArray);
overload externalInstanceMethod(#NSMutableArray, "addObject:") = Void, Id;
overload externalInstanceMethod(#NSMutableArray, "insertObject:atIndex:") = Void, Id, UInt;
overload externalInstanceMethod(#NSMutableArray, "removeLastObject") = Void;
overload externalInstanceMethod(#NSMutableArray, "removeObjectAtIndex:") = Void, UInt;
overload externalInstanceMethod(#NSMutableArray, "replaceObjectAtIndex:withObject:") = Void, UInt, Id;
overload externalInstanceMethod(#NSMutableArray, "addObjectsFromArray:") = Void, NSArray;
overload externalInstanceMethod(#NSMutableArray, "exchangeObjectAtIndex:withObjectAtIndex:") = Void, UInt, UInt;
overload externalInstanceMethod(#NSMutableArray, "removeAllObjects") = Void;
overload externalInstanceMethod(#NSMutableArray, "removeObject:inRange:") = Void, Id, NSRange;
overload externalInstanceMethod(#NSMutableArray, "removeObject:") = Void, Id;
overload externalInstanceMethod(#NSMutableArray, "removeObjectIdenticalTo:inRange:") = Void, Id, NSRange;
overload externalInstanceMethod(#NSMutableArray, "removeObjectIdenticalTo:") = Void, Id;
overload externalInstanceMethod(#NSMutableArray, "removeObjectsFromIndices:numIndices:") = Void, Pointer[UInt], UInt;
overload externalInstanceMethod(#NSMutableArray, "removeObjectsInArray:") = Void, NSArray;
overload externalInstanceMethod(#NSMutableArray, "removeObjectsInRange:") = Void, NSRange;
overload externalInstanceMethod(#NSMutableArray, "replaceObjectsInRange:withObjectsFromArray:range:") = Void, NSRange, NSArray, NSRange;
overload externalInstanceMethod(#NSMutableArray, "replaceObjectsInRange:withObjectsFromArray:") = Void, NSRange, NSArray;
overload externalInstanceMethod(#NSMutableArray, "setArray:") = Void, NSArray;
overload externalInstanceMethod(#NSMutableArray, "sortUsingFunction:context:") = Void, CCodePointer[[Id,Id,RawPointer],[Int]], RawPointer;
overload externalInstanceMethod(#NSMutableArray, "sortUsingSelector:") = Void, SelectorHandle;
overload externalInstanceMethod(#NSMutableArray, "insertObjects:atIndexes:") = Void, NSArray, NSIndexSet;
overload externalInstanceMethod(#NSMutableArray, "removeObjectsAtIndexes:") = Void, NSIndexSet;
overload externalInstanceMethod(#NSMutableArray, "replaceObjectsAtIndexes:withObjects:") = Void, NSIndexSet, NSArray;
overload externalInstanceMethod(#NSMutableArray, "sortUsingComparator:") = Void, NSComparator;
overload externalInstanceMethod(#NSMutableArray, "sortWithOptions:usingComparator:") = Void, UInt, NSComparator;
overload externalClassMethod(#NSMutableArray, "arrayWithCapacity:") = Id, UInt;
overload externalInstanceMethod(#NSMutableArray, "initWithCapacity:") = Id, UInt;
overload externalInstanceMethod(#NSMutableArray, "sortUsingDescriptors:") = Void, NSArray;
overload externalInstanceMethod(#NSMutableArray, "filterUsingPredicate:") = Void, NSPredicate;

record NSMutableAttributedString = externalClass(NSAttributedString);
overload externalInstanceMethod(#NSMutableAttributedString, "replaceCharactersInRange:withString:") = Void, NSRange, NSString;
overload externalInstanceMethod(#NSMutableAttributedString, "setAttributes:range:") = Void, NSDictionary, NSRange;
overload externalInstanceMethod(#NSMutableAttributedString, "mutableString") = NSMutableString;
overload externalInstanceMethod(#NSMutableAttributedString, "addAttribute:value:range:") = Void, NSString, Id, NSRange;
overload externalInstanceMethod(#NSMutableAttributedString, "addAttributes:range:") = Void, NSDictionary, NSRange;
overload externalInstanceMethod(#NSMutableAttributedString, "removeAttribute:range:") = Void, NSString, NSRange;
overload externalInstanceMethod(#NSMutableAttributedString, "replaceCharactersInRange:withAttributedString:") = Void, NSRange, NSAttributedString;
overload externalInstanceMethod(#NSMutableAttributedString, "insertAttributedString:atIndex:") = Void, NSAttributedString, UInt;
overload externalInstanceMethod(#NSMutableAttributedString, "appendAttributedString:") = Void, NSAttributedString;
overload externalInstanceMethod(#NSMutableAttributedString, "deleteCharactersInRange:") = Void, NSRange;
overload externalInstanceMethod(#NSMutableAttributedString, "setAttributedString:") = Void, NSAttributedString;
overload externalInstanceMethod(#NSMutableAttributedString, "beginEditing") = Void;
overload externalInstanceMethod(#NSMutableAttributedString, "endEditing") = Void;

record NSMutableCharacterSet = externalClass(NSCharacterSet);
overload externalInstanceMethod(#NSMutableCharacterSet, "copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#NSMutableCharacterSet, "mutableCopyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#NSMutableCharacterSet, "addCharactersInRange:") = Void, NSRange;
overload externalInstanceMethod(#NSMutableCharacterSet, "removeCharactersInRange:") = Void, NSRange;
overload externalInstanceMethod(#NSMutableCharacterSet, "addCharactersInString:") = Void, NSString;
overload externalInstanceMethod(#NSMutableCharacterSet, "removeCharactersInString:") = Void, NSString;
overload externalInstanceMethod(#NSMutableCharacterSet, "formUnionWithCharacterSet:") = Void, NSCharacterSet;
overload externalInstanceMethod(#NSMutableCharacterSet, "formIntersectionWithCharacterSet:") = Void, NSCharacterSet;
overload externalInstanceMethod(#NSMutableCharacterSet, "invert") = Void;

record NSMutableData = externalClass(NSData);
overload externalInstanceMethod(#NSMutableData, "mutableBytes") = RawPointer;
overload externalInstanceMethod(#NSMutableData, "setLength:") = Void, UInt;
overload externalInstanceMethod(#NSMutableData, "appendBytes:length:") = Void, RawPointer, UInt;
overload externalInstanceMethod(#NSMutableData, "appendData:") = Void, NSData;
overload externalInstanceMethod(#NSMutableData, "increaseLengthBy:") = Void, UInt;
overload externalInstanceMethod(#NSMutableData, "replaceBytesInRange:withBytes:") = Void, NSRange, RawPointer;
overload externalInstanceMethod(#NSMutableData, "resetBytesInRange:") = Void, NSRange;
overload externalInstanceMethod(#NSMutableData, "setData:") = Void, NSData;
overload externalInstanceMethod(#NSMutableData, "replaceBytesInRange:withBytes:length:") = Void, NSRange, RawPointer, UInt;
overload externalClassMethod(#NSMutableData, "dataWithCapacity:") = Id, UInt;
overload externalClassMethod(#NSMutableData, "dataWithLength:") = Id, UInt;
overload externalInstanceMethod(#NSMutableData, "initWithCapacity:") = Id, UInt;
overload externalInstanceMethod(#NSMutableData, "initWithLength:") = Id, UInt;

record NSMutableDictionary = externalClass(NSDictionary);
overload externalInstanceMethod(#NSMutableDictionary, "removeObjectForKey:") = Void, Id;
overload externalInstanceMethod(#NSMutableDictionary, "setObject:forKey:") = Void, Id, Id;
overload externalInstanceMethod(#NSMutableDictionary, "addEntriesFromDictionary:") = Void, NSDictionary;
overload externalInstanceMethod(#NSMutableDictionary, "removeAllObjects") = Void;
overload externalInstanceMethod(#NSMutableDictionary, "removeObjectsForKeys:") = Void, NSArray;
overload externalInstanceMethod(#NSMutableDictionary, "setDictionary:") = Void, NSDictionary;
overload externalClassMethod(#NSMutableDictionary, "dictionaryWithCapacity:") = Id, UInt;
overload externalInstanceMethod(#NSMutableDictionary, "initWithCapacity:") = Id, UInt;
overload externalInstanceMethod(#NSMutableDictionary, "setValue:forKey:") = Void, Id, NSString;

record NSMutableIndexSet = externalClass(NSIndexSet);
overload externalInstanceMethod(#NSMutableIndexSet, "addIndexes:") = Void, NSIndexSet;
overload externalInstanceMethod(#NSMutableIndexSet, "removeIndexes:") = Void, NSIndexSet;
overload externalInstanceMethod(#NSMutableIndexSet, "removeAllIndexes") = Void;
overload externalInstanceMethod(#NSMutableIndexSet, "addIndex:") = Void, UInt;
overload externalInstanceMethod(#NSMutableIndexSet, "removeIndex:") = Void, UInt;
overload externalInstanceMethod(#NSMutableIndexSet, "addIndexesInRange:") = Void, NSRange;
overload externalInstanceMethod(#NSMutableIndexSet, "removeIndexesInRange:") = Void, NSRange;
overload externalInstanceMethod(#NSMutableIndexSet, "shiftIndexesStartingAtIndex:by:") = Void, UInt, Int;

record NSMutableSet = externalClass(NSSet);
overload externalInstanceMethod(#NSMutableSet, "addObject:") = Void, Id;
overload externalInstanceMethod(#NSMutableSet, "removeObject:") = Void, Id;
overload externalInstanceMethod(#NSMutableSet, "addObjectsFromArray:") = Void, NSArray;
overload externalInstanceMethod(#NSMutableSet, "intersectSet:") = Void, NSSet;
overload externalInstanceMethod(#NSMutableSet, "minusSet:") = Void, NSSet;
overload externalInstanceMethod(#NSMutableSet, "removeAllObjects") = Void;
overload externalInstanceMethod(#NSMutableSet, "unionSet:") = Void, NSSet;
overload externalInstanceMethod(#NSMutableSet, "setSet:") = Void, NSSet;
overload externalClassMethod(#NSMutableSet, "setWithCapacity:") = Id, UInt;
overload externalInstanceMethod(#NSMutableSet, "initWithCapacity:") = Id, UInt;
overload externalInstanceMethod(#NSMutableSet, "filterUsingPredicate:") = Void, NSPredicate;

record NSMutableString = externalClass(NSString);
overload externalInstanceMethod(#NSMutableString, "replaceCharactersInRange:withString:") = Void, NSRange, NSString;
overload externalInstanceMethod(#NSMutableString, "insertString:atIndex:") = Void, NSString, UInt;
overload externalInstanceMethod(#NSMutableString, "deleteCharactersInRange:") = Void, NSRange;
overload externalInstanceMethod(#NSMutableString, "appendString:") = Void, NSString;
overload externalVarargInstanceMethod(#NSMutableString, "appendFormat:") = Void, NSString;
overload externalInstanceMethod(#NSMutableString, "setString:") = Void, NSString;
overload externalInstanceMethod(#NSMutableString, "initWithCapacity:") = Id, UInt;
overload externalClassMethod(#NSMutableString, "stringWithCapacity:") = Id, UInt;
overload externalInstanceMethod(#NSMutableString, "replaceOccurrencesOfString:withString:options:range:") = UInt, NSString, NSString, UInt, NSRange;

record NSMutableURLRequest = externalClass(NSURLRequest);
overload externalInstanceMethod(#NSMutableURLRequest, "setURL:") = Void, NSURL;
overload externalInstanceMethod(#NSMutableURLRequest, "setCachePolicy:") = Void, UInt;
overload externalInstanceMethod(#NSMutableURLRequest, "setTimeoutInterval:") = Void, Double;
overload externalInstanceMethod(#NSMutableURLRequest, "setMainDocumentURL:") = Void, NSURL;
overload externalInstanceMethod(#NSMutableURLRequest, "setNetworkServiceType:") = Void, UInt;
overload externalInstanceMethod(#NSMutableURLRequest, "setHTTPMethod:") = Void, NSString;
overload externalInstanceMethod(#NSMutableURLRequest, "setAllHTTPHeaderFields:") = Void, NSDictionary;
overload externalInstanceMethod(#NSMutableURLRequest, "setValue:forHTTPHeaderField:") = Void, NSString, NSString;
overload externalInstanceMethod(#NSMutableURLRequest, "addValue:forHTTPHeaderField:") = Void, NSString, NSString;
overload externalInstanceMethod(#NSMutableURLRequest, "setHTTPBody:") = Void, NSData;
overload externalInstanceMethod(#NSMutableURLRequest, "setHTTPBodyStream:") = Void, NSInputStream;
overload externalInstanceMethod(#NSMutableURLRequest, "setHTTPShouldHandleCookies:") = Void, Bool;
overload externalInstanceMethod(#NSMutableURLRequest, "setHTTPShouldUsePipelining:") = Void, Bool;

record NSNetService = externalClass(NSObject);
overload externalInstanceMethod(#NSNetService, "initWithDomain:type:name:port:") = Id, NSString, NSString, NSString, Int;
overload externalInstanceMethod(#NSNetService, "initWithDomain:type:name:") = Id, NSString, NSString, NSString;
overload externalInstanceMethod(#NSNetService, "delegate") = Id;
overload externalInstanceMethod(#NSNetService, "setDelegate:") = Void, Id;
overload externalInstanceMethod(#NSNetService, "scheduleInRunLoop:forMode:") = Void, NSRunLoop, NSString;
overload externalInstanceMethod(#NSNetService, "removeFromRunLoop:forMode:") = Void, NSRunLoop, NSString;
overload externalInstanceMethod(#NSNetService, "domain") = NSString;
overload externalInstanceMethod(#NSNetService, "type") = NSString;
overload externalInstanceMethod(#NSNetService, "name") = NSString;
overload externalInstanceMethod(#NSNetService, "addresses") = NSArray;
overload externalInstanceMethod(#NSNetService, "port") = Int;
overload externalInstanceMethod(#NSNetService, "publish") = Void;
overload externalInstanceMethod(#NSNetService, "publishWithOptions:") = Void, UInt;
overload externalInstanceMethod(#NSNetService, "resolve") = Void;
overload externalInstanceMethod(#NSNetService, "stop") = Void;
overload externalClassMethod(#NSNetService, "dictionaryFromTXTRecordData:") = NSDictionary, NSData;
overload externalClassMethod(#NSNetService, "dataFromTXTRecordDictionary:") = NSData, NSDictionary;
overload externalInstanceMethod(#NSNetService, "hostName") = NSString;
overload externalInstanceMethod(#NSNetService, "resolveWithTimeout:") = Void, Double;
overload externalInstanceMethod(#NSNetService, "getInputStream:outputStream:") = Bool, Pointer[NSInputStream], Pointer[NSOutputStream];
overload externalInstanceMethod(#NSNetService, "setTXTRecordData:") = Bool, NSData;
overload externalInstanceMethod(#NSNetService, "TXTRecordData") = NSData;
overload externalInstanceMethod(#NSNetService, "startMonitoring") = Void;
overload externalInstanceMethod(#NSNetService, "stopMonitoring") = Void;

record NSNetServiceBrowser = externalClass(NSObject);
overload externalInstanceMethod(#NSNetServiceBrowser, "init") = Id;
overload externalInstanceMethod(#NSNetServiceBrowser, "delegate") = Id;
overload externalInstanceMethod(#NSNetServiceBrowser, "setDelegate:") = Void, Id;
overload externalInstanceMethod(#NSNetServiceBrowser, "scheduleInRunLoop:forMode:") = Void, NSRunLoop, NSString;
overload externalInstanceMethod(#NSNetServiceBrowser, "removeFromRunLoop:forMode:") = Void, NSRunLoop, NSString;
overload externalInstanceMethod(#NSNetServiceBrowser, "searchForBrowsableDomains") = Void;
overload externalInstanceMethod(#NSNetServiceBrowser, "searchForRegistrationDomains") = Void;
overload externalInstanceMethod(#NSNetServiceBrowser, "searchForServicesOfType:inDomain:") = Void, NSString, NSString;
overload externalInstanceMethod(#NSNetServiceBrowser, "stop") = Void;

record NSNotification = externalClass(NSObject);
overload externalInstanceMethod(#NSNotification, "copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#NSNotification, "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSNotification, "initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#NSNotification, "name") = NSString;
overload externalInstanceMethod(#NSNotification, "object") = Id;
overload externalInstanceMethod(#NSNotification, "userInfo") = NSDictionary;
overload externalClassMethod(#NSNotification, "notificationWithName:object:") = Id, NSString, Id;
overload externalClassMethod(#NSNotification, "notificationWithName:object:userInfo:") = Id, NSString, Id, NSDictionary;

record NSNotificationCenter = externalClass(NSObject);
overload externalClassMethod(#NSNotificationCenter, "defaultCenter") = Id;
overload externalInstanceMethod(#NSNotificationCenter, "addObserver:selector:name:object:") = Void, Id, SelectorHandle, NSString, Id;
overload externalInstanceMethod(#NSNotificationCenter, "postNotification:") = Void, NSNotification;
overload externalInstanceMethod(#NSNotificationCenter, "postNotificationName:object:") = Void, NSString, Id;
overload externalInstanceMethod(#NSNotificationCenter, "postNotificationName:object:userInfo:") = Void, NSString, Id, NSDictionary;
overload externalInstanceMethod(#NSNotificationCenter, "removeObserver:") = Void, Id;
overload externalInstanceMethod(#NSNotificationCenter, "removeObserver:name:object:") = Void, Id, NSString, Id;
overload externalInstanceMethod(#NSNotificationCenter, "addObserverForName:object:queue:usingBlock:") = Id, NSString, Id, NSOperationQueue, UnknownType;

record NSNotificationQueue = externalClass(NSObject);
overload externalClassMethod(#NSNotificationQueue, "defaultQueue") = Id;
overload externalInstanceMethod(#NSNotificationQueue, "initWithNotificationCenter:") = Id, NSNotificationCenter;
overload externalInstanceMethod(#NSNotificationQueue, "enqueueNotification:postingStyle:") = Void, NSNotification, UInt;
overload externalInstanceMethod(#NSNotificationQueue, "enqueueNotification:postingStyle:coalesceMask:forModes:") = Void, NSNotification, UInt, UInt, NSArray;
overload externalInstanceMethod(#NSNotificationQueue, "dequeueNotificationsMatching:coalesceMask:") = Void, NSNotification, UInt;

record NSNull = externalClass(NSObject);
overload externalInstanceMethod(#NSNull, "copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#NSNull, "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSNull, "initWithCoder:") = Id, NSCoder;
overload externalClassMethod(#NSNull, "null") = NSNull;

record NSNumber = externalClass(NSValue);
overload externalInstanceMethod(#NSNumber, "charValue") = CChar;
overload externalInstanceMethod(#NSNumber, "unsignedCharValue") = CUChar;
overload externalInstanceMethod(#NSNumber, "shortValue") = Short;
overload externalInstanceMethod(#NSNumber, "unsignedShortValue") = UShort;
overload externalInstanceMethod(#NSNumber, "intValue") = Int;
overload externalInstanceMethod(#NSNumber, "unsignedIntValue") = UInt;
overload externalInstanceMethod(#NSNumber, "longValue") = CLong;
overload externalInstanceMethod(#NSNumber, "unsignedLongValue") = CULong;
overload externalInstanceMethod(#NSNumber, "longLongValue") = Int64;
overload externalInstanceMethod(#NSNumber, "unsignedLongLongValue") = UInt64;
overload externalInstanceMethod(#NSNumber, "floatValue") = Float;
overload externalInstanceMethod(#NSNumber, "doubleValue") = Double;
overload externalInstanceMethod(#NSNumber, "boolValue") = Bool;
overload externalInstanceMethod(#NSNumber, "integerValue") = Int;
overload externalInstanceMethod(#NSNumber, "unsignedIntegerValue") = UInt;
overload externalInstanceMethod(#NSNumber, "stringValue") = NSString;
overload externalInstanceMethod(#NSNumber, "compare:") = Int, NSNumber;
overload externalInstanceMethod(#NSNumber, "isEqualToNumber:") = Bool, NSNumber;
overload externalInstanceMethod(#NSNumber, "descriptionWithLocale:") = NSString, Id;
overload externalInstanceMethod(#NSNumber, "initWithChar:") = Id, CChar;
overload externalInstanceMethod(#NSNumber, "initWithUnsignedChar:") = Id, CUChar;
overload externalInstanceMethod(#NSNumber, "initWithShort:") = Id, Short;
overload externalInstanceMethod(#NSNumber, "initWithUnsignedShort:") = Id, UShort;
overload externalInstanceMethod(#NSNumber, "initWithInt:") = Id, Int;
overload externalInstanceMethod(#NSNumber, "initWithUnsignedInt:") = Id, UInt;
overload externalInstanceMethod(#NSNumber, "initWithLong:") = Id, CLong;
overload externalInstanceMethod(#NSNumber, "initWithUnsignedLong:") = Id, CULong;
overload externalInstanceMethod(#NSNumber, "initWithLongLong:") = Id, Int64;
overload externalInstanceMethod(#NSNumber, "initWithUnsignedLongLong:") = Id, UInt64;
overload externalInstanceMethod(#NSNumber, "initWithFloat:") = Id, Float;
overload externalInstanceMethod(#NSNumber, "initWithDouble:") = Id, Double;
overload externalInstanceMethod(#NSNumber, "initWithBool:") = Id, Bool;
overload externalInstanceMethod(#NSNumber, "initWithInteger:") = Id, Int;
overload externalInstanceMethod(#NSNumber, "initWithUnsignedInteger:") = Id, UInt;
overload externalClassMethod(#NSNumber, "numberWithChar:") = NSNumber, CChar;
overload externalClassMethod(#NSNumber, "numberWithUnsignedChar:") = NSNumber, CUChar;
overload externalClassMethod(#NSNumber, "numberWithShort:") = NSNumber, Short;
overload externalClassMethod(#NSNumber, "numberWithUnsignedShort:") = NSNumber, UShort;
overload externalClassMethod(#NSNumber, "numberWithInt:") = NSNumber, Int;
overload externalClassMethod(#NSNumber, "numberWithUnsignedInt:") = NSNumber, UInt;
overload externalClassMethod(#NSNumber, "numberWithLong:") = NSNumber, CLong;
overload externalClassMethod(#NSNumber, "numberWithUnsignedLong:") = NSNumber, CULong;
overload externalClassMethod(#NSNumber, "numberWithLongLong:") = NSNumber, Int64;
overload externalClassMethod(#NSNumber, "numberWithUnsignedLongLong:") = NSNumber, UInt64;
overload externalClassMethod(#NSNumber, "numberWithFloat:") = NSNumber, Float;
overload externalClassMethod(#NSNumber, "numberWithDouble:") = NSNumber, Double;
overload externalClassMethod(#NSNumber, "numberWithBool:") = NSNumber, Bool;
overload externalClassMethod(#NSNumber, "numberWithInteger:") = NSNumber, Int;
overload externalClassMethod(#NSNumber, "numberWithUnsignedInteger:") = NSNumber, UInt;
overload externalInstanceMethod(#NSNumber, "decimalValue") = NSDecimal;

record NSNumberFormatter = externalClass(NSFormatter);
overload externalInstanceMethod(#NSNumberFormatter, "getObjectValue:forString:range:error:") = Bool, Pointer[Id], NSString, Pointer[NSRange], Pointer[NSError];
overload externalInstanceMethod(#NSNumberFormatter, "stringFromNumber:") = NSString, NSNumber;
overload externalInstanceMethod(#NSNumberFormatter, "numberFromString:") = NSNumber, NSString;
overload externalClassMethod(#NSNumberFormatter, "localizedStringFromNumber:numberStyle:") = NSString, NSNumber, UInt;
overload externalInstanceMethod(#NSNumberFormatter, "numberStyle") = UInt;
overload externalInstanceMethod(#NSNumberFormatter, "setNumberStyle:") = Void, UInt;
overload externalInstanceMethod(#NSNumberFormatter, "locale") = NSLocale;
overload externalInstanceMethod(#NSNumberFormatter, "setLocale:") = Void, NSLocale;
overload externalInstanceMethod(#NSNumberFormatter, "generatesDecimalNumbers") = Bool;
overload externalInstanceMethod(#NSNumberFormatter, "setGeneratesDecimalNumbers:") = Void, Bool;
overload externalInstanceMethod(#NSNumberFormatter, "formatterBehavior") = UInt;
overload externalInstanceMethod(#NSNumberFormatter, "setFormatterBehavior:") = Void, UInt;
overload externalClassMethod(#NSNumberFormatter, "defaultFormatterBehavior") = UInt;
overload externalClassMethod(#NSNumberFormatter, "setDefaultFormatterBehavior:") = Void, UInt;
overload externalInstanceMethod(#NSNumberFormatter, "negativeFormat") = NSString;
overload externalInstanceMethod(#NSNumberFormatter, "setNegativeFormat:") = Void, NSString;
overload externalInstanceMethod(#NSNumberFormatter, "textAttributesForNegativeValues") = NSDictionary;
overload externalInstanceMethod(#NSNumberFormatter, "setTextAttributesForNegativeValues:") = Void, NSDictionary;
overload externalInstanceMethod(#NSNumberFormatter, "positiveFormat") = NSString;
overload externalInstanceMethod(#NSNumberFormatter, "setPositiveFormat:") = Void, NSString;
overload externalInstanceMethod(#NSNumberFormatter, "textAttributesForPositiveValues") = NSDictionary;
overload externalInstanceMethod(#NSNumberFormatter, "setTextAttributesForPositiveValues:") = Void, NSDictionary;
overload externalInstanceMethod(#NSNumberFormatter, "allowsFloats") = Bool;
overload externalInstanceMethod(#NSNumberFormatter, "setAllowsFloats:") = Void, Bool;
overload externalInstanceMethod(#NSNumberFormatter, "decimalSeparator") = NSString;
overload externalInstanceMethod(#NSNumberFormatter, "setDecimalSeparator:") = Void, NSString;
overload externalInstanceMethod(#NSNumberFormatter, "alwaysShowsDecimalSeparator") = Bool;
overload externalInstanceMethod(#NSNumberFormatter, "setAlwaysShowsDecimalSeparator:") = Void, Bool;
overload externalInstanceMethod(#NSNumberFormatter, "currencyDecimalSeparator") = NSString;
overload externalInstanceMethod(#NSNumberFormatter, "setCurrencyDecimalSeparator:") = Void, NSString;
overload externalInstanceMethod(#NSNumberFormatter, "usesGroupingSeparator") = Bool;
overload externalInstanceMethod(#NSNumberFormatter, "setUsesGroupingSeparator:") = Void, Bool;
overload externalInstanceMethod(#NSNumberFormatter, "groupingSeparator") = NSString;
overload externalInstanceMethod(#NSNumberFormatter, "setGroupingSeparator:") = Void, NSString;
overload externalInstanceMethod(#NSNumberFormatter, "zeroSymbol") = NSString;
overload externalInstanceMethod(#NSNumberFormatter, "setZeroSymbol:") = Void, NSString;
overload externalInstanceMethod(#NSNumberFormatter, "textAttributesForZero") = NSDictionary;
overload externalInstanceMethod(#NSNumberFormatter, "setTextAttributesForZero:") = Void, NSDictionary;
overload externalInstanceMethod(#NSNumberFormatter, "nilSymbol") = NSString;
overload externalInstanceMethod(#NSNumberFormatter, "setNilSymbol:") = Void, NSString;
overload externalInstanceMethod(#NSNumberFormatter, "textAttributesForNil") = NSDictionary;
overload externalInstanceMethod(#NSNumberFormatter, "setTextAttributesForNil:") = Void, NSDictionary;
overload externalInstanceMethod(#NSNumberFormatter, "notANumberSymbol") = NSString;
overload externalInstanceMethod(#NSNumberFormatter, "setNotANumberSymbol:") = Void, NSString;
overload externalInstanceMethod(#NSNumberFormatter, "textAttributesForNotANumber") = NSDictionary;
overload externalInstanceMethod(#NSNumberFormatter, "setTextAttributesForNotANumber:") = Void, NSDictionary;
overload externalInstanceMethod(#NSNumberFormatter, "positiveInfinitySymbol") = NSString;
overload externalInstanceMethod(#NSNumberFormatter, "setPositiveInfinitySymbol:") = Void, NSString;
overload externalInstanceMethod(#NSNumberFormatter, "textAttributesForPositiveInfinity") = NSDictionary;
overload externalInstanceMethod(#NSNumberFormatter, "setTextAttributesForPositiveInfinity:") = Void, NSDictionary;
overload externalInstanceMethod(#NSNumberFormatter, "negativeInfinitySymbol") = NSString;
overload externalInstanceMethod(#NSNumberFormatter, "setNegativeInfinitySymbol:") = Void, NSString;
overload externalInstanceMethod(#NSNumberFormatter, "textAttributesForNegativeInfinity") = NSDictionary;
overload externalInstanceMethod(#NSNumberFormatter, "setTextAttributesForNegativeInfinity:") = Void, NSDictionary;
overload externalInstanceMethod(#NSNumberFormatter, "positivePrefix") = NSString;
overload externalInstanceMethod(#NSNumberFormatter, "setPositivePrefix:") = Void, NSString;
overload externalInstanceMethod(#NSNumberFormatter, "positiveSuffix") = NSString;
overload externalInstanceMethod(#NSNumberFormatter, "setPositiveSuffix:") = Void, NSString;
overload externalInstanceMethod(#NSNumberFormatter, "negativePrefix") = NSString;
overload externalInstanceMethod(#NSNumberFormatter, "setNegativePrefix:") = Void, NSString;
overload externalInstanceMethod(#NSNumberFormatter, "negativeSuffix") = NSString;
overload externalInstanceMethod(#NSNumberFormatter, "setNegativeSuffix:") = Void, NSString;
overload externalInstanceMethod(#NSNumberFormatter, "currencyCode") = NSString;
overload externalInstanceMethod(#NSNumberFormatter, "setCurrencyCode:") = Void, NSString;
overload externalInstanceMethod(#NSNumberFormatter, "currencySymbol") = NSString;
overload externalInstanceMethod(#NSNumberFormatter, "setCurrencySymbol:") = Void, NSString;
overload externalInstanceMethod(#NSNumberFormatter, "internationalCurrencySymbol") = NSString;
overload externalInstanceMethod(#NSNumberFormatter, "setInternationalCurrencySymbol:") = Void, NSString;
overload externalInstanceMethod(#NSNumberFormatter, "percentSymbol") = NSString;
overload externalInstanceMethod(#NSNumberFormatter, "setPercentSymbol:") = Void, NSString;
overload externalInstanceMethod(#NSNumberFormatter, "perMillSymbol") = NSString;
overload externalInstanceMethod(#NSNumberFormatter, "setPerMillSymbol:") = Void, NSString;
overload externalInstanceMethod(#NSNumberFormatter, "minusSign") = NSString;
overload externalInstanceMethod(#NSNumberFormatter, "setMinusSign:") = Void, NSString;
overload externalInstanceMethod(#NSNumberFormatter, "plusSign") = NSString;
overload externalInstanceMethod(#NSNumberFormatter, "setPlusSign:") = Void, NSString;
overload externalInstanceMethod(#NSNumberFormatter, "exponentSymbol") = NSString;
overload externalInstanceMethod(#NSNumberFormatter, "setExponentSymbol:") = Void, NSString;
overload externalInstanceMethod(#NSNumberFormatter, "groupingSize") = UInt;
overload externalInstanceMethod(#NSNumberFormatter, "setGroupingSize:") = Void, UInt;
overload externalInstanceMethod(#NSNumberFormatter, "secondaryGroupingSize") = UInt;
overload externalInstanceMethod(#NSNumberFormatter, "setSecondaryGroupingSize:") = Void, UInt;
overload externalInstanceMethod(#NSNumberFormatter, "multiplier") = NSNumber;
overload externalInstanceMethod(#NSNumberFormatter, "setMultiplier:") = Void, NSNumber;
overload externalInstanceMethod(#NSNumberFormatter, "formatWidth") = UInt;
overload externalInstanceMethod(#NSNumberFormatter, "setFormatWidth:") = Void, UInt;
overload externalInstanceMethod(#NSNumberFormatter, "paddingCharacter") = NSString;
overload externalInstanceMethod(#NSNumberFormatter, "setPaddingCharacter:") = Void, NSString;
overload externalInstanceMethod(#NSNumberFormatter, "paddingPosition") = UInt;
overload externalInstanceMethod(#NSNumberFormatter, "setPaddingPosition:") = Void, UInt;
overload externalInstanceMethod(#NSNumberFormatter, "roundingMode") = UInt;
overload externalInstanceMethod(#NSNumberFormatter, "setRoundingMode:") = Void, UInt;
overload externalInstanceMethod(#NSNumberFormatter, "roundingIncrement") = NSNumber;
overload externalInstanceMethod(#NSNumberFormatter, "setRoundingIncrement:") = Void, NSNumber;
overload externalInstanceMethod(#NSNumberFormatter, "minimumIntegerDigits") = UInt;
overload externalInstanceMethod(#NSNumberFormatter, "setMinimumIntegerDigits:") = Void, UInt;
overload externalInstanceMethod(#NSNumberFormatter, "maximumIntegerDigits") = UInt;
overload externalInstanceMethod(#NSNumberFormatter, "setMaximumIntegerDigits:") = Void, UInt;
overload externalInstanceMethod(#NSNumberFormatter, "minimumFractionDigits") = UInt;
overload externalInstanceMethod(#NSNumberFormatter, "setMinimumFractionDigits:") = Void, UInt;
overload externalInstanceMethod(#NSNumberFormatter, "maximumFractionDigits") = UInt;
overload externalInstanceMethod(#NSNumberFormatter, "setMaximumFractionDigits:") = Void, UInt;
overload externalInstanceMethod(#NSNumberFormatter, "minimum") = NSNumber;
overload externalInstanceMethod(#NSNumberFormatter, "setMinimum:") = Void, NSNumber;
overload externalInstanceMethod(#NSNumberFormatter, "maximum") = NSNumber;
overload externalInstanceMethod(#NSNumberFormatter, "setMaximum:") = Void, NSNumber;
overload externalInstanceMethod(#NSNumberFormatter, "currencyGroupingSeparator") = NSString;
overload externalInstanceMethod(#NSNumberFormatter, "setCurrencyGroupingSeparator:") = Void, NSString;
overload externalInstanceMethod(#NSNumberFormatter, "isLenient") = Bool;
overload externalInstanceMethod(#NSNumberFormatter, "setLenient:") = Void, Bool;
overload externalInstanceMethod(#NSNumberFormatter, "usesSignificantDigits") = Bool;
overload externalInstanceMethod(#NSNumberFormatter, "setUsesSignificantDigits:") = Void, Bool;
overload externalInstanceMethod(#NSNumberFormatter, "minimumSignificantDigits") = UInt;
overload externalInstanceMethod(#NSNumberFormatter, "setMinimumSignificantDigits:") = Void, UInt;
overload externalInstanceMethod(#NSNumberFormatter, "maximumSignificantDigits") = UInt;
overload externalInstanceMethod(#NSNumberFormatter, "setMaximumSignificantDigits:") = Void, UInt;
overload externalInstanceMethod(#NSNumberFormatter, "isPartialStringValidationEnabled") = Bool;
overload externalInstanceMethod(#NSNumberFormatter, "setPartialStringValidationEnabled:") = Void, Bool;

record NSObject = externalClass(Void);
overload externalInstanceMethod(#NSObject, "isEqual:") = Bool, Id;
overload externalInstanceMethod(#NSObject, "hash") = UInt;
overload externalInstanceMethod(#NSObject, "superclass") = Id;
overload externalInstanceMethod(#NSObject, "class") = Id;
overload externalInstanceMethod(#NSObject, "self") = Id;
overload externalInstanceMethod(#NSObject, "zone") = Pointer[NSZone];
overload externalInstanceMethod(#NSObject, "performSelector:") = Id, SelectorHandle;
overload externalInstanceMethod(#NSObject, "performSelector:withObject:") = Id, SelectorHandle, Id;
overload externalInstanceMethod(#NSObject, "performSelector:withObject:withObject:") = Id, SelectorHandle, Id, Id;
overload externalInstanceMethod(#NSObject, "isProxy") = Bool;
overload externalInstanceMethod(#NSObject, "isKindOfClass:") = Bool, Id;
overload externalInstanceMethod(#NSObject, "isMemberOfClass:") = Bool, Id;
overload externalInstanceMethod(#NSObject, "conformsToProtocol:") = Bool, Id;
overload externalInstanceMethod(#NSObject, "respondsToSelector:") = Bool, SelectorHandle;
overload externalInstanceMethod(#NSObject, "retain") = Id;
overload externalInstanceMethod(#NSObject, "release") = Void;
overload externalInstanceMethod(#NSObject, "autorelease") = Id;
overload externalInstanceMethod(#NSObject, "retainCount") = UInt;
overload externalInstanceMethod(#NSObject, "description") = NSString;
overload externalClassMethod(#NSObject, "load") = Void;
overload externalClassMethod(#NSObject, "initialize") = Void;
overload externalInstanceMethod(#NSObject, "init") = Id;
overload externalClassMethod(#NSObject, "new") = Id;
overload externalClassMethod(#NSObject, "allocWithZone:") = Id, Pointer[NSZone];
overload externalClassMethod(#NSObject, "alloc") = Id;
overload externalInstanceMethod(#NSObject, "dealloc") = Void;
overload externalInstanceMethod(#NSObject, "finalize") = Void;
overload externalInstanceMethod(#NSObject, "copy") = Id;
overload externalInstanceMethod(#NSObject, "mutableCopy") = Id;
overload externalClassMethod(#NSObject, "copyWithZone:") = Id, Pointer[NSZone];
overload externalClassMethod(#NSObject, "mutableCopyWithZone:") = Id, Pointer[NSZone];
overload externalClassMethod(#NSObject, "superclass") = Id;
overload externalClassMethod(#NSObject, "class") = Id;
overload externalClassMethod(#NSObject, "instancesRespondToSelector:") = Bool, SelectorHandle;
overload externalClassMethod(#NSObject, "conformsToProtocol:") = Bool, Id;
overload externalInstanceMethod(#NSObject, "methodForSelector:") = IMP, SelectorHandle;
overload externalClassMethod(#NSObject, "instanceMethodForSelector:") = IMP, SelectorHandle;
overload externalInstanceMethod(#NSObject, "doesNotRecognizeSelector:") = Void, SelectorHandle;
overload externalInstanceMethod(#NSObject, "forwardingTargetForSelector:") = Id, SelectorHandle;
overload externalInstanceMethod(#NSObject, "forwardInvocation:") = Void, NSInvocation;
overload externalInstanceMethod(#NSObject, "methodSignatureForSelector:") = NSMethodSignature, SelectorHandle;
overload externalClassMethod(#NSObject, "instanceMethodSignatureForSelector:") = NSMethodSignature, SelectorHandle;
overload externalClassMethod(#NSObject, "description") = NSString;
overload externalClassMethod(#NSObject, "isSubclassOfClass:") = Bool, Id;
overload externalClassMethod(#NSObject, "resolveClassMethod:") = Bool, SelectorHandle;
overload externalClassMethod(#NSObject, "resolveInstanceMethod:") = Bool, SelectorHandle;
overload externalClassMethod(#NSObject, "version") = Int;
overload externalClassMethod(#NSObject, "setVersion:") = Void, Int;
overload externalInstanceMethod(#NSObject, "classForCoder") = Id;
overload externalInstanceMethod(#NSObject, "replacementObjectForCoder:") = Id, NSCoder;
overload externalInstanceMethod(#NSObject, "awakeAfterUsingCoder:") = Id, NSCoder;
overload externalInstanceMethod(#NSObject, "autoContentAccessingProxy") = Id;
overload externalInstanceMethod(#NSObject, "attemptRecoveryFromError:optionIndex:delegate:didRecoverSelector:contextInfo:") = Void, NSError, UInt, Id, SelectorHandle, RawPointer;
overload externalInstanceMethod(#NSObject, "attemptRecoveryFromError:optionIndex:") = Bool, NSError, UInt;
overload externalInstanceMethod(#NSObject, "fileManager:shouldProceedAfterError:") = Bool, NSFileManager, NSDictionary;
overload externalInstanceMethod(#NSObject, "fileManager:willProcessPath:") = Void, NSFileManager, NSString;
overload externalInstanceMethod(#NSObject, "fileManager:shouldCopyItemAtPath:toPath:") = Bool, NSFileManager, NSString, NSString;
overload externalInstanceMethod(#NSObject, "fileManager:shouldCopyItemAtURL:toURL:") = Bool, NSFileManager, NSURL, NSURL;
overload externalInstanceMethod(#NSObject, "fileManager:shouldProceedAfterError:copyingItemAtPath:toPath:") = Bool, NSFileManager, NSError, NSString, NSString;
overload externalInstanceMethod(#NSObject, "fileManager:shouldProceedAfterError:copyingItemAtURL:toURL:") = Bool, NSFileManager, NSError, NSURL, NSURL;
overload externalInstanceMethod(#NSObject, "fileManager:shouldMoveItemAtPath:toPath:") = Bool, NSFileManager, NSString, NSString;
overload externalInstanceMethod(#NSObject, "fileManager:shouldMoveItemAtURL:toURL:") = Bool, NSFileManager, NSURL, NSURL;
overload externalInstanceMethod(#NSObject, "fileManager:shouldProceedAfterError:movingItemAtPath:toPath:") = Bool, NSFileManager, NSError, NSString, NSString;
overload externalInstanceMethod(#NSObject, "fileManager:shouldProceedAfterError:movingItemAtURL:toURL:") = Bool, NSFileManager, NSError, NSURL, NSURL;
overload externalInstanceMethod(#NSObject, "fileManager:shouldLinkItemAtPath:toPath:") = Bool, NSFileManager, NSString, NSString;
overload externalInstanceMethod(#NSObject, "fileManager:shouldLinkItemAtURL:toURL:") = Bool, NSFileManager, NSURL, NSURL;
overload externalInstanceMethod(#NSObject, "fileManager:shouldProceedAfterError:linkingItemAtPath:toPath:") = Bool, NSFileManager, NSError, NSString, NSString;
overload externalInstanceMethod(#NSObject, "fileManager:shouldProceedAfterError:linkingItemAtURL:toURL:") = Bool, NSFileManager, NSError, NSURL, NSURL;
overload externalInstanceMethod(#NSObject, "fileManager:shouldRemoveItemAtPath:") = Bool, NSFileManager, NSString;
overload externalInstanceMethod(#NSObject, "fileManager:shouldRemoveItemAtURL:") = Bool, NSFileManager, NSURL;
overload externalInstanceMethod(#NSObject, "fileManager:shouldProceedAfterError:removingItemAtPath:") = Bool, NSFileManager, NSError, NSString;
overload externalInstanceMethod(#NSObject, "fileManager:shouldProceedAfterError:removingItemAtURL:") = Bool, NSFileManager, NSError, NSURL;
overload externalClassMethod(#NSObject, "accessInstanceVariablesDirectly") = Bool;
overload externalInstanceMethod(#NSObject, "valueForKey:") = Id, NSString;
overload externalInstanceMethod(#NSObject, "setValue:forKey:") = Void, Id, NSString;
overload externalInstanceMethod(#NSObject, "validateValue:forKey:error:") = Bool, Pointer[Id], NSString, Pointer[NSError];
overload externalInstanceMethod(#NSObject, "mutableArrayValueForKey:") = NSMutableArray, NSString;
overload externalInstanceMethod(#NSObject, "mutableSetValueForKey:") = NSMutableSet, NSString;
overload externalInstanceMethod(#NSObject, "valueForKeyPath:") = Id, NSString;
overload externalInstanceMethod(#NSObject, "setValue:forKeyPath:") = Void, Id, NSString;
overload externalInstanceMethod(#NSObject, "validateValue:forKeyPath:error:") = Bool, Pointer[Id], NSString, Pointer[NSError];
overload externalInstanceMethod(#NSObject, "mutableArrayValueForKeyPath:") = NSMutableArray, NSString;
overload externalInstanceMethod(#NSObject, "mutableSetValueForKeyPath:") = NSMutableSet, NSString;
overload externalInstanceMethod(#NSObject, "valueForUndefinedKey:") = Id, NSString;
overload externalInstanceMethod(#NSObject, "setValue:forUndefinedKey:") = Void, Id, NSString;
overload externalInstanceMethod(#NSObject, "setNilValueForKey:") = Void, NSString;
overload externalInstanceMethod(#NSObject, "dictionaryWithValuesForKeys:") = NSDictionary, NSArray;
overload externalInstanceMethod(#NSObject, "setValuesForKeysWithDictionary:") = Void, NSDictionary;
overload externalInstanceMethod(#NSObject, "observeValueForKeyPath:ofObject:change:context:") = Void, NSString, Id, NSDictionary, RawPointer;
overload externalInstanceMethod(#NSObject, "addObserver:forKeyPath:options:context:") = Void, NSObject, NSString, UInt, RawPointer;
overload externalInstanceMethod(#NSObject, "removeObserver:forKeyPath:") = Void, NSObject, NSString;
overload externalInstanceMethod(#NSObject, "willChangeValueForKey:") = Void, NSString;
overload externalInstanceMethod(#NSObject, "didChangeValueForKey:") = Void, NSString;
overload externalInstanceMethod(#NSObject, "willChange:valuesAtIndexes:forKey:") = Void, UInt, NSIndexSet, NSString;
overload externalInstanceMethod(#NSObject, "didChange:valuesAtIndexes:forKey:") = Void, UInt, NSIndexSet, NSString;
overload externalInstanceMethod(#NSObject, "willChangeValueForKey:withSetMutation:usingObjects:") = Void, NSString, UInt, NSSet;
overload externalInstanceMethod(#NSObject, "didChangeValueForKey:withSetMutation:usingObjects:") = Void, NSString, UInt, NSSet;
overload externalClassMethod(#NSObject, "keyPathsForValuesAffectingValueForKey:") = NSSet, NSString;
overload externalClassMethod(#NSObject, "automaticallyNotifiesObserversForKey:") = Bool, NSString;
overload externalInstanceMethod(#NSObject, "setObservationInfo:") = Void, RawPointer;
overload externalInstanceMethod(#NSObject, "observationInfo") = RawPointer;
overload externalInstanceMethod(#NSObject, "classForKeyedArchiver") = Id;
overload externalInstanceMethod(#NSObject, "replacementObjectForKeyedArchiver:") = Id, NSKeyedArchiver;
overload externalClassMethod(#NSObject, "classFallbacksForKeyedArchiver") = NSArray;
overload externalClassMethod(#NSObject, "classForKeyedUnarchiver") = Id;
overload externalInstanceMethod(#NSObject, "performSelector:withObject:afterDelay:inModes:") = Void, SelectorHandle, Id, Double, NSArray;
overload externalInstanceMethod(#NSObject, "performSelector:withObject:afterDelay:") = Void, SelectorHandle, Id, Double;
overload externalClassMethod(#NSObject, "cancelPreviousPerformRequestsWithTarget:selector:object:") = Void, Id, SelectorHandle, Id;
overload externalClassMethod(#NSObject, "cancelPreviousPerformRequestsWithTarget:") = Void, Id;
overload externalInstanceMethod(#NSObject, "performSelectorOnMainThread:withObject:waitUntilDone:modes:") = Void, SelectorHandle, Id, Bool, NSArray;
overload externalInstanceMethod(#NSObject, "performSelectorOnMainThread:withObject:waitUntilDone:") = Void, SelectorHandle, Id, Bool;
overload externalInstanceMethod(#NSObject, "performSelector:onThread:withObject:waitUntilDone:modes:") = Void, SelectorHandle, NSThread, Id, Bool, NSArray;
overload externalInstanceMethod(#NSObject, "performSelector:onThread:withObject:waitUntilDone:") = Void, SelectorHandle, NSThread, Id, Bool;
overload externalInstanceMethod(#NSObject, "performSelectorInBackground:withObject:") = Void, SelectorHandle, Id;
overload externalInstanceMethod(#NSObject, "connection:willSendRequest:redirectResponse:") = NSURLRequest, NSURLConnection, NSURLRequest, NSURLResponse;
overload externalInstanceMethod(#NSObject, "connection:needNewBodyStream:") = NSInputStream, NSURLConnection, NSURLRequest;
overload externalInstanceMethod(#NSObject, "connection:canAuthenticateAgainstProtectionSpace:") = Bool, NSURLConnection, NSURLProtectionSpace;
overload externalInstanceMethod(#NSObject, "connection:didReceiveAuthenticationChallenge:") = Void, NSURLConnection, NSURLAuthenticationChallenge;
overload externalInstanceMethod(#NSObject, "connection:didCancelAuthenticationChallenge:") = Void, NSURLConnection, NSURLAuthenticationChallenge;
overload externalInstanceMethod(#NSObject, "connectionShouldUseCredentialStorage:") = Bool, NSURLConnection;
overload externalInstanceMethod(#NSObject, "connection:didReceiveResponse:") = Void, NSURLConnection, NSURLResponse;
overload externalInstanceMethod(#NSObject, "connection:didReceiveData:") = Void, NSURLConnection, NSData;
overload externalInstanceMethod(#NSObject, "connection:didSendBodyData:totalBytesWritten:totalBytesExpectedToWrite:") = Void, NSURLConnection, Int, Int, Int;
overload externalInstanceMethod(#NSObject, "connectionDidFinishLoading:") = Void, NSURLConnection;
overload externalInstanceMethod(#NSObject, "connection:didFailWithError:") = Void, NSURLConnection, NSError;
overload externalInstanceMethod(#NSObject, "connection:willCacheResponse:") = NSCachedURLResponse, NSURLConnection, NSCachedURLResponse;

record NSOperation = externalClass(NSObject);
overload externalInstanceMethod(#NSOperation, "init") = Id;
overload externalInstanceMethod(#NSOperation, "start") = Void;
overload externalInstanceMethod(#NSOperation, "main") = Void;
overload externalInstanceMethod(#NSOperation, "isCancelled") = Bool;
overload externalInstanceMethod(#NSOperation, "cancel") = Void;
overload externalInstanceMethod(#NSOperation, "isExecuting") = Bool;
overload externalInstanceMethod(#NSOperation, "isFinished") = Bool;
overload externalInstanceMethod(#NSOperation, "isConcurrent") = Bool;
overload externalInstanceMethod(#NSOperation, "isReady") = Bool;
overload externalInstanceMethod(#NSOperation, "addDependency:") = Void, NSOperation;
overload externalInstanceMethod(#NSOperation, "removeDependency:") = Void, NSOperation;
overload externalInstanceMethod(#NSOperation, "dependencies") = NSArray;
overload externalInstanceMethod(#NSOperation, "queuePriority") = Int;
overload externalInstanceMethod(#NSOperation, "setQueuePriority:") = Void, Int;
overload externalInstanceMethod(#NSOperation, "completionBlock") = UnknownType;
overload externalInstanceMethod(#NSOperation, "setCompletionBlock:") = Void, UnknownType;
overload externalInstanceMethod(#NSOperation, "waitUntilFinished") = Void;
overload externalInstanceMethod(#NSOperation, "threadPriority") = Double;
overload externalInstanceMethod(#NSOperation, "setThreadPriority:") = Void, Double;

record NSOperationQueue = externalClass(NSObject);
overload externalInstanceMethod(#NSOperationQueue, "addOperation:") = Void, NSOperation;
overload externalInstanceMethod(#NSOperationQueue, "addOperations:waitUntilFinished:") = Void, NSArray, Bool;
overload externalInstanceMethod(#NSOperationQueue, "addOperationWithBlock:") = Void, UnknownType;
overload externalInstanceMethod(#NSOperationQueue, "operations") = NSArray;
overload externalInstanceMethod(#NSOperationQueue, "operationCount") = UInt;
overload externalInstanceMethod(#NSOperationQueue, "maxConcurrentOperationCount") = Int;
overload externalInstanceMethod(#NSOperationQueue, "setMaxConcurrentOperationCount:") = Void, Int;
overload externalInstanceMethod(#NSOperationQueue, "setSuspended:") = Void, Bool;
overload externalInstanceMethod(#NSOperationQueue, "isSuspended") = Bool;
overload externalInstanceMethod(#NSOperationQueue, "setName:") = Void, NSString;
overload externalInstanceMethod(#NSOperationQueue, "name") = NSString;
overload externalInstanceMethod(#NSOperationQueue, "cancelAllOperations") = Void;
overload externalInstanceMethod(#NSOperationQueue, "waitUntilAllOperationsAreFinished") = Void;
overload externalClassMethod(#NSOperationQueue, "currentQueue") = Id;
overload externalClassMethod(#NSOperationQueue, "mainQueue") = Id;

record NSOrthography = externalClass(NSObject);
overload externalInstanceMethod(#NSOrthography, "copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#NSOrthography, "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSOrthography, "initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#NSOrthography, "dominantScript") = NSString;
overload externalInstanceMethod(#NSOrthography, "languageMap") = NSDictionary;
overload externalInstanceMethod(#NSOrthography, "languagesForScript:") = NSArray, NSString;
overload externalInstanceMethod(#NSOrthography, "dominantLanguageForScript:") = NSString, NSString;
overload externalInstanceMethod(#NSOrthography, "dominantLanguage") = NSString;
overload externalInstanceMethod(#NSOrthography, "allScripts") = NSArray;
overload externalInstanceMethod(#NSOrthography, "allLanguages") = NSArray;
overload externalClassMethod(#NSOrthography, "orthographyWithDominantScript:languageMap:") = Id, NSString, NSDictionary;
overload externalInstanceMethod(#NSOrthography, "initWithDominantScript:languageMap:") = Id, NSString, NSDictionary;

record NSOutputStream = externalClass(NSStream);
overload externalInstanceMethod(#NSOutputStream, "write:maxLength:") = Int, Pointer[CUChar], UInt;
overload externalInstanceMethod(#NSOutputStream, "hasSpaceAvailable") = Bool;
overload externalInstanceMethod(#NSOutputStream, "initToMemory") = Id;
overload externalInstanceMethod(#NSOutputStream, "initToBuffer:capacity:") = Id, Pointer[CUChar], UInt;
overload externalInstanceMethod(#NSOutputStream, "initToFileAtPath:append:") = Id, NSString, Bool;
overload externalInstanceMethod(#NSOutputStream, "initWithURL:append:") = Id, NSURL, Bool;
overload externalClassMethod(#NSOutputStream, "outputStreamToMemory") = Id;
overload externalClassMethod(#NSOutputStream, "outputStreamToBuffer:capacity:") = Id, Pointer[CUChar], UInt;
overload externalClassMethod(#NSOutputStream, "outputStreamToFileAtPath:append:") = Id, NSString, Bool;
overload externalClassMethod(#NSOutputStream, "outputStreamWithURL:append:") = Id, NSURL, Bool;

record NSPipe = externalClass(NSObject);
overload externalInstanceMethod(#NSPipe, "fileHandleForReading") = NSFileHandle;
overload externalInstanceMethod(#NSPipe, "fileHandleForWriting") = NSFileHandle;
overload externalInstanceMethod(#NSPipe, "init") = Id;
overload externalClassMethod(#NSPipe, "pipe") = Id;

record NSPort = externalClass(NSObject);
overload externalInstanceMethod(#NSPort, "copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#NSPort, "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSPort, "initWithCoder:") = Id, NSCoder;
overload externalClassMethod(#NSPort, "allocWithZone:") = Id, Pointer[NSZone];
overload externalClassMethod(#NSPort, "port") = NSPort;
overload externalInstanceMethod(#NSPort, "invalidate") = Void;
overload externalInstanceMethod(#NSPort, "isValid") = Bool;
overload externalInstanceMethod(#NSPort, "setDelegate:") = Void, Id;
overload externalInstanceMethod(#NSPort, "delegate") = Id;
overload externalInstanceMethod(#NSPort, "scheduleInRunLoop:forMode:") = Void, NSRunLoop, NSString;
overload externalInstanceMethod(#NSPort, "removeFromRunLoop:forMode:") = Void, NSRunLoop, NSString;
overload externalInstanceMethod(#NSPort, "reservedSpaceLength") = UInt;
overload externalInstanceMethod(#NSPort, "sendBeforeDate:components:from:reserved:") = Bool, NSDate, NSMutableArray, NSPort, UInt;
overload externalInstanceMethod(#NSPort, "sendBeforeDate:msgid:components:from:reserved:") = Bool, NSDate, UInt, NSMutableArray, NSPort, UInt;

record NSPredicate = externalClass(NSObject);
overload externalInstanceMethod(#NSPredicate, "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSPredicate, "initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#NSPredicate, "copyWithZone:") = Id, Pointer[NSZone];
overload externalClassMethod(#NSPredicate, "predicateWithFormat:argumentArray:") = NSPredicate, NSString, NSArray;
overload externalVarargClassMethod(#NSPredicate, "predicateWithFormat:") = NSPredicate, NSString;
overload externalClassMethod(#NSPredicate, "predicateWithFormat:arguments:") = NSPredicate, NSString, va_list;
overload externalClassMethod(#NSPredicate, "predicateWithValue:") = NSPredicate, Bool;
overload externalClassMethod(#NSPredicate, "predicateWithBlock:") = NSPredicate, UnknownType;
overload externalInstanceMethod(#NSPredicate, "predicateFormat") = NSString;
overload externalInstanceMethod(#NSPredicate, "predicateWithSubstitutionVariables:") = NSPredicate, NSDictionary;
overload externalInstanceMethod(#NSPredicate, "evaluateWithObject:") = Bool, Id;
overload externalInstanceMethod(#NSPredicate, "evaluateWithObject:substitutionVariables:") = Bool, Id, NSDictionary;

record NSProcessInfo = externalClass(NSObject);
overload externalClassMethod(#NSProcessInfo, "processInfo") = NSProcessInfo;
overload externalInstanceMethod(#NSProcessInfo, "environment") = NSDictionary;
overload externalInstanceMethod(#NSProcessInfo, "arguments") = NSArray;
overload externalInstanceMethod(#NSProcessInfo, "hostName") = NSString;
overload externalInstanceMethod(#NSProcessInfo, "processName") = NSString;
overload externalInstanceMethod(#NSProcessInfo, "processIdentifier") = Int;
overload externalInstanceMethod(#NSProcessInfo, "setProcessName:") = Void, NSString;
overload externalInstanceMethod(#NSProcessInfo, "globallyUniqueString") = NSString;
overload externalInstanceMethod(#NSProcessInfo, "operatingSystem") = UInt;
overload externalInstanceMethod(#NSProcessInfo, "operatingSystemName") = NSString;
overload externalInstanceMethod(#NSProcessInfo, "operatingSystemVersionString") = NSString;
overload externalInstanceMethod(#NSProcessInfo, "processorCount") = UInt;
overload externalInstanceMethod(#NSProcessInfo, "activeProcessorCount") = UInt;
overload externalInstanceMethod(#NSProcessInfo, "physicalMemory") = UInt64;
overload externalInstanceMethod(#NSProcessInfo, "systemUptime") = Double;

record NSPropertyListSerialization = externalClass(NSObject);
overload externalClassMethod(#NSPropertyListSerialization, "propertyList:isValidForFormat:") = Bool, Id, UInt;
overload externalClassMethod(#NSPropertyListSerialization, "dataWithPropertyList:format:options:error:") = NSData, Id, UInt, UInt, Pointer[NSError];
overload externalClassMethod(#NSPropertyListSerialization, "writePropertyList:toStream:format:options:error:") = Int, Id, NSOutputStream, UInt, UInt, Pointer[NSError];
overload externalClassMethod(#NSPropertyListSerialization, "propertyListWithData:options:format:error:") = Id, NSData, UInt, Pointer[UInt], Pointer[NSError];
overload externalClassMethod(#NSPropertyListSerialization, "propertyListWithStream:options:format:error:") = Id, NSInputStream, UInt, Pointer[UInt], Pointer[NSError];
overload externalClassMethod(#NSPropertyListSerialization, "dataFromPropertyList:format:errorDescription:") = NSData, Id, UInt, Pointer[NSString];
overload externalClassMethod(#NSPropertyListSerialization, "propertyListFromData:mutabilityOption:format:errorDescription:") = Id, NSData, UInt, Pointer[UInt], Pointer[NSString];

record NSProxy = externalClass(Void);
overload externalInstanceMethod(#NSProxy, "isEqual:") = Bool, Id;
overload externalInstanceMethod(#NSProxy, "hash") = UInt;
overload externalInstanceMethod(#NSProxy, "superclass") = Id;
overload externalInstanceMethod(#NSProxy, "class") = Id;
overload externalInstanceMethod(#NSProxy, "self") = Id;
overload externalInstanceMethod(#NSProxy, "zone") = Pointer[NSZone];
overload externalInstanceMethod(#NSProxy, "performSelector:") = Id, SelectorHandle;
overload externalInstanceMethod(#NSProxy, "performSelector:withObject:") = Id, SelectorHandle, Id;
overload externalInstanceMethod(#NSProxy, "performSelector:withObject:withObject:") = Id, SelectorHandle, Id, Id;
overload externalInstanceMethod(#NSProxy, "isProxy") = Bool;
overload externalInstanceMethod(#NSProxy, "isKindOfClass:") = Bool, Id;
overload externalInstanceMethod(#NSProxy, "isMemberOfClass:") = Bool, Id;
overload externalInstanceMethod(#NSProxy, "conformsToProtocol:") = Bool, Id;
overload externalInstanceMethod(#NSProxy, "respondsToSelector:") = Bool, SelectorHandle;
overload externalInstanceMethod(#NSProxy, "retain") = Id;
overload externalInstanceMethod(#NSProxy, "release") = Void;
overload externalInstanceMethod(#NSProxy, "autorelease") = Id;
overload externalInstanceMethod(#NSProxy, "retainCount") = UInt;
overload externalInstanceMethod(#NSProxy, "description") = NSString;
overload externalClassMethod(#NSProxy, "alloc") = Id;
overload externalClassMethod(#NSProxy, "allocWithZone:") = Id, Pointer[NSZone];
overload externalClassMethod(#NSProxy, "class") = Id;
overload externalInstanceMethod(#NSProxy, "forwardInvocation:") = Void, NSInvocation;
overload externalInstanceMethod(#NSProxy, "methodSignatureForSelector:") = NSMethodSignature, SelectorHandle;
overload externalInstanceMethod(#NSProxy, "dealloc") = Void;
overload externalInstanceMethod(#NSProxy, "finalize") = Void;
overload externalInstanceMethod(#NSProxy, "description") = NSString;
overload externalClassMethod(#NSProxy, "respondsToSelector:") = Bool, SelectorHandle;

record NSPurgeableData = externalClass(NSMutableData);
overload externalInstanceMethod(#NSPurgeableData, "beginContentAccess") = Bool;
overload externalInstanceMethod(#NSPurgeableData, "endContentAccess") = Void;
overload externalInstanceMethod(#NSPurgeableData, "discardContentIfPossible") = Void;
overload externalInstanceMethod(#NSPurgeableData, "isContentDiscarded") = Bool;

record NSRecursiveLock = externalClass(NSObject);
overload externalInstanceMethod(#NSRecursiveLock, "lock") = Void;
overload externalInstanceMethod(#NSRecursiveLock, "unlock") = Void;
overload externalInstanceMethod(#NSRecursiveLock, "tryLock") = Bool;
overload externalInstanceMethod(#NSRecursiveLock, "lockBeforeDate:") = Bool, NSDate;
overload externalInstanceMethod(#NSRecursiveLock, "setName:") = Void, NSString;
overload externalInstanceMethod(#NSRecursiveLock, "name") = NSString;

record NSRegularExpression = externalClass(NSObject);
overload externalInstanceMethod(#NSRegularExpression, "copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#NSRegularExpression, "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSRegularExpression, "initWithCoder:") = Id, NSCoder;
overload externalClassMethod(#NSRegularExpression, "regularExpressionWithPattern:options:error:") = NSRegularExpression, NSString, UInt, Pointer[NSError];
overload externalInstanceMethod(#NSRegularExpression, "initWithPattern:options:error:") = Id, NSString, UInt, Pointer[NSError];
overload externalClassMethod(#NSRegularExpression, "escapedPatternForString:") = NSString, NSString;
overload externalInstanceMethod(#NSRegularExpression, "pattern") = NSString;
overload externalInstanceMethod(#NSRegularExpression, "options") = UInt;
overload externalInstanceMethod(#NSRegularExpression, "numberOfCaptureGroups") = UInt;
overload externalInstanceMethod(#NSRegularExpression, "enumerateMatchesInString:options:range:usingBlock:") = Void, NSString, UInt, NSRange, UnknownType;
overload externalInstanceMethod(#NSRegularExpression, "matchesInString:options:range:") = NSArray, NSString, UInt, NSRange;
overload externalInstanceMethod(#NSRegularExpression, "numberOfMatchesInString:options:range:") = UInt, NSString, UInt, NSRange;
overload externalInstanceMethod(#NSRegularExpression, "firstMatchInString:options:range:") = NSTextCheckingResult, NSString, UInt, NSRange;
overload externalInstanceMethod(#NSRegularExpression, "rangeOfFirstMatchInString:options:range:") = NSRange, NSString, UInt, NSRange;
overload externalInstanceMethod(#NSRegularExpression, "stringByReplacingMatchesInString:options:range:withTemplate:") = NSString, NSString, UInt, NSRange, NSString;
overload externalInstanceMethod(#NSRegularExpression, "replaceMatchesInString:options:range:withTemplate:") = UInt, NSMutableString, UInt, NSRange, NSString;
overload externalInstanceMethod(#NSRegularExpression, "replacementStringForResult:inString:offset:template:") = NSString, NSTextCheckingResult, NSString, Int, NSString;
overload externalClassMethod(#NSRegularExpression, "escapedTemplateForString:") = NSString, NSString;

record NSRunLoop = externalClass(NSObject);
overload externalClassMethod(#NSRunLoop, "currentRunLoop") = NSRunLoop;
overload externalClassMethod(#NSRunLoop, "mainRunLoop") = NSRunLoop;
overload externalInstanceMethod(#NSRunLoop, "currentMode") = NSString;
overload externalInstanceMethod(#NSRunLoop, "getCFRunLoop") = CFRunLoopRef;
overload externalInstanceMethod(#NSRunLoop, "addTimer:forMode:") = Void, NSTimer, NSString;
overload externalInstanceMethod(#NSRunLoop, "addPort:forMode:") = Void, NSPort, NSString;
overload externalInstanceMethod(#NSRunLoop, "removePort:forMode:") = Void, NSPort, NSString;
overload externalInstanceMethod(#NSRunLoop, "limitDateForMode:") = NSDate, NSString;
overload externalInstanceMethod(#NSRunLoop, "acceptInputForMode:beforeDate:") = Void, NSString, NSDate;
overload externalInstanceMethod(#NSRunLoop, "run") = Void;
overload externalInstanceMethod(#NSRunLoop, "runUntilDate:") = Void, NSDate;
overload externalInstanceMethod(#NSRunLoop, "runMode:beforeDate:") = Bool, NSString, NSDate;
overload externalInstanceMethod(#NSRunLoop, "performSelector:target:argument:order:modes:") = Void, SelectorHandle, Id, Id, UInt, NSArray;
overload externalInstanceMethod(#NSRunLoop, "cancelPerformSelector:target:argument:") = Void, SelectorHandle, Id, Id;
overload externalInstanceMethod(#NSRunLoop, "cancelPerformSelectorsWithTarget:") = Void, Id;

record NSScanner = externalClass(NSObject);
overload externalInstanceMethod(#NSScanner, "copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#NSScanner, "string") = NSString;
overload externalInstanceMethod(#NSScanner, "scanLocation") = UInt;
overload externalInstanceMethod(#NSScanner, "setScanLocation:") = Void, UInt;
overload externalInstanceMethod(#NSScanner, "setCharactersToBeSkipped:") = Void, NSCharacterSet;
overload externalInstanceMethod(#NSScanner, "setCaseSensitive:") = Void, Bool;
overload externalInstanceMethod(#NSScanner, "setLocale:") = Void, Id;
overload externalInstanceMethod(#NSScanner, "charactersToBeSkipped") = NSCharacterSet;
overload externalInstanceMethod(#NSScanner, "caseSensitive") = Bool;
overload externalInstanceMethod(#NSScanner, "locale") = Id;
overload externalInstanceMethod(#NSScanner, "scanInt:") = Bool, Pointer[Int];
overload externalInstanceMethod(#NSScanner, "scanInteger:") = Bool, Pointer[Int];
overload externalInstanceMethod(#NSScanner, "scanHexLongLong:") = Bool, Pointer[UInt64];
overload externalInstanceMethod(#NSScanner, "scanHexFloat:") = Bool, Pointer[Float];
overload externalInstanceMethod(#NSScanner, "scanHexDouble:") = Bool, Pointer[Double];
overload externalInstanceMethod(#NSScanner, "scanHexInt:") = Bool, Pointer[UInt];
overload externalInstanceMethod(#NSScanner, "scanLongLong:") = Bool, Pointer[Int64];
overload externalInstanceMethod(#NSScanner, "scanFloat:") = Bool, Pointer[Float];
overload externalInstanceMethod(#NSScanner, "scanDouble:") = Bool, Pointer[Double];
overload externalInstanceMethod(#NSScanner, "scanString:intoString:") = Bool, NSString, Pointer[NSString];
overload externalInstanceMethod(#NSScanner, "scanCharactersFromSet:intoString:") = Bool, NSCharacterSet, Pointer[NSString];
overload externalInstanceMethod(#NSScanner, "scanUpToString:intoString:") = Bool, NSString, Pointer[NSString];
overload externalInstanceMethod(#NSScanner, "scanUpToCharactersFromSet:intoString:") = Bool, NSCharacterSet, Pointer[NSString];
overload externalInstanceMethod(#NSScanner, "isAtEnd") = Bool;
overload externalInstanceMethod(#NSScanner, "initWithString:") = Id, NSString;
overload externalClassMethod(#NSScanner, "scannerWithString:") = Id, NSString;
overload externalClassMethod(#NSScanner, "localizedScannerWithString:") = Id, NSString;
overload externalInstanceMethod(#NSScanner, "scanDecimal:") = Bool, Pointer[NSDecimal];

record NSSet = externalClass(NSObject);
overload externalInstanceMethod(#NSSet, "copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#NSSet, "mutableCopyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#NSSet, "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSSet, "initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#NSSet, "countByEnumeratingWithState:objects:count:") = UInt, Pointer[NSFastEnumerationState], Pointer[Id], UInt;
overload externalInstanceMethod(#NSSet, "count") = UInt;
overload externalInstanceMethod(#NSSet, "member:") = Id, Id;
overload externalInstanceMethod(#NSSet, "objectEnumerator") = NSEnumerator;
overload externalInstanceMethod(#NSSet, "allObjects") = NSArray;
overload externalInstanceMethod(#NSSet, "anyObject") = Id;
overload externalInstanceMethod(#NSSet, "containsObject:") = Bool, Id;
overload externalInstanceMethod(#NSSet, "description") = NSString;
overload externalInstanceMethod(#NSSet, "descriptionWithLocale:") = NSString, Id;
overload externalInstanceMethod(#NSSet, "intersectsSet:") = Bool, NSSet;
overload externalInstanceMethod(#NSSet, "isEqualToSet:") = Bool, NSSet;
overload externalInstanceMethod(#NSSet, "isSubsetOfSet:") = Bool, NSSet;
overload externalInstanceMethod(#NSSet, "makeObjectsPerformSelector:") = Void, SelectorHandle;
overload externalInstanceMethod(#NSSet, "makeObjectsPerformSelector:withObject:") = Void, SelectorHandle, Id;
overload externalInstanceMethod(#NSSet, "setByAddingObject:") = NSSet, Id;
overload externalInstanceMethod(#NSSet, "setByAddingObjectsFromSet:") = NSSet, NSSet;
overload externalInstanceMethod(#NSSet, "setByAddingObjectsFromArray:") = NSSet, NSArray;
overload externalInstanceMethod(#NSSet, "enumerateObjectsUsingBlock:") = Void, UnknownType;
overload externalInstanceMethod(#NSSet, "enumerateObjectsWithOptions:usingBlock:") = Void, UInt, UnknownType;
overload externalInstanceMethod(#NSSet, "objectsPassingTest:") = NSSet, UnknownType;
overload externalInstanceMethod(#NSSet, "objectsWithOptions:passingTest:") = NSSet, UInt, UnknownType;
overload externalClassMethod(#NSSet, "set") = Id;
overload externalClassMethod(#NSSet, "setWithObject:") = Id, Id;
overload externalClassMethod(#NSSet, "setWithObjects:count:") = Id, Pointer[Id], UInt;
overload externalVarargClassMethod(#NSSet, "setWithObjects:") = Id, Id;
overload externalClassMethod(#NSSet, "setWithSet:") = Id, NSSet;
overload externalClassMethod(#NSSet, "setWithArray:") = Id, NSArray;
overload externalInstanceMethod(#NSSet, "initWithObjects:count:") = Id, Pointer[Id], UInt;
overload externalVarargInstanceMethod(#NSSet, "initWithObjects:") = Id, Id;
overload externalInstanceMethod(#NSSet, "initWithSet:") = Id, NSSet;
overload externalInstanceMethod(#NSSet, "initWithSet:copyItems:") = Id, NSSet, Bool;
overload externalInstanceMethod(#NSSet, "initWithArray:") = Id, NSArray;
overload externalInstanceMethod(#NSSet, "valueForKey:") = Id, NSString;
overload externalInstanceMethod(#NSSet, "setValue:forKey:") = Void, Id, NSString;
overload externalInstanceMethod(#NSSet, "addObserver:forKeyPath:options:context:") = Void, NSObject, NSString, UInt, RawPointer;
overload externalInstanceMethod(#NSSet, "removeObserver:forKeyPath:") = Void, NSObject, NSString;
overload externalInstanceMethod(#NSSet, "sortedArrayUsingDescriptors:") = NSArray, NSArray;
overload externalInstanceMethod(#NSSet, "filteredSetUsingPredicate:") = NSSet, NSPredicate;

record NSSimpleCString = externalClass(NSString);

record NSSortDescriptor = externalClass(NSObject);
overload externalInstanceMethod(#NSSortDescriptor, "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSSortDescriptor, "initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#NSSortDescriptor, "copyWithZone:") = Id, Pointer[NSZone];
overload externalClassMethod(#NSSortDescriptor, "sortDescriptorWithKey:ascending:") = Id, NSString, Bool;
overload externalClassMethod(#NSSortDescriptor, "sortDescriptorWithKey:ascending:selector:") = Id, NSString, Bool, SelectorHandle;
overload externalInstanceMethod(#NSSortDescriptor, "initWithKey:ascending:") = Id, NSString, Bool;
overload externalInstanceMethod(#NSSortDescriptor, "initWithKey:ascending:selector:") = Id, NSString, Bool, SelectorHandle;
overload externalInstanceMethod(#NSSortDescriptor, "key") = NSString;
overload externalInstanceMethod(#NSSortDescriptor, "ascending") = Bool;
overload externalInstanceMethod(#NSSortDescriptor, "selector") = SelectorHandle;
overload externalClassMethod(#NSSortDescriptor, "sortDescriptorWithKey:ascending:comparator:") = Id, NSString, Bool, NSComparator;
overload externalInstanceMethod(#NSSortDescriptor, "initWithKey:ascending:comparator:") = Id, NSString, Bool, NSComparator;
overload externalInstanceMethod(#NSSortDescriptor, "comparator") = NSComparator;
overload externalInstanceMethod(#NSSortDescriptor, "compareObject:toObject:") = Int, Id, Id;
overload externalInstanceMethod(#NSSortDescriptor, "reversedSortDescriptor") = Id;

record NSStream = externalClass(NSObject);
overload externalInstanceMethod(#NSStream, "open") = Void;
overload externalInstanceMethod(#NSStream, "close") = Void;
overload externalInstanceMethod(#NSStream, "delegate") = Id;
overload externalInstanceMethod(#NSStream, "setDelegate:") = Void, Id;
overload externalInstanceMethod(#NSStream, "propertyForKey:") = Id, NSString;
overload externalInstanceMethod(#NSStream, "setProperty:forKey:") = Bool, Id, NSString;
overload externalInstanceMethod(#NSStream, "scheduleInRunLoop:forMode:") = Void, NSRunLoop, NSString;
overload externalInstanceMethod(#NSStream, "removeFromRunLoop:forMode:") = Void, NSRunLoop, NSString;
overload externalInstanceMethod(#NSStream, "streamStatus") = UInt;
overload externalInstanceMethod(#NSStream, "streamError") = NSError;

record NSString = externalClass(NSObject);
overload externalInstanceMethod(#NSString, "copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#NSString, "mutableCopyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#NSString, "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSString, "initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#NSString, "length") = UInt;
overload externalInstanceMethod(#NSString, "characterAtIndex:") = UShort, UInt;
overload externalInstanceMethod(#NSString, "getCharacters:range:") = Void, Pointer[UShort], NSRange;
overload externalInstanceMethod(#NSString, "substringFromIndex:") = NSString, UInt;
overload externalInstanceMethod(#NSString, "substringToIndex:") = NSString, UInt;
overload externalInstanceMethod(#NSString, "substringWithRange:") = NSString, NSRange;
overload externalInstanceMethod(#NSString, "compare:") = Int, NSString;
overload externalInstanceMethod(#NSString, "compare:options:") = Int, NSString, UInt;
overload externalInstanceMethod(#NSString, "compare:options:range:") = Int, NSString, UInt, NSRange;
overload externalInstanceMethod(#NSString, "compare:options:range:locale:") = Int, NSString, UInt, NSRange, Id;
overload externalInstanceMethod(#NSString, "caseInsensitiveCompare:") = Int, NSString;
overload externalInstanceMethod(#NSString, "localizedCompare:") = Int, NSString;
overload externalInstanceMethod(#NSString, "localizedCaseInsensitiveCompare:") = Int, NSString;
overload externalInstanceMethod(#NSString, "localizedStandardCompare:") = Int, NSString;
overload externalInstanceMethod(#NSString, "isEqualToString:") = Bool, NSString;
overload externalInstanceMethod(#NSString, "hasPrefix:") = Bool, NSString;
overload externalInstanceMethod(#NSString, "hasSuffix:") = Bool, NSString;
overload externalInstanceMethod(#NSString, "rangeOfString:") = NSRange, NSString;
overload externalInstanceMethod(#NSString, "rangeOfString:options:") = NSRange, NSString, UInt;
overload externalInstanceMethod(#NSString, "rangeOfString:options:range:") = NSRange, NSString, UInt, NSRange;
overload externalInstanceMethod(#NSString, "rangeOfString:options:range:locale:") = NSRange, NSString, UInt, NSRange, NSLocale;
overload externalInstanceMethod(#NSString, "rangeOfCharacterFromSet:") = NSRange, NSCharacterSet;
overload externalInstanceMethod(#NSString, "rangeOfCharacterFromSet:options:") = NSRange, NSCharacterSet, UInt;
overload externalInstanceMethod(#NSString, "rangeOfCharacterFromSet:options:range:") = NSRange, NSCharacterSet, UInt, NSRange;
overload externalInstanceMethod(#NSString, "rangeOfComposedCharacterSequenceAtIndex:") = NSRange, UInt;
overload externalInstanceMethod(#NSString, "rangeOfComposedCharacterSequencesForRange:") = NSRange, NSRange;
overload externalInstanceMethod(#NSString, "stringByAppendingString:") = NSString, NSString;
overload externalVarargInstanceMethod(#NSString, "stringByAppendingFormat:") = NSString, NSString;
overload externalInstanceMethod(#NSString, "doubleValue") = Double;
overload externalInstanceMethod(#NSString, "floatValue") = Float;
overload externalInstanceMethod(#NSString, "intValue") = Int;
overload externalInstanceMethod(#NSString, "integerValue") = Int;
overload externalInstanceMethod(#NSString, "longLongValue") = Int64;
overload externalInstanceMethod(#NSString, "boolValue") = Bool;
overload externalInstanceMethod(#NSString, "componentsSeparatedByString:") = NSArray, NSString;
overload externalInstanceMethod(#NSString, "componentsSeparatedByCharactersInSet:") = NSArray, NSCharacterSet;
overload externalInstanceMethod(#NSString, "commonPrefixWithString:options:") = NSString, NSString, UInt;
overload externalInstanceMethod(#NSString, "uppercaseString") = NSString;
overload externalInstanceMethod(#NSString, "lowercaseString") = NSString;
overload externalInstanceMethod(#NSString, "capitalizedString") = NSString;
overload externalInstanceMethod(#NSString, "stringByTrimmingCharactersInSet:") = NSString, NSCharacterSet;
overload externalInstanceMethod(#NSString, "stringByPaddingToLength:withString:startingAtIndex:") = NSString, UInt, NSString, UInt;
overload externalInstanceMethod(#NSString, "getLineStart:end:contentsEnd:forRange:") = Void, Pointer[UInt], Pointer[UInt], Pointer[UInt], NSRange;
overload externalInstanceMethod(#NSString, "lineRangeForRange:") = NSRange, NSRange;
overload externalInstanceMethod(#NSString, "getParagraphStart:end:contentsEnd:forRange:") = Void, Pointer[UInt], Pointer[UInt], Pointer[UInt], NSRange;
overload externalInstanceMethod(#NSString, "paragraphRangeForRange:") = NSRange, NSRange;
overload externalInstanceMethod(#NSString, "enumerateSubstringsInRange:options:usingBlock:") = Void, NSRange, UInt, UnknownType;
overload externalInstanceMethod(#NSString, "enumerateLinesUsingBlock:") = Void, UnknownType;
overload externalInstanceMethod(#NSString, "description") = NSString;
overload externalInstanceMethod(#NSString, "hash") = UInt;
overload externalInstanceMethod(#NSString, "fastestEncoding") = UInt;
overload externalInstanceMethod(#NSString, "smallestEncoding") = UInt;
overload externalInstanceMethod(#NSString, "dataUsingEncoding:allowLossyConversion:") = NSData, UInt, Bool;
overload externalInstanceMethod(#NSString, "dataUsingEncoding:") = NSData, UInt;
overload externalInstanceMethod(#NSString, "canBeConvertedToEncoding:") = Bool, UInt;
overload externalInstanceMethod(#NSString, "cStringUsingEncoding:") = Pointer[CChar], UInt;
overload externalInstanceMethod(#NSString, "getCString:maxLength:encoding:") = Bool, Pointer[CChar], UInt, UInt;
overload externalInstanceMethod(#NSString, "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:") = Bool, RawPointer, UInt, Pointer[UInt], UInt, UInt, NSRange, NSRangePointer;
overload externalInstanceMethod(#NSString, "maximumLengthOfBytesUsingEncoding:") = UInt, UInt;
overload externalInstanceMethod(#NSString, "lengthOfBytesUsingEncoding:") = UInt, UInt;
overload externalInstanceMethod(#NSString, "decomposedStringWithCanonicalMapping") = NSString;
overload externalInstanceMethod(#NSString, "precomposedStringWithCanonicalMapping") = NSString;
overload externalInstanceMethod(#NSString, "decomposedStringWithCompatibilityMapping") = NSString;
overload externalInstanceMethod(#NSString, "precomposedStringWithCompatibilityMapping") = NSString;
overload externalInstanceMethod(#NSString, "stringByFoldingWithOptions:locale:") = NSString, UInt, NSLocale;
overload externalInstanceMethod(#NSString, "stringByReplacingOccurrencesOfString:withString:options:range:") = NSString, NSString, NSString, UInt, NSRange;
overload externalInstanceMethod(#NSString, "stringByReplacingOccurrencesOfString:withString:") = NSString, NSString, NSString;
overload externalInstanceMethod(#NSString, "stringByReplacingCharactersInRange:withString:") = NSString, NSRange, NSString;
overload externalInstanceMethod(#NSString, "UTF8String") = Pointer[CChar];
overload externalClassMethod(#NSString, "defaultCStringEncoding") = UInt;
overload externalClassMethod(#NSString, "availableStringEncodings") = Pointer[UInt];
overload externalClassMethod(#NSString, "localizedNameOfStringEncoding:") = NSString, UInt;
overload externalInstanceMethod(#NSString, "init") = Id;
overload externalInstanceMethod(#NSString, "initWithCharactersNoCopy:length:freeWhenDone:") = Id, Pointer[UShort], UInt, Bool;
overload externalInstanceMethod(#NSString, "initWithCharacters:length:") = Id, Pointer[UShort], UInt;
overload externalInstanceMethod(#NSString, "initWithUTF8String:") = Id, Pointer[CChar];
overload externalInstanceMethod(#NSString, "initWithString:") = Id, NSString;
overload externalVarargInstanceMethod(#NSString, "initWithFormat:") = Id, NSString;
overload externalInstanceMethod(#NSString, "initWithFormat:arguments:") = Id, NSString, va_list;
overload externalVarargInstanceMethod(#NSString, "initWithFormat:locale:") = Id, NSString, Id;
overload externalInstanceMethod(#NSString, "initWithFormat:locale:arguments:") = Id, NSString, Id, va_list;
overload externalInstanceMethod(#NSString, "initWithData:encoding:") = Id, NSData, UInt;
overload externalInstanceMethod(#NSString, "initWithBytes:length:encoding:") = Id, RawPointer, UInt, UInt;
overload externalInstanceMethod(#NSString, "initWithBytesNoCopy:length:encoding:freeWhenDone:") = Id, RawPointer, UInt, UInt, Bool;
overload externalClassMethod(#NSString, "string") = Id;
overload externalClassMethod(#NSString, "stringWithString:") = Id, NSString;
overload externalClassMethod(#NSString, "stringWithCharacters:length:") = Id, Pointer[UShort], UInt;
overload externalClassMethod(#NSString, "stringWithUTF8String:") = Id, Pointer[CChar];
overload externalVarargClassMethod(#NSString, "stringWithFormat:") = Id, NSString;
overload externalVarargClassMethod(#NSString, "localizedStringWithFormat:") = Id, NSString;
overload externalInstanceMethod(#NSString, "initWithCString:encoding:") = Id, Pointer[CChar], UInt;
overload externalClassMethod(#NSString, "stringWithCString:encoding:") = Id, Pointer[CChar], UInt;
overload externalInstanceMethod(#NSString, "initWithContentsOfURL:encoding:error:") = Id, NSURL, UInt, Pointer[NSError];
overload externalInstanceMethod(#NSString, "initWithContentsOfFile:encoding:error:") = Id, NSString, UInt, Pointer[NSError];
overload externalClassMethod(#NSString, "stringWithContentsOfURL:encoding:error:") = Id, NSURL, UInt, Pointer[NSError];
overload externalClassMethod(#NSString, "stringWithContentsOfFile:encoding:error:") = Id, NSString, UInt, Pointer[NSError];
overload externalInstanceMethod(#NSString, "initWithContentsOfURL:usedEncoding:error:") = Id, NSURL, Pointer[UInt], Pointer[NSError];
overload externalInstanceMethod(#NSString, "initWithContentsOfFile:usedEncoding:error:") = Id, NSString, Pointer[UInt], Pointer[NSError];
overload externalClassMethod(#NSString, "stringWithContentsOfURL:usedEncoding:error:") = Id, NSURL, Pointer[UInt], Pointer[NSError];
overload externalClassMethod(#NSString, "stringWithContentsOfFile:usedEncoding:error:") = Id, NSString, Pointer[UInt], Pointer[NSError];
overload externalInstanceMethod(#NSString, "writeToURL:atomically:encoding:error:") = Bool, NSURL, Bool, UInt, Pointer[NSError];
overload externalInstanceMethod(#NSString, "writeToFile:atomically:encoding:error:") = Bool, NSString, Bool, UInt, Pointer[NSError];
overload externalInstanceMethod(#NSString, "propertyList") = Id;
overload externalInstanceMethod(#NSString, "propertyListFromStringsFileFormat") = NSDictionary;
overload externalInstanceMethod(#NSString, "cString") = Pointer[CChar];
overload externalInstanceMethod(#NSString, "lossyCString") = Pointer[CChar];
overload externalInstanceMethod(#NSString, "cStringLength") = UInt;
overload externalInstanceMethod(#NSString, "getCString:") = Void, Pointer[CChar];
overload externalInstanceMethod(#NSString, "getCString:maxLength:") = Void, Pointer[CChar], UInt;
overload externalInstanceMethod(#NSString, "getCString:maxLength:range:remainingRange:") = Void, Pointer[CChar], UInt, NSRange, NSRangePointer;
overload externalInstanceMethod(#NSString, "writeToFile:atomically:") = Bool, NSString, Bool;
overload externalInstanceMethod(#NSString, "writeToURL:atomically:") = Bool, NSURL, Bool;
overload externalInstanceMethod(#NSString, "initWithContentsOfFile:") = Id, NSString;
overload externalInstanceMethod(#NSString, "initWithContentsOfURL:") = Id, NSURL;
overload externalClassMethod(#NSString, "stringWithContentsOfFile:") = Id, NSString;
overload externalClassMethod(#NSString, "stringWithContentsOfURL:") = Id, NSURL;
overload externalInstanceMethod(#NSString, "initWithCStringNoCopy:length:freeWhenDone:") = Id, Pointer[CChar], UInt, Bool;
overload externalInstanceMethod(#NSString, "initWithCString:length:") = Id, Pointer[CChar], UInt;
overload externalInstanceMethod(#NSString, "initWithCString:") = Id, Pointer[CChar];
overload externalClassMethod(#NSString, "stringWithCString:length:") = Id, Pointer[CChar], UInt;
overload externalClassMethod(#NSString, "stringWithCString:") = Id, Pointer[CChar];
overload externalInstanceMethod(#NSString, "getCharacters:") = Void, Pointer[UShort];
overload externalClassMethod(#NSString, "pathWithComponents:") = NSString, NSArray;
overload externalInstanceMethod(#NSString, "pathComponents") = NSArray;
overload externalInstanceMethod(#NSString, "isAbsolutePath") = Bool;
overload externalInstanceMethod(#NSString, "lastPathComponent") = NSString;
overload externalInstanceMethod(#NSString, "stringByDeletingLastPathComponent") = NSString;
overload externalInstanceMethod(#NSString, "stringByAppendingPathComponent:") = NSString, NSString;
overload externalInstanceMethod(#NSString, "pathExtension") = NSString;
overload externalInstanceMethod(#NSString, "stringByDeletingPathExtension") = NSString;
overload externalInstanceMethod(#NSString, "stringByAppendingPathExtension:") = NSString, NSString;
overload externalInstanceMethod(#NSString, "stringByAbbreviatingWithTildeInPath") = NSString;
overload externalInstanceMethod(#NSString, "stringByExpandingTildeInPath") = NSString;
overload externalInstanceMethod(#NSString, "stringByStandardizingPath") = NSString;
overload externalInstanceMethod(#NSString, "stringByResolvingSymlinksInPath") = NSString;
overload externalInstanceMethod(#NSString, "stringsByAppendingPaths:") = NSArray, NSArray;
overload externalInstanceMethod(#NSString, "completePathIntoString:caseSensitive:matchesIntoArray:filterTypes:") = UInt, Pointer[NSString], Bool, Pointer[NSArray], NSArray;
overload externalInstanceMethod(#NSString, "fileSystemRepresentation") = Pointer[CChar];
overload externalInstanceMethod(#NSString, "getFileSystemRepresentation:maxLength:") = Bool, Pointer[CChar], UInt;
overload externalInstanceMethod(#NSString, "stringByAddingPercentEscapesUsingEncoding:") = NSString, UInt;
overload externalInstanceMethod(#NSString, "stringByReplacingPercentEscapesUsingEncoding:") = NSString, UInt;

record NSTextCheckingResult = externalClass(NSObject);
overload externalInstanceMethod(#NSTextCheckingResult, "copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#NSTextCheckingResult, "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSTextCheckingResult, "initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#NSTextCheckingResult, "resultType") = UInt64;
overload externalInstanceMethod(#NSTextCheckingResult, "range") = NSRange;
overload externalInstanceMethod(#NSTextCheckingResult, "rangeAtIndex:") = NSRange, UInt;
overload externalInstanceMethod(#NSTextCheckingResult, "orthography") = NSOrthography;
overload externalInstanceMethod(#NSTextCheckingResult, "grammarDetails") = NSArray;
overload externalInstanceMethod(#NSTextCheckingResult, "date") = NSDate;
overload externalInstanceMethod(#NSTextCheckingResult, "timeZone") = NSTimeZone;
overload externalInstanceMethod(#NSTextCheckingResult, "duration") = Double;
overload externalInstanceMethod(#NSTextCheckingResult, "URL") = NSURL;
overload externalInstanceMethod(#NSTextCheckingResult, "replacementString") = NSString;
overload externalInstanceMethod(#NSTextCheckingResult, "components") = NSDictionary;
overload externalInstanceMethod(#NSTextCheckingResult, "regularExpression") = NSRegularExpression;
overload externalInstanceMethod(#NSTextCheckingResult, "phoneNumber") = NSString;
overload externalInstanceMethod(#NSTextCheckingResult, "addressComponents") = NSDictionary;
overload externalInstanceMethod(#NSTextCheckingResult, "numberOfRanges") = UInt;
overload externalClassMethod(#NSTextCheckingResult, "orthographyCheckingResultWithRange:orthography:") = NSTextCheckingResult, NSRange, NSOrthography;
overload externalClassMethod(#NSTextCheckingResult, "spellCheckingResultWithRange:") = NSTextCheckingResult, NSRange;
overload externalClassMethod(#NSTextCheckingResult, "grammarCheckingResultWithRange:details:") = NSTextCheckingResult, NSRange, NSArray;
overload externalClassMethod(#NSTextCheckingResult, "dateCheckingResultWithRange:date:") = NSTextCheckingResult, NSRange, NSDate;
overload externalClassMethod(#NSTextCheckingResult, "dateCheckingResultWithRange:date:timeZone:duration:") = NSTextCheckingResult, NSRange, NSDate, NSTimeZone, Double;
overload externalClassMethod(#NSTextCheckingResult, "addressCheckingResultWithRange:components:") = NSTextCheckingResult, NSRange, NSDictionary;
overload externalClassMethod(#NSTextCheckingResult, "linkCheckingResultWithRange:URL:") = NSTextCheckingResult, NSRange, NSURL;
overload externalClassMethod(#NSTextCheckingResult, "quoteCheckingResultWithRange:replacementString:") = NSTextCheckingResult, NSRange, NSString;
overload externalClassMethod(#NSTextCheckingResult, "dashCheckingResultWithRange:replacementString:") = NSTextCheckingResult, NSRange, NSString;
overload externalClassMethod(#NSTextCheckingResult, "replacementCheckingResultWithRange:replacementString:") = NSTextCheckingResult, NSRange, NSString;
overload externalClassMethod(#NSTextCheckingResult, "correctionCheckingResultWithRange:replacementString:") = NSTextCheckingResult, NSRange, NSString;
overload externalClassMethod(#NSTextCheckingResult, "regularExpressionCheckingResultWithRanges:count:regularExpression:") = NSTextCheckingResult, NSRangePointer, UInt, NSRegularExpression;
overload externalClassMethod(#NSTextCheckingResult, "phoneNumberCheckingResultWithRange:phoneNumber:") = NSTextCheckingResult, NSRange, NSString;
overload externalClassMethod(#NSTextCheckingResult, "transitInformationCheckingResultWithRange:components:") = NSTextCheckingResult, NSRange, NSDictionary;

record NSThread = externalClass(NSObject);
overload externalClassMethod(#NSThread, "currentThread") = NSThread;
overload externalClassMethod(#NSThread, "detachNewThreadSelector:toTarget:withObject:") = Void, SelectorHandle, Id, Id;
overload externalClassMethod(#NSThread, "isMultiThreaded") = Bool;
overload externalInstanceMethod(#NSThread, "threadDictionary") = NSMutableDictionary;
overload externalClassMethod(#NSThread, "sleepUntilDate:") = Void, NSDate;
overload externalClassMethod(#NSThread, "sleepForTimeInterval:") = Void, Double;
overload externalClassMethod(#NSThread, "exit") = Void;
overload externalClassMethod(#NSThread, "threadPriority") = Double;
overload externalClassMethod(#NSThread, "setThreadPriority:") = Bool, Double;
overload externalInstanceMethod(#NSThread, "threadPriority") = Double;
overload externalInstanceMethod(#NSThread, "setThreadPriority:") = Void, Double;
overload externalClassMethod(#NSThread, "callStackReturnAddresses") = NSArray;
overload externalClassMethod(#NSThread, "callStackSymbols") = NSArray;
overload externalInstanceMethod(#NSThread, "setName:") = Void, NSString;
overload externalInstanceMethod(#NSThread, "name") = NSString;
overload externalInstanceMethod(#NSThread, "stackSize") = UInt;
overload externalInstanceMethod(#NSThread, "setStackSize:") = Void, UInt;
overload externalInstanceMethod(#NSThread, "isMainThread") = Bool;
overload externalClassMethod(#NSThread, "isMainThread") = Bool;
overload externalClassMethod(#NSThread, "mainThread") = NSThread;
overload externalInstanceMethod(#NSThread, "init") = Id;
overload externalInstanceMethod(#NSThread, "initWithTarget:selector:object:") = Id, Id, SelectorHandle, Id;
overload externalInstanceMethod(#NSThread, "isExecuting") = Bool;
overload externalInstanceMethod(#NSThread, "isFinished") = Bool;
overload externalInstanceMethod(#NSThread, "isCancelled") = Bool;
overload externalInstanceMethod(#NSThread, "cancel") = Void;
overload externalInstanceMethod(#NSThread, "start") = Void;
overload externalInstanceMethod(#NSThread, "main") = Void;

record NSTimeZone = externalClass(NSObject);
overload externalInstanceMethod(#NSTimeZone, "copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#NSTimeZone, "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSTimeZone, "initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#NSTimeZone, "name") = NSString;
overload externalInstanceMethod(#NSTimeZone, "data") = NSData;
overload externalInstanceMethod(#NSTimeZone, "secondsFromGMTForDate:") = Int, NSDate;
overload externalInstanceMethod(#NSTimeZone, "abbreviationForDate:") = NSString, NSDate;
overload externalInstanceMethod(#NSTimeZone, "isDaylightSavingTimeForDate:") = Bool, NSDate;
overload externalInstanceMethod(#NSTimeZone, "daylightSavingTimeOffsetForDate:") = Double, NSDate;
overload externalInstanceMethod(#NSTimeZone, "nextDaylightSavingTimeTransitionAfterDate:") = NSDate, NSDate;
overload externalClassMethod(#NSTimeZone, "systemTimeZone") = NSTimeZone;
overload externalClassMethod(#NSTimeZone, "resetSystemTimeZone") = Void;
overload externalClassMethod(#NSTimeZone, "defaultTimeZone") = NSTimeZone;
overload externalClassMethod(#NSTimeZone, "setDefaultTimeZone:") = Void, NSTimeZone;
overload externalClassMethod(#NSTimeZone, "localTimeZone") = NSTimeZone;
overload externalClassMethod(#NSTimeZone, "knownTimeZoneNames") = NSArray;
overload externalClassMethod(#NSTimeZone, "abbreviationDictionary") = NSDictionary;
overload externalClassMethod(#NSTimeZone, "setAbbreviationDictionary:") = Void, NSDictionary;
overload externalClassMethod(#NSTimeZone, "timeZoneDataVersion") = NSString;
overload externalInstanceMethod(#NSTimeZone, "secondsFromGMT") = Int;
overload externalInstanceMethod(#NSTimeZone, "abbreviation") = NSString;
overload externalInstanceMethod(#NSTimeZone, "isDaylightSavingTime") = Bool;
overload externalInstanceMethod(#NSTimeZone, "daylightSavingTimeOffset") = Double;
overload externalInstanceMethod(#NSTimeZone, "nextDaylightSavingTimeTransition") = NSDate;
overload externalInstanceMethod(#NSTimeZone, "description") = NSString;
overload externalInstanceMethod(#NSTimeZone, "isEqualToTimeZone:") = Bool, NSTimeZone;
overload externalInstanceMethod(#NSTimeZone, "localizedName:locale:") = NSString, Int, NSLocale;
overload externalClassMethod(#NSTimeZone, "timeZoneWithName:") = Id, NSString;
overload externalClassMethod(#NSTimeZone, "timeZoneWithName:data:") = Id, NSString, NSData;
overload externalInstanceMethod(#NSTimeZone, "initWithName:") = Id, NSString;
overload externalInstanceMethod(#NSTimeZone, "initWithName:data:") = Id, NSString, NSData;
overload externalClassMethod(#NSTimeZone, "timeZoneForSecondsFromGMT:") = Id, Int;
overload externalClassMethod(#NSTimeZone, "timeZoneWithAbbreviation:") = Id, NSString;

record NSTimer = externalClass(NSObject);
overload externalClassMethod(#NSTimer, "timerWithTimeInterval:invocation:repeats:") = NSTimer, Double, NSInvocation, Bool;
overload externalClassMethod(#NSTimer, "scheduledTimerWithTimeInterval:invocation:repeats:") = NSTimer, Double, NSInvocation, Bool;
overload externalClassMethod(#NSTimer, "timerWithTimeInterval:target:selector:userInfo:repeats:") = NSTimer, Double, Id, SelectorHandle, Id, Bool;
overload externalClassMethod(#NSTimer, "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:") = NSTimer, Double, Id, SelectorHandle, Id, Bool;
overload externalInstanceMethod(#NSTimer, "initWithFireDate:interval:target:selector:userInfo:repeats:") = Id, NSDate, Double, Id, SelectorHandle, Id, Bool;
overload externalInstanceMethod(#NSTimer, "fire") = Void;
overload externalInstanceMethod(#NSTimer, "fireDate") = NSDate;
overload externalInstanceMethod(#NSTimer, "setFireDate:") = Void, NSDate;
overload externalInstanceMethod(#NSTimer, "timeInterval") = Double;
overload externalInstanceMethod(#NSTimer, "invalidate") = Void;
overload externalInstanceMethod(#NSTimer, "isValid") = Bool;
overload externalInstanceMethod(#NSTimer, "userInfo") = Id;

record NSURL = externalClass(NSObject);
overload externalInstanceMethod(#NSURL, "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSURL, "initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#NSURL, "copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#NSURL, "initWithScheme:host:path:") = Id, NSString, NSString, NSString;
overload externalInstanceMethod(#NSURL, "initFileURLWithPath:isDirectory:") = Id, NSString, Bool;
overload externalInstanceMethod(#NSURL, "initFileURLWithPath:") = Id, NSString;
overload externalClassMethod(#NSURL, "fileURLWithPath:isDirectory:") = Id, NSString, Bool;
overload externalClassMethod(#NSURL, "fileURLWithPath:") = Id, NSString;
overload externalInstanceMethod(#NSURL, "initWithString:") = Id, NSString;
overload externalInstanceMethod(#NSURL, "initWithString:relativeToURL:") = Id, NSString, NSURL;
overload externalClassMethod(#NSURL, "URLWithString:") = Id, NSString;
overload externalClassMethod(#NSURL, "URLWithString:relativeToURL:") = Id, NSString, NSURL;
overload externalInstanceMethod(#NSURL, "absoluteString") = NSString;
overload externalInstanceMethod(#NSURL, "relativeString") = NSString;
overload externalInstanceMethod(#NSURL, "baseURL") = NSURL;
overload externalInstanceMethod(#NSURL, "absoluteURL") = NSURL;
overload externalInstanceMethod(#NSURL, "scheme") = NSString;
overload externalInstanceMethod(#NSURL, "resourceSpecifier") = NSString;
overload externalInstanceMethod(#NSURL, "host") = NSString;
overload externalInstanceMethod(#NSURL, "port") = NSNumber;
overload externalInstanceMethod(#NSURL, "user") = NSString;
overload externalInstanceMethod(#NSURL, "password") = NSString;
overload externalInstanceMethod(#NSURL, "path") = NSString;
overload externalInstanceMethod(#NSURL, "fragment") = NSString;
overload externalInstanceMethod(#NSURL, "parameterString") = NSString;
overload externalInstanceMethod(#NSURL, "query") = NSString;
overload externalInstanceMethod(#NSURL, "relativePath") = NSString;
overload externalInstanceMethod(#NSURL, "isFileURL") = Bool;
overload externalInstanceMethod(#NSURL, "standardizedURL") = NSURL;
overload externalInstanceMethod(#NSURL, "getResourceValue:forKey:error:") = Bool, Pointer[Id], NSString, Pointer[NSError];
overload externalInstanceMethod(#NSURL, "resourceValuesForKeys:error:") = NSDictionary, NSArray, Pointer[NSError];
overload externalInstanceMethod(#NSURL, "setResourceValue:forKey:error:") = Bool, Id, NSString, Pointer[NSError];
overload externalInstanceMethod(#NSURL, "setResourceValues:error:") = Bool, NSDictionary, Pointer[NSError];
overload externalInstanceMethod(#NSURL, "checkResourceIsReachableAndReturnError:") = Bool, Pointer[NSError];
overload externalInstanceMethod(#NSURL, "isFileReferenceURL") = Bool;
overload externalInstanceMethod(#NSURL, "fileReferenceURL") = NSURL;
overload externalInstanceMethod(#NSURL, "filePathURL") = NSURL;
overload externalInstanceMethod(#NSURL, "bookmarkDataWithOptions:includingResourceValuesForKeys:relativeToURL:error:") = NSData, UInt, NSArray, NSURL, Pointer[NSError];
overload externalInstanceMethod(#NSURL, "initByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:") = Id, NSData, UInt, NSURL, Pointer[Bool], Pointer[NSError];
overload externalClassMethod(#NSURL, "URLByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:") = Id, NSData, UInt, NSURL, Pointer[Bool], Pointer[NSError];
overload externalClassMethod(#NSURL, "resourceValuesForKeys:fromBookmarkData:") = NSDictionary, NSArray, NSData;
overload externalClassMethod(#NSURL, "writeBookmarkData:toURL:options:error:") = Bool, NSData, NSURL, UInt, Pointer[NSError];
overload externalClassMethod(#NSURL, "bookmarkDataWithContentsOfURL:error:") = NSData, NSURL, Pointer[NSError];
overload externalClassMethod(#NSURL, "fileURLWithPathComponents:") = NSURL, NSArray;
overload externalInstanceMethod(#NSURL, "pathComponents") = NSArray;
overload externalInstanceMethod(#NSURL, "lastPathComponent") = NSString;
overload externalInstanceMethod(#NSURL, "pathExtension") = NSString;
overload externalInstanceMethod(#NSURL, "URLByAppendingPathComponent:") = NSURL, NSString;
overload externalInstanceMethod(#NSURL, "URLByDeletingLastPathComponent") = NSURL;
overload externalInstanceMethod(#NSURL, "URLByAppendingPathExtension:") = NSURL, NSString;
overload externalInstanceMethod(#NSURL, "URLByDeletingPathExtension") = NSURL;
overload externalInstanceMethod(#NSURL, "URLByStandardizingPath") = NSURL;
overload externalInstanceMethod(#NSURL, "URLByResolvingSymlinksInPath") = NSURL;

record NSURLAuthenticationChallenge = externalClass(NSObject);
overload externalInstanceMethod(#NSURLAuthenticationChallenge, "initWithProtectionSpace:proposedCredential:previousFailureCount:failureResponse:error:sender:") = Id, NSURLProtectionSpace, NSURLCredential, Int, NSURLResponse, NSError, Id;
overload externalInstanceMethod(#NSURLAuthenticationChallenge, "initWithAuthenticationChallenge:sender:") = Id, NSURLAuthenticationChallenge, Id;
overload externalInstanceMethod(#NSURLAuthenticationChallenge, "protectionSpace") = NSURLProtectionSpace;
overload externalInstanceMethod(#NSURLAuthenticationChallenge, "proposedCredential") = NSURLCredential;
overload externalInstanceMethod(#NSURLAuthenticationChallenge, "previousFailureCount") = Int;
overload externalInstanceMethod(#NSURLAuthenticationChallenge, "failureResponse") = NSURLResponse;
overload externalInstanceMethod(#NSURLAuthenticationChallenge, "error") = NSError;
overload externalInstanceMethod(#NSURLAuthenticationChallenge, "sender") = Id;

record NSURLCache = externalClass(NSObject);
overload externalClassMethod(#NSURLCache, "sharedURLCache") = NSURLCache;
overload externalClassMethod(#NSURLCache, "setSharedURLCache:") = Void, NSURLCache;
overload externalInstanceMethod(#NSURLCache, "initWithMemoryCapacity:diskCapacity:diskPath:") = Id, UInt, UInt, NSString;
overload externalInstanceMethod(#NSURLCache, "cachedResponseForRequest:") = NSCachedURLResponse, NSURLRequest;
overload externalInstanceMethod(#NSURLCache, "storeCachedResponse:forRequest:") = Void, NSCachedURLResponse, NSURLRequest;
overload externalInstanceMethod(#NSURLCache, "removeCachedResponseForRequest:") = Void, NSURLRequest;
overload externalInstanceMethod(#NSURLCache, "removeAllCachedResponses") = Void;
overload externalInstanceMethod(#NSURLCache, "memoryCapacity") = UInt;
overload externalInstanceMethod(#NSURLCache, "diskCapacity") = UInt;
overload externalInstanceMethod(#NSURLCache, "setMemoryCapacity:") = Void, UInt;
overload externalInstanceMethod(#NSURLCache, "setDiskCapacity:") = Void, UInt;
overload externalInstanceMethod(#NSURLCache, "currentMemoryUsage") = UInt;
overload externalInstanceMethod(#NSURLCache, "currentDiskUsage") = UInt;

record NSURLConnection = externalClass(NSObject);
overload externalClassMethod(#NSURLConnection, "canHandleRequest:") = Bool, NSURLRequest;
overload externalClassMethod(#NSURLConnection, "connectionWithRequest:delegate:") = NSURLConnection, NSURLRequest, Id;
overload externalInstanceMethod(#NSURLConnection, "initWithRequest:delegate:") = Id, NSURLRequest, Id;
overload externalInstanceMethod(#NSURLConnection, "initWithRequest:delegate:startImmediately:") = Id, NSURLRequest, Id, Bool;
overload externalInstanceMethod(#NSURLConnection, "start") = Void;
overload externalInstanceMethod(#NSURLConnection, "cancel") = Void;
overload externalInstanceMethod(#NSURLConnection, "scheduleInRunLoop:forMode:") = Void, NSRunLoop, NSString;
overload externalInstanceMethod(#NSURLConnection, "unscheduleFromRunLoop:forMode:") = Void, NSRunLoop, NSString;
overload externalClassMethod(#NSURLConnection, "sendSynchronousRequest:returningResponse:error:") = NSData, NSURLRequest, Pointer[NSURLResponse], Pointer[NSError];

record NSURLCredential = externalClass(NSObject);
overload externalInstanceMethod(#NSURLCredential, "copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#NSURLCredential, "persistence") = UInt;
overload externalInstanceMethod(#NSURLCredential, "initWithUser:password:persistence:") = Id, NSString, NSString, UInt;
overload externalClassMethod(#NSURLCredential, "credentialWithUser:password:persistence:") = NSURLCredential, NSString, NSString, UInt;
overload externalInstanceMethod(#NSURLCredential, "user") = NSString;
overload externalInstanceMethod(#NSURLCredential, "password") = NSString;
overload externalInstanceMethod(#NSURLCredential, "hasPassword") = Bool;
overload externalInstanceMethod(#NSURLCredential, "initWithIdentity:certificates:persistence:") = Id, SecIdentityRef, NSArray, UInt;
overload externalClassMethod(#NSURLCredential, "credentialWithIdentity:certificates:persistence:") = NSURLCredential, SecIdentityRef, NSArray, UInt;
overload externalInstanceMethod(#NSURLCredential, "identity") = SecIdentityRef;
overload externalInstanceMethod(#NSURLCredential, "certificates") = NSArray;
overload externalInstanceMethod(#NSURLCredential, "initWithTrust:") = Id, SecTrustRef;
overload externalClassMethod(#NSURLCredential, "credentialForTrust:") = NSURLCredential, SecTrustRef;

record NSURLCredentialStorage = externalClass(NSObject);
overload externalClassMethod(#NSURLCredentialStorage, "sharedCredentialStorage") = NSURLCredentialStorage;
overload externalInstanceMethod(#NSURLCredentialStorage, "credentialsForProtectionSpace:") = NSDictionary, NSURLProtectionSpace;
overload externalInstanceMethod(#NSURLCredentialStorage, "allCredentials") = NSDictionary;
overload externalInstanceMethod(#NSURLCredentialStorage, "setCredential:forProtectionSpace:") = Void, NSURLCredential, NSURLProtectionSpace;
overload externalInstanceMethod(#NSURLCredentialStorage, "removeCredential:forProtectionSpace:") = Void, NSURLCredential, NSURLProtectionSpace;
overload externalInstanceMethod(#NSURLCredentialStorage, "defaultCredentialForProtectionSpace:") = NSURLCredential, NSURLProtectionSpace;
overload externalInstanceMethod(#NSURLCredentialStorage, "setDefaultCredential:forProtectionSpace:") = Void, NSURLCredential, NSURLProtectionSpace;

record NSURLProtectionSpace = externalClass(NSObject);
overload externalInstanceMethod(#NSURLProtectionSpace, "copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#NSURLProtectionSpace, "initWithHost:port:protocol:realm:authenticationMethod:") = Id, NSString, Int, NSString, NSString, NSString;
overload externalInstanceMethod(#NSURLProtectionSpace, "initWithProxyHost:port:type:realm:authenticationMethod:") = Id, NSString, Int, NSString, NSString, NSString;
overload externalInstanceMethod(#NSURLProtectionSpace, "realm") = NSString;
overload externalInstanceMethod(#NSURLProtectionSpace, "receivesCredentialSecurely") = Bool;
overload externalInstanceMethod(#NSURLProtectionSpace, "isProxy") = Bool;
overload externalInstanceMethod(#NSURLProtectionSpace, "host") = NSString;
overload externalInstanceMethod(#NSURLProtectionSpace, "port") = Int;
overload externalInstanceMethod(#NSURLProtectionSpace, "proxyType") = NSString;
overload externalInstanceMethod(#NSURLProtectionSpace, "protocol") = NSString;
overload externalInstanceMethod(#NSURLProtectionSpace, "authenticationMethod") = NSString;
overload externalInstanceMethod(#NSURLProtectionSpace, "distinguishedNames") = NSArray;
overload externalInstanceMethod(#NSURLProtectionSpace, "serverTrust") = SecTrustRef;

record NSURLProtocol = externalClass(NSObject);
overload externalInstanceMethod(#NSURLProtocol, "initWithRequest:cachedResponse:client:") = Id, NSURLRequest, NSCachedURLResponse, Id;
overload externalInstanceMethod(#NSURLProtocol, "client") = Id;
overload externalInstanceMethod(#NSURLProtocol, "request") = NSURLRequest;
overload externalInstanceMethod(#NSURLProtocol, "cachedResponse") = NSCachedURLResponse;
overload externalClassMethod(#NSURLProtocol, "canInitWithRequest:") = Bool, NSURLRequest;
overload externalClassMethod(#NSURLProtocol, "canonicalRequestForRequest:") = NSURLRequest, NSURLRequest;
overload externalClassMethod(#NSURLProtocol, "requestIsCacheEquivalent:toRequest:") = Bool, NSURLRequest, NSURLRequest;
overload externalInstanceMethod(#NSURLProtocol, "startLoading") = Void;
overload externalInstanceMethod(#NSURLProtocol, "stopLoading") = Void;
overload externalClassMethod(#NSURLProtocol, "propertyForKey:inRequest:") = Id, NSString, NSURLRequest;
overload externalClassMethod(#NSURLProtocol, "setProperty:forKey:inRequest:") = Void, Id, NSString, NSMutableURLRequest;
overload externalClassMethod(#NSURLProtocol, "removePropertyForKey:inRequest:") = Void, NSString, NSMutableURLRequest;
overload externalClassMethod(#NSURLProtocol, "registerClass:") = Bool, Id;
overload externalClassMethod(#NSURLProtocol, "unregisterClass:") = Void, Id;

record NSURLRequest = externalClass(NSObject);
overload externalInstanceMethod(#NSURLRequest, "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSURLRequest, "initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#NSURLRequest, "copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#NSURLRequest, "mutableCopyWithZone:") = Id, Pointer[NSZone];
overload externalClassMethod(#NSURLRequest, "requestWithURL:") = Id, NSURL;
overload externalClassMethod(#NSURLRequest, "requestWithURL:cachePolicy:timeoutInterval:") = Id, NSURL, UInt, Double;
overload externalInstanceMethod(#NSURLRequest, "initWithURL:") = Id, NSURL;
overload externalInstanceMethod(#NSURLRequest, "initWithURL:cachePolicy:timeoutInterval:") = Id, NSURL, UInt, Double;
overload externalInstanceMethod(#NSURLRequest, "URL") = NSURL;
overload externalInstanceMethod(#NSURLRequest, "cachePolicy") = UInt;
overload externalInstanceMethod(#NSURLRequest, "timeoutInterval") = Double;
overload externalInstanceMethod(#NSURLRequest, "mainDocumentURL") = NSURL;
overload externalInstanceMethod(#NSURLRequest, "networkServiceType") = UInt;
overload externalInstanceMethod(#NSURLRequest, "HTTPMethod") = NSString;
overload externalInstanceMethod(#NSURLRequest, "allHTTPHeaderFields") = NSDictionary;
overload externalInstanceMethod(#NSURLRequest, "valueForHTTPHeaderField:") = NSString, NSString;
overload externalInstanceMethod(#NSURLRequest, "HTTPBody") = NSData;
overload externalInstanceMethod(#NSURLRequest, "HTTPBodyStream") = NSInputStream;
overload externalInstanceMethod(#NSURLRequest, "HTTPShouldHandleCookies") = Bool;
overload externalInstanceMethod(#NSURLRequest, "HTTPShouldUsePipelining") = Bool;

record NSURLResponse = externalClass(NSObject);
overload externalInstanceMethod(#NSURLResponse, "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSURLResponse, "initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#NSURLResponse, "copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#NSURLResponse, "initWithURL:MIMEType:expectedContentLength:textEncodingName:") = Id, NSURL, NSString, Int, NSString;
overload externalInstanceMethod(#NSURLResponse, "URL") = NSURL;
overload externalInstanceMethod(#NSURLResponse, "MIMEType") = NSString;
overload externalInstanceMethod(#NSURLResponse, "expectedContentLength") = Int64;
overload externalInstanceMethod(#NSURLResponse, "textEncodingName") = NSString;
overload externalInstanceMethod(#NSURLResponse, "suggestedFilename") = NSString;

record NSUndoManager = externalClass(NSObject);
overload externalInstanceMethod(#NSUndoManager, "beginUndoGrouping") = Void;
overload externalInstanceMethod(#NSUndoManager, "endUndoGrouping") = Void;
overload externalInstanceMethod(#NSUndoManager, "groupingLevel") = Int;
overload externalInstanceMethod(#NSUndoManager, "disableUndoRegistration") = Void;
overload externalInstanceMethod(#NSUndoManager, "enableUndoRegistration") = Void;
overload externalInstanceMethod(#NSUndoManager, "isUndoRegistrationEnabled") = Bool;
overload externalInstanceMethod(#NSUndoManager, "groupsByEvent") = Bool;
overload externalInstanceMethod(#NSUndoManager, "setGroupsByEvent:") = Void, Bool;
overload externalInstanceMethod(#NSUndoManager, "setLevelsOfUndo:") = Void, UInt;
overload externalInstanceMethod(#NSUndoManager, "levelsOfUndo") = UInt;
overload externalInstanceMethod(#NSUndoManager, "setRunLoopModes:") = Void, NSArray;
overload externalInstanceMethod(#NSUndoManager, "runLoopModes") = NSArray;
overload externalInstanceMethod(#NSUndoManager, "undo") = Void;
overload externalInstanceMethod(#NSUndoManager, "redo") = Void;
overload externalInstanceMethod(#NSUndoManager, "undoNestedGroup") = Void;
overload externalInstanceMethod(#NSUndoManager, "canUndo") = Bool;
overload externalInstanceMethod(#NSUndoManager, "canRedo") = Bool;
overload externalInstanceMethod(#NSUndoManager, "isUndoing") = Bool;
overload externalInstanceMethod(#NSUndoManager, "isRedoing") = Bool;
overload externalInstanceMethod(#NSUndoManager, "removeAllActions") = Void;
overload externalInstanceMethod(#NSUndoManager, "removeAllActionsWithTarget:") = Void, Id;
overload externalInstanceMethod(#NSUndoManager, "registerUndoWithTarget:selector:object:") = Void, Id, SelectorHandle, Id;
overload externalInstanceMethod(#NSUndoManager, "prepareWithInvocationTarget:") = Id, Id;
overload externalInstanceMethod(#NSUndoManager, "undoActionName") = NSString;
overload externalInstanceMethod(#NSUndoManager, "redoActionName") = NSString;
overload externalInstanceMethod(#NSUndoManager, "setActionName:") = Void, NSString;
overload externalInstanceMethod(#NSUndoManager, "undoMenuItemTitle") = NSString;
overload externalInstanceMethod(#NSUndoManager, "redoMenuItemTitle") = NSString;
overload externalInstanceMethod(#NSUndoManager, "undoMenuTitleForUndoActionName:") = NSString, NSString;
overload externalInstanceMethod(#NSUndoManager, "redoMenuTitleForUndoActionName:") = NSString, NSString;

record NSUserDefaults = externalClass(NSObject);
overload externalClassMethod(#NSUserDefaults, "standardUserDefaults") = NSUserDefaults;
overload externalClassMethod(#NSUserDefaults, "resetStandardUserDefaults") = Void;
overload externalInstanceMethod(#NSUserDefaults, "init") = Id;
overload externalInstanceMethod(#NSUserDefaults, "initWithUser:") = Id, NSString;
overload externalInstanceMethod(#NSUserDefaults, "objectForKey:") = Id, NSString;
overload externalInstanceMethod(#NSUserDefaults, "setObject:forKey:") = Void, Id, NSString;
overload externalInstanceMethod(#NSUserDefaults, "removeObjectForKey:") = Void, NSString;
overload externalInstanceMethod(#NSUserDefaults, "stringForKey:") = NSString, NSString;
overload externalInstanceMethod(#NSUserDefaults, "arrayForKey:") = NSArray, NSString;
overload externalInstanceMethod(#NSUserDefaults, "dictionaryForKey:") = NSDictionary, NSString;
overload externalInstanceMethod(#NSUserDefaults, "dataForKey:") = NSData, NSString;
overload externalInstanceMethod(#NSUserDefaults, "stringArrayForKey:") = NSArray, NSString;
overload externalInstanceMethod(#NSUserDefaults, "integerForKey:") = Int, NSString;
overload externalInstanceMethod(#NSUserDefaults, "floatForKey:") = Float, NSString;
overload externalInstanceMethod(#NSUserDefaults, "doubleForKey:") = Double, NSString;
overload externalInstanceMethod(#NSUserDefaults, "boolForKey:") = Bool, NSString;
overload externalInstanceMethod(#NSUserDefaults, "URLForKey:") = NSURL, NSString;
overload externalInstanceMethod(#NSUserDefaults, "setInteger:forKey:") = Void, Int, NSString;
overload externalInstanceMethod(#NSUserDefaults, "setFloat:forKey:") = Void, Float, NSString;
overload externalInstanceMethod(#NSUserDefaults, "setDouble:forKey:") = Void, Double, NSString;
overload externalInstanceMethod(#NSUserDefaults, "setBool:forKey:") = Void, Bool, NSString;
overload externalInstanceMethod(#NSUserDefaults, "setURL:forKey:") = Void, NSURL, NSString;
overload externalInstanceMethod(#NSUserDefaults, "registerDefaults:") = Void, NSDictionary;
overload externalInstanceMethod(#NSUserDefaults, "addSuiteNamed:") = Void, NSString;
overload externalInstanceMethod(#NSUserDefaults, "removeSuiteNamed:") = Void, NSString;
overload externalInstanceMethod(#NSUserDefaults, "dictionaryRepresentation") = NSDictionary;
overload externalInstanceMethod(#NSUserDefaults, "volatileDomainNames") = NSArray;
overload externalInstanceMethod(#NSUserDefaults, "volatileDomainForName:") = NSDictionary, NSString;
overload externalInstanceMethod(#NSUserDefaults, "setVolatileDomain:forName:") = Void, NSDictionary, NSString;
overload externalInstanceMethod(#NSUserDefaults, "removeVolatileDomainForName:") = Void, NSString;
overload externalInstanceMethod(#NSUserDefaults, "persistentDomainNames") = NSArray;
overload externalInstanceMethod(#NSUserDefaults, "persistentDomainForName:") = NSDictionary, NSString;
overload externalInstanceMethod(#NSUserDefaults, "setPersistentDomain:forName:") = Void, NSDictionary, NSString;
overload externalInstanceMethod(#NSUserDefaults, "removePersistentDomainForName:") = Void, NSString;
overload externalInstanceMethod(#NSUserDefaults, "synchronize") = Bool;
overload externalInstanceMethod(#NSUserDefaults, "objectIsForcedForKey:") = Bool, NSString;
overload externalInstanceMethod(#NSUserDefaults, "objectIsForcedForKey:inDomain:") = Bool, NSString, NSString;

record NSValue = externalClass(NSObject);
overload externalInstanceMethod(#NSValue, "copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#NSValue, "encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSValue, "initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#NSValue, "getValue:") = Void, RawPointer;
overload externalInstanceMethod(#NSValue, "objCType") = Pointer[CChar];
overload externalInstanceMethod(#NSValue, "initWithBytes:objCType:") = Id, RawPointer, Pointer[CChar];
overload externalClassMethod(#NSValue, "valueWithBytes:objCType:") = NSValue, RawPointer, Pointer[CChar];
overload externalClassMethod(#NSValue, "value:withObjCType:") = NSValue, RawPointer, Pointer[CChar];
overload externalClassMethod(#NSValue, "valueWithNonretainedObject:") = NSValue, Id;
overload externalInstanceMethod(#NSValue, "nonretainedObjectValue") = Id;
overload externalClassMethod(#NSValue, "valueWithPointer:") = NSValue, RawPointer;
overload externalInstanceMethod(#NSValue, "pointerValue") = RawPointer;
overload externalInstanceMethod(#NSValue, "isEqualToValue:") = Bool, NSValue;
overload externalClassMethod(#NSValue, "valueWithRange:") = NSValue, NSRange;
overload externalInstanceMethod(#NSValue, "rangeValue") = NSRange;

record NSValueTransformer = externalClass(NSObject);
overload externalClassMethod(#NSValueTransformer, "setValueTransformer:forName:") = Void, NSValueTransformer, NSString;
overload externalClassMethod(#NSValueTransformer, "valueTransformerForName:") = NSValueTransformer, NSString;
overload externalClassMethod(#NSValueTransformer, "valueTransformerNames") = NSArray;
overload externalClassMethod(#NSValueTransformer, "transformedValueClass") = Id;
overload externalClassMethod(#NSValueTransformer, "allowsReverseTransformation") = Bool;
overload externalInstanceMethod(#NSValueTransformer, "transformedValue:") = Id, Id;
overload externalInstanceMethod(#NSValueTransformer, "reverseTransformedValue:") = Id, Id;

record NSXMLParser = externalClass(NSObject);
overload externalInstanceMethod(#NSXMLParser, "initWithContentsOfURL:") = Id, NSURL;
overload externalInstanceMethod(#NSXMLParser, "initWithData:") = Id, NSData;
overload externalInstanceMethod(#NSXMLParser, "delegate") = Id;
overload externalInstanceMethod(#NSXMLParser, "setDelegate:") = Void, Id;
overload externalInstanceMethod(#NSXMLParser, "setShouldProcessNamespaces:") = Void, Bool;
overload externalInstanceMethod(#NSXMLParser, "setShouldReportNamespacePrefixes:") = Void, Bool;
overload externalInstanceMethod(#NSXMLParser, "setShouldResolveExternalEntities:") = Void, Bool;
overload externalInstanceMethod(#NSXMLParser, "shouldProcessNamespaces") = Bool;
overload externalInstanceMethod(#NSXMLParser, "shouldReportNamespacePrefixes") = Bool;
overload externalInstanceMethod(#NSXMLParser, "shouldResolveExternalEntities") = Bool;
overload externalInstanceMethod(#NSXMLParser, "parse") = Bool;
overload externalInstanceMethod(#NSXMLParser, "abortParsing") = Void;
overload externalInstanceMethod(#NSXMLParser, "parserError") = NSError;
overload externalInstanceMethod(#NSXMLParser, "publicID") = NSString;
overload externalInstanceMethod(#NSXMLParser, "systemID") = NSString;
overload externalInstanceMethod(#NSXMLParser, "lineNumber") = Int;
overload externalInstanceMethod(#NSXMLParser, "columnNumber") = Int;


external NSFoundationVersionNumber : Double;

alias NSInteger = Int;

alias NSUInteger = UInt;

external NSStringFromSelector(
    aSelector : SelectorHandle) : NSString;

external NSSelectorFromString(
    aSelectorName : NSString) : SelectorHandle;

external NSStringFromClass(
    aClass : Id) : NSString;

external NSClassFromString(
    aClassName : NSString) : Id;

external NSStringFromProtocol(
    proto : Id) : NSString;

external NSProtocolFromString(
    namestr : NSString) : Id;

external NSGetSizeAndAlignment(
    typePtr : Pointer[CChar],
    sizep : Pointer[UInt],
    alignp : Pointer[UInt]) : Pointer[CChar];

external NSLog(
    format : NSString,
    ..);

external NSLogv(
    format : NSString,
    args : va_list);

alias NSOrderedAscending = 4294967295;
alias NSOrderedSame = 0;
alias NSOrderedDescending = 1;

alias NSComparisonResult = Int;

alias NSComparator = UnknownType;

alias NSEnumerationConcurrent = 1;
alias NSEnumerationReverse = 2;

alias NSEnumerationOptions = UInt;

alias NSSortConcurrent = 1;
alias NSSortStable = 16;

alias NSSortOptions = UInt;

alias NSNotFound = 2147483647;

alias NSZone = Opaque;

external NSDefaultMallocZone() : Pointer[NSZone];

external NSCreateZone(
    startSize : UInt,
    granularity : UInt,
    canFree : Bool) : Pointer[NSZone];

external NSRecycleZone(
    zone : Pointer[NSZone]);

external NSSetZoneName(
    zone : Pointer[NSZone],
    name : NSString);

external NSZoneName(
    zone : Pointer[NSZone]) : NSString;

external NSZoneFromPointer(
    ptr : RawPointer) : Pointer[NSZone];

external NSZoneMalloc(
    zone : Pointer[NSZone],
    size : UInt) : RawPointer;

external NSZoneCalloc(
    zone : Pointer[NSZone],
    numElems : UInt,
    byteSize : UInt) : RawPointer;

external NSZoneRealloc(
    zone : Pointer[NSZone],
    ptr : RawPointer,
    size : UInt) : RawPointer;

external NSZoneFree(
    zone : Pointer[NSZone],
    ptr : RawPointer);

external NSPageSize() : UInt;

external NSLogPageSize() : UInt;

external NSRoundUpToMultipleOfPageSize(
    bytes : UInt) : UInt;

external NSRoundDownToMultipleOfPageSize(
    bytes : UInt) : UInt;

external NSAllocateMemoryPages(
    bytes : UInt) : RawPointer;

external NSDeallocateMemoryPages(
    ptr : RawPointer,
    bytes : UInt);

external NSCopyMemoryPages(
    source : RawPointer,
    dest : RawPointer,
    bytes : UInt);

external NSRealMemoryAvailable() : UInt;

external NSAllocateObject(
    aClass : Id,
    extraBytes : UInt,
    zone : Pointer[NSZone]) : Id;

external NSDeallocateObject(
    object : Id);

external NSCopyObject(
    object : Id,
    extraBytes : UInt,
    zone : Pointer[NSZone]) : Id;

external NSShouldRetainWithZone(
    anObject : Id,
    requestedZone : Pointer[NSZone]) : Bool;

external NSIncrementExtraRefCount(
    object : Id);

external NSDecrementExtraRefCountWasZero(
    object : Id) : Bool;

external NSExtraRefCount(
    object : Id) : UInt;

record UnnamedStruct58 (
    state : CULong,
    itemsPtr : Pointer[Id],
    mutationsPtr : Pointer[CULong],
    extra : Array[CULong,5],
);

alias NSFastEnumerationState = UnnamedStruct58;

record Struct__NSRange (
    location : UInt,
    length : UInt,
);

alias NSRange = Struct__NSRange;

alias NSRangePointer = Pointer[NSRange];

external NSUnionRange(
    range1 : NSRange,
    range2 : NSRange) : NSRange;

external NSIntersectionRange(
    range1 : NSRange,
    range2 : NSRange) : NSRange;

external NSStringFromRange(
    range : NSRange) : NSString;

external NSRangeFromString(
    aString : NSString) : NSRange;

external NSBundleDidLoadNotification : NSString;

external NSLoadedClasses : NSString;

alias NS_UnknownByteOrder = 0;
alias NS_LittleEndian = 1;
alias NS_BigEndian = 2;

record UnnamedStruct59 (
    v : UInt,
);

alias NSSwappedFloat = UnnamedStruct59;

record UnnamedStruct60 (
    v : UInt64,
);

alias NSSwappedDouble = UnnamedStruct60;

external NSSystemClockDidChangeNotification : NSString;

alias NSTimeInterval = Double;

alias NSEraCalendarUnit = 2;
alias NSYearCalendarUnit = 4;
alias NSMonthCalendarUnit = 8;
alias NSDayCalendarUnit = 16;
alias NSHourCalendarUnit = 32;
alias NSMinuteCalendarUnit = 64;
alias NSSecondCalendarUnit = 128;
alias NSWeekCalendarUnit = 256;
alias NSWeekdayCalendarUnit = 512;
alias NSWeekdayOrdinalCalendarUnit = 1024;
alias NSQuarterCalendarUnit = 2048;
alias NSCalendarCalendarUnit = 1048576;
alias NSTimeZoneCalendarUnit = 2097152;

alias NSCalendarUnit = UInt;

alias NSWrapCalendarComponents = 1;

alias NSUndefinedDateComponent = 2147483647;

alias unichar = UShort;

external NSParseErrorException : NSString;

alias NSCaseInsensitiveSearch = 1;
alias NSLiteralSearch = 2;
alias NSBackwardsSearch = 4;
alias NSAnchoredSearch = 8;
alias NSNumericSearch = 64;
alias NSDiacriticInsensitiveSearch = 128;
alias NSWidthInsensitiveSearch = 256;
alias NSForcedOrderingSearch = 512;
alias NSRegularExpressionSearch = 1024;

alias NSStringCompareOptions = UInt;

alias NSASCIIStringEncoding = 1;
alias NSNEXTSTEPStringEncoding = 2;
alias NSJapaneseEUCStringEncoding = 3;
alias NSUTF8StringEncoding = 4;
alias NSISOLatin1StringEncoding = 5;
alias NSSymbolStringEncoding = 6;
alias NSNonLossyASCIIStringEncoding = 7;
alias NSShiftJISStringEncoding = 8;
alias NSISOLatin2StringEncoding = 9;
alias NSUnicodeStringEncoding = 10;
alias NSWindowsCP1251StringEncoding = 11;
alias NSWindowsCP1252StringEncoding = 12;
alias NSWindowsCP1253StringEncoding = 13;
alias NSWindowsCP1254StringEncoding = 14;
alias NSWindowsCP1250StringEncoding = 15;
alias NSISO2022JPStringEncoding = 21;
alias NSMacOSRomanStringEncoding = 30;
alias NSUTF16StringEncoding = 10;
alias NSUTF16BigEndianStringEncoding = 2415919360;
alias NSUTF16LittleEndianStringEncoding = 2483028224;
alias NSUTF32StringEncoding = 2348810496;
alias NSUTF32BigEndianStringEncoding = 2550137088;
alias NSUTF32LittleEndianStringEncoding = 2617245952;

alias NSStringEncoding = UInt;

alias NSStringEncodingConversionAllowLossy = 1;
alias NSStringEncodingConversionExternalRepresentation = 2;

alias NSStringEncodingConversionOptions = UInt;

external NSCharacterConversionException : NSString;

external _NSConstantStringClassReference : RawPointer;

alias NSOpenStepUnicodeReservedBase = 62464;

alias NSDataReadingMapped = 1;
alias NSDataReadingUncached = 2;

alias NSDataReadingOptions = UInt;

alias NSDataWritingAtomic = 1;
alias NSDataWritingFileProtectionNone = 268435456;
alias NSDataWritingFileProtectionComplete = 536870912;
alias NSDataWritingFileProtectionMask = 4026531840;

alias NSDataWritingOptions = UInt;

alias NSMappedRead = 1;
alias NSUncachedRead = 2;

alias NSAtomicWrite = 1;

alias NSDataSearchBackwards = 1;
alias NSDataSearchAnchored = 2;

alias NSDataSearchOptions = UInt;

alias NSRoundPlain = 0;
alias NSRoundDown = 1;
alias NSRoundUp = 2;
alias NSRoundBankers = 3;

alias NSRoundingMode = UInt;

alias NSCalculationNoError = 0;
alias NSCalculationLossOfPrecision = 1;
alias NSCalculationUnderflow = 2;
alias NSCalculationOverflow = 3;
alias NSCalculationDivideByZero = 4;

alias NSCalculationError = UInt;

record UnnamedStruct61 (
    _exponent : Int,
    _length : UInt,
    _isNegative : UInt,
    _isCompact : UInt,
    _reserved : UInt,
    _mantissa : Array[UShort,8],
);

alias NSDecimal = UnnamedStruct61;

external NSDecimalCopy(
    destination : Pointer[NSDecimal],
    source : Pointer[NSDecimal]);

external NSDecimalCompact(
    number : Pointer[NSDecimal]);

external NSDecimalCompare(
    leftOperand : Pointer[NSDecimal],
    rightOperand : Pointer[NSDecimal]) : Int;

external NSDecimalRound(
    result : Pointer[NSDecimal],
    number : Pointer[NSDecimal],
    scale : Int,
    roundingMode : UInt);

external NSDecimalNormalize(
    number1 : Pointer[NSDecimal],
    number2 : Pointer[NSDecimal],
    roundingMode : UInt) : UInt;

external NSDecimalAdd(
    result : Pointer[NSDecimal],
    leftOperand : Pointer[NSDecimal],
    rightOperand : Pointer[NSDecimal],
    roundingMode : UInt) : UInt;

external NSDecimalSubtract(
    result : Pointer[NSDecimal],
    leftOperand : Pointer[NSDecimal],
    rightOperand : Pointer[NSDecimal],
    roundingMode : UInt) : UInt;

external NSDecimalMultiply(
    result : Pointer[NSDecimal],
    leftOperand : Pointer[NSDecimal],
    rightOperand : Pointer[NSDecimal],
    roundingMode : UInt) : UInt;

external NSDecimalDivide(
    result : Pointer[NSDecimal],
    leftOperand : Pointer[NSDecimal],
    rightOperand : Pointer[NSDecimal],
    roundingMode : UInt) : UInt;

external NSDecimalPower(
    result : Pointer[NSDecimal],
    number : Pointer[NSDecimal],
    power : UInt,
    roundingMode : UInt) : UInt;

external NSDecimalMultiplyByPowerOf10(
    result : Pointer[NSDecimal],
    number : Pointer[NSDecimal],
    power : Short,
    roundingMode : UInt) : UInt;

external NSDecimalString(
    dcm : Pointer[NSDecimal],
    locale : Id) : NSString;

external NSDecimalNumberExactnessException : NSString;

external NSDecimalNumberOverflowException : NSString;

external NSDecimalNumberUnderflowException : NSString;

external NSDecimalNumberDivideByZeroException : NSString;

external NSCocoaErrorDomain : NSString;

external NSPOSIXErrorDomain : NSString;

external NSOSStatusErrorDomain : NSString;

external NSMachErrorDomain : NSString;

external NSUnderlyingErrorKey : NSString;

external NSLocalizedDescriptionKey : NSString;

external NSLocalizedFailureReasonErrorKey : NSString;

external NSLocalizedRecoverySuggestionErrorKey : NSString;

external NSLocalizedRecoveryOptionsErrorKey : NSString;

external NSRecoveryAttempterErrorKey : NSString;

external NSHelpAnchorErrorKey : NSString;

external NSStringEncodingErrorKey : NSString;

external NSURLErrorKey : NSString;

external NSFilePathErrorKey : NSString;

external NSGenericException : NSString;

external NSRangeException : NSString;

external NSInvalidArgumentException : NSString;

external NSInternalInconsistencyException : NSString;

external NSMallocException : NSString;

external NSObjectInaccessibleException : NSString;

external NSObjectNotAvailableException : NSString;

external NSDestinationInvalidException : NSString;

external NSPortTimeoutException : NSString;

external NSInvalidSendPortException : NSString;

external NSInvalidReceivePortException : NSString;

external NSPortSendException : NSString;

external NSPortReceiveException : NSString;

external NSOldStyleException : NSString;

external NSGetUncaughtExceptionHandler() : CCodePointer[[NSException],[]];

external NSSetUncaughtExceptionHandler(
    argument0 : CCodePointer[[NSException],[]]);

external NSAssertionHandlerKey : NSString;

external NSFileHandleOperationException : NSString;

external NSFileHandleReadCompletionNotification : NSString;

external NSFileHandleReadToEndOfFileCompletionNotification : NSString;

external NSFileHandleConnectionAcceptedNotification : NSString;

external NSFileHandleDataAvailableNotification : NSString;

external NSFileHandleNotificationDataItem : NSString;

external NSFileHandleNotificationFileHandleItem : NSString;

external NSFileHandleNotificationMonitorModes : NSString;

external NSUserName() : NSString;

external NSFullUserName() : NSString;

external NSHomeDirectory() : NSString;

external NSHomeDirectoryForUser(
    userName : NSString) : NSString;

external NSTemporaryDirectory() : NSString;

external NSOpenStepRootDirectory() : NSString;

alias NSApplicationDirectory = 1;
alias NSDemoApplicationDirectory = 2;
alias NSDeveloperApplicationDirectory = 3;
alias NSAdminApplicationDirectory = 4;
alias NSLibraryDirectory = 5;
alias NSDeveloperDirectory = 6;
alias NSUserDirectory = 7;
alias NSDocumentationDirectory = 8;
alias NSDocumentDirectory = 9;
alias NSCoreServiceDirectory = 10;
alias NSAutosavedInformationDirectory = 11;
alias NSDesktopDirectory = 12;
alias NSCachesDirectory = 13;
alias NSApplicationSupportDirectory = 14;
alias NSDownloadsDirectory = 15;
alias NSInputMethodsDirectory = 16;
alias NSMoviesDirectory = 17;
alias NSMusicDirectory = 18;
alias NSPicturesDirectory = 19;
alias NSPrinterDescriptionDirectory = 20;
alias NSSharedPublicDirectory = 21;
alias NSPreferencePanesDirectory = 22;
alias NSItemReplacementDirectory = 99;
alias NSAllApplicationsDirectory = 100;
alias NSAllLibrariesDirectory = 101;

alias NSSearchPathDirectory = UInt;

alias NSUserDomainMask = 1;
alias NSLocalDomainMask = 2;
alias NSNetworkDomainMask = 4;
alias NSSystemDomainMask = 8;
alias NSAllDomainsMask = 65535;

alias NSSearchPathDomainMask = UInt;

external NSSearchPathForDirectoriesInDomains(
    directory : UInt,
    domainMask : UInt,
    expandTilde : Bool) : NSArray;

alias NSVolumeEnumerationSkipHiddenVolumes = 2;
alias NSVolumeEnumerationProduceFileReferenceURLs = 4;

alias NSVolumeEnumerationOptions = UInt;

alias NSDirectoryEnumerationSkipsSubdirectoryDescendants = 1;
alias NSDirectoryEnumerationSkipsPackageDescendants = 2;
alias NSDirectoryEnumerationSkipsHiddenFiles = 4;

alias NSDirectoryEnumerationOptions = UInt;

alias NSFileManagerItemReplacementUsingNewMetadataOnly = 1;
alias NSFileManagerItemReplacementWithoutDeletingBackupItem = 2;

alias NSFileManagerItemReplacementOptions = UInt;

external NSFileType : NSString;

external NSFileTypeDirectory : NSString;

external NSFileTypeRegular : NSString;

external NSFileTypeSymbolicLink : NSString;

external NSFileTypeSocket : NSString;

external NSFileTypeCharacterSpecial : NSString;

external NSFileTypeBlockSpecial : NSString;

external NSFileTypeUnknown : NSString;

external NSFileSize : NSString;

external NSFileModificationDate : NSString;

external NSFileReferenceCount : NSString;

external NSFileDeviceIdentifier : NSString;

external NSFileOwnerAccountName : NSString;

external NSFileGroupOwnerAccountName : NSString;

external NSFilePosixPermissions : NSString;

external NSFileSystemNumber : NSString;

external NSFileSystemFileNumber : NSString;

external NSFileExtensionHidden : NSString;

external NSFileHFSCreatorCode : NSString;

external NSFileHFSTypeCode : NSString;

external NSFileImmutable : NSString;

external NSFileAppendOnly : NSString;

external NSFileCreationDate : NSString;

external NSFileOwnerAccountID : NSString;

external NSFileGroupOwnerAccountID : NSString;

external NSFileBusy : NSString;

external NSFileProtectionKey : NSString;

external NSFileProtectionNone : NSString;

external NSFileProtectionComplete : NSString;

external NSFileSystemSize : NSString;

external NSFileSystemFreeSize : NSString;

external NSFileSystemNodes : NSString;

external NSFileSystemFreeNodes : NSString;

external NSUndefinedKeyException : NSString;

external NSAverageKeyValueOperator : NSString;

external NSCountKeyValueOperator : NSString;

external NSDistinctUnionOfArraysKeyValueOperator : NSString;

external NSDistinctUnionOfObjectsKeyValueOperator : NSString;

external NSDistinctUnionOfSetsKeyValueOperator : NSString;

external NSMaximumKeyValueOperator : NSString;

external NSMinimumKeyValueOperator : NSString;

external NSSumKeyValueOperator : NSString;

external NSUnionOfArraysKeyValueOperator : NSString;

external NSUnionOfObjectsKeyValueOperator : NSString;

external NSUnionOfSetsKeyValueOperator : NSString;

alias NSKeyValueObservingOptionNew = 1;
alias NSKeyValueObservingOptionOld = 2;
alias NSKeyValueObservingOptionInitial = 4;
alias NSKeyValueObservingOptionPrior = 8;

alias NSKeyValueObservingOptions = UInt;

alias NSKeyValueChangeSetting = 1;
alias NSKeyValueChangeInsertion = 2;
alias NSKeyValueChangeRemoval = 3;
alias NSKeyValueChangeReplacement = 4;

alias NSKeyValueChange = UInt;

alias NSKeyValueUnionSetMutation = 1;
alias NSKeyValueMinusSetMutation = 2;
alias NSKeyValueIntersectSetMutation = 3;
alias NSKeyValueSetSetMutation = 4;

alias NSKeyValueSetMutationKind = UInt;

external NSKeyValueChangeKindKey : NSString;

external NSKeyValueChangeNewKey : NSString;

external NSKeyValueChangeOldKey : NSString;

external NSKeyValueChangeIndexesKey : NSString;

external NSKeyValueChangeNotificationIsPriorKey : NSString;

alias NSPropertyListImmutable = 0;
alias NSPropertyListMutableContainers = 1;
alias NSPropertyListMutableContainersAndLeaves = 2;

alias NSPropertyListMutabilityOptions = UInt;

alias NSPropertyListOpenStepFormat = 1;
alias NSPropertyListXMLFormat_v1_0 = 100;
alias NSPropertyListBinaryFormat_v1_0 = 200;

alias NSPropertyListFormat = UInt;

alias NSPropertyListReadOptions = UInt;

alias NSPropertyListWriteOptions = UInt;

external NSInvalidArchiveOperationException : NSString;

external NSInvalidUnarchiveOperationException : NSString;

external NSCurrentLocaleDidChangeNotification : NSString;

external NSLocaleIdentifier : NSString;

external NSLocaleLanguageCode : NSString;

external NSLocaleCountryCode : NSString;

external NSLocaleScriptCode : NSString;

external NSLocaleVariantCode : NSString;

external NSLocaleExemplarCharacterSet : NSString;

external NSLocaleCalendar : NSString;

external NSLocaleCollationIdentifier : NSString;

external NSLocaleUsesMetricSystem : NSString;

external NSLocaleMeasurementSystem : NSString;

external NSLocaleDecimalSeparator : NSString;

external NSLocaleGroupingSeparator : NSString;

external NSLocaleCurrencySymbol : NSString;

external NSLocaleCurrencyCode : NSString;

external NSLocaleCollatorIdentifier : NSString;

external NSLocaleQuotationBeginDelimiterKey : NSString;

external NSLocaleQuotationEndDelimiterKey : NSString;

external NSLocaleAlternateQuotationBeginDelimiterKey : NSString;

external NSLocaleAlternateQuotationEndDelimiterKey : NSString;

external NSGregorianCalendar : NSString;

external NSBuddhistCalendar : NSString;

external NSChineseCalendar : NSString;

external NSHebrewCalendar : NSString;

external NSIslamicCalendar : NSString;

external NSIslamicCivilCalendar : NSString;

external NSJapaneseCalendar : NSString;

external NSRepublicOfChinaCalendar : NSString;

external NSPersianCalendar : NSString;

external NSIndianCalendar : NSString;

external NSISO8601Calendar : NSString;

alias NSPostWhenIdle = 1;
alias NSPostASAP = 2;
alias NSPostNow = 3;

alias NSPostingStyle = UInt;

alias NSNotificationNoCoalescing = 0;
alias NSNotificationCoalescingOnName = 1;
alias NSNotificationCoalescingOnSender = 2;

alias NSNotificationCoalescing = UInt;

alias NSSocketNativeHandle = Int;

external NSPortDidBecomeInvalidNotification : NSString;

alias NSWindowsNTOperatingSystem = 1;
alias NSWindows95OperatingSystem = 2;
alias NSSolarisOperatingSystem = 3;
alias NSHPUXOperatingSystem = 4;
alias NSMACHOperatingSystem = 5;
alias NSSunOSOperatingSystem = 6;
alias NSOSF1OperatingSystem = 7;

alias NSTextCheckingTypeOrthography = 1;
alias NSTextCheckingTypeSpelling = 2;
alias NSTextCheckingTypeGrammar = 4;
alias NSTextCheckingTypeDate = 8;
alias NSTextCheckingTypeAddress = 16;
alias NSTextCheckingTypeLink = 32;
alias NSTextCheckingTypeQuote = 64;
alias NSTextCheckingTypeDash = 128;
alias NSTextCheckingTypeReplacement = 256;
alias NSTextCheckingTypeCorrection = 512;
alias NSTextCheckingTypeRegularExpression = 1024;
alias NSTextCheckingTypePhoneNumber = 2048;
alias NSTextCheckingTypeTransitInformation = 4096;

alias NSTextCheckingType = UInt64;

alias NSTextCheckingAllSystemTypes = 4294967295;
alias NSTextCheckingAllCustomTypes = 18446744069414584320;
alias NSTextCheckingAllTypes = 18446744073709551615;

alias NSTextCheckingTypes = UInt64;

external NSTextCheckingNameKey : NSString;

external NSTextCheckingJobTitleKey : NSString;

external NSTextCheckingOrganizationKey : NSString;

external NSTextCheckingStreetKey : NSString;

external NSTextCheckingCityKey : NSString;

external NSTextCheckingStateKey : NSString;

external NSTextCheckingZIPKey : NSString;

external NSTextCheckingCountryKey : NSString;

external NSTextCheckingPhoneKey : NSString;

external NSTextCheckingAirlineKey : NSString;

external NSTextCheckingFlightKey : NSString;

alias NSRegularExpressionCaseInsensitive = 1;
alias NSRegularExpressionAllowCommentsAndWhitespace = 2;
alias NSRegularExpressionIgnoreMetacharacters = 4;
alias NSRegularExpressionDotMatchesLineSeparators = 8;
alias NSRegularExpressionAnchorsMatchLines = 16;
alias NSRegularExpressionUseUnixLineSeparators = 32;
alias NSRegularExpressionUseUnicodeWordBoundaries = 64;

alias NSRegularExpressionOptions = UInt;

alias NSMatchingReportProgress = 1;
alias NSMatchingReportCompletion = 2;
alias NSMatchingAnchored = 4;
alias NSMatchingWithTransparentBounds = 8;
alias NSMatchingWithoutAnchoringBounds = 16;

alias NSMatchingOptions = UInt;

alias NSMatchingProgress = 1;
alias NSMatchingCompleted = 2;
alias NSMatchingHitEnd = 4;
alias NSMatchingRequiredEnd = 8;
alias NSMatchingInternalError = 16;

alias NSMatchingFlags = UInt;

external NSDefaultRunLoopMode : NSString;

external NSRunLoopCommonModes : NSString;

alias NSStreamStatusNotOpen = 0;
alias NSStreamStatusOpening = 1;
alias NSStreamStatusOpen = 2;
alias NSStreamStatusReading = 3;
alias NSStreamStatusWriting = 4;
alias NSStreamStatusAtEnd = 5;
alias NSStreamStatusClosed = 6;
alias NSStreamStatusError = 7;

alias NSStreamStatus = UInt;

alias NSStreamEventNone = 0;
alias NSStreamEventOpenCompleted = 1;
alias NSStreamEventHasBytesAvailable = 2;
alias NSStreamEventHasSpaceAvailable = 4;
alias NSStreamEventErrorOccurred = 8;
alias NSStreamEventEndEncountered = 16;

alias NSStreamEvent = UInt;

external NSStreamSocketSecurityLevelKey : NSString;

external NSStreamSocketSecurityLevelNone : NSString;

external NSStreamSocketSecurityLevelSSLv2 : NSString;

external NSStreamSocketSecurityLevelSSLv3 : NSString;

external NSStreamSocketSecurityLevelTLSv1 : NSString;

external NSStreamSocketSecurityLevelNegotiatedSSL : NSString;

external NSStreamSOCKSProxyConfigurationKey : NSString;

external NSStreamSOCKSProxyHostKey : NSString;

external NSStreamSOCKSProxyPortKey : NSString;

external NSStreamSOCKSProxyVersionKey : NSString;

external NSStreamSOCKSProxyUserKey : NSString;

external NSStreamSOCKSProxyPasswordKey : NSString;

external NSStreamSOCKSProxyVersion4 : NSString;

external NSStreamSOCKSProxyVersion5 : NSString;

external NSStreamDataWrittenToMemoryStreamKey : NSString;

external NSStreamFileCurrentOffsetKey : NSString;

external NSStreamSocketSSLErrorDomain : NSString;

external NSStreamSOCKSErrorDomain : NSString;

external NSStreamNetworkServiceType : NSString;

external NSStreamNetworkServiceTypeVoIP : NSString;

external NSWillBecomeMultiThreadedNotification : NSString;

external NSDidBecomeSingleThreadedNotification : NSString;

external NSThreadWillExitNotification : NSString;

external NSSystemTimeZoneDidChangeNotification : NSString;

alias NSURLBookmarkCreationPreferFileIDResolution = 256;
alias NSURLBookmarkCreationMinimalBookmark = 512;
alias NSURLBookmarkCreationSuitableForBookmarkFile = 1024;

alias NSURLBookmarkResolutionWithoutUI = 256;
alias NSURLBookmarkResolutionWithoutMounting = 512;

alias NSURLBookmarkCreationOptions = UInt;

alias NSURLBookmarkResolutionOptions = UInt;

alias NSURLBookmarkFileCreationOptions = UInt;

external NSURLFileScheme : NSString;

external NSURLNameKey : NSString;

external NSURLLocalizedNameKey : NSString;

external NSURLIsRegularFileKey : NSString;

external NSURLIsDirectoryKey : NSString;

external NSURLIsSymbolicLinkKey : NSString;

external NSURLIsVolumeKey : NSString;

external NSURLIsPackageKey : NSString;

external NSURLIsSystemImmutableKey : NSString;

external NSURLIsUserImmutableKey : NSString;

external NSURLIsHiddenKey : NSString;

external NSURLHasHiddenExtensionKey : NSString;

external NSURLCreationDateKey : NSString;

external NSURLContentAccessDateKey : NSString;

external NSURLContentModificationDateKey : NSString;

external NSURLAttributeModificationDateKey : NSString;

external NSURLLinkCountKey : NSString;

external NSURLParentDirectoryURLKey : NSString;

external NSURLVolumeURLKey : NSString;

external NSURLTypeIdentifierKey : NSString;

external NSURLLocalizedTypeDescriptionKey : NSString;

external NSURLLabelNumberKey : NSString;

external NSURLLabelColorKey : NSString;

external NSURLLocalizedLabelKey : NSString;

external NSURLEffectiveIconKey : NSString;

external NSURLCustomIconKey : NSString;

external NSURLFileSizeKey : NSString;

external NSURLFileAllocatedSizeKey : NSString;

external NSURLIsAliasFileKey : NSString;

external NSURLVolumeLocalizedFormatDescriptionKey : NSString;

external NSURLVolumeTotalCapacityKey : NSString;

external NSURLVolumeAvailableCapacityKey : NSString;

external NSURLVolumeResourceCountKey : NSString;

external NSURLVolumeSupportsPersistentIDsKey : NSString;

external NSURLVolumeSupportsSymbolicLinksKey : NSString;

external NSURLVolumeSupportsHardLinksKey : NSString;

external NSURLVolumeSupportsJournalingKey : NSString;

external NSURLVolumeIsJournalingKey : NSString;

external NSURLVolumeSupportsSparseFilesKey : NSString;

external NSURLVolumeSupportsZeroRunsKey : NSString;

external NSURLVolumeSupportsCaseSensitiveNamesKey : NSString;

external NSURLVolumeSupportsCasePreservedNamesKey : NSString;

external NSGlobalDomain : NSString;

external NSArgumentDomain : NSString;

external NSRegistrationDomain : NSString;

external NSUserDefaultsDidChangeNotification : NSString;

alias NSUndoCloseGroupingRunLoopOrdering = 350000;

external NSUndoManagerCheckpointNotification : NSString;

external NSUndoManagerWillUndoChangeNotification : NSString;

external NSUndoManagerWillRedoChangeNotification : NSString;

external NSUndoManagerDidUndoChangeNotification : NSString;

external NSUndoManagerDidRedoChangeNotification : NSString;

external NSUndoManagerDidOpenUndoGroupNotification : NSString;

external NSUndoManagerWillCloseUndoGroupNotification : NSString;

external NSNegateBooleanTransformerName : NSString;

external NSIsNilTransformerName : NSString;

external NSIsNotNilTransformerName : NSString;

external NSUnarchiveFromDataTransformerName : NSString;

external NSKeyedUnarchiveFromDataTransformerName : NSString;

alias NSFileNoSuchFileError = 4;
alias NSFileLockingError = 255;
alias NSFileReadUnknownError = 256;
alias NSFileReadNoPermissionError = 257;
alias NSFileReadInvalidFileNameError = 258;
alias NSFileReadCorruptFileError = 259;
alias NSFileReadNoSuchFileError = 260;
alias NSFileReadInapplicableStringEncodingError = 261;
alias NSFileReadUnsupportedSchemeError = 262;
alias NSFileReadTooLargeError = 263;
alias NSFileReadUnknownStringEncodingError = 264;
alias NSFileWriteUnknownError = 512;
alias NSFileWriteNoPermissionError = 513;
alias NSFileWriteInvalidFileNameError = 514;
alias NSFileWriteInapplicableStringEncodingError = 517;
alias NSFileWriteUnsupportedSchemeError = 518;
alias NSFileWriteOutOfSpaceError = 640;
alias NSFileWriteVolumeReadOnlyError = 642;
alias NSKeyValueValidationError = 1024;
alias NSFormattingError = 2048;
alias NSUserCancelledError = 3072;
alias NSExecutableNotLoadableError = 3584;
alias NSExecutableArchitectureMismatchError = 3585;
alias NSExecutableRuntimeMismatchError = 3586;
alias NSExecutableLoadError = 3587;
alias NSExecutableLinkError = 3588;
alias NSFileErrorMinimum = 0;
alias NSFileErrorMaximum = 1023;
alias NSValidationErrorMinimum = 1024;
alias NSValidationErrorMaximum = 2047;
alias NSExecutableErrorMinimum = 3584;
alias NSExecutableErrorMaximum = 3839;
alias NSFormattingErrorMinimum = 2048;
alias NSFormattingErrorMaximum = 2559;
alias NSPropertyListReadCorruptError = 3840;
alias NSPropertyListReadUnknownVersionError = 3841;
alias NSPropertyListReadStreamError = 3842;
alias NSPropertyListWriteStreamError = 3851;
alias NSPropertyListErrorMinimum = 3840;
alias NSPropertyListErrorMaximum = 4095;

alias NSCaseInsensitivePredicateOption = 1;
alias NSDiacriticInsensitivePredicateOption = 2;

alias NSDirectPredicateModifier = 0;
alias NSAllPredicateModifier = 1;
alias NSAnyPredicateModifier = 2;

alias NSComparisonPredicateModifier = UInt;

alias NSLessThanPredicateOperatorType = 0;
alias NSLessThanOrEqualToPredicateOperatorType = 1;
alias NSGreaterThanPredicateOperatorType = 2;
alias NSGreaterThanOrEqualToPredicateOperatorType = 3;
alias NSEqualToPredicateOperatorType = 4;
alias NSNotEqualToPredicateOperatorType = 5;
alias NSMatchesPredicateOperatorType = 6;
alias NSLikePredicateOperatorType = 7;
alias NSBeginsWithPredicateOperatorType = 8;
alias NSEndsWithPredicateOperatorType = 9;
alias NSInPredicateOperatorType = 10;
alias NSCustomSelectorPredicateOperatorType = 11;
alias NSContainsPredicateOperatorType = 99;
alias NSBetweenPredicateOperatorType = 100;

alias NSPredicateOperatorType = UInt;

alias NSNotPredicateType = 0;
alias NSAndPredicateType = 1;
alias NSOrPredicateType = 2;

alias NSCompoundPredicateType = UInt;

alias NSConstantValueExpressionType = 0;
alias NSEvaluatedObjectExpressionType = 1;
alias NSVariableExpressionType = 2;
alias NSKeyPathExpressionType = 3;
alias NSFunctionExpressionType = 4;
alias NSUnionSetExpressionType = 5;
alias NSIntersectSetExpressionType = 6;
alias NSMinusSetExpressionType = 7;
alias NSSubqueryExpressionType = 13;
alias NSAggregateExpressionType = 14;
alias NSBlockExpressionType = 19;

alias NSExpressionType = UInt;

alias NSFileWrapperReadingImmediate = 1;
alias NSFileWrapperReadingWithoutMapping = 2;

alias NSFileWrapperReadingOptions = UInt;

alias NSFileWrapperWritingAtomic = 1;
alias NSFileWrapperWritingWithNameUpdating = 2;

alias NSFileWrapperWritingOptions = UInt;

external NSHTTPCookieName : NSString;

external NSHTTPCookieValue : NSString;

external NSHTTPCookieOriginURL : NSString;

external NSHTTPCookieVersion : NSString;

external NSHTTPCookieDomain : NSString;

external NSHTTPCookiePath : NSString;

external NSHTTPCookieSecure : NSString;

external NSHTTPCookieExpires : NSString;

external NSHTTPCookieComment : NSString;

external NSHTTPCookieCommentURL : NSString;

external NSHTTPCookieDiscard : NSString;

external NSHTTPCookieMaximumAge : NSString;

external NSHTTPCookiePort : NSString;

alias NSHTTPCookieAcceptPolicyAlways = 0;
alias NSHTTPCookieAcceptPolicyNever = 1;
alias NSHTTPCookieAcceptPolicyOnlyFromMainDocumentDomain = 2;

alias NSHTTPCookieAcceptPolicy = UInt;

external NSHTTPCookieManagerAcceptPolicyChangedNotification : NSString;

external NSHTTPCookieManagerCookiesChangedNotification : NSString;

external NSNetServicesErrorCode : NSString;

external NSNetServicesErrorDomain : NSString;

alias NSNetServicesUnknownError = 4294895296;
alias NSNetServicesCollisionError = 4294895295;
alias NSNetServicesNotFoundError = 4294895294;
alias NSNetServicesActivityInProgress = 4294895293;
alias NSNetServicesBadArgumentError = 4294895292;
alias NSNetServicesCancelledError = 4294895291;
alias NSNetServicesInvalidError = 4294895290;
alias NSNetServicesTimeoutError = 4294895289;

alias NSNetServicesError = Int;

alias NSNetServiceNoAutoRename = 1;

alias NSNetServiceOptions = UInt;

external NSInvocationOperationVoidResultException : NSString;

external NSInvocationOperationCancelledException : NSString;

alias NSURLCacheStorageAllowed = 0;
alias NSURLCacheStorageAllowedInMemoryOnly = 1;
alias NSURLCacheStorageNotAllowed = 2;

alias NSURLCacheStoragePolicy = UInt;

alias NSURLCredentialPersistenceNone = 0;
alias NSURLCredentialPersistenceForSession = 1;
alias NSURLCredentialPersistencePermanent = 2;

alias NSURLCredentialPersistence = UInt;

external NSURLCredentialStorageChangedNotification : NSString;

external NSURLErrorDomain : NSString;

external NSURLErrorFailingURLErrorKey : NSString;

external NSURLErrorFailingURLStringErrorKey : NSString;

external NSErrorFailingURLStringKey : NSString;

external NSURLErrorFailingURLPeerTrustErrorKey : NSString;

alias NSURLErrorUnknown = 4294967295;
alias NSURLErrorCancelled = 4294966297;
alias NSURLErrorBadURL = 4294966296;
alias NSURLErrorTimedOut = 4294966295;
alias NSURLErrorUnsupportedURL = 4294966294;
alias NSURLErrorCannotFindHost = 4294966293;
alias NSURLErrorCannotConnectToHost = 4294966292;
alias NSURLErrorNetworkConnectionLost = 4294966291;
alias NSURLErrorDNSLookupFailed = 4294966290;
alias NSURLErrorHTTPTooManyRedirects = 4294966289;
alias NSURLErrorResourceUnavailable = 4294966288;
alias NSURLErrorNotConnectedToInternet = 4294966287;
alias NSURLErrorRedirectToNonExistentLocation = 4294966286;
alias NSURLErrorBadServerResponse = 4294966285;
alias NSURLErrorUserCancelledAuthentication = 4294966284;
alias NSURLErrorUserAuthenticationRequired = 4294966283;
alias NSURLErrorZeroByteResource = 4294966282;
alias NSURLErrorCannotDecodeRawData = 4294966281;
alias NSURLErrorCannotDecodeContentData = 4294966280;
alias NSURLErrorCannotParseResponse = 4294966279;
alias NSURLErrorInternationalRoamingOff = 4294966278;
alias NSURLErrorCallIsActive = 4294966277;
alias NSURLErrorDataNotAllowed = 4294966276;
alias NSURLErrorRequestBodyStreamExhausted = 4294966275;
alias NSURLErrorFileDoesNotExist = 4294966196;
alias NSURLErrorFileIsDirectory = 4294966195;
alias NSURLErrorNoPermissionsToReadFile = 4294966194;
alias NSURLErrorDataLengthExceedsMaximum = 4294966193;
alias NSURLErrorSecureConnectionFailed = 4294966096;
alias NSURLErrorServerCertificateHasBadDate = 4294966095;
alias NSURLErrorServerCertificateUntrusted = 4294966094;
alias NSURLErrorServerCertificateHasUnknownRoot = 4294966093;
alias NSURLErrorServerCertificateNotYetValid = 4294966092;
alias NSURLErrorClientCertificateRejected = 4294966091;
alias NSURLErrorClientCertificateRequired = 4294966090;
alias NSURLErrorCannotLoadFromNetwork = 4294965296;
alias NSURLErrorCannotCreateFile = 4294964296;
alias NSURLErrorCannotOpenFile = 4294964295;
alias NSURLErrorCannotCloseFile = 4294964294;
alias NSURLErrorCannotWriteToFile = 4294964293;
alias NSURLErrorCannotRemoveFile = 4294964292;
alias NSURLErrorCannotMoveFile = 4294964291;
alias NSURLErrorDownloadDecodingFailedMidStream = 4294964290;
alias NSURLErrorDownloadDecodingFailedToComplete = 4294964289;

external NSURLProtectionSpaceHTTP : NSString;

external NSURLProtectionSpaceHTTPS : NSString;

external NSURLProtectionSpaceFTP : NSString;

external NSURLProtectionSpaceHTTPProxy : NSString;

external NSURLProtectionSpaceHTTPSProxy : NSString;

external NSURLProtectionSpaceFTPProxy : NSString;

external NSURLProtectionSpaceSOCKSProxy : NSString;

external NSURLAuthenticationMethodDefault : NSString;

external NSURLAuthenticationMethodHTTPBasic : NSString;

external NSURLAuthenticationMethodHTTPDigest : NSString;

external NSURLAuthenticationMethodHTMLForm : NSString;

external NSURLAuthenticationMethodNTLM : NSString;

external NSURLAuthenticationMethodNegotiate : NSString;

external NSURLAuthenticationMethodClientCertificate : NSString;

external NSURLAuthenticationMethodServerTrust : NSString;

alias NSURLRequestUseProtocolCachePolicy = 0;
alias NSURLRequestReloadIgnoringLocalCacheData = 1;
alias NSURLRequestReloadIgnoringLocalAndRemoteCacheData = 4;
alias NSURLRequestReloadIgnoringCacheData = 1;
alias NSURLRequestReturnCacheDataElseLoad = 2;
alias NSURLRequestReturnCacheDataDontLoad = 3;
alias NSURLRequestReloadRevalidatingCacheData = 5;

alias NSURLRequestCachePolicy = UInt;

alias NSURLNetworkServiceTypeDefault = 0;
alias NSURLNetworkServiceTypeVoIP = 1;

alias NSURLRequestNetworkServiceType = UInt;

external NSXMLParserErrorDomain : NSString;

alias NSXMLParserInternalError = 1;
alias NSXMLParserOutOfMemoryError = 2;
alias NSXMLParserDocumentStartError = 3;
alias NSXMLParserEmptyDocumentError = 4;
alias NSXMLParserPrematureDocumentEndError = 5;
alias NSXMLParserInvalidHexCharacterRefError = 6;
alias NSXMLParserInvalidDecimalCharacterRefError = 7;
alias NSXMLParserInvalidCharacterRefError = 8;
alias NSXMLParserInvalidCharacterError = 9;
alias NSXMLParserCharacterRefAtEOFError = 10;
alias NSXMLParserCharacterRefInPrologError = 11;
alias NSXMLParserCharacterRefInEpilogError = 12;
alias NSXMLParserCharacterRefInDTDError = 13;
alias NSXMLParserEntityRefAtEOFError = 14;
alias NSXMLParserEntityRefInPrologError = 15;
alias NSXMLParserEntityRefInEpilogError = 16;
alias NSXMLParserEntityRefInDTDError = 17;
alias NSXMLParserParsedEntityRefAtEOFError = 18;
alias NSXMLParserParsedEntityRefInPrologError = 19;
alias NSXMLParserParsedEntityRefInEpilogError = 20;
alias NSXMLParserParsedEntityRefInInternalSubsetError = 21;
alias NSXMLParserEntityReferenceWithoutNameError = 22;
alias NSXMLParserEntityReferenceMissingSemiError = 23;
alias NSXMLParserParsedEntityRefNoNameError = 24;
alias NSXMLParserParsedEntityRefMissingSemiError = 25;
alias NSXMLParserUndeclaredEntityError = 26;
alias NSXMLParserUnparsedEntityError = 28;
alias NSXMLParserEntityIsExternalError = 29;
alias NSXMLParserEntityIsParameterError = 30;
alias NSXMLParserUnknownEncodingError = 31;
alias NSXMLParserEncodingNotSupportedError = 32;
alias NSXMLParserStringNotStartedError = 33;
alias NSXMLParserStringNotClosedError = 34;
alias NSXMLParserNamespaceDeclarationError = 35;
alias NSXMLParserEntityNotStartedError = 36;
alias NSXMLParserEntityNotFinishedError = 37;
alias NSXMLParserLessThanSymbolInAttributeError = 38;
alias NSXMLParserAttributeNotStartedError = 39;
alias NSXMLParserAttributeNotFinishedError = 40;
alias NSXMLParserAttributeHasNoValueError = 41;
alias NSXMLParserAttributeRedefinedError = 42;
alias NSXMLParserLiteralNotStartedError = 43;
alias NSXMLParserLiteralNotFinishedError = 44;
alias NSXMLParserCommentNotFinishedError = 45;
alias NSXMLParserProcessingInstructionNotStartedError = 46;
alias NSXMLParserProcessingInstructionNotFinishedError = 47;
alias NSXMLParserNotationNotStartedError = 48;
alias NSXMLParserNotationNotFinishedError = 49;
alias NSXMLParserAttributeListNotStartedError = 50;
alias NSXMLParserAttributeListNotFinishedError = 51;
alias NSXMLParserMixedContentDeclNotStartedError = 52;
alias NSXMLParserMixedContentDeclNotFinishedError = 53;
alias NSXMLParserElementContentDeclNotStartedError = 54;
alias NSXMLParserElementContentDeclNotFinishedError = 55;
alias NSXMLParserXMLDeclNotStartedError = 56;
alias NSXMLParserXMLDeclNotFinishedError = 57;
alias NSXMLParserConditionalSectionNotStartedError = 58;
alias NSXMLParserConditionalSectionNotFinishedError = 59;
alias NSXMLParserExternalSubsetNotFinishedError = 60;
alias NSXMLParserDOCTYPEDeclNotFinishedError = 61;
alias NSXMLParserMisplacedCDATAEndStringError = 62;
alias NSXMLParserCDATANotFinishedError = 63;
alias NSXMLParserMisplacedXMLDeclarationError = 64;
alias NSXMLParserSpaceRequiredError = 65;
alias NSXMLParserSeparatorRequiredError = 66;
alias NSXMLParserNMTOKENRequiredError = 67;
alias NSXMLParserNAMERequiredError = 68;
alias NSXMLParserPCDATARequiredError = 69;
alias NSXMLParserURIRequiredError = 70;
alias NSXMLParserPublicIdentifierRequiredError = 71;
alias NSXMLParserLTRequiredError = 72;
alias NSXMLParserGTRequiredError = 73;
alias NSXMLParserLTSlashRequiredError = 74;
alias NSXMLParserEqualExpectedError = 75;
alias NSXMLParserTagNameMismatchError = 76;
alias NSXMLParserUnfinishedTagError = 77;
alias NSXMLParserStandaloneValueError = 78;
alias NSXMLParserInvalidEncodingNameError = 79;
alias NSXMLParserCommentContainsDoubleHyphenError = 80;
alias NSXMLParserInvalidEncodingError = 81;
alias NSXMLParserExternalStandaloneEntityError = 82;
alias NSXMLParserInvalidConditionalSectionError = 83;
alias NSXMLParserEntityValueRequiredError = 84;
alias NSXMLParserNotWellBalancedError = 85;
alias NSXMLParserExtraContentError = 86;
alias NSXMLParserInvalidCharacterInEntityError = 87;
alias NSXMLParserParsedEntityRefInInternalError = 88;
alias NSXMLParserEntityRefLoopError = 89;
alias NSXMLParserEntityBoundaryError = 90;
alias NSXMLParserInvalidURIError = 91;
alias NSXMLParserURIFragmentError = 92;
alias NSXMLParserNoDTDError = 94;
alias NSXMLParserDelegateAbortedParseError = 512;

alias NSXMLParserError = Int;
