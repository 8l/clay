// Automatically generated by clay-bindgen
// language: objective-c

import cocoa.objc.*;

import libc.*;
import cocoa.corefoundation.*;
import cocoa.applicationservices.*;
import cocoa.foundation.*;
import cocoa.quartzcore.*;

private alias OpaquePointer = RawPointer;
private alias UnknownType = Int;
private alias AUnionType = Int;


overload selector(#"AMSymbol") = NSString;
overload selector(#"CATransform3DValue") = CATransform3D;
overload selector(#"CGColorSpace") = CGColorSpaceRef;
overload selector(#"CGEvent") = CGEventRef;
overload selector(#"CGImage") = CGImageRef;
overload selector(#"CGImageForProposedRect:context:hints:") = CGImageRef, Pointer[NSRect], NSGraphicsContext, NSDictionary;
overload selector(#"CGLContextObj") = RawPointer;
overload selector(#"CGLPBufferObj") = RawPointer;
overload selector(#"CGLPixelFormatObj") = RawPointer;
overload selector(#"CIContext") = CIContext;
overload selector(#"CIImage") = CIImage;
overload selector(#"DTD") = NSXMLDTD;
overload selector(#"DTDKind") = CULong;
overload selector(#"DTDNodeWithXMLString:") = Id, NSString;
overload selector(#"EPSOperationWithView:insideRect:toData:") = NSPrintOperation, NSView, NSRect, NSMutableData;
overload selector(#"EPSOperationWithView:insideRect:toData:printInfo:") = NSPrintOperation, NSView, NSRect, NSMutableData, NSPrintInfo;
overload selector(#"EPSOperationWithView:insideRect:toPath:printInfo:") = NSPrintOperation, NSView, NSRect, NSString, NSPrintInfo;
overload selector(#"EPSRepresentation") = NSData;
overload selector(#"HTTPBody") = NSData;
overload selector(#"HTTPBodyStream") = NSInputStream;
overload selector(#"HTTPMethod") = NSString;
overload selector(#"HTTPShouldHandleCookies") = Bool;
overload selector(#"IBeamCursor") = NSCursor;
overload selector(#"ICCProfileData") = NSData;
overload selector(#"ISOCountryCodes") = NSArray;
overload selector(#"ISOCurrencyCodes") = NSArray;
overload selector(#"ISOLanguageCodes") = NSArray;
overload selector(#"MIMEType") = NSString;
overload selector(#"PDFOperationWithView:insideRect:toData:") = NSPrintOperation, NSView, NSRect, NSMutableData;
overload selector(#"PDFOperationWithView:insideRect:toData:printInfo:") = NSPrintOperation, NSView, NSRect, NSMutableData, NSPrintInfo;
overload selector(#"PDFOperationWithView:insideRect:toPath:printInfo:") = NSPrintOperation, NSView, NSRect, NSString, NSPrintInfo;
overload selector(#"PDFRepresentation") = NSData;
overload selector(#"PICTRepresentation") = NSData;
overload selector(#"PMPageFormat") = RawPointer;
overload selector(#"PMPrintSession") = RawPointer;
overload selector(#"PMPrintSettings") = RawPointer;
overload selector(#"PMSymbol") = NSString;
overload selector(#"QTMovie") = QTMovie;
overload selector(#"RTFDFileWrapperFromRange:documentAttributes:") = NSFileWrapper, NSRange, NSDictionary;
overload selector(#"RTFDFromRange:") = NSData, NSRange;
overload selector(#"RTFDFromRange:documentAttributes:") = NSData, NSRange, NSDictionary;
overload selector(#"RTFFromRange:") = NSData, NSRange;
overload selector(#"RTFFromRange:documentAttributes:") = NSData, NSRange, NSDictionary;
overload selector(#"TIFFRepresentation") = NSData;
overload selector(#"TIFFRepresentationOfImageRepsInArray:") = NSData, NSArray;
overload selector(#"TIFFRepresentationOfImageRepsInArray:usingCompression:factor:") = NSData, NSArray, CULong, Float;
overload selector(#"TIFFRepresentationUsingCompression:factor:") = NSData, CULong, Float;
overload selector(#"TXTRecordData") = NSData;
overload selector(#"URI") = NSString;
overload selector(#"URL") = NSURL;
overload selector(#"URL:resourceDataDidBecomeAvailable:") = Void, NSURL, NSData;
overload selector(#"URL:resourceDidFailLoadingWithReason:") = Void, NSURL, NSString;
overload selector(#"URLAtIndex:effectiveRange:") = NSURL, CULong, NSRangePointer;
overload selector(#"URLByAppendingPathComponent:") = NSURL, NSString;
overload selector(#"URLByAppendingPathExtension:") = NSURL, NSString;
overload selector(#"URLByDeletingLastPathComponent") = NSURL;
overload selector(#"URLByDeletingPathExtension") = NSURL;
overload selector(#"URLByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:") = Id, NSData, CULong, NSURL, Pointer[Bool], Pointer[NSError];
overload selector(#"URLByResolvingSymlinksInPath") = NSURL;
overload selector(#"URLByStandardizingPath") = NSURL;
overload selector(#"URLForApplicationToOpenURL:") = NSURL, NSURL;
overload selector(#"URLForApplicationWithBundleIdentifier:") = NSURL, NSString;
overload selector(#"URLForAuxiliaryExecutable:") = NSURL, NSString;
overload selector(#"URLForDirectory:inDomain:appropriateForURL:create:error:") = NSURL, CULong, CULong, NSURL, Bool, Pointer[NSError];
overload selector(#"URLForImageResource:") = NSURL, NSString;
overload selector(#"URLForKey:") = NSURL, NSString;
overload selector(#"URLForResource:withExtension:") = NSURL, NSString, NSString;
overload selector(#"URLForResource:withExtension:subdirectory:") = NSURL, NSString, NSString, NSString;
overload selector(#"URLForResource:withExtension:subdirectory:inBundleWithURL:") = NSURL, NSString, NSString, NSString, NSURL;
overload selector(#"URLForResource:withExtension:subdirectory:localization:") = NSURL, NSString, NSString, NSString, NSString;
overload selector(#"URLFromPasteboard:") = NSURL, NSPasteboard;
overload selector(#"URLHandle:resourceDataDidBecomeAvailable:") = Void, NSURLHandle, NSData;
overload selector(#"URLHandle:resourceDidFailLoadingWithReason:") = Void, NSURLHandle, NSString;
overload selector(#"URLHandleClassForURL:") = Id, NSURL;
overload selector(#"URLHandleResourceDidBeginLoading:") = Void, NSURLHandle;
overload selector(#"URLHandleResourceDidCancelLoading:") = Void, NSURLHandle;
overload selector(#"URLHandleResourceDidFinishLoading:") = Void, NSURLHandle;
overload selector(#"URLHandleUsingCache:") = NSURLHandle, Bool;
overload selector(#"URLProtocol:cachedResponseIsValid:") = Void, NSURLProtocol, NSCachedURLResponse;
overload selector(#"URLProtocol:didCancelAuthenticationChallenge:") = Void, NSURLProtocol, NSURLAuthenticationChallenge;
overload selector(#"URLProtocol:didFailWithError:") = Void, NSURLProtocol, NSError;
overload selector(#"URLProtocol:didLoadData:") = Void, NSURLProtocol, NSData;
overload selector(#"URLProtocol:didReceiveAuthenticationChallenge:") = Void, NSURLProtocol, NSURLAuthenticationChallenge;
overload selector(#"URLProtocol:didReceiveResponse:cacheStoragePolicy:") = Void, NSURLProtocol, NSURLResponse, CULong;
overload selector(#"URLProtocol:wasRedirectedToRequest:redirectResponse:") = Void, NSURLProtocol, NSURLRequest, NSURLResponse;
overload selector(#"URLProtocolDidFinishLoading:") = Void, NSURLProtocol;
overload selector(#"URLResourceDidCancelLoading:") = Void, NSURL;
overload selector(#"URLResourceDidFinishLoading:") = Void, NSURL;
overload selector(#"URLWithString:") = Id, NSString;
overload selector(#"URLWithString:relativeToURL:") = Id, NSString, NSURL;
overload selector(#"URLs") = NSArray;
overload selector(#"URLsForDirectory:inDomains:") = NSArray, CULong, CULong;
overload selector(#"URLsForResourcesWithExtension:subdirectory:") = NSArray, NSString, NSString;
overload selector(#"URLsForResourcesWithExtension:subdirectory:inBundleWithURL:") = NSArray, NSString, NSString, NSURL;
overload selector(#"URLsForResourcesWithExtension:subdirectory:localization:") = NSArray, NSString, NSString, NSString;
overload selector(#"URLsFromRunningOpenPanel") = NSArray;
overload selector(#"UTF8String") = Pointer[CChar];
overload selector(#"W") = Double;
overload selector(#"X") = Double;
overload selector(#"XMLData") = NSData;
overload selector(#"XMLDataWithOptions:") = NSData, CULong;
overload selector(#"XMLString") = NSString;
overload selector(#"XMLStringWithOptions:") = NSString, CULong;
overload selector(#"XPath") = NSString;
overload selector(#"Y") = Double;
overload selector(#"Z") = Double;
overload selector(#"abbreviation") = NSString;
overload selector(#"abbreviationDictionary") = NSDictionary;
overload selector(#"abbreviationForDate:") = NSString, NSDate;
overload selector(#"abortEditing") = Bool;
overload selector(#"abortModal") = Void;
overload selector(#"abortParsing") = Void;
overload selector(#"absolutePathForAppBundleWithIdentifier:") = NSString, NSString;
overload selector(#"absoluteString") = NSString;
overload selector(#"absoluteURL") = NSURL;
overload selector(#"absoluteX") = CLong;
overload selector(#"absoluteY") = CLong;
overload selector(#"absoluteZ") = CLong;
overload selector(#"acceptConnectionInBackgroundAndNotify") = Void;
overload selector(#"acceptConnectionInBackgroundAndNotifyForModes:") = Void, NSArray;
overload selector(#"acceptInputForMode:beforeDate:") = Void, NSString, NSDate;
overload selector(#"acceptableDragTypes") = NSArray;
overload selector(#"acceptsArrowKeys") = Bool;
overload selector(#"acceptsBinary") = Bool;
overload selector(#"acceptsFirstMouse:") = Bool, NSEvent;
overload selector(#"acceptsFirstResponder") = Bool;
overload selector(#"acceptsGlyphInfo") = Bool;
overload selector(#"acceptsMouseMovedEvents") = Bool;
overload selector(#"acceptsTouchEvents") = Bool;
overload selector(#"accessInstanceVariablesDirectly") = Bool;
overload selector(#"accessibilityActionDescription:") = NSString, NSString;
overload selector(#"accessibilityActionNames") = NSArray;
overload selector(#"accessibilityArrayAttributeCount:") = CULong, NSString;
overload selector(#"accessibilityArrayAttributeValues:index:maxCount:") = NSArray, NSString, CULong, CULong;
overload selector(#"accessibilityAttributeNames") = NSArray;
overload selector(#"accessibilityAttributeValue:") = Id, NSString;
overload selector(#"accessibilityAttributeValue:forParameter:") = Id, NSString, Id;
overload selector(#"accessibilityDescription") = NSString;
overload selector(#"accessibilityFocusedUIElement") = Id;
overload selector(#"accessibilityHitTest:") = Id, NSPoint;
overload selector(#"accessibilityIndexOfChild:") = CULong, Id;
overload selector(#"accessibilityIsAttributeSettable:") = Bool, NSString;
overload selector(#"accessibilityIsIgnored") = Bool;
overload selector(#"accessibilityParameterizedAttributeNames") = NSArray;
overload selector(#"accessibilityPerformAction:") = Void, NSString;
overload selector(#"accessibilitySetOverrideValue:forAttribute:") = Bool, Id, NSString;
overload selector(#"accessibilitySetValue:forAttribute:") = Void, Id, NSString;
overload selector(#"accessoryControllers") = NSArray;
overload selector(#"accessoryView") = NSView;
overload selector(#"acquireFunction") = CCodePointer[[RawPointer,CCodePointer[[RawPointer],[CULong]],CChar],[RawPointer]];
overload selector(#"action") = SelectorHandle;
overload selector(#"actionForControlCharacterAtIndex:") = CULong, CULong;
overload selector(#"actionForKey:") = Id, NSString;
overload selector(#"actionForLayer:forKey:") = Id, CALayer, NSString;
overload selector(#"actions") = NSDictionary;
overload selector(#"activate") = Void;
overload selector(#"activate:") = Void, Bool;
overload selector(#"activateContextHelpMode:") = Void, Id;
overload selector(#"activateFileViewerSelectingURLs:") = Void, NSArray;
overload selector(#"activateIgnoringOtherApps:") = Void, Bool;
overload selector(#"activateWithOptions:") = Bool, CULong;
overload selector(#"activationPolicy") = CLong;
overload selector(#"activeApplication") = NSDictionary;
overload selector(#"activeConversationChanged:toNewConversation:") = Void, Id, CLong;
overload selector(#"activeConversationWillChange:fromOldConversation:") = Void, Id, CLong;
overload selector(#"activeProcessorCount") = CULong;
overload selector(#"add:") = Void, Id;
overload selector(#"addAccessoryController:") = Void, NSViewController;
overload selector(#"addAnimation:forKey:") = Void, CAAnimation, NSString;
overload selector(#"addAttribute:") = Void, NSXMLNode;
overload selector(#"addAttribute:value:range:") = Void, NSString, Id, NSRange;
overload selector(#"addAttributes:range:") = Void, NSDictionary, NSRange;
overload selector(#"addButtonWithTitle:") = NSButton, NSString;
overload selector(#"addCharactersInRange:") = Void, NSRange;
overload selector(#"addCharactersInString:") = Void, NSString;
overload selector(#"addChild:") = Void, NSXMLNode;
overload selector(#"addChildWindow:ordered:") = Void, NSWindow, CLong;
overload selector(#"addClient:") = Void, Id;
overload selector(#"addClip") = Void;
overload selector(#"addCollection:options:") = Bool, NSString, CLong;
overload selector(#"addColumn") = Void;
overload selector(#"addColumnWithCells:") = Void, NSArray;
overload selector(#"addConnection:toRunLoop:forMode:") = Void, NSConnection, NSRunLoop, NSString;
overload selector(#"addCursorRect:cursor:") = Void, NSRect, NSCursor;
overload selector(#"addDependency:") = Void, NSOperation;
overload selector(#"addDocument:") = Void, NSDocument;
overload selector(#"addEntriesFromDictionary:") = Void, NSDictionary;
overload selector(#"addEntry:") = NSFormCell, NSString;
overload selector(#"addExecutionBlock:") = Void, UnknownType;
overload selector(#"addFileWithPath:") = NSString, NSString;
overload selector(#"addFileWrapper:") = NSString, NSFileWrapper;
overload selector(#"addFontDescriptors:toCollection:") = Void, NSArray, NSString;
overload selector(#"addFontTrait:") = Void, Id;
overload selector(#"addGlobalMonitorForEventsMatchingMask:handler:") = Id, UInt64, UnknownType;
overload selector(#"addIndex:") = Void, CULong;
overload selector(#"addIndexes:") = Void, NSIndexSet;
overload selector(#"addIndexesInRange:") = Void, NSRange;
overload selector(#"addItem:") = Void, NSMenuItem;
overload selector(#"addItemWithObjectValue:") = Void, Id;
overload selector(#"addItemWithTitle:") = Void, NSString;
overload selector(#"addItemWithTitle:action:keyEquivalent:") = NSMenuItem, NSString, SelectorHandle, NSString;
overload selector(#"addItemsWithObjectValues:") = Void, NSArray;
overload selector(#"addItemsWithTitles:") = Void, NSArray;
overload selector(#"addLayoutManager:") = Void, NSLayoutManager;
overload selector(#"addLocalMonitorForEventsMatchingMask:handler:") = Id, UInt64, UnknownType;
overload selector(#"addMarker:") = Void, NSRulerMarker;
overload selector(#"addNamespace:") = Void, NSXMLNode;
overload selector(#"addObject:") = Void, Id;
overload selector(#"addObjects:") = Void, NSArray;
overload selector(#"addObjectsFromArray:") = Void, NSArray;
overload selector(#"addObserver:forKeyPath:options:context:") = Void, NSObject, NSString, CULong, RawPointer;
overload selector(#"addObserver:selector:name:object:") = Void, Id, SelectorHandle, NSString, Id;
overload selector(#"addObserver:selector:name:object:suspensionBehavior:") = Void, Id, SelectorHandle, NSString, NSString, CULong;
overload selector(#"addObserver:toObjectsAtIndexes:forKeyPath:options:context:") = Void, NSObject, NSIndexSet, NSString, CULong, RawPointer;
overload selector(#"addObserverForName:object:queue:usingBlock:") = Id, NSString, Id, NSOperationQueue, UnknownType;
overload selector(#"addOperation:") = Void, NSOperation;
overload selector(#"addOperationWithBlock:") = Void, UnknownType;
overload selector(#"addOperations:waitUntilFinished:") = Void, NSArray, Bool;
overload selector(#"addPointer:") = Void, RawPointer;
overload selector(#"addPort:forMode:") = Void, NSPort, NSString;
overload selector(#"addProgressMark:") = Void, Float;
overload selector(#"addRegularFileWithContents:preferredFilename:") = NSString, NSData, NSString;
overload selector(#"addRepresentation:") = Void, NSImageRep;
overload selector(#"addRepresentations:") = Void, NSArray;
overload selector(#"addRequestMode:") = Void, NSString;
overload selector(#"addRow") = Void;
overload selector(#"addRow:") = Void, Id;
overload selector(#"addRowWithCells:") = Void, NSArray;
overload selector(#"addRunLoop:") = Void, NSRunLoop;
overload selector(#"addSelectedObjects:") = Bool, NSArray;
overload selector(#"addSelectionIndexPaths:") = Bool, NSArray;
overload selector(#"addSelectionIndexes:") = Bool, NSIndexSet;
overload selector(#"addSpeechDictionary:") = Void, NSDictionary;
overload selector(#"addSublayer:") = Void, CALayer;
overload selector(#"addSubview:") = Void, NSView;
overload selector(#"addSubview:positioned:relativeTo:") = Void, NSView, CLong, NSView;
overload selector(#"addSuiteNamed:") = Void, NSString;
overload selector(#"addSymbolicLinkWithDestination:preferredFilename:") = NSString, NSString, NSString;
overload selector(#"addTabStop:") = Void, NSTextTab;
overload selector(#"addTabViewItem:") = Void, NSTabViewItem;
overload selector(#"addTableColumn:") = Void, NSTableColumn;
overload selector(#"addTemporaryAttribute:value:forCharacterRange:") = Void, NSString, Id, NSRange;
overload selector(#"addTemporaryAttributes:forCharacterRange:") = Void, NSDictionary, NSRange;
overload selector(#"addTextContainer:") = Void, NSTextContainer;
overload selector(#"addTimeInterval:") = Id, Double;
overload selector(#"addTimer:forMode:") = Void, NSTimer, NSString;
overload selector(#"addToolTipRect:owner:userData:") = CLong, NSRect, Id, RawPointer;
overload selector(#"addTrackingArea:") = Void, NSTrackingArea;
overload selector(#"addTrackingRect:owner:userData:assumeInside:") = CLong, NSRect, Id, RawPointer, Bool;
overload selector(#"addTypes:owner:") = CLong, NSArray, Id;
overload selector(#"addValue:forHTTPHeaderField:") = Void, NSString, NSString;
overload selector(#"addWindowController:") = Void, NSWindowController;
overload selector(#"addWindowsItem:title:filename:") = Void, NSWindow, NSString, Bool;
overload selector(#"address") = Id;
overload selector(#"addressCheckingResultWithRange:components:") = NSTextCheckingResult, NSRange, NSDictionary;
overload selector(#"addressComponents") = NSDictionary;
overload selector(#"addresses") = NSArray;
overload selector(#"adjustPageHeightNew:top:bottom:limit:") = Void, Pointer[Double], Double, Double, Double;
overload selector(#"adjustPageWidthNew:left:right:limit:") = Void, Pointer[Double], Double, Double, Double;
overload selector(#"adjustScroll:") = NSRect, NSRect;
overload selector(#"adjustSubviews") = Void;
overload selector(#"adobeRGB1998ColorSpace") = NSColorSpace;
overload selector(#"advancementForGlyph:") = NSSize, UInt;
overload selector(#"aeDesc") = Pointer[AEDesc];
overload selector(#"aeteResource:") = NSData, NSString;
overload selector(#"affineTransform") = CGAffineTransform;
overload selector(#"alertShowHelp:") = Bool, NSAlert;
overload selector(#"alertStyle") = CULong;
overload selector(#"alertWithError:") = NSAlert, NSError;
overload varargSelector(#"alertWithMessageText:defaultButton:alternateButton:otherButton:informativeTextWithFormat:") = NSAlert, NSString, NSString, NSString, NSString, NSString;
overload selector(#"alignCenter:") = Void, Id;
overload selector(#"alignJustified:") = Void, Id;
overload selector(#"alignLeft:") = Void, Id;
overload selector(#"alignRight:") = Void, Id;
overload selector(#"alignment") = CULong;
overload selector(#"alignmentRect") = NSRect;
overload selector(#"allBundles") = NSArray;
overload selector(#"allConnections") = NSArray;
overload selector(#"allCredentials") = NSDictionary;
overload selector(#"allFrameworks") = NSArray;
overload selector(#"allHTTPHeaderFields") = NSDictionary;
overload selector(#"allHeaderFields") = NSDictionary;
overload selector(#"allKeys") = NSArray;
overload selector(#"allKeysForObject:") = NSArray, Id;
overload selector(#"allLanguages") = NSArray;
overload selector(#"allObjects") = NSArray;
overload selector(#"allScripts") = NSArray;
overload selector(#"allValues") = NSArray;
overload selector(#"alloc") = Id;
overload selector(#"allocWithZone:") = Id, Pointer[NSZone];
overload selector(#"allocateGState") = Void;
overload selector(#"allowedFileTypes") = NSArray;
overload selector(#"allowedInputSourceLocales") = NSArray;
overload selector(#"allowedTypes") = NSArray;
overload selector(#"allowsBranchSelection") = Bool;
overload selector(#"allowsColumnReordering") = Bool;
overload selector(#"allowsColumnResizing") = Bool;
overload selector(#"allowsColumnSelection") = Bool;
overload selector(#"allowsConcurrentViewDrawing") = Bool;
overload selector(#"allowsContextMenuPlugIns") = Bool;
overload selector(#"allowsCutCopyPaste") = Bool;
overload selector(#"allowsDocumentBackgroundColorChange") = Bool;
overload selector(#"allowsDuplicatesInToolbar") = Bool;
overload selector(#"allowsEditingTextAttributes") = Bool;
overload selector(#"allowsEmptySelection") = Bool;
overload selector(#"allowsFloats") = Bool;
overload selector(#"allowsImageEditing") = Bool;
overload selector(#"allowsKeyedCoding") = Bool;
overload selector(#"allowsMixedState") = Bool;
overload selector(#"allowsMultipleSelection") = Bool;
overload selector(#"allowsNaturalLanguage") = Bool;
overload selector(#"allowsNonContiguousLayout") = Bool;
overload selector(#"allowsOtherFileTypes") = Bool;
overload selector(#"allowsReverseTransformation") = Bool;
overload selector(#"allowsTickMarkValuesOnly") = Bool;
overload selector(#"allowsToolTipsWhenApplicationIsInactive") = Bool;
overload selector(#"allowsTruncatedLabels") = Bool;
overload selector(#"allowsTypeSelect") = Bool;
overload selector(#"allowsUndo") = Bool;
overload selector(#"allowsUserCustomization") = Bool;
overload selector(#"alpha") = Double;
overload selector(#"alphaComponent") = Double;
overload selector(#"alphaControlAddedOrRemoved:") = Void, Id;
overload selector(#"alphaValue") = Double;
overload selector(#"alphanumericCharacterSet") = Id;
overload selector(#"altIncrementValue") = Double;
overload selector(#"alternateImage") = NSImage;
overload selector(#"alternateMnemonic") = NSString;
overload selector(#"alternateMnemonicLocation") = CULong;
overload selector(#"alternateSelectedControlColor") = NSColor;
overload selector(#"alternateSelectedControlTextColor") = NSColor;
overload selector(#"alternateTitle") = NSString;
overload selector(#"altersStateOfSelectedItem") = Bool;
overload selector(#"alwaysShowsDecimalSeparator") = Bool;
overload selector(#"alwaysUsesMultipleValuesMarker") = Bool;
overload selector(#"ancestorSharedWithView:") = NSView, NSView;
overload selector(#"anchorPoint") = CGPoint;
overload selector(#"anchorPointZ") = Double;
overload selector(#"andPredicateWithSubpredicates:") = NSPredicate, NSArray;
overload selector(#"animate:") = Void, Id;
overload selector(#"animates") = Bool;
overload selector(#"animation:didReachProgressMark:") = Void, NSAnimation, Float;
overload selector(#"animation:valueForProgress:") = Float, NSAnimation, Float;
overload selector(#"animationBlockingMode") = CULong;
overload selector(#"animationCurve") = CULong;
overload selector(#"animationDelay") = Double;
overload selector(#"animationDidEnd:") = Void, NSAnimation;
overload selector(#"animationDidStop:") = Void, NSAnimation;
overload selector(#"animationForKey:") = Id, NSString;
overload selector(#"animationKeys") = NSArray;
overload selector(#"animationResizeTime:") = Double, NSRect;
overload selector(#"animationShouldStart:") = Bool, NSAnimation;
overload selector(#"animations") = NSDictionary;
overload selector(#"animator") = Id;
overload selector(#"anyObject") = Id;
overload selector(#"appendAttributedString:") = Void, NSAttributedString;
overload selector(#"appendBezierPath:") = Void, NSBezierPath;
overload selector(#"appendBezierPathWithArcFromPoint:toPoint:radius:") = Void, NSPoint, NSPoint, Double;
overload selector(#"appendBezierPathWithArcWithCenter:radius:startAngle:endAngle:") = Void, NSPoint, Double, Double, Double;
overload selector(#"appendBezierPathWithArcWithCenter:radius:startAngle:endAngle:clockwise:") = Void, NSPoint, Double, Double, Double, Bool;
overload selector(#"appendBezierPathWithGlyph:inFont:") = Void, UInt, NSFont;
overload selector(#"appendBezierPathWithGlyphs:count:inFont:") = Void, Pointer[UInt], CLong, NSFont;
overload selector(#"appendBezierPathWithOvalInRect:") = Void, NSRect;
overload selector(#"appendBezierPathWithPackedGlyphs:") = Void, Pointer[CChar];
overload selector(#"appendBezierPathWithPoints:count:") = Void, NSPointArray, CLong;
overload selector(#"appendBezierPathWithRect:") = Void, NSRect;
overload selector(#"appendBezierPathWithRoundedRect:xRadius:yRadius:") = Void, NSRect, Double, Double;
overload selector(#"appendBytes:length:") = Void, RawPointer, CULong;
overload selector(#"appendData:") = Void, NSData;
overload varargSelector(#"appendFormat:") = Void, NSString;
overload selector(#"appendString:") = Void, NSString;
overload selector(#"appendTransform:") = Void, NSAffineTransform;
overload selector(#"appleEvent") = NSAppleEventDescriptor;
overload selector(#"appleEventClassCode") = UInt;
overload selector(#"appleEventCode") = UInt;
overload selector(#"appleEventCodeForArgumentWithName:") = UInt, NSString;
overload selector(#"appleEventCodeForKey:") = UInt, NSString;
overload selector(#"appleEventCodeForReturnType") = UInt;
overload selector(#"appleEventCodeForSuite:") = UInt, NSString;
overload selector(#"appleEventForSuspensionID:") = NSAppleEventDescriptor, NSAppleEventManagerSuspensionID;
overload selector(#"appleEventWithEventClass:eventID:targetDescriptor:returnID:transactionID:") = NSAppleEventDescriptor, UInt, UInt, NSAppleEventDescriptor, Short, Int;
overload selector(#"application:delegateHandlesKey:") = Bool, NSApplication, NSString;
overload selector(#"application:openFile:") = Bool, NSApplication, NSString;
overload selector(#"application:openFileWithoutUI:") = Bool, Id, NSString;
overload selector(#"application:openFiles:") = Void, NSApplication, NSArray;
overload selector(#"application:openTempFile:") = Bool, NSApplication, NSString;
overload selector(#"application:printFile:") = Bool, NSApplication, NSString;
overload selector(#"application:printFiles:") = Void, NSApplication, NSArray;
overload selector(#"application:printFiles:withSettings:showPrintPanels:") = CULong, NSApplication, NSArray, NSDictionary, Bool;
overload selector(#"application:willPresentError:") = NSError, NSApplication, NSError;
overload selector(#"applicationDidBecomeActive:") = Void, NSNotification;
overload selector(#"applicationDidChangeScreenParameters:") = Void, NSNotification;
overload selector(#"applicationDidFinishLaunching:") = Void, NSNotification;
overload selector(#"applicationDidHide:") = Void, NSNotification;
overload selector(#"applicationDidResignActive:") = Void, NSNotification;
overload selector(#"applicationDidUnhide:") = Void, NSNotification;
overload selector(#"applicationDidUpdate:") = Void, NSNotification;
overload selector(#"applicationDockMenu:") = NSMenu, NSApplication;
overload selector(#"applicationIconImage") = NSImage;
overload selector(#"applicationOpenUntitledFile:") = Bool, NSApplication;
overload selector(#"applicationShouldHandleReopen:hasVisibleWindows:") = Bool, NSApplication, Bool;
overload selector(#"applicationShouldOpenUntitledFile:") = Bool, NSApplication;
overload selector(#"applicationShouldTerminate:") = CULong, NSApplication;
overload selector(#"applicationShouldTerminateAfterLastWindowClosed:") = Bool, NSApplication;
overload selector(#"applicationWillBecomeActive:") = Void, NSNotification;
overload selector(#"applicationWillFinishLaunching:") = Void, NSNotification;
overload selector(#"applicationWillHide:") = Void, NSNotification;
overload selector(#"applicationWillResignActive:") = Void, NSNotification;
overload selector(#"applicationWillTerminate:") = Void, NSNotification;
overload selector(#"applicationWillUnhide:") = Void, NSNotification;
overload selector(#"applicationWillUpdate:") = Void, NSNotification;
overload selector(#"appliesImmediately") = Bool;
overload selector(#"applyFontTraits:range:") = Void, CULong, NSRange;
overload selector(#"archiveRootObject:toFile:") = Bool, Id, NSString;
overload selector(#"archivedDataWithRootObject:") = NSData, Id;
overload selector(#"archiver:didEncodeObject:") = Void, NSKeyedArchiver, Id;
overload selector(#"archiver:willEncodeObject:") = Id, NSKeyedArchiver, Id;
overload selector(#"archiver:willReplaceObject:withObject:") = Void, NSKeyedArchiver, Id, Id;
overload selector(#"archiverData") = NSMutableData;
overload selector(#"archiverDidFinish:") = Void, NSKeyedArchiver;
overload selector(#"archiverWillFinish:") = Void, NSKeyedArchiver;
overload selector(#"areCursorRectsEnabled") = Bool;
overload selector(#"argumentNames") = NSArray;
overload selector(#"arguments") = Id;
overload selector(#"argumentsRetained") = Bool;
overload selector(#"arrangeInFront:") = Void, Id;
overload selector(#"arrangeObjects:") = NSArray, NSArray;
overload selector(#"arrangedObjects") = Id;
overload selector(#"array") = Id;
overload selector(#"arrayByAddingObject:") = NSArray, Id;
overload selector(#"arrayByAddingObjectsFromArray:") = NSArray, NSArray;
overload selector(#"arrayForKey:") = NSArray, NSString;
overload selector(#"arrayWithArray:") = Id, NSArray;
overload selector(#"arrayWithCapacity:") = Id, CULong;
overload selector(#"arrayWithContentsOfFile:") = Id, NSString;
overload selector(#"arrayWithContentsOfURL:") = Id, NSURL;
overload selector(#"arrayWithObject:") = Id, Id;
overload varargSelector(#"arrayWithObjects:") = Id, Id;
overload selector(#"arrayWithObjects:count:") = Id, Pointer[Id], CULong;
overload selector(#"arrowCursor") = NSCursor;
overload selector(#"arrowPosition") = CULong;
overload selector(#"arrowsPosition") = CULong;
overload selector(#"ascender") = Double;
overload selector(#"ascending") = Bool;
overload selector(#"aspectRatio") = NSSize;
overload selector(#"attachColorList:") = Void, NSColorList;
overload selector(#"attachPopUpWithFrame:inView:") = Void, NSRect, NSView;
overload selector(#"attachedMenu") = NSMenu;
overload selector(#"attachedSheet") = NSWindow;
overload selector(#"attachment") = NSTextAttachment;
overload selector(#"attachmentCell") = Id;
overload selector(#"attachmentSizeForGlyphAtIndex:") = NSSize, CULong;
overload selector(#"attemptRecoveryFromError:optionIndex:") = Bool, NSError, CULong;
overload selector(#"attemptRecoveryFromError:optionIndex:delegate:didRecoverSelector:contextInfo:") = Void, NSError, CULong, Id, SelectorHandle, RawPointer;
overload selector(#"attribute") = NSString;
overload selector(#"attribute:atIndex:effectiveRange:") = Id, NSString, CULong, NSRangePointer;
overload selector(#"attribute:atIndex:longestEffectiveRange:inRange:") = Id, NSString, CULong, NSRangePointer, NSRange;
overload selector(#"attributeDeclarationForName:elementName:") = NSXMLDTDNode, NSString, NSString;
overload selector(#"attributeDescriptorForKeyword:") = NSAppleEventDescriptor, UInt;
overload selector(#"attributeForLocalName:URI:") = NSXMLNode, NSString, NSString;
overload selector(#"attributeForName:") = NSXMLNode, NSString;
overload selector(#"attributeKeys") = NSArray;
overload selector(#"attributeRuns") = NSArray;
overload selector(#"attributeType") = CULong;
overload selector(#"attributeValueClassName") = NSString;
overload selector(#"attributeWithName:URI:stringValue:") = Id, NSString, NSString, NSString;
overload selector(#"attributeWithName:stringValue:") = Id, NSString, NSString;
overload selector(#"attributedAlternateTitle") = NSAttributedString;
overload selector(#"attributedString") = NSAttributedString;
overload selector(#"attributedStringForNil") = NSAttributedString;
overload selector(#"attributedStringForNotANumber") = NSAttributedString;
overload selector(#"attributedStringForObjectValue:withDefaultAttributes:") = NSAttributedString, Id, NSDictionary;
overload selector(#"attributedStringForZero") = NSAttributedString;
overload selector(#"attributedStringValue") = NSAttributedString;
overload selector(#"attributedStringWithAttachment:") = NSAttributedString, NSTextAttachment;
overload selector(#"attributedSubstringForProposedRange:actualRange:") = NSAttributedString, NSRange, NSRangePointer;
overload selector(#"attributedSubstringFromRange:") = NSAttributedString, NSRange;
overload selector(#"attributedTitle") = NSAttributedString;
overload selector(#"attributes") = Id;
overload selector(#"attributesAtIndex:effectiveRange:") = NSDictionary, CULong, NSRangePointer;
overload selector(#"attributesAtIndex:longestEffectiveRange:inRange:") = NSDictionary, CULong, NSRangePointer, NSRange;
overload selector(#"attributesForExtraLineFragment") = NSDictionary;
overload selector(#"attributesForVoice:") = NSDictionary, NSString;
overload selector(#"attributesOfFileSystemForPath:error:") = NSDictionary, NSString, Pointer[NSError];
overload selector(#"attributesOfItemAtPath:error:") = NSDictionary, NSString, Pointer[NSError];
overload selector(#"authenticateComponents:withData:") = Bool, NSArray, NSData;
overload selector(#"authenticationDataForComponents:") = NSData, NSArray;
overload selector(#"authenticationMethod") = NSString;
overload selector(#"autoContentAccessingProxy") = Id;
overload selector(#"autoenablesItems") = Bool;
overload selector(#"autohidesScroller") = Bool;
overload selector(#"autohidesScrollers") = Bool;
overload selector(#"automaticRearrangementKeyPaths") = NSArray;
overload selector(#"automaticallyIdentifiesLanguages") = Bool;
overload selector(#"automaticallyNotifiesObserversForKey:") = Bool, NSString;
overload selector(#"automaticallyPreparesContent") = Bool;
overload selector(#"automaticallyRearrangesObjects") = Bool;
overload selector(#"autorecalculatesContentBorderThicknessForEdge:") = Bool, CULong;
overload selector(#"autorecalculatesKeyViewLoop") = Bool;
overload selector(#"autorelease") = Id;
overload selector(#"autorepeat") = Bool;
overload selector(#"autoresizesAllColumnsToFit") = Bool;
overload selector(#"autoresizesOutlineColumn") = Bool;
overload selector(#"autoresizesSubviews") = Bool;
overload selector(#"autoresizingMask") = CULong;
overload selector(#"autoreverses") = Bool;
overload selector(#"autosaveDocumentWithDelegate:didAutosaveSelector:contextInfo:") = Void, Id, SelectorHandle, RawPointer;
overload selector(#"autosaveExpandedItems") = Bool;
overload selector(#"autosaveName") = NSString;
overload selector(#"autosaveTableColumns") = Bool;
overload selector(#"autosavedContentsFileURL") = NSURL;
overload selector(#"autosavesConfiguration") = Bool;
overload selector(#"autosavingDelay") = Double;
overload selector(#"autosavingFileType") = NSString;
overload selector(#"autoscroll:") = Bool, NSEvent;
overload selector(#"autosizesCells") = Bool;
overload selector(#"autoupdatingCurrentCalendar") = Id;
overload selector(#"autoupdatingCurrentLocale") = Id;
overload selector(#"autovalidates") = Bool;
overload selector(#"availableColorLists") = NSArray;
overload selector(#"availableColorSpacesWithModel:") = NSArray, CLong;
overload selector(#"availableData") = NSData;
overload selector(#"availableFontFamilies") = NSArray;
overload selector(#"availableFontNamesMatchingFontDescriptor:") = NSArray, NSFontDescriptor;
overload selector(#"availableFontNamesWithTraits:") = NSArray, CULong;
overload selector(#"availableFonts") = NSArray;
overload selector(#"availableLanguages") = NSArray;
overload selector(#"availableLocaleIdentifiers") = NSArray;
overload selector(#"availableMembersOfFontFamily:") = NSArray, NSString;
overload selector(#"availableResourceData") = NSData;
overload selector(#"availableStringEncodings") = Pointer[CULong];
overload selector(#"availableTypeFromArray:") = NSString, NSArray;
overload selector(#"availableVoices") = NSArray;
overload selector(#"avoidsEmptySelection") = Bool;
overload selector(#"awakeAfterUsingCoder:") = Id, NSCoder;
overload selector(#"awakeFromNib") = Void;
overload selector(#"backgroundColor") = NSColor;
overload selector(#"backgroundColors") = NSArray;
overload selector(#"backgroundFilters") = NSArray;
overload selector(#"backgroundLayoutEnabled") = Bool;
overload selector(#"backgroundLoadDidFailWithReason:") = Void, NSString;
overload selector(#"backgroundStyle") = CLong;
overload selector(#"backingLocation") = CULong;
overload selector(#"backingType") = CULong;
overload selector(#"badgeLabel") = NSString;
overload selector(#"baseSpecifier") = NSScriptObjectSpecifier;
overload selector(#"baseURL") = NSURL;
overload selector(#"baseWritingDirection") = CLong;
overload selector(#"baselineDeltaForCharacterAtIndex:") = Double, CULong;
overload selector(#"baselineLocation") = Double;
overload selector(#"baselineOffsetInLayoutManager:glyphIndex:") = Double, NSLayoutManager, CULong;
overload selector(#"becomeFirstResponder") = Bool;
overload selector(#"becomeKeyWindow") = Void;
overload selector(#"becomeMainWindow") = Void;
overload selector(#"becomesKeyOnlyIfNeeded") = Bool;
overload selector(#"beginContentAccess") = Bool;
overload selector(#"beginDocument") = Void;
overload selector(#"beginEditing") = Void;
overload selector(#"beginForDirectory:file:types:modelessDelegate:didEndSelector:contextInfo:") = Void, NSString, NSString, NSArray, Id, SelectorHandle, RawPointer;
overload selector(#"beginGestureWithEvent:") = Void, NSEvent;
overload selector(#"beginGrouping") = Void;
overload selector(#"beginLineWithGlyphAtIndex:") = Void, CULong;
overload selector(#"beginLoadInBackground") = Void;
overload selector(#"beginModalSessionForWindow:") = NSModalSession, NSWindow;
overload selector(#"beginModalSessionForWindow:relativeToWindow:") = NSModalSession, NSWindow, NSWindow;
overload selector(#"beginPageInRect:atPlacement:") = Void, NSRect, NSPoint;
overload selector(#"beginParagraph") = Void;
overload selector(#"beginSheet:modalForWindow:modalDelegate:didEndSelector:contextInfo:") = Void, NSWindow, NSWindow, Id, SelectorHandle, RawPointer;
overload selector(#"beginSheetForDirectory:file:modalForWindow:modalDelegate:didEndSelector:contextInfo:") = Void, NSString, NSString, NSWindow, Id, SelectorHandle, RawPointer;
overload selector(#"beginSheetForDirectory:file:types:modalForWindow:modalDelegate:didEndSelector:contextInfo:") = Void, NSString, NSString, NSArray, NSWindow, Id, SelectorHandle, RawPointer;
overload selector(#"beginSheetModalForWindow:completionHandler:") = Void, NSWindow, UnknownType;
overload selector(#"beginSheetModalForWindow:modalDelegate:didEndSelector:contextInfo:") = Void, NSWindow, Id, SelectorHandle, RawPointer;
overload selector(#"beginSheetWithPrintInfo:modalForWindow:delegate:didEndSelector:contextInfo:") = Void, NSPrintInfo, NSWindow, Id, SelectorHandle, RawPointer;
overload selector(#"beginTime") = Double;
overload selector(#"beginUndoGrouping") = Void;
overload selector(#"beginWithCompletionHandler:") = Void, UnknownType;
overload selector(#"bestRepresentationForDevice:") = NSImageRep, NSDictionary;
overload selector(#"bestRepresentationForRect:context:hints:") = NSImageRep, NSRect, NSGraphicsContext, NSDictionary;
overload selector(#"bezelStyle") = CULong;
overload selector(#"bezierPath") = NSBezierPath;
overload selector(#"bezierPathByFlatteningPath") = NSBezierPath;
overload selector(#"bezierPathByReversingPath") = NSBezierPath;
overload selector(#"bezierPathWithOvalInRect:") = NSBezierPath, NSRect;
overload selector(#"bezierPathWithRect:") = NSBezierPath, NSRect;
overload selector(#"bezierPathWithRoundedRect:xRadius:yRadius:") = NSBezierPath, NSRect, Double, Double;
overload selector(#"bidiProcessingEnabled") = Bool;
overload selector(#"bind:toObject:withKeyPath:options:") = Void, NSString, Id, NSString, NSDictionary;
overload selector(#"bitmapData") = Pointer[CUChar];
overload selector(#"bitmapFormat") = CULong;
overload selector(#"bitmapImageRepByConvertingToColorSpace:renderingIntent:") = NSBitmapImageRep, NSColorSpace, CLong;
overload selector(#"bitmapImageRepByRetaggingWithColorSpace:") = NSBitmapImageRep, NSColorSpace;
overload selector(#"bitmapImageRepForCachingDisplayInRect:") = NSBitmapImageRep, NSRect;
overload selector(#"bitmapRepresentation") = NSData;
overload selector(#"bitsPerPixel") = CLong;
overload selector(#"bitsPerSample") = CLong;
overload selector(#"blackColor") = NSColor;
overload selector(#"blackComponent") = Double;
overload selector(#"blendedColorWithFraction:ofColor:") = NSColor, Double, NSColor;
overload selector(#"blockOperationWithBlock:") = Id, UnknownType;
overload selector(#"blocksOtherRecognizers") = Bool;
overload selector(#"blue") = Double;
overload selector(#"blueColor") = NSColor;
overload selector(#"blueComponent") = Double;
overload selector(#"boldSystemFontOfSize:") = NSFont, Double;
overload selector(#"bookmarkDataWithContentsOfURL:error:") = NSData, NSURL, Pointer[NSError];
overload selector(#"bookmarkDataWithOptions:includingResourceValuesForKeys:relativeToURL:error:") = NSData, CULong, NSArray, NSURL, Pointer[NSError];
overload selector(#"boolForKey:") = Bool, NSString;
overload selector(#"boolValue") = Bool;
overload selector(#"booleanForKey:inTable:") = Bool, NSString, NSString;
overload selector(#"booleanValue") = CUChar;
overload selector(#"borderColor") = NSColor;
overload selector(#"borderColorForEdge:") = NSColor, CULong;
overload selector(#"borderRect") = NSRect;
overload selector(#"borderType") = CULong;
overload selector(#"borderWidth") = Double;
overload selector(#"bottomMargin") = Double;
overload selector(#"boundingBox") = NSRect;
overload selector(#"boundingBoxForControlGlyphAtIndex:forTextContainer:proposedLineFragment:glyphPosition:characterIndex:") = NSRect, CULong, NSTextContainer, NSRect, NSPoint, CULong;
overload selector(#"boundingRectForFont") = NSRect;
overload selector(#"boundingRectForGlyph:") = NSRect, UInt;
overload selector(#"boundingRectForGlyphRange:inTextContainer:") = NSRect, NSRange, NSTextContainer;
overload selector(#"boundingRectWithSize:options:") = NSRect, NSSize, CLong;
overload selector(#"boundingRectWithSize:options:attributes:") = NSRect, NSSize, CLong, NSDictionary;
overload selector(#"bounds") = NSRect;
overload selector(#"boundsRectForBlock:contentRect:inRect:textContainer:characterRange:") = NSRect, NSTextTableBlock, NSRect, NSRect, NSTextContainer, NSRange;
overload selector(#"boundsRectForContentRect:inRect:textContainer:characterRange:") = NSRect, NSRect, NSRect, NSTextContainer, NSRange;
overload selector(#"boundsRectForTextBlock:atIndex:effectiveRange:") = NSRect, NSTextBlock, CULong, NSRangePointer;
overload selector(#"boundsRectForTextBlock:glyphRange:") = NSRect, NSTextBlock, NSRange;
overload selector(#"boundsRotation") = Double;
overload selector(#"boxType") = CULong;
overload selector(#"branchImage") = NSImage;
overload selector(#"breakLock") = Void;
overload selector(#"breakUndoCoalescing") = Void;
overload selector(#"brightnessComponent") = Double;
overload selector(#"broadcast") = Void;
overload selector(#"brownColor") = NSColor;
overload selector(#"browser:acceptDrop:atRow:column:dropOperation:") = Bool, NSBrowser, Id, CLong, CLong, CULong;
overload selector(#"browser:canDragRowsWithIndexes:inColumn:withEvent:") = Bool, NSBrowser, NSIndexSet, CLong, NSEvent;
overload selector(#"browser:child:ofItem:") = Id, NSBrowser, CLong, Id;
overload selector(#"browser:createRowsForColumn:inMatrix:") = Void, NSBrowser, CLong, NSMatrix;
overload selector(#"browser:didChangeLastColumn:toColumn:") = Void, NSBrowser, CLong, CLong;
overload selector(#"browser:draggingImageForRowsWithIndexes:inColumn:withEvent:offset:") = NSImage, NSBrowser, NSIndexSet, CLong, NSEvent, NSPointPointer;
overload selector(#"browser:headerViewControllerForItem:") = NSViewController, NSBrowser, Id;
overload selector(#"browser:heightOfRow:inColumn:") = Double, NSBrowser, CLong, CLong;
overload selector(#"browser:isColumnValid:") = Bool, NSBrowser, CLong;
overload selector(#"browser:isLeafItem:") = Bool, NSBrowser, Id;
overload selector(#"browser:namesOfPromisedFilesDroppedAtDestination:forDraggedRowsWithIndexes:inColumn:") = NSArray, NSBrowser, NSURL, NSIndexSet, CLong;
overload selector(#"browser:nextTypeSelectMatchFromRow:toRow:inColumn:forString:") = CLong, NSBrowser, CLong, CLong, CLong, NSString;
overload selector(#"browser:numberOfChildrenOfItem:") = CLong, NSBrowser, Id;
overload selector(#"browser:numberOfRowsInColumn:") = CLong, NSBrowser, CLong;
overload selector(#"browser:objectValueForItem:") = Id, NSBrowser, Id;
overload selector(#"browser:previewViewControllerForLeafItem:") = NSViewController, NSBrowser, Id;
overload selector(#"browser:selectCellWithString:inColumn:") = Bool, NSBrowser, NSString, CLong;
overload selector(#"browser:selectRow:inColumn:") = Bool, NSBrowser, CLong, CLong;
overload selector(#"browser:selectionIndexesForProposedSelection:inColumn:") = NSIndexSet, NSBrowser, NSIndexSet, CLong;
overload selector(#"browser:setObjectValue:forItem:") = Void, NSBrowser, Id, Id;
overload selector(#"browser:shouldEditItem:") = Bool, NSBrowser, Id;
overload selector(#"browser:shouldShowCellExpansionForRow:column:") = Bool, NSBrowser, CLong, CLong;
overload selector(#"browser:shouldSizeColumn:forUserResize:toWidth:") = Double, NSBrowser, CLong, Bool, Double;
overload selector(#"browser:shouldTypeSelectForEvent:withCurrentSearchString:") = Bool, NSBrowser, NSEvent, NSString;
overload selector(#"browser:sizeToFitWidthOfColumn:") = Double, NSBrowser, CLong;
overload selector(#"browser:titleOfColumn:") = NSString, NSBrowser, CLong;
overload selector(#"browser:typeSelectStringForRow:inColumn:") = NSString, NSBrowser, CLong, CLong;
overload selector(#"browser:validateDrop:proposedRow:column:dropOperation:") = CULong, NSBrowser, Id, Pointer[CLong], Pointer[CLong], Pointer[CULong];
overload selector(#"browser:willDisplayCell:atRow:column:") = Void, NSBrowser, Id, CLong, CLong;
overload selector(#"browser:writeRowsWithIndexes:inColumn:toPasteboard:") = Bool, NSBrowser, NSIndexSet, CLong, NSPasteboard;
overload selector(#"browserColumnConfigurationDidChange:") = Void, NSNotification;
overload selector(#"browserDidScroll:") = Void, NSBrowser;
overload selector(#"browserWillScroll:") = Void, NSBrowser;
overload selector(#"builtInPlugInsPath") = NSString;
overload selector(#"builtInPlugInsURL") = NSURL;
overload selector(#"bundleForClass:") = NSBundle, Id;
overload selector(#"bundleForSuite:") = NSBundle, NSString;
overload selector(#"bundleIdentifier") = NSString;
overload selector(#"bundlePath") = NSString;
overload selector(#"bundleURL") = NSURL;
overload selector(#"bundleWithIdentifier:") = NSBundle, NSString;
overload selector(#"bundleWithPath:") = NSBundle, NSString;
overload selector(#"bundleWithURL:") = NSBundle, NSURL;
overload selector(#"buttonMask") = CULong;
overload selector(#"buttonNumber") = CLong;
overload selector(#"buttonToolTip") = NSString;
overload selector(#"buttons") = NSArray;
overload selector(#"bytes") = RawPointer;
overload selector(#"bytesPerPlane") = CLong;
overload selector(#"bytesPerRow") = CLong;
overload selector(#"cString") = Pointer[CChar];
overload selector(#"cStringLength") = CULong;
overload selector(#"cStringUsingEncoding:") = Pointer[CChar], CULong;
overload selector(#"cache:willEvictObject:") = Void, NSCache, Id;
overload selector(#"cacheDepthMatchesImageDepth") = Bool;
overload selector(#"cacheDisplayInRect:toBitmapImageRep:") = Void, NSRect, NSBitmapImageRep;
overload selector(#"cacheImageInRect:") = Void, NSRect;
overload selector(#"cacheMode") = CULong;
overload selector(#"cachePolicy") = CULong;
overload selector(#"cachedHandleForURL:") = NSURLHandle, NSURL;
overload selector(#"cachedResponse") = NSCachedURLResponse;
overload selector(#"cachedResponseForRequest:") = NSCachedURLResponse, NSURLRequest;
overload selector(#"cachesBezierPath") = Bool;
overload selector(#"calcDrawInfo:") = Void, NSRect;
overload selector(#"calcSize") = Void;
overload selector(#"calendar") = NSCalendar;
overload selector(#"calendarDate") = Id;
overload selector(#"calendarFormat") = NSString;
overload selector(#"calendarIdentifier") = NSString;
overload selector(#"callStackReturnAddresses") = NSArray;
overload selector(#"callStackSymbols") = NSArray;
overload selector(#"canAdd") = Bool;
overload selector(#"canAddChild") = Bool;
overload selector(#"canBeCompressedUsing:") = Bool, CULong;
overload selector(#"canBeConvertedToEncoding:") = Bool, CULong;
overload selector(#"canBeDisabled") = Bool;
overload selector(#"canBeVisibleOnAllSpaces") = Bool;
overload selector(#"canBecomeKeyView") = Bool;
overload selector(#"canBecomeKeyWindow") = Bool;
overload selector(#"canBecomeMainWindow") = Bool;
overload selector(#"canBecomeVisibleWithoutLogin") = Bool;
overload selector(#"canChooseDirectories") = Bool;
overload selector(#"canChooseFiles") = Bool;
overload selector(#"canCloseDocumentWithDelegate:shouldCloseSelector:contextInfo:") = Void, Id, SelectorHandle, RawPointer;
overload selector(#"canConcurrentlyReadDocumentsOfType:") = Bool, NSString;
overload selector(#"canCreateDirectories") = Bool;
overload selector(#"canDragRowsWithIndexes:atPoint:") = Bool, NSIndexSet, NSPoint;
overload selector(#"canDragRowsWithIndexes:inColumn:withEvent:") = Bool, NSIndexSet, CLong, NSEvent;
overload selector(#"canDraw") = Bool;
overload selector(#"canDrawConcurrently") = Bool;
overload selector(#"canDrawInCGLContext:pixelFormat:forLayerTime:displayTime:") = Bool, CGLContextObj, CGLPixelFormatObj, Double, Pointer[CVTimeStamp];
overload selector(#"canDrawInOpenGLContext:pixelFormat:forLayerTime:displayTime:") = Bool, NSOpenGLContext, NSOpenGLPixelFormat, Double, Pointer[CVTimeStamp];
overload selector(#"canHandleRequest:") = Bool, NSURLRequest;
overload selector(#"canHide") = Bool;
overload selector(#"canInitWithData:") = Bool, NSData;
overload selector(#"canInitWithPasteboard:") = Bool, NSPasteboard;
overload selector(#"canInitWithRequest:") = Bool, NSURLRequest;
overload selector(#"canInitWithURL:") = Bool, NSURL;
overload selector(#"canInsert") = Bool;
overload selector(#"canInsertChild") = Bool;
overload selector(#"canReadItemWithDataConformingToTypes:") = Bool, NSArray;
overload selector(#"canReadObjectForClasses:options:") = Bool, NSArray, NSDictionary;
overload selector(#"canRedo") = Bool;
overload selector(#"canRemove") = Bool;
overload selector(#"canRemoveAllRows") = Bool;
overload selector(#"canResumeDownloadDecodedWithEncodingMIMEType:") = Bool, NSString;
overload selector(#"canSelectHiddenExtension") = Bool;
overload selector(#"canSelectNext") = Bool;
overload selector(#"canSelectPrevious") = Bool;
overload selector(#"canSpawnSeparateThread") = Bool;
overload selector(#"canStoreColor") = Bool;
overload selector(#"canUndo") = Bool;
overload selector(#"cancel") = Void;
overload selector(#"cancel:") = Void, Id;
overload selector(#"cancelAllOperations") = Void;
overload selector(#"cancelAuthenticationChallenge:") = Void, NSURLAuthenticationChallenge;
overload selector(#"cancelButtonCell") = NSButtonCell;
overload selector(#"cancelButtonRectForBounds:") = NSRect, NSRect;
overload selector(#"cancelIncrementalLoad") = Void;
overload selector(#"cancelLoadInBackground") = Void;
overload selector(#"cancelOperation:") = Void, Id;
overload selector(#"cancelPerformSelector:target:argument:") = Void, SelectorHandle, Id, Id;
overload selector(#"cancelPerformSelectorsWithTarget:") = Void, Id;
overload selector(#"cancelPreviousPerformRequestsWithTarget:") = Void, Id;
overload selector(#"cancelPreviousPerformRequestsWithTarget:selector:object:") = Void, Id, SelectorHandle, Id;
overload selector(#"cancelTracking") = Void;
overload selector(#"cancelTrackingWithoutAnimation") = Void;
overload selector(#"cancelUserAttentionRequest:") = Void, CLong;
overload selector(#"canonicalLanguageIdentifierFromString:") = NSString, NSString;
overload selector(#"canonicalLocaleIdentifierFromString:") = NSString, NSString;
overload selector(#"canonicalRequestForRequest:") = NSURLRequest, NSURLRequest;
overload selector(#"canonicalXMLStringPreservingComments:") = NSString, Bool;
overload selector(#"capHeight") = Double;
overload selector(#"capabilityMask") = CULong;
overload selector(#"capitalizeWord:") = Void, Id;
overload selector(#"capitalizedLetterCharacterSet") = Id;
overload selector(#"capitalizedString") = NSString;
overload selector(#"cascadeTopLeftFromPoint:") = NSPoint, NSPoint;
overload selector(#"caseInsensitiveCompare:") = CLong, NSString;
overload selector(#"caseSensitive") = Bool;
overload selector(#"catalogNameComponent") = NSString;
overload selector(#"cell") = Id;
overload selector(#"cellAtIndex:") = Id, CLong;
overload selector(#"cellAtRow:column:") = Id, CLong, CLong;
overload selector(#"cellAttribute:") = CLong, CULong;
overload selector(#"cellBackgroundColor") = NSColor;
overload selector(#"cellBaselineOffset") = NSPoint;
overload selector(#"cellClass") = Id;
overload selector(#"cellFrameAtRow:column:") = NSRect, CLong, CLong;
overload selector(#"cellFrameForTextContainer:proposedLineFragment:glyphPosition:characterIndex:") = NSRect, NSTextContainer, NSRect, NSPoint, CULong;
overload selector(#"cellPrototype") = Id;
overload selector(#"cellSize") = NSSize;
overload selector(#"cellSizeForBounds:") = NSSize, NSRect;
overload selector(#"cellWithTag:") = Id, CLong;
overload selector(#"cells") = NSArray;
overload selector(#"center") = Void;
overload selector(#"centerScanRect:") = NSRect, NSRect;
overload selector(#"centerSelectionInVisibleArea:") = Void, Id;
overload selector(#"certificates") = NSArray;
overload selector(#"changeAttributes:") = Void, Id;
overload selector(#"changeCaseOfLetter:") = Void, Id;
overload selector(#"changeColor:") = Void, Id;
overload selector(#"changeCount") = CLong;
overload selector(#"changeCurrentDirectoryPath:") = Bool, NSString;
overload selector(#"changeDocumentBackgroundColor:") = Void, Id;
overload selector(#"changeFileAttributes:atPath:") = Bool, NSDictionary, NSString;
overload selector(#"changeFont:") = Void, Id;
overload selector(#"changeInLength") = CLong;
overload selector(#"changeSpelling:") = Void, Id;
overload selector(#"changeWindowsItem:title:filename:") = Void, NSWindow, NSString, Bool;
overload selector(#"channelMapping") = NSArray;
overload selector(#"charValue") = CChar;
overload selector(#"characterAtIndex:") = UShort, CULong;
overload selector(#"characterCollection") = CULong;
overload selector(#"characterDirectionForLanguage:") = CULong, NSString;
overload selector(#"characterEncoding") = NSString;
overload selector(#"characterIdentifier") = CULong;
overload selector(#"characterIndexForGlyphAtIndex:") = CULong, CULong;
overload selector(#"characterIndexForInsertionAtPoint:") = CULong, NSPoint;
overload selector(#"characterIndexForPoint:") = CULong, NSPoint;
overload selector(#"characterIndexForPoint:inTextContainer:fractionOfDistanceBetweenInsertionPoints:") = CULong, NSPoint, NSTextContainer, Pointer[Double];
overload selector(#"characterIsMember:") = Bool, UShort;
overload selector(#"characterRangeForGlyphRange:actualGlyphRange:") = NSRange, NSRange, NSRangePointer;
overload selector(#"characterSetWithBitmapRepresentation:") = Id, NSData;
overload selector(#"characterSetWithCharactersInString:") = Id, NSString;
overload selector(#"characterSetWithContentsOfFile:") = Id, NSString;
overload selector(#"characterSetWithRange:") = Id, NSRange;
overload selector(#"characters") = Id;
overload selector(#"charactersIgnoringModifiers") = NSString;
overload selector(#"charactersToBeSkipped") = NSCharacterSet;
overload selector(#"checkForRemovableMedia") = Void;
overload selector(#"checkGrammarOfString:startingAt:language:wrap:inSpellDocumentWithTag:details:") = NSRange, NSString, CLong, NSString, Bool, CLong, Pointer[NSArray];
overload selector(#"checkResourceIsReachableAndReturnError:") = Bool, Pointer[NSError];
overload selector(#"checkSpaceForParts") = Void;
overload selector(#"checkSpelling:") = Void, Id;
overload selector(#"checkSpellingOfString:startingAt:") = NSRange, NSString, CLong;
overload selector(#"checkSpellingOfString:startingAt:language:wrap:inSpellDocumentWithTag:wordCount:") = NSRange, NSString, CLong, NSString, Bool, CLong, Pointer[CLong];
overload selector(#"checkString:range:types:options:inSpellDocumentWithTag:orthography:wordCount:") = NSArray, NSString, NSRange, UInt64, NSDictionary, CLong, Pointer[NSOrthography], Pointer[CLong];
overload selector(#"checkTextInDocument:") = Void, Id;
overload selector(#"checkTextInRange:types:options:") = Void, NSRange, UInt64, NSDictionary;
overload selector(#"checkTextInSelection:") = Void, Id;
overload selector(#"childAtIndex:") = NSXMLNode, CULong;
overload selector(#"childCount") = CULong;
overload selector(#"childNodes") = NSArray;
overload selector(#"childSpecifier") = NSScriptObjectSpecifier;
overload selector(#"childWindows") = NSArray;
overload selector(#"children") = NSArray;
overload selector(#"childrenKeyPath") = NSString;
overload selector(#"childrenKeyPathForNode:") = NSString, NSTreeNode;
overload selector(#"class") = Id;
overload selector(#"classCode") = UInt;
overload selector(#"classDescription") = NSClassDescription;
overload selector(#"classDescriptionForClass:") = Id, Id;
overload selector(#"classDescriptionForKey:") = NSScriptClassDescription, NSString;
overload selector(#"classDescriptionWithAppleEventCode:") = NSScriptClassDescription, UInt;
overload selector(#"classDescriptionsInSuite:") = NSDictionary, NSString;
overload selector(#"classFallbacksForKeyedArchiver") = NSArray;
overload selector(#"classForArchiver") = Id;
overload selector(#"classForClassName:") = Id, NSString;
overload selector(#"classForCoder") = Id;
overload selector(#"classForKeyedArchiver") = Id;
overload selector(#"classForKeyedUnarchiver") = Id;
overload selector(#"classForPortCoder") = Id;
overload selector(#"className") = NSString;
overload selector(#"classNameDecodedForArchiveClassName:") = NSString, NSString;
overload selector(#"classNameEncodedForTrueClassName:") = NSString, NSString;
overload selector(#"classNameForClass:") = NSString, Id;
overload selector(#"classNamed:") = Id, NSString;
overload selector(#"cleanUpAfterDragOperation") = Void;
overload selector(#"cleanUpOperation") = Void;
overload selector(#"clearColor") = NSColor;
overload selector(#"clearContents") = CLong;
overload selector(#"clearCurrentContext") = Void;
overload selector(#"clearDrawable") = Void;
overload selector(#"clearGLContext") = Void;
overload selector(#"clearRecentDocuments:") = Void, Id;
overload selector(#"clearStartAnimation") = Void;
overload selector(#"clearStopAnimation") = Void;
overload selector(#"clearsFilterPredicateOnInsertion") = Bool;
overload selector(#"clickCount") = CLong;
overload selector(#"clickedColumn") = CLong;
overload selector(#"clickedOnLink:atIndex:") = Void, Id, CULong;
overload selector(#"clickedPathComponentCell") = NSPathComponentCell;
overload selector(#"clickedRow") = CLong;
overload selector(#"client") = Id;
overload selector(#"clientView") = NSView;
overload selector(#"clipRect:") = Void, NSRect;
overload selector(#"close") = Void;
overload selector(#"close:") = Void, Id;
overload selector(#"closeAllDocumentsWithDelegate:didCloseAllSelector:contextInfo:") = Void, Id, SelectorHandle, RawPointer;
overload selector(#"closeFile") = Void;
overload selector(#"closePath") = Void;
overload selector(#"closeSpellDocumentWithTag:") = Void, CLong;
overload selector(#"closedHandCursor") = NSCursor;
overload selector(#"closestTickMarkValueToValue:") = Double, Double;
overload selector(#"code") = CLong;
overload selector(#"coerceToDescriptorType:") = NSAppleEventDescriptor, UInt;
overload selector(#"coerceValue:forKey:") = Id, Id, NSString;
overload selector(#"coerceValue:toClass:") = Id, Id, Id;
overload selector(#"collapseItem:") = Void, Id;
overload selector(#"collapseItem:collapseChildren:") = Void, Id, Bool;
overload selector(#"collapsesBorders") = Bool;
overload selector(#"collectExhaustively") = Void;
overload selector(#"collectIfNeeded") = Void;
overload selector(#"collection") = Id;
overload selector(#"collectionBehavior") = CULong;
overload selector(#"collectionNames") = NSArray;
overload selector(#"collectionView") = NSCollectionView;
overload selector(#"collectionView:acceptDrop:index:dropOperation:") = Bool, NSCollectionView, Id, CLong, CLong;
overload selector(#"collectionView:canDragItemsAtIndexes:withEvent:") = Bool, NSCollectionView, NSIndexSet, NSEvent;
overload selector(#"collectionView:draggingImageForItemsAtIndexes:withEvent:offset:") = NSImage, NSCollectionView, NSIndexSet, NSEvent, NSPointPointer;
overload selector(#"collectionView:namesOfPromisedFilesDroppedAtDestination:forDraggedItemsAtIndexes:") = NSArray, NSCollectionView, NSURL, NSIndexSet;
overload selector(#"collectionView:validateDrop:proposedIndex:dropOperation:") = CULong, NSCollectionView, Id, Pointer[CLong], Pointer[CLong];
overload selector(#"collectionView:writeItemsAtIndexes:toPasteboard:") = Bool, NSCollectionView, NSIndexSet, NSPasteboard;
overload selector(#"color") = NSColor;
overload selector(#"colorAtX:y:") = NSColor, CLong, CLong;
overload selector(#"colorForControlTint:") = NSColor, CULong;
overload selector(#"colorFromPasteboard:") = NSColor, NSPasteboard;
overload selector(#"colorListNamed:") = NSColorList, NSString;
overload selector(#"colorNameComponent") = NSString;
overload selector(#"colorPanel") = NSColorPanel;
overload selector(#"colorRenderingIntent") = CLong;
overload selector(#"colorSpace") = NSColorSpace;
overload selector(#"colorSpaceModel") = CLong;
overload selector(#"colorSpaceName") = NSString;
overload selector(#"colorSyncProfile") = RawPointer;
overload selector(#"colorUsingColorSpace:") = NSColor, NSColorSpace;
overload selector(#"colorUsingColorSpaceName:") = NSColor, NSString;
overload selector(#"colorUsingColorSpaceName:device:") = NSColor, NSString, NSDictionary;
overload selector(#"colorWithAlphaComponent:") = NSColor, Double;
overload selector(#"colorWithCGColor:") = CIColor, CGColorRef;
overload selector(#"colorWithCIColor:") = NSColor, CIColor;
overload selector(#"colorWithCalibratedHue:saturation:brightness:alpha:") = NSColor, Double, Double, Double, Double;
overload selector(#"colorWithCalibratedRed:green:blue:alpha:") = NSColor, Double, Double, Double, Double;
overload selector(#"colorWithCalibratedWhite:alpha:") = NSColor, Double, Double;
overload selector(#"colorWithCatalogName:colorName:") = NSColor, NSString, NSString;
overload selector(#"colorWithColorSpace:components:count:") = NSColor, NSColorSpace, Pointer[Double], CLong;
overload selector(#"colorWithDeviceCyan:magenta:yellow:black:alpha:") = NSColor, Double, Double, Double, Double, Double;
overload selector(#"colorWithDeviceHue:saturation:brightness:alpha:") = NSColor, Double, Double, Double, Double;
overload selector(#"colorWithDeviceRed:green:blue:alpha:") = NSColor, Double, Double, Double, Double;
overload selector(#"colorWithDeviceWhite:alpha:") = NSColor, Double, Double;
overload selector(#"colorWithKey:") = NSColor, NSString;
overload selector(#"colorWithPatternImage:") = NSColor, NSImage;
overload selector(#"colorWithRed:green:blue:") = CIColor, Double, Double, Double;
overload selector(#"colorWithRed:green:blue:alpha:") = CIColor, Double, Double, Double, Double;
overload selector(#"colorWithString:") = CIColor, NSString;
overload selector(#"colorizeByMappingGray:toColor:blackMapping:whiteMapping:") = Void, Double, NSColor, NSColor, NSColor;
overload selector(#"columnAtPoint:") = CLong, NSPoint;
overload selector(#"columnAutoresizingStyle") = CULong;
overload selector(#"columnContentWidthForColumnWidth:") = Double, Double;
overload selector(#"columnIndexesInRect:") = NSIndexSet, NSRect;
overload selector(#"columnNumber") = CLong;
overload selector(#"columnOfMatrix:") = CLong, NSMatrix;
overload selector(#"columnResizingType") = CULong;
overload selector(#"columnSpan") = CLong;
overload selector(#"columnWidthForColumnContentWidth:") = Double, Double;
overload selector(#"columnWithIdentifier:") = CLong, Id;
overload selector(#"columnsAutosaveName") = NSString;
overload selector(#"columnsInRect:") = NSRange, NSRect;
overload selector(#"comboBox:completedString:") = NSString, NSComboBox, NSString;
overload selector(#"comboBox:indexOfItemWithStringValue:") = CULong, NSComboBox, NSString;
overload selector(#"comboBox:objectValueForItemAtIndex:") = Id, NSComboBox, CLong;
overload selector(#"comboBoxCell:completedString:") = NSString, NSComboBoxCell, NSString;
overload selector(#"comboBoxCell:indexOfItemWithStringValue:") = CULong, NSComboBoxCell, NSString;
overload selector(#"comboBoxCell:objectValueForItemAtIndex:") = Id, NSComboBoxCell, CLong;
overload selector(#"comboBoxSelectionDidChange:") = Void, NSNotification;
overload selector(#"comboBoxSelectionIsChanging:") = Void, NSNotification;
overload selector(#"comboBoxWillDismiss:") = Void, NSNotification;
overload selector(#"comboBoxWillPopUp:") = Void, NSNotification;
overload selector(#"commandClassName") = NSString;
overload selector(#"commandDescription") = NSScriptCommandDescription;
overload selector(#"commandDescriptionWithAppleEventClass:andAppleEventCode:") = NSScriptCommandDescription, UInt, UInt;
overload selector(#"commandDescriptionsInSuite:") = NSDictionary, NSString;
overload selector(#"commandName") = NSString;
overload selector(#"commands") = NSArray;
overload selector(#"comment") = NSString;
overload selector(#"commentURL") = NSURL;
overload selector(#"commentWithStringValue:") = Id, NSString;
overload selector(#"commitEditing") = Bool;
overload selector(#"commitEditingWithDelegate:didCommitSelector:contextInfo:") = Void, Id, SelectorHandle, RawPointer;
overload selector(#"commonISOCurrencyCodes") = NSArray;
overload selector(#"commonPrefixWithString:options:") = NSString, NSString, CULong;
overload selector(#"compact") = Void;
overload selector(#"comparator") = NSComparator;
overload selector(#"compare:") = CLong, NSNumber;
overload selector(#"compare:options:") = CLong, NSString, CULong;
overload selector(#"compare:options:range:") = CLong, NSString, CULong, NSRange;
overload selector(#"compare:options:range:locale:") = CLong, NSString, CULong, NSRange, Id;
overload selector(#"compareObject:toObject:") = CLong, Id, Id;
overload selector(#"comparisonPredicateModifier") = CULong;
overload selector(#"compileAndReturnError:") = Bool, Pointer[NSDictionary];
overload selector(#"complete:") = Void, Id;
overload selector(#"completePathIntoString:caseSensitive:matchesIntoArray:filterTypes:") = CULong, Pointer[NSString], Bool, Pointer[NSArray], NSArray;
overload selector(#"completedString:") = NSString, NSString;
overload selector(#"completes") = Bool;
overload selector(#"completionBlock") = UnknownType;
overload selector(#"completionDelay") = Double;
overload selector(#"completionsForPartialWordRange:inString:language:inSpellDocumentWithTag:") = NSArray, NSRange, NSString, NSString, CLong;
overload selector(#"completionsForPartialWordRange:indexOfSelectedItem:") = NSArray, NSRange, Pointer[CLong];
overload selector(#"components") = NSArray;
overload selector(#"components:fromDate:") = NSDateComponents, CULong, NSDate;
overload selector(#"components:fromDate:toDate:options:") = NSDateComponents, CULong, NSDate, NSDate, CULong;
overload selector(#"componentsFromLocaleIdentifier:") = NSDictionary, NSString;
overload selector(#"componentsJoinedByString:") = NSString, NSString;
overload selector(#"componentsSeparatedByCharactersInSet:") = NSArray, NSCharacterSet;
overload selector(#"componentsSeparatedByString:") = NSArray, NSString;
overload selector(#"componentsToDisplayForPath:") = NSArray, NSString;
overload selector(#"compositeToPoint:fromRect:operation:") = Void, NSPoint, NSRect, CULong;
overload selector(#"compositeToPoint:fromRect:operation:fraction:") = Void, NSPoint, NSRect, CULong, Double;
overload selector(#"compositeToPoint:operation:") = Void, NSPoint, CULong;
overload selector(#"compositeToPoint:operation:fraction:") = Void, NSPoint, CULong, Double;
overload selector(#"compositingFilter") = Id;
overload selector(#"compositingOperation") = CULong;
overload selector(#"compoundPredicateType") = CULong;
overload selector(#"compoundTypes") = NSArray;
overload selector(#"concat") = Void;
overload selector(#"concludeDragOperation:") = Void, Id;
overload selector(#"condition") = CLong;
overload selector(#"configurationDictionary") = NSDictionary;
overload selector(#"configureAsServer") = Void;
overload selector(#"configurePersistentStoreCoordinatorForURL:ofType:error:") = Bool, NSURL, NSString, Pointer[NSError];
overload selector(#"configurePersistentStoreCoordinatorForURL:ofType:modelConfiguration:storeOptions:error:") = Bool, NSURL, NSString, NSString, NSDictionary, Pointer[NSError];
overload selector(#"confinementRectForMenu:onScreen:") = NSRect, NSMenu, NSScreen;
overload selector(#"conformsToProtocol:") = Bool, Id;
overload selector(#"connection") = NSConnection;
overload selector(#"connection:canAuthenticateAgainstProtectionSpace:") = Bool, NSURLConnection, NSURLProtectionSpace;
overload selector(#"connection:didCancelAuthenticationChallenge:") = Void, NSURLConnection, NSURLAuthenticationChallenge;
overload selector(#"connection:didFailWithError:") = Void, NSURLConnection, NSError;
overload selector(#"connection:didReceiveAuthenticationChallenge:") = Void, NSURLConnection, NSURLAuthenticationChallenge;
overload selector(#"connection:didReceiveData:") = Void, NSURLConnection, NSData;
overload selector(#"connection:didReceiveResponse:") = Void, NSURLConnection, NSURLResponse;
overload selector(#"connection:didSendBodyData:totalBytesWritten:totalBytesExpectedToWrite:") = Void, NSURLConnection, CLong, CLong, CLong;
overload selector(#"connection:handleRequest:") = Bool, NSConnection, NSDistantObjectRequest;
overload selector(#"connection:needNewBodyStream:") = NSInputStream, NSURLConnection, NSURLRequest;
overload selector(#"connection:shouldMakeNewConnection:") = Bool, NSConnection, NSConnection;
overload selector(#"connection:willCacheResponse:") = NSCachedURLResponse, NSURLConnection, NSCachedURLResponse;
overload selector(#"connection:willSendRequest:redirectResponse:") = NSURLRequest, NSURLConnection, NSURLRequest, NSURLResponse;
overload selector(#"connectionDidFinishLoading:") = Void, NSURLConnection;
overload selector(#"connectionForProxy") = NSConnection;
overload selector(#"connectionShouldUseCredentialStorage:") = Bool, NSURLConnection;
overload selector(#"connectionWithReceivePort:sendPort:") = Id, NSPort, NSPort;
overload selector(#"connectionWithRegisteredName:host:") = Id, NSString, NSString;
overload selector(#"connectionWithRegisteredName:host:usingNameServer:") = Id, NSString, NSString, NSPortNameServer;
overload selector(#"connectionWithRequest:delegate:") = NSURLConnection, NSURLRequest, Id;
overload selector(#"constantValue") = Id;
overload selector(#"constrainFrameRect:toScreen:") = NSRect, NSRect, NSScreen;
overload selector(#"constrainScrollPoint:") = NSPoint, NSPoint;
overload selector(#"containerClassDescription") = NSScriptClassDescription;
overload selector(#"containerIsObjectBeingTested") = Bool;
overload selector(#"containerIsRangeContainerObject") = Bool;
overload selector(#"containerSize") = NSSize;
overload selector(#"containerSpecifier") = NSScriptObjectSpecifier;
overload selector(#"containsAttachments") = Bool;
overload selector(#"containsIndex:") = Bool, CULong;
overload selector(#"containsIndexes:") = Bool, NSIndexSet;
overload selector(#"containsIndexesInRange:") = Bool, NSRange;
overload selector(#"containsObject:") = Bool, Id;
overload selector(#"containsPoint:") = Bool, NSPoint;
overload selector(#"containsValueForKey:") = Bool, NSString;
overload selector(#"content") = Id;
overload selector(#"contentAspectRatio") = NSSize;
overload selector(#"contentBorderThicknessForEdge:") = Double, CULong;
overload selector(#"contentFilters") = NSArray;
overload selector(#"contentMaxSize") = NSSize;
overload selector(#"contentMinSize") = NSSize;
overload selector(#"contentRect") = NSRect;
overload selector(#"contentRectForFrameRect:") = NSRect, NSRect;
overload selector(#"contentRectForFrameRect:styleMask:") = NSRect, NSRect, CULong;
overload selector(#"contentResizeIncrements") = NSSize;
overload selector(#"contentSize") = NSSize;
overload selector(#"contentSizeForFrameSize:hasHorizontalScroller:hasVerticalScroller:borderType:") = NSSize, NSSize, Bool, Bool, CULong;
overload selector(#"contentView") = Id;
overload selector(#"contentViewMargins") = NSSize;
overload selector(#"contentWidth") = Double;
overload selector(#"contentWidthValueType") = CULong;
overload selector(#"contents") = Id;
overload selector(#"contentsAreFlipped") = Bool;
overload selector(#"contentsAtPath:") = NSData, NSString;
overload selector(#"contentsCenter") = CGRect;
overload selector(#"contentsEqualAtPath:andPath:") = Bool, NSString, NSString;
overload selector(#"contentsGravity") = NSString;
overload selector(#"contentsOfDirectoryAtPath:error:") = NSArray, NSString, Pointer[NSError];
overload selector(#"contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:") = NSArray, NSURL, NSArray, CULong, Pointer[NSError];
overload selector(#"contentsRect") = CGRect;
overload selector(#"context") = NSGraphicsContext;
overload selector(#"contextHelpForKey:") = NSAttributedString, NSString;
overload selector(#"contextHelpForObject:") = NSAttributedString, Id;
overload selector(#"contextMenuRepresentation") = Id;
overload selector(#"contextualMenuCursor") = NSCursor;
overload selector(#"continueSpeaking") = Void;
overload selector(#"continueTracking:at:inView:") = Bool, NSPoint, NSPoint, NSView;
overload selector(#"continueWithoutCredentialForAuthenticationChallenge:") = Void, NSURLAuthenticationChallenge;
overload selector(#"control:didFailToFormatString:errorDescription:") = Bool, NSControl, NSString, NSString;
overload selector(#"control:didFailToValidatePartialString:errorDescription:") = Void, NSControl, NSString, NSString;
overload selector(#"control:isValidObject:") = Bool, NSControl, Id;
overload selector(#"control:textShouldBeginEditing:") = Bool, NSControl, NSText;
overload selector(#"control:textShouldEndEditing:") = Bool, NSControl, NSText;
overload selector(#"control:textView:completions:forPartialWordRange:indexOfSelectedItem:") = NSArray, NSControl, NSTextView, NSArray, NSRange, Pointer[CLong];
overload selector(#"control:textView:doCommandBySelector:") = Bool, NSControl, NSTextView, SelectorHandle;
overload selector(#"controlAlternatingRowBackgroundColors") = NSArray;
overload selector(#"controlBackgroundColor") = NSColor;
overload selector(#"controlCharacterSet") = Id;
overload selector(#"controlColor") = NSColor;
overload selector(#"controlContentFontOfSize:") = NSFont, Double;
overload selector(#"controlDarkShadowColor") = NSColor;
overload selector(#"controlHighlightColor") = NSColor;
overload selector(#"controlLightHighlightColor") = NSColor;
overload selector(#"controlPointBounds") = NSRect;
overload selector(#"controlShadowColor") = NSColor;
overload selector(#"controlSize") = CULong;
overload selector(#"controlTextColor") = NSColor;
overload selector(#"controlTextDidBeginEditing:") = Void, NSNotification;
overload selector(#"controlTextDidChange:") = Void, NSNotification;
overload selector(#"controlTextDidEndEditing:") = Void, NSNotification;
overload selector(#"controlTint") = CULong;
overload selector(#"controlView") = NSView;
overload selector(#"conversation") = Id;
overload selector(#"conversationIdentifier") = CLong;
overload selector(#"convertAttributes:") = NSDictionary, NSDictionary;
overload selector(#"convertBaseToScreen:") = NSPoint, NSPoint;
overload selector(#"convertFont:") = NSFont, NSFont;
overload selector(#"convertFont:toFace:") = NSFont, NSFont, NSString;
overload selector(#"convertFont:toFamily:") = NSFont, NSFont, NSString;
overload selector(#"convertFont:toHaveTrait:") = NSFont, NSFont, CULong;
overload selector(#"convertFont:toNotHaveTrait:") = NSFont, NSFont, CULong;
overload selector(#"convertFont:toSize:") = NSFont, NSFont, Double;
overload selector(#"convertFontTraits:") = CULong, CULong;
overload selector(#"convertPoint:fromLayer:") = CGPoint, CGPoint, CALayer;
overload selector(#"convertPoint:fromView:") = NSPoint, NSPoint, NSView;
overload selector(#"convertPoint:toLayer:") = CGPoint, CGPoint, CALayer;
overload selector(#"convertPoint:toView:") = NSPoint, NSPoint, NSView;
overload selector(#"convertPointFromBase:") = NSPoint, NSPoint;
overload selector(#"convertPointToBase:") = NSPoint, NSPoint;
overload selector(#"convertRect:fromLayer:") = CGRect, CGRect, CALayer;
overload selector(#"convertRect:fromView:") = NSRect, NSRect, NSView;
overload selector(#"convertRect:toLayer:") = CGRect, CGRect, CALayer;
overload selector(#"convertRect:toView:") = NSRect, NSRect, NSView;
overload selector(#"convertRectFromBase:") = NSRect, NSRect;
overload selector(#"convertRectToBase:") = NSRect, NSRect;
overload selector(#"convertScreenToBase:") = NSPoint, NSPoint;
overload selector(#"convertSize:fromView:") = NSSize, NSSize, NSView;
overload selector(#"convertSize:toView:") = NSSize, NSSize, NSView;
overload selector(#"convertSizeFromBase:") = NSSize, NSSize;
overload selector(#"convertSizeToBase:") = NSSize, NSSize;
overload selector(#"convertTime:fromLayer:") = Double, Double, CALayer;
overload selector(#"convertTime:toLayer:") = Double, Double, CALayer;
overload selector(#"convertWeight:ofFont:") = NSFont, Bool, NSFont;
overload selector(#"cookieAcceptPolicy") = CULong;
overload selector(#"cookieWithProperties:") = Id, NSDictionary;
overload selector(#"cookies") = NSArray;
overload selector(#"cookiesForURL:") = NSArray, NSURL;
overload selector(#"cookiesWithResponseHeaderFields:forURL:") = NSArray, NSDictionary, NSURL;
overload selector(#"copiesOnScroll") = Bool;
overload selector(#"copy") = Id;
overload selector(#"copy:") = Void, Id;
overload selector(#"copyAttributesFromContext:withMask:") = Void, NSOpenGLContext, UInt;
overload selector(#"copyCGLContextForPixelFormat:") = CGLContextObj, CGLPixelFormatObj;
overload selector(#"copyCGLPixelFormatForDisplayMask:") = CGLPixelFormatObj, UInt;
overload selector(#"copyFont:") = Void, Id;
overload selector(#"copyItemAtPath:toPath:error:") = Bool, NSString, NSString, Pointer[NSError];
overload selector(#"copyItemAtURL:toURL:error:") = Bool, NSURL, NSURL, Pointer[NSError];
overload selector(#"copyPath:toPath:handler:") = Bool, NSString, NSString, Id;
overload selector(#"copyRuler:") = Void, Id;
overload selector(#"copyScriptingValue:forKey:withProperties:") = Id, Id, NSString, NSDictionary;
overload selector(#"copyWithZone:") = Id, Pointer[NSZone];
overload selector(#"cornerRadius") = Double;
overload selector(#"cornerView") = NSView;
overload selector(#"correctionCheckingResultWithRange:replacementString:") = NSTextCheckingResult, NSRange, NSString;
overload selector(#"count") = CULong;
overload selector(#"countByEnumeratingWithState:objects:count:") = CULong, Pointer[NSFastEnumerationState], Pointer[Id], CULong;
overload selector(#"countForObject:") = CULong, Id;
overload selector(#"countKeyPath") = NSString;
overload selector(#"countKeyPathForNode:") = NSString, NSTreeNode;
overload selector(#"countLimit") = CULong;
overload selector(#"countOfIndexesInRange:") = CULong, NSRange;
overload selector(#"countWordsInString:language:") = CLong, NSString, NSString;
overload selector(#"coveredCharacterSet") = NSCharacterSet;
overload selector(#"createClassDescription") = NSScriptClassDescription;
overload selector(#"createCommandInstance") = NSScriptCommand;
overload selector(#"createCommandInstanceWithZone:") = NSScriptCommand, Pointer[NSZone];
overload selector(#"createContext") = NSGraphicsContext;
overload selector(#"createConversationForConnection:") = Id, NSConnection;
overload selector(#"createDirectoryAtPath:attributes:") = Bool, NSString, NSDictionary;
overload selector(#"createDirectoryAtPath:withIntermediateDirectories:attributes:error:") = Bool, NSString, Bool, NSDictionary, Pointer[NSError];
overload selector(#"createFileAtPath:contents:attributes:") = Bool, NSString, NSData, NSDictionary;
overload selector(#"createSymbolicLinkAtPath:pathContent:") = Bool, NSString, NSString;
overload selector(#"createSymbolicLinkAtPath:withDestinationPath:error:") = Bool, NSString, NSString, Pointer[NSError];
overload selector(#"createTexture:fromView:internalFormat:") = Void, UInt, NSView, UInt;
overload selector(#"credentialForTrust:") = NSURLCredential, SecTrustRef;
overload selector(#"credentialWithIdentity:certificates:persistence:") = NSURLCredential, SecIdentityRef, NSArray, CULong;
overload selector(#"credentialWithUser:password:persistence:") = NSURLCredential, NSString, NSString, CULong;
overload selector(#"credentialsForProtectionSpace:") = NSDictionary, NSURLProtectionSpace;
overload selector(#"criteriaForRow:") = NSArray, CLong;
overload selector(#"criteriaKeyPath") = NSString;
overload selector(#"criticalValue") = Double;
overload selector(#"crosshairCursor") = NSCursor;
overload selector(#"currencyCode") = NSString;
overload selector(#"currencyDecimalSeparator") = NSString;
overload selector(#"currencyGroupingSeparator") = NSString;
overload selector(#"currencySymbol") = NSString;
overload selector(#"currentAppleEvent") = NSAppleEventDescriptor;
overload selector(#"currentApplication") = NSRunningApplication;
overload selector(#"currentCalendar") = Id;
overload selector(#"currentCommand") = NSScriptCommand;
overload selector(#"currentContext") = Id;
overload selector(#"currentContextDrawingToScreen") = Bool;
overload selector(#"currentControlTint") = CULong;
overload selector(#"currentConversation") = Id;
overload selector(#"currentCursor") = NSCursor;
overload selector(#"currentDirectory") = NSString;
overload selector(#"currentDirectoryPath") = NSString;
overload selector(#"currentDiskUsage") = CULong;
overload selector(#"currentDocument") = Id;
overload selector(#"currentEditor") = NSText;
overload selector(#"currentEvent") = NSEvent;
overload selector(#"currentFontAction") = CULong;
overload selector(#"currentHandler") = NSAssertionHandler;
overload selector(#"currentHost") = NSHost;
overload selector(#"currentInputContext") = NSTextInputContext;
overload selector(#"currentInputManager") = NSInputManager;
overload selector(#"currentLocale") = Id;
overload selector(#"currentMemoryUsage") = CULong;
overload selector(#"currentMode") = NSString;
overload selector(#"currentOperation") = NSPrintOperation;
overload selector(#"currentPage") = CLong;
overload selector(#"currentParagraphStyle") = NSParagraphStyle;
overload selector(#"currentPoint") = NSPoint;
overload selector(#"currentProgress") = Float;
overload selector(#"currentQueue") = Id;
overload selector(#"currentReplyAppleEvent") = NSAppleEventDescriptor;
overload selector(#"currentRunLoop") = NSRunLoop;
overload selector(#"currentSystemCursor") = NSCursor;
overload selector(#"currentSystemPresentationOptions") = CULong;
overload selector(#"currentTextContainer") = NSTextContainer;
overload selector(#"currentThread") = NSThread;
overload selector(#"currentTime") = Double;
overload selector(#"currentValue") = Float;
overload selector(#"currentVirtualScreen") = Int;
overload selector(#"cursorUpdate:") = Void, NSEvent;
overload selector(#"curveToPoint:controlPoint1:controlPoint2:") = Void, NSPoint, NSPoint, NSPoint;
overload selector(#"customSelector") = SelectorHandle;
overload selector(#"customizationPaletteIsRunning") = Bool;
overload selector(#"cut:") = Void, Id;
overload selector(#"cyanColor") = NSColor;
overload selector(#"cyanComponent") = Double;
overload selector(#"cycleToNextInputLanguage:") = Void, Id;
overload selector(#"cycleToNextInputServerInLanguage:") = Void, Id;
overload selector(#"darkGrayColor") = NSColor;
overload selector(#"dashCheckingResultWithRange:replacementString:") = NSTextCheckingResult, NSRange, NSString;
overload selector(#"data") = Id;
overload selector(#"data1") = CLong;
overload selector(#"data2") = CLong;
overload selector(#"dataCell") = Id;
overload selector(#"dataCellForRow:") = Id, CLong;
overload selector(#"dataForKey:") = NSData, NSString;
overload selector(#"dataForType:") = NSData, NSString;
overload selector(#"dataFromPropertyList:format:errorDescription:") = NSData, Id, CULong, Pointer[NSString];
overload selector(#"dataFromRange:documentAttributes:error:") = NSData, NSRange, NSDictionary, Pointer[NSError];
overload selector(#"dataFromTXTRecordDictionary:") = NSData, NSDictionary;
overload selector(#"dataOfType:error:") = NSData, NSString, Pointer[NSError];
overload selector(#"dataRepresentationOfType:") = NSData, NSString;
overload selector(#"dataSource") = Id;
overload selector(#"dataUsingEncoding:") = NSData, CULong;
overload selector(#"dataUsingEncoding:allowLossyConversion:") = NSData, CULong, Bool;
overload selector(#"dataWithBytes:length:") = Id, RawPointer, CULong;
overload selector(#"dataWithBytesNoCopy:length:") = Id, RawPointer, CULong;
overload selector(#"dataWithBytesNoCopy:length:freeWhenDone:") = Id, RawPointer, CULong, Bool;
overload selector(#"dataWithCapacity:") = Id, CULong;
overload selector(#"dataWithContentsOfFile:") = Id, NSString;
overload selector(#"dataWithContentsOfFile:options:error:") = Id, NSString, CULong, Pointer[NSError];
overload selector(#"dataWithContentsOfMappedFile:") = Id, NSString;
overload selector(#"dataWithContentsOfURL:") = Id, NSURL;
overload selector(#"dataWithContentsOfURL:options:error:") = Id, NSURL, CULong, Pointer[NSError];
overload selector(#"dataWithData:") = Id, NSData;
overload selector(#"dataWithEPSInsideRect:") = NSData, NSRect;
overload selector(#"dataWithLength:") = Id, CULong;
overload selector(#"dataWithPDFInsideRect:") = NSData, NSRect;
overload selector(#"dataWithPropertyList:format:options:error:") = NSData, Id, CULong, CULong, Pointer[NSError];
overload selector(#"date") = Id;
overload selector(#"dateByAddingComponents:toDate:options:") = NSDate, NSDateComponents, NSDate, CULong;
overload selector(#"dateByAddingTimeInterval:") = Id, Double;
overload selector(#"dateByAddingYears:months:days:hours:minutes:seconds:") = NSCalendarDate, CLong, CLong, CLong, CLong, CLong, CLong;
overload selector(#"dateCheckingResultWithRange:date:") = NSTextCheckingResult, NSRange, NSDate;
overload selector(#"dateCheckingResultWithRange:date:timeZone:duration:") = NSTextCheckingResult, NSRange, NSDate, NSTimeZone, Double;
overload selector(#"dateFormat") = NSString;
overload selector(#"dateFormatFromTemplate:options:locale:") = NSString, NSString, CULong, NSLocale;
overload selector(#"dateFromComponents:") = NSDate, NSDateComponents;
overload selector(#"dateFromString:") = NSDate, NSString;
overload selector(#"datePickerCell:validateProposedDateValue:timeInterval:") = Void, NSDatePickerCell, Pointer[NSDate], Pointer[Double];
overload selector(#"datePickerElements") = CULong;
overload selector(#"datePickerMode") = CULong;
overload selector(#"datePickerStyle") = CULong;
overload selector(#"dateStyle") = CULong;
overload selector(#"dateValue") = NSDate;
overload selector(#"dateWithCalendarFormat:timeZone:") = NSCalendarDate, NSString, NSTimeZone;
overload selector(#"dateWithNaturalLanguageString:") = Id, NSString;
overload selector(#"dateWithNaturalLanguageString:locale:") = Id, NSString, Id;
overload selector(#"dateWithString:") = Id, NSString;
overload selector(#"dateWithString:calendarFormat:") = Id, NSString, NSString;
overload selector(#"dateWithString:calendarFormat:locale:") = Id, NSString, NSString, Id;
overload selector(#"dateWithTimeInterval:sinceDate:") = Id, Double, NSDate;
overload selector(#"dateWithTimeIntervalSince1970:") = Id, Double;
overload selector(#"dateWithTimeIntervalSinceNow:") = Id, Double;
overload selector(#"dateWithTimeIntervalSinceReferenceDate:") = Id, Double;
overload selector(#"dateWithYear:month:day:hour:minute:second:timeZone:") = Id, CLong, CULong, CULong, CULong, CULong, CULong, NSTimeZone;
overload selector(#"day") = CLong;
overload selector(#"dayOfCommonEra") = CLong;
overload selector(#"dayOfMonth") = CLong;
overload selector(#"dayOfWeek") = CLong;
overload selector(#"dayOfYear") = CLong;
overload selector(#"daylightSavingTimeOffset") = Double;
overload selector(#"daylightSavingTimeOffsetForDate:") = Double, NSDate;
overload selector(#"deactivate") = Void;
overload selector(#"dealloc") = Void;
overload selector(#"decimalDigitCharacterSet") = Id;
overload selector(#"decimalNumberByAdding:") = NSDecimalNumber, NSDecimalNumber;
overload selector(#"decimalNumberByAdding:withBehavior:") = NSDecimalNumber, NSDecimalNumber, Id;
overload selector(#"decimalNumberByDividingBy:") = NSDecimalNumber, NSDecimalNumber;
overload selector(#"decimalNumberByDividingBy:withBehavior:") = NSDecimalNumber, NSDecimalNumber, Id;
overload selector(#"decimalNumberByMultiplyingBy:") = NSDecimalNumber, NSDecimalNumber;
overload selector(#"decimalNumberByMultiplyingBy:withBehavior:") = NSDecimalNumber, NSDecimalNumber, Id;
overload selector(#"decimalNumberByMultiplyingByPowerOf10:") = NSDecimalNumber, Short;
overload selector(#"decimalNumberByMultiplyingByPowerOf10:withBehavior:") = NSDecimalNumber, Short, Id;
overload selector(#"decimalNumberByRaisingToPower:") = NSDecimalNumber, CULong;
overload selector(#"decimalNumberByRaisingToPower:withBehavior:") = NSDecimalNumber, CULong, Id;
overload selector(#"decimalNumberByRoundingAccordingToBehavior:") = NSDecimalNumber, Id;
overload selector(#"decimalNumberBySubtracting:") = NSDecimalNumber, NSDecimalNumber;
overload selector(#"decimalNumberBySubtracting:withBehavior:") = NSDecimalNumber, NSDecimalNumber, Id;
overload selector(#"decimalNumberHandlerWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:") = Id, CULong, Short, Bool, Bool, Bool, Bool;
overload selector(#"decimalNumberWithDecimal:") = NSDecimalNumber, NSDecimal;
overload selector(#"decimalNumberWithMantissa:exponent:isNegative:") = NSDecimalNumber, UInt64, Short, Bool;
overload selector(#"decimalNumberWithString:") = NSDecimalNumber, NSString;
overload selector(#"decimalNumberWithString:locale:") = NSDecimalNumber, NSString, Id;
overload selector(#"decimalSeparator") = NSString;
overload selector(#"decimalValue") = NSDecimal;
overload selector(#"declareTypes:owner:") = CLong, NSArray, Id;
overload selector(#"decodeArrayOfObjCType:count:at:") = Void, Pointer[CChar], CULong, RawPointer;
overload selector(#"decodeBoolForKey:") = Bool, NSString;
overload selector(#"decodeBytesForKey:returnedLength:") = Pointer[CUChar], NSString, Pointer[CULong];
overload selector(#"decodeBytesWithReturnedLength:") = RawPointer, Pointer[CULong];
overload selector(#"decodeClassName:asClassName:") = Void, NSString, NSString;
overload selector(#"decodeDataObject") = NSData;
overload selector(#"decodeDoubleForKey:") = Double, NSString;
overload selector(#"decodeFloatForKey:") = Float, NSString;
overload selector(#"decodeInt32ForKey:") = Int, NSString;
overload selector(#"decodeInt64ForKey:") = Int64, NSString;
overload selector(#"decodeIntForKey:") = Int, NSString;
overload selector(#"decodeIntegerForKey:") = CLong, NSString;
overload selector(#"decodeNXColor") = NSColor;
overload selector(#"decodeNXObject") = Id;
overload selector(#"decodeObject") = Id;
overload selector(#"decodeObjectForKey:") = Id, NSString;
overload selector(#"decodePoint") = NSPoint;
overload selector(#"decodePointForKey:") = NSPoint, NSString;
overload selector(#"decodePortObject") = NSPort;
overload selector(#"decodePropertyList") = Id;
overload selector(#"decodeRect") = NSRect;
overload selector(#"decodeRectForKey:") = NSRect, NSString;
overload selector(#"decodeSize") = NSSize;
overload selector(#"decodeSizeForKey:") = NSSize, NSString;
overload selector(#"decodeValueOfObjCType:at:") = Void, Pointer[CChar], RawPointer;
overload varargSelector(#"decodeValuesOfObjCTypes:") = Void, Pointer[CChar];
overload selector(#"decomposableCharacterSet") = Id;
overload selector(#"decomposedStringWithCanonicalMapping") = NSString;
overload selector(#"decomposedStringWithCompatibilityMapping") = NSString;
overload selector(#"deepestScreen") = NSScreen;
overload selector(#"defaultActionForKey:") = Id, NSString;
overload selector(#"defaultAnimationForKey:") = Id, NSString;
overload selector(#"defaultAttachmentScaling") = CULong;
overload selector(#"defaultBaselineOffsetForFont:") = Double, NSFont;
overload selector(#"defaultBehavior") = Id;
overload selector(#"defaultButtonCell") = NSButtonCell;
overload selector(#"defaultButtonTitle") = NSString;
overload selector(#"defaultCStringEncoding") = CULong;
overload selector(#"defaultCenter") = Id;
overload selector(#"defaultCollector") = Id;
overload selector(#"defaultColumnWidth") = Double;
overload selector(#"defaultCompletionDelay") = Double;
overload selector(#"defaultConnection") = NSConnection;
overload selector(#"defaultCredentialForProtectionSpace:") = NSURLCredential, NSURLProtectionSpace;
overload selector(#"defaultDate") = NSDate;
overload selector(#"defaultDecimalNumberHandler") = Id;
overload selector(#"defaultDepthLimit") = Int;
overload selector(#"defaultFetchRequest") = NSFetchRequest;
overload selector(#"defaultFlatness") = Double;
overload selector(#"defaultFocusRingType") = CULong;
overload selector(#"defaultFormatterBehavior") = CULong;
overload selector(#"defaultLineCapStyle") = CULong;
overload selector(#"defaultLineHeightForFont:") = Double, NSFont;
overload selector(#"defaultLineJoinStyle") = CULong;
overload selector(#"defaultLineWidth") = Double;
overload selector(#"defaultManager") = NSFileManager;
overload selector(#"defaultMenu") = NSMenu;
overload selector(#"defaultMiterLimit") = Double;
overload selector(#"defaultNameServerPortNumber") = UShort;
overload selector(#"defaultParagraphStyle") = NSParagraphStyle;
overload selector(#"defaultPixelFormat") = NSOpenGLPixelFormat;
overload selector(#"defaultPlaceholderForMarker:withBinding:") = Id, Id, NSString;
overload selector(#"defaultPrinter") = NSPrinter;
overload selector(#"defaultQueue") = Id;
overload selector(#"defaultSubcontainerAttributeKey") = NSString;
overload selector(#"defaultTabInterval") = Double;
overload selector(#"defaultTimeZone") = NSTimeZone;
overload selector(#"defaultTokenizingCharacterSet") = NSCharacterSet;
overload selector(#"defaultType") = NSString;
overload selector(#"defaultTypesetterBehavior") = CLong;
overload selector(#"defaultValue") = Id;
overload selector(#"defaultValueForKey:") = Id, NSString;
overload selector(#"defaultVoice") = NSString;
overload selector(#"defaultWindingRule") = CULong;
overload selector(#"defaultWritingDirectionForLanguage:") = CLong, NSString;
overload selector(#"defaults") = NSUserDefaults;
overload selector(#"definition") = CIFilterShape;
overload selector(#"delegate") = Id;
overload selector(#"delete:") = Void, Id;
overload selector(#"deleteBackward:") = Void, Id;
overload selector(#"deleteBackwardByDecomposingPreviousCharacter:") = Void, Id;
overload selector(#"deleteCharactersInRange:") = Void, NSRange;
overload selector(#"deleteCookie:") = Void, NSHTTPCookie;
overload selector(#"deleteForward:") = Void, Id;
overload selector(#"deleteGlyphsInRange:") = Void, NSRange;
overload selector(#"deleteToBeginningOfLine:") = Void, Id;
overload selector(#"deleteToBeginningOfParagraph:") = Void, Id;
overload selector(#"deleteToEndOfLine:") = Void, Id;
overload selector(#"deleteToEndOfParagraph:") = Void, Id;
overload selector(#"deleteToMark:") = Void, Id;
overload selector(#"deleteWordBackward:") = Void, Id;
overload selector(#"deleteWordForward:") = Void, Id;
overload selector(#"deletesFileUponFailure") = Bool;
overload selector(#"deliverResult") = Bool;
overload selector(#"deltaX") = Double;
overload selector(#"deltaY") = Double;
overload selector(#"deltaZ") = Double;
overload selector(#"deminiaturize:") = Void, Id;
overload selector(#"dependencies") = NSArray;
overload selector(#"depth") = Int;
overload selector(#"depthLimit") = Int;
overload selector(#"dequeueNotificationsMatching:coalesceMask:") = Void, NSNotification, CULong;
overload selector(#"descendantNodeAtIndexPath:") = NSTreeNode, NSIndexPath;
overload selector(#"descender") = Double;
overload selector(#"description") = NSString;
overload selector(#"descriptionFunction") = CCodePointer[[RawPointer],[NSString]];
overload selector(#"descriptionInStringsFileFormat") = NSString;
overload selector(#"descriptionWithCalendarFormat:") = NSString, NSString;
overload selector(#"descriptionWithCalendarFormat:locale:") = NSString, NSString, Id;
overload selector(#"descriptionWithCalendarFormat:timeZone:locale:") = NSString, NSString, NSTimeZone, Id;
overload selector(#"descriptionWithLocale:") = NSString, Id;
overload selector(#"descriptionWithLocale:indent:") = NSString, Id, CULong;
overload selector(#"descriptor") = NSAppleEventDescriptor;
overload selector(#"descriptorAtIndex:") = NSAppleEventDescriptor, CLong;
overload selector(#"descriptorForKeyword:") = NSAppleEventDescriptor, UInt;
overload selector(#"descriptorType") = UInt;
overload selector(#"descriptorWithBoolean:") = NSAppleEventDescriptor, CUChar;
overload selector(#"descriptorWithDescriptorType:bytes:length:") = NSAppleEventDescriptor, UInt, RawPointer, CULong;
overload selector(#"descriptorWithDescriptorType:data:") = NSAppleEventDescriptor, UInt, NSData;
overload selector(#"descriptorWithEnumCode:") = NSAppleEventDescriptor, UInt;
overload selector(#"descriptorWithInt32:") = NSAppleEventDescriptor, Int;
overload selector(#"descriptorWithString:") = NSAppleEventDescriptor, NSString;
overload selector(#"descriptorWithTypeCode:") = NSAppleEventDescriptor, UInt;
overload selector(#"deselectAll:") = Void, Id;
overload selector(#"deselectAllCells") = Void;
overload selector(#"deselectColumn:") = Void, CLong;
overload selector(#"deselectItemAtIndex:") = Void, CLong;
overload selector(#"deselectRow:") = Void, CLong;
overload selector(#"deselectSelectedCell") = Void;
overload selector(#"desktopImageOptionsForScreen:") = NSDictionary, NSScreen;
overload selector(#"desktopImageURLForScreen:") = NSURL, NSScreen;
overload selector(#"destinationOfSymbolicLinkAtPath:error:") = NSString, NSString, Pointer[NSError];
overload selector(#"destroyContext") = Void;
overload selector(#"detach") = Void;
overload selector(#"detachColorList:") = Void, NSColorList;
overload selector(#"detachDrawingThread:toTarget:withObject:") = Void, SelectorHandle, Id, Id;
overload selector(#"detachNewThreadSelector:toTarget:withObject:") = Void, SelectorHandle, Id, Id;
overload selector(#"developmentLocalization") = NSString;
overload selector(#"device") = Id;
overload selector(#"deviceCMYKColorSpace") = NSColorSpace;
overload selector(#"deviceDescription") = NSDictionary;
overload selector(#"deviceGrayColorSpace") = NSColorSpace;
overload selector(#"deviceID") = CULong;
overload selector(#"deviceRGBColorSpace") = NSColorSpace;
overload selector(#"deviceSize") = NSSize;
overload selector(#"dictionary") = Id;
overload selector(#"dictionaryForKey:") = NSDictionary, NSString;
overload selector(#"dictionaryFromTXTRecordData:") = NSDictionary, NSData;
overload selector(#"dictionaryRepresentation") = NSDictionary;
overload selector(#"dictionaryWithCapacity:") = Id, CULong;
overload selector(#"dictionaryWithContentsOfFile:") = Id, NSString;
overload selector(#"dictionaryWithContentsOfURL:") = Id, NSURL;
overload selector(#"dictionaryWithDictionary:") = Id, NSDictionary;
overload selector(#"dictionaryWithObject:forKey:") = Id, Id, Id;
overload selector(#"dictionaryWithObjects:forKeys:") = Id, NSArray, NSArray;
overload selector(#"dictionaryWithObjects:forKeys:count:") = Id, Pointer[Id], Pointer[Id], CULong;
overload varargSelector(#"dictionaryWithObjectsAndKeys:") = Id, Id;
overload selector(#"dictionaryWithValuesForKeys:") = NSDictionary, NSArray;
overload selector(#"didAddSubview:") = Void, NSView;
overload selector(#"didChange:valuesAtIndexes:forKey:") = Void, CULong, NSIndexSet, NSString;
overload selector(#"didChangeArrangementCriteria") = Void;
overload selector(#"didChangeText") = Void;
overload selector(#"didChangeValueForKey:") = Void, NSString;
overload selector(#"didChangeValueForKey:withSetMutation:usingObjects:") = Void, NSString, CULong, NSSet;
overload selector(#"didLoadBytes:loadComplete:") = Void, NSData, Bool;
overload selector(#"directParameter") = Id;
overload selector(#"directory") = NSString;
overload selector(#"directoryAttributes") = NSDictionary;
overload selector(#"directoryContentsAtPath:") = NSArray, NSString;
overload selector(#"directoryURL") = NSURL;
overload selector(#"disable") = Void;
overload selector(#"disableCollectorForPointer:") = Void, RawPointer;
overload selector(#"disableCursorRects") = Void;
overload selector(#"disableFlushWindow") = Void;
overload selector(#"disableKeyEquivalentForDefaultButtonCell") = Void;
overload selector(#"disableScreenUpdatesUntilFlush") = Void;
overload selector(#"disableSuddenTermination") = Void;
overload selector(#"disableUndoRegistration") = Void;
overload selector(#"disableUpdates") = Void;
overload selector(#"disabledControlTextColor") = NSColor;
overload selector(#"disappearingItemCursor") = NSCursor;
overload selector(#"discardCachedImage") = Void;
overload selector(#"discardContentIfPossible") = Void;
overload selector(#"discardCursorRects") = Void;
overload selector(#"discardEditing") = Void;
overload selector(#"discardEventsMatchingMask:beforeEvent:") = Void, CULong, NSEvent;
overload selector(#"discardMarkedText") = Void;
overload selector(#"diskCapacity") = CULong;
overload selector(#"dismissPopUp") = Void;
overload selector(#"dispatch") = Void;
overload selector(#"dispatchRawAppleEvent:withRawReply:handlerRefCon:") = Short, Pointer[AppleEvent], Pointer[AppleEvent], SRefCon;
overload selector(#"display") = Void;
overload selector(#"displayAllColumns") = Void;
overload selector(#"displayColumn:") = Void, CLong;
overload selector(#"displayIfNeeded") = Void;
overload selector(#"displayIfNeededIgnoringOpacity") = Void;
overload selector(#"displayIfNeededInRect:") = Void, NSRect;
overload selector(#"displayIfNeededInRectIgnoringOpacity:") = Void, NSRect;
overload selector(#"displayLayer:") = Void, CALayer;
overload selector(#"displayMode") = CULong;
overload selector(#"displayName") = NSString;
overload selector(#"displayNameAtPath:") = NSString, NSString;
overload selector(#"displayNameForKey:value:") = NSString, Id, Id;
overload selector(#"displayNameForType:") = NSString, NSString;
overload selector(#"displayRect:") = Void, NSRect;
overload selector(#"displayRectIgnoringOpacity:") = Void, NSRect;
overload selector(#"displayRectIgnoringOpacity:inContext:") = Void, NSRect, NSGraphicsContext;
overload selector(#"displayValuesForRow:") = NSArray, CLong;
overload selector(#"displayValuesKeyPath") = NSString;
overload selector(#"displayableSubpredicatesOfPredicate:") = NSArray, NSPredicate;
overload selector(#"displayedCommandsTitle") = NSString;
overload selector(#"displaysLinkToolTips") = Bool;
overload selector(#"displaysWhenScreenProfileChanges") = Bool;
overload selector(#"dissolveToPoint:fraction:") = Void, NSPoint, Double;
overload selector(#"dissolveToPoint:fromRect:fraction:") = Void, NSPoint, NSRect, Double;
overload selector(#"distantFuture") = Id;
overload selector(#"distantPast") = Id;
overload selector(#"distinguishedNames") = NSArray;
overload selector(#"dividerColor") = NSColor;
overload selector(#"dividerStyle") = CLong;
overload selector(#"dividerThickness") = Double;
overload selector(#"doClick:") = Void, Id;
overload selector(#"doCommandBySelector:") = Void, SelectorHandle;
overload selector(#"doCommandBySelector:client:") = Void, SelectorHandle, Id;
overload selector(#"doDoubleClick:") = Void, Id;
overload selector(#"docFormatFromRange:documentAttributes:") = NSData, NSRange, NSDictionary;
overload selector(#"dockMenu") = NSMenu;
overload selector(#"dockTile") = NSDockTile;
overload selector(#"document") = Id;
overload selector(#"documentClassForType:") = Id, NSString;
overload selector(#"documentClassNames") = NSArray;
overload selector(#"documentContentKind") = CULong;
overload selector(#"documentCursor") = NSCursor;
overload selector(#"documentForFileName:") = Id, NSString;
overload selector(#"documentForURL:") = Id, NSURL;
overload selector(#"documentForWindow:") = Id, NSWindow;
overload selector(#"documentRect") = NSRect;
overload selector(#"documentView") = Id;
overload selector(#"documentVisibleRect") = NSRect;
overload selector(#"documentWithRootElement:") = Id, NSXMLElement;
overload selector(#"documents") = NSArray;
overload selector(#"doesContain:") = Bool, Id;
overload selector(#"doesNotRecognizeSelector:") = Void, SelectorHandle;
overload selector(#"doesRelativeDateFormatting") = Bool;
overload selector(#"domain") = NSString;
overload selector(#"dominantLanguage") = NSString;
overload selector(#"dominantLanguageForScript:") = NSString, NSString;
overload selector(#"dominantScript") = NSString;
overload selector(#"doubleAction") = SelectorHandle;
overload selector(#"doubleClickAtIndex:") = NSRange, CULong;
overload selector(#"doubleClickInterval") = Double;
overload selector(#"doubleForKey:") = Double, NSString;
overload selector(#"doubleValue") = Double;
overload selector(#"download:canAuthenticateAgainstProtectionSpace:") = Bool, NSURLDownload, NSURLProtectionSpace;
overload selector(#"download:decideDestinationWithSuggestedFilename:") = Void, NSURLDownload, NSString;
overload selector(#"download:didCancelAuthenticationChallenge:") = Void, NSURLDownload, NSURLAuthenticationChallenge;
overload selector(#"download:didCreateDestination:") = Void, NSURLDownload, NSString;
overload selector(#"download:didFailWithError:") = Void, NSURLDownload, NSError;
overload selector(#"download:didReceiveAuthenticationChallenge:") = Void, NSURLDownload, NSURLAuthenticationChallenge;
overload selector(#"download:didReceiveDataOfLength:") = Void, NSURLDownload, CULong;
overload selector(#"download:didReceiveResponse:") = Void, NSURLDownload, NSURLResponse;
overload selector(#"download:shouldDecodeSourceDataOfMIMEType:") = Bool, NSURLDownload, NSString;
overload selector(#"download:willResumeWithResponse:fromByte:") = Void, NSURLDownload, NSURLResponse, Int64;
overload selector(#"download:willSendRequest:redirectResponse:") = NSURLRequest, NSURLDownload, NSURLRequest, NSURLResponse;
overload selector(#"downloadDidBegin:") = Void, NSURLDownload;
overload selector(#"downloadDidFinish:") = Void, NSURLDownload;
overload selector(#"downloadShouldUseCredentialStorage:") = Bool, NSURLDownload;
overload selector(#"dragColor:withEvent:fromView:") = Bool, NSColor, NSEvent, NSView;
overload selector(#"dragCopyCursor") = NSCursor;
overload selector(#"dragFile:fromRect:slideBack:event:") = Bool, NSString, NSRect, Bool, NSEvent;
overload selector(#"dragImage:at:offset:event:pasteboard:source:slideBack:") = Void, NSImage, NSPoint, NSSize, NSEvent, NSPasteboard, Id, Bool;
overload selector(#"dragImageForRows:event:dragImageOffset:") = NSImage, NSArray, NSEvent, NSPointPointer;
overload selector(#"dragImageForRowsWithIndexes:tableColumns:event:offset:") = NSImage, NSIndexSet, NSArray, NSEvent, NSPointPointer;
overload selector(#"dragImageForSelectionWithEvent:origin:") = NSImage, NSEvent, NSPointPointer;
overload selector(#"dragLinkCursor") = NSCursor;
overload selector(#"dragOperationForDraggingInfo:type:") = CULong, Id, NSString;
overload selector(#"dragPromisedFilesOfTypes:fromRect:source:slideBack:event:") = Bool, NSArray, NSRect, Id, Bool, NSEvent;
overload selector(#"dragSelectionWithEvent:offset:slideBack:") = Bool, NSEvent, NSSize, Bool;
overload selector(#"draggedColumn") = CLong;
overload selector(#"draggedDistance") = Double;
overload selector(#"draggedImage") = NSImage;
overload selector(#"draggedImage:beganAt:") = Void, NSImage, NSPoint;
overload selector(#"draggedImage:endedAt:deposited:") = Void, NSImage, NSPoint, Bool;
overload selector(#"draggedImage:endedAt:operation:") = Void, NSImage, NSPoint, CULong;
overload selector(#"draggedImage:movedTo:") = Void, NSImage, NSPoint;
overload selector(#"draggedImageLocation") = NSPoint;
overload selector(#"draggingDestinationFeedbackStyle") = CLong;
overload selector(#"draggingDestinationWindow") = NSWindow;
overload selector(#"draggingEnded:") = Void, Id;
overload selector(#"draggingEntered:") = CULong, Id;
overload selector(#"draggingExited:") = Void, Id;
overload selector(#"draggingImageForItemsAtIndexes:withEvent:offset:") = NSImage, NSIndexSet, NSEvent, NSPointPointer;
overload selector(#"draggingImageForRowsWithIndexes:inColumn:withEvent:offset:") = NSImage, NSIndexSet, CLong, NSEvent, NSPointPointer;
overload selector(#"draggingLocation") = NSPoint;
overload selector(#"draggingPasteboard") = NSPasteboard;
overload selector(#"draggingSequenceNumber") = CLong;
overload selector(#"draggingSource") = Id;
overload selector(#"draggingSourceOperationMask") = CULong;
overload selector(#"draggingSourceOperationMaskForLocal:") = CULong, Bool;
overload selector(#"draggingUpdated:") = CULong, Id;
overload selector(#"drain") = Void;
overload selector(#"draw") = Bool;
overload selector(#"drawArrow:highlight:") = Void, CULong, Bool;
overload selector(#"drawAtPoint:") = Bool, NSPoint;
overload selector(#"drawAtPoint:fromRect:operation:fraction:") = Void, NSPoint, NSRect, CULong, Double;
overload selector(#"drawAtPoint:withAttributes:") = Void, NSPoint, NSDictionary;
overload selector(#"drawBackgroundForBlock:withFrame:inView:characterRange:layoutManager:") = Void, NSTextTableBlock, NSRect, NSView, NSRange, NSLayoutManager;
overload selector(#"drawBackgroundForGlyphRange:atPoint:") = Void, NSRange, NSPoint;
overload selector(#"drawBackgroundInClipRect:") = Void, NSRect;
overload selector(#"drawBackgroundWithFrame:inView:characterRange:layoutManager:") = Void, NSRect, NSView, NSRange, NSLayoutManager;
overload selector(#"drawBarInside:flipped:") = Void, NSRect, Bool;
overload selector(#"drawBezelWithFrame:inView:") = Void, NSRect, NSView;
overload selector(#"drawBorderAndBackgroundWithFrame:inView:") = Void, NSRect, NSView;
overload selector(#"drawCell:") = Void, NSCell;
overload selector(#"drawCellAtIndex:") = Void, CLong;
overload selector(#"drawCellAtRow:column:") = Void, CLong, CLong;
overload selector(#"drawCellInside:") = Void, NSCell;
overload selector(#"drawDividerInRect:") = Void, NSRect;
overload selector(#"drawFromCenter:radius:toCenter:radius:options:") = Void, NSPoint, Double, NSPoint, Double, CULong;
overload selector(#"drawFromPoint:toPoint:options:") = Void, NSPoint, NSPoint, CULong;
overload selector(#"drawGlyphsForGlyphRange:atPoint:") = Void, NSRange, NSPoint;
overload selector(#"drawGridInClipRect:") = Void, NSRect;
overload selector(#"drawHashMarksAndLabelsInRect:") = Void, NSRect;
overload selector(#"drawImage:withFrame:inView:") = Void, NSImage, NSRect, NSView;
overload selector(#"drawImageWithFrame:inView:") = Void, NSRect, NSView;
overload selector(#"drawInBezierPath:angle:") = Void, NSBezierPath, Double;
overload selector(#"drawInBezierPath:relativeCenterPosition:") = Void, NSBezierPath, NSPoint;
overload selector(#"drawInCGLContext:pixelFormat:forLayerTime:displayTime:") = Void, CGLContextObj, CGLPixelFormatObj, Double, Pointer[CVTimeStamp];
overload selector(#"drawInContext:") = Void, CGContextRef;
overload selector(#"drawInOpenGLContext:pixelFormat:forLayerTime:displayTime:") = Void, NSOpenGLContext, NSOpenGLPixelFormat, Double, Pointer[CVTimeStamp];
overload selector(#"drawInRect:") = Bool, NSRect;
overload selector(#"drawInRect:angle:") = Void, NSRect, Double;
overload selector(#"drawInRect:fromRect:operation:fraction:") = Void, NSRect, NSRect, CULong, Double;
overload selector(#"drawInRect:fromRect:operation:fraction:respectFlipped:hints:") = Bool, NSRect, NSRect, CULong, Double, Bool, NSDictionary;
overload selector(#"drawInRect:relativeCenterPosition:") = Void, NSRect, NSPoint;
overload selector(#"drawInRect:withAttributes:") = Void, NSRect, NSDictionary;
overload selector(#"drawInsertionPointInRect:color:turnedOn:") = Void, NSRect, NSColor, Bool;
overload selector(#"drawInteriorWithFrame:inView:") = Void, NSRect, NSView;
overload selector(#"drawKeyEquivalentWithFrame:inView:") = Void, NSRect, NSView;
overload selector(#"drawKnob") = Void;
overload selector(#"drawKnob:") = Void, NSRect;
overload selector(#"drawKnobSlotInRect:highlight:") = Void, NSRect, Bool;
overload selector(#"drawLabel:inRect:") = Void, Bool, NSRect;
overload selector(#"drawLayer:inContext:") = Void, CALayer, CGContextRef;
overload selector(#"drawMarkersInRect:") = Void, NSRect;
overload selector(#"drawPackedGlyphs:atPoint:") = Void, Pointer[CChar], NSPoint;
overload selector(#"drawPageBorderWithSize:") = Void, NSSize;
overload selector(#"drawParts") = Void;
overload selector(#"drawRect:") = Void, NSRect;
overload selector(#"drawRepresentation:inRect:") = Bool, NSImageRep, NSRect;
overload selector(#"drawRow:clipRect:") = Void, CLong, NSRect;
overload selector(#"drawSegment:inFrame:withView:") = Void, CLong, NSRect, NSView;
overload selector(#"drawSelector") = SelectorHandle;
overload selector(#"drawSeparatorItemWithFrame:inView:") = Void, NSRect, NSView;
overload selector(#"drawSheetBorderWithSize:") = Void, NSSize;
overload selector(#"drawSortIndicatorWithFrame:inView:ascending:priority:") = Void, NSRect, NSView, Bool, CLong;
overload selector(#"drawStateImageWithFrame:inView:") = Void, NSRect, NSView;
overload selector(#"drawStatusBarBackgroundInRect:withHighlight:") = Void, NSRect, Bool;
overload selector(#"drawStrikethroughForGlyphRange:strikethroughType:baselineOffset:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:") = Void, NSRange, CLong, Double, NSRect, NSRange, NSPoint;
overload selector(#"drawSwatchInRect:") = Void, NSRect;
overload selector(#"drawTitle:withFrame:inView:") = NSRect, NSAttributedString, NSRect, NSView;
overload selector(#"drawTitleOfColumn:inRect:") = Void, CLong, NSRect;
overload selector(#"drawTitleWithFrame:inView:") = Void, NSRect, NSView;
overload selector(#"drawUnderlineForGlyphRange:underlineType:baselineOffset:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:") = Void, NSRange, CLong, Double, NSRect, NSRange, NSPoint;
overload selector(#"drawViewBackgroundInRect:") = Void, NSRect;
overload selector(#"drawWellInside:") = Void, NSRect;
overload selector(#"drawWithExpansionFrame:inView:") = Void, NSRect, NSView;
overload selector(#"drawWithFrame:inView:") = Void, NSRect, NSView;
overload selector(#"drawWithFrame:inView:characterIndex:") = Void, NSRect, NSView, CULong;
overload selector(#"drawWithFrame:inView:characterIndex:layoutManager:") = Void, NSRect, NSView, CULong, NSLayoutManager;
overload selector(#"drawWithRect:options:") = Void, NSRect, CLong;
overload selector(#"drawWithRect:options:attributes:") = Void, NSRect, CLong, NSDictionary;
overload selector(#"drawerDidClose:") = Void, NSNotification;
overload selector(#"drawerDidOpen:") = Void, NSNotification;
overload selector(#"drawerShouldClose:") = Bool, NSDrawer;
overload selector(#"drawerShouldOpen:") = Bool, NSDrawer;
overload selector(#"drawerWillClose:") = Void, NSNotification;
overload selector(#"drawerWillOpen:") = Void, NSNotification;
overload selector(#"drawerWillResizeContents:toSize:") = NSSize, NSDrawer, NSSize;
overload selector(#"drawers") = NSArray;
overload selector(#"drawingRectForBounds:") = NSRect, NSRect;
overload selector(#"drawsBackground") = Bool;
overload selector(#"drawsCellBackground") = Bool;
overload selector(#"drawsGrid") = Bool;
overload selector(#"drawsOutsideLineFragmentForGlyphAtIndex:") = Bool, CULong;
overload selector(#"drawsVerticallyForCharacterAtIndex:") = Bool, CULong;
overload selector(#"duplicateURLs:completionHandler:") = Void, NSArray, UnknownType;
overload selector(#"duration") = Double;
overload selector(#"earlierDate:") = NSDate, NSDate;
overload selector(#"echosBullets") = Bool;
overload selector(#"edge") = CULong;
overload selector(#"edgeAntialiasingMask") = UInt;
overload selector(#"editColumn:row:withEvent:select:") = Void, CLong, CLong, NSEvent, Bool;
overload selector(#"editItemAtIndexPath:withEvent:select:") = Void, NSIndexPath, NSEvent, Bool;
overload selector(#"editWithFrame:inView:editor:delegate:event:") = Void, NSRect, NSView, NSText, Id, NSEvent;
overload selector(#"edited:range:changeInLength:") = Void, CULong, NSRange, CLong;
overload selector(#"editedColumn") = CLong;
overload selector(#"editedMask") = CULong;
overload selector(#"editedRange") = NSRange;
overload selector(#"editedRow") = CLong;
overload selector(#"editingStringForObjectValue:") = NSString, Id;
overload selector(#"elementAtIndex:") = CULong, CLong;
overload selector(#"elementAtIndex:associatedPoints:") = CULong, CLong, NSPointArray;
overload selector(#"elementCount") = CLong;
overload selector(#"elementDeclarationForName:") = NSXMLDTDNode, NSString;
overload selector(#"elementWithName:") = Id, NSString;
overload selector(#"elementWithName:URI:") = Id, NSString, NSString;
overload selector(#"elementWithName:children:attributes:") = Id, NSString, NSArray, NSArray;
overload selector(#"elementWithName:stringValue:") = Id, NSString, NSString;
overload selector(#"elementsForLocalName:URI:") = NSArray, NSString, NSString;
overload selector(#"elementsForName:") = NSArray, NSString;
overload selector(#"emptyImage") = CIImage;
overload selector(#"enable") = Void;
overload selector(#"enableCollectorForPointer:") = Void, RawPointer;
overload selector(#"enableCursorRects") = Void;
overload selector(#"enableFlushWindow") = Void;
overload selector(#"enableKeyEquivalentForDefaultButtonCell") = Void;
overload selector(#"enableMultipleThreads") = Void;
overload selector(#"enableSuddenTermination") = Void;
overload selector(#"enableUndoRegistration") = Void;
overload selector(#"enableUpdates") = Void;
overload selector(#"enabledTextCheckingTypes") = UInt64;
overload selector(#"enclosingMenuItem") = NSMenuItem;
overload selector(#"enclosingScrollView") = NSScrollView;
overload selector(#"encodeArrayOfObjCType:count:at:") = Void, Pointer[CChar], CULong, RawPointer;
overload selector(#"encodeBool:forKey:") = Void, Bool, NSString;
overload selector(#"encodeBycopyObject:") = Void, Id;
overload selector(#"encodeByrefObject:") = Void, Id;
overload selector(#"encodeBytes:length:") = Void, RawPointer, CULong;
overload selector(#"encodeBytes:length:forKey:") = Void, Pointer[CUChar], CULong, NSString;
overload selector(#"encodeClassName:intoClassName:") = Void, NSString, NSString;
overload selector(#"encodeConditionalObject:") = Void, Id;
overload selector(#"encodeConditionalObject:forKey:") = Void, Id, NSString;
overload selector(#"encodeDataObject:") = Void, NSData;
overload selector(#"encodeDouble:forKey:") = Void, Double, NSString;
overload selector(#"encodeFloat:forKey:") = Void, Float, NSString;
overload selector(#"encodeInt32:forKey:") = Void, Int, NSString;
overload selector(#"encodeInt64:forKey:") = Void, Int64, NSString;
overload selector(#"encodeInt:forKey:") = Void, Int, NSString;
overload selector(#"encodeInteger:forKey:") = Void, CLong, NSString;
overload selector(#"encodeNXObject:") = Void, Id;
overload selector(#"encodeObject:") = Void, Id;
overload selector(#"encodeObject:forKey:") = Void, Id, NSString;
overload selector(#"encodePoint:") = Void, NSPoint;
overload selector(#"encodePoint:forKey:") = Void, NSPoint, NSString;
overload selector(#"encodePortObject:") = Void, NSPort;
overload selector(#"encodePropertyList:") = Void, Id;
overload selector(#"encodeRect:") = Void, NSRect;
overload selector(#"encodeRect:forKey:") = Void, NSRect, NSString;
overload selector(#"encodeRootObject:") = Void, Id;
overload selector(#"encodeSize:") = Void, NSSize;
overload selector(#"encodeSize:forKey:") = Void, NSSize, NSString;
overload selector(#"encodeValueOfObjCType:at:") = Void, Pointer[CChar], RawPointer;
overload varargSelector(#"encodeValuesOfObjCTypes:") = Void, Pointer[CChar];
overload selector(#"encodeWithCoder:") = Void, NSCoder;
overload selector(#"endContentAccess") = Void;
overload selector(#"endDocument") = Void;
overload selector(#"endEditing") = Void;
overload selector(#"endEditing:") = Void, NSText;
overload selector(#"endEditingFor:") = Void, Id;
overload selector(#"endGestureWithEvent:") = Void, NSEvent;
overload selector(#"endGrouping") = Void;
overload selector(#"endLineWithGlyphRange:") = Void, NSRange;
overload selector(#"endLoadInBackground") = Void;
overload selector(#"endModalSession:") = Void, NSModalSession;
overload selector(#"endPage") = Void;
overload selector(#"endParagraph") = Void;
overload selector(#"endSheet:") = Void, NSWindow;
overload selector(#"endSheet:returnCode:") = Void, NSWindow, CLong;
overload selector(#"endSpecifier") = NSScriptObjectSpecifier;
overload selector(#"endSubelementIdentifier") = CULong;
overload selector(#"endSubelementIndex") = CLong;
overload selector(#"endUndoGrouping") = Void;
overload selector(#"enqueueNotification:postingStyle:") = Void, NSNotification, CULong;
overload selector(#"enqueueNotification:postingStyle:coalesceMask:forModes:") = Void, NSNotification, CULong, CULong, NSArray;
overload selector(#"ensureAttributesAreFixedInRange:") = Void, NSRange;
overload selector(#"ensureGlyphsForCharacterRange:") = Void, NSRange;
overload selector(#"ensureGlyphsForGlyphRange:") = Void, NSRange;
overload selector(#"ensureLayoutForBoundingRect:inTextContainer:") = Void, NSRect, NSTextContainer;
overload selector(#"ensureLayoutForCharacterRange:") = Void, NSRange;
overload selector(#"ensureLayoutForGlyphRange:") = Void, NSRange;
overload selector(#"ensureLayoutForTextContainer:") = Void, NSTextContainer;
overload selector(#"enterExitEventWithType:location:modifierFlags:timestamp:windowNumber:context:eventNumber:trackingNumber:userData:") = NSEvent, CULong, NSPoint, CULong, Double, CLong, NSGraphicsContext, CLong, CLong, RawPointer;
overload selector(#"enterFullScreenMode:withOptions:") = Bool, NSScreen, NSDictionary;
overload selector(#"entity") = NSEntityDescription;
overload selector(#"entityDeclarationForName:") = NSXMLDTDNode, NSString;
overload selector(#"entityName") = NSString;
overload selector(#"entryType") = CLong;
overload selector(#"enumCodeValue") = UInt;
overload selector(#"enumerateAttribute:inRange:options:usingBlock:") = Void, NSString, NSRange, CULong, UnknownType;
overload selector(#"enumerateAttributesInRange:options:usingBlock:") = Void, NSRange, CULong, UnknownType;
overload selector(#"enumerateIndexesInRange:options:usingBlock:") = Void, NSRange, CULong, UnknownType;
overload selector(#"enumerateIndexesUsingBlock:") = Void, UnknownType;
overload selector(#"enumerateIndexesWithOptions:usingBlock:") = Void, CULong, UnknownType;
overload selector(#"enumerateKeysAndObjectsUsingBlock:") = Void, UnknownType;
overload selector(#"enumerateKeysAndObjectsWithOptions:usingBlock:") = Void, CULong, UnknownType;
overload selector(#"enumerateLinesUsingBlock:") = Void, UnknownType;
overload selector(#"enumerateObjectsAtIndexes:options:usingBlock:") = Void, NSIndexSet, CULong, UnknownType;
overload selector(#"enumerateObjectsUsingBlock:") = Void, UnknownType;
overload selector(#"enumerateObjectsWithOptions:usingBlock:") = Void, CULong, UnknownType;
overload selector(#"enumerateSubstringsInRange:options:usingBlock:") = Void, NSRange, CULong, UnknownType;
overload selector(#"enumeratorAtPath:") = NSDirectoryEnumerator, NSString;
overload selector(#"enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:") = NSDirectoryEnumerator, NSURL, NSArray, CULong, UnknownType;
overload selector(#"environment") = NSDictionary;
overload selector(#"era") = CLong;
overload selector(#"eraSymbols") = NSArray;
overload selector(#"error") = NSError;
overload selector(#"errorWithDomain:code:userInfo:") = Id, NSString, CLong, NSDictionary;
overload selector(#"evaluate") = Void;
overload selector(#"evaluateWithObject:") = Bool, Id;
overload selector(#"evaluateWithObject:substitutionVariables:") = Bool, Id, NSDictionary;
overload selector(#"evaluatedArguments") = NSDictionary;
overload selector(#"evaluatedReceivers") = Id;
overload selector(#"evaluationErrorNumber") = CLong;
overload selector(#"evaluationErrorSpecifier") = NSScriptObjectSpecifier;
overload selector(#"eventClass") = UInt;
overload selector(#"eventID") = UInt;
overload selector(#"eventNumber") = CLong;
overload selector(#"eventRef") = RawPointer;
overload selector(#"eventWithCGEvent:") = NSEvent, CGEventRef;
overload selector(#"eventWithEventRef:") = NSEvent, RawPointer;
overload selector(#"evictsObjectsWithDiscardedContent") = Bool;
overload selector(#"exceptionDuringOperation:error:leftOperand:rightOperand:") = NSDecimalNumber, SelectorHandle, CULong, NSDecimalNumber, NSDecimalNumber;
overload selector(#"exceptionWithName:reason:userInfo:") = NSException, NSString, NSString, NSDictionary;
overload selector(#"exchangeObjectAtIndex:withObjectAtIndex:") = Void, CULong, CULong;
overload selector(#"excludedKeys") = NSArray;
overload selector(#"executableArchitecture") = CLong;
overload selector(#"executableArchitectures") = NSArray;
overload selector(#"executablePath") = NSString;
overload selector(#"executableURL") = NSURL;
overload selector(#"executeAndReturnError:") = NSAppleEventDescriptor, Pointer[NSDictionary];
overload selector(#"executeAppleEvent:error:") = NSAppleEventDescriptor, NSAppleEventDescriptor, Pointer[NSDictionary];
overload selector(#"executeCommand") = Id;
overload selector(#"executionBlocks") = NSArray;
overload selector(#"exit") = Void;
overload selector(#"exitFullScreenModeWithOptions:") = Void, NSDictionary;
overload selector(#"expandItem:") = Void, Id;
overload selector(#"expandItem:expandChildren:") = Void, Id, Bool;
overload selector(#"expansionFrameWithFrame:inView:") = NSRect, NSRect, NSView;
overload selector(#"expectedContentLength") = Int64;
overload selector(#"expectedResourceDataSize") = Int64;
overload selector(#"expiresDate") = NSDate;
overload selector(#"exponentSymbol") = NSString;
overload selector(#"exposeBinding:") = Void, NSString;
overload selector(#"exposedBindings") = NSArray;
overload selector(#"expressionBlock") = UnknownType;
overload selector(#"expressionForAggregate:") = NSExpression, NSArray;
overload selector(#"expressionForBlock:arguments:") = NSExpression, UnknownType, NSArray;
overload selector(#"expressionForConstantValue:") = NSExpression, Id;
overload selector(#"expressionForEvaluatedObject") = NSExpression;
overload selector(#"expressionForFunction:arguments:") = NSExpression, NSString, NSArray;
overload selector(#"expressionForFunction:selectorName:arguments:") = NSExpression, NSExpression, NSString, NSArray;
overload selector(#"expressionForIntersectSet:with:") = NSExpression, NSExpression, NSExpression;
overload selector(#"expressionForKeyPath:") = NSExpression, NSString;
overload selector(#"expressionForMinusSet:with:") = NSExpression, NSExpression, NSExpression;
overload selector(#"expressionForSubquery:usingIteratorVariable:predicate:") = NSExpression, NSExpression, NSString, Id;
overload selector(#"expressionForUnionSet:with:") = NSExpression, NSExpression, NSExpression;
overload selector(#"expressionForVariable:") = NSExpression, NSString;
overload selector(#"expressionType") = CULong;
overload selector(#"expressionValueWithObject:context:") = Id, Id, NSMutableDictionary;
overload selector(#"extendPowerOffBy:") = CLong, CLong;
overload selector(#"extent") = CGRect;
overload selector(#"extraLineFragmentRect") = NSRect;
overload selector(#"extraLineFragmentTextContainer") = NSTextContainer;
overload selector(#"extraLineFragmentUsedRect") = NSRect;
overload selector(#"failureReason") = NSString;
overload selector(#"failureResponse") = NSURLResponse;
overload selector(#"familyName") = NSString;
overload selector(#"fastestEncoding") = CULong;
overload selector(#"fetch:") = Void, Id;
overload selector(#"fetchPredicate") = NSPredicate;
overload selector(#"fetchWithRequest:merge:error:") = Bool, NSFetchRequest, Bool, Pointer[NSError];
overload selector(#"fieldEditor:forObject:") = NSText, Bool, Id;
overload selector(#"fieldEditorForView:") = NSTextView, NSView;
overload selector(#"fileAttributes") = NSDictionary;
overload selector(#"fileAttributesAtPath:traverseLink:") = NSDictionary, NSString, Bool;
overload selector(#"fileAttributesToWriteToFile:ofType:saveOperation:") = NSDictionary, NSString, NSString, CULong;
overload selector(#"fileAttributesToWriteToURL:ofType:forSaveOperation:originalContentsURL:error:") = NSDictionary, NSURL, NSString, CULong, NSURL, Pointer[NSError];
overload selector(#"fileCreationDate") = NSDate;
overload selector(#"fileDescriptor") = Int;
overload selector(#"fileExistsAtPath:") = Bool, NSString;
overload selector(#"fileExistsAtPath:isDirectory:") = Bool, NSString, Pointer[Bool];
overload selector(#"fileExtensionHidden") = Bool;
overload selector(#"fileExtensionsFromType:") = NSArray, NSString;
overload selector(#"fileGroupOwnerAccountID") = NSNumber;
overload selector(#"fileGroupOwnerAccountName") = NSString;
overload selector(#"fileHFSCreatorCode") = UInt;
overload selector(#"fileHFSTypeCode") = UInt;
overload selector(#"fileHandleForReading") = NSFileHandle;
overload selector(#"fileHandleForReadingAtPath:") = Id, NSString;
overload selector(#"fileHandleForReadingFromURL:error:") = Id, NSURL, Pointer[NSError];
overload selector(#"fileHandleForUpdatingAtPath:") = Id, NSString;
overload selector(#"fileHandleForUpdatingURL:error:") = Id, NSURL, Pointer[NSError];
overload selector(#"fileHandleForWriting") = NSFileHandle;
overload selector(#"fileHandleForWritingAtPath:") = Id, NSString;
overload selector(#"fileHandleForWritingToURL:error:") = Id, NSURL, Pointer[NSError];
overload selector(#"fileHandleWithNullDevice") = Id;
overload selector(#"fileHandleWithStandardError") = Id;
overload selector(#"fileHandleWithStandardInput") = Id;
overload selector(#"fileHandleWithStandardOutput") = Id;
overload selector(#"fileIsAppendOnly") = Bool;
overload selector(#"fileIsImmutable") = Bool;
overload selector(#"fileLabelColors") = NSArray;
overload selector(#"fileLabels") = NSArray;
overload selector(#"fileManager:shouldCopyItemAtPath:toPath:") = Bool, NSFileManager, NSString, NSString;
overload selector(#"fileManager:shouldCopyItemAtURL:toURL:") = Bool, NSFileManager, NSURL, NSURL;
overload selector(#"fileManager:shouldLinkItemAtPath:toPath:") = Bool, NSFileManager, NSString, NSString;
overload selector(#"fileManager:shouldLinkItemAtURL:toURL:") = Bool, NSFileManager, NSURL, NSURL;
overload selector(#"fileManager:shouldMoveItemAtPath:toPath:") = Bool, NSFileManager, NSString, NSString;
overload selector(#"fileManager:shouldMoveItemAtURL:toURL:") = Bool, NSFileManager, NSURL, NSURL;
overload selector(#"fileManager:shouldProceedAfterError:") = Bool, NSFileManager, NSDictionary;
overload selector(#"fileManager:shouldProceedAfterError:copyingItemAtPath:toPath:") = Bool, NSFileManager, NSError, NSString, NSString;
overload selector(#"fileManager:shouldProceedAfterError:copyingItemAtURL:toURL:") = Bool, NSFileManager, NSError, NSURL, NSURL;
overload selector(#"fileManager:shouldProceedAfterError:linkingItemAtPath:toPath:") = Bool, NSFileManager, NSError, NSString, NSString;
overload selector(#"fileManager:shouldProceedAfterError:linkingItemAtURL:toURL:") = Bool, NSFileManager, NSError, NSURL, NSURL;
overload selector(#"fileManager:shouldProceedAfterError:movingItemAtPath:toPath:") = Bool, NSFileManager, NSError, NSString, NSString;
overload selector(#"fileManager:shouldProceedAfterError:movingItemAtURL:toURL:") = Bool, NSFileManager, NSError, NSURL, NSURL;
overload selector(#"fileManager:shouldProceedAfterError:removingItemAtPath:") = Bool, NSFileManager, NSError, NSString;
overload selector(#"fileManager:shouldProceedAfterError:removingItemAtURL:") = Bool, NSFileManager, NSError, NSURL;
overload selector(#"fileManager:shouldRemoveItemAtPath:") = Bool, NSFileManager, NSString;
overload selector(#"fileManager:shouldRemoveItemAtURL:") = Bool, NSFileManager, NSURL;
overload selector(#"fileManager:willProcessPath:") = Void, NSFileManager, NSString;
overload selector(#"fileModificationDate") = NSDate;
overload selector(#"fileName") = NSString;
overload selector(#"fileNameExtensionForType:saveOperation:") = NSString, NSString, CULong;
overload selector(#"fileNameExtensionWasHiddenInLastRunSavePanel") = Bool;
overload selector(#"fileNamesFromRunningOpenPanel") = NSArray;
overload selector(#"fileOwnerAccountID") = NSNumber;
overload selector(#"fileOwnerAccountName") = NSString;
overload selector(#"filePathURL") = NSURL;
overload selector(#"filePosixPermissions") = CULong;
overload selector(#"fileReferenceURL") = NSURL;
overload selector(#"fileSize") = UInt64;
overload selector(#"fileSystemAttributesAtPath:") = NSDictionary, NSString;
overload selector(#"fileSystemChanged") = Bool;
overload selector(#"fileSystemFileNumber") = CULong;
overload selector(#"fileSystemNumber") = CLong;
overload selector(#"fileSystemRepresentation") = Pointer[CChar];
overload selector(#"fileSystemRepresentationWithPath:") = Pointer[CChar], NSString;
overload selector(#"fileType") = NSString;
overload selector(#"fileTypeFromLastRunSavePanel") = NSString;
overload selector(#"fileURL") = NSURL;
overload selector(#"fileURLWithPath:") = Id, NSString;
overload selector(#"fileURLWithPath:isDirectory:") = Id, NSString, Bool;
overload selector(#"fileURLWithPathComponents:") = NSURL, NSArray;
overload selector(#"fileWrapper") = NSFileWrapper;
overload selector(#"fileWrapperFromRange:documentAttributes:error:") = NSFileWrapper, NSRange, NSDictionary, Pointer[NSError];
overload selector(#"fileWrapperOfType:error:") = NSFileWrapper, NSString, Pointer[NSError];
overload selector(#"fileWrapperRepresentationOfType:") = NSFileWrapper, NSString;
overload selector(#"fileWrappers") = NSDictionary;
overload selector(#"filename") = NSString;
overload selector(#"filenameExtension:isValidForType:") = Bool, NSString, NSString;
overload selector(#"filenames") = NSArray;
overload selector(#"fill") = Void;
overload selector(#"fillBackgroundRectArray:count:forCharacterRange:color:") = Void, NSRectArray, CULong, NSRange, NSColor;
overload selector(#"fillColor") = NSColor;
overload selector(#"fillMode") = NSString;
overload selector(#"fillRect:") = Void, NSRect;
overload selector(#"filterPredicate") = NSPredicate;
overload selector(#"filterUsingPredicate:") = Void, NSPredicate;
overload selector(#"filteredArrayUsingPredicate:") = NSArray, NSPredicate;
overload selector(#"filteredSetUsingPredicate:") = NSSet, NSPredicate;
overload selector(#"filters") = NSArray;
overload selector(#"finalWritePrintInfo") = Void;
overload selector(#"finalize") = Void;
overload selector(#"findApplications") = Void;
overload selector(#"findString:inBook:") = Void, NSString, NSString;
overload selector(#"finishDecoding") = Void;
overload selector(#"finishEncoding") = Void;
overload selector(#"finishLaunching") = Void;
overload selector(#"fire") = Void;
overload selector(#"fireDate") = NSDate;
overload selector(#"firstIndex") = CULong;
overload selector(#"firstLineHeadIndent") = Double;
overload selector(#"firstObjectCommonWithArray:") = Id, NSArray;
overload selector(#"firstRectForCharacterRange:") = NSRect, NSRange;
overload selector(#"firstRectForCharacterRange:actualRange:") = NSRect, NSRange, NSRangePointer;
overload selector(#"firstResponder") = NSResponder;
overload selector(#"firstTextView") = NSTextView;
overload selector(#"firstUnlaidCharacterIndex") = CULong;
overload selector(#"firstUnlaidGlyphIndex") = CULong;
overload selector(#"firstVisibleColumn") = CLong;
overload selector(#"firstWeekday") = CULong;
overload selector(#"fixAttachmentAttributeInRange:") = Void, NSRange;
overload selector(#"fixAttributesInRange:") = Void, NSRange;
overload selector(#"fixFontAttributeInRange:") = Void, NSRange;
overload selector(#"fixParagraphStyleAttributeInRange:") = Void, NSRange;
overload selector(#"fixesAttributesLazily") = Bool;
overload selector(#"flagsChanged:") = Void, NSEvent;
overload selector(#"flatness") = Double;
overload selector(#"floatForKey:") = Float, NSString;
overload selector(#"floatForKey:inTable:") = Float, NSString, NSString;
overload selector(#"floatValue") = Float;
overload selector(#"flushBuffer") = Void;
overload selector(#"flushBufferedKeyEvents") = Void;
overload selector(#"flushCachedData") = Void;
overload selector(#"flushGraphics") = Void;
overload selector(#"flushHostCache") = Void;
overload selector(#"flushWindow") = Void;
overload selector(#"flushWindowIfNeeded") = Void;
overload selector(#"focusRingType") = CULong;
overload selector(#"focusView") = NSView;
overload selector(#"focusedColumn") = CLong;
overload selector(#"font") = NSFont;
overload selector(#"fontAttributes") = NSDictionary;
overload selector(#"fontAttributesInRange:") = NSDictionary, NSRange;
overload selector(#"fontDescriptor") = NSFontDescriptor;
overload selector(#"fontDescriptorByAddingAttributes:") = NSFontDescriptor, NSDictionary;
overload selector(#"fontDescriptorWithFace:") = NSFontDescriptor, NSString;
overload selector(#"fontDescriptorWithFamily:") = NSFontDescriptor, NSString;
overload selector(#"fontDescriptorWithFontAttributes:") = NSFontDescriptor, NSDictionary;
overload selector(#"fontDescriptorWithMatrix:") = NSFontDescriptor, NSAffineTransform;
overload selector(#"fontDescriptorWithName:matrix:") = NSFontDescriptor, NSString, NSAffineTransform;
overload selector(#"fontDescriptorWithName:size:") = NSFontDescriptor, NSString, Double;
overload selector(#"fontDescriptorWithSize:") = NSFontDescriptor, Double;
overload selector(#"fontDescriptorWithSymbolicTraits:") = NSFontDescriptor, UInt;
overload selector(#"fontDescriptorsInCollection:") = NSArray, NSString;
overload selector(#"fontManager:willIncludeFont:") = Bool, Id, NSString;
overload selector(#"fontMenu:") = NSMenu, Bool;
overload selector(#"fontName") = NSString;
overload selector(#"fontNamed:hasTraits:") = Bool, NSString, CULong;
overload selector(#"fontPanel:") = NSFontPanel, Bool;
overload selector(#"fontWithDescriptor:size:") = NSFont, NSFontDescriptor, Double;
overload selector(#"fontWithDescriptor:textTransform:") = NSFont, NSFontDescriptor, NSAffineTransform;
overload selector(#"fontWithFamily:traits:weight:size:") = NSFont, NSString, CULong, CLong, Double;
overload selector(#"fontWithName:matrix:") = NSFont, NSString, Pointer[Double];
overload selector(#"fontWithName:size:") = NSFont, NSString, Double;
overload selector(#"forceTerminate") = Bool;
overload selector(#"foregroundColor") = NSColor;
overload selector(#"forgetWord:") = Void, NSString;
overload selector(#"formIntersectionWithCharacterSet:") = Void, NSCharacterSet;
overload selector(#"formUnionWithCharacterSet:") = Void, NSCharacterSet;
overload selector(#"format") = NSString;
overload selector(#"formatWidth") = CULong;
overload selector(#"formatter") = Id;
overload selector(#"formatterBehavior") = CULong;
overload selector(#"formattingDictionary") = NSDictionary;
overload selector(#"formattingStringsFilename") = NSString;
overload selector(#"forwardInvocation:") = Void, NSInvocation;
overload selector(#"forwardingTargetForSelector:") = Id, SelectorHandle;
overload selector(#"fractionOfDistanceThroughGlyphForPoint:") = Double, NSPoint;
overload selector(#"fractionOfDistanceThroughGlyphForPoint:inTextContainer:") = Double, NSPoint, NSTextContainer;
overload selector(#"fragment") = NSString;
overload selector(#"frame") = NSRect;
overload selector(#"frameAutosaveName") = NSString;
overload selector(#"frameCenterRotation") = Double;
overload selector(#"frameForItemAtIndex:") = NSRect, CULong;
overload selector(#"frameLength") = CULong;
overload selector(#"frameOfCellAtColumn:row:") = NSRect, CLong, CLong;
overload selector(#"frameOfColumn:") = NSRect, CLong;
overload selector(#"frameOfInsideOfColumn:") = NSRect, CLong;
overload selector(#"frameOfOutlineCellAtRow:") = NSRect, CLong;
overload selector(#"frameOfRow:inColumn:") = NSRect, CLong, CLong;
overload selector(#"frameRate") = Float;
overload selector(#"frameRectForContentRect:") = NSRect, NSRect;
overload selector(#"frameRectForContentRect:styleMask:") = NSRect, NSRect, CULong;
overload selector(#"frameRotation") = Double;
overload selector(#"frameSizeForContentSize:hasHorizontalScroller:hasVerticalScroller:borderType:") = NSSize, NSSize, Bool, Bool, CULong;
overload selector(#"fullPathForApplication:") = NSString, NSString;
overload selector(#"function") = NSString;
overload selector(#"gState") = CLong;
overload selector(#"generalPasteboard") = NSPasteboard;
overload selector(#"generateGlyphsForGlyphStorage:desiredNumberOfCharacters:glyphIndex:characterIndex:") = Void, Id, CULong, Pointer[CULong], Pointer[CULong];
overload selector(#"generatesCalendarDates") = Bool;
overload selector(#"generatesDecimalNumbers") = Bool;
overload selector(#"genericCMYKColorSpace") = NSColorSpace;
overload selector(#"genericGamma22GrayColorSpace") = NSColorSpace;
overload selector(#"genericGrayColorSpace") = NSColorSpace;
overload selector(#"genericRGBColorSpace") = NSColorSpace;
overload selector(#"getAdvancements:forGlyphs:count:") = Void, NSSizeArray, Pointer[UInt], CULong;
overload selector(#"getAdvancements:forPackedGlyphs:length:") = Void, NSSizeArray, RawPointer, CULong;
overload selector(#"getArgument:atIndex:") = Void, RawPointer, CLong;
overload selector(#"getArgumentTypeAtIndex:") = Pointer[CChar], CULong;
overload selector(#"getBitmapDataPlanes:") = Void, Pointer[Pointer[CUChar]];
overload selector(#"getBoundingRects:forGlyphs:count:") = Void, NSRectArray, Pointer[UInt], CULong;
overload selector(#"getBuffer:length:") = Bool, Pointer[Pointer[CUChar]], Pointer[CULong];
overload selector(#"getBytes:") = Void, RawPointer;
overload selector(#"getBytes:length:") = Void, RawPointer, CULong;
overload selector(#"getBytes:maxLength:usedLength:encoding:options:range:remainingRange:") = Bool, RawPointer, CULong, Pointer[CULong], CULong, CULong, NSRange, NSRangePointer;
overload selector(#"getBytes:range:") = Void, RawPointer, NSRange;
overload selector(#"getCFRunLoop") = CFRunLoopRef;
overload selector(#"getCString:") = Void, Pointer[CChar];
overload selector(#"getCString:maxLength:") = Void, Pointer[CChar], CULong;
overload selector(#"getCString:maxLength:encoding:") = Bool, Pointer[CChar], CULong, CULong;
overload selector(#"getCString:maxLength:range:remainingRange:") = Void, Pointer[CChar], CULong, NSRange, NSRangePointer;
overload selector(#"getCharacters:") = Void, Pointer[UShort];
overload selector(#"getCharacters:range:") = Void, Pointer[UShort], NSRange;
overload selector(#"getColor:location:atIndex:") = Void, Pointer[NSColor], Pointer[Double], CLong;
overload selector(#"getComponents:") = Void, Pointer[Double];
overload selector(#"getCompression:factor:") = Void, Pointer[CULong], Pointer[Float];
overload selector(#"getCyan:magenta:yellow:black:alpha:") = Void, Pointer[Double], Pointer[Double], Pointer[Double], Pointer[Double], Pointer[Double];
overload selector(#"getFileSystemInfoForPath:isRemovable:isWritable:isUnmountable:description:type:") = Bool, NSString, Pointer[Bool], Pointer[Bool], Pointer[Bool], Pointer[NSString], Pointer[NSString];
overload selector(#"getFileSystemRepresentation:maxLength:") = Bool, Pointer[CChar], CULong;
overload selector(#"getFirstUnlaidCharacterIndex:glyphIndex:") = Void, Pointer[CULong], Pointer[CULong];
overload selector(#"getGlyphs:range:") = CULong, Pointer[UInt], NSRange;
overload selector(#"getGlyphsInRange:glyphs:characterIndexes:glyphInscriptions:elasticBits:") = CULong, NSRange, Pointer[UInt], Pointer[CULong], Pointer[CULong], Pointer[Bool];
overload selector(#"getGlyphsInRange:glyphs:characterIndexes:glyphInscriptions:elasticBits:bidiLevels:") = CULong, NSRange, Pointer[UInt], Pointer[CULong], Pointer[CULong], Pointer[Bool], Pointer[CUChar];
overload selector(#"getHue:saturation:brightness:alpha:") = Void, Pointer[Double], Pointer[Double], Pointer[Double], Pointer[Double];
overload selector(#"getIndexes:") = Void, Pointer[CULong];
overload selector(#"getIndexes:maxCount:inIndexRange:") = CULong, Pointer[CULong], CULong, NSRangePointer;
overload selector(#"getInfoForFile:application:type:") = Bool, NSString, Pointer[NSString], Pointer[NSString];
overload selector(#"getInputStream:outputStream:") = Bool, Pointer[NSInputStream], Pointer[NSOutputStream];
overload selector(#"getLineDash:count:phase:") = Void, Pointer[Double], Pointer[CLong], Pointer[Double];
overload selector(#"getLineFragmentInsertionPointsForCharacterAtIndex:alternatePositions:inDisplayOrder:positions:characterIndexes:") = CULong, CULong, Bool, Bool, Pointer[Double], Pointer[CULong];
overload selector(#"getLineFragmentRect:usedRect:forParagraphSeparatorGlyphRange:atProposedOrigin:") = Void, NSRectPointer, NSRectPointer, NSRange, NSPoint;
overload selector(#"getLineFragmentRect:usedRect:remainingRect:forStartingGlyphAtIndex:proposedRect:lineSpacing:paragraphSpacingBefore:paragraphSpacingAfter:") = Void, NSRectPointer, NSRectPointer, NSRectPointer, CULong, NSRect, Double, Double, Double;
overload selector(#"getLineStart:end:contentsEnd:forRange:") = Void, Pointer[CULong], Pointer[CULong], Pointer[CULong], NSRange;
overload selector(#"getNumberOfRows:columns:") = Void, Pointer[CLong], Pointer[CLong];
overload selector(#"getObjectValue:forString:errorDescription:") = Bool, Pointer[Id], NSString, Pointer[NSString];
overload selector(#"getObjectValue:forString:range:error:") = Bool, Pointer[Id], NSString, Pointer[NSRange], Pointer[NSError];
overload selector(#"getObjects:") = Void, Pointer[Id];
overload selector(#"getObjects:andKeys:") = Void, Pointer[Id], Pointer[Id];
overload selector(#"getObjects:range:") = Void, Pointer[Id], NSRange;
overload selector(#"getParagraphStart:end:contentsEnd:forRange:") = Void, Pointer[CULong], Pointer[CULong], Pointer[CULong], NSRange;
overload selector(#"getPeriodicDelay:interval:") = Void, Pointer[Float], Pointer[Float];
overload selector(#"getPixel:atX:y:") = Void, Pointer[CULong], CLong, CLong;
overload selector(#"getRectsBeingDrawn:count:") = Void, Pointer[Pointer[NSRect]], Pointer[CLong];
overload selector(#"getRectsExposedDuringLiveResize:count:") = Void, Pointer[NSRect], Pointer[CLong];
overload selector(#"getRed:green:blue:alpha:") = Void, Pointer[Double], Pointer[Double], Pointer[Double], Pointer[Double];
overload selector(#"getResourceValue:forKey:error:") = Bool, Pointer[Id], NSString, Pointer[NSError];
overload selector(#"getReturnValue:") = Void, RawPointer;
overload selector(#"getRow:column:forPoint:") = Bool, Pointer[CLong], Pointer[CLong], NSPoint;
overload selector(#"getRow:column:ofCell:") = Bool, Pointer[CLong], Pointer[CLong], NSCell;
overload selector(#"getStreamsToHost:port:inputStream:outputStream:") = Void, NSHost, CLong, Pointer[NSInputStream], Pointer[NSOutputStream];
overload selector(#"getTIFFCompressionTypes:count:") = Void, Pointer[Pointer[CULong]], Pointer[CLong];
overload selector(#"getValue:") = Void, RawPointer;
overload selector(#"getValues:forAttribute:forVirtualScreen:") = Void, Pointer[Int], UInt, Int;
overload selector(#"getValues:forParameter:") = Void, Pointer[Int], NSOpenGLContextParameter;
overload selector(#"getWhite:alpha:") = Void, Pointer[Double], Pointer[Double];
overload selector(#"globallyUniqueString") = NSString;
overload selector(#"glyphAtIndex:") = UInt, CULong;
overload selector(#"glyphAtIndex:isValidIndex:") = UInt, CULong, Pointer[Bool];
overload selector(#"glyphGenerator") = NSGlyphGenerator;
overload selector(#"glyphIndexForCharacterAtIndex:") = CULong, CULong;
overload selector(#"glyphIndexForPoint:inTextContainer:") = CULong, NSPoint, NSTextContainer;
overload selector(#"glyphIndexForPoint:inTextContainer:fractionOfDistanceThroughGlyph:") = CULong, NSPoint, NSTextContainer, Pointer[Double];
overload selector(#"glyphInfoWithCharacterIdentifier:collection:baseString:") = NSGlyphInfo, CULong, CULong, NSString;
overload selector(#"glyphInfoWithGlyph:forFont:baseString:") = NSGlyphInfo, UInt, NSFont, NSString;
overload selector(#"glyphInfoWithGlyphName:forFont:baseString:") = NSGlyphInfo, NSString, NSFont, NSString;
overload selector(#"glyphName") = NSString;
overload selector(#"glyphRangeForBoundingRect:inTextContainer:") = NSRange, NSRect, NSTextContainer;
overload selector(#"glyphRangeForBoundingRectWithoutAdditionalLayout:inTextContainer:") = NSRange, NSRect, NSTextContainer;
overload selector(#"glyphRangeForCharacterRange:actualCharacterRange:") = NSRange, NSRange, NSRangePointer;
overload selector(#"glyphRangeForTextContainer:") = NSRange, NSTextContainer;
overload selector(#"glyphWithName:") = UInt, NSString;
overload selector(#"gradientType") = CULong;
overload selector(#"grammarCheckingResultWithRange:details:") = NSTextCheckingResult, NSRange, NSArray;
overload selector(#"grammarDetails") = NSArray;
overload selector(#"graphicsContext") = NSGraphicsContext;
overload selector(#"graphicsContextWithAttributes:") = NSGraphicsContext, NSDictionary;
overload selector(#"graphicsContextWithBitmapImageRep:") = NSGraphicsContext, NSBitmapImageRep;
overload selector(#"graphicsContextWithGraphicsPort:flipped:") = NSGraphicsContext, RawPointer, Bool;
overload selector(#"graphicsContextWithWindow:") = NSGraphicsContext, NSWindow;
overload selector(#"graphicsPort") = RawPointer;
overload selector(#"grayColor") = NSColor;
overload selector(#"green") = Double;
overload selector(#"greenColor") = NSColor;
overload selector(#"greenComponent") = Double;
overload selector(#"gregorianStartDate") = NSDate;
overload selector(#"gridColor") = NSColor;
overload selector(#"gridStyleMask") = CULong;
overload selector(#"groupedResults") = NSArray;
overload selector(#"groupingAttributes") = NSArray;
overload selector(#"groupingLevel") = CLong;
overload selector(#"groupingSeparator") = NSString;
overload selector(#"groupingSize") = CULong;
overload selector(#"groupsByEvent") = Bool;
overload selector(#"guessesForWord:") = NSArray, NSString;
overload selector(#"guessesForWordRange:inString:language:inSpellDocumentWithTag:") = NSArray, NSRange, NSString, NSString, CLong;
overload selector(#"handleCloseScriptCommand:") = Id, NSCloseCommand;
overload selector(#"handleEvent:") = Bool, NSEvent;
overload varargSelector(#"handleFailureInFunction:file:lineNumber:description:") = Void, NSString, NSString, CLong, NSString;
overload varargSelector(#"handleFailureInMethod:object:file:lineNumber:description:") = Void, SelectorHandle, Id, NSString, CLong, NSString;
overload selector(#"handleMachMessage:") = Void, RawPointer;
overload selector(#"handleMouseEvent:") = Bool, NSEvent;
overload selector(#"handlePortMessage:") = Void, NSPortMessage;
overload selector(#"handlePrintScriptCommand:") = Id, NSScriptCommand;
overload selector(#"handleQueryWithUnboundKey:") = Id, NSString;
overload selector(#"handleSaveScriptCommand:") = Id, NSScriptCommand;
overload selector(#"handleTakeValue:forUnboundKey:") = Void, Id, NSString;
overload selector(#"handleTextCheckingResults:forRange:types:options:orthography:wordCount:") = Void, NSArray, NSRange, UInt64, NSDictionary, NSOrthography, CLong;
overload selector(#"hasAlpha") = Bool;
overload selector(#"hasBytesAvailable") = Bool;
overload selector(#"hasCloseBox") = Bool;
overload selector(#"hasDynamicDepthLimit") = Bool;
overload selector(#"hasEditedDocuments") = Bool;
overload selector(#"hasHorizontalRuler") = Bool;
overload selector(#"hasHorizontalScroller") = Bool;
overload selector(#"hasLearnedWord:") = Bool, NSString;
overload selector(#"hasMarkedText") = Bool;
overload selector(#"hasMemberInPlane:") = Bool, CUChar;
overload selector(#"hasNonContiguousLayout") = Bool;
overload selector(#"hasOrderedToManyRelationshipForKey:") = Bool, NSString;
overload selector(#"hasPassword") = Bool;
overload selector(#"hasPrefix:") = Bool, NSString;
overload selector(#"hasPropertyForKey:") = Bool, NSString;
overload selector(#"hasReadablePropertyForKey:") = Bool, NSString;
overload selector(#"hasShadow") = Bool;
overload selector(#"hasSpaceAvailable") = Bool;
overload selector(#"hasSubmenu") = Bool;
overload selector(#"hasSuffix:") = Bool, NSString;
overload selector(#"hasThousandSeparators") = Bool;
overload selector(#"hasTitleBar") = Bool;
overload selector(#"hasUnappliedChanges") = Bool;
overload selector(#"hasUnautosavedChanges") = Bool;
overload selector(#"hasUndoManager") = Bool;
overload selector(#"hasValidObjectValue") = Bool;
overload selector(#"hasVerticalRuler") = Bool;
overload selector(#"hasVerticalScroller") = Bool;
overload selector(#"hasWritablePropertyForKey:") = Bool, NSString;
overload selector(#"hash") = CULong;
overload selector(#"hashFunction") = CCodePointer[[RawPointer,CCodePointer[[RawPointer],[CULong]]],[CULong]];
overload selector(#"hashTableWithOptions:") = Id, CULong;
overload selector(#"hashTableWithWeakObjects") = Id;
overload selector(#"headIndent") = Double;
overload selector(#"headerCell") = Id;
overload selector(#"headerColor") = NSColor;
overload selector(#"headerLevel") = CLong;
overload selector(#"headerRectOfColumn:") = NSRect, CLong;
overload selector(#"headerTextColor") = NSColor;
overload selector(#"headerToolTip") = NSString;
overload selector(#"headerView") = NSTableHeaderView;
overload selector(#"heightAdjustLimit") = Double;
overload selector(#"heightTracksTextView") = Bool;
overload selector(#"helpAnchor") = NSString;
overload selector(#"helpMenu") = NSMenu;
overload selector(#"helpRequested:") = Void, NSEvent;
overload selector(#"hide") = Bool;
overload selector(#"hide:") = Void, Id;
overload selector(#"hideOtherApplications") = Void;
overload selector(#"hideOtherApplications:") = Void, Id;
overload selector(#"hidesEmptyCells") = Bool;
overload selector(#"hidesOnDeactivate") = Bool;
overload selector(#"highlight:") = Void, Bool;
overload selector(#"highlight:withFrame:inView:") = Void, Bool, NSRect, NSView;
overload selector(#"highlightCell:atRow:column:") = Void, Bool, CLong, CLong;
overload selector(#"highlightColor") = NSColor;
overload selector(#"highlightColorInView:") = NSColor, NSView;
overload selector(#"highlightColorWithFrame:inView:") = NSColor, NSRect, NSView;
overload selector(#"highlightMode") = Bool;
overload selector(#"highlightSelectionInClipRect:") = Void, NSRect;
overload selector(#"highlightWithLevel:") = NSColor, Double;
overload selector(#"highlightedBranchImage") = NSImage;
overload selector(#"highlightedItem") = NSMenuItem;
overload selector(#"highlightedTableColumn") = NSTableColumn;
overload selector(#"highlightsBy") = CLong;
overload selector(#"hitPart") = CULong;
overload selector(#"hitTest:") = Id, NSPoint;
overload selector(#"hitTestForEvent:inRect:ofView:") = CULong, NSEvent, NSRect, NSView;
overload selector(#"hitTestRect:withImageDestinationRect:context:hints:flipped:") = Bool, NSRect, NSRect, NSGraphicsContext, NSDictionary, Bool;
overload selector(#"horizontalLineScroll") = Double;
overload selector(#"horizontalPageScroll") = Double;
overload selector(#"horizontalPagination") = CULong;
overload selector(#"horizontalRulerView") = NSRulerView;
overload selector(#"horizontalScroller") = NSScroller;
overload selector(#"host") = NSString;
overload selector(#"hostName") = NSString;
overload selector(#"hostWithAddress:") = NSHost, NSString;
overload selector(#"hostWithName:") = NSHost, NSString;
overload selector(#"hotSpot") = NSPoint;
overload selector(#"hour") = CLong;
overload selector(#"hourOfDay") = CLong;
overload selector(#"hueComponent") = Double;
overload selector(#"hyphenCharacterForGlyphAtIndex:") = UInt, CULong;
overload selector(#"hyphenationFactor") = Float;
overload selector(#"hyphenationFactorForGlyphAtIndex:") = Float, CULong;
overload selector(#"icon") = NSImage;
overload selector(#"iconForFile:") = NSImage, NSString;
overload selector(#"iconForFileType:") = NSImage, NSString;
overload selector(#"iconForFiles:") = NSImage, NSArray;
overload selector(#"identifier") = Id;
overload selector(#"identity") = SecIdentityRef;
overload selector(#"ignoreModifierKeysWhileDragging") = Bool;
overload selector(#"ignoreSpelling:") = Void, Id;
overload selector(#"ignoreWord:inSpellDocumentWithTag:") = Void, NSString, CLong;
overload selector(#"ignoredWordsInSpellDocumentWithTag:") = NSArray, CLong;
overload selector(#"ignoresAlpha") = Bool;
overload selector(#"ignoresMouseEvents") = Bool;
overload selector(#"ignoresMultiClick") = Bool;
overload selector(#"illegalCharacterSet") = Id;
overload selector(#"image") = NSImage;
overload selector(#"image:didLoadPartOfRepresentation:withValidRows:") = Void, NSImage, NSImageRep, CLong;
overload selector(#"image:didLoadRepresentation:withStatus:") = Void, NSImage, NSImageRep, CULong;
overload selector(#"image:didLoadRepresentationHeader:") = Void, NSImage, NSImageRep;
overload selector(#"image:willLoadRepresentation:") = Void, NSImage, NSImageRep;
overload selector(#"imageAlignment") = CULong;
overload selector(#"imageByApplyingTransform:") = CIImage, CGAffineTransform;
overload selector(#"imageByCroppingToRect:") = CIImage, CGRect;
overload selector(#"imageDidNotDraw:inRect:") = NSImage, Id, NSRect;
overload selector(#"imageDimsWhenDisabled") = Bool;
overload selector(#"imageFileTypes") = NSArray;
overload selector(#"imageForSegment:") = NSImage, CLong;
overload selector(#"imageFrameStyle") = CULong;
overload selector(#"imageInterpolation") = CULong;
overload selector(#"imageNamed:") = Id, NSString;
overload selector(#"imageOrigin") = NSPoint;
overload selector(#"imagePasteboardTypes") = NSArray;
overload selector(#"imagePosition") = CULong;
overload selector(#"imageRectForBounds:") = NSRect, NSRect;
overload selector(#"imageRectForPaper:") = NSRect, NSString;
overload selector(#"imageRectInRuler") = NSRect;
overload selector(#"imageRepClassForData:") = Id, NSData;
overload selector(#"imageRepClassForFileType:") = Id, NSString;
overload selector(#"imageRepClassForPasteboardType:") = Id, NSString;
overload selector(#"imageRepClassForType:") = Id, NSString;
overload selector(#"imageRepWithCIImage:") = Id, CIImage;
overload selector(#"imageRepWithContentsOfFile:") = Id, NSString;
overload selector(#"imageRepWithContentsOfURL:") = Id, NSURL;
overload selector(#"imageRepWithData:") = Id, NSData;
overload selector(#"imageRepWithPasteboard:") = Id, NSPasteboard;
overload selector(#"imageRepsWithContentsOfFile:") = NSArray, NSString;
overload selector(#"imageRepsWithContentsOfURL:") = NSArray, NSURL;
overload selector(#"imageRepsWithData:") = NSArray, NSData;
overload selector(#"imageRepsWithPasteboard:") = NSArray, NSPasteboard;
overload selector(#"imageScaling") = CULong;
overload selector(#"imageScalingForSegment:") = CULong, CLong;
overload selector(#"imageTypes") = NSArray;
overload selector(#"imageUnfilteredFileTypes") = NSArray;
overload selector(#"imageUnfilteredPasteboardTypes") = NSArray;
overload selector(#"imageUnfilteredTypes") = NSArray;
overload selector(#"imageWidth") = Double;
overload selector(#"imageWithBitmapData:bytesPerRow:size:format:colorSpace:") = CIImage, NSData, CULong, CGSize, Int, CGColorSpaceRef;
overload selector(#"imageWithCGImage:") = CIImage, CGImageRef;
overload selector(#"imageWithCGImage:options:") = CIImage, CGImageRef, NSDictionary;
overload selector(#"imageWithCGLayer:") = CIImage, CGLayerRef;
overload selector(#"imageWithCGLayer:options:") = CIImage, CGLayerRef, NSDictionary;
overload selector(#"imageWithCVImageBuffer:") = CIImage, CVImageBufferRef;
overload selector(#"imageWithCVImageBuffer:options:") = CIImage, CVImageBufferRef, NSDictionary;
overload selector(#"imageWithColor:") = CIImage, CIColor;
overload selector(#"imageWithContentsOfURL:") = CIImage, NSURL;
overload selector(#"imageWithContentsOfURL:options:") = CIImage, NSURL, NSDictionary;
overload selector(#"imageWithData:") = CIImage, NSData;
overload selector(#"imageWithData:options:") = CIImage, NSData, NSDictionary;
overload selector(#"imageWithIOSurface:") = CIImage, IOSurfaceRef;
overload selector(#"imageWithIOSurface:options:") = CIImage, IOSurfaceRef, NSDictionary;
overload selector(#"imageWithTexture:size:flipped:colorSpace:") = CIImage, UInt, CGSize, Bool, CGColorSpaceRef;
overload selector(#"imageablePageBounds") = NSRect;
overload selector(#"implementationClassName") = NSString;
overload selector(#"importsGraphics") = Bool;
overload selector(#"inLiveResize") = Bool;
overload selector(#"includedKeys") = NSArray;
overload selector(#"increaseLengthBy:") = Void, CULong;
overload selector(#"increment") = Double;
overload selector(#"incrementBy:") = Void, Double;
overload selector(#"incrementalLoadFromData:complete:") = CLong, NSData, Bool;
overload selector(#"indent:") = Void, Id;
overload selector(#"indentationLevel") = CLong;
overload selector(#"indentationMarkerFollowsCell") = Bool;
overload selector(#"indentationPerLevel") = Double;
overload selector(#"independentConversationQueueing") = Bool;
overload selector(#"index") = CULong;
overload selector(#"indexAtPosition:") = CULong, CULong;
overload selector(#"indexGreaterThanIndex:") = CULong, CULong;
overload selector(#"indexGreaterThanOrEqualToIndex:") = CULong, CULong;
overload selector(#"indexInRange:options:passingTest:") = CULong, NSRange, CULong, UnknownType;
overload selector(#"indexLessThanIndex:") = CULong, CULong;
overload selector(#"indexLessThanOrEqualToIndex:") = CULong, CULong;
overload selector(#"indexOfCellWithTag:") = CLong, CLong;
overload selector(#"indexOfItem:") = CLong, NSMenuItem;
overload selector(#"indexOfItemWithObjectValue:") = CLong, Id;
overload selector(#"indexOfItemWithRepresentedObject:") = CLong, Id;
overload selector(#"indexOfItemWithSubmenu:") = CLong, NSMenu;
overload selector(#"indexOfItemWithTag:") = CLong, CLong;
overload selector(#"indexOfItemWithTarget:andAction:") = CLong, Id, SelectorHandle;
overload selector(#"indexOfItemWithTitle:") = CLong, NSString;
overload selector(#"indexOfObject:") = CULong, Id;
overload selector(#"indexOfObject:inRange:") = CULong, Id, NSRange;
overload selector(#"indexOfObject:inSortedRange:options:usingComparator:") = CULong, Id, NSRange, CULong, NSComparator;
overload selector(#"indexOfObjectAtIndexes:options:passingTest:") = CULong, NSIndexSet, CULong, UnknownType;
overload selector(#"indexOfObjectIdenticalTo:") = CULong, Id;
overload selector(#"indexOfObjectIdenticalTo:inRange:") = CULong, Id, NSRange;
overload selector(#"indexOfObjectPassingTest:") = CULong, UnknownType;
overload selector(#"indexOfObjectWithOptions:passingTest:") = CULong, CULong, UnknownType;
overload selector(#"indexOfPasteboardItem:") = CULong, NSPasteboardItem;
overload selector(#"indexOfResult:") = CULong, Id;
overload selector(#"indexOfSelectedItem") = CLong;
overload selector(#"indexOfTabViewItem:") = CLong, NSTabViewItem;
overload selector(#"indexOfTabViewItemWithIdentifier:") = CLong, Id;
overload selector(#"indexOfTickMarkAtPoint:") = CLong, NSPoint;
overload selector(#"indexPassingTest:") = CULong, UnknownType;
overload selector(#"indexPath") = NSIndexPath;
overload selector(#"indexPathByAddingIndex:") = NSIndexPath, CULong;
overload selector(#"indexPathByRemovingLastIndex") = NSIndexPath;
overload selector(#"indexPathForColumn:") = NSIndexPath, CLong;
overload selector(#"indexPathWithIndex:") = Id, CULong;
overload selector(#"indexPathWithIndexes:length:") = Id, Pointer[CULong], CULong;
overload selector(#"indexSet") = Id;
overload selector(#"indexSetWithIndex:") = Id, CULong;
overload selector(#"indexSetWithIndexesInRange:") = Id, NSRange;
overload selector(#"indexWithOptions:passingTest:") = CULong, CULong, UnknownType;
overload selector(#"indexesInRange:options:passingTest:") = NSIndexSet, NSRange, CULong, UnknownType;
overload selector(#"indexesOfObjectsAtIndexes:options:passingTest:") = NSIndexSet, NSIndexSet, CULong, UnknownType;
overload selector(#"indexesOfObjectsPassingTest:") = NSIndexSet, UnknownType;
overload selector(#"indexesOfObjectsWithOptions:passingTest:") = NSIndexSet, CULong, UnknownType;
overload selector(#"indexesPassingTest:") = NSIndexSet, UnknownType;
overload selector(#"indexesWithOptions:passingTest:") = NSIndexSet, CULong, UnknownType;
overload selector(#"indicatorImageInTableColumn:") = NSImage, NSTableColumn;
overload selector(#"indicesOfObjectsByEvaluatingObjectSpecifier:") = NSArray, NSScriptObjectSpecifier;
overload selector(#"indicesOfObjectsByEvaluatingWithContainer:count:") = Pointer[CLong], Id, Pointer[CLong];
overload selector(#"infoDictionary") = NSDictionary;
overload selector(#"infoForBinding:") = NSDictionary, NSString;
overload selector(#"informativeText") = NSString;
overload selector(#"init") = Id;
overload selector(#"initAndTestWithTests:") = Id, NSArray;
overload selector(#"initByReferencingFile:") = Id, NSString;
overload selector(#"initByReferencingURL:") = Id, NSURL;
overload selector(#"initByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:") = Id, NSData, CULong, NSURL, Pointer[Bool], Pointer[NSError];
overload selector(#"initDirectoryWithFileWrappers:") = Id, NSDictionary;
overload selector(#"initFileURLWithPath:") = Id, NSString;
overload selector(#"initFileURLWithPath:isDirectory:") = Id, NSString, Bool;
overload selector(#"initForIncrementalLoad") = Id;
overload selector(#"initForReadingWithData:") = Id, NSData;
overload selector(#"initForURL:withContentsOfURL:ofType:error:") = Id, NSURL, NSURL, NSString, Pointer[NSError];
overload selector(#"initForWritingWithMutableData:") = Id, NSMutableData;
overload selector(#"initImageCell:") = Id, NSImage;
overload selector(#"initListDescriptor") = Id;
overload selector(#"initNotTestWithTest:") = Id, NSScriptWhoseTest;
overload selector(#"initOrTestWithTests:") = Id, NSArray;
overload selector(#"initRecordDescriptor") = Id;
overload selector(#"initRegularFileWithContents:") = Id, NSData;
overload selector(#"initRemoteWithProtocolFamily:socketType:protocol:address:") = Id, Int, Int, Int, NSData;
overload selector(#"initRemoteWithTCPPort:host:") = Id, UShort, NSString;
overload selector(#"initSymbolicLinkWithDestination:") = Id, NSString;
overload selector(#"initSymbolicLinkWithDestinationURL:") = Id, NSURL;
overload selector(#"initTextCell:") = Id, NSString;
overload selector(#"initTextCell:pullsDown:") = Id, NSString, Bool;
overload selector(#"initToBuffer:capacity:") = Id, Pointer[CUChar], CULong;
overload selector(#"initToFileAtPath:append:") = Id, NSString, Bool;
overload selector(#"initToMemory") = Id;
overload selector(#"initWithAEDescNoCopy:") = Id, Pointer[AEDesc];
overload selector(#"initWithArray:") = Id, NSArray;
overload selector(#"initWithArray:copyItems:") = Id, NSArray, Bool;
overload selector(#"initWithAttributedString:") = Id, NSAttributedString;
overload selector(#"initWithAttributes:") = Id, Pointer[UInt];
overload selector(#"initWithAuthenticationChallenge:sender:") = Id, NSURLAuthenticationChallenge, Id;
overload selector(#"initWithBitmapData:bytesPerRow:size:format:colorSpace:") = Id, NSData, CULong, CGSize, Int, CGColorSpaceRef;
overload selector(#"initWithBitmapDataPlanes:pixelsWide:pixelsHigh:bitsPerSample:samplesPerPixel:hasAlpha:isPlanar:colorSpaceName:bitmapFormat:bytesPerRow:bitsPerPixel:") = Id, Pointer[Pointer[CUChar]], CLong, CLong, CLong, CLong, Bool, Bool, NSString, CULong, CLong, CLong;
overload selector(#"initWithBitmapDataPlanes:pixelsWide:pixelsHigh:bitsPerSample:samplesPerPixel:hasAlpha:isPlanar:colorSpaceName:bytesPerRow:bitsPerPixel:") = Id, Pointer[Pointer[CUChar]], CLong, CLong, CLong, CLong, Bool, Bool, NSString, CLong, CLong;
overload selector(#"initWithBitmapImageRep:") = Id, NSBitmapImageRep;
overload selector(#"initWithBool:") = Id, Bool;
overload selector(#"initWithBytes:length:") = Id, RawPointer, CULong;
overload selector(#"initWithBytes:length:encoding:") = Id, RawPointer, CULong, CULong;
overload selector(#"initWithBytes:objCType:") = Id, RawPointer, Pointer[CChar];
overload selector(#"initWithBytesNoCopy:length:") = Id, RawPointer, CULong;
overload selector(#"initWithBytesNoCopy:length:encoding:freeWhenDone:") = Id, RawPointer, CULong, CULong, Bool;
overload selector(#"initWithBytesNoCopy:length:freeWhenDone:") = Id, RawPointer, CULong, Bool;
overload selector(#"initWithCGColor:") = Id, CGColorRef;
overload selector(#"initWithCGColorSpace:") = Id, CGColorSpaceRef;
overload selector(#"initWithCGImage:") = Id, CGImageRef;
overload selector(#"initWithCGImage:options:") = Id, CGImageRef, NSDictionary;
overload selector(#"initWithCGImage:size:") = Id, CGImageRef, NSSize;
overload selector(#"initWithCGLContextObj:") = Id, RawPointer;
overload selector(#"initWithCGLPBufferObj:") = Id, RawPointer;
overload selector(#"initWithCGLPixelFormatObj:") = Id, RawPointer;
overload selector(#"initWithCGLayer:") = Id, CGLayerRef;
overload selector(#"initWithCGLayer:options:") = Id, CGLayerRef, NSDictionary;
overload selector(#"initWithCIImage:") = Id, CIImage;
overload selector(#"initWithCString:") = Id, Pointer[CChar];
overload selector(#"initWithCString:encoding:") = Id, Pointer[CChar], CULong;
overload selector(#"initWithCString:length:") = Id, Pointer[CChar], CULong;
overload selector(#"initWithCStringNoCopy:length:freeWhenDone:") = Id, Pointer[CChar], CULong, Bool;
overload selector(#"initWithCVImageBuffer:") = Id, CVImageBufferRef;
overload selector(#"initWithCVImageBuffer:options:") = Id, CVImageBufferRef, NSDictionary;
overload selector(#"initWithCalendarIdentifier:") = Id, NSString;
overload selector(#"initWithCapacity:") = Id, CULong;
overload selector(#"initWithChar:") = Id, CChar;
overload selector(#"initWithCharacters:length:") = Id, Pointer[UShort], CULong;
overload selector(#"initWithCharactersNoCopy:length:freeWhenDone:") = Id, Pointer[UShort], CULong, Bool;
overload selector(#"initWithClient:") = Id, Id;
overload selector(#"initWithCoder:") = Id, NSCoder;
overload selector(#"initWithColor:") = Id, NSColor;
overload selector(#"initWithColorSyncProfile:") = Id, RawPointer;
overload selector(#"initWithColors:") = Id, NSArray;
overload selector(#"initWithColors:atLocations:colorSpace:") = Id, NSArray, Pointer[Double], NSColorSpace;
overload varargSelector(#"initWithColorsAndLocations:") = Id, NSColor;
overload selector(#"initWithCommandDescription:") = Id, NSScriptCommandDescription;
overload selector(#"initWithCompoundTypes:") = Id, NSArray;
overload selector(#"initWithCondition:") = Id, CLong;
overload selector(#"initWithContainerClassDescription:containerSpecifier:key:") = Id, NSScriptClassDescription, NSScriptObjectSpecifier, NSString;
overload selector(#"initWithContainerClassDescription:containerSpecifier:key:index:") = Id, NSScriptClassDescription, NSScriptObjectSpecifier, NSString, CLong;
overload selector(#"initWithContainerClassDescription:containerSpecifier:key:name:") = Id, NSScriptClassDescription, NSScriptObjectSpecifier, NSString, NSString;
overload selector(#"initWithContainerClassDescription:containerSpecifier:key:relativePosition:baseSpecifier:") = Id, NSScriptClassDescription, NSScriptObjectSpecifier, NSString, CULong, NSScriptObjectSpecifier;
overload selector(#"initWithContainerClassDescription:containerSpecifier:key:startSpecifier:endSpecifier:") = Id, NSScriptClassDescription, NSScriptObjectSpecifier, NSString, NSScriptObjectSpecifier, NSScriptObjectSpecifier;
overload selector(#"initWithContainerClassDescription:containerSpecifier:key:test:") = Id, NSScriptClassDescription, NSScriptObjectSpecifier, NSString, NSScriptWhoseTest;
overload selector(#"initWithContainerClassDescription:containerSpecifier:key:uniqueID:") = Id, NSScriptClassDescription, NSScriptObjectSpecifier, NSString, Id;
overload selector(#"initWithContainerSize:") = Id, NSSize;
overload selector(#"initWithContainerSpecifier:key:") = Id, NSScriptObjectSpecifier, NSString;
overload selector(#"initWithContent:") = Id, Id;
overload selector(#"initWithContentRect:styleMask:backing:defer:") = Id, NSRect, CULong, CULong, Bool;
overload selector(#"initWithContentRect:styleMask:backing:defer:screen:") = Id, NSRect, CULong, CULong, Bool, NSScreen;
overload selector(#"initWithContentSize:preferredEdge:") = Id, NSSize, CULong;
overload selector(#"initWithContentsOfFile:") = Id, NSString;
overload selector(#"initWithContentsOfFile:byReference:") = Id, NSString, Bool;
overload selector(#"initWithContentsOfFile:encoding:error:") = Id, NSString, CULong, Pointer[NSError];
overload selector(#"initWithContentsOfFile:ofType:") = Id, NSString, NSString;
overload selector(#"initWithContentsOfFile:options:error:") = Id, NSString, CULong, Pointer[NSError];
overload selector(#"initWithContentsOfFile:usedEncoding:error:") = Id, NSString, Pointer[CULong], Pointer[NSError];
overload selector(#"initWithContentsOfMappedFile:") = Id, NSString;
overload selector(#"initWithContentsOfURL:") = Id, NSURL;
overload selector(#"initWithContentsOfURL:byReference:") = Id, NSURL, Bool;
overload selector(#"initWithContentsOfURL:encoding:error:") = Id, NSURL, CULong, Pointer[NSError];
overload selector(#"initWithContentsOfURL:error:") = Id, NSURL, Pointer[NSDictionary];
overload selector(#"initWithContentsOfURL:ofType:") = Id, NSURL, NSString;
overload selector(#"initWithContentsOfURL:ofType:error:") = Id, NSURL, NSString, Pointer[NSError];
overload selector(#"initWithContentsOfURL:options:") = Id, NSURL, NSDictionary;
overload selector(#"initWithContentsOfURL:options:error:") = Id, NSURL, CULong, Pointer[NSError];
overload selector(#"initWithContentsOfURL:usedEncoding:error:") = Id, NSURL, Pointer[CULong], Pointer[NSError];
overload selector(#"initWithData:") = Id, NSData;
overload selector(#"initWithData:encoding:") = Id, NSData, CULong;
overload selector(#"initWithData:options:") = Id, NSData, NSDictionary;
overload selector(#"initWithData:options:documentAttributes:error:") = Id, NSData, NSDictionary, Pointer[NSDictionary], Pointer[NSError];
overload selector(#"initWithData:options:error:") = Id, NSData, CULong, Pointer[NSError];
overload selector(#"initWithDataIgnoringOrientation:") = Id, NSData;
overload selector(#"initWithDateFormat:allowNaturalLanguage:") = Id, NSString, Bool;
overload selector(#"initWithDecimal:") = Id, NSDecimal;
overload selector(#"initWithDefaults:initialValues:") = Id, NSUserDefaults, NSDictionary;
overload selector(#"initWithDelegate:name:") = Id, Id, NSString;
overload selector(#"initWithDescriptorType:bytes:length:") = Id, UInt, RawPointer, CULong;
overload selector(#"initWithDescriptorType:data:") = Id, UInt, NSData;
overload selector(#"initWithDictionary:") = Id, NSDictionary;
overload selector(#"initWithDictionary:copyItems:") = Id, NSDictionary, Bool;
overload selector(#"initWithDocFormat:documentAttributes:") = Id, NSData, Pointer[NSDictionary];
overload selector(#"initWithDomain:code:userInfo:") = Id, NSString, CLong, NSDictionary;
overload selector(#"initWithDomain:type:name:") = Id, NSString, NSString, NSString;
overload selector(#"initWithDomain:type:name:port:") = Id, NSString, NSString, NSString, Int;
overload selector(#"initWithDominantScript:languageMap:") = Id, NSString, NSDictionary;
overload selector(#"initWithDouble:") = Id, Double;
overload selector(#"initWithDrawSelector:delegate:") = Id, SelectorHandle, Id;
overload selector(#"initWithDuration:animationCurve:") = Id, Double, CULong;
overload selector(#"initWithEventClass:eventID:targetDescriptor:returnID:transactionID:") = Id, UInt, UInt, NSAppleEventDescriptor, Short, Int;
overload selector(#"initWithExpressionType:") = Id, CULong;
overload selector(#"initWithFileAtPath:") = Id, NSString;
overload selector(#"initWithFileDescriptor:") = Id, Int;
overload selector(#"initWithFileDescriptor:closeOnDealloc:") = Id, Int, Bool;
overload selector(#"initWithFileWrapper:") = Id, NSFileWrapper;
overload selector(#"initWithFireDate:interval:target:selector:userInfo:repeats:") = Id, NSDate, Double, Id, SelectorHandle, Id, Bool;
overload selector(#"initWithFloat:") = Id, Float;
overload selector(#"initWithFocusedViewRect:") = Id, NSRect;
overload selector(#"initWithFontAttributes:") = Id, NSDictionary;
overload varargSelector(#"initWithFormat:") = Id, NSString;
overload selector(#"initWithFormat:arguments:") = Id, NSString, Pointer[__va_list_tag];
overload varargSelector(#"initWithFormat:locale:") = Id, NSString, Id;
overload selector(#"initWithFormat:locale:arguments:") = Id, NSString, Id, Pointer[__va_list_tag];
overload selector(#"initWithFormat:shareContext:") = Id, NSOpenGLPixelFormat, NSOpenGLContext;
overload selector(#"initWithFrame:") = Id, NSRect;
overload selector(#"initWithFrame:mode:cellClass:numberOfRows:numberOfColumns:") = Id, NSRect, CULong, Id, CLong, CLong;
overload selector(#"initWithFrame:mode:prototype:numberOfRows:numberOfColumns:") = Id, NSRect, CULong, NSCell, CLong, CLong;
overload selector(#"initWithFrame:pixelFormat:") = Id, NSRect, NSOpenGLPixelFormat;
overload selector(#"initWithFrame:pullsDown:") = Id, NSRect, Bool;
overload selector(#"initWithFrame:textContainer:") = Id, NSRect, NSTextContainer;
overload selector(#"initWithHTML:baseURL:documentAttributes:") = Id, NSData, NSURL, Pointer[NSDictionary];
overload selector(#"initWithHTML:documentAttributes:") = Id, NSData, Pointer[NSDictionary];
overload selector(#"initWithHTML:options:documentAttributes:") = Id, NSData, NSDictionary, Pointer[NSDictionary];
overload selector(#"initWithHost:port:protocol:realm:authenticationMethod:") = Id, NSString, CLong, NSString, NSString, NSString;
overload selector(#"initWithICCProfileData:") = Id, NSData;
overload selector(#"initWithIOSurface:") = Id, IOSurfaceRef;
overload selector(#"initWithIOSurface:options:") = Id, IOSurfaceRef, NSDictionary;
overload selector(#"initWithIconRef:") = Id, IconRef;
overload selector(#"initWithIdentifier:") = Id, Id;
overload selector(#"initWithIdentity:certificates:persistence:") = Id, SecIdentityRef, NSArray, CULong;
overload selector(#"initWithImage:foregroundColorHint:backgroundColorHint:hotSpot:") = Id, NSImage, NSColor, NSColor, NSPoint;
overload selector(#"initWithImage:hotSpot:") = Id, NSImage, NSPoint;
overload selector(#"initWithIndex:") = Id, CULong;
overload selector(#"initWithIndexSet:") = Id, NSIndexSet;
overload selector(#"initWithIndexes:length:") = Id, Pointer[CULong], CULong;
overload selector(#"initWithIndexesInRange:") = Id, NSRange;
overload selector(#"initWithInt:") = Id, Int;
overload selector(#"initWithInteger:") = Id, CLong;
overload selector(#"initWithInvocation:") = Id, NSInvocation;
overload selector(#"initWithItemIdentifier:") = Id, NSString;
overload selector(#"initWithKey:ascending:") = Id, NSString, Bool;
overload selector(#"initWithKey:ascending:comparator:") = Id, NSString, Bool, NSComparator;
overload selector(#"initWithKey:ascending:selector:") = Id, NSString, Bool, SelectorHandle;
overload selector(#"initWithKeyOptions:valueOptions:capacity:") = Id, CULong, CULong, CULong;
overload selector(#"initWithKeyPointerFunctions:valuePointerFunctions:capacity:") = Id, NSPointerFunctions, NSPointerFunctions, CULong;
overload selector(#"initWithKind:") = Id, CULong;
overload selector(#"initWithKind:options:") = Id, CULong, CULong;
overload selector(#"initWithLayer:") = Id, Id;
overload selector(#"initWithLeftExpression:rightExpression:customSelector:") = Id, NSExpression, NSExpression, SelectorHandle;
overload selector(#"initWithLeftExpression:rightExpression:modifier:type:options:") = Id, NSExpression, NSExpression, CULong, CULong, CULong;
overload selector(#"initWithLeftExpressions:rightExpressionAttributeType:modifier:operators:options:") = Id, NSArray, CULong, CULong, NSArray, CULong;
overload selector(#"initWithLeftExpressions:rightExpressions:modifier:operators:options:") = Id, NSArray, NSArray, CULong, NSArray, CULong;
overload selector(#"initWithLength:") = Id, CULong;
overload selector(#"initWithLevelIndicatorStyle:") = Id, CULong;
overload selector(#"initWithLocal:connection:") = Id, Id, NSConnection;
overload selector(#"initWithLocaleIdentifier:") = Id, NSString;
overload selector(#"initWithLong:") = Id, CLong;
overload selector(#"initWithLongLong:") = Id, Int64;
overload selector(#"initWithMachPort:") = Id, UInt;
overload selector(#"initWithMachPort:options:") = Id, UInt, CULong;
overload selector(#"initWithMantissa:exponent:isNegative:") = Id, UInt64, Short, Bool;
overload selector(#"initWithMarkerFormat:options:") = Id, NSString, CULong;
overload selector(#"initWithMemoryCapacity:diskCapacity:diskPath:") = Id, CULong, CULong, NSString;
overload selector(#"initWithMovie:") = Id, QTMovie;
overload selector(#"initWithName:") = Id, NSString;
overload selector(#"initWithName:URI:") = Id, NSString, NSString;
overload selector(#"initWithName:data:") = Id, NSString, NSData;
overload selector(#"initWithName:fromFile:") = Id, NSString, NSString;
overload selector(#"initWithName:host:") = NSInputManager, NSString, NSString;
overload selector(#"initWithName:reason:userInfo:") = Id, NSString, NSString, NSDictionary;
overload selector(#"initWithName:stringValue:") = Id, NSString, NSString;
overload selector(#"initWithNibName:bundle:") = Id, NSString, NSBundle;
overload selector(#"initWithNibNamed:bundle:") = Id, NSString, NSBundle;
overload selector(#"initWithNotificationCenter:") = Id, NSNotificationCenter;
overload selector(#"initWithObjectSpecifier:comparisonOperator:testObject:") = Id, NSScriptObjectSpecifier, CULong, Id;
overload varargSelector(#"initWithObjects:") = Id, Id;
overload selector(#"initWithObjects:count:") = Id, Pointer[Id], CULong;
overload selector(#"initWithObjects:forKeys:") = Id, NSArray, NSArray;
overload selector(#"initWithObjects:forKeys:count:") = Id, Pointer[Id], Pointer[Id], CULong;
overload varargSelector(#"initWithObjectsAndKeys:") = Id, Id;
overload selector(#"initWithOptions:") = Id, CULong;
overload selector(#"initWithOptions:capacity:") = Id, CULong, CULong;
overload selector(#"initWithPasteboard:") = Id, NSPasteboard;
overload selector(#"initWithPasteboardPropertyList:ofType:") = Id, Id, NSString;
overload selector(#"initWithPath:") = Id, NSString;
overload selector(#"initWithPath:documentAttributes:") = Id, NSString, Pointer[NSDictionary];
overload selector(#"initWithPickerMask:colorPanel:") = Id, CULong, NSColorPanel;
overload selector(#"initWithPointerFunctions:") = Id, NSPointerFunctions;
overload selector(#"initWithPointerFunctions:capacity:") = Id, NSPointerFunctions, CULong;
overload selector(#"initWithPosition:objectSpecifier:") = Id, CULong, NSScriptObjectSpecifier;
overload selector(#"initWithProperties:") = Id, NSDictionary;
overload selector(#"initWithProtectionSpace:proposedCredential:previousFailureCount:failureResponse:error:sender:") = Id, NSURLProtectionSpace, NSURLCredential, CLong, NSURLResponse, NSError, Id;
overload selector(#"initWithProtocolFamily:socketType:protocol:address:") = Id, Int, Int, Int, NSData;
overload selector(#"initWithProtocolFamily:socketType:protocol:socket:") = Id, Int, Int, Int, Int;
overload selector(#"initWithProxyHost:port:type:realm:authenticationMethod:") = Id, NSString, CLong, NSString, NSString, NSString;
overload selector(#"initWithRTF:documentAttributes:") = Id, NSData, Pointer[NSDictionary];
overload selector(#"initWithRTFD:documentAttributes:") = Id, NSData, Pointer[NSDictionary];
overload selector(#"initWithRTFDFileWrapper:documentAttributes:") = Id, NSFileWrapper, Pointer[NSDictionary];
overload selector(#"initWithReceivePort:sendPort:") = Id, NSPort, NSPort;
overload selector(#"initWithReceivePort:sendPort:components:") = Id, NSPort, NSPort, NSArray;
overload selector(#"initWithRect:options:owner:userInfo:") = Id, NSRect, CULong, Id, NSDictionary;
overload selector(#"initWithRepresentedObject:") = Id, Id;
overload selector(#"initWithRequest:cachedResponse:client:") = Id, NSURLRequest, NSCachedURLResponse, Id;
overload selector(#"initWithRequest:delegate:") = Id, NSURLRequest, Id;
overload selector(#"initWithRequest:delegate:startImmediately:") = Id, NSURLRequest, Id, Bool;
overload selector(#"initWithResponse:data:") = Id, NSURLResponse, NSData;
overload selector(#"initWithResponse:data:userInfo:storagePolicy:") = Id, NSURLResponse, NSData, NSDictionary, CULong;
overload selector(#"initWithResumeData:delegate:path:") = Id, NSData, Id, NSString;
overload selector(#"initWithRootElement:") = Id, NSXMLElement;
overload selector(#"initWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:") = Id, CULong, Short, Bool, Bool, Bool, Bool;
overload selector(#"initWithRulerView:markerLocation:image:imageOrigin:") = Id, NSRulerView, Double, NSImage, NSPoint;
overload selector(#"initWithScheme:host:path:") = Id, NSString, NSString, NSString;
overload selector(#"initWithScrollView:orientation:") = Id, NSScrollView, CULong;
overload selector(#"initWithSendPort:receivePort:components:") = Id, NSPort, NSPort, NSArray;
overload selector(#"initWithSerializedRepresentation:") = Id, NSData;
overload selector(#"initWithSet:") = Id, NSSet;
overload selector(#"initWithSet:copyItems:") = Id, NSSet, Bool;
overload selector(#"initWithShort:") = Id, Short;
overload selector(#"initWithSize:") = Id, NSSize;
overload selector(#"initWithSize:depth:separate:alpha:") = Id, NSSize, Int, Bool, Bool;
overload selector(#"initWithSource:") = Id, NSString;
overload selector(#"initWithStartingColor:endingColor:") = Id, NSColor, NSColor;
overload selector(#"initWithStorageLocation:") = Id, NSURL;
overload selector(#"initWithString:") = Id, NSString;
overload selector(#"initWithString:attributes:") = Id, NSString, NSDictionary;
overload selector(#"initWithString:calendarFormat:") = Id, NSString, NSString;
overload selector(#"initWithString:calendarFormat:locale:") = Id, NSString, NSString, Id;
overload selector(#"initWithString:locale:") = Id, NSString, Id;
overload selector(#"initWithString:relativeToURL:") = Id, NSString, NSURL;
overload selector(#"initWithSuiteName:className:dictionary:") = Id, NSString, NSString, NSDictionary;
overload selector(#"initWithSuiteName:commandName:dictionary:") = Id, NSString, NSString, NSDictionary;
overload selector(#"initWithTCPPort:") = Id, UShort;
overload selector(#"initWithTable:startingRow:rowSpan:startingColumn:columnSpan:") = Id, NSTextTable, CLong, CLong, CLong, CLong;
overload selector(#"initWithTarget:connection:") = Id, Id, NSConnection;
overload selector(#"initWithTarget:protocol:") = Id, NSObject, Id;
overload selector(#"initWithTarget:selector:object:") = Id, Id, SelectorHandle, Id;
overload selector(#"initWithTextAlignment:location:options:") = Id, CULong, Double, NSDictionary;
overload selector(#"initWithTexture:size:flipped:colorSpace:") = Id, UInt, CGSize, Bool, CGColorSpaceRef;
overload selector(#"initWithTextureTarget:textureInternalFormat:textureMaxMipMapLevel:pixelsWide:pixelsHigh:") = Id, UInt, UInt, Int, Int, Int;
overload selector(#"initWithTimeInterval:sinceDate:") = Id, Double, NSDate;
overload selector(#"initWithTimeIntervalSince1970:") = Id, Double;
overload selector(#"initWithTimeIntervalSinceNow:") = Id, Double;
overload selector(#"initWithTimeIntervalSinceReferenceDate:") = Id, Double;
overload selector(#"initWithTitle:") = Id, NSString;
overload selector(#"initWithTitle:action:keyEquivalent:") = Id, NSString, SelectorHandle, NSString;
overload selector(#"initWithTransform:") = Id, NSAffineTransform;
overload selector(#"initWithTrust:") = Id, SecTrustRef;
overload selector(#"initWithType:error:") = Id, NSString, Pointer[NSError];
overload selector(#"initWithType:location:") = Id, CULong, Double;
overload selector(#"initWithType:subpredicates:") = Id, CULong, NSArray;
overload selector(#"initWithURL:") = Id, NSURL;
overload selector(#"initWithURL:MIMEType:expectedContentLength:textEncodingName:") = Id, NSURL, NSString, CLong, NSString;
overload selector(#"initWithURL:append:") = Id, NSURL, Bool;
overload selector(#"initWithURL:cachePolicy:timeoutInterval:") = Id, NSURL, CULong, Double;
overload selector(#"initWithURL:cached:") = Id, NSURL, Bool;
overload selector(#"initWithURL:documentAttributes:") = Id, NSURL, Pointer[NSDictionary];
overload selector(#"initWithURL:options:documentAttributes:error:") = Id, NSURL, NSDictionary, Pointer[NSDictionary], Pointer[NSError];
overload selector(#"initWithURL:options:error:") = Id, NSURL, CULong, Pointer[NSError];
overload selector(#"initWithUTF8String:") = Id, Pointer[CChar];
overload selector(#"initWithUnsignedChar:") = Id, CUChar;
overload selector(#"initWithUnsignedInt:") = Id, UInt;
overload selector(#"initWithUnsignedInteger:") = Id, CULong;
overload selector(#"initWithUnsignedLong:") = Id, CULong;
overload selector(#"initWithUnsignedLongLong:") = Id, UInt64;
overload selector(#"initWithUnsignedShort:") = Id, UShort;
overload selector(#"initWithUser:") = Id, NSString;
overload selector(#"initWithUser:password:persistence:") = Id, NSString, NSString, CULong;
overload selector(#"initWithValues:count:") = Id, Pointer[Double], CULong;
overload selector(#"initWithViewAnimations:") = Id, NSArray;
overload selector(#"initWithVoice:") = Id, NSString;
overload selector(#"initWithWindow:") = Id, NSWindow;
overload selector(#"initWithWindow:rect:") = Id, NSWindow, NSRect;
overload selector(#"initWithWindowNibName:") = Id, NSString;
overload selector(#"initWithWindowNibName:owner:") = Id, NSString, Id;
overload selector(#"initWithWindowNibPath:owner:") = Id, NSString, Id;
overload selector(#"initWithWindowRef:") = NSWindow, RawPointer;
overload selector(#"initWithX:") = Id, Double;
overload selector(#"initWithX:Y:") = Id, Double, Double;
overload selector(#"initWithX:Y:Z:") = Id, Double, Double, Double;
overload selector(#"initWithX:Y:Z:W:") = Id, Double, Double, Double, Double;
overload selector(#"initWithXMLString:") = Id, NSString;
overload selector(#"initWithXMLString:error:") = Id, NSString, Pointer[NSError];
overload selector(#"initWithXMLString:options:error:") = Id, NSString, CULong, Pointer[NSError];
overload selector(#"initWithYear:month:day:hour:minute:second:timeZone:") = Id, CLong, CULong, CULong, CULong, CULong, CULong, NSTimeZone;
overload selector(#"initialFirstResponder") = Id;
overload selector(#"initialKey") = NSString;
overload selector(#"initialValue") = Id;
overload selector(#"initialValues") = NSDictionary;
overload selector(#"initialize") = Void;
overload selector(#"inputClientBecomeActive:") = Void, Id;
overload selector(#"inputClientDisabled:") = Void, Id;
overload selector(#"inputClientEnabled:") = Void, Id;
overload selector(#"inputClientResignActive:") = Void, Id;
overload selector(#"inputContext") = NSTextInputContext;
overload selector(#"inputStreamWithData:") = Id, NSData;
overload selector(#"inputStreamWithFileAtPath:") = Id, NSString;
overload selector(#"inputStreamWithURL:") = Id, NSURL;
overload selector(#"insert:") = Void, Id;
overload selector(#"insertAttributedString:atIndex:") = Void, NSAttributedString, CULong;
overload selector(#"insertBacktab:") = Void, Id;
overload selector(#"insertChild:") = Void, Id;
overload selector(#"insertChild:atIndex:") = Void, NSXMLNode, CULong;
overload selector(#"insertChildren:atIndex:") = Void, NSArray, CULong;
overload selector(#"insertColor:key:atIndex:") = Void, NSColor, NSString, CULong;
overload selector(#"insertColumn:") = Void, CLong;
overload selector(#"insertColumn:withCells:") = Void, CLong, NSArray;
overload selector(#"insertCompletion:forPartialWordRange:movement:isFinal:") = Void, NSString, NSRange, CLong, Bool;
overload selector(#"insertContainerBreak:") = Void, Id;
overload selector(#"insertDescriptor:atIndex:") = Void, NSAppleEventDescriptor, CLong;
overload selector(#"insertDoubleQuoteIgnoringSubstitution:") = Void, Id;
overload selector(#"insertEntry:atIndex:") = NSFormCell, NSString, CLong;
overload selector(#"insertGlyph:atGlyphIndex:characterIndex:") = Void, UInt, CULong, CULong;
overload selector(#"insertGlyphs:length:forStartingGlyphAtIndex:characterIndex:") = Void, Pointer[UInt], CULong, CULong, CULong;
overload selector(#"insertItem:atIndex:") = Void, NSMenuItem, CLong;
overload selector(#"insertItemWithItemIdentifier:atIndex:") = Void, NSString, CLong;
overload selector(#"insertItemWithObjectValue:atIndex:") = Void, Id, CLong;
overload selector(#"insertItemWithTitle:action:keyEquivalent:atIndex:") = NSMenuItem, NSString, SelectorHandle, NSString, CLong;
overload selector(#"insertItemWithTitle:atIndex:") = Void, NSString, CLong;
overload selector(#"insertLineBreak:") = Void, Id;
overload selector(#"insertNewButtonImage:in:") = Void, NSImage, NSButtonCell;
overload selector(#"insertNewline:") = Void, Id;
overload selector(#"insertNewlineIgnoringFieldEditor:") = Void, Id;
overload selector(#"insertObject:atArrangedObjectIndex:") = Void, Id, CULong;
overload selector(#"insertObject:atArrangedObjectIndexPath:") = Void, Id, NSIndexPath;
overload selector(#"insertObject:atIndex:") = Void, Id, CULong;
overload selector(#"insertObjects:atArrangedObjectIndexPaths:") = Void, NSArray, NSArray;
overload selector(#"insertObjects:atArrangedObjectIndexes:") = Void, NSArray, NSIndexSet;
overload selector(#"insertObjects:atIndexes:") = Void, NSArray, NSIndexSet;
overload selector(#"insertParagraphSeparator:") = Void, Id;
overload selector(#"insertPointer:atIndex:") = Void, RawPointer, CULong;
overload selector(#"insertRow:") = Void, CLong;
overload selector(#"insertRow:withCells:") = Void, CLong, NSArray;
overload selector(#"insertRowAtIndex:withType:asSubrowOfRow:animate:") = Void, CLong, CULong, CLong, Bool;
overload selector(#"insertSingleQuoteIgnoringSubstitution:") = Void, Id;
overload selector(#"insertString:atIndex:") = Void, NSString, CULong;
overload selector(#"insertSublayer:above:") = Void, CALayer, CALayer;
overload selector(#"insertSublayer:atIndex:") = Void, CALayer, UInt;
overload selector(#"insertSublayer:below:") = Void, CALayer, CALayer;
overload selector(#"insertTab:") = Void, Id;
overload selector(#"insertTabIgnoringFieldEditor:") = Void, Id;
overload selector(#"insertTabViewItem:atIndex:") = Void, NSTabViewItem, CLong;
overload selector(#"insertText:") = Void, Id;
overload selector(#"insertText:client:") = Void, Id, Id;
overload selector(#"insertText:replacementRange:") = Void, Id, NSRange;
overload selector(#"insertTextContainer:atIndex:") = Void, NSTextContainer, CULong;
overload selector(#"insertValue:atIndex:inPropertyWithKey:") = Void, Id, CULong, NSString;
overload selector(#"insertValue:inPropertyWithKey:") = Void, Id, NSString;
overload selector(#"insertionContainer") = Id;
overload selector(#"insertionIndex") = CLong;
overload selector(#"insertionKey") = NSString;
overload selector(#"insertionPointColor") = NSColor;
overload selector(#"insertionReplaces") = Bool;
overload selector(#"instanceMethodForSelector:") = IMP, SelectorHandle;
overload selector(#"instanceMethodSignatureForSelector:") = NSMethodSignature, SelectorHandle;
overload selector(#"instancesRespondToSelector:") = Bool, SelectorHandle;
overload selector(#"instantiateNibWithExternalNameTable:") = Bool, NSDictionary;
overload selector(#"instantiateNibWithOwner:topLevelObjects:") = Bool, Id, Pointer[NSArray];
overload selector(#"int32Value") = Int;
overload selector(#"intAttribute:forGlyphAtIndex:") = CLong, CLong, CULong;
overload selector(#"intForKey:inTable:") = Int, NSString, NSString;
overload selector(#"intValue") = Int;
overload selector(#"integerForKey:") = CLong, NSString;
overload selector(#"integerValue") = CLong;
overload selector(#"intercellSpacing") = NSSize;
overload selector(#"interfaceStyle") = CULong;
overload selector(#"interiorBackgroundStyle") = CLong;
overload selector(#"interiorBackgroundStyleForSegment:") = CLong, CLong;
overload selector(#"internationalCurrencySymbol") = NSString;
overload selector(#"interpolatedColorAtLocation:") = NSColor, Double;
overload selector(#"interpretKeyEvents:") = Void, NSArray;
overload selector(#"interrupt") = Void;
overload selector(#"intersectHashTable:") = Void, NSHashTable;
overload selector(#"intersectSet:") = Void, NSSet;
overload selector(#"intersectsHashTable:") = Bool, NSHashTable;
overload selector(#"intersectsIndexesInRange:") = Bool, NSRange;
overload selector(#"intersectsSet:") = Bool, NSSet;
overload selector(#"invalidate") = Void;
overload selector(#"invalidateAttributesInRange:") = Void, NSRange;
overload selector(#"invalidateCharacterCoordinates") = Void;
overload selector(#"invalidateClassDescriptionCache") = Void;
overload selector(#"invalidateCursorRectsForView:") = Void, NSView;
overload selector(#"invalidateDisplayForCharacterRange:") = Void, NSRange;
overload selector(#"invalidateDisplayForGlyphRange:") = Void, NSRange;
overload selector(#"invalidateGlyphsForCharacterRange:changeInLength:actualCharacterRange:") = Void, NSRange, CLong, NSRangePointer;
overload selector(#"invalidateGlyphsOnLayoutInvalidationForGlyphRange:") = Void, NSRange;
overload selector(#"invalidateHashMarks") = Void;
overload selector(#"invalidateLayoutForCharacterRange:actualCharacterRange:") = Void, NSRange, NSRangePointer;
overload selector(#"invalidateLayoutForCharacterRange:isSoft:actualCharacterRange:") = Void, NSRange, Bool, NSRangePointer;
overload selector(#"invalidateLayoutOfLayer:") = Void, CALayer;
overload selector(#"invalidateShadow") = Void;
overload selector(#"invalidateTextContainerOrigin") = Void;
overload selector(#"inverseForRelationshipKey:") = NSString, NSString;
overload selector(#"invert") = Void;
overload selector(#"invertedSet") = NSCharacterSet;
overload selector(#"invocation") = NSInvocation;
overload selector(#"invocationWithMethodSignature:") = NSInvocation, NSMethodSignature;
overload selector(#"invoke") = Void;
overload selector(#"invokeWithTarget:") = Void, Id;
overload selector(#"isARepeat") = Bool;
overload selector(#"isAbsolutePath") = Bool;
overload selector(#"isActive") = Bool;
overload selector(#"isAlternate") = Bool;
overload selector(#"isAnimating") = Bool;
overload selector(#"isAnyApplicationSpeaking") = Bool;
overload selector(#"isAsynchronous") = Bool;
overload selector(#"isAtEnd") = Bool;
overload selector(#"isAttached") = Bool;
overload selector(#"isAutodisplay") = Bool;
overload selector(#"isAutomaticDashSubstitutionEnabled") = Bool;
overload selector(#"isAutomaticDataDetectionEnabled") = Bool;
overload selector(#"isAutomaticLinkDetectionEnabled") = Bool;
overload selector(#"isAutomaticQuoteSubstitutionEnabled") = Bool;
overload selector(#"isAutomaticSpellingCorrectionEnabled") = Bool;
overload selector(#"isAutomaticTextReplacementEnabled") = Bool;
overload selector(#"isAutoscroll") = Bool;
overload selector(#"isBezeled") = Bool;
overload selector(#"isBordered") = Bool;
overload selector(#"isButtonBordered") = Bool;
overload selector(#"isBycopy") = Bool;
overload selector(#"isByref") = Bool;
overload selector(#"isCachedSeparately") = Bool;
overload selector(#"isCancelled") = Bool;
overload selector(#"isCaseInsensitiveLike:") = Bool, NSString;
overload selector(#"isCoalescingUndo") = Bool;
overload selector(#"isCollecting") = Bool;
overload selector(#"isColor") = Bool;
overload selector(#"isColumnSelected:") = Bool, CLong;
overload selector(#"isCompiled") = Bool;
overload selector(#"isConcurrent") = Bool;
overload selector(#"isContentDiscarded") = Bool;
overload selector(#"isContextHelpModeActive") = Bool;
overload selector(#"isContinuous") = Bool;
overload selector(#"isContinuousSpellCheckingEnabled") = Bool;
overload selector(#"isCopyingOperation") = Bool;
overload selector(#"isDataRetained") = Bool;
overload selector(#"isDaylightSavingTime") = Bool;
overload selector(#"isDaylightSavingTimeForDate:") = Bool, NSDate;
overload selector(#"isDeletableFileAtPath:") = Bool, NSString;
overload selector(#"isDescendantOf:") = Bool, NSView;
overload selector(#"isDirectory") = Bool;
overload selector(#"isDisplayedWhenStopped") = Bool;
overload selector(#"isDocumentEdited") = Bool;
overload selector(#"isDoubleSided") = Bool;
overload selector(#"isDragging") = Bool;
overload selector(#"isDrawingToScreen") = Bool;
overload selector(#"isEditable") = Bool;
overload selector(#"isEditing") = Bool;
overload selector(#"isEmpty") = Bool;
overload selector(#"isEnabled") = Bool;
overload selector(#"isEnabledForSegment:") = Bool, CLong;
overload selector(#"isEnteringProximity") = Bool;
overload selector(#"isEntryAcceptable:") = Bool, NSString;
overload selector(#"isEqual:") = Bool, Id;
overload selector(#"isEqualFunction") = CCodePointer[[RawPointer,RawPointer,CCodePointer[[RawPointer],[CULong]]],[CChar]];
overload selector(#"isEqualTo:") = Bool, Id;
overload selector(#"isEqualToArray:") = Bool, NSArray;
overload selector(#"isEqualToAttributedString:") = Bool, NSAttributedString;
overload selector(#"isEqualToData:") = Bool, NSData;
overload selector(#"isEqualToDate:") = Bool, NSDate;
overload selector(#"isEqualToDictionary:") = Bool, NSDictionary;
overload selector(#"isEqualToHashTable:") = Bool, NSHashTable;
overload selector(#"isEqualToHost:") = Bool, NSHost;
overload selector(#"isEqualToIndexSet:") = Bool, NSIndexSet;
overload selector(#"isEqualToNumber:") = Bool, NSNumber;
overload selector(#"isEqualToSet:") = Bool, NSSet;
overload selector(#"isEqualToString:") = Bool, NSString;
overload selector(#"isEqualToTimeZone:") = Bool, NSTimeZone;
overload selector(#"isEqualToValue:") = Bool, NSValue;
overload selector(#"isExcludedFromWindowsMenu") = Bool;
overload selector(#"isExecutableFileAtPath:") = Bool, NSString;
overload selector(#"isExecuting") = Bool;
overload selector(#"isExpandable:") = Bool, Id;
overload selector(#"isExpanded") = Bool;
overload selector(#"isExplicitlyIncluded") = Bool;
overload selector(#"isExtensionHidden") = Bool;
overload selector(#"isExternal") = Bool;
overload selector(#"isFieldEditor") = Bool;
overload selector(#"isFilePackageAtPath:") = Bool, NSString;
overload selector(#"isFileReferenceURL") = Bool;
overload selector(#"isFileURL") = Bool;
overload selector(#"isFinished") = Bool;
overload selector(#"isFinishedLaunching") = Bool;
overload selector(#"isFirstResponder") = Bool;
overload selector(#"isFixedPitch") = Bool;
overload selector(#"isFlipped") = Bool;
overload selector(#"isFloatingPanel") = Bool;
overload selector(#"isFlushWindowDisabled") = Bool;
overload selector(#"isFontAvailable:") = Bool, NSString;
overload selector(#"isFullKeyboardAccessEnabled") = Bool;
overload selector(#"isGathering") = Bool;
overload selector(#"isGeometryFlipped") = Bool;
overload selector(#"isGrammarCheckingEnabled") = Bool;
overload selector(#"isGreaterThan:") = Bool, Id;
overload selector(#"isGreaterThanOrEqualTo:") = Bool, Id;
overload selector(#"isHTTPOnly") = Bool;
overload selector(#"isHidden") = Bool;
overload selector(#"isHiddenOrHasHiddenAncestor") = Bool;
overload selector(#"isHighlighted") = Bool;
overload selector(#"isHorizontallyCentered") = Bool;
overload selector(#"isHorizontallyResizable") = Bool;
overload selector(#"isHostCacheEnabled") = Bool;
overload selector(#"isInFullScreenMode") = Bool;
overload selector(#"isIndeterminate") = Bool;
overload selector(#"isIndexed") = Bool;
overload selector(#"isIndexedBySpotlight") = Bool;
overload selector(#"isItemExpanded:") = Bool, Id;
overload selector(#"isKey:inTable:") = Bool, NSString, NSString;
overload selector(#"isKeyWindow") = Bool;
overload selector(#"isKindOfClass:") = Bool, Id;
overload selector(#"isLeaf") = Bool;
overload selector(#"isLeafItem:") = Bool, Id;
overload selector(#"isLenient") = Bool;
overload selector(#"isLessThan:") = Bool, Id;
overload selector(#"isLessThanOrEqualTo:") = Bool, Id;
overload selector(#"isLike:") = Bool, NSString;
overload selector(#"isLoaded") = Bool;
overload selector(#"isLocationRequiredToCreateForKey:") = Bool, NSString;
overload selector(#"isMainThread") = Bool;
overload selector(#"isMainWindow") = Bool;
overload selector(#"isMemberOfClass:") = Bool, Id;
overload selector(#"isMiniaturizable") = Bool;
overload selector(#"isMiniaturized") = Bool;
overload selector(#"isModalPanel") = Bool;
overload selector(#"isMouseCoalescingEnabled") = Bool;
overload selector(#"isMovable") = Bool;
overload selector(#"isMovableByWindowBackground") = Bool;
overload selector(#"isMultiThreaded") = Bool;
overload selector(#"isMultiple") = Bool;
overload selector(#"isNativeType:") = Bool, NSString;
overload selector(#"isNotEqualTo:") = Bool, Id;
overload selector(#"isOnActiveSpace") = Bool;
overload selector(#"isOneShot") = Bool;
overload selector(#"isOneway") = Bool;
overload selector(#"isOpaque") = Bool;
overload selector(#"isOptional") = Bool;
overload selector(#"isOptionalArgumentWithName:") = Bool, NSString;
overload selector(#"isOutputStackInReverseOrder") = Bool;
overload selector(#"isPaneSplitter") = Bool;
overload selector(#"isPartialStringValid:newEditingString:errorDescription:") = Bool, NSString, Pointer[NSString], Pointer[NSString];
overload selector(#"isPartialStringValid:proposedSelectedRange:originalString:originalSelectedRange:errorDescription:") = Bool, Pointer[NSString], NSRangePointer, NSString, NSRange, Pointer[NSString];
overload selector(#"isPartialStringValidationEnabled") = Bool;
overload selector(#"isPlanar") = Bool;
overload selector(#"isPlaying") = Bool;
overload selector(#"isProxy") = Bool;
overload selector(#"isReadOnlyKey:") = Bool, NSString;
overload selector(#"isReadableFileAtPath:") = Bool, NSString;
overload selector(#"isReady") = Bool;
overload selector(#"isRedoing") = Bool;
overload selector(#"isRegularFile") = Bool;
overload selector(#"isReleasedWhenClosed") = Bool;
overload selector(#"isRemovable") = Bool;
overload selector(#"isResizable") = Bool;
overload selector(#"isResting") = Bool;
overload selector(#"isRichText") = Bool;
overload selector(#"isRotatedFromBase") = Bool;
overload selector(#"isRotatedOrScaledFromBase") = Bool;
overload selector(#"isRowSelected:") = Bool, CLong;
overload selector(#"isRulerVisible") = Bool;
overload selector(#"isRunning") = Bool;
overload selector(#"isScrollable") = Bool;
overload selector(#"isSecure") = Bool;
overload selector(#"isSelectable") = Bool;
overload selector(#"isSelected") = Bool;
overload selector(#"isSelectedForSegment:") = Bool, CLong;
overload selector(#"isSelectionByRect") = Bool;
overload selector(#"isSelectionOnly") = Bool;
overload selector(#"isSeparatorItem") = Bool;
overload selector(#"isSessionOnly") = Bool;
overload selector(#"isSetOnMouseEntered") = Bool;
overload selector(#"isSetOnMouseExited") = Bool;
overload selector(#"isSheet") = Bool;
overload selector(#"isSimpleRectangularTextContainer") = Bool;
overload selector(#"isSpeaking") = Bool;
overload selector(#"isStandalone") = Bool;
overload selector(#"isStarted") = Bool;
overload selector(#"isStopped") = Bool;
overload selector(#"isStoredInExternalRecord") = Bool;
overload selector(#"isSubclassOfClass:") = Bool, Id;
overload selector(#"isSubsetOfHashTable:") = Bool, NSHashTable;
overload selector(#"isSubsetOfSet:") = Bool, NSSet;
overload selector(#"isSubviewCollapsed:") = Bool, NSView;
overload selector(#"isSupersetOfSet:") = Bool, NSCharacterSet;
overload selector(#"isSuspended") = Bool;
overload selector(#"isSymbolicLink") = Bool;
overload selector(#"isTemplate") = Bool;
overload selector(#"isTerminated") = Bool;
overload selector(#"isTitled") = Bool;
overload selector(#"isTornOff") = Bool;
overload selector(#"isTransient") = Bool;
overload selector(#"isTransparent") = Bool;
overload selector(#"isTrue") = Bool;
overload selector(#"isUndoRegistrationEnabled") = Bool;
overload selector(#"isUndoing") = Bool;
overload selector(#"isValid") = Bool;
overload selector(#"isValidGlyphIndex:") = Bool, CULong;
overload selector(#"isVertical") = Bool;
overload selector(#"isVerticallyCentered") = Bool;
overload selector(#"isVerticallyResizable") = Bool;
overload selector(#"isVisible") = Bool;
overload selector(#"isWellFormed") = Bool;
overload selector(#"isWindowLoaded") = Bool;
overload selector(#"isWordInUserDictionaries:caseSensitive:") = Bool, NSString, Bool;
overload selector(#"isWritableFileAtPath:") = Bool, NSString;
overload selector(#"isZoomable") = Bool;
overload selector(#"isZoomed") = Bool;
overload selector(#"italicAngle") = Double;
overload selector(#"itemArray") = NSArray;
overload selector(#"itemAtIndex:") = Id, CLong;
overload selector(#"itemAtIndexPath:") = Id, NSIndexPath;
overload selector(#"itemAtRow:") = Id, CLong;
overload selector(#"itemAtRow:inColumn:") = Id, CLong, CLong;
overload selector(#"itemChanged:") = Void, NSMenuItem;
overload selector(#"itemHeight") = Double;
overload selector(#"itemIdentifier") = NSString;
overload selector(#"itemNumberInTextList:atIndex:") = CLong, NSTextList, CULong;
overload selector(#"itemObjectValueAtIndex:") = Id, CLong;
overload selector(#"itemPrototype") = NSCollectionViewItem;
overload selector(#"itemTitleAtIndex:") = NSString, CLong;
overload selector(#"itemTitles") = NSArray;
overload selector(#"itemWithTag:") = NSMenuItem, CLong;
overload selector(#"itemWithTitle:") = NSMenuItem, NSString;
overload selector(#"items") = NSArray;
overload selector(#"jobDisposition") = NSString;
overload selector(#"jobStyleHint") = NSString;
overload selector(#"jobTitle") = NSString;
overload selector(#"keepBackupFile") = Bool;
overload selector(#"key") = NSString;
overload selector(#"keyCell") = Id;
overload selector(#"keyClassDescription") = NSScriptClassDescription;
overload selector(#"keyCode") = UShort;
overload selector(#"keyDown:") = Void, NSEvent;
overload selector(#"keyEnumerator") = NSEnumerator;
overload selector(#"keyEquivalent") = NSString;
overload selector(#"keyEquivalentFont") = NSFont;
overload selector(#"keyEquivalentModifierMask") = CULong;
overload selector(#"keyEquivalentRectForBounds:") = NSRect, NSRect;
overload selector(#"keyEquivalentWidth") = Double;
overload selector(#"keyEventWithType:location:modifierFlags:timestamp:windowNumber:context:characters:charactersIgnoringModifiers:isARepeat:keyCode:") = NSEvent, CULong, NSPoint, CULong, Double, CLong, NSGraphicsContext, NSString, NSString, Bool, UShort;
overload selector(#"keyForFileWrapper:") = NSString, NSFileWrapper;
overload selector(#"keyPath") = NSString;
overload selector(#"keyPathsForValuesAffectingPreview") = NSSet;
overload selector(#"keyPathsForValuesAffectingValueForKey:") = NSSet, NSString;
overload selector(#"keyPointerFunctions") = NSPointerFunctions;
overload selector(#"keyRepeatDelay") = Double;
overload selector(#"keyRepeatInterval") = Double;
overload selector(#"keySpecifier") = NSScriptObjectSpecifier;
overload selector(#"keyUp:") = Void, NSEvent;
overload selector(#"keyViewSelectionDirection") = CULong;
overload selector(#"keyWindow") = NSWindow;
overload selector(#"keyWithAppleEventCode:") = NSString, UInt;
overload selector(#"keyboardFocusIndicatorColor") = NSColor;
overload selector(#"keyboardInputSources") = NSArray;
overload selector(#"keysOfEntriesPassingTest:") = NSSet, UnknownType;
overload selector(#"keysOfEntriesWithOptions:passingTest:") = NSSet, CULong, UnknownType;
overload selector(#"keysSortedByValueUsingComparator:") = NSArray, NSComparator;
overload selector(#"keysSortedByValueUsingSelector:") = NSArray, SelectorHandle;
overload selector(#"keysSortedByValueWithOptions:usingComparator:") = NSArray, CULong, NSComparator;
overload selector(#"keywordForDescriptorAtIndex:") = UInt, CLong;
overload selector(#"kind") = CULong;
overload selector(#"knobColor") = NSColor;
overload selector(#"knobProportion") = Double;
overload selector(#"knobRectFlipped:") = NSRect, Bool;
overload selector(#"knobThickness") = Double;
overload selector(#"knownTimeZoneNames") = NSArray;
overload selector(#"knowsPageRange:") = Bool, NSRangePointer;
overload selector(#"label") = NSString;
overload selector(#"labelFontOfSize:") = NSFont, Double;
overload selector(#"labelFontSize") = Double;
overload selector(#"labelForSegment:") = NSString, CLong;
overload selector(#"language") = NSString;
overload selector(#"languageLevel") = CLong;
overload selector(#"languageMap") = NSDictionary;
overload selector(#"languagesForScript:") = NSArray, NSString;
overload selector(#"lastColumn") = CLong;
overload selector(#"lastComponentOfFileName") = NSString;
overload selector(#"lastIndex") = CULong;
overload selector(#"lastItem") = NSMenuItem;
overload selector(#"lastObject") = Id;
overload selector(#"lastPathComponent") = NSString;
overload selector(#"lastVisibleColumn") = CLong;
overload selector(#"laterDate:") = NSDate, NSDate;
overload selector(#"launch") = Void;
overload selector(#"launchAppWithBundleIdentifier:options:additionalEventParamDescriptor:launchIdentifier:") = Bool, NSString, CULong, NSAppleEventDescriptor, Pointer[NSNumber];
overload selector(#"launchApplication:") = Bool, NSString;
overload selector(#"launchApplication:showIcon:autolaunch:") = Bool, NSString, Bool, Bool;
overload selector(#"launchApplicationAtURL:options:configuration:error:") = NSRunningApplication, NSURL, CULong, NSDictionary, Pointer[NSError];
overload selector(#"launchDate") = NSDate;
overload selector(#"launchPath") = NSString;
overload selector(#"launchedApplications") = NSArray;
overload selector(#"launchedTaskWithLaunchPath:arguments:") = NSTask, NSString, NSArray;
overload selector(#"layer") = Id;
overload selector(#"layerContentsPlacement") = CLong;
overload selector(#"layerContentsRedrawPolicy") = CLong;
overload selector(#"layout") = Void;
overload selector(#"layoutAlgorithm") = CULong;
overload selector(#"layoutCharactersInRange:forLayoutManager:maximumNumberOfLineFragments:") = NSRange, NSRange, NSLayoutManager, CULong;
overload selector(#"layoutGlyphsInLayoutManager:startingAtGlyphIndex:maxNumberOfLineFragments:nextGlyphIndex:") = Void, NSLayoutManager, CULong, CULong, Pointer[CULong];
overload selector(#"layoutIfNeeded") = Void;
overload selector(#"layoutManager") = Id;
overload selector(#"layoutManager:didCompleteLayoutForTextContainer:atEnd:") = Void, NSLayoutManager, NSTextContainer, Bool;
overload selector(#"layoutManager:shouldUseTemporaryAttributes:forDrawingToScreen:atCharacterIndex:effectiveRange:") = NSDictionary, NSLayoutManager, NSDictionary, Bool, CULong, NSRangePointer;
overload selector(#"layoutManagerDidInvalidateLayout:") = Void, NSLayoutManager;
overload selector(#"layoutManagerOwnsFirstResponderInWindow:") = Bool, NSWindow;
overload selector(#"layoutManagers") = NSArray;
overload selector(#"layoutOptions") = CULong;
overload selector(#"layoutParagraphAtPoint:") = CULong, NSPointPointer;
overload selector(#"layoutRectForTextBlock:atIndex:effectiveRange:") = NSRect, NSTextBlock, CULong, NSRangePointer;
overload selector(#"layoutRectForTextBlock:glyphRange:") = NSRect, NSTextBlock, NSRange;
overload selector(#"layoutSublayers") = Void;
overload selector(#"layoutSublayersOfLayer:") = Void, CALayer;
overload selector(#"leading") = Double;
overload selector(#"leadingOffset") = Double;
overload selector(#"leafKeyPath") = NSString;
overload selector(#"leafKeyPathForNode:") = NSString, NSTreeNode;
overload selector(#"learnWord:") = Void, NSString;
overload selector(#"leftExpression") = NSExpression;
overload selector(#"leftExpressions") = NSArray;
overload selector(#"leftMargin") = Double;
overload selector(#"length") = CULong;
overload selector(#"lengthOfBytesUsingEncoding:") = CULong, CULong;
overload selector(#"letterCharacterSet") = Id;
overload selector(#"level") = CULong;
overload selector(#"levelForItem:") = CLong, Id;
overload selector(#"levelForRow:") = CLong, CLong;
overload selector(#"levelIndicatorStyle") = CULong;
overload selector(#"levelsOfUndo") = CULong;
overload selector(#"lightGrayColor") = NSColor;
overload selector(#"limitDateForMode:") = NSDate, NSString;
overload selector(#"lineBreakBeforeIndex:withinRange:") = CULong, CULong, NSRange;
overload selector(#"lineBreakByHyphenatingBeforeIndex:withinRange:") = CULong, CULong, NSRange;
overload selector(#"lineBreakMode") = CULong;
overload selector(#"lineCapStyle") = CULong;
overload selector(#"lineDirectionForLanguage:") = CULong, NSString;
overload selector(#"lineFragmentPadding") = Double;
overload selector(#"lineFragmentRectForGlyphAtIndex:effectiveRange:") = NSRect, CULong, NSRangePointer;
overload selector(#"lineFragmentRectForGlyphAtIndex:effectiveRange:withoutAdditionalLayout:") = NSRect, CULong, NSRangePointer, Bool;
overload selector(#"lineFragmentRectForProposedRect:remainingRect:") = NSRect, NSRect, NSRectPointer;
overload selector(#"lineFragmentRectForProposedRect:sweepDirection:movementDirection:remainingRect:") = NSRect, NSRect, CULong, CULong, NSRectPointer;
overload selector(#"lineFragmentUsedRectForGlyphAtIndex:effectiveRange:") = NSRect, CULong, NSRangePointer;
overload selector(#"lineFragmentUsedRectForGlyphAtIndex:effectiveRange:withoutAdditionalLayout:") = NSRect, CULong, NSRangePointer, Bool;
overload selector(#"lineHeightMultiple") = Double;
overload selector(#"lineJoinStyle") = CULong;
overload selector(#"lineNumber") = CLong;
overload selector(#"lineRangeForRange:") = NSRange, NSRange;
overload selector(#"lineScroll") = Double;
overload selector(#"lineSpacing") = Double;
overload selector(#"lineSpacingAfterGlyphAtIndex:withProposedLineFragmentRect:") = Double, CULong, NSRect;
overload selector(#"lineToPoint:") = Void, NSPoint;
overload selector(#"lineWidth") = Double;
overload selector(#"linkCheckingResultWithRange:URL:") = NSTextCheckingResult, NSRange, NSURL;
overload selector(#"linkItemAtPath:toPath:error:") = Bool, NSString, NSString, Pointer[NSError];
overload selector(#"linkItemAtURL:toURL:error:") = Bool, NSURL, NSURL, Pointer[NSError];
overload selector(#"linkPath:toPath:handler:") = Bool, NSString, NSString, Id;
overload selector(#"linkTextAttributes") = NSDictionary;
overload selector(#"listDescriptor") = NSAppleEventDescriptor;
overload selector(#"listOptions") = CULong;
overload selector(#"listensInForegroundOnly") = Bool;
overload selector(#"load") = Bool;
overload selector(#"loadAndReturnError:") = Bool, Pointer[NSError];
overload selector(#"loadColumnZero") = Void;
overload selector(#"loadDataRepresentation:ofType:") = Bool, NSData, NSString;
overload selector(#"loadFileWrapperRepresentation:ofType:") = Bool, NSFileWrapper, NSString;
overload selector(#"loadInBackground") = Void;
overload selector(#"loadInForeground") = NSData;
overload selector(#"loadNibFile:externalNameTable:withZone:") = Bool, NSString, NSDictionary, Pointer[NSZone];
overload selector(#"loadNibNamed:owner:") = Bool, NSString, Id;
overload selector(#"loadResourceDataNotifyingClient:usingCache:") = Void, Id, Bool;
overload selector(#"loadSuiteWithDictionary:fromBundle:") = Void, NSDictionary, NSBundle;
overload selector(#"loadSuitesFromBundle:") = Void, NSBundle;
overload selector(#"loadView") = Void;
overload selector(#"loadWindow") = Void;
overload selector(#"loadedCellAtRow:column:") = Id, CLong, CLong;
overload selector(#"localName") = NSString;
overload selector(#"localNameForName:") = NSString, NSString;
overload selector(#"localObjects") = NSArray;
overload selector(#"localTimeZone") = NSTimeZone;
overload selector(#"locale") = Id;
overload selector(#"localeIdentifier") = NSString;
overload selector(#"localeIdentifierFromComponents:") = NSString, NSDictionary;
overload selector(#"localeIdentifierFromWindowsLocaleCode:") = NSString, UInt;
overload selector(#"localizations") = NSArray;
overload selector(#"localizedCaseInsensitiveCompare:") = CLong, NSString;
overload selector(#"localizedCatalogNameComponent") = NSString;
overload selector(#"localizedColorNameComponent") = NSString;
overload selector(#"localizedCompare:") = CLong, NSString;
overload selector(#"localizedDescription") = NSString;
overload selector(#"localizedDescriptionForType:") = NSString, NSString;
overload selector(#"localizedFailureReason") = NSString;
overload selector(#"localizedInfoDictionary") = NSDictionary;
overload selector(#"localizedInputManagerName") = NSString;
overload selector(#"localizedKey") = NSString;
overload selector(#"localizedKeyDictionary") = NSDictionary;
overload selector(#"localizedKeyTable") = NSString;
overload selector(#"localizedName") = NSString;
overload selector(#"localizedName:locale:") = NSString, CLong, NSLocale;
overload selector(#"localizedNameForFamily:face:") = NSString, NSString, NSString;
overload selector(#"localizedNameForInputSource:") = NSString, NSString;
overload selector(#"localizedNameForTIFFCompressionType:") = NSString, CULong;
overload selector(#"localizedNameOfStringEncoding:") = NSString, CULong;
overload selector(#"localizedPaperName") = NSString;
overload selector(#"localizedRecoveryOptions") = NSArray;
overload selector(#"localizedRecoverySuggestion") = NSString;
overload selector(#"localizedScannerWithString:") = Id, NSString;
overload selector(#"localizedStandardCompare:") = CLong, NSString;
overload selector(#"localizedStringForKey:value:table:") = NSString, NSString, NSString, NSString;
overload selector(#"localizedStringForStatusCode:") = NSString, CLong;
overload selector(#"localizedStringFromDate:dateStyle:timeStyle:") = NSString, NSDate, CULong, CULong;
overload selector(#"localizedStringFromNumber:numberStyle:") = NSString, NSNumber, CULong;
overload varargSelector(#"localizedStringWithFormat:") = Id, NSString;
overload selector(#"localizedSummaryItems") = NSArray;
overload selector(#"localizedTitlesForItem:") = NSArray, Id;
overload selector(#"localizesFormat") = Bool;
overload selector(#"location") = Double;
overload selector(#"locationForGlyphAtIndex:") = NSPoint, CULong;
overload selector(#"locationForSubmenu:") = NSPoint, NSMenu;
overload selector(#"locationInWindow") = NSPoint;
overload selector(#"locationOfPrintRect:") = NSPoint, NSRect;
overload selector(#"lock") = Void;
overload selector(#"lockBeforeDate:") = Bool, NSDate;
overload selector(#"lockDate") = NSDate;
overload selector(#"lockFocus") = Void;
overload selector(#"lockFocusFlipped:") = Void, Bool;
overload selector(#"lockFocusIfCanDraw") = Bool;
overload selector(#"lockFocusIfCanDrawInContext:") = Bool, NSGraphicsContext;
overload selector(#"lockFocusOnRepresentation:") = Void, NSImageRep;
overload selector(#"lockWhenCondition:") = Void, CLong;
overload selector(#"lockWhenCondition:beforeDate:") = Bool, CLong, NSDate;
overload selector(#"lockWithPath:") = NSDistributedLock, NSString;
overload selector(#"longCharacterIsMember:") = Bool, UInt;
overload selector(#"longEraSymbols") = NSArray;
overload selector(#"longLongValue") = Int64;
overload selector(#"longValue") = CLong;
overload selector(#"loops") = Bool;
overload selector(#"loosenKerning:") = Void, Id;
overload selector(#"lossyCString") = Pointer[CChar];
overload selector(#"lowerBaseline:") = Void, Id;
overload selector(#"lowercaseLetterCharacterSet") = Id;
overload selector(#"lowercaseString") = NSString;
overload selector(#"lowercaseWord:") = Void, Id;
overload selector(#"machPort") = UInt;
overload selector(#"magentaColor") = NSColor;
overload selector(#"magentaComponent") = Double;
overload selector(#"magnification") = Double;
overload selector(#"magnificationFilter") = NSString;
overload selector(#"magnifyWithEvent:") = Void, NSEvent;
overload selector(#"main") = Void;
overload selector(#"mainBundle") = NSBundle;
overload selector(#"mainDocumentURL") = NSURL;
overload selector(#"mainMenu") = NSMenu;
overload selector(#"mainQueue") = Id;
overload selector(#"mainRunLoop") = NSRunLoop;
overload selector(#"mainScreen") = NSScreen;
overload selector(#"mainThread") = NSThread;
overload selector(#"mainWindow") = NSWindow;
overload selector(#"makeBackingLayer") = CALayer;
overload selector(#"makeBaseWritingDirectionLeftToRight:") = Void, Id;
overload selector(#"makeBaseWritingDirectionNatural:") = Void, Id;
overload selector(#"makeBaseWritingDirectionRightToLeft:") = Void, Id;
overload selector(#"makeCellAtRow:column:") = NSCell, CLong, CLong;
overload selector(#"makeCurrentContext") = Void;
overload selector(#"makeDocumentForURL:withContentsOfURL:ofType:error:") = Id, NSURL, NSURL, NSString, Pointer[NSError];
overload selector(#"makeDocumentWithContentsOfFile:ofType:") = Id, NSString, NSString;
overload selector(#"makeDocumentWithContentsOfURL:ofType:") = Id, NSURL, NSString;
overload selector(#"makeDocumentWithContentsOfURL:ofType:error:") = Id, NSURL, NSString, Pointer[NSError];
overload selector(#"makeFirstResponder:") = Bool, NSResponder;
overload selector(#"makeKeyAndOrderFront:") = Void, Id;
overload selector(#"makeKeyWindow") = Void;
overload selector(#"makeMainWindow") = Void;
overload selector(#"makeNewConnection:sender:") = Bool, NSConnection, NSConnection;
overload selector(#"makeNextSegmentKey") = Void;
overload selector(#"makeObjectsPerformSelector:") = Void, SelectorHandle;
overload selector(#"makeObjectsPerformSelector:withObject:") = Void, SelectorHandle, Id;
overload selector(#"makePreviousSegmentKey") = Void;
overload selector(#"makeTextWritingDirectionLeftToRight:") = Void, Id;
overload selector(#"makeTextWritingDirectionNatural:") = Void, Id;
overload selector(#"makeTextWritingDirectionRightToLeft:") = Void, Id;
overload selector(#"makeUntitledDocumentOfType:") = Id, NSString;
overload selector(#"makeUntitledDocumentOfType:error:") = Id, NSString, Pointer[NSError];
overload selector(#"makeWindowControllers") = Void;
overload selector(#"makeWindowsPerform:inOrder:") = NSWindow, SelectorHandle, Bool;
overload selector(#"managedObjectContext") = NSManagedObjectContext;
overload selector(#"managedObjectModel") = Id;
overload selector(#"mapTableWithKeyOptions:valueOptions:") = Id, CULong, CULong;
overload selector(#"mapTableWithStrongToStrongObjects") = Id;
overload selector(#"mapTableWithStrongToWeakObjects") = Id;
overload selector(#"mapTableWithWeakToStrongObjects") = Id;
overload selector(#"mapTableWithWeakToWeakObjects") = Id;
overload selector(#"markedRange") = NSRange;
overload selector(#"markedTextAbandoned:") = Void, Id;
overload selector(#"markedTextAttributes") = NSDictionary;
overload selector(#"markedTextSelectionChanged:client:") = Void, NSRange, Id;
overload selector(#"markerForItemNumber:") = NSString, CLong;
overload selector(#"markerFormat") = NSString;
overload selector(#"markerLocation") = Double;
overload selector(#"markers") = NSArray;
overload selector(#"mask") = CALayer;
overload selector(#"masksToBounds") = Bool;
overload selector(#"matchForPredicate:") = Double, NSPredicate;
overload selector(#"matchesAppleEventCode:") = Bool, UInt;
overload selector(#"matchesContentsOfURL:") = Bool, NSURL;
overload selector(#"matchesOnMultipleResolution") = Bool;
overload selector(#"matchingFontDescriptorWithMandatoryKeys:") = NSFontDescriptor, NSSet;
overload selector(#"matchingFontDescriptorsWithMandatoryKeys:") = NSArray, NSSet;
overload selector(#"matrix") = Pointer[Double];
overload selector(#"matrixClass") = Id;
overload selector(#"matrixInColumn:") = NSMatrix, CLong;
overload selector(#"maxConcurrentOperationCount") = CLong;
overload selector(#"maxContentSize") = NSSize;
overload selector(#"maxDate") = NSDate;
overload selector(#"maxItemSize") = NSSize;
overload selector(#"maxNumberOfColumns") = CULong;
overload selector(#"maxNumberOfRows") = CULong;
overload selector(#"maxPossiblePositionOfDividerAtIndex:") = Double, CLong;
overload selector(#"maxSize") = NSSize;
overload selector(#"maxValue") = Double;
overload selector(#"maxVisibleColumns") = CLong;
overload selector(#"maxWidth") = Double;
overload selector(#"maximum") = NSNumber;
overload selector(#"maximumAdvancement") = NSSize;
overload selector(#"maximumDecimalNumber") = NSDecimalNumber;
overload selector(#"maximumFractionDigits") = CULong;
overload selector(#"maximumIntegerDigits") = CULong;
overload selector(#"maximumLengthOfBytesUsingEncoding:") = CULong, CULong;
overload selector(#"maximumLineHeight") = Double;
overload selector(#"maximumRangeOfUnit:") = NSRange, CULong;
overload selector(#"maximumRecentDocumentCount") = CULong;
overload selector(#"maximumRecents") = CLong;
overload selector(#"maximumSignificantDigits") = CULong;
overload selector(#"measurementUnits") = NSString;
overload selector(#"member:") = Id, Id;
overload selector(#"memoryCapacity") = CULong;
overload selector(#"menu") = NSMenu;
overload selector(#"menu:updateItem:atIndex:shouldCancel:") = Bool, NSMenu, NSMenuItem, CLong, Bool;
overload selector(#"menu:willHighlightItem:") = Void, NSMenu, NSMenuItem;
overload selector(#"menuBarFontOfSize:") = NSFont, Double;
overload selector(#"menuBarHeight") = Double;
overload selector(#"menuBarVisible") = Bool;
overload selector(#"menuChanged:") = Void, NSMenu;
overload selector(#"menuChangedMessagesEnabled") = Bool;
overload selector(#"menuDidClose:") = Void, NSMenu;
overload selector(#"menuFontOfSize:") = NSFont, Double;
overload selector(#"menuForEvent:") = NSMenu, NSEvent;
overload selector(#"menuForEvent:inRect:ofView:") = NSMenu, NSEvent, NSRect, NSView;
overload selector(#"menuForResult:string:options:atLocation:inView:") = NSMenu, NSTextCheckingResult, NSString, NSDictionary, NSPoint, NSView;
overload selector(#"menuForSegment:") = NSMenu, CLong;
overload selector(#"menuFormRepresentation") = NSMenuItem;
overload selector(#"menuHasKeyEquivalent:forEvent:target:action:") = Bool, NSMenu, NSEvent, Pointer[Id], Pointer[SelectorHandle];
overload selector(#"menuItem") = NSMenuItem;
overload selector(#"menuNeedsUpdate:") = Void, NSMenu;
overload selector(#"menuRepresentation") = Id;
overload selector(#"menuWillOpen:") = Void, NSMenu;
overload selector(#"menuZone") = Pointer[NSZone];
overload selector(#"message") = NSString;
overload selector(#"messageFontOfSize:") = NSFont, Double;
overload selector(#"messageText") = NSString;
overload selector(#"metadataQuery:replacementObjectForResultObject:") = Id, NSMetadataQuery, NSMetadataItem;
overload selector(#"metadataQuery:replacementValueForAttribute:value:") = Id, NSMetadataQuery, NSString, Id;
overload selector(#"methodForSelector:") = IMP, SelectorHandle;
overload selector(#"methodReturnLength") = CULong;
overload selector(#"methodReturnType") = Pointer[CChar];
overload selector(#"methodSignature") = NSMethodSignature;
overload selector(#"methodSignatureForSelector:") = NSMethodSignature, SelectorHandle;
overload selector(#"minColumnWidth") = Double;
overload selector(#"minContentSize") = NSSize;
overload selector(#"minDate") = NSDate;
overload selector(#"minFrameWidthWithTitle:styleMask:") = Double, NSString, CULong;
overload selector(#"minItemSize") = NSSize;
overload selector(#"minPossiblePositionOfDividerAtIndex:") = Double, CLong;
overload selector(#"minSize") = NSSize;
overload selector(#"minValue") = Double;
overload selector(#"minWidth") = Double;
overload selector(#"miniaturize:") = Void, Id;
overload selector(#"miniaturizeAll:") = Void, Id;
overload selector(#"minificationFilter") = NSString;
overload selector(#"minificationFilterBias") = Float;
overload selector(#"minimum") = NSNumber;
overload selector(#"minimumDaysInFirstWeek") = CULong;
overload selector(#"minimumDecimalNumber") = NSDecimalNumber;
overload selector(#"minimumFractionDigits") = CULong;
overload selector(#"minimumIntegerDigits") = CULong;
overload selector(#"minimumLineHeight") = Double;
overload selector(#"minimumRangeOfUnit:") = NSRange, CULong;
overload selector(#"minimumSignificantDigits") = CULong;
overload selector(#"minimumSize") = NSSize;
overload selector(#"minimumWidth") = Double;
overload selector(#"miniwindowImage") = NSImage;
overload selector(#"miniwindowTitle") = NSString;
overload selector(#"minusHashTable:") = Void, NSHashTable;
overload selector(#"minusSet:") = Void, NSSet;
overload selector(#"minusSign") = NSString;
overload selector(#"minute") = CLong;
overload selector(#"minuteOfHour") = CLong;
overload selector(#"miterLimit") = Double;
overload selector(#"mixedStateImage") = NSImage;
overload selector(#"mnemonic") = NSString;
overload selector(#"mnemonicLocation") = CULong;
overload selector(#"modalWindow") = NSWindow;
overload selector(#"mode") = CULong;
overload selector(#"modelLayer") = Id;
overload selector(#"modifier") = CULong;
overload selector(#"modifierFlags") = CULong;
overload selector(#"modifyFont:") = Void, Id;
overload selector(#"modifyFontViaPanel:") = Void, Id;
overload selector(#"month") = CLong;
overload selector(#"monthOfYear") = CLong;
overload selector(#"monthSymbols") = NSArray;
overload selector(#"mostCompatibleStringEncoding") = CULong;
overload selector(#"mountNewRemovableMedia") = NSArray;
overload selector(#"mountedLocalVolumePaths") = NSArray;
overload selector(#"mountedRemovableMedia") = NSArray;
overload selector(#"mountedVolumeURLsIncludingResourceValuesForKeys:options:") = NSArray, NSArray, CULong;
overload selector(#"mouse:inRect:") = Bool, NSPoint, NSRect;
overload selector(#"mouseDown:") = Void, NSEvent;
overload selector(#"mouseDownCanMoveWindow") = Bool;
overload selector(#"mouseDownFlags") = CLong;
overload selector(#"mouseDownOnCharacterIndex:atCoordinate:withModifier:client:") = Bool, CULong, NSPoint, CULong, Id;
overload selector(#"mouseDragged:") = Void, NSEvent;
overload selector(#"mouseDraggedOnCharacterIndex:atCoordinate:withModifier:client:") = Bool, CULong, NSPoint, CULong, Id;
overload selector(#"mouseEntered:") = Void, NSEvent;
overload selector(#"mouseEntered:withFrame:inView:") = Void, NSEvent, NSRect, NSView;
overload selector(#"mouseEventWithType:location:modifierFlags:timestamp:windowNumber:context:eventNumber:clickCount:pressure:") = NSEvent, CULong, NSPoint, CULong, Double, CLong, NSGraphicsContext, CLong, CLong, Float;
overload selector(#"mouseExited:") = Void, NSEvent;
overload selector(#"mouseExited:withFrame:inView:") = Void, NSEvent, NSRect, NSView;
overload selector(#"mouseLocation") = NSPoint;
overload selector(#"mouseLocationOutsideOfEventStream") = NSPoint;
overload selector(#"mouseMoved:") = Void, NSEvent;
overload selector(#"mouseUp:") = Void, NSEvent;
overload selector(#"mouseUpOnCharacterIndex:atCoordinate:withModifier:client:") = Void, CULong, NSPoint, CULong, Id;
overload selector(#"moveBackward:") = Void, Id;
overload selector(#"moveBackwardAndModifySelection:") = Void, Id;
overload selector(#"moveColumn:toColumn:") = Void, CLong, CLong;
overload selector(#"moveDown:") = Void, Id;
overload selector(#"moveDownAndModifySelection:") = Void, Id;
overload selector(#"moveForward:") = Void, Id;
overload selector(#"moveForwardAndModifySelection:") = Void, Id;
overload selector(#"moveItemAtPath:toPath:error:") = Bool, NSString, NSString, Pointer[NSError];
overload selector(#"moveItemAtURL:toURL:error:") = Bool, NSURL, NSURL, Pointer[NSError];
overload selector(#"moveLeft:") = Void, Id;
overload selector(#"moveLeftAndModifySelection:") = Void, Id;
overload selector(#"moveNode:toIndexPath:") = Void, NSTreeNode, NSIndexPath;
overload selector(#"moveNodes:toIndexPath:") = Void, NSArray, NSIndexPath;
overload selector(#"moveParagraphBackwardAndModifySelection:") = Void, Id;
overload selector(#"moveParagraphForwardAndModifySelection:") = Void, Id;
overload selector(#"movePath:toPath:handler:") = Bool, NSString, NSString, Id;
overload selector(#"moveRight:") = Void, Id;
overload selector(#"moveRightAndModifySelection:") = Void, Id;
overload selector(#"moveRulerlineFromLocation:toLocation:") = Void, Double, Double;
overload selector(#"moveToBeginningOfDocument:") = Void, Id;
overload selector(#"moveToBeginningOfDocumentAndModifySelection:") = Void, Id;
overload selector(#"moveToBeginningOfLine:") = Void, Id;
overload selector(#"moveToBeginningOfLineAndModifySelection:") = Void, Id;
overload selector(#"moveToBeginningOfParagraph:") = Void, Id;
overload selector(#"moveToBeginningOfParagraphAndModifySelection:") = Void, Id;
overload selector(#"moveToEndOfDocument:") = Void, Id;
overload selector(#"moveToEndOfDocumentAndModifySelection:") = Void, Id;
overload selector(#"moveToEndOfLine:") = Void, Id;
overload selector(#"moveToEndOfLineAndModifySelection:") = Void, Id;
overload selector(#"moveToEndOfParagraph:") = Void, Id;
overload selector(#"moveToEndOfParagraphAndModifySelection:") = Void, Id;
overload selector(#"moveToLeftEndOfLine:") = Void, Id;
overload selector(#"moveToLeftEndOfLineAndModifySelection:") = Void, Id;
overload selector(#"moveToPoint:") = Void, NSPoint;
overload selector(#"moveToRightEndOfLine:") = Void, Id;
overload selector(#"moveToRightEndOfLineAndModifySelection:") = Void, Id;
overload selector(#"moveUp:") = Void, Id;
overload selector(#"moveUpAndModifySelection:") = Void, Id;
overload selector(#"moveWordBackward:") = Void, Id;
overload selector(#"moveWordBackwardAndModifySelection:") = Void, Id;
overload selector(#"moveWordForward:") = Void, Id;
overload selector(#"moveWordForwardAndModifySelection:") = Void, Id;
overload selector(#"moveWordLeft:") = Void, Id;
overload selector(#"moveWordLeftAndModifySelection:") = Void, Id;
overload selector(#"moveWordRight:") = Void, Id;
overload selector(#"moveWordRightAndModifySelection:") = Void, Id;
overload selector(#"msgid") = UInt;
overload selector(#"multipleThreadsEnabled") = Bool;
overload selector(#"multiplier") = NSNumber;
overload selector(#"mutableArrayValueForKey:") = NSMutableArray, NSString;
overload selector(#"mutableArrayValueForKeyPath:") = NSMutableArray, NSString;
overload selector(#"mutableBytes") = RawPointer;
overload selector(#"mutableChildNodes") = NSMutableArray;
overload selector(#"mutableCopy") = Id;
overload selector(#"mutableCopyWithZone:") = Id, Pointer[NSZone];
overload selector(#"mutableSetValueForKey:") = NSMutableSet, NSString;
overload selector(#"mutableSetValueForKeyPath:") = NSMutableSet, NSString;
overload selector(#"mutableString") = NSMutableString;
overload selector(#"name") = NSString;
overload selector(#"nameFieldLabel") = NSString;
overload selector(#"nameFieldStringValue") = NSString;
overload selector(#"names") = NSArray;
overload selector(#"namesOfPromisedFilesDroppedAtDestination:") = NSArray, NSURL;
overload selector(#"namespaceForPrefix:") = NSXMLNode, NSString;
overload selector(#"namespaceWithName:stringValue:") = Id, NSString, NSString;
overload selector(#"namespaces") = NSArray;
overload selector(#"needsDisplay") = Bool;
overload selector(#"needsDisplayForKey:") = Bool, NSString;
overload selector(#"needsDisplayOnBoundsChange") = Bool;
overload selector(#"needsLayout") = Bool;
overload selector(#"needsPanelToBecomeKey") = Bool;
overload selector(#"needsSizing") = Bool;
overload selector(#"needsToBeUpdatedFromPath:") = Bool, NSString;
overload selector(#"needsToDrawRect:") = Bool, NSRect;
overload selector(#"negativeFormat") = NSString;
overload selector(#"negativeInfinitySymbol") = NSString;
overload selector(#"negativePrefix") = NSString;
overload selector(#"negativeSuffix") = NSString;
overload selector(#"nestingMode") = CULong;
overload selector(#"netService:didNotPublish:") = Void, NSNetService, NSDictionary;
overload selector(#"netService:didNotResolve:") = Void, NSNetService, NSDictionary;
overload selector(#"netService:didUpdateTXTRecordData:") = Void, NSNetService, NSData;
overload selector(#"netServiceBrowser:didFindDomain:moreComing:") = Void, NSNetServiceBrowser, NSString, Bool;
overload selector(#"netServiceBrowser:didFindService:moreComing:") = Void, NSNetServiceBrowser, NSNetService, Bool;
overload selector(#"netServiceBrowser:didNotSearch:") = Void, NSNetServiceBrowser, NSDictionary;
overload selector(#"netServiceBrowser:didRemoveDomain:moreComing:") = Void, NSNetServiceBrowser, NSString, Bool;
overload selector(#"netServiceBrowser:didRemoveService:moreComing:") = Void, NSNetServiceBrowser, NSNetService, Bool;
overload selector(#"netServiceBrowserDidStopSearch:") = Void, NSNetServiceBrowser;
overload selector(#"netServiceBrowserWillSearch:") = Void, NSNetServiceBrowser;
overload selector(#"netServiceDidPublish:") = Void, NSNetService;
overload selector(#"netServiceDidResolveAddress:") = Void, NSNetService;
overload selector(#"netServiceDidStop:") = Void, NSNetService;
overload selector(#"netServiceWillPublish:") = Void, NSNetService;
overload selector(#"netServiceWillResolve:") = Void, NSNetService;
overload selector(#"new") = Id;
overload selector(#"newDocument:") = Void, Id;
overload selector(#"newItemForRepresentedObject:") = NSCollectionViewItem, Id;
overload selector(#"newObject") = Id;
overload selector(#"newScriptingObjectOfClass:forValueForKey:withContentsValue:properties:") = Id, Id, NSString, Id, NSDictionary;
overload selector(#"newlineCharacterSet") = Id;
overload selector(#"nextDaylightSavingTimeTransition") = NSDate;
overload selector(#"nextDaylightSavingTimeTransitionAfterDate:") = NSDate, NSDate;
overload selector(#"nextEventMatchingMask:") = NSEvent, CULong;
overload selector(#"nextEventMatchingMask:untilDate:inMode:dequeue:") = NSEvent, CULong, NSDate, NSString, Bool;
overload selector(#"nextKeyView") = NSView;
overload selector(#"nextNode") = NSXMLNode;
overload selector(#"nextObject") = Id;
overload selector(#"nextResponder") = NSResponder;
overload selector(#"nextSibling") = NSXMLNode;
overload selector(#"nextState") = CLong;
overload selector(#"nextValidKeyView") = NSView;
overload selector(#"nextWordFromIndex:forward:") = CULong, CULong, Bool;
overload selector(#"nibBundle") = NSBundle;
overload selector(#"nibName") = NSString;
overload selector(#"nilSymbol") = NSString;
overload selector(#"noResponderFor:") = Void, SelectorHandle;
overload selector(#"nodesForXPath:error:") = NSArray, NSString, Pointer[NSError];
overload selector(#"nonBaseCharacterSet") = Id;
overload selector(#"nonretainedObjectValue") = Id;
overload selector(#"normalizeAdjacentTextNodesPreservingCDATA:") = Void, Bool;
overload selector(#"normalizedPosition") = NSPoint;
overload selector(#"notANumber") = NSDecimalNumber;
overload selector(#"notANumberSymbol") = NSString;
overload selector(#"notPredicateWithSubpredicate:") = NSPredicate, NSPredicate;
overload selector(#"notShownAttributeForGlyphAtIndex:") = Bool, CULong;
overload selector(#"notationDeclarationForName:") = NSXMLDTDNode, NSString;
overload selector(#"notationName") = NSString;
overload selector(#"note") = NSString;
overload selector(#"noteFileSystemChanged") = Void;
overload selector(#"noteFileSystemChanged:") = Void, NSString;
overload selector(#"noteHeightOfRowsWithIndexesChanged:") = Void, NSIndexSet;
overload selector(#"noteHeightOfRowsWithIndexesChanged:inColumn:") = Void, NSIndexSet, CLong;
overload selector(#"noteNewRecentDocument:") = Void, NSDocument;
overload selector(#"noteNewRecentDocumentURL:") = Void, NSURL;
overload selector(#"noteNumberOfItemsChanged") = Void;
overload selector(#"noteNumberOfRowsChanged") = Void;
overload selector(#"noteUserDefaultsChanged") = Void;
overload selector(#"notificationBatchingInterval") = Double;
overload selector(#"notificationCenter") = NSNotificationCenter;
overload selector(#"notificationCenterForType:") = NSDistributedNotificationCenter, NSString;
overload selector(#"notificationWithName:object:") = Id, NSString, Id;
overload selector(#"notificationWithName:object:userInfo:") = Id, NSString, Id, NSDictionary;
overload selector(#"null") = NSNull;
overload selector(#"nullDescriptor") = NSAppleEventDescriptor;
overload selector(#"numberFromString:") = NSNumber, NSString;
overload selector(#"numberOfArguments") = CULong;
overload selector(#"numberOfColorComponents") = CLong;
overload selector(#"numberOfColorStops") = CLong;
overload selector(#"numberOfColumns") = CLong;
overload selector(#"numberOfComponents") = CULong;
overload selector(#"numberOfGlyphs") = CULong;
overload selector(#"numberOfItems") = CLong;
overload selector(#"numberOfItemsInComboBox:") = CLong, NSComboBox;
overload selector(#"numberOfItemsInComboBoxCell:") = CLong, NSComboBoxCell;
overload selector(#"numberOfItemsInMenu:") = CLong, NSMenu;
overload selector(#"numberOfMajorTickMarks") = CLong;
overload selector(#"numberOfPlanes") = CLong;
overload selector(#"numberOfRows") = CLong;
overload selector(#"numberOfRowsInTableView:") = CLong, NSTableView;
overload selector(#"numberOfSelectedColumns") = CLong;
overload selector(#"numberOfSelectedRows") = CLong;
overload selector(#"numberOfTabViewItems") = CLong;
overload selector(#"numberOfTickMarks") = CLong;
overload selector(#"numberOfVirtualScreens") = Int;
overload selector(#"numberOfVisibleColumns") = CLong;
overload selector(#"numberOfVisibleItems") = CLong;
overload selector(#"numberStyle") = CULong;
overload selector(#"numberWithBool:") = NSNumber, Bool;
overload selector(#"numberWithChar:") = NSNumber, CChar;
overload selector(#"numberWithDouble:") = NSNumber, Double;
overload selector(#"numberWithFloat:") = NSNumber, Float;
overload selector(#"numberWithInt:") = NSNumber, Int;
overload selector(#"numberWithInteger:") = NSNumber, CLong;
overload selector(#"numberWithLong:") = NSNumber, CLong;
overload selector(#"numberWithLongLong:") = NSNumber, Int64;
overload selector(#"numberWithShort:") = NSNumber, Short;
overload selector(#"numberWithUnsignedChar:") = NSNumber, CUChar;
overload selector(#"numberWithUnsignedInt:") = NSNumber, UInt;
overload selector(#"numberWithUnsignedInteger:") = NSNumber, CULong;
overload selector(#"numberWithUnsignedLong:") = NSNumber, CULong;
overload selector(#"numberWithUnsignedLongLong:") = NSNumber, UInt64;
overload selector(#"numberWithUnsignedShort:") = NSNumber, UShort;
overload selector(#"objCType") = Pointer[CChar];
overload selector(#"object") = Id;
overload selector(#"objectAtIndex:") = Id, CULong;
overload selector(#"objectBeingTested") = Id;
overload selector(#"objectByApplyingXSLT:arguments:error:") = Id, NSData, NSDictionary, Pointer[NSError];
overload selector(#"objectByApplyingXSLTAtURL:arguments:error:") = Id, NSURL, NSDictionary, Pointer[NSError];
overload selector(#"objectByApplyingXSLTString:arguments:error:") = Id, NSString, NSDictionary, Pointer[NSError];
overload selector(#"objectClass") = Id;
overload selector(#"objectDidBeginEditing:") = Void, Id;
overload selector(#"objectDidEndEditing:") = Void, Id;
overload selector(#"objectEnumerator") = NSEnumerator;
overload selector(#"objectForInfoDictionaryKey:") = Id, NSString;
overload selector(#"objectForKey:") = Id, Id;
overload selector(#"objectForProperty:error:") = Id, NSString, Pointer[NSError];
overload selector(#"objectIsForcedForKey:") = Bool, NSString;
overload selector(#"objectIsForcedForKey:inDomain:") = Bool, NSString, NSString;
overload selector(#"objectSpecifier") = NSScriptObjectSpecifier;
overload selector(#"objectSpecifierWithDescriptor:") = NSScriptObjectSpecifier, NSAppleEventDescriptor;
overload selector(#"objectValue") = Id;
overload selector(#"objectValueOfSelectedItem") = Id;
overload selector(#"objectValues") = NSArray;
overload selector(#"objectZone") = Pointer[NSZone];
overload selector(#"objectsAtIndexes:") = NSArray, NSIndexSet;
overload selector(#"objectsByEvaluatingSpecifier") = Id;
overload selector(#"objectsByEvaluatingWithContainers:") = Id, Id;
overload selector(#"objectsForKeys:notFoundMarker:") = NSArray, NSArray, Id;
overload selector(#"objectsForXQuery:constants:error:") = NSArray, NSString, NSDictionary, Pointer[NSError];
overload selector(#"objectsForXQuery:error:") = NSArray, NSString, Pointer[NSError];
overload selector(#"objectsPassingTest:") = NSSet, UnknownType;
overload selector(#"objectsWithOptions:passingTest:") = NSSet, CULong, UnknownType;
overload selector(#"observationInfo") = RawPointer;
overload selector(#"observeValueForKeyPath:ofObject:change:context:") = Void, NSString, Id, NSDictionary, RawPointer;
overload selector(#"offStateImage") = NSImage;
overload selector(#"offsetInFile") = UInt64;
overload selector(#"ok:") = Void, Id;
overload selector(#"onStateImage") = NSImage;
overload selector(#"one") = NSDecimalNumber;
overload selector(#"opacity") = Float;
overload selector(#"opaqueAncestor") = NSView;
overload selector(#"open") = Void;
overload selector(#"open:") = Void, Id;
overload selector(#"openDocument:") = Void, Id;
overload selector(#"openDocumentWithContentsOfFile:display:") = Id, NSString, Bool;
overload selector(#"openDocumentWithContentsOfURL:display:") = Id, NSURL, Bool;
overload selector(#"openDocumentWithContentsOfURL:display:error:") = Id, NSURL, Bool, Pointer[NSError];
overload selector(#"openFile:") = Bool, NSString;
overload selector(#"openFile:fromImage:at:inView:") = Bool, NSString, NSImage, NSPoint, NSView;
overload selector(#"openFile:withApplication:") = Bool, NSString, NSString;
overload selector(#"openFile:withApplication:andDeactivate:") = Bool, NSString, NSString, Bool;
overload selector(#"openGLContext") = NSOpenGLContext;
overload selector(#"openGLContextForPixelFormat:") = NSOpenGLContext, NSOpenGLPixelFormat;
overload selector(#"openGLPixelFormat") = NSOpenGLPixelFormat;
overload selector(#"openGLPixelFormatForDisplayMask:") = NSOpenGLPixelFormat, UInt;
overload selector(#"openHandCursor") = NSCursor;
overload selector(#"openHelpAnchor:inBook:") = Void, NSString, NSString;
overload selector(#"openOnEdge:") = Void, CULong;
overload selector(#"openPanel") = NSOpenPanel;
overload selector(#"openTempFile:") = Bool, NSString;
overload selector(#"openURL:") = Bool, NSURL;
overload selector(#"openURLs:withAppBundleIdentifier:options:additionalEventParamDescriptor:launchIdentifiers:") = Bool, NSArray, NSString, CULong, NSAppleEventDescriptor, Pointer[NSArray];
overload selector(#"openUntitledDocumentAndDisplay:error:") = Id, Bool, Pointer[NSError];
overload selector(#"openUntitledDocumentOfType:display:") = Id, NSString, Bool;
overload selector(#"operand") = NSExpression;
overload selector(#"operatingSystem") = CULong;
overload selector(#"operatingSystemName") = NSString;
overload selector(#"operatingSystemVersionString") = NSString;
overload selector(#"operationCount") = CULong;
overload selector(#"operationNotAllowedCursor") = NSCursor;
overload selector(#"operations") = NSArray;
overload selector(#"operators") = NSArray;
overload selector(#"optionDescriptionsForBinding:") = NSArray, NSString;
overload selector(#"options") = CULong;
overload selector(#"orPredicateWithSubpredicates:") = NSPredicate, NSArray;
overload selector(#"orangeColor") = NSColor;
overload selector(#"orderBack:") = Void, Id;
overload selector(#"orderFront:") = Void, Id;
overload selector(#"orderFrontCharacterPalette:") = Void, Id;
overload selector(#"orderFrontColorPanel:") = Void, Id;
overload selector(#"orderFrontFontPanel:") = Void, Id;
overload selector(#"orderFrontLinkPanel:") = Void, Id;
overload selector(#"orderFrontListPanel:") = Void, Id;
overload selector(#"orderFrontRegardless") = Void;
overload selector(#"orderFrontSpacingPanel:") = Void, Id;
overload selector(#"orderFrontStandardAboutPanel:") = Void, Id;
overload selector(#"orderFrontStandardAboutPanelWithOptions:") = Void, NSDictionary;
overload selector(#"orderFrontStylesPanel:") = Void, Id;
overload selector(#"orderFrontSubstitutionsPanel:") = Void, Id;
overload selector(#"orderFrontTablePanel:") = Void, Id;
overload selector(#"orderOut:") = Void, Id;
overload selector(#"orderWindow:relativeTo:") = Void, CLong, CLong;
overload selector(#"orderedDocuments") = NSArray;
overload selector(#"orderedIndex") = CLong;
overload selector(#"orderedWindows") = NSArray;
overload selector(#"ordinalityOfUnit:inUnit:forDate:") = CULong, CULong, CULong, NSDate;
overload selector(#"orientation") = CULong;
overload selector(#"originOffset") = Double;
overload selector(#"orthography") = NSOrthography;
overload selector(#"orthographyCheckingResultWithRange:orthography:") = NSTextCheckingResult, NSRange, NSOrthography;
overload selector(#"orthographyWithDominantScript:languageMap:") = Id, NSString, NSDictionary;
overload selector(#"otherEventWithType:location:modifierFlags:timestamp:windowNumber:context:subtype:data1:data2:") = NSEvent, CULong, NSPoint, CULong, Double, CLong, NSGraphicsContext, Short, CLong, CLong;
overload selector(#"otherMouseDown:") = Void, NSEvent;
overload selector(#"otherMouseDragged:") = Void, NSEvent;
overload selector(#"otherMouseUp:") = Void, NSEvent;
overload selector(#"outline:") = Void, Id;
overload selector(#"outlineTableColumn") = NSTableColumn;
overload selector(#"outlineView:acceptDrop:item:childIndex:") = Bool, NSOutlineView, Id, Id, CLong;
overload selector(#"outlineView:child:ofItem:") = Id, NSOutlineView, CLong, Id;
overload selector(#"outlineView:dataCellForTableColumn:item:") = NSCell, NSOutlineView, NSTableColumn, Id;
overload selector(#"outlineView:didClickTableColumn:") = Void, NSOutlineView, NSTableColumn;
overload selector(#"outlineView:didDragTableColumn:") = Void, NSOutlineView, NSTableColumn;
overload selector(#"outlineView:heightOfRowByItem:") = Double, NSOutlineView, Id;
overload selector(#"outlineView:isGroupItem:") = Bool, NSOutlineView, Id;
overload selector(#"outlineView:isItemExpandable:") = Bool, NSOutlineView, Id;
overload selector(#"outlineView:itemForPersistentObject:") = Id, NSOutlineView, Id;
overload selector(#"outlineView:mouseDownInHeaderOfTableColumn:") = Void, NSOutlineView, NSTableColumn;
overload selector(#"outlineView:namesOfPromisedFilesDroppedAtDestination:forDraggedItems:") = NSArray, NSOutlineView, NSURL, NSArray;
overload selector(#"outlineView:nextTypeSelectMatchFromItem:toItem:forString:") = Id, NSOutlineView, Id, Id, NSString;
overload selector(#"outlineView:numberOfChildrenOfItem:") = CLong, NSOutlineView, Id;
overload selector(#"outlineView:objectValueForTableColumn:byItem:") = Id, NSOutlineView, NSTableColumn, Id;
overload selector(#"outlineView:persistentObjectForItem:") = Id, NSOutlineView, Id;
overload selector(#"outlineView:selectionIndexesForProposedSelection:") = NSIndexSet, NSOutlineView, NSIndexSet;
overload selector(#"outlineView:setObjectValue:forTableColumn:byItem:") = Void, NSOutlineView, Id, NSTableColumn, Id;
overload selector(#"outlineView:shouldCollapseItem:") = Bool, NSOutlineView, Id;
overload selector(#"outlineView:shouldEditTableColumn:item:") = Bool, NSOutlineView, NSTableColumn, Id;
overload selector(#"outlineView:shouldExpandItem:") = Bool, NSOutlineView, Id;
overload selector(#"outlineView:shouldReorderColumn:toColumn:") = Bool, NSOutlineView, CLong, CLong;
overload selector(#"outlineView:shouldSelectItem:") = Bool, NSOutlineView, Id;
overload selector(#"outlineView:shouldSelectTableColumn:") = Bool, NSOutlineView, NSTableColumn;
overload selector(#"outlineView:shouldShowCellExpansionForTableColumn:item:") = Bool, NSOutlineView, NSTableColumn, Id;
overload selector(#"outlineView:shouldShowOutlineCellForItem:") = Bool, NSOutlineView, Id;
overload selector(#"outlineView:shouldTrackCell:forTableColumn:item:") = Bool, NSOutlineView, NSCell, NSTableColumn, Id;
overload selector(#"outlineView:shouldTypeSelectForEvent:withCurrentSearchString:") = Bool, NSOutlineView, NSEvent, NSString;
overload selector(#"outlineView:sizeToFitWidthOfColumn:") = Double, NSOutlineView, CLong;
overload selector(#"outlineView:sortDescriptorsDidChange:") = Void, NSOutlineView, NSArray;
overload selector(#"outlineView:toolTipForCell:rect:tableColumn:item:mouseLocation:") = NSString, NSOutlineView, NSCell, NSRectPointer, NSTableColumn, Id, NSPoint;
overload selector(#"outlineView:typeSelectStringForTableColumn:item:") = NSString, NSOutlineView, NSTableColumn, Id;
overload selector(#"outlineView:validateDrop:proposedItem:proposedChildIndex:") = CULong, NSOutlineView, Id, Id, CLong;
overload selector(#"outlineView:willDisplayCell:forTableColumn:item:") = Void, NSOutlineView, Id, NSTableColumn, Id;
overload selector(#"outlineView:willDisplayOutlineCell:forTableColumn:item:") = Void, NSOutlineView, Id, NSTableColumn, Id;
overload selector(#"outlineView:writeItems:toPasteboard:") = Bool, NSOutlineView, NSArray, NSPasteboard;
overload selector(#"outlineViewColumnDidMove:") = Void, NSNotification;
overload selector(#"outlineViewColumnDidResize:") = Void, NSNotification;
overload selector(#"outlineViewItemDidCollapse:") = Void, NSNotification;
overload selector(#"outlineViewItemDidExpand:") = Void, NSNotification;
overload selector(#"outlineViewItemWillCollapse:") = Void, NSNotification;
overload selector(#"outlineViewItemWillExpand:") = Void, NSNotification;
overload selector(#"outlineViewSelectionDidChange:") = Void, NSNotification;
overload selector(#"outlineViewSelectionIsChanging:") = Void, NSNotification;
overload selector(#"outputFormat") = CULong;
overload selector(#"outputStreamToBuffer:capacity:") = Id, Pointer[CUChar], CULong;
overload selector(#"outputStreamToFileAtPath:append:") = Id, NSString, Bool;
overload selector(#"outputStreamToMemory") = Id;
overload selector(#"outputStreamWithURL:append:") = Id, NSURL, Bool;
overload selector(#"owner") = Id;
overload selector(#"paddingCharacter") = NSString;
overload selector(#"paddingPosition") = CULong;
overload selector(#"pageCount") = CLong;
overload selector(#"pageDown:") = Void, Id;
overload selector(#"pageDownAndModifySelection:") = Void, Id;
overload selector(#"pageFooter") = NSAttributedString;
overload selector(#"pageHeader") = NSAttributedString;
overload selector(#"pageLayout") = NSPageLayout;
overload selector(#"pageOrder") = CLong;
overload selector(#"pageRange") = NSRange;
overload selector(#"pageScroll") = Double;
overload selector(#"pageSizeForPaper:") = NSSize, NSString;
overload selector(#"pageUp:") = Void, Id;
overload selector(#"pageUpAndModifySelection:") = Void, Id;
overload selector(#"paletteFontOfSize:") = NSFont, Double;
overload selector(#"paletteLabel") = NSString;
overload selector(#"panel:compareFilename:with:caseSensitive:") = CLong, Id, NSString, NSString, Bool;
overload selector(#"panel:didChangeToDirectoryURL:") = Void, Id, NSURL;
overload selector(#"panel:directoryDidChange:") = Void, Id, NSString;
overload selector(#"panel:isValidFilename:") = Bool, Id, NSString;
overload selector(#"panel:shouldEnableURL:") = Bool, Id, NSURL;
overload selector(#"panel:shouldShowFilename:") = Bool, Id, NSString;
overload selector(#"panel:userEnteredFilename:confirmed:") = NSString, Id, NSString, Bool;
overload selector(#"panel:validateURL:error:") = Bool, Id, NSURL, Pointer[NSError];
overload selector(#"panel:willExpand:") = Void, Id, Bool;
overload selector(#"panelConvertFont:") = NSFont, NSFont;
overload selector(#"panelSelectionDidChange:") = Void, Id;
overload selector(#"paperName") = NSString;
overload selector(#"paperSize") = NSSize;
overload selector(#"paragraphCharacterRange") = NSRange;
overload selector(#"paragraphGlyphRange") = NSRange;
overload selector(#"paragraphRangeForRange:") = NSRange, NSRange;
overload selector(#"paragraphSeparatorCharacterRange") = NSRange;
overload selector(#"paragraphSeparatorGlyphRange") = NSRange;
overload selector(#"paragraphSpacing") = Double;
overload selector(#"paragraphSpacingAfterGlyphAtIndex:withProposedLineFragmentRect:") = Double, CULong, NSRect;
overload selector(#"paragraphSpacingBefore") = Double;
overload selector(#"paragraphSpacingBeforeGlyphAtIndex:withProposedLineFragmentRect:") = Double, CULong, NSRect;
overload selector(#"paragraphs") = NSArray;
overload selector(#"paramDescriptorForKeyword:") = NSAppleEventDescriptor, UInt;
overload selector(#"parameterString") = NSString;
overload selector(#"parent") = NSXMLNode;
overload selector(#"parentForItem:") = Id, Id;
overload selector(#"parentForItemsInColumn:") = Id, CLong;
overload selector(#"parentItem") = NSMenuItem;
overload selector(#"parentNode") = NSTreeNode;
overload selector(#"parentRowForRow:") = CLong, CLong;
overload selector(#"parentWindow") = NSWindow;
overload selector(#"parse") = Bool;
overload selector(#"parser:didEndElement:namespaceURI:qualifiedName:") = Void, NSXMLParser, NSString, NSString, NSString;
overload selector(#"parser:didEndMappingPrefix:") = Void, NSXMLParser, NSString;
overload selector(#"parser:didStartElement:namespaceURI:qualifiedName:attributes:") = Void, NSXMLParser, NSString, NSString, NSString, NSDictionary;
overload selector(#"parser:didStartMappingPrefix:toURI:") = Void, NSXMLParser, NSString, NSString;
overload selector(#"parser:foundAttributeDeclarationWithName:forElement:type:defaultValue:") = Void, NSXMLParser, NSString, NSString, NSString, NSString;
overload selector(#"parser:foundCDATA:") = Void, NSXMLParser, NSData;
overload selector(#"parser:foundCharacters:") = Void, NSXMLParser, NSString;
overload selector(#"parser:foundComment:") = Void, NSXMLParser, NSString;
overload selector(#"parser:foundElementDeclarationWithName:model:") = Void, NSXMLParser, NSString, NSString;
overload selector(#"parser:foundExternalEntityDeclarationWithName:publicID:systemID:") = Void, NSXMLParser, NSString, NSString, NSString;
overload selector(#"parser:foundIgnorableWhitespace:") = Void, NSXMLParser, NSString;
overload selector(#"parser:foundInternalEntityDeclarationWithName:value:") = Void, NSXMLParser, NSString, NSString;
overload selector(#"parser:foundNotationDeclarationWithName:publicID:systemID:") = Void, NSXMLParser, NSString, NSString, NSString;
overload selector(#"parser:foundProcessingInstructionWithTarget:data:") = Void, NSXMLParser, NSString, NSString;
overload selector(#"parser:foundUnparsedEntityDeclarationWithName:publicID:systemID:notationName:") = Void, NSXMLParser, NSString, NSString, NSString, NSString;
overload selector(#"parser:parseErrorOccurred:") = Void, NSXMLParser, NSError;
overload selector(#"parser:resolveExternalEntityName:systemID:") = NSData, NSXMLParser, NSString, NSString;
overload selector(#"parser:validationErrorOccurred:") = Void, NSXMLParser, NSError;
overload selector(#"parserDidEndDocument:") = Void, NSXMLParser;
overload selector(#"parserDidStartDocument:") = Void, NSXMLParser;
overload selector(#"parserError") = NSError;
overload selector(#"password") = NSString;
overload selector(#"paste:") = Void, Id;
overload selector(#"pasteAsPlainText:") = Void, Id;
overload selector(#"pasteAsRichText:") = Void, Id;
overload selector(#"pasteFont:") = Void, Id;
overload selector(#"pasteRuler:") = Void, Id;
overload selector(#"pasteboard:item:provideDataForType:") = Void, NSPasteboard, NSPasteboardItem, NSString;
overload selector(#"pasteboard:provideDataForType:") = Void, NSPasteboard, NSString;
overload selector(#"pasteboardByFilteringData:ofType:") = NSPasteboard, NSData, NSString;
overload selector(#"pasteboardByFilteringFile:") = NSPasteboard, NSString;
overload selector(#"pasteboardByFilteringTypesInPasteboard:") = NSPasteboard, NSPasteboard;
overload selector(#"pasteboardChangedOwner:") = Void, NSPasteboard;
overload selector(#"pasteboardFinishedWithDataProvider:") = Void, NSPasteboard;
overload selector(#"pasteboardItems") = NSArray;
overload selector(#"pasteboardPropertyListForType:") = Id, NSString;
overload selector(#"pasteboardWithName:") = NSPasteboard, NSString;
overload selector(#"pasteboardWithUniqueName") = NSPasteboard;
overload selector(#"path") = NSString;
overload selector(#"pathCell:willDisplayOpenPanel:") = Void, NSPathCell, NSOpenPanel;
overload selector(#"pathCell:willPopUpMenu:") = Void, NSPathCell, NSMenu;
overload selector(#"pathComponentCellAtPoint:withFrame:inView:") = NSPathComponentCell, NSPoint, NSRect, NSView;
overload selector(#"pathComponentCellClass") = Id;
overload selector(#"pathComponentCells") = NSArray;
overload selector(#"pathComponents") = NSArray;
overload selector(#"pathContentOfSymbolicLinkAtPath:") = NSString, NSString;
overload selector(#"pathControl:acceptDrop:") = Bool, NSPathControl, Id;
overload selector(#"pathControl:shouldDragPathComponentCell:withPasteboard:") = Bool, NSPathControl, NSPathComponentCell, NSPasteboard;
overload selector(#"pathControl:validateDrop:") = CULong, NSPathControl, Id;
overload selector(#"pathControl:willDisplayOpenPanel:") = Void, NSPathControl, NSOpenPanel;
overload selector(#"pathControl:willPopUpMenu:") = Void, NSPathControl, NSMenu;
overload selector(#"pathExtension") = NSString;
overload selector(#"pathForAuxiliaryExecutable:") = NSString, NSString;
overload selector(#"pathForImageResource:") = NSString, NSString;
overload selector(#"pathForResource:ofType:") = NSString, NSString, NSString;
overload selector(#"pathForResource:ofType:inDirectory:") = NSString, NSString, NSString, NSString;
overload selector(#"pathForResource:ofType:inDirectory:forLocalization:") = NSString, NSString, NSString, NSString, NSString;
overload selector(#"pathForSoundResource:") = NSString, NSString;
overload selector(#"pathSeparator") = NSString;
overload selector(#"pathStyle") = CLong;
overload selector(#"pathToColumn:") = NSString, CLong;
overload selector(#"pathWithComponents:") = NSString, NSArray;
overload selector(#"pathsForResourcesOfType:inDirectory:") = NSArray, NSString, NSString;
overload selector(#"pathsForResourcesOfType:inDirectory:forLocalization:") = NSArray, NSString, NSString, NSString;
overload selector(#"pathsMatchingExtensions:") = NSArray, NSArray;
overload selector(#"patternImage") = NSImage;
overload selector(#"patternPhase") = NSPoint;
overload selector(#"pause") = Bool;
overload selector(#"pauseSpeakingAtBoundary:") = Void, CULong;
overload selector(#"perMillSymbol") = NSString;
overload selector(#"percentSymbol") = NSString;
overload selector(#"performActionForItem:") = Void, Id;
overload selector(#"performActionForItemAtIndex:") = Void, CLong;
overload selector(#"performClick:") = Void, Id;
overload selector(#"performClickOnCellAtColumn:row:") = Void, CLong, CLong;
overload selector(#"performClickWithFrame:inView:") = Void, NSRect, NSView;
overload selector(#"performClose:") = Void, Id;
overload selector(#"performDefaultImplementation") = Id;
overload selector(#"performDragOperation:") = Bool, Id;
overload selector(#"performFileOperation:source:destination:files:tag:") = Bool, NSString, NSString, NSString, NSArray, Pointer[CLong];
overload selector(#"performFindPanelAction:") = Void, Id;
overload selector(#"performKeyEquivalent:") = Bool, NSEvent;
overload selector(#"performMiniaturize:") = Void, Id;
overload selector(#"performMnemonic:") = Bool, NSString;
overload selector(#"performSelector:") = Id, SelectorHandle;
overload selector(#"performSelector:onThread:withObject:waitUntilDone:") = Void, SelectorHandle, NSThread, Id, Bool;
overload selector(#"performSelector:onThread:withObject:waitUntilDone:modes:") = Void, SelectorHandle, NSThread, Id, Bool, NSArray;
overload selector(#"performSelector:target:argument:order:modes:") = Void, SelectorHandle, Id, Id, CULong, NSArray;
overload selector(#"performSelector:withObject:") = Id, SelectorHandle, Id;
overload selector(#"performSelector:withObject:afterDelay:") = Void, SelectorHandle, Id, Double;
overload selector(#"performSelector:withObject:afterDelay:inModes:") = Void, SelectorHandle, Id, Double, NSArray;
overload selector(#"performSelector:withObject:withObject:") = Id, SelectorHandle, Id, Id;
overload selector(#"performSelectorInBackground:withObject:") = Void, SelectorHandle, Id;
overload selector(#"performSelectorOnMainThread:withObject:waitUntilDone:") = Void, SelectorHandle, Id, Bool;
overload selector(#"performSelectorOnMainThread:withObject:waitUntilDone:modes:") = Void, SelectorHandle, Id, Bool, NSArray;
overload selector(#"performZoom:") = Void, Id;
overload selector(#"persistence") = CULong;
overload selector(#"persistentDomainForName:") = NSDictionary, NSString;
overload selector(#"persistentDomainNames") = NSArray;
overload selector(#"persistentStoreTypeForFileType:") = NSString, NSString;
overload selector(#"phase") = CULong;
overload selector(#"phonemesFromText:") = NSString, NSString;
overload selector(#"physicalMemory") = UInt64;
overload selector(#"pipe") = Id;
overload selector(#"pixelBuffer") = NSOpenGLPixelBuffer;
overload selector(#"pixelBufferCubeMapFace") = UInt;
overload selector(#"pixelBufferMipMapLevel") = Int;
overload selector(#"pixelFormat") = NSOpenGLPixelFormat;
overload selector(#"pixelsHigh") = CLong;
overload selector(#"pixelsWide") = CLong;
overload selector(#"placeholderAttributedString") = NSAttributedString;
overload selector(#"placeholderString") = NSString;
overload selector(#"play") = Bool;
overload selector(#"playbackDeviceIdentifier") = NSString;
overload selector(#"plusSign") = NSString;
overload selector(#"pointSize") = Double;
overload selector(#"pointValue") = NSPoint;
overload selector(#"pointerArrayWithOptions:") = Id, CULong;
overload selector(#"pointerArrayWithPointerFunctions:") = Id, NSPointerFunctions;
overload selector(#"pointerArrayWithStrongObjects") = Id;
overload selector(#"pointerArrayWithWeakObjects") = Id;
overload selector(#"pointerAtIndex:") = RawPointer, CULong;
overload selector(#"pointerFunctions") = NSPointerFunctions;
overload selector(#"pointerFunctionsWithOptions:") = Id, CULong;
overload selector(#"pointerValue") = RawPointer;
overload selector(#"pointingDeviceID") = CULong;
overload selector(#"pointingDeviceSerialNumber") = CULong;
overload selector(#"pointingDeviceType") = CULong;
overload selector(#"pointingHandCursor") = NSCursor;
overload selector(#"pop") = Void;
overload selector(#"popUpContextMenu:withEvent:forView:") = Void, NSMenu, NSEvent, NSView;
overload selector(#"popUpContextMenu:withEvent:forView:withFont:") = Void, NSMenu, NSEvent, NSView, NSFont;
overload selector(#"popUpMenuPositioningItem:atLocation:inView:") = Bool, NSMenuItem, NSPoint, NSView;
overload selector(#"popUpStatusItemMenu:") = Void, NSMenu;
overload selector(#"port") = Id;
overload selector(#"portCoderWithReceivePort:sendPort:components:") = Id, NSPort, NSPort, NSArray;
overload selector(#"portForName:") = NSPort, NSString;
overload selector(#"portForName:host:") = NSPort, NSString, NSString;
overload selector(#"portForName:host:nameServerPortNumber:") = NSPort, NSString, NSString, UShort;
overload selector(#"portList") = NSArray;
overload selector(#"portWithMachPort:") = NSPort, UInt;
overload selector(#"portWithMachPort:options:") = NSPort, UInt, CULong;
overload selector(#"poseAsClass:") = Void, Id;
overload selector(#"position") = CULong;
overload selector(#"positiveFormat") = NSString;
overload selector(#"positiveInfinitySymbol") = NSString;
overload selector(#"positivePrefix") = NSString;
overload selector(#"positiveSuffix") = NSString;
overload selector(#"postEvent:atStart:") = Void, NSEvent, Bool;
overload selector(#"postNotification:") = Void, NSNotification;
overload selector(#"postNotificationName:object:") = Void, NSString, Id;
overload selector(#"postNotificationName:object:userInfo:") = Void, NSString, Id, NSDictionary;
overload selector(#"postNotificationName:object:userInfo:deliverImmediately:") = Void, NSString, NSString, NSDictionary, Bool;
overload selector(#"postNotificationName:object:userInfo:options:") = Void, NSString, NSString, NSDictionary, CULong;
overload selector(#"postsBoundsChangedNotifications") = Bool;
overload selector(#"postsFrameChangedNotifications") = Bool;
overload selector(#"postscriptName") = NSString;
overload selector(#"precomposedStringWithCanonicalMapping") = NSString;
overload selector(#"precomposedStringWithCompatibilityMapping") = NSString;
overload selector(#"predefinedEntityDeclarationForName:") = NSXMLDTDNode, NSString;
overload selector(#"predefinedNamespaceForPrefix:") = NSXMLNode, NSString;
overload selector(#"predicate") = NSPredicate;
overload selector(#"predicateForRow:") = NSPredicate, CLong;
overload selector(#"predicateFormat") = NSString;
overload selector(#"predicateOperatorType") = CULong;
overload selector(#"predicateWithBlock:") = NSPredicate, UnknownType;
overload varargSelector(#"predicateWithFormat:") = NSPredicate, NSString;
overload selector(#"predicateWithFormat:argumentArray:") = NSPredicate, NSString, NSArray;
overload selector(#"predicateWithFormat:arguments:") = NSPredicate, NSString, Pointer[__va_list_tag];
overload selector(#"predicateWithLeftExpression:rightExpression:customSelector:") = NSPredicate, NSExpression, NSExpression, SelectorHandle;
overload selector(#"predicateWithLeftExpression:rightExpression:modifier:type:options:") = NSPredicate, NSExpression, NSExpression, CULong, CULong, CULong;
overload selector(#"predicateWithSubpredicates:") = NSPredicate, NSArray;
overload selector(#"predicateWithSubstitutionVariables:") = NSPredicate, NSDictionary;
overload selector(#"predicateWithValue:") = NSPredicate, Bool;
overload selector(#"preferredBackingLocation") = CULong;
overload selector(#"preferredEdge") = CULong;
overload selector(#"preferredFilename") = NSString;
overload selector(#"preferredFilenameExtensionForType:") = NSString, NSString;
overload selector(#"preferredFrameSize") = CGSize;
overload selector(#"preferredLanguages") = NSArray;
overload selector(#"preferredLocalizations") = NSArray;
overload selector(#"preferredLocalizationsFromArray:") = NSArray, NSArray;
overload selector(#"preferredLocalizationsFromArray:forPreferences:") = NSArray, NSArray, NSArray;
overload selector(#"preferredPasteboardTypeFromArray:restrictedToTypesFromArray:") = NSString, NSArray, NSArray;
overload selector(#"preferredSizeOfLayer:") = CGSize, CALayer;
overload selector(#"prefersAllColumnUserResizing") = Bool;
overload selector(#"prefersColorMatch") = Bool;
overload selector(#"prefersTrackingUntilMouseUp") = Bool;
overload selector(#"prefix") = NSString;
overload selector(#"prefixForName:") = NSString, NSString;
overload selector(#"preflightAndReturnError:") = Bool, Pointer[NSError];
overload selector(#"prepareContent") = Void;
overload selector(#"prepareForDragOperation:") = Bool, Id;
overload selector(#"prepareGState") = Void;
overload selector(#"prepareOpenGL") = Void;
overload selector(#"preparePageLayout:") = Bool, NSPageLayout;
overload selector(#"prepareSavePanel:") = Bool, NSSavePanel;
overload selector(#"prepareWithInvocationTarget:") = Id, Id;
overload selector(#"preparedCellAtColumn:row:") = NSCell, CLong, CLong;
overload selector(#"prependTransform:") = Void, NSAffineTransform;
overload selector(#"presentError:") = Bool, NSError;
overload selector(#"presentError:modalForWindow:delegate:didPresentSelector:contextInfo:") = Void, NSError, NSWindow, Id, SelectorHandle, RawPointer;
overload selector(#"presentationLayer") = Id;
overload selector(#"presentationOptions") = CULong;
overload selector(#"preservesContentDuringLiveResize") = Bool;
overload selector(#"preservesSelection") = Bool;
overload selector(#"pressedMouseButtons") = CULong;
overload selector(#"pressure") = Float;
overload selector(#"preventWindowOrdering") = Void;
overload selector(#"preventsApplicationTerminationWhenModal") = Bool;
overload selector(#"previousFailureCount") = CLong;
overload selector(#"previousKeyView") = NSView;
overload selector(#"previousNode") = NSXMLNode;
overload selector(#"previousSibling") = NSXMLNode;
overload selector(#"previousValidKeyView") = NSView;
overload selector(#"principalClass") = Id;
overload selector(#"print:") = Void, Id;
overload selector(#"printDocument:") = Void, Id;
overload selector(#"printDocumentWithSettings:showPrintPanel:delegate:didPrintSelector:contextInfo:") = Void, NSDictionary, Bool, Id, SelectorHandle, RawPointer;
overload selector(#"printInfo") = NSPrintInfo;
overload selector(#"printJobTitle") = NSString;
overload selector(#"printOperationWithSettings:error:") = NSPrintOperation, NSDictionary, Pointer[NSError];
overload selector(#"printOperationWithView:") = NSPrintOperation, NSView;
overload selector(#"printOperationWithView:printInfo:") = NSPrintOperation, NSView, NSPrintInfo;
overload selector(#"printPanel") = NSPrintPanel;
overload selector(#"printSettings") = NSMutableDictionary;
overload selector(#"printShowingPrintPanel:") = Void, Bool;
overload selector(#"printer") = NSPrinter;
overload selector(#"printerFont") = NSFont;
overload selector(#"printerNames") = NSArray;
overload selector(#"printerTypes") = NSArray;
overload selector(#"printerWithName:") = NSPrinter, NSString;
overload selector(#"printerWithName:domain:includeUnavailable:") = NSPrinter, NSString, NSString, Bool;
overload selector(#"printerWithType:") = NSPrinter, NSString;
overload selector(#"printingAdjustmentInLayoutManager:forNominallySpacedGlyphRange:packedGlyphs:count:") = NSSize, NSLayoutManager, NSRange, Pointer[CUChar], CULong;
overload selector(#"privateFrameworksPath") = NSString;
overload selector(#"privateFrameworksURL") = NSURL;
overload selector(#"processEditing") = Void;
overload selector(#"processIdentifier") = Int;
overload selector(#"processInfo") = NSProcessInfo;
overload selector(#"processName") = NSString;
overload selector(#"processingInstructionWithName:stringValue:") = Id, NSString, NSString;
overload selector(#"processorCount") = CULong;
overload selector(#"progressMarks") = NSArray;
overload selector(#"prompt") = NSString;
overload selector(#"properties") = NSDictionary;
overload selector(#"propertiesToUpdate") = CULong;
overload selector(#"propertyForKey:") = Id, NSString;
overload selector(#"propertyForKey:inRequest:") = Id, NSString, NSURLRequest;
overload selector(#"propertyForKeyIfAvailable:") = Id, NSString;
overload selector(#"propertyList") = Id;
overload selector(#"propertyList:isValidForFormat:") = Bool, Id, CULong;
overload selector(#"propertyListForType:") = Id, NSString;
overload selector(#"propertyListFromData:mutabilityOption:format:errorDescription:") = Id, NSData, CULong, Pointer[CULong], Pointer[NSString];
overload selector(#"propertyListFromStringsFileFormat") = NSDictionary;
overload selector(#"propertyListWithData:options:format:error:") = Id, NSData, CULong, Pointer[CULong], Pointer[NSError];
overload selector(#"propertyListWithStream:options:format:error:") = Id, NSInputStream, CULong, Pointer[CULong], Pointer[NSError];
overload selector(#"proposedCredential") = NSURLCredential;
overload selector(#"protectionSpace") = NSURLProtectionSpace;
overload selector(#"protocol") = Int;
overload selector(#"protocolCheckerWithTarget:protocol:") = Id, NSObject, Id;
overload selector(#"protocolFamily") = Int;
overload selector(#"protocolSpecificInformation") = NSString;
overload selector(#"prototype") = Id;
overload selector(#"provideNewButtonImage") = NSImage;
overload selector(#"provideNewView:") = NSView, Bool;
overload selector(#"proxyType") = NSString;
overload selector(#"proxyWithLocal:connection:") = NSDistantObject, Id, NSConnection;
overload selector(#"proxyWithTarget:connection:") = NSDistantObject, Id, NSConnection;
overload selector(#"publicID") = NSString;
overload selector(#"publish") = Void;
overload selector(#"publishWithOptions:") = Void, CULong;
overload selector(#"pullsDown") = Bool;
overload selector(#"punctuationCharacterSet") = Id;
overload selector(#"purpleColor") = NSColor;
overload selector(#"push") = Void;
overload selector(#"putCell:atRow:column:") = Void, NSCell, CLong, CLong;
overload selector(#"quarter") = CLong;
overload selector(#"quarterSymbols") = NSArray;
overload selector(#"query") = NSString;
overload selector(#"queuePriority") = CLong;
overload selector(#"quoteCheckingResultWithRange:replacementString:") = NSTextCheckingResult, NSRange, NSString;
overload selector(#"raise") = Void;
overload varargSelector(#"raise:format:") = Void, NSString, NSString;
overload selector(#"raise:format:arguments:") = Void, NSString, NSString, Pointer[__va_list_tag];
overload selector(#"raiseBaseline:") = Void, Id;
overload selector(#"range") = NSRange;
overload selector(#"rangeContainerObject") = Id;
overload selector(#"rangeForUserCharacterAttributeChange") = NSRange;
overload selector(#"rangeForUserCompletion") = NSRange;
overload selector(#"rangeForUserParagraphAttributeChange") = NSRange;
overload selector(#"rangeForUserTextChange") = NSRange;
overload selector(#"rangeOfCharacterFromSet:") = NSRange, NSCharacterSet;
overload selector(#"rangeOfCharacterFromSet:options:") = NSRange, NSCharacterSet, CULong;
overload selector(#"rangeOfCharacterFromSet:options:range:") = NSRange, NSCharacterSet, CULong, NSRange;
overload selector(#"rangeOfComposedCharacterSequenceAtIndex:") = NSRange, CULong;
overload selector(#"rangeOfComposedCharacterSequencesForRange:") = NSRange, NSRange;
overload selector(#"rangeOfData:options:range:") = NSRange, NSData, CULong, NSRange;
overload selector(#"rangeOfNominallySpacedGlyphsContainingIndex:") = NSRange, CULong;
overload selector(#"rangeOfString:") = NSRange, NSString;
overload selector(#"rangeOfString:options:") = NSRange, NSString, CULong;
overload selector(#"rangeOfString:options:range:") = NSRange, NSString, CULong, NSRange;
overload selector(#"rangeOfString:options:range:locale:") = NSRange, NSString, CULong, NSRange, NSLocale;
overload selector(#"rangeOfTextBlock:atIndex:") = NSRange, NSTextBlock, CULong;
overload selector(#"rangeOfTextList:atIndex:") = NSRange, NSTextList, CULong;
overload selector(#"rangeOfTextTable:atIndex:") = NSRange, NSTextTable, CULong;
overload selector(#"rangeOfUnit:inUnit:forDate:") = NSRange, CULong, CULong, NSDate;
overload selector(#"rangeOfUnit:startDate:interval:forDate:") = Bool, CULong, Pointer[NSDate], Pointer[Double], NSDate;
overload selector(#"rangeValue") = NSRange;
overload selector(#"rangesForUserCharacterAttributeChange") = NSArray;
overload selector(#"rangesForUserParagraphAttributeChange") = NSArray;
overload selector(#"rangesForUserTextChange") = NSArray;
overload selector(#"rate") = Float;
overload selector(#"read:maxLength:") = CLong, Pointer[CUChar], CULong;
overload selector(#"readDataOfLength:") = NSData, CULong;
overload selector(#"readDataToEndOfFile") = NSData;
overload selector(#"readFileContentsType:toFile:") = NSString, NSString, NSString;
overload selector(#"readFileWrapper") = NSFileWrapper;
overload selector(#"readFromData:ofType:error:") = Bool, NSData, NSString, Pointer[NSError];
overload selector(#"readFromData:options:documentAttributes:") = Bool, NSData, NSDictionary, Pointer[NSDictionary];
overload selector(#"readFromData:options:documentAttributes:error:") = Bool, NSData, NSDictionary, Pointer[NSDictionary], Pointer[NSError];
overload selector(#"readFromFile:ofType:") = Bool, NSString, NSString;
overload selector(#"readFromFileWrapper:ofType:error:") = Bool, NSFileWrapper, NSString, Pointer[NSError];
overload selector(#"readFromURL:ofType:") = Bool, NSURL, NSString;
overload selector(#"readFromURL:ofType:error:") = Bool, NSURL, NSString, Pointer[NSError];
overload selector(#"readFromURL:options:documentAttributes:") = Bool, NSURL, NSDictionary, Pointer[NSDictionary];
overload selector(#"readFromURL:options:documentAttributes:error:") = Bool, NSURL, NSDictionary, Pointer[NSDictionary], Pointer[NSError];
overload selector(#"readFromURL:options:error:") = Bool, NSURL, CULong, Pointer[NSError];
overload selector(#"readInBackgroundAndNotify") = Void;
overload selector(#"readInBackgroundAndNotifyForModes:") = Void, NSArray;
overload selector(#"readObjectsForClasses:options:") = NSArray, NSArray, NSDictionary;
overload selector(#"readPrintInfo") = Void;
overload selector(#"readRTFDFromFile:") = Bool, NSString;
overload selector(#"readSelectionFromPasteboard:") = Bool, NSPasteboard;
overload selector(#"readSelectionFromPasteboard:type:") = Bool, NSPasteboard, NSString;
overload selector(#"readToEndOfFileInBackgroundAndNotify") = Void;
overload selector(#"readToEndOfFileInBackgroundAndNotifyForModes:") = Void, NSArray;
overload selector(#"readablePasteboardTypes") = NSArray;
overload selector(#"readableTypes") = NSArray;
overload selector(#"readableTypesForPasteboard:") = NSArray, NSPasteboard;
overload selector(#"readingOptionsForType:pasteboard:") = CULong, NSString, NSPasteboard;
overload selector(#"realm") = NSString;
overload selector(#"rearrangeObjects") = Void;
overload selector(#"reason") = NSString;
overload selector(#"recache") = Void;
overload selector(#"recalculateKeyViewLoop") = Void;
overload selector(#"receivePort") = NSPort;
overload selector(#"receiversSpecifier") = NSScriptObjectSpecifier;
overload selector(#"receivesCredentialSecurely") = Bool;
overload selector(#"recentDocumentURLs") = NSArray;
overload selector(#"recentSearches") = NSArray;
overload selector(#"recentsAutosaveName") = NSString;
overload selector(#"recordDescriptor") = NSAppleEventDescriptor;
overload selector(#"recoveryAttempter") = Id;
overload selector(#"rect") = NSRect;
overload selector(#"rectArrayForCharacterRange:withinSelectedCharacterRange:inTextContainer:rectCount:") = NSRectArray, NSRange, NSRange, NSTextContainer, Pointer[CULong];
overload selector(#"rectArrayForGlyphRange:withinSelectedGlyphRange:inTextContainer:rectCount:") = NSRectArray, NSRange, NSRange, NSTextContainer, Pointer[CULong];
overload selector(#"rectForBlock:layoutAtPoint:inRect:textContainer:characterRange:") = NSRect, NSTextTableBlock, NSPoint, NSRect, NSTextContainer, NSRange;
overload selector(#"rectForKey:inTable:") = NSRect, NSString, NSString;
overload selector(#"rectForLayoutAtPoint:inRect:textContainer:characterRange:") = NSRect, NSPoint, NSRect, NSTextContainer, NSRange;
overload selector(#"rectForPage:") = NSRect, CLong;
overload selector(#"rectForPart:") = NSRect, CULong;
overload selector(#"rectOfColumn:") = NSRect, CLong;
overload selector(#"rectOfPathComponentCell:withFrame:inView:") = NSRect, NSPathComponentCell, NSRect, NSView;
overload selector(#"rectOfRow:") = NSRect, CLong;
overload selector(#"rectOfTickMarkAtIndex:") = NSRect, CLong;
overload selector(#"rectPreservedDuringLiveResize") = NSRect;
overload selector(#"rectValue") = NSRect;
overload selector(#"recycleURLs:completionHandler:") = Void, NSArray, UnknownType;
overload selector(#"red") = Double;
overload selector(#"redColor") = NSColor;
overload selector(#"redComponent") = Double;
overload selector(#"redo") = Void;
overload selector(#"redoActionName") = NSString;
overload selector(#"redoMenuItemTitle") = NSString;
overload selector(#"redoMenuTitleForUndoActionName:") = NSString, NSString;
overload selector(#"reflectScrolledClipView:") = Void, NSClipView;
overload selector(#"refusesFirstResponder") = Bool;
overload selector(#"registerBooksInBundle:") = Bool, NSBundle;
overload selector(#"registerClass:") = Bool, Id;
overload selector(#"registerClassDescription:") = Void, NSScriptClassDescription;
overload selector(#"registerClassDescription:forClass:") = Void, NSClassDescription, Id;
overload selector(#"registerCoercer:selector:toConvertFromClass:toClass:") = Void, Id, SelectorHandle, Id, Id;
overload selector(#"registerCommandDescription:") = Void, NSScriptCommandDescription;
overload selector(#"registerDefaults:") = Void, NSDictionary;
overload selector(#"registerForDraggedTypes:") = Void, NSArray;
overload selector(#"registerForServices") = Void;
overload selector(#"registerImageRepClass:") = Void, Id;
overload selector(#"registerLanguage:byVendor:") = Bool, NSString, NSString;
overload selector(#"registerName:") = Bool, NSString;
overload selector(#"registerName:withNameServer:") = Bool, NSString, NSPortNameServer;
overload selector(#"registerPort:name:") = Bool, NSPort, NSString;
overload selector(#"registerPort:name:nameServerPortNumber:") = Bool, NSPort, NSString, UShort;
overload selector(#"registerServicesMenuSendTypes:returnTypes:") = Void, NSArray, NSArray;
overload selector(#"registerURLHandleClass:") = Void, Id;
overload selector(#"registerUndoWithTarget:selector:object:") = Void, Id, SelectorHandle, Id;
overload selector(#"registerUnitWithName:abbreviation:unitToPointsConversionFactor:stepUpCycle:stepDownCycle:") = Void, NSString, NSString, Double, NSArray, NSArray;
overload selector(#"registerUserInterfaceItemSearchHandler:") = Void, Id;
overload selector(#"registeredDraggedTypes") = NSArray;
overload selector(#"registeredImageRepClasses") = NSArray;
overload selector(#"regularFileContents") = NSData;
overload selector(#"relativeCurveToPoint:controlPoint1:controlPoint2:") = Void, NSPoint, NSPoint, NSPoint;
overload selector(#"relativeLineToPoint:") = Void, NSPoint;
overload selector(#"relativeMoveToPoint:") = Void, NSPoint;
overload selector(#"relativePath") = NSString;
overload selector(#"relativePosition") = CULong;
overload selector(#"relativeString") = NSString;
overload selector(#"release") = Void;
overload selector(#"releaseCGLContext:") = Void, CGLContextObj;
overload selector(#"releaseCGLPixelFormat:") = Void, CGLPixelFormatObj;
overload selector(#"releaseGState") = Void;
overload selector(#"releaseGlobally") = Void;
overload selector(#"relinquishFunction") = CCodePointer[[RawPointer,CCodePointer[[RawPointer],[CULong]]],[]];
overload selector(#"reloadColumn:") = Void, CLong;
overload selector(#"reloadCriteria") = Void;
overload selector(#"reloadData") = Void;
overload selector(#"reloadDataForRowIndexes:columnIndexes:") = Void, NSIndexSet, NSIndexSet;
overload selector(#"reloadDataForRowIndexes:inColumn:") = Void, NSIndexSet, CLong;
overload selector(#"reloadDefaultFontFamilies") = Void;
overload selector(#"reloadItem:") = Void, Id;
overload selector(#"reloadItem:reloadChildren:") = Void, Id, Bool;
overload selector(#"reloadPredicate") = Void;
overload selector(#"remoteObjects") = NSArray;
overload selector(#"remove:") = Void, Id;
overload selector(#"removeAccessoryController:") = Void, NSViewController;
overload selector(#"removeAllActions") = Void;
overload selector(#"removeAllActionsWithTarget:") = Void, Id;
overload selector(#"removeAllAnimations") = Void;
overload selector(#"removeAllCachedResponses") = Void;
overload selector(#"removeAllIndexes") = Void;
overload selector(#"removeAllItems") = Void;
overload selector(#"removeAllObjects") = Void;
overload selector(#"removeAllPoints") = Void;
overload selector(#"removeAllToolTips") = Void;
overload selector(#"removeAnimationForKey:") = Void, NSString;
overload selector(#"removeAttribute:range:") = Void, NSString, NSRange;
overload selector(#"removeAttributeForName:") = Void, NSString;
overload selector(#"removeCachedResponseForRequest:") = Void, NSURLRequest;
overload selector(#"removeCharactersInRange:") = Void, NSRange;
overload selector(#"removeCharactersInString:") = Void, NSString;
overload selector(#"removeChildAtIndex:") = Void, CULong;
overload selector(#"removeChildWindow:") = Void, NSWindow;
overload selector(#"removeClient:") = Void, Id;
overload selector(#"removeCollection:") = Bool, NSString;
overload selector(#"removeColorWithKey:") = Void, NSString;
overload selector(#"removeColumn:") = Void, CLong;
overload selector(#"removeConnection:fromRunLoop:forMode:") = Void, NSConnection, NSRunLoop, NSString;
overload selector(#"removeContextHelpForObject:") = Void, Id;
overload selector(#"removeCredential:forProtectionSpace:") = Void, NSURLCredential, NSURLProtectionSpace;
overload selector(#"removeCursorRect:cursor:") = Void, NSRect, NSCursor;
overload selector(#"removeDependency:") = Void, NSOperation;
overload selector(#"removeDescriptorAtIndex:") = Void, CLong;
overload selector(#"removeDescriptorWithKeyword:") = Void, UInt;
overload selector(#"removeDocument:") = Void, NSDocument;
overload selector(#"removeEntryAtIndex:") = Void, CLong;
overload selector(#"removeEventHandlerForEventClass:andEventID:") = Void, UInt, UInt;
overload selector(#"removeFile") = Void;
overload selector(#"removeFileAtPath:handler:") = Bool, NSString, Id;
overload selector(#"removeFileWrapper:") = Void, NSFileWrapper;
overload selector(#"removeFontDescriptor:fromCollection:") = Void, NSFontDescriptor, NSString;
overload selector(#"removeFontTrait:") = Void, Id;
overload selector(#"removeFrameUsingName:") = Void, NSString;
overload selector(#"removeFromRunLoop:forMode:") = Void, NSRunLoop, NSString;
overload selector(#"removeFromSuperlayer") = Void;
overload selector(#"removeFromSuperview") = Void;
overload selector(#"removeFromSuperviewWithoutNeedingDisplay") = Void;
overload selector(#"removeIndex:") = Void, CULong;
overload selector(#"removeIndexes:") = Void, NSIndexSet;
overload selector(#"removeIndexesInRange:") = Void, NSRange;
overload selector(#"removeItem:") = Void, NSMenuItem;
overload selector(#"removeItemAtIndex:") = Void, CLong;
overload selector(#"removeItemAtPath:error:") = Bool, NSString, Pointer[NSError];
overload selector(#"removeItemAtURL:error:") = Bool, NSURL, Pointer[NSError];
overload selector(#"removeItemWithObjectValue:") = Void, Id;
overload selector(#"removeItemWithTitle:") = Void, NSString;
overload selector(#"removeLastObject") = Void;
overload selector(#"removeLayoutManager:") = Void, NSLayoutManager;
overload selector(#"removeMarker:") = Void, NSRulerMarker;
overload selector(#"removeMonitor:") = Void, Id;
overload selector(#"removeNamespaceForPrefix:") = Void, NSString;
overload selector(#"removeObject:") = Void, Id;
overload selector(#"removeObject:inRange:") = Void, Id, NSRange;
overload selector(#"removeObjectAtArrangedObjectIndex:") = Void, CULong;
overload selector(#"removeObjectAtArrangedObjectIndexPath:") = Void, NSIndexPath;
overload selector(#"removeObjectAtIndex:") = Void, CULong;
overload selector(#"removeObjectForKey:") = Void, Id;
overload selector(#"removeObjectIdenticalTo:") = Void, Id;
overload selector(#"removeObjectIdenticalTo:inRange:") = Void, Id, NSRange;
overload selector(#"removeObjects:") = Void, NSArray;
overload selector(#"removeObjectsAtArrangedObjectIndexPaths:") = Void, NSArray;
overload selector(#"removeObjectsAtArrangedObjectIndexes:") = Void, NSIndexSet;
overload selector(#"removeObjectsAtIndexes:") = Void, NSIndexSet;
overload selector(#"removeObjectsForKeys:") = Void, NSArray;
overload selector(#"removeObjectsFromIndices:numIndices:") = Void, Pointer[CULong], CULong;
overload selector(#"removeObjectsInArray:") = Void, NSArray;
overload selector(#"removeObjectsInRange:") = Void, NSRange;
overload selector(#"removeObserver:") = Void, Id;
overload selector(#"removeObserver:forKeyPath:") = Void, NSObject, NSString;
overload selector(#"removeObserver:fromObjectsAtIndexes:forKeyPath:") = Void, NSObject, NSIndexSet, NSString;
overload selector(#"removeObserver:name:object:") = Void, Id, NSString, Id;
overload selector(#"removeParamDescriptorWithKeyword:") = Void, UInt;
overload selector(#"removePersistentDomainForName:") = Void, NSString;
overload selector(#"removePointerAtIndex:") = Void, CULong;
overload selector(#"removePort:forMode:") = Void, NSPort, NSString;
overload selector(#"removePortForName:") = Bool, NSString;
overload selector(#"removeProgressMark:") = Void, Float;
overload selector(#"removePropertyForKey:inRequest:") = Void, NSString, NSMutableURLRequest;
overload selector(#"removeRepresentation:") = Void, NSImageRep;
overload selector(#"removeRequestMode:") = Void, NSString;
overload selector(#"removeRow:") = Void, CLong;
overload selector(#"removeRowAtIndex:") = Void, CLong;
overload selector(#"removeRowsAtIndexes:includeSubrows:") = Void, NSIndexSet, Bool;
overload selector(#"removeRunLoop:") = Void, NSRunLoop;
overload selector(#"removeSavedColumnsWithAutosaveName:") = Void, NSString;
overload selector(#"removeSelectedObjects:") = Bool, NSArray;
overload selector(#"removeSelectionIndexPaths:") = Bool, NSArray;
overload selector(#"removeSelectionIndexes:") = Bool, NSIndexSet;
overload selector(#"removeStatusItem:") = Void, NSStatusItem;
overload selector(#"removeSuiteNamed:") = Void, NSString;
overload selector(#"removeTabStop:") = Void, NSTextTab;
overload selector(#"removeTabViewItem:") = Void, NSTabViewItem;
overload selector(#"removeTableColumn:") = Void, NSTableColumn;
overload selector(#"removeTemporaryAttribute:forCharacterRange:") = Void, NSString, NSRange;
overload selector(#"removeTextContainerAtIndex:") = Void, CULong;
overload selector(#"removeToolTip:") = Void, CLong;
overload selector(#"removeTrackingArea:") = Void, NSTrackingArea;
overload selector(#"removeTrackingRect:") = Void, CLong;
overload selector(#"removeValueAtIndex:fromPropertyWithKey:") = Void, CULong, NSString;
overload selector(#"removeVolatileDomainForName:") = Void, NSString;
overload selector(#"removeWindowController:") = Void, NSWindowController;
overload selector(#"removeWindowsItem:") = Void, NSWindow;
overload selector(#"renamingIdentifier") = NSString;
overload selector(#"renderInContext:") = Void, CGContextRef;
overload selector(#"renderingMode") = CULong;
overload selector(#"renewGState") = Void;
overload selector(#"renewRows:columns:") = Void, CLong, CLong;
overload selector(#"reopenDocumentForURL:withContentsOfURL:error:") = Bool, NSURL, NSURL, Pointer[NSError];
overload selector(#"repeatCount") = Float;
overload selector(#"repeatDuration") = Double;
overload selector(#"replaceBytesInRange:withBytes:") = Void, NSRange, RawPointer;
overload selector(#"replaceBytesInRange:withBytes:length:") = Void, NSRange, RawPointer, CULong;
overload selector(#"replaceCharactersInRange:withAttributedString:") = Void, NSRange, NSAttributedString;
overload selector(#"replaceCharactersInRange:withRTF:") = Void, NSRange, NSData;
overload selector(#"replaceCharactersInRange:withRTFD:") = Void, NSRange, NSData;
overload selector(#"replaceCharactersInRange:withString:") = Void, NSRange, NSString;
overload selector(#"replaceChildAtIndex:withNode:") = Void, CULong, NSXMLNode;
overload selector(#"replaceGlyphAtIndex:withGlyph:") = Void, CULong, UInt;
overload selector(#"replaceItemAtURL:withItemAtURL:backupItemName:options:resultingItemURL:error:") = Bool, NSURL, NSURL, NSString, CULong, Pointer[NSURL], Pointer[NSError];
overload selector(#"replaceLayoutManager:") = Void, NSLayoutManager;
overload selector(#"replaceObject:withObject:") = Void, Id, Id;
overload selector(#"replaceObjectAtIndex:withObject:") = Void, CULong, Id;
overload selector(#"replaceObjectsAtIndexes:withObjects:") = Void, NSIndexSet, NSArray;
overload selector(#"replaceObjectsInRange:withObjectsFromArray:") = Void, NSRange, NSArray;
overload selector(#"replaceObjectsInRange:withObjectsFromArray:range:") = Void, NSRange, NSArray, NSRange;
overload selector(#"replaceOccurrencesOfString:withString:options:range:") = CULong, NSString, NSString, CULong, NSRange;
overload selector(#"replacePointerAtIndex:withPointer:") = Void, CULong, RawPointer;
overload selector(#"replaceSublayer:with:") = Void, CALayer, CALayer;
overload selector(#"replaceSubview:with:") = Void, NSView, NSView;
overload selector(#"replaceTextContainer:") = Void, NSTextContainer;
overload selector(#"replaceTextStorage:") = Void, NSTextStorage;
overload selector(#"replaceValueAtIndex:inPropertyWithKey:withValue:") = Void, CULong, NSString, Id;
overload selector(#"replacementCheckingResultWithRange:replacementString:") = NSTextCheckingResult, NSRange, NSString;
overload selector(#"replacementClassForClass:") = Id, Id;
overload selector(#"replacementObjectForArchiver:") = Id, NSArchiver;
overload selector(#"replacementObjectForCoder:") = Id, NSCoder;
overload selector(#"replacementObjectForKeyedArchiver:") = Id, NSKeyedArchiver;
overload selector(#"replacementObjectForPortCoder:") = Id, NSPortCoder;
overload selector(#"replacementString") = NSString;
overload selector(#"replyAppleEventForSuspensionID:") = NSAppleEventDescriptor, NSAppleEventManagerSuspensionID;
overload selector(#"replyTimeout") = Double;
overload selector(#"replyToApplicationShouldTerminate:") = Void, Bool;
overload selector(#"replyToOpenOrPrint:") = Void, CULong;
overload selector(#"replyWithException:") = Void, NSException;
overload selector(#"reportException:") = Void, NSException;
overload selector(#"representationOfImageRepsInArray:usingType:properties:") = NSData, NSArray, CULong, NSDictionary;
overload selector(#"representationUsingType:properties:") = NSData, CULong, NSDictionary;
overload selector(#"representations") = NSArray;
overload selector(#"representedFilename") = NSString;
overload selector(#"representedObject") = Id;
overload selector(#"representedURL") = NSURL;
overload selector(#"request") = NSURLRequest;
overload selector(#"requestCheckingOfString:range:types:options:inSpellDocumentWithTag:completionHandler:") = CLong, NSString, NSRange, UInt64, NSDictionary, CLong, UnknownType;
overload selector(#"requestHeaderFieldsWithCookies:") = NSDictionary, NSArray;
overload selector(#"requestIsCacheEquivalent:toRequest:") = Bool, NSURLRequest, NSURLRequest;
overload selector(#"requestModes") = NSArray;
overload selector(#"requestTimeout") = Double;
overload selector(#"requestUserAttention:") = CLong, CULong;
overload selector(#"requestWithURL:") = Id, NSURL;
overload selector(#"requestWithURL:cachePolicy:timeoutInterval:") = Id, NSURL, CULong, Double;
overload selector(#"requiredFileType") = NSString;
overload selector(#"requiredThickness") = Double;
overload selector(#"reservedSpaceLength") = CULong;
overload selector(#"reservedThicknessForAccessoryView") = Double;
overload selector(#"reservedThicknessForMarkers") = Double;
overload selector(#"reset") = Void;
overload selector(#"resetBytesInRange:") = Void, NSRange;
overload selector(#"resetCancelButtonCell") = Void;
overload selector(#"resetCursorRect:inView:") = Void, NSRect, NSView;
overload selector(#"resetCursorRects") = Void;
overload selector(#"resetSearchButtonCell") = Void;
overload selector(#"resetStandardUserDefaults") = Void;
overload selector(#"resetSystemTimeZone") = Void;
overload selector(#"reshape") = Void;
overload selector(#"resignFirstResponder") = Bool;
overload selector(#"resignKeyWindow") = Void;
overload selector(#"resignMainWindow") = Void;
overload selector(#"resizeDownCursor") = NSCursor;
overload selector(#"resizeFlags") = CLong;
overload selector(#"resizeIncrements") = NSSize;
overload selector(#"resizeLeftCursor") = NSCursor;
overload selector(#"resizeLeftRightCursor") = NSCursor;
overload selector(#"resizeRightCursor") = NSCursor;
overload selector(#"resizeSublayersWithOldSize:") = Void, CGSize;
overload selector(#"resizeSubviewsWithOldSize:") = Void, NSSize;
overload selector(#"resizeUpCursor") = NSCursor;
overload selector(#"resizeUpDownCursor") = NSCursor;
overload selector(#"resizeWithOldSuperlayerSize:") = Void, CGSize;
overload selector(#"resizeWithOldSuperviewSize:") = Void, NSSize;
overload selector(#"resizedColumn") = CLong;
overload selector(#"resizingMask") = CULong;
overload selector(#"resolve") = Void;
overload selector(#"resolveClassMethod:") = Bool, SelectorHandle;
overload selector(#"resolveInstanceMethod:") = Bool, SelectorHandle;
overload selector(#"resolveNamespaceForName:") = NSXMLNode, NSString;
overload selector(#"resolvePrefixForNamespaceURI:") = NSString, NSString;
overload selector(#"resolveWithTimeout:") = Void, Double;
overload selector(#"resolvedKeyDictionary") = NSDictionary;
overload selector(#"resolvesAliases") = Bool;
overload selector(#"resourceData") = NSData;
overload selector(#"resourceDataUsingCache:") = NSData, Bool;
overload selector(#"resourcePath") = NSString;
overload selector(#"resourceSpecifier") = NSString;
overload selector(#"resourceURL") = NSURL;
overload selector(#"resourceValuesForKeys:error:") = NSDictionary, NSArray, Pointer[NSError];
overload selector(#"resourceValuesForKeys:fromBookmarkData:") = NSDictionary, NSArray, NSData;
overload selector(#"respondsToSelector:") = Bool, SelectorHandle;
overload selector(#"response") = NSURLResponse;
overload selector(#"restoreCachedImage") = Void;
overload selector(#"restoreGraphicsState") = Void;
overload selector(#"result") = Id;
overload selector(#"resultAtIndex:") = Id, CULong;
overload selector(#"resultCount") = CULong;
overload selector(#"resultType") = UInt64;
overload selector(#"results") = NSArray;
overload selector(#"resume") = Bool;
overload selector(#"resumeData") = NSData;
overload selector(#"resumeExecutionWithResult:") = Void, Id;
overload selector(#"resumeWithSuspensionID:") = Void, NSAppleEventManagerSuspensionID;
overload selector(#"retain") = Id;
overload selector(#"retainArguments") = Void;
overload selector(#"retainCount") = CULong;
overload selector(#"returnID") = Short;
overload selector(#"returnType") = NSString;
overload selector(#"reusesColumns") = Bool;
overload selector(#"reverseObjectEnumerator") = NSEnumerator;
overload selector(#"reverseTransformedValue:") = Id, Id;
overload selector(#"reversedSortDescriptor") = Id;
overload selector(#"revert:") = Void, Id;
overload selector(#"revertDocumentToSaved:") = Void, Id;
overload selector(#"revertToContentsOfURL:ofType:error:") = Bool, NSURL, NSString, Pointer[NSError];
overload selector(#"revertToInitialValues:") = Void, Id;
overload selector(#"revertToSavedFromFile:ofType:") = Bool, NSString, NSString;
overload selector(#"revertToSavedFromURL:ofType:") = Bool, NSURL, NSString;
overload selector(#"reviewUnsavedDocumentsWithAlertTitle:cancellable:delegate:didReviewAllSelector:contextInfo:") = Void, NSString, Bool, Id, SelectorHandle, RawPointer;
overload selector(#"richTextSource") = NSAttributedString;
overload selector(#"rightExpression") = NSExpression;
overload selector(#"rightExpressionAttributeType") = CULong;
overload selector(#"rightExpressions") = NSArray;
overload selector(#"rightMargin") = Double;
overload selector(#"rightMouseDown:") = Void, NSEvent;
overload selector(#"rightMouseDragged:") = Void, NSEvent;
overload selector(#"rightMouseUp:") = Void, NSEvent;
overload selector(#"rootDocument") = NSXMLDocument;
overload selector(#"rootElement") = NSXMLElement;
overload selector(#"rootItemForBrowser:") = Id, NSBrowser;
overload selector(#"rootObject") = Id;
overload selector(#"rootProxy") = NSDistantObject;
overload selector(#"rootProxyForConnectionWithRegisteredName:host:") = NSDistantObject, NSString, NSString;
overload selector(#"rootProxyForConnectionWithRegisteredName:host:usingNameServer:") = NSDistantObject, NSString, NSString, NSPortNameServer;
overload selector(#"rotateByAngle:") = Void, Double;
overload selector(#"rotateByDegrees:") = Void, Double;
overload selector(#"rotateByRadians:") = Void, Double;
overload selector(#"rotateWithEvent:") = Void, NSEvent;
overload selector(#"rotation") = Float;
overload selector(#"roundingBehavior") = NSDecimalNumberHandler;
overload selector(#"roundingIncrement") = NSNumber;
overload selector(#"roundingMode") = CULong;
overload selector(#"rowAtPoint:") = CLong, NSPoint;
overload selector(#"rowClass") = Id;
overload selector(#"rowForDisplayValue:") = CLong, Id;
overload selector(#"rowForItem:") = CLong, Id;
overload selector(#"rowHeight") = Double;
overload selector(#"rowSpan") = CLong;
overload selector(#"rowTemplates") = NSArray;
overload selector(#"rowTypeForRow:") = CULong, CLong;
overload selector(#"rowTypeKeyPath") = NSString;
overload selector(#"rowsInRect:") = NSRange, NSRect;
overload selector(#"ruleEditor:child:forCriterion:withRowType:") = Id, NSRuleEditor, CLong, Id, CULong;
overload selector(#"ruleEditor:displayValueForCriterion:inRow:") = Id, NSRuleEditor, Id, CLong;
overload selector(#"ruleEditor:numberOfChildrenForCriterion:withRowType:") = CLong, NSRuleEditor, Id, CULong;
overload selector(#"ruleEditor:predicatePartsForCriterion:withDisplayValue:inRow:") = NSDictionary, NSRuleEditor, Id, Id, CLong;
overload selector(#"ruleEditorRowsDidChange:") = Void, NSNotification;
overload selector(#"ruleThickness") = Double;
overload selector(#"ruler") = NSRulerView;
overload selector(#"rulerAccessoryViewForTextView:paragraphStyle:ruler:enabled:") = NSView, NSTextView, NSParagraphStyle, NSRulerView, Bool;
overload selector(#"rulerAttributesInRange:") = NSDictionary, NSRange;
overload selector(#"rulerMarkersForTextView:paragraphStyle:ruler:") = NSArray, NSTextView, NSParagraphStyle, NSRulerView;
overload selector(#"rulerView:didAddMarker:") = Void, NSRulerView, NSRulerMarker;
overload selector(#"rulerView:didMoveMarker:") = Void, NSRulerView, NSRulerMarker;
overload selector(#"rulerView:didRemoveMarker:") = Void, NSRulerView, NSRulerMarker;
overload selector(#"rulerView:handleMouseDown:") = Void, NSRulerView, NSEvent;
overload selector(#"rulerView:shouldAddMarker:") = Bool, NSRulerView, NSRulerMarker;
overload selector(#"rulerView:shouldMoveMarker:") = Bool, NSRulerView, NSRulerMarker;
overload selector(#"rulerView:shouldRemoveMarker:") = Bool, NSRulerView, NSRulerMarker;
overload selector(#"rulerView:willAddMarker:atLocation:") = Double, NSRulerView, NSRulerMarker, Double;
overload selector(#"rulerView:willMoveMarker:toLocation:") = Double, NSRulerView, NSRulerMarker, Double;
overload selector(#"rulerView:willSetClientView:") = Void, NSRulerView, NSView;
overload selector(#"rulerViewClass") = Id;
overload selector(#"rulersVisible") = Bool;
overload selector(#"run") = Void;
overload selector(#"runActionForKey:object:arguments:") = Void, NSString, Id, NSDictionary;
overload selector(#"runCustomizationPalette:") = Void, Id;
overload selector(#"runInNewThread") = Void;
overload selector(#"runLoopModes") = NSArray;
overload selector(#"runLoopModesForAnimating") = NSArray;
overload selector(#"runModal") = CLong;
overload selector(#"runModalForDirectory:file:") = CLong, NSString, NSString;
overload selector(#"runModalForDirectory:file:types:") = CLong, NSString, NSString, NSArray;
overload selector(#"runModalForTypes:") = CLong, NSArray;
overload selector(#"runModalForWindow:") = CLong, NSWindow;
overload selector(#"runModalForWindow:relativeToWindow:") = CLong, NSWindow, NSWindow;
overload selector(#"runModalOpenPanel:forTypes:") = CLong, NSOpenPanel, NSArray;
overload selector(#"runModalPageLayoutWithPrintInfo:") = CLong, NSPrintInfo;
overload selector(#"runModalPageLayoutWithPrintInfo:delegate:didRunSelector:contextInfo:") = Void, NSPrintInfo, Id, SelectorHandle, RawPointer;
overload selector(#"runModalPrintOperation:delegate:didRunSelector:contextInfo:") = Void, NSPrintOperation, Id, SelectorHandle, RawPointer;
overload selector(#"runModalSavePanelForSaveOperation:delegate:didSaveSelector:contextInfo:") = Void, CULong, Id, SelectorHandle, RawPointer;
overload selector(#"runModalSession:") = CLong, NSModalSession;
overload selector(#"runModalWithPrintInfo:") = CLong, NSPrintInfo;
overload selector(#"runMode:beforeDate:") = Bool, NSString, NSDate;
overload selector(#"runOperation") = Bool;
overload selector(#"runOperationModalForWindow:delegate:didRunSelector:contextInfo:") = Void, NSWindow, Id, SelectorHandle, RawPointer;
overload selector(#"runPageLayout:") = Void, Id;
overload selector(#"runToolbarCustomizationPalette:") = Void, Id;
overload selector(#"runUntilDate:") = Void, NSDate;
overload selector(#"runningApplicationWithProcessIdentifier:") = NSRunningApplication, Int;
overload selector(#"runningApplications") = NSArray;
overload selector(#"runningApplicationsWithBundleIdentifier:") = NSArray, NSString;
overload selector(#"sRGBColorSpace") = NSColorSpace;
overload selector(#"samplesPerPixel") = CLong;
overload selector(#"saturationComponent") = Double;
overload selector(#"save:") = Void, Id;
overload selector(#"saveAllDocuments:") = Void, Id;
overload selector(#"saveDocument:") = Void, Id;
overload selector(#"saveDocumentAs:") = Void, Id;
overload selector(#"saveDocumentTo:") = Void, Id;
overload selector(#"saveDocumentWithDelegate:didSaveSelector:contextInfo:") = Void, Id, SelectorHandle, RawPointer;
overload selector(#"saveFrameUsingName:") = Void, NSString;
overload selector(#"saveGraphicsState") = Void;
overload selector(#"saveOptions") = CULong;
overload selector(#"savePanel") = NSSavePanel;
overload selector(#"saveToFile:saveOperation:delegate:didSaveSelector:contextInfo:") = Void, NSString, CULong, Id, SelectorHandle, RawPointer;
overload selector(#"saveToURL:ofType:forSaveOperation:delegate:didSaveSelector:contextInfo:") = Void, NSURL, NSString, CULong, Id, SelectorHandle, RawPointer;
overload selector(#"saveToURL:ofType:forSaveOperation:error:") = Bool, NSURL, NSString, CULong, Pointer[NSError];
overload selector(#"scale") = Short;
overload selector(#"scaleBy:") = Void, Double;
overload selector(#"scaleUnitSquareToSize:") = Void, NSSize;
overload selector(#"scaleXBy:yBy:") = Void, Double, Double;
overload selector(#"scalesWhenResized") = Bool;
overload selector(#"scalingFactor") = Double;
overload selector(#"scanCharactersFromSet:intoString:") = Bool, NSCharacterSet, Pointer[NSString];
overload selector(#"scanDecimal:") = Bool, Pointer[NSDecimal];
overload selector(#"scanDouble:") = Bool, Pointer[Double];
overload selector(#"scanFloat:") = Bool, Pointer[Float];
overload selector(#"scanHexDouble:") = Bool, Pointer[Double];
overload selector(#"scanHexFloat:") = Bool, Pointer[Float];
overload selector(#"scanHexInt:") = Bool, Pointer[UInt];
overload selector(#"scanHexLongLong:") = Bool, Pointer[UInt64];
overload selector(#"scanInt:") = Bool, Pointer[Int];
overload selector(#"scanInteger:") = Bool, Pointer[CLong];
overload selector(#"scanLocation") = CULong;
overload selector(#"scanLongLong:") = Bool, Pointer[Int64];
overload selector(#"scanString:intoString:") = Bool, NSString, Pointer[NSString];
overload selector(#"scanUpToCharactersFromSet:intoString:") = Bool, NSCharacterSet, Pointer[NSString];
overload selector(#"scanUpToString:intoString:") = Bool, NSString, Pointer[NSString];
overload selector(#"scannerWithString:") = Id, NSString;
overload selector(#"scheduleInRunLoop:forMode:") = Void, NSRunLoop, NSString;
overload selector(#"scheduledTimerWithTimeInterval:invocation:repeats:") = NSTimer, Double, NSInvocation, Bool;
overload selector(#"scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:") = NSTimer, Double, Id, SelectorHandle, Id, Bool;
overload selector(#"scheme") = NSString;
overload selector(#"screen") = NSScreen;
overload selector(#"screenFont") = NSFont;
overload selector(#"screenFontWithRenderingMode:") = NSFont, CULong;
overload selector(#"screens") = NSArray;
overload selector(#"scriptErrorExpectedTypeDescriptor") = NSAppleEventDescriptor;
overload selector(#"scriptErrorNumber") = Int;
overload selector(#"scriptErrorOffendingObjectDescriptor") = NSAppleEventDescriptor;
overload selector(#"scriptErrorString") = NSString;
overload selector(#"scriptingBeginsWith:") = Bool, Id;
overload selector(#"scriptingContains:") = Bool, Id;
overload selector(#"scriptingEndsWith:") = Bool, Id;
overload selector(#"scriptingIsEqualTo:") = Bool, Id;
overload selector(#"scriptingIsGreaterThan:") = Bool, Id;
overload selector(#"scriptingIsGreaterThanOrEqualTo:") = Bool, Id;
overload selector(#"scriptingIsLessThan:") = Bool, Id;
overload selector(#"scriptingIsLessThanOrEqualTo:") = Bool, Id;
overload selector(#"scriptingProperties") = NSDictionary;
overload selector(#"scriptingValueForSpecifier:") = Id, NSScriptObjectSpecifier;
overload selector(#"scrollBarColor") = NSColor;
overload selector(#"scrollCellToVisibleAtRow:column:") = Void, CLong, CLong;
overload selector(#"scrollClipView:toPoint:") = Void, NSClipView, NSPoint;
overload selector(#"scrollColumnToVisible:") = Void, CLong;
overload selector(#"scrollColumnsLeftBy:") = Void, CLong;
overload selector(#"scrollColumnsRightBy:") = Void, CLong;
overload selector(#"scrollItemAtIndexToTop:") = Void, CLong;
overload selector(#"scrollItemAtIndexToVisible:") = Void, CLong;
overload selector(#"scrollLineDown:") = Void, Id;
overload selector(#"scrollLineUp:") = Void, Id;
overload selector(#"scrollPageDown:") = Void, Id;
overload selector(#"scrollPageUp:") = Void, Id;
overload selector(#"scrollPoint:") = Void, NSPoint;
overload selector(#"scrollRangeToVisible:") = Void, NSRange;
overload selector(#"scrollRect:by:") = Void, NSRect, NSSize;
overload selector(#"scrollRectToVisible:") = Bool, NSRect;
overload selector(#"scrollRowToVisible:") = Void, CLong;
overload selector(#"scrollRowToVisible:inColumn:") = Void, CLong, CLong;
overload selector(#"scrollToBeginningOfDocument:") = Void, Id;
overload selector(#"scrollToEndOfDocument:") = Void, Id;
overload selector(#"scrollToPoint:") = Void, NSPoint;
overload selector(#"scrollViaScroller:") = Void, NSScroller;
overload selector(#"scrollView") = NSScrollView;
overload selector(#"scrollWheel:") = Void, NSEvent;
overload selector(#"scrollerWidth") = Double;
overload selector(#"scrollerWidthForControlSize:") = Double, CULong;
overload selector(#"scrollsDynamically") = Bool;
overload selector(#"searchButtonCell") = NSButtonCell;
overload selector(#"searchButtonRectForBounds:") = NSRect, NSRect;
overload selector(#"searchForAllDomains") = Void;
overload selector(#"searchForBrowsableDomains") = Void;
overload selector(#"searchForItemsWithSearchString:resultLimit:matchedItemHandler:") = Void, NSString, CLong, UnknownType;
overload selector(#"searchForRegistrationDomains") = Void;
overload selector(#"searchForServicesOfType:inDomain:") = Void, NSString, NSString;
overload selector(#"searchMenuTemplate") = NSMenu;
overload selector(#"searchScopes") = NSArray;
overload selector(#"searchString:inUserInterfaceItemString:searchRange:foundRange:") = Bool, NSString, NSString, NSRange, Pointer[NSRange];
overload selector(#"searchTextRectForBounds:") = NSRect, NSRect;
overload selector(#"second") = CLong;
overload selector(#"secondOfMinute") = CLong;
overload selector(#"secondaryGroupingSize") = CULong;
overload selector(#"secondarySelectedControlColor") = NSColor;
overload selector(#"secondsFromGMT") = CLong;
overload selector(#"secondsFromGMTForDate:") = CLong, NSDate;
overload selector(#"seekToEndOfFile") = UInt64;
overload selector(#"seekToFileOffset:") = Void, UInt64;
overload selector(#"segmentCount") = CLong;
overload selector(#"segmentStyle") = CLong;
overload selector(#"selectAll:") = Void, Id;
overload selector(#"selectCell:") = Void, NSCell;
overload selector(#"selectCellAtRow:column:") = Void, CLong, CLong;
overload selector(#"selectCellWithTag:") = Bool, CLong;
overload selector(#"selectColumn:byExtendingSelection:") = Void, CLong, Bool;
overload selector(#"selectColumnIndexes:byExtendingSelection:") = Void, NSIndexSet, Bool;
overload selector(#"selectFile:inFileViewerRootedAtPath:") = Bool, NSString, NSString;
overload selector(#"selectFirstTabViewItem:") = Void, Id;
overload selector(#"selectItem:") = Void, NSMenuItem;
overload selector(#"selectItemAtIndex:") = Void, CLong;
overload selector(#"selectItemWithObjectValue:") = Void, Id;
overload selector(#"selectItemWithTag:") = Bool, CLong;
overload selector(#"selectItemWithTitle:") = Void, NSString;
overload selector(#"selectKeyViewFollowingView:") = Void, NSView;
overload selector(#"selectKeyViewPrecedingView:") = Void, NSView;
overload selector(#"selectLastTabViewItem:") = Void, Id;
overload selector(#"selectLine:") = Void, Id;
overload selector(#"selectNext:") = Void, Id;
overload selector(#"selectNextKeyView:") = Void, Id;
overload selector(#"selectNextTabViewItem:") = Void, Id;
overload selector(#"selectParagraph:") = Void, Id;
overload selector(#"selectPrevious:") = Void, Id;
overload selector(#"selectPreviousKeyView:") = Void, Id;
overload selector(#"selectPreviousTabViewItem:") = Void, Id;
overload selector(#"selectRow:byExtendingSelection:") = Void, CLong, Bool;
overload selector(#"selectRow:inColumn:") = Void, CLong, CLong;
overload selector(#"selectRowIndexes:byExtendingSelection:") = Void, NSIndexSet, Bool;
overload selector(#"selectRowIndexes:inColumn:") = Void, NSIndexSet, CLong;
overload selector(#"selectSegmentWithTag:") = Bool, CLong;
overload selector(#"selectTabViewItem:") = Void, NSTabViewItem;
overload selector(#"selectTabViewItemAtIndex:") = Void, CLong;
overload selector(#"selectTabViewItemWithIdentifier:") = Void, Id;
overload selector(#"selectText:") = Void, Id;
overload selector(#"selectTextAtIndex:") = Void, CLong;
overload selector(#"selectTextAtRow:column:") = Id, CLong, CLong;
overload selector(#"selectToMark:") = Void, Id;
overload selector(#"selectWithFrame:inView:editor:delegate:start:length:") = Void, NSRect, NSView, NSText, Id, CLong, CLong;
overload selector(#"selectWord:") = Void, Id;
overload selector(#"selectedCell") = Id;
overload selector(#"selectedCellInColumn:") = Id, CLong;
overload selector(#"selectedCells") = NSArray;
overload selector(#"selectedColumn") = CLong;
overload selector(#"selectedColumnEnumerator") = NSEnumerator;
overload selector(#"selectedColumnIndexes") = NSIndexSet;
overload selector(#"selectedControlColor") = NSColor;
overload selector(#"selectedControlTextColor") = NSColor;
overload selector(#"selectedFont") = NSFont;
overload selector(#"selectedItem") = NSMenuItem;
overload selector(#"selectedItemIdentifier") = NSString;
overload selector(#"selectedKeyboardInputSource") = NSString;
overload selector(#"selectedKnobColor") = NSColor;
overload selector(#"selectedMenuItemColor") = NSColor;
overload selector(#"selectedMenuItemTextColor") = NSColor;
overload selector(#"selectedNodes") = NSArray;
overload selector(#"selectedObjects") = NSArray;
overload selector(#"selectedRange") = NSRange;
overload selector(#"selectedRanges") = NSArray;
overload selector(#"selectedRow") = CLong;
overload selector(#"selectedRowEnumerator") = NSEnumerator;
overload selector(#"selectedRowInColumn:") = CLong, CLong;
overload selector(#"selectedRowIndexes") = NSIndexSet;
overload selector(#"selectedRowIndexesInColumn:") = NSIndexSet, CLong;
overload selector(#"selectedSegment") = CLong;
overload selector(#"selectedTabViewItem") = NSTabViewItem;
overload selector(#"selectedTag") = CLong;
overload selector(#"selectedTextAttributes") = NSDictionary;
overload selector(#"selectedTextBackgroundColor") = NSColor;
overload selector(#"selectedTextColor") = NSColor;
overload selector(#"selection") = Id;
overload selector(#"selectionAffinity") = CULong;
overload selector(#"selectionGranularity") = CULong;
overload selector(#"selectionHighlightStyle") = CLong;
overload selector(#"selectionIndex") = CULong;
overload selector(#"selectionIndexPath") = NSIndexPath;
overload selector(#"selectionIndexPaths") = NSArray;
overload selector(#"selectionIndexes") = NSIndexSet;
overload selector(#"selectionRangeForProposedRange:granularity:") = NSRange, NSRange, CULong;
overload selector(#"selectionShouldChangeInOutlineView:") = Bool, NSOutlineView;
overload selector(#"selectionShouldChangeInTableView:") = Bool, NSTableView;
overload selector(#"selector") = SelectorHandle;
overload selector(#"selectorForCommand:") = SelectorHandle, NSScriptCommandDescription;
overload selector(#"selectsInsertedObjects") = Bool;
overload selector(#"self") = Id;
overload selector(#"sendAction") = Bool;
overload selector(#"sendAction:to:") = Bool, SelectorHandle, Id;
overload selector(#"sendAction:to:forAllCells:") = Void, SelectorHandle, Id, Bool;
overload selector(#"sendAction:to:from:") = Bool, SelectorHandle, Id, Id;
overload selector(#"sendActionOn:") = CLong, CLong;
overload selector(#"sendBeforeDate:") = Bool, NSDate;
overload selector(#"sendBeforeDate:components:from:reserved:") = Bool, NSDate, NSMutableArray, NSPort, CULong;
overload selector(#"sendBeforeDate:msgid:components:from:reserved:") = Bool, NSDate, CULong, NSMutableArray, NSPort, CULong;
overload selector(#"sendDoubleAction") = Void;
overload selector(#"sendEvent:") = Void, NSEvent;
overload selector(#"sendPort") = NSPort;
overload selector(#"sendSynchronousRequest:returningResponse:error:") = NSData, NSURLRequest, Pointer[NSURLResponse], Pointer[NSError];
overload selector(#"sender") = Id;
overload selector(#"sendsActionOnArrowKeys") = Bool;
overload selector(#"sendsActionOnEndEditing") = Bool;
overload selector(#"sendsSearchStringImmediately") = Bool;
overload selector(#"sendsWholeSearchString") = Bool;
overload selector(#"separatesColumns") = Bool;
overload selector(#"separatorItem") = NSMenuItem;
overload selector(#"serializedRepresentation") = NSData;
overload selector(#"server") = NSInputServer;
overload selector(#"serverTrust") = SecTrustRef;
overload selector(#"serviceConnectionWithName:rootObject:") = Id, NSString, Id;
overload selector(#"serviceConnectionWithName:rootObject:usingNameServer:") = Id, NSString, Id, NSPortNameServer;
overload selector(#"servicePortWithName:") = NSPort, NSString;
overload selector(#"servicesMenu") = NSMenu;
overload selector(#"servicesProvider") = Id;
overload selector(#"set") = Id;
overload selector(#"setAMSymbol:") = Void, NSString;
overload selector(#"setAbbreviationDictionary:") = Void, NSDictionary;
overload selector(#"setAcceptsArrowKeys:") = Void, Bool;
overload selector(#"setAcceptsGlyphInfo:") = Void, Bool;
overload selector(#"setAcceptsMouseMovedEvents:") = Void, Bool;
overload selector(#"setAcceptsTouchEvents:") = Void, Bool;
overload selector(#"setAccessibilityDescription:") = Void, NSString;
overload selector(#"setAccessoryView:") = Void, NSView;
overload selector(#"setAcquireFunction:") = Void, CCodePointer[[RawPointer,CCodePointer[[RawPointer],[CULong]],CChar],[RawPointer]];
overload selector(#"setAction:") = Void, SelectorHandle;
overload selector(#"setActionName:") = Void, NSString;
overload selector(#"setActions:") = Void, NSDictionary;
overload selector(#"setActivationPolicy:") = Bool, CLong;
overload selector(#"setAffineTransform:") = Void, CGAffineTransform;
overload selector(#"setAlertStyle:") = Void, CULong;
overload selector(#"setAlignment:") = Void, CULong;
overload selector(#"setAlignment:range:") = Void, CULong, NSRange;
overload selector(#"setAlignmentRect:") = Void, NSRect;
overload selector(#"setAllHTTPHeaderFields:") = Void, NSDictionary;
overload selector(#"setAllowedFileTypes:") = Void, NSArray;
overload selector(#"setAllowedInputSourceLocales:") = Void, NSArray;
overload selector(#"setAllowedTypes:") = Void, NSArray;
overload selector(#"setAllowsBranchSelection:") = Void, Bool;
overload selector(#"setAllowsColumnReordering:") = Void, Bool;
overload selector(#"setAllowsColumnResizing:") = Void, Bool;
overload selector(#"setAllowsColumnSelection:") = Void, Bool;
overload selector(#"setAllowsConcurrentViewDrawing:") = Void, Bool;
overload selector(#"setAllowsContextMenuPlugIns:") = Void, Bool;
overload selector(#"setAllowsCutCopyPaste:") = Void, Bool;
overload selector(#"setAllowsDocumentBackgroundColorChange:") = Void, Bool;
overload selector(#"setAllowsEditingTextAttributes:") = Void, Bool;
overload selector(#"setAllowsEmptySelection:") = Void, Bool;
overload selector(#"setAllowsFloats:") = Void, Bool;
overload selector(#"setAllowsImageEditing:") = Void, Bool;
overload selector(#"setAllowsMixedState:") = Void, Bool;
overload selector(#"setAllowsMultipleSelection:") = Void, Bool;
overload selector(#"setAllowsNonContiguousLayout:") = Void, Bool;
overload selector(#"setAllowsOtherFileTypes:") = Void, Bool;
overload selector(#"setAllowsTickMarkValuesOnly:") = Void, Bool;
overload selector(#"setAllowsToolTipsWhenApplicationIsInactive:") = Void, Bool;
overload selector(#"setAllowsTruncatedLabels:") = Void, Bool;
overload selector(#"setAllowsTypeSelect:") = Void, Bool;
overload selector(#"setAllowsUndo:") = Void, Bool;
overload selector(#"setAllowsUserCustomization:") = Void, Bool;
overload selector(#"setAlpha:") = Void, Bool;
overload selector(#"setAlphaValue:") = Void, Double;
overload selector(#"setAltIncrementValue:") = Void, Double;
overload selector(#"setAlternate:") = Void, Bool;
overload selector(#"setAlternateImage:") = Void, NSImage;
overload selector(#"setAlternateMnemonicLocation:") = Void, CULong;
overload selector(#"setAlternateTitle:") = Void, NSString;
overload selector(#"setAlternateTitleWithMnemonic:") = Void, NSString;
overload selector(#"setAltersStateOfSelectedItem:") = Void, Bool;
overload selector(#"setAlwaysShowsDecimalSeparator:") = Void, Bool;
overload selector(#"setAlwaysUsesMultipleValuesMarker:") = Void, Bool;
overload selector(#"setAnchorPoint:") = Void, CGPoint;
overload selector(#"setAnchorPointZ:") = Void, Double;
overload selector(#"setAnimates:") = Void, Bool;
overload selector(#"setAnimationBlockingMode:") = Void, CULong;
overload selector(#"setAnimationCurve:") = Void, CULong;
overload selector(#"setAnimationDelay:") = Void, Double;
overload selector(#"setAnimations:") = Void, NSDictionary;
overload selector(#"setApplicationIconImage:") = Void, NSImage;
overload selector(#"setAppliesImmediately:") = Void, Bool;
overload selector(#"setArgument:atIndex:") = Void, RawPointer, CLong;
overload selector(#"setArguments:") = Void, NSArray;
overload selector(#"setArray:") = Void, NSArray;
overload selector(#"setArrowPosition:") = Void, CULong;
overload selector(#"setArrowsPosition:") = Void, CULong;
overload selector(#"setAspectRatio:") = Void, NSSize;
overload selector(#"setAssociatedPoints:atIndex:") = Void, NSPointArray, CLong;
overload selector(#"setAsynchronous:") = Void, Bool;
overload selector(#"setAttachment:") = Void, NSTextAttachment;
overload selector(#"setAttachmentCell:") = Void, Id;
overload selector(#"setAttachmentSize:forGlyphRange:") = Void, NSSize, NSRange;
overload selector(#"setAttributeDescriptor:forKeyword:") = Void, NSAppleEventDescriptor, UInt;
overload selector(#"setAttributeRuns:") = Void, NSArray;
overload selector(#"setAttributeType:") = Void, CULong;
overload selector(#"setAttributeValueClassName:") = Void, NSString;
overload selector(#"setAttributedAlternateTitle:") = Void, NSAttributedString;
overload selector(#"setAttributedString:") = Void, NSAttributedString;
overload selector(#"setAttributedStringForNil:") = Void, NSAttributedString;
overload selector(#"setAttributedStringForNotANumber:") = Void, NSAttributedString;
overload selector(#"setAttributedStringForZero:") = Void, NSAttributedString;
overload selector(#"setAttributedStringValue:") = Void, NSAttributedString;
overload selector(#"setAttributedTitle:") = Void, NSAttributedString;
overload selector(#"setAttributes:") = Void, NSArray;
overload selector(#"setAttributes:ofItemAtPath:error:") = Bool, NSDictionary, NSString, Pointer[NSError];
overload selector(#"setAttributes:range:") = Void, NSDictionary, NSRange;
overload selector(#"setAttributesAsDictionary:") = Void, NSDictionary;
overload selector(#"setAutodisplay:") = Void, Bool;
overload selector(#"setAutoenablesItems:") = Void, Bool;
overload selector(#"setAutohidesScroller:") = Void, Bool;
overload selector(#"setAutohidesScrollers:") = Void, Bool;
overload selector(#"setAutomaticDashSubstitutionEnabled:") = Void, Bool;
overload selector(#"setAutomaticDataDetectionEnabled:") = Void, Bool;
overload selector(#"setAutomaticLinkDetectionEnabled:") = Void, Bool;
overload selector(#"setAutomaticQuoteSubstitutionEnabled:") = Void, Bool;
overload selector(#"setAutomaticSpellingCorrectionEnabled:") = Void, Bool;
overload selector(#"setAutomaticTextReplacementEnabled:") = Void, Bool;
overload selector(#"setAutomaticallyIdentifiesLanguages:") = Void, Bool;
overload selector(#"setAutomaticallyPreparesContent:") = Void, Bool;
overload selector(#"setAutomaticallyRearrangesObjects:") = Void, Bool;
overload selector(#"setAutorecalculatesContentBorderThickness:forEdge:") = Void, Bool, CULong;
overload selector(#"setAutorecalculatesKeyViewLoop:") = Void, Bool;
overload selector(#"setAutorepeat:") = Void, Bool;
overload selector(#"setAutoresizesAllColumnsToFit:") = Void, Bool;
overload selector(#"setAutoresizesOutlineColumn:") = Void, Bool;
overload selector(#"setAutoresizesSubviews:") = Void, Bool;
overload selector(#"setAutoresizingMask:") = Void, CULong;
overload selector(#"setAutoreverses:") = Void, Bool;
overload selector(#"setAutosaveExpandedItems:") = Void, Bool;
overload selector(#"setAutosaveName:") = Void, NSString;
overload selector(#"setAutosaveTableColumns:") = Void, Bool;
overload selector(#"setAutosavedContentsFileURL:") = Void, NSURL;
overload selector(#"setAutosavesConfiguration:") = Void, Bool;
overload selector(#"setAutosavingDelay:") = Void, Double;
overload selector(#"setAutoscroll:") = Void, Bool;
overload selector(#"setAutosizesCells:") = Void, Bool;
overload selector(#"setAutovalidates:") = Void, Bool;
overload selector(#"setAvoidsEmptySelection:") = Void, Bool;
overload selector(#"setBackgroundColor:") = Void, NSColor;
overload selector(#"setBackgroundColors:") = Void, NSArray;
overload selector(#"setBackgroundFilters:") = Void, NSArray;
overload selector(#"setBackgroundLayoutEnabled:") = Void, Bool;
overload selector(#"setBackgroundStyle:") = Void, CLong;
overload selector(#"setBackingType:") = Void, CULong;
overload selector(#"setBadgeLabel:") = Void, NSString;
overload selector(#"setBaseSpecifier:") = Void, NSScriptObjectSpecifier;
overload selector(#"setBaseWritingDirection:") = Void, CLong;
overload selector(#"setBaseWritingDirection:range:") = Void, CLong, NSRange;
overload selector(#"setBecomesKeyOnlyIfNeeded:") = Void, Bool;
overload selector(#"setBeginTime:") = Void, Double;
overload selector(#"setBezelStyle:") = Void, CULong;
overload selector(#"setBezeled:") = Void, Bool;
overload selector(#"setBidiLevels:forGlyphRange:") = Void, Pointer[CUChar], NSRange;
overload selector(#"setBidiProcessingEnabled:") = Void, Bool;
overload selector(#"setBitsPerSample:") = Void, CLong;
overload selector(#"setBlocksOtherRecognizers:") = Void, Bool;
overload selector(#"setBool:forKey:") = Void, Bool, NSString;
overload selector(#"setBorderColor:") = Void, NSColor;
overload selector(#"setBorderColor:forEdge:") = Void, NSColor, CULong;
overload selector(#"setBorderType:") = Void, CULong;
overload selector(#"setBorderWidth:") = Void, Double;
overload selector(#"setBordered:") = Void, Bool;
overload selector(#"setBottomMargin:") = Void, Double;
overload selector(#"setBounds:") = Void, NSRect;
overload selector(#"setBoundsOrigin:") = Void, NSPoint;
overload selector(#"setBoundsRect:forTextBlock:glyphRange:") = Void, NSRect, NSTextBlock, NSRange;
overload selector(#"setBoundsRotation:") = Void, Double;
overload selector(#"setBoundsSize:") = Void, NSSize;
overload selector(#"setBoxType:") = Void, CULong;
overload selector(#"setButtonBordered:") = Void, Bool;
overload selector(#"setButtonType:") = Void, CULong;
overload selector(#"setByAddingObject:") = NSSet, Id;
overload selector(#"setByAddingObjectsFromArray:") = NSSet, NSArray;
overload selector(#"setByAddingObjectsFromSet:") = NSSet, NSSet;
overload selector(#"setCacheDepthMatchesImageDepth:") = Void, Bool;
overload selector(#"setCacheMode:") = Void, CULong;
overload selector(#"setCachePolicy:") = Void, CULong;
overload selector(#"setCachedSeparately:") = Void, Bool;
overload selector(#"setCachesBezierPath:") = Void, Bool;
overload selector(#"setCalendar:") = Void, NSCalendar;
overload selector(#"setCalendarFormat:") = Void, NSString;
overload selector(#"setCanBeVisibleOnAllSpaces:") = Void, Bool;
overload selector(#"setCanBecomeVisibleWithoutLogin:") = Void, Bool;
overload selector(#"setCanChooseDirectories:") = Void, Bool;
overload selector(#"setCanChooseFiles:") = Void, Bool;
overload selector(#"setCanCreateDirectories:") = Void, Bool;
overload selector(#"setCanDrawConcurrently:") = Void, Bool;
overload selector(#"setCanHide:") = Void, Bool;
overload selector(#"setCanRemoveAllRows:") = Void, Bool;
overload selector(#"setCanSelectHiddenExtension:") = Void, Bool;
overload selector(#"setCanSpawnSeparateThread:") = Void, Bool;
overload selector(#"setCancelButtonCell:") = Void, NSButtonCell;
overload selector(#"setCaseSensitive:") = Void, Bool;
overload selector(#"setCell:") = Void, NSCell;
overload selector(#"setCellAttribute:to:") = Void, CULong, CLong;
overload selector(#"setCellBackgroundColor:") = Void, NSColor;
overload selector(#"setCellClass:") = Void, Id;
overload selector(#"setCellPrototype:") = Void, NSCell;
overload selector(#"setCellSize:") = Void, NSSize;
overload selector(#"setChannelMapping:") = Void, NSArray;
overload selector(#"setCharacterEncoding:") = Void, NSString;
overload selector(#"setCharacterIndex:forGlyphAtIndex:") = Void, CULong, CULong;
overload selector(#"setCharacters:") = Void, NSArray;
overload selector(#"setCharactersToBeSkipped:") = Void, NSCharacterSet;
overload selector(#"setChildSpecifier:") = Void, NSScriptObjectSpecifier;
overload selector(#"setChildren:") = Void, NSArray;
overload selector(#"setChildrenKeyPath:") = Void, NSString;
overload selector(#"setClass:forClassName:") = Void, Id, NSString;
overload selector(#"setClassName:forClass:") = Void, NSString, Id;
overload selector(#"setClearsFilterPredicateOnInsertion:") = Void, Bool;
overload selector(#"setClientView:") = Void, NSView;
overload selector(#"setClip") = Void;
overload selector(#"setCollapsesBorders:") = Void, Bool;
overload selector(#"setCollectionBehavior:") = Void, CULong;
overload selector(#"setColor:") = Void, NSColor;
overload selector(#"setColor:atX:y:") = Void, NSColor, CLong, CLong;
overload selector(#"setColor:forKey:") = Void, NSColor, NSString;
overload selector(#"setColorRenderingIntent:") = Void, CLong;
overload selector(#"setColorSpace:") = Void, NSColorSpace;
overload selector(#"setColorSpaceName:") = Void, NSString;
overload selector(#"setColumnAutoresizingStyle:") = Void, CULong;
overload selector(#"setColumnResizingType:") = Void, CULong;
overload selector(#"setColumnsAutosaveName:") = Void, NSString;
overload selector(#"setCommands:") = Void, NSArray;
overload selector(#"setCompletes:") = Void, Bool;
overload selector(#"setCompletionBlock:") = Void, UnknownType;
overload selector(#"setCompletionDelay:") = Void, Double;
overload selector(#"setCompositingFilter:") = Void, CIFilter;
overload selector(#"setCompositingOperation:") = Void, CULong;
overload selector(#"setCompression:factor:") = Void, CULong, Float;
overload selector(#"setConfigurationFromDictionary:") = Void, NSDictionary;
overload selector(#"setConstrainedFrameSize:") = Void, NSSize;
overload selector(#"setContainerClassDescription:") = Void, NSScriptClassDescription;
overload selector(#"setContainerIsObjectBeingTested:") = Void, Bool;
overload selector(#"setContainerIsRangeContainerObject:") = Void, Bool;
overload selector(#"setContainerSize:") = Void, NSSize;
overload selector(#"setContainerSpecifier:") = Void, NSScriptObjectSpecifier;
overload selector(#"setContent:") = Void, Id;
overload selector(#"setContentAspectRatio:") = Void, NSSize;
overload selector(#"setContentBorderThickness:forEdge:") = Void, Double, CULong;
overload selector(#"setContentFilters:") = Void, NSArray;
overload selector(#"setContentMaxSize:") = Void, NSSize;
overload selector(#"setContentMinSize:") = Void, NSSize;
overload selector(#"setContentResizeIncrements:") = Void, NSSize;
overload selector(#"setContentSize:") = Void, NSSize;
overload selector(#"setContentView:") = Void, NSView;
overload selector(#"setContentViewMargins:") = Void, NSSize;
overload selector(#"setContentWidth:type:") = Void, Double, CULong;
overload selector(#"setContents:") = Void, Id;
overload selector(#"setContentsCenter:") = Void, CGRect;
overload selector(#"setContentsGravity:") = Void, NSString;
overload selector(#"setContentsRect:") = Void, CGRect;
overload selector(#"setContextHelp:forObject:") = Void, NSAttributedString, Id;
overload selector(#"setContextHelpModeActive:") = Void, Bool;
overload selector(#"setContextMenuRepresentation:") = Void, Id;
overload selector(#"setContinuous:") = Void, Bool;
overload selector(#"setContinuousSpellCheckingEnabled:") = Void, Bool;
overload selector(#"setControlSize:") = Void, CULong;
overload selector(#"setControlTint:") = Void, CULong;
overload selector(#"setControlView:") = Void, NSView;
overload selector(#"setCookie:") = Void, NSHTTPCookie;
overload selector(#"setCookieAcceptPolicy:") = Void, CULong;
overload selector(#"setCookies:forURL:mainDocumentURL:") = Void, NSArray, NSURL, NSURL;
overload selector(#"setCopiesOnScroll:") = Void, Bool;
overload selector(#"setCornerRadius:") = Void, Double;
overload selector(#"setCornerView:") = Void, NSView;
overload selector(#"setCount:") = Void, CULong;
overload selector(#"setCountKeyPath:") = Void, NSString;
overload selector(#"setCountLimit:") = Void, CULong;
overload selector(#"setCredential:forProtectionSpace:") = Void, NSURLCredential, NSURLProtectionSpace;
overload selector(#"setCriteria:andDisplayValues:forRowAtIndex:") = Void, NSArray, NSArray, CLong;
overload selector(#"setCriteriaKeyPath:") = Void, NSString;
overload selector(#"setCriticalValue:") = Void, Double;
overload selector(#"setCurrencyCode:") = Void, NSString;
overload selector(#"setCurrencyDecimalSeparator:") = Void, NSString;
overload selector(#"setCurrencyGroupingSeparator:") = Void, NSString;
overload selector(#"setCurrencySymbol:") = Void, NSString;
overload selector(#"setCurrentAppleEventAndReplyEventWithSuspensionID:") = Void, NSAppleEventManagerSuspensionID;
overload selector(#"setCurrentContext:") = Void, NSGraphicsContext;
overload selector(#"setCurrentDirectoryPath:") = Void, NSString;
overload selector(#"setCurrentOperation:") = Void, NSPrintOperation;
overload selector(#"setCurrentPage:") = Void, CLong;
overload selector(#"setCurrentProgress:") = Void, Float;
overload selector(#"setCurrentTime:") = Void, Double;
overload selector(#"setCurrentVirtualScreen:") = Void, Int;
overload selector(#"setDTD:") = Void, NSXMLDTD;
overload selector(#"setDTDKind:") = Void, CULong;
overload selector(#"setData:") = Void, NSData;
overload selector(#"setData:forType:") = Bool, NSData, NSString;
overload selector(#"setDataCell:") = Void, NSCell;
overload selector(#"setDataProvider:forTypes:") = Bool, Id, NSArray;
overload selector(#"setDataRetained:") = Void, Bool;
overload selector(#"setDataSource:") = Void, Id;
overload selector(#"setDateFormat:") = Void, NSString;
overload selector(#"setDatePickerElements:") = Void, CULong;
overload selector(#"setDatePickerMode:") = Void, CULong;
overload selector(#"setDatePickerStyle:") = Void, CULong;
overload selector(#"setDateStyle:") = Void, CULong;
overload selector(#"setDateValue:") = Void, NSDate;
overload selector(#"setDay:") = Void, CLong;
overload selector(#"setDecimalSeparator:") = Void, NSString;
overload selector(#"setDefaultAttachmentScaling:") = Void, CULong;
overload selector(#"setDefaultBehavior:") = Void, Id;
overload selector(#"setDefaultButtonCell:") = Void, NSButtonCell;
overload selector(#"setDefaultButtonTitle:") = Void, NSString;
overload selector(#"setDefaultColumnWidth:") = Void, Double;
overload selector(#"setDefaultCredential:forProtectionSpace:") = Void, NSURLCredential, NSURLProtectionSpace;
overload selector(#"setDefaultDate:") = Void, NSDate;
overload selector(#"setDefaultFlatness:") = Void, Double;
overload selector(#"setDefaultFormatterBehavior:") = Void, CULong;
overload selector(#"setDefaultLineCapStyle:") = Void, CULong;
overload selector(#"setDefaultLineJoinStyle:") = Void, CULong;
overload selector(#"setDefaultLineWidth:") = Void, Double;
overload selector(#"setDefaultMiterLimit:") = Void, Double;
overload selector(#"setDefaultNameServerPortNumber:") = Void, UShort;
overload selector(#"setDefaultParagraphStyle:") = Void, NSParagraphStyle;
overload selector(#"setDefaultPlaceholder:forMarker:withBinding:") = Void, Id, Id, NSString;
overload selector(#"setDefaultPrinter:") = Void, NSPrinter;
overload selector(#"setDefaultTabInterval:") = Void, Double;
overload selector(#"setDefaultTimeZone:") = Void, NSTimeZone;
overload selector(#"setDefaultValue:") = Void, Id;
overload selector(#"setDefaultWindingRule:") = Void, CULong;
overload selector(#"setDelegate:") = Void, Id;
overload selector(#"setDeletesFileUponFailure:") = Void, Bool;
overload selector(#"setDepthLimit:") = Void, Int;
overload selector(#"setDescriptionFunction:") = Void, CCodePointer[[RawPointer],[NSString]];
overload selector(#"setDescriptor:forKeyword:") = Void, NSAppleEventDescriptor, UInt;
overload selector(#"setDesktopImageURL:forScreen:options:error:") = Bool, NSURL, NSScreen, NSDictionary, Pointer[NSError];
overload selector(#"setDestination:allowOverwrite:") = Void, NSString, Bool;
overload selector(#"setDictionary:") = Void, NSDictionary;
overload selector(#"setDirectParameter:") = Void, Id;
overload selector(#"setDirectory:") = Void, NSString;
overload selector(#"setDirectoryURL:") = Void, NSURL;
overload selector(#"setDiskCapacity:") = Void, CULong;
overload selector(#"setDisplayMode:") = Void, CULong;
overload selector(#"setDisplayValuesKeyPath:") = Void, NSString;
overload selector(#"setDisplayedCommandsTitle:") = Void, NSString;
overload selector(#"setDisplayedWhenStopped:") = Void, Bool;
overload selector(#"setDisplaysLinkToolTips:") = Void, Bool;
overload selector(#"setDisplaysWhenScreenProfileChanges:") = Void, Bool;
overload selector(#"setDividerStyle:") = Void, CLong;
overload selector(#"setDockTile:") = Void, NSDockTile;
overload selector(#"setDocument:") = Void, NSDocument;
overload selector(#"setDocumentContentKind:") = Void, CULong;
overload selector(#"setDocumentCursor:") = Void, NSCursor;
overload selector(#"setDocumentEdited:") = Void, Bool;
overload selector(#"setDocumentView:") = Void, NSView;
overload selector(#"setDoesRelativeDateFormatting:") = Void, Bool;
overload selector(#"setDouble:forKey:") = Void, Double, NSString;
overload selector(#"setDoubleAction:") = Void, SelectorHandle;
overload selector(#"setDoubleSided:") = Void, Bool;
overload selector(#"setDoubleValue:") = Void, Double;
overload selector(#"setDraggingDestinationFeedbackStyle:") = Void, CLong;
overload selector(#"setDraggingSourceOperationMask:forLocal:") = Void, CULong, Bool;
overload selector(#"setDrawsBackground:") = Void, Bool;
overload selector(#"setDrawsCellBackground:") = Void, Bool;
overload selector(#"setDrawsGrid:") = Void, Bool;
overload selector(#"setDrawsOutsideLineFragment:forGlyphAtIndex:") = Void, Bool, CULong;
overload selector(#"setDrawsOutsideLineFragment:forGlyphRange:") = Void, Bool, NSRange;
overload selector(#"setDropItem:dropChildIndex:") = Void, Id, CLong;
overload selector(#"setDropRow:dropOperation:") = Void, CLong, CULong;
overload selector(#"setDuration:") = Void, Double;
overload selector(#"setDynamicDepthLimit:") = Void, Bool;
overload selector(#"setEchosBullets:") = Void, Bool;
overload selector(#"setEdgeAntialiasingMask:") = Void, UInt;
overload selector(#"setEditable:") = Void, Bool;
overload selector(#"setEnabled:") = Void, Bool;
overload selector(#"setEnabled:forSegment:") = Void, Bool, CLong;
overload selector(#"setEnabledTextCheckingTypes:") = Void, UInt64;
overload selector(#"setEndSpecifier:") = Void, NSScriptObjectSpecifier;
overload selector(#"setEndSubelementIdentifier:") = Void, CULong;
overload selector(#"setEndSubelementIndex:") = Void, CLong;
overload selector(#"setEntityName:") = Void, NSString;
overload selector(#"setEntryType:") = Void, CLong;
overload selector(#"setEntryWidth:") = Void, Double;
overload selector(#"setEnvironment:") = Void, NSDictionary;
overload selector(#"setEra:") = Void, CLong;
overload selector(#"setEraSymbols:") = Void, NSArray;
overload selector(#"setEvaluationErrorNumber:") = Void, CLong;
overload selector(#"setEventHandler:andSelector:forEventClass:andEventID:") = Void, Id, SelectorHandle, UInt, UInt;
overload selector(#"setEvictsObjectsWithDiscardedContent:") = Void, Bool;
overload selector(#"setExcludedFromWindowsMenu:") = Void, Bool;
overload selector(#"setExcludedKeys:") = Void, NSArray;
overload selector(#"setExponentSymbol:") = Void, NSString;
overload selector(#"setExtensionHidden:") = Void, Bool;
overload selector(#"setExtraLineFragmentRect:usedRect:textContainer:") = Void, NSRect, NSRect, NSTextContainer;
overload selector(#"setFetchPredicate:") = Void, NSPredicate;
overload selector(#"setFieldEditor:") = Void, Bool;
overload selector(#"setFileAttributes:") = Void, NSDictionary;
overload selector(#"setFileModificationDate:") = Void, NSDate;
overload selector(#"setFileName:") = Void, NSString;
overload selector(#"setFileType:") = Void, NSString;
overload selector(#"setFileURL:") = Void, NSURL;
overload selector(#"setFileWrapper:") = Void, NSFileWrapper;
overload selector(#"setFilename:") = Void, NSString;
overload selector(#"setFill") = Void;
overload selector(#"setFillColor:") = Void, NSColor;
overload selector(#"setFillMode:") = Void, NSString;
overload selector(#"setFilterPredicate:") = Void, NSPredicate;
overload selector(#"setFilters:") = Void, NSArray;
overload selector(#"setFireDate:") = Void, NSDate;
overload selector(#"setFirstLineHeadIndent:") = Void, Double;
overload selector(#"setFirstWeekday:") = Void, CULong;
overload selector(#"setFlatness:") = Void, Double;
overload selector(#"setFlipped:") = Void, Bool;
overload selector(#"setFloat:forKey:") = Void, Float, NSString;
overload selector(#"setFloatValue:") = Void, Float;
overload selector(#"setFloatValue:knobProportion:") = Void, Float, Double;
overload selector(#"setFloatingPanel:") = Void, Bool;
overload selector(#"setFloatingPointFormat:left:right:") = Void, Bool, CULong, CULong;
overload selector(#"setFocusRingType:") = Void, CULong;
overload selector(#"setFocusedColumn:") = Void, CLong;
overload selector(#"setFont:") = Void, NSFont;
overload selector(#"setFont:range:") = Void, NSFont, NSRange;
overload selector(#"setFontManagerFactory:") = Void, Id;
overload selector(#"setFontMenu:") = Void, NSMenu;
overload selector(#"setFontPanelFactory:") = Void, Id;
overload selector(#"setForegroundColor:") = Void, NSColor;
overload selector(#"setFormat:") = Void, NSString;
overload selector(#"setFormatWidth:") = Void, CULong;
overload selector(#"setFormatter:") = Void, NSFormatter;
overload selector(#"setFormatterBehavior:") = Void, CULong;
overload selector(#"setFormattingDictionary:") = Void, NSDictionary;
overload selector(#"setFormattingStringsFilename:") = Void, NSString;
overload selector(#"setFrame:") = Void, NSRect;
overload selector(#"setFrame:display:") = Void, NSRect, Bool;
overload selector(#"setFrame:display:animate:") = Void, NSRect, Bool, Bool;
overload selector(#"setFrameAutosaveName:") = Bool, NSString;
overload selector(#"setFrameCenterRotation:") = Void, Double;
overload selector(#"setFrameFromContentFrame:") = Void, NSRect;
overload selector(#"setFrameFromString:") = Void, NSString;
overload selector(#"setFrameOrigin:") = Void, NSPoint;
overload selector(#"setFrameRate:") = Void, Float;
overload selector(#"setFrameRotation:") = Void, Double;
overload selector(#"setFrameSize:") = Void, NSSize;
overload selector(#"setFrameTopLeftPoint:") = Void, NSPoint;
overload selector(#"setFrameUsingName:") = Bool, NSString;
overload selector(#"setFrameUsingName:force:") = Bool, NSString, Bool;
overload selector(#"setFullScreen") = Void;
overload selector(#"setGeneratesCalendarDates:") = Void, Bool;
overload selector(#"setGeneratesDecimalNumbers:") = Void, Bool;
overload selector(#"setGeometryFlipped:") = Void, Bool;
overload selector(#"setGlyphGenerator:") = Void, NSGlyphGenerator;
overload selector(#"setGradientType:") = Void, CULong;
overload selector(#"setGrammarCheckingEnabled:") = Void, Bool;
overload selector(#"setGraphicsState:") = Void, CLong;
overload selector(#"setGregorianStartDate:") = Void, NSDate;
overload selector(#"setGridColor:") = Void, NSColor;
overload selector(#"setGridStyleMask:") = Void, CULong;
overload selector(#"setGroupingAttributes:") = Void, NSArray;
overload selector(#"setGroupingSeparator:") = Void, NSString;
overload selector(#"setGroupingSize:") = Void, CULong;
overload selector(#"setGroupsByEvent:") = Void, Bool;
overload selector(#"setHTTPBody:") = Void, NSData;
overload selector(#"setHTTPBodyStream:") = Void, NSInputStream;
overload selector(#"setHTTPMethod:") = Void, NSString;
overload selector(#"setHTTPShouldHandleCookies:") = Void, Bool;
overload selector(#"setHardInvalidation:forGlyphRange:") = Void, Bool, NSRange;
overload selector(#"setHasHorizontalRuler:") = Void, Bool;
overload selector(#"setHasHorizontalScroller:") = Void, Bool;
overload selector(#"setHasShadow:") = Void, Bool;
overload selector(#"setHasThousandSeparators:") = Void, Bool;
overload selector(#"setHasUndoManager:") = Void, Bool;
overload selector(#"setHasVerticalRuler:") = Void, Bool;
overload selector(#"setHasVerticalScroller:") = Void, Bool;
overload selector(#"setHashFunction:") = Void, CCodePointer[[RawPointer,CCodePointer[[RawPointer],[CULong]]],[CULong]];
overload selector(#"setHeadIndent:") = Void, Double;
overload selector(#"setHeaderCell:") = Void, NSCell;
overload selector(#"setHeaderLevel:") = Void, CLong;
overload selector(#"setHeaderToolTip:") = Void, NSString;
overload selector(#"setHeaderView:") = Void, NSTableHeaderView;
overload selector(#"setHeightTracksTextView:") = Void, Bool;
overload selector(#"setHelpAnchor:") = Void, NSString;
overload selector(#"setHelpMenu:") = Void, NSMenu;
overload selector(#"setHidden:") = Void, Bool;
overload selector(#"setHiddenUntilMouseMoves:") = Void, Bool;
overload selector(#"setHidesEmptyCells:") = Void, Bool;
overload selector(#"setHidesOnDeactivate:") = Void, Bool;
overload selector(#"setHighlightMode:") = Void, Bool;
overload selector(#"setHighlighted:") = Void, Bool;
overload selector(#"setHighlightedTableColumn:") = Void, NSTableColumn;
overload selector(#"setHighlightsBy:") = Void, CLong;
overload selector(#"setHorizontalLineScroll:") = Void, Double;
overload selector(#"setHorizontalPageScroll:") = Void, Double;
overload selector(#"setHorizontalPagination:") = Void, CULong;
overload selector(#"setHorizontalRulerView:") = Void, NSRulerView;
overload selector(#"setHorizontalScroller:") = Void, NSScroller;
overload selector(#"setHorizontallyCentered:") = Void, Bool;
overload selector(#"setHorizontallyResizable:") = Void, Bool;
overload selector(#"setHostCacheEnabled:") = Void, Bool;
overload selector(#"setHour:") = Void, CLong;
overload selector(#"setHyphenationFactor:") = Void, Float;
overload selector(#"setIcon:") = Void, NSImage;
overload selector(#"setIcon:forFile:options:") = Bool, NSImage, NSString, CULong;
overload selector(#"setIdentifier:") = Void, Id;
overload selector(#"setIgnoredWords:inSpellDocumentWithTag:") = Void, NSArray, CLong;
overload selector(#"setIgnoresAlpha:") = Void, Bool;
overload selector(#"setIgnoresMouseEvents:") = Void, Bool;
overload selector(#"setIgnoresMultiClick:") = Void, Bool;
overload selector(#"setImage:") = Void, NSImage;
overload selector(#"setImage:forSegment:") = Void, NSImage, CLong;
overload selector(#"setImageAlignment:") = Void, CULong;
overload selector(#"setImageDimsWhenDisabled:") = Void, Bool;
overload selector(#"setImageFrameStyle:") = Void, CULong;
overload selector(#"setImageInterpolation:") = Void, CULong;
overload selector(#"setImageOrigin:") = Void, NSPoint;
overload selector(#"setImagePosition:") = Void, CULong;
overload selector(#"setImageScaling:") = Void, CULong;
overload selector(#"setImageScaling:forSegment:") = Void, CULong, CLong;
overload selector(#"setImportsGraphics:") = Void, Bool;
overload selector(#"setInContext:") = Void, NSGraphicsContext;
overload selector(#"setIncludedKeys:") = Void, NSArray;
overload selector(#"setIncrement:") = Void, Double;
overload selector(#"setIndentationLevel:") = Void, CLong;
overload selector(#"setIndentationMarkerFollowsCell:") = Void, Bool;
overload selector(#"setIndentationPerLevel:") = Void, Double;
overload selector(#"setIndependentConversationQueueing:") = Void, Bool;
overload selector(#"setIndeterminate:") = Void, Bool;
overload selector(#"setIndex:") = Void, CLong;
overload selector(#"setIndexed:") = Void, Bool;
overload selector(#"setIndexedBySpotlight:") = Void, Bool;
overload selector(#"setIndicatorImage:inTableColumn:") = Void, NSImage, NSTableColumn;
overload selector(#"setInformativeText:") = Void, NSString;
overload selector(#"setInitialFirstResponder:") = Void, NSView;
overload selector(#"setInitialKey:") = Void, NSString;
overload selector(#"setInitialValue:") = Void, Id;
overload selector(#"setInitialValues:") = Void, NSDictionary;
overload selector(#"setInsertionClassDescription:") = Void, NSScriptClassDescription;
overload selector(#"setInsertionPointColor:") = Void, NSColor;
overload selector(#"setIntAttribute:value:forGlyphAtIndex:") = Void, CLong, CLong, CULong;
overload selector(#"setIntValue:") = Void, Int;
overload selector(#"setInteger:forKey:") = Void, CLong, NSString;
overload selector(#"setIntegerValue:") = Void, CLong;
overload selector(#"setIntercellSpacing:") = Void, NSSize;
overload selector(#"setInterfaceStyle:") = Void, CULong;
overload selector(#"setInterlineSpacing:") = Void, Double;
overload selector(#"setInternationalCurrencySymbol:") = Void, NSString;
overload selector(#"setIsEqualFunction:") = Void, CCodePointer[[RawPointer,RawPointer,CCodePointer[[RawPointer],[CULong]]],[CChar]];
overload selector(#"setIsMiniaturized:") = Void, Bool;
overload selector(#"setIsPaneSplitter:") = Void, Bool;
overload selector(#"setIsVisible:") = Void, Bool;
overload selector(#"setIsZoomed:") = Void, Bool;
overload selector(#"setItemHeight:") = Void, Double;
overload selector(#"setItemPrototype:") = Void, NSCollectionViewItem;
overload selector(#"setJobDisposition:") = Void, NSString;
overload selector(#"setJobStyleHint:") = Void, NSString;
overload selector(#"setJobTitle:") = Void, NSString;
overload selector(#"setKey:") = Void, NSString;
overload selector(#"setKeyCell:") = Void, NSCell;
overload selector(#"setKeyEquivalent:") = Void, NSString;
overload selector(#"setKeyEquivalentFont:") = Void, NSFont;
overload selector(#"setKeyEquivalentFont:size:") = Void, NSString, Double;
overload selector(#"setKeyEquivalentModifierMask:") = Void, CULong;
overload selector(#"setKeyboardFocusRingNeedsDisplayInRect:") = Void, NSRect;
overload selector(#"setKeys:triggerChangeNotificationsForDependentKey:") = Void, NSArray, NSString;
overload selector(#"setKnobProportion:") = Void, Double;
overload selector(#"setKnobThickness:") = Void, Double;
overload selector(#"setLabel:") = Void, NSString;
overload selector(#"setLabel:forSegment:") = Void, NSString, CLong;
overload selector(#"setLanguage:") = Bool, NSString;
overload selector(#"setLastColumn:") = Void, CLong;
overload selector(#"setLastComponentOfFileName:") = Void, NSString;
overload selector(#"setLaunchPath:") = Void, NSString;
overload selector(#"setLayer:") = Void, CALayer;
overload selector(#"setLayerContentsPlacement:") = Void, CLong;
overload selector(#"setLayerContentsRedrawPolicy:") = Void, CLong;
overload selector(#"setLayoutAlgorithm:") = Void, CULong;
overload selector(#"setLayoutManager:") = Void, NSLayoutManager;
overload selector(#"setLayoutRect:forTextBlock:glyphRange:") = Void, NSRect, NSTextBlock, NSRange;
overload selector(#"setLeadingOffset:") = Void, Double;
overload selector(#"setLeaf:") = Void, Bool;
overload selector(#"setLeafKeyPath:") = Void, NSString;
overload selector(#"setLeftMargin:") = Void, Double;
overload selector(#"setLength:") = Void, CULong;
overload selector(#"setLenient:") = Void, Bool;
overload selector(#"setLevel:") = Void, CLong;
overload selector(#"setLevelIndicatorStyle:") = Void, CULong;
overload selector(#"setLevelsOfUndo:") = Void, CULong;
overload selector(#"setLineBreakMode:") = Void, CULong;
overload selector(#"setLineCapStyle:") = Void, CULong;
overload selector(#"setLineDash:count:phase:") = Void, Pointer[Double], CLong, Double;
overload selector(#"setLineFragmentPadding:") = Void, Double;
overload selector(#"setLineFragmentRect:forGlyphRange:usedRect:") = Void, NSRect, NSRange, NSRect;
overload selector(#"setLineFragmentRect:forGlyphRange:usedRect:baselineOffset:") = Void, NSRect, NSRange, NSRect, Double;
overload selector(#"setLineHeightMultiple:") = Void, Double;
overload selector(#"setLineJoinStyle:") = Void, CULong;
overload selector(#"setLineScroll:") = Void, Double;
overload selector(#"setLineSpacing:") = Void, Double;
overload selector(#"setLineWidth:") = Void, Double;
overload selector(#"setLinkTextAttributes:") = Void, NSDictionary;
overload selector(#"setListensInForegroundOnly:") = Void, Bool;
overload selector(#"setLoaded:") = Void, Bool;
overload selector(#"setLocale:") = Void, NSLocale;
overload selector(#"setLocalizedKey:") = Void, NSString;
overload selector(#"setLocalizedKeyDictionary:") = Void, NSDictionary;
overload selector(#"setLocalizedKeyTable:") = Void, NSString;
overload selector(#"setLocalizesFormat:") = Void, Bool;
overload selector(#"setLocation:forStartOfGlyphRange:") = Void, NSPoint, NSRange;
overload selector(#"setLocation:withAdvancements:forStartOfGlyphRange:") = Void, NSPoint, Pointer[Double], NSRange;
overload selector(#"setLocations:startingGlyphIndexes:count:forGlyphRange:") = Void, NSPointArray, Pointer[CULong], CULong, NSRange;
overload selector(#"setLongEraSymbols:") = Void, NSArray;
overload selector(#"setLoops:") = Void, Bool;
overload selector(#"setMIMEType:") = Void, NSString;
overload selector(#"setMagnificationFilter:") = Void, NSString;
overload selector(#"setMainDocumentURL:") = Void, NSURL;
overload selector(#"setMainMenu:") = Void, NSMenu;
overload selector(#"setManagedObjectContext:") = Void, NSManagedObjectContext;
overload selector(#"setMark:") = Void, Id;
overload selector(#"setMarkedText:selectedRange:") = Void, Id, NSRange;
overload selector(#"setMarkedText:selectedRange:replacementRange:") = Void, Id, NSRange, NSRange;
overload selector(#"setMarkedTextAttributes:") = Void, NSDictionary;
overload selector(#"setMarkerLocation:") = Void, Double;
overload selector(#"setMarkers:") = Void, NSArray;
overload selector(#"setMask:") = Void, CALayer;
overload selector(#"setMasksToBounds:") = Void, Bool;
overload selector(#"setMatchesOnMultipleResolution:") = Void, Bool;
overload selector(#"setMatrixClass:") = Void, Id;
overload selector(#"setMaxConcurrentOperationCount:") = Void, CLong;
overload selector(#"setMaxContentSize:") = Void, NSSize;
overload selector(#"setMaxDate:") = Void, NSDate;
overload selector(#"setMaxItemSize:") = Void, NSSize;
overload selector(#"setMaxNumberOfColumns:") = Void, CULong;
overload selector(#"setMaxNumberOfRows:") = Void, CULong;
overload selector(#"setMaxSize:") = Void, NSSize;
overload selector(#"setMaxValue:") = Void, Double;
overload selector(#"setMaxVisibleColumns:") = Void, CLong;
overload selector(#"setMaxWidth:") = Void, Double;
overload selector(#"setMaximum:") = Void, NSNumber;
overload selector(#"setMaximumFractionDigits:") = Void, CULong;
overload selector(#"setMaximumIntegerDigits:") = Void, CULong;
overload selector(#"setMaximumLineHeight:") = Void, Double;
overload selector(#"setMaximumRecents:") = Void, CLong;
overload selector(#"setMaximumSignificantDigits:") = Void, CULong;
overload selector(#"setMeasurementUnits:") = Void, NSString;
overload selector(#"setMemoryCapacity:") = Void, CULong;
overload selector(#"setMenu:") = Void, NSMenu;
overload selector(#"setMenu:forSegment:") = Void, NSMenu, CLong;
overload selector(#"setMenuBarVisible:") = Void, Bool;
overload selector(#"setMenuChangedMessagesEnabled:") = Void, Bool;
overload selector(#"setMenuFormRepresentation:") = Void, NSMenuItem;
overload selector(#"setMenuItem:") = Void, NSMenuItem;
overload selector(#"setMenuRepresentation:") = Void, Id;
overload selector(#"setMenuZone:") = Void, Pointer[NSZone];
overload selector(#"setMessage:") = Void, NSString;
overload selector(#"setMessageText:") = Void, NSString;
overload selector(#"setMinColumnWidth:") = Void, Double;
overload selector(#"setMinContentSize:") = Void, NSSize;
overload selector(#"setMinDate:") = Void, NSDate;
overload selector(#"setMinItemSize:") = Void, NSSize;
overload selector(#"setMinSize:") = Void, NSSize;
overload selector(#"setMinValue:") = Void, Double;
overload selector(#"setMinWidth:") = Void, Double;
overload selector(#"setMinificationFilter:") = Void, NSString;
overload selector(#"setMinificationFilterBias:") = Void, Float;
overload selector(#"setMinimum:") = Void, NSNumber;
overload selector(#"setMinimumDaysInFirstWeek:") = Void, CULong;
overload selector(#"setMinimumFractionDigits:") = Void, CULong;
overload selector(#"setMinimumIntegerDigits:") = Void, CULong;
overload selector(#"setMinimumLineHeight:") = Void, Double;
overload selector(#"setMinimumSignificantDigits:") = Void, CULong;
overload selector(#"setMinimumWidth:") = Void, Double;
overload selector(#"setMiniwindowImage:") = Void, NSImage;
overload selector(#"setMiniwindowTitle:") = Void, NSString;
overload selector(#"setMinusSign:") = Void, NSString;
overload selector(#"setMinute:") = Void, CLong;
overload selector(#"setMiterLimit:") = Void, Double;
overload selector(#"setMixedStateImage:") = Void, NSImage;
overload selector(#"setMnemonicLocation:") = Void, CULong;
overload selector(#"setMode:") = Void, CULong;
overload selector(#"setMonth:") = Void, CLong;
overload selector(#"setMonthSymbols:") = Void, NSArray;
overload selector(#"setMouseCoalescingEnabled:") = Void, Bool;
overload selector(#"setMovable:") = Void, Bool;
overload selector(#"setMovableByWindowBackground:") = Void, Bool;
overload selector(#"setMsgid:") = Void, UInt;
overload selector(#"setMultiplier:") = Void, NSNumber;
overload selector(#"setName:") = Bool, NSString;
overload selector(#"setNameFieldLabel:") = Void, NSString;
overload selector(#"setNameFieldStringValue:") = Void, NSString;
overload selector(#"setNamespaces:") = Void, NSArray;
overload selector(#"setNeedsDisplay") = Void;
overload selector(#"setNeedsDisplay:") = Void, Bool;
overload selector(#"setNeedsDisplayInRect:") = Void, NSRect;
overload selector(#"setNeedsDisplayInRect:avoidAdditionalLayout:") = Void, NSRect, Bool;
overload selector(#"setNeedsDisplayOnBoundsChange:") = Void, Bool;
overload selector(#"setNeedsLayout") = Void;
overload selector(#"setNeedsSizing:") = Void, Bool;
overload selector(#"setNegativeFormat:") = Void, NSString;
overload selector(#"setNegativeInfinitySymbol:") = Void, NSString;
overload selector(#"setNegativePrefix:") = Void, NSString;
overload selector(#"setNegativeSuffix:") = Void, NSString;
overload selector(#"setNestingMode:") = Void, CULong;
overload selector(#"setNextKeyView:") = Void, NSView;
overload selector(#"setNextResponder:") = Void, NSResponder;
overload selector(#"setNextState") = Void;
overload selector(#"setNilSymbol:") = Void, NSString;
overload selector(#"setNilValueForKey:") = Void, NSString;
overload selector(#"setNotANumberSymbol:") = Void, NSString;
overload selector(#"setNotShownAttribute:forGlyphAtIndex:") = Void, Bool, CULong;
overload selector(#"setNotShownAttribute:forGlyphRange:") = Void, Bool, NSRange;
overload selector(#"setNotationName:") = Void, NSString;
overload selector(#"setNotificationBatchingInterval:") = Void, Double;
overload selector(#"setNumberOfColumns:") = Void, CULong;
overload selector(#"setNumberOfMajorTickMarks:") = Void, CLong;
overload selector(#"setNumberOfTickMarks:") = Void, CLong;
overload selector(#"setNumberOfVisibleItems:") = Void, CLong;
overload selector(#"setNumberStyle:") = Void, CULong;
overload selector(#"setObject:forKey:") = Void, Id, Id;
overload selector(#"setObject:forKey:cost:") = Void, Id, Id, CULong;
overload selector(#"setObject:forProperty:error:") = Bool, Id, NSString, Pointer[NSError];
overload selector(#"setObjectBeingTested:") = Void, Id;
overload selector(#"setObjectClass:") = Void, Id;
overload selector(#"setObjectValue:") = Void, Id;
overload selector(#"setObjectZone:") = Void, Pointer[NSZone];
overload selector(#"setObservationInfo:") = Void, RawPointer;
overload selector(#"setOffScreen:width:height:rowbytes:") = Void, RawPointer, Int, Int, Int;
overload selector(#"setOffStateImage:") = Void, NSImage;
overload selector(#"setOnMouseEntered:") = Void, Bool;
overload selector(#"setOnMouseExited:") = Void, Bool;
overload selector(#"setOnStateImage:") = Void, NSImage;
overload selector(#"setOneShot:") = Void, Bool;
overload selector(#"setOpacity:") = Void, Float;
overload selector(#"setOpaque:") = Void, Bool;
overload selector(#"setOpenGLContext:") = Void, NSOpenGLContext;
overload selector(#"setOpenGLPixelFormat:") = Void, NSOpenGLPixelFormat;
overload selector(#"setOptional:") = Void, Bool;
overload selector(#"setOptions:") = Void, CLong;
overload selector(#"setOrderedIndex:") = Void, CLong;
overload selector(#"setOrientation:") = Void, CULong;
overload selector(#"setOriginOffset:") = Void, Double;
overload selector(#"setOutlineTableColumn:") = Void, NSTableColumn;
overload selector(#"setOutputFormat:") = Void, CULong;
overload selector(#"setPMSymbol:") = Void, NSString;
overload selector(#"setPaddingCharacter:") = Void, NSString;
overload selector(#"setPaddingPosition:") = Void, CULong;
overload selector(#"setPageOrder:") = Void, CLong;
overload selector(#"setPageScroll:") = Void, Double;
overload selector(#"setPaletteLabel:") = Void, NSString;
overload selector(#"setPanelFont:isMultiple:") = Void, NSFont, Bool;
overload selector(#"setPaperName:") = Void, NSString;
overload selector(#"setPaperSize:") = Void, NSSize;
overload selector(#"setParagraphGlyphRange:separatorGlyphRange:") = Void, NSRange, NSRange;
overload selector(#"setParagraphSpacing:") = Void, Double;
overload selector(#"setParagraphSpacingBefore:") = Void, Double;
overload selector(#"setParagraphStyle:") = Void, NSParagraphStyle;
overload selector(#"setParagraphs:") = Void, NSArray;
overload selector(#"setParamDescriptor:forKeyword:") = Void, NSAppleEventDescriptor, UInt;
overload selector(#"setParentWindow:") = Void, NSWindow;
overload selector(#"setPartialStringValidationEnabled:") = Void, Bool;
overload selector(#"setPath:") = Bool, NSString;
overload selector(#"setPathComponentCells:") = Void, NSArray;
overload selector(#"setPathSeparator:") = Void, NSString;
overload selector(#"setPathStyle:") = Void, CLong;
overload selector(#"setPatternPhase:") = Void, NSPoint;
overload selector(#"setPerMillSymbol:") = Void, NSString;
overload selector(#"setPercentSymbol:") = Void, NSString;
overload selector(#"setPeriodicDelay:interval:") = Void, Float, Float;
overload selector(#"setPersistentDomain:forName:") = Void, NSDictionary, NSString;
overload selector(#"setPickerMask:") = Void, CULong;
overload selector(#"setPickerMode:") = Void, CLong;
overload selector(#"setPixel:atX:y:") = Void, Pointer[CULong], CLong, CLong;
overload selector(#"setPixelBuffer:cubeMapFace:mipMapLevel:currentVirtualScreen:") = Void, NSOpenGLPixelBuffer, UInt, Int, Int;
overload selector(#"setPixelFormat:") = Void, NSOpenGLPixelFormat;
overload selector(#"setPixelsHigh:") = Void, CLong;
overload selector(#"setPixelsWide:") = Void, CLong;
overload selector(#"setPlaceholderAttributedString:") = Void, NSAttributedString;
overload selector(#"setPlaceholderString:") = Void, NSString;
overload selector(#"setPlaybackDeviceIdentifier:") = Void, NSString;
overload selector(#"setPlusSign:") = Void, NSString;
overload selector(#"setPosition:") = Void, CGPoint;
overload selector(#"setPosition:ofDividerAtIndex:") = Void, Double, CLong;
overload selector(#"setPositiveFormat:") = Void, NSString;
overload selector(#"setPositiveInfinitySymbol:") = Void, NSString;
overload selector(#"setPositivePrefix:") = Void, NSString;
overload selector(#"setPositiveSuffix:") = Void, NSString;
overload selector(#"setPostsBoundsChangedNotifications:") = Void, Bool;
overload selector(#"setPostsFrameChangedNotifications:") = Void, Bool;
overload selector(#"setPredicate:") = Void, NSPredicate;
overload selector(#"setPreferredBackingLocation:") = Void, CULong;
overload selector(#"setPreferredEdge:") = Void, CULong;
overload selector(#"setPreferredFilename:") = Void, NSString;
overload selector(#"setPrefersAllColumnUserResizing:") = Void, Bool;
overload selector(#"setPrefersColorMatch:") = Void, Bool;
overload selector(#"setPresentationOptions:") = Void, CULong;
overload selector(#"setPreservesContentDuringLiveResize:") = Void, Bool;
overload selector(#"setPreservesSelection:") = Void, Bool;
overload selector(#"setPreventsApplicationTerminationWhenModal:") = Void, Bool;
overload selector(#"setPrintInfo:") = Void, NSPrintInfo;
overload selector(#"setPrintPanel:") = Void, NSPrintPanel;
overload selector(#"setPrinter:") = Void, NSPrinter;
overload selector(#"setProcessName:") = Void, NSString;
overload selector(#"setProgressMarks:") = Void, NSArray;
overload selector(#"setPrompt:") = Void, NSString;
overload selector(#"setProperty:forKey:") = Bool, Id, NSString;
overload selector(#"setProperty:forKey:inRequest:") = Void, Id, NSString, NSMutableURLRequest;
overload selector(#"setProperty:withValue:") = Void, NSString, Id;
overload selector(#"setPropertyList:forType:") = Bool, Id, NSString;
overload selector(#"setProtocolForProxy:") = Void, Id;
overload selector(#"setProtocolSpecificInformation:") = Void, NSString;
overload selector(#"setPrototype:") = Void, NSCell;
overload selector(#"setPublicID:") = Void, NSString;
overload selector(#"setPullsDown:") = Void, Bool;
overload selector(#"setQuarter:") = Void, CLong;
overload selector(#"setQuarterSymbols:") = Void, NSArray;
overload selector(#"setQueuePriority:") = Void, CLong;
overload selector(#"setRangeContainerObject:") = Void, Id;
overload selector(#"setRate:") = Void, Float;
overload selector(#"setReceiversSpecifier:") = Void, NSScriptObjectSpecifier;
overload selector(#"setRecentSearches:") = Void, NSArray;
overload selector(#"setRecentsAutosaveName:") = Void, NSString;
overload selector(#"setRefusesFirstResponder:") = Void, Bool;
overload selector(#"setRelativePosition:") = Void, CULong;
overload selector(#"setReleasedWhenClosed:") = Void, Bool;
overload selector(#"setRelinquishFunction:") = Void, CCodePointer[[RawPointer,CCodePointer[[RawPointer],[CULong]]],[]];
overload selector(#"setRemovable:") = Void, Bool;
overload selector(#"setRenamingIdentifier:") = Void, NSString;
overload selector(#"setRepeatCount:") = Void, Float;
overload selector(#"setRepeatDuration:") = Void, Double;
overload selector(#"setReplyTimeout:") = Void, Double;
overload selector(#"setRepresentation") = NSSet;
overload selector(#"setRepresentedFilename:") = Void, NSString;
overload selector(#"setRepresentedObject:") = Void, Id;
overload selector(#"setRepresentedURL:") = Void, NSURL;
overload selector(#"setRequestTimeout:") = Void, Double;
overload selector(#"setRequiredFileType:") = Void, NSString;
overload selector(#"setReservedThicknessForAccessoryView:") = Void, Double;
overload selector(#"setReservedThicknessForMarkers:") = Void, Double;
overload selector(#"setResizable:") = Void, Bool;
overload selector(#"setResizeIncrements:") = Void, NSSize;
overload selector(#"setResizingMask:") = Void, CULong;
overload selector(#"setResolvesAliases:") = Void, Bool;
overload selector(#"setResourceData:") = Bool, NSData;
overload selector(#"setResourceValue:forKey:error:") = Bool, Id, NSString, Pointer[NSError];
overload selector(#"setResourceValues:error:") = Bool, NSDictionary, Pointer[NSError];
overload selector(#"setReturnValue:") = Void, RawPointer;
overload selector(#"setReusesColumns:") = Void, Bool;
overload selector(#"setRichText:") = Void, Bool;
overload selector(#"setRightMargin:") = Void, Double;
overload selector(#"setRootElement:") = Void, NSXMLNode;
overload selector(#"setRootObject:") = Void, Id;
overload selector(#"setRoundingBehavior:") = Void, NSDecimalNumberHandler;
overload selector(#"setRoundingIncrement:") = Void, NSNumber;
overload selector(#"setRoundingMode:") = Void, CULong;
overload selector(#"setRowClass:") = Void, Id;
overload selector(#"setRowHeight:") = Void, Double;
overload selector(#"setRowTemplates:") = Void, NSArray;
overload selector(#"setRowTypeKeyPath:") = Void, NSString;
overload selector(#"setRuleThickness:") = Void, Double;
overload selector(#"setRulerViewClass:") = Void, Id;
overload selector(#"setRulerVisible:") = Void, Bool;
overload selector(#"setRulersVisible:") = Void, Bool;
overload selector(#"setRunLoopModes:") = Void, NSArray;
overload selector(#"setScalesWhenResized:") = Void, Bool;
overload selector(#"setScalingFactor:") = Void, Double;
overload selector(#"setScanLocation:") = Void, CULong;
overload selector(#"setScriptErrorExpectedTypeDescriptor:") = Void, NSAppleEventDescriptor;
overload selector(#"setScriptErrorNumber:") = Void, Int;
overload selector(#"setScriptErrorOffendingObjectDescriptor:") = Void, NSAppleEventDescriptor;
overload selector(#"setScriptErrorString:") = Void, NSString;
overload selector(#"setScriptingProperties:") = Void, NSDictionary;
overload selector(#"setScrollView:") = Void, NSScrollView;
overload selector(#"setScrollable:") = Void, Bool;
overload selector(#"setScrollsDynamically:") = Void, Bool;
overload selector(#"setSearchButtonCell:") = Void, NSButtonCell;
overload selector(#"setSearchMenuTemplate:") = Void, NSMenu;
overload selector(#"setSearchScopes:") = Void, NSArray;
overload selector(#"setSecond:") = Void, CLong;
overload selector(#"setSecondaryGroupingSize:") = Void, CULong;
overload selector(#"setSegmentCount:") = Void, CLong;
overload selector(#"setSegmentStyle:") = Void, CLong;
overload selector(#"setSelectable:") = Void, Bool;
overload selector(#"setSelected:") = Void, Bool;
overload selector(#"setSelected:forSegment:") = Void, Bool, CLong;
overload selector(#"setSelectedAttributes:isMultiple:") = Void, NSDictionary, Bool;
overload selector(#"setSelectedFont:isMultiple:") = Void, NSFont, Bool;
overload selector(#"setSelectedItemIdentifier:") = Void, NSString;
overload selector(#"setSelectedKeyboardInputSource:") = Void, NSString;
overload selector(#"setSelectedObjects:") = Bool, NSArray;
overload selector(#"setSelectedRange:") = Void, NSRange;
overload selector(#"setSelectedRange:affinity:stillSelecting:") = Void, NSRange, CULong, Bool;
overload selector(#"setSelectedRanges:") = Void, NSArray;
overload selector(#"setSelectedRanges:affinity:stillSelecting:") = Void, NSArray, CULong, Bool;
overload selector(#"setSelectedSegment:") = Void, CLong;
overload selector(#"setSelectedTextAttributes:") = Void, NSDictionary;
overload selector(#"setSelectionByRect:") = Void, Bool;
overload selector(#"setSelectionFrom:to:anchor:highlight:") = Void, CLong, CLong, CLong, Bool;
overload selector(#"setSelectionGranularity:") = Void, CULong;
overload selector(#"setSelectionHighlightStyle:") = Void, CLong;
overload selector(#"setSelectionIndex:") = Bool, CULong;
overload selector(#"setSelectionIndexPath:") = Bool, NSIndexPath;
overload selector(#"setSelectionIndexPaths:") = Bool, NSArray;
overload selector(#"setSelectionIndexes:") = Bool, NSIndexSet;
overload selector(#"setSelectionOnly:") = Void, Bool;
overload selector(#"setSelector:") = Void, SelectorHandle;
overload selector(#"setSelectsInsertedObjects:") = Void, Bool;
overload selector(#"setSendsActionOnArrowKeys:") = Void, Bool;
overload selector(#"setSendsActionOnEndEditing:") = Void, Bool;
overload selector(#"setSendsSearchStringImmediately:") = Void, Bool;
overload selector(#"setSendsWholeSearchString:") = Void, Bool;
overload selector(#"setSeparatesColumns:") = Void, Bool;
overload selector(#"setServicesMenu:") = Void, NSMenu;
overload selector(#"setServicesProvider:") = Void, Id;
overload selector(#"setSet:") = Void, NSSet;
overload selector(#"setShadow:") = Void, NSShadow;
overload selector(#"setShadowBlurRadius:") = Void, Double;
overload selector(#"setShadowColor:") = Void, CGColorRef;
overload selector(#"setShadowOffset:") = Void, CGSize;
overload selector(#"setShadowOpacity:") = Void, Float;
overload selector(#"setShadowRadius:") = Void, Double;
overload selector(#"setSharedPrintInfo:") = Void, NSPrintInfo;
overload selector(#"setSharedScriptSuiteRegistry:") = Void, NSScriptSuiteRegistry;
overload selector(#"setSharedURLCache:") = Void, NSURLCache;
overload selector(#"setSharingType:") = Void, CULong;
overload selector(#"setShortMonthSymbols:") = Void, NSArray;
overload selector(#"setShortQuarterSymbols:") = Void, NSArray;
overload selector(#"setShortStandaloneMonthSymbols:") = Void, NSArray;
overload selector(#"setShortStandaloneQuarterSymbols:") = Void, NSArray;
overload selector(#"setShortStandaloneWeekdaySymbols:") = Void, NSArray;
overload selector(#"setShortWeekdaySymbols:") = Void, NSArray;
overload selector(#"setShouldAntialias:") = Void, Bool;
overload selector(#"setShouldCascadeWindows:") = Void, Bool;
overload selector(#"setShouldCloseDocument:") = Void, Bool;
overload selector(#"setShouldCreateUI:") = Void, Bool;
overload selector(#"setShouldProcessNamespaces:") = Void, Bool;
overload selector(#"setShouldReportNamespacePrefixes:") = Void, Bool;
overload selector(#"setShouldResolveExternalEntities:") = Void, Bool;
overload selector(#"setShowPanels:") = Void, Bool;
overload selector(#"setShowsAlpha:") = Void, Bool;
overload selector(#"setShowsApplicationBadge:") = Void, Bool;
overload selector(#"setShowsBaselineSeparator:") = Void, Bool;
overload selector(#"setShowsBorderOnlyWhileMouseInside:") = Void, Bool;
overload selector(#"setShowsControlCharacters:") = Void, Bool;
overload selector(#"setShowsFirstResponder:") = Void, Bool;
overload selector(#"setShowsHelp:") = Void, Bool;
overload selector(#"setShowsHiddenFiles:") = Void, Bool;
overload selector(#"setShowsInvisibleCharacters:") = Void, Bool;
overload selector(#"setShowsPrintPanel:") = Void, Bool;
overload selector(#"setShowsProgressPanel:") = Void, Bool;
overload selector(#"setShowsResizeIndicator:") = Void, Bool;
overload selector(#"setShowsStateBy:") = Void, CLong;
overload selector(#"setShowsStateColumn:") = Void, Bool;
overload selector(#"setShowsSuppressionButton:") = Void, Bool;
overload selector(#"setShowsToolbarButton:") = Void, Bool;
overload selector(#"setSize:") = Void, NSSize;
overload selector(#"setSizeFunction:") = Void, CCodePointer[[RawPointer],[CULong]];
overload selector(#"setSizeMode:") = Void, CULong;
overload selector(#"setSliderType:") = Void, CULong;
overload selector(#"setSmartInsertDeleteEnabled:") = Void, Bool;
overload selector(#"setSortDescriptorPrototype:") = Void, NSSortDescriptor;
overload selector(#"setSortDescriptors:") = Void, NSArray;
overload selector(#"setSound:") = Void, NSSound;
overload selector(#"setSpeed:") = Void, Float;
overload selector(#"setSpellingState:range:") = Void, CLong, NSRange;
overload selector(#"setStackSize:") = Void, CULong;
overload selector(#"setStandalone:") = Void, Bool;
overload selector(#"setStandaloneMonthSymbols:") = Void, NSArray;
overload selector(#"setStandaloneQuarterSymbols:") = Void, NSArray;
overload selector(#"setStandaloneWeekdaySymbols:") = Void, NSArray;
overload selector(#"setStandardError:") = Void, Id;
overload selector(#"setStandardInput:") = Void, Id;
overload selector(#"setStandardOutput:") = Void, Id;
overload selector(#"setStartSpecifier:") = Void, NSScriptObjectSpecifier;
overload selector(#"setStartSubelementIdentifier:") = Void, CULong;
overload selector(#"setStartSubelementIndex:") = Void, CLong;
overload selector(#"setStartingItemNumber:") = Void, CLong;
overload selector(#"setState:") = Void, CLong;
overload selector(#"setState:atRow:column:") = Void, CLong, CLong, CLong;
overload selector(#"setStoredInExternalRecord:") = Void, Bool;
overload selector(#"setString:") = Void, NSString;
overload selector(#"setString:forType:") = Bool, NSString, NSString;
overload selector(#"setStringValue:") = Void, NSString;
overload selector(#"setStringValue:resolvingEntities:") = Void, NSString, Bool;
overload selector(#"setStroke") = Void;
overload selector(#"setStyle:") = Void, CULong;
overload selector(#"setStyleMask:") = Void, CULong;
overload selector(#"setSubitems:") = Void, NSArray;
overload selector(#"setSublayerTransform:") = Void, CATransform3D;
overload selector(#"setSublayers:") = Void, NSArray;
overload selector(#"setSubmenu:") = Void, NSMenu;
overload selector(#"setSubmenu:forItem:") = Void, NSMenu, NSMenuItem;
overload selector(#"setSubrowsKeyPath:") = Void, NSString;
overload selector(#"setSubstitutionsPanelAccessoryViewController:") = Void, NSViewController;
overload selector(#"setSubviews:") = Void, NSArray;
overload selector(#"setSupermenu:") = Void, NSMenu;
overload selector(#"setSuspended:") = Void, Bool;
overload selector(#"setSystemID:") = Void, NSString;
overload selector(#"setTXTRecordData:") = Bool, NSData;
overload selector(#"setTabKeyTraversesCells:") = Void, Bool;
overload selector(#"setTabStops:") = Void, NSArray;
overload selector(#"setTabViewType:") = Void, CULong;
overload selector(#"setTableView:") = Void, NSTableView;
overload selector(#"setTag:") = Void, CLong;
overload selector(#"setTag:forSegment:") = Void, CLong, CLong;
overload selector(#"setTailIndent:") = Void, Double;
overload selector(#"setTakesTitleFromPreviousColumn:") = Void, Bool;
overload selector(#"setTarget:") = Void, Id;
overload selector(#"setTearOffMenuRepresentation:") = Void, Id;
overload selector(#"setTemplate:") = Void, Bool;
overload selector(#"setTemporaryAttributes:forCharacterRange:") = Void, NSDictionary, NSRange;
overload selector(#"setTest:") = Void, NSScriptWhoseTest;
overload selector(#"setTextAlignment:") = Void, CULong;
overload selector(#"setTextAttributesForNegativeInfinity:") = Void, NSDictionary;
overload selector(#"setTextAttributesForNegativeValues:") = Void, NSDictionary;
overload selector(#"setTextAttributesForNil:") = Void, NSDictionary;
overload selector(#"setTextAttributesForNotANumber:") = Void, NSDictionary;
overload selector(#"setTextAttributesForPositiveInfinity:") = Void, NSDictionary;
overload selector(#"setTextAttributesForPositiveValues:") = Void, NSDictionary;
overload selector(#"setTextAttributesForZero:") = Void, NSDictionary;
overload selector(#"setTextBaseWritingDirection:") = Void, CLong;
overload selector(#"setTextBlocks:") = Void, NSArray;
overload selector(#"setTextColor:") = Void, NSColor;
overload selector(#"setTextColor:range:") = Void, NSColor, NSRange;
overload selector(#"setTextContainer:") = Void, NSTextContainer;
overload selector(#"setTextContainer:forGlyphRange:") = Void, NSTextContainer, NSRange;
overload selector(#"setTextContainerInset:") = Void, NSSize;
overload selector(#"setTextFont:") = Void, NSFont;
overload selector(#"setTextLists:") = Void, NSArray;
overload selector(#"setTextStorage:") = Void, NSTextStorage;
overload selector(#"setTextView:") = Void, NSTextView;
overload selector(#"setTextureImageToPixelBuffer:colorBuffer:") = Void, NSOpenGLPixelBuffer, UInt;
overload selector(#"setThousandSeparator:") = Void, NSString;
overload selector(#"setThreadPriority:") = Bool, Double;
overload selector(#"setTickMarkPosition:") = Void, CULong;
overload selector(#"setTighteningFactorForTruncation:") = Void, Float;
overload selector(#"setTimeInterval:") = Void, Double;
overload selector(#"setTimeOffset:") = Void, Double;
overload selector(#"setTimeStyle:") = Void, CULong;
overload selector(#"setTimeZone:") = Void, NSTimeZone;
overload selector(#"setTimeoutInterval:") = Void, Double;
overload selector(#"setTitle:") = Void, NSString;
overload selector(#"setTitle:ofColumn:") = Void, NSString, CLong;
overload selector(#"setTitleAlignment:") = Void, CULong;
overload selector(#"setTitleBaseWritingDirection:") = Void, CLong;
overload selector(#"setTitleCell:") = Void, NSCell;
overload selector(#"setTitleColor:") = Void, NSColor;
overload selector(#"setTitleFont:") = Void, NSFont;
overload selector(#"setTitlePosition:") = Void, CULong;
overload selector(#"setTitleWidth:") = Void, Double;
overload selector(#"setTitleWithMnemonic:") = Void, NSString;
overload selector(#"setTitleWithRepresentedFilename:") = Void, NSString;
overload selector(#"setTitled:") = Void, Bool;
overload selector(#"setTokenStyle:") = Void, CULong;
overload selector(#"setTokenizingCharacterSet:") = Void, NSCharacterSet;
overload selector(#"setToolTip:") = Void, NSString;
overload selector(#"setToolTip:forCell:") = Void, NSString, NSCell;
overload selector(#"setToolTip:forSegment:") = Void, NSString, CLong;
overload selector(#"setToolbar:") = Void, NSToolbar;
overload selector(#"setTopLevelObject:") = Void, Id;
overload selector(#"setTopMargin:") = Void, Double;
overload selector(#"setTotalCostLimit:") = Void, CULong;
overload selector(#"setTrackingMode:") = Void, CULong;
overload selector(#"setTrailingOffset:") = Void, Double;
overload selector(#"setTransform:") = Void, CATransform3D;
overload selector(#"setTransformStruct:") = Void, NSAffineTransformStruct;
overload selector(#"setTransient:") = Void, Bool;
overload selector(#"setTransparent:") = Void, Bool;
overload selector(#"setTreatsFilePackagesAsDirectories:") = Void, Bool;
overload selector(#"setTruncatesLastVisibleLine:") = Void, Bool;
overload selector(#"setTwoDigitStartDate:") = Void, NSDate;
overload selector(#"setType:") = Void, CULong;
overload selector(#"setTypesetter:") = Void, NSTypesetter;
overload selector(#"setTypesetterBehavior:") = Void, CLong;
overload selector(#"setTypingAttributes:") = Void, NSDictionary;
overload selector(#"setURI:") = Void, NSString;
overload selector(#"setURL:") = Void, NSURL;
overload selector(#"setURL:forKey:") = Void, NSURL, NSString;
overload selector(#"setUndoManager:") = Void, NSUndoManager;
overload selector(#"setUniqueID:") = Void, Id;
overload selector(#"setUpFieldEditorAttributes:") = NSText, NSText;
overload selector(#"setUpGState") = Void;
overload selector(#"setUpPrintOperationDefaultValues") = Void;
overload selector(#"setUserFixedPitchFont:") = Void, NSFont;
overload selector(#"setUserFont:") = Void, NSFont;
overload selector(#"setUserInfo:") = Void, NSDictionary;
overload selector(#"setUserInterfaceLayoutDirection:") = Void, CLong;
overload selector(#"setUsesAlternatingRowBackgroundColors:") = Void, Bool;
overload selector(#"setUsesDataSource:") = Void, Bool;
overload selector(#"setUsesEPSOnResolutionMismatch:") = Void, Bool;
overload selector(#"setUsesFeedbackWindow:") = Void, Bool;
overload selector(#"setUsesFindPanel:") = Void, Bool;
overload selector(#"setUsesFontLeading:") = Void, Bool;
overload selector(#"setUsesFontPanel:") = Void, Bool;
overload selector(#"setUsesGroupingSeparator:") = Void, Bool;
overload selector(#"setUsesItemFromMenu:") = Void, Bool;
overload selector(#"setUsesLazyFetching:") = Void, Bool;
overload selector(#"setUsesRuler:") = Void, Bool;
overload selector(#"setUsesScreenFonts:") = Void, Bool;
overload selector(#"setUsesSignificantDigits:") = Void, Bool;
overload selector(#"setUsesSingleLineMode:") = Void, Bool;
overload selector(#"setUsesStrongWriteBarrier:") = Void, Bool;
overload selector(#"setUsesThreadedAnimation:") = Void, Bool;
overload selector(#"setUsesUserKeyEquivalents:") = Void, Bool;
overload selector(#"setUsesWeakReadAndWriteBarriers:") = Void, Bool;
overload selector(#"setValidateSize:") = Void, Bool;
overload selector(#"setValidationPredicates:withValidationWarnings:") = Void, NSArray, NSArray;
overload selector(#"setValue:") = Void, Id;
overload selector(#"setValue:forHTTPHeaderField:") = Void, NSString, NSString;
overload selector(#"setValue:forKey:") = Void, Id, NSString;
overload selector(#"setValue:forKeyPath:") = Void, Id, NSString;
overload selector(#"setValue:forUndefinedKey:") = Void, Id, NSString;
overload selector(#"setValue:type:forDimension:") = Void, Double, CULong, CULong;
overload selector(#"setValueListAttributes:") = Void, NSArray;
overload selector(#"setValueTransformer:forName:") = Void, NSValueTransformer, NSString;
overload selector(#"setValueTransformerName:") = Void, NSString;
overload selector(#"setValueWraps:") = Void, Bool;
overload selector(#"setValues:forParameter:") = Void, Pointer[Int], NSOpenGLContextParameter;
overload selector(#"setValuesForKeysWithDictionary:") = Void, NSDictionary;
overload selector(#"setVersion:") = Void, CLong;
overload selector(#"setVersionHashModifier:") = Void, NSString;
overload selector(#"setVertical:") = Void, Bool;
overload selector(#"setVerticalAlignment:") = Void, CULong;
overload selector(#"setVerticalLineScroll:") = Void, Double;
overload selector(#"setVerticalMotionCanBeginDrag:") = Void, Bool;
overload selector(#"setVerticalPageScroll:") = Void, Double;
overload selector(#"setVerticalPagination:") = Void, CULong;
overload selector(#"setVerticalRulerView:") = Void, NSRulerView;
overload selector(#"setVerticalScroller:") = Void, NSScroller;
overload selector(#"setVerticallyCentered:") = Void, Bool;
overload selector(#"setVerticallyResizable:") = Void, Bool;
overload selector(#"setVeryShortMonthSymbols:") = Void, NSArray;
overload selector(#"setVeryShortStandaloneMonthSymbols:") = Void, NSArray;
overload selector(#"setVeryShortStandaloneWeekdaySymbols:") = Void, NSArray;
overload selector(#"setVeryShortWeekdaySymbols:") = Void, NSArray;
overload selector(#"setView:") = Void, NSView;
overload selector(#"setViewAnimations:") = Void, NSArray;
overload selector(#"setViewsNeedDisplay:") = Void, Bool;
overload selector(#"setVisibilityPriority:") = Void, CLong;
overload selector(#"setVisible:") = Void, Bool;
overload selector(#"setVoice:") = Bool, NSString;
overload selector(#"setVolatileDomain:forName:") = Void, NSDictionary, NSString;
overload selector(#"setVolume:") = Void, Float;
overload selector(#"setWantsLayer:") = Void, Bool;
overload selector(#"setWantsNotificationForMarkedText:") = Void, Bool;
overload selector(#"setWantsRestingTouches:") = Void, Bool;
overload selector(#"setWarningValue:") = Void, Double;
overload selector(#"setWeek:") = Void, CLong;
overload selector(#"setWeekday:") = Void, CLong;
overload selector(#"setWeekdayOrdinal:") = Void, CLong;
overload selector(#"setWeekdaySymbols:") = Void, NSArray;
overload selector(#"setWidth:") = Void, Double;
overload selector(#"setWidth:forSegment:") = Void, Double, CLong;
overload selector(#"setWidth:ofColumn:") = Void, Double, CLong;
overload selector(#"setWidth:type:forLayer:") = Void, Double, CULong, CLong;
overload selector(#"setWidth:type:forLayer:edge:") = Void, Double, CULong, CLong, CULong;
overload selector(#"setWidthTracksTextView:") = Void, Bool;
overload selector(#"setWindingRule:") = Void, CULong;
overload selector(#"setWindow:") = Void, NSWindow;
overload selector(#"setWindowController:") = Void, NSWindowController;
overload selector(#"setWindowFrameAutosaveName:") = Void, NSString;
overload selector(#"setWindowsMenu:") = Void, NSMenu;
overload selector(#"setWindowsNeedUpdate:") = Void, Bool;
overload selector(#"setWithArray:") = Id, NSArray;
overload selector(#"setWithCapacity:") = Id, CULong;
overload selector(#"setWithObject:") = Id, Id;
overload varargSelector(#"setWithObjects:") = Id, Id;
overload selector(#"setWithObjects:count:") = Id, Pointer[Id], CULong;
overload selector(#"setWithSet:") = Id, NSSet;
overload selector(#"setWordFieldStringValue:") = Void, NSString;
overload selector(#"setWords:") = Void, NSArray;
overload selector(#"setWorksWhenModal:") = Void, Bool;
overload selector(#"setWraps:") = Void, Bool;
overload selector(#"setYear:") = Void, CLong;
overload selector(#"setZPosition:") = Void, Double;
overload selector(#"setZeroSymbol:") = Void, NSString;
overload selector(#"shadow") = NSShadow;
overload selector(#"shadowBlurRadius") = Double;
overload selector(#"shadowColor") = NSColor;
overload selector(#"shadowOffset") = CGSize;
overload selector(#"shadowOpacity") = Float;
overload selector(#"shadowRadius") = Double;
overload selector(#"shadowWithLevel:") = NSColor, Double;
overload selector(#"sharedAppleEventManager") = NSAppleEventManager;
overload selector(#"sharedApplication") = NSApplication;
overload selector(#"sharedCoercionHandler") = NSScriptCoercionHandler;
overload selector(#"sharedColorPanel") = NSColorPanel;
overload selector(#"sharedColorPanelExists") = Bool;
overload selector(#"sharedCredentialStorage") = NSURLCredentialStorage;
overload selector(#"sharedDocumentController") = Id;
overload selector(#"sharedFontManager") = NSFontManager;
overload selector(#"sharedFontPanel") = NSFontPanel;
overload selector(#"sharedFontPanelExists") = Bool;
overload selector(#"sharedFrameworksPath") = NSString;
overload selector(#"sharedFrameworksURL") = NSURL;
overload selector(#"sharedGlyphGenerator") = Id;
overload selector(#"sharedHTTPCookieStorage") = NSHTTPCookieStorage;
overload selector(#"sharedHelpManager") = NSHelpManager;
overload selector(#"sharedInstance") = Id;
overload selector(#"sharedPrintInfo") = NSPrintInfo;
overload selector(#"sharedScriptExecutionContext") = NSScriptExecutionContext;
overload selector(#"sharedScriptSuiteRegistry") = NSScriptSuiteRegistry;
overload selector(#"sharedSpellChecker") = NSSpellChecker;
overload selector(#"sharedSpellCheckerExists") = Bool;
overload selector(#"sharedSupportPath") = NSString;
overload selector(#"sharedSupportURL") = NSURL;
overload selector(#"sharedSystemTypesetter") = Id;
overload selector(#"sharedSystemTypesetterForBehavior:") = Id, CLong;
overload selector(#"sharedTypesetter") = Id;
overload selector(#"sharedURLCache") = NSURLCache;
overload selector(#"sharedUserDefaultsController") = Id;
overload selector(#"sharedWorkspace") = NSWorkspace;
overload selector(#"sharingType") = CULong;
overload selector(#"shiftIndexesStartingAtIndex:by:") = Void, CULong, CLong;
overload selector(#"shortMonthSymbols") = NSArray;
overload selector(#"shortQuarterSymbols") = NSArray;
overload selector(#"shortStandaloneMonthSymbols") = NSArray;
overload selector(#"shortStandaloneQuarterSymbols") = NSArray;
overload selector(#"shortStandaloneWeekdaySymbols") = NSArray;
overload selector(#"shortValue") = Short;
overload selector(#"shortWeekdaySymbols") = NSArray;
overload selector(#"shouldAntialias") = Bool;
overload selector(#"shouldArchiveValueForKey:") = Bool, NSString;
overload selector(#"shouldBeTreatedAsInkEvent:") = Bool, NSEvent;
overload selector(#"shouldBreakLineByHyphenatingBeforeCharacterAtIndex:") = Bool, CULong;
overload selector(#"shouldBreakLineByWordBeforeCharacterAtIndex:") = Bool, CULong;
overload selector(#"shouldCascadeWindows") = Bool;
overload selector(#"shouldChangePrintInfo:") = Bool, NSPrintInfo;
overload selector(#"shouldChangeTextInRange:replacementString:") = Bool, NSRange, NSString;
overload selector(#"shouldChangeTextInRanges:replacementStrings:") = Bool, NSArray, NSArray;
overload selector(#"shouldCloseDocument") = Bool;
overload selector(#"shouldCloseWindowController:delegate:shouldCloseSelector:contextInfo:") = Void, NSWindowController, Id, SelectorHandle, RawPointer;
overload selector(#"shouldCollapseAutoExpandedItemsForDeposited:") = Bool, Bool;
overload selector(#"shouldCreateUI") = Bool;
overload selector(#"shouldDelayWindowOrderingForEvent:") = Bool, NSEvent;
overload selector(#"shouldDrawColor") = Bool;
overload selector(#"shouldDrawInsertionPoint") = Bool;
overload selector(#"shouldFocusCell:atColumn:row:") = Bool, NSCell, CLong, CLong;
overload selector(#"shouldProcessNamespaces") = Bool;
overload selector(#"shouldReportNamespacePrefixes") = Bool;
overload selector(#"shouldResolveExternalEntities") = Bool;
overload selector(#"shouldRunSavePanelWithAccessoryView") = Bool;
overload selector(#"showAllHelpTopicsForSearchString:") = Void, NSString;
overload selector(#"showAttachmentCell:inRect:characterIndex:") = Void, NSCell, NSRect, CULong;
overload selector(#"showContextHelp:") = Void, Id;
overload selector(#"showContextHelpForObject:locationHint:") = Bool, Id, NSPoint;
overload selector(#"showDefinitionForAttributedString:atPoint:") = Void, NSAttributedString, NSPoint;
overload selector(#"showDefinitionForAttributedString:range:options:baselineOriginProvider:") = Void, NSAttributedString, NSRange, NSDictionary, UnknownType;
overload selector(#"showFindIndicatorForRange:") = Void, NSRange;
overload selector(#"showGuessPanel:") = Void, Id;
overload selector(#"showHelp:") = Void, Id;
overload selector(#"showPackedGlyphs:length:glyphRange:atPoint:font:color:printingAdjustment:") = Void, Pointer[CChar], CULong, NSRange, NSPoint, NSFont, NSColor, NSSize;
overload selector(#"showPanels") = Bool;
overload selector(#"showSearchResultsForQueryString:") = Bool, NSString;
overload selector(#"showWindow:") = Void, Id;
overload selector(#"showWindows") = Void;
overload selector(#"showsAlpha") = Bool;
overload selector(#"showsApplicationBadge") = Bool;
overload selector(#"showsBaselineSeparator") = Bool;
overload selector(#"showsBorderOnlyWhileMouseInside") = Bool;
overload selector(#"showsControlCharacters") = Bool;
overload selector(#"showsFirstResponder") = Bool;
overload selector(#"showsHelp") = Bool;
overload selector(#"showsHiddenFiles") = Bool;
overload selector(#"showsInvisibleCharacters") = Bool;
overload selector(#"showsPrintPanel") = Bool;
overload selector(#"showsProgressPanel") = Bool;
overload selector(#"showsResizeIndicator") = Bool;
overload selector(#"showsStateBy") = CLong;
overload selector(#"showsStateColumn") = Bool;
overload selector(#"showsSuppressionButton") = Bool;
overload selector(#"showsToolbarButton") = Bool;
overload selector(#"signal") = Void;
overload selector(#"signatureWithObjCTypes:") = NSMethodSignature, Pointer[CChar];
overload selector(#"size") = NSSize;
overload selector(#"sizeForKey:inTable:") = NSSize, NSString, NSString;
overload selector(#"sizeForPaperName:") = NSSize, NSString;
overload selector(#"sizeFunction") = CCodePointer[[RawPointer],[CULong]];
overload selector(#"sizeLastColumnToFit") = Void;
overload selector(#"sizeMode") = CULong;
overload selector(#"sizeOfLabel:") = NSSize, Bool;
overload selector(#"sizeToCells") = Void;
overload selector(#"sizeToFit") = Void;
overload selector(#"sizeValue") = NSSize;
overload selector(#"sizeWithAttributes:") = NSSize, NSDictionary;
overload selector(#"skipDescendants") = Void;
overload selector(#"skipDescendents") = Void;
overload selector(#"sleepForTimeInterval:") = Void, Double;
overload selector(#"sleepUntilDate:") = Void, NSDate;
overload selector(#"slideDraggedImageTo:") = Void, NSPoint;
overload selector(#"slideImage:from:to:") = Void, NSImage, NSPoint, NSPoint;
overload selector(#"sliderType") = CULong;
overload selector(#"smallSystemFontSize") = Double;
overload selector(#"smallestEncoding") = CULong;
overload selector(#"smartDeleteRangeForProposedRange:") = NSRange, NSRange;
overload selector(#"smartInsertAfterStringForString:replacingRange:") = NSString, NSString, NSRange;
overload selector(#"smartInsertBeforeStringForString:replacingRange:") = NSString, NSString, NSRange;
overload selector(#"smartInsertDeleteEnabled") = Bool;
overload selector(#"smartInsertForString:replacingRange:beforeString:afterString:") = Void, NSString, NSRange, Pointer[NSString], Pointer[NSString];
overload selector(#"socket") = Int;
overload selector(#"socketType") = Int;
overload selector(#"sortDescriptorPrototype") = NSSortDescriptor;
overload selector(#"sortDescriptorWithKey:ascending:") = Id, NSString, Bool;
overload selector(#"sortDescriptorWithKey:ascending:comparator:") = Id, NSString, Bool, NSComparator;
overload selector(#"sortDescriptorWithKey:ascending:selector:") = Id, NSString, Bool, SelectorHandle;
overload selector(#"sortDescriptors") = NSArray;
overload selector(#"sortIndicatorRectForBounds:") = NSRect, NSRect;
overload selector(#"sortSubviewsUsingFunction:context:") = Void, CCodePointer[[Id,Id,RawPointer],[CLong]], RawPointer;
overload selector(#"sortUsingComparator:") = Void, NSComparator;
overload selector(#"sortUsingDescriptors:") = Void, NSArray;
overload selector(#"sortUsingFunction:context:") = Void, CCodePointer[[Id,Id,RawPointer],[CLong]], RawPointer;
overload selector(#"sortUsingSelector:") = Void, SelectorHandle;
overload selector(#"sortWithOptions:usingComparator:") = Void, CULong, NSComparator;
overload selector(#"sortWithSortDescriptors:recursively:") = Void, NSArray, Bool;
overload selector(#"sortedArrayHint") = NSData;
overload selector(#"sortedArrayUsingComparator:") = NSArray, NSComparator;
overload selector(#"sortedArrayUsingDescriptors:") = NSArray, NSArray;
overload selector(#"sortedArrayUsingFunction:context:") = NSArray, CCodePointer[[Id,Id,RawPointer],[CLong]], RawPointer;
overload selector(#"sortedArrayUsingFunction:context:hint:") = NSArray, CCodePointer[[Id,Id,RawPointer],[CLong]], RawPointer, NSData;
overload selector(#"sortedArrayUsingSelector:") = NSArray, SelectorHandle;
overload selector(#"sortedArrayWithOptions:usingComparator:") = NSArray, CULong, NSComparator;
overload selector(#"sound") = NSSound;
overload selector(#"sound:didFinishPlaying:") = Void, NSSound, Bool;
overload selector(#"soundNamed:") = Id, NSString;
overload selector(#"soundUnfilteredFileTypes") = NSArray;
overload selector(#"soundUnfilteredPasteboardTypes") = NSArray;
overload selector(#"soundUnfilteredTypes") = NSArray;
overload selector(#"source") = NSString;
overload selector(#"speechRecognizer:didRecognizeCommand:") = Void, NSSpeechRecognizer, Id;
overload selector(#"speechSynthesizer:didEncounterErrorAtIndex:ofString:message:") = Void, NSSpeechSynthesizer, CULong, NSString, NSString;
overload selector(#"speechSynthesizer:didEncounterSyncMessage:") = Void, NSSpeechSynthesizer, NSString;
overload selector(#"speechSynthesizer:didFinishSpeaking:") = Void, NSSpeechSynthesizer, Bool;
overload selector(#"speechSynthesizer:willSpeakPhoneme:") = Void, NSSpeechSynthesizer, Short;
overload selector(#"speechSynthesizer:willSpeakWord:ofString:") = Void, NSSpeechSynthesizer, NSRange, NSString;
overload selector(#"speed") = Float;
overload selector(#"spellCheckerDocumentTag") = CLong;
overload selector(#"spellCheckingResultWithRange:") = NSTextCheckingResult, NSRange;
overload selector(#"spellServer:checkGrammarInString:language:details:") = NSRange, NSSpellServer, NSString, NSString, Pointer[NSArray];
overload selector(#"spellServer:checkString:offset:types:options:orthography:wordCount:") = NSArray, NSSpellServer, NSString, CULong, UInt64, NSDictionary, NSOrthography, Pointer[CLong];
overload selector(#"spellServer:didForgetWord:inLanguage:") = Void, NSSpellServer, NSString, NSString;
overload selector(#"spellServer:didLearnWord:inLanguage:") = Void, NSSpellServer, NSString, NSString;
overload selector(#"spellServer:findMisspelledWordInString:language:wordCount:countOnly:") = NSRange, NSSpellServer, NSString, NSString, Pointer[CLong], Bool;
overload selector(#"spellServer:suggestCompletionsForPartialWordRange:inString:language:") = NSArray, NSSpellServer, NSRange, NSString, NSString;
overload selector(#"spellServer:suggestGuessesForWord:inLanguage:") = NSArray, NSSpellServer, NSString, NSString;
overload selector(#"spellingPanel") = NSPanel;
overload selector(#"splitView:additionalEffectiveRectOfDividerAtIndex:") = NSRect, NSSplitView, CLong;
overload selector(#"splitView:canCollapseSubview:") = Bool, NSSplitView, NSView;
overload selector(#"splitView:constrainMaxCoordinate:ofSubviewAt:") = Double, NSSplitView, Double, CLong;
overload selector(#"splitView:constrainMinCoordinate:ofSubviewAt:") = Double, NSSplitView, Double, CLong;
overload selector(#"splitView:constrainSplitPosition:ofSubviewAt:") = Double, NSSplitView, Double, CLong;
overload selector(#"splitView:effectiveRect:forDrawnRect:ofDividerAtIndex:") = NSRect, NSSplitView, NSRect, NSRect, CLong;
overload selector(#"splitView:resizeSubviewsWithOldSize:") = Void, NSSplitView, NSSize;
overload selector(#"splitView:shouldAdjustSizeOfSubview:") = Bool, NSSplitView, NSView;
overload selector(#"splitView:shouldCollapseSubview:forDoubleClickOnDividerAtIndex:") = Bool, NSSplitView, NSView, CLong;
overload selector(#"splitView:shouldHideDividerAtIndex:") = Bool, NSSplitView, CLong;
overload selector(#"splitViewDidResizeSubviews:") = Void, NSNotification;
overload selector(#"splitViewWillResizeSubviews:") = Void, NSNotification;
overload selector(#"stackSize") = CULong;
overload selector(#"standaloneMonthSymbols") = NSArray;
overload selector(#"standaloneQuarterSymbols") = NSArray;
overload selector(#"standaloneWeekdaySymbols") = NSArray;
overload selector(#"standardError") = Id;
overload selector(#"standardInput") = Id;
overload selector(#"standardOutput") = Id;
overload selector(#"standardUserDefaults") = NSUserDefaults;
overload selector(#"standardWindowButton:") = NSButton, CULong;
overload selector(#"standardWindowButton:forStyleMask:") = NSButton, CULong, CULong;
overload selector(#"standardizedURL") = NSURL;
overload selector(#"start") = Void;
overload selector(#"startAnimation") = Void;
overload selector(#"startAnimation:") = Void, Id;
overload selector(#"startListening") = Void;
overload selector(#"startLoading") = Void;
overload selector(#"startMonitoring") = Void;
overload selector(#"startPeriodicEventsAfterDelay:withPeriod:") = Void, Double, Double;
overload selector(#"startQuery") = Bool;
overload selector(#"startSpeaking:") = Void, Id;
overload selector(#"startSpeakingString:") = Bool, NSString;
overload selector(#"startSpeakingString:toURL:") = Bool, NSString, NSURL;
overload selector(#"startSpecifier") = NSScriptObjectSpecifier;
overload selector(#"startSubelementIdentifier") = CULong;
overload selector(#"startSubelementIndex") = CLong;
overload selector(#"startTrackingAt:inView:") = Bool, NSPoint, NSView;
overload selector(#"startWhenAnimation:reachesProgress:") = Void, NSAnimation, Float;
overload selector(#"startingColumn") = CLong;
overload selector(#"startingItemNumber") = CLong;
overload selector(#"startingRow") = CLong;
overload selector(#"state") = CLong;
overload selector(#"stateImageRectForBounds:") = NSRect, NSRect;
overload selector(#"stateImageWidth") = Double;
overload selector(#"statistics") = NSDictionary;
overload selector(#"status") = CULong;
overload selector(#"statusBar") = NSStatusBar;
overload selector(#"statusCode") = CLong;
overload selector(#"statusForTable:") = CULong, NSString;
overload selector(#"statusItemWithLength:") = NSStatusItem, Double;
overload selector(#"stop") = Bool;
overload selector(#"stop:") = Void, Id;
overload selector(#"stopAnimation") = Void;
overload selector(#"stopAnimation:") = Void, Id;
overload selector(#"stopListening") = Void;
overload selector(#"stopLoading") = Void;
overload selector(#"stopModal") = Void;
overload selector(#"stopModalWithCode:") = Void, CLong;
overload selector(#"stopMonitoring") = Void;
overload selector(#"stopPeriodicEvents") = Void;
overload selector(#"stopQuery") = Void;
overload selector(#"stopSpeaking") = Void;
overload selector(#"stopSpeaking:") = Void, Id;
overload selector(#"stopSpeakingAtBoundary:") = Void, CULong;
overload selector(#"stopTracking:at:inView:mouseIsUp:") = Void, NSPoint, NSPoint, NSView, Bool;
overload selector(#"stopWhenAnimation:reachesProgress:") = Void, NSAnimation, Float;
overload selector(#"storagePolicy") = CULong;
overload selector(#"storeCachedResponse:forRequest:") = Void, NSCachedURLResponse, NSURLRequest;
overload selector(#"storedValueForKey:") = Id, NSString;
overload selector(#"stream:handleEvent:") = Void, NSStream, CULong;
overload selector(#"streamError") = NSError;
overload selector(#"streamStatus") = CULong;
overload selector(#"strikethroughGlyphRange:strikethroughType:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:") = Void, NSRange, CLong, NSRect, NSRange, NSPoint;
overload selector(#"string") = Id;
overload selector(#"stringArrayForKey:") = NSArray, NSString;
overload selector(#"stringByAbbreviatingWithTildeInPath") = NSString;
overload selector(#"stringByAddingPercentEscapesUsingEncoding:") = NSString, CULong;
overload varargSelector(#"stringByAppendingFormat:") = NSString, NSString;
overload selector(#"stringByAppendingPathComponent:") = NSString, NSString;
overload selector(#"stringByAppendingPathExtension:") = NSString, NSString;
overload selector(#"stringByAppendingString:") = NSString, NSString;
overload selector(#"stringByDeletingLastPathComponent") = NSString;
overload selector(#"stringByDeletingPathExtension") = NSString;
overload selector(#"stringByExpandingTildeInPath") = NSString;
overload selector(#"stringByFoldingWithOptions:locale:") = NSString, CULong, NSLocale;
overload selector(#"stringByPaddingToLength:withString:startingAtIndex:") = NSString, CULong, NSString, CULong;
overload selector(#"stringByReplacingCharactersInRange:withString:") = NSString, NSRange, NSString;
overload selector(#"stringByReplacingOccurrencesOfString:withString:") = NSString, NSString, NSString;
overload selector(#"stringByReplacingOccurrencesOfString:withString:options:range:") = NSString, NSString, NSString, CULong, NSRange;
overload selector(#"stringByReplacingPercentEscapesUsingEncoding:") = NSString, CULong;
overload selector(#"stringByResolvingSymlinksInPath") = NSString;
overload selector(#"stringByStandardizingPath") = NSString;
overload selector(#"stringByTrimmingCharactersInSet:") = NSString, NSCharacterSet;
overload selector(#"stringForKey:") = NSString, NSString;
overload selector(#"stringForKey:inTable:") = NSString, NSString, NSString;
overload selector(#"stringForObjectValue:") = NSString, Id;
overload selector(#"stringForType:") = NSString, NSString;
overload selector(#"stringFromDate:") = NSString, NSDate;
overload selector(#"stringFromNumber:") = NSString, NSNumber;
overload selector(#"stringListForKey:inTable:") = NSArray, NSString, NSString;
overload selector(#"stringRepresentation") = NSString;
overload selector(#"stringValue") = NSString;
overload selector(#"stringWithCString:") = Id, Pointer[CChar];
overload selector(#"stringWithCString:encoding:") = Id, Pointer[CChar], CULong;
overload selector(#"stringWithCString:length:") = Id, Pointer[CChar], CULong;
overload selector(#"stringWithCapacity:") = Id, CULong;
overload selector(#"stringWithCharacters:length:") = Id, Pointer[UShort], CULong;
overload selector(#"stringWithContentsOfFile:") = Id, NSString;
overload selector(#"stringWithContentsOfFile:encoding:error:") = Id, NSString, CULong, Pointer[NSError];
overload selector(#"stringWithContentsOfFile:usedEncoding:error:") = Id, NSString, Pointer[CULong], Pointer[NSError];
overload selector(#"stringWithContentsOfURL:") = Id, NSURL;
overload selector(#"stringWithContentsOfURL:encoding:error:") = Id, NSURL, CULong, Pointer[NSError];
overload selector(#"stringWithContentsOfURL:usedEncoding:error:") = Id, NSURL, Pointer[CULong], Pointer[NSError];
overload selector(#"stringWithFileSystemRepresentation:length:") = NSString, Pointer[CChar], CULong;
overload varargSelector(#"stringWithFormat:") = Id, NSString;
overload selector(#"stringWithSavedFrame") = NSString;
overload selector(#"stringWithString:") = Id, NSString;
overload selector(#"stringWithUTF8String:") = Id, Pointer[CChar];
overload selector(#"stringsByAppendingPaths:") = NSArray, NSArray;
overload selector(#"stroke") = Void;
overload selector(#"strokeLineFromPoint:toPoint:") = Void, NSPoint, NSPoint;
overload selector(#"strokeRect:") = Void, NSRect;
overload selector(#"style") = CULong;
overload selector(#"styleMask") = CULong;
overload selector(#"subarrayWithRange:") = NSArray, NSRange;
overload selector(#"subdataWithRange:") = NSData, NSRange;
overload selector(#"subgroups") = NSArray;
overload selector(#"subitems") = NSArray;
overload selector(#"sublayerTransform") = CATransform3D;
overload selector(#"sublayers") = NSArray;
overload selector(#"submenu") = NSMenu;
overload selector(#"submenuAction:") = Void, Id;
overload selector(#"subpathsAtPath:") = NSArray, NSString;
overload selector(#"subpathsOfDirectoryAtPath:error:") = NSArray, NSString, Pointer[NSError];
overload selector(#"subpredicates") = NSArray;
overload selector(#"subrowIndexesForRow:") = NSIndexSet, CLong;
overload selector(#"subrowsKeyPath") = NSString;
overload selector(#"subscript:") = Void, Id;
overload selector(#"subscriptRange:") = Void, NSRange;
overload selector(#"substituteFontForFont:") = NSFont, NSFont;
overload selector(#"substituteGlyphsInRange:withGlyphs:") = Void, NSRange, Pointer[UInt];
overload selector(#"substitutionsPanel") = NSPanel;
overload selector(#"substitutionsPanelAccessoryViewController") = NSViewController;
overload selector(#"substringFromIndex:") = NSString, CULong;
overload selector(#"substringToIndex:") = NSString, CULong;
overload selector(#"substringWithRange:") = NSString, NSRange;
overload selector(#"subtype") = Short;
overload selector(#"subviews") = NSArray;
overload selector(#"suggestedFilename") = NSString;
overload selector(#"suiteForAppleEventCode:") = NSString, UInt;
overload selector(#"suiteName") = NSString;
overload selector(#"suiteNames") = NSArray;
overload selector(#"superclass") = Id;
overload selector(#"superclassDescription") = NSScriptClassDescription;
overload selector(#"superlayer") = CALayer;
overload selector(#"supermenu") = NSMenu;
overload selector(#"superscript:") = Void, Id;
overload selector(#"superscriptRange:") = Void, NSRange;
overload selector(#"superview") = NSView;
overload selector(#"supportedWindowDepths") = Pointer[Int];
overload selector(#"supportsCommand:") = Bool, NSScriptCommandDescription;
overload selector(#"supportsMode:") = Bool, CLong;
overload selector(#"suppressionButton") = NSButton;
overload selector(#"suspend") = Bool;
overload selector(#"suspendCurrentAppleEvent") = NSAppleEventManagerSuspensionID;
overload selector(#"suspendExecution") = Void;
overload selector(#"suspended") = Bool;
overload selector(#"swapWithMark:") = Void, Id;
overload selector(#"swipeWithEvent:") = Void, NSEvent;
overload selector(#"symbolCharacterSet") = Id;
overload selector(#"symbolicLinkDestination") = NSString;
overload selector(#"symbolicLinkDestinationURL") = NSURL;
overload selector(#"symbolicTraits") = UInt;
overload selector(#"synchronize") = Bool;
overload selector(#"synchronizeFile") = Void;
overload selector(#"synchronizeTitleAndSelectedItem") = Void;
overload selector(#"synchronizeWindowTitleWithDocumentName") = Void;
overload selector(#"systemDefaultPortNameServer") = NSPortNameServer;
overload selector(#"systemFontOfSize:") = NSFont, Double;
overload selector(#"systemFontSize") = Double;
overload selector(#"systemFontSizeForControlSize:") = Double, CULong;
overload selector(#"systemID") = NSString;
overload selector(#"systemLocale") = Id;
overload selector(#"systemStatusBar") = NSStatusBar;
overload selector(#"systemTabletID") = CULong;
overload selector(#"systemTimeZone") = NSTimeZone;
overload selector(#"systemUptime") = Double;
overload selector(#"systemVersion") = UInt;
overload selector(#"tabKeyTraversesCells") = Bool;
overload selector(#"tabState") = CULong;
overload selector(#"tabStopType") = CULong;
overload selector(#"tabStops") = NSArray;
overload selector(#"tabView") = NSTabView;
overload selector(#"tabView:didSelectTabViewItem:") = Void, NSTabView, NSTabViewItem;
overload selector(#"tabView:shouldSelectTabViewItem:") = Bool, NSTabView, NSTabViewItem;
overload selector(#"tabView:willSelectTabViewItem:") = Void, NSTabView, NSTabViewItem;
overload selector(#"tabViewDidChangeNumberOfTabViewItems:") = Void, NSTabView;
overload selector(#"tabViewItemAtIndex:") = NSTabViewItem, CLong;
overload selector(#"tabViewItemAtPoint:") = NSTabViewItem, NSPoint;
overload selector(#"tabViewItems") = NSArray;
overload selector(#"tabViewType") = CULong;
overload selector(#"table") = NSTextTable;
overload selector(#"tableColumnWithIdentifier:") = NSTableColumn, Id;
overload selector(#"tableColumns") = NSArray;
overload selector(#"tableView") = NSTableView;
overload selector(#"tableView:acceptDrop:row:dropOperation:") = Bool, NSTableView, Id, CLong, CULong;
overload selector(#"tableView:dataCellForTableColumn:row:") = NSCell, NSTableView, NSTableColumn, CLong;
overload selector(#"tableView:didClickTableColumn:") = Void, NSTableView, NSTableColumn;
overload selector(#"tableView:didDragTableColumn:") = Void, NSTableView, NSTableColumn;
overload selector(#"tableView:heightOfRow:") = Double, NSTableView, CLong;
overload selector(#"tableView:isGroupRow:") = Bool, NSTableView, CLong;
overload selector(#"tableView:mouseDownInHeaderOfTableColumn:") = Void, NSTableView, NSTableColumn;
overload selector(#"tableView:namesOfPromisedFilesDroppedAtDestination:forDraggedRowsWithIndexes:") = NSArray, NSTableView, NSURL, NSIndexSet;
overload selector(#"tableView:nextTypeSelectMatchFromRow:toRow:forString:") = CLong, NSTableView, CLong, CLong, NSString;
overload selector(#"tableView:objectValueForTableColumn:row:") = Id, NSTableView, NSTableColumn, CLong;
overload selector(#"tableView:selectionIndexesForProposedSelection:") = NSIndexSet, NSTableView, NSIndexSet;
overload selector(#"tableView:setObjectValue:forTableColumn:row:") = Void, NSTableView, Id, NSTableColumn, CLong;
overload selector(#"tableView:shouldEditTableColumn:row:") = Bool, NSTableView, NSTableColumn, CLong;
overload selector(#"tableView:shouldReorderColumn:toColumn:") = Bool, NSTableView, CLong, CLong;
overload selector(#"tableView:shouldSelectRow:") = Bool, NSTableView, CLong;
overload selector(#"tableView:shouldSelectTableColumn:") = Bool, NSTableView, NSTableColumn;
overload selector(#"tableView:shouldShowCellExpansionForTableColumn:row:") = Bool, NSTableView, NSTableColumn, CLong;
overload selector(#"tableView:shouldTrackCell:forTableColumn:row:") = Bool, NSTableView, NSCell, NSTableColumn, CLong;
overload selector(#"tableView:shouldTypeSelectForEvent:withCurrentSearchString:") = Bool, NSTableView, NSEvent, NSString;
overload selector(#"tableView:sizeToFitWidthOfColumn:") = Double, NSTableView, CLong;
overload selector(#"tableView:sortDescriptorsDidChange:") = Void, NSTableView, NSArray;
overload selector(#"tableView:toolTipForCell:rect:tableColumn:row:mouseLocation:") = NSString, NSTableView, NSCell, NSRectPointer, NSTableColumn, CLong, NSPoint;
overload selector(#"tableView:typeSelectStringForTableColumn:row:") = NSString, NSTableView, NSTableColumn, CLong;
overload selector(#"tableView:validateDrop:proposedRow:proposedDropOperation:") = CULong, NSTableView, Id, CLong, CULong;
overload selector(#"tableView:willDisplayCell:forTableColumn:row:") = Void, NSTableView, Id, NSTableColumn, CLong;
overload selector(#"tableView:writeRows:toPasteboard:") = Bool, NSTableView, NSArray, NSPasteboard;
overload selector(#"tableView:writeRowsWithIndexes:toPasteboard:") = Bool, NSTableView, NSIndexSet, NSPasteboard;
overload selector(#"tableViewColumnDidMove:") = Void, NSNotification;
overload selector(#"tableViewColumnDidResize:") = Void, NSNotification;
overload selector(#"tableViewSelectionDidChange:") = Void, NSNotification;
overload selector(#"tableViewSelectionIsChanging:") = Void, NSNotification;
overload selector(#"tabletID") = CULong;
overload selector(#"tabletPoint:") = Void, NSEvent;
overload selector(#"tabletProximity:") = Void, NSEvent;
overload selector(#"tag") = CLong;
overload selector(#"tagForSegment:") = CLong, CLong;
overload selector(#"tailIndent") = Double;
overload selector(#"takeColorFrom:") = Void, Id;
overload selector(#"takeDoubleValueFrom:") = Void, Id;
overload selector(#"takeFloatValueFrom:") = Void, Id;
overload selector(#"takeIntValueFrom:") = Void, Id;
overload selector(#"takeIntegerValueFrom:") = Void, Id;
overload selector(#"takeObjectValueFrom:") = Void, Id;
overload selector(#"takeSelectedTabViewItemFromSender:") = Void, Id;
overload selector(#"takeStoredValue:forKey:") = Void, Id, NSString;
overload selector(#"takeStringValueFrom:") = Void, Id;
overload selector(#"takeValue:forKey:") = Void, Id, NSString;
overload selector(#"takeValue:forKeyPath:") = Void, Id, NSString;
overload selector(#"takeValuesFromDictionary:") = Void, NSDictionary;
overload selector(#"takesTitleFromPreviousColumn") = Bool;
overload selector(#"tangentialPressure") = Float;
overload selector(#"target") = Id;
overload selector(#"targetForAction:") = Id, SelectorHandle;
overload selector(#"targetForAction:to:from:") = Id, SelectorHandle, Id, Id;
overload selector(#"tearOffMenuRepresentation") = Id;
overload selector(#"templateViews") = NSArray;
overload selector(#"templatesWithAttributeKeyPaths:inEntityDescription:") = NSArray, NSArray, NSEntityDescription;
overload selector(#"temporaryAttribute:atCharacterIndex:effectiveRange:") = Id, NSString, CULong, NSRangePointer;
overload selector(#"temporaryAttribute:atCharacterIndex:longestEffectiveRange:inRange:") = Id, NSString, CULong, NSRangePointer, NSRange;
overload selector(#"temporaryAttributesAtCharacterIndex:effectiveRange:") = NSDictionary, CULong, NSRangePointer;
overload selector(#"temporaryAttributesAtCharacterIndex:longestEffectiveRange:inRange:") = NSDictionary, CULong, NSRangePointer, NSRange;
overload selector(#"terminate") = Bool;
overload selector(#"terminate:") = Void, Id;
overload selector(#"terminationReason") = CLong;
overload selector(#"terminationStatus") = Int;
overload selector(#"test") = NSScriptWhoseTest;
overload selector(#"testPart:") = CULong, NSPoint;
overload selector(#"textAttributesForNegativeInfinity") = NSDictionary;
overload selector(#"textAttributesForNegativeValues") = NSDictionary;
overload selector(#"textAttributesForNil") = NSDictionary;
overload selector(#"textAttributesForNotANumber") = NSDictionary;
overload selector(#"textAttributesForPositiveInfinity") = NSDictionary;
overload selector(#"textAttributesForPositiveValues") = NSDictionary;
overload selector(#"textAttributesForZero") = NSDictionary;
overload selector(#"textBackgroundColor") = NSColor;
overload selector(#"textBlocks") = NSArray;
overload selector(#"textColor") = NSColor;
overload selector(#"textContainer") = NSTextContainer;
overload selector(#"textContainerChangedGeometry:") = Void, NSTextContainer;
overload selector(#"textContainerChangedTextView:") = Void, NSTextContainer;
overload selector(#"textContainerForGlyphAtIndex:effectiveRange:") = NSTextContainer, CULong, NSRangePointer;
overload selector(#"textContainerForGlyphAtIndex:effectiveRange:withoutAdditionalLayout:") = NSTextContainer, CULong, NSRangePointer, Bool;
overload selector(#"textContainerInset") = NSSize;
overload selector(#"textContainerOrigin") = NSPoint;
overload selector(#"textContainers") = NSArray;
overload selector(#"textDidBeginEditing:") = Void, NSNotification;
overload selector(#"textDidChange:") = Void, NSNotification;
overload selector(#"textDidEndEditing:") = Void, NSNotification;
overload selector(#"textEncodingName") = NSString;
overload selector(#"textFileTypes") = NSArray;
overload selector(#"textLists") = NSArray;
overload selector(#"textPasteboardTypes") = NSArray;
overload selector(#"textShouldBeginEditing:") = Bool, NSText;
overload selector(#"textShouldEndEditing:") = Bool, NSText;
overload selector(#"textStorage") = NSTextStorage;
overload selector(#"textStorage:edited:range:changeInLength:invalidatedRange:") = Void, NSTextStorage, CULong, NSRange, CLong, NSRange;
overload selector(#"textStorageDidProcessEditing:") = Void, NSNotification;
overload selector(#"textStorageWillProcessEditing:") = Void, NSNotification;
overload selector(#"textTabForGlyphLocation:writingDirection:maxLocation:") = NSTextTab, Double, CLong, Double;
overload selector(#"textTransform") = NSAffineTransform;
overload selector(#"textTypes") = NSArray;
overload selector(#"textUnfilteredFileTypes") = NSArray;
overload selector(#"textUnfilteredPasteboardTypes") = NSArray;
overload selector(#"textUnfilteredTypes") = NSArray;
overload selector(#"textView") = NSTextView;
overload selector(#"textView:clickedOnCell:inRect:") = Void, NSTextView, Id, NSRect;
overload selector(#"textView:clickedOnCell:inRect:atIndex:") = Void, NSTextView, Id, NSRect, CULong;
overload selector(#"textView:clickedOnLink:") = Bool, NSTextView, Id;
overload selector(#"textView:clickedOnLink:atIndex:") = Bool, NSTextView, Id, CULong;
overload selector(#"textView:completions:forPartialWordRange:indexOfSelectedItem:") = NSArray, NSTextView, NSArray, NSRange, Pointer[CLong];
overload selector(#"textView:didCheckTextInRange:types:options:results:orthography:wordCount:") = NSArray, NSTextView, NSRange, UInt64, NSDictionary, NSArray, NSOrthography, CLong;
overload selector(#"textView:doCommandBySelector:") = Bool, NSTextView, SelectorHandle;
overload selector(#"textView:doubleClickedOnCell:inRect:") = Void, NSTextView, Id, NSRect;
overload selector(#"textView:doubleClickedOnCell:inRect:atIndex:") = Void, NSTextView, Id, NSRect, CULong;
overload selector(#"textView:draggedCell:inRect:event:") = Void, NSTextView, Id, NSRect, NSEvent;
overload selector(#"textView:draggedCell:inRect:event:atIndex:") = Void, NSTextView, Id, NSRect, NSEvent, CULong;
overload selector(#"textView:menu:forEvent:atIndex:") = NSMenu, NSTextView, NSMenu, NSEvent, CULong;
overload selector(#"textView:shouldChangeTextInRange:replacementString:") = Bool, NSTextView, NSRange, NSString;
overload selector(#"textView:shouldChangeTextInRanges:replacementStrings:") = Bool, NSTextView, NSArray, NSArray;
overload selector(#"textView:shouldChangeTypingAttributes:toAttributes:") = NSDictionary, NSTextView, NSDictionary, NSDictionary;
overload selector(#"textView:shouldSetSpellingState:range:") = CLong, NSTextView, CLong, NSRange;
overload selector(#"textView:willChangeSelectionFromCharacterRange:toCharacterRange:") = NSRange, NSTextView, NSRange, NSRange;
overload selector(#"textView:willChangeSelectionFromCharacterRanges:toCharacterRanges:") = NSArray, NSTextView, NSArray, NSArray;
overload selector(#"textView:willCheckTextInRange:options:types:") = NSDictionary, NSTextView, NSRange, NSDictionary, Pointer[UInt64];
overload selector(#"textView:willDisplayToolTip:forCharacterAtIndex:") = NSString, NSTextView, NSString, CULong;
overload selector(#"textView:writablePasteboardTypesForCell:atIndex:") = NSArray, NSTextView, Id, CULong;
overload selector(#"textView:writeCell:atIndex:toPasteboard:type:") = Bool, NSTextView, Id, CULong, NSPasteboard, NSString;
overload selector(#"textViewDidChangeSelection:") = Void, NSNotification;
overload selector(#"textViewDidChangeTypingAttributes:") = Void, NSNotification;
overload selector(#"textViewForBeginningOfSelection") = NSTextView;
overload selector(#"textWithStringValue:") = Id, NSString;
overload selector(#"textureInternalFormat") = UInt;
overload selector(#"textureMaxMipMapLevel") = Int;
overload selector(#"textureTarget") = UInt;
overload selector(#"thickness") = Double;
overload selector(#"thicknessRequiredInRuler") = Double;
overload selector(#"thousandSeparator") = NSString;
overload selector(#"threadDictionary") = NSMutableDictionary;
overload selector(#"threadPriority") = Double;
overload selector(#"tickMarkPosition") = CULong;
overload selector(#"tickMarkValueAtIndex:") = Double, CLong;
overload selector(#"tightenKerning:") = Void, Id;
overload selector(#"tighteningFactorForTruncation") = Float;
overload selector(#"tile") = Void;
overload selector(#"tilt") = NSPoint;
overload selector(#"timeInterval") = Double;
overload selector(#"timeIntervalSince1970") = Double;
overload selector(#"timeIntervalSinceDate:") = Double, NSDate;
overload selector(#"timeIntervalSinceNow") = Double;
overload selector(#"timeIntervalSinceReferenceDate") = Double;
overload selector(#"timeOffset") = Double;
overload selector(#"timeStyle") = CULong;
overload selector(#"timeZone") = NSTimeZone;
overload selector(#"timeZoneDataVersion") = NSString;
overload selector(#"timeZoneForSecondsFromGMT:") = Id, CLong;
overload selector(#"timeZoneWithAbbreviation:") = Id, NSString;
overload selector(#"timeZoneWithName:") = Id, NSString;
overload selector(#"timeZoneWithName:data:") = Id, NSString, NSData;
overload selector(#"timeoutInterval") = Double;
overload selector(#"timerWithTimeInterval:invocation:repeats:") = NSTimer, Double, NSInvocation, Bool;
overload selector(#"timerWithTimeInterval:target:selector:userInfo:repeats:") = NSTimer, Double, Id, SelectorHandle, Id, Bool;
overload selector(#"timestamp") = Double;
overload selector(#"title") = NSString;
overload selector(#"titleAlignment") = CULong;
overload selector(#"titleBarFontOfSize:") = NSFont, Double;
overload selector(#"titleBaseWritingDirection") = CLong;
overload selector(#"titleCell") = Id;
overload selector(#"titleColor") = NSColor;
overload selector(#"titleFont") = NSFont;
overload selector(#"titleFrameOfColumn:") = NSRect, CLong;
overload selector(#"titleHeight") = Double;
overload selector(#"titleOfColumn:") = NSString, CLong;
overload selector(#"titleOfSelectedItem") = NSString;
overload selector(#"titlePosition") = CULong;
overload selector(#"titleRect") = NSRect;
overload selector(#"titleRectForBounds:") = NSRect, NSRect;
overload selector(#"titleWidth") = Double;
overload selector(#"titleWidth:") = Double, NSSize;
overload selector(#"toManyRelationshipKeys") = NSArray;
overload selector(#"toOneRelationshipKeys") = NSArray;
overload selector(#"toggle:") = Void, Id;
overload selector(#"toggleAutomaticDashSubstitution:") = Void, Id;
overload selector(#"toggleAutomaticDataDetection:") = Void, Id;
overload selector(#"toggleAutomaticLinkDetection:") = Void, Id;
overload selector(#"toggleAutomaticQuoteSubstitution:") = Void, Id;
overload selector(#"toggleAutomaticSpellingCorrection:") = Void, Id;
overload selector(#"toggleAutomaticTextReplacement:") = Void, Id;
overload selector(#"toggleBaseWritingDirection:") = Void, Id;
overload selector(#"toggleContinuousSpellChecking:") = Void, Id;
overload selector(#"toggleGrammarChecking:") = Void, Id;
overload selector(#"toggleRuler:") = Void, Id;
overload selector(#"toggleSmartInsertDelete:") = Void, Id;
overload selector(#"toggleToolbarShown:") = Void, Id;
overload selector(#"toggleTraditionalCharacterShape:") = Void, Id;
overload selector(#"tokenField:completionsForSubstring:indexOfToken:indexOfSelectedItem:") = NSArray, NSTokenField, NSString, CLong, Pointer[CLong];
overload selector(#"tokenField:displayStringForRepresentedObject:") = NSString, NSTokenField, Id;
overload selector(#"tokenField:editingStringForRepresentedObject:") = NSString, NSTokenField, Id;
overload selector(#"tokenField:hasMenuForRepresentedObject:") = Bool, NSTokenField, Id;
overload selector(#"tokenField:menuForRepresentedObject:") = NSMenu, NSTokenField, Id;
overload selector(#"tokenField:readFromPasteboard:") = NSArray, NSTokenField, NSPasteboard;
overload selector(#"tokenField:representedObjectForEditingString:") = Id, NSTokenField, NSString;
overload selector(#"tokenField:shouldAddObjects:atIndex:") = NSArray, NSTokenField, NSArray, CULong;
overload selector(#"tokenField:styleForRepresentedObject:") = CULong, NSTokenField, Id;
overload selector(#"tokenField:writeRepresentedObjects:toPasteboard:") = Bool, NSTokenField, NSArray, NSPasteboard;
overload selector(#"tokenFieldCell:completionsForSubstring:indexOfToken:indexOfSelectedItem:") = NSArray, NSTokenFieldCell, NSString, CLong, Pointer[CLong];
overload selector(#"tokenFieldCell:displayStringForRepresentedObject:") = NSString, NSTokenFieldCell, Id;
overload selector(#"tokenFieldCell:editingStringForRepresentedObject:") = NSString, NSTokenFieldCell, Id;
overload selector(#"tokenFieldCell:hasMenuForRepresentedObject:") = Bool, NSTokenFieldCell, Id;
overload selector(#"tokenFieldCell:menuForRepresentedObject:") = NSMenu, NSTokenFieldCell, Id;
overload selector(#"tokenFieldCell:readFromPasteboard:") = NSArray, NSTokenFieldCell, NSPasteboard;
overload selector(#"tokenFieldCell:representedObjectForEditingString:") = Id, NSTokenFieldCell, NSString;
overload selector(#"tokenFieldCell:shouldAddObjects:atIndex:") = NSArray, NSTokenFieldCell, NSArray, CULong;
overload selector(#"tokenFieldCell:styleForRepresentedObject:") = CULong, NSTokenFieldCell, Id;
overload selector(#"tokenFieldCell:writeRepresentedObjects:toPasteboard:") = Bool, NSTokenFieldCell, NSArray, NSPasteboard;
overload selector(#"tokenStyle") = CULong;
overload selector(#"tokenizingCharacterSet") = NSCharacterSet;
overload selector(#"toolTip") = NSString;
overload selector(#"toolTipForCell:") = NSString, NSCell;
overload selector(#"toolTipForSegment:") = NSString, CLong;
overload selector(#"toolTipsFontOfSize:") = NSFont, Double;
overload selector(#"toolbar") = NSToolbar;
overload selector(#"toolbar:itemForItemIdentifier:willBeInsertedIntoToolbar:") = NSToolbarItem, NSToolbar, NSString, Bool;
overload selector(#"toolbarAllowedItemIdentifiers:") = NSArray, NSToolbar;
overload selector(#"toolbarDefaultItemIdentifiers:") = NSArray, NSToolbar;
overload selector(#"toolbarDidRemoveItem:") = Void, NSNotification;
overload selector(#"toolbarSelectableItemIdentifiers:") = NSArray, NSToolbar;
overload selector(#"toolbarWillAddItem:") = Void, NSNotification;
overload selector(#"topLevelObject") = Id;
overload selector(#"topMargin") = Double;
overload selector(#"totalCostLimit") = CULong;
overload selector(#"touchesBeganWithEvent:") = Void, NSEvent;
overload selector(#"touchesCancelledWithEvent:") = Void, NSEvent;
overload selector(#"touchesEndedWithEvent:") = Void, NSEvent;
overload selector(#"touchesMatchingPhase:inView:") = NSSet, CULong, NSView;
overload selector(#"touchesMovedWithEvent:") = Void, NSEvent;
overload selector(#"trackKnob:") = Void, NSEvent;
overload selector(#"trackMarker:withMouseEvent:") = Bool, NSRulerMarker, NSEvent;
overload selector(#"trackMouse:adding:") = Bool, NSEvent, Bool;
overload selector(#"trackMouse:inRect:ofView:atCharacterIndex:untilMouseUp:") = Bool, NSEvent, NSRect, NSView, CULong, Bool;
overload selector(#"trackMouse:inRect:ofView:untilMouseUp:") = Bool, NSEvent, NSRect, NSView, Bool;
overload selector(#"trackRect") = NSRect;
overload selector(#"trackScrollButtons:") = Void, NSEvent;
overload selector(#"trackingArea") = NSTrackingArea;
overload selector(#"trackingAreas") = NSArray;
overload selector(#"trackingMode") = CULong;
overload selector(#"trackingNumber") = CLong;
overload selector(#"trailingOffset") = Double;
overload selector(#"traitsOfFont:") = CULong, NSFont;
overload selector(#"transactionID") = Int;
overload selector(#"transform") = NSAffineTransform;
overload selector(#"transformBezierPath:") = NSBezierPath, NSBezierPath;
overload selector(#"transformPoint:") = NSPoint, NSPoint;
overload selector(#"transformSize:") = NSSize, NSSize;
overload selector(#"transformStruct") = NSAffineTransformStruct;
overload selector(#"transformUsingAffineTransform:") = Void, NSAffineTransform;
overload selector(#"transformedValue:") = Id, Id;
overload selector(#"transformedValueClass") = Id;
overload selector(#"translateOriginToPoint:") = Void, NSPoint;
overload selector(#"translateRectsNeedingDisplayInRect:by:") = Void, NSRect, NSSize;
overload selector(#"translateXBy:yBy:") = Void, Double, Double;
overload selector(#"transpose:") = Void, Id;
overload selector(#"transposeWords:") = Void, Id;
overload selector(#"treatsFilePackagesAsDirectories") = Bool;
overload selector(#"treeNodeWithRepresentedObject:") = Id, Id;
overload selector(#"truncateFileAtOffset:") = Void, UInt64;
overload selector(#"truncatesLastVisibleLine") = Bool;
overload selector(#"tryLock") = Bool;
overload selector(#"tryLockWhenCondition:") = Bool, CLong;
overload selector(#"tryToPerform:with:") = Bool, SelectorHandle, Id;
overload selector(#"turnOffKerning:") = Void, Id;
overload selector(#"turnOffLigatures:") = Void, Id;
overload selector(#"twoDigitStartDate") = NSDate;
overload selector(#"type") = NSString;
overload selector(#"type:conformsToType:") = Bool, NSString, NSString;
overload selector(#"typeCodeValue") = UInt;
overload selector(#"typeForArgumentWithName:") = NSString, NSString;
overload selector(#"typeForContentsOfURL:error:") = NSString, NSURL, Pointer[NSError];
overload selector(#"typeForKey:") = NSString, NSString;
overload selector(#"typeFromFileExtension:") = NSString, NSString;
overload selector(#"typeOfFile:error:") = NSString, NSString, Pointer[NSError];
overload selector(#"types") = NSArray;
overload selector(#"typesFilterableTo:") = NSArray, NSString;
overload selector(#"typesetter") = NSTypesetter;
overload selector(#"typesetterBehavior") = CLong;
overload selector(#"typingAttributes") = NSDictionary;
overload selector(#"unableToSetNilForKey:") = Void, NSString;
overload selector(#"unarchiveObjectWithData:") = Id, NSData;
overload selector(#"unarchiveObjectWithFile:") = Id, NSString;
overload selector(#"unarchiver:cannotDecodeObjectOfClassName:originalClasses:") = Id, NSKeyedUnarchiver, NSString, NSArray;
overload selector(#"unarchiver:didDecodeObject:") = Id, NSKeyedUnarchiver, Id;
overload selector(#"unarchiver:willReplaceObject:withObject:") = Void, NSKeyedUnarchiver, Id, Id;
overload selector(#"unarchiverDidFinish:") = Void, NSKeyedUnarchiver;
overload selector(#"unarchiverWillFinish:") = Void, NSKeyedUnarchiver;
overload selector(#"unbind:") = Void, NSString;
overload selector(#"underline:") = Void, Id;
overload selector(#"underlineGlyphRange:underlineType:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:") = Void, NSRange, CLong, NSRect, NSRange, NSPoint;
overload selector(#"underlinePosition") = Double;
overload selector(#"underlineThickness") = Double;
overload selector(#"undo") = Void;
overload selector(#"undoActionName") = NSString;
overload selector(#"undoManager") = NSUndoManager;
overload selector(#"undoManagerForTextView:") = NSUndoManager, NSTextView;
overload selector(#"undoMenuItemTitle") = NSString;
overload selector(#"undoMenuTitleForUndoActionName:") = NSString, NSString;
overload selector(#"undoNestedGroup") = Void;
overload selector(#"unhide") = Bool;
overload selector(#"unhide:") = Void, Id;
overload selector(#"unhideAllApplications:") = Void, Id;
overload selector(#"unhideWithoutActivation") = Void;
overload selector(#"unionHashTable:") = Void, NSHashTable;
overload selector(#"unionSet:") = Void, NSSet;
overload selector(#"uniqueID") = Id;
overload selector(#"uniqueSpellDocumentTag") = CLong;
overload selector(#"unlearnWord:") = Void, NSString;
overload selector(#"unload") = Bool;
overload selector(#"unlock") = Void;
overload selector(#"unlockFocus") = Void;
overload selector(#"unlockWithCondition:") = Void, CLong;
overload selector(#"unmarkText") = Void;
overload selector(#"unmountAndEjectDeviceAtPath:") = Bool, NSString;
overload selector(#"unmountAndEjectDeviceAtURL:error:") = Bool, NSURL, Pointer[NSError];
overload selector(#"unregisterClass:") = Void, Id;
overload selector(#"unregisterDraggedTypes") = Void;
overload selector(#"unregisterImageRepClass:") = Void, Id;
overload selector(#"unregisterUserInterfaceItemSearchHandler:") = Void, Id;
overload selector(#"unscheduleFromRunLoop:forMode:") = Void, NSRunLoop, NSString;
overload selector(#"unscript:") = Void, Id;
overload selector(#"unscriptRange:") = Void, NSRange;
overload selector(#"unsignedCharValue") = CUChar;
overload selector(#"unsignedIntValue") = UInt;
overload selector(#"unsignedIntegerValue") = CULong;
overload selector(#"unsignedLongLongValue") = UInt64;
overload selector(#"unsignedLongValue") = CULong;
overload selector(#"unsignedShortValue") = UShort;
overload selector(#"update") = Void;
overload selector(#"updateAttachmentsFromPath:") = Void, NSString;
overload selector(#"updateCell:") = Void, NSCell;
overload selector(#"updateCellInside:") = Void, NSCell;
overload selector(#"updateChangeCount:") = Void, CULong;
overload selector(#"updateDragTypeRegistration") = Void;
overload selector(#"updateFontPanel") = Void;
overload selector(#"updateFromPMPageFormat") = Void;
overload selector(#"updateFromPMPrintSettings") = Void;
overload selector(#"updateFromPath:") = Bool, NSString;
overload selector(#"updateFromPrintInfo") = Void;
overload selector(#"updateInsertionPointStateAndRestartTimer:") = Void, Bool;
overload selector(#"updatePanels") = Void;
overload selector(#"updateRuler") = Void;
overload selector(#"updateScroller") = Void;
overload selector(#"updateSpellingPanelWithGrammarString:detail:") = Void, NSString, NSDictionary;
overload selector(#"updateSpellingPanelWithMisspelledWord:") = Void, NSString;
overload selector(#"updateTrackingAreas") = Void;
overload selector(#"updateWindows") = Void;
overload selector(#"updateWindowsItem:") = Void, NSWindow;
overload selector(#"uppercaseLetterCharacterSet") = Id;
overload selector(#"uppercaseString") = NSString;
overload selector(#"uppercaseWord:") = Void, Id;
overload selector(#"url") = NSURL;
overload selector(#"usableParts") = CULong;
overload selector(#"useAllLigatures:") = Void, Id;
overload selector(#"useCredential:forAuthenticationChallenge:") = Void, NSURLCredential, NSURLAuthenticationChallenge;
overload selector(#"useOptimizedDrawing:") = Void, Bool;
overload selector(#"useStandardKerning:") = Void, Id;
overload selector(#"useStandardLigatures:") = Void, Id;
overload selector(#"useStoredAccessor") = Bool;
overload selector(#"usedRectForTextContainer:") = NSRect, NSTextContainer;
overload selector(#"user") = NSString;
overload selector(#"userData") = RawPointer;
overload selector(#"userDefaultsChanged") = Bool;
overload selector(#"userFixedPitchFontOfSize:") = NSFont, Double;
overload selector(#"userFontOfSize:") = NSFont, Double;
overload selector(#"userInfo") = Id;
overload selector(#"userInterfaceLayoutDirection") = CLong;
overload selector(#"userKeyEquivalent") = NSString;
overload selector(#"userPreferredLanguages") = NSArray;
overload selector(#"userQuotesArrayForLanguage:") = NSArray, NSString;
overload selector(#"userReplacementsDictionary") = NSDictionary;
overload selector(#"userSpaceScaleFactor") = Double;
overload selector(#"usesAlternatingRowBackgroundColors") = Bool;
overload selector(#"usesDataSource") = Bool;
overload selector(#"usesEPSOnResolutionMismatch") = Bool;
overload selector(#"usesFeedbackWindow") = Bool;
overload selector(#"usesFindPanel") = Bool;
overload selector(#"usesFontLeading") = Bool;
overload selector(#"usesFontPanel") = Bool;
overload selector(#"usesGroupingSeparator") = Bool;
overload selector(#"usesItemFromMenu") = Bool;
overload selector(#"usesLazyFetching") = Bool;
overload selector(#"usesRuler") = Bool;
overload selector(#"usesScreenFonts") = Bool;
overload selector(#"usesSignificantDigits") = Bool;
overload selector(#"usesSingleLineMode") = Bool;
overload selector(#"usesStrongWriteBarrier") = Bool;
overload selector(#"usesThreadedAnimation") = Bool;
overload selector(#"usesUserKeyEquivalents") = Bool;
overload selector(#"usesWeakReadAndWriteBarriers") = Bool;
overload selector(#"validAttributesForMarkedText") = NSArray;
overload selector(#"validModesForFontPanel:") = CULong, NSFontPanel;
overload selector(#"validRequestorForSendType:returnType:") = Id, NSString, NSString;
overload selector(#"validate") = Void;
overload selector(#"validateAndReturnError:") = Bool, Pointer[NSError];
overload selector(#"validateEditing") = Void;
overload selector(#"validateMenuItem:") = Bool, NSMenuItem;
overload selector(#"validateToolbarItem:") = Bool, NSToolbarItem;
overload selector(#"validateUserInterfaceItem:") = Bool, Id;
overload selector(#"validateValue:forKey:error:") = Bool, Pointer[Id], NSString, Pointer[NSError];
overload selector(#"validateValue:forKeyPath:error:") = Bool, Pointer[Id], NSString, Pointer[NSError];
overload selector(#"validateVisibleColumns") = Void;
overload selector(#"validateVisibleItems") = Void;
overload selector(#"validationPredicates") = NSArray;
overload selector(#"validationWarnings") = NSArray;
overload selector(#"value") = Id;
overload selector(#"value:withObjCType:") = NSValue, RawPointer, Pointer[CChar];
overload selector(#"valueAtIndex:") = Double, CULong;
overload selector(#"valueAtIndex:inPropertyWithKey:") = Id, CULong, NSString;
overload selector(#"valueClassForBinding:") = Id, NSString;
overload selector(#"valueForAttribute:") = Id, NSString;
overload selector(#"valueForDimension:") = Double, CULong;
overload selector(#"valueForHTTPHeaderField:") = NSString, NSString;
overload selector(#"valueForKey:") = Id, NSString;
overload selector(#"valueForKeyPath:") = Id, NSString;
overload selector(#"valueForProperty:") = Id, NSString;
overload selector(#"valueForUndefinedKey:") = Id, NSString;
overload selector(#"valueListAttributes") = NSArray;
overload selector(#"valueLists") = NSDictionary;
overload selector(#"valueOfAttribute:forResultAtIndex:") = Id, NSString, CULong;
overload selector(#"valuePointerFunctions") = NSPointerFunctions;
overload selector(#"valueTransformerForName:") = NSValueTransformer, NSString;
overload selector(#"valueTransformerName") = NSString;
overload selector(#"valueTransformerNames") = NSArray;
overload selector(#"valueTypeForDimension:") = CULong, CULong;
overload selector(#"valueWithBytes:objCType:") = NSValue, RawPointer, Pointer[CChar];
overload selector(#"valueWithCATransform3D:") = NSValue, CATransform3D;
overload selector(#"valueWithName:inPropertyWithKey:") = Id, NSString, NSString;
overload selector(#"valueWithNonretainedObject:") = NSValue, Id;
overload selector(#"valueWithPoint:") = NSValue, NSPoint;
overload selector(#"valueWithPointer:") = NSValue, RawPointer;
overload selector(#"valueWithRange:") = NSValue, NSRange;
overload selector(#"valueWithRect:") = NSValue, NSRect;
overload selector(#"valueWithSize:") = NSValue, NSSize;
overload selector(#"valueWithUniqueID:inPropertyWithKey:") = Id, Id, NSString;
overload selector(#"valueWraps") = Bool;
overload selector(#"values") = Id;
overload selector(#"valuesForAttributes:") = NSDictionary, NSArray;
overload selector(#"valuesForKeys:") = NSDictionary, NSArray;
overload selector(#"variable") = NSString;
overload selector(#"vectorWithString:") = CIVector, NSString;
overload selector(#"vectorWithValues:count:") = CIVector, Pointer[Double], CULong;
overload selector(#"vectorWithX:") = CIVector, Double;
overload selector(#"vectorWithX:Y:") = CIVector, Double, Double;
overload selector(#"vectorWithX:Y:Z:") = CIVector, Double, Double, Double;
overload selector(#"vectorWithX:Y:Z:W:") = CIVector, Double, Double, Double, Double;
overload selector(#"vendorDefined") = Id;
overload selector(#"vendorID") = CULong;
overload selector(#"vendorPointingDeviceType") = CULong;
overload selector(#"version") = CLong;
overload selector(#"versionForClassName:") = CLong, NSString;
overload selector(#"versionHash") = NSData;
overload selector(#"versionHashModifier") = NSString;
overload selector(#"verticalAlignment") = CULong;
overload selector(#"verticalLineScroll") = Double;
overload selector(#"verticalMotionCanBeginDrag") = Bool;
overload selector(#"verticalPageScroll") = Double;
overload selector(#"verticalPagination") = CULong;
overload selector(#"verticalRulerView") = NSRulerView;
overload selector(#"verticalScroller") = NSScroller;
overload selector(#"veryShortMonthSymbols") = NSArray;
overload selector(#"veryShortStandaloneMonthSymbols") = NSArray;
overload selector(#"veryShortStandaloneWeekdaySymbols") = NSArray;
overload selector(#"veryShortWeekdaySymbols") = NSArray;
overload selector(#"view") = Id;
overload selector(#"view:stringForToolTip:point:userData:") = NSString, NSView, CLong, NSPoint, RawPointer;
overload selector(#"viewAnimations") = NSArray;
overload selector(#"viewBoundsChanged:") = Void, NSNotification;
overload selector(#"viewDidEndLiveResize") = Void;
overload selector(#"viewDidHide") = Void;
overload selector(#"viewDidMoveToSuperview") = Void;
overload selector(#"viewDidMoveToWindow") = Void;
overload selector(#"viewDidUnhide") = Void;
overload selector(#"viewFrameChanged:") = Void, NSNotification;
overload selector(#"viewSizeChanged:") = Void, Id;
overload selector(#"viewWillDraw") = Void;
overload selector(#"viewWillMoveToSuperview:") = Void, NSView;
overload selector(#"viewWillMoveToWindow:") = Void, NSWindow;
overload selector(#"viewWillStartLiveResize") = Void;
overload selector(#"viewWithTag:") = Id, CLong;
overload selector(#"viewsNeedDisplay") = Bool;
overload selector(#"visibilityPriority") = CLong;
overload selector(#"visibleFrame") = NSRect;
overload selector(#"visibleItems") = NSArray;
overload selector(#"visibleRect") = NSRect;
overload selector(#"voice") = NSString;
overload selector(#"volatileDomainForName:") = NSDictionary, NSString;
overload selector(#"volatileDomainNames") = NSArray;
overload selector(#"volume") = Float;
overload selector(#"wait") = Void;
overload selector(#"waitForDataInBackgroundAndNotify") = Void;
overload selector(#"waitForDataInBackgroundAndNotifyForModes:") = Void, NSArray;
overload selector(#"waitUntilAllOperationsAreFinished") = Void;
overload selector(#"waitUntilDate:") = Bool, NSDate;
overload selector(#"waitUntilExit") = Void;
overload selector(#"waitUntilFinished") = Void;
overload selector(#"wantsDefaultClipping") = Bool;
overload selector(#"wantsLayer") = Bool;
overload selector(#"wantsNotificationForMarkedText") = Bool;
overload selector(#"wantsPeriodicDraggingUpdates") = Bool;
overload selector(#"wantsRestingTouches") = Bool;
overload selector(#"wantsToDelayTextChangeNotifications") = Bool;
overload selector(#"wantsToHandleMouseEvents") = Bool;
overload selector(#"wantsToInterpretAllKeystrokes") = Bool;
overload selector(#"wantsToTrackMouse") = Bool;
overload selector(#"wantsToTrackMouseForEvent:inRect:ofView:atCharacterIndex:") = Bool, NSEvent, NSRect, NSView, CULong;
overload selector(#"warningValue") = Double;
overload selector(#"week") = CLong;
overload selector(#"weekday") = CLong;
overload selector(#"weekdayOrdinal") = CLong;
overload selector(#"weekdaySymbols") = NSArray;
overload selector(#"weightOfFont:") = CLong, NSFont;
overload selector(#"whiteColor") = NSColor;
overload selector(#"whiteComponent") = Double;
overload selector(#"whitespaceAndNewlineCharacterSet") = Id;
overload selector(#"whitespaceCharacterSet") = Id;
overload selector(#"width") = Double;
overload selector(#"widthAdjustLimit") = Double;
overload selector(#"widthForLayer:edge:") = Double, CLong, CULong;
overload selector(#"widthForSegment:") = Double, CLong;
overload selector(#"widthOfColumn:") = Double, CLong;
overload selector(#"widthTracksTextView") = Bool;
overload selector(#"widthValueTypeForLayer:edge:") = CULong, CLong, CULong;
overload selector(#"willChange:valuesAtIndexes:forKey:") = Void, CULong, NSIndexSet, NSString;
overload selector(#"willChangeValueForKey:") = Void, NSString;
overload selector(#"willChangeValueForKey:withSetMutation:usingObjects:") = Void, NSString, CULong, NSSet;
overload selector(#"willPresentError:") = NSError, NSError;
overload selector(#"willRemoveSubview:") = Void, NSView;
overload selector(#"willSetLineFragmentRect:forGlyphRange:usedRect:baselineOffset:") = Void, NSRectPointer, NSRange, NSRectPointer, Pointer[Double];
overload selector(#"windingRule") = CULong;
overload selector(#"window") = Id;
overload selector(#"window:shouldDragDocumentWithEvent:from:withPasteboard:") = Bool, NSWindow, NSEvent, NSPoint, NSPasteboard;
overload selector(#"window:shouldPopUpDocumentPathMenu:") = Bool, NSWindow, NSMenu;
overload selector(#"window:willPositionSheet:usingRect:") = NSRect, NSWindow, NSWindow, NSRect;
overload selector(#"windowBackgroundColor") = NSColor;
overload selector(#"windowController") = Id;
overload selector(#"windowControllerDidLoadNib:") = Void, NSWindowController;
overload selector(#"windowControllerWillLoadNib:") = Void, NSWindowController;
overload selector(#"windowControllers") = NSArray;
overload selector(#"windowDidBecomeKey:") = Void, NSNotification;
overload selector(#"windowDidBecomeMain:") = Void, NSNotification;
overload selector(#"windowDidChangeScreen:") = Void, NSNotification;
overload selector(#"windowDidChangeScreenProfile:") = Void, NSNotification;
overload selector(#"windowDidDeminiaturize:") = Void, NSNotification;
overload selector(#"windowDidEndLiveResize:") = Void, NSNotification;
overload selector(#"windowDidEndSheet:") = Void, NSNotification;
overload selector(#"windowDidExpose:") = Void, NSNotification;
overload selector(#"windowDidLoad") = Void;
overload selector(#"windowDidMiniaturize:") = Void, NSNotification;
overload selector(#"windowDidMove:") = Void, NSNotification;
overload selector(#"windowDidResignKey:") = Void, NSNotification;
overload selector(#"windowDidResignMain:") = Void, NSNotification;
overload selector(#"windowDidResize:") = Void, NSNotification;
overload selector(#"windowDidUpdate:") = Void, NSNotification;
overload selector(#"windowForSheet") = NSWindow;
overload selector(#"windowFrameAutosaveName") = NSString;
overload selector(#"windowFrameColor") = NSColor;
overload selector(#"windowFrameTextColor") = NSColor;
overload selector(#"windowLevel") = CLong;
overload selector(#"windowNibName") = NSString;
overload selector(#"windowNibPath") = NSString;
overload selector(#"windowNumber") = CLong;
overload selector(#"windowNumberAtPoint:belowWindowWithWindowNumber:") = CLong, NSPoint, CLong;
overload selector(#"windowNumbersWithOptions:") = NSArray, CULong;
overload selector(#"windowRef") = RawPointer;
overload selector(#"windowShouldClose:") = Bool, Id;
overload selector(#"windowShouldZoom:toFrame:") = Bool, NSWindow, NSRect;
overload selector(#"windowTitleForDocumentDisplayName:") = NSString, NSString;
overload selector(#"windowWillBeginSheet:") = Void, NSNotification;
overload selector(#"windowWillClose:") = Void, NSNotification;
overload selector(#"windowWillLoad") = Void;
overload selector(#"windowWillMiniaturize:") = Void, NSNotification;
overload selector(#"windowWillMove:") = Void, NSNotification;
overload selector(#"windowWillResize:toSize:") = NSSize, NSWindow, NSSize;
overload selector(#"windowWillReturnFieldEditor:toObject:") = Id, NSWindow, Id;
overload selector(#"windowWillReturnUndoManager:") = NSUndoManager, NSWindow;
overload selector(#"windowWillStartLiveResize:") = Void, NSNotification;
overload selector(#"windowWillUseStandardFrame:defaultFrame:") = NSRect, NSWindow, NSRect;
overload selector(#"windowWithWindowNumber:") = NSWindow, CLong;
overload selector(#"windows") = NSArray;
overload selector(#"windowsLocaleCodeFromLocaleIdentifier:") = UInt, NSString;
overload selector(#"windowsMenu") = NSMenu;
overload selector(#"words") = NSArray;
overload selector(#"worksWhenModal") = Bool;
overload selector(#"wraps") = Bool;
overload selector(#"writablePasteboardTypes") = NSArray;
overload selector(#"writableTypes") = NSArray;
overload selector(#"writableTypesForPasteboard:") = NSArray, NSPasteboard;
overload selector(#"writableTypesForSaveOperation:") = NSArray, CULong;
overload selector(#"write:maxLength:") = CLong, Pointer[CUChar], CULong;
overload selector(#"writeBookmarkData:toURL:options:error:") = Bool, NSData, NSURL, CULong, Pointer[NSError];
overload selector(#"writeData:") = Bool, NSData;
overload selector(#"writeEPSInsideRect:toPasteboard:") = Void, NSRect, NSPasteboard;
overload selector(#"writeFileContents:") = Bool, NSString;
overload selector(#"writeFileWrapper:") = Bool, NSFileWrapper;
overload selector(#"writeObjects:") = Bool, NSArray;
overload selector(#"writePDFInsideRect:toPasteboard:") = Void, NSRect, NSPasteboard;
overload selector(#"writePrintInfo") = Void;
overload selector(#"writeProperty:forKey:") = Bool, Id, NSString;
overload selector(#"writePropertyList:toStream:format:options:error:") = CLong, Id, NSOutputStream, CULong, CULong, Pointer[NSError];
overload selector(#"writeRTFDToFile:atomically:") = Bool, NSString, Bool;
overload selector(#"writeSafelyToURL:ofType:forSaveOperation:error:") = Bool, NSURL, NSString, CULong, Pointer[NSError];
overload selector(#"writeSelectionToPasteboard:type:") = Bool, NSPasteboard, NSString;
overload selector(#"writeSelectionToPasteboard:types:") = Bool, NSPasteboard, NSArray;
overload selector(#"writeToFile:") = Bool, NSString;
overload selector(#"writeToFile:atomically:") = Bool, NSString, Bool;
overload selector(#"writeToFile:atomically:encoding:error:") = Bool, NSString, Bool, CULong, Pointer[NSError];
overload selector(#"writeToFile:atomically:updateFilenames:") = Bool, NSString, Bool, Bool;
overload selector(#"writeToFile:ofType:") = Bool, NSString, NSString;
overload selector(#"writeToFile:ofType:originalFile:saveOperation:") = Bool, NSString, NSString, NSString, CULong;
overload selector(#"writeToFile:options:error:") = Bool, NSString, CULong, Pointer[NSError];
overload selector(#"writeToPasteboard:") = Void, NSPasteboard;
overload selector(#"writeToURL:atomically:") = Bool, NSURL, Bool;
overload selector(#"writeToURL:atomically:encoding:error:") = Bool, NSURL, Bool, CULong, Pointer[NSError];
overload selector(#"writeToURL:ofType:") = Bool, NSURL, NSString;
overload selector(#"writeToURL:ofType:error:") = Bool, NSURL, NSString, Pointer[NSError];
overload selector(#"writeToURL:ofType:forSaveOperation:originalContentsURL:error:") = Bool, NSURL, NSString, CULong, NSURL, Pointer[NSError];
overload selector(#"writeToURL:options:error:") = Bool, NSURL, CULong, Pointer[NSError];
overload selector(#"writeToURL:options:originalContentsURL:error:") = Bool, NSURL, CULong, NSURL, Pointer[NSError];
overload selector(#"writeWithBackupToFile:ofType:saveOperation:") = Bool, NSString, NSString, CULong;
overload selector(#"writingOptionsForType:pasteboard:") = CULong, NSString, NSPasteboard;
overload selector(#"xHeight") = Double;
overload selector(#"yank:") = Void, Id;
overload selector(#"year") = CLong;
overload selector(#"yearOfCommonEra") = CLong;
overload selector(#"years:months:days:hours:minutes:seconds:sinceDate:") = Void, Pointer[CLong], Pointer[CLong], Pointer[CLong], Pointer[CLong], Pointer[CLong], Pointer[CLong], NSCalendarDate;
overload selector(#"yellowColor") = NSColor;
overload selector(#"yellowComponent") = Double;
overload selector(#"zPosition") = Double;
overload selector(#"zero") = NSDecimalNumber;
overload selector(#"zeroSymbol") = NSString;
overload selector(#"zone") = Pointer[NSZone];
overload selector(#"zoom:") = Void, Id;

overload externalInstanceMethod(#CIColor, #"initWithColor:") = Id, NSColor;

overload externalInstanceMethod(#CIImage, #"initWithBitmapImageRep:") = Id, NSBitmapImageRep;
overload externalInstanceMethod(#CIImage, #"drawInRect:fromRect:operation:fraction:") = Void, NSRect, NSRect, CULong, Double;
overload externalInstanceMethod(#CIImage, #"drawAtPoint:fromRect:operation:fraction:") = Void, NSPoint, NSRect, CULong, Double;

record NSATSTypesetter = externalClass(NSTypesetter);
overload externalClassMethod(#NSATSTypesetter, #"sharedTypesetter") = Id;
overload externalInstanceMethod(#NSATSTypesetter, #"lineFragmentRectForProposedRect:remainingRect:") = NSRect, NSRect, NSRectPointer;

record NSActionCell = externalClass(NSCell);
overload externalInstanceMethod(#NSActionCell, #"target") = Id;
overload externalInstanceMethod(#NSActionCell, #"setTarget:") = Void, Id;
overload externalInstanceMethod(#NSActionCell, #"action") = SelectorHandle;
overload externalInstanceMethod(#NSActionCell, #"setAction:") = Void, SelectorHandle;
overload externalInstanceMethod(#NSActionCell, #"tag") = CLong;
overload externalInstanceMethod(#NSActionCell, #"setTag:") = Void, CLong;

overload externalInstanceMethod(#NSAffineTransform, #"transformBezierPath:") = NSBezierPath, NSBezierPath;
overload externalInstanceMethod(#NSAffineTransform, #"set") = Void;
overload externalInstanceMethod(#NSAffineTransform, #"concat") = Void;

record NSAlert = externalClass(NSObject);
overload externalClassMethod(#NSAlert, #"alertWithError:") = NSAlert, NSError;
overload externalVarargClassMethod(#NSAlert, #"alertWithMessageText:defaultButton:alternateButton:otherButton:informativeTextWithFormat:") = NSAlert, NSString, NSString, NSString, NSString, NSString;
overload externalInstanceMethod(#NSAlert, #"setMessageText:") = Void, NSString;
overload externalInstanceMethod(#NSAlert, #"setInformativeText:") = Void, NSString;
overload externalInstanceMethod(#NSAlert, #"messageText") = NSString;
overload externalInstanceMethod(#NSAlert, #"informativeText") = NSString;
overload externalInstanceMethod(#NSAlert, #"setIcon:") = Void, NSImage;
overload externalInstanceMethod(#NSAlert, #"icon") = NSImage;
overload externalInstanceMethod(#NSAlert, #"addButtonWithTitle:") = NSButton, NSString;
overload externalInstanceMethod(#NSAlert, #"buttons") = NSArray;
overload externalInstanceMethod(#NSAlert, #"setShowsHelp:") = Void, Bool;
overload externalInstanceMethod(#NSAlert, #"showsHelp") = Bool;
overload externalInstanceMethod(#NSAlert, #"setHelpAnchor:") = Void, NSString;
overload externalInstanceMethod(#NSAlert, #"helpAnchor") = NSString;
overload externalInstanceMethod(#NSAlert, #"setAlertStyle:") = Void, CULong;
overload externalInstanceMethod(#NSAlert, #"alertStyle") = CULong;
overload externalInstanceMethod(#NSAlert, #"setDelegate:") = Void, Id;
overload externalInstanceMethod(#NSAlert, #"delegate") = Id;
overload externalInstanceMethod(#NSAlert, #"setShowsSuppressionButton:") = Void, Bool;
overload externalInstanceMethod(#NSAlert, #"showsSuppressionButton") = Bool;
overload externalInstanceMethod(#NSAlert, #"suppressionButton") = NSButton;
overload externalInstanceMethod(#NSAlert, #"setAccessoryView:") = Void, NSView;
overload externalInstanceMethod(#NSAlert, #"accessoryView") = NSView;
overload externalInstanceMethod(#NSAlert, #"layout") = Void;
overload externalInstanceMethod(#NSAlert, #"runModal") = CLong;
overload externalInstanceMethod(#NSAlert, #"beginSheetModalForWindow:modalDelegate:didEndSelector:contextInfo:") = Void, NSWindow, Id, SelectorHandle, RawPointer;
overload externalInstanceMethod(#NSAlert, #"window") = Id;

record NSAnimation = externalClass(NSObject);
overload externalInstanceMethod(#NSAnimation, #"copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#NSAnimation, #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSAnimation, #"initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#NSAnimation, #"initWithDuration:animationCurve:") = Id, Double, CULong;
overload externalInstanceMethod(#NSAnimation, #"startAnimation") = Void;
overload externalInstanceMethod(#NSAnimation, #"stopAnimation") = Void;
overload externalInstanceMethod(#NSAnimation, #"isAnimating") = Bool;
overload externalInstanceMethod(#NSAnimation, #"currentProgress") = Float;
overload externalInstanceMethod(#NSAnimation, #"setCurrentProgress:") = Void, Float;
overload externalInstanceMethod(#NSAnimation, #"setDuration:") = Void, Double;
overload externalInstanceMethod(#NSAnimation, #"duration") = Double;
overload externalInstanceMethod(#NSAnimation, #"animationBlockingMode") = CULong;
overload externalInstanceMethod(#NSAnimation, #"setAnimationBlockingMode:") = Void, CULong;
overload externalInstanceMethod(#NSAnimation, #"setFrameRate:") = Void, Float;
overload externalInstanceMethod(#NSAnimation, #"frameRate") = Float;
overload externalInstanceMethod(#NSAnimation, #"setAnimationCurve:") = Void, CULong;
overload externalInstanceMethod(#NSAnimation, #"animationCurve") = CULong;
overload externalInstanceMethod(#NSAnimation, #"currentValue") = Float;
overload externalInstanceMethod(#NSAnimation, #"setDelegate:") = Void, Id;
overload externalInstanceMethod(#NSAnimation, #"delegate") = Id;
overload externalInstanceMethod(#NSAnimation, #"progressMarks") = NSArray;
overload externalInstanceMethod(#NSAnimation, #"setProgressMarks:") = Void, NSArray;
overload externalInstanceMethod(#NSAnimation, #"addProgressMark:") = Void, Float;
overload externalInstanceMethod(#NSAnimation, #"removeProgressMark:") = Void, Float;
overload externalInstanceMethod(#NSAnimation, #"startWhenAnimation:reachesProgress:") = Void, NSAnimation, Float;
overload externalInstanceMethod(#NSAnimation, #"stopWhenAnimation:reachesProgress:") = Void, NSAnimation, Float;
overload externalInstanceMethod(#NSAnimation, #"clearStartAnimation") = Void;
overload externalInstanceMethod(#NSAnimation, #"clearStopAnimation") = Void;
overload externalInstanceMethod(#NSAnimation, #"runLoopModesForAnimating") = NSArray;

record NSAnimationContext = externalClass(NSObject);
overload externalClassMethod(#NSAnimationContext, #"beginGrouping") = Void;
overload externalClassMethod(#NSAnimationContext, #"endGrouping") = Void;
overload externalClassMethod(#NSAnimationContext, #"currentContext") = NSAnimationContext;
overload externalInstanceMethod(#NSAnimationContext, #"setDuration:") = Void, Double;
overload externalInstanceMethod(#NSAnimationContext, #"duration") = Double;

overload externalInstanceMethod(#NSAppleScript, #"richTextSource") = NSAttributedString;

record NSApplication = externalClass(NSResponder);
overload externalInstanceMethod(#NSApplication, #"validateUserInterfaceItem:") = Bool, Id;
overload externalClassMethod(#NSApplication, #"sharedApplication") = NSApplication;
overload externalInstanceMethod(#NSApplication, #"setDelegate:") = Void, Id;
overload externalInstanceMethod(#NSApplication, #"delegate") = Id;
overload externalInstanceMethod(#NSApplication, #"context") = NSGraphicsContext;
overload externalInstanceMethod(#NSApplication, #"hide:") = Void, Id;
overload externalInstanceMethod(#NSApplication, #"unhide:") = Void, Id;
overload externalInstanceMethod(#NSApplication, #"unhideWithoutActivation") = Void;
overload externalInstanceMethod(#NSApplication, #"windowWithWindowNumber:") = NSWindow, CLong;
overload externalInstanceMethod(#NSApplication, #"mainWindow") = NSWindow;
overload externalInstanceMethod(#NSApplication, #"keyWindow") = NSWindow;
overload externalInstanceMethod(#NSApplication, #"isActive") = Bool;
overload externalInstanceMethod(#NSApplication, #"isHidden") = Bool;
overload externalInstanceMethod(#NSApplication, #"isRunning") = Bool;
overload externalInstanceMethod(#NSApplication, #"deactivate") = Void;
overload externalInstanceMethod(#NSApplication, #"activateIgnoringOtherApps:") = Void, Bool;
overload externalInstanceMethod(#NSApplication, #"hideOtherApplications:") = Void, Id;
overload externalInstanceMethod(#NSApplication, #"unhideAllApplications:") = Void, Id;
overload externalInstanceMethod(#NSApplication, #"finishLaunching") = Void;
overload externalInstanceMethod(#NSApplication, #"run") = Void;
overload externalInstanceMethod(#NSApplication, #"runModalForWindow:") = CLong, NSWindow;
overload externalInstanceMethod(#NSApplication, #"stop:") = Void, Id;
overload externalInstanceMethod(#NSApplication, #"stopModal") = Void;
overload externalInstanceMethod(#NSApplication, #"stopModalWithCode:") = Void, CLong;
overload externalInstanceMethod(#NSApplication, #"abortModal") = Void;
overload externalInstanceMethod(#NSApplication, #"modalWindow") = NSWindow;
overload externalInstanceMethod(#NSApplication, #"beginModalSessionForWindow:") = NSModalSession, NSWindow;
overload externalInstanceMethod(#NSApplication, #"runModalSession:") = CLong, NSModalSession;
overload externalInstanceMethod(#NSApplication, #"endModalSession:") = Void, NSModalSession;
overload externalInstanceMethod(#NSApplication, #"terminate:") = Void, Id;
overload externalInstanceMethod(#NSApplication, #"requestUserAttention:") = CLong, CULong;
overload externalInstanceMethod(#NSApplication, #"cancelUserAttentionRequest:") = Void, CLong;
overload externalInstanceMethod(#NSApplication, #"beginSheet:modalForWindow:modalDelegate:didEndSelector:contextInfo:") = Void, NSWindow, NSWindow, Id, SelectorHandle, RawPointer;
overload externalInstanceMethod(#NSApplication, #"endSheet:") = Void, NSWindow;
overload externalInstanceMethod(#NSApplication, #"endSheet:returnCode:") = Void, NSWindow, CLong;
overload externalInstanceMethod(#NSApplication, #"nextEventMatchingMask:untilDate:inMode:dequeue:") = NSEvent, CULong, NSDate, NSString, Bool;
overload externalInstanceMethod(#NSApplication, #"discardEventsMatchingMask:beforeEvent:") = Void, CULong, NSEvent;
overload externalInstanceMethod(#NSApplication, #"postEvent:atStart:") = Void, NSEvent, Bool;
overload externalInstanceMethod(#NSApplication, #"currentEvent") = NSEvent;
overload externalInstanceMethod(#NSApplication, #"sendEvent:") = Void, NSEvent;
overload externalInstanceMethod(#NSApplication, #"preventWindowOrdering") = Void;
overload externalInstanceMethod(#NSApplication, #"makeWindowsPerform:inOrder:") = NSWindow, SelectorHandle, Bool;
overload externalInstanceMethod(#NSApplication, #"windows") = NSArray;
overload externalInstanceMethod(#NSApplication, #"setWindowsNeedUpdate:") = Void, Bool;
overload externalInstanceMethod(#NSApplication, #"updateWindows") = Void;
overload externalInstanceMethod(#NSApplication, #"setMainMenu:") = Void, NSMenu;
overload externalInstanceMethod(#NSApplication, #"mainMenu") = NSMenu;
overload externalInstanceMethod(#NSApplication, #"setHelpMenu:") = Void, NSMenu;
overload externalInstanceMethod(#NSApplication, #"helpMenu") = NSMenu;
overload externalInstanceMethod(#NSApplication, #"setApplicationIconImage:") = Void, NSImage;
overload externalInstanceMethod(#NSApplication, #"applicationIconImage") = NSImage;
overload externalInstanceMethod(#NSApplication, #"activationPolicy") = CLong;
overload externalInstanceMethod(#NSApplication, #"setActivationPolicy:") = Bool, CLong;
overload externalInstanceMethod(#NSApplication, #"dockTile") = NSDockTile;
overload externalInstanceMethod(#NSApplication, #"sendAction:to:from:") = Bool, SelectorHandle, Id, Id;
overload externalInstanceMethod(#NSApplication, #"targetForAction:") = Id, SelectorHandle;
overload externalInstanceMethod(#NSApplication, #"targetForAction:to:from:") = Id, SelectorHandle, Id, Id;
overload externalInstanceMethod(#NSApplication, #"tryToPerform:with:") = Bool, SelectorHandle, Id;
overload externalInstanceMethod(#NSApplication, #"validRequestorForSendType:returnType:") = Id, NSString, NSString;
overload externalInstanceMethod(#NSApplication, #"reportException:") = Void, NSException;
overload externalClassMethod(#NSApplication, #"detachDrawingThread:toTarget:withObject:") = Void, SelectorHandle, Id, Id;
overload externalInstanceMethod(#NSApplication, #"replyToApplicationShouldTerminate:") = Void, Bool;
overload externalInstanceMethod(#NSApplication, #"replyToOpenOrPrint:") = Void, CULong;
overload externalInstanceMethod(#NSApplication, #"orderFrontCharacterPalette:") = Void, Id;
overload externalInstanceMethod(#NSApplication, #"presentationOptions") = CULong;
overload externalInstanceMethod(#NSApplication, #"setPresentationOptions:") = Void, CULong;
overload externalInstanceMethod(#NSApplication, #"currentSystemPresentationOptions") = CULong;
overload externalInstanceMethod(#NSApplication, #"setWindowsMenu:") = Void, NSMenu;
overload externalInstanceMethod(#NSApplication, #"windowsMenu") = NSMenu;
overload externalInstanceMethod(#NSApplication, #"arrangeInFront:") = Void, Id;
overload externalInstanceMethod(#NSApplication, #"removeWindowsItem:") = Void, NSWindow;
overload externalInstanceMethod(#NSApplication, #"addWindowsItem:title:filename:") = Void, NSWindow, NSString, Bool;
overload externalInstanceMethod(#NSApplication, #"changeWindowsItem:title:filename:") = Void, NSWindow, NSString, Bool;
overload externalInstanceMethod(#NSApplication, #"updateWindowsItem:") = Void, NSWindow;
overload externalInstanceMethod(#NSApplication, #"miniaturizeAll:") = Void, Id;
overload externalInstanceMethod(#NSApplication, #"isFullKeyboardAccessEnabled") = Bool;
overload externalInstanceMethod(#NSApplication, #"setServicesMenu:") = Void, NSMenu;
overload externalInstanceMethod(#NSApplication, #"servicesMenu") = NSMenu;
overload externalInstanceMethod(#NSApplication, #"registerServicesMenuSendTypes:returnTypes:") = Void, NSArray, NSArray;
overload externalInstanceMethod(#NSApplication, #"setServicesProvider:") = Void, Id;
overload externalInstanceMethod(#NSApplication, #"servicesProvider") = Id;
overload externalInstanceMethod(#NSApplication, #"orderFrontStandardAboutPanel:") = Void, Id;
overload externalInstanceMethod(#NSApplication, #"orderFrontStandardAboutPanelWithOptions:") = Void, NSDictionary;
overload externalInstanceMethod(#NSApplication, #"userInterfaceLayoutDirection") = CLong;
overload externalInstanceMethod(#NSApplication, #"runModalForWindow:relativeToWindow:") = CLong, NSWindow, NSWindow;
overload externalInstanceMethod(#NSApplication, #"beginModalSessionForWindow:relativeToWindow:") = NSModalSession, NSWindow, NSWindow;
overload externalInstanceMethod(#NSApplication, #"application:printFiles:") = Void, NSApplication, NSArray;
overload externalInstanceMethod(#NSApplication, #"orderFrontColorPanel:") = Void, Id;
overload externalInstanceMethod(#NSApplication, #"activateContextHelpMode:") = Void, Id;
overload externalInstanceMethod(#NSApplication, #"showHelp:") = Void, Id;
overload externalInstanceMethod(#NSApplication, #"runPageLayout:") = Void, Id;
overload externalInstanceMethod(#NSApplication, #"orderedDocuments") = NSArray;
overload externalInstanceMethod(#NSApplication, #"orderedWindows") = NSArray;
overload externalInstanceMethod(#NSApplication, #"registerUserInterfaceItemSearchHandler:") = Void, Id;
overload externalInstanceMethod(#NSApplication, #"unregisterUserInterfaceItemSearchHandler:") = Void, Id;
overload externalInstanceMethod(#NSApplication, #"searchString:inUserInterfaceItemString:searchRange:foundRange:") = Bool, NSString, NSString, NSRange, Pointer[NSRange];

record NSArrayController = externalClass(NSObjectController);
overload externalInstanceMethod(#NSArrayController, #"rearrangeObjects") = Void;
overload externalInstanceMethod(#NSArrayController, #"setAutomaticallyRearrangesObjects:") = Void, Bool;
overload externalInstanceMethod(#NSArrayController, #"automaticallyRearrangesObjects") = Bool;
overload externalInstanceMethod(#NSArrayController, #"automaticRearrangementKeyPaths") = NSArray;
overload externalInstanceMethod(#NSArrayController, #"didChangeArrangementCriteria") = Void;
overload externalInstanceMethod(#NSArrayController, #"setSortDescriptors:") = Void, NSArray;
overload externalInstanceMethod(#NSArrayController, #"sortDescriptors") = NSArray;
overload externalInstanceMethod(#NSArrayController, #"setFilterPredicate:") = Void, NSPredicate;
overload externalInstanceMethod(#NSArrayController, #"filterPredicate") = NSPredicate;
overload externalInstanceMethod(#NSArrayController, #"setClearsFilterPredicateOnInsertion:") = Void, Bool;
overload externalInstanceMethod(#NSArrayController, #"clearsFilterPredicateOnInsertion") = Bool;
overload externalInstanceMethod(#NSArrayController, #"arrangeObjects:") = NSArray, NSArray;
overload externalInstanceMethod(#NSArrayController, #"arrangedObjects") = Id;
overload externalInstanceMethod(#NSArrayController, #"setAvoidsEmptySelection:") = Void, Bool;
overload externalInstanceMethod(#NSArrayController, #"avoidsEmptySelection") = Bool;
overload externalInstanceMethod(#NSArrayController, #"setPreservesSelection:") = Void, Bool;
overload externalInstanceMethod(#NSArrayController, #"preservesSelection") = Bool;
overload externalInstanceMethod(#NSArrayController, #"setSelectsInsertedObjects:") = Void, Bool;
overload externalInstanceMethod(#NSArrayController, #"selectsInsertedObjects") = Bool;
overload externalInstanceMethod(#NSArrayController, #"setAlwaysUsesMultipleValuesMarker:") = Void, Bool;
overload externalInstanceMethod(#NSArrayController, #"alwaysUsesMultipleValuesMarker") = Bool;
overload externalInstanceMethod(#NSArrayController, #"setSelectionIndexes:") = Bool, NSIndexSet;
overload externalInstanceMethod(#NSArrayController, #"selectionIndexes") = NSIndexSet;
overload externalInstanceMethod(#NSArrayController, #"setSelectionIndex:") = Bool, CULong;
overload externalInstanceMethod(#NSArrayController, #"selectionIndex") = CULong;
overload externalInstanceMethod(#NSArrayController, #"addSelectionIndexes:") = Bool, NSIndexSet;
overload externalInstanceMethod(#NSArrayController, #"removeSelectionIndexes:") = Bool, NSIndexSet;
overload externalInstanceMethod(#NSArrayController, #"setSelectedObjects:") = Bool, NSArray;
overload externalInstanceMethod(#NSArrayController, #"selectedObjects") = NSArray;
overload externalInstanceMethod(#NSArrayController, #"addSelectedObjects:") = Bool, NSArray;
overload externalInstanceMethod(#NSArrayController, #"removeSelectedObjects:") = Bool, NSArray;
overload externalInstanceMethod(#NSArrayController, #"add:") = Void, Id;
overload externalInstanceMethod(#NSArrayController, #"remove:") = Void, Id;
overload externalInstanceMethod(#NSArrayController, #"insert:") = Void, Id;
overload externalInstanceMethod(#NSArrayController, #"canInsert") = Bool;
overload externalInstanceMethod(#NSArrayController, #"selectNext:") = Void, Id;
overload externalInstanceMethod(#NSArrayController, #"selectPrevious:") = Void, Id;
overload externalInstanceMethod(#NSArrayController, #"canSelectNext") = Bool;
overload externalInstanceMethod(#NSArrayController, #"canSelectPrevious") = Bool;
overload externalInstanceMethod(#NSArrayController, #"addObject:") = Void, Id;
overload externalInstanceMethod(#NSArrayController, #"addObjects:") = Void, NSArray;
overload externalInstanceMethod(#NSArrayController, #"insertObject:atArrangedObjectIndex:") = Void, Id, CULong;
overload externalInstanceMethod(#NSArrayController, #"insertObjects:atArrangedObjectIndexes:") = Void, NSArray, NSIndexSet;
overload externalInstanceMethod(#NSArrayController, #"removeObjectAtArrangedObjectIndex:") = Void, CULong;
overload externalInstanceMethod(#NSArrayController, #"removeObjectsAtArrangedObjectIndexes:") = Void, NSIndexSet;
overload externalInstanceMethod(#NSArrayController, #"removeObject:") = Void, Id;
overload externalInstanceMethod(#NSArrayController, #"removeObjects:") = Void, NSArray;

overload externalInstanceMethod(#NSAttributedString, #"fontAttributesInRange:") = NSDictionary, NSRange;
overload externalInstanceMethod(#NSAttributedString, #"rulerAttributesInRange:") = NSDictionary, NSRange;
overload externalInstanceMethod(#NSAttributedString, #"containsAttachments") = Bool;
overload externalInstanceMethod(#NSAttributedString, #"lineBreakBeforeIndex:withinRange:") = CULong, CULong, NSRange;
overload externalInstanceMethod(#NSAttributedString, #"lineBreakByHyphenatingBeforeIndex:withinRange:") = CULong, CULong, NSRange;
overload externalInstanceMethod(#NSAttributedString, #"doubleClickAtIndex:") = NSRange, CULong;
overload externalInstanceMethod(#NSAttributedString, #"nextWordFromIndex:forward:") = CULong, CULong, Bool;
overload externalInstanceMethod(#NSAttributedString, #"URLAtIndex:effectiveRange:") = NSURL, CULong, NSRangePointer;
overload externalClassMethod(#NSAttributedString, #"textTypes") = NSArray;
overload externalClassMethod(#NSAttributedString, #"textUnfilteredTypes") = NSArray;
overload externalInstanceMethod(#NSAttributedString, #"rangeOfTextBlock:atIndex:") = NSRange, NSTextBlock, CULong;
overload externalInstanceMethod(#NSAttributedString, #"rangeOfTextTable:atIndex:") = NSRange, NSTextTable, CULong;
overload externalInstanceMethod(#NSAttributedString, #"rangeOfTextList:atIndex:") = NSRange, NSTextList, CULong;
overload externalInstanceMethod(#NSAttributedString, #"itemNumberInTextList:atIndex:") = CLong, NSTextList, CULong;
overload externalInstanceMethod(#NSAttributedString, #"initWithURL:options:documentAttributes:error:") = Id, NSURL, NSDictionary, Pointer[NSDictionary], Pointer[NSError];
overload externalInstanceMethod(#NSAttributedString, #"initWithData:options:documentAttributes:error:") = Id, NSData, NSDictionary, Pointer[NSDictionary], Pointer[NSError];
overload externalInstanceMethod(#NSAttributedString, #"initWithPath:documentAttributes:") = Id, NSString, Pointer[NSDictionary];
overload externalInstanceMethod(#NSAttributedString, #"initWithURL:documentAttributes:") = Id, NSURL, Pointer[NSDictionary];
overload externalInstanceMethod(#NSAttributedString, #"initWithRTF:documentAttributes:") = Id, NSData, Pointer[NSDictionary];
overload externalInstanceMethod(#NSAttributedString, #"initWithRTFD:documentAttributes:") = Id, NSData, Pointer[NSDictionary];
overload externalInstanceMethod(#NSAttributedString, #"initWithHTML:documentAttributes:") = Id, NSData, Pointer[NSDictionary];
overload externalInstanceMethod(#NSAttributedString, #"initWithHTML:baseURL:documentAttributes:") = Id, NSData, NSURL, Pointer[NSDictionary];
overload externalInstanceMethod(#NSAttributedString, #"initWithDocFormat:documentAttributes:") = Id, NSData, Pointer[NSDictionary];
overload externalInstanceMethod(#NSAttributedString, #"initWithHTML:options:documentAttributes:") = Id, NSData, NSDictionary, Pointer[NSDictionary];
overload externalInstanceMethod(#NSAttributedString, #"initWithRTFDFileWrapper:documentAttributes:") = Id, NSFileWrapper, Pointer[NSDictionary];
overload externalInstanceMethod(#NSAttributedString, #"dataFromRange:documentAttributes:error:") = NSData, NSRange, NSDictionary, Pointer[NSError];
overload externalInstanceMethod(#NSAttributedString, #"fileWrapperFromRange:documentAttributes:error:") = NSFileWrapper, NSRange, NSDictionary, Pointer[NSError];
overload externalInstanceMethod(#NSAttributedString, #"RTFFromRange:documentAttributes:") = NSData, NSRange, NSDictionary;
overload externalInstanceMethod(#NSAttributedString, #"RTFDFromRange:documentAttributes:") = NSData, NSRange, NSDictionary;
overload externalInstanceMethod(#NSAttributedString, #"RTFDFileWrapperFromRange:documentAttributes:") = NSFileWrapper, NSRange, NSDictionary;
overload externalInstanceMethod(#NSAttributedString, #"docFormatFromRange:documentAttributes:") = NSData, NSRange, NSDictionary;
overload externalClassMethod(#NSAttributedString, #"textFileTypes") = NSArray;
overload externalClassMethod(#NSAttributedString, #"textPasteboardTypes") = NSArray;
overload externalClassMethod(#NSAttributedString, #"textUnfilteredFileTypes") = NSArray;
overload externalClassMethod(#NSAttributedString, #"textUnfilteredPasteboardTypes") = NSArray;
overload externalClassMethod(#NSAttributedString, #"attributedStringWithAttachment:") = NSAttributedString, NSTextAttachment;
overload externalInstanceMethod(#NSAttributedString, #"size") = NSSize;
overload externalInstanceMethod(#NSAttributedString, #"drawAtPoint:") = Void, NSPoint;
overload externalInstanceMethod(#NSAttributedString, #"drawInRect:") = Void, NSRect;
overload externalInstanceMethod(#NSAttributedString, #"drawWithRect:options:") = Void, NSRect, CLong;
overload externalInstanceMethod(#NSAttributedString, #"boundingRectWithSize:options:") = NSRect, NSSize, CLong;

record NSBezierPath = externalClass(NSObject);
overload externalInstanceMethod(#NSBezierPath, #"copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#NSBezierPath, #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSBezierPath, #"initWithCoder:") = Id, NSCoder;
overload externalClassMethod(#NSBezierPath, #"bezierPath") = NSBezierPath;
overload externalClassMethod(#NSBezierPath, #"bezierPathWithRect:") = NSBezierPath, NSRect;
overload externalClassMethod(#NSBezierPath, #"bezierPathWithOvalInRect:") = NSBezierPath, NSRect;
overload externalClassMethod(#NSBezierPath, #"bezierPathWithRoundedRect:xRadius:yRadius:") = NSBezierPath, NSRect, Double, Double;
overload externalClassMethod(#NSBezierPath, #"fillRect:") = Void, NSRect;
overload externalClassMethod(#NSBezierPath, #"strokeRect:") = Void, NSRect;
overload externalClassMethod(#NSBezierPath, #"clipRect:") = Void, NSRect;
overload externalClassMethod(#NSBezierPath, #"strokeLineFromPoint:toPoint:") = Void, NSPoint, NSPoint;
overload externalClassMethod(#NSBezierPath, #"drawPackedGlyphs:atPoint:") = Void, Pointer[CChar], NSPoint;
overload externalClassMethod(#NSBezierPath, #"setDefaultMiterLimit:") = Void, Double;
overload externalClassMethod(#NSBezierPath, #"defaultMiterLimit") = Double;
overload externalClassMethod(#NSBezierPath, #"setDefaultFlatness:") = Void, Double;
overload externalClassMethod(#NSBezierPath, #"defaultFlatness") = Double;
overload externalClassMethod(#NSBezierPath, #"setDefaultWindingRule:") = Void, CULong;
overload externalClassMethod(#NSBezierPath, #"defaultWindingRule") = CULong;
overload externalClassMethod(#NSBezierPath, #"setDefaultLineCapStyle:") = Void, CULong;
overload externalClassMethod(#NSBezierPath, #"defaultLineCapStyle") = CULong;
overload externalClassMethod(#NSBezierPath, #"setDefaultLineJoinStyle:") = Void, CULong;
overload externalClassMethod(#NSBezierPath, #"defaultLineJoinStyle") = CULong;
overload externalClassMethod(#NSBezierPath, #"setDefaultLineWidth:") = Void, Double;
overload externalClassMethod(#NSBezierPath, #"defaultLineWidth") = Double;
overload externalInstanceMethod(#NSBezierPath, #"moveToPoint:") = Void, NSPoint;
overload externalInstanceMethod(#NSBezierPath, #"lineToPoint:") = Void, NSPoint;
overload externalInstanceMethod(#NSBezierPath, #"curveToPoint:controlPoint1:controlPoint2:") = Void, NSPoint, NSPoint, NSPoint;
overload externalInstanceMethod(#NSBezierPath, #"closePath") = Void;
overload externalInstanceMethod(#NSBezierPath, #"removeAllPoints") = Void;
overload externalInstanceMethod(#NSBezierPath, #"relativeMoveToPoint:") = Void, NSPoint;
overload externalInstanceMethod(#NSBezierPath, #"relativeLineToPoint:") = Void, NSPoint;
overload externalInstanceMethod(#NSBezierPath, #"relativeCurveToPoint:controlPoint1:controlPoint2:") = Void, NSPoint, NSPoint, NSPoint;
overload externalInstanceMethod(#NSBezierPath, #"lineWidth") = Double;
overload externalInstanceMethod(#NSBezierPath, #"setLineWidth:") = Void, Double;
overload externalInstanceMethod(#NSBezierPath, #"lineCapStyle") = CULong;
overload externalInstanceMethod(#NSBezierPath, #"setLineCapStyle:") = Void, CULong;
overload externalInstanceMethod(#NSBezierPath, #"lineJoinStyle") = CULong;
overload externalInstanceMethod(#NSBezierPath, #"setLineJoinStyle:") = Void, CULong;
overload externalInstanceMethod(#NSBezierPath, #"windingRule") = CULong;
overload externalInstanceMethod(#NSBezierPath, #"setWindingRule:") = Void, CULong;
overload externalInstanceMethod(#NSBezierPath, #"miterLimit") = Double;
overload externalInstanceMethod(#NSBezierPath, #"setMiterLimit:") = Void, Double;
overload externalInstanceMethod(#NSBezierPath, #"flatness") = Double;
overload externalInstanceMethod(#NSBezierPath, #"setFlatness:") = Void, Double;
overload externalInstanceMethod(#NSBezierPath, #"getLineDash:count:phase:") = Void, Pointer[Double], Pointer[CLong], Pointer[Double];
overload externalInstanceMethod(#NSBezierPath, #"setLineDash:count:phase:") = Void, Pointer[Double], CLong, Double;
overload externalInstanceMethod(#NSBezierPath, #"stroke") = Void;
overload externalInstanceMethod(#NSBezierPath, #"fill") = Void;
overload externalInstanceMethod(#NSBezierPath, #"addClip") = Void;
overload externalInstanceMethod(#NSBezierPath, #"setClip") = Void;
overload externalInstanceMethod(#NSBezierPath, #"bezierPathByFlatteningPath") = NSBezierPath;
overload externalInstanceMethod(#NSBezierPath, #"bezierPathByReversingPath") = NSBezierPath;
overload externalInstanceMethod(#NSBezierPath, #"transformUsingAffineTransform:") = Void, NSAffineTransform;
overload externalInstanceMethod(#NSBezierPath, #"isEmpty") = Bool;
overload externalInstanceMethod(#NSBezierPath, #"currentPoint") = NSPoint;
overload externalInstanceMethod(#NSBezierPath, #"controlPointBounds") = NSRect;
overload externalInstanceMethod(#NSBezierPath, #"bounds") = NSRect;
overload externalInstanceMethod(#NSBezierPath, #"elementCount") = CLong;
overload externalInstanceMethod(#NSBezierPath, #"elementAtIndex:associatedPoints:") = CULong, CLong, NSPointArray;
overload externalInstanceMethod(#NSBezierPath, #"elementAtIndex:") = CULong, CLong;
overload externalInstanceMethod(#NSBezierPath, #"setAssociatedPoints:atIndex:") = Void, NSPointArray, CLong;
overload externalInstanceMethod(#NSBezierPath, #"appendBezierPath:") = Void, NSBezierPath;
overload externalInstanceMethod(#NSBezierPath, #"appendBezierPathWithRect:") = Void, NSRect;
overload externalInstanceMethod(#NSBezierPath, #"appendBezierPathWithPoints:count:") = Void, NSPointArray, CLong;
overload externalInstanceMethod(#NSBezierPath, #"appendBezierPathWithOvalInRect:") = Void, NSRect;
overload externalInstanceMethod(#NSBezierPath, #"appendBezierPathWithArcWithCenter:radius:startAngle:endAngle:clockwise:") = Void, NSPoint, Double, Double, Double, Bool;
overload externalInstanceMethod(#NSBezierPath, #"appendBezierPathWithArcWithCenter:radius:startAngle:endAngle:") = Void, NSPoint, Double, Double, Double;
overload externalInstanceMethod(#NSBezierPath, #"appendBezierPathWithArcFromPoint:toPoint:radius:") = Void, NSPoint, NSPoint, Double;
overload externalInstanceMethod(#NSBezierPath, #"appendBezierPathWithGlyph:inFont:") = Void, UInt, NSFont;
overload externalInstanceMethod(#NSBezierPath, #"appendBezierPathWithGlyphs:count:inFont:") = Void, Pointer[UInt], CLong, NSFont;
overload externalInstanceMethod(#NSBezierPath, #"appendBezierPathWithPackedGlyphs:") = Void, Pointer[CChar];
overload externalInstanceMethod(#NSBezierPath, #"appendBezierPathWithRoundedRect:xRadius:yRadius:") = Void, NSRect, Double, Double;
overload externalInstanceMethod(#NSBezierPath, #"containsPoint:") = Bool, NSPoint;
overload externalInstanceMethod(#NSBezierPath, #"cachesBezierPath") = Bool;
overload externalInstanceMethod(#NSBezierPath, #"setCachesBezierPath:") = Void, Bool;

record NSBitmapImageRep = externalClass(NSImageRep);
overload externalInstanceMethod(#NSBitmapImageRep, #"initWithFocusedViewRect:") = Id, NSRect;
overload externalInstanceMethod(#NSBitmapImageRep, #"initWithBitmapDataPlanes:pixelsWide:pixelsHigh:bitsPerSample:samplesPerPixel:hasAlpha:isPlanar:colorSpaceName:bytesPerRow:bitsPerPixel:") = Id, Pointer[Pointer[CUChar]], CLong, CLong, CLong, CLong, Bool, Bool, NSString, CLong, CLong;
overload externalInstanceMethod(#NSBitmapImageRep, #"initWithBitmapDataPlanes:pixelsWide:pixelsHigh:bitsPerSample:samplesPerPixel:hasAlpha:isPlanar:colorSpaceName:bitmapFormat:bytesPerRow:bitsPerPixel:") = Id, Pointer[Pointer[CUChar]], CLong, CLong, CLong, CLong, Bool, Bool, NSString, CULong, CLong, CLong;
overload externalInstanceMethod(#NSBitmapImageRep, #"initWithCGImage:") = Id, CGImageRef;
overload externalInstanceMethod(#NSBitmapImageRep, #"initWithCIImage:") = Id, CIImage;
overload externalClassMethod(#NSBitmapImageRep, #"imageRepsWithData:") = NSArray, NSData;
overload externalClassMethod(#NSBitmapImageRep, #"imageRepWithData:") = Id, NSData;
overload externalInstanceMethod(#NSBitmapImageRep, #"initWithData:") = Id, NSData;
overload externalInstanceMethod(#NSBitmapImageRep, #"bitmapData") = Pointer[CUChar];
overload externalInstanceMethod(#NSBitmapImageRep, #"getBitmapDataPlanes:") = Void, Pointer[Pointer[CUChar]];
overload externalInstanceMethod(#NSBitmapImageRep, #"isPlanar") = Bool;
overload externalInstanceMethod(#NSBitmapImageRep, #"samplesPerPixel") = CLong;
overload externalInstanceMethod(#NSBitmapImageRep, #"bitsPerPixel") = CLong;
overload externalInstanceMethod(#NSBitmapImageRep, #"bytesPerRow") = CLong;
overload externalInstanceMethod(#NSBitmapImageRep, #"bytesPerPlane") = CLong;
overload externalInstanceMethod(#NSBitmapImageRep, #"numberOfPlanes") = CLong;
overload externalInstanceMethod(#NSBitmapImageRep, #"bitmapFormat") = CULong;
overload externalInstanceMethod(#NSBitmapImageRep, #"getCompression:factor:") = Void, Pointer[CULong], Pointer[Float];
overload externalInstanceMethod(#NSBitmapImageRep, #"setCompression:factor:") = Void, CULong, Float;
overload externalInstanceMethod(#NSBitmapImageRep, #"TIFFRepresentation") = NSData;
overload externalInstanceMethod(#NSBitmapImageRep, #"TIFFRepresentationUsingCompression:factor:") = NSData, CULong, Float;
overload externalClassMethod(#NSBitmapImageRep, #"TIFFRepresentationOfImageRepsInArray:") = NSData, NSArray;
overload externalClassMethod(#NSBitmapImageRep, #"TIFFRepresentationOfImageRepsInArray:usingCompression:factor:") = NSData, NSArray, CULong, Float;
overload externalClassMethod(#NSBitmapImageRep, #"getTIFFCompressionTypes:count:") = Void, Pointer[Pointer[CULong]], Pointer[CLong];
overload externalClassMethod(#NSBitmapImageRep, #"localizedNameForTIFFCompressionType:") = NSString, CULong;
overload externalInstanceMethod(#NSBitmapImageRep, #"canBeCompressedUsing:") = Bool, CULong;
overload externalInstanceMethod(#NSBitmapImageRep, #"colorizeByMappingGray:toColor:blackMapping:whiteMapping:") = Void, Double, NSColor, NSColor, NSColor;
overload externalInstanceMethod(#NSBitmapImageRep, #"initForIncrementalLoad") = Id;
overload externalInstanceMethod(#NSBitmapImageRep, #"incrementalLoadFromData:complete:") = CLong, NSData, Bool;
overload externalInstanceMethod(#NSBitmapImageRep, #"setColor:atX:y:") = Void, NSColor, CLong, CLong;
overload externalInstanceMethod(#NSBitmapImageRep, #"colorAtX:y:") = NSColor, CLong, CLong;
overload externalInstanceMethod(#NSBitmapImageRep, #"getPixel:atX:y:") = Void, Pointer[CULong], CLong, CLong;
overload externalInstanceMethod(#NSBitmapImageRep, #"setPixel:atX:y:") = Void, Pointer[CULong], CLong, CLong;
overload externalInstanceMethod(#NSBitmapImageRep, #"CGImage") = CGImageRef;
overload externalInstanceMethod(#NSBitmapImageRep, #"colorSpace") = NSColorSpace;
overload externalInstanceMethod(#NSBitmapImageRep, #"bitmapImageRepByConvertingToColorSpace:renderingIntent:") = NSBitmapImageRep, NSColorSpace, CLong;
overload externalInstanceMethod(#NSBitmapImageRep, #"bitmapImageRepByRetaggingWithColorSpace:") = NSBitmapImageRep, NSColorSpace;
overload externalClassMethod(#NSBitmapImageRep, #"representationOfImageRepsInArray:usingType:properties:") = NSData, NSArray, CULong, NSDictionary;
overload externalInstanceMethod(#NSBitmapImageRep, #"representationUsingType:properties:") = NSData, CULong, NSDictionary;
overload externalInstanceMethod(#NSBitmapImageRep, #"setProperty:withValue:") = Void, NSString, Id;
overload externalInstanceMethod(#NSBitmapImageRep, #"valueForProperty:") = Id, NSString;

record NSBox = externalClass(NSView);
overload externalInstanceMethod(#NSBox, #"borderType") = CULong;
overload externalInstanceMethod(#NSBox, #"titlePosition") = CULong;
overload externalInstanceMethod(#NSBox, #"setBorderType:") = Void, CULong;
overload externalInstanceMethod(#NSBox, #"setBoxType:") = Void, CULong;
overload externalInstanceMethod(#NSBox, #"boxType") = CULong;
overload externalInstanceMethod(#NSBox, #"setTitlePosition:") = Void, CULong;
overload externalInstanceMethod(#NSBox, #"title") = NSString;
overload externalInstanceMethod(#NSBox, #"setTitle:") = Void, NSString;
overload externalInstanceMethod(#NSBox, #"titleFont") = NSFont;
overload externalInstanceMethod(#NSBox, #"setTitleFont:") = Void, NSFont;
overload externalInstanceMethod(#NSBox, #"borderRect") = NSRect;
overload externalInstanceMethod(#NSBox, #"titleRect") = NSRect;
overload externalInstanceMethod(#NSBox, #"titleCell") = Id;
overload externalInstanceMethod(#NSBox, #"sizeToFit") = Void;
overload externalInstanceMethod(#NSBox, #"contentViewMargins") = NSSize;
overload externalInstanceMethod(#NSBox, #"setContentViewMargins:") = Void, NSSize;
overload externalInstanceMethod(#NSBox, #"setFrameFromContentFrame:") = Void, NSRect;
overload externalInstanceMethod(#NSBox, #"contentView") = Id;
overload externalInstanceMethod(#NSBox, #"setContentView:") = Void, NSView;
overload externalInstanceMethod(#NSBox, #"isTransparent") = Bool;
overload externalInstanceMethod(#NSBox, #"setTransparent:") = Void, Bool;
overload externalInstanceMethod(#NSBox, #"setTitleWithMnemonic:") = Void, NSString;
overload externalInstanceMethod(#NSBox, #"borderWidth") = Double;
overload externalInstanceMethod(#NSBox, #"setBorderWidth:") = Void, Double;
overload externalInstanceMethod(#NSBox, #"cornerRadius") = Double;
overload externalInstanceMethod(#NSBox, #"setCornerRadius:") = Void, Double;
overload externalInstanceMethod(#NSBox, #"borderColor") = NSColor;
overload externalInstanceMethod(#NSBox, #"setBorderColor:") = Void, NSColor;
overload externalInstanceMethod(#NSBox, #"fillColor") = NSColor;
overload externalInstanceMethod(#NSBox, #"setFillColor:") = Void, NSColor;

record NSBrowser = externalClass(NSControl);
overload externalClassMethod(#NSBrowser, #"cellClass") = Id;
overload externalInstanceMethod(#NSBrowser, #"loadColumnZero") = Void;
overload externalInstanceMethod(#NSBrowser, #"isLoaded") = Bool;
overload externalInstanceMethod(#NSBrowser, #"setDoubleAction:") = Void, SelectorHandle;
overload externalInstanceMethod(#NSBrowser, #"doubleAction") = SelectorHandle;
overload externalInstanceMethod(#NSBrowser, #"setMatrixClass:") = Void, Id;
overload externalInstanceMethod(#NSBrowser, #"matrixClass") = Id;
overload externalInstanceMethod(#NSBrowser, #"setCellClass:") = Void, Id;
overload externalInstanceMethod(#NSBrowser, #"setCellPrototype:") = Void, NSCell;
overload externalInstanceMethod(#NSBrowser, #"cellPrototype") = Id;
overload externalInstanceMethod(#NSBrowser, #"setDelegate:") = Void, Id;
overload externalInstanceMethod(#NSBrowser, #"delegate") = Id;
overload externalInstanceMethod(#NSBrowser, #"setReusesColumns:") = Void, Bool;
overload externalInstanceMethod(#NSBrowser, #"reusesColumns") = Bool;
overload externalInstanceMethod(#NSBrowser, #"setHasHorizontalScroller:") = Void, Bool;
overload externalInstanceMethod(#NSBrowser, #"hasHorizontalScroller") = Bool;
overload externalInstanceMethod(#NSBrowser, #"setAutohidesScroller:") = Void, Bool;
overload externalInstanceMethod(#NSBrowser, #"autohidesScroller") = Bool;
overload externalInstanceMethod(#NSBrowser, #"setSeparatesColumns:") = Void, Bool;
overload externalInstanceMethod(#NSBrowser, #"separatesColumns") = Bool;
overload externalInstanceMethod(#NSBrowser, #"setTitled:") = Void, Bool;
overload externalInstanceMethod(#NSBrowser, #"isTitled") = Bool;
overload externalInstanceMethod(#NSBrowser, #"setMinColumnWidth:") = Void, Double;
overload externalInstanceMethod(#NSBrowser, #"minColumnWidth") = Double;
overload externalInstanceMethod(#NSBrowser, #"setMaxVisibleColumns:") = Void, CLong;
overload externalInstanceMethod(#NSBrowser, #"maxVisibleColumns") = CLong;
overload externalInstanceMethod(#NSBrowser, #"setAllowsMultipleSelection:") = Void, Bool;
overload externalInstanceMethod(#NSBrowser, #"allowsMultipleSelection") = Bool;
overload externalInstanceMethod(#NSBrowser, #"setAllowsBranchSelection:") = Void, Bool;
overload externalInstanceMethod(#NSBrowser, #"allowsBranchSelection") = Bool;
overload externalInstanceMethod(#NSBrowser, #"setAllowsEmptySelection:") = Void, Bool;
overload externalInstanceMethod(#NSBrowser, #"allowsEmptySelection") = Bool;
overload externalInstanceMethod(#NSBrowser, #"setTakesTitleFromPreviousColumn:") = Void, Bool;
overload externalInstanceMethod(#NSBrowser, #"takesTitleFromPreviousColumn") = Bool;
overload externalInstanceMethod(#NSBrowser, #"setSendsActionOnArrowKeys:") = Void, Bool;
overload externalInstanceMethod(#NSBrowser, #"sendsActionOnArrowKeys") = Bool;
overload externalInstanceMethod(#NSBrowser, #"itemAtIndexPath:") = Id, NSIndexPath;
overload externalInstanceMethod(#NSBrowser, #"itemAtRow:inColumn:") = Id, CLong, CLong;
overload externalInstanceMethod(#NSBrowser, #"indexPathForColumn:") = NSIndexPath, CLong;
overload externalInstanceMethod(#NSBrowser, #"isLeafItem:") = Bool, Id;
overload externalInstanceMethod(#NSBrowser, #"reloadDataForRowIndexes:inColumn:") = Void, NSIndexSet, CLong;
overload externalInstanceMethod(#NSBrowser, #"parentForItemsInColumn:") = Id, CLong;
overload externalInstanceMethod(#NSBrowser, #"scrollRowToVisible:inColumn:") = Void, CLong, CLong;
overload externalInstanceMethod(#NSBrowser, #"setTitle:ofColumn:") = Void, NSString, CLong;
overload externalInstanceMethod(#NSBrowser, #"titleOfColumn:") = NSString, CLong;
overload externalInstanceMethod(#NSBrowser, #"setPathSeparator:") = Void, NSString;
overload externalInstanceMethod(#NSBrowser, #"pathSeparator") = NSString;
overload externalInstanceMethod(#NSBrowser, #"setPath:") = Bool, NSString;
overload externalInstanceMethod(#NSBrowser, #"path") = NSString;
overload externalInstanceMethod(#NSBrowser, #"pathToColumn:") = NSString, CLong;
overload externalInstanceMethod(#NSBrowser, #"clickedColumn") = CLong;
overload externalInstanceMethod(#NSBrowser, #"clickedRow") = CLong;
overload externalInstanceMethod(#NSBrowser, #"selectedColumn") = CLong;
overload externalInstanceMethod(#NSBrowser, #"selectedCell") = Id;
overload externalInstanceMethod(#NSBrowser, #"selectedCellInColumn:") = Id, CLong;
overload externalInstanceMethod(#NSBrowser, #"selectedCells") = NSArray;
overload externalInstanceMethod(#NSBrowser, #"selectRow:inColumn:") = Void, CLong, CLong;
overload externalInstanceMethod(#NSBrowser, #"selectedRowInColumn:") = CLong, CLong;
overload externalInstanceMethod(#NSBrowser, #"selectionIndexPath") = NSIndexPath;
overload externalInstanceMethod(#NSBrowser, #"setSelectionIndexPath:") = Void, NSIndexPath;
overload externalInstanceMethod(#NSBrowser, #"selectionIndexPaths") = NSArray;
overload externalInstanceMethod(#NSBrowser, #"setSelectionIndexPaths:") = Void, NSArray;
overload externalInstanceMethod(#NSBrowser, #"selectRowIndexes:inColumn:") = Void, NSIndexSet, CLong;
overload externalInstanceMethod(#NSBrowser, #"selectedRowIndexesInColumn:") = NSIndexSet, CLong;
overload externalInstanceMethod(#NSBrowser, #"reloadColumn:") = Void, CLong;
overload externalInstanceMethod(#NSBrowser, #"validateVisibleColumns") = Void;
overload externalInstanceMethod(#NSBrowser, #"scrollColumnsRightBy:") = Void, CLong;
overload externalInstanceMethod(#NSBrowser, #"scrollColumnsLeftBy:") = Void, CLong;
overload externalInstanceMethod(#NSBrowser, #"scrollColumnToVisible:") = Void, CLong;
overload externalInstanceMethod(#NSBrowser, #"lastColumn") = CLong;
overload externalInstanceMethod(#NSBrowser, #"setLastColumn:") = Void, CLong;
overload externalInstanceMethod(#NSBrowser, #"addColumn") = Void;
overload externalInstanceMethod(#NSBrowser, #"numberOfVisibleColumns") = CLong;
overload externalInstanceMethod(#NSBrowser, #"firstVisibleColumn") = CLong;
overload externalInstanceMethod(#NSBrowser, #"lastVisibleColumn") = CLong;
overload externalInstanceMethod(#NSBrowser, #"columnOfMatrix:") = CLong, NSMatrix;
overload externalInstanceMethod(#NSBrowser, #"matrixInColumn:") = NSMatrix, CLong;
overload externalInstanceMethod(#NSBrowser, #"loadedCellAtRow:column:") = Id, CLong, CLong;
overload externalInstanceMethod(#NSBrowser, #"selectAll:") = Void, Id;
overload externalInstanceMethod(#NSBrowser, #"tile") = Void;
overload externalInstanceMethod(#NSBrowser, #"doClick:") = Void, Id;
overload externalInstanceMethod(#NSBrowser, #"doDoubleClick:") = Void, Id;
overload externalInstanceMethod(#NSBrowser, #"sendAction") = Bool;
overload externalInstanceMethod(#NSBrowser, #"titleFrameOfColumn:") = NSRect, CLong;
overload externalInstanceMethod(#NSBrowser, #"drawTitleOfColumn:inRect:") = Void, CLong, NSRect;
overload externalInstanceMethod(#NSBrowser, #"titleHeight") = Double;
overload externalInstanceMethod(#NSBrowser, #"frameOfColumn:") = NSRect, CLong;
overload externalInstanceMethod(#NSBrowser, #"frameOfInsideOfColumn:") = NSRect, CLong;
overload externalInstanceMethod(#NSBrowser, #"frameOfRow:inColumn:") = NSRect, CLong, CLong;
overload externalInstanceMethod(#NSBrowser, #"getRow:column:forPoint:") = Bool, Pointer[CLong], Pointer[CLong], NSPoint;
overload externalInstanceMethod(#NSBrowser, #"columnWidthForColumnContentWidth:") = Double, Double;
overload externalInstanceMethod(#NSBrowser, #"columnContentWidthForColumnWidth:") = Double, Double;
overload externalInstanceMethod(#NSBrowser, #"setColumnResizingType:") = Void, CULong;
overload externalInstanceMethod(#NSBrowser, #"columnResizingType") = CULong;
overload externalInstanceMethod(#NSBrowser, #"setPrefersAllColumnUserResizing:") = Void, Bool;
overload externalInstanceMethod(#NSBrowser, #"prefersAllColumnUserResizing") = Bool;
overload externalInstanceMethod(#NSBrowser, #"setWidth:ofColumn:") = Void, Double, CLong;
overload externalInstanceMethod(#NSBrowser, #"widthOfColumn:") = Double, CLong;
overload externalInstanceMethod(#NSBrowser, #"setRowHeight:") = Void, Double;
overload externalInstanceMethod(#NSBrowser, #"rowHeight") = Double;
overload externalInstanceMethod(#NSBrowser, #"noteHeightOfRowsWithIndexesChanged:inColumn:") = Void, NSIndexSet, CLong;
overload externalInstanceMethod(#NSBrowser, #"setDefaultColumnWidth:") = Void, Double;
overload externalInstanceMethod(#NSBrowser, #"defaultColumnWidth") = Double;
overload externalInstanceMethod(#NSBrowser, #"setColumnsAutosaveName:") = Void, NSString;
overload externalInstanceMethod(#NSBrowser, #"columnsAutosaveName") = NSString;
overload externalClassMethod(#NSBrowser, #"removeSavedColumnsWithAutosaveName:") = Void, NSString;
overload externalInstanceMethod(#NSBrowser, #"canDragRowsWithIndexes:inColumn:withEvent:") = Bool, NSIndexSet, CLong, NSEvent;
overload externalInstanceMethod(#NSBrowser, #"draggingImageForRowsWithIndexes:inColumn:withEvent:offset:") = NSImage, NSIndexSet, CLong, NSEvent, NSPointPointer;
overload externalInstanceMethod(#NSBrowser, #"setDraggingSourceOperationMask:forLocal:") = Void, CULong, Bool;
overload externalInstanceMethod(#NSBrowser, #"allowsTypeSelect") = Bool;
overload externalInstanceMethod(#NSBrowser, #"setAllowsTypeSelect:") = Void, Bool;
overload externalInstanceMethod(#NSBrowser, #"setBackgroundColor:") = Void, NSColor;
overload externalInstanceMethod(#NSBrowser, #"backgroundColor") = NSColor;
overload externalInstanceMethod(#NSBrowser, #"editItemAtIndexPath:withEvent:select:") = Void, NSIndexPath, NSEvent, Bool;
overload externalInstanceMethod(#NSBrowser, #"setAcceptsArrowKeys:") = Void, Bool;
overload externalInstanceMethod(#NSBrowser, #"acceptsArrowKeys") = Bool;
overload externalInstanceMethod(#NSBrowser, #"displayColumn:") = Void, CLong;
overload externalInstanceMethod(#NSBrowser, #"displayAllColumns") = Void;
overload externalInstanceMethod(#NSBrowser, #"scrollViaScroller:") = Void, NSScroller;
overload externalInstanceMethod(#NSBrowser, #"updateScroller") = Void;

record NSBrowserCell = externalClass(NSCell);
overload externalClassMethod(#NSBrowserCell, #"branchImage") = NSImage;
overload externalClassMethod(#NSBrowserCell, #"highlightedBranchImage") = NSImage;
overload externalInstanceMethod(#NSBrowserCell, #"highlightColorInView:") = NSColor, NSView;
overload externalInstanceMethod(#NSBrowserCell, #"isLeaf") = Bool;
overload externalInstanceMethod(#NSBrowserCell, #"setLeaf:") = Void, Bool;
overload externalInstanceMethod(#NSBrowserCell, #"isLoaded") = Bool;
overload externalInstanceMethod(#NSBrowserCell, #"setLoaded:") = Void, Bool;
overload externalInstanceMethod(#NSBrowserCell, #"reset") = Void;
overload externalInstanceMethod(#NSBrowserCell, #"set") = Void;
overload externalInstanceMethod(#NSBrowserCell, #"setImage:") = Void, NSImage;
overload externalInstanceMethod(#NSBrowserCell, #"image") = NSImage;
overload externalInstanceMethod(#NSBrowserCell, #"setAlternateImage:") = Void, NSImage;
overload externalInstanceMethod(#NSBrowserCell, #"alternateImage") = NSImage;

overload externalInstanceMethod(#NSBundle, #"contextHelpForKey:") = NSAttributedString, NSString;
overload externalInstanceMethod(#NSBundle, #"pathForImageResource:") = NSString, NSString;
overload externalInstanceMethod(#NSBundle, #"URLForImageResource:") = NSURL, NSString;
overload externalClassMethod(#NSBundle, #"loadNibFile:externalNameTable:withZone:") = Bool, NSString, NSDictionary, Pointer[NSZone];
overload externalClassMethod(#NSBundle, #"loadNibNamed:owner:") = Bool, NSString, Id;
overload externalInstanceMethod(#NSBundle, #"loadNibFile:externalNameTable:withZone:") = Bool, NSString, NSDictionary, Pointer[NSZone];
overload externalInstanceMethod(#NSBundle, #"pathForSoundResource:") = NSString, NSString;

record NSButton = externalClass(NSControl);
overload externalInstanceMethod(#NSButton, #"validateUserInterfaceItem:") = Bool, Id;
overload externalInstanceMethod(#NSButton, #"title") = NSString;
overload externalInstanceMethod(#NSButton, #"setTitle:") = Void, NSString;
overload externalInstanceMethod(#NSButton, #"alternateTitle") = NSString;
overload externalInstanceMethod(#NSButton, #"setAlternateTitle:") = Void, NSString;
overload externalInstanceMethod(#NSButton, #"image") = NSImage;
overload externalInstanceMethod(#NSButton, #"setImage:") = Void, NSImage;
overload externalInstanceMethod(#NSButton, #"alternateImage") = NSImage;
overload externalInstanceMethod(#NSButton, #"setAlternateImage:") = Void, NSImage;
overload externalInstanceMethod(#NSButton, #"imagePosition") = CULong;
overload externalInstanceMethod(#NSButton, #"setImagePosition:") = Void, CULong;
overload externalInstanceMethod(#NSButton, #"setButtonType:") = Void, CULong;
overload externalInstanceMethod(#NSButton, #"state") = CLong;
overload externalInstanceMethod(#NSButton, #"setState:") = Void, CLong;
overload externalInstanceMethod(#NSButton, #"isBordered") = Bool;
overload externalInstanceMethod(#NSButton, #"setBordered:") = Void, Bool;
overload externalInstanceMethod(#NSButton, #"isTransparent") = Bool;
overload externalInstanceMethod(#NSButton, #"setTransparent:") = Void, Bool;
overload externalInstanceMethod(#NSButton, #"setPeriodicDelay:interval:") = Void, Float, Float;
overload externalInstanceMethod(#NSButton, #"getPeriodicDelay:interval:") = Void, Pointer[Float], Pointer[Float];
overload externalInstanceMethod(#NSButton, #"keyEquivalent") = NSString;
overload externalInstanceMethod(#NSButton, #"setKeyEquivalent:") = Void, NSString;
overload externalInstanceMethod(#NSButton, #"keyEquivalentModifierMask") = CULong;
overload externalInstanceMethod(#NSButton, #"setKeyEquivalentModifierMask:") = Void, CULong;
overload externalInstanceMethod(#NSButton, #"highlight:") = Void, Bool;
overload externalInstanceMethod(#NSButton, #"performKeyEquivalent:") = Bool, NSEvent;
overload externalInstanceMethod(#NSButton, #"setTitleWithMnemonic:") = Void, NSString;
overload externalInstanceMethod(#NSButton, #"attributedTitle") = NSAttributedString;
overload externalInstanceMethod(#NSButton, #"setAttributedTitle:") = Void, NSAttributedString;
overload externalInstanceMethod(#NSButton, #"attributedAlternateTitle") = NSAttributedString;
overload externalInstanceMethod(#NSButton, #"setAttributedAlternateTitle:") = Void, NSAttributedString;
overload externalInstanceMethod(#NSButton, #"setBezelStyle:") = Void, CULong;
overload externalInstanceMethod(#NSButton, #"bezelStyle") = CULong;
overload externalInstanceMethod(#NSButton, #"setAllowsMixedState:") = Void, Bool;
overload externalInstanceMethod(#NSButton, #"allowsMixedState") = Bool;
overload externalInstanceMethod(#NSButton, #"setNextState") = Void;
overload externalInstanceMethod(#NSButton, #"setShowsBorderOnlyWhileMouseInside:") = Void, Bool;
overload externalInstanceMethod(#NSButton, #"showsBorderOnlyWhileMouseInside") = Bool;
overload externalInstanceMethod(#NSButton, #"setSound:") = Void, NSSound;
overload externalInstanceMethod(#NSButton, #"sound") = NSSound;

record NSButtonCell = externalClass(NSActionCell);
overload externalInstanceMethod(#NSButtonCell, #"title") = NSString;
overload externalInstanceMethod(#NSButtonCell, #"setTitle:") = Void, NSString;
overload externalInstanceMethod(#NSButtonCell, #"alternateTitle") = NSString;
overload externalInstanceMethod(#NSButtonCell, #"setAlternateTitle:") = Void, NSString;
overload externalInstanceMethod(#NSButtonCell, #"alternateImage") = NSImage;
overload externalInstanceMethod(#NSButtonCell, #"setAlternateImage:") = Void, NSImage;
overload externalInstanceMethod(#NSButtonCell, #"imagePosition") = CULong;
overload externalInstanceMethod(#NSButtonCell, #"setImagePosition:") = Void, CULong;
overload externalInstanceMethod(#NSButtonCell, #"imageScaling") = CULong;
overload externalInstanceMethod(#NSButtonCell, #"setImageScaling:") = Void, CULong;
overload externalInstanceMethod(#NSButtonCell, #"highlightsBy") = CLong;
overload externalInstanceMethod(#NSButtonCell, #"setHighlightsBy:") = Void, CLong;
overload externalInstanceMethod(#NSButtonCell, #"showsStateBy") = CLong;
overload externalInstanceMethod(#NSButtonCell, #"setShowsStateBy:") = Void, CLong;
overload externalInstanceMethod(#NSButtonCell, #"setButtonType:") = Void, CULong;
overload externalInstanceMethod(#NSButtonCell, #"isOpaque") = Bool;
overload externalInstanceMethod(#NSButtonCell, #"setFont:") = Void, NSFont;
overload externalInstanceMethod(#NSButtonCell, #"isTransparent") = Bool;
overload externalInstanceMethod(#NSButtonCell, #"setTransparent:") = Void, Bool;
overload externalInstanceMethod(#NSButtonCell, #"setPeriodicDelay:interval:") = Void, Float, Float;
overload externalInstanceMethod(#NSButtonCell, #"getPeriodicDelay:interval:") = Void, Pointer[Float], Pointer[Float];
overload externalInstanceMethod(#NSButtonCell, #"keyEquivalent") = NSString;
overload externalInstanceMethod(#NSButtonCell, #"setKeyEquivalent:") = Void, NSString;
overload externalInstanceMethod(#NSButtonCell, #"keyEquivalentModifierMask") = CULong;
overload externalInstanceMethod(#NSButtonCell, #"setKeyEquivalentModifierMask:") = Void, CULong;
overload externalInstanceMethod(#NSButtonCell, #"keyEquivalentFont") = NSFont;
overload externalInstanceMethod(#NSButtonCell, #"setKeyEquivalentFont:") = Void, NSFont;
overload externalInstanceMethod(#NSButtonCell, #"setKeyEquivalentFont:size:") = Void, NSString, Double;
overload externalInstanceMethod(#NSButtonCell, #"performClick:") = Void, Id;
overload externalInstanceMethod(#NSButtonCell, #"drawImage:withFrame:inView:") = Void, NSImage, NSRect, NSView;
overload externalInstanceMethod(#NSButtonCell, #"drawTitle:withFrame:inView:") = NSRect, NSAttributedString, NSRect, NSView;
overload externalInstanceMethod(#NSButtonCell, #"drawBezelWithFrame:inView:") = Void, NSRect, NSView;
overload externalInstanceMethod(#NSButtonCell, #"setTitleWithMnemonic:") = Void, NSString;
overload externalInstanceMethod(#NSButtonCell, #"setAlternateTitleWithMnemonic:") = Void, NSString;
overload externalInstanceMethod(#NSButtonCell, #"setAlternateMnemonicLocation:") = Void, CULong;
overload externalInstanceMethod(#NSButtonCell, #"alternateMnemonicLocation") = CULong;
overload externalInstanceMethod(#NSButtonCell, #"alternateMnemonic") = NSString;
overload externalInstanceMethod(#NSButtonCell, #"gradientType") = CULong;
overload externalInstanceMethod(#NSButtonCell, #"setGradientType:") = Void, CULong;
overload externalInstanceMethod(#NSButtonCell, #"setImageDimsWhenDisabled:") = Void, Bool;
overload externalInstanceMethod(#NSButtonCell, #"imageDimsWhenDisabled") = Bool;
overload externalInstanceMethod(#NSButtonCell, #"setShowsBorderOnlyWhileMouseInside:") = Void, Bool;
overload externalInstanceMethod(#NSButtonCell, #"showsBorderOnlyWhileMouseInside") = Bool;
overload externalInstanceMethod(#NSButtonCell, #"mouseEntered:") = Void, NSEvent;
overload externalInstanceMethod(#NSButtonCell, #"mouseExited:") = Void, NSEvent;
overload externalInstanceMethod(#NSButtonCell, #"backgroundColor") = NSColor;
overload externalInstanceMethod(#NSButtonCell, #"setBackgroundColor:") = Void, NSColor;
overload externalInstanceMethod(#NSButtonCell, #"attributedTitle") = NSAttributedString;
overload externalInstanceMethod(#NSButtonCell, #"setAttributedTitle:") = Void, NSAttributedString;
overload externalInstanceMethod(#NSButtonCell, #"attributedAlternateTitle") = NSAttributedString;
overload externalInstanceMethod(#NSButtonCell, #"setAttributedAlternateTitle:") = Void, NSAttributedString;
overload externalInstanceMethod(#NSButtonCell, #"setBezelStyle:") = Void, CULong;
overload externalInstanceMethod(#NSButtonCell, #"bezelStyle") = CULong;
overload externalInstanceMethod(#NSButtonCell, #"setSound:") = Void, NSSound;
overload externalInstanceMethod(#NSButtonCell, #"sound") = NSSound;

record NSCIImageRep = externalClass(NSImageRep);
overload externalClassMethod(#NSCIImageRep, #"imageRepWithCIImage:") = Id, CIImage;
overload externalInstanceMethod(#NSCIImageRep, #"initWithCIImage:") = Id, CIImage;
overload externalInstanceMethod(#NSCIImageRep, #"CIImage") = CIImage;

record NSCachedImageRep = externalClass(NSImageRep);
overload externalInstanceMethod(#NSCachedImageRep, #"initWithWindow:rect:") = Id, NSWindow, NSRect;
overload externalInstanceMethod(#NSCachedImageRep, #"initWithSize:depth:separate:alpha:") = Id, NSSize, Int, Bool, Bool;
overload externalInstanceMethod(#NSCachedImageRep, #"window") = NSWindow;
overload externalInstanceMethod(#NSCachedImageRep, #"rect") = NSRect;

record NSCell = externalClass(NSObject);
overload externalInstanceMethod(#NSCell, #"copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#NSCell, #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSCell, #"initWithCoder:") = Id, NSCoder;
overload externalClassMethod(#NSCell, #"prefersTrackingUntilMouseUp") = Bool;
overload externalInstanceMethod(#NSCell, #"initTextCell:") = Id, NSString;
overload externalInstanceMethod(#NSCell, #"initImageCell:") = Id, NSImage;
overload externalInstanceMethod(#NSCell, #"controlView") = NSView;
overload externalInstanceMethod(#NSCell, #"setControlView:") = Void, NSView;
overload externalInstanceMethod(#NSCell, #"type") = CULong;
overload externalInstanceMethod(#NSCell, #"setType:") = Void, CULong;
overload externalInstanceMethod(#NSCell, #"state") = CLong;
overload externalInstanceMethod(#NSCell, #"setState:") = Void, CLong;
overload externalInstanceMethod(#NSCell, #"target") = Id;
overload externalInstanceMethod(#NSCell, #"setTarget:") = Void, Id;
overload externalInstanceMethod(#NSCell, #"action") = SelectorHandle;
overload externalInstanceMethod(#NSCell, #"setAction:") = Void, SelectorHandle;
overload externalInstanceMethod(#NSCell, #"tag") = CLong;
overload externalInstanceMethod(#NSCell, #"setTag:") = Void, CLong;
overload externalInstanceMethod(#NSCell, #"title") = NSString;
overload externalInstanceMethod(#NSCell, #"setTitle:") = Void, NSString;
overload externalInstanceMethod(#NSCell, #"isOpaque") = Bool;
overload externalInstanceMethod(#NSCell, #"isEnabled") = Bool;
overload externalInstanceMethod(#NSCell, #"setEnabled:") = Void, Bool;
overload externalInstanceMethod(#NSCell, #"sendActionOn:") = CLong, CLong;
overload externalInstanceMethod(#NSCell, #"isContinuous") = Bool;
overload externalInstanceMethod(#NSCell, #"setContinuous:") = Void, Bool;
overload externalInstanceMethod(#NSCell, #"isEditable") = Bool;
overload externalInstanceMethod(#NSCell, #"setEditable:") = Void, Bool;
overload externalInstanceMethod(#NSCell, #"isSelectable") = Bool;
overload externalInstanceMethod(#NSCell, #"setSelectable:") = Void, Bool;
overload externalInstanceMethod(#NSCell, #"isBordered") = Bool;
overload externalInstanceMethod(#NSCell, #"setBordered:") = Void, Bool;
overload externalInstanceMethod(#NSCell, #"isBezeled") = Bool;
overload externalInstanceMethod(#NSCell, #"setBezeled:") = Void, Bool;
overload externalInstanceMethod(#NSCell, #"isScrollable") = Bool;
overload externalInstanceMethod(#NSCell, #"setScrollable:") = Void, Bool;
overload externalInstanceMethod(#NSCell, #"isHighlighted") = Bool;
overload externalInstanceMethod(#NSCell, #"setHighlighted:") = Void, Bool;
overload externalInstanceMethod(#NSCell, #"alignment") = CULong;
overload externalInstanceMethod(#NSCell, #"setAlignment:") = Void, CULong;
overload externalInstanceMethod(#NSCell, #"wraps") = Bool;
overload externalInstanceMethod(#NSCell, #"setWraps:") = Void, Bool;
overload externalInstanceMethod(#NSCell, #"font") = NSFont;
overload externalInstanceMethod(#NSCell, #"setFont:") = Void, NSFont;
overload externalInstanceMethod(#NSCell, #"isEntryAcceptable:") = Bool, NSString;
overload externalInstanceMethod(#NSCell, #"keyEquivalent") = NSString;
overload externalInstanceMethod(#NSCell, #"setFormatter:") = Void, NSFormatter;
overload externalInstanceMethod(#NSCell, #"formatter") = Id;
overload externalInstanceMethod(#NSCell, #"objectValue") = Id;
overload externalInstanceMethod(#NSCell, #"setObjectValue:") = Void, Id;
overload externalInstanceMethod(#NSCell, #"hasValidObjectValue") = Bool;
overload externalInstanceMethod(#NSCell, #"stringValue") = NSString;
overload externalInstanceMethod(#NSCell, #"setStringValue:") = Void, NSString;
overload externalInstanceMethod(#NSCell, #"compare:") = CLong, Id;
overload externalInstanceMethod(#NSCell, #"intValue") = Int;
overload externalInstanceMethod(#NSCell, #"setIntValue:") = Void, Int;
overload externalInstanceMethod(#NSCell, #"floatValue") = Float;
overload externalInstanceMethod(#NSCell, #"setFloatValue:") = Void, Float;
overload externalInstanceMethod(#NSCell, #"doubleValue") = Double;
overload externalInstanceMethod(#NSCell, #"setDoubleValue:") = Void, Double;
overload externalInstanceMethod(#NSCell, #"takeIntValueFrom:") = Void, Id;
overload externalInstanceMethod(#NSCell, #"takeFloatValueFrom:") = Void, Id;
overload externalInstanceMethod(#NSCell, #"takeDoubleValueFrom:") = Void, Id;
overload externalInstanceMethod(#NSCell, #"takeStringValueFrom:") = Void, Id;
overload externalInstanceMethod(#NSCell, #"takeObjectValueFrom:") = Void, Id;
overload externalInstanceMethod(#NSCell, #"image") = NSImage;
overload externalInstanceMethod(#NSCell, #"setImage:") = Void, NSImage;
overload externalInstanceMethod(#NSCell, #"setControlTint:") = Void, CULong;
overload externalInstanceMethod(#NSCell, #"controlTint") = CULong;
overload externalInstanceMethod(#NSCell, #"setControlSize:") = Void, CULong;
overload externalInstanceMethod(#NSCell, #"controlSize") = CULong;
overload externalInstanceMethod(#NSCell, #"representedObject") = Id;
overload externalInstanceMethod(#NSCell, #"setRepresentedObject:") = Void, Id;
overload externalInstanceMethod(#NSCell, #"cellAttribute:") = CLong, CULong;
overload externalInstanceMethod(#NSCell, #"setCellAttribute:to:") = Void, CULong, CLong;
overload externalInstanceMethod(#NSCell, #"imageRectForBounds:") = NSRect, NSRect;
overload externalInstanceMethod(#NSCell, #"titleRectForBounds:") = NSRect, NSRect;
overload externalInstanceMethod(#NSCell, #"drawingRectForBounds:") = NSRect, NSRect;
overload externalInstanceMethod(#NSCell, #"cellSize") = NSSize;
overload externalInstanceMethod(#NSCell, #"cellSizeForBounds:") = NSSize, NSRect;
overload externalInstanceMethod(#NSCell, #"highlightColorWithFrame:inView:") = NSColor, NSRect, NSView;
overload externalInstanceMethod(#NSCell, #"calcDrawInfo:") = Void, NSRect;
overload externalInstanceMethod(#NSCell, #"setUpFieldEditorAttributes:") = NSText, NSText;
overload externalInstanceMethod(#NSCell, #"drawInteriorWithFrame:inView:") = Void, NSRect, NSView;
overload externalInstanceMethod(#NSCell, #"drawWithFrame:inView:") = Void, NSRect, NSView;
overload externalInstanceMethod(#NSCell, #"highlight:withFrame:inView:") = Void, Bool, NSRect, NSView;
overload externalInstanceMethod(#NSCell, #"mouseDownFlags") = CLong;
overload externalInstanceMethod(#NSCell, #"getPeriodicDelay:interval:") = Void, Pointer[Float], Pointer[Float];
overload externalInstanceMethod(#NSCell, #"startTrackingAt:inView:") = Bool, NSPoint, NSView;
overload externalInstanceMethod(#NSCell, #"continueTracking:at:inView:") = Bool, NSPoint, NSPoint, NSView;
overload externalInstanceMethod(#NSCell, #"stopTracking:at:inView:mouseIsUp:") = Void, NSPoint, NSPoint, NSView, Bool;
overload externalInstanceMethod(#NSCell, #"trackMouse:inRect:ofView:untilMouseUp:") = Bool, NSEvent, NSRect, NSView, Bool;
overload externalInstanceMethod(#NSCell, #"editWithFrame:inView:editor:delegate:event:") = Void, NSRect, NSView, NSText, Id, NSEvent;
overload externalInstanceMethod(#NSCell, #"selectWithFrame:inView:editor:delegate:start:length:") = Void, NSRect, NSView, NSText, Id, CLong, CLong;
overload externalInstanceMethod(#NSCell, #"endEditing:") = Void, NSText;
overload externalInstanceMethod(#NSCell, #"resetCursorRect:inView:") = Void, NSRect, NSView;
overload externalInstanceMethod(#NSCell, #"setMenu:") = Void, NSMenu;
overload externalInstanceMethod(#NSCell, #"menu") = NSMenu;
overload externalInstanceMethod(#NSCell, #"menuForEvent:inRect:ofView:") = NSMenu, NSEvent, NSRect, NSView;
overload externalClassMethod(#NSCell, #"defaultMenu") = NSMenu;
overload externalInstanceMethod(#NSCell, #"setSendsActionOnEndEditing:") = Void, Bool;
overload externalInstanceMethod(#NSCell, #"sendsActionOnEndEditing") = Bool;
overload externalInstanceMethod(#NSCell, #"baseWritingDirection") = CLong;
overload externalInstanceMethod(#NSCell, #"setBaseWritingDirection:") = Void, CLong;
overload externalInstanceMethod(#NSCell, #"setLineBreakMode:") = Void, CULong;
overload externalInstanceMethod(#NSCell, #"lineBreakMode") = CULong;
overload externalInstanceMethod(#NSCell, #"setAllowsUndo:") = Void, Bool;
overload externalInstanceMethod(#NSCell, #"allowsUndo") = Bool;
overload externalInstanceMethod(#NSCell, #"integerValue") = CLong;
overload externalInstanceMethod(#NSCell, #"setIntegerValue:") = Void, CLong;
overload externalInstanceMethod(#NSCell, #"takeIntegerValueFrom:") = Void, Id;
overload externalInstanceMethod(#NSCell, #"truncatesLastVisibleLine") = Bool;
overload externalInstanceMethod(#NSCell, #"setTruncatesLastVisibleLine:") = Void, Bool;
overload externalInstanceMethod(#NSCell, #"userInterfaceLayoutDirection") = CLong;
overload externalInstanceMethod(#NSCell, #"setUserInterfaceLayoutDirection:") = Void, CLong;
overload externalInstanceMethod(#NSCell, #"fieldEditorForView:") = NSTextView, NSView;
overload externalInstanceMethod(#NSCell, #"usesSingleLineMode") = Bool;
overload externalInstanceMethod(#NSCell, #"setUsesSingleLineMode:") = Void, Bool;
overload externalInstanceMethod(#NSCell, #"setRefusesFirstResponder:") = Void, Bool;
overload externalInstanceMethod(#NSCell, #"refusesFirstResponder") = Bool;
overload externalInstanceMethod(#NSCell, #"acceptsFirstResponder") = Bool;
overload externalInstanceMethod(#NSCell, #"setShowsFirstResponder:") = Void, Bool;
overload externalInstanceMethod(#NSCell, #"showsFirstResponder") = Bool;
overload externalInstanceMethod(#NSCell, #"setMnemonicLocation:") = Void, CULong;
overload externalInstanceMethod(#NSCell, #"mnemonicLocation") = CULong;
overload externalInstanceMethod(#NSCell, #"mnemonic") = NSString;
overload externalInstanceMethod(#NSCell, #"setTitleWithMnemonic:") = Void, NSString;
overload externalInstanceMethod(#NSCell, #"performClick:") = Void, Id;
overload externalInstanceMethod(#NSCell, #"setFocusRingType:") = Void, CULong;
overload externalInstanceMethod(#NSCell, #"focusRingType") = CULong;
overload externalClassMethod(#NSCell, #"defaultFocusRingType") = CULong;
overload externalInstanceMethod(#NSCell, #"wantsNotificationForMarkedText") = Bool;
overload externalInstanceMethod(#NSCell, #"attributedStringValue") = NSAttributedString;
overload externalInstanceMethod(#NSCell, #"setAttributedStringValue:") = Void, NSAttributedString;
overload externalInstanceMethod(#NSCell, #"allowsEditingTextAttributes") = Bool;
overload externalInstanceMethod(#NSCell, #"setAllowsEditingTextAttributes:") = Void, Bool;
overload externalInstanceMethod(#NSCell, #"importsGraphics") = Bool;
overload externalInstanceMethod(#NSCell, #"setImportsGraphics:") = Void, Bool;
overload externalInstanceMethod(#NSCell, #"setAllowsMixedState:") = Void, Bool;
overload externalInstanceMethod(#NSCell, #"allowsMixedState") = Bool;
overload externalInstanceMethod(#NSCell, #"nextState") = CLong;
overload externalInstanceMethod(#NSCell, #"setNextState") = Void;
overload externalInstanceMethod(#NSCell, #"hitTestForEvent:inRect:ofView:") = CULong, NSEvent, NSRect, NSView;
overload externalInstanceMethod(#NSCell, #"expansionFrameWithFrame:inView:") = NSRect, NSRect, NSView;
overload externalInstanceMethod(#NSCell, #"drawWithExpansionFrame:inView:") = Void, NSRect, NSView;
overload externalInstanceMethod(#NSCell, #"backgroundStyle") = CLong;
overload externalInstanceMethod(#NSCell, #"setBackgroundStyle:") = Void, CLong;
overload externalInstanceMethod(#NSCell, #"interiorBackgroundStyle") = CLong;
overload externalInstanceMethod(#NSCell, #"entryType") = CLong;
overload externalInstanceMethod(#NSCell, #"setEntryType:") = Void, CLong;
overload externalInstanceMethod(#NSCell, #"setFloatingPointFormat:left:right:") = Void, Bool, CULong, CULong;

record NSClipView = externalClass(NSView);
overload externalInstanceMethod(#NSClipView, #"setBackgroundColor:") = Void, NSColor;
overload externalInstanceMethod(#NSClipView, #"backgroundColor") = NSColor;
overload externalInstanceMethod(#NSClipView, #"setDrawsBackground:") = Void, Bool;
overload externalInstanceMethod(#NSClipView, #"drawsBackground") = Bool;
overload externalInstanceMethod(#NSClipView, #"setDocumentView:") = Void, NSView;
overload externalInstanceMethod(#NSClipView, #"documentView") = Id;
overload externalInstanceMethod(#NSClipView, #"documentRect") = NSRect;
overload externalInstanceMethod(#NSClipView, #"setDocumentCursor:") = Void, NSCursor;
overload externalInstanceMethod(#NSClipView, #"documentCursor") = NSCursor;
overload externalInstanceMethod(#NSClipView, #"documentVisibleRect") = NSRect;
overload externalInstanceMethod(#NSClipView, #"viewFrameChanged:") = Void, NSNotification;
overload externalInstanceMethod(#NSClipView, #"viewBoundsChanged:") = Void, NSNotification;
overload externalInstanceMethod(#NSClipView, #"setCopiesOnScroll:") = Void, Bool;
overload externalInstanceMethod(#NSClipView, #"copiesOnScroll") = Bool;
overload externalInstanceMethod(#NSClipView, #"autoscroll:") = Bool, NSEvent;
overload externalInstanceMethod(#NSClipView, #"constrainScrollPoint:") = NSPoint, NSPoint;
overload externalInstanceMethod(#NSClipView, #"scrollToPoint:") = Void, NSPoint;

overload externalInstanceMethod(#NSCoder, #"decodeNXColor") = NSColor;

record NSCollectionView = externalClass(NSView);
overload externalInstanceMethod(#NSCollectionView, #"setDelegate:") = Void, Id;
overload externalInstanceMethod(#NSCollectionView, #"delegate") = Id;
overload externalInstanceMethod(#NSCollectionView, #"isFirstResponder") = Bool;
overload externalInstanceMethod(#NSCollectionView, #"setContent:") = Void, NSArray;
overload externalInstanceMethod(#NSCollectionView, #"content") = NSArray;
overload externalInstanceMethod(#NSCollectionView, #"setSelectable:") = Void, Bool;
overload externalInstanceMethod(#NSCollectionView, #"isSelectable") = Bool;
overload externalInstanceMethod(#NSCollectionView, #"setAllowsMultipleSelection:") = Void, Bool;
overload externalInstanceMethod(#NSCollectionView, #"allowsMultipleSelection") = Bool;
overload externalInstanceMethod(#NSCollectionView, #"setSelectionIndexes:") = Void, NSIndexSet;
overload externalInstanceMethod(#NSCollectionView, #"selectionIndexes") = NSIndexSet;
overload externalInstanceMethod(#NSCollectionView, #"newItemForRepresentedObject:") = NSCollectionViewItem, Id;
overload externalInstanceMethod(#NSCollectionView, #"setItemPrototype:") = Void, NSCollectionViewItem;
overload externalInstanceMethod(#NSCollectionView, #"itemPrototype") = NSCollectionViewItem;
overload externalInstanceMethod(#NSCollectionView, #"setMaxNumberOfRows:") = Void, CULong;
overload externalInstanceMethod(#NSCollectionView, #"maxNumberOfRows") = CULong;
overload externalInstanceMethod(#NSCollectionView, #"setMaxNumberOfColumns:") = Void, CULong;
overload externalInstanceMethod(#NSCollectionView, #"maxNumberOfColumns") = CULong;
overload externalInstanceMethod(#NSCollectionView, #"setMinItemSize:") = Void, NSSize;
overload externalInstanceMethod(#NSCollectionView, #"minItemSize") = NSSize;
overload externalInstanceMethod(#NSCollectionView, #"setMaxItemSize:") = Void, NSSize;
overload externalInstanceMethod(#NSCollectionView, #"maxItemSize") = NSSize;
overload externalInstanceMethod(#NSCollectionView, #"setBackgroundColors:") = Void, NSArray;
overload externalInstanceMethod(#NSCollectionView, #"backgroundColors") = NSArray;
overload externalInstanceMethod(#NSCollectionView, #"itemAtIndex:") = NSCollectionViewItem, CULong;
overload externalInstanceMethod(#NSCollectionView, #"frameForItemAtIndex:") = NSRect, CULong;
overload externalInstanceMethod(#NSCollectionView, #"setDraggingSourceOperationMask:forLocal:") = Void, CULong, Bool;
overload externalInstanceMethod(#NSCollectionView, #"draggingImageForItemsAtIndexes:withEvent:offset:") = NSImage, NSIndexSet, NSEvent, NSPointPointer;

record NSCollectionViewItem = externalClass(NSViewController);
overload externalInstanceMethod(#NSCollectionViewItem, #"copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#NSCollectionViewItem, #"collectionView") = NSCollectionView;
overload externalInstanceMethod(#NSCollectionViewItem, #"setSelected:") = Void, Bool;
overload externalInstanceMethod(#NSCollectionViewItem, #"isSelected") = Bool;

record NSColor = externalClass(NSObject);
overload externalInstanceMethod(#NSColor, #"copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#NSColor, #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSColor, #"initWithCoder:") = Id, NSCoder;
overload externalClassMethod(#NSColor, #"readableTypesForPasteboard:") = NSArray, NSPasteboard;
overload externalClassMethod(#NSColor, #"readingOptionsForType:pasteboard:") = CULong, NSString, NSPasteboard;
overload externalInstanceMethod(#NSColor, #"initWithPasteboardPropertyList:ofType:") = Id, Id, NSString;
overload externalInstanceMethod(#NSColor, #"writableTypesForPasteboard:") = NSArray, NSPasteboard;
overload externalInstanceMethod(#NSColor, #"writingOptionsForType:pasteboard:") = CULong, NSString, NSPasteboard;
overload externalInstanceMethod(#NSColor, #"pasteboardPropertyListForType:") = Id, NSString;
overload externalClassMethod(#NSColor, #"colorWithCalibratedWhite:alpha:") = NSColor, Double, Double;
overload externalClassMethod(#NSColor, #"colorWithCalibratedHue:saturation:brightness:alpha:") = NSColor, Double, Double, Double, Double;
overload externalClassMethod(#NSColor, #"colorWithCalibratedRed:green:blue:alpha:") = NSColor, Double, Double, Double, Double;
overload externalClassMethod(#NSColor, #"colorWithDeviceWhite:alpha:") = NSColor, Double, Double;
overload externalClassMethod(#NSColor, #"colorWithDeviceHue:saturation:brightness:alpha:") = NSColor, Double, Double, Double, Double;
overload externalClassMethod(#NSColor, #"colorWithDeviceRed:green:blue:alpha:") = NSColor, Double, Double, Double, Double;
overload externalClassMethod(#NSColor, #"colorWithDeviceCyan:magenta:yellow:black:alpha:") = NSColor, Double, Double, Double, Double, Double;
overload externalClassMethod(#NSColor, #"colorWithCatalogName:colorName:") = NSColor, NSString, NSString;
overload externalClassMethod(#NSColor, #"colorWithColorSpace:components:count:") = NSColor, NSColorSpace, Pointer[Double], CLong;
overload externalClassMethod(#NSColor, #"blackColor") = NSColor;
overload externalClassMethod(#NSColor, #"darkGrayColor") = NSColor;
overload externalClassMethod(#NSColor, #"lightGrayColor") = NSColor;
overload externalClassMethod(#NSColor, #"whiteColor") = NSColor;
overload externalClassMethod(#NSColor, #"grayColor") = NSColor;
overload externalClassMethod(#NSColor, #"redColor") = NSColor;
overload externalClassMethod(#NSColor, #"greenColor") = NSColor;
overload externalClassMethod(#NSColor, #"blueColor") = NSColor;
overload externalClassMethod(#NSColor, #"cyanColor") = NSColor;
overload externalClassMethod(#NSColor, #"yellowColor") = NSColor;
overload externalClassMethod(#NSColor, #"magentaColor") = NSColor;
overload externalClassMethod(#NSColor, #"orangeColor") = NSColor;
overload externalClassMethod(#NSColor, #"purpleColor") = NSColor;
overload externalClassMethod(#NSColor, #"brownColor") = NSColor;
overload externalClassMethod(#NSColor, #"clearColor") = NSColor;
overload externalClassMethod(#NSColor, #"controlShadowColor") = NSColor;
overload externalClassMethod(#NSColor, #"controlDarkShadowColor") = NSColor;
overload externalClassMethod(#NSColor, #"controlColor") = NSColor;
overload externalClassMethod(#NSColor, #"controlHighlightColor") = NSColor;
overload externalClassMethod(#NSColor, #"controlLightHighlightColor") = NSColor;
overload externalClassMethod(#NSColor, #"controlTextColor") = NSColor;
overload externalClassMethod(#NSColor, #"controlBackgroundColor") = NSColor;
overload externalClassMethod(#NSColor, #"selectedControlColor") = NSColor;
overload externalClassMethod(#NSColor, #"secondarySelectedControlColor") = NSColor;
overload externalClassMethod(#NSColor, #"selectedControlTextColor") = NSColor;
overload externalClassMethod(#NSColor, #"disabledControlTextColor") = NSColor;
overload externalClassMethod(#NSColor, #"textColor") = NSColor;
overload externalClassMethod(#NSColor, #"textBackgroundColor") = NSColor;
overload externalClassMethod(#NSColor, #"selectedTextColor") = NSColor;
overload externalClassMethod(#NSColor, #"selectedTextBackgroundColor") = NSColor;
overload externalClassMethod(#NSColor, #"gridColor") = NSColor;
overload externalClassMethod(#NSColor, #"keyboardFocusIndicatorColor") = NSColor;
overload externalClassMethod(#NSColor, #"windowBackgroundColor") = NSColor;
overload externalClassMethod(#NSColor, #"scrollBarColor") = NSColor;
overload externalClassMethod(#NSColor, #"knobColor") = NSColor;
overload externalClassMethod(#NSColor, #"selectedKnobColor") = NSColor;
overload externalClassMethod(#NSColor, #"windowFrameColor") = NSColor;
overload externalClassMethod(#NSColor, #"windowFrameTextColor") = NSColor;
overload externalClassMethod(#NSColor, #"selectedMenuItemColor") = NSColor;
overload externalClassMethod(#NSColor, #"selectedMenuItemTextColor") = NSColor;
overload externalClassMethod(#NSColor, #"highlightColor") = NSColor;
overload externalClassMethod(#NSColor, #"shadowColor") = NSColor;
overload externalClassMethod(#NSColor, #"headerColor") = NSColor;
overload externalClassMethod(#NSColor, #"headerTextColor") = NSColor;
overload externalClassMethod(#NSColor, #"alternateSelectedControlColor") = NSColor;
overload externalClassMethod(#NSColor, #"alternateSelectedControlTextColor") = NSColor;
overload externalClassMethod(#NSColor, #"controlAlternatingRowBackgroundColors") = NSArray;
overload externalInstanceMethod(#NSColor, #"highlightWithLevel:") = NSColor, Double;
overload externalInstanceMethod(#NSColor, #"shadowWithLevel:") = NSColor, Double;
overload externalClassMethod(#NSColor, #"colorForControlTint:") = NSColor, CULong;
overload externalClassMethod(#NSColor, #"currentControlTint") = CULong;
overload externalInstanceMethod(#NSColor, #"set") = Void;
overload externalInstanceMethod(#NSColor, #"setFill") = Void;
overload externalInstanceMethod(#NSColor, #"setStroke") = Void;
overload externalInstanceMethod(#NSColor, #"colorSpaceName") = NSString;
overload externalInstanceMethod(#NSColor, #"colorUsingColorSpaceName:") = NSColor, NSString;
overload externalInstanceMethod(#NSColor, #"colorUsingColorSpaceName:device:") = NSColor, NSString, NSDictionary;
overload externalInstanceMethod(#NSColor, #"colorUsingColorSpace:") = NSColor, NSColorSpace;
overload externalInstanceMethod(#NSColor, #"blendedColorWithFraction:ofColor:") = NSColor, Double, NSColor;
overload externalInstanceMethod(#NSColor, #"colorWithAlphaComponent:") = NSColor, Double;
overload externalInstanceMethod(#NSColor, #"catalogNameComponent") = NSString;
overload externalInstanceMethod(#NSColor, #"colorNameComponent") = NSString;
overload externalInstanceMethod(#NSColor, #"localizedCatalogNameComponent") = NSString;
overload externalInstanceMethod(#NSColor, #"localizedColorNameComponent") = NSString;
overload externalInstanceMethod(#NSColor, #"redComponent") = Double;
overload externalInstanceMethod(#NSColor, #"greenComponent") = Double;
overload externalInstanceMethod(#NSColor, #"blueComponent") = Double;
overload externalInstanceMethod(#NSColor, #"getRed:green:blue:alpha:") = Void, Pointer[Double], Pointer[Double], Pointer[Double], Pointer[Double];
overload externalInstanceMethod(#NSColor, #"hueComponent") = Double;
overload externalInstanceMethod(#NSColor, #"saturationComponent") = Double;
overload externalInstanceMethod(#NSColor, #"brightnessComponent") = Double;
overload externalInstanceMethod(#NSColor, #"getHue:saturation:brightness:alpha:") = Void, Pointer[Double], Pointer[Double], Pointer[Double], Pointer[Double];
overload externalInstanceMethod(#NSColor, #"whiteComponent") = Double;
overload externalInstanceMethod(#NSColor, #"getWhite:alpha:") = Void, Pointer[Double], Pointer[Double];
overload externalInstanceMethod(#NSColor, #"cyanComponent") = Double;
overload externalInstanceMethod(#NSColor, #"magentaComponent") = Double;
overload externalInstanceMethod(#NSColor, #"yellowComponent") = Double;
overload externalInstanceMethod(#NSColor, #"blackComponent") = Double;
overload externalInstanceMethod(#NSColor, #"getCyan:magenta:yellow:black:alpha:") = Void, Pointer[Double], Pointer[Double], Pointer[Double], Pointer[Double], Pointer[Double];
overload externalInstanceMethod(#NSColor, #"colorSpace") = NSColorSpace;
overload externalInstanceMethod(#NSColor, #"numberOfComponents") = CLong;
overload externalInstanceMethod(#NSColor, #"getComponents:") = Void, Pointer[Double];
overload externalInstanceMethod(#NSColor, #"alphaComponent") = Double;
overload externalClassMethod(#NSColor, #"colorFromPasteboard:") = NSColor, NSPasteboard;
overload externalInstanceMethod(#NSColor, #"writeToPasteboard:") = Void, NSPasteboard;
overload externalClassMethod(#NSColor, #"colorWithPatternImage:") = NSColor, NSImage;
overload externalInstanceMethod(#NSColor, #"patternImage") = NSImage;
overload externalInstanceMethod(#NSColor, #"drawSwatchInRect:") = Void, NSRect;
overload externalClassMethod(#NSColor, #"setIgnoresAlpha:") = Void, Bool;
overload externalClassMethod(#NSColor, #"ignoresAlpha") = Bool;
overload externalClassMethod(#NSColor, #"colorWithCIColor:") = NSColor, CIColor;

record NSColorList = externalClass(NSObject);
overload externalInstanceMethod(#NSColorList, #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSColorList, #"initWithCoder:") = Id, NSCoder;
overload externalClassMethod(#NSColorList, #"availableColorLists") = NSArray;
overload externalClassMethod(#NSColorList, #"colorListNamed:") = NSColorList, NSString;
overload externalInstanceMethod(#NSColorList, #"initWithName:") = Id, NSString;
overload externalInstanceMethod(#NSColorList, #"initWithName:fromFile:") = Id, NSString, NSString;
overload externalInstanceMethod(#NSColorList, #"name") = NSString;
overload externalInstanceMethod(#NSColorList, #"setColor:forKey:") = Void, NSColor, NSString;
overload externalInstanceMethod(#NSColorList, #"insertColor:key:atIndex:") = Void, NSColor, NSString, CULong;
overload externalInstanceMethod(#NSColorList, #"removeColorWithKey:") = Void, NSString;
overload externalInstanceMethod(#NSColorList, #"colorWithKey:") = NSColor, NSString;
overload externalInstanceMethod(#NSColorList, #"allKeys") = NSArray;
overload externalInstanceMethod(#NSColorList, #"isEditable") = Bool;
overload externalInstanceMethod(#NSColorList, #"writeToFile:") = Bool, NSString;
overload externalInstanceMethod(#NSColorList, #"removeFile") = Void;

record NSColorPanel = externalClass(NSPanel);
overload externalClassMethod(#NSColorPanel, #"sharedColorPanel") = NSColorPanel;
overload externalClassMethod(#NSColorPanel, #"sharedColorPanelExists") = Bool;
overload externalClassMethod(#NSColorPanel, #"dragColor:withEvent:fromView:") = Bool, NSColor, NSEvent, NSView;
overload externalClassMethod(#NSColorPanel, #"setPickerMask:") = Void, CULong;
overload externalClassMethod(#NSColorPanel, #"setPickerMode:") = Void, CLong;
overload externalInstanceMethod(#NSColorPanel, #"setAccessoryView:") = Void, NSView;
overload externalInstanceMethod(#NSColorPanel, #"accessoryView") = NSView;
overload externalInstanceMethod(#NSColorPanel, #"setContinuous:") = Void, Bool;
overload externalInstanceMethod(#NSColorPanel, #"isContinuous") = Bool;
overload externalInstanceMethod(#NSColorPanel, #"setShowsAlpha:") = Void, Bool;
overload externalInstanceMethod(#NSColorPanel, #"showsAlpha") = Bool;
overload externalInstanceMethod(#NSColorPanel, #"setMode:") = Void, CLong;
overload externalInstanceMethod(#NSColorPanel, #"mode") = CLong;
overload externalInstanceMethod(#NSColorPanel, #"setColor:") = Void, NSColor;
overload externalInstanceMethod(#NSColorPanel, #"color") = NSColor;
overload externalInstanceMethod(#NSColorPanel, #"alpha") = Double;
overload externalInstanceMethod(#NSColorPanel, #"setAction:") = Void, SelectorHandle;
overload externalInstanceMethod(#NSColorPanel, #"setTarget:") = Void, Id;
overload externalInstanceMethod(#NSColorPanel, #"attachColorList:") = Void, NSColorList;
overload externalInstanceMethod(#NSColorPanel, #"detachColorList:") = Void, NSColorList;

record NSColorPicker = externalClass(NSObject);
overload externalInstanceMethod(#NSColorPicker, #"initWithPickerMask:colorPanel:") = Id, CULong, NSColorPanel;
overload externalInstanceMethod(#NSColorPicker, #"provideNewButtonImage") = NSImage;
overload externalInstanceMethod(#NSColorPicker, #"insertNewButtonImage:in:") = Void, NSImage, NSButtonCell;
overload externalInstanceMethod(#NSColorPicker, #"viewSizeChanged:") = Void, Id;
overload externalInstanceMethod(#NSColorPicker, #"alphaControlAddedOrRemoved:") = Void, Id;
overload externalInstanceMethod(#NSColorPicker, #"attachColorList:") = Void, NSColorList;
overload externalInstanceMethod(#NSColorPicker, #"detachColorList:") = Void, NSColorList;
overload externalInstanceMethod(#NSColorPicker, #"setMode:") = Void, CLong;
overload externalInstanceMethod(#NSColorPicker, #"buttonToolTip") = NSString;
overload externalInstanceMethod(#NSColorPicker, #"minContentSize") = NSSize;
overload externalInstanceMethod(#NSColorPicker, #"initWithPickerMask:colorPanel:") = Id, CULong, NSColorPanel;
overload externalInstanceMethod(#NSColorPicker, #"colorPanel") = NSColorPanel;
overload externalInstanceMethod(#NSColorPicker, #"provideNewButtonImage") = NSImage;
overload externalInstanceMethod(#NSColorPicker, #"insertNewButtonImage:in:") = Void, NSImage, NSButtonCell;
overload externalInstanceMethod(#NSColorPicker, #"viewSizeChanged:") = Void, Id;
overload externalInstanceMethod(#NSColorPicker, #"attachColorList:") = Void, NSColorList;
overload externalInstanceMethod(#NSColorPicker, #"detachColorList:") = Void, NSColorList;
overload externalInstanceMethod(#NSColorPicker, #"setMode:") = Void, CLong;
overload externalInstanceMethod(#NSColorPicker, #"buttonToolTip") = NSString;
overload externalInstanceMethod(#NSColorPicker, #"minContentSize") = NSSize;

record NSColorSpace = externalClass(NSObject);
overload externalInstanceMethod(#NSColorSpace, #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSColorSpace, #"initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#NSColorSpace, #"initWithICCProfileData:") = Id, NSData;
overload externalInstanceMethod(#NSColorSpace, #"ICCProfileData") = NSData;
overload externalInstanceMethod(#NSColorSpace, #"initWithColorSyncProfile:") = Id, RawPointer;
overload externalInstanceMethod(#NSColorSpace, #"colorSyncProfile") = RawPointer;
overload externalInstanceMethod(#NSColorSpace, #"initWithCGColorSpace:") = Id, CGColorSpaceRef;
overload externalInstanceMethod(#NSColorSpace, #"CGColorSpace") = CGColorSpaceRef;
overload externalInstanceMethod(#NSColorSpace, #"numberOfColorComponents") = CLong;
overload externalInstanceMethod(#NSColorSpace, #"colorSpaceModel") = CLong;
overload externalInstanceMethod(#NSColorSpace, #"localizedName") = NSString;
overload externalClassMethod(#NSColorSpace, #"genericRGBColorSpace") = NSColorSpace;
overload externalClassMethod(#NSColorSpace, #"genericGrayColorSpace") = NSColorSpace;
overload externalClassMethod(#NSColorSpace, #"genericCMYKColorSpace") = NSColorSpace;
overload externalClassMethod(#NSColorSpace, #"deviceRGBColorSpace") = NSColorSpace;
overload externalClassMethod(#NSColorSpace, #"deviceGrayColorSpace") = NSColorSpace;
overload externalClassMethod(#NSColorSpace, #"deviceCMYKColorSpace") = NSColorSpace;
overload externalClassMethod(#NSColorSpace, #"sRGBColorSpace") = NSColorSpace;
overload externalClassMethod(#NSColorSpace, #"genericGamma22GrayColorSpace") = NSColorSpace;
overload externalClassMethod(#NSColorSpace, #"adobeRGB1998ColorSpace") = NSColorSpace;
overload externalClassMethod(#NSColorSpace, #"availableColorSpacesWithModel:") = NSArray, CLong;

record NSColorWell = externalClass(NSControl);
overload externalInstanceMethod(#NSColorWell, #"deactivate") = Void;
overload externalInstanceMethod(#NSColorWell, #"activate:") = Void, Bool;
overload externalInstanceMethod(#NSColorWell, #"isActive") = Bool;
overload externalInstanceMethod(#NSColorWell, #"drawWellInside:") = Void, NSRect;
overload externalInstanceMethod(#NSColorWell, #"isBordered") = Bool;
overload externalInstanceMethod(#NSColorWell, #"setBordered:") = Void, Bool;
overload externalInstanceMethod(#NSColorWell, #"takeColorFrom:") = Void, Id;
overload externalInstanceMethod(#NSColorWell, #"setColor:") = Void, NSColor;
overload externalInstanceMethod(#NSColorWell, #"color") = NSColor;

record NSComboBox = externalClass(NSTextField);
overload externalInstanceMethod(#NSComboBox, #"hasVerticalScroller") = Bool;
overload externalInstanceMethod(#NSComboBox, #"setHasVerticalScroller:") = Void, Bool;
overload externalInstanceMethod(#NSComboBox, #"intercellSpacing") = NSSize;
overload externalInstanceMethod(#NSComboBox, #"setIntercellSpacing:") = Void, NSSize;
overload externalInstanceMethod(#NSComboBox, #"itemHeight") = Double;
overload externalInstanceMethod(#NSComboBox, #"setItemHeight:") = Void, Double;
overload externalInstanceMethod(#NSComboBox, #"numberOfVisibleItems") = CLong;
overload externalInstanceMethod(#NSComboBox, #"setNumberOfVisibleItems:") = Void, CLong;
overload externalInstanceMethod(#NSComboBox, #"setButtonBordered:") = Void, Bool;
overload externalInstanceMethod(#NSComboBox, #"isButtonBordered") = Bool;
overload externalInstanceMethod(#NSComboBox, #"reloadData") = Void;
overload externalInstanceMethod(#NSComboBox, #"noteNumberOfItemsChanged") = Void;
overload externalInstanceMethod(#NSComboBox, #"setUsesDataSource:") = Void, Bool;
overload externalInstanceMethod(#NSComboBox, #"usesDataSource") = Bool;
overload externalInstanceMethod(#NSComboBox, #"scrollItemAtIndexToTop:") = Void, CLong;
overload externalInstanceMethod(#NSComboBox, #"scrollItemAtIndexToVisible:") = Void, CLong;
overload externalInstanceMethod(#NSComboBox, #"selectItemAtIndex:") = Void, CLong;
overload externalInstanceMethod(#NSComboBox, #"deselectItemAtIndex:") = Void, CLong;
overload externalInstanceMethod(#NSComboBox, #"indexOfSelectedItem") = CLong;
overload externalInstanceMethod(#NSComboBox, #"numberOfItems") = CLong;
overload externalInstanceMethod(#NSComboBox, #"completes") = Bool;
overload externalInstanceMethod(#NSComboBox, #"setCompletes:") = Void, Bool;
overload externalInstanceMethod(#NSComboBox, #"delegate") = Id;
overload externalInstanceMethod(#NSComboBox, #"setDelegate:") = Void, Id;
overload externalInstanceMethod(#NSComboBox, #"dataSource") = Id;
overload externalInstanceMethod(#NSComboBox, #"setDataSource:") = Void, Id;
overload externalInstanceMethod(#NSComboBox, #"addItemWithObjectValue:") = Void, Id;
overload externalInstanceMethod(#NSComboBox, #"addItemsWithObjectValues:") = Void, NSArray;
overload externalInstanceMethod(#NSComboBox, #"insertItemWithObjectValue:atIndex:") = Void, Id, CLong;
overload externalInstanceMethod(#NSComboBox, #"removeItemWithObjectValue:") = Void, Id;
overload externalInstanceMethod(#NSComboBox, #"removeItemAtIndex:") = Void, CLong;
overload externalInstanceMethod(#NSComboBox, #"removeAllItems") = Void;
overload externalInstanceMethod(#NSComboBox, #"selectItemWithObjectValue:") = Void, Id;
overload externalInstanceMethod(#NSComboBox, #"itemObjectValueAtIndex:") = Id, CLong;
overload externalInstanceMethod(#NSComboBox, #"objectValueOfSelectedItem") = Id;
overload externalInstanceMethod(#NSComboBox, #"indexOfItemWithObjectValue:") = CLong, Id;
overload externalInstanceMethod(#NSComboBox, #"objectValues") = NSArray;

record NSComboBoxCell = externalClass(NSTextFieldCell);
overload externalInstanceMethod(#NSComboBoxCell, #"hasVerticalScroller") = Bool;
overload externalInstanceMethod(#NSComboBoxCell, #"setHasVerticalScroller:") = Void, Bool;
overload externalInstanceMethod(#NSComboBoxCell, #"intercellSpacing") = NSSize;
overload externalInstanceMethod(#NSComboBoxCell, #"setIntercellSpacing:") = Void, NSSize;
overload externalInstanceMethod(#NSComboBoxCell, #"itemHeight") = Double;
overload externalInstanceMethod(#NSComboBoxCell, #"setItemHeight:") = Void, Double;
overload externalInstanceMethod(#NSComboBoxCell, #"numberOfVisibleItems") = CLong;
overload externalInstanceMethod(#NSComboBoxCell, #"setNumberOfVisibleItems:") = Void, CLong;
overload externalInstanceMethod(#NSComboBoxCell, #"setButtonBordered:") = Void, Bool;
overload externalInstanceMethod(#NSComboBoxCell, #"isButtonBordered") = Bool;
overload externalInstanceMethod(#NSComboBoxCell, #"reloadData") = Void;
overload externalInstanceMethod(#NSComboBoxCell, #"noteNumberOfItemsChanged") = Void;
overload externalInstanceMethod(#NSComboBoxCell, #"setUsesDataSource:") = Void, Bool;
overload externalInstanceMethod(#NSComboBoxCell, #"usesDataSource") = Bool;
overload externalInstanceMethod(#NSComboBoxCell, #"scrollItemAtIndexToTop:") = Void, CLong;
overload externalInstanceMethod(#NSComboBoxCell, #"scrollItemAtIndexToVisible:") = Void, CLong;
overload externalInstanceMethod(#NSComboBoxCell, #"selectItemAtIndex:") = Void, CLong;
overload externalInstanceMethod(#NSComboBoxCell, #"deselectItemAtIndex:") = Void, CLong;
overload externalInstanceMethod(#NSComboBoxCell, #"indexOfSelectedItem") = CLong;
overload externalInstanceMethod(#NSComboBoxCell, #"numberOfItems") = CLong;
overload externalInstanceMethod(#NSComboBoxCell, #"completes") = Bool;
overload externalInstanceMethod(#NSComboBoxCell, #"setCompletes:") = Void, Bool;
overload externalInstanceMethod(#NSComboBoxCell, #"completedString:") = NSString, NSString;
overload externalInstanceMethod(#NSComboBoxCell, #"dataSource") = Id;
overload externalInstanceMethod(#NSComboBoxCell, #"setDataSource:") = Void, Id;
overload externalInstanceMethod(#NSComboBoxCell, #"addItemWithObjectValue:") = Void, Id;
overload externalInstanceMethod(#NSComboBoxCell, #"addItemsWithObjectValues:") = Void, NSArray;
overload externalInstanceMethod(#NSComboBoxCell, #"insertItemWithObjectValue:atIndex:") = Void, Id, CLong;
overload externalInstanceMethod(#NSComboBoxCell, #"removeItemWithObjectValue:") = Void, Id;
overload externalInstanceMethod(#NSComboBoxCell, #"removeItemAtIndex:") = Void, CLong;
overload externalInstanceMethod(#NSComboBoxCell, #"removeAllItems") = Void;
overload externalInstanceMethod(#NSComboBoxCell, #"selectItemWithObjectValue:") = Void, Id;
overload externalInstanceMethod(#NSComboBoxCell, #"itemObjectValueAtIndex:") = Id, CLong;
overload externalInstanceMethod(#NSComboBoxCell, #"objectValueOfSelectedItem") = Id;
overload externalInstanceMethod(#NSComboBoxCell, #"indexOfItemWithObjectValue:") = CLong, Id;
overload externalInstanceMethod(#NSComboBoxCell, #"objectValues") = NSArray;

record NSControl = externalClass(NSView);
overload externalClassMethod(#NSControl, #"setCellClass:") = Void, Id;
overload externalClassMethod(#NSControl, #"cellClass") = Id;
overload externalInstanceMethod(#NSControl, #"initWithFrame:") = Id, NSRect;
overload externalInstanceMethod(#NSControl, #"sizeToFit") = Void;
overload externalInstanceMethod(#NSControl, #"calcSize") = Void;
overload externalInstanceMethod(#NSControl, #"cell") = Id;
overload externalInstanceMethod(#NSControl, #"setCell:") = Void, NSCell;
overload externalInstanceMethod(#NSControl, #"selectedCell") = Id;
overload externalInstanceMethod(#NSControl, #"target") = Id;
overload externalInstanceMethod(#NSControl, #"setTarget:") = Void, Id;
overload externalInstanceMethod(#NSControl, #"action") = SelectorHandle;
overload externalInstanceMethod(#NSControl, #"setAction:") = Void, SelectorHandle;
overload externalInstanceMethod(#NSControl, #"tag") = CLong;
overload externalInstanceMethod(#NSControl, #"setTag:") = Void, CLong;
overload externalInstanceMethod(#NSControl, #"selectedTag") = CLong;
overload externalInstanceMethod(#NSControl, #"setIgnoresMultiClick:") = Void, Bool;
overload externalInstanceMethod(#NSControl, #"ignoresMultiClick") = Bool;
overload externalInstanceMethod(#NSControl, #"sendActionOn:") = CLong, CLong;
overload externalInstanceMethod(#NSControl, #"isContinuous") = Bool;
overload externalInstanceMethod(#NSControl, #"setContinuous:") = Void, Bool;
overload externalInstanceMethod(#NSControl, #"isEnabled") = Bool;
overload externalInstanceMethod(#NSControl, #"setEnabled:") = Void, Bool;
overload externalInstanceMethod(#NSControl, #"alignment") = CULong;
overload externalInstanceMethod(#NSControl, #"setAlignment:") = Void, CULong;
overload externalInstanceMethod(#NSControl, #"font") = NSFont;
overload externalInstanceMethod(#NSControl, #"setFont:") = Void, NSFont;
overload externalInstanceMethod(#NSControl, #"setFormatter:") = Void, NSFormatter;
overload externalInstanceMethod(#NSControl, #"formatter") = Id;
overload externalInstanceMethod(#NSControl, #"setObjectValue:") = Void, Id;
overload externalInstanceMethod(#NSControl, #"setStringValue:") = Void, NSString;
overload externalInstanceMethod(#NSControl, #"setIntValue:") = Void, Int;
overload externalInstanceMethod(#NSControl, #"setFloatValue:") = Void, Float;
overload externalInstanceMethod(#NSControl, #"setDoubleValue:") = Void, Double;
overload externalInstanceMethod(#NSControl, #"objectValue") = Id;
overload externalInstanceMethod(#NSControl, #"stringValue") = NSString;
overload externalInstanceMethod(#NSControl, #"intValue") = Int;
overload externalInstanceMethod(#NSControl, #"floatValue") = Float;
overload externalInstanceMethod(#NSControl, #"doubleValue") = Double;
overload externalInstanceMethod(#NSControl, #"setNeedsDisplay") = Void;
overload externalInstanceMethod(#NSControl, #"updateCell:") = Void, NSCell;
overload externalInstanceMethod(#NSControl, #"updateCellInside:") = Void, NSCell;
overload externalInstanceMethod(#NSControl, #"drawCellInside:") = Void, NSCell;
overload externalInstanceMethod(#NSControl, #"drawCell:") = Void, NSCell;
overload externalInstanceMethod(#NSControl, #"selectCell:") = Void, NSCell;
overload externalInstanceMethod(#NSControl, #"sendAction:to:") = Bool, SelectorHandle, Id;
overload externalInstanceMethod(#NSControl, #"takeIntValueFrom:") = Void, Id;
overload externalInstanceMethod(#NSControl, #"takeFloatValueFrom:") = Void, Id;
overload externalInstanceMethod(#NSControl, #"takeDoubleValueFrom:") = Void, Id;
overload externalInstanceMethod(#NSControl, #"takeStringValueFrom:") = Void, Id;
overload externalInstanceMethod(#NSControl, #"takeObjectValueFrom:") = Void, Id;
overload externalInstanceMethod(#NSControl, #"currentEditor") = NSText;
overload externalInstanceMethod(#NSControl, #"abortEditing") = Bool;
overload externalInstanceMethod(#NSControl, #"validateEditing") = Void;
overload externalInstanceMethod(#NSControl, #"mouseDown:") = Void, NSEvent;
overload externalInstanceMethod(#NSControl, #"baseWritingDirection") = CLong;
overload externalInstanceMethod(#NSControl, #"setBaseWritingDirection:") = Void, CLong;
overload externalInstanceMethod(#NSControl, #"integerValue") = CLong;
overload externalInstanceMethod(#NSControl, #"setIntegerValue:") = Void, CLong;
overload externalInstanceMethod(#NSControl, #"takeIntegerValueFrom:") = Void, Id;
overload externalInstanceMethod(#NSControl, #"performClick:") = Void, Id;
overload externalInstanceMethod(#NSControl, #"setRefusesFirstResponder:") = Void, Bool;
overload externalInstanceMethod(#NSControl, #"refusesFirstResponder") = Bool;
overload externalInstanceMethod(#NSControl, #"attributedStringValue") = NSAttributedString;
overload externalInstanceMethod(#NSControl, #"setAttributedStringValue:") = Void, NSAttributedString;
overload externalInstanceMethod(#NSControl, #"setFloatingPointFormat:left:right:") = Void, Bool, CULong, CULong;

record NSController = externalClass(NSObject);
overload externalInstanceMethod(#NSController, #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSController, #"initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#NSController, #"objectDidBeginEditing:") = Void, Id;
overload externalInstanceMethod(#NSController, #"objectDidEndEditing:") = Void, Id;
overload externalInstanceMethod(#NSController, #"discardEditing") = Void;
overload externalInstanceMethod(#NSController, #"commitEditing") = Bool;
overload externalInstanceMethod(#NSController, #"commitEditingWithDelegate:didCommitSelector:contextInfo:") = Void, Id, SelectorHandle, RawPointer;
overload externalInstanceMethod(#NSController, #"isEditing") = Bool;

record NSCursor = externalClass(NSObject);
overload externalInstanceMethod(#NSCursor, #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSCursor, #"initWithCoder:") = Id, NSCoder;
overload externalClassMethod(#NSCursor, #"currentCursor") = NSCursor;
overload externalClassMethod(#NSCursor, #"currentSystemCursor") = NSCursor;
overload externalClassMethod(#NSCursor, #"arrowCursor") = NSCursor;
overload externalClassMethod(#NSCursor, #"IBeamCursor") = NSCursor;
overload externalClassMethod(#NSCursor, #"pointingHandCursor") = NSCursor;
overload externalClassMethod(#NSCursor, #"closedHandCursor") = NSCursor;
overload externalClassMethod(#NSCursor, #"openHandCursor") = NSCursor;
overload externalClassMethod(#NSCursor, #"resizeLeftCursor") = NSCursor;
overload externalClassMethod(#NSCursor, #"resizeRightCursor") = NSCursor;
overload externalClassMethod(#NSCursor, #"resizeLeftRightCursor") = NSCursor;
overload externalClassMethod(#NSCursor, #"resizeUpCursor") = NSCursor;
overload externalClassMethod(#NSCursor, #"resizeDownCursor") = NSCursor;
overload externalClassMethod(#NSCursor, #"resizeUpDownCursor") = NSCursor;
overload externalClassMethod(#NSCursor, #"crosshairCursor") = NSCursor;
overload externalClassMethod(#NSCursor, #"disappearingItemCursor") = NSCursor;
overload externalClassMethod(#NSCursor, #"operationNotAllowedCursor") = NSCursor;
overload externalClassMethod(#NSCursor, #"dragLinkCursor") = NSCursor;
overload externalClassMethod(#NSCursor, #"dragCopyCursor") = NSCursor;
overload externalClassMethod(#NSCursor, #"contextualMenuCursor") = NSCursor;
overload externalInstanceMethod(#NSCursor, #"initWithImage:hotSpot:") = Id, NSImage, NSPoint;
overload externalInstanceMethod(#NSCursor, #"initWithImage:foregroundColorHint:backgroundColorHint:hotSpot:") = Id, NSImage, NSColor, NSColor, NSPoint;
overload externalClassMethod(#NSCursor, #"hide") = Void;
overload externalClassMethod(#NSCursor, #"unhide") = Void;
overload externalClassMethod(#NSCursor, #"setHiddenUntilMouseMoves:") = Void, Bool;
overload externalClassMethod(#NSCursor, #"pop") = Void;
overload externalInstanceMethod(#NSCursor, #"image") = NSImage;
overload externalInstanceMethod(#NSCursor, #"hotSpot") = NSPoint;
overload externalInstanceMethod(#NSCursor, #"push") = Void;
overload externalInstanceMethod(#NSCursor, #"pop") = Void;
overload externalInstanceMethod(#NSCursor, #"set") = Void;
overload externalInstanceMethod(#NSCursor, #"setOnMouseExited:") = Void, Bool;
overload externalInstanceMethod(#NSCursor, #"setOnMouseEntered:") = Void, Bool;
overload externalInstanceMethod(#NSCursor, #"isSetOnMouseExited") = Bool;
overload externalInstanceMethod(#NSCursor, #"isSetOnMouseEntered") = Bool;
overload externalInstanceMethod(#NSCursor, #"mouseEntered:") = Void, NSEvent;
overload externalInstanceMethod(#NSCursor, #"mouseExited:") = Void, NSEvent;

record NSCustomImageRep = externalClass(NSImageRep);
overload externalInstanceMethod(#NSCustomImageRep, #"initWithDrawSelector:delegate:") = Id, SelectorHandle, Id;
overload externalInstanceMethod(#NSCustomImageRep, #"drawSelector") = SelectorHandle;
overload externalInstanceMethod(#NSCustomImageRep, #"delegate") = Id;

record NSDatePicker = externalClass(NSControl);
overload externalInstanceMethod(#NSDatePicker, #"datePickerStyle") = CULong;
overload externalInstanceMethod(#NSDatePicker, #"setDatePickerStyle:") = Void, CULong;
overload externalInstanceMethod(#NSDatePicker, #"isBezeled") = Bool;
overload externalInstanceMethod(#NSDatePicker, #"setBezeled:") = Void, Bool;
overload externalInstanceMethod(#NSDatePicker, #"isBordered") = Bool;
overload externalInstanceMethod(#NSDatePicker, #"setBordered:") = Void, Bool;
overload externalInstanceMethod(#NSDatePicker, #"drawsBackground") = Bool;
overload externalInstanceMethod(#NSDatePicker, #"setDrawsBackground:") = Void, Bool;
overload externalInstanceMethod(#NSDatePicker, #"backgroundColor") = NSColor;
overload externalInstanceMethod(#NSDatePicker, #"setBackgroundColor:") = Void, NSColor;
overload externalInstanceMethod(#NSDatePicker, #"textColor") = NSColor;
overload externalInstanceMethod(#NSDatePicker, #"setTextColor:") = Void, NSColor;
overload externalInstanceMethod(#NSDatePicker, #"datePickerMode") = CULong;
overload externalInstanceMethod(#NSDatePicker, #"setDatePickerMode:") = Void, CULong;
overload externalInstanceMethod(#NSDatePicker, #"datePickerElements") = CULong;
overload externalInstanceMethod(#NSDatePicker, #"setDatePickerElements:") = Void, CULong;
overload externalInstanceMethod(#NSDatePicker, #"calendar") = NSCalendar;
overload externalInstanceMethod(#NSDatePicker, #"setCalendar:") = Void, NSCalendar;
overload externalInstanceMethod(#NSDatePicker, #"locale") = NSLocale;
overload externalInstanceMethod(#NSDatePicker, #"setLocale:") = Void, NSLocale;
overload externalInstanceMethod(#NSDatePicker, #"timeZone") = NSTimeZone;
overload externalInstanceMethod(#NSDatePicker, #"setTimeZone:") = Void, NSTimeZone;
overload externalInstanceMethod(#NSDatePicker, #"dateValue") = NSDate;
overload externalInstanceMethod(#NSDatePicker, #"setDateValue:") = Void, NSDate;
overload externalInstanceMethod(#NSDatePicker, #"timeInterval") = Double;
overload externalInstanceMethod(#NSDatePicker, #"setTimeInterval:") = Void, Double;
overload externalInstanceMethod(#NSDatePicker, #"minDate") = NSDate;
overload externalInstanceMethod(#NSDatePicker, #"setMinDate:") = Void, NSDate;
overload externalInstanceMethod(#NSDatePicker, #"maxDate") = NSDate;
overload externalInstanceMethod(#NSDatePicker, #"setMaxDate:") = Void, NSDate;
overload externalInstanceMethod(#NSDatePicker, #"delegate") = Id;
overload externalInstanceMethod(#NSDatePicker, #"setDelegate:") = Void, Id;

record NSDatePickerCell = externalClass(NSActionCell);
overload externalInstanceMethod(#NSDatePickerCell, #"datePickerStyle") = CULong;
overload externalInstanceMethod(#NSDatePickerCell, #"setDatePickerStyle:") = Void, CULong;
overload externalInstanceMethod(#NSDatePickerCell, #"drawsBackground") = Bool;
overload externalInstanceMethod(#NSDatePickerCell, #"setDrawsBackground:") = Void, Bool;
overload externalInstanceMethod(#NSDatePickerCell, #"backgroundColor") = NSColor;
overload externalInstanceMethod(#NSDatePickerCell, #"setBackgroundColor:") = Void, NSColor;
overload externalInstanceMethod(#NSDatePickerCell, #"textColor") = NSColor;
overload externalInstanceMethod(#NSDatePickerCell, #"setTextColor:") = Void, NSColor;
overload externalInstanceMethod(#NSDatePickerCell, #"datePickerMode") = CULong;
overload externalInstanceMethod(#NSDatePickerCell, #"setDatePickerMode:") = Void, CULong;
overload externalInstanceMethod(#NSDatePickerCell, #"datePickerElements") = CULong;
overload externalInstanceMethod(#NSDatePickerCell, #"setDatePickerElements:") = Void, CULong;
overload externalInstanceMethod(#NSDatePickerCell, #"calendar") = NSCalendar;
overload externalInstanceMethod(#NSDatePickerCell, #"setCalendar:") = Void, NSCalendar;
overload externalInstanceMethod(#NSDatePickerCell, #"locale") = NSLocale;
overload externalInstanceMethod(#NSDatePickerCell, #"setLocale:") = Void, NSLocale;
overload externalInstanceMethod(#NSDatePickerCell, #"timeZone") = NSTimeZone;
overload externalInstanceMethod(#NSDatePickerCell, #"setTimeZone:") = Void, NSTimeZone;
overload externalInstanceMethod(#NSDatePickerCell, #"dateValue") = NSDate;
overload externalInstanceMethod(#NSDatePickerCell, #"setDateValue:") = Void, NSDate;
overload externalInstanceMethod(#NSDatePickerCell, #"timeInterval") = Double;
overload externalInstanceMethod(#NSDatePickerCell, #"setTimeInterval:") = Void, Double;
overload externalInstanceMethod(#NSDatePickerCell, #"minDate") = NSDate;
overload externalInstanceMethod(#NSDatePickerCell, #"setMinDate:") = Void, NSDate;
overload externalInstanceMethod(#NSDatePickerCell, #"maxDate") = NSDate;
overload externalInstanceMethod(#NSDatePickerCell, #"setMaxDate:") = Void, NSDate;
overload externalInstanceMethod(#NSDatePickerCell, #"delegate") = Id;
overload externalInstanceMethod(#NSDatePickerCell, #"setDelegate:") = Void, Id;

record NSDictionaryController = externalClass(NSArrayController);
overload externalInstanceMethod(#NSDictionaryController, #"newObject") = Id;
overload externalInstanceMethod(#NSDictionaryController, #"setInitialKey:") = Void, NSString;
overload externalInstanceMethod(#NSDictionaryController, #"initialKey") = NSString;
overload externalInstanceMethod(#NSDictionaryController, #"setInitialValue:") = Void, Id;
overload externalInstanceMethod(#NSDictionaryController, #"initialValue") = Id;
overload externalInstanceMethod(#NSDictionaryController, #"setIncludedKeys:") = Void, NSArray;
overload externalInstanceMethod(#NSDictionaryController, #"includedKeys") = NSArray;
overload externalInstanceMethod(#NSDictionaryController, #"setExcludedKeys:") = Void, NSArray;
overload externalInstanceMethod(#NSDictionaryController, #"excludedKeys") = NSArray;
overload externalInstanceMethod(#NSDictionaryController, #"setLocalizedKeyDictionary:") = Void, NSDictionary;
overload externalInstanceMethod(#NSDictionaryController, #"localizedKeyDictionary") = NSDictionary;
overload externalInstanceMethod(#NSDictionaryController, #"setLocalizedKeyTable:") = Void, NSString;
overload externalInstanceMethod(#NSDictionaryController, #"localizedKeyTable") = NSString;

record NSDockTile = externalClass(NSObject);
overload externalInstanceMethod(#NSDockTile, #"size") = NSSize;
overload externalInstanceMethod(#NSDockTile, #"setContentView:") = Void, NSView;
overload externalInstanceMethod(#NSDockTile, #"contentView") = NSView;
overload externalInstanceMethod(#NSDockTile, #"display") = Void;
overload externalInstanceMethod(#NSDockTile, #"setShowsApplicationBadge:") = Void, Bool;
overload externalInstanceMethod(#NSDockTile, #"showsApplicationBadge") = Bool;
overload externalInstanceMethod(#NSDockTile, #"setBadgeLabel:") = Void, NSString;
overload externalInstanceMethod(#NSDockTile, #"badgeLabel") = NSString;
overload externalInstanceMethod(#NSDockTile, #"owner") = Id;

record NSDocument = externalClass(NSObject);
overload externalInstanceMethod(#NSDocument, #"validateUserInterfaceItem:") = Bool, Id;
overload externalInstanceMethod(#NSDocument, #"init") = Id;
overload externalInstanceMethod(#NSDocument, #"initWithType:error:") = Id, NSString, Pointer[NSError];
overload externalClassMethod(#NSDocument, #"canConcurrentlyReadDocumentsOfType:") = Bool, NSString;
overload externalInstanceMethod(#NSDocument, #"initWithContentsOfURL:ofType:error:") = Id, NSURL, NSString, Pointer[NSError];
overload externalInstanceMethod(#NSDocument, #"initForURL:withContentsOfURL:ofType:error:") = Id, NSURL, NSURL, NSString, Pointer[NSError];
overload externalInstanceMethod(#NSDocument, #"setFileType:") = Void, NSString;
overload externalInstanceMethod(#NSDocument, #"fileType") = NSString;
overload externalInstanceMethod(#NSDocument, #"setFileURL:") = Void, NSURL;
overload externalInstanceMethod(#NSDocument, #"fileURL") = NSURL;
overload externalInstanceMethod(#NSDocument, #"setFileModificationDate:") = Void, NSDate;
overload externalInstanceMethod(#NSDocument, #"fileModificationDate") = NSDate;
overload externalInstanceMethod(#NSDocument, #"revertDocumentToSaved:") = Void, Id;
overload externalInstanceMethod(#NSDocument, #"revertToContentsOfURL:ofType:error:") = Bool, NSURL, NSString, Pointer[NSError];
overload externalInstanceMethod(#NSDocument, #"readFromURL:ofType:error:") = Bool, NSURL, NSString, Pointer[NSError];
overload externalInstanceMethod(#NSDocument, #"readFromFileWrapper:ofType:error:") = Bool, NSFileWrapper, NSString, Pointer[NSError];
overload externalInstanceMethod(#NSDocument, #"readFromData:ofType:error:") = Bool, NSData, NSString, Pointer[NSError];
overload externalInstanceMethod(#NSDocument, #"writeToURL:ofType:error:") = Bool, NSURL, NSString, Pointer[NSError];
overload externalInstanceMethod(#NSDocument, #"fileWrapperOfType:error:") = NSFileWrapper, NSString, Pointer[NSError];
overload externalInstanceMethod(#NSDocument, #"dataOfType:error:") = NSData, NSString, Pointer[NSError];
overload externalInstanceMethod(#NSDocument, #"writeSafelyToURL:ofType:forSaveOperation:error:") = Bool, NSURL, NSString, CULong, Pointer[NSError];
overload externalInstanceMethod(#NSDocument, #"writeToURL:ofType:forSaveOperation:originalContentsURL:error:") = Bool, NSURL, NSString, CULong, NSURL, Pointer[NSError];
overload externalInstanceMethod(#NSDocument, #"fileAttributesToWriteToURL:ofType:forSaveOperation:originalContentsURL:error:") = NSDictionary, NSURL, NSString, CULong, NSURL, Pointer[NSError];
overload externalInstanceMethod(#NSDocument, #"keepBackupFile") = Bool;
overload externalInstanceMethod(#NSDocument, #"saveDocument:") = Void, Id;
overload externalInstanceMethod(#NSDocument, #"saveDocumentAs:") = Void, Id;
overload externalInstanceMethod(#NSDocument, #"saveDocumentTo:") = Void, Id;
overload externalInstanceMethod(#NSDocument, #"saveDocumentWithDelegate:didSaveSelector:contextInfo:") = Void, Id, SelectorHandle, RawPointer;
overload externalInstanceMethod(#NSDocument, #"runModalSavePanelForSaveOperation:delegate:didSaveSelector:contextInfo:") = Void, CULong, Id, SelectorHandle, RawPointer;
overload externalInstanceMethod(#NSDocument, #"shouldRunSavePanelWithAccessoryView") = Bool;
overload externalInstanceMethod(#NSDocument, #"prepareSavePanel:") = Bool, NSSavePanel;
overload externalInstanceMethod(#NSDocument, #"fileNameExtensionWasHiddenInLastRunSavePanel") = Bool;
overload externalInstanceMethod(#NSDocument, #"fileTypeFromLastRunSavePanel") = NSString;
overload externalInstanceMethod(#NSDocument, #"saveToURL:ofType:forSaveOperation:delegate:didSaveSelector:contextInfo:") = Void, NSURL, NSString, CULong, Id, SelectorHandle, RawPointer;
overload externalInstanceMethod(#NSDocument, #"saveToURL:ofType:forSaveOperation:error:") = Bool, NSURL, NSString, CULong, Pointer[NSError];
overload externalInstanceMethod(#NSDocument, #"hasUnautosavedChanges") = Bool;
overload externalInstanceMethod(#NSDocument, #"autosaveDocumentWithDelegate:didAutosaveSelector:contextInfo:") = Void, Id, SelectorHandle, RawPointer;
overload externalInstanceMethod(#NSDocument, #"autosavingFileType") = NSString;
overload externalInstanceMethod(#NSDocument, #"setAutosavedContentsFileURL:") = Void, NSURL;
overload externalInstanceMethod(#NSDocument, #"autosavedContentsFileURL") = NSURL;
overload externalInstanceMethod(#NSDocument, #"canCloseDocumentWithDelegate:shouldCloseSelector:contextInfo:") = Void, Id, SelectorHandle, RawPointer;
overload externalInstanceMethod(#NSDocument, #"close") = Void;
overload externalInstanceMethod(#NSDocument, #"runPageLayout:") = Void, Id;
overload externalInstanceMethod(#NSDocument, #"runModalPageLayoutWithPrintInfo:delegate:didRunSelector:contextInfo:") = Void, NSPrintInfo, Id, SelectorHandle, RawPointer;
overload externalInstanceMethod(#NSDocument, #"preparePageLayout:") = Bool, NSPageLayout;
overload externalInstanceMethod(#NSDocument, #"shouldChangePrintInfo:") = Bool, NSPrintInfo;
overload externalInstanceMethod(#NSDocument, #"setPrintInfo:") = Void, NSPrintInfo;
overload externalInstanceMethod(#NSDocument, #"printInfo") = NSPrintInfo;
overload externalInstanceMethod(#NSDocument, #"printDocument:") = Void, Id;
overload externalInstanceMethod(#NSDocument, #"printDocumentWithSettings:showPrintPanel:delegate:didPrintSelector:contextInfo:") = Void, NSDictionary, Bool, Id, SelectorHandle, RawPointer;
overload externalInstanceMethod(#NSDocument, #"printOperationWithSettings:error:") = NSPrintOperation, NSDictionary, Pointer[NSError];
overload externalInstanceMethod(#NSDocument, #"runModalPrintOperation:delegate:didRunSelector:contextInfo:") = Void, NSPrintOperation, Id, SelectorHandle, RawPointer;
overload externalInstanceMethod(#NSDocument, #"isDocumentEdited") = Bool;
overload externalInstanceMethod(#NSDocument, #"updateChangeCount:") = Void, CULong;
overload externalInstanceMethod(#NSDocument, #"setUndoManager:") = Void, NSUndoManager;
overload externalInstanceMethod(#NSDocument, #"undoManager") = NSUndoManager;
overload externalInstanceMethod(#NSDocument, #"setHasUndoManager:") = Void, Bool;
overload externalInstanceMethod(#NSDocument, #"hasUndoManager") = Bool;
overload externalInstanceMethod(#NSDocument, #"presentError:modalForWindow:delegate:didPresentSelector:contextInfo:") = Void, NSError, NSWindow, Id, SelectorHandle, RawPointer;
overload externalInstanceMethod(#NSDocument, #"presentError:") = Bool, NSError;
overload externalInstanceMethod(#NSDocument, #"willPresentError:") = NSError, NSError;
overload externalInstanceMethod(#NSDocument, #"makeWindowControllers") = Void;
overload externalInstanceMethod(#NSDocument, #"windowNibName") = NSString;
overload externalInstanceMethod(#NSDocument, #"windowControllerWillLoadNib:") = Void, NSWindowController;
overload externalInstanceMethod(#NSDocument, #"windowControllerDidLoadNib:") = Void, NSWindowController;
overload externalInstanceMethod(#NSDocument, #"setWindow:") = Void, NSWindow;
overload externalInstanceMethod(#NSDocument, #"addWindowController:") = Void, NSWindowController;
overload externalInstanceMethod(#NSDocument, #"removeWindowController:") = Void, NSWindowController;
overload externalInstanceMethod(#NSDocument, #"showWindows") = Void;
overload externalInstanceMethod(#NSDocument, #"windowControllers") = NSArray;
overload externalInstanceMethod(#NSDocument, #"shouldCloseWindowController:delegate:shouldCloseSelector:contextInfo:") = Void, NSWindowController, Id, SelectorHandle, RawPointer;
overload externalInstanceMethod(#NSDocument, #"displayName") = NSString;
overload externalInstanceMethod(#NSDocument, #"windowForSheet") = NSWindow;
overload externalClassMethod(#NSDocument, #"readableTypes") = NSArray;
overload externalClassMethod(#NSDocument, #"writableTypes") = NSArray;
overload externalClassMethod(#NSDocument, #"isNativeType:") = Bool, NSString;
overload externalInstanceMethod(#NSDocument, #"writableTypesForSaveOperation:") = NSArray, CULong;
overload externalInstanceMethod(#NSDocument, #"fileNameExtensionForType:saveOperation:") = NSString, NSString, CULong;
overload externalInstanceMethod(#NSDocument, #"validateUserInterfaceItem:") = Bool, Id;
overload externalInstanceMethod(#NSDocument, #"dataRepresentationOfType:") = NSData, NSString;
overload externalInstanceMethod(#NSDocument, #"fileAttributesToWriteToFile:ofType:saveOperation:") = NSDictionary, NSString, NSString, CULong;
overload externalInstanceMethod(#NSDocument, #"fileName") = NSString;
overload externalInstanceMethod(#NSDocument, #"fileWrapperRepresentationOfType:") = NSFileWrapper, NSString;
overload externalInstanceMethod(#NSDocument, #"initWithContentsOfFile:ofType:") = Id, NSString, NSString;
overload externalInstanceMethod(#NSDocument, #"initWithContentsOfURL:ofType:") = Id, NSURL, NSString;
overload externalInstanceMethod(#NSDocument, #"loadDataRepresentation:ofType:") = Bool, NSData, NSString;
overload externalInstanceMethod(#NSDocument, #"loadFileWrapperRepresentation:ofType:") = Bool, NSFileWrapper, NSString;
overload externalInstanceMethod(#NSDocument, #"printShowingPrintPanel:") = Void, Bool;
overload externalInstanceMethod(#NSDocument, #"readFromFile:ofType:") = Bool, NSString, NSString;
overload externalInstanceMethod(#NSDocument, #"readFromURL:ofType:") = Bool, NSURL, NSString;
overload externalInstanceMethod(#NSDocument, #"revertToSavedFromFile:ofType:") = Bool, NSString, NSString;
overload externalInstanceMethod(#NSDocument, #"revertToSavedFromURL:ofType:") = Bool, NSURL, NSString;
overload externalInstanceMethod(#NSDocument, #"runModalPageLayoutWithPrintInfo:") = CLong, NSPrintInfo;
overload externalInstanceMethod(#NSDocument, #"saveToFile:saveOperation:delegate:didSaveSelector:contextInfo:") = Void, NSString, CULong, Id, SelectorHandle, RawPointer;
overload externalInstanceMethod(#NSDocument, #"setFileName:") = Void, NSString;
overload externalInstanceMethod(#NSDocument, #"writeToFile:ofType:") = Bool, NSString, NSString;
overload externalInstanceMethod(#NSDocument, #"writeToFile:ofType:originalFile:saveOperation:") = Bool, NSString, NSString, NSString, CULong;
overload externalInstanceMethod(#NSDocument, #"writeToURL:ofType:") = Bool, NSURL, NSString;
overload externalInstanceMethod(#NSDocument, #"writeWithBackupToFile:ofType:saveOperation:") = Bool, NSString, NSString, CULong;
overload externalInstanceMethod(#NSDocument, #"lastComponentOfFileName") = NSString;
overload externalInstanceMethod(#NSDocument, #"setLastComponentOfFileName:") = Void, NSString;
overload externalInstanceMethod(#NSDocument, #"handleSaveScriptCommand:") = Id, NSScriptCommand;
overload externalInstanceMethod(#NSDocument, #"handleCloseScriptCommand:") = Id, NSCloseCommand;
overload externalInstanceMethod(#NSDocument, #"handlePrintScriptCommand:") = Id, NSScriptCommand;
overload externalInstanceMethod(#NSDocument, #"objectSpecifier") = NSScriptObjectSpecifier;

record NSDocumentController = externalClass(NSObject);
overload externalInstanceMethod(#NSDocumentController, #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSDocumentController, #"initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#NSDocumentController, #"validateUserInterfaceItem:") = Bool, Id;
overload externalClassMethod(#NSDocumentController, #"sharedDocumentController") = Id;
overload externalInstanceMethod(#NSDocumentController, #"init") = Id;
overload externalInstanceMethod(#NSDocumentController, #"documents") = NSArray;
overload externalInstanceMethod(#NSDocumentController, #"currentDocument") = Id;
overload externalInstanceMethod(#NSDocumentController, #"currentDirectory") = NSString;
overload externalInstanceMethod(#NSDocumentController, #"documentForURL:") = Id, NSURL;
overload externalInstanceMethod(#NSDocumentController, #"documentForWindow:") = Id, NSWindow;
overload externalInstanceMethod(#NSDocumentController, #"addDocument:") = Void, NSDocument;
overload externalInstanceMethod(#NSDocumentController, #"removeDocument:") = Void, NSDocument;
overload externalInstanceMethod(#NSDocumentController, #"newDocument:") = Void, Id;
overload externalInstanceMethod(#NSDocumentController, #"openUntitledDocumentAndDisplay:error:") = Id, Bool, Pointer[NSError];
overload externalInstanceMethod(#NSDocumentController, #"makeUntitledDocumentOfType:error:") = Id, NSString, Pointer[NSError];
overload externalInstanceMethod(#NSDocumentController, #"openDocument:") = Void, Id;
overload externalInstanceMethod(#NSDocumentController, #"URLsFromRunningOpenPanel") = NSArray;
overload externalInstanceMethod(#NSDocumentController, #"runModalOpenPanel:forTypes:") = CLong, NSOpenPanel, NSArray;
overload externalInstanceMethod(#NSDocumentController, #"openDocumentWithContentsOfURL:display:error:") = Id, NSURL, Bool, Pointer[NSError];
overload externalInstanceMethod(#NSDocumentController, #"makeDocumentWithContentsOfURL:ofType:error:") = Id, NSURL, NSString, Pointer[NSError];
overload externalInstanceMethod(#NSDocumentController, #"reopenDocumentForURL:withContentsOfURL:error:") = Bool, NSURL, NSURL, Pointer[NSError];
overload externalInstanceMethod(#NSDocumentController, #"makeDocumentForURL:withContentsOfURL:ofType:error:") = Id, NSURL, NSURL, NSString, Pointer[NSError];
overload externalInstanceMethod(#NSDocumentController, #"setAutosavingDelay:") = Void, Double;
overload externalInstanceMethod(#NSDocumentController, #"autosavingDelay") = Double;
overload externalInstanceMethod(#NSDocumentController, #"saveAllDocuments:") = Void, Id;
overload externalInstanceMethod(#NSDocumentController, #"hasEditedDocuments") = Bool;
overload externalInstanceMethod(#NSDocumentController, #"reviewUnsavedDocumentsWithAlertTitle:cancellable:delegate:didReviewAllSelector:contextInfo:") = Void, NSString, Bool, Id, SelectorHandle, RawPointer;
overload externalInstanceMethod(#NSDocumentController, #"closeAllDocumentsWithDelegate:didCloseAllSelector:contextInfo:") = Void, Id, SelectorHandle, RawPointer;
overload externalInstanceMethod(#NSDocumentController, #"presentError:modalForWindow:delegate:didPresentSelector:contextInfo:") = Void, NSError, NSWindow, Id, SelectorHandle, RawPointer;
overload externalInstanceMethod(#NSDocumentController, #"presentError:") = Bool, NSError;
overload externalInstanceMethod(#NSDocumentController, #"willPresentError:") = NSError, NSError;
overload externalInstanceMethod(#NSDocumentController, #"maximumRecentDocumentCount") = CULong;
overload externalInstanceMethod(#NSDocumentController, #"clearRecentDocuments:") = Void, Id;
overload externalInstanceMethod(#NSDocumentController, #"noteNewRecentDocument:") = Void, NSDocument;
overload externalInstanceMethod(#NSDocumentController, #"noteNewRecentDocumentURL:") = Void, NSURL;
overload externalInstanceMethod(#NSDocumentController, #"recentDocumentURLs") = NSArray;
overload externalInstanceMethod(#NSDocumentController, #"defaultType") = NSString;
overload externalInstanceMethod(#NSDocumentController, #"typeForContentsOfURL:error:") = NSString, NSURL, Pointer[NSError];
overload externalInstanceMethod(#NSDocumentController, #"documentClassNames") = NSArray;
overload externalInstanceMethod(#NSDocumentController, #"documentClassForType:") = Id, NSString;
overload externalInstanceMethod(#NSDocumentController, #"displayNameForType:") = NSString, NSString;
overload externalInstanceMethod(#NSDocumentController, #"validateUserInterfaceItem:") = Bool, Id;
overload externalInstanceMethod(#NSDocumentController, #"fileExtensionsFromType:") = NSArray, NSString;
overload externalInstanceMethod(#NSDocumentController, #"typeFromFileExtension:") = NSString, NSString;
overload externalInstanceMethod(#NSDocumentController, #"documentForFileName:") = Id, NSString;
overload externalInstanceMethod(#NSDocumentController, #"fileNamesFromRunningOpenPanel") = NSArray;
overload externalInstanceMethod(#NSDocumentController, #"makeDocumentWithContentsOfFile:ofType:") = Id, NSString, NSString;
overload externalInstanceMethod(#NSDocumentController, #"makeDocumentWithContentsOfURL:ofType:") = Id, NSURL, NSString;
overload externalInstanceMethod(#NSDocumentController, #"makeUntitledDocumentOfType:") = Id, NSString;
overload externalInstanceMethod(#NSDocumentController, #"openDocumentWithContentsOfFile:display:") = Id, NSString, Bool;
overload externalInstanceMethod(#NSDocumentController, #"openDocumentWithContentsOfURL:display:") = Id, NSURL, Bool;
overload externalInstanceMethod(#NSDocumentController, #"openUntitledDocumentOfType:display:") = Id, NSString, Bool;
overload externalInstanceMethod(#NSDocumentController, #"setShouldCreateUI:") = Void, Bool;
overload externalInstanceMethod(#NSDocumentController, #"shouldCreateUI") = Bool;

record NSDrawer = externalClass(NSResponder);
overload externalInstanceMethod(#NSDrawer, #"initWithContentSize:preferredEdge:") = Id, NSSize, CULong;
overload externalInstanceMethod(#NSDrawer, #"setParentWindow:") = Void, NSWindow;
overload externalInstanceMethod(#NSDrawer, #"parentWindow") = NSWindow;
overload externalInstanceMethod(#NSDrawer, #"setContentView:") = Void, NSView;
overload externalInstanceMethod(#NSDrawer, #"contentView") = NSView;
overload externalInstanceMethod(#NSDrawer, #"setPreferredEdge:") = Void, CULong;
overload externalInstanceMethod(#NSDrawer, #"preferredEdge") = CULong;
overload externalInstanceMethod(#NSDrawer, #"setDelegate:") = Void, Id;
overload externalInstanceMethod(#NSDrawer, #"delegate") = Id;
overload externalInstanceMethod(#NSDrawer, #"open") = Void;
overload externalInstanceMethod(#NSDrawer, #"openOnEdge:") = Void, CULong;
overload externalInstanceMethod(#NSDrawer, #"close") = Void;
overload externalInstanceMethod(#NSDrawer, #"open:") = Void, Id;
overload externalInstanceMethod(#NSDrawer, #"close:") = Void, Id;
overload externalInstanceMethod(#NSDrawer, #"toggle:") = Void, Id;
overload externalInstanceMethod(#NSDrawer, #"state") = CLong;
overload externalInstanceMethod(#NSDrawer, #"edge") = CULong;
overload externalInstanceMethod(#NSDrawer, #"setContentSize:") = Void, NSSize;
overload externalInstanceMethod(#NSDrawer, #"contentSize") = NSSize;
overload externalInstanceMethod(#NSDrawer, #"setMinContentSize:") = Void, NSSize;
overload externalInstanceMethod(#NSDrawer, #"minContentSize") = NSSize;
overload externalInstanceMethod(#NSDrawer, #"setMaxContentSize:") = Void, NSSize;
overload externalInstanceMethod(#NSDrawer, #"maxContentSize") = NSSize;
overload externalInstanceMethod(#NSDrawer, #"setLeadingOffset:") = Void, Double;
overload externalInstanceMethod(#NSDrawer, #"leadingOffset") = Double;
overload externalInstanceMethod(#NSDrawer, #"setTrailingOffset:") = Void, Double;
overload externalInstanceMethod(#NSDrawer, #"trailingOffset") = Double;

record NSEPSImageRep = externalClass(NSImageRep);
overload externalClassMethod(#NSEPSImageRep, #"imageRepWithData:") = Id, NSData;
overload externalInstanceMethod(#NSEPSImageRep, #"initWithData:") = Id, NSData;
overload externalInstanceMethod(#NSEPSImageRep, #"prepareGState") = Void;
overload externalInstanceMethod(#NSEPSImageRep, #"EPSRepresentation") = NSData;
overload externalInstanceMethod(#NSEPSImageRep, #"boundingBox") = NSRect;

record NSEvent = externalClass(NSObject);
overload externalInstanceMethod(#NSEvent, #"copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#NSEvent, #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSEvent, #"initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#NSEvent, #"type") = CULong;
overload externalInstanceMethod(#NSEvent, #"modifierFlags") = CULong;
overload externalInstanceMethod(#NSEvent, #"timestamp") = Double;
overload externalInstanceMethod(#NSEvent, #"window") = NSWindow;
overload externalInstanceMethod(#NSEvent, #"windowNumber") = CLong;
overload externalInstanceMethod(#NSEvent, #"context") = NSGraphicsContext;
overload externalInstanceMethod(#NSEvent, #"clickCount") = CLong;
overload externalInstanceMethod(#NSEvent, #"buttonNumber") = CLong;
overload externalInstanceMethod(#NSEvent, #"eventNumber") = CLong;
overload externalInstanceMethod(#NSEvent, #"pressure") = Float;
overload externalInstanceMethod(#NSEvent, #"locationInWindow") = NSPoint;
overload externalInstanceMethod(#NSEvent, #"deltaX") = Double;
overload externalInstanceMethod(#NSEvent, #"deltaY") = Double;
overload externalInstanceMethod(#NSEvent, #"deltaZ") = Double;
overload externalInstanceMethod(#NSEvent, #"characters") = NSString;
overload externalInstanceMethod(#NSEvent, #"charactersIgnoringModifiers") = NSString;
overload externalInstanceMethod(#NSEvent, #"isARepeat") = Bool;
overload externalInstanceMethod(#NSEvent, #"keyCode") = UShort;
overload externalInstanceMethod(#NSEvent, #"trackingNumber") = CLong;
overload externalInstanceMethod(#NSEvent, #"userData") = RawPointer;
overload externalInstanceMethod(#NSEvent, #"trackingArea") = NSTrackingArea;
overload externalInstanceMethod(#NSEvent, #"subtype") = Short;
overload externalInstanceMethod(#NSEvent, #"data1") = CLong;
overload externalInstanceMethod(#NSEvent, #"data2") = CLong;
overload externalInstanceMethod(#NSEvent, #"eventRef") = RawPointer;
overload externalClassMethod(#NSEvent, #"eventWithEventRef:") = NSEvent, RawPointer;
overload externalInstanceMethod(#NSEvent, #"CGEvent") = CGEventRef;
overload externalClassMethod(#NSEvent, #"eventWithCGEvent:") = NSEvent, CGEventRef;
overload externalClassMethod(#NSEvent, #"setMouseCoalescingEnabled:") = Void, Bool;
overload externalClassMethod(#NSEvent, #"isMouseCoalescingEnabled") = Bool;
overload externalInstanceMethod(#NSEvent, #"magnification") = Double;
overload externalInstanceMethod(#NSEvent, #"deviceID") = CULong;
overload externalInstanceMethod(#NSEvent, #"rotation") = Float;
overload externalInstanceMethod(#NSEvent, #"absoluteX") = CLong;
overload externalInstanceMethod(#NSEvent, #"absoluteY") = CLong;
overload externalInstanceMethod(#NSEvent, #"absoluteZ") = CLong;
overload externalInstanceMethod(#NSEvent, #"buttonMask") = CULong;
overload externalInstanceMethod(#NSEvent, #"tilt") = NSPoint;
overload externalInstanceMethod(#NSEvent, #"tangentialPressure") = Float;
overload externalInstanceMethod(#NSEvent, #"vendorDefined") = Id;
overload externalInstanceMethod(#NSEvent, #"vendorID") = CULong;
overload externalInstanceMethod(#NSEvent, #"tabletID") = CULong;
overload externalInstanceMethod(#NSEvent, #"pointingDeviceID") = CULong;
overload externalInstanceMethod(#NSEvent, #"systemTabletID") = CULong;
overload externalInstanceMethod(#NSEvent, #"vendorPointingDeviceType") = CULong;
overload externalInstanceMethod(#NSEvent, #"pointingDeviceSerialNumber") = CULong;
overload externalInstanceMethod(#NSEvent, #"uniqueID") = UInt64;
overload externalInstanceMethod(#NSEvent, #"capabilityMask") = CULong;
overload externalInstanceMethod(#NSEvent, #"pointingDeviceType") = CULong;
overload externalInstanceMethod(#NSEvent, #"isEnteringProximity") = Bool;
overload externalInstanceMethod(#NSEvent, #"touchesMatchingPhase:inView:") = NSSet, CULong, NSView;
overload externalClassMethod(#NSEvent, #"startPeriodicEventsAfterDelay:withPeriod:") = Void, Double, Double;
overload externalClassMethod(#NSEvent, #"stopPeriodicEvents") = Void;
overload externalClassMethod(#NSEvent, #"mouseEventWithType:location:modifierFlags:timestamp:windowNumber:context:eventNumber:clickCount:pressure:") = NSEvent, CULong, NSPoint, CULong, Double, CLong, NSGraphicsContext, CLong, CLong, Float;
overload externalClassMethod(#NSEvent, #"keyEventWithType:location:modifierFlags:timestamp:windowNumber:context:characters:charactersIgnoringModifiers:isARepeat:keyCode:") = NSEvent, CULong, NSPoint, CULong, Double, CLong, NSGraphicsContext, NSString, NSString, Bool, UShort;
overload externalClassMethod(#NSEvent, #"enterExitEventWithType:location:modifierFlags:timestamp:windowNumber:context:eventNumber:trackingNumber:userData:") = NSEvent, CULong, NSPoint, CULong, Double, CLong, NSGraphicsContext, CLong, CLong, RawPointer;
overload externalClassMethod(#NSEvent, #"otherEventWithType:location:modifierFlags:timestamp:windowNumber:context:subtype:data1:data2:") = NSEvent, CULong, NSPoint, CULong, Double, CLong, NSGraphicsContext, Short, CLong, CLong;
overload externalClassMethod(#NSEvent, #"mouseLocation") = NSPoint;
overload externalClassMethod(#NSEvent, #"modifierFlags") = CULong;
overload externalClassMethod(#NSEvent, #"pressedMouseButtons") = CULong;
overload externalClassMethod(#NSEvent, #"doubleClickInterval") = Double;
overload externalClassMethod(#NSEvent, #"keyRepeatDelay") = Double;
overload externalClassMethod(#NSEvent, #"keyRepeatInterval") = Double;
overload externalClassMethod(#NSEvent, #"addGlobalMonitorForEventsMatchingMask:handler:") = Id, UInt64, UnknownType;
overload externalClassMethod(#NSEvent, #"addLocalMonitorForEventsMatchingMask:handler:") = Id, UInt64, UnknownType;
overload externalClassMethod(#NSEvent, #"removeMonitor:") = Void, Id;

record NSFileWrapper = externalClass(NSObject);
overload externalInstanceMethod(#NSFileWrapper, #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSFileWrapper, #"initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#NSFileWrapper, #"initWithURL:options:error:") = Id, NSURL, CULong, Pointer[NSError];
overload externalInstanceMethod(#NSFileWrapper, #"initDirectoryWithFileWrappers:") = Id, NSDictionary;
overload externalInstanceMethod(#NSFileWrapper, #"initRegularFileWithContents:") = Id, NSData;
overload externalInstanceMethod(#NSFileWrapper, #"initSymbolicLinkWithDestinationURL:") = Id, NSURL;
overload externalInstanceMethod(#NSFileWrapper, #"initWithSerializedRepresentation:") = Id, NSData;
overload externalInstanceMethod(#NSFileWrapper, #"isDirectory") = Bool;
overload externalInstanceMethod(#NSFileWrapper, #"isRegularFile") = Bool;
overload externalInstanceMethod(#NSFileWrapper, #"isSymbolicLink") = Bool;
overload externalInstanceMethod(#NSFileWrapper, #"setPreferredFilename:") = Void, NSString;
overload externalInstanceMethod(#NSFileWrapper, #"preferredFilename") = NSString;
overload externalInstanceMethod(#NSFileWrapper, #"setFilename:") = Void, NSString;
overload externalInstanceMethod(#NSFileWrapper, #"filename") = NSString;
overload externalInstanceMethod(#NSFileWrapper, #"setFileAttributes:") = Void, NSDictionary;
overload externalInstanceMethod(#NSFileWrapper, #"fileAttributes") = NSDictionary;
overload externalInstanceMethod(#NSFileWrapper, #"setIcon:") = Void, NSImage;
overload externalInstanceMethod(#NSFileWrapper, #"icon") = NSImage;
overload externalInstanceMethod(#NSFileWrapper, #"matchesContentsOfURL:") = Bool, NSURL;
overload externalInstanceMethod(#NSFileWrapper, #"readFromURL:options:error:") = Bool, NSURL, CULong, Pointer[NSError];
overload externalInstanceMethod(#NSFileWrapper, #"writeToURL:options:originalContentsURL:error:") = Bool, NSURL, CULong, NSURL, Pointer[NSError];
overload externalInstanceMethod(#NSFileWrapper, #"serializedRepresentation") = NSData;
overload externalInstanceMethod(#NSFileWrapper, #"addFileWrapper:") = NSString, NSFileWrapper;
overload externalInstanceMethod(#NSFileWrapper, #"addRegularFileWithContents:preferredFilename:") = NSString, NSData, NSString;
overload externalInstanceMethod(#NSFileWrapper, #"removeFileWrapper:") = Void, NSFileWrapper;
overload externalInstanceMethod(#NSFileWrapper, #"fileWrappers") = NSDictionary;
overload externalInstanceMethod(#NSFileWrapper, #"keyForFileWrapper:") = NSString, NSFileWrapper;
overload externalInstanceMethod(#NSFileWrapper, #"regularFileContents") = NSData;
overload externalInstanceMethod(#NSFileWrapper, #"symbolicLinkDestinationURL") = NSURL;
overload externalInstanceMethod(#NSFileWrapper, #"initWithPath:") = Id, NSString;
overload externalInstanceMethod(#NSFileWrapper, #"initSymbolicLinkWithDestination:") = Id, NSString;
overload externalInstanceMethod(#NSFileWrapper, #"needsToBeUpdatedFromPath:") = Bool, NSString;
overload externalInstanceMethod(#NSFileWrapper, #"updateFromPath:") = Bool, NSString;
overload externalInstanceMethod(#NSFileWrapper, #"writeToFile:atomically:updateFilenames:") = Bool, NSString, Bool, Bool;
overload externalInstanceMethod(#NSFileWrapper, #"addFileWithPath:") = NSString, NSString;
overload externalInstanceMethod(#NSFileWrapper, #"addSymbolicLinkWithDestination:preferredFilename:") = NSString, NSString, NSString;
overload externalInstanceMethod(#NSFileWrapper, #"symbolicLinkDestination") = NSString;

record NSFont = externalClass(NSObject);
overload externalInstanceMethod(#NSFont, #"copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#NSFont, #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSFont, #"initWithCoder:") = Id, NSCoder;
overload externalClassMethod(#NSFont, #"fontWithName:size:") = NSFont, NSString, Double;
overload externalClassMethod(#NSFont, #"fontWithName:matrix:") = NSFont, NSString, Pointer[Double];
overload externalClassMethod(#NSFont, #"fontWithDescriptor:size:") = NSFont, NSFontDescriptor, Double;
overload externalClassMethod(#NSFont, #"fontWithDescriptor:textTransform:") = NSFont, NSFontDescriptor, NSAffineTransform;
overload externalClassMethod(#NSFont, #"userFontOfSize:") = NSFont, Double;
overload externalClassMethod(#NSFont, #"userFixedPitchFontOfSize:") = NSFont, Double;
overload externalClassMethod(#NSFont, #"setUserFont:") = Void, NSFont;
overload externalClassMethod(#NSFont, #"setUserFixedPitchFont:") = Void, NSFont;
overload externalClassMethod(#NSFont, #"systemFontOfSize:") = NSFont, Double;
overload externalClassMethod(#NSFont, #"boldSystemFontOfSize:") = NSFont, Double;
overload externalClassMethod(#NSFont, #"labelFontOfSize:") = NSFont, Double;
overload externalClassMethod(#NSFont, #"titleBarFontOfSize:") = NSFont, Double;
overload externalClassMethod(#NSFont, #"menuFontOfSize:") = NSFont, Double;
overload externalClassMethod(#NSFont, #"menuBarFontOfSize:") = NSFont, Double;
overload externalClassMethod(#NSFont, #"messageFontOfSize:") = NSFont, Double;
overload externalClassMethod(#NSFont, #"paletteFontOfSize:") = NSFont, Double;
overload externalClassMethod(#NSFont, #"toolTipsFontOfSize:") = NSFont, Double;
overload externalClassMethod(#NSFont, #"controlContentFontOfSize:") = NSFont, Double;
overload externalClassMethod(#NSFont, #"systemFontSize") = Double;
overload externalClassMethod(#NSFont, #"smallSystemFontSize") = Double;
overload externalClassMethod(#NSFont, #"labelFontSize") = Double;
overload externalClassMethod(#NSFont, #"systemFontSizeForControlSize:") = Double, CULong;
overload externalInstanceMethod(#NSFont, #"fontName") = NSString;
overload externalInstanceMethod(#NSFont, #"pointSize") = Double;
overload externalInstanceMethod(#NSFont, #"matrix") = Pointer[Double];
overload externalInstanceMethod(#NSFont, #"familyName") = NSString;
overload externalInstanceMethod(#NSFont, #"displayName") = NSString;
overload externalInstanceMethod(#NSFont, #"fontDescriptor") = NSFontDescriptor;
overload externalInstanceMethod(#NSFont, #"textTransform") = NSAffineTransform;
overload externalInstanceMethod(#NSFont, #"numberOfGlyphs") = CULong;
overload externalInstanceMethod(#NSFont, #"mostCompatibleStringEncoding") = CULong;
overload externalInstanceMethod(#NSFont, #"glyphWithName:") = UInt, NSString;
overload externalInstanceMethod(#NSFont, #"coveredCharacterSet") = NSCharacterSet;
overload externalInstanceMethod(#NSFont, #"boundingRectForFont") = NSRect;
overload externalInstanceMethod(#NSFont, #"maximumAdvancement") = NSSize;
overload externalInstanceMethod(#NSFont, #"ascender") = Double;
overload externalInstanceMethod(#NSFont, #"descender") = Double;
overload externalInstanceMethod(#NSFont, #"leading") = Double;
overload externalInstanceMethod(#NSFont, #"underlinePosition") = Double;
overload externalInstanceMethod(#NSFont, #"underlineThickness") = Double;
overload externalInstanceMethod(#NSFont, #"italicAngle") = Double;
overload externalInstanceMethod(#NSFont, #"capHeight") = Double;
overload externalInstanceMethod(#NSFont, #"xHeight") = Double;
overload externalInstanceMethod(#NSFont, #"isFixedPitch") = Bool;
overload externalInstanceMethod(#NSFont, #"boundingRectForGlyph:") = NSRect, UInt;
overload externalInstanceMethod(#NSFont, #"advancementForGlyph:") = NSSize, UInt;
overload externalInstanceMethod(#NSFont, #"getBoundingRects:forGlyphs:count:") = Void, NSRectArray, Pointer[UInt], CULong;
overload externalInstanceMethod(#NSFont, #"getAdvancements:forGlyphs:count:") = Void, NSSizeArray, Pointer[UInt], CULong;
overload externalInstanceMethod(#NSFont, #"getAdvancements:forPackedGlyphs:length:") = Void, NSSizeArray, RawPointer, CULong;
overload externalInstanceMethod(#NSFont, #"set") = Void;
overload externalInstanceMethod(#NSFont, #"setInContext:") = Void, NSGraphicsContext;
overload externalInstanceMethod(#NSFont, #"printerFont") = NSFont;
overload externalInstanceMethod(#NSFont, #"screenFont") = NSFont;
overload externalInstanceMethod(#NSFont, #"screenFontWithRenderingMode:") = NSFont, CULong;
overload externalInstanceMethod(#NSFont, #"renderingMode") = CULong;

record NSFontDescriptor = externalClass(NSObject);
overload externalInstanceMethod(#NSFontDescriptor, #"copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#NSFontDescriptor, #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSFontDescriptor, #"initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#NSFontDescriptor, #"postscriptName") = NSString;
overload externalInstanceMethod(#NSFontDescriptor, #"pointSize") = Double;
overload externalInstanceMethod(#NSFontDescriptor, #"matrix") = NSAffineTransform;
overload externalInstanceMethod(#NSFontDescriptor, #"symbolicTraits") = UInt;
overload externalInstanceMethod(#NSFontDescriptor, #"objectForKey:") = Id, NSString;
overload externalInstanceMethod(#NSFontDescriptor, #"fontAttributes") = NSDictionary;
overload externalClassMethod(#NSFontDescriptor, #"fontDescriptorWithFontAttributes:") = NSFontDescriptor, NSDictionary;
overload externalClassMethod(#NSFontDescriptor, #"fontDescriptorWithName:size:") = NSFontDescriptor, NSString, Double;
overload externalClassMethod(#NSFontDescriptor, #"fontDescriptorWithName:matrix:") = NSFontDescriptor, NSString, NSAffineTransform;
overload externalInstanceMethod(#NSFontDescriptor, #"initWithFontAttributes:") = Id, NSDictionary;
overload externalInstanceMethod(#NSFontDescriptor, #"matchingFontDescriptorsWithMandatoryKeys:") = NSArray, NSSet;
overload externalInstanceMethod(#NSFontDescriptor, #"matchingFontDescriptorWithMandatoryKeys:") = NSFontDescriptor, NSSet;
overload externalInstanceMethod(#NSFontDescriptor, #"fontDescriptorByAddingAttributes:") = NSFontDescriptor, NSDictionary;
overload externalInstanceMethod(#NSFontDescriptor, #"fontDescriptorWithSymbolicTraits:") = NSFontDescriptor, UInt;
overload externalInstanceMethod(#NSFontDescriptor, #"fontDescriptorWithSize:") = NSFontDescriptor, Double;
overload externalInstanceMethod(#NSFontDescriptor, #"fontDescriptorWithMatrix:") = NSFontDescriptor, NSAffineTransform;
overload externalInstanceMethod(#NSFontDescriptor, #"fontDescriptorWithFace:") = NSFontDescriptor, NSString;
overload externalInstanceMethod(#NSFontDescriptor, #"fontDescriptorWithFamily:") = NSFontDescriptor, NSString;

record NSFontManager = externalClass(NSObject);
overload externalClassMethod(#NSFontManager, #"setFontPanelFactory:") = Void, Id;
overload externalClassMethod(#NSFontManager, #"setFontManagerFactory:") = Void, Id;
overload externalClassMethod(#NSFontManager, #"sharedFontManager") = NSFontManager;
overload externalInstanceMethod(#NSFontManager, #"isMultiple") = Bool;
overload externalInstanceMethod(#NSFontManager, #"selectedFont") = NSFont;
overload externalInstanceMethod(#NSFontManager, #"setSelectedFont:isMultiple:") = Void, NSFont, Bool;
overload externalInstanceMethod(#NSFontManager, #"setFontMenu:") = Void, NSMenu;
overload externalInstanceMethod(#NSFontManager, #"fontMenu:") = NSMenu, Bool;
overload externalInstanceMethod(#NSFontManager, #"fontPanel:") = NSFontPanel, Bool;
overload externalInstanceMethod(#NSFontManager, #"fontWithFamily:traits:weight:size:") = NSFont, NSString, CULong, CLong, Double;
overload externalInstanceMethod(#NSFontManager, #"traitsOfFont:") = CULong, NSFont;
overload externalInstanceMethod(#NSFontManager, #"weightOfFont:") = CLong, NSFont;
overload externalInstanceMethod(#NSFontManager, #"availableFonts") = NSArray;
overload externalInstanceMethod(#NSFontManager, #"availableFontFamilies") = NSArray;
overload externalInstanceMethod(#NSFontManager, #"availableMembersOfFontFamily:") = NSArray, NSString;
overload externalInstanceMethod(#NSFontManager, #"convertFont:") = NSFont, NSFont;
overload externalInstanceMethod(#NSFontManager, #"convertFont:toSize:") = NSFont, NSFont, Double;
overload externalInstanceMethod(#NSFontManager, #"convertFont:toFace:") = NSFont, NSFont, NSString;
overload externalInstanceMethod(#NSFontManager, #"convertFont:toFamily:") = NSFont, NSFont, NSString;
overload externalInstanceMethod(#NSFontManager, #"convertFont:toHaveTrait:") = NSFont, NSFont, CULong;
overload externalInstanceMethod(#NSFontManager, #"convertFont:toNotHaveTrait:") = NSFont, NSFont, CULong;
overload externalInstanceMethod(#NSFontManager, #"convertWeight:ofFont:") = NSFont, Bool, NSFont;
overload externalInstanceMethod(#NSFontManager, #"isEnabled") = Bool;
overload externalInstanceMethod(#NSFontManager, #"setEnabled:") = Void, Bool;
overload externalInstanceMethod(#NSFontManager, #"action") = SelectorHandle;
overload externalInstanceMethod(#NSFontManager, #"setAction:") = Void, SelectorHandle;
overload externalInstanceMethod(#NSFontManager, #"sendAction") = Bool;
overload externalInstanceMethod(#NSFontManager, #"setDelegate:") = Void, Id;
overload externalInstanceMethod(#NSFontManager, #"delegate") = Id;
overload externalInstanceMethod(#NSFontManager, #"localizedNameForFamily:face:") = NSString, NSString, NSString;
overload externalInstanceMethod(#NSFontManager, #"setSelectedAttributes:isMultiple:") = Void, NSDictionary, Bool;
overload externalInstanceMethod(#NSFontManager, #"convertAttributes:") = NSDictionary, NSDictionary;
overload externalInstanceMethod(#NSFontManager, #"availableFontNamesMatchingFontDescriptor:") = NSArray, NSFontDescriptor;
overload externalInstanceMethod(#NSFontManager, #"collectionNames") = NSArray;
overload externalInstanceMethod(#NSFontManager, #"fontDescriptorsInCollection:") = NSArray, NSString;
overload externalInstanceMethod(#NSFontManager, #"addCollection:options:") = Bool, NSString, CLong;
overload externalInstanceMethod(#NSFontManager, #"removeCollection:") = Bool, NSString;
overload externalInstanceMethod(#NSFontManager, #"addFontDescriptors:toCollection:") = Void, NSArray, NSString;
overload externalInstanceMethod(#NSFontManager, #"removeFontDescriptor:fromCollection:") = Void, NSFontDescriptor, NSString;
overload externalInstanceMethod(#NSFontManager, #"currentFontAction") = CULong;
overload externalInstanceMethod(#NSFontManager, #"convertFontTraits:") = CULong, CULong;
overload externalInstanceMethod(#NSFontManager, #"setTarget:") = Void, Id;
overload externalInstanceMethod(#NSFontManager, #"target") = Id;
overload externalInstanceMethod(#NSFontManager, #"fontNamed:hasTraits:") = Bool, NSString, CULong;
overload externalInstanceMethod(#NSFontManager, #"availableFontNamesWithTraits:") = NSArray, CULong;
overload externalInstanceMethod(#NSFontManager, #"addFontTrait:") = Void, Id;
overload externalInstanceMethod(#NSFontManager, #"removeFontTrait:") = Void, Id;
overload externalInstanceMethod(#NSFontManager, #"modifyFontViaPanel:") = Void, Id;
overload externalInstanceMethod(#NSFontManager, #"modifyFont:") = Void, Id;
overload externalInstanceMethod(#NSFontManager, #"orderFrontFontPanel:") = Void, Id;
overload externalInstanceMethod(#NSFontManager, #"orderFrontStylesPanel:") = Void, Id;

record NSFontPanel = externalClass(NSPanel);
overload externalClassMethod(#NSFontPanel, #"sharedFontPanel") = NSFontPanel;
overload externalClassMethod(#NSFontPanel, #"sharedFontPanelExists") = Bool;
overload externalInstanceMethod(#NSFontPanel, #"accessoryView") = NSView;
overload externalInstanceMethod(#NSFontPanel, #"setAccessoryView:") = Void, NSView;
overload externalInstanceMethod(#NSFontPanel, #"setPanelFont:isMultiple:") = Void, NSFont, Bool;
overload externalInstanceMethod(#NSFontPanel, #"panelConvertFont:") = NSFont, NSFont;
overload externalInstanceMethod(#NSFontPanel, #"worksWhenModal") = Bool;
overload externalInstanceMethod(#NSFontPanel, #"isEnabled") = Bool;
overload externalInstanceMethod(#NSFontPanel, #"setEnabled:") = Void, Bool;
overload externalInstanceMethod(#NSFontPanel, #"reloadDefaultFontFamilies") = Void;

record NSForm = externalClass(NSMatrix);
overload externalInstanceMethod(#NSForm, #"indexOfSelectedItem") = CLong;
overload externalInstanceMethod(#NSForm, #"setEntryWidth:") = Void, Double;
overload externalInstanceMethod(#NSForm, #"setInterlineSpacing:") = Void, Double;
overload externalInstanceMethod(#NSForm, #"setBordered:") = Void, Bool;
overload externalInstanceMethod(#NSForm, #"setBezeled:") = Void, Bool;
overload externalInstanceMethod(#NSForm, #"setTitleAlignment:") = Void, CULong;
overload externalInstanceMethod(#NSForm, #"setTextAlignment:") = Void, CULong;
overload externalInstanceMethod(#NSForm, #"setTitleFont:") = Void, NSFont;
overload externalInstanceMethod(#NSForm, #"setTextFont:") = Void, NSFont;
overload externalInstanceMethod(#NSForm, #"cellAtIndex:") = Id, CLong;
overload externalInstanceMethod(#NSForm, #"drawCellAtIndex:") = Void, CLong;
overload externalInstanceMethod(#NSForm, #"addEntry:") = NSFormCell, NSString;
overload externalInstanceMethod(#NSForm, #"insertEntry:atIndex:") = NSFormCell, NSString, CLong;
overload externalInstanceMethod(#NSForm, #"removeEntryAtIndex:") = Void, CLong;
overload externalInstanceMethod(#NSForm, #"indexOfCellWithTag:") = CLong, CLong;
overload externalInstanceMethod(#NSForm, #"selectTextAtIndex:") = Void, CLong;
overload externalInstanceMethod(#NSForm, #"setFrameSize:") = Void, NSSize;
overload externalInstanceMethod(#NSForm, #"setTitleBaseWritingDirection:") = Void, CLong;
overload externalInstanceMethod(#NSForm, #"setTextBaseWritingDirection:") = Void, CLong;

record NSFormCell = externalClass(NSActionCell);
overload externalInstanceMethod(#NSFormCell, #"initTextCell:") = Id, NSString;
overload externalInstanceMethod(#NSFormCell, #"titleWidth:") = Double, NSSize;
overload externalInstanceMethod(#NSFormCell, #"titleWidth") = Double;
overload externalInstanceMethod(#NSFormCell, #"setTitleWidth:") = Void, Double;
overload externalInstanceMethod(#NSFormCell, #"title") = NSString;
overload externalInstanceMethod(#NSFormCell, #"setTitle:") = Void, NSString;
overload externalInstanceMethod(#NSFormCell, #"titleFont") = NSFont;
overload externalInstanceMethod(#NSFormCell, #"setTitleFont:") = Void, NSFont;
overload externalInstanceMethod(#NSFormCell, #"titleAlignment") = CULong;
overload externalInstanceMethod(#NSFormCell, #"setTitleAlignment:") = Void, CULong;
overload externalInstanceMethod(#NSFormCell, #"isOpaque") = Bool;
overload externalInstanceMethod(#NSFormCell, #"setPlaceholderString:") = Void, NSString;
overload externalInstanceMethod(#NSFormCell, #"placeholderString") = NSString;
overload externalInstanceMethod(#NSFormCell, #"setPlaceholderAttributedString:") = Void, NSAttributedString;
overload externalInstanceMethod(#NSFormCell, #"placeholderAttributedString") = NSAttributedString;
overload externalInstanceMethod(#NSFormCell, #"titleBaseWritingDirection") = CLong;
overload externalInstanceMethod(#NSFormCell, #"setTitleBaseWritingDirection:") = Void, CLong;
overload externalInstanceMethod(#NSFormCell, #"setTitleWithMnemonic:") = Void, NSString;
overload externalInstanceMethod(#NSFormCell, #"attributedTitle") = NSAttributedString;
overload externalInstanceMethod(#NSFormCell, #"setAttributedTitle:") = Void, NSAttributedString;

record NSGlyphGenerator = externalClass(NSObject);
overload externalInstanceMethod(#NSGlyphGenerator, #"generateGlyphsForGlyphStorage:desiredNumberOfCharacters:glyphIndex:characterIndex:") = Void, Id, CULong, Pointer[CULong], Pointer[CULong];
overload externalClassMethod(#NSGlyphGenerator, #"sharedGlyphGenerator") = Id;

record NSGlyphInfo = externalClass(NSObject);
overload externalInstanceMethod(#NSGlyphInfo, #"copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#NSGlyphInfo, #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSGlyphInfo, #"initWithCoder:") = Id, NSCoder;
overload externalClassMethod(#NSGlyphInfo, #"glyphInfoWithGlyphName:forFont:baseString:") = NSGlyphInfo, NSString, NSFont, NSString;
overload externalClassMethod(#NSGlyphInfo, #"glyphInfoWithGlyph:forFont:baseString:") = NSGlyphInfo, UInt, NSFont, NSString;
overload externalClassMethod(#NSGlyphInfo, #"glyphInfoWithCharacterIdentifier:collection:baseString:") = NSGlyphInfo, CULong, CULong, NSString;
overload externalInstanceMethod(#NSGlyphInfo, #"glyphName") = NSString;
overload externalInstanceMethod(#NSGlyphInfo, #"characterIdentifier") = CULong;
overload externalInstanceMethod(#NSGlyphInfo, #"characterCollection") = CULong;

record NSGradient = externalClass(NSObject);
overload externalInstanceMethod(#NSGradient, #"copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#NSGradient, #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSGradient, #"initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#NSGradient, #"initWithStartingColor:endingColor:") = Id, NSColor, NSColor;
overload externalInstanceMethod(#NSGradient, #"initWithColors:") = Id, NSArray;
overload externalVarargInstanceMethod(#NSGradient, #"initWithColorsAndLocations:") = Id, NSColor;
overload externalInstanceMethod(#NSGradient, #"initWithColors:atLocations:colorSpace:") = Id, NSArray, Pointer[Double], NSColorSpace;
overload externalInstanceMethod(#NSGradient, #"drawFromPoint:toPoint:options:") = Void, NSPoint, NSPoint, CULong;
overload externalInstanceMethod(#NSGradient, #"drawInRect:angle:") = Void, NSRect, Double;
overload externalInstanceMethod(#NSGradient, #"drawInBezierPath:angle:") = Void, NSBezierPath, Double;
overload externalInstanceMethod(#NSGradient, #"drawFromCenter:radius:toCenter:radius:options:") = Void, NSPoint, Double, NSPoint, Double, CULong;
overload externalInstanceMethod(#NSGradient, #"drawInRect:relativeCenterPosition:") = Void, NSRect, NSPoint;
overload externalInstanceMethod(#NSGradient, #"drawInBezierPath:relativeCenterPosition:") = Void, NSBezierPath, NSPoint;
overload externalInstanceMethod(#NSGradient, #"colorSpace") = NSColorSpace;
overload externalInstanceMethod(#NSGradient, #"numberOfColorStops") = CLong;
overload externalInstanceMethod(#NSGradient, #"getColor:location:atIndex:") = Void, Pointer[NSColor], Pointer[Double], CLong;
overload externalInstanceMethod(#NSGradient, #"interpolatedColorAtLocation:") = NSColor, Double;

record NSGraphicsContext = externalClass(NSObject);
overload externalClassMethod(#NSGraphicsContext, #"graphicsContextWithAttributes:") = NSGraphicsContext, NSDictionary;
overload externalClassMethod(#NSGraphicsContext, #"graphicsContextWithWindow:") = NSGraphicsContext, NSWindow;
overload externalClassMethod(#NSGraphicsContext, #"graphicsContextWithBitmapImageRep:") = NSGraphicsContext, NSBitmapImageRep;
overload externalClassMethod(#NSGraphicsContext, #"graphicsContextWithGraphicsPort:flipped:") = NSGraphicsContext, RawPointer, Bool;
overload externalClassMethod(#NSGraphicsContext, #"currentContext") = NSGraphicsContext;
overload externalClassMethod(#NSGraphicsContext, #"setCurrentContext:") = Void, NSGraphicsContext;
overload externalClassMethod(#NSGraphicsContext, #"currentContextDrawingToScreen") = Bool;
overload externalClassMethod(#NSGraphicsContext, #"saveGraphicsState") = Void;
overload externalClassMethod(#NSGraphicsContext, #"restoreGraphicsState") = Void;
overload externalClassMethod(#NSGraphicsContext, #"setGraphicsState:") = Void, CLong;
overload externalInstanceMethod(#NSGraphicsContext, #"attributes") = NSDictionary;
overload externalInstanceMethod(#NSGraphicsContext, #"isDrawingToScreen") = Bool;
overload externalInstanceMethod(#NSGraphicsContext, #"saveGraphicsState") = Void;
overload externalInstanceMethod(#NSGraphicsContext, #"restoreGraphicsState") = Void;
overload externalInstanceMethod(#NSGraphicsContext, #"flushGraphics") = Void;
overload externalInstanceMethod(#NSGraphicsContext, #"graphicsPort") = RawPointer;
overload externalInstanceMethod(#NSGraphicsContext, #"isFlipped") = Bool;
overload externalInstanceMethod(#NSGraphicsContext, #"setShouldAntialias:") = Void, Bool;
overload externalInstanceMethod(#NSGraphicsContext, #"shouldAntialias") = Bool;
overload externalInstanceMethod(#NSGraphicsContext, #"setImageInterpolation:") = Void, CULong;
overload externalInstanceMethod(#NSGraphicsContext, #"imageInterpolation") = CULong;
overload externalInstanceMethod(#NSGraphicsContext, #"setPatternPhase:") = Void, NSPoint;
overload externalInstanceMethod(#NSGraphicsContext, #"patternPhase") = NSPoint;
overload externalInstanceMethod(#NSGraphicsContext, #"setCompositingOperation:") = Void, CULong;
overload externalInstanceMethod(#NSGraphicsContext, #"compositingOperation") = CULong;
overload externalInstanceMethod(#NSGraphicsContext, #"colorRenderingIntent") = CLong;
overload externalInstanceMethod(#NSGraphicsContext, #"setColorRenderingIntent:") = Void, CLong;
overload externalInstanceMethod(#NSGraphicsContext, #"CIContext") = CIContext;

record NSHelpManager = externalClass(NSObject);
overload externalClassMethod(#NSHelpManager, #"sharedHelpManager") = NSHelpManager;
overload externalClassMethod(#NSHelpManager, #"setContextHelpModeActive:") = Void, Bool;
overload externalClassMethod(#NSHelpManager, #"isContextHelpModeActive") = Bool;
overload externalInstanceMethod(#NSHelpManager, #"setContextHelp:forObject:") = Void, NSAttributedString, Id;
overload externalInstanceMethod(#NSHelpManager, #"removeContextHelpForObject:") = Void, Id;
overload externalInstanceMethod(#NSHelpManager, #"contextHelpForObject:") = NSAttributedString, Id;
overload externalInstanceMethod(#NSHelpManager, #"showContextHelpForObject:locationHint:") = Bool, Id, NSPoint;
overload externalInstanceMethod(#NSHelpManager, #"openHelpAnchor:inBook:") = Void, NSString, NSString;
overload externalInstanceMethod(#NSHelpManager, #"findString:inBook:") = Void, NSString, NSString;
overload externalInstanceMethod(#NSHelpManager, #"registerBooksInBundle:") = Bool, NSBundle;

record NSImage = externalClass(NSObject);
overload externalInstanceMethod(#NSImage, #"copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#NSImage, #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSImage, #"initWithCoder:") = Id, NSCoder;
overload externalClassMethod(#NSImage, #"readableTypesForPasteboard:") = NSArray, NSPasteboard;
overload externalClassMethod(#NSImage, #"readingOptionsForType:pasteboard:") = CULong, NSString, NSPasteboard;
overload externalInstanceMethod(#NSImage, #"initWithPasteboardPropertyList:ofType:") = Id, Id, NSString;
overload externalInstanceMethod(#NSImage, #"writableTypesForPasteboard:") = NSArray, NSPasteboard;
overload externalInstanceMethod(#NSImage, #"writingOptionsForType:pasteboard:") = CULong, NSString, NSPasteboard;
overload externalInstanceMethod(#NSImage, #"pasteboardPropertyListForType:") = Id, NSString;
overload externalClassMethod(#NSImage, #"imageNamed:") = Id, NSString;
overload externalInstanceMethod(#NSImage, #"initWithSize:") = Id, NSSize;
overload externalInstanceMethod(#NSImage, #"initWithData:") = Id, NSData;
overload externalInstanceMethod(#NSImage, #"initWithContentsOfFile:") = Id, NSString;
overload externalInstanceMethod(#NSImage, #"initWithContentsOfURL:") = Id, NSURL;
overload externalInstanceMethod(#NSImage, #"initByReferencingFile:") = Id, NSString;
overload externalInstanceMethod(#NSImage, #"initByReferencingURL:") = Id, NSURL;
overload externalInstanceMethod(#NSImage, #"initWithIconRef:") = Id, IconRef;
overload externalInstanceMethod(#NSImage, #"initWithPasteboard:") = Id, NSPasteboard;
overload externalInstanceMethod(#NSImage, #"initWithDataIgnoringOrientation:") = Id, NSData;
overload externalInstanceMethod(#NSImage, #"setSize:") = Void, NSSize;
overload externalInstanceMethod(#NSImage, #"size") = NSSize;
overload externalInstanceMethod(#NSImage, #"setName:") = Bool, NSString;
overload externalInstanceMethod(#NSImage, #"name") = NSString;
overload externalInstanceMethod(#NSImage, #"setBackgroundColor:") = Void, NSColor;
overload externalInstanceMethod(#NSImage, #"backgroundColor") = NSColor;
overload externalInstanceMethod(#NSImage, #"setUsesEPSOnResolutionMismatch:") = Void, Bool;
overload externalInstanceMethod(#NSImage, #"usesEPSOnResolutionMismatch") = Bool;
overload externalInstanceMethod(#NSImage, #"setPrefersColorMatch:") = Void, Bool;
overload externalInstanceMethod(#NSImage, #"prefersColorMatch") = Bool;
overload externalInstanceMethod(#NSImage, #"setMatchesOnMultipleResolution:") = Void, Bool;
overload externalInstanceMethod(#NSImage, #"matchesOnMultipleResolution") = Bool;
overload externalInstanceMethod(#NSImage, #"drawAtPoint:fromRect:operation:fraction:") = Void, NSPoint, NSRect, CULong, Double;
overload externalInstanceMethod(#NSImage, #"drawInRect:fromRect:operation:fraction:") = Void, NSRect, NSRect, CULong, Double;
overload externalInstanceMethod(#NSImage, #"drawInRect:fromRect:operation:fraction:respectFlipped:hints:") = Void, NSRect, NSRect, CULong, Double, Bool, NSDictionary;
overload externalInstanceMethod(#NSImage, #"drawRepresentation:inRect:") = Bool, NSImageRep, NSRect;
overload externalInstanceMethod(#NSImage, #"recache") = Void;
overload externalInstanceMethod(#NSImage, #"TIFFRepresentation") = NSData;
overload externalInstanceMethod(#NSImage, #"TIFFRepresentationUsingCompression:factor:") = NSData, CULong, Float;
overload externalInstanceMethod(#NSImage, #"representations") = NSArray;
overload externalInstanceMethod(#NSImage, #"addRepresentations:") = Void, NSArray;
overload externalInstanceMethod(#NSImage, #"addRepresentation:") = Void, NSImageRep;
overload externalInstanceMethod(#NSImage, #"removeRepresentation:") = Void, NSImageRep;
overload externalInstanceMethod(#NSImage, #"isValid") = Bool;
overload externalInstanceMethod(#NSImage, #"lockFocus") = Void;
overload externalInstanceMethod(#NSImage, #"lockFocusFlipped:") = Void, Bool;
overload externalInstanceMethod(#NSImage, #"unlockFocus") = Void;
overload externalInstanceMethod(#NSImage, #"bestRepresentationForDevice:") = NSImageRep, NSDictionary;
overload externalInstanceMethod(#NSImage, #"setDelegate:") = Void, Id;
overload externalInstanceMethod(#NSImage, #"delegate") = Id;
overload externalClassMethod(#NSImage, #"imageUnfilteredFileTypes") = NSArray;
overload externalClassMethod(#NSImage, #"imageUnfilteredPasteboardTypes") = NSArray;
overload externalClassMethod(#NSImage, #"imageFileTypes") = NSArray;
overload externalClassMethod(#NSImage, #"imagePasteboardTypes") = NSArray;
overload externalClassMethod(#NSImage, #"imageTypes") = NSArray;
overload externalClassMethod(#NSImage, #"imageUnfilteredTypes") = NSArray;
overload externalClassMethod(#NSImage, #"canInitWithPasteboard:") = Bool, NSPasteboard;
overload externalInstanceMethod(#NSImage, #"cancelIncrementalLoad") = Void;
overload externalInstanceMethod(#NSImage, #"setCacheMode:") = Void, CULong;
overload externalInstanceMethod(#NSImage, #"cacheMode") = CULong;
overload externalInstanceMethod(#NSImage, #"alignmentRect") = NSRect;
overload externalInstanceMethod(#NSImage, #"setAlignmentRect:") = Void, NSRect;
overload externalInstanceMethod(#NSImage, #"isTemplate") = Bool;
overload externalInstanceMethod(#NSImage, #"setTemplate:") = Void, Bool;
overload externalInstanceMethod(#NSImage, #"accessibilityDescription") = NSString;
overload externalInstanceMethod(#NSImage, #"setAccessibilityDescription:") = Void, NSString;
overload externalInstanceMethod(#NSImage, #"initWithCGImage:size:") = Id, CGImageRef, NSSize;
overload externalInstanceMethod(#NSImage, #"CGImageForProposedRect:context:hints:") = CGImageRef, Pointer[NSRect], NSGraphicsContext, NSDictionary;
overload externalInstanceMethod(#NSImage, #"bestRepresentationForRect:context:hints:") = NSImageRep, NSRect, NSGraphicsContext, NSDictionary;
overload externalInstanceMethod(#NSImage, #"hitTestRect:withImageDestinationRect:context:hints:flipped:") = Bool, NSRect, NSRect, NSGraphicsContext, NSDictionary, Bool;
overload externalInstanceMethod(#NSImage, #"setFlipped:") = Void, Bool;
overload externalInstanceMethod(#NSImage, #"isFlipped") = Bool;
overload externalInstanceMethod(#NSImage, #"dissolveToPoint:fraction:") = Void, NSPoint, Double;
overload externalInstanceMethod(#NSImage, #"dissolveToPoint:fromRect:fraction:") = Void, NSPoint, NSRect, Double;
overload externalInstanceMethod(#NSImage, #"compositeToPoint:operation:") = Void, NSPoint, CULong;
overload externalInstanceMethod(#NSImage, #"compositeToPoint:fromRect:operation:") = Void, NSPoint, NSRect, CULong;
overload externalInstanceMethod(#NSImage, #"compositeToPoint:operation:fraction:") = Void, NSPoint, CULong, Double;
overload externalInstanceMethod(#NSImage, #"compositeToPoint:fromRect:operation:fraction:") = Void, NSPoint, NSRect, CULong, Double;
overload externalInstanceMethod(#NSImage, #"lockFocusOnRepresentation:") = Void, NSImageRep;
overload externalInstanceMethod(#NSImage, #"setScalesWhenResized:") = Void, Bool;
overload externalInstanceMethod(#NSImage, #"scalesWhenResized") = Bool;
overload externalInstanceMethod(#NSImage, #"setDataRetained:") = Void, Bool;
overload externalInstanceMethod(#NSImage, #"isDataRetained") = Bool;
overload externalInstanceMethod(#NSImage, #"setCachedSeparately:") = Void, Bool;
overload externalInstanceMethod(#NSImage, #"isCachedSeparately") = Bool;
overload externalInstanceMethod(#NSImage, #"setCacheDepthMatchesImageDepth:") = Void, Bool;
overload externalInstanceMethod(#NSImage, #"cacheDepthMatchesImageDepth") = Bool;

record NSImageCell = externalClass(NSCell);
overload externalInstanceMethod(#NSImageCell, #"copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#NSImageCell, #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSImageCell, #"initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#NSImageCell, #"imageAlignment") = CULong;
overload externalInstanceMethod(#NSImageCell, #"setImageAlignment:") = Void, CULong;
overload externalInstanceMethod(#NSImageCell, #"imageScaling") = CULong;
overload externalInstanceMethod(#NSImageCell, #"setImageScaling:") = Void, CULong;
overload externalInstanceMethod(#NSImageCell, #"imageFrameStyle") = CULong;
overload externalInstanceMethod(#NSImageCell, #"setImageFrameStyle:") = Void, CULong;

record NSImageRep = externalClass(NSObject);
overload externalInstanceMethod(#NSImageRep, #"copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#NSImageRep, #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSImageRep, #"initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#NSImageRep, #"draw") = Bool;
overload externalInstanceMethod(#NSImageRep, #"drawAtPoint:") = Bool, NSPoint;
overload externalInstanceMethod(#NSImageRep, #"drawInRect:") = Bool, NSRect;
overload externalInstanceMethod(#NSImageRep, #"drawInRect:fromRect:operation:fraction:respectFlipped:hints:") = Bool, NSRect, NSRect, CULong, Double, Bool, NSDictionary;
overload externalInstanceMethod(#NSImageRep, #"setSize:") = Void, NSSize;
overload externalInstanceMethod(#NSImageRep, #"size") = NSSize;
overload externalInstanceMethod(#NSImageRep, #"setAlpha:") = Void, Bool;
overload externalInstanceMethod(#NSImageRep, #"hasAlpha") = Bool;
overload externalInstanceMethod(#NSImageRep, #"setOpaque:") = Void, Bool;
overload externalInstanceMethod(#NSImageRep, #"isOpaque") = Bool;
overload externalInstanceMethod(#NSImageRep, #"setColorSpaceName:") = Void, NSString;
overload externalInstanceMethod(#NSImageRep, #"colorSpaceName") = NSString;
overload externalInstanceMethod(#NSImageRep, #"setBitsPerSample:") = Void, CLong;
overload externalInstanceMethod(#NSImageRep, #"bitsPerSample") = CLong;
overload externalInstanceMethod(#NSImageRep, #"setPixelsWide:") = Void, CLong;
overload externalInstanceMethod(#NSImageRep, #"pixelsWide") = CLong;
overload externalInstanceMethod(#NSImageRep, #"setPixelsHigh:") = Void, CLong;
overload externalInstanceMethod(#NSImageRep, #"pixelsHigh") = CLong;
overload externalClassMethod(#NSImageRep, #"registerImageRepClass:") = Void, Id;
overload externalClassMethod(#NSImageRep, #"unregisterImageRepClass:") = Void, Id;
overload externalClassMethod(#NSImageRep, #"registeredImageRepClasses") = NSArray;
overload externalClassMethod(#NSImageRep, #"imageRepClassForFileType:") = Id, NSString;
overload externalClassMethod(#NSImageRep, #"imageRepClassForPasteboardType:") = Id, NSString;
overload externalClassMethod(#NSImageRep, #"imageRepClassForType:") = Id, NSString;
overload externalClassMethod(#NSImageRep, #"imageRepClassForData:") = Id, NSData;
overload externalClassMethod(#NSImageRep, #"canInitWithData:") = Bool, NSData;
overload externalClassMethod(#NSImageRep, #"imageUnfilteredFileTypes") = NSArray;
overload externalClassMethod(#NSImageRep, #"imageUnfilteredPasteboardTypes") = NSArray;
overload externalClassMethod(#NSImageRep, #"imageFileTypes") = NSArray;
overload externalClassMethod(#NSImageRep, #"imagePasteboardTypes") = NSArray;
overload externalClassMethod(#NSImageRep, #"imageUnfilteredTypes") = NSArray;
overload externalClassMethod(#NSImageRep, #"imageTypes") = NSArray;
overload externalClassMethod(#NSImageRep, #"canInitWithPasteboard:") = Bool, NSPasteboard;
overload externalClassMethod(#NSImageRep, #"imageRepsWithContentsOfFile:") = NSArray, NSString;
overload externalClassMethod(#NSImageRep, #"imageRepWithContentsOfFile:") = Id, NSString;
overload externalClassMethod(#NSImageRep, #"imageRepsWithContentsOfURL:") = NSArray, NSURL;
overload externalClassMethod(#NSImageRep, #"imageRepWithContentsOfURL:") = Id, NSURL;
overload externalClassMethod(#NSImageRep, #"imageRepsWithPasteboard:") = NSArray, NSPasteboard;
overload externalClassMethod(#NSImageRep, #"imageRepWithPasteboard:") = Id, NSPasteboard;
overload externalInstanceMethod(#NSImageRep, #"CGImageForProposedRect:context:hints:") = CGImageRef, Pointer[NSRect], NSGraphicsContext, NSDictionary;

record NSImageView = externalClass(NSControl);
overload externalInstanceMethod(#NSImageView, #"image") = NSImage;
overload externalInstanceMethod(#NSImageView, #"setImage:") = Void, NSImage;
overload externalInstanceMethod(#NSImageView, #"imageAlignment") = CULong;
overload externalInstanceMethod(#NSImageView, #"setImageAlignment:") = Void, CULong;
overload externalInstanceMethod(#NSImageView, #"imageScaling") = CULong;
overload externalInstanceMethod(#NSImageView, #"setImageScaling:") = Void, CULong;
overload externalInstanceMethod(#NSImageView, #"imageFrameStyle") = CULong;
overload externalInstanceMethod(#NSImageView, #"setImageFrameStyle:") = Void, CULong;
overload externalInstanceMethod(#NSImageView, #"setEditable:") = Void, Bool;
overload externalInstanceMethod(#NSImageView, #"isEditable") = Bool;
overload externalInstanceMethod(#NSImageView, #"setAnimates:") = Void, Bool;
overload externalInstanceMethod(#NSImageView, #"animates") = Bool;
overload externalInstanceMethod(#NSImageView, #"allowsCutCopyPaste") = Bool;
overload externalInstanceMethod(#NSImageView, #"setAllowsCutCopyPaste:") = Void, Bool;

record NSInputManager = externalClass(NSObject);
overload externalInstanceMethod(#NSInputManager, #"insertText:") = Void, Id;
overload externalInstanceMethod(#NSInputManager, #"doCommandBySelector:") = Void, SelectorHandle;
overload externalInstanceMethod(#NSInputManager, #"setMarkedText:selectedRange:") = Void, Id, NSRange;
overload externalInstanceMethod(#NSInputManager, #"unmarkText") = Void;
overload externalInstanceMethod(#NSInputManager, #"hasMarkedText") = Bool;
overload externalInstanceMethod(#NSInputManager, #"conversationIdentifier") = CLong;
overload externalInstanceMethod(#NSInputManager, #"attributedSubstringFromRange:") = NSAttributedString, NSRange;
overload externalInstanceMethod(#NSInputManager, #"markedRange") = NSRange;
overload externalInstanceMethod(#NSInputManager, #"selectedRange") = NSRange;
overload externalInstanceMethod(#NSInputManager, #"firstRectForCharacterRange:") = NSRect, NSRange;
overload externalInstanceMethod(#NSInputManager, #"characterIndexForPoint:") = CULong, NSPoint;
overload externalInstanceMethod(#NSInputManager, #"validAttributesForMarkedText") = NSArray;
overload externalClassMethod(#NSInputManager, #"currentInputManager") = NSInputManager;
overload externalClassMethod(#NSInputManager, #"cycleToNextInputLanguage:") = Void, Id;
overload externalClassMethod(#NSInputManager, #"cycleToNextInputServerInLanguage:") = Void, Id;
overload externalInstanceMethod(#NSInputManager, #"initWithName:host:") = NSInputManager, NSString, NSString;
overload externalInstanceMethod(#NSInputManager, #"localizedInputManagerName") = NSString;
overload externalInstanceMethod(#NSInputManager, #"markedTextAbandoned:") = Void, Id;
overload externalInstanceMethod(#NSInputManager, #"markedTextSelectionChanged:client:") = Void, NSRange, Id;
overload externalInstanceMethod(#NSInputManager, #"wantsToInterpretAllKeystrokes") = Bool;
overload externalInstanceMethod(#NSInputManager, #"language") = NSString;
overload externalInstanceMethod(#NSInputManager, #"image") = NSImage;
overload externalInstanceMethod(#NSInputManager, #"server") = NSInputServer;
overload externalInstanceMethod(#NSInputManager, #"wantsToHandleMouseEvents") = Bool;
overload externalInstanceMethod(#NSInputManager, #"handleMouseEvent:") = Bool, NSEvent;
overload externalInstanceMethod(#NSInputManager, #"wantsToDelayTextChangeNotifications") = Bool;

record NSInputServer = externalClass(NSObject);
overload externalInstanceMethod(#NSInputServer, #"insertText:client:") = Void, Id, Id;
overload externalInstanceMethod(#NSInputServer, #"doCommandBySelector:client:") = Void, SelectorHandle, Id;
overload externalInstanceMethod(#NSInputServer, #"markedTextAbandoned:") = Void, Id;
overload externalInstanceMethod(#NSInputServer, #"markedTextSelectionChanged:client:") = Void, NSRange, Id;
overload externalInstanceMethod(#NSInputServer, #"terminate:") = Void, Id;
overload externalInstanceMethod(#NSInputServer, #"canBeDisabled") = Bool;
overload externalInstanceMethod(#NSInputServer, #"wantsToInterpretAllKeystrokes") = Bool;
overload externalInstanceMethod(#NSInputServer, #"wantsToHandleMouseEvents") = Bool;
overload externalInstanceMethod(#NSInputServer, #"wantsToDelayTextChangeNotifications") = Bool;
overload externalInstanceMethod(#NSInputServer, #"inputClientBecomeActive:") = Void, Id;
overload externalInstanceMethod(#NSInputServer, #"inputClientResignActive:") = Void, Id;
overload externalInstanceMethod(#NSInputServer, #"inputClientEnabled:") = Void, Id;
overload externalInstanceMethod(#NSInputServer, #"inputClientDisabled:") = Void, Id;
overload externalInstanceMethod(#NSInputServer, #"activeConversationWillChange:fromOldConversation:") = Void, Id, CLong;
overload externalInstanceMethod(#NSInputServer, #"activeConversationChanged:toNewConversation:") = Void, Id, CLong;
overload externalInstanceMethod(#NSInputServer, #"mouseDownOnCharacterIndex:atCoordinate:withModifier:client:") = Bool, CULong, NSPoint, CULong, Id;
overload externalInstanceMethod(#NSInputServer, #"mouseDraggedOnCharacterIndex:atCoordinate:withModifier:client:") = Bool, CULong, NSPoint, CULong, Id;
overload externalInstanceMethod(#NSInputServer, #"mouseUpOnCharacterIndex:atCoordinate:withModifier:client:") = Void, CULong, NSPoint, CULong, Id;
overload externalInstanceMethod(#NSInputServer, #"initWithDelegate:name:") = Id, Id, NSString;

record NSLayoutManager = externalClass(NSObject);
overload externalInstanceMethod(#NSLayoutManager, #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSLayoutManager, #"initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#NSLayoutManager, #"insertGlyphs:length:forStartingGlyphAtIndex:characterIndex:") = Void, Pointer[UInt], CULong, CULong, CULong;
overload externalInstanceMethod(#NSLayoutManager, #"setIntAttribute:value:forGlyphAtIndex:") = Void, CLong, CLong, CULong;
overload externalInstanceMethod(#NSLayoutManager, #"attributedString") = NSAttributedString;
overload externalInstanceMethod(#NSLayoutManager, #"layoutOptions") = CULong;
overload externalInstanceMethod(#NSLayoutManager, #"init") = Id;
overload externalInstanceMethod(#NSLayoutManager, #"textStorage") = NSTextStorage;
overload externalInstanceMethod(#NSLayoutManager, #"setTextStorage:") = Void, NSTextStorage;
overload externalInstanceMethod(#NSLayoutManager, #"attributedString") = NSAttributedString;
overload externalInstanceMethod(#NSLayoutManager, #"replaceTextStorage:") = Void, NSTextStorage;
overload externalInstanceMethod(#NSLayoutManager, #"glyphGenerator") = NSGlyphGenerator;
overload externalInstanceMethod(#NSLayoutManager, #"setGlyphGenerator:") = Void, NSGlyphGenerator;
overload externalInstanceMethod(#NSLayoutManager, #"typesetter") = NSTypesetter;
overload externalInstanceMethod(#NSLayoutManager, #"setTypesetter:") = Void, NSTypesetter;
overload externalInstanceMethod(#NSLayoutManager, #"delegate") = Id;
overload externalInstanceMethod(#NSLayoutManager, #"setDelegate:") = Void, Id;
overload externalInstanceMethod(#NSLayoutManager, #"textContainers") = NSArray;
overload externalInstanceMethod(#NSLayoutManager, #"addTextContainer:") = Void, NSTextContainer;
overload externalInstanceMethod(#NSLayoutManager, #"insertTextContainer:atIndex:") = Void, NSTextContainer, CULong;
overload externalInstanceMethod(#NSLayoutManager, #"removeTextContainerAtIndex:") = Void, CULong;
overload externalInstanceMethod(#NSLayoutManager, #"textContainerChangedGeometry:") = Void, NSTextContainer;
overload externalInstanceMethod(#NSLayoutManager, #"textContainerChangedTextView:") = Void, NSTextContainer;
overload externalInstanceMethod(#NSLayoutManager, #"setBackgroundLayoutEnabled:") = Void, Bool;
overload externalInstanceMethod(#NSLayoutManager, #"backgroundLayoutEnabled") = Bool;
overload externalInstanceMethod(#NSLayoutManager, #"setUsesScreenFonts:") = Void, Bool;
overload externalInstanceMethod(#NSLayoutManager, #"usesScreenFonts") = Bool;
overload externalInstanceMethod(#NSLayoutManager, #"setShowsInvisibleCharacters:") = Void, Bool;
overload externalInstanceMethod(#NSLayoutManager, #"showsInvisibleCharacters") = Bool;
overload externalInstanceMethod(#NSLayoutManager, #"setShowsControlCharacters:") = Void, Bool;
overload externalInstanceMethod(#NSLayoutManager, #"showsControlCharacters") = Bool;
overload externalInstanceMethod(#NSLayoutManager, #"setHyphenationFactor:") = Void, Float;
overload externalInstanceMethod(#NSLayoutManager, #"hyphenationFactor") = Float;
overload externalInstanceMethod(#NSLayoutManager, #"setDefaultAttachmentScaling:") = Void, CULong;
overload externalInstanceMethod(#NSLayoutManager, #"defaultAttachmentScaling") = CULong;
overload externalInstanceMethod(#NSLayoutManager, #"setTypesetterBehavior:") = Void, CLong;
overload externalInstanceMethod(#NSLayoutManager, #"typesetterBehavior") = CLong;
overload externalInstanceMethod(#NSLayoutManager, #"layoutOptions") = CULong;
overload externalInstanceMethod(#NSLayoutManager, #"setAllowsNonContiguousLayout:") = Void, Bool;
overload externalInstanceMethod(#NSLayoutManager, #"allowsNonContiguousLayout") = Bool;
overload externalInstanceMethod(#NSLayoutManager, #"hasNonContiguousLayout") = Bool;
overload externalInstanceMethod(#NSLayoutManager, #"invalidateGlyphsForCharacterRange:changeInLength:actualCharacterRange:") = Void, NSRange, CLong, NSRangePointer;
overload externalInstanceMethod(#NSLayoutManager, #"invalidateLayoutForCharacterRange:actualCharacterRange:") = Void, NSRange, NSRangePointer;
overload externalInstanceMethod(#NSLayoutManager, #"invalidateLayoutForCharacterRange:isSoft:actualCharacterRange:") = Void, NSRange, Bool, NSRangePointer;
overload externalInstanceMethod(#NSLayoutManager, #"invalidateDisplayForCharacterRange:") = Void, NSRange;
overload externalInstanceMethod(#NSLayoutManager, #"invalidateDisplayForGlyphRange:") = Void, NSRange;
overload externalInstanceMethod(#NSLayoutManager, #"textStorage:edited:range:changeInLength:invalidatedRange:") = Void, NSTextStorage, CULong, NSRange, CLong, NSRange;
overload externalInstanceMethod(#NSLayoutManager, #"ensureGlyphsForCharacterRange:") = Void, NSRange;
overload externalInstanceMethod(#NSLayoutManager, #"ensureGlyphsForGlyphRange:") = Void, NSRange;
overload externalInstanceMethod(#NSLayoutManager, #"ensureLayoutForCharacterRange:") = Void, NSRange;
overload externalInstanceMethod(#NSLayoutManager, #"ensureLayoutForGlyphRange:") = Void, NSRange;
overload externalInstanceMethod(#NSLayoutManager, #"ensureLayoutForTextContainer:") = Void, NSTextContainer;
overload externalInstanceMethod(#NSLayoutManager, #"ensureLayoutForBoundingRect:inTextContainer:") = Void, NSRect, NSTextContainer;
overload externalInstanceMethod(#NSLayoutManager, #"insertGlyphs:length:forStartingGlyphAtIndex:characterIndex:") = Void, Pointer[UInt], CULong, CULong, CULong;
overload externalInstanceMethod(#NSLayoutManager, #"insertGlyph:atGlyphIndex:characterIndex:") = Void, UInt, CULong, CULong;
overload externalInstanceMethod(#NSLayoutManager, #"replaceGlyphAtIndex:withGlyph:") = Void, CULong, UInt;
overload externalInstanceMethod(#NSLayoutManager, #"deleteGlyphsInRange:") = Void, NSRange;
overload externalInstanceMethod(#NSLayoutManager, #"setCharacterIndex:forGlyphAtIndex:") = Void, CULong, CULong;
overload externalInstanceMethod(#NSLayoutManager, #"setIntAttribute:value:forGlyphAtIndex:") = Void, CLong, CLong, CULong;
overload externalInstanceMethod(#NSLayoutManager, #"invalidateGlyphsOnLayoutInvalidationForGlyphRange:") = Void, NSRange;
overload externalInstanceMethod(#NSLayoutManager, #"numberOfGlyphs") = CULong;
overload externalInstanceMethod(#NSLayoutManager, #"glyphAtIndex:isValidIndex:") = UInt, CULong, Pointer[Bool];
overload externalInstanceMethod(#NSLayoutManager, #"glyphAtIndex:") = UInt, CULong;
overload externalInstanceMethod(#NSLayoutManager, #"isValidGlyphIndex:") = Bool, CULong;
overload externalInstanceMethod(#NSLayoutManager, #"characterIndexForGlyphAtIndex:") = CULong, CULong;
overload externalInstanceMethod(#NSLayoutManager, #"glyphIndexForCharacterAtIndex:") = CULong, CULong;
overload externalInstanceMethod(#NSLayoutManager, #"intAttribute:forGlyphAtIndex:") = CLong, CLong, CULong;
overload externalInstanceMethod(#NSLayoutManager, #"getGlyphsInRange:glyphs:characterIndexes:glyphInscriptions:elasticBits:") = CULong, NSRange, Pointer[UInt], Pointer[CULong], Pointer[CULong], Pointer[Bool];
overload externalInstanceMethod(#NSLayoutManager, #"getGlyphsInRange:glyphs:characterIndexes:glyphInscriptions:elasticBits:bidiLevels:") = CULong, NSRange, Pointer[UInt], Pointer[CULong], Pointer[CULong], Pointer[Bool], Pointer[CUChar];
overload externalInstanceMethod(#NSLayoutManager, #"getGlyphs:range:") = CULong, Pointer[UInt], NSRange;
overload externalInstanceMethod(#NSLayoutManager, #"setTextContainer:forGlyphRange:") = Void, NSTextContainer, NSRange;
overload externalInstanceMethod(#NSLayoutManager, #"setLineFragmentRect:forGlyphRange:usedRect:") = Void, NSRect, NSRange, NSRect;
overload externalInstanceMethod(#NSLayoutManager, #"setExtraLineFragmentRect:usedRect:textContainer:") = Void, NSRect, NSRect, NSTextContainer;
overload externalInstanceMethod(#NSLayoutManager, #"setLocation:forStartOfGlyphRange:") = Void, NSPoint, NSRange;
overload externalInstanceMethod(#NSLayoutManager, #"setLocations:startingGlyphIndexes:count:forGlyphRange:") = Void, NSPointArray, Pointer[CULong], CULong, NSRange;
overload externalInstanceMethod(#NSLayoutManager, #"setNotShownAttribute:forGlyphAtIndex:") = Void, Bool, CULong;
overload externalInstanceMethod(#NSLayoutManager, #"setDrawsOutsideLineFragment:forGlyphAtIndex:") = Void, Bool, CULong;
overload externalInstanceMethod(#NSLayoutManager, #"setAttachmentSize:forGlyphRange:") = Void, NSSize, NSRange;
overload externalInstanceMethod(#NSLayoutManager, #"getFirstUnlaidCharacterIndex:glyphIndex:") = Void, Pointer[CULong], Pointer[CULong];
overload externalInstanceMethod(#NSLayoutManager, #"firstUnlaidCharacterIndex") = CULong;
overload externalInstanceMethod(#NSLayoutManager, #"firstUnlaidGlyphIndex") = CULong;
overload externalInstanceMethod(#NSLayoutManager, #"textContainerForGlyphAtIndex:effectiveRange:") = NSTextContainer, CULong, NSRangePointer;
overload externalInstanceMethod(#NSLayoutManager, #"usedRectForTextContainer:") = NSRect, NSTextContainer;
overload externalInstanceMethod(#NSLayoutManager, #"lineFragmentRectForGlyphAtIndex:effectiveRange:") = NSRect, CULong, NSRangePointer;
overload externalInstanceMethod(#NSLayoutManager, #"lineFragmentUsedRectForGlyphAtIndex:effectiveRange:") = NSRect, CULong, NSRangePointer;
overload externalInstanceMethod(#NSLayoutManager, #"lineFragmentRectForGlyphAtIndex:effectiveRange:withoutAdditionalLayout:") = NSRect, CULong, NSRangePointer, Bool;
overload externalInstanceMethod(#NSLayoutManager, #"lineFragmentUsedRectForGlyphAtIndex:effectiveRange:withoutAdditionalLayout:") = NSRect, CULong, NSRangePointer, Bool;
overload externalInstanceMethod(#NSLayoutManager, #"textContainerForGlyphAtIndex:effectiveRange:withoutAdditionalLayout:") = NSTextContainer, CULong, NSRangePointer, Bool;
overload externalInstanceMethod(#NSLayoutManager, #"extraLineFragmentRect") = NSRect;
overload externalInstanceMethod(#NSLayoutManager, #"extraLineFragmentUsedRect") = NSRect;
overload externalInstanceMethod(#NSLayoutManager, #"extraLineFragmentTextContainer") = NSTextContainer;
overload externalInstanceMethod(#NSLayoutManager, #"locationForGlyphAtIndex:") = NSPoint, CULong;
overload externalInstanceMethod(#NSLayoutManager, #"notShownAttributeForGlyphAtIndex:") = Bool, CULong;
overload externalInstanceMethod(#NSLayoutManager, #"drawsOutsideLineFragmentForGlyphAtIndex:") = Bool, CULong;
overload externalInstanceMethod(#NSLayoutManager, #"attachmentSizeForGlyphAtIndex:") = NSSize, CULong;
overload externalInstanceMethod(#NSLayoutManager, #"setLayoutRect:forTextBlock:glyphRange:") = Void, NSRect, NSTextBlock, NSRange;
overload externalInstanceMethod(#NSLayoutManager, #"setBoundsRect:forTextBlock:glyphRange:") = Void, NSRect, NSTextBlock, NSRange;
overload externalInstanceMethod(#NSLayoutManager, #"layoutRectForTextBlock:glyphRange:") = NSRect, NSTextBlock, NSRange;
overload externalInstanceMethod(#NSLayoutManager, #"boundsRectForTextBlock:glyphRange:") = NSRect, NSTextBlock, NSRange;
overload externalInstanceMethod(#NSLayoutManager, #"layoutRectForTextBlock:atIndex:effectiveRange:") = NSRect, NSTextBlock, CULong, NSRangePointer;
overload externalInstanceMethod(#NSLayoutManager, #"boundsRectForTextBlock:atIndex:effectiveRange:") = NSRect, NSTextBlock, CULong, NSRangePointer;
overload externalInstanceMethod(#NSLayoutManager, #"glyphRangeForCharacterRange:actualCharacterRange:") = NSRange, NSRange, NSRangePointer;
overload externalInstanceMethod(#NSLayoutManager, #"characterRangeForGlyphRange:actualGlyphRange:") = NSRange, NSRange, NSRangePointer;
overload externalInstanceMethod(#NSLayoutManager, #"glyphRangeForTextContainer:") = NSRange, NSTextContainer;
overload externalInstanceMethod(#NSLayoutManager, #"rangeOfNominallySpacedGlyphsContainingIndex:") = NSRange, CULong;
overload externalInstanceMethod(#NSLayoutManager, #"rectArrayForCharacterRange:withinSelectedCharacterRange:inTextContainer:rectCount:") = NSRectArray, NSRange, NSRange, NSTextContainer, Pointer[CULong];
overload externalInstanceMethod(#NSLayoutManager, #"rectArrayForGlyphRange:withinSelectedGlyphRange:inTextContainer:rectCount:") = NSRectArray, NSRange, NSRange, NSTextContainer, Pointer[CULong];
overload externalInstanceMethod(#NSLayoutManager, #"boundingRectForGlyphRange:inTextContainer:") = NSRect, NSRange, NSTextContainer;
overload externalInstanceMethod(#NSLayoutManager, #"glyphRangeForBoundingRect:inTextContainer:") = NSRange, NSRect, NSTextContainer;
overload externalInstanceMethod(#NSLayoutManager, #"glyphRangeForBoundingRectWithoutAdditionalLayout:inTextContainer:") = NSRange, NSRect, NSTextContainer;
overload externalInstanceMethod(#NSLayoutManager, #"glyphIndexForPoint:inTextContainer:fractionOfDistanceThroughGlyph:") = CULong, NSPoint, NSTextContainer, Pointer[Double];
overload externalInstanceMethod(#NSLayoutManager, #"glyphIndexForPoint:inTextContainer:") = CULong, NSPoint, NSTextContainer;
overload externalInstanceMethod(#NSLayoutManager, #"fractionOfDistanceThroughGlyphForPoint:inTextContainer:") = Double, NSPoint, NSTextContainer;
overload externalInstanceMethod(#NSLayoutManager, #"characterIndexForPoint:inTextContainer:fractionOfDistanceBetweenInsertionPoints:") = CULong, NSPoint, NSTextContainer, Pointer[Double];
overload externalInstanceMethod(#NSLayoutManager, #"getLineFragmentInsertionPointsForCharacterAtIndex:alternatePositions:inDisplayOrder:positions:characterIndexes:") = CULong, CULong, Bool, Bool, Pointer[Double], Pointer[CULong];
overload externalInstanceMethod(#NSLayoutManager, #"temporaryAttributesAtCharacterIndex:effectiveRange:") = NSDictionary, CULong, NSRangePointer;
overload externalInstanceMethod(#NSLayoutManager, #"setTemporaryAttributes:forCharacterRange:") = Void, NSDictionary, NSRange;
overload externalInstanceMethod(#NSLayoutManager, #"addTemporaryAttributes:forCharacterRange:") = Void, NSDictionary, NSRange;
overload externalInstanceMethod(#NSLayoutManager, #"removeTemporaryAttribute:forCharacterRange:") = Void, NSString, NSRange;
overload externalInstanceMethod(#NSLayoutManager, #"temporaryAttribute:atCharacterIndex:effectiveRange:") = Id, NSString, CULong, NSRangePointer;
overload externalInstanceMethod(#NSLayoutManager, #"temporaryAttribute:atCharacterIndex:longestEffectiveRange:inRange:") = Id, NSString, CULong, NSRangePointer, NSRange;
overload externalInstanceMethod(#NSLayoutManager, #"temporaryAttributesAtCharacterIndex:longestEffectiveRange:inRange:") = NSDictionary, CULong, NSRangePointer, NSRange;
overload externalInstanceMethod(#NSLayoutManager, #"addTemporaryAttribute:value:forCharacterRange:") = Void, NSString, Id, NSRange;
overload externalInstanceMethod(#NSLayoutManager, #"substituteFontForFont:") = NSFont, NSFont;
overload externalInstanceMethod(#NSLayoutManager, #"defaultLineHeightForFont:") = Double, NSFont;
overload externalInstanceMethod(#NSLayoutManager, #"defaultBaselineOffsetForFont:") = Double, NSFont;
overload externalInstanceMethod(#NSLayoutManager, #"usesFontLeading") = Bool;
overload externalInstanceMethod(#NSLayoutManager, #"setUsesFontLeading:") = Void, Bool;
overload externalInstanceMethod(#NSLayoutManager, #"rulerMarkersForTextView:paragraphStyle:ruler:") = NSArray, NSTextView, NSParagraphStyle, NSRulerView;
overload externalInstanceMethod(#NSLayoutManager, #"rulerAccessoryViewForTextView:paragraphStyle:ruler:enabled:") = NSView, NSTextView, NSParagraphStyle, NSRulerView, Bool;
overload externalInstanceMethod(#NSLayoutManager, #"layoutManagerOwnsFirstResponderInWindow:") = Bool, NSWindow;
overload externalInstanceMethod(#NSLayoutManager, #"firstTextView") = NSTextView;
overload externalInstanceMethod(#NSLayoutManager, #"textViewForBeginningOfSelection") = NSTextView;
overload externalInstanceMethod(#NSLayoutManager, #"drawBackgroundForGlyphRange:atPoint:") = Void, NSRange, NSPoint;
overload externalInstanceMethod(#NSLayoutManager, #"drawGlyphsForGlyphRange:atPoint:") = Void, NSRange, NSPoint;
overload externalInstanceMethod(#NSLayoutManager, #"showPackedGlyphs:length:glyphRange:atPoint:font:color:printingAdjustment:") = Void, Pointer[CChar], CULong, NSRange, NSPoint, NSFont, NSColor, NSSize;
overload externalInstanceMethod(#NSLayoutManager, #"showAttachmentCell:inRect:characterIndex:") = Void, NSCell, NSRect, CULong;
overload externalInstanceMethod(#NSLayoutManager, #"fillBackgroundRectArray:count:forCharacterRange:color:") = Void, NSRectArray, CULong, NSRange, NSColor;
overload externalInstanceMethod(#NSLayoutManager, #"drawUnderlineForGlyphRange:underlineType:baselineOffset:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:") = Void, NSRange, CLong, Double, NSRect, NSRange, NSPoint;
overload externalInstanceMethod(#NSLayoutManager, #"underlineGlyphRange:underlineType:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:") = Void, NSRange, CLong, NSRect, NSRange, NSPoint;
overload externalInstanceMethod(#NSLayoutManager, #"drawStrikethroughForGlyphRange:strikethroughType:baselineOffset:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:") = Void, NSRange, CLong, Double, NSRect, NSRange, NSPoint;
overload externalInstanceMethod(#NSLayoutManager, #"strikethroughGlyphRange:strikethroughType:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:") = Void, NSRange, CLong, NSRect, NSRange, NSPoint;

record NSLevelIndicator = externalClass(NSControl);
overload externalInstanceMethod(#NSLevelIndicator, #"minValue") = Double;
overload externalInstanceMethod(#NSLevelIndicator, #"setMinValue:") = Void, Double;
overload externalInstanceMethod(#NSLevelIndicator, #"maxValue") = Double;
overload externalInstanceMethod(#NSLevelIndicator, #"setMaxValue:") = Void, Double;
overload externalInstanceMethod(#NSLevelIndicator, #"warningValue") = Double;
overload externalInstanceMethod(#NSLevelIndicator, #"setWarningValue:") = Void, Double;
overload externalInstanceMethod(#NSLevelIndicator, #"criticalValue") = Double;
overload externalInstanceMethod(#NSLevelIndicator, #"setCriticalValue:") = Void, Double;
overload externalInstanceMethod(#NSLevelIndicator, #"tickMarkPosition") = CULong;
overload externalInstanceMethod(#NSLevelIndicator, #"setTickMarkPosition:") = Void, CULong;
overload externalInstanceMethod(#NSLevelIndicator, #"numberOfTickMarks") = CLong;
overload externalInstanceMethod(#NSLevelIndicator, #"setNumberOfTickMarks:") = Void, CLong;
overload externalInstanceMethod(#NSLevelIndicator, #"numberOfMajorTickMarks") = CLong;
overload externalInstanceMethod(#NSLevelIndicator, #"setNumberOfMajorTickMarks:") = Void, CLong;
overload externalInstanceMethod(#NSLevelIndicator, #"tickMarkValueAtIndex:") = Double, CLong;
overload externalInstanceMethod(#NSLevelIndicator, #"rectOfTickMarkAtIndex:") = NSRect, CLong;

record NSLevelIndicatorCell = externalClass(NSActionCell);
overload externalInstanceMethod(#NSLevelIndicatorCell, #"initWithLevelIndicatorStyle:") = Id, CULong;
overload externalInstanceMethod(#NSLevelIndicatorCell, #"levelIndicatorStyle") = CULong;
overload externalInstanceMethod(#NSLevelIndicatorCell, #"setLevelIndicatorStyle:") = Void, CULong;
overload externalInstanceMethod(#NSLevelIndicatorCell, #"minValue") = Double;
overload externalInstanceMethod(#NSLevelIndicatorCell, #"setMinValue:") = Void, Double;
overload externalInstanceMethod(#NSLevelIndicatorCell, #"maxValue") = Double;
overload externalInstanceMethod(#NSLevelIndicatorCell, #"setMaxValue:") = Void, Double;
overload externalInstanceMethod(#NSLevelIndicatorCell, #"warningValue") = Double;
overload externalInstanceMethod(#NSLevelIndicatorCell, #"setWarningValue:") = Void, Double;
overload externalInstanceMethod(#NSLevelIndicatorCell, #"criticalValue") = Double;
overload externalInstanceMethod(#NSLevelIndicatorCell, #"setCriticalValue:") = Void, Double;
overload externalInstanceMethod(#NSLevelIndicatorCell, #"setTickMarkPosition:") = Void, CULong;
overload externalInstanceMethod(#NSLevelIndicatorCell, #"tickMarkPosition") = CULong;
overload externalInstanceMethod(#NSLevelIndicatorCell, #"setNumberOfTickMarks:") = Void, CLong;
overload externalInstanceMethod(#NSLevelIndicatorCell, #"numberOfTickMarks") = CLong;
overload externalInstanceMethod(#NSLevelIndicatorCell, #"setNumberOfMajorTickMarks:") = Void, CLong;
overload externalInstanceMethod(#NSLevelIndicatorCell, #"numberOfMajorTickMarks") = CLong;
overload externalInstanceMethod(#NSLevelIndicatorCell, #"rectOfTickMarkAtIndex:") = NSRect, CLong;
overload externalInstanceMethod(#NSLevelIndicatorCell, #"tickMarkValueAtIndex:") = Double, CLong;
overload externalInstanceMethod(#NSLevelIndicatorCell, #"setImage:") = Void, NSImage;

record NSMatrix = externalClass(NSControl);
overload externalInstanceMethod(#NSMatrix, #"validateUserInterfaceItem:") = Bool, Id;
overload externalInstanceMethod(#NSMatrix, #"initWithFrame:") = Id, NSRect;
overload externalInstanceMethod(#NSMatrix, #"initWithFrame:mode:prototype:numberOfRows:numberOfColumns:") = Id, NSRect, CULong, NSCell, CLong, CLong;
overload externalInstanceMethod(#NSMatrix, #"initWithFrame:mode:cellClass:numberOfRows:numberOfColumns:") = Id, NSRect, CULong, Id, CLong, CLong;
overload externalInstanceMethod(#NSMatrix, #"setCellClass:") = Void, Id;
overload externalInstanceMethod(#NSMatrix, #"cellClass") = Id;
overload externalInstanceMethod(#NSMatrix, #"prototype") = Id;
overload externalInstanceMethod(#NSMatrix, #"setPrototype:") = Void, NSCell;
overload externalInstanceMethod(#NSMatrix, #"makeCellAtRow:column:") = NSCell, CLong, CLong;
overload externalInstanceMethod(#NSMatrix, #"mode") = CULong;
overload externalInstanceMethod(#NSMatrix, #"setMode:") = Void, CULong;
overload externalInstanceMethod(#NSMatrix, #"setAllowsEmptySelection:") = Void, Bool;
overload externalInstanceMethod(#NSMatrix, #"allowsEmptySelection") = Bool;
overload externalInstanceMethod(#NSMatrix, #"sendAction:to:forAllCells:") = Void, SelectorHandle, Id, Bool;
overload externalInstanceMethod(#NSMatrix, #"cells") = NSArray;
overload externalInstanceMethod(#NSMatrix, #"sortUsingSelector:") = Void, SelectorHandle;
overload externalInstanceMethod(#NSMatrix, #"sortUsingFunction:context:") = Void, CCodePointer[[Id,Id,RawPointer],[CLong]], RawPointer;
overload externalInstanceMethod(#NSMatrix, #"selectedCell") = Id;
overload externalInstanceMethod(#NSMatrix, #"selectedCells") = NSArray;
overload externalInstanceMethod(#NSMatrix, #"selectedRow") = CLong;
overload externalInstanceMethod(#NSMatrix, #"selectedColumn") = CLong;
overload externalInstanceMethod(#NSMatrix, #"setSelectionByRect:") = Void, Bool;
overload externalInstanceMethod(#NSMatrix, #"isSelectionByRect") = Bool;
overload externalInstanceMethod(#NSMatrix, #"setSelectionFrom:to:anchor:highlight:") = Void, CLong, CLong, CLong, Bool;
overload externalInstanceMethod(#NSMatrix, #"deselectSelectedCell") = Void;
overload externalInstanceMethod(#NSMatrix, #"deselectAllCells") = Void;
overload externalInstanceMethod(#NSMatrix, #"selectCellAtRow:column:") = Void, CLong, CLong;
overload externalInstanceMethod(#NSMatrix, #"selectAll:") = Void, Id;
overload externalInstanceMethod(#NSMatrix, #"selectCellWithTag:") = Bool, CLong;
overload externalInstanceMethod(#NSMatrix, #"cellSize") = NSSize;
overload externalInstanceMethod(#NSMatrix, #"setCellSize:") = Void, NSSize;
overload externalInstanceMethod(#NSMatrix, #"intercellSpacing") = NSSize;
overload externalInstanceMethod(#NSMatrix, #"setIntercellSpacing:") = Void, NSSize;
overload externalInstanceMethod(#NSMatrix, #"setScrollable:") = Void, Bool;
overload externalInstanceMethod(#NSMatrix, #"setBackgroundColor:") = Void, NSColor;
overload externalInstanceMethod(#NSMatrix, #"backgroundColor") = NSColor;
overload externalInstanceMethod(#NSMatrix, #"setCellBackgroundColor:") = Void, NSColor;
overload externalInstanceMethod(#NSMatrix, #"cellBackgroundColor") = NSColor;
overload externalInstanceMethod(#NSMatrix, #"setDrawsCellBackground:") = Void, Bool;
overload externalInstanceMethod(#NSMatrix, #"drawsCellBackground") = Bool;
overload externalInstanceMethod(#NSMatrix, #"setDrawsBackground:") = Void, Bool;
overload externalInstanceMethod(#NSMatrix, #"drawsBackground") = Bool;
overload externalInstanceMethod(#NSMatrix, #"setState:atRow:column:") = Void, CLong, CLong, CLong;
overload externalInstanceMethod(#NSMatrix, #"getNumberOfRows:columns:") = Void, Pointer[CLong], Pointer[CLong];
overload externalInstanceMethod(#NSMatrix, #"numberOfRows") = CLong;
overload externalInstanceMethod(#NSMatrix, #"numberOfColumns") = CLong;
overload externalInstanceMethod(#NSMatrix, #"cellAtRow:column:") = Id, CLong, CLong;
overload externalInstanceMethod(#NSMatrix, #"cellFrameAtRow:column:") = NSRect, CLong, CLong;
overload externalInstanceMethod(#NSMatrix, #"getRow:column:ofCell:") = Bool, Pointer[CLong], Pointer[CLong], NSCell;
overload externalInstanceMethod(#NSMatrix, #"getRow:column:forPoint:") = Bool, Pointer[CLong], Pointer[CLong], NSPoint;
overload externalInstanceMethod(#NSMatrix, #"renewRows:columns:") = Void, CLong, CLong;
overload externalInstanceMethod(#NSMatrix, #"putCell:atRow:column:") = Void, NSCell, CLong, CLong;
overload externalInstanceMethod(#NSMatrix, #"addRow") = Void;
overload externalInstanceMethod(#NSMatrix, #"addRowWithCells:") = Void, NSArray;
overload externalInstanceMethod(#NSMatrix, #"insertRow:") = Void, CLong;
overload externalInstanceMethod(#NSMatrix, #"insertRow:withCells:") = Void, CLong, NSArray;
overload externalInstanceMethod(#NSMatrix, #"removeRow:") = Void, CLong;
overload externalInstanceMethod(#NSMatrix, #"addColumn") = Void;
overload externalInstanceMethod(#NSMatrix, #"addColumnWithCells:") = Void, NSArray;
overload externalInstanceMethod(#NSMatrix, #"insertColumn:") = Void, CLong;
overload externalInstanceMethod(#NSMatrix, #"insertColumn:withCells:") = Void, CLong, NSArray;
overload externalInstanceMethod(#NSMatrix, #"removeColumn:") = Void, CLong;
overload externalInstanceMethod(#NSMatrix, #"cellWithTag:") = Id, CLong;
overload externalInstanceMethod(#NSMatrix, #"doubleAction") = SelectorHandle;
overload externalInstanceMethod(#NSMatrix, #"setDoubleAction:") = Void, SelectorHandle;
overload externalInstanceMethod(#NSMatrix, #"setAutosizesCells:") = Void, Bool;
overload externalInstanceMethod(#NSMatrix, #"autosizesCells") = Bool;
overload externalInstanceMethod(#NSMatrix, #"sizeToCells") = Void;
overload externalInstanceMethod(#NSMatrix, #"setValidateSize:") = Void, Bool;
overload externalInstanceMethod(#NSMatrix, #"drawCellAtRow:column:") = Void, CLong, CLong;
overload externalInstanceMethod(#NSMatrix, #"highlightCell:atRow:column:") = Void, Bool, CLong, CLong;
overload externalInstanceMethod(#NSMatrix, #"setAutoscroll:") = Void, Bool;
overload externalInstanceMethod(#NSMatrix, #"isAutoscroll") = Bool;
overload externalInstanceMethod(#NSMatrix, #"scrollCellToVisibleAtRow:column:") = Void, CLong, CLong;
overload externalInstanceMethod(#NSMatrix, #"mouseDownFlags") = CLong;
overload externalInstanceMethod(#NSMatrix, #"mouseDown:") = Void, NSEvent;
overload externalInstanceMethod(#NSMatrix, #"performKeyEquivalent:") = Bool, NSEvent;
overload externalInstanceMethod(#NSMatrix, #"sendAction") = Bool;
overload externalInstanceMethod(#NSMatrix, #"sendDoubleAction") = Void;
overload externalInstanceMethod(#NSMatrix, #"delegate") = Id;
overload externalInstanceMethod(#NSMatrix, #"setDelegate:") = Void, Id;
overload externalInstanceMethod(#NSMatrix, #"textShouldBeginEditing:") = Bool, NSText;
overload externalInstanceMethod(#NSMatrix, #"textShouldEndEditing:") = Bool, NSText;
overload externalInstanceMethod(#NSMatrix, #"textDidBeginEditing:") = Void, NSNotification;
overload externalInstanceMethod(#NSMatrix, #"textDidEndEditing:") = Void, NSNotification;
overload externalInstanceMethod(#NSMatrix, #"textDidChange:") = Void, NSNotification;
overload externalInstanceMethod(#NSMatrix, #"selectText:") = Void, Id;
overload externalInstanceMethod(#NSMatrix, #"selectTextAtRow:column:") = Id, CLong, CLong;
overload externalInstanceMethod(#NSMatrix, #"acceptsFirstMouse:") = Bool, NSEvent;
overload externalInstanceMethod(#NSMatrix, #"resetCursorRects") = Void;
overload externalInstanceMethod(#NSMatrix, #"setToolTip:forCell:") = Void, NSString, NSCell;
overload externalInstanceMethod(#NSMatrix, #"toolTipForCell:") = NSString, NSCell;
overload externalInstanceMethod(#NSMatrix, #"setTabKeyTraversesCells:") = Void, Bool;
overload externalInstanceMethod(#NSMatrix, #"tabKeyTraversesCells") = Bool;
overload externalInstanceMethod(#NSMatrix, #"setKeyCell:") = Void, NSCell;
overload externalInstanceMethod(#NSMatrix, #"keyCell") = Id;

record NSMenu = externalClass(NSObject);
overload externalInstanceMethod(#NSMenu, #"copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#NSMenu, #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSMenu, #"initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#NSMenu, #"initWithTitle:") = Id, NSString;
overload externalInstanceMethod(#NSMenu, #"setTitle:") = Void, NSString;
overload externalInstanceMethod(#NSMenu, #"title") = NSString;
overload externalClassMethod(#NSMenu, #"popUpContextMenu:withEvent:forView:") = Void, NSMenu, NSEvent, NSView;
overload externalClassMethod(#NSMenu, #"popUpContextMenu:withEvent:forView:withFont:") = Void, NSMenu, NSEvent, NSView, NSFont;
overload externalInstanceMethod(#NSMenu, #"popUpMenuPositioningItem:atLocation:inView:") = Bool, NSMenuItem, NSPoint, NSView;
overload externalClassMethod(#NSMenu, #"setMenuBarVisible:") = Void, Bool;
overload externalClassMethod(#NSMenu, #"menuBarVisible") = Bool;
overload externalInstanceMethod(#NSMenu, #"supermenu") = NSMenu;
overload externalInstanceMethod(#NSMenu, #"setSupermenu:") = Void, NSMenu;
overload externalInstanceMethod(#NSMenu, #"insertItem:atIndex:") = Void, NSMenuItem, CLong;
overload externalInstanceMethod(#NSMenu, #"addItem:") = Void, NSMenuItem;
overload externalInstanceMethod(#NSMenu, #"insertItemWithTitle:action:keyEquivalent:atIndex:") = NSMenuItem, NSString, SelectorHandle, NSString, CLong;
overload externalInstanceMethod(#NSMenu, #"addItemWithTitle:action:keyEquivalent:") = NSMenuItem, NSString, SelectorHandle, NSString;
overload externalInstanceMethod(#NSMenu, #"removeItemAtIndex:") = Void, CLong;
overload externalInstanceMethod(#NSMenu, #"removeItem:") = Void, NSMenuItem;
overload externalInstanceMethod(#NSMenu, #"setSubmenu:forItem:") = Void, NSMenu, NSMenuItem;
overload externalInstanceMethod(#NSMenu, #"removeAllItems") = Void;
overload externalInstanceMethod(#NSMenu, #"itemArray") = NSArray;
overload externalInstanceMethod(#NSMenu, #"numberOfItems") = CLong;
overload externalInstanceMethod(#NSMenu, #"itemAtIndex:") = NSMenuItem, CLong;
overload externalInstanceMethod(#NSMenu, #"indexOfItem:") = CLong, NSMenuItem;
overload externalInstanceMethod(#NSMenu, #"indexOfItemWithTitle:") = CLong, NSString;
overload externalInstanceMethod(#NSMenu, #"indexOfItemWithTag:") = CLong, CLong;
overload externalInstanceMethod(#NSMenu, #"indexOfItemWithRepresentedObject:") = CLong, Id;
overload externalInstanceMethod(#NSMenu, #"indexOfItemWithSubmenu:") = CLong, NSMenu;
overload externalInstanceMethod(#NSMenu, #"indexOfItemWithTarget:andAction:") = CLong, Id, SelectorHandle;
overload externalInstanceMethod(#NSMenu, #"itemWithTitle:") = NSMenuItem, NSString;
overload externalInstanceMethod(#NSMenu, #"itemWithTag:") = NSMenuItem, CLong;
overload externalInstanceMethod(#NSMenu, #"setAutoenablesItems:") = Void, Bool;
overload externalInstanceMethod(#NSMenu, #"autoenablesItems") = Bool;
overload externalInstanceMethod(#NSMenu, #"update") = Void;
overload externalInstanceMethod(#NSMenu, #"performKeyEquivalent:") = Bool, NSEvent;
overload externalInstanceMethod(#NSMenu, #"itemChanged:") = Void, NSMenuItem;
overload externalInstanceMethod(#NSMenu, #"performActionForItemAtIndex:") = Void, CLong;
overload externalInstanceMethod(#NSMenu, #"setDelegate:") = Void, Id;
overload externalInstanceMethod(#NSMenu, #"delegate") = Id;
overload externalInstanceMethod(#NSMenu, #"menuBarHeight") = Double;
overload externalInstanceMethod(#NSMenu, #"cancelTracking") = Void;
overload externalInstanceMethod(#NSMenu, #"cancelTrackingWithoutAnimation") = Void;
overload externalInstanceMethod(#NSMenu, #"highlightedItem") = NSMenuItem;
overload externalInstanceMethod(#NSMenu, #"minimumWidth") = Double;
overload externalInstanceMethod(#NSMenu, #"setMinimumWidth:") = Void, Double;
overload externalInstanceMethod(#NSMenu, #"size") = NSSize;
overload externalInstanceMethod(#NSMenu, #"font") = NSFont;
overload externalInstanceMethod(#NSMenu, #"setFont:") = Void, NSFont;
overload externalInstanceMethod(#NSMenu, #"allowsContextMenuPlugIns") = Bool;
overload externalInstanceMethod(#NSMenu, #"setAllowsContextMenuPlugIns:") = Void, Bool;
overload externalInstanceMethod(#NSMenu, #"setShowsStateColumn:") = Void, Bool;
overload externalInstanceMethod(#NSMenu, #"showsStateColumn") = Bool;
overload externalClassMethod(#NSMenu, #"menuZone") = Pointer[NSZone];
overload externalInstanceMethod(#NSMenu, #"setMenuChangedMessagesEnabled:") = Void, Bool;
overload externalInstanceMethod(#NSMenu, #"menuChangedMessagesEnabled") = Bool;
overload externalInstanceMethod(#NSMenu, #"helpRequested:") = Void, NSEvent;
overload externalInstanceMethod(#NSMenu, #"isTornOff") = Bool;
overload externalInstanceMethod(#NSMenu, #"submenuAction:") = Void, Id;
overload externalInstanceMethod(#NSMenu, #"propertiesToUpdate") = CULong;
overload externalInstanceMethod(#NSMenu, #"setMenuRepresentation:") = Void, Id;
overload externalInstanceMethod(#NSMenu, #"menuRepresentation") = Id;
overload externalInstanceMethod(#NSMenu, #"setContextMenuRepresentation:") = Void, Id;
overload externalInstanceMethod(#NSMenu, #"contextMenuRepresentation") = Id;
overload externalInstanceMethod(#NSMenu, #"setTearOffMenuRepresentation:") = Void, Id;
overload externalInstanceMethod(#NSMenu, #"tearOffMenuRepresentation") = Id;
overload externalClassMethod(#NSMenu, #"setMenuZone:") = Void, Pointer[NSZone];
overload externalInstanceMethod(#NSMenu, #"attachedMenu") = NSMenu;
overload externalInstanceMethod(#NSMenu, #"isAttached") = Bool;
overload externalInstanceMethod(#NSMenu, #"sizeToFit") = Void;
overload externalInstanceMethod(#NSMenu, #"locationForSubmenu:") = NSPoint, NSMenu;

record NSMenuItem = externalClass(NSObject);
overload externalInstanceMethod(#NSMenuItem, #"copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#NSMenuItem, #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSMenuItem, #"initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#NSMenuItem, #"action") = SelectorHandle;
overload externalInstanceMethod(#NSMenuItem, #"tag") = CLong;
overload externalClassMethod(#NSMenuItem, #"setUsesUserKeyEquivalents:") = Void, Bool;
overload externalClassMethod(#NSMenuItem, #"usesUserKeyEquivalents") = Bool;
overload externalClassMethod(#NSMenuItem, #"separatorItem") = NSMenuItem;
overload externalInstanceMethod(#NSMenuItem, #"initWithTitle:action:keyEquivalent:") = Id, NSString, SelectorHandle, NSString;
overload externalInstanceMethod(#NSMenuItem, #"setMenu:") = Void, NSMenu;
overload externalInstanceMethod(#NSMenuItem, #"menu") = NSMenu;
overload externalInstanceMethod(#NSMenuItem, #"hasSubmenu") = Bool;
overload externalInstanceMethod(#NSMenuItem, #"setSubmenu:") = Void, NSMenu;
overload externalInstanceMethod(#NSMenuItem, #"submenu") = NSMenu;
overload externalInstanceMethod(#NSMenuItem, #"parentItem") = NSMenuItem;
overload externalInstanceMethod(#NSMenuItem, #"setTitle:") = Void, NSString;
overload externalInstanceMethod(#NSMenuItem, #"title") = NSString;
overload externalInstanceMethod(#NSMenuItem, #"setAttributedTitle:") = Void, NSAttributedString;
overload externalInstanceMethod(#NSMenuItem, #"attributedTitle") = NSAttributedString;
overload externalInstanceMethod(#NSMenuItem, #"isSeparatorItem") = Bool;
overload externalInstanceMethod(#NSMenuItem, #"setKeyEquivalent:") = Void, NSString;
overload externalInstanceMethod(#NSMenuItem, #"keyEquivalent") = NSString;
overload externalInstanceMethod(#NSMenuItem, #"setKeyEquivalentModifierMask:") = Void, CULong;
overload externalInstanceMethod(#NSMenuItem, #"keyEquivalentModifierMask") = CULong;
overload externalInstanceMethod(#NSMenuItem, #"userKeyEquivalent") = NSString;
overload externalInstanceMethod(#NSMenuItem, #"setTitleWithMnemonic:") = Void, NSString;
overload externalInstanceMethod(#NSMenuItem, #"setImage:") = Void, NSImage;
overload externalInstanceMethod(#NSMenuItem, #"image") = NSImage;
overload externalInstanceMethod(#NSMenuItem, #"setState:") = Void, CLong;
overload externalInstanceMethod(#NSMenuItem, #"state") = CLong;
overload externalInstanceMethod(#NSMenuItem, #"setOnStateImage:") = Void, NSImage;
overload externalInstanceMethod(#NSMenuItem, #"onStateImage") = NSImage;
overload externalInstanceMethod(#NSMenuItem, #"setOffStateImage:") = Void, NSImage;
overload externalInstanceMethod(#NSMenuItem, #"offStateImage") = NSImage;
overload externalInstanceMethod(#NSMenuItem, #"setMixedStateImage:") = Void, NSImage;
overload externalInstanceMethod(#NSMenuItem, #"mixedStateImage") = NSImage;
overload externalInstanceMethod(#NSMenuItem, #"setEnabled:") = Void, Bool;
overload externalInstanceMethod(#NSMenuItem, #"isEnabled") = Bool;
overload externalInstanceMethod(#NSMenuItem, #"setAlternate:") = Void, Bool;
overload externalInstanceMethod(#NSMenuItem, #"isAlternate") = Bool;
overload externalInstanceMethod(#NSMenuItem, #"setIndentationLevel:") = Void, CLong;
overload externalInstanceMethod(#NSMenuItem, #"indentationLevel") = CLong;
overload externalInstanceMethod(#NSMenuItem, #"setTarget:") = Void, Id;
overload externalInstanceMethod(#NSMenuItem, #"target") = Id;
overload externalInstanceMethod(#NSMenuItem, #"setAction:") = Void, SelectorHandle;
overload externalInstanceMethod(#NSMenuItem, #"action") = SelectorHandle;
overload externalInstanceMethod(#NSMenuItem, #"setTag:") = Void, CLong;
overload externalInstanceMethod(#NSMenuItem, #"tag") = CLong;
overload externalInstanceMethod(#NSMenuItem, #"setRepresentedObject:") = Void, Id;
overload externalInstanceMethod(#NSMenuItem, #"representedObject") = Id;
overload externalInstanceMethod(#NSMenuItem, #"setView:") = Void, NSView;
overload externalInstanceMethod(#NSMenuItem, #"view") = NSView;
overload externalInstanceMethod(#NSMenuItem, #"isHighlighted") = Bool;
overload externalInstanceMethod(#NSMenuItem, #"setHidden:") = Void, Bool;
overload externalInstanceMethod(#NSMenuItem, #"isHidden") = Bool;
overload externalInstanceMethod(#NSMenuItem, #"isHiddenOrHasHiddenAncestor") = Bool;
overload externalInstanceMethod(#NSMenuItem, #"setToolTip:") = Void, NSString;
overload externalInstanceMethod(#NSMenuItem, #"toolTip") = NSString;
overload externalInstanceMethod(#NSMenuItem, #"setMnemonicLocation:") = Void, CULong;
overload externalInstanceMethod(#NSMenuItem, #"mnemonicLocation") = CULong;
overload externalInstanceMethod(#NSMenuItem, #"mnemonic") = NSString;

record NSMenuItemCell = externalClass(NSButtonCell);
overload externalInstanceMethod(#NSMenuItemCell, #"setMenuItem:") = Void, NSMenuItem;
overload externalInstanceMethod(#NSMenuItemCell, #"menuItem") = NSMenuItem;
overload externalInstanceMethod(#NSMenuItemCell, #"setNeedsSizing:") = Void, Bool;
overload externalInstanceMethod(#NSMenuItemCell, #"needsSizing") = Bool;
overload externalInstanceMethod(#NSMenuItemCell, #"calcSize") = Void;
overload externalInstanceMethod(#NSMenuItemCell, #"setNeedsDisplay:") = Void, Bool;
overload externalInstanceMethod(#NSMenuItemCell, #"needsDisplay") = Bool;
overload externalInstanceMethod(#NSMenuItemCell, #"stateImageWidth") = Double;
overload externalInstanceMethod(#NSMenuItemCell, #"imageWidth") = Double;
overload externalInstanceMethod(#NSMenuItemCell, #"titleWidth") = Double;
overload externalInstanceMethod(#NSMenuItemCell, #"keyEquivalentWidth") = Double;
overload externalInstanceMethod(#NSMenuItemCell, #"stateImageRectForBounds:") = NSRect, NSRect;
overload externalInstanceMethod(#NSMenuItemCell, #"titleRectForBounds:") = NSRect, NSRect;
overload externalInstanceMethod(#NSMenuItemCell, #"keyEquivalentRectForBounds:") = NSRect, NSRect;
overload externalInstanceMethod(#NSMenuItemCell, #"drawSeparatorItemWithFrame:inView:") = Void, NSRect, NSView;
overload externalInstanceMethod(#NSMenuItemCell, #"drawStateImageWithFrame:inView:") = Void, NSRect, NSView;
overload externalInstanceMethod(#NSMenuItemCell, #"drawImageWithFrame:inView:") = Void, NSRect, NSView;
overload externalInstanceMethod(#NSMenuItemCell, #"drawTitleWithFrame:inView:") = Void, NSRect, NSView;
overload externalInstanceMethod(#NSMenuItemCell, #"drawKeyEquivalentWithFrame:inView:") = Void, NSRect, NSView;
overload externalInstanceMethod(#NSMenuItemCell, #"drawBorderAndBackgroundWithFrame:inView:") = Void, NSRect, NSView;
overload externalInstanceMethod(#NSMenuItemCell, #"tag") = CLong;

record NSMovie = externalClass(NSObject);
overload externalInstanceMethod(#NSMovie, #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSMovie, #"initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#NSMovie, #"initWithMovie:") = Id, QTMovie;
overload externalInstanceMethod(#NSMovie, #"QTMovie") = QTMovie;

overload externalInstanceMethod(#NSMutableAttributedString, #"readFromURL:options:documentAttributes:error:") = Bool, NSURL, NSDictionary, Pointer[NSDictionary], Pointer[NSError];
overload externalInstanceMethod(#NSMutableAttributedString, #"readFromData:options:documentAttributes:error:") = Bool, NSData, NSDictionary, Pointer[NSDictionary], Pointer[NSError];
overload externalInstanceMethod(#NSMutableAttributedString, #"readFromURL:options:documentAttributes:") = Bool, NSURL, NSDictionary, Pointer[NSDictionary];
overload externalInstanceMethod(#NSMutableAttributedString, #"readFromData:options:documentAttributes:") = Bool, NSData, NSDictionary, Pointer[NSDictionary];
overload externalInstanceMethod(#NSMutableAttributedString, #"superscriptRange:") = Void, NSRange;
overload externalInstanceMethod(#NSMutableAttributedString, #"subscriptRange:") = Void, NSRange;
overload externalInstanceMethod(#NSMutableAttributedString, #"unscriptRange:") = Void, NSRange;
overload externalInstanceMethod(#NSMutableAttributedString, #"applyFontTraits:range:") = Void, CULong, NSRange;
overload externalInstanceMethod(#NSMutableAttributedString, #"setAlignment:range:") = Void, CULong, NSRange;
overload externalInstanceMethod(#NSMutableAttributedString, #"setBaseWritingDirection:range:") = Void, CLong, NSRange;
overload externalInstanceMethod(#NSMutableAttributedString, #"fixAttributesInRange:") = Void, NSRange;
overload externalInstanceMethod(#NSMutableAttributedString, #"fixFontAttributeInRange:") = Void, NSRange;
overload externalInstanceMethod(#NSMutableAttributedString, #"fixParagraphStyleAttributeInRange:") = Void, NSRange;
overload externalInstanceMethod(#NSMutableAttributedString, #"fixAttachmentAttributeInRange:") = Void, NSRange;
overload externalInstanceMethod(#NSMutableAttributedString, #"updateAttachmentsFromPath:") = Void, NSString;

record NSMutableParagraphStyle = externalClass(NSParagraphStyle);
overload externalInstanceMethod(#NSMutableParagraphStyle, #"setLineSpacing:") = Void, Double;
overload externalInstanceMethod(#NSMutableParagraphStyle, #"setParagraphSpacing:") = Void, Double;
overload externalInstanceMethod(#NSMutableParagraphStyle, #"setAlignment:") = Void, CULong;
overload externalInstanceMethod(#NSMutableParagraphStyle, #"setFirstLineHeadIndent:") = Void, Double;
overload externalInstanceMethod(#NSMutableParagraphStyle, #"setHeadIndent:") = Void, Double;
overload externalInstanceMethod(#NSMutableParagraphStyle, #"setTailIndent:") = Void, Double;
overload externalInstanceMethod(#NSMutableParagraphStyle, #"setLineBreakMode:") = Void, CULong;
overload externalInstanceMethod(#NSMutableParagraphStyle, #"setMinimumLineHeight:") = Void, Double;
overload externalInstanceMethod(#NSMutableParagraphStyle, #"setMaximumLineHeight:") = Void, Double;
overload externalInstanceMethod(#NSMutableParagraphStyle, #"addTabStop:") = Void, NSTextTab;
overload externalInstanceMethod(#NSMutableParagraphStyle, #"removeTabStop:") = Void, NSTextTab;
overload externalInstanceMethod(#NSMutableParagraphStyle, #"setTabStops:") = Void, NSArray;
overload externalInstanceMethod(#NSMutableParagraphStyle, #"setParagraphStyle:") = Void, NSParagraphStyle;
overload externalInstanceMethod(#NSMutableParagraphStyle, #"setBaseWritingDirection:") = Void, CLong;
overload externalInstanceMethod(#NSMutableParagraphStyle, #"setLineHeightMultiple:") = Void, Double;
overload externalInstanceMethod(#NSMutableParagraphStyle, #"setParagraphSpacingBefore:") = Void, Double;
overload externalInstanceMethod(#NSMutableParagraphStyle, #"setDefaultTabInterval:") = Void, Double;
overload externalInstanceMethod(#NSMutableParagraphStyle, #"setTextBlocks:") = Void, NSArray;
overload externalInstanceMethod(#NSMutableParagraphStyle, #"setTextLists:") = Void, NSArray;
overload externalInstanceMethod(#NSMutableParagraphStyle, #"setHyphenationFactor:") = Void, Float;
overload externalInstanceMethod(#NSMutableParagraphStyle, #"setTighteningFactorForTruncation:") = Void, Float;
overload externalInstanceMethod(#NSMutableParagraphStyle, #"setHeaderLevel:") = Void, CLong;

record NSNib = externalClass(NSObject);
overload externalInstanceMethod(#NSNib, #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSNib, #"initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#NSNib, #"initWithContentsOfURL:") = Id, NSURL;
overload externalInstanceMethod(#NSNib, #"initWithNibNamed:bundle:") = Id, NSString, NSBundle;
overload externalInstanceMethod(#NSNib, #"instantiateNibWithExternalNameTable:") = Bool, NSDictionary;
overload externalInstanceMethod(#NSNib, #"instantiateNibWithOwner:topLevelObjects:") = Bool, Id, Pointer[NSArray];

overload externalInstanceMethod(#NSObject, #"accessibilityAttributeNames") = NSArray;
overload externalInstanceMethod(#NSObject, #"accessibilityAttributeValue:") = Id, NSString;
overload externalInstanceMethod(#NSObject, #"accessibilityIsAttributeSettable:") = Bool, NSString;
overload externalInstanceMethod(#NSObject, #"accessibilitySetValue:forAttribute:") = Void, Id, NSString;
overload externalInstanceMethod(#NSObject, #"accessibilityParameterizedAttributeNames") = NSArray;
overload externalInstanceMethod(#NSObject, #"accessibilityAttributeValue:forParameter:") = Id, NSString, Id;
overload externalInstanceMethod(#NSObject, #"accessibilityActionNames") = NSArray;
overload externalInstanceMethod(#NSObject, #"accessibilityActionDescription:") = NSString, NSString;
overload externalInstanceMethod(#NSObject, #"accessibilityPerformAction:") = Void, NSString;
overload externalInstanceMethod(#NSObject, #"accessibilityIsIgnored") = Bool;
overload externalInstanceMethod(#NSObject, #"accessibilityHitTest:") = Id, NSPoint;
overload externalInstanceMethod(#NSObject, #"accessibilityFocusedUIElement") = Id;
overload externalInstanceMethod(#NSObject, #"accessibilityIndexOfChild:") = CULong, Id;
overload externalInstanceMethod(#NSObject, #"accessibilityArrayAttributeCount:") = CULong, NSString;
overload externalInstanceMethod(#NSObject, #"accessibilityArrayAttributeValues:index:maxCount:") = NSArray, NSString, CULong, CULong;
overload externalInstanceMethod(#NSObject, #"accessibilitySetOverrideValue:forAttribute:") = Bool, Id, NSString;
overload externalInstanceMethod(#NSObject, #"view:stringForToolTip:point:userData:") = NSString, NSView, CLong, NSPoint, RawPointer;
overload externalInstanceMethod(#NSObject, #"writeSelectionToPasteboard:types:") = Bool, NSPasteboard, NSArray;
overload externalInstanceMethod(#NSObject, #"readSelectionFromPasteboard:") = Bool, NSPasteboard;
overload externalInstanceMethod(#NSObject, #"controlTextDidBeginEditing:") = Void, NSNotification;
overload externalInstanceMethod(#NSObject, #"controlTextDidEndEditing:") = Void, NSNotification;
overload externalInstanceMethod(#NSObject, #"controlTextDidChange:") = Void, NSNotification;
overload externalInstanceMethod(#NSObject, #"fontManager:willIncludeFont:") = Bool, Id, NSString;
overload externalInstanceMethod(#NSObject, #"changeFont:") = Void, Id;
overload externalInstanceMethod(#NSObject, #"validModesForFontPanel:") = CULong, NSFontPanel;
overload externalInstanceMethod(#NSObject, #"validateMenuItem:") = Bool, NSMenuItem;
overload externalInstanceMethod(#NSObject, #"pasteboard:provideDataForType:") = Void, NSPasteboard, NSString;
overload externalInstanceMethod(#NSObject, #"pasteboardChangedOwner:") = Void, NSPasteboard;
overload externalInstanceMethod(#NSObject, #"draggingEntered:") = CULong, Id;
overload externalInstanceMethod(#NSObject, #"draggingUpdated:") = CULong, Id;
overload externalInstanceMethod(#NSObject, #"draggingExited:") = Void, Id;
overload externalInstanceMethod(#NSObject, #"prepareForDragOperation:") = Bool, Id;
overload externalInstanceMethod(#NSObject, #"performDragOperation:") = Bool, Id;
overload externalInstanceMethod(#NSObject, #"concludeDragOperation:") = Void, Id;
overload externalInstanceMethod(#NSObject, #"draggingEnded:") = Void, Id;
overload externalInstanceMethod(#NSObject, #"wantsPeriodicDraggingUpdates") = Bool;
overload externalInstanceMethod(#NSObject, #"draggingSourceOperationMaskForLocal:") = CULong, Bool;
overload externalInstanceMethod(#NSObject, #"namesOfPromisedFilesDroppedAtDestination:") = NSArray, NSURL;
overload externalInstanceMethod(#NSObject, #"draggedImage:beganAt:") = Void, NSImage, NSPoint;
overload externalInstanceMethod(#NSObject, #"draggedImage:endedAt:operation:") = Void, NSImage, NSPoint, CULong;
overload externalInstanceMethod(#NSObject, #"draggedImage:movedTo:") = Void, NSImage, NSPoint;
overload externalInstanceMethod(#NSObject, #"ignoreModifierKeysWhileDragging") = Bool;
overload externalInstanceMethod(#NSObject, #"draggedImage:endedAt:deposited:") = Void, NSImage, NSPoint, Bool;
overload externalInstanceMethod(#NSObject, #"changeColor:") = Void, Id;
overload externalInstanceMethod(#NSObject, #"awakeFromNib") = Void;
overload externalInstanceMethod(#NSObject, #"panel:isValidFilename:") = Bool, Id, NSString;
overload externalInstanceMethod(#NSObject, #"panel:directoryDidChange:") = Void, Id, NSString;
overload externalInstanceMethod(#NSObject, #"panel:compareFilename:with:caseSensitive:") = CLong, Id, NSString, NSString, Bool;
overload externalInstanceMethod(#NSObject, #"panel:shouldShowFilename:") = Bool, Id, NSString;
overload externalInstanceMethod(#NSObject, #"tableView:writeRows:toPasteboard:") = Bool, NSTableView, NSArray, NSPasteboard;
overload externalInstanceMethod(#NSObject, #"outlineViewSelectionDidChange:") = Void, NSNotification;
overload externalInstanceMethod(#NSObject, #"outlineViewColumnDidMove:") = Void, NSNotification;
overload externalInstanceMethod(#NSObject, #"outlineViewColumnDidResize:") = Void, NSNotification;
overload externalInstanceMethod(#NSObject, #"outlineViewSelectionIsChanging:") = Void, NSNotification;
overload externalInstanceMethod(#NSObject, #"outlineViewItemWillExpand:") = Void, NSNotification;
overload externalInstanceMethod(#NSObject, #"outlineViewItemDidExpand:") = Void, NSNotification;
overload externalInstanceMethod(#NSObject, #"outlineViewItemWillCollapse:") = Void, NSNotification;
overload externalInstanceMethod(#NSObject, #"outlineViewItemDidCollapse:") = Void, NSNotification;
overload externalInstanceMethod(#NSObject, #"application:delegateHandlesKey:") = Bool, NSApplication, NSString;
overload externalInstanceMethod(#NSObject, #"validateToolbarItem:") = Bool, NSToolbarItem;
overload externalClassMethod(#NSObject, #"exposeBinding:") = Void, NSString;
overload externalInstanceMethod(#NSObject, #"exposedBindings") = NSArray;
overload externalInstanceMethod(#NSObject, #"valueClassForBinding:") = Id, NSString;
overload externalInstanceMethod(#NSObject, #"bind:toObject:withKeyPath:options:") = Void, NSString, Id, NSString, NSDictionary;
overload externalInstanceMethod(#NSObject, #"unbind:") = Void, NSString;
overload externalInstanceMethod(#NSObject, #"infoForBinding:") = NSDictionary, NSString;
overload externalInstanceMethod(#NSObject, #"optionDescriptionsForBinding:") = NSArray, NSString;
overload externalClassMethod(#NSObject, #"setDefaultPlaceholder:forMarker:withBinding:") = Void, Id, Id, NSString;
overload externalClassMethod(#NSObject, #"defaultPlaceholderForMarker:withBinding:") = Id, Id, NSString;
overload externalInstanceMethod(#NSObject, #"objectDidBeginEditing:") = Void, Id;
overload externalInstanceMethod(#NSObject, #"objectDidEndEditing:") = Void, Id;
overload externalInstanceMethod(#NSObject, #"discardEditing") = Void;
overload externalInstanceMethod(#NSObject, #"commitEditing") = Bool;
overload externalInstanceMethod(#NSObject, #"commitEditingWithDelegate:didCommitSelector:contextInfo:") = Void, Id, SelectorHandle, RawPointer;
overload externalInstanceMethod(#NSObject, #"setLocalizedKey:") = Void, NSString;
overload externalInstanceMethod(#NSObject, #"localizedKey") = NSString;
overload externalInstanceMethod(#NSObject, #"setKey:") = Void, NSString;
overload externalInstanceMethod(#NSObject, #"key") = NSString;
overload externalInstanceMethod(#NSObject, #"setValue:") = Void, Id;
overload externalInstanceMethod(#NSObject, #"value") = Id;
overload externalInstanceMethod(#NSObject, #"isExplicitlyIncluded") = Bool;

record NSObjectController = externalClass(NSController);
overload externalInstanceMethod(#NSObjectController, #"initWithContent:") = Id, Id;
overload externalInstanceMethod(#NSObjectController, #"setContent:") = Void, Id;
overload externalInstanceMethod(#NSObjectController, #"content") = Id;
overload externalInstanceMethod(#NSObjectController, #"selection") = Id;
overload externalInstanceMethod(#NSObjectController, #"selectedObjects") = NSArray;
overload externalInstanceMethod(#NSObjectController, #"setAutomaticallyPreparesContent:") = Void, Bool;
overload externalInstanceMethod(#NSObjectController, #"automaticallyPreparesContent") = Bool;
overload externalInstanceMethod(#NSObjectController, #"prepareContent") = Void;
overload externalInstanceMethod(#NSObjectController, #"setObjectClass:") = Void, Id;
overload externalInstanceMethod(#NSObjectController, #"objectClass") = Id;
overload externalInstanceMethod(#NSObjectController, #"newObject") = Id;
overload externalInstanceMethod(#NSObjectController, #"addObject:") = Void, Id;
overload externalInstanceMethod(#NSObjectController, #"removeObject:") = Void, Id;
overload externalInstanceMethod(#NSObjectController, #"setEditable:") = Void, Bool;
overload externalInstanceMethod(#NSObjectController, #"isEditable") = Bool;
overload externalInstanceMethod(#NSObjectController, #"add:") = Void, Id;
overload externalInstanceMethod(#NSObjectController, #"canAdd") = Bool;
overload externalInstanceMethod(#NSObjectController, #"remove:") = Void, Id;
overload externalInstanceMethod(#NSObjectController, #"canRemove") = Bool;
overload externalInstanceMethod(#NSObjectController, #"validateUserInterfaceItem:") = Bool, Id;
overload externalInstanceMethod(#NSObjectController, #"managedObjectContext") = NSManagedObjectContext;
overload externalInstanceMethod(#NSObjectController, #"setManagedObjectContext:") = Void, NSManagedObjectContext;
overload externalInstanceMethod(#NSObjectController, #"entityName") = NSString;
overload externalInstanceMethod(#NSObjectController, #"setEntityName:") = Void, NSString;
overload externalInstanceMethod(#NSObjectController, #"fetchPredicate") = NSPredicate;
overload externalInstanceMethod(#NSObjectController, #"setFetchPredicate:") = Void, NSPredicate;
overload externalInstanceMethod(#NSObjectController, #"fetchWithRequest:merge:error:") = Bool, NSFetchRequest, Bool, Pointer[NSError];
overload externalInstanceMethod(#NSObjectController, #"fetch:") = Void, Id;
overload externalInstanceMethod(#NSObjectController, #"setUsesLazyFetching:") = Void, Bool;
overload externalInstanceMethod(#NSObjectController, #"usesLazyFetching") = Bool;
overload externalInstanceMethod(#NSObjectController, #"defaultFetchRequest") = NSFetchRequest;

record NSOpenGLContext = externalClass(NSObject);
overload externalInstanceMethod(#NSOpenGLContext, #"initWithFormat:shareContext:") = Id, NSOpenGLPixelFormat, NSOpenGLContext;
overload externalInstanceMethod(#NSOpenGLContext, #"initWithCGLContextObj:") = Id, RawPointer;
overload externalInstanceMethod(#NSOpenGLContext, #"setView:") = Void, NSView;
overload externalInstanceMethod(#NSOpenGLContext, #"view") = NSView;
overload externalInstanceMethod(#NSOpenGLContext, #"setFullScreen") = Void;
overload externalInstanceMethod(#NSOpenGLContext, #"setOffScreen:width:height:rowbytes:") = Void, RawPointer, Int, Int, Int;
overload externalInstanceMethod(#NSOpenGLContext, #"clearDrawable") = Void;
overload externalInstanceMethod(#NSOpenGLContext, #"update") = Void;
overload externalInstanceMethod(#NSOpenGLContext, #"flushBuffer") = Void;
overload externalInstanceMethod(#NSOpenGLContext, #"makeCurrentContext") = Void;
overload externalClassMethod(#NSOpenGLContext, #"clearCurrentContext") = Void;
overload externalClassMethod(#NSOpenGLContext, #"currentContext") = NSOpenGLContext;
overload externalInstanceMethod(#NSOpenGLContext, #"copyAttributesFromContext:withMask:") = Void, NSOpenGLContext, UInt;
overload externalInstanceMethod(#NSOpenGLContext, #"setValues:forParameter:") = Void, Pointer[Int], NSOpenGLContextParameter;
overload externalInstanceMethod(#NSOpenGLContext, #"getValues:forParameter:") = Void, Pointer[Int], NSOpenGLContextParameter;
overload externalInstanceMethod(#NSOpenGLContext, #"setCurrentVirtualScreen:") = Void, Int;
overload externalInstanceMethod(#NSOpenGLContext, #"currentVirtualScreen") = Int;
overload externalInstanceMethod(#NSOpenGLContext, #"createTexture:fromView:internalFormat:") = Void, UInt, NSView, UInt;
overload externalInstanceMethod(#NSOpenGLContext, #"CGLContextObj") = RawPointer;
overload externalInstanceMethod(#NSOpenGLContext, #"setPixelBuffer:cubeMapFace:mipMapLevel:currentVirtualScreen:") = Void, NSOpenGLPixelBuffer, UInt, Int, Int;
overload externalInstanceMethod(#NSOpenGLContext, #"pixelBuffer") = NSOpenGLPixelBuffer;
overload externalInstanceMethod(#NSOpenGLContext, #"pixelBufferCubeMapFace") = UInt;
overload externalInstanceMethod(#NSOpenGLContext, #"pixelBufferMipMapLevel") = Int;
overload externalInstanceMethod(#NSOpenGLContext, #"setTextureImageToPixelBuffer:colorBuffer:") = Void, NSOpenGLPixelBuffer, UInt;

record NSOpenGLLayer = externalClass(CAOpenGLLayer);
overload externalInstanceMethod(#NSOpenGLLayer, #"openGLPixelFormatForDisplayMask:") = NSOpenGLPixelFormat, UInt;
overload externalInstanceMethod(#NSOpenGLLayer, #"openGLContextForPixelFormat:") = NSOpenGLContext, NSOpenGLPixelFormat;
overload externalInstanceMethod(#NSOpenGLLayer, #"canDrawInOpenGLContext:pixelFormat:forLayerTime:displayTime:") = Bool, NSOpenGLContext, NSOpenGLPixelFormat, Double, Pointer[CVTimeStamp];
overload externalInstanceMethod(#NSOpenGLLayer, #"drawInOpenGLContext:pixelFormat:forLayerTime:displayTime:") = Void, NSOpenGLContext, NSOpenGLPixelFormat, Double, Pointer[CVTimeStamp];
overload externalInstanceMethod(#NSOpenGLLayer, #"view") = NSView;
overload externalInstanceMethod(#NSOpenGLLayer, #"setView:") = Void, NSView;
overload externalInstanceMethod(#NSOpenGLLayer, #"openGLPixelFormat") = NSOpenGLPixelFormat;
overload externalInstanceMethod(#NSOpenGLLayer, #"setOpenGLPixelFormat:") = Void, NSOpenGLPixelFormat;
overload externalInstanceMethod(#NSOpenGLLayer, #"openGLContext") = NSOpenGLContext;
overload externalInstanceMethod(#NSOpenGLLayer, #"setOpenGLContext:") = Void, NSOpenGLContext;

record NSOpenGLPixelBuffer = externalClass(NSObject);
overload externalInstanceMethod(#NSOpenGLPixelBuffer, #"initWithTextureTarget:textureInternalFormat:textureMaxMipMapLevel:pixelsWide:pixelsHigh:") = Id, UInt, UInt, Int, Int, Int;
overload externalInstanceMethod(#NSOpenGLPixelBuffer, #"initWithCGLPBufferObj:") = Id, RawPointer;
overload externalInstanceMethod(#NSOpenGLPixelBuffer, #"CGLPBufferObj") = RawPointer;
overload externalInstanceMethod(#NSOpenGLPixelBuffer, #"pixelsWide") = Int;
overload externalInstanceMethod(#NSOpenGLPixelBuffer, #"pixelsHigh") = Int;
overload externalInstanceMethod(#NSOpenGLPixelBuffer, #"textureTarget") = UInt;
overload externalInstanceMethod(#NSOpenGLPixelBuffer, #"textureInternalFormat") = UInt;
overload externalInstanceMethod(#NSOpenGLPixelBuffer, #"textureMaxMipMapLevel") = Int;

record NSOpenGLPixelFormat = externalClass(NSObject);
overload externalInstanceMethod(#NSOpenGLPixelFormat, #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSOpenGLPixelFormat, #"initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#NSOpenGLPixelFormat, #"initWithAttributes:") = Id, Pointer[UInt];
overload externalInstanceMethod(#NSOpenGLPixelFormat, #"initWithData:") = Id, NSData;
overload externalInstanceMethod(#NSOpenGLPixelFormat, #"initWithCGLPixelFormatObj:") = Id, RawPointer;
overload externalInstanceMethod(#NSOpenGLPixelFormat, #"attributes") = NSData;
overload externalInstanceMethod(#NSOpenGLPixelFormat, #"setAttributes:") = Void, NSData;
overload externalInstanceMethod(#NSOpenGLPixelFormat, #"getValues:forAttribute:forVirtualScreen:") = Void, Pointer[Int], UInt, Int;
overload externalInstanceMethod(#NSOpenGLPixelFormat, #"numberOfVirtualScreens") = Int;
overload externalInstanceMethod(#NSOpenGLPixelFormat, #"CGLPixelFormatObj") = RawPointer;

record NSOpenGLView = externalClass(NSView);
overload externalClassMethod(#NSOpenGLView, #"defaultPixelFormat") = NSOpenGLPixelFormat;
overload externalInstanceMethod(#NSOpenGLView, #"initWithFrame:pixelFormat:") = Id, NSRect, NSOpenGLPixelFormat;
overload externalInstanceMethod(#NSOpenGLView, #"setOpenGLContext:") = Void, NSOpenGLContext;
overload externalInstanceMethod(#NSOpenGLView, #"openGLContext") = NSOpenGLContext;
overload externalInstanceMethod(#NSOpenGLView, #"clearGLContext") = Void;
overload externalInstanceMethod(#NSOpenGLView, #"update") = Void;
overload externalInstanceMethod(#NSOpenGLView, #"reshape") = Void;
overload externalInstanceMethod(#NSOpenGLView, #"setPixelFormat:") = Void, NSOpenGLPixelFormat;
overload externalInstanceMethod(#NSOpenGLView, #"pixelFormat") = NSOpenGLPixelFormat;
overload externalInstanceMethod(#NSOpenGLView, #"prepareOpenGL") = Void;

record NSOpenPanel = externalClass(NSSavePanel);
overload externalClassMethod(#NSOpenPanel, #"openPanel") = NSOpenPanel;
overload externalInstanceMethod(#NSOpenPanel, #"URLs") = NSArray;
overload externalInstanceMethod(#NSOpenPanel, #"resolvesAliases") = Bool;
overload externalInstanceMethod(#NSOpenPanel, #"setResolvesAliases:") = Void, Bool;
overload externalInstanceMethod(#NSOpenPanel, #"canChooseDirectories") = Bool;
overload externalInstanceMethod(#NSOpenPanel, #"setCanChooseDirectories:") = Void, Bool;
overload externalInstanceMethod(#NSOpenPanel, #"allowsMultipleSelection") = Bool;
overload externalInstanceMethod(#NSOpenPanel, #"setAllowsMultipleSelection:") = Void, Bool;
overload externalInstanceMethod(#NSOpenPanel, #"canChooseFiles") = Bool;
overload externalInstanceMethod(#NSOpenPanel, #"setCanChooseFiles:") = Void, Bool;
overload externalInstanceMethod(#NSOpenPanel, #"filenames") = NSArray;
overload externalInstanceMethod(#NSOpenPanel, #"beginSheetForDirectory:file:types:modalForWindow:modalDelegate:didEndSelector:contextInfo:") = Void, NSString, NSString, NSArray, NSWindow, Id, SelectorHandle, RawPointer;
overload externalInstanceMethod(#NSOpenPanel, #"beginForDirectory:file:types:modelessDelegate:didEndSelector:contextInfo:") = Void, NSString, NSString, NSArray, Id, SelectorHandle, RawPointer;
overload externalInstanceMethod(#NSOpenPanel, #"runModalForDirectory:file:types:") = CLong, NSString, NSString, NSArray;
overload externalInstanceMethod(#NSOpenPanel, #"runModalForTypes:") = CLong, NSArray;

record NSOutlineView = externalClass(NSTableView);
overload externalInstanceMethod(#NSOutlineView, #"setDelegate:") = Void, Id;
overload externalInstanceMethod(#NSOutlineView, #"delegate") = Id;
overload externalInstanceMethod(#NSOutlineView, #"setDataSource:") = Void, Id;
overload externalInstanceMethod(#NSOutlineView, #"dataSource") = Id;
overload externalInstanceMethod(#NSOutlineView, #"setOutlineTableColumn:") = Void, NSTableColumn;
overload externalInstanceMethod(#NSOutlineView, #"outlineTableColumn") = NSTableColumn;
overload externalInstanceMethod(#NSOutlineView, #"isExpandable:") = Bool, Id;
overload externalInstanceMethod(#NSOutlineView, #"expandItem:expandChildren:") = Void, Id, Bool;
overload externalInstanceMethod(#NSOutlineView, #"expandItem:") = Void, Id;
overload externalInstanceMethod(#NSOutlineView, #"collapseItem:collapseChildren:") = Void, Id, Bool;
overload externalInstanceMethod(#NSOutlineView, #"collapseItem:") = Void, Id;
overload externalInstanceMethod(#NSOutlineView, #"reloadItem:reloadChildren:") = Void, Id, Bool;
overload externalInstanceMethod(#NSOutlineView, #"reloadItem:") = Void, Id;
overload externalInstanceMethod(#NSOutlineView, #"parentForItem:") = Id, Id;
overload externalInstanceMethod(#NSOutlineView, #"itemAtRow:") = Id, CLong;
overload externalInstanceMethod(#NSOutlineView, #"rowForItem:") = CLong, Id;
overload externalInstanceMethod(#NSOutlineView, #"levelForItem:") = CLong, Id;
overload externalInstanceMethod(#NSOutlineView, #"levelForRow:") = CLong, CLong;
overload externalInstanceMethod(#NSOutlineView, #"isItemExpanded:") = Bool, Id;
overload externalInstanceMethod(#NSOutlineView, #"setIndentationPerLevel:") = Void, Double;
overload externalInstanceMethod(#NSOutlineView, #"indentationPerLevel") = Double;
overload externalInstanceMethod(#NSOutlineView, #"setIndentationMarkerFollowsCell:") = Void, Bool;
overload externalInstanceMethod(#NSOutlineView, #"indentationMarkerFollowsCell") = Bool;
overload externalInstanceMethod(#NSOutlineView, #"setAutoresizesOutlineColumn:") = Void, Bool;
overload externalInstanceMethod(#NSOutlineView, #"autoresizesOutlineColumn") = Bool;
overload externalInstanceMethod(#NSOutlineView, #"frameOfOutlineCellAtRow:") = NSRect, CLong;
overload externalInstanceMethod(#NSOutlineView, #"setDropItem:dropChildIndex:") = Void, Id, CLong;
overload externalInstanceMethod(#NSOutlineView, #"shouldCollapseAutoExpandedItemsForDeposited:") = Bool, Bool;
overload externalInstanceMethod(#NSOutlineView, #"autosaveExpandedItems") = Bool;
overload externalInstanceMethod(#NSOutlineView, #"setAutosaveExpandedItems:") = Void, Bool;

record NSPDFImageRep = externalClass(NSImageRep);
overload externalClassMethod(#NSPDFImageRep, #"imageRepWithData:") = Id, NSData;
overload externalInstanceMethod(#NSPDFImageRep, #"initWithData:") = Id, NSData;
overload externalInstanceMethod(#NSPDFImageRep, #"PDFRepresentation") = NSData;
overload externalInstanceMethod(#NSPDFImageRep, #"bounds") = NSRect;
overload externalInstanceMethod(#NSPDFImageRep, #"setCurrentPage:") = Void, CLong;
overload externalInstanceMethod(#NSPDFImageRep, #"currentPage") = CLong;
overload externalInstanceMethod(#NSPDFImageRep, #"pageCount") = CLong;

record NSPICTImageRep = externalClass(NSImageRep);
overload externalClassMethod(#NSPICTImageRep, #"imageRepWithData:") = Id, NSData;
overload externalInstanceMethod(#NSPICTImageRep, #"initWithData:") = Id, NSData;
overload externalInstanceMethod(#NSPICTImageRep, #"PICTRepresentation") = NSData;
overload externalInstanceMethod(#NSPICTImageRep, #"boundingBox") = NSRect;

record NSPageLayout = externalClass(NSObject);
overload externalClassMethod(#NSPageLayout, #"pageLayout") = NSPageLayout;
overload externalInstanceMethod(#NSPageLayout, #"addAccessoryController:") = Void, NSViewController;
overload externalInstanceMethod(#NSPageLayout, #"removeAccessoryController:") = Void, NSViewController;
overload externalInstanceMethod(#NSPageLayout, #"accessoryControllers") = NSArray;
overload externalInstanceMethod(#NSPageLayout, #"beginSheetWithPrintInfo:modalForWindow:delegate:didEndSelector:contextInfo:") = Void, NSPrintInfo, NSWindow, Id, SelectorHandle, RawPointer;
overload externalInstanceMethod(#NSPageLayout, #"runModalWithPrintInfo:") = CLong, NSPrintInfo;
overload externalInstanceMethod(#NSPageLayout, #"runModal") = CLong;
overload externalInstanceMethod(#NSPageLayout, #"printInfo") = NSPrintInfo;
overload externalInstanceMethod(#NSPageLayout, #"setAccessoryView:") = Void, NSView;
overload externalInstanceMethod(#NSPageLayout, #"accessoryView") = NSView;
overload externalInstanceMethod(#NSPageLayout, #"readPrintInfo") = Void;
overload externalInstanceMethod(#NSPageLayout, #"writePrintInfo") = Void;

record NSPanel = externalClass(NSWindow);
overload externalInstanceMethod(#NSPanel, #"isFloatingPanel") = Bool;
overload externalInstanceMethod(#NSPanel, #"setFloatingPanel:") = Void, Bool;
overload externalInstanceMethod(#NSPanel, #"becomesKeyOnlyIfNeeded") = Bool;
overload externalInstanceMethod(#NSPanel, #"setBecomesKeyOnlyIfNeeded:") = Void, Bool;
overload externalInstanceMethod(#NSPanel, #"worksWhenModal") = Bool;
overload externalInstanceMethod(#NSPanel, #"setWorksWhenModal:") = Void, Bool;

record NSParagraphStyle = externalClass(NSObject);
overload externalInstanceMethod(#NSParagraphStyle, #"copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#NSParagraphStyle, #"mutableCopyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#NSParagraphStyle, #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSParagraphStyle, #"initWithCoder:") = Id, NSCoder;
overload externalClassMethod(#NSParagraphStyle, #"defaultParagraphStyle") = NSParagraphStyle;
overload externalClassMethod(#NSParagraphStyle, #"defaultWritingDirectionForLanguage:") = CLong, NSString;
overload externalInstanceMethod(#NSParagraphStyle, #"lineSpacing") = Double;
overload externalInstanceMethod(#NSParagraphStyle, #"paragraphSpacing") = Double;
overload externalInstanceMethod(#NSParagraphStyle, #"alignment") = CULong;
overload externalInstanceMethod(#NSParagraphStyle, #"headIndent") = Double;
overload externalInstanceMethod(#NSParagraphStyle, #"tailIndent") = Double;
overload externalInstanceMethod(#NSParagraphStyle, #"firstLineHeadIndent") = Double;
overload externalInstanceMethod(#NSParagraphStyle, #"tabStops") = NSArray;
overload externalInstanceMethod(#NSParagraphStyle, #"minimumLineHeight") = Double;
overload externalInstanceMethod(#NSParagraphStyle, #"maximumLineHeight") = Double;
overload externalInstanceMethod(#NSParagraphStyle, #"lineBreakMode") = CULong;
overload externalInstanceMethod(#NSParagraphStyle, #"baseWritingDirection") = CLong;
overload externalInstanceMethod(#NSParagraphStyle, #"lineHeightMultiple") = Double;
overload externalInstanceMethod(#NSParagraphStyle, #"paragraphSpacingBefore") = Double;
overload externalInstanceMethod(#NSParagraphStyle, #"defaultTabInterval") = Double;
overload externalInstanceMethod(#NSParagraphStyle, #"textBlocks") = NSArray;
overload externalInstanceMethod(#NSParagraphStyle, #"textLists") = NSArray;
overload externalInstanceMethod(#NSParagraphStyle, #"hyphenationFactor") = Float;
overload externalInstanceMethod(#NSParagraphStyle, #"tighteningFactorForTruncation") = Float;
overload externalInstanceMethod(#NSParagraphStyle, #"headerLevel") = CLong;

record NSPasteboard = externalClass(NSObject);
overload externalClassMethod(#NSPasteboard, #"generalPasteboard") = NSPasteboard;
overload externalClassMethod(#NSPasteboard, #"pasteboardWithName:") = NSPasteboard, NSString;
overload externalClassMethod(#NSPasteboard, #"pasteboardWithUniqueName") = NSPasteboard;
overload externalInstanceMethod(#NSPasteboard, #"name") = NSString;
overload externalInstanceMethod(#NSPasteboard, #"changeCount") = CLong;
overload externalInstanceMethod(#NSPasteboard, #"releaseGlobally") = Void;
overload externalInstanceMethod(#NSPasteboard, #"clearContents") = CLong;
overload externalInstanceMethod(#NSPasteboard, #"writeObjects:") = Bool, NSArray;
overload externalInstanceMethod(#NSPasteboard, #"readObjectsForClasses:options:") = NSArray, NSArray, NSDictionary;
overload externalInstanceMethod(#NSPasteboard, #"pasteboardItems") = NSArray;
overload externalInstanceMethod(#NSPasteboard, #"indexOfPasteboardItem:") = CULong, NSPasteboardItem;
overload externalInstanceMethod(#NSPasteboard, #"canReadItemWithDataConformingToTypes:") = Bool, NSArray;
overload externalInstanceMethod(#NSPasteboard, #"canReadObjectForClasses:options:") = Bool, NSArray, NSDictionary;
overload externalInstanceMethod(#NSPasteboard, #"declareTypes:owner:") = CLong, NSArray, Id;
overload externalInstanceMethod(#NSPasteboard, #"addTypes:owner:") = CLong, NSArray, Id;
overload externalInstanceMethod(#NSPasteboard, #"types") = NSArray;
overload externalInstanceMethod(#NSPasteboard, #"availableTypeFromArray:") = NSString, NSArray;
overload externalInstanceMethod(#NSPasteboard, #"setData:forType:") = Bool, NSData, NSString;
overload externalInstanceMethod(#NSPasteboard, #"setPropertyList:forType:") = Bool, Id, NSString;
overload externalInstanceMethod(#NSPasteboard, #"setString:forType:") = Bool, NSString, NSString;
overload externalInstanceMethod(#NSPasteboard, #"dataForType:") = NSData, NSString;
overload externalInstanceMethod(#NSPasteboard, #"propertyListForType:") = Id, NSString;
overload externalInstanceMethod(#NSPasteboard, #"stringForType:") = NSString, NSString;
overload externalClassMethod(#NSPasteboard, #"typesFilterableTo:") = NSArray, NSString;
overload externalClassMethod(#NSPasteboard, #"pasteboardByFilteringFile:") = NSPasteboard, NSString;
overload externalClassMethod(#NSPasteboard, #"pasteboardByFilteringData:ofType:") = NSPasteboard, NSData, NSString;
overload externalClassMethod(#NSPasteboard, #"pasteboardByFilteringTypesInPasteboard:") = NSPasteboard, NSPasteboard;
overload externalInstanceMethod(#NSPasteboard, #"writeFileContents:") = Bool, NSString;
overload externalInstanceMethod(#NSPasteboard, #"readFileContentsType:toFile:") = NSString, NSString, NSString;
overload externalInstanceMethod(#NSPasteboard, #"writeFileWrapper:") = Bool, NSFileWrapper;
overload externalInstanceMethod(#NSPasteboard, #"readFileWrapper") = NSFileWrapper;

record NSPasteboardItem = externalClass(NSObject);
overload externalInstanceMethod(#NSPasteboardItem, #"writableTypesForPasteboard:") = NSArray, NSPasteboard;
overload externalInstanceMethod(#NSPasteboardItem, #"writingOptionsForType:pasteboard:") = CULong, NSString, NSPasteboard;
overload externalInstanceMethod(#NSPasteboardItem, #"pasteboardPropertyListForType:") = Id, NSString;
overload externalClassMethod(#NSPasteboardItem, #"readableTypesForPasteboard:") = NSArray, NSPasteboard;
overload externalClassMethod(#NSPasteboardItem, #"readingOptionsForType:pasteboard:") = CULong, NSString, NSPasteboard;
overload externalInstanceMethod(#NSPasteboardItem, #"initWithPasteboardPropertyList:ofType:") = Id, Id, NSString;
overload externalInstanceMethod(#NSPasteboardItem, #"types") = NSArray;
overload externalInstanceMethod(#NSPasteboardItem, #"availableTypeFromArray:") = NSString, NSArray;
overload externalInstanceMethod(#NSPasteboardItem, #"setDataProvider:forTypes:") = Bool, Id, NSArray;
overload externalInstanceMethod(#NSPasteboardItem, #"setData:forType:") = Bool, NSData, NSString;
overload externalInstanceMethod(#NSPasteboardItem, #"setString:forType:") = Bool, NSString, NSString;
overload externalInstanceMethod(#NSPasteboardItem, #"setPropertyList:forType:") = Bool, Id, NSString;
overload externalInstanceMethod(#NSPasteboardItem, #"dataForType:") = NSData, NSString;
overload externalInstanceMethod(#NSPasteboardItem, #"stringForType:") = NSString, NSString;
overload externalInstanceMethod(#NSPasteboardItem, #"propertyListForType:") = Id, NSString;

record NSPathCell = externalClass(NSActionCell);
overload externalInstanceMethod(#NSPathCell, #"panel:shouldEnableURL:") = Bool, Id, NSURL;
overload externalInstanceMethod(#NSPathCell, #"panel:validateURL:error:") = Bool, Id, NSURL, Pointer[NSError];
overload externalInstanceMethod(#NSPathCell, #"panel:didChangeToDirectoryURL:") = Void, Id, NSURL;
overload externalInstanceMethod(#NSPathCell, #"panel:userEnteredFilename:confirmed:") = NSString, Id, NSString, Bool;
overload externalInstanceMethod(#NSPathCell, #"panel:willExpand:") = Void, Id, Bool;
overload externalInstanceMethod(#NSPathCell, #"panelSelectionDidChange:") = Void, Id;
overload externalInstanceMethod(#NSPathCell, #"pathStyle") = CLong;
overload externalInstanceMethod(#NSPathCell, #"setPathStyle:") = Void, CLong;
overload externalInstanceMethod(#NSPathCell, #"URL") = NSURL;
overload externalInstanceMethod(#NSPathCell, #"setURL:") = Void, NSURL;
overload externalInstanceMethod(#NSPathCell, #"setObjectValue:") = Void, Id;
overload externalInstanceMethod(#NSPathCell, #"allowedTypes") = NSArray;
overload externalInstanceMethod(#NSPathCell, #"setAllowedTypes:") = Void, NSArray;
overload externalInstanceMethod(#NSPathCell, #"delegate") = Id;
overload externalInstanceMethod(#NSPathCell, #"setDelegate:") = Void, Id;
overload externalClassMethod(#NSPathCell, #"pathComponentCellClass") = Id;
overload externalInstanceMethod(#NSPathCell, #"pathComponentCells") = NSArray;
overload externalInstanceMethod(#NSPathCell, #"setPathComponentCells:") = Void, NSArray;
overload externalInstanceMethod(#NSPathCell, #"rectOfPathComponentCell:withFrame:inView:") = NSRect, NSPathComponentCell, NSRect, NSView;
overload externalInstanceMethod(#NSPathCell, #"pathComponentCellAtPoint:withFrame:inView:") = NSPathComponentCell, NSPoint, NSRect, NSView;
overload externalInstanceMethod(#NSPathCell, #"clickedPathComponentCell") = NSPathComponentCell;
overload externalInstanceMethod(#NSPathCell, #"mouseEntered:withFrame:inView:") = Void, NSEvent, NSRect, NSView;
overload externalInstanceMethod(#NSPathCell, #"mouseExited:withFrame:inView:") = Void, NSEvent, NSRect, NSView;
overload externalInstanceMethod(#NSPathCell, #"doubleAction") = SelectorHandle;
overload externalInstanceMethod(#NSPathCell, #"setDoubleAction:") = Void, SelectorHandle;
overload externalInstanceMethod(#NSPathCell, #"setBackgroundColor:") = Void, NSColor;
overload externalInstanceMethod(#NSPathCell, #"backgroundColor") = NSColor;
overload externalInstanceMethod(#NSPathCell, #"setPlaceholderString:") = Void, NSString;
overload externalInstanceMethod(#NSPathCell, #"placeholderString") = NSString;
overload externalInstanceMethod(#NSPathCell, #"setPlaceholderAttributedString:") = Void, NSAttributedString;
overload externalInstanceMethod(#NSPathCell, #"placeholderAttributedString") = NSAttributedString;
overload externalInstanceMethod(#NSPathCell, #"setControlSize:") = Void, CULong;

record NSPathComponentCell = externalClass(NSTextFieldCell);
overload externalInstanceMethod(#NSPathComponentCell, #"image") = NSImage;
overload externalInstanceMethod(#NSPathComponentCell, #"setImage:") = Void, NSImage;
overload externalInstanceMethod(#NSPathComponentCell, #"URL") = NSURL;
overload externalInstanceMethod(#NSPathComponentCell, #"setURL:") = Void, NSURL;

record NSPathControl = externalClass(NSControl);
overload externalInstanceMethod(#NSPathControl, #"URL") = NSURL;
overload externalInstanceMethod(#NSPathControl, #"setURL:") = Void, NSURL;
overload externalInstanceMethod(#NSPathControl, #"doubleAction") = SelectorHandle;
overload externalInstanceMethod(#NSPathControl, #"setDoubleAction:") = Void, SelectorHandle;
overload externalInstanceMethod(#NSPathControl, #"pathStyle") = CLong;
overload externalInstanceMethod(#NSPathControl, #"setPathStyle:") = Void, CLong;
overload externalInstanceMethod(#NSPathControl, #"clickedPathComponentCell") = NSPathComponentCell;
overload externalInstanceMethod(#NSPathControl, #"pathComponentCells") = NSArray;
overload externalInstanceMethod(#NSPathControl, #"setPathComponentCells:") = Void, NSArray;
overload externalInstanceMethod(#NSPathControl, #"setBackgroundColor:") = Void, NSColor;
overload externalInstanceMethod(#NSPathControl, #"backgroundColor") = NSColor;
overload externalInstanceMethod(#NSPathControl, #"delegate") = Id;
overload externalInstanceMethod(#NSPathControl, #"setDelegate:") = Void, Id;
overload externalInstanceMethod(#NSPathControl, #"setDraggingSourceOperationMask:forLocal:") = Void, CULong, Bool;
overload externalInstanceMethod(#NSPathControl, #"setMenu:") = Void, NSMenu;
overload externalInstanceMethod(#NSPathControl, #"menu") = NSMenu;

record NSPersistentDocument = externalClass(NSDocument);
overload externalInstanceMethod(#NSPersistentDocument, #"managedObjectContext") = NSManagedObjectContext;
overload externalInstanceMethod(#NSPersistentDocument, #"setManagedObjectContext:") = Void, NSManagedObjectContext;
overload externalInstanceMethod(#NSPersistentDocument, #"managedObjectModel") = Id;
overload externalInstanceMethod(#NSPersistentDocument, #"configurePersistentStoreCoordinatorForURL:ofType:modelConfiguration:storeOptions:error:") = Bool, NSURL, NSString, NSString, NSDictionary, Pointer[NSError];
overload externalInstanceMethod(#NSPersistentDocument, #"persistentStoreTypeForFileType:") = NSString, NSString;
overload externalInstanceMethod(#NSPersistentDocument, #"writeToURL:ofType:forSaveOperation:originalContentsURL:error:") = Bool, NSURL, NSString, CULong, NSURL, Pointer[NSError];
overload externalInstanceMethod(#NSPersistentDocument, #"readFromURL:ofType:error:") = Bool, NSURL, NSString, Pointer[NSError];
overload externalInstanceMethod(#NSPersistentDocument, #"revertToContentsOfURL:ofType:error:") = Bool, NSURL, NSString, Pointer[NSError];
overload externalInstanceMethod(#NSPersistentDocument, #"configurePersistentStoreCoordinatorForURL:ofType:error:") = Bool, NSURL, NSString, Pointer[NSError];

record NSPopUpButton = externalClass(NSButton);
overload externalInstanceMethod(#NSPopUpButton, #"initWithFrame:pullsDown:") = Id, NSRect, Bool;
overload externalInstanceMethod(#NSPopUpButton, #"setMenu:") = Void, NSMenu;
overload externalInstanceMethod(#NSPopUpButton, #"menu") = NSMenu;
overload externalInstanceMethod(#NSPopUpButton, #"setPullsDown:") = Void, Bool;
overload externalInstanceMethod(#NSPopUpButton, #"pullsDown") = Bool;
overload externalInstanceMethod(#NSPopUpButton, #"setAutoenablesItems:") = Void, Bool;
overload externalInstanceMethod(#NSPopUpButton, #"autoenablesItems") = Bool;
overload externalInstanceMethod(#NSPopUpButton, #"setPreferredEdge:") = Void, CULong;
overload externalInstanceMethod(#NSPopUpButton, #"preferredEdge") = CULong;
overload externalInstanceMethod(#NSPopUpButton, #"addItemWithTitle:") = Void, NSString;
overload externalInstanceMethod(#NSPopUpButton, #"addItemsWithTitles:") = Void, NSArray;
overload externalInstanceMethod(#NSPopUpButton, #"insertItemWithTitle:atIndex:") = Void, NSString, CLong;
overload externalInstanceMethod(#NSPopUpButton, #"removeItemWithTitle:") = Void, NSString;
overload externalInstanceMethod(#NSPopUpButton, #"removeItemAtIndex:") = Void, CLong;
overload externalInstanceMethod(#NSPopUpButton, #"removeAllItems") = Void;
overload externalInstanceMethod(#NSPopUpButton, #"itemArray") = NSArray;
overload externalInstanceMethod(#NSPopUpButton, #"numberOfItems") = CLong;
overload externalInstanceMethod(#NSPopUpButton, #"indexOfItem:") = CLong, NSMenuItem;
overload externalInstanceMethod(#NSPopUpButton, #"indexOfItemWithTitle:") = CLong, NSString;
overload externalInstanceMethod(#NSPopUpButton, #"indexOfItemWithTag:") = CLong, CLong;
overload externalInstanceMethod(#NSPopUpButton, #"indexOfItemWithRepresentedObject:") = CLong, Id;
overload externalInstanceMethod(#NSPopUpButton, #"indexOfItemWithTarget:andAction:") = CLong, Id, SelectorHandle;
overload externalInstanceMethod(#NSPopUpButton, #"itemAtIndex:") = NSMenuItem, CLong;
overload externalInstanceMethod(#NSPopUpButton, #"itemWithTitle:") = NSMenuItem, NSString;
overload externalInstanceMethod(#NSPopUpButton, #"lastItem") = NSMenuItem;
overload externalInstanceMethod(#NSPopUpButton, #"selectItem:") = Void, NSMenuItem;
overload externalInstanceMethod(#NSPopUpButton, #"selectItemAtIndex:") = Void, CLong;
overload externalInstanceMethod(#NSPopUpButton, #"selectItemWithTitle:") = Void, NSString;
overload externalInstanceMethod(#NSPopUpButton, #"selectItemWithTag:") = Bool, CLong;
overload externalInstanceMethod(#NSPopUpButton, #"setTitle:") = Void, NSString;
overload externalInstanceMethod(#NSPopUpButton, #"selectedItem") = NSMenuItem;
overload externalInstanceMethod(#NSPopUpButton, #"indexOfSelectedItem") = CLong;
overload externalInstanceMethod(#NSPopUpButton, #"synchronizeTitleAndSelectedItem") = Void;
overload externalInstanceMethod(#NSPopUpButton, #"itemTitleAtIndex:") = NSString, CLong;
overload externalInstanceMethod(#NSPopUpButton, #"itemTitles") = NSArray;
overload externalInstanceMethod(#NSPopUpButton, #"titleOfSelectedItem") = NSString;

record NSPopUpButtonCell = externalClass(NSMenuItemCell);
overload externalInstanceMethod(#NSPopUpButtonCell, #"initTextCell:pullsDown:") = Id, NSString, Bool;
overload externalInstanceMethod(#NSPopUpButtonCell, #"setMenu:") = Void, NSMenu;
overload externalInstanceMethod(#NSPopUpButtonCell, #"menu") = NSMenu;
overload externalInstanceMethod(#NSPopUpButtonCell, #"setPullsDown:") = Void, Bool;
overload externalInstanceMethod(#NSPopUpButtonCell, #"pullsDown") = Bool;
overload externalInstanceMethod(#NSPopUpButtonCell, #"setAutoenablesItems:") = Void, Bool;
overload externalInstanceMethod(#NSPopUpButtonCell, #"autoenablesItems") = Bool;
overload externalInstanceMethod(#NSPopUpButtonCell, #"setPreferredEdge:") = Void, CULong;
overload externalInstanceMethod(#NSPopUpButtonCell, #"preferredEdge") = CULong;
overload externalInstanceMethod(#NSPopUpButtonCell, #"setUsesItemFromMenu:") = Void, Bool;
overload externalInstanceMethod(#NSPopUpButtonCell, #"usesItemFromMenu") = Bool;
overload externalInstanceMethod(#NSPopUpButtonCell, #"setAltersStateOfSelectedItem:") = Void, Bool;
overload externalInstanceMethod(#NSPopUpButtonCell, #"altersStateOfSelectedItem") = Bool;
overload externalInstanceMethod(#NSPopUpButtonCell, #"addItemWithTitle:") = Void, NSString;
overload externalInstanceMethod(#NSPopUpButtonCell, #"addItemsWithTitles:") = Void, NSArray;
overload externalInstanceMethod(#NSPopUpButtonCell, #"insertItemWithTitle:atIndex:") = Void, NSString, CLong;
overload externalInstanceMethod(#NSPopUpButtonCell, #"removeItemWithTitle:") = Void, NSString;
overload externalInstanceMethod(#NSPopUpButtonCell, #"removeItemAtIndex:") = Void, CLong;
overload externalInstanceMethod(#NSPopUpButtonCell, #"removeAllItems") = Void;
overload externalInstanceMethod(#NSPopUpButtonCell, #"itemArray") = NSArray;
overload externalInstanceMethod(#NSPopUpButtonCell, #"numberOfItems") = CLong;
overload externalInstanceMethod(#NSPopUpButtonCell, #"indexOfItem:") = CLong, NSMenuItem;
overload externalInstanceMethod(#NSPopUpButtonCell, #"indexOfItemWithTitle:") = CLong, NSString;
overload externalInstanceMethod(#NSPopUpButtonCell, #"indexOfItemWithTag:") = CLong, CLong;
overload externalInstanceMethod(#NSPopUpButtonCell, #"indexOfItemWithRepresentedObject:") = CLong, Id;
overload externalInstanceMethod(#NSPopUpButtonCell, #"indexOfItemWithTarget:andAction:") = CLong, Id, SelectorHandle;
overload externalInstanceMethod(#NSPopUpButtonCell, #"itemAtIndex:") = NSMenuItem, CLong;
overload externalInstanceMethod(#NSPopUpButtonCell, #"itemWithTitle:") = NSMenuItem, NSString;
overload externalInstanceMethod(#NSPopUpButtonCell, #"lastItem") = NSMenuItem;
overload externalInstanceMethod(#NSPopUpButtonCell, #"selectItem:") = Void, NSMenuItem;
overload externalInstanceMethod(#NSPopUpButtonCell, #"selectItemAtIndex:") = Void, CLong;
overload externalInstanceMethod(#NSPopUpButtonCell, #"selectItemWithTitle:") = Void, NSString;
overload externalInstanceMethod(#NSPopUpButtonCell, #"selectItemWithTag:") = Bool, CLong;
overload externalInstanceMethod(#NSPopUpButtonCell, #"setTitle:") = Void, NSString;
overload externalInstanceMethod(#NSPopUpButtonCell, #"selectedItem") = NSMenuItem;
overload externalInstanceMethod(#NSPopUpButtonCell, #"indexOfSelectedItem") = CLong;
overload externalInstanceMethod(#NSPopUpButtonCell, #"synchronizeTitleAndSelectedItem") = Void;
overload externalInstanceMethod(#NSPopUpButtonCell, #"itemTitleAtIndex:") = NSString, CLong;
overload externalInstanceMethod(#NSPopUpButtonCell, #"itemTitles") = NSArray;
overload externalInstanceMethod(#NSPopUpButtonCell, #"titleOfSelectedItem") = NSString;
overload externalInstanceMethod(#NSPopUpButtonCell, #"attachPopUpWithFrame:inView:") = Void, NSRect, NSView;
overload externalInstanceMethod(#NSPopUpButtonCell, #"dismissPopUp") = Void;
overload externalInstanceMethod(#NSPopUpButtonCell, #"performClickWithFrame:inView:") = Void, NSRect, NSView;
overload externalInstanceMethod(#NSPopUpButtonCell, #"arrowPosition") = CULong;
overload externalInstanceMethod(#NSPopUpButtonCell, #"setArrowPosition:") = Void, CULong;
overload externalInstanceMethod(#NSPopUpButtonCell, #"objectValue") = Id;
overload externalInstanceMethod(#NSPopUpButtonCell, #"setObjectValue:") = Void, Id;

record NSPredicateEditor = externalClass(NSRuleEditor);
overload externalInstanceMethod(#NSPredicateEditor, #"setRowTemplates:") = Void, NSArray;
overload externalInstanceMethod(#NSPredicateEditor, #"rowTemplates") = NSArray;

record NSPredicateEditorRowTemplate = externalClass(NSObject);
overload externalInstanceMethod(#NSPredicateEditorRowTemplate, #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSPredicateEditorRowTemplate, #"initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#NSPredicateEditorRowTemplate, #"copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#NSPredicateEditorRowTemplate, #"matchForPredicate:") = Double, NSPredicate;
overload externalInstanceMethod(#NSPredicateEditorRowTemplate, #"templateViews") = NSArray;
overload externalInstanceMethod(#NSPredicateEditorRowTemplate, #"setPredicate:") = Void, NSPredicate;
overload externalInstanceMethod(#NSPredicateEditorRowTemplate, #"predicateWithSubpredicates:") = NSPredicate, NSArray;
overload externalInstanceMethod(#NSPredicateEditorRowTemplate, #"displayableSubpredicatesOfPredicate:") = NSArray, NSPredicate;
overload externalInstanceMethod(#NSPredicateEditorRowTemplate, #"initWithLeftExpressions:rightExpressions:modifier:operators:options:") = Id, NSArray, NSArray, CULong, NSArray, CULong;
overload externalInstanceMethod(#NSPredicateEditorRowTemplate, #"initWithLeftExpressions:rightExpressionAttributeType:modifier:operators:options:") = Id, NSArray, CULong, CULong, NSArray, CULong;
overload externalInstanceMethod(#NSPredicateEditorRowTemplate, #"initWithCompoundTypes:") = Id, NSArray;
overload externalInstanceMethod(#NSPredicateEditorRowTemplate, #"leftExpressions") = NSArray;
overload externalInstanceMethod(#NSPredicateEditorRowTemplate, #"rightExpressions") = NSArray;
overload externalInstanceMethod(#NSPredicateEditorRowTemplate, #"rightExpressionAttributeType") = CULong;
overload externalInstanceMethod(#NSPredicateEditorRowTemplate, #"modifier") = CULong;
overload externalInstanceMethod(#NSPredicateEditorRowTemplate, #"operators") = NSArray;
overload externalInstanceMethod(#NSPredicateEditorRowTemplate, #"options") = CULong;
overload externalInstanceMethod(#NSPredicateEditorRowTemplate, #"compoundTypes") = NSArray;
overload externalClassMethod(#NSPredicateEditorRowTemplate, #"templatesWithAttributeKeyPaths:inEntityDescription:") = NSArray, NSArray, NSEntityDescription;

record NSPrintInfo = externalClass(NSObject);
overload externalInstanceMethod(#NSPrintInfo, #"copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#NSPrintInfo, #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSPrintInfo, #"initWithCoder:") = Id, NSCoder;
overload externalClassMethod(#NSPrintInfo, #"setSharedPrintInfo:") = Void, NSPrintInfo;
overload externalClassMethod(#NSPrintInfo, #"sharedPrintInfo") = NSPrintInfo;
overload externalInstanceMethod(#NSPrintInfo, #"initWithDictionary:") = Id, NSDictionary;
overload externalInstanceMethod(#NSPrintInfo, #"dictionary") = NSMutableDictionary;
overload externalInstanceMethod(#NSPrintInfo, #"setPaperName:") = Void, NSString;
overload externalInstanceMethod(#NSPrintInfo, #"setPaperSize:") = Void, NSSize;
overload externalInstanceMethod(#NSPrintInfo, #"setOrientation:") = Void, CULong;
overload externalInstanceMethod(#NSPrintInfo, #"setScalingFactor:") = Void, Double;
overload externalInstanceMethod(#NSPrintInfo, #"paperName") = NSString;
overload externalInstanceMethod(#NSPrintInfo, #"paperSize") = NSSize;
overload externalInstanceMethod(#NSPrintInfo, #"orientation") = CULong;
overload externalInstanceMethod(#NSPrintInfo, #"scalingFactor") = Double;
overload externalInstanceMethod(#NSPrintInfo, #"setLeftMargin:") = Void, Double;
overload externalInstanceMethod(#NSPrintInfo, #"setRightMargin:") = Void, Double;
overload externalInstanceMethod(#NSPrintInfo, #"setTopMargin:") = Void, Double;
overload externalInstanceMethod(#NSPrintInfo, #"setBottomMargin:") = Void, Double;
overload externalInstanceMethod(#NSPrintInfo, #"leftMargin") = Double;
overload externalInstanceMethod(#NSPrintInfo, #"rightMargin") = Double;
overload externalInstanceMethod(#NSPrintInfo, #"topMargin") = Double;
overload externalInstanceMethod(#NSPrintInfo, #"bottomMargin") = Double;
overload externalInstanceMethod(#NSPrintInfo, #"setHorizontallyCentered:") = Void, Bool;
overload externalInstanceMethod(#NSPrintInfo, #"setVerticallyCentered:") = Void, Bool;
overload externalInstanceMethod(#NSPrintInfo, #"isHorizontallyCentered") = Bool;
overload externalInstanceMethod(#NSPrintInfo, #"isVerticallyCentered") = Bool;
overload externalInstanceMethod(#NSPrintInfo, #"setHorizontalPagination:") = Void, CULong;
overload externalInstanceMethod(#NSPrintInfo, #"setVerticalPagination:") = Void, CULong;
overload externalInstanceMethod(#NSPrintInfo, #"horizontalPagination") = CULong;
overload externalInstanceMethod(#NSPrintInfo, #"verticalPagination") = CULong;
overload externalInstanceMethod(#NSPrintInfo, #"setJobDisposition:") = Void, NSString;
overload externalInstanceMethod(#NSPrintInfo, #"jobDisposition") = NSString;
overload externalInstanceMethod(#NSPrintInfo, #"setPrinter:") = Void, NSPrinter;
overload externalInstanceMethod(#NSPrintInfo, #"printer") = NSPrinter;
overload externalInstanceMethod(#NSPrintInfo, #"setUpPrintOperationDefaultValues") = Void;
overload externalInstanceMethod(#NSPrintInfo, #"imageablePageBounds") = NSRect;
overload externalInstanceMethod(#NSPrintInfo, #"localizedPaperName") = NSString;
overload externalClassMethod(#NSPrintInfo, #"defaultPrinter") = NSPrinter;
overload externalInstanceMethod(#NSPrintInfo, #"printSettings") = NSMutableDictionary;
overload externalInstanceMethod(#NSPrintInfo, #"PMPrintSession") = RawPointer;
overload externalInstanceMethod(#NSPrintInfo, #"PMPageFormat") = RawPointer;
overload externalInstanceMethod(#NSPrintInfo, #"PMPrintSettings") = RawPointer;
overload externalInstanceMethod(#NSPrintInfo, #"updateFromPMPageFormat") = Void;
overload externalInstanceMethod(#NSPrintInfo, #"updateFromPMPrintSettings") = Void;
overload externalInstanceMethod(#NSPrintInfo, #"setSelectionOnly:") = Void, Bool;
overload externalInstanceMethod(#NSPrintInfo, #"isSelectionOnly") = Bool;
overload externalClassMethod(#NSPrintInfo, #"setDefaultPrinter:") = Void, NSPrinter;
overload externalClassMethod(#NSPrintInfo, #"sizeForPaperName:") = NSSize, NSString;

record NSPrintOperation = externalClass(NSObject);
overload externalClassMethod(#NSPrintOperation, #"printOperationWithView:printInfo:") = NSPrintOperation, NSView, NSPrintInfo;
overload externalClassMethod(#NSPrintOperation, #"PDFOperationWithView:insideRect:toData:printInfo:") = NSPrintOperation, NSView, NSRect, NSMutableData, NSPrintInfo;
overload externalClassMethod(#NSPrintOperation, #"PDFOperationWithView:insideRect:toPath:printInfo:") = NSPrintOperation, NSView, NSRect, NSString, NSPrintInfo;
overload externalClassMethod(#NSPrintOperation, #"EPSOperationWithView:insideRect:toData:printInfo:") = NSPrintOperation, NSView, NSRect, NSMutableData, NSPrintInfo;
overload externalClassMethod(#NSPrintOperation, #"EPSOperationWithView:insideRect:toPath:printInfo:") = NSPrintOperation, NSView, NSRect, NSString, NSPrintInfo;
overload externalClassMethod(#NSPrintOperation, #"printOperationWithView:") = NSPrintOperation, NSView;
overload externalClassMethod(#NSPrintOperation, #"PDFOperationWithView:insideRect:toData:") = NSPrintOperation, NSView, NSRect, NSMutableData;
overload externalClassMethod(#NSPrintOperation, #"EPSOperationWithView:insideRect:toData:") = NSPrintOperation, NSView, NSRect, NSMutableData;
overload externalClassMethod(#NSPrintOperation, #"currentOperation") = NSPrintOperation;
overload externalClassMethod(#NSPrintOperation, #"setCurrentOperation:") = Void, NSPrintOperation;
overload externalInstanceMethod(#NSPrintOperation, #"isCopyingOperation") = Bool;
overload externalInstanceMethod(#NSPrintOperation, #"setJobTitle:") = Void, NSString;
overload externalInstanceMethod(#NSPrintOperation, #"jobTitle") = NSString;
overload externalInstanceMethod(#NSPrintOperation, #"setShowsPrintPanel:") = Void, Bool;
overload externalInstanceMethod(#NSPrintOperation, #"showsPrintPanel") = Bool;
overload externalInstanceMethod(#NSPrintOperation, #"setShowsProgressPanel:") = Void, Bool;
overload externalInstanceMethod(#NSPrintOperation, #"showsProgressPanel") = Bool;
overload externalInstanceMethod(#NSPrintOperation, #"setPrintPanel:") = Void, NSPrintPanel;
overload externalInstanceMethod(#NSPrintOperation, #"printPanel") = NSPrintPanel;
overload externalInstanceMethod(#NSPrintOperation, #"setCanSpawnSeparateThread:") = Void, Bool;
overload externalInstanceMethod(#NSPrintOperation, #"canSpawnSeparateThread") = Bool;
overload externalInstanceMethod(#NSPrintOperation, #"setPageOrder:") = Void, CLong;
overload externalInstanceMethod(#NSPrintOperation, #"pageOrder") = CLong;
overload externalInstanceMethod(#NSPrintOperation, #"runOperationModalForWindow:delegate:didRunSelector:contextInfo:") = Void, NSWindow, Id, SelectorHandle, RawPointer;
overload externalInstanceMethod(#NSPrintOperation, #"runOperation") = Bool;
overload externalInstanceMethod(#NSPrintOperation, #"view") = NSView;
overload externalInstanceMethod(#NSPrintOperation, #"printInfo") = NSPrintInfo;
overload externalInstanceMethod(#NSPrintOperation, #"setPrintInfo:") = Void, NSPrintInfo;
overload externalInstanceMethod(#NSPrintOperation, #"context") = NSGraphicsContext;
overload externalInstanceMethod(#NSPrintOperation, #"pageRange") = NSRange;
overload externalInstanceMethod(#NSPrintOperation, #"currentPage") = CLong;
overload externalInstanceMethod(#NSPrintOperation, #"createContext") = NSGraphicsContext;
overload externalInstanceMethod(#NSPrintOperation, #"destroyContext") = Void;
overload externalInstanceMethod(#NSPrintOperation, #"deliverResult") = Bool;
overload externalInstanceMethod(#NSPrintOperation, #"cleanUpOperation") = Void;
overload externalInstanceMethod(#NSPrintOperation, #"setAccessoryView:") = Void, NSView;
overload externalInstanceMethod(#NSPrintOperation, #"accessoryView") = NSView;
overload externalInstanceMethod(#NSPrintOperation, #"setJobStyleHint:") = Void, NSString;
overload externalInstanceMethod(#NSPrintOperation, #"jobStyleHint") = NSString;
overload externalInstanceMethod(#NSPrintOperation, #"setShowPanels:") = Void, Bool;
overload externalInstanceMethod(#NSPrintOperation, #"showPanels") = Bool;

record NSPrintPanel = externalClass(NSObject);
overload externalClassMethod(#NSPrintPanel, #"printPanel") = NSPrintPanel;
overload externalInstanceMethod(#NSPrintPanel, #"addAccessoryController:") = Void, NSViewController;
overload externalInstanceMethod(#NSPrintPanel, #"removeAccessoryController:") = Void, NSViewController;
overload externalInstanceMethod(#NSPrintPanel, #"accessoryControllers") = NSArray;
overload externalInstanceMethod(#NSPrintPanel, #"setOptions:") = Void, CLong;
overload externalInstanceMethod(#NSPrintPanel, #"options") = CLong;
overload externalInstanceMethod(#NSPrintPanel, #"setDefaultButtonTitle:") = Void, NSString;
overload externalInstanceMethod(#NSPrintPanel, #"defaultButtonTitle") = NSString;
overload externalInstanceMethod(#NSPrintPanel, #"setHelpAnchor:") = Void, NSString;
overload externalInstanceMethod(#NSPrintPanel, #"helpAnchor") = NSString;
overload externalInstanceMethod(#NSPrintPanel, #"setJobStyleHint:") = Void, NSString;
overload externalInstanceMethod(#NSPrintPanel, #"jobStyleHint") = NSString;
overload externalInstanceMethod(#NSPrintPanel, #"beginSheetWithPrintInfo:modalForWindow:delegate:didEndSelector:contextInfo:") = Void, NSPrintInfo, NSWindow, Id, SelectorHandle, RawPointer;
overload externalInstanceMethod(#NSPrintPanel, #"runModalWithPrintInfo:") = CLong, NSPrintInfo;
overload externalInstanceMethod(#NSPrintPanel, #"runModal") = CLong;
overload externalInstanceMethod(#NSPrintPanel, #"printInfo") = NSPrintInfo;
overload externalInstanceMethod(#NSPrintPanel, #"setAccessoryView:") = Void, NSView;
overload externalInstanceMethod(#NSPrintPanel, #"accessoryView") = NSView;
overload externalInstanceMethod(#NSPrintPanel, #"updateFromPrintInfo") = Void;
overload externalInstanceMethod(#NSPrintPanel, #"finalWritePrintInfo") = Void;

record NSPrinter = externalClass(NSObject);
overload externalInstanceMethod(#NSPrinter, #"copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#NSPrinter, #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSPrinter, #"initWithCoder:") = Id, NSCoder;
overload externalClassMethod(#NSPrinter, #"printerNames") = NSArray;
overload externalClassMethod(#NSPrinter, #"printerTypes") = NSArray;
overload externalClassMethod(#NSPrinter, #"printerWithName:") = NSPrinter, NSString;
overload externalClassMethod(#NSPrinter, #"printerWithType:") = NSPrinter, NSString;
overload externalInstanceMethod(#NSPrinter, #"name") = NSString;
overload externalInstanceMethod(#NSPrinter, #"type") = NSString;
overload externalInstanceMethod(#NSPrinter, #"languageLevel") = CLong;
overload externalInstanceMethod(#NSPrinter, #"pageSizeForPaper:") = NSSize, NSString;
overload externalInstanceMethod(#NSPrinter, #"statusForTable:") = CULong, NSString;
overload externalInstanceMethod(#NSPrinter, #"isKey:inTable:") = Bool, NSString, NSString;
overload externalInstanceMethod(#NSPrinter, #"booleanForKey:inTable:") = Bool, NSString, NSString;
overload externalInstanceMethod(#NSPrinter, #"floatForKey:inTable:") = Float, NSString, NSString;
overload externalInstanceMethod(#NSPrinter, #"intForKey:inTable:") = Int, NSString, NSString;
overload externalInstanceMethod(#NSPrinter, #"rectForKey:inTable:") = NSRect, NSString, NSString;
overload externalInstanceMethod(#NSPrinter, #"sizeForKey:inTable:") = NSSize, NSString, NSString;
overload externalInstanceMethod(#NSPrinter, #"stringForKey:inTable:") = NSString, NSString, NSString;
overload externalInstanceMethod(#NSPrinter, #"stringListForKey:inTable:") = NSArray, NSString, NSString;
overload externalInstanceMethod(#NSPrinter, #"deviceDescription") = NSDictionary;
overload externalInstanceMethod(#NSPrinter, #"imageRectForPaper:") = NSRect, NSString;
overload externalInstanceMethod(#NSPrinter, #"acceptsBinary") = Bool;
overload externalInstanceMethod(#NSPrinter, #"isColor") = Bool;
overload externalInstanceMethod(#NSPrinter, #"isFontAvailable:") = Bool, NSString;
overload externalInstanceMethod(#NSPrinter, #"isOutputStackInReverseOrder") = Bool;
overload externalClassMethod(#NSPrinter, #"printerWithName:domain:includeUnavailable:") = NSPrinter, NSString, NSString, Bool;
overload externalInstanceMethod(#NSPrinter, #"domain") = NSString;
overload externalInstanceMethod(#NSPrinter, #"host") = NSString;
overload externalInstanceMethod(#NSPrinter, #"note") = NSString;

record NSProgressIndicator = externalClass(NSView);
overload externalInstanceMethod(#NSProgressIndicator, #"isIndeterminate") = Bool;
overload externalInstanceMethod(#NSProgressIndicator, #"setIndeterminate:") = Void, Bool;
overload externalInstanceMethod(#NSProgressIndicator, #"isBezeled") = Bool;
overload externalInstanceMethod(#NSProgressIndicator, #"setBezeled:") = Void, Bool;
overload externalInstanceMethod(#NSProgressIndicator, #"controlTint") = CULong;
overload externalInstanceMethod(#NSProgressIndicator, #"setControlTint:") = Void, CULong;
overload externalInstanceMethod(#NSProgressIndicator, #"controlSize") = CULong;
overload externalInstanceMethod(#NSProgressIndicator, #"setControlSize:") = Void, CULong;
overload externalInstanceMethod(#NSProgressIndicator, #"doubleValue") = Double;
overload externalInstanceMethod(#NSProgressIndicator, #"setDoubleValue:") = Void, Double;
overload externalInstanceMethod(#NSProgressIndicator, #"incrementBy:") = Void, Double;
overload externalInstanceMethod(#NSProgressIndicator, #"minValue") = Double;
overload externalInstanceMethod(#NSProgressIndicator, #"maxValue") = Double;
overload externalInstanceMethod(#NSProgressIndicator, #"setMinValue:") = Void, Double;
overload externalInstanceMethod(#NSProgressIndicator, #"setMaxValue:") = Void, Double;
overload externalInstanceMethod(#NSProgressIndicator, #"usesThreadedAnimation") = Bool;
overload externalInstanceMethod(#NSProgressIndicator, #"setUsesThreadedAnimation:") = Void, Bool;
overload externalInstanceMethod(#NSProgressIndicator, #"startAnimation:") = Void, Id;
overload externalInstanceMethod(#NSProgressIndicator, #"stopAnimation:") = Void, Id;
overload externalInstanceMethod(#NSProgressIndicator, #"setStyle:") = Void, CULong;
overload externalInstanceMethod(#NSProgressIndicator, #"style") = CULong;
overload externalInstanceMethod(#NSProgressIndicator, #"sizeToFit") = Void;
overload externalInstanceMethod(#NSProgressIndicator, #"isDisplayedWhenStopped") = Bool;
overload externalInstanceMethod(#NSProgressIndicator, #"setDisplayedWhenStopped:") = Void, Bool;
overload externalInstanceMethod(#NSProgressIndicator, #"animationDelay") = Double;
overload externalInstanceMethod(#NSProgressIndicator, #"setAnimationDelay:") = Void, Double;
overload externalInstanceMethod(#NSProgressIndicator, #"animate:") = Void, Id;

record NSResponder = externalClass(NSObject);
overload externalInstanceMethod(#NSResponder, #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSResponder, #"initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#NSResponder, #"nextResponder") = NSResponder;
overload externalInstanceMethod(#NSResponder, #"setNextResponder:") = Void, NSResponder;
overload externalInstanceMethod(#NSResponder, #"tryToPerform:with:") = Bool, SelectorHandle, Id;
overload externalInstanceMethod(#NSResponder, #"performKeyEquivalent:") = Bool, NSEvent;
overload externalInstanceMethod(#NSResponder, #"validRequestorForSendType:returnType:") = Id, NSString, NSString;
overload externalInstanceMethod(#NSResponder, #"mouseDown:") = Void, NSEvent;
overload externalInstanceMethod(#NSResponder, #"rightMouseDown:") = Void, NSEvent;
overload externalInstanceMethod(#NSResponder, #"otherMouseDown:") = Void, NSEvent;
overload externalInstanceMethod(#NSResponder, #"mouseUp:") = Void, NSEvent;
overload externalInstanceMethod(#NSResponder, #"rightMouseUp:") = Void, NSEvent;
overload externalInstanceMethod(#NSResponder, #"otherMouseUp:") = Void, NSEvent;
overload externalInstanceMethod(#NSResponder, #"mouseMoved:") = Void, NSEvent;
overload externalInstanceMethod(#NSResponder, #"mouseDragged:") = Void, NSEvent;
overload externalInstanceMethod(#NSResponder, #"scrollWheel:") = Void, NSEvent;
overload externalInstanceMethod(#NSResponder, #"rightMouseDragged:") = Void, NSEvent;
overload externalInstanceMethod(#NSResponder, #"otherMouseDragged:") = Void, NSEvent;
overload externalInstanceMethod(#NSResponder, #"mouseEntered:") = Void, NSEvent;
overload externalInstanceMethod(#NSResponder, #"mouseExited:") = Void, NSEvent;
overload externalInstanceMethod(#NSResponder, #"keyDown:") = Void, NSEvent;
overload externalInstanceMethod(#NSResponder, #"keyUp:") = Void, NSEvent;
overload externalInstanceMethod(#NSResponder, #"flagsChanged:") = Void, NSEvent;
overload externalInstanceMethod(#NSResponder, #"tabletPoint:") = Void, NSEvent;
overload externalInstanceMethod(#NSResponder, #"tabletProximity:") = Void, NSEvent;
overload externalInstanceMethod(#NSResponder, #"cursorUpdate:") = Void, NSEvent;
overload externalInstanceMethod(#NSResponder, #"magnifyWithEvent:") = Void, NSEvent;
overload externalInstanceMethod(#NSResponder, #"rotateWithEvent:") = Void, NSEvent;
overload externalInstanceMethod(#NSResponder, #"swipeWithEvent:") = Void, NSEvent;
overload externalInstanceMethod(#NSResponder, #"beginGestureWithEvent:") = Void, NSEvent;
overload externalInstanceMethod(#NSResponder, #"endGestureWithEvent:") = Void, NSEvent;
overload externalInstanceMethod(#NSResponder, #"touchesBeganWithEvent:") = Void, NSEvent;
overload externalInstanceMethod(#NSResponder, #"touchesMovedWithEvent:") = Void, NSEvent;
overload externalInstanceMethod(#NSResponder, #"touchesEndedWithEvent:") = Void, NSEvent;
overload externalInstanceMethod(#NSResponder, #"touchesCancelledWithEvent:") = Void, NSEvent;
overload externalInstanceMethod(#NSResponder, #"noResponderFor:") = Void, SelectorHandle;
overload externalInstanceMethod(#NSResponder, #"acceptsFirstResponder") = Bool;
overload externalInstanceMethod(#NSResponder, #"becomeFirstResponder") = Bool;
overload externalInstanceMethod(#NSResponder, #"resignFirstResponder") = Bool;
overload externalInstanceMethod(#NSResponder, #"interpretKeyEvents:") = Void, NSArray;
overload externalInstanceMethod(#NSResponder, #"flushBufferedKeyEvents") = Void;
overload externalInstanceMethod(#NSResponder, #"setMenu:") = Void, NSMenu;
overload externalInstanceMethod(#NSResponder, #"menu") = NSMenu;
overload externalInstanceMethod(#NSResponder, #"showContextHelp:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"helpRequested:") = Void, NSEvent;
overload externalInstanceMethod(#NSResponder, #"shouldBeTreatedAsInkEvent:") = Bool, NSEvent;
overload externalInstanceMethod(#NSResponder, #"performMnemonic:") = Bool, NSString;
overload externalInstanceMethod(#NSResponder, #"insertText:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"doCommandBySelector:") = Void, SelectorHandle;
overload externalInstanceMethod(#NSResponder, #"moveForward:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"moveRight:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"moveBackward:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"moveLeft:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"moveUp:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"moveDown:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"moveWordForward:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"moveWordBackward:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"moveToBeginningOfLine:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"moveToEndOfLine:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"moveToBeginningOfParagraph:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"moveToEndOfParagraph:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"moveToEndOfDocument:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"moveToBeginningOfDocument:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"pageDown:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"pageUp:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"centerSelectionInVisibleArea:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"moveBackwardAndModifySelection:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"moveForwardAndModifySelection:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"moveWordForwardAndModifySelection:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"moveWordBackwardAndModifySelection:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"moveUpAndModifySelection:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"moveDownAndModifySelection:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"moveToBeginningOfLineAndModifySelection:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"moveToEndOfLineAndModifySelection:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"moveToBeginningOfParagraphAndModifySelection:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"moveToEndOfParagraphAndModifySelection:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"moveToEndOfDocumentAndModifySelection:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"moveToBeginningOfDocumentAndModifySelection:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"pageDownAndModifySelection:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"pageUpAndModifySelection:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"moveParagraphForwardAndModifySelection:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"moveParagraphBackwardAndModifySelection:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"moveWordRight:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"moveWordLeft:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"moveRightAndModifySelection:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"moveLeftAndModifySelection:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"moveWordRightAndModifySelection:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"moveWordLeftAndModifySelection:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"moveToLeftEndOfLine:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"moveToRightEndOfLine:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"moveToLeftEndOfLineAndModifySelection:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"moveToRightEndOfLineAndModifySelection:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"scrollPageUp:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"scrollPageDown:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"scrollLineUp:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"scrollLineDown:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"scrollToBeginningOfDocument:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"scrollToEndOfDocument:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"transpose:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"transposeWords:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"selectAll:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"selectParagraph:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"selectLine:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"selectWord:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"indent:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"insertTab:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"insertBacktab:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"insertNewline:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"insertParagraphSeparator:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"insertNewlineIgnoringFieldEditor:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"insertTabIgnoringFieldEditor:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"insertLineBreak:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"insertContainerBreak:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"insertSingleQuoteIgnoringSubstitution:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"insertDoubleQuoteIgnoringSubstitution:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"changeCaseOfLetter:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"uppercaseWord:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"lowercaseWord:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"capitalizeWord:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"deleteForward:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"deleteBackward:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"deleteBackwardByDecomposingPreviousCharacter:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"deleteWordForward:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"deleteWordBackward:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"deleteToBeginningOfLine:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"deleteToEndOfLine:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"deleteToBeginningOfParagraph:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"deleteToEndOfParagraph:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"yank:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"complete:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"setMark:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"deleteToMark:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"selectToMark:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"swapWithMark:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"cancelOperation:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"makeBaseWritingDirectionNatural:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"makeBaseWritingDirectionLeftToRight:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"makeBaseWritingDirectionRightToLeft:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"makeTextWritingDirectionNatural:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"makeTextWritingDirectionLeftToRight:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"makeTextWritingDirectionRightToLeft:") = Void, Id;
overload externalInstanceMethod(#NSResponder, #"undoManager") = NSUndoManager;
overload externalInstanceMethod(#NSResponder, #"presentError:modalForWindow:delegate:didPresentSelector:contextInfo:") = Void, NSError, NSWindow, Id, SelectorHandle, RawPointer;
overload externalInstanceMethod(#NSResponder, #"presentError:") = Bool, NSError;
overload externalInstanceMethod(#NSResponder, #"willPresentError:") = NSError, NSError;
overload externalInstanceMethod(#NSResponder, #"interfaceStyle") = CULong;
overload externalInstanceMethod(#NSResponder, #"setInterfaceStyle:") = Void, CULong;

record NSRuleEditor = externalClass(NSControl);
overload externalInstanceMethod(#NSRuleEditor, #"setDelegate:") = Void, Id;
overload externalInstanceMethod(#NSRuleEditor, #"delegate") = Id;
overload externalInstanceMethod(#NSRuleEditor, #"setFormattingStringsFilename:") = Void, NSString;
overload externalInstanceMethod(#NSRuleEditor, #"formattingStringsFilename") = NSString;
overload externalInstanceMethod(#NSRuleEditor, #"setFormattingDictionary:") = Void, NSDictionary;
overload externalInstanceMethod(#NSRuleEditor, #"formattingDictionary") = NSDictionary;
overload externalInstanceMethod(#NSRuleEditor, #"reloadCriteria") = Void;
overload externalInstanceMethod(#NSRuleEditor, #"setNestingMode:") = Void, CULong;
overload externalInstanceMethod(#NSRuleEditor, #"nestingMode") = CULong;
overload externalInstanceMethod(#NSRuleEditor, #"setRowHeight:") = Void, Double;
overload externalInstanceMethod(#NSRuleEditor, #"rowHeight") = Double;
overload externalInstanceMethod(#NSRuleEditor, #"setEditable:") = Void, Bool;
overload externalInstanceMethod(#NSRuleEditor, #"isEditable") = Bool;
overload externalInstanceMethod(#NSRuleEditor, #"setCanRemoveAllRows:") = Void, Bool;
overload externalInstanceMethod(#NSRuleEditor, #"canRemoveAllRows") = Bool;
overload externalInstanceMethod(#NSRuleEditor, #"predicate") = NSPredicate;
overload externalInstanceMethod(#NSRuleEditor, #"reloadPredicate") = Void;
overload externalInstanceMethod(#NSRuleEditor, #"predicateForRow:") = NSPredicate, CLong;
overload externalInstanceMethod(#NSRuleEditor, #"numberOfRows") = CLong;
overload externalInstanceMethod(#NSRuleEditor, #"subrowIndexesForRow:") = NSIndexSet, CLong;
overload externalInstanceMethod(#NSRuleEditor, #"criteriaForRow:") = NSArray, CLong;
overload externalInstanceMethod(#NSRuleEditor, #"displayValuesForRow:") = NSArray, CLong;
overload externalInstanceMethod(#NSRuleEditor, #"rowForDisplayValue:") = CLong, Id;
overload externalInstanceMethod(#NSRuleEditor, #"rowTypeForRow:") = CULong, CLong;
overload externalInstanceMethod(#NSRuleEditor, #"parentRowForRow:") = CLong, CLong;
overload externalInstanceMethod(#NSRuleEditor, #"addRow:") = Void, Id;
overload externalInstanceMethod(#NSRuleEditor, #"insertRowAtIndex:withType:asSubrowOfRow:animate:") = Void, CLong, CULong, CLong, Bool;
overload externalInstanceMethod(#NSRuleEditor, #"setCriteria:andDisplayValues:forRowAtIndex:") = Void, NSArray, NSArray, CLong;
overload externalInstanceMethod(#NSRuleEditor, #"removeRowAtIndex:") = Void, CLong;
overload externalInstanceMethod(#NSRuleEditor, #"removeRowsAtIndexes:includeSubrows:") = Void, NSIndexSet, Bool;
overload externalInstanceMethod(#NSRuleEditor, #"selectedRowIndexes") = NSIndexSet;
overload externalInstanceMethod(#NSRuleEditor, #"selectRowIndexes:byExtendingSelection:") = Void, NSIndexSet, Bool;
overload externalInstanceMethod(#NSRuleEditor, #"setRowClass:") = Void, Id;
overload externalInstanceMethod(#NSRuleEditor, #"rowClass") = Id;
overload externalInstanceMethod(#NSRuleEditor, #"setRowTypeKeyPath:") = Void, NSString;
overload externalInstanceMethod(#NSRuleEditor, #"rowTypeKeyPath") = NSString;
overload externalInstanceMethod(#NSRuleEditor, #"setSubrowsKeyPath:") = Void, NSString;
overload externalInstanceMethod(#NSRuleEditor, #"subrowsKeyPath") = NSString;
overload externalInstanceMethod(#NSRuleEditor, #"setCriteriaKeyPath:") = Void, NSString;
overload externalInstanceMethod(#NSRuleEditor, #"criteriaKeyPath") = NSString;
overload externalInstanceMethod(#NSRuleEditor, #"setDisplayValuesKeyPath:") = Void, NSString;
overload externalInstanceMethod(#NSRuleEditor, #"displayValuesKeyPath") = NSString;

record NSRulerMarker = externalClass(NSObject);
overload externalInstanceMethod(#NSRulerMarker, #"copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#NSRulerMarker, #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSRulerMarker, #"initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#NSRulerMarker, #"initWithRulerView:markerLocation:image:imageOrigin:") = Id, NSRulerView, Double, NSImage, NSPoint;
overload externalInstanceMethod(#NSRulerMarker, #"ruler") = NSRulerView;
overload externalInstanceMethod(#NSRulerMarker, #"setMarkerLocation:") = Void, Double;
overload externalInstanceMethod(#NSRulerMarker, #"markerLocation") = Double;
overload externalInstanceMethod(#NSRulerMarker, #"setImage:") = Void, NSImage;
overload externalInstanceMethod(#NSRulerMarker, #"image") = NSImage;
overload externalInstanceMethod(#NSRulerMarker, #"setImageOrigin:") = Void, NSPoint;
overload externalInstanceMethod(#NSRulerMarker, #"imageOrigin") = NSPoint;
overload externalInstanceMethod(#NSRulerMarker, #"setMovable:") = Void, Bool;
overload externalInstanceMethod(#NSRulerMarker, #"setRemovable:") = Void, Bool;
overload externalInstanceMethod(#NSRulerMarker, #"isMovable") = Bool;
overload externalInstanceMethod(#NSRulerMarker, #"isRemovable") = Bool;
overload externalInstanceMethod(#NSRulerMarker, #"isDragging") = Bool;
overload externalInstanceMethod(#NSRulerMarker, #"setRepresentedObject:") = Void, Id;
overload externalInstanceMethod(#NSRulerMarker, #"representedObject") = Id;
overload externalInstanceMethod(#NSRulerMarker, #"imageRectInRuler") = NSRect;
overload externalInstanceMethod(#NSRulerMarker, #"thicknessRequiredInRuler") = Double;
overload externalInstanceMethod(#NSRulerMarker, #"drawRect:") = Void, NSRect;
overload externalInstanceMethod(#NSRulerMarker, #"trackMouse:adding:") = Bool, NSEvent, Bool;

record NSRulerView = externalClass(NSView);
overload externalClassMethod(#NSRulerView, #"registerUnitWithName:abbreviation:unitToPointsConversionFactor:stepUpCycle:stepDownCycle:") = Void, NSString, NSString, Double, NSArray, NSArray;
overload externalInstanceMethod(#NSRulerView, #"initWithScrollView:orientation:") = Id, NSScrollView, CULong;
overload externalInstanceMethod(#NSRulerView, #"setScrollView:") = Void, NSScrollView;
overload externalInstanceMethod(#NSRulerView, #"scrollView") = NSScrollView;
overload externalInstanceMethod(#NSRulerView, #"setOrientation:") = Void, CULong;
overload externalInstanceMethod(#NSRulerView, #"orientation") = CULong;
overload externalInstanceMethod(#NSRulerView, #"baselineLocation") = Double;
overload externalInstanceMethod(#NSRulerView, #"requiredThickness") = Double;
overload externalInstanceMethod(#NSRulerView, #"setRuleThickness:") = Void, Double;
overload externalInstanceMethod(#NSRulerView, #"ruleThickness") = Double;
overload externalInstanceMethod(#NSRulerView, #"setReservedThicknessForMarkers:") = Void, Double;
overload externalInstanceMethod(#NSRulerView, #"reservedThicknessForMarkers") = Double;
overload externalInstanceMethod(#NSRulerView, #"setReservedThicknessForAccessoryView:") = Void, Double;
overload externalInstanceMethod(#NSRulerView, #"reservedThicknessForAccessoryView") = Double;
overload externalInstanceMethod(#NSRulerView, #"setMeasurementUnits:") = Void, NSString;
overload externalInstanceMethod(#NSRulerView, #"measurementUnits") = NSString;
overload externalInstanceMethod(#NSRulerView, #"setOriginOffset:") = Void, Double;
overload externalInstanceMethod(#NSRulerView, #"originOffset") = Double;
overload externalInstanceMethod(#NSRulerView, #"setClientView:") = Void, NSView;
overload externalInstanceMethod(#NSRulerView, #"clientView") = NSView;
overload externalInstanceMethod(#NSRulerView, #"setMarkers:") = Void, NSArray;
overload externalInstanceMethod(#NSRulerView, #"addMarker:") = Void, NSRulerMarker;
overload externalInstanceMethod(#NSRulerView, #"removeMarker:") = Void, NSRulerMarker;
overload externalInstanceMethod(#NSRulerView, #"markers") = NSArray;
overload externalInstanceMethod(#NSRulerView, #"trackMarker:withMouseEvent:") = Bool, NSRulerMarker, NSEvent;
overload externalInstanceMethod(#NSRulerView, #"setAccessoryView:") = Void, NSView;
overload externalInstanceMethod(#NSRulerView, #"accessoryView") = NSView;
overload externalInstanceMethod(#NSRulerView, #"moveRulerlineFromLocation:toLocation:") = Void, Double, Double;
overload externalInstanceMethod(#NSRulerView, #"invalidateHashMarks") = Void;
overload externalInstanceMethod(#NSRulerView, #"drawHashMarksAndLabelsInRect:") = Void, NSRect;
overload externalInstanceMethod(#NSRulerView, #"drawMarkersInRect:") = Void, NSRect;
overload externalInstanceMethod(#NSRulerView, #"isFlipped") = Bool;

record NSRunningApplication = externalClass(NSObject);
overload externalInstanceMethod(#NSRunningApplication, #"hide") = Bool;
overload externalInstanceMethod(#NSRunningApplication, #"unhide") = Bool;
overload externalInstanceMethod(#NSRunningApplication, #"activateWithOptions:") = Bool, CULong;
overload externalInstanceMethod(#NSRunningApplication, #"terminate") = Bool;
overload externalInstanceMethod(#NSRunningApplication, #"forceTerminate") = Bool;
overload externalClassMethod(#NSRunningApplication, #"runningApplicationsWithBundleIdentifier:") = NSArray, NSString;
overload externalClassMethod(#NSRunningApplication, #"runningApplicationWithProcessIdentifier:") = NSRunningApplication, Int;
overload externalClassMethod(#NSRunningApplication, #"currentApplication") = NSRunningApplication;
overload externalInstanceMethod(#NSRunningApplication, #"isTerminated") = Bool;
overload externalInstanceMethod(#NSRunningApplication, #"isFinishedLaunching") = Bool;
overload externalInstanceMethod(#NSRunningApplication, #"isHidden") = Bool;
overload externalInstanceMethod(#NSRunningApplication, #"isActive") = Bool;
overload externalInstanceMethod(#NSRunningApplication, #"activationPolicy") = CLong;
overload externalInstanceMethod(#NSRunningApplication, #"localizedName") = NSString;
overload externalInstanceMethod(#NSRunningApplication, #"bundleIdentifier") = NSString;
overload externalInstanceMethod(#NSRunningApplication, #"bundleURL") = NSURL;
overload externalInstanceMethod(#NSRunningApplication, #"executableURL") = NSURL;
overload externalInstanceMethod(#NSRunningApplication, #"processIdentifier") = Int;
overload externalInstanceMethod(#NSRunningApplication, #"launchDate") = NSDate;
overload externalInstanceMethod(#NSRunningApplication, #"icon") = NSImage;
overload externalInstanceMethod(#NSRunningApplication, #"executableArchitecture") = CLong;

record NSSavePanel = externalClass(NSPanel);
overload externalClassMethod(#NSSavePanel, #"savePanel") = NSSavePanel;
overload externalInstanceMethod(#NSSavePanel, #"URL") = NSURL;
overload externalInstanceMethod(#NSSavePanel, #"directoryURL") = NSURL;
overload externalInstanceMethod(#NSSavePanel, #"setDirectoryURL:") = Void, NSURL;
overload externalInstanceMethod(#NSSavePanel, #"allowedFileTypes") = NSArray;
overload externalInstanceMethod(#NSSavePanel, #"setAllowedFileTypes:") = Void, NSArray;
overload externalInstanceMethod(#NSSavePanel, #"allowsOtherFileTypes") = Bool;
overload externalInstanceMethod(#NSSavePanel, #"setAllowsOtherFileTypes:") = Void, Bool;
overload externalInstanceMethod(#NSSavePanel, #"accessoryView") = NSView;
overload externalInstanceMethod(#NSSavePanel, #"setAccessoryView:") = Void, NSView;
overload externalInstanceMethod(#NSSavePanel, #"delegate") = Id;
overload externalInstanceMethod(#NSSavePanel, #"setDelegate:") = Void, Id;
overload externalInstanceMethod(#NSSavePanel, #"isExpanded") = Bool;
overload externalInstanceMethod(#NSSavePanel, #"canCreateDirectories") = Bool;
overload externalInstanceMethod(#NSSavePanel, #"setCanCreateDirectories:") = Void, Bool;
overload externalInstanceMethod(#NSSavePanel, #"canSelectHiddenExtension") = Bool;
overload externalInstanceMethod(#NSSavePanel, #"setCanSelectHiddenExtension:") = Void, Bool;
overload externalInstanceMethod(#NSSavePanel, #"isExtensionHidden") = Bool;
overload externalInstanceMethod(#NSSavePanel, #"setExtensionHidden:") = Void, Bool;
overload externalInstanceMethod(#NSSavePanel, #"treatsFilePackagesAsDirectories") = Bool;
overload externalInstanceMethod(#NSSavePanel, #"setTreatsFilePackagesAsDirectories:") = Void, Bool;
overload externalInstanceMethod(#NSSavePanel, #"prompt") = NSString;
overload externalInstanceMethod(#NSSavePanel, #"setPrompt:") = Void, NSString;
overload externalInstanceMethod(#NSSavePanel, #"title") = NSString;
overload externalInstanceMethod(#NSSavePanel, #"setTitle:") = Void, NSString;
overload externalInstanceMethod(#NSSavePanel, #"nameFieldLabel") = NSString;
overload externalInstanceMethod(#NSSavePanel, #"setNameFieldLabel:") = Void, NSString;
overload externalInstanceMethod(#NSSavePanel, #"nameFieldStringValue") = NSString;
overload externalInstanceMethod(#NSSavePanel, #"setNameFieldStringValue:") = Void, NSString;
overload externalInstanceMethod(#NSSavePanel, #"message") = NSString;
overload externalInstanceMethod(#NSSavePanel, #"setMessage:") = Void, NSString;
overload externalInstanceMethod(#NSSavePanel, #"validateVisibleColumns") = Void;
overload externalInstanceMethod(#NSSavePanel, #"showsHiddenFiles") = Bool;
overload externalInstanceMethod(#NSSavePanel, #"setShowsHiddenFiles:") = Void, Bool;
overload externalInstanceMethod(#NSSavePanel, #"ok:") = Void, Id;
overload externalInstanceMethod(#NSSavePanel, #"cancel:") = Void, Id;
overload externalInstanceMethod(#NSSavePanel, #"beginSheetModalForWindow:completionHandler:") = Void, NSWindow, UnknownType;
overload externalInstanceMethod(#NSSavePanel, #"beginWithCompletionHandler:") = Void, UnknownType;
overload externalInstanceMethod(#NSSavePanel, #"runModal") = CLong;
overload externalInstanceMethod(#NSSavePanel, #"filename") = NSString;
overload externalInstanceMethod(#NSSavePanel, #"directory") = NSString;
overload externalInstanceMethod(#NSSavePanel, #"setDirectory:") = Void, NSString;
overload externalInstanceMethod(#NSSavePanel, #"requiredFileType") = NSString;
overload externalInstanceMethod(#NSSavePanel, #"setRequiredFileType:") = Void, NSString;
overload externalInstanceMethod(#NSSavePanel, #"beginSheetForDirectory:file:modalForWindow:modalDelegate:didEndSelector:contextInfo:") = Void, NSString, NSString, NSWindow, Id, SelectorHandle, RawPointer;
overload externalInstanceMethod(#NSSavePanel, #"runModalForDirectory:file:") = CLong, NSString, NSString;
overload externalInstanceMethod(#NSSavePanel, #"selectText:") = Void, Id;

record NSScreen = externalClass(NSObject);
overload externalClassMethod(#NSScreen, #"screens") = NSArray;
overload externalClassMethod(#NSScreen, #"mainScreen") = NSScreen;
overload externalClassMethod(#NSScreen, #"deepestScreen") = NSScreen;
overload externalInstanceMethod(#NSScreen, #"depth") = Int;
overload externalInstanceMethod(#NSScreen, #"frame") = NSRect;
overload externalInstanceMethod(#NSScreen, #"visibleFrame") = NSRect;
overload externalInstanceMethod(#NSScreen, #"deviceDescription") = NSDictionary;
overload externalInstanceMethod(#NSScreen, #"colorSpace") = NSColorSpace;
overload externalInstanceMethod(#NSScreen, #"supportedWindowDepths") = Pointer[Int];
overload externalInstanceMethod(#NSScreen, #"userSpaceScaleFactor") = Double;

record NSScrollView = externalClass(NSView);
overload externalClassMethod(#NSScrollView, #"frameSizeForContentSize:hasHorizontalScroller:hasVerticalScroller:borderType:") = NSSize, NSSize, Bool, Bool, CULong;
overload externalClassMethod(#NSScrollView, #"contentSizeForFrameSize:hasHorizontalScroller:hasVerticalScroller:borderType:") = NSSize, NSSize, Bool, Bool, CULong;
overload externalInstanceMethod(#NSScrollView, #"documentVisibleRect") = NSRect;
overload externalInstanceMethod(#NSScrollView, #"contentSize") = NSSize;
overload externalInstanceMethod(#NSScrollView, #"setDocumentView:") = Void, NSView;
overload externalInstanceMethod(#NSScrollView, #"documentView") = Id;
overload externalInstanceMethod(#NSScrollView, #"setContentView:") = Void, NSClipView;
overload externalInstanceMethod(#NSScrollView, #"contentView") = NSClipView;
overload externalInstanceMethod(#NSScrollView, #"setDocumentCursor:") = Void, NSCursor;
overload externalInstanceMethod(#NSScrollView, #"documentCursor") = NSCursor;
overload externalInstanceMethod(#NSScrollView, #"setBorderType:") = Void, CULong;
overload externalInstanceMethod(#NSScrollView, #"borderType") = CULong;
overload externalInstanceMethod(#NSScrollView, #"setBackgroundColor:") = Void, NSColor;
overload externalInstanceMethod(#NSScrollView, #"backgroundColor") = NSColor;
overload externalInstanceMethod(#NSScrollView, #"setDrawsBackground:") = Void, Bool;
overload externalInstanceMethod(#NSScrollView, #"drawsBackground") = Bool;
overload externalInstanceMethod(#NSScrollView, #"setHasVerticalScroller:") = Void, Bool;
overload externalInstanceMethod(#NSScrollView, #"hasVerticalScroller") = Bool;
overload externalInstanceMethod(#NSScrollView, #"setHasHorizontalScroller:") = Void, Bool;
overload externalInstanceMethod(#NSScrollView, #"hasHorizontalScroller") = Bool;
overload externalInstanceMethod(#NSScrollView, #"setVerticalScroller:") = Void, NSScroller;
overload externalInstanceMethod(#NSScrollView, #"verticalScroller") = NSScroller;
overload externalInstanceMethod(#NSScrollView, #"setHorizontalScroller:") = Void, NSScroller;
overload externalInstanceMethod(#NSScrollView, #"horizontalScroller") = NSScroller;
overload externalInstanceMethod(#NSScrollView, #"autohidesScrollers") = Bool;
overload externalInstanceMethod(#NSScrollView, #"setAutohidesScrollers:") = Void, Bool;
overload externalInstanceMethod(#NSScrollView, #"setHorizontalLineScroll:") = Void, Double;
overload externalInstanceMethod(#NSScrollView, #"setVerticalLineScroll:") = Void, Double;
overload externalInstanceMethod(#NSScrollView, #"setLineScroll:") = Void, Double;
overload externalInstanceMethod(#NSScrollView, #"horizontalLineScroll") = Double;
overload externalInstanceMethod(#NSScrollView, #"verticalLineScroll") = Double;
overload externalInstanceMethod(#NSScrollView, #"lineScroll") = Double;
overload externalInstanceMethod(#NSScrollView, #"setHorizontalPageScroll:") = Void, Double;
overload externalInstanceMethod(#NSScrollView, #"setVerticalPageScroll:") = Void, Double;
overload externalInstanceMethod(#NSScrollView, #"setPageScroll:") = Void, Double;
overload externalInstanceMethod(#NSScrollView, #"horizontalPageScroll") = Double;
overload externalInstanceMethod(#NSScrollView, #"verticalPageScroll") = Double;
overload externalInstanceMethod(#NSScrollView, #"pageScroll") = Double;
overload externalInstanceMethod(#NSScrollView, #"setScrollsDynamically:") = Void, Bool;
overload externalInstanceMethod(#NSScrollView, #"scrollsDynamically") = Bool;
overload externalInstanceMethod(#NSScrollView, #"tile") = Void;
overload externalInstanceMethod(#NSScrollView, #"reflectScrolledClipView:") = Void, NSClipView;
overload externalInstanceMethod(#NSScrollView, #"scrollWheel:") = Void, NSEvent;
overload externalClassMethod(#NSScrollView, #"setRulerViewClass:") = Void, Id;
overload externalClassMethod(#NSScrollView, #"rulerViewClass") = Id;
overload externalInstanceMethod(#NSScrollView, #"setRulersVisible:") = Void, Bool;
overload externalInstanceMethod(#NSScrollView, #"rulersVisible") = Bool;
overload externalInstanceMethod(#NSScrollView, #"setHasHorizontalRuler:") = Void, Bool;
overload externalInstanceMethod(#NSScrollView, #"hasHorizontalRuler") = Bool;
overload externalInstanceMethod(#NSScrollView, #"setHasVerticalRuler:") = Void, Bool;
overload externalInstanceMethod(#NSScrollView, #"hasVerticalRuler") = Bool;
overload externalInstanceMethod(#NSScrollView, #"setHorizontalRulerView:") = Void, NSRulerView;
overload externalInstanceMethod(#NSScrollView, #"horizontalRulerView") = NSRulerView;
overload externalInstanceMethod(#NSScrollView, #"setVerticalRulerView:") = Void, NSRulerView;
overload externalInstanceMethod(#NSScrollView, #"verticalRulerView") = NSRulerView;

record NSScroller = externalClass(NSControl);
overload externalClassMethod(#NSScroller, #"scrollerWidth") = Double;
overload externalClassMethod(#NSScroller, #"scrollerWidthForControlSize:") = Double, CULong;
overload externalInstanceMethod(#NSScroller, #"drawParts") = Void;
overload externalInstanceMethod(#NSScroller, #"rectForPart:") = NSRect, CULong;
overload externalInstanceMethod(#NSScroller, #"checkSpaceForParts") = Void;
overload externalInstanceMethod(#NSScroller, #"usableParts") = CULong;
overload externalInstanceMethod(#NSScroller, #"setArrowsPosition:") = Void, CULong;
overload externalInstanceMethod(#NSScroller, #"arrowsPosition") = CULong;
overload externalInstanceMethod(#NSScroller, #"setControlTint:") = Void, CULong;
overload externalInstanceMethod(#NSScroller, #"controlTint") = CULong;
overload externalInstanceMethod(#NSScroller, #"setControlSize:") = Void, CULong;
overload externalInstanceMethod(#NSScroller, #"controlSize") = CULong;
overload externalInstanceMethod(#NSScroller, #"drawArrow:highlight:") = Void, CULong, Bool;
overload externalInstanceMethod(#NSScroller, #"drawKnob") = Void;
overload externalInstanceMethod(#NSScroller, #"drawKnobSlotInRect:highlight:") = Void, NSRect, Bool;
overload externalInstanceMethod(#NSScroller, #"highlight:") = Void, Bool;
overload externalInstanceMethod(#NSScroller, #"testPart:") = CULong, NSPoint;
overload externalInstanceMethod(#NSScroller, #"trackKnob:") = Void, NSEvent;
overload externalInstanceMethod(#NSScroller, #"trackScrollButtons:") = Void, NSEvent;
overload externalInstanceMethod(#NSScroller, #"hitPart") = CULong;
overload externalInstanceMethod(#NSScroller, #"knobProportion") = Double;
overload externalInstanceMethod(#NSScroller, #"setKnobProportion:") = Void, Double;
overload externalInstanceMethod(#NSScroller, #"setFloatValue:knobProportion:") = Void, Float, Double;

record NSSearchField = externalClass(NSTextField);
overload externalInstanceMethod(#NSSearchField, #"setRecentSearches:") = Void, NSArray;
overload externalInstanceMethod(#NSSearchField, #"recentSearches") = NSArray;
overload externalInstanceMethod(#NSSearchField, #"setRecentsAutosaveName:") = Void, NSString;
overload externalInstanceMethod(#NSSearchField, #"recentsAutosaveName") = NSString;

record NSSearchFieldCell = externalClass(NSTextFieldCell);
overload externalInstanceMethod(#NSSearchFieldCell, #"searchButtonCell") = NSButtonCell;
overload externalInstanceMethod(#NSSearchFieldCell, #"setSearchButtonCell:") = Void, NSButtonCell;
overload externalInstanceMethod(#NSSearchFieldCell, #"cancelButtonCell") = NSButtonCell;
overload externalInstanceMethod(#NSSearchFieldCell, #"setCancelButtonCell:") = Void, NSButtonCell;
overload externalInstanceMethod(#NSSearchFieldCell, #"resetSearchButtonCell") = Void;
overload externalInstanceMethod(#NSSearchFieldCell, #"resetCancelButtonCell") = Void;
overload externalInstanceMethod(#NSSearchFieldCell, #"searchTextRectForBounds:") = NSRect, NSRect;
overload externalInstanceMethod(#NSSearchFieldCell, #"searchButtonRectForBounds:") = NSRect, NSRect;
overload externalInstanceMethod(#NSSearchFieldCell, #"cancelButtonRectForBounds:") = NSRect, NSRect;
overload externalInstanceMethod(#NSSearchFieldCell, #"setSearchMenuTemplate:") = Void, NSMenu;
overload externalInstanceMethod(#NSSearchFieldCell, #"searchMenuTemplate") = NSMenu;
overload externalInstanceMethod(#NSSearchFieldCell, #"setSendsWholeSearchString:") = Void, Bool;
overload externalInstanceMethod(#NSSearchFieldCell, #"sendsWholeSearchString") = Bool;
overload externalInstanceMethod(#NSSearchFieldCell, #"setMaximumRecents:") = Void, CLong;
overload externalInstanceMethod(#NSSearchFieldCell, #"maximumRecents") = CLong;
overload externalInstanceMethod(#NSSearchFieldCell, #"setRecentSearches:") = Void, NSArray;
overload externalInstanceMethod(#NSSearchFieldCell, #"recentSearches") = NSArray;
overload externalInstanceMethod(#NSSearchFieldCell, #"setRecentsAutosaveName:") = Void, NSString;
overload externalInstanceMethod(#NSSearchFieldCell, #"recentsAutosaveName") = NSString;
overload externalInstanceMethod(#NSSearchFieldCell, #"sendsSearchStringImmediately") = Bool;
overload externalInstanceMethod(#NSSearchFieldCell, #"setSendsSearchStringImmediately:") = Void, Bool;

record NSSecureTextField = externalClass(NSTextField);

record NSSecureTextFieldCell = externalClass(NSTextFieldCell);
overload externalInstanceMethod(#NSSecureTextFieldCell, #"setEchosBullets:") = Void, Bool;
overload externalInstanceMethod(#NSSecureTextFieldCell, #"echosBullets") = Bool;

record NSSegmentedCell = externalClass(NSActionCell);
overload externalInstanceMethod(#NSSegmentedCell, #"setSegmentCount:") = Void, CLong;
overload externalInstanceMethod(#NSSegmentedCell, #"segmentCount") = CLong;
overload externalInstanceMethod(#NSSegmentedCell, #"setSelectedSegment:") = Void, CLong;
overload externalInstanceMethod(#NSSegmentedCell, #"selectedSegment") = CLong;
overload externalInstanceMethod(#NSSegmentedCell, #"selectSegmentWithTag:") = Bool, CLong;
overload externalInstanceMethod(#NSSegmentedCell, #"makeNextSegmentKey") = Void;
overload externalInstanceMethod(#NSSegmentedCell, #"makePreviousSegmentKey") = Void;
overload externalInstanceMethod(#NSSegmentedCell, #"setTrackingMode:") = Void, CULong;
overload externalInstanceMethod(#NSSegmentedCell, #"trackingMode") = CULong;
overload externalInstanceMethod(#NSSegmentedCell, #"setWidth:forSegment:") = Void, Double, CLong;
overload externalInstanceMethod(#NSSegmentedCell, #"widthForSegment:") = Double, CLong;
overload externalInstanceMethod(#NSSegmentedCell, #"setImage:forSegment:") = Void, NSImage, CLong;
overload externalInstanceMethod(#NSSegmentedCell, #"imageForSegment:") = NSImage, CLong;
overload externalInstanceMethod(#NSSegmentedCell, #"setImageScaling:forSegment:") = Void, CULong, CLong;
overload externalInstanceMethod(#NSSegmentedCell, #"imageScalingForSegment:") = CULong, CLong;
overload externalInstanceMethod(#NSSegmentedCell, #"setLabel:forSegment:") = Void, NSString, CLong;
overload externalInstanceMethod(#NSSegmentedCell, #"labelForSegment:") = NSString, CLong;
overload externalInstanceMethod(#NSSegmentedCell, #"setSelected:forSegment:") = Void, Bool, CLong;
overload externalInstanceMethod(#NSSegmentedCell, #"isSelectedForSegment:") = Bool, CLong;
overload externalInstanceMethod(#NSSegmentedCell, #"setEnabled:forSegment:") = Void, Bool, CLong;
overload externalInstanceMethod(#NSSegmentedCell, #"isEnabledForSegment:") = Bool, CLong;
overload externalInstanceMethod(#NSSegmentedCell, #"setMenu:forSegment:") = Void, NSMenu, CLong;
overload externalInstanceMethod(#NSSegmentedCell, #"menuForSegment:") = NSMenu, CLong;
overload externalInstanceMethod(#NSSegmentedCell, #"setToolTip:forSegment:") = Void, NSString, CLong;
overload externalInstanceMethod(#NSSegmentedCell, #"toolTipForSegment:") = NSString, CLong;
overload externalInstanceMethod(#NSSegmentedCell, #"setTag:forSegment:") = Void, CLong, CLong;
overload externalInstanceMethod(#NSSegmentedCell, #"tagForSegment:") = CLong, CLong;
overload externalInstanceMethod(#NSSegmentedCell, #"setSegmentStyle:") = Void, CLong;
overload externalInstanceMethod(#NSSegmentedCell, #"segmentStyle") = CLong;
overload externalInstanceMethod(#NSSegmentedCell, #"drawSegment:inFrame:withView:") = Void, CLong, NSRect, NSView;
overload externalInstanceMethod(#NSSegmentedCell, #"interiorBackgroundStyleForSegment:") = CLong, CLong;

record NSSegmentedControl = externalClass(NSControl);
overload externalInstanceMethod(#NSSegmentedControl, #"setSegmentCount:") = Void, CLong;
overload externalInstanceMethod(#NSSegmentedControl, #"segmentCount") = CLong;
overload externalInstanceMethod(#NSSegmentedControl, #"setSelectedSegment:") = Void, CLong;
overload externalInstanceMethod(#NSSegmentedControl, #"selectedSegment") = CLong;
overload externalInstanceMethod(#NSSegmentedControl, #"selectSegmentWithTag:") = Bool, CLong;
overload externalInstanceMethod(#NSSegmentedControl, #"setWidth:forSegment:") = Void, Double, CLong;
overload externalInstanceMethod(#NSSegmentedControl, #"widthForSegment:") = Double, CLong;
overload externalInstanceMethod(#NSSegmentedControl, #"setImage:forSegment:") = Void, NSImage, CLong;
overload externalInstanceMethod(#NSSegmentedControl, #"imageForSegment:") = NSImage, CLong;
overload externalInstanceMethod(#NSSegmentedControl, #"setImageScaling:forSegment:") = Void, CULong, CLong;
overload externalInstanceMethod(#NSSegmentedControl, #"imageScalingForSegment:") = CULong, CLong;
overload externalInstanceMethod(#NSSegmentedControl, #"setLabel:forSegment:") = Void, NSString, CLong;
overload externalInstanceMethod(#NSSegmentedControl, #"labelForSegment:") = NSString, CLong;
overload externalInstanceMethod(#NSSegmentedControl, #"setMenu:forSegment:") = Void, NSMenu, CLong;
overload externalInstanceMethod(#NSSegmentedControl, #"menuForSegment:") = NSMenu, CLong;
overload externalInstanceMethod(#NSSegmentedControl, #"setSelected:forSegment:") = Void, Bool, CLong;
overload externalInstanceMethod(#NSSegmentedControl, #"isSelectedForSegment:") = Bool, CLong;
overload externalInstanceMethod(#NSSegmentedControl, #"setEnabled:forSegment:") = Void, Bool, CLong;
overload externalInstanceMethod(#NSSegmentedControl, #"isEnabledForSegment:") = Bool, CLong;
overload externalInstanceMethod(#NSSegmentedControl, #"setSegmentStyle:") = Void, CLong;
overload externalInstanceMethod(#NSSegmentedControl, #"segmentStyle") = CLong;

record NSShadow = externalClass(NSObject);
overload externalInstanceMethod(#NSShadow, #"copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#NSShadow, #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSShadow, #"initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#NSShadow, #"init") = Id;
overload externalInstanceMethod(#NSShadow, #"shadowOffset") = NSSize;
overload externalInstanceMethod(#NSShadow, #"setShadowOffset:") = Void, NSSize;
overload externalInstanceMethod(#NSShadow, #"shadowBlurRadius") = Double;
overload externalInstanceMethod(#NSShadow, #"setShadowBlurRadius:") = Void, Double;
overload externalInstanceMethod(#NSShadow, #"shadowColor") = NSColor;
overload externalInstanceMethod(#NSShadow, #"setShadowColor:") = Void, NSColor;
overload externalInstanceMethod(#NSShadow, #"set") = Void;

record NSSlider = externalClass(NSControl);
overload externalInstanceMethod(#NSSlider, #"minValue") = Double;
overload externalInstanceMethod(#NSSlider, #"setMinValue:") = Void, Double;
overload externalInstanceMethod(#NSSlider, #"maxValue") = Double;
overload externalInstanceMethod(#NSSlider, #"setMaxValue:") = Void, Double;
overload externalInstanceMethod(#NSSlider, #"setAltIncrementValue:") = Void, Double;
overload externalInstanceMethod(#NSSlider, #"altIncrementValue") = Double;
overload externalInstanceMethod(#NSSlider, #"setTitleCell:") = Void, NSCell;
overload externalInstanceMethod(#NSSlider, #"titleCell") = Id;
overload externalInstanceMethod(#NSSlider, #"setTitleColor:") = Void, NSColor;
overload externalInstanceMethod(#NSSlider, #"titleColor") = NSColor;
overload externalInstanceMethod(#NSSlider, #"setTitleFont:") = Void, NSFont;
overload externalInstanceMethod(#NSSlider, #"titleFont") = NSFont;
overload externalInstanceMethod(#NSSlider, #"title") = NSString;
overload externalInstanceMethod(#NSSlider, #"setTitle:") = Void, NSString;
overload externalInstanceMethod(#NSSlider, #"setKnobThickness:") = Void, Double;
overload externalInstanceMethod(#NSSlider, #"knobThickness") = Double;
overload externalInstanceMethod(#NSSlider, #"setImage:") = Void, NSImage;
overload externalInstanceMethod(#NSSlider, #"image") = NSImage;
overload externalInstanceMethod(#NSSlider, #"isVertical") = CLong;
overload externalInstanceMethod(#NSSlider, #"acceptsFirstMouse:") = Bool, NSEvent;
overload externalInstanceMethod(#NSSlider, #"setNumberOfTickMarks:") = Void, CLong;
overload externalInstanceMethod(#NSSlider, #"numberOfTickMarks") = CLong;
overload externalInstanceMethod(#NSSlider, #"setTickMarkPosition:") = Void, CULong;
overload externalInstanceMethod(#NSSlider, #"tickMarkPosition") = CULong;
overload externalInstanceMethod(#NSSlider, #"setAllowsTickMarkValuesOnly:") = Void, Bool;
overload externalInstanceMethod(#NSSlider, #"allowsTickMarkValuesOnly") = Bool;
overload externalInstanceMethod(#NSSlider, #"tickMarkValueAtIndex:") = Double, CLong;
overload externalInstanceMethod(#NSSlider, #"rectOfTickMarkAtIndex:") = NSRect, CLong;
overload externalInstanceMethod(#NSSlider, #"indexOfTickMarkAtPoint:") = CLong, NSPoint;
overload externalInstanceMethod(#NSSlider, #"closestTickMarkValueToValue:") = Double, Double;

record NSSliderCell = externalClass(NSActionCell);
overload externalClassMethod(#NSSliderCell, #"prefersTrackingUntilMouseUp") = Bool;
overload externalInstanceMethod(#NSSliderCell, #"minValue") = Double;
overload externalInstanceMethod(#NSSliderCell, #"setMinValue:") = Void, Double;
overload externalInstanceMethod(#NSSliderCell, #"maxValue") = Double;
overload externalInstanceMethod(#NSSliderCell, #"setMaxValue:") = Void, Double;
overload externalInstanceMethod(#NSSliderCell, #"setAltIncrementValue:") = Void, Double;
overload externalInstanceMethod(#NSSliderCell, #"altIncrementValue") = Double;
overload externalInstanceMethod(#NSSliderCell, #"isVertical") = CLong;
overload externalInstanceMethod(#NSSliderCell, #"setTitleColor:") = Void, NSColor;
overload externalInstanceMethod(#NSSliderCell, #"titleColor") = NSColor;
overload externalInstanceMethod(#NSSliderCell, #"setTitleFont:") = Void, NSFont;
overload externalInstanceMethod(#NSSliderCell, #"titleFont") = NSFont;
overload externalInstanceMethod(#NSSliderCell, #"title") = NSString;
overload externalInstanceMethod(#NSSliderCell, #"setTitle:") = Void, NSString;
overload externalInstanceMethod(#NSSliderCell, #"setTitleCell:") = Void, NSCell;
overload externalInstanceMethod(#NSSliderCell, #"titleCell") = Id;
overload externalInstanceMethod(#NSSliderCell, #"setKnobThickness:") = Void, Double;
overload externalInstanceMethod(#NSSliderCell, #"knobThickness") = Double;
overload externalInstanceMethod(#NSSliderCell, #"knobRectFlipped:") = NSRect, Bool;
overload externalInstanceMethod(#NSSliderCell, #"drawKnob:") = Void, NSRect;
overload externalInstanceMethod(#NSSliderCell, #"drawKnob") = Void;
overload externalInstanceMethod(#NSSliderCell, #"drawBarInside:flipped:") = Void, NSRect, Bool;
overload externalInstanceMethod(#NSSliderCell, #"trackRect") = NSRect;
overload externalInstanceMethod(#NSSliderCell, #"setSliderType:") = Void, CULong;
overload externalInstanceMethod(#NSSliderCell, #"sliderType") = CULong;
overload externalInstanceMethod(#NSSliderCell, #"setNumberOfTickMarks:") = Void, CLong;
overload externalInstanceMethod(#NSSliderCell, #"numberOfTickMarks") = CLong;
overload externalInstanceMethod(#NSSliderCell, #"setTickMarkPosition:") = Void, CULong;
overload externalInstanceMethod(#NSSliderCell, #"tickMarkPosition") = CULong;
overload externalInstanceMethod(#NSSliderCell, #"setAllowsTickMarkValuesOnly:") = Void, Bool;
overload externalInstanceMethod(#NSSliderCell, #"allowsTickMarkValuesOnly") = Bool;
overload externalInstanceMethod(#NSSliderCell, #"tickMarkValueAtIndex:") = Double, CLong;
overload externalInstanceMethod(#NSSliderCell, #"rectOfTickMarkAtIndex:") = NSRect, CLong;
overload externalInstanceMethod(#NSSliderCell, #"indexOfTickMarkAtPoint:") = CLong, NSPoint;
overload externalInstanceMethod(#NSSliderCell, #"closestTickMarkValueToValue:") = Double, Double;

record NSSound = externalClass(NSObject);
overload externalInstanceMethod(#NSSound, #"copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#NSSound, #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSSound, #"initWithCoder:") = Id, NSCoder;
overload externalClassMethod(#NSSound, #"readableTypesForPasteboard:") = NSArray, NSPasteboard;
overload externalClassMethod(#NSSound, #"readingOptionsForType:pasteboard:") = CULong, NSString, NSPasteboard;
overload externalInstanceMethod(#NSSound, #"initWithPasteboardPropertyList:ofType:") = Id, Id, NSString;
overload externalInstanceMethod(#NSSound, #"writableTypesForPasteboard:") = NSArray, NSPasteboard;
overload externalInstanceMethod(#NSSound, #"writingOptionsForType:pasteboard:") = CULong, NSString, NSPasteboard;
overload externalInstanceMethod(#NSSound, #"pasteboardPropertyListForType:") = Id, NSString;
overload externalClassMethod(#NSSound, #"soundNamed:") = Id, NSString;
overload externalInstanceMethod(#NSSound, #"initWithContentsOfURL:byReference:") = Id, NSURL, Bool;
overload externalInstanceMethod(#NSSound, #"initWithContentsOfFile:byReference:") = Id, NSString, Bool;
overload externalInstanceMethod(#NSSound, #"initWithData:") = Id, NSData;
overload externalInstanceMethod(#NSSound, #"setName:") = Bool, NSString;
overload externalInstanceMethod(#NSSound, #"name") = NSString;
overload externalClassMethod(#NSSound, #"canInitWithPasteboard:") = Bool, NSPasteboard;
overload externalClassMethod(#NSSound, #"soundUnfilteredTypes") = NSArray;
overload externalInstanceMethod(#NSSound, #"initWithPasteboard:") = Id, NSPasteboard;
overload externalInstanceMethod(#NSSound, #"writeToPasteboard:") = Void, NSPasteboard;
overload externalInstanceMethod(#NSSound, #"play") = Bool;
overload externalInstanceMethod(#NSSound, #"pause") = Bool;
overload externalInstanceMethod(#NSSound, #"resume") = Bool;
overload externalInstanceMethod(#NSSound, #"stop") = Bool;
overload externalInstanceMethod(#NSSound, #"isPlaying") = Bool;
overload externalInstanceMethod(#NSSound, #"delegate") = Id;
overload externalInstanceMethod(#NSSound, #"setDelegate:") = Void, Id;
overload externalInstanceMethod(#NSSound, #"duration") = Double;
overload externalInstanceMethod(#NSSound, #"setVolume:") = Void, Float;
overload externalInstanceMethod(#NSSound, #"volume") = Float;
overload externalInstanceMethod(#NSSound, #"currentTime") = Double;
overload externalInstanceMethod(#NSSound, #"setCurrentTime:") = Void, Double;
overload externalInstanceMethod(#NSSound, #"setLoops:") = Void, Bool;
overload externalInstanceMethod(#NSSound, #"loops") = Bool;
overload externalInstanceMethod(#NSSound, #"setPlaybackDeviceIdentifier:") = Void, NSString;
overload externalInstanceMethod(#NSSound, #"playbackDeviceIdentifier") = NSString;
overload externalInstanceMethod(#NSSound, #"setChannelMapping:") = Void, NSArray;
overload externalInstanceMethod(#NSSound, #"channelMapping") = NSArray;
overload externalClassMethod(#NSSound, #"soundUnfilteredFileTypes") = NSArray;
overload externalClassMethod(#NSSound, #"soundUnfilteredPasteboardTypes") = NSArray;

record NSSpeechRecognizer = externalClass(NSObject);
overload externalInstanceMethod(#NSSpeechRecognizer, #"init") = Id;
overload externalInstanceMethod(#NSSpeechRecognizer, #"startListening") = Void;
overload externalInstanceMethod(#NSSpeechRecognizer, #"stopListening") = Void;
overload externalInstanceMethod(#NSSpeechRecognizer, #"delegate") = Id;
overload externalInstanceMethod(#NSSpeechRecognizer, #"setDelegate:") = Void, Id;
overload externalInstanceMethod(#NSSpeechRecognizer, #"commands") = NSArray;
overload externalInstanceMethod(#NSSpeechRecognizer, #"setCommands:") = Void, NSArray;
overload externalInstanceMethod(#NSSpeechRecognizer, #"displayedCommandsTitle") = NSString;
overload externalInstanceMethod(#NSSpeechRecognizer, #"setDisplayedCommandsTitle:") = Void, NSString;
overload externalInstanceMethod(#NSSpeechRecognizer, #"listensInForegroundOnly") = Bool;
overload externalInstanceMethod(#NSSpeechRecognizer, #"setListensInForegroundOnly:") = Void, Bool;
overload externalInstanceMethod(#NSSpeechRecognizer, #"blocksOtherRecognizers") = Bool;
overload externalInstanceMethod(#NSSpeechRecognizer, #"setBlocksOtherRecognizers:") = Void, Bool;

record NSSpeechSynthesizer = externalClass(NSObject);
overload externalInstanceMethod(#NSSpeechSynthesizer, #"initWithVoice:") = Id, NSString;
overload externalInstanceMethod(#NSSpeechSynthesizer, #"startSpeakingString:") = Bool, NSString;
overload externalInstanceMethod(#NSSpeechSynthesizer, #"startSpeakingString:toURL:") = Bool, NSString, NSURL;
overload externalInstanceMethod(#NSSpeechSynthesizer, #"isSpeaking") = Bool;
overload externalInstanceMethod(#NSSpeechSynthesizer, #"stopSpeaking") = Void;
overload externalInstanceMethod(#NSSpeechSynthesizer, #"stopSpeakingAtBoundary:") = Void, CULong;
overload externalInstanceMethod(#NSSpeechSynthesizer, #"pauseSpeakingAtBoundary:") = Void, CULong;
overload externalInstanceMethod(#NSSpeechSynthesizer, #"continueSpeaking") = Void;
overload externalInstanceMethod(#NSSpeechSynthesizer, #"delegate") = Id;
overload externalInstanceMethod(#NSSpeechSynthesizer, #"setDelegate:") = Void, Id;
overload externalInstanceMethod(#NSSpeechSynthesizer, #"voice") = NSString;
overload externalInstanceMethod(#NSSpeechSynthesizer, #"setVoice:") = Bool, NSString;
overload externalInstanceMethod(#NSSpeechSynthesizer, #"rate") = Float;
overload externalInstanceMethod(#NSSpeechSynthesizer, #"setRate:") = Void, Float;
overload externalInstanceMethod(#NSSpeechSynthesizer, #"volume") = Float;
overload externalInstanceMethod(#NSSpeechSynthesizer, #"setVolume:") = Void, Float;
overload externalInstanceMethod(#NSSpeechSynthesizer, #"usesFeedbackWindow") = Bool;
overload externalInstanceMethod(#NSSpeechSynthesizer, #"setUsesFeedbackWindow:") = Void, Bool;
overload externalInstanceMethod(#NSSpeechSynthesizer, #"addSpeechDictionary:") = Void, NSDictionary;
overload externalInstanceMethod(#NSSpeechSynthesizer, #"phonemesFromText:") = NSString, NSString;
overload externalInstanceMethod(#NSSpeechSynthesizer, #"objectForProperty:error:") = Id, NSString, Pointer[NSError];
overload externalInstanceMethod(#NSSpeechSynthesizer, #"setObject:forProperty:error:") = Bool, Id, NSString, Pointer[NSError];
overload externalClassMethod(#NSSpeechSynthesizer, #"isAnyApplicationSpeaking") = Bool;
overload externalClassMethod(#NSSpeechSynthesizer, #"defaultVoice") = NSString;
overload externalClassMethod(#NSSpeechSynthesizer, #"availableVoices") = NSArray;
overload externalClassMethod(#NSSpeechSynthesizer, #"attributesForVoice:") = NSDictionary, NSString;

record NSSpellChecker = externalClass(NSObject);
overload externalClassMethod(#NSSpellChecker, #"sharedSpellChecker") = NSSpellChecker;
overload externalClassMethod(#NSSpellChecker, #"sharedSpellCheckerExists") = Bool;
overload externalClassMethod(#NSSpellChecker, #"uniqueSpellDocumentTag") = CLong;
overload externalInstanceMethod(#NSSpellChecker, #"checkSpellingOfString:startingAt:language:wrap:inSpellDocumentWithTag:wordCount:") = NSRange, NSString, CLong, NSString, Bool, CLong, Pointer[CLong];
overload externalInstanceMethod(#NSSpellChecker, #"checkSpellingOfString:startingAt:") = NSRange, NSString, CLong;
overload externalInstanceMethod(#NSSpellChecker, #"countWordsInString:language:") = CLong, NSString, NSString;
overload externalInstanceMethod(#NSSpellChecker, #"checkGrammarOfString:startingAt:language:wrap:inSpellDocumentWithTag:details:") = NSRange, NSString, CLong, NSString, Bool, CLong, Pointer[NSArray];
overload externalInstanceMethod(#NSSpellChecker, #"checkString:range:types:options:inSpellDocumentWithTag:orthography:wordCount:") = NSArray, NSString, NSRange, UInt64, NSDictionary, CLong, Pointer[NSOrthography], Pointer[CLong];
overload externalInstanceMethod(#NSSpellChecker, #"requestCheckingOfString:range:types:options:inSpellDocumentWithTag:completionHandler:") = CLong, NSString, NSRange, UInt64, NSDictionary, CLong, UnknownType;
overload externalInstanceMethod(#NSSpellChecker, #"menuForResult:string:options:atLocation:inView:") = NSMenu, NSTextCheckingResult, NSString, NSDictionary, NSPoint, NSView;
overload externalInstanceMethod(#NSSpellChecker, #"userQuotesArrayForLanguage:") = NSArray, NSString;
overload externalInstanceMethod(#NSSpellChecker, #"userReplacementsDictionary") = NSDictionary;
overload externalInstanceMethod(#NSSpellChecker, #"updateSpellingPanelWithMisspelledWord:") = Void, NSString;
overload externalInstanceMethod(#NSSpellChecker, #"updateSpellingPanelWithGrammarString:detail:") = Void, NSString, NSDictionary;
overload externalInstanceMethod(#NSSpellChecker, #"spellingPanel") = NSPanel;
overload externalInstanceMethod(#NSSpellChecker, #"accessoryView") = NSView;
overload externalInstanceMethod(#NSSpellChecker, #"setAccessoryView:") = Void, NSView;
overload externalInstanceMethod(#NSSpellChecker, #"substitutionsPanel") = NSPanel;
overload externalInstanceMethod(#NSSpellChecker, #"substitutionsPanelAccessoryViewController") = NSViewController;
overload externalInstanceMethod(#NSSpellChecker, #"setSubstitutionsPanelAccessoryViewController:") = Void, NSViewController;
overload externalInstanceMethod(#NSSpellChecker, #"updatePanels") = Void;
overload externalInstanceMethod(#NSSpellChecker, #"ignoreWord:inSpellDocumentWithTag:") = Void, NSString, CLong;
overload externalInstanceMethod(#NSSpellChecker, #"ignoredWordsInSpellDocumentWithTag:") = NSArray, CLong;
overload externalInstanceMethod(#NSSpellChecker, #"setIgnoredWords:inSpellDocumentWithTag:") = Void, NSArray, CLong;
overload externalInstanceMethod(#NSSpellChecker, #"guessesForWordRange:inString:language:inSpellDocumentWithTag:") = NSArray, NSRange, NSString, NSString, CLong;
overload externalInstanceMethod(#NSSpellChecker, #"completionsForPartialWordRange:inString:language:inSpellDocumentWithTag:") = NSArray, NSRange, NSString, NSString, CLong;
overload externalInstanceMethod(#NSSpellChecker, #"closeSpellDocumentWithTag:") = Void, CLong;
overload externalInstanceMethod(#NSSpellChecker, #"availableLanguages") = NSArray;
overload externalInstanceMethod(#NSSpellChecker, #"userPreferredLanguages") = NSArray;
overload externalInstanceMethod(#NSSpellChecker, #"automaticallyIdentifiesLanguages") = Bool;
overload externalInstanceMethod(#NSSpellChecker, #"setAutomaticallyIdentifiesLanguages:") = Void, Bool;
overload externalInstanceMethod(#NSSpellChecker, #"language") = NSString;
overload externalInstanceMethod(#NSSpellChecker, #"setLanguage:") = Bool, NSString;
overload externalInstanceMethod(#NSSpellChecker, #"setWordFieldStringValue:") = Void, NSString;
overload externalInstanceMethod(#NSSpellChecker, #"learnWord:") = Void, NSString;
overload externalInstanceMethod(#NSSpellChecker, #"hasLearnedWord:") = Bool, NSString;
overload externalInstanceMethod(#NSSpellChecker, #"unlearnWord:") = Void, NSString;
overload externalInstanceMethod(#NSSpellChecker, #"guessesForWord:") = NSArray, NSString;
overload externalInstanceMethod(#NSSpellChecker, #"forgetWord:") = Void, NSString;

record NSSplitView = externalClass(NSView);
overload externalInstanceMethod(#NSSplitView, #"setVertical:") = Void, Bool;
overload externalInstanceMethod(#NSSplitView, #"isVertical") = Bool;
overload externalInstanceMethod(#NSSplitView, #"setDividerStyle:") = Void, CLong;
overload externalInstanceMethod(#NSSplitView, #"dividerStyle") = CLong;
overload externalInstanceMethod(#NSSplitView, #"setAutosaveName:") = Void, NSString;
overload externalInstanceMethod(#NSSplitView, #"autosaveName") = NSString;
overload externalInstanceMethod(#NSSplitView, #"setDelegate:") = Void, Id;
overload externalInstanceMethod(#NSSplitView, #"delegate") = Id;
overload externalInstanceMethod(#NSSplitView, #"drawDividerInRect:") = Void, NSRect;
overload externalInstanceMethod(#NSSplitView, #"dividerColor") = NSColor;
overload externalInstanceMethod(#NSSplitView, #"dividerThickness") = Double;
overload externalInstanceMethod(#NSSplitView, #"adjustSubviews") = Void;
overload externalInstanceMethod(#NSSplitView, #"isSubviewCollapsed:") = Bool, NSView;
overload externalInstanceMethod(#NSSplitView, #"minPossiblePositionOfDividerAtIndex:") = Double, CLong;
overload externalInstanceMethod(#NSSplitView, #"maxPossiblePositionOfDividerAtIndex:") = Double, CLong;
overload externalInstanceMethod(#NSSplitView, #"setPosition:ofDividerAtIndex:") = Void, Double, CLong;
overload externalInstanceMethod(#NSSplitView, #"setIsPaneSplitter:") = Void, Bool;
overload externalInstanceMethod(#NSSplitView, #"isPaneSplitter") = Bool;

record NSStatusBar = externalClass(NSObject);
overload externalClassMethod(#NSStatusBar, #"systemStatusBar") = NSStatusBar;
overload externalInstanceMethod(#NSStatusBar, #"statusItemWithLength:") = NSStatusItem, Double;
overload externalInstanceMethod(#NSStatusBar, #"removeStatusItem:") = Void, NSStatusItem;
overload externalInstanceMethod(#NSStatusBar, #"isVertical") = Bool;
overload externalInstanceMethod(#NSStatusBar, #"thickness") = Double;

record NSStatusItem = externalClass(NSObject);
overload externalInstanceMethod(#NSStatusItem, #"statusBar") = NSStatusBar;
overload externalInstanceMethod(#NSStatusItem, #"length") = Double;
overload externalInstanceMethod(#NSStatusItem, #"setLength:") = Void, Double;
overload externalInstanceMethod(#NSStatusItem, #"action") = SelectorHandle;
overload externalInstanceMethod(#NSStatusItem, #"setAction:") = Void, SelectorHandle;
overload externalInstanceMethod(#NSStatusItem, #"doubleAction") = SelectorHandle;
overload externalInstanceMethod(#NSStatusItem, #"setDoubleAction:") = Void, SelectorHandle;
overload externalInstanceMethod(#NSStatusItem, #"target") = Id;
overload externalInstanceMethod(#NSStatusItem, #"setTarget:") = Void, Id;
overload externalInstanceMethod(#NSStatusItem, #"title") = NSString;
overload externalInstanceMethod(#NSStatusItem, #"setTitle:") = Void, NSString;
overload externalInstanceMethod(#NSStatusItem, #"attributedTitle") = NSAttributedString;
overload externalInstanceMethod(#NSStatusItem, #"setAttributedTitle:") = Void, NSAttributedString;
overload externalInstanceMethod(#NSStatusItem, #"image") = NSImage;
overload externalInstanceMethod(#NSStatusItem, #"setImage:") = Void, NSImage;
overload externalInstanceMethod(#NSStatusItem, #"alternateImage") = NSImage;
overload externalInstanceMethod(#NSStatusItem, #"setAlternateImage:") = Void, NSImage;
overload externalInstanceMethod(#NSStatusItem, #"menu") = NSMenu;
overload externalInstanceMethod(#NSStatusItem, #"setMenu:") = Void, NSMenu;
overload externalInstanceMethod(#NSStatusItem, #"isEnabled") = Bool;
overload externalInstanceMethod(#NSStatusItem, #"setEnabled:") = Void, Bool;
overload externalInstanceMethod(#NSStatusItem, #"toolTip") = NSString;
overload externalInstanceMethod(#NSStatusItem, #"setToolTip:") = Void, NSString;
overload externalInstanceMethod(#NSStatusItem, #"setHighlightMode:") = Void, Bool;
overload externalInstanceMethod(#NSStatusItem, #"highlightMode") = Bool;
overload externalInstanceMethod(#NSStatusItem, #"sendActionOn:") = CLong, CLong;
overload externalInstanceMethod(#NSStatusItem, #"popUpStatusItemMenu:") = Void, NSMenu;
overload externalInstanceMethod(#NSStatusItem, #"drawStatusBarBackgroundInRect:withHighlight:") = Void, NSRect, Bool;
overload externalInstanceMethod(#NSStatusItem, #"view") = NSView;
overload externalInstanceMethod(#NSStatusItem, #"setView:") = Void, NSView;

record NSStepper = externalClass(NSControl);
overload externalInstanceMethod(#NSStepper, #"minValue") = Double;
overload externalInstanceMethod(#NSStepper, #"setMinValue:") = Void, Double;
overload externalInstanceMethod(#NSStepper, #"maxValue") = Double;
overload externalInstanceMethod(#NSStepper, #"setMaxValue:") = Void, Double;
overload externalInstanceMethod(#NSStepper, #"increment") = Double;
overload externalInstanceMethod(#NSStepper, #"setIncrement:") = Void, Double;
overload externalInstanceMethod(#NSStepper, #"valueWraps") = Bool;
overload externalInstanceMethod(#NSStepper, #"setValueWraps:") = Void, Bool;
overload externalInstanceMethod(#NSStepper, #"autorepeat") = Bool;
overload externalInstanceMethod(#NSStepper, #"setAutorepeat:") = Void, Bool;

record NSStepperCell = externalClass(NSActionCell);
overload externalInstanceMethod(#NSStepperCell, #"minValue") = Double;
overload externalInstanceMethod(#NSStepperCell, #"setMinValue:") = Void, Double;
overload externalInstanceMethod(#NSStepperCell, #"maxValue") = Double;
overload externalInstanceMethod(#NSStepperCell, #"setMaxValue:") = Void, Double;
overload externalInstanceMethod(#NSStepperCell, #"increment") = Double;
overload externalInstanceMethod(#NSStepperCell, #"setIncrement:") = Void, Double;
overload externalInstanceMethod(#NSStepperCell, #"valueWraps") = Bool;
overload externalInstanceMethod(#NSStepperCell, #"setValueWraps:") = Void, Bool;
overload externalInstanceMethod(#NSStepperCell, #"autorepeat") = Bool;
overload externalInstanceMethod(#NSStepperCell, #"setAutorepeat:") = Void, Bool;

overload externalInstanceMethod(#NSString, #"sizeWithAttributes:") = NSSize, NSDictionary;
overload externalInstanceMethod(#NSString, #"drawAtPoint:withAttributes:") = Void, NSPoint, NSDictionary;
overload externalInstanceMethod(#NSString, #"drawInRect:withAttributes:") = Void, NSRect, NSDictionary;
overload externalInstanceMethod(#NSString, #"drawWithRect:options:attributes:") = Void, NSRect, CLong, NSDictionary;
overload externalInstanceMethod(#NSString, #"boundingRectWithSize:options:attributes:") = NSRect, NSSize, CLong, NSDictionary;

record NSTabView = externalClass(NSView);
overload externalInstanceMethod(#NSTabView, #"selectTabViewItem:") = Void, NSTabViewItem;
overload externalInstanceMethod(#NSTabView, #"selectTabViewItemAtIndex:") = Void, CLong;
overload externalInstanceMethod(#NSTabView, #"selectTabViewItemWithIdentifier:") = Void, Id;
overload externalInstanceMethod(#NSTabView, #"takeSelectedTabViewItemFromSender:") = Void, Id;
overload externalInstanceMethod(#NSTabView, #"selectFirstTabViewItem:") = Void, Id;
overload externalInstanceMethod(#NSTabView, #"selectLastTabViewItem:") = Void, Id;
overload externalInstanceMethod(#NSTabView, #"selectNextTabViewItem:") = Void, Id;
overload externalInstanceMethod(#NSTabView, #"selectPreviousTabViewItem:") = Void, Id;
overload externalInstanceMethod(#NSTabView, #"selectedTabViewItem") = NSTabViewItem;
overload externalInstanceMethod(#NSTabView, #"font") = NSFont;
overload externalInstanceMethod(#NSTabView, #"tabViewType") = CULong;
overload externalInstanceMethod(#NSTabView, #"tabViewItems") = NSArray;
overload externalInstanceMethod(#NSTabView, #"allowsTruncatedLabels") = Bool;
overload externalInstanceMethod(#NSTabView, #"minimumSize") = NSSize;
overload externalInstanceMethod(#NSTabView, #"drawsBackground") = Bool;
overload externalInstanceMethod(#NSTabView, #"controlTint") = CULong;
overload externalInstanceMethod(#NSTabView, #"controlSize") = CULong;
overload externalInstanceMethod(#NSTabView, #"setFont:") = Void, NSFont;
overload externalInstanceMethod(#NSTabView, #"setTabViewType:") = Void, CULong;
overload externalInstanceMethod(#NSTabView, #"setAllowsTruncatedLabels:") = Void, Bool;
overload externalInstanceMethod(#NSTabView, #"setDrawsBackground:") = Void, Bool;
overload externalInstanceMethod(#NSTabView, #"setControlTint:") = Void, CULong;
overload externalInstanceMethod(#NSTabView, #"setControlSize:") = Void, CULong;
overload externalInstanceMethod(#NSTabView, #"addTabViewItem:") = Void, NSTabViewItem;
overload externalInstanceMethod(#NSTabView, #"insertTabViewItem:atIndex:") = Void, NSTabViewItem, CLong;
overload externalInstanceMethod(#NSTabView, #"removeTabViewItem:") = Void, NSTabViewItem;
overload externalInstanceMethod(#NSTabView, #"setDelegate:") = Void, Id;
overload externalInstanceMethod(#NSTabView, #"delegate") = Id;
overload externalInstanceMethod(#NSTabView, #"tabViewItemAtPoint:") = NSTabViewItem, NSPoint;
overload externalInstanceMethod(#NSTabView, #"contentRect") = NSRect;
overload externalInstanceMethod(#NSTabView, #"numberOfTabViewItems") = CLong;
overload externalInstanceMethod(#NSTabView, #"indexOfTabViewItem:") = CLong, NSTabViewItem;
overload externalInstanceMethod(#NSTabView, #"tabViewItemAtIndex:") = NSTabViewItem, CLong;
overload externalInstanceMethod(#NSTabView, #"indexOfTabViewItemWithIdentifier:") = CLong, Id;

record NSTabViewItem = externalClass(NSObject);
overload externalInstanceMethod(#NSTabViewItem, #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSTabViewItem, #"initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#NSTabViewItem, #"initWithIdentifier:") = Id, Id;
overload externalInstanceMethod(#NSTabViewItem, #"identifier") = Id;
overload externalInstanceMethod(#NSTabViewItem, #"view") = Id;
overload externalInstanceMethod(#NSTabViewItem, #"initialFirstResponder") = Id;
overload externalInstanceMethod(#NSTabViewItem, #"label") = NSString;
overload externalInstanceMethod(#NSTabViewItem, #"color") = NSColor;
overload externalInstanceMethod(#NSTabViewItem, #"tabState") = CULong;
overload externalInstanceMethod(#NSTabViewItem, #"tabView") = NSTabView;
overload externalInstanceMethod(#NSTabViewItem, #"setIdentifier:") = Void, Id;
overload externalInstanceMethod(#NSTabViewItem, #"setLabel:") = Void, NSString;
overload externalInstanceMethod(#NSTabViewItem, #"setColor:") = Void, NSColor;
overload externalInstanceMethod(#NSTabViewItem, #"setView:") = Void, NSView;
overload externalInstanceMethod(#NSTabViewItem, #"setInitialFirstResponder:") = Void, NSView;
overload externalInstanceMethod(#NSTabViewItem, #"toolTip") = NSString;
overload externalInstanceMethod(#NSTabViewItem, #"setToolTip:") = Void, NSString;
overload externalInstanceMethod(#NSTabViewItem, #"drawLabel:inRect:") = Void, Bool, NSRect;
overload externalInstanceMethod(#NSTabViewItem, #"sizeOfLabel:") = NSSize, Bool;

record NSTableColumn = externalClass(NSObject);
overload externalInstanceMethod(#NSTableColumn, #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSTableColumn, #"initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#NSTableColumn, #"initWithIdentifier:") = Id, Id;
overload externalInstanceMethod(#NSTableColumn, #"setIdentifier:") = Void, Id;
overload externalInstanceMethod(#NSTableColumn, #"identifier") = Id;
overload externalInstanceMethod(#NSTableColumn, #"setTableView:") = Void, NSTableView;
overload externalInstanceMethod(#NSTableColumn, #"tableView") = NSTableView;
overload externalInstanceMethod(#NSTableColumn, #"setWidth:") = Void, Double;
overload externalInstanceMethod(#NSTableColumn, #"width") = Double;
overload externalInstanceMethod(#NSTableColumn, #"setMinWidth:") = Void, Double;
overload externalInstanceMethod(#NSTableColumn, #"minWidth") = Double;
overload externalInstanceMethod(#NSTableColumn, #"setMaxWidth:") = Void, Double;
overload externalInstanceMethod(#NSTableColumn, #"maxWidth") = Double;
overload externalInstanceMethod(#NSTableColumn, #"setHeaderCell:") = Void, NSCell;
overload externalInstanceMethod(#NSTableColumn, #"headerCell") = Id;
overload externalInstanceMethod(#NSTableColumn, #"setDataCell:") = Void, NSCell;
overload externalInstanceMethod(#NSTableColumn, #"dataCell") = Id;
overload externalInstanceMethod(#NSTableColumn, #"dataCellForRow:") = Id, CLong;
overload externalInstanceMethod(#NSTableColumn, #"setEditable:") = Void, Bool;
overload externalInstanceMethod(#NSTableColumn, #"isEditable") = Bool;
overload externalInstanceMethod(#NSTableColumn, #"sizeToFit") = Void;
overload externalInstanceMethod(#NSTableColumn, #"setSortDescriptorPrototype:") = Void, NSSortDescriptor;
overload externalInstanceMethod(#NSTableColumn, #"sortDescriptorPrototype") = NSSortDescriptor;
overload externalInstanceMethod(#NSTableColumn, #"setResizingMask:") = Void, CULong;
overload externalInstanceMethod(#NSTableColumn, #"resizingMask") = CULong;
overload externalInstanceMethod(#NSTableColumn, #"setHeaderToolTip:") = Void, NSString;
overload externalInstanceMethod(#NSTableColumn, #"headerToolTip") = NSString;
overload externalInstanceMethod(#NSTableColumn, #"isHidden") = Bool;
overload externalInstanceMethod(#NSTableColumn, #"setHidden:") = Void, Bool;
overload externalInstanceMethod(#NSTableColumn, #"setResizable:") = Void, Bool;
overload externalInstanceMethod(#NSTableColumn, #"isResizable") = Bool;

record NSTableHeaderCell = externalClass(NSTextFieldCell);
overload externalInstanceMethod(#NSTableHeaderCell, #"drawSortIndicatorWithFrame:inView:ascending:priority:") = Void, NSRect, NSView, Bool, CLong;
overload externalInstanceMethod(#NSTableHeaderCell, #"sortIndicatorRectForBounds:") = NSRect, NSRect;

record NSTableHeaderView = externalClass(NSView);
overload externalInstanceMethod(#NSTableHeaderView, #"setTableView:") = Void, NSTableView;
overload externalInstanceMethod(#NSTableHeaderView, #"tableView") = NSTableView;
overload externalInstanceMethod(#NSTableHeaderView, #"draggedColumn") = CLong;
overload externalInstanceMethod(#NSTableHeaderView, #"draggedDistance") = Double;
overload externalInstanceMethod(#NSTableHeaderView, #"resizedColumn") = CLong;
overload externalInstanceMethod(#NSTableHeaderView, #"headerRectOfColumn:") = NSRect, CLong;
overload externalInstanceMethod(#NSTableHeaderView, #"columnAtPoint:") = CLong, NSPoint;

record NSTableView = externalClass(NSControl);
overload externalInstanceMethod(#NSTableView, #"validateUserInterfaceItem:") = Bool, Id;
overload externalInstanceMethod(#NSTableView, #"textView:clickedOnLink:atIndex:") = Bool, NSTextView, Id, CULong;
overload externalInstanceMethod(#NSTableView, #"textView:clickedOnCell:inRect:atIndex:") = Void, NSTextView, Id, NSRect, CULong;
overload externalInstanceMethod(#NSTableView, #"textView:doubleClickedOnCell:inRect:atIndex:") = Void, NSTextView, Id, NSRect, CULong;
overload externalInstanceMethod(#NSTableView, #"textView:draggedCell:inRect:event:atIndex:") = Void, NSTextView, Id, NSRect, NSEvent, CULong;
overload externalInstanceMethod(#NSTableView, #"textView:writablePasteboardTypesForCell:atIndex:") = NSArray, NSTextView, Id, CULong;
overload externalInstanceMethod(#NSTableView, #"textView:writeCell:atIndex:toPasteboard:type:") = Bool, NSTextView, Id, CULong, NSPasteboard, NSString;
overload externalInstanceMethod(#NSTableView, #"textView:willChangeSelectionFromCharacterRange:toCharacterRange:") = NSRange, NSTextView, NSRange, NSRange;
overload externalInstanceMethod(#NSTableView, #"textView:willChangeSelectionFromCharacterRanges:toCharacterRanges:") = NSArray, NSTextView, NSArray, NSArray;
overload externalInstanceMethod(#NSTableView, #"textView:shouldChangeTextInRanges:replacementStrings:") = Bool, NSTextView, NSArray, NSArray;
overload externalInstanceMethod(#NSTableView, #"textView:shouldChangeTypingAttributes:toAttributes:") = NSDictionary, NSTextView, NSDictionary, NSDictionary;
overload externalInstanceMethod(#NSTableView, #"textViewDidChangeSelection:") = Void, NSNotification;
overload externalInstanceMethod(#NSTableView, #"textViewDidChangeTypingAttributes:") = Void, NSNotification;
overload externalInstanceMethod(#NSTableView, #"textView:willDisplayToolTip:forCharacterAtIndex:") = NSString, NSTextView, NSString, CULong;
overload externalInstanceMethod(#NSTableView, #"textView:completions:forPartialWordRange:indexOfSelectedItem:") = NSArray, NSTextView, NSArray, NSRange, Pointer[CLong];
overload externalInstanceMethod(#NSTableView, #"textView:shouldChangeTextInRange:replacementString:") = Bool, NSTextView, NSRange, NSString;
overload externalInstanceMethod(#NSTableView, #"textView:doCommandBySelector:") = Bool, NSTextView, SelectorHandle;
overload externalInstanceMethod(#NSTableView, #"textView:shouldSetSpellingState:range:") = CLong, NSTextView, CLong, NSRange;
overload externalInstanceMethod(#NSTableView, #"textView:menu:forEvent:atIndex:") = NSMenu, NSTextView, NSMenu, NSEvent, CULong;
overload externalInstanceMethod(#NSTableView, #"textView:willCheckTextInRange:options:types:") = NSDictionary, NSTextView, NSRange, NSDictionary, Pointer[UInt64];
overload externalInstanceMethod(#NSTableView, #"textView:didCheckTextInRange:types:options:results:orthography:wordCount:") = NSArray, NSTextView, NSRange, UInt64, NSDictionary, NSArray, NSOrthography, CLong;
overload externalInstanceMethod(#NSTableView, #"textView:clickedOnLink:") = Bool, NSTextView, Id;
overload externalInstanceMethod(#NSTableView, #"textView:clickedOnCell:inRect:") = Void, NSTextView, Id, NSRect;
overload externalInstanceMethod(#NSTableView, #"textView:doubleClickedOnCell:inRect:") = Void, NSTextView, Id, NSRect;
overload externalInstanceMethod(#NSTableView, #"textView:draggedCell:inRect:event:") = Void, NSTextView, Id, NSRect, NSEvent;
overload externalInstanceMethod(#NSTableView, #"undoManagerForTextView:") = NSUndoManager, NSTextView;
overload externalInstanceMethod(#NSTableView, #"setDataSource:") = Void, Id;
overload externalInstanceMethod(#NSTableView, #"dataSource") = Id;
overload externalInstanceMethod(#NSTableView, #"setDelegate:") = Void, Id;
overload externalInstanceMethod(#NSTableView, #"delegate") = Id;
overload externalInstanceMethod(#NSTableView, #"setHeaderView:") = Void, NSTableHeaderView;
overload externalInstanceMethod(#NSTableView, #"headerView") = NSTableHeaderView;
overload externalInstanceMethod(#NSTableView, #"setCornerView:") = Void, NSView;
overload externalInstanceMethod(#NSTableView, #"cornerView") = NSView;
overload externalInstanceMethod(#NSTableView, #"setAllowsColumnReordering:") = Void, Bool;
overload externalInstanceMethod(#NSTableView, #"allowsColumnReordering") = Bool;
overload externalInstanceMethod(#NSTableView, #"setAllowsColumnResizing:") = Void, Bool;
overload externalInstanceMethod(#NSTableView, #"allowsColumnResizing") = Bool;
overload externalInstanceMethod(#NSTableView, #"setColumnAutoresizingStyle:") = Void, CULong;
overload externalInstanceMethod(#NSTableView, #"columnAutoresizingStyle") = CULong;
overload externalInstanceMethod(#NSTableView, #"setGridStyleMask:") = Void, CULong;
overload externalInstanceMethod(#NSTableView, #"gridStyleMask") = CULong;
overload externalInstanceMethod(#NSTableView, #"setIntercellSpacing:") = Void, NSSize;
overload externalInstanceMethod(#NSTableView, #"intercellSpacing") = NSSize;
overload externalInstanceMethod(#NSTableView, #"setUsesAlternatingRowBackgroundColors:") = Void, Bool;
overload externalInstanceMethod(#NSTableView, #"usesAlternatingRowBackgroundColors") = Bool;
overload externalInstanceMethod(#NSTableView, #"setBackgroundColor:") = Void, NSColor;
overload externalInstanceMethod(#NSTableView, #"backgroundColor") = NSColor;
overload externalInstanceMethod(#NSTableView, #"setGridColor:") = Void, NSColor;
overload externalInstanceMethod(#NSTableView, #"gridColor") = NSColor;
overload externalInstanceMethod(#NSTableView, #"setRowHeight:") = Void, Double;
overload externalInstanceMethod(#NSTableView, #"rowHeight") = Double;
overload externalInstanceMethod(#NSTableView, #"noteHeightOfRowsWithIndexesChanged:") = Void, NSIndexSet;
overload externalInstanceMethod(#NSTableView, #"tableColumns") = NSArray;
overload externalInstanceMethod(#NSTableView, #"numberOfColumns") = CLong;
overload externalInstanceMethod(#NSTableView, #"numberOfRows") = CLong;
overload externalInstanceMethod(#NSTableView, #"addTableColumn:") = Void, NSTableColumn;
overload externalInstanceMethod(#NSTableView, #"removeTableColumn:") = Void, NSTableColumn;
overload externalInstanceMethod(#NSTableView, #"moveColumn:toColumn:") = Void, CLong, CLong;
overload externalInstanceMethod(#NSTableView, #"columnWithIdentifier:") = CLong, Id;
overload externalInstanceMethod(#NSTableView, #"tableColumnWithIdentifier:") = NSTableColumn, Id;
overload externalInstanceMethod(#NSTableView, #"tile") = Void;
overload externalInstanceMethod(#NSTableView, #"sizeToFit") = Void;
overload externalInstanceMethod(#NSTableView, #"sizeLastColumnToFit") = Void;
overload externalInstanceMethod(#NSTableView, #"scrollRowToVisible:") = Void, CLong;
overload externalInstanceMethod(#NSTableView, #"scrollColumnToVisible:") = Void, CLong;
overload externalInstanceMethod(#NSTableView, #"reloadData") = Void;
overload externalInstanceMethod(#NSTableView, #"noteNumberOfRowsChanged") = Void;
overload externalInstanceMethod(#NSTableView, #"reloadDataForRowIndexes:columnIndexes:") = Void, NSIndexSet, NSIndexSet;
overload externalInstanceMethod(#NSTableView, #"editedColumn") = CLong;
overload externalInstanceMethod(#NSTableView, #"editedRow") = CLong;
overload externalInstanceMethod(#NSTableView, #"clickedColumn") = CLong;
overload externalInstanceMethod(#NSTableView, #"clickedRow") = CLong;
overload externalInstanceMethod(#NSTableView, #"setDoubleAction:") = Void, SelectorHandle;
overload externalInstanceMethod(#NSTableView, #"doubleAction") = SelectorHandle;
overload externalInstanceMethod(#NSTableView, #"setSortDescriptors:") = Void, NSArray;
overload externalInstanceMethod(#NSTableView, #"sortDescriptors") = NSArray;
overload externalInstanceMethod(#NSTableView, #"setIndicatorImage:inTableColumn:") = Void, NSImage, NSTableColumn;
overload externalInstanceMethod(#NSTableView, #"indicatorImageInTableColumn:") = NSImage, NSTableColumn;
overload externalInstanceMethod(#NSTableView, #"setHighlightedTableColumn:") = Void, NSTableColumn;
overload externalInstanceMethod(#NSTableView, #"highlightedTableColumn") = NSTableColumn;
overload externalInstanceMethod(#NSTableView, #"setVerticalMotionCanBeginDrag:") = Void, Bool;
overload externalInstanceMethod(#NSTableView, #"verticalMotionCanBeginDrag") = Bool;
overload externalInstanceMethod(#NSTableView, #"canDragRowsWithIndexes:atPoint:") = Bool, NSIndexSet, NSPoint;
overload externalInstanceMethod(#NSTableView, #"dragImageForRowsWithIndexes:tableColumns:event:offset:") = NSImage, NSIndexSet, NSArray, NSEvent, NSPointPointer;
overload externalInstanceMethod(#NSTableView, #"setDraggingSourceOperationMask:forLocal:") = Void, CULong, Bool;
overload externalInstanceMethod(#NSTableView, #"setDropRow:dropOperation:") = Void, CLong, CULong;
overload externalInstanceMethod(#NSTableView, #"setAllowsMultipleSelection:") = Void, Bool;
overload externalInstanceMethod(#NSTableView, #"allowsMultipleSelection") = Bool;
overload externalInstanceMethod(#NSTableView, #"setAllowsEmptySelection:") = Void, Bool;
overload externalInstanceMethod(#NSTableView, #"allowsEmptySelection") = Bool;
overload externalInstanceMethod(#NSTableView, #"setAllowsColumnSelection:") = Void, Bool;
overload externalInstanceMethod(#NSTableView, #"allowsColumnSelection") = Bool;
overload externalInstanceMethod(#NSTableView, #"selectAll:") = Void, Id;
overload externalInstanceMethod(#NSTableView, #"deselectAll:") = Void, Id;
overload externalInstanceMethod(#NSTableView, #"selectColumnIndexes:byExtendingSelection:") = Void, NSIndexSet, Bool;
overload externalInstanceMethod(#NSTableView, #"selectRowIndexes:byExtendingSelection:") = Void, NSIndexSet, Bool;
overload externalInstanceMethod(#NSTableView, #"selectedColumnIndexes") = NSIndexSet;
overload externalInstanceMethod(#NSTableView, #"selectedRowIndexes") = NSIndexSet;
overload externalInstanceMethod(#NSTableView, #"deselectColumn:") = Void, CLong;
overload externalInstanceMethod(#NSTableView, #"deselectRow:") = Void, CLong;
overload externalInstanceMethod(#NSTableView, #"selectedColumn") = CLong;
overload externalInstanceMethod(#NSTableView, #"selectedRow") = CLong;
overload externalInstanceMethod(#NSTableView, #"isColumnSelected:") = Bool, CLong;
overload externalInstanceMethod(#NSTableView, #"isRowSelected:") = Bool, CLong;
overload externalInstanceMethod(#NSTableView, #"numberOfSelectedColumns") = CLong;
overload externalInstanceMethod(#NSTableView, #"numberOfSelectedRows") = CLong;
overload externalInstanceMethod(#NSTableView, #"allowsTypeSelect") = Bool;
overload externalInstanceMethod(#NSTableView, #"setAllowsTypeSelect:") = Void, Bool;
overload externalInstanceMethod(#NSTableView, #"selectionHighlightStyle") = CLong;
overload externalInstanceMethod(#NSTableView, #"setSelectionHighlightStyle:") = Void, CLong;
overload externalInstanceMethod(#NSTableView, #"setDraggingDestinationFeedbackStyle:") = Void, CLong;
overload externalInstanceMethod(#NSTableView, #"draggingDestinationFeedbackStyle") = CLong;
overload externalInstanceMethod(#NSTableView, #"rectOfColumn:") = NSRect, CLong;
overload externalInstanceMethod(#NSTableView, #"rectOfRow:") = NSRect, CLong;
overload externalInstanceMethod(#NSTableView, #"columnIndexesInRect:") = NSIndexSet, NSRect;
overload externalInstanceMethod(#NSTableView, #"rowsInRect:") = NSRange, NSRect;
overload externalInstanceMethod(#NSTableView, #"columnAtPoint:") = CLong, NSPoint;
overload externalInstanceMethod(#NSTableView, #"rowAtPoint:") = CLong, NSPoint;
overload externalInstanceMethod(#NSTableView, #"frameOfCellAtColumn:row:") = NSRect, CLong, CLong;
overload externalInstanceMethod(#NSTableView, #"preparedCellAtColumn:row:") = NSCell, CLong, CLong;
overload externalInstanceMethod(#NSTableView, #"textShouldBeginEditing:") = Bool, NSText;
overload externalInstanceMethod(#NSTableView, #"textShouldEndEditing:") = Bool, NSText;
overload externalInstanceMethod(#NSTableView, #"textDidBeginEditing:") = Void, NSNotification;
overload externalInstanceMethod(#NSTableView, #"textDidEndEditing:") = Void, NSNotification;
overload externalInstanceMethod(#NSTableView, #"textDidChange:") = Void, NSNotification;
overload externalInstanceMethod(#NSTableView, #"setAutosaveName:") = Void, NSString;
overload externalInstanceMethod(#NSTableView, #"autosaveName") = NSString;
overload externalInstanceMethod(#NSTableView, #"setAutosaveTableColumns:") = Void, Bool;
overload externalInstanceMethod(#NSTableView, #"autosaveTableColumns") = Bool;
overload externalInstanceMethod(#NSTableView, #"shouldFocusCell:atColumn:row:") = Bool, NSCell, CLong, CLong;
overload externalInstanceMethod(#NSTableView, #"focusedColumn") = CLong;
overload externalInstanceMethod(#NSTableView, #"setFocusedColumn:") = Void, CLong;
overload externalInstanceMethod(#NSTableView, #"performClickOnCellAtColumn:row:") = Void, CLong, CLong;
overload externalInstanceMethod(#NSTableView, #"editColumn:row:withEvent:select:") = Void, CLong, CLong, NSEvent, Bool;
overload externalInstanceMethod(#NSTableView, #"drawRow:clipRect:") = Void, CLong, NSRect;
overload externalInstanceMethod(#NSTableView, #"highlightSelectionInClipRect:") = Void, NSRect;
overload externalInstanceMethod(#NSTableView, #"drawGridInClipRect:") = Void, NSRect;
overload externalInstanceMethod(#NSTableView, #"drawBackgroundInClipRect:") = Void, NSRect;
overload externalInstanceMethod(#NSTableView, #"setDrawsGrid:") = Void, Bool;
overload externalInstanceMethod(#NSTableView, #"drawsGrid") = Bool;
overload externalInstanceMethod(#NSTableView, #"selectColumn:byExtendingSelection:") = Void, CLong, Bool;
overload externalInstanceMethod(#NSTableView, #"selectRow:byExtendingSelection:") = Void, CLong, Bool;
overload externalInstanceMethod(#NSTableView, #"selectedColumnEnumerator") = NSEnumerator;
overload externalInstanceMethod(#NSTableView, #"selectedRowEnumerator") = NSEnumerator;
overload externalInstanceMethod(#NSTableView, #"dragImageForRows:event:dragImageOffset:") = NSImage, NSArray, NSEvent, NSPointPointer;
overload externalInstanceMethod(#NSTableView, #"setAutoresizesAllColumnsToFit:") = Void, Bool;
overload externalInstanceMethod(#NSTableView, #"autoresizesAllColumnsToFit") = Bool;
overload externalInstanceMethod(#NSTableView, #"columnsInRect:") = NSRange, NSRect;

record NSText = externalClass(NSView);
overload externalInstanceMethod(#NSText, #"changeSpelling:") = Void, Id;
overload externalInstanceMethod(#NSText, #"ignoreSpelling:") = Void, Id;
overload externalInstanceMethod(#NSText, #"string") = NSString;
overload externalInstanceMethod(#NSText, #"setString:") = Void, NSString;
overload externalInstanceMethod(#NSText, #"replaceCharactersInRange:withString:") = Void, NSRange, NSString;
overload externalInstanceMethod(#NSText, #"replaceCharactersInRange:withRTF:") = Void, NSRange, NSData;
overload externalInstanceMethod(#NSText, #"replaceCharactersInRange:withRTFD:") = Void, NSRange, NSData;
overload externalInstanceMethod(#NSText, #"RTFFromRange:") = NSData, NSRange;
overload externalInstanceMethod(#NSText, #"RTFDFromRange:") = NSData, NSRange;
overload externalInstanceMethod(#NSText, #"writeRTFDToFile:atomically:") = Bool, NSString, Bool;
overload externalInstanceMethod(#NSText, #"readRTFDFromFile:") = Bool, NSString;
overload externalInstanceMethod(#NSText, #"delegate") = Id;
overload externalInstanceMethod(#NSText, #"setDelegate:") = Void, Id;
overload externalInstanceMethod(#NSText, #"isEditable") = Bool;
overload externalInstanceMethod(#NSText, #"setEditable:") = Void, Bool;
overload externalInstanceMethod(#NSText, #"isSelectable") = Bool;
overload externalInstanceMethod(#NSText, #"setSelectable:") = Void, Bool;
overload externalInstanceMethod(#NSText, #"isRichText") = Bool;
overload externalInstanceMethod(#NSText, #"setRichText:") = Void, Bool;
overload externalInstanceMethod(#NSText, #"importsGraphics") = Bool;
overload externalInstanceMethod(#NSText, #"setImportsGraphics:") = Void, Bool;
overload externalInstanceMethod(#NSText, #"isFieldEditor") = Bool;
overload externalInstanceMethod(#NSText, #"setFieldEditor:") = Void, Bool;
overload externalInstanceMethod(#NSText, #"usesFontPanel") = Bool;
overload externalInstanceMethod(#NSText, #"setUsesFontPanel:") = Void, Bool;
overload externalInstanceMethod(#NSText, #"drawsBackground") = Bool;
overload externalInstanceMethod(#NSText, #"setDrawsBackground:") = Void, Bool;
overload externalInstanceMethod(#NSText, #"backgroundColor") = NSColor;
overload externalInstanceMethod(#NSText, #"setBackgroundColor:") = Void, NSColor;
overload externalInstanceMethod(#NSText, #"isRulerVisible") = Bool;
overload externalInstanceMethod(#NSText, #"selectedRange") = NSRange;
overload externalInstanceMethod(#NSText, #"setSelectedRange:") = Void, NSRange;
overload externalInstanceMethod(#NSText, #"scrollRangeToVisible:") = Void, NSRange;
overload externalInstanceMethod(#NSText, #"setFont:") = Void, NSFont;
overload externalInstanceMethod(#NSText, #"font") = NSFont;
overload externalInstanceMethod(#NSText, #"setTextColor:") = Void, NSColor;
overload externalInstanceMethod(#NSText, #"textColor") = NSColor;
overload externalInstanceMethod(#NSText, #"alignment") = CULong;
overload externalInstanceMethod(#NSText, #"setAlignment:") = Void, CULong;
overload externalInstanceMethod(#NSText, #"baseWritingDirection") = CLong;
overload externalInstanceMethod(#NSText, #"setBaseWritingDirection:") = Void, CLong;
overload externalInstanceMethod(#NSText, #"setTextColor:range:") = Void, NSColor, NSRange;
overload externalInstanceMethod(#NSText, #"setFont:range:") = Void, NSFont, NSRange;
overload externalInstanceMethod(#NSText, #"maxSize") = NSSize;
overload externalInstanceMethod(#NSText, #"setMaxSize:") = Void, NSSize;
overload externalInstanceMethod(#NSText, #"minSize") = NSSize;
overload externalInstanceMethod(#NSText, #"setMinSize:") = Void, NSSize;
overload externalInstanceMethod(#NSText, #"isHorizontallyResizable") = Bool;
overload externalInstanceMethod(#NSText, #"setHorizontallyResizable:") = Void, Bool;
overload externalInstanceMethod(#NSText, #"isVerticallyResizable") = Bool;
overload externalInstanceMethod(#NSText, #"setVerticallyResizable:") = Void, Bool;
overload externalInstanceMethod(#NSText, #"sizeToFit") = Void;
overload externalInstanceMethod(#NSText, #"copy:") = Void, Id;
overload externalInstanceMethod(#NSText, #"copyFont:") = Void, Id;
overload externalInstanceMethod(#NSText, #"copyRuler:") = Void, Id;
overload externalInstanceMethod(#NSText, #"cut:") = Void, Id;
overload externalInstanceMethod(#NSText, #"delete:") = Void, Id;
overload externalInstanceMethod(#NSText, #"paste:") = Void, Id;
overload externalInstanceMethod(#NSText, #"pasteFont:") = Void, Id;
overload externalInstanceMethod(#NSText, #"pasteRuler:") = Void, Id;
overload externalInstanceMethod(#NSText, #"selectAll:") = Void, Id;
overload externalInstanceMethod(#NSText, #"changeFont:") = Void, Id;
overload externalInstanceMethod(#NSText, #"alignLeft:") = Void, Id;
overload externalInstanceMethod(#NSText, #"alignRight:") = Void, Id;
overload externalInstanceMethod(#NSText, #"alignCenter:") = Void, Id;
overload externalInstanceMethod(#NSText, #"subscript:") = Void, Id;
overload externalInstanceMethod(#NSText, #"superscript:") = Void, Id;
overload externalInstanceMethod(#NSText, #"underline:") = Void, Id;
overload externalInstanceMethod(#NSText, #"unscript:") = Void, Id;
overload externalInstanceMethod(#NSText, #"showGuessPanel:") = Void, Id;
overload externalInstanceMethod(#NSText, #"checkSpelling:") = Void, Id;
overload externalInstanceMethod(#NSText, #"toggleRuler:") = Void, Id;

record NSTextAttachment = externalClass(NSObject);
overload externalInstanceMethod(#NSTextAttachment, #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSTextAttachment, #"initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#NSTextAttachment, #"initWithFileWrapper:") = Id, NSFileWrapper;
overload externalInstanceMethod(#NSTextAttachment, #"setFileWrapper:") = Void, NSFileWrapper;
overload externalInstanceMethod(#NSTextAttachment, #"fileWrapper") = NSFileWrapper;
overload externalInstanceMethod(#NSTextAttachment, #"attachmentCell") = Id;
overload externalInstanceMethod(#NSTextAttachment, #"setAttachmentCell:") = Void, Id;

record NSTextAttachmentCell = externalClass(NSCell);
overload externalInstanceMethod(#NSTextAttachmentCell, #"drawWithFrame:inView:") = Void, NSRect, NSView;
overload externalInstanceMethod(#NSTextAttachmentCell, #"wantsToTrackMouse") = Bool;
overload externalInstanceMethod(#NSTextAttachmentCell, #"highlight:withFrame:inView:") = Void, Bool, NSRect, NSView;
overload externalInstanceMethod(#NSTextAttachmentCell, #"trackMouse:inRect:ofView:untilMouseUp:") = Bool, NSEvent, NSRect, NSView, Bool;
overload externalInstanceMethod(#NSTextAttachmentCell, #"cellSize") = NSSize;
overload externalInstanceMethod(#NSTextAttachmentCell, #"cellBaselineOffset") = NSPoint;
overload externalInstanceMethod(#NSTextAttachmentCell, #"setAttachment:") = Void, NSTextAttachment;
overload externalInstanceMethod(#NSTextAttachmentCell, #"attachment") = NSTextAttachment;
overload externalInstanceMethod(#NSTextAttachmentCell, #"drawWithFrame:inView:characterIndex:") = Void, NSRect, NSView, CULong;
overload externalInstanceMethod(#NSTextAttachmentCell, #"drawWithFrame:inView:characterIndex:layoutManager:") = Void, NSRect, NSView, CULong, NSLayoutManager;
overload externalInstanceMethod(#NSTextAttachmentCell, #"wantsToTrackMouseForEvent:inRect:ofView:atCharacterIndex:") = Bool, NSEvent, NSRect, NSView, CULong;
overload externalInstanceMethod(#NSTextAttachmentCell, #"trackMouse:inRect:ofView:atCharacterIndex:untilMouseUp:") = Bool, NSEvent, NSRect, NSView, CULong, Bool;
overload externalInstanceMethod(#NSTextAttachmentCell, #"cellFrameForTextContainer:proposedLineFragment:glyphPosition:characterIndex:") = NSRect, NSTextContainer, NSRect, NSPoint, CULong;

record NSTextBlock = externalClass(NSObject);
overload externalInstanceMethod(#NSTextBlock, #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSTextBlock, #"initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#NSTextBlock, #"copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#NSTextBlock, #"init") = Id;
overload externalInstanceMethod(#NSTextBlock, #"setValue:type:forDimension:") = Void, Double, CULong, CULong;
overload externalInstanceMethod(#NSTextBlock, #"valueForDimension:") = Double, CULong;
overload externalInstanceMethod(#NSTextBlock, #"valueTypeForDimension:") = CULong, CULong;
overload externalInstanceMethod(#NSTextBlock, #"setContentWidth:type:") = Void, Double, CULong;
overload externalInstanceMethod(#NSTextBlock, #"contentWidth") = Double;
overload externalInstanceMethod(#NSTextBlock, #"contentWidthValueType") = CULong;
overload externalInstanceMethod(#NSTextBlock, #"setWidth:type:forLayer:edge:") = Void, Double, CULong, CLong, CULong;
overload externalInstanceMethod(#NSTextBlock, #"setWidth:type:forLayer:") = Void, Double, CULong, CLong;
overload externalInstanceMethod(#NSTextBlock, #"widthForLayer:edge:") = Double, CLong, CULong;
overload externalInstanceMethod(#NSTextBlock, #"widthValueTypeForLayer:edge:") = CULong, CLong, CULong;
overload externalInstanceMethod(#NSTextBlock, #"setVerticalAlignment:") = Void, CULong;
overload externalInstanceMethod(#NSTextBlock, #"verticalAlignment") = CULong;
overload externalInstanceMethod(#NSTextBlock, #"setBackgroundColor:") = Void, NSColor;
overload externalInstanceMethod(#NSTextBlock, #"backgroundColor") = NSColor;
overload externalInstanceMethod(#NSTextBlock, #"setBorderColor:forEdge:") = Void, NSColor, CULong;
overload externalInstanceMethod(#NSTextBlock, #"setBorderColor:") = Void, NSColor;
overload externalInstanceMethod(#NSTextBlock, #"borderColorForEdge:") = NSColor, CULong;
overload externalInstanceMethod(#NSTextBlock, #"rectForLayoutAtPoint:inRect:textContainer:characterRange:") = NSRect, NSPoint, NSRect, NSTextContainer, NSRange;
overload externalInstanceMethod(#NSTextBlock, #"boundsRectForContentRect:inRect:textContainer:characterRange:") = NSRect, NSRect, NSRect, NSTextContainer, NSRange;
overload externalInstanceMethod(#NSTextBlock, #"drawBackgroundWithFrame:inView:characterRange:layoutManager:") = Void, NSRect, NSView, NSRange, NSLayoutManager;

record NSTextContainer = externalClass(NSObject);
overload externalInstanceMethod(#NSTextContainer, #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSTextContainer, #"initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#NSTextContainer, #"initWithContainerSize:") = Id, NSSize;
overload externalInstanceMethod(#NSTextContainer, #"layoutManager") = NSLayoutManager;
overload externalInstanceMethod(#NSTextContainer, #"setLayoutManager:") = Void, NSLayoutManager;
overload externalInstanceMethod(#NSTextContainer, #"replaceLayoutManager:") = Void, NSLayoutManager;
overload externalInstanceMethod(#NSTextContainer, #"textView") = NSTextView;
overload externalInstanceMethod(#NSTextContainer, #"setTextView:") = Void, NSTextView;
overload externalInstanceMethod(#NSTextContainer, #"setWidthTracksTextView:") = Void, Bool;
overload externalInstanceMethod(#NSTextContainer, #"widthTracksTextView") = Bool;
overload externalInstanceMethod(#NSTextContainer, #"setHeightTracksTextView:") = Void, Bool;
overload externalInstanceMethod(#NSTextContainer, #"heightTracksTextView") = Bool;
overload externalInstanceMethod(#NSTextContainer, #"setContainerSize:") = Void, NSSize;
overload externalInstanceMethod(#NSTextContainer, #"containerSize") = NSSize;
overload externalInstanceMethod(#NSTextContainer, #"setLineFragmentPadding:") = Void, Double;
overload externalInstanceMethod(#NSTextContainer, #"lineFragmentPadding") = Double;
overload externalInstanceMethod(#NSTextContainer, #"lineFragmentRectForProposedRect:sweepDirection:movementDirection:remainingRect:") = NSRect, NSRect, CULong, CULong, NSRectPointer;
overload externalInstanceMethod(#NSTextContainer, #"isSimpleRectangularTextContainer") = Bool;
overload externalInstanceMethod(#NSTextContainer, #"containsPoint:") = Bool, NSPoint;

record NSTextField = externalClass(NSControl);
overload externalInstanceMethod(#NSTextField, #"validateUserInterfaceItem:") = Bool, Id;
overload externalInstanceMethod(#NSTextField, #"setBackgroundColor:") = Void, NSColor;
overload externalInstanceMethod(#NSTextField, #"backgroundColor") = NSColor;
overload externalInstanceMethod(#NSTextField, #"setDrawsBackground:") = Void, Bool;
overload externalInstanceMethod(#NSTextField, #"drawsBackground") = Bool;
overload externalInstanceMethod(#NSTextField, #"setTextColor:") = Void, NSColor;
overload externalInstanceMethod(#NSTextField, #"textColor") = NSColor;
overload externalInstanceMethod(#NSTextField, #"isBordered") = Bool;
overload externalInstanceMethod(#NSTextField, #"setBordered:") = Void, Bool;
overload externalInstanceMethod(#NSTextField, #"isBezeled") = Bool;
overload externalInstanceMethod(#NSTextField, #"setBezeled:") = Void, Bool;
overload externalInstanceMethod(#NSTextField, #"isEditable") = Bool;
overload externalInstanceMethod(#NSTextField, #"setEditable:") = Void, Bool;
overload externalInstanceMethod(#NSTextField, #"isSelectable") = Bool;
overload externalInstanceMethod(#NSTextField, #"setSelectable:") = Void, Bool;
overload externalInstanceMethod(#NSTextField, #"selectText:") = Void, Id;
overload externalInstanceMethod(#NSTextField, #"delegate") = Id;
overload externalInstanceMethod(#NSTextField, #"setDelegate:") = Void, Id;
overload externalInstanceMethod(#NSTextField, #"textShouldBeginEditing:") = Bool, NSText;
overload externalInstanceMethod(#NSTextField, #"textShouldEndEditing:") = Bool, NSText;
overload externalInstanceMethod(#NSTextField, #"textDidBeginEditing:") = Void, NSNotification;
overload externalInstanceMethod(#NSTextField, #"textDidEndEditing:") = Void, NSNotification;
overload externalInstanceMethod(#NSTextField, #"textDidChange:") = Void, NSNotification;
overload externalInstanceMethod(#NSTextField, #"acceptsFirstResponder") = Bool;
overload externalInstanceMethod(#NSTextField, #"setBezelStyle:") = Void, CULong;
overload externalInstanceMethod(#NSTextField, #"bezelStyle") = CULong;
overload externalInstanceMethod(#NSTextField, #"setTitleWithMnemonic:") = Void, NSString;
overload externalInstanceMethod(#NSTextField, #"allowsEditingTextAttributes") = Bool;
overload externalInstanceMethod(#NSTextField, #"setAllowsEditingTextAttributes:") = Void, Bool;
overload externalInstanceMethod(#NSTextField, #"importsGraphics") = Bool;
overload externalInstanceMethod(#NSTextField, #"setImportsGraphics:") = Void, Bool;

record NSTextFieldCell = externalClass(NSActionCell);
overload externalInstanceMethod(#NSTextFieldCell, #"setBackgroundColor:") = Void, NSColor;
overload externalInstanceMethod(#NSTextFieldCell, #"backgroundColor") = NSColor;
overload externalInstanceMethod(#NSTextFieldCell, #"setDrawsBackground:") = Void, Bool;
overload externalInstanceMethod(#NSTextFieldCell, #"drawsBackground") = Bool;
overload externalInstanceMethod(#NSTextFieldCell, #"setTextColor:") = Void, NSColor;
overload externalInstanceMethod(#NSTextFieldCell, #"textColor") = NSColor;
overload externalInstanceMethod(#NSTextFieldCell, #"setUpFieldEditorAttributes:") = NSText, NSText;
overload externalInstanceMethod(#NSTextFieldCell, #"setBezelStyle:") = Void, CULong;
overload externalInstanceMethod(#NSTextFieldCell, #"bezelStyle") = CULong;
overload externalInstanceMethod(#NSTextFieldCell, #"setPlaceholderString:") = Void, NSString;
overload externalInstanceMethod(#NSTextFieldCell, #"placeholderString") = NSString;
overload externalInstanceMethod(#NSTextFieldCell, #"setPlaceholderAttributedString:") = Void, NSAttributedString;
overload externalInstanceMethod(#NSTextFieldCell, #"placeholderAttributedString") = NSAttributedString;
overload externalInstanceMethod(#NSTextFieldCell, #"setWantsNotificationForMarkedText:") = Void, Bool;
overload externalInstanceMethod(#NSTextFieldCell, #"allowedInputSourceLocales") = NSArray;
overload externalInstanceMethod(#NSTextFieldCell, #"setAllowedInputSourceLocales:") = Void, NSArray;

record NSTextInputContext = externalClass(NSObject);
overload externalClassMethod(#NSTextInputContext, #"currentInputContext") = NSTextInputContext;
overload externalInstanceMethod(#NSTextInputContext, #"initWithClient:") = Id, Id;
overload externalInstanceMethod(#NSTextInputContext, #"activate") = Void;
overload externalInstanceMethod(#NSTextInputContext, #"deactivate") = Void;
overload externalInstanceMethod(#NSTextInputContext, #"handleEvent:") = Bool, NSEvent;
overload externalInstanceMethod(#NSTextInputContext, #"discardMarkedText") = Void;
overload externalInstanceMethod(#NSTextInputContext, #"invalidateCharacterCoordinates") = Void;
overload externalClassMethod(#NSTextInputContext, #"localizedNameForInputSource:") = NSString, NSString;
overload externalInstanceMethod(#NSTextInputContext, #"client") = Id;
overload externalInstanceMethod(#NSTextInputContext, #"acceptsGlyphInfo") = Bool;
overload externalInstanceMethod(#NSTextInputContext, #"setAcceptsGlyphInfo:") = Void, Bool;
overload externalInstanceMethod(#NSTextInputContext, #"allowedInputSourceLocales") = NSArray;
overload externalInstanceMethod(#NSTextInputContext, #"setAllowedInputSourceLocales:") = Void, NSArray;
overload externalInstanceMethod(#NSTextInputContext, #"keyboardInputSources") = NSArray;
overload externalInstanceMethod(#NSTextInputContext, #"selectedKeyboardInputSource") = NSString;
overload externalInstanceMethod(#NSTextInputContext, #"setSelectedKeyboardInputSource:") = Void, NSString;

record NSTextList = externalClass(NSObject);
overload externalInstanceMethod(#NSTextList, #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSTextList, #"initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#NSTextList, #"copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#NSTextList, #"initWithMarkerFormat:options:") = Id, NSString, CULong;
overload externalInstanceMethod(#NSTextList, #"markerFormat") = NSString;
overload externalInstanceMethod(#NSTextList, #"listOptions") = CULong;
overload externalInstanceMethod(#NSTextList, #"markerForItemNumber:") = NSString, CLong;
overload externalInstanceMethod(#NSTextList, #"setStartingItemNumber:") = Void, CLong;
overload externalInstanceMethod(#NSTextList, #"startingItemNumber") = CLong;

record NSTextStorage = externalClass(NSMutableAttributedString);
overload externalInstanceMethod(#NSTextStorage, #"addLayoutManager:") = Void, NSLayoutManager;
overload externalInstanceMethod(#NSTextStorage, #"removeLayoutManager:") = Void, NSLayoutManager;
overload externalInstanceMethod(#NSTextStorage, #"layoutManagers") = NSArray;
overload externalInstanceMethod(#NSTextStorage, #"edited:range:changeInLength:") = Void, CULong, NSRange, CLong;
overload externalInstanceMethod(#NSTextStorage, #"processEditing") = Void;
overload externalInstanceMethod(#NSTextStorage, #"invalidateAttributesInRange:") = Void, NSRange;
overload externalInstanceMethod(#NSTextStorage, #"ensureAttributesAreFixedInRange:") = Void, NSRange;
overload externalInstanceMethod(#NSTextStorage, #"fixesAttributesLazily") = Bool;
overload externalInstanceMethod(#NSTextStorage, #"editedMask") = CULong;
overload externalInstanceMethod(#NSTextStorage, #"editedRange") = NSRange;
overload externalInstanceMethod(#NSTextStorage, #"changeInLength") = CLong;
overload externalInstanceMethod(#NSTextStorage, #"setDelegate:") = Void, Id;
overload externalInstanceMethod(#NSTextStorage, #"delegate") = Id;
overload externalInstanceMethod(#NSTextStorage, #"attributeRuns") = NSArray;
overload externalInstanceMethod(#NSTextStorage, #"setAttributeRuns:") = Void, NSArray;
overload externalInstanceMethod(#NSTextStorage, #"paragraphs") = NSArray;
overload externalInstanceMethod(#NSTextStorage, #"setParagraphs:") = Void, NSArray;
overload externalInstanceMethod(#NSTextStorage, #"words") = NSArray;
overload externalInstanceMethod(#NSTextStorage, #"setWords:") = Void, NSArray;
overload externalInstanceMethod(#NSTextStorage, #"characters") = NSArray;
overload externalInstanceMethod(#NSTextStorage, #"setCharacters:") = Void, NSArray;
overload externalInstanceMethod(#NSTextStorage, #"font") = NSFont;
overload externalInstanceMethod(#NSTextStorage, #"setFont:") = Void, NSFont;
overload externalInstanceMethod(#NSTextStorage, #"foregroundColor") = NSColor;
overload externalInstanceMethod(#NSTextStorage, #"setForegroundColor:") = Void, NSColor;

record NSTextTab = externalClass(NSObject);
overload externalInstanceMethod(#NSTextTab, #"copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#NSTextTab, #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSTextTab, #"initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#NSTextTab, #"initWithTextAlignment:location:options:") = Id, CULong, Double, NSDictionary;
overload externalInstanceMethod(#NSTextTab, #"alignment") = CULong;
overload externalInstanceMethod(#NSTextTab, #"options") = NSDictionary;
overload externalInstanceMethod(#NSTextTab, #"initWithType:location:") = Id, CULong, Double;
overload externalInstanceMethod(#NSTextTab, #"location") = Double;
overload externalInstanceMethod(#NSTextTab, #"tabStopType") = CULong;

record NSTextTable = externalClass(NSTextBlock);
overload externalInstanceMethod(#NSTextTable, #"numberOfColumns") = CULong;
overload externalInstanceMethod(#NSTextTable, #"setNumberOfColumns:") = Void, CULong;
overload externalInstanceMethod(#NSTextTable, #"layoutAlgorithm") = CULong;
overload externalInstanceMethod(#NSTextTable, #"setLayoutAlgorithm:") = Void, CULong;
overload externalInstanceMethod(#NSTextTable, #"collapsesBorders") = Bool;
overload externalInstanceMethod(#NSTextTable, #"setCollapsesBorders:") = Void, Bool;
overload externalInstanceMethod(#NSTextTable, #"hidesEmptyCells") = Bool;
overload externalInstanceMethod(#NSTextTable, #"setHidesEmptyCells:") = Void, Bool;
overload externalInstanceMethod(#NSTextTable, #"rectForBlock:layoutAtPoint:inRect:textContainer:characterRange:") = NSRect, NSTextTableBlock, NSPoint, NSRect, NSTextContainer, NSRange;
overload externalInstanceMethod(#NSTextTable, #"boundsRectForBlock:contentRect:inRect:textContainer:characterRange:") = NSRect, NSTextTableBlock, NSRect, NSRect, NSTextContainer, NSRange;
overload externalInstanceMethod(#NSTextTable, #"drawBackgroundForBlock:withFrame:inView:characterRange:layoutManager:") = Void, NSTextTableBlock, NSRect, NSView, NSRange, NSLayoutManager;

record NSTextTableBlock = externalClass(NSTextBlock);
overload externalInstanceMethod(#NSTextTableBlock, #"initWithTable:startingRow:rowSpan:startingColumn:columnSpan:") = Id, NSTextTable, CLong, CLong, CLong, CLong;
overload externalInstanceMethod(#NSTextTableBlock, #"table") = NSTextTable;
overload externalInstanceMethod(#NSTextTableBlock, #"startingRow") = CLong;
overload externalInstanceMethod(#NSTextTableBlock, #"rowSpan") = CLong;
overload externalInstanceMethod(#NSTextTableBlock, #"startingColumn") = CLong;
overload externalInstanceMethod(#NSTextTableBlock, #"columnSpan") = CLong;

record NSTextView = externalClass(NSText);
overload externalInstanceMethod(#NSTextView, #"insertText:") = Void, Id;
overload externalInstanceMethod(#NSTextView, #"doCommandBySelector:") = Void, SelectorHandle;
overload externalInstanceMethod(#NSTextView, #"setMarkedText:selectedRange:") = Void, Id, NSRange;
overload externalInstanceMethod(#NSTextView, #"unmarkText") = Void;
overload externalInstanceMethod(#NSTextView, #"hasMarkedText") = Bool;
overload externalInstanceMethod(#NSTextView, #"conversationIdentifier") = CLong;
overload externalInstanceMethod(#NSTextView, #"attributedSubstringFromRange:") = NSAttributedString, NSRange;
overload externalInstanceMethod(#NSTextView, #"markedRange") = NSRange;
overload externalInstanceMethod(#NSTextView, #"selectedRange") = NSRange;
overload externalInstanceMethod(#NSTextView, #"firstRectForCharacterRange:") = NSRect, NSRange;
overload externalInstanceMethod(#NSTextView, #"characterIndexForPoint:") = CULong, NSPoint;
overload externalInstanceMethod(#NSTextView, #"validAttributesForMarkedText") = NSArray;
overload externalInstanceMethod(#NSTextView, #"validateUserInterfaceItem:") = Bool, Id;
overload externalInstanceMethod(#NSTextView, #"insertText:replacementRange:") = Void, Id, NSRange;
overload externalInstanceMethod(#NSTextView, #"doCommandBySelector:") = Void, SelectorHandle;
overload externalInstanceMethod(#NSTextView, #"setMarkedText:selectedRange:replacementRange:") = Void, Id, NSRange, NSRange;
overload externalInstanceMethod(#NSTextView, #"unmarkText") = Void;
overload externalInstanceMethod(#NSTextView, #"selectedRange") = NSRange;
overload externalInstanceMethod(#NSTextView, #"markedRange") = NSRange;
overload externalInstanceMethod(#NSTextView, #"hasMarkedText") = Bool;
overload externalInstanceMethod(#NSTextView, #"attributedSubstringForProposedRange:actualRange:") = NSAttributedString, NSRange, NSRangePointer;
overload externalInstanceMethod(#NSTextView, #"validAttributesForMarkedText") = NSArray;
overload externalInstanceMethod(#NSTextView, #"firstRectForCharacterRange:actualRange:") = NSRect, NSRange, NSRangePointer;
overload externalInstanceMethod(#NSTextView, #"characterIndexForPoint:") = CULong, NSPoint;
overload externalInstanceMethod(#NSTextView, #"attributedString") = NSAttributedString;
overload externalInstanceMethod(#NSTextView, #"fractionOfDistanceThroughGlyphForPoint:") = Double, NSPoint;
overload externalInstanceMethod(#NSTextView, #"baselineDeltaForCharacterAtIndex:") = Double, CULong;
overload externalInstanceMethod(#NSTextView, #"windowLevel") = CLong;
overload externalInstanceMethod(#NSTextView, #"drawsVerticallyForCharacterAtIndex:") = Bool, CULong;
overload externalInstanceMethod(#NSTextView, #"initWithFrame:textContainer:") = Id, NSRect, NSTextContainer;
overload externalInstanceMethod(#NSTextView, #"initWithFrame:") = Id, NSRect;
overload externalInstanceMethod(#NSTextView, #"textContainer") = NSTextContainer;
overload externalInstanceMethod(#NSTextView, #"setTextContainer:") = Void, NSTextContainer;
overload externalInstanceMethod(#NSTextView, #"replaceTextContainer:") = Void, NSTextContainer;
overload externalInstanceMethod(#NSTextView, #"setTextContainerInset:") = Void, NSSize;
overload externalInstanceMethod(#NSTextView, #"textContainerInset") = NSSize;
overload externalInstanceMethod(#NSTextView, #"textContainerOrigin") = NSPoint;
overload externalInstanceMethod(#NSTextView, #"invalidateTextContainerOrigin") = Void;
overload externalInstanceMethod(#NSTextView, #"layoutManager") = NSLayoutManager;
overload externalInstanceMethod(#NSTextView, #"textStorage") = NSTextStorage;
overload externalInstanceMethod(#NSTextView, #"insertText:") = Void, Id;
overload externalInstanceMethod(#NSTextView, #"setConstrainedFrameSize:") = Void, NSSize;
overload externalInstanceMethod(#NSTextView, #"setAlignment:range:") = Void, CULong, NSRange;
overload externalInstanceMethod(#NSTextView, #"setBaseWritingDirection:range:") = Void, CLong, NSRange;
overload externalInstanceMethod(#NSTextView, #"turnOffKerning:") = Void, Id;
overload externalInstanceMethod(#NSTextView, #"tightenKerning:") = Void, Id;
overload externalInstanceMethod(#NSTextView, #"loosenKerning:") = Void, Id;
overload externalInstanceMethod(#NSTextView, #"useStandardKerning:") = Void, Id;
overload externalInstanceMethod(#NSTextView, #"turnOffLigatures:") = Void, Id;
overload externalInstanceMethod(#NSTextView, #"useStandardLigatures:") = Void, Id;
overload externalInstanceMethod(#NSTextView, #"useAllLigatures:") = Void, Id;
overload externalInstanceMethod(#NSTextView, #"raiseBaseline:") = Void, Id;
overload externalInstanceMethod(#NSTextView, #"lowerBaseline:") = Void, Id;
overload externalInstanceMethod(#NSTextView, #"toggleTraditionalCharacterShape:") = Void, Id;
overload externalInstanceMethod(#NSTextView, #"outline:") = Void, Id;
overload externalInstanceMethod(#NSTextView, #"performFindPanelAction:") = Void, Id;
overload externalInstanceMethod(#NSTextView, #"alignJustified:") = Void, Id;
overload externalInstanceMethod(#NSTextView, #"changeColor:") = Void, Id;
overload externalInstanceMethod(#NSTextView, #"changeAttributes:") = Void, Id;
overload externalInstanceMethod(#NSTextView, #"changeDocumentBackgroundColor:") = Void, Id;
overload externalInstanceMethod(#NSTextView, #"orderFrontSpacingPanel:") = Void, Id;
overload externalInstanceMethod(#NSTextView, #"orderFrontLinkPanel:") = Void, Id;
overload externalInstanceMethod(#NSTextView, #"orderFrontListPanel:") = Void, Id;
overload externalInstanceMethod(#NSTextView, #"orderFrontTablePanel:") = Void, Id;
overload externalInstanceMethod(#NSTextView, #"rulerView:didMoveMarker:") = Void, NSRulerView, NSRulerMarker;
overload externalInstanceMethod(#NSTextView, #"rulerView:didRemoveMarker:") = Void, NSRulerView, NSRulerMarker;
overload externalInstanceMethod(#NSTextView, #"rulerView:didAddMarker:") = Void, NSRulerView, NSRulerMarker;
overload externalInstanceMethod(#NSTextView, #"rulerView:shouldMoveMarker:") = Bool, NSRulerView, NSRulerMarker;
overload externalInstanceMethod(#NSTextView, #"rulerView:shouldAddMarker:") = Bool, NSRulerView, NSRulerMarker;
overload externalInstanceMethod(#NSTextView, #"rulerView:willMoveMarker:toLocation:") = Double, NSRulerView, NSRulerMarker, Double;
overload externalInstanceMethod(#NSTextView, #"rulerView:shouldRemoveMarker:") = Bool, NSRulerView, NSRulerMarker;
overload externalInstanceMethod(#NSTextView, #"rulerView:willAddMarker:atLocation:") = Double, NSRulerView, NSRulerMarker, Double;
overload externalInstanceMethod(#NSTextView, #"rulerView:handleMouseDown:") = Void, NSRulerView, NSEvent;
overload externalInstanceMethod(#NSTextView, #"setNeedsDisplayInRect:avoidAdditionalLayout:") = Void, NSRect, Bool;
overload externalInstanceMethod(#NSTextView, #"shouldDrawInsertionPoint") = Bool;
overload externalInstanceMethod(#NSTextView, #"drawInsertionPointInRect:color:turnedOn:") = Void, NSRect, NSColor, Bool;
overload externalInstanceMethod(#NSTextView, #"drawViewBackgroundInRect:") = Void, NSRect;
overload externalInstanceMethod(#NSTextView, #"updateRuler") = Void;
overload externalInstanceMethod(#NSTextView, #"updateFontPanel") = Void;
overload externalInstanceMethod(#NSTextView, #"updateDragTypeRegistration") = Void;
overload externalInstanceMethod(#NSTextView, #"selectionRangeForProposedRange:granularity:") = NSRange, NSRange, CULong;
overload externalInstanceMethod(#NSTextView, #"clickedOnLink:atIndex:") = Void, Id, CULong;
overload externalInstanceMethod(#NSTextView, #"startSpeaking:") = Void, Id;
overload externalInstanceMethod(#NSTextView, #"stopSpeaking:") = Void, Id;
overload externalInstanceMethod(#NSTextView, #"characterIndexForInsertionAtPoint:") = CULong, NSPoint;
overload externalInstanceMethod(#NSTextView, #"complete:") = Void, Id;
overload externalInstanceMethod(#NSTextView, #"rangeForUserCompletion") = NSRange;
overload externalInstanceMethod(#NSTextView, #"completionsForPartialWordRange:indexOfSelectedItem:") = NSArray, NSRange, Pointer[CLong];
overload externalInstanceMethod(#NSTextView, #"insertCompletion:forPartialWordRange:movement:isFinal:") = Void, NSString, NSRange, CLong, Bool;
overload externalInstanceMethod(#NSTextView, #"writablePasteboardTypes") = NSArray;
overload externalInstanceMethod(#NSTextView, #"writeSelectionToPasteboard:type:") = Bool, NSPasteboard, NSString;
overload externalInstanceMethod(#NSTextView, #"writeSelectionToPasteboard:types:") = Bool, NSPasteboard, NSArray;
overload externalInstanceMethod(#NSTextView, #"readablePasteboardTypes") = NSArray;
overload externalInstanceMethod(#NSTextView, #"preferredPasteboardTypeFromArray:restrictedToTypesFromArray:") = NSString, NSArray, NSArray;
overload externalInstanceMethod(#NSTextView, #"readSelectionFromPasteboard:type:") = Bool, NSPasteboard, NSString;
overload externalInstanceMethod(#NSTextView, #"readSelectionFromPasteboard:") = Bool, NSPasteboard;
overload externalClassMethod(#NSTextView, #"registerForServices") = Void;
overload externalInstanceMethod(#NSTextView, #"validRequestorForSendType:returnType:") = Id, NSString, NSString;
overload externalInstanceMethod(#NSTextView, #"pasteAsPlainText:") = Void, Id;
overload externalInstanceMethod(#NSTextView, #"pasteAsRichText:") = Void, Id;
overload externalInstanceMethod(#NSTextView, #"dragSelectionWithEvent:offset:slideBack:") = Bool, NSEvent, NSSize, Bool;
overload externalInstanceMethod(#NSTextView, #"dragImageForSelectionWithEvent:origin:") = NSImage, NSEvent, NSPointPointer;
overload externalInstanceMethod(#NSTextView, #"acceptableDragTypes") = NSArray;
overload externalInstanceMethod(#NSTextView, #"dragOperationForDraggingInfo:type:") = CULong, Id, NSString;
overload externalInstanceMethod(#NSTextView, #"cleanUpAfterDragOperation") = Void;
overload externalInstanceMethod(#NSTextView, #"selectedRanges") = NSArray;
overload externalInstanceMethod(#NSTextView, #"setSelectedRanges:affinity:stillSelecting:") = Void, NSArray, CULong, Bool;
overload externalInstanceMethod(#NSTextView, #"setSelectedRanges:") = Void, NSArray;
overload externalInstanceMethod(#NSTextView, #"setSelectedRange:affinity:stillSelecting:") = Void, NSRange, CULong, Bool;
overload externalInstanceMethod(#NSTextView, #"selectionAffinity") = CULong;
overload externalInstanceMethod(#NSTextView, #"selectionGranularity") = CULong;
overload externalInstanceMethod(#NSTextView, #"setSelectionGranularity:") = Void, CULong;
overload externalInstanceMethod(#NSTextView, #"setSelectedTextAttributes:") = Void, NSDictionary;
overload externalInstanceMethod(#NSTextView, #"selectedTextAttributes") = NSDictionary;
overload externalInstanceMethod(#NSTextView, #"setInsertionPointColor:") = Void, NSColor;
overload externalInstanceMethod(#NSTextView, #"insertionPointColor") = NSColor;
overload externalInstanceMethod(#NSTextView, #"updateInsertionPointStateAndRestartTimer:") = Void, Bool;
overload externalInstanceMethod(#NSTextView, #"setMarkedTextAttributes:") = Void, NSDictionary;
overload externalInstanceMethod(#NSTextView, #"markedTextAttributes") = NSDictionary;
overload externalInstanceMethod(#NSTextView, #"setLinkTextAttributes:") = Void, NSDictionary;
overload externalInstanceMethod(#NSTextView, #"linkTextAttributes") = NSDictionary;
overload externalInstanceMethod(#NSTextView, #"displaysLinkToolTips") = Bool;
overload externalInstanceMethod(#NSTextView, #"setDisplaysLinkToolTips:") = Void, Bool;
overload externalInstanceMethod(#NSTextView, #"acceptsGlyphInfo") = Bool;
overload externalInstanceMethod(#NSTextView, #"setAcceptsGlyphInfo:") = Void, Bool;
overload externalInstanceMethod(#NSTextView, #"setRulerVisible:") = Void, Bool;
overload externalInstanceMethod(#NSTextView, #"usesRuler") = Bool;
overload externalInstanceMethod(#NSTextView, #"setUsesRuler:") = Void, Bool;
overload externalInstanceMethod(#NSTextView, #"setContinuousSpellCheckingEnabled:") = Void, Bool;
overload externalInstanceMethod(#NSTextView, #"isContinuousSpellCheckingEnabled") = Bool;
overload externalInstanceMethod(#NSTextView, #"toggleContinuousSpellChecking:") = Void, Id;
overload externalInstanceMethod(#NSTextView, #"spellCheckerDocumentTag") = CLong;
overload externalInstanceMethod(#NSTextView, #"setGrammarCheckingEnabled:") = Void, Bool;
overload externalInstanceMethod(#NSTextView, #"isGrammarCheckingEnabled") = Bool;
overload externalInstanceMethod(#NSTextView, #"toggleGrammarChecking:") = Void, Id;
overload externalInstanceMethod(#NSTextView, #"setSpellingState:range:") = Void, CLong, NSRange;
overload externalInstanceMethod(#NSTextView, #"typingAttributes") = NSDictionary;
overload externalInstanceMethod(#NSTextView, #"setTypingAttributes:") = Void, NSDictionary;
overload externalInstanceMethod(#NSTextView, #"shouldChangeTextInRanges:replacementStrings:") = Bool, NSArray, NSArray;
overload externalInstanceMethod(#NSTextView, #"rangesForUserTextChange") = NSArray;
overload externalInstanceMethod(#NSTextView, #"rangesForUserCharacterAttributeChange") = NSArray;
overload externalInstanceMethod(#NSTextView, #"rangesForUserParagraphAttributeChange") = NSArray;
overload externalInstanceMethod(#NSTextView, #"shouldChangeTextInRange:replacementString:") = Bool, NSRange, NSString;
overload externalInstanceMethod(#NSTextView, #"didChangeText") = Void;
overload externalInstanceMethod(#NSTextView, #"rangeForUserTextChange") = NSRange;
overload externalInstanceMethod(#NSTextView, #"rangeForUserCharacterAttributeChange") = NSRange;
overload externalInstanceMethod(#NSTextView, #"rangeForUserParagraphAttributeChange") = NSRange;
overload externalInstanceMethod(#NSTextView, #"setUsesFindPanel:") = Void, Bool;
overload externalInstanceMethod(#NSTextView, #"usesFindPanel") = Bool;
overload externalInstanceMethod(#NSTextView, #"setAllowsDocumentBackgroundColorChange:") = Void, Bool;
overload externalInstanceMethod(#NSTextView, #"allowsDocumentBackgroundColorChange") = Bool;
overload externalInstanceMethod(#NSTextView, #"setDefaultParagraphStyle:") = Void, NSParagraphStyle;
overload externalInstanceMethod(#NSTextView, #"defaultParagraphStyle") = NSParagraphStyle;
overload externalInstanceMethod(#NSTextView, #"setAllowsUndo:") = Void, Bool;
overload externalInstanceMethod(#NSTextView, #"allowsUndo") = Bool;
overload externalInstanceMethod(#NSTextView, #"breakUndoCoalescing") = Void;
overload externalInstanceMethod(#NSTextView, #"isCoalescingUndo") = Bool;
overload externalInstanceMethod(#NSTextView, #"allowsImageEditing") = Bool;
overload externalInstanceMethod(#NSTextView, #"setAllowsImageEditing:") = Void, Bool;
overload externalInstanceMethod(#NSTextView, #"showFindIndicatorForRange:") = Void, NSRange;
overload externalInstanceMethod(#NSTextView, #"delegate") = Id;
overload externalInstanceMethod(#NSTextView, #"setDelegate:") = Void, Id;
overload externalInstanceMethod(#NSTextView, #"isEditable") = Bool;
overload externalInstanceMethod(#NSTextView, #"setEditable:") = Void, Bool;
overload externalInstanceMethod(#NSTextView, #"isSelectable") = Bool;
overload externalInstanceMethod(#NSTextView, #"setSelectable:") = Void, Bool;
overload externalInstanceMethod(#NSTextView, #"isRichText") = Bool;
overload externalInstanceMethod(#NSTextView, #"setRichText:") = Void, Bool;
overload externalInstanceMethod(#NSTextView, #"importsGraphics") = Bool;
overload externalInstanceMethod(#NSTextView, #"setImportsGraphics:") = Void, Bool;
overload externalInstanceMethod(#NSTextView, #"drawsBackground") = Bool;
overload externalInstanceMethod(#NSTextView, #"setDrawsBackground:") = Void, Bool;
overload externalInstanceMethod(#NSTextView, #"backgroundColor") = NSColor;
overload externalInstanceMethod(#NSTextView, #"setBackgroundColor:") = Void, NSColor;
overload externalInstanceMethod(#NSTextView, #"isFieldEditor") = Bool;
overload externalInstanceMethod(#NSTextView, #"setFieldEditor:") = Void, Bool;
overload externalInstanceMethod(#NSTextView, #"usesFontPanel") = Bool;
overload externalInstanceMethod(#NSTextView, #"setUsesFontPanel:") = Void, Bool;
overload externalInstanceMethod(#NSTextView, #"isRulerVisible") = Bool;
overload externalInstanceMethod(#NSTextView, #"setSelectedRange:") = Void, NSRange;
overload externalInstanceMethod(#NSTextView, #"allowedInputSourceLocales") = NSArray;
overload externalInstanceMethod(#NSTextView, #"setAllowedInputSourceLocales:") = Void, NSArray;
overload externalInstanceMethod(#NSTextView, #"smartInsertDeleteEnabled") = Bool;
overload externalInstanceMethod(#NSTextView, #"setSmartInsertDeleteEnabled:") = Void, Bool;
overload externalInstanceMethod(#NSTextView, #"smartDeleteRangeForProposedRange:") = NSRange, NSRange;
overload externalInstanceMethod(#NSTextView, #"toggleSmartInsertDelete:") = Void, Id;
overload externalInstanceMethod(#NSTextView, #"smartInsertForString:replacingRange:beforeString:afterString:") = Void, NSString, NSRange, Pointer[NSString], Pointer[NSString];
overload externalInstanceMethod(#NSTextView, #"smartInsertBeforeStringForString:replacingRange:") = NSString, NSString, NSRange;
overload externalInstanceMethod(#NSTextView, #"smartInsertAfterStringForString:replacingRange:") = NSString, NSString, NSRange;
overload externalInstanceMethod(#NSTextView, #"setAutomaticQuoteSubstitutionEnabled:") = Void, Bool;
overload externalInstanceMethod(#NSTextView, #"isAutomaticQuoteSubstitutionEnabled") = Bool;
overload externalInstanceMethod(#NSTextView, #"toggleAutomaticQuoteSubstitution:") = Void, Id;
overload externalInstanceMethod(#NSTextView, #"setAutomaticLinkDetectionEnabled:") = Void, Bool;
overload externalInstanceMethod(#NSTextView, #"isAutomaticLinkDetectionEnabled") = Bool;
overload externalInstanceMethod(#NSTextView, #"toggleAutomaticLinkDetection:") = Void, Id;
overload externalInstanceMethod(#NSTextView, #"setAutomaticDataDetectionEnabled:") = Void, Bool;
overload externalInstanceMethod(#NSTextView, #"isAutomaticDataDetectionEnabled") = Bool;
overload externalInstanceMethod(#NSTextView, #"toggleAutomaticDataDetection:") = Void, Id;
overload externalInstanceMethod(#NSTextView, #"setAutomaticDashSubstitutionEnabled:") = Void, Bool;
overload externalInstanceMethod(#NSTextView, #"isAutomaticDashSubstitutionEnabled") = Bool;
overload externalInstanceMethod(#NSTextView, #"toggleAutomaticDashSubstitution:") = Void, Id;
overload externalInstanceMethod(#NSTextView, #"setAutomaticTextReplacementEnabled:") = Void, Bool;
overload externalInstanceMethod(#NSTextView, #"isAutomaticTextReplacementEnabled") = Bool;
overload externalInstanceMethod(#NSTextView, #"toggleAutomaticTextReplacement:") = Void, Id;
overload externalInstanceMethod(#NSTextView, #"setAutomaticSpellingCorrectionEnabled:") = Void, Bool;
overload externalInstanceMethod(#NSTextView, #"isAutomaticSpellingCorrectionEnabled") = Bool;
overload externalInstanceMethod(#NSTextView, #"toggleAutomaticSpellingCorrection:") = Void, Id;
overload externalInstanceMethod(#NSTextView, #"enabledTextCheckingTypes") = UInt64;
overload externalInstanceMethod(#NSTextView, #"setEnabledTextCheckingTypes:") = Void, UInt64;
overload externalInstanceMethod(#NSTextView, #"checkTextInRange:types:options:") = Void, NSRange, UInt64, NSDictionary;
overload externalInstanceMethod(#NSTextView, #"handleTextCheckingResults:forRange:types:options:orthography:wordCount:") = Void, NSArray, NSRange, UInt64, NSDictionary, NSOrthography, CLong;
overload externalInstanceMethod(#NSTextView, #"orderFrontSubstitutionsPanel:") = Void, Id;
overload externalInstanceMethod(#NSTextView, #"checkTextInSelection:") = Void, Id;
overload externalInstanceMethod(#NSTextView, #"checkTextInDocument:") = Void, Id;
overload externalInstanceMethod(#NSTextView, #"toggleBaseWritingDirection:") = Void, Id;

record NSTokenField = externalClass(NSTextField);
overload externalInstanceMethod(#NSTokenField, #"setDelegate:") = Void, Id;
overload externalInstanceMethod(#NSTokenField, #"delegate") = Id;
overload externalInstanceMethod(#NSTokenField, #"setTokenStyle:") = Void, CULong;
overload externalInstanceMethod(#NSTokenField, #"tokenStyle") = CULong;
overload externalInstanceMethod(#NSTokenField, #"setCompletionDelay:") = Void, Double;
overload externalInstanceMethod(#NSTokenField, #"completionDelay") = Double;
overload externalClassMethod(#NSTokenField, #"defaultCompletionDelay") = Double;
overload externalInstanceMethod(#NSTokenField, #"setTokenizingCharacterSet:") = Void, NSCharacterSet;
overload externalInstanceMethod(#NSTokenField, #"tokenizingCharacterSet") = NSCharacterSet;
overload externalClassMethod(#NSTokenField, #"defaultTokenizingCharacterSet") = NSCharacterSet;

record NSTokenFieldCell = externalClass(NSTextFieldCell);
overload externalInstanceMethod(#NSTokenFieldCell, #"setTokenStyle:") = Void, CULong;
overload externalInstanceMethod(#NSTokenFieldCell, #"tokenStyle") = CULong;
overload externalInstanceMethod(#NSTokenFieldCell, #"setCompletionDelay:") = Void, Double;
overload externalInstanceMethod(#NSTokenFieldCell, #"completionDelay") = Double;
overload externalClassMethod(#NSTokenFieldCell, #"defaultCompletionDelay") = Double;
overload externalInstanceMethod(#NSTokenFieldCell, #"setTokenizingCharacterSet:") = Void, NSCharacterSet;
overload externalInstanceMethod(#NSTokenFieldCell, #"tokenizingCharacterSet") = NSCharacterSet;
overload externalClassMethod(#NSTokenFieldCell, #"defaultTokenizingCharacterSet") = NSCharacterSet;
overload externalInstanceMethod(#NSTokenFieldCell, #"setDelegate:") = Void, Id;
overload externalInstanceMethod(#NSTokenFieldCell, #"delegate") = Id;

record NSToolbar = externalClass(NSObject);
overload externalInstanceMethod(#NSToolbar, #"initWithIdentifier:") = Id, NSString;
overload externalInstanceMethod(#NSToolbar, #"insertItemWithItemIdentifier:atIndex:") = Void, NSString, CLong;
overload externalInstanceMethod(#NSToolbar, #"removeItemAtIndex:") = Void, CLong;
overload externalInstanceMethod(#NSToolbar, #"setDelegate:") = Void, Id;
overload externalInstanceMethod(#NSToolbar, #"delegate") = Id;
overload externalInstanceMethod(#NSToolbar, #"setVisible:") = Void, Bool;
overload externalInstanceMethod(#NSToolbar, #"isVisible") = Bool;
overload externalInstanceMethod(#NSToolbar, #"runCustomizationPalette:") = Void, Id;
overload externalInstanceMethod(#NSToolbar, #"customizationPaletteIsRunning") = Bool;
overload externalInstanceMethod(#NSToolbar, #"setDisplayMode:") = Void, CULong;
overload externalInstanceMethod(#NSToolbar, #"displayMode") = CULong;
overload externalInstanceMethod(#NSToolbar, #"setSelectedItemIdentifier:") = Void, NSString;
overload externalInstanceMethod(#NSToolbar, #"selectedItemIdentifier") = NSString;
overload externalInstanceMethod(#NSToolbar, #"setSizeMode:") = Void, CULong;
overload externalInstanceMethod(#NSToolbar, #"sizeMode") = CULong;
overload externalInstanceMethod(#NSToolbar, #"setShowsBaselineSeparator:") = Void, Bool;
overload externalInstanceMethod(#NSToolbar, #"showsBaselineSeparator") = Bool;
overload externalInstanceMethod(#NSToolbar, #"setAllowsUserCustomization:") = Void, Bool;
overload externalInstanceMethod(#NSToolbar, #"allowsUserCustomization") = Bool;
overload externalInstanceMethod(#NSToolbar, #"identifier") = NSString;
overload externalInstanceMethod(#NSToolbar, #"items") = NSArray;
overload externalInstanceMethod(#NSToolbar, #"visibleItems") = NSArray;
overload externalInstanceMethod(#NSToolbar, #"setAutosavesConfiguration:") = Void, Bool;
overload externalInstanceMethod(#NSToolbar, #"autosavesConfiguration") = Bool;
overload externalInstanceMethod(#NSToolbar, #"setConfigurationFromDictionary:") = Void, NSDictionary;
overload externalInstanceMethod(#NSToolbar, #"configurationDictionary") = NSDictionary;
overload externalInstanceMethod(#NSToolbar, #"validateVisibleItems") = Void;

record NSToolbarItem = externalClass(NSObject);
overload externalInstanceMethod(#NSToolbarItem, #"copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#NSToolbarItem, #"action") = SelectorHandle;
overload externalInstanceMethod(#NSToolbarItem, #"tag") = CLong;
overload externalInstanceMethod(#NSToolbarItem, #"initWithItemIdentifier:") = Id, NSString;
overload externalInstanceMethod(#NSToolbarItem, #"itemIdentifier") = NSString;
overload externalInstanceMethod(#NSToolbarItem, #"toolbar") = NSToolbar;
overload externalInstanceMethod(#NSToolbarItem, #"setLabel:") = Void, NSString;
overload externalInstanceMethod(#NSToolbarItem, #"label") = NSString;
overload externalInstanceMethod(#NSToolbarItem, #"setPaletteLabel:") = Void, NSString;
overload externalInstanceMethod(#NSToolbarItem, #"paletteLabel") = NSString;
overload externalInstanceMethod(#NSToolbarItem, #"setToolTip:") = Void, NSString;
overload externalInstanceMethod(#NSToolbarItem, #"toolTip") = NSString;
overload externalInstanceMethod(#NSToolbarItem, #"setMenuFormRepresentation:") = Void, NSMenuItem;
overload externalInstanceMethod(#NSToolbarItem, #"menuFormRepresentation") = NSMenuItem;
overload externalInstanceMethod(#NSToolbarItem, #"setTag:") = Void, CLong;
overload externalInstanceMethod(#NSToolbarItem, #"tag") = CLong;
overload externalInstanceMethod(#NSToolbarItem, #"setTarget:") = Void, Id;
overload externalInstanceMethod(#NSToolbarItem, #"target") = Id;
overload externalInstanceMethod(#NSToolbarItem, #"setAction:") = Void, SelectorHandle;
overload externalInstanceMethod(#NSToolbarItem, #"action") = SelectorHandle;
overload externalInstanceMethod(#NSToolbarItem, #"setEnabled:") = Void, Bool;
overload externalInstanceMethod(#NSToolbarItem, #"isEnabled") = Bool;
overload externalInstanceMethod(#NSToolbarItem, #"setImage:") = Void, NSImage;
overload externalInstanceMethod(#NSToolbarItem, #"image") = NSImage;
overload externalInstanceMethod(#NSToolbarItem, #"setView:") = Void, NSView;
overload externalInstanceMethod(#NSToolbarItem, #"view") = NSView;
overload externalInstanceMethod(#NSToolbarItem, #"setMinSize:") = Void, NSSize;
overload externalInstanceMethod(#NSToolbarItem, #"minSize") = NSSize;
overload externalInstanceMethod(#NSToolbarItem, #"setMaxSize:") = Void, NSSize;
overload externalInstanceMethod(#NSToolbarItem, #"maxSize") = NSSize;
overload externalInstanceMethod(#NSToolbarItem, #"setVisibilityPriority:") = Void, CLong;
overload externalInstanceMethod(#NSToolbarItem, #"visibilityPriority") = CLong;
overload externalInstanceMethod(#NSToolbarItem, #"validate") = Void;
overload externalInstanceMethod(#NSToolbarItem, #"setAutovalidates:") = Void, Bool;
overload externalInstanceMethod(#NSToolbarItem, #"autovalidates") = Bool;
overload externalInstanceMethod(#NSToolbarItem, #"allowsDuplicatesInToolbar") = Bool;

record NSToolbarItemGroup = externalClass(NSToolbarItem);
overload externalInstanceMethod(#NSToolbarItemGroup, #"setSubitems:") = Void, NSArray;
overload externalInstanceMethod(#NSToolbarItemGroup, #"subitems") = NSArray;

record NSTouch = externalClass(NSObject);
overload externalInstanceMethod(#NSTouch, #"copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#NSTouch, #"identity") = Id;
overload externalInstanceMethod(#NSTouch, #"phase") = CULong;
overload externalInstanceMethod(#NSTouch, #"normalizedPosition") = NSPoint;
overload externalInstanceMethod(#NSTouch, #"isResting") = Bool;
overload externalInstanceMethod(#NSTouch, #"device") = Id;
overload externalInstanceMethod(#NSTouch, #"deviceSize") = NSSize;

record NSTrackingArea = externalClass(NSObject);
overload externalInstanceMethod(#NSTrackingArea, #"copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(#NSTrackingArea, #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSTrackingArea, #"initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#NSTrackingArea, #"initWithRect:options:owner:userInfo:") = Id, NSRect, CULong, Id, NSDictionary;
overload externalInstanceMethod(#NSTrackingArea, #"rect") = NSRect;
overload externalInstanceMethod(#NSTrackingArea, #"options") = CULong;
overload externalInstanceMethod(#NSTrackingArea, #"owner") = Id;
overload externalInstanceMethod(#NSTrackingArea, #"userInfo") = NSDictionary;

record NSTreeController = externalClass(NSObjectController);
overload externalInstanceMethod(#NSTreeController, #"rearrangeObjects") = Void;
overload externalInstanceMethod(#NSTreeController, #"arrangedObjects") = Id;
overload externalInstanceMethod(#NSTreeController, #"setChildrenKeyPath:") = Void, NSString;
overload externalInstanceMethod(#NSTreeController, #"childrenKeyPath") = NSString;
overload externalInstanceMethod(#NSTreeController, #"setCountKeyPath:") = Void, NSString;
overload externalInstanceMethod(#NSTreeController, #"countKeyPath") = NSString;
overload externalInstanceMethod(#NSTreeController, #"setLeafKeyPath:") = Void, NSString;
overload externalInstanceMethod(#NSTreeController, #"leafKeyPath") = NSString;
overload externalInstanceMethod(#NSTreeController, #"setSortDescriptors:") = Void, NSArray;
overload externalInstanceMethod(#NSTreeController, #"sortDescriptors") = NSArray;
overload externalInstanceMethod(#NSTreeController, #"content") = Id;
overload externalInstanceMethod(#NSTreeController, #"setContent:") = Void, Id;
overload externalInstanceMethod(#NSTreeController, #"add:") = Void, Id;
overload externalInstanceMethod(#NSTreeController, #"remove:") = Void, Id;
overload externalInstanceMethod(#NSTreeController, #"addChild:") = Void, Id;
overload externalInstanceMethod(#NSTreeController, #"insert:") = Void, Id;
overload externalInstanceMethod(#NSTreeController, #"insertChild:") = Void, Id;
overload externalInstanceMethod(#NSTreeController, #"canInsert") = Bool;
overload externalInstanceMethod(#NSTreeController, #"canInsertChild") = Bool;
overload externalInstanceMethod(#NSTreeController, #"canAddChild") = Bool;
overload externalInstanceMethod(#NSTreeController, #"insertObject:atArrangedObjectIndexPath:") = Void, Id, NSIndexPath;
overload externalInstanceMethod(#NSTreeController, #"insertObjects:atArrangedObjectIndexPaths:") = Void, NSArray, NSArray;
overload externalInstanceMethod(#NSTreeController, #"removeObjectAtArrangedObjectIndexPath:") = Void, NSIndexPath;
overload externalInstanceMethod(#NSTreeController, #"removeObjectsAtArrangedObjectIndexPaths:") = Void, NSArray;
overload externalInstanceMethod(#NSTreeController, #"setAvoidsEmptySelection:") = Void, Bool;
overload externalInstanceMethod(#NSTreeController, #"avoidsEmptySelection") = Bool;
overload externalInstanceMethod(#NSTreeController, #"setPreservesSelection:") = Void, Bool;
overload externalInstanceMethod(#NSTreeController, #"preservesSelection") = Bool;
overload externalInstanceMethod(#NSTreeController, #"setSelectsInsertedObjects:") = Void, Bool;
overload externalInstanceMethod(#NSTreeController, #"selectsInsertedObjects") = Bool;
overload externalInstanceMethod(#NSTreeController, #"setAlwaysUsesMultipleValuesMarker:") = Void, Bool;
overload externalInstanceMethod(#NSTreeController, #"alwaysUsesMultipleValuesMarker") = Bool;
overload externalInstanceMethod(#NSTreeController, #"selectedObjects") = NSArray;
overload externalInstanceMethod(#NSTreeController, #"setSelectionIndexPaths:") = Bool, NSArray;
overload externalInstanceMethod(#NSTreeController, #"selectionIndexPaths") = NSArray;
overload externalInstanceMethod(#NSTreeController, #"setSelectionIndexPath:") = Bool, NSIndexPath;
overload externalInstanceMethod(#NSTreeController, #"selectionIndexPath") = NSIndexPath;
overload externalInstanceMethod(#NSTreeController, #"addSelectionIndexPaths:") = Bool, NSArray;
overload externalInstanceMethod(#NSTreeController, #"removeSelectionIndexPaths:") = Bool, NSArray;
overload externalInstanceMethod(#NSTreeController, #"selectedNodes") = NSArray;
overload externalInstanceMethod(#NSTreeController, #"moveNode:toIndexPath:") = Void, NSTreeNode, NSIndexPath;
overload externalInstanceMethod(#NSTreeController, #"moveNodes:toIndexPath:") = Void, NSArray, NSIndexPath;
overload externalInstanceMethod(#NSTreeController, #"childrenKeyPathForNode:") = NSString, NSTreeNode;
overload externalInstanceMethod(#NSTreeController, #"countKeyPathForNode:") = NSString, NSTreeNode;
overload externalInstanceMethod(#NSTreeController, #"leafKeyPathForNode:") = NSString, NSTreeNode;

record NSTreeNode = externalClass(NSObject);
overload externalClassMethod(#NSTreeNode, #"treeNodeWithRepresentedObject:") = Id, Id;
overload externalInstanceMethod(#NSTreeNode, #"initWithRepresentedObject:") = Id, Id;
overload externalInstanceMethod(#NSTreeNode, #"representedObject") = Id;
overload externalInstanceMethod(#NSTreeNode, #"indexPath") = NSIndexPath;
overload externalInstanceMethod(#NSTreeNode, #"isLeaf") = Bool;
overload externalInstanceMethod(#NSTreeNode, #"childNodes") = NSArray;
overload externalInstanceMethod(#NSTreeNode, #"mutableChildNodes") = NSMutableArray;
overload externalInstanceMethod(#NSTreeNode, #"descendantNodeAtIndexPath:") = NSTreeNode, NSIndexPath;
overload externalInstanceMethod(#NSTreeNode, #"parentNode") = NSTreeNode;
overload externalInstanceMethod(#NSTreeNode, #"sortWithSortDescriptors:recursively:") = Void, NSArray, Bool;

record NSTypesetter = externalClass(NSObject);
overload externalInstanceMethod(#NSTypesetter, #"usesFontLeading") = Bool;
overload externalInstanceMethod(#NSTypesetter, #"setUsesFontLeading:") = Void, Bool;
overload externalInstanceMethod(#NSTypesetter, #"typesetterBehavior") = CLong;
overload externalInstanceMethod(#NSTypesetter, #"setTypesetterBehavior:") = Void, CLong;
overload externalInstanceMethod(#NSTypesetter, #"hyphenationFactor") = Float;
overload externalInstanceMethod(#NSTypesetter, #"setHyphenationFactor:") = Void, Float;
overload externalInstanceMethod(#NSTypesetter, #"lineFragmentPadding") = Double;
overload externalInstanceMethod(#NSTypesetter, #"setLineFragmentPadding:") = Void, Double;
overload externalInstanceMethod(#NSTypesetter, #"substituteFontForFont:") = NSFont, NSFont;
overload externalInstanceMethod(#NSTypesetter, #"textTabForGlyphLocation:writingDirection:maxLocation:") = NSTextTab, Double, CLong, Double;
overload externalInstanceMethod(#NSTypesetter, #"bidiProcessingEnabled") = Bool;
overload externalInstanceMethod(#NSTypesetter, #"setBidiProcessingEnabled:") = Void, Bool;
overload externalInstanceMethod(#NSTypesetter, #"setAttributedString:") = Void, NSAttributedString;
overload externalInstanceMethod(#NSTypesetter, #"attributedString") = NSAttributedString;
overload externalInstanceMethod(#NSTypesetter, #"setParagraphGlyphRange:separatorGlyphRange:") = Void, NSRange, NSRange;
overload externalInstanceMethod(#NSTypesetter, #"paragraphGlyphRange") = NSRange;
overload externalInstanceMethod(#NSTypesetter, #"paragraphSeparatorGlyphRange") = NSRange;
overload externalInstanceMethod(#NSTypesetter, #"paragraphCharacterRange") = NSRange;
overload externalInstanceMethod(#NSTypesetter, #"paragraphSeparatorCharacterRange") = NSRange;
overload externalInstanceMethod(#NSTypesetter, #"layoutParagraphAtPoint:") = CULong, NSPointPointer;
overload externalInstanceMethod(#NSTypesetter, #"beginParagraph") = Void;
overload externalInstanceMethod(#NSTypesetter, #"endParagraph") = Void;
overload externalInstanceMethod(#NSTypesetter, #"beginLineWithGlyphAtIndex:") = Void, CULong;
overload externalInstanceMethod(#NSTypesetter, #"endLineWithGlyphRange:") = Void, NSRange;
overload externalInstanceMethod(#NSTypesetter, #"lineSpacingAfterGlyphAtIndex:withProposedLineFragmentRect:") = Double, CULong, NSRect;
overload externalInstanceMethod(#NSTypesetter, #"paragraphSpacingBeforeGlyphAtIndex:withProposedLineFragmentRect:") = Double, CULong, NSRect;
overload externalInstanceMethod(#NSTypesetter, #"paragraphSpacingAfterGlyphAtIndex:withProposedLineFragmentRect:") = Double, CULong, NSRect;
overload externalInstanceMethod(#NSTypesetter, #"getLineFragmentRect:usedRect:forParagraphSeparatorGlyphRange:atProposedOrigin:") = Void, NSRectPointer, NSRectPointer, NSRange, NSPoint;
overload externalInstanceMethod(#NSTypesetter, #"attributesForExtraLineFragment") = NSDictionary;
overload externalInstanceMethod(#NSTypesetter, #"actionForControlCharacterAtIndex:") = CULong, CULong;
overload externalInstanceMethod(#NSTypesetter, #"layoutManager") = NSLayoutManager;
overload externalInstanceMethod(#NSTypesetter, #"textContainers") = NSArray;
overload externalInstanceMethod(#NSTypesetter, #"currentTextContainer") = NSTextContainer;
overload externalInstanceMethod(#NSTypesetter, #"currentParagraphStyle") = NSParagraphStyle;
overload externalInstanceMethod(#NSTypesetter, #"setHardInvalidation:forGlyphRange:") = Void, Bool, NSRange;
overload externalInstanceMethod(#NSTypesetter, #"layoutGlyphsInLayoutManager:startingAtGlyphIndex:maxNumberOfLineFragments:nextGlyphIndex:") = Void, NSLayoutManager, CULong, CULong, Pointer[CULong];
overload externalInstanceMethod(#NSTypesetter, #"layoutCharactersInRange:forLayoutManager:maximumNumberOfLineFragments:") = NSRange, NSRange, NSLayoutManager, CULong;
overload externalClassMethod(#NSTypesetter, #"printingAdjustmentInLayoutManager:forNominallySpacedGlyphRange:packedGlyphs:count:") = NSSize, NSLayoutManager, NSRange, Pointer[CUChar], CULong;
overload externalInstanceMethod(#NSTypesetter, #"baselineOffsetInLayoutManager:glyphIndex:") = Double, NSLayoutManager, CULong;
overload externalClassMethod(#NSTypesetter, #"sharedSystemTypesetter") = Id;
overload externalClassMethod(#NSTypesetter, #"sharedSystemTypesetterForBehavior:") = Id, CLong;
overload externalClassMethod(#NSTypesetter, #"defaultTypesetterBehavior") = CLong;
overload externalInstanceMethod(#NSTypesetter, #"willSetLineFragmentRect:forGlyphRange:usedRect:baselineOffset:") = Void, NSRectPointer, NSRange, NSRectPointer, Pointer[Double];
overload externalInstanceMethod(#NSTypesetter, #"shouldBreakLineByWordBeforeCharacterAtIndex:") = Bool, CULong;
overload externalInstanceMethod(#NSTypesetter, #"shouldBreakLineByHyphenatingBeforeCharacterAtIndex:") = Bool, CULong;
overload externalInstanceMethod(#NSTypesetter, #"hyphenationFactorForGlyphAtIndex:") = Float, CULong;
overload externalInstanceMethod(#NSTypesetter, #"hyphenCharacterForGlyphAtIndex:") = UInt, CULong;
overload externalInstanceMethod(#NSTypesetter, #"boundingBoxForControlGlyphAtIndex:forTextContainer:proposedLineFragment:glyphPosition:characterIndex:") = NSRect, CULong, NSTextContainer, NSRect, NSPoint, CULong;
overload externalInstanceMethod(#NSTypesetter, #"characterRangeForGlyphRange:actualGlyphRange:") = NSRange, NSRange, NSRangePointer;
overload externalInstanceMethod(#NSTypesetter, #"glyphRangeForCharacterRange:actualCharacterRange:") = NSRange, NSRange, NSRangePointer;
overload externalInstanceMethod(#NSTypesetter, #"getGlyphsInRange:glyphs:characterIndexes:glyphInscriptions:elasticBits:bidiLevels:") = CULong, NSRange, Pointer[UInt], Pointer[CULong], Pointer[CULong], Pointer[Bool], Pointer[CUChar];
overload externalInstanceMethod(#NSTypesetter, #"getLineFragmentRect:usedRect:remainingRect:forStartingGlyphAtIndex:proposedRect:lineSpacing:paragraphSpacingBefore:paragraphSpacingAfter:") = Void, NSRectPointer, NSRectPointer, NSRectPointer, CULong, NSRect, Double, Double, Double;
overload externalInstanceMethod(#NSTypesetter, #"setLineFragmentRect:forGlyphRange:usedRect:baselineOffset:") = Void, NSRect, NSRange, NSRect, Double;
overload externalInstanceMethod(#NSTypesetter, #"substituteGlyphsInRange:withGlyphs:") = Void, NSRange, Pointer[UInt];
overload externalInstanceMethod(#NSTypesetter, #"insertGlyph:atGlyphIndex:characterIndex:") = Void, UInt, CULong, CULong;
overload externalInstanceMethod(#NSTypesetter, #"deleteGlyphsInRange:") = Void, NSRange;
overload externalInstanceMethod(#NSTypesetter, #"setNotShownAttribute:forGlyphRange:") = Void, Bool, NSRange;
overload externalInstanceMethod(#NSTypesetter, #"setDrawsOutsideLineFragment:forGlyphRange:") = Void, Bool, NSRange;
overload externalInstanceMethod(#NSTypesetter, #"setLocation:withAdvancements:forStartOfGlyphRange:") = Void, NSPoint, Pointer[Double], NSRange;
overload externalInstanceMethod(#NSTypesetter, #"setAttachmentSize:forGlyphRange:") = Void, NSSize, NSRange;
overload externalInstanceMethod(#NSTypesetter, #"setBidiLevels:forGlyphRange:") = Void, Pointer[CUChar], NSRange;

overload externalClassMethod(#NSURL, #"URLFromPasteboard:") = NSURL, NSPasteboard;
overload externalInstanceMethod(#NSURL, #"writeToPasteboard:") = Void, NSPasteboard;

record NSUserDefaultsController = externalClass(NSController);
overload externalClassMethod(#NSUserDefaultsController, #"sharedUserDefaultsController") = Id;
overload externalInstanceMethod(#NSUserDefaultsController, #"initWithDefaults:initialValues:") = Id, NSUserDefaults, NSDictionary;
overload externalInstanceMethod(#NSUserDefaultsController, #"defaults") = NSUserDefaults;
overload externalInstanceMethod(#NSUserDefaultsController, #"setInitialValues:") = Void, NSDictionary;
overload externalInstanceMethod(#NSUserDefaultsController, #"initialValues") = NSDictionary;
overload externalInstanceMethod(#NSUserDefaultsController, #"setAppliesImmediately:") = Void, Bool;
overload externalInstanceMethod(#NSUserDefaultsController, #"appliesImmediately") = Bool;
overload externalInstanceMethod(#NSUserDefaultsController, #"hasUnappliedChanges") = Bool;
overload externalInstanceMethod(#NSUserDefaultsController, #"values") = Id;
overload externalInstanceMethod(#NSUserDefaultsController, #"revert:") = Void, Id;
overload externalInstanceMethod(#NSUserDefaultsController, #"save:") = Void, Id;
overload externalInstanceMethod(#NSUserDefaultsController, #"revertToInitialValues:") = Void, Id;

record NSView = externalClass(NSResponder);
overload externalInstanceMethod(#NSView, #"animator") = Id;
overload externalInstanceMethod(#NSView, #"animations") = NSDictionary;
overload externalInstanceMethod(#NSView, #"setAnimations:") = Void, NSDictionary;
overload externalInstanceMethod(#NSView, #"animationForKey:") = Id, NSString;
overload externalClassMethod(#NSView, #"defaultAnimationForKey:") = Id, NSString;
overload externalInstanceMethod(#NSView, #"initWithFrame:") = Id, NSRect;
overload externalInstanceMethod(#NSView, #"window") = NSWindow;
overload externalInstanceMethod(#NSView, #"superview") = NSView;
overload externalInstanceMethod(#NSView, #"subviews") = NSArray;
overload externalInstanceMethod(#NSView, #"isDescendantOf:") = Bool, NSView;
overload externalInstanceMethod(#NSView, #"ancestorSharedWithView:") = NSView, NSView;
overload externalInstanceMethod(#NSView, #"opaqueAncestor") = NSView;
overload externalInstanceMethod(#NSView, #"setHidden:") = Void, Bool;
overload externalInstanceMethod(#NSView, #"isHidden") = Bool;
overload externalInstanceMethod(#NSView, #"isHiddenOrHasHiddenAncestor") = Bool;
overload externalInstanceMethod(#NSView, #"getRectsBeingDrawn:count:") = Void, Pointer[Pointer[NSRect]], Pointer[CLong];
overload externalInstanceMethod(#NSView, #"needsToDrawRect:") = Bool, NSRect;
overload externalInstanceMethod(#NSView, #"wantsDefaultClipping") = Bool;
overload externalInstanceMethod(#NSView, #"viewDidHide") = Void;
overload externalInstanceMethod(#NSView, #"viewDidUnhide") = Void;
overload externalInstanceMethod(#NSView, #"setSubviews:") = Void, NSArray;
overload externalInstanceMethod(#NSView, #"addSubview:") = Void, NSView;
overload externalInstanceMethod(#NSView, #"addSubview:positioned:relativeTo:") = Void, NSView, CLong, NSView;
overload externalInstanceMethod(#NSView, #"sortSubviewsUsingFunction:context:") = Void, CCodePointer[[Id,Id,RawPointer],[CLong]], RawPointer;
overload externalInstanceMethod(#NSView, #"viewWillMoveToWindow:") = Void, NSWindow;
overload externalInstanceMethod(#NSView, #"viewDidMoveToWindow") = Void;
overload externalInstanceMethod(#NSView, #"viewWillMoveToSuperview:") = Void, NSView;
overload externalInstanceMethod(#NSView, #"viewDidMoveToSuperview") = Void;
overload externalInstanceMethod(#NSView, #"didAddSubview:") = Void, NSView;
overload externalInstanceMethod(#NSView, #"willRemoveSubview:") = Void, NSView;
overload externalInstanceMethod(#NSView, #"removeFromSuperview") = Void;
overload externalInstanceMethod(#NSView, #"replaceSubview:with:") = Void, NSView, NSView;
overload externalInstanceMethod(#NSView, #"removeFromSuperviewWithoutNeedingDisplay") = Void;
overload externalInstanceMethod(#NSView, #"setPostsFrameChangedNotifications:") = Void, Bool;
overload externalInstanceMethod(#NSView, #"postsFrameChangedNotifications") = Bool;
overload externalInstanceMethod(#NSView, #"resizeSubviewsWithOldSize:") = Void, NSSize;
overload externalInstanceMethod(#NSView, #"resizeWithOldSuperviewSize:") = Void, NSSize;
overload externalInstanceMethod(#NSView, #"setAutoresizesSubviews:") = Void, Bool;
overload externalInstanceMethod(#NSView, #"autoresizesSubviews") = Bool;
overload externalInstanceMethod(#NSView, #"setAutoresizingMask:") = Void, CULong;
overload externalInstanceMethod(#NSView, #"autoresizingMask") = CULong;
overload externalInstanceMethod(#NSView, #"setFrameOrigin:") = Void, NSPoint;
overload externalInstanceMethod(#NSView, #"setFrameSize:") = Void, NSSize;
overload externalInstanceMethod(#NSView, #"setFrame:") = Void, NSRect;
overload externalInstanceMethod(#NSView, #"frame") = NSRect;
overload externalInstanceMethod(#NSView, #"setFrameRotation:") = Void, Double;
overload externalInstanceMethod(#NSView, #"frameRotation") = Double;
overload externalInstanceMethod(#NSView, #"setFrameCenterRotation:") = Void, Double;
overload externalInstanceMethod(#NSView, #"frameCenterRotation") = Double;
overload externalInstanceMethod(#NSView, #"setBoundsOrigin:") = Void, NSPoint;
overload externalInstanceMethod(#NSView, #"setBoundsSize:") = Void, NSSize;
overload externalInstanceMethod(#NSView, #"setBoundsRotation:") = Void, Double;
overload externalInstanceMethod(#NSView, #"boundsRotation") = Double;
overload externalInstanceMethod(#NSView, #"translateOriginToPoint:") = Void, NSPoint;
overload externalInstanceMethod(#NSView, #"scaleUnitSquareToSize:") = Void, NSSize;
overload externalInstanceMethod(#NSView, #"rotateByAngle:") = Void, Double;
overload externalInstanceMethod(#NSView, #"setBounds:") = Void, NSRect;
overload externalInstanceMethod(#NSView, #"bounds") = NSRect;
overload externalInstanceMethod(#NSView, #"isFlipped") = Bool;
overload externalInstanceMethod(#NSView, #"isRotatedFromBase") = Bool;
overload externalInstanceMethod(#NSView, #"isRotatedOrScaledFromBase") = Bool;
overload externalInstanceMethod(#NSView, #"isOpaque") = Bool;
overload externalInstanceMethod(#NSView, #"convertPoint:fromView:") = NSPoint, NSPoint, NSView;
overload externalInstanceMethod(#NSView, #"convertPoint:toView:") = NSPoint, NSPoint, NSView;
overload externalInstanceMethod(#NSView, #"convertSize:fromView:") = NSSize, NSSize, NSView;
overload externalInstanceMethod(#NSView, #"convertSize:toView:") = NSSize, NSSize, NSView;
overload externalInstanceMethod(#NSView, #"convertRect:fromView:") = NSRect, NSRect, NSView;
overload externalInstanceMethod(#NSView, #"convertRect:toView:") = NSRect, NSRect, NSView;
overload externalInstanceMethod(#NSView, #"centerScanRect:") = NSRect, NSRect;
overload externalInstanceMethod(#NSView, #"convertPointToBase:") = NSPoint, NSPoint;
overload externalInstanceMethod(#NSView, #"convertPointFromBase:") = NSPoint, NSPoint;
overload externalInstanceMethod(#NSView, #"convertSizeToBase:") = NSSize, NSSize;
overload externalInstanceMethod(#NSView, #"convertSizeFromBase:") = NSSize, NSSize;
overload externalInstanceMethod(#NSView, #"convertRectToBase:") = NSRect, NSRect;
overload externalInstanceMethod(#NSView, #"convertRectFromBase:") = NSRect, NSRect;
overload externalInstanceMethod(#NSView, #"canDrawConcurrently") = Bool;
overload externalInstanceMethod(#NSView, #"setCanDrawConcurrently:") = Void, Bool;
overload externalInstanceMethod(#NSView, #"canDraw") = Bool;
overload externalInstanceMethod(#NSView, #"setNeedsDisplay:") = Void, Bool;
overload externalInstanceMethod(#NSView, #"setNeedsDisplayInRect:") = Void, NSRect;
overload externalInstanceMethod(#NSView, #"needsDisplay") = Bool;
overload externalInstanceMethod(#NSView, #"lockFocus") = Void;
overload externalInstanceMethod(#NSView, #"unlockFocus") = Void;
overload externalInstanceMethod(#NSView, #"lockFocusIfCanDraw") = Bool;
overload externalInstanceMethod(#NSView, #"lockFocusIfCanDrawInContext:") = Bool, NSGraphicsContext;
overload externalClassMethod(#NSView, #"focusView") = NSView;
overload externalInstanceMethod(#NSView, #"visibleRect") = NSRect;
overload externalInstanceMethod(#NSView, #"display") = Void;
overload externalInstanceMethod(#NSView, #"displayIfNeeded") = Void;
overload externalInstanceMethod(#NSView, #"displayIfNeededIgnoringOpacity") = Void;
overload externalInstanceMethod(#NSView, #"displayRect:") = Void, NSRect;
overload externalInstanceMethod(#NSView, #"displayIfNeededInRect:") = Void, NSRect;
overload externalInstanceMethod(#NSView, #"displayRectIgnoringOpacity:") = Void, NSRect;
overload externalInstanceMethod(#NSView, #"displayIfNeededInRectIgnoringOpacity:") = Void, NSRect;
overload externalInstanceMethod(#NSView, #"drawRect:") = Void, NSRect;
overload externalInstanceMethod(#NSView, #"displayRectIgnoringOpacity:inContext:") = Void, NSRect, NSGraphicsContext;
overload externalInstanceMethod(#NSView, #"bitmapImageRepForCachingDisplayInRect:") = NSBitmapImageRep, NSRect;
overload externalInstanceMethod(#NSView, #"cacheDisplayInRect:toBitmapImageRep:") = Void, NSRect, NSBitmapImageRep;
overload externalInstanceMethod(#NSView, #"viewWillDraw") = Void;
overload externalInstanceMethod(#NSView, #"gState") = CLong;
overload externalInstanceMethod(#NSView, #"allocateGState") = Void;
overload externalInstanceMethod(#NSView, #"releaseGState") = Void;
overload externalInstanceMethod(#NSView, #"setUpGState") = Void;
overload externalInstanceMethod(#NSView, #"renewGState") = Void;
overload externalInstanceMethod(#NSView, #"scrollPoint:") = Void, NSPoint;
overload externalInstanceMethod(#NSView, #"scrollRectToVisible:") = Bool, NSRect;
overload externalInstanceMethod(#NSView, #"autoscroll:") = Bool, NSEvent;
overload externalInstanceMethod(#NSView, #"adjustScroll:") = NSRect, NSRect;
overload externalInstanceMethod(#NSView, #"scrollRect:by:") = Void, NSRect, NSSize;
overload externalInstanceMethod(#NSView, #"translateRectsNeedingDisplayInRect:by:") = Void, NSRect, NSSize;
overload externalInstanceMethod(#NSView, #"hitTest:") = NSView, NSPoint;
overload externalInstanceMethod(#NSView, #"mouse:inRect:") = Bool, NSPoint, NSRect;
overload externalInstanceMethod(#NSView, #"viewWithTag:") = Id, CLong;
overload externalInstanceMethod(#NSView, #"tag") = CLong;
overload externalInstanceMethod(#NSView, #"performKeyEquivalent:") = Bool, NSEvent;
overload externalInstanceMethod(#NSView, #"acceptsFirstMouse:") = Bool, NSEvent;
overload externalInstanceMethod(#NSView, #"shouldDelayWindowOrderingForEvent:") = Bool, NSEvent;
overload externalInstanceMethod(#NSView, #"needsPanelToBecomeKey") = Bool;
overload externalInstanceMethod(#NSView, #"mouseDownCanMoveWindow") = Bool;
overload externalInstanceMethod(#NSView, #"setAcceptsTouchEvents:") = Void, Bool;
overload externalInstanceMethod(#NSView, #"acceptsTouchEvents") = Bool;
overload externalInstanceMethod(#NSView, #"setWantsRestingTouches:") = Void, Bool;
overload externalInstanceMethod(#NSView, #"wantsRestingTouches") = Bool;
overload externalInstanceMethod(#NSView, #"addCursorRect:cursor:") = Void, NSRect, NSCursor;
overload externalInstanceMethod(#NSView, #"removeCursorRect:cursor:") = Void, NSRect, NSCursor;
overload externalInstanceMethod(#NSView, #"discardCursorRects") = Void;
overload externalInstanceMethod(#NSView, #"resetCursorRects") = Void;
overload externalInstanceMethod(#NSView, #"addTrackingRect:owner:userData:assumeInside:") = CLong, NSRect, Id, RawPointer, Bool;
overload externalInstanceMethod(#NSView, #"removeTrackingRect:") = Void, CLong;
overload externalInstanceMethod(#NSView, #"makeBackingLayer") = CALayer;
overload externalInstanceMethod(#NSView, #"layerContentsRedrawPolicy") = CLong;
overload externalInstanceMethod(#NSView, #"setLayerContentsRedrawPolicy:") = Void, CLong;
overload externalInstanceMethod(#NSView, #"layerContentsPlacement") = CLong;
overload externalInstanceMethod(#NSView, #"setLayerContentsPlacement:") = Void, CLong;
overload externalInstanceMethod(#NSView, #"setWantsLayer:") = Void, Bool;
overload externalInstanceMethod(#NSView, #"wantsLayer") = Bool;
overload externalInstanceMethod(#NSView, #"setLayer:") = Void, CALayer;
overload externalInstanceMethod(#NSView, #"layer") = CALayer;
overload externalInstanceMethod(#NSView, #"setAlphaValue:") = Void, Double;
overload externalInstanceMethod(#NSView, #"alphaValue") = Double;
overload externalInstanceMethod(#NSView, #"setBackgroundFilters:") = Void, NSArray;
overload externalInstanceMethod(#NSView, #"backgroundFilters") = NSArray;
overload externalInstanceMethod(#NSView, #"setCompositingFilter:") = Void, CIFilter;
overload externalInstanceMethod(#NSView, #"compositingFilter") = CIFilter;
overload externalInstanceMethod(#NSView, #"setContentFilters:") = Void, NSArray;
overload externalInstanceMethod(#NSView, #"contentFilters") = NSArray;
overload externalInstanceMethod(#NSView, #"setShadow:") = Void, NSShadow;
overload externalInstanceMethod(#NSView, #"shadow") = NSShadow;
overload externalInstanceMethod(#NSView, #"addTrackingArea:") = Void, NSTrackingArea;
overload externalInstanceMethod(#NSView, #"removeTrackingArea:") = Void, NSTrackingArea;
overload externalInstanceMethod(#NSView, #"trackingAreas") = NSArray;
overload externalInstanceMethod(#NSView, #"updateTrackingAreas") = Void;
overload externalInstanceMethod(#NSView, #"shouldDrawColor") = Bool;
overload externalInstanceMethod(#NSView, #"setPostsBoundsChangedNotifications:") = Void, Bool;
overload externalInstanceMethod(#NSView, #"postsBoundsChangedNotifications") = Bool;
overload externalInstanceMethod(#NSView, #"enclosingScrollView") = NSScrollView;
overload externalInstanceMethod(#NSView, #"menuForEvent:") = NSMenu, NSEvent;
overload externalClassMethod(#NSView, #"defaultMenu") = NSMenu;
overload externalInstanceMethod(#NSView, #"setToolTip:") = Void, NSString;
overload externalInstanceMethod(#NSView, #"toolTip") = NSString;
overload externalInstanceMethod(#NSView, #"addToolTipRect:owner:userData:") = CLong, NSRect, Id, RawPointer;
overload externalInstanceMethod(#NSView, #"removeToolTip:") = Void, CLong;
overload externalInstanceMethod(#NSView, #"removeAllToolTips") = Void;
overload externalInstanceMethod(#NSView, #"viewWillStartLiveResize") = Void;
overload externalInstanceMethod(#NSView, #"viewDidEndLiveResize") = Void;
overload externalInstanceMethod(#NSView, #"inLiveResize") = Bool;
overload externalInstanceMethod(#NSView, #"preservesContentDuringLiveResize") = Bool;
overload externalInstanceMethod(#NSView, #"rectPreservedDuringLiveResize") = NSRect;
overload externalInstanceMethod(#NSView, #"getRectsExposedDuringLiveResize:count:") = Void, Pointer[NSRect], Pointer[CLong];
overload externalInstanceMethod(#NSView, #"inputContext") = NSTextInputContext;
overload externalInstanceMethod(#NSView, #"performMnemonic:") = Bool, NSString;
overload externalInstanceMethod(#NSView, #"setNextKeyView:") = Void, NSView;
overload externalInstanceMethod(#NSView, #"nextKeyView") = NSView;
overload externalInstanceMethod(#NSView, #"previousKeyView") = NSView;
overload externalInstanceMethod(#NSView, #"nextValidKeyView") = NSView;
overload externalInstanceMethod(#NSView, #"previousValidKeyView") = NSView;
overload externalInstanceMethod(#NSView, #"canBecomeKeyView") = Bool;
overload externalInstanceMethod(#NSView, #"setKeyboardFocusRingNeedsDisplayInRect:") = Void, NSRect;
overload externalInstanceMethod(#NSView, #"setFocusRingType:") = Void, CULong;
overload externalInstanceMethod(#NSView, #"focusRingType") = CULong;
overload externalClassMethod(#NSView, #"defaultFocusRingType") = CULong;
overload externalInstanceMethod(#NSView, #"writeEPSInsideRect:toPasteboard:") = Void, NSRect, NSPasteboard;
overload externalInstanceMethod(#NSView, #"dataWithEPSInsideRect:") = NSData, NSRect;
overload externalInstanceMethod(#NSView, #"writePDFInsideRect:toPasteboard:") = Void, NSRect, NSPasteboard;
overload externalInstanceMethod(#NSView, #"dataWithPDFInsideRect:") = NSData, NSRect;
overload externalInstanceMethod(#NSView, #"print:") = Void, Id;
overload externalInstanceMethod(#NSView, #"knowsPageRange:") = Bool, NSRangePointer;
overload externalInstanceMethod(#NSView, #"heightAdjustLimit") = Double;
overload externalInstanceMethod(#NSView, #"widthAdjustLimit") = Double;
overload externalInstanceMethod(#NSView, #"adjustPageWidthNew:left:right:limit:") = Void, Pointer[Double], Double, Double, Double;
overload externalInstanceMethod(#NSView, #"adjustPageHeightNew:top:bottom:limit:") = Void, Pointer[Double], Double, Double, Double;
overload externalInstanceMethod(#NSView, #"rectForPage:") = NSRect, CLong;
overload externalInstanceMethod(#NSView, #"locationOfPrintRect:") = NSPoint, NSRect;
overload externalInstanceMethod(#NSView, #"drawPageBorderWithSize:") = Void, NSSize;
overload externalInstanceMethod(#NSView, #"pageHeader") = NSAttributedString;
overload externalInstanceMethod(#NSView, #"pageFooter") = NSAttributedString;
overload externalInstanceMethod(#NSView, #"drawSheetBorderWithSize:") = Void, NSSize;
overload externalInstanceMethod(#NSView, #"printJobTitle") = NSString;
overload externalInstanceMethod(#NSView, #"beginDocument") = Void;
overload externalInstanceMethod(#NSView, #"endDocument") = Void;
overload externalInstanceMethod(#NSView, #"beginPageInRect:atPlacement:") = Void, NSRect, NSPoint;
overload externalInstanceMethod(#NSView, #"endPage") = Void;
overload externalInstanceMethod(#NSView, #"dragImage:at:offset:event:pasteboard:source:slideBack:") = Void, NSImage, NSPoint, NSSize, NSEvent, NSPasteboard, Id, Bool;
overload externalInstanceMethod(#NSView, #"registeredDraggedTypes") = NSArray;
overload externalInstanceMethod(#NSView, #"registerForDraggedTypes:") = Void, NSArray;
overload externalInstanceMethod(#NSView, #"unregisterDraggedTypes") = Void;
overload externalInstanceMethod(#NSView, #"dragFile:fromRect:slideBack:event:") = Bool, NSString, NSRect, Bool, NSEvent;
overload externalInstanceMethod(#NSView, #"dragPromisedFilesOfTypes:fromRect:source:slideBack:event:") = Bool, NSArray, NSRect, Id, Bool, NSEvent;
overload externalInstanceMethod(#NSView, #"enterFullScreenMode:withOptions:") = Bool, NSScreen, NSDictionary;
overload externalInstanceMethod(#NSView, #"exitFullScreenModeWithOptions:") = Void, NSDictionary;
overload externalInstanceMethod(#NSView, #"isInFullScreenMode") = Bool;
overload externalInstanceMethod(#NSView, #"showDefinitionForAttributedString:atPoint:") = Void, NSAttributedString, NSPoint;
overload externalInstanceMethod(#NSView, #"showDefinitionForAttributedString:range:options:baselineOriginProvider:") = Void, NSAttributedString, NSRange, NSDictionary, UnknownType;
overload externalInstanceMethod(#NSView, #"reflectScrolledClipView:") = Void, NSClipView;
overload externalInstanceMethod(#NSView, #"scrollClipView:toPoint:") = Void, NSClipView, NSPoint;
overload externalInstanceMethod(#NSView, #"enclosingMenuItem") = NSMenuItem;
overload externalInstanceMethod(#NSView, #"rulerView:shouldMoveMarker:") = Bool, NSRulerView, NSRulerMarker;
overload externalInstanceMethod(#NSView, #"rulerView:willMoveMarker:toLocation:") = Double, NSRulerView, NSRulerMarker, Double;
overload externalInstanceMethod(#NSView, #"rulerView:didMoveMarker:") = Void, NSRulerView, NSRulerMarker;
overload externalInstanceMethod(#NSView, #"rulerView:shouldRemoveMarker:") = Bool, NSRulerView, NSRulerMarker;
overload externalInstanceMethod(#NSView, #"rulerView:didRemoveMarker:") = Void, NSRulerView, NSRulerMarker;
overload externalInstanceMethod(#NSView, #"rulerView:shouldAddMarker:") = Bool, NSRulerView, NSRulerMarker;
overload externalInstanceMethod(#NSView, #"rulerView:willAddMarker:atLocation:") = Double, NSRulerView, NSRulerMarker, Double;
overload externalInstanceMethod(#NSView, #"rulerView:didAddMarker:") = Void, NSRulerView, NSRulerMarker;
overload externalInstanceMethod(#NSView, #"rulerView:handleMouseDown:") = Void, NSRulerView, NSEvent;
overload externalInstanceMethod(#NSView, #"rulerView:willSetClientView:") = Void, NSRulerView, NSView;

record NSViewAnimation = externalClass(NSAnimation);
overload externalInstanceMethod(#NSViewAnimation, #"initWithViewAnimations:") = Id, NSArray;
overload externalInstanceMethod(#NSViewAnimation, #"viewAnimations") = NSArray;
overload externalInstanceMethod(#NSViewAnimation, #"setViewAnimations:") = Void, NSArray;

record NSViewController = externalClass(NSResponder);
overload externalInstanceMethod(#NSViewController, #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSViewController, #"initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#NSViewController, #"initWithNibName:bundle:") = Id, NSString, NSBundle;
overload externalInstanceMethod(#NSViewController, #"setRepresentedObject:") = Void, Id;
overload externalInstanceMethod(#NSViewController, #"representedObject") = Id;
overload externalInstanceMethod(#NSViewController, #"setTitle:") = Void, NSString;
overload externalInstanceMethod(#NSViewController, #"title") = NSString;
overload externalInstanceMethod(#NSViewController, #"view") = NSView;
overload externalInstanceMethod(#NSViewController, #"loadView") = Void;
overload externalInstanceMethod(#NSViewController, #"nibName") = NSString;
overload externalInstanceMethod(#NSViewController, #"nibBundle") = NSBundle;
overload externalInstanceMethod(#NSViewController, #"setView:") = Void, NSView;
overload externalInstanceMethod(#NSViewController, #"commitEditingWithDelegate:didCommitSelector:contextInfo:") = Void, Id, SelectorHandle, RawPointer;
overload externalInstanceMethod(#NSViewController, #"commitEditing") = Bool;
overload externalInstanceMethod(#NSViewController, #"discardEditing") = Void;

record NSWindow = externalClass(NSResponder);
overload externalInstanceMethod(#NSWindow, #"animator") = Id;
overload externalInstanceMethod(#NSWindow, #"animations") = NSDictionary;
overload externalInstanceMethod(#NSWindow, #"setAnimations:") = Void, NSDictionary;
overload externalInstanceMethod(#NSWindow, #"animationForKey:") = Id, NSString;
overload externalClassMethod(#NSWindow, #"defaultAnimationForKey:") = Id, NSString;
overload externalInstanceMethod(#NSWindow, #"validateUserInterfaceItem:") = Bool, Id;
overload externalClassMethod(#NSWindow, #"frameRectForContentRect:styleMask:") = NSRect, NSRect, CULong;
overload externalClassMethod(#NSWindow, #"contentRectForFrameRect:styleMask:") = NSRect, NSRect, CULong;
overload externalClassMethod(#NSWindow, #"minFrameWidthWithTitle:styleMask:") = Double, NSString, CULong;
overload externalClassMethod(#NSWindow, #"defaultDepthLimit") = Int;
overload externalInstanceMethod(#NSWindow, #"frameRectForContentRect:") = NSRect, NSRect;
overload externalInstanceMethod(#NSWindow, #"contentRectForFrameRect:") = NSRect, NSRect;
overload externalInstanceMethod(#NSWindow, #"initWithContentRect:styleMask:backing:defer:") = Id, NSRect, CULong, CULong, Bool;
overload externalInstanceMethod(#NSWindow, #"initWithContentRect:styleMask:backing:defer:screen:") = Id, NSRect, CULong, CULong, Bool, NSScreen;
overload externalInstanceMethod(#NSWindow, #"title") = NSString;
overload externalInstanceMethod(#NSWindow, #"setTitle:") = Void, NSString;
overload externalInstanceMethod(#NSWindow, #"setRepresentedURL:") = Void, NSURL;
overload externalInstanceMethod(#NSWindow, #"representedURL") = NSURL;
overload externalInstanceMethod(#NSWindow, #"representedFilename") = NSString;
overload externalInstanceMethod(#NSWindow, #"setRepresentedFilename:") = Void, NSString;
overload externalInstanceMethod(#NSWindow, #"setTitleWithRepresentedFilename:") = Void, NSString;
overload externalInstanceMethod(#NSWindow, #"setExcludedFromWindowsMenu:") = Void, Bool;
overload externalInstanceMethod(#NSWindow, #"isExcludedFromWindowsMenu") = Bool;
overload externalInstanceMethod(#NSWindow, #"setContentView:") = Void, NSView;
overload externalInstanceMethod(#NSWindow, #"contentView") = Id;
overload externalInstanceMethod(#NSWindow, #"setDelegate:") = Void, Id;
overload externalInstanceMethod(#NSWindow, #"delegate") = Id;
overload externalInstanceMethod(#NSWindow, #"windowNumber") = CLong;
overload externalInstanceMethod(#NSWindow, #"styleMask") = CULong;
overload externalInstanceMethod(#NSWindow, #"setStyleMask:") = Void, CULong;
overload externalInstanceMethod(#NSWindow, #"fieldEditor:forObject:") = NSText, Bool, Id;
overload externalInstanceMethod(#NSWindow, #"endEditingFor:") = Void, Id;
overload externalInstanceMethod(#NSWindow, #"constrainFrameRect:toScreen:") = NSRect, NSRect, NSScreen;
overload externalInstanceMethod(#NSWindow, #"setFrame:display:") = Void, NSRect, Bool;
overload externalInstanceMethod(#NSWindow, #"setContentSize:") = Void, NSSize;
overload externalInstanceMethod(#NSWindow, #"setFrameOrigin:") = Void, NSPoint;
overload externalInstanceMethod(#NSWindow, #"setFrameTopLeftPoint:") = Void, NSPoint;
overload externalInstanceMethod(#NSWindow, #"cascadeTopLeftFromPoint:") = NSPoint, NSPoint;
overload externalInstanceMethod(#NSWindow, #"frame") = NSRect;
overload externalInstanceMethod(#NSWindow, #"animationResizeTime:") = Double, NSRect;
overload externalInstanceMethod(#NSWindow, #"setFrame:display:animate:") = Void, NSRect, Bool, Bool;
overload externalInstanceMethod(#NSWindow, #"inLiveResize") = Bool;
overload externalInstanceMethod(#NSWindow, #"setShowsResizeIndicator:") = Void, Bool;
overload externalInstanceMethod(#NSWindow, #"showsResizeIndicator") = Bool;
overload externalInstanceMethod(#NSWindow, #"setResizeIncrements:") = Void, NSSize;
overload externalInstanceMethod(#NSWindow, #"resizeIncrements") = NSSize;
overload externalInstanceMethod(#NSWindow, #"setAspectRatio:") = Void, NSSize;
overload externalInstanceMethod(#NSWindow, #"aspectRatio") = NSSize;
overload externalInstanceMethod(#NSWindow, #"setContentResizeIncrements:") = Void, NSSize;
overload externalInstanceMethod(#NSWindow, #"contentResizeIncrements") = NSSize;
overload externalInstanceMethod(#NSWindow, #"setContentAspectRatio:") = Void, NSSize;
overload externalInstanceMethod(#NSWindow, #"contentAspectRatio") = NSSize;
overload externalInstanceMethod(#NSWindow, #"useOptimizedDrawing:") = Void, Bool;
overload externalInstanceMethod(#NSWindow, #"disableFlushWindow") = Void;
overload externalInstanceMethod(#NSWindow, #"enableFlushWindow") = Void;
overload externalInstanceMethod(#NSWindow, #"isFlushWindowDisabled") = Bool;
overload externalInstanceMethod(#NSWindow, #"flushWindow") = Void;
overload externalInstanceMethod(#NSWindow, #"flushWindowIfNeeded") = Void;
overload externalInstanceMethod(#NSWindow, #"setViewsNeedDisplay:") = Void, Bool;
overload externalInstanceMethod(#NSWindow, #"viewsNeedDisplay") = Bool;
overload externalInstanceMethod(#NSWindow, #"displayIfNeeded") = Void;
overload externalInstanceMethod(#NSWindow, #"display") = Void;
overload externalInstanceMethod(#NSWindow, #"setAutodisplay:") = Void, Bool;
overload externalInstanceMethod(#NSWindow, #"isAutodisplay") = Bool;
overload externalInstanceMethod(#NSWindow, #"preservesContentDuringLiveResize") = Bool;
overload externalInstanceMethod(#NSWindow, #"setPreservesContentDuringLiveResize:") = Void, Bool;
overload externalInstanceMethod(#NSWindow, #"update") = Void;
overload externalInstanceMethod(#NSWindow, #"makeFirstResponder:") = Bool, NSResponder;
overload externalInstanceMethod(#NSWindow, #"firstResponder") = NSResponder;
overload externalInstanceMethod(#NSWindow, #"resizeFlags") = CLong;
overload externalInstanceMethod(#NSWindow, #"keyDown:") = Void, NSEvent;
overload externalInstanceMethod(#NSWindow, #"close") = Void;
overload externalInstanceMethod(#NSWindow, #"setReleasedWhenClosed:") = Void, Bool;
overload externalInstanceMethod(#NSWindow, #"isReleasedWhenClosed") = Bool;
overload externalInstanceMethod(#NSWindow, #"miniaturize:") = Void, Id;
overload externalInstanceMethod(#NSWindow, #"deminiaturize:") = Void, Id;
overload externalInstanceMethod(#NSWindow, #"isZoomed") = Bool;
overload externalInstanceMethod(#NSWindow, #"zoom:") = Void, Id;
overload externalInstanceMethod(#NSWindow, #"isMiniaturized") = Bool;
overload externalInstanceMethod(#NSWindow, #"tryToPerform:with:") = Bool, SelectorHandle, Id;
overload externalInstanceMethod(#NSWindow, #"validRequestorForSendType:returnType:") = Id, NSString, NSString;
overload externalInstanceMethod(#NSWindow, #"setBackgroundColor:") = Void, NSColor;
overload externalInstanceMethod(#NSWindow, #"backgroundColor") = NSColor;
overload externalInstanceMethod(#NSWindow, #"setContentBorderThickness:forEdge:") = Void, Double, CULong;
overload externalInstanceMethod(#NSWindow, #"contentBorderThicknessForEdge:") = Double, CULong;
overload externalInstanceMethod(#NSWindow, #"setAutorecalculatesContentBorderThickness:forEdge:") = Void, Bool, CULong;
overload externalInstanceMethod(#NSWindow, #"autorecalculatesContentBorderThicknessForEdge:") = Bool, CULong;
overload externalInstanceMethod(#NSWindow, #"setMovable:") = Void, Bool;
overload externalInstanceMethod(#NSWindow, #"isMovable") = Bool;
overload externalInstanceMethod(#NSWindow, #"setMovableByWindowBackground:") = Void, Bool;
overload externalInstanceMethod(#NSWindow, #"isMovableByWindowBackground") = Bool;
overload externalInstanceMethod(#NSWindow, #"setHidesOnDeactivate:") = Void, Bool;
overload externalInstanceMethod(#NSWindow, #"hidesOnDeactivate") = Bool;
overload externalInstanceMethod(#NSWindow, #"setCanHide:") = Void, Bool;
overload externalInstanceMethod(#NSWindow, #"canHide") = Bool;
overload externalInstanceMethod(#NSWindow, #"center") = Void;
overload externalInstanceMethod(#NSWindow, #"makeKeyAndOrderFront:") = Void, Id;
overload externalInstanceMethod(#NSWindow, #"orderFront:") = Void, Id;
overload externalInstanceMethod(#NSWindow, #"orderBack:") = Void, Id;
overload externalInstanceMethod(#NSWindow, #"orderOut:") = Void, Id;
overload externalInstanceMethod(#NSWindow, #"orderWindow:relativeTo:") = Void, CLong, CLong;
overload externalInstanceMethod(#NSWindow, #"orderFrontRegardless") = Void;
overload externalInstanceMethod(#NSWindow, #"setMiniwindowImage:") = Void, NSImage;
overload externalInstanceMethod(#NSWindow, #"setMiniwindowTitle:") = Void, NSString;
overload externalInstanceMethod(#NSWindow, #"miniwindowImage") = NSImage;
overload externalInstanceMethod(#NSWindow, #"miniwindowTitle") = NSString;
overload externalInstanceMethod(#NSWindow, #"dockTile") = NSDockTile;
overload externalInstanceMethod(#NSWindow, #"setDocumentEdited:") = Void, Bool;
overload externalInstanceMethod(#NSWindow, #"isDocumentEdited") = Bool;
overload externalInstanceMethod(#NSWindow, #"isVisible") = Bool;
overload externalInstanceMethod(#NSWindow, #"isKeyWindow") = Bool;
overload externalInstanceMethod(#NSWindow, #"isMainWindow") = Bool;
overload externalInstanceMethod(#NSWindow, #"canBecomeKeyWindow") = Bool;
overload externalInstanceMethod(#NSWindow, #"canBecomeMainWindow") = Bool;
overload externalInstanceMethod(#NSWindow, #"makeKeyWindow") = Void;
overload externalInstanceMethod(#NSWindow, #"makeMainWindow") = Void;
overload externalInstanceMethod(#NSWindow, #"becomeKeyWindow") = Void;
overload externalInstanceMethod(#NSWindow, #"resignKeyWindow") = Void;
overload externalInstanceMethod(#NSWindow, #"becomeMainWindow") = Void;
overload externalInstanceMethod(#NSWindow, #"resignMainWindow") = Void;
overload externalInstanceMethod(#NSWindow, #"worksWhenModal") = Bool;
overload externalInstanceMethod(#NSWindow, #"preventsApplicationTerminationWhenModal") = Bool;
overload externalInstanceMethod(#NSWindow, #"setPreventsApplicationTerminationWhenModal:") = Void, Bool;
overload externalInstanceMethod(#NSWindow, #"convertBaseToScreen:") = NSPoint, NSPoint;
overload externalInstanceMethod(#NSWindow, #"convertScreenToBase:") = NSPoint, NSPoint;
overload externalInstanceMethod(#NSWindow, #"performClose:") = Void, Id;
overload externalInstanceMethod(#NSWindow, #"performMiniaturize:") = Void, Id;
overload externalInstanceMethod(#NSWindow, #"performZoom:") = Void, Id;
overload externalInstanceMethod(#NSWindow, #"gState") = CLong;
overload externalInstanceMethod(#NSWindow, #"setOneShot:") = Void, Bool;
overload externalInstanceMethod(#NSWindow, #"isOneShot") = Bool;
overload externalInstanceMethod(#NSWindow, #"dataWithEPSInsideRect:") = NSData, NSRect;
overload externalInstanceMethod(#NSWindow, #"dataWithPDFInsideRect:") = NSData, NSRect;
overload externalInstanceMethod(#NSWindow, #"print:") = Void, Id;
overload externalInstanceMethod(#NSWindow, #"disableCursorRects") = Void;
overload externalInstanceMethod(#NSWindow, #"enableCursorRects") = Void;
overload externalInstanceMethod(#NSWindow, #"discardCursorRects") = Void;
overload externalInstanceMethod(#NSWindow, #"areCursorRectsEnabled") = Bool;
overload externalInstanceMethod(#NSWindow, #"invalidateCursorRectsForView:") = Void, NSView;
overload externalInstanceMethod(#NSWindow, #"resetCursorRects") = Void;
overload externalInstanceMethod(#NSWindow, #"setAllowsToolTipsWhenApplicationIsInactive:") = Void, Bool;
overload externalInstanceMethod(#NSWindow, #"allowsToolTipsWhenApplicationIsInactive") = Bool;
overload externalInstanceMethod(#NSWindow, #"setBackingType:") = Void, CULong;
overload externalInstanceMethod(#NSWindow, #"backingType") = CULong;
overload externalInstanceMethod(#NSWindow, #"setLevel:") = Void, CLong;
overload externalInstanceMethod(#NSWindow, #"level") = CLong;
overload externalInstanceMethod(#NSWindow, #"setDepthLimit:") = Void, Int;
overload externalInstanceMethod(#NSWindow, #"depthLimit") = Int;
overload externalInstanceMethod(#NSWindow, #"setDynamicDepthLimit:") = Void, Bool;
overload externalInstanceMethod(#NSWindow, #"hasDynamicDepthLimit") = Bool;
overload externalInstanceMethod(#NSWindow, #"screen") = NSScreen;
overload externalInstanceMethod(#NSWindow, #"deepestScreen") = NSScreen;
overload externalInstanceMethod(#NSWindow, #"canStoreColor") = Bool;
overload externalInstanceMethod(#NSWindow, #"setHasShadow:") = Void, Bool;
overload externalInstanceMethod(#NSWindow, #"hasShadow") = Bool;
overload externalInstanceMethod(#NSWindow, #"invalidateShadow") = Void;
overload externalInstanceMethod(#NSWindow, #"setAlphaValue:") = Void, Double;
overload externalInstanceMethod(#NSWindow, #"alphaValue") = Double;
overload externalInstanceMethod(#NSWindow, #"setOpaque:") = Void, Bool;
overload externalInstanceMethod(#NSWindow, #"isOpaque") = Bool;
overload externalInstanceMethod(#NSWindow, #"setSharingType:") = Void, CULong;
overload externalInstanceMethod(#NSWindow, #"sharingType") = CULong;
overload externalInstanceMethod(#NSWindow, #"setPreferredBackingLocation:") = Void, CULong;
overload externalInstanceMethod(#NSWindow, #"preferredBackingLocation") = CULong;
overload externalInstanceMethod(#NSWindow, #"backingLocation") = CULong;
overload externalInstanceMethod(#NSWindow, #"allowsConcurrentViewDrawing") = Bool;
overload externalInstanceMethod(#NSWindow, #"setAllowsConcurrentViewDrawing:") = Void, Bool;
overload externalInstanceMethod(#NSWindow, #"displaysWhenScreenProfileChanges") = Bool;
overload externalInstanceMethod(#NSWindow, #"setDisplaysWhenScreenProfileChanges:") = Void, Bool;
overload externalInstanceMethod(#NSWindow, #"disableScreenUpdatesUntilFlush") = Void;
overload externalInstanceMethod(#NSWindow, #"canBecomeVisibleWithoutLogin") = Bool;
overload externalInstanceMethod(#NSWindow, #"setCanBecomeVisibleWithoutLogin:") = Void, Bool;
overload externalInstanceMethod(#NSWindow, #"setCollectionBehavior:") = Void, CULong;
overload externalInstanceMethod(#NSWindow, #"collectionBehavior") = CULong;
overload externalInstanceMethod(#NSWindow, #"canBeVisibleOnAllSpaces") = Bool;
overload externalInstanceMethod(#NSWindow, #"setCanBeVisibleOnAllSpaces:") = Void, Bool;
overload externalInstanceMethod(#NSWindow, #"isOnActiveSpace") = Bool;
overload externalInstanceMethod(#NSWindow, #"stringWithSavedFrame") = NSString;
overload externalInstanceMethod(#NSWindow, #"setFrameFromString:") = Void, NSString;
overload externalInstanceMethod(#NSWindow, #"saveFrameUsingName:") = Void, NSString;
overload externalInstanceMethod(#NSWindow, #"setFrameUsingName:force:") = Bool, NSString, Bool;
overload externalInstanceMethod(#NSWindow, #"setFrameUsingName:") = Bool, NSString;
overload externalInstanceMethod(#NSWindow, #"setFrameAutosaveName:") = Bool, NSString;
overload externalInstanceMethod(#NSWindow, #"frameAutosaveName") = NSString;
overload externalClassMethod(#NSWindow, #"removeFrameUsingName:") = Void, NSString;
overload externalInstanceMethod(#NSWindow, #"cacheImageInRect:") = Void, NSRect;
overload externalInstanceMethod(#NSWindow, #"restoreCachedImage") = Void;
overload externalInstanceMethod(#NSWindow, #"discardCachedImage") = Void;
overload externalInstanceMethod(#NSWindow, #"minSize") = NSSize;
overload externalInstanceMethod(#NSWindow, #"maxSize") = NSSize;
overload externalInstanceMethod(#NSWindow, #"setMinSize:") = Void, NSSize;
overload externalInstanceMethod(#NSWindow, #"setMaxSize:") = Void, NSSize;
overload externalInstanceMethod(#NSWindow, #"contentMinSize") = NSSize;
overload externalInstanceMethod(#NSWindow, #"contentMaxSize") = NSSize;
overload externalInstanceMethod(#NSWindow, #"setContentMinSize:") = Void, NSSize;
overload externalInstanceMethod(#NSWindow, #"setContentMaxSize:") = Void, NSSize;
overload externalInstanceMethod(#NSWindow, #"nextEventMatchingMask:") = NSEvent, CULong;
overload externalInstanceMethod(#NSWindow, #"nextEventMatchingMask:untilDate:inMode:dequeue:") = NSEvent, CULong, NSDate, NSString, Bool;
overload externalInstanceMethod(#NSWindow, #"discardEventsMatchingMask:beforeEvent:") = Void, CULong, NSEvent;
overload externalInstanceMethod(#NSWindow, #"postEvent:atStart:") = Void, NSEvent, Bool;
overload externalInstanceMethod(#NSWindow, #"currentEvent") = NSEvent;
overload externalInstanceMethod(#NSWindow, #"setAcceptsMouseMovedEvents:") = Void, Bool;
overload externalInstanceMethod(#NSWindow, #"acceptsMouseMovedEvents") = Bool;
overload externalInstanceMethod(#NSWindow, #"setIgnoresMouseEvents:") = Void, Bool;
overload externalInstanceMethod(#NSWindow, #"ignoresMouseEvents") = Bool;
overload externalInstanceMethod(#NSWindow, #"deviceDescription") = NSDictionary;
overload externalInstanceMethod(#NSWindow, #"sendEvent:") = Void, NSEvent;
overload externalInstanceMethod(#NSWindow, #"mouseLocationOutsideOfEventStream") = NSPoint;
overload externalClassMethod(#NSWindow, #"menuChanged:") = Void, NSMenu;
overload externalInstanceMethod(#NSWindow, #"windowController") = Id;
overload externalInstanceMethod(#NSWindow, #"setWindowController:") = Void, NSWindowController;
overload externalInstanceMethod(#NSWindow, #"isSheet") = Bool;
overload externalInstanceMethod(#NSWindow, #"attachedSheet") = NSWindow;
overload externalClassMethod(#NSWindow, #"standardWindowButton:forStyleMask:") = NSButton, CULong, CULong;
overload externalInstanceMethod(#NSWindow, #"standardWindowButton:") = NSButton, CULong;
overload externalInstanceMethod(#NSWindow, #"addChildWindow:ordered:") = Void, NSWindow, CLong;
overload externalInstanceMethod(#NSWindow, #"removeChildWindow:") = Void, NSWindow;
overload externalInstanceMethod(#NSWindow, #"childWindows") = NSArray;
overload externalInstanceMethod(#NSWindow, #"parentWindow") = NSWindow;
overload externalInstanceMethod(#NSWindow, #"setParentWindow:") = Void, NSWindow;
overload externalInstanceMethod(#NSWindow, #"graphicsContext") = NSGraphicsContext;
overload externalInstanceMethod(#NSWindow, #"userSpaceScaleFactor") = Double;
overload externalInstanceMethod(#NSWindow, #"setColorSpace:") = Void, NSColorSpace;
overload externalInstanceMethod(#NSWindow, #"colorSpace") = NSColorSpace;
overload externalClassMethod(#NSWindow, #"windowNumbersWithOptions:") = NSArray, CULong;
overload externalClassMethod(#NSWindow, #"windowNumberAtPoint:belowWindowWithWindowNumber:") = CLong, NSPoint, CLong;
overload externalInstanceMethod(#NSWindow, #"setInitialFirstResponder:") = Void, NSView;
overload externalInstanceMethod(#NSWindow, #"initialFirstResponder") = NSView;
overload externalInstanceMethod(#NSWindow, #"selectNextKeyView:") = Void, Id;
overload externalInstanceMethod(#NSWindow, #"selectPreviousKeyView:") = Void, Id;
overload externalInstanceMethod(#NSWindow, #"selectKeyViewFollowingView:") = Void, NSView;
overload externalInstanceMethod(#NSWindow, #"selectKeyViewPrecedingView:") = Void, NSView;
overload externalInstanceMethod(#NSWindow, #"keyViewSelectionDirection") = CULong;
overload externalInstanceMethod(#NSWindow, #"setDefaultButtonCell:") = Void, NSButtonCell;
overload externalInstanceMethod(#NSWindow, #"defaultButtonCell") = NSButtonCell;
overload externalInstanceMethod(#NSWindow, #"disableKeyEquivalentForDefaultButtonCell") = Void;
overload externalInstanceMethod(#NSWindow, #"enableKeyEquivalentForDefaultButtonCell") = Void;
overload externalInstanceMethod(#NSWindow, #"setAutorecalculatesKeyViewLoop:") = Void, Bool;
overload externalInstanceMethod(#NSWindow, #"autorecalculatesKeyViewLoop") = Bool;
overload externalInstanceMethod(#NSWindow, #"recalculateKeyViewLoop") = Void;
overload externalInstanceMethod(#NSWindow, #"setToolbar:") = Void, NSToolbar;
overload externalInstanceMethod(#NSWindow, #"toolbar") = NSToolbar;
overload externalInstanceMethod(#NSWindow, #"toggleToolbarShown:") = Void, Id;
overload externalInstanceMethod(#NSWindow, #"runToolbarCustomizationPalette:") = Void, Id;
overload externalInstanceMethod(#NSWindow, #"setShowsToolbarButton:") = Void, Bool;
overload externalInstanceMethod(#NSWindow, #"showsToolbarButton") = Bool;
overload externalInstanceMethod(#NSWindow, #"dragImage:at:offset:event:pasteboard:source:slideBack:") = Void, NSImage, NSPoint, NSSize, NSEvent, NSPasteboard, Id, Bool;
overload externalInstanceMethod(#NSWindow, #"registerForDraggedTypes:") = Void, NSArray;
overload externalInstanceMethod(#NSWindow, #"unregisterDraggedTypes") = Void;
overload externalInstanceMethod(#NSWindow, #"initWithWindowRef:") = NSWindow, RawPointer;
overload externalInstanceMethod(#NSWindow, #"windowRef") = RawPointer;
overload externalInstanceMethod(#NSWindow, #"drawers") = NSArray;
overload externalInstanceMethod(#NSWindow, #"hasCloseBox") = Bool;
overload externalInstanceMethod(#NSWindow, #"hasTitleBar") = Bool;
overload externalInstanceMethod(#NSWindow, #"isFloatingPanel") = Bool;
overload externalInstanceMethod(#NSWindow, #"isMiniaturizable") = Bool;
overload externalInstanceMethod(#NSWindow, #"isModalPanel") = Bool;
overload externalInstanceMethod(#NSWindow, #"isResizable") = Bool;
overload externalInstanceMethod(#NSWindow, #"isZoomable") = Bool;
overload externalInstanceMethod(#NSWindow, #"orderedIndex") = CLong;
overload externalInstanceMethod(#NSWindow, #"setIsMiniaturized:") = Void, Bool;
overload externalInstanceMethod(#NSWindow, #"setIsVisible:") = Void, Bool;
overload externalInstanceMethod(#NSWindow, #"setIsZoomed:") = Void, Bool;
overload externalInstanceMethod(#NSWindow, #"setOrderedIndex:") = Void, CLong;
overload externalInstanceMethod(#NSWindow, #"handleCloseScriptCommand:") = Id, NSCloseCommand;
overload externalInstanceMethod(#NSWindow, #"handlePrintScriptCommand:") = Id, NSScriptCommand;
overload externalInstanceMethod(#NSWindow, #"handleSaveScriptCommand:") = Id, NSScriptCommand;

record NSWindowController = externalClass(NSResponder);
overload externalInstanceMethod(#NSWindowController, #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(#NSWindowController, #"initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(#NSWindowController, #"initWithWindow:") = Id, NSWindow;
overload externalInstanceMethod(#NSWindowController, #"initWithWindowNibName:") = Id, NSString;
overload externalInstanceMethod(#NSWindowController, #"initWithWindowNibName:owner:") = Id, NSString, Id;
overload externalInstanceMethod(#NSWindowController, #"initWithWindowNibPath:owner:") = Id, NSString, Id;
overload externalInstanceMethod(#NSWindowController, #"windowNibName") = NSString;
overload externalInstanceMethod(#NSWindowController, #"windowNibPath") = NSString;
overload externalInstanceMethod(#NSWindowController, #"owner") = Id;
overload externalInstanceMethod(#NSWindowController, #"setWindowFrameAutosaveName:") = Void, NSString;
overload externalInstanceMethod(#NSWindowController, #"windowFrameAutosaveName") = NSString;
overload externalInstanceMethod(#NSWindowController, #"setShouldCascadeWindows:") = Void, Bool;
overload externalInstanceMethod(#NSWindowController, #"shouldCascadeWindows") = Bool;
overload externalInstanceMethod(#NSWindowController, #"document") = Id;
overload externalInstanceMethod(#NSWindowController, #"setDocument:") = Void, NSDocument;
overload externalInstanceMethod(#NSWindowController, #"setDocumentEdited:") = Void, Bool;
overload externalInstanceMethod(#NSWindowController, #"setShouldCloseDocument:") = Void, Bool;
overload externalInstanceMethod(#NSWindowController, #"shouldCloseDocument") = Bool;
overload externalInstanceMethod(#NSWindowController, #"setWindow:") = Void, NSWindow;
overload externalInstanceMethod(#NSWindowController, #"window") = NSWindow;
overload externalInstanceMethod(#NSWindowController, #"synchronizeWindowTitleWithDocumentName") = Void;
overload externalInstanceMethod(#NSWindowController, #"windowTitleForDocumentDisplayName:") = NSString, NSString;
overload externalInstanceMethod(#NSWindowController, #"close") = Void;
overload externalInstanceMethod(#NSWindowController, #"showWindow:") = Void, Id;
overload externalInstanceMethod(#NSWindowController, #"isWindowLoaded") = Bool;
overload externalInstanceMethod(#NSWindowController, #"windowWillLoad") = Void;
overload externalInstanceMethod(#NSWindowController, #"windowDidLoad") = Void;
overload externalInstanceMethod(#NSWindowController, #"loadWindow") = Void;

record NSWorkspace = externalClass(NSObject);
overload externalClassMethod(#NSWorkspace, #"sharedWorkspace") = NSWorkspace;
overload externalInstanceMethod(#NSWorkspace, #"notificationCenter") = NSNotificationCenter;
overload externalInstanceMethod(#NSWorkspace, #"openFile:") = Bool, NSString;
overload externalInstanceMethod(#NSWorkspace, #"openFile:withApplication:") = Bool, NSString, NSString;
overload externalInstanceMethod(#NSWorkspace, #"openFile:withApplication:andDeactivate:") = Bool, NSString, NSString, Bool;
overload externalInstanceMethod(#NSWorkspace, #"openFile:fromImage:at:inView:") = Bool, NSString, NSImage, NSPoint, NSView;
overload externalInstanceMethod(#NSWorkspace, #"openURL:") = Bool, NSURL;
overload externalInstanceMethod(#NSWorkspace, #"launchApplication:") = Bool, NSString;
overload externalInstanceMethod(#NSWorkspace, #"launchApplicationAtURL:options:configuration:error:") = NSRunningApplication, NSURL, CULong, NSDictionary, Pointer[NSError];
overload externalInstanceMethod(#NSWorkspace, #"launchApplication:showIcon:autolaunch:") = Bool, NSString, Bool, Bool;
overload externalInstanceMethod(#NSWorkspace, #"fullPathForApplication:") = NSString, NSString;
overload externalInstanceMethod(#NSWorkspace, #"selectFile:inFileViewerRootedAtPath:") = Bool, NSString, NSString;
overload externalInstanceMethod(#NSWorkspace, #"activateFileViewerSelectingURLs:") = Void, NSArray;
overload externalInstanceMethod(#NSWorkspace, #"showSearchResultsForQueryString:") = Bool, NSString;
overload externalInstanceMethod(#NSWorkspace, #"noteFileSystemChanged:") = Void, NSString;
overload externalInstanceMethod(#NSWorkspace, #"getInfoForFile:application:type:") = Bool, NSString, Pointer[NSString], Pointer[NSString];
overload externalInstanceMethod(#NSWorkspace, #"isFilePackageAtPath:") = Bool, NSString;
overload externalInstanceMethod(#NSWorkspace, #"iconForFile:") = NSImage, NSString;
overload externalInstanceMethod(#NSWorkspace, #"iconForFiles:") = NSImage, NSArray;
overload externalInstanceMethod(#NSWorkspace, #"iconForFileType:") = NSImage, NSString;
overload externalInstanceMethod(#NSWorkspace, #"setIcon:forFile:options:") = Bool, NSImage, NSString, CULong;
overload externalInstanceMethod(#NSWorkspace, #"fileLabels") = NSArray;
overload externalInstanceMethod(#NSWorkspace, #"fileLabelColors") = NSArray;
overload externalInstanceMethod(#NSWorkspace, #"recycleURLs:completionHandler:") = Void, NSArray, UnknownType;
overload externalInstanceMethod(#NSWorkspace, #"duplicateURLs:completionHandler:") = Void, NSArray, UnknownType;
overload externalInstanceMethod(#NSWorkspace, #"getFileSystemInfoForPath:isRemovable:isWritable:isUnmountable:description:type:") = Bool, NSString, Pointer[Bool], Pointer[Bool], Pointer[Bool], Pointer[NSString], Pointer[NSString];
overload externalInstanceMethod(#NSWorkspace, #"performFileOperation:source:destination:files:tag:") = Bool, NSString, NSString, NSString, NSArray, Pointer[CLong];
overload externalInstanceMethod(#NSWorkspace, #"unmountAndEjectDeviceAtPath:") = Bool, NSString;
overload externalInstanceMethod(#NSWorkspace, #"unmountAndEjectDeviceAtURL:error:") = Bool, NSURL, Pointer[NSError];
overload externalInstanceMethod(#NSWorkspace, #"extendPowerOffBy:") = CLong, CLong;
overload externalInstanceMethod(#NSWorkspace, #"hideOtherApplications") = Void;
overload externalInstanceMethod(#NSWorkspace, #"mountedLocalVolumePaths") = NSArray;
overload externalInstanceMethod(#NSWorkspace, #"mountedRemovableMedia") = NSArray;
overload externalInstanceMethod(#NSWorkspace, #"URLForApplicationWithBundleIdentifier:") = NSURL, NSString;
overload externalInstanceMethod(#NSWorkspace, #"URLForApplicationToOpenURL:") = NSURL, NSURL;
overload externalInstanceMethod(#NSWorkspace, #"absolutePathForAppBundleWithIdentifier:") = NSString, NSString;
overload externalInstanceMethod(#NSWorkspace, #"launchAppWithBundleIdentifier:options:additionalEventParamDescriptor:launchIdentifier:") = Bool, NSString, CULong, NSAppleEventDescriptor, Pointer[NSNumber];
overload externalInstanceMethod(#NSWorkspace, #"openURLs:withAppBundleIdentifier:options:additionalEventParamDescriptor:launchIdentifiers:") = Bool, NSArray, NSString, CULong, NSAppleEventDescriptor, Pointer[NSArray];
overload externalInstanceMethod(#NSWorkspace, #"launchedApplications") = NSArray;
overload externalInstanceMethod(#NSWorkspace, #"activeApplication") = NSDictionary;
overload externalInstanceMethod(#NSWorkspace, #"typeOfFile:error:") = NSString, NSString, Pointer[NSError];
overload externalInstanceMethod(#NSWorkspace, #"localizedDescriptionForType:") = NSString, NSString;
overload externalInstanceMethod(#NSWorkspace, #"preferredFilenameExtensionForType:") = NSString, NSString;
overload externalInstanceMethod(#NSWorkspace, #"filenameExtension:isValidForType:") = Bool, NSString, NSString;
overload externalInstanceMethod(#NSWorkspace, #"type:conformsToType:") = Bool, NSString, NSString;
overload externalInstanceMethod(#NSWorkspace, #"setDesktopImageURL:forScreen:options:error:") = Bool, NSURL, NSScreen, NSDictionary, Pointer[NSError];
overload externalInstanceMethod(#NSWorkspace, #"desktopImageURLForScreen:") = NSURL, NSScreen;
overload externalInstanceMethod(#NSWorkspace, #"desktopImageOptionsForScreen:") = NSDictionary, NSScreen;
overload externalInstanceMethod(#NSWorkspace, #"openTempFile:") = Bool, NSString;
overload externalInstanceMethod(#NSWorkspace, #"findApplications") = Void;
overload externalInstanceMethod(#NSWorkspace, #"noteUserDefaultsChanged") = Void;
overload externalInstanceMethod(#NSWorkspace, #"slideImage:from:to:") = Void, NSImage, NSPoint, NSPoint;
overload externalInstanceMethod(#NSWorkspace, #"checkForRemovableMedia") = Void;
overload externalInstanceMethod(#NSWorkspace, #"noteFileSystemChanged") = Void;
overload externalInstanceMethod(#NSWorkspace, #"fileSystemChanged") = Bool;
overload externalInstanceMethod(#NSWorkspace, #"userDefaultsChanged") = Bool;
overload externalInstanceMethod(#NSWorkspace, #"mountNewRemovableMedia") = NSArray;
overload externalInstanceMethod(#NSWorkspace, #"runningApplications") = NSArray;


alias NSTextReadInapplicableDocumentTypeError = 65806;
alias NSTextWriteInapplicableDocumentTypeError = 66062;
alias NSTextReadWriteErrorMinimum = 65792;
alias NSTextReadWriteErrorMaximum = 66303;
alias NSServiceApplicationNotFoundError = 66560;
alias NSServiceApplicationLaunchFailedError = 66561;
alias NSServiceRequestTimedOutError = 66562;
alias NSServiceInvalidPasteboardDataError = 66563;
alias NSServiceMalformedServiceDictionaryError = 66564;
alias NSServiceMiscellaneousError = 66800;
alias NSServiceErrorMinimum = 66560;
alias NSServiceErrorMaximum = 66817;

alias NSCompositeClear = 0;
alias NSCompositeCopy = 1;
alias NSCompositeSourceOver = 2;
alias NSCompositeSourceIn = 3;
alias NSCompositeSourceOut = 4;
alias NSCompositeSourceAtop = 5;
alias NSCompositeDestinationOver = 6;
alias NSCompositeDestinationIn = 7;
alias NSCompositeDestinationOut = 8;
alias NSCompositeDestinationAtop = 9;
alias NSCompositeXOR = 10;
alias NSCompositePlusDarker = 11;
alias NSCompositeHighlight = 12;
alias NSCompositePlusLighter = 13;

alias NSCompositingOperation = CULong;

alias NSBackingStoreRetained = 0;
alias NSBackingStoreNonretained = 1;
alias NSBackingStoreBuffered = 2;

alias NSBackingStoreType = CULong;

alias NSWindowAbove = 1;
alias NSWindowBelow = 4294967295;
alias NSWindowOut = 0;

alias NSWindowOrderingMode = CLong;

alias NSFocusRingOnly = 0;
alias NSFocusRingBelow = 1;
alias NSFocusRingAbove = 2;

alias NSFocusRingPlacement = CULong;

alias NSFocusRingTypeDefault = 0;
alias NSFocusRingTypeNone = 1;
alias NSFocusRingTypeExterior = 2;

alias NSFocusRingType = CULong;

alias NSColorRenderingIntentDefault = 0;
alias NSColorRenderingIntentAbsoluteColorimetric = 1;
alias NSColorRenderingIntentRelativeColorimetric = 2;
alias NSColorRenderingIntentPerceptual = 3;
alias NSColorRenderingIntentSaturation = 4;

alias NSColorRenderingIntent = CLong;

external NSCalibratedWhiteColorSpace : NSString;

external NSCalibratedRGBColorSpace : NSString;

external NSDeviceWhiteColorSpace : NSString;

external NSDeviceRGBColorSpace : NSString;

external NSDeviceCMYKColorSpace : NSString;

external NSNamedColorSpace : NSString;

external NSPatternColorSpace : NSString;

external NSCustomColorSpace : NSString;

external NSCalibratedBlackColorSpace : NSString;

external NSDeviceBlackColorSpace : NSString;

alias NSWindowDepthTwentyfourBitRGB = 520;
alias NSWindowDepthSixtyfourBitRGB = 528;
alias NSWindowDepthOnehundredtwentyeightBitRGB = 544;

alias NSWindowDepth = Int;

external NSBestDepth(
    colorSpace : NSString,
    bps : CLong,
    bpp : CLong,
    planar : Bool,
    exactMatch : Pointer[Bool]) : Int;

external NSPlanarFromDepth(
    depth : Int) : Bool;

external NSColorSpaceFromDepth(
    depth : Int) : NSString;

external NSBitsPerSampleFromDepth(
    depth : Int) : CLong;

external NSBitsPerPixelFromDepth(
    depth : Int) : CLong;

external NSNumberOfColorComponents(
    colorSpaceName : NSString) : CLong;

external NSAvailableWindowDepths() : Pointer[Int];

external NSWhite : Double;

external NSLightGray : Double;

external NSDarkGray : Double;

external NSBlack : Double;

external NSDeviceResolution : NSString;

external NSDeviceColorSpaceName : NSString;

external NSDeviceBitsPerSample : NSString;

external NSDeviceIsScreen : NSString;

external NSDeviceIsPrinter : NSString;

external NSDeviceSize : NSString;

external NSRectFill(
    aRect : NSRect);

external NSRectFillList(
    rects : Pointer[NSRect],
    count : CLong);

external NSRectFillListWithGrays(
    rects : Pointer[NSRect],
    grays : Pointer[Double],
    num : CLong);

external NSRectFillListWithColors(
    rects : Pointer[NSRect],
    colors : Pointer[NSColor],
    num : CLong);

external NSRectFillUsingOperation(
    aRect : NSRect,
    op : CULong);

external NSRectFillListUsingOperation(
    rects : Pointer[NSRect],
    count : CLong,
    op : CULong);

external NSRectFillListWithColorsUsingOperation(
    rects : Pointer[NSRect],
    colors : Pointer[NSColor],
    num : CLong,
    op : CULong);

external NSFrameRect(
    aRect : NSRect);

external NSFrameRectWithWidth(
    aRect : NSRect,
    frameWidth : Double);

external NSFrameRectWithWidthUsingOperation(
    aRect : NSRect,
    frameWidth : Double,
    op : CULong);

external NSRectClip(
    aRect : NSRect);

external NSRectClipList(
    rects : Pointer[NSRect],
    count : CLong);

external NSDrawTiledRects(
    boundsRect : NSRect,
    clipRect : NSRect,
    sides : Pointer[CULong],
    grays : Pointer[Double],
    count : CLong) : NSRect;

external NSDrawGrayBezel(
    aRect : NSRect,
    clipRect : NSRect);

external NSDrawGroove(
    aRect : NSRect,
    clipRect : NSRect);

external NSDrawWhiteBezel(
    aRect : NSRect,
    clipRect : NSRect);

external NSDrawButton(
    aRect : NSRect,
    clipRect : NSRect);

external NSEraseRect(
    aRect : NSRect);

external NSReadPixel(
    passedPoint : NSPoint) : NSColor;

external NSDrawBitmap(
    rect : NSRect,
    width : CLong,
    height : CLong,
    bps : CLong,
    spp : CLong,
    bpp : CLong,
    bpr : CLong,
    isPlanar : Bool,
    hasAlpha : Bool,
    colorSpaceName : NSString,
    data : Pointer[Pointer[CUChar]]);

external NSCopyBits(
    srcGState : CLong,
    srcRect : NSRect,
    destPoint : NSPoint);

external NSHighlightRect(
    aRect : NSRect);

external NSBeep();

external NSGetWindowServerMemory(
    context : CLong,
    virtualMemory : Pointer[CLong],
    windowBackingMemory : Pointer[CLong],
    windowDumpString : Pointer[NSString]) : CLong;

external NSDrawColorTiledRects(
    boundsRect : NSRect,
    clipRect : NSRect,
    sides : Pointer[CULong],
    colors : Pointer[NSColor],
    count : CLong) : NSRect;

external NSDrawDarkBezel(
    aRect : NSRect,
    clipRect : NSRect);

external NSDrawLightBezel(
    aRect : NSRect,
    clipRect : NSRect);

external NSDottedFrameRect(
    aRect : NSRect);

external NSDrawWindowBackground(
    aRect : NSRect);

external NSSetFocusRingStyle(
    placement : CULong);

external NSDisableScreenUpdates();

external NSEnableScreenUpdates();

alias NSAnimationEffectDisappearingItemDefault = 0;
alias NSAnimationEffectPoof = 10;

alias NSAnimationEffect = CULong;

external NSShowAnimationEffect(
    animationEffect : CULong,
    centerLocation : NSPoint,
    size : NSSize,
    animationDelegate : Id,
    didEndSelector : SelectorHandle,
    contextInfo : RawPointer);

external NSCountWindows(
    count : Pointer[CLong]);

external NSWindowList(
    size : CLong,
    list : Pointer[CLong]);

external NSCountWindowsForContext(
    context : CLong,
    count : Pointer[CLong]);

external NSWindowListForContext(
    context : CLong,
    size : CLong,
    list : Pointer[CLong]);

external NSGraphicsContextDestinationAttributeName : NSString;

external NSGraphicsContextRepresentationFormatAttributeName : NSString;

external NSGraphicsContextPSFormat : NSString;

external NSGraphicsContextPDFFormat : NSString;

alias NSImageInterpolationDefault = 0;
alias NSImageInterpolationNone = 1;
alias NSImageInterpolationLow = 2;
alias NSImageInterpolationMedium = 4;
alias NSImageInterpolationHigh = 3;

alias NSImageInterpolation = CULong;

external NSTextLineTooLongException : NSString;

external NSTextNoSelectionException : NSString;

external NSWordTablesWriteException : NSString;

external NSWordTablesReadException : NSString;

external NSTextReadException : NSString;

external NSTextWriteException : NSString;

external NSPasteboardCommunicationException : NSString;

external NSPrintingCommunicationException : NSString;

external NSAbortModalException : NSString;

external NSAbortPrintingException : NSString;

external NSIllegalSelectorException : NSString;

external NSAppKitVirtualMemoryException : NSString;

external NSBadRTFDirectiveException : NSString;

external NSBadRTFFontTableException : NSString;

external NSBadRTFStyleSheetException : NSString;

external NSTypedStreamVersionException : NSString;

external NSTIFFException : NSString;

external NSPrintPackageException : NSString;

external NSBadRTFColorTableException : NSString;

external NSDraggingException : NSString;

external NSColorListIOException : NSString;

external NSColorListNotEditableException : NSString;

external NSBadBitmapParametersException : NSString;

external NSWindowServerCommunicationException : NSString;

external NSFontUnavailableException : NSString;

external NSPPDIncludeNotFoundException : NSString;

external NSPPDParseException : NSString;

external NSPPDIncludeStackOverflowException : NSString;

external NSPPDIncludeStackUnderflowException : NSString;

external NSRTFPropertyStackOverflowException : NSString;

external NSAppKitIgnoredException : NSString;

external NSBadComparisonException : NSString;

external NSImageCacheException : NSString;

external NSNibLoadingException : NSString;

external NSBrowserIllegalDelegateException : NSString;

external NSAccessibilityException : NSString;

external NSAccessibilityRoleDescription(
    role : NSString,
    subrole : NSString) : NSString;

external NSAccessibilityRoleDescriptionForUIElement(
    element : Id) : NSString;

external NSAccessibilityActionDescription(
    action : NSString) : NSString;

external NSAccessibilityRaiseBadArgumentException(
    element : Id,
    attribute : NSString,
    value : Id);

external NSAccessibilityUnignoredAncestor(
    element : Id) : Id;

external NSAccessibilityUnignoredDescendant(
    element : Id) : Id;

external NSAccessibilityUnignoredChildren(
    originalChildren : NSArray) : NSArray;

external NSAccessibilityUnignoredChildrenForOnlyChild(
    originalChild : Id) : NSArray;

external NSAccessibilityPostNotification(
    element : Id,
    notification : NSString);

external NSAccessibilityErrorCodeExceptionInfo : NSString;

external NSAccessibilityRoleAttribute : NSString;

external NSAccessibilityRoleDescriptionAttribute : NSString;

external NSAccessibilitySubroleAttribute : NSString;

external NSAccessibilityHelpAttribute : NSString;

external NSAccessibilityValueAttribute : NSString;

external NSAccessibilityMinValueAttribute : NSString;

external NSAccessibilityMaxValueAttribute : NSString;

external NSAccessibilityEnabledAttribute : NSString;

external NSAccessibilityFocusedAttribute : NSString;

external NSAccessibilityParentAttribute : NSString;

external NSAccessibilityChildrenAttribute : NSString;

external NSAccessibilityWindowAttribute : NSString;

external NSAccessibilityTopLevelUIElementAttribute : NSString;

external NSAccessibilitySelectedChildrenAttribute : NSString;

external NSAccessibilityVisibleChildrenAttribute : NSString;

external NSAccessibilityPositionAttribute : NSString;

external NSAccessibilitySizeAttribute : NSString;

external NSAccessibilityContentsAttribute : NSString;

external NSAccessibilityTitleAttribute : NSString;

external NSAccessibilityDescriptionAttribute : NSString;

external NSAccessibilityShownMenuAttribute : NSString;

external NSAccessibilityValueDescriptionAttribute : NSString;

external NSAccessibilityPreviousContentsAttribute : NSString;

external NSAccessibilityNextContentsAttribute : NSString;

external NSAccessibilityHeaderAttribute : NSString;

external NSAccessibilityEditedAttribute : NSString;

external NSAccessibilityTabsAttribute : NSString;

external NSAccessibilityHorizontalScrollBarAttribute : NSString;

external NSAccessibilityVerticalScrollBarAttribute : NSString;

external NSAccessibilityOverflowButtonAttribute : NSString;

external NSAccessibilityIncrementButtonAttribute : NSString;

external NSAccessibilityDecrementButtonAttribute : NSString;

external NSAccessibilityFilenameAttribute : NSString;

external NSAccessibilityExpandedAttribute : NSString;

external NSAccessibilitySelectedAttribute : NSString;

external NSAccessibilitySplittersAttribute : NSString;

external NSAccessibilityDocumentAttribute : NSString;

external NSAccessibilityURLAttribute : NSString;

external NSAccessibilityIndexAttribute : NSString;

external NSAccessibilityRowCountAttribute : NSString;

external NSAccessibilityColumnCountAttribute : NSString;

external NSAccessibilityOrderedByRowAttribute : NSString;

external NSAccessibilityWarningValueAttribute : NSString;

external NSAccessibilityCriticalValueAttribute : NSString;

external NSAccessibilityPlaceholderValueAttribute : NSString;

external NSAccessibilityTitleUIElementAttribute : NSString;

external NSAccessibilityServesAsTitleForUIElementsAttribute : NSString;

external NSAccessibilityLinkedUIElementsAttribute : NSString;

external NSAccessibilitySelectedTextAttribute : NSString;

external NSAccessibilitySelectedTextRangeAttribute : NSString;

external NSAccessibilityNumberOfCharactersAttribute : NSString;

external NSAccessibilityVisibleCharacterRangeAttribute : NSString;

external NSAccessibilitySharedTextUIElementsAttribute : NSString;

external NSAccessibilitySharedCharacterRangeAttribute : NSString;

external NSAccessibilityInsertionPointLineNumberAttribute : NSString;

external NSAccessibilitySelectedTextRangesAttribute : NSString;

external NSAccessibilityLineForIndexParameterizedAttribute : NSString;

external NSAccessibilityRangeForLineParameterizedAttribute : NSString;

external NSAccessibilityStringForRangeParameterizedAttribute : NSString;

external NSAccessibilityRangeForPositionParameterizedAttribute : NSString;

external NSAccessibilityRangeForIndexParameterizedAttribute : NSString;

external NSAccessibilityBoundsForRangeParameterizedAttribute : NSString;

external NSAccessibilityRTFForRangeParameterizedAttribute : NSString;

external NSAccessibilityStyleRangeForIndexParameterizedAttribute : NSString;

external NSAccessibilityAttributedStringForRangeParameterizedAttribute : NSString;

external NSAccessibilityFontTextAttribute : NSString;

external NSAccessibilityForegroundColorTextAttribute : NSString;

external NSAccessibilityBackgroundColorTextAttribute : NSString;

external NSAccessibilityUnderlineColorTextAttribute : NSString;

external NSAccessibilityStrikethroughColorTextAttribute : NSString;

external NSAccessibilityUnderlineTextAttribute : NSString;

external NSAccessibilitySuperscriptTextAttribute : NSString;

external NSAccessibilityStrikethroughTextAttribute : NSString;

external NSAccessibilityShadowTextAttribute : NSString;

external NSAccessibilityAttachmentTextAttribute : NSString;

external NSAccessibilityLinkTextAttribute : NSString;

external NSAccessibilityMisspelledTextAttribute : NSString;

external NSAccessibilityFontNameKey : NSString;

external NSAccessibilityFontFamilyKey : NSString;

external NSAccessibilityVisibleNameKey : NSString;

external NSAccessibilityFontSizeKey : NSString;

external NSAccessibilityMainAttribute : NSString;

external NSAccessibilityMinimizedAttribute : NSString;

external NSAccessibilityCloseButtonAttribute : NSString;

external NSAccessibilityZoomButtonAttribute : NSString;

external NSAccessibilityMinimizeButtonAttribute : NSString;

external NSAccessibilityToolbarButtonAttribute : NSString;

external NSAccessibilityProxyAttribute : NSString;

external NSAccessibilityGrowAreaAttribute : NSString;

external NSAccessibilityModalAttribute : NSString;

external NSAccessibilityDefaultButtonAttribute : NSString;

external NSAccessibilityCancelButtonAttribute : NSString;

external NSAccessibilityMenuBarAttribute : NSString;

external NSAccessibilityWindowsAttribute : NSString;

external NSAccessibilityFrontmostAttribute : NSString;

external NSAccessibilityHiddenAttribute : NSString;

external NSAccessibilityMainWindowAttribute : NSString;

external NSAccessibilityFocusedWindowAttribute : NSString;

external NSAccessibilityFocusedUIElementAttribute : NSString;

external NSAccessibilityOrientationAttribute : NSString;

external NSAccessibilityVerticalOrientationValue : NSString;

external NSAccessibilityHorizontalOrientationValue : NSString;

external NSAccessibilityUnknownOrientationValue : NSString;

external NSAccessibilityColumnTitlesAttribute : NSString;

external NSAccessibilitySearchButtonAttribute : NSString;

external NSAccessibilitySearchMenuAttribute : NSString;

external NSAccessibilityClearButtonAttribute : NSString;

external NSAccessibilityRowsAttribute : NSString;

external NSAccessibilityVisibleRowsAttribute : NSString;

external NSAccessibilitySelectedRowsAttribute : NSString;

external NSAccessibilityColumnsAttribute : NSString;

external NSAccessibilityVisibleColumnsAttribute : NSString;

external NSAccessibilitySelectedColumnsAttribute : NSString;

external NSAccessibilitySortDirectionAttribute : NSString;

external NSAccessibilitySelectedCellsAttribute : NSString;

external NSAccessibilityVisibleCellsAttribute : NSString;

external NSAccessibilityRowHeaderUIElementsAttribute : NSString;

external NSAccessibilityColumnHeaderUIElementsAttribute : NSString;

external NSAccessibilityCellForColumnAndRowParameterizedAttribute : NSString;

external NSAccessibilityRowIndexRangeAttribute : NSString;

external NSAccessibilityColumnIndexRangeAttribute : NSString;

external NSAccessibilityHorizontalUnitsAttribute : NSString;

external NSAccessibilityVerticalUnitsAttribute : NSString;

external NSAccessibilityHorizontalUnitDescriptionAttribute : NSString;

external NSAccessibilityVerticalUnitDescriptionAttribute : NSString;

external NSAccessibilityLayoutPointForScreenPointParameterizedAttribute : NSString;

external NSAccessibilityLayoutSizeForScreenSizeParameterizedAttribute : NSString;

external NSAccessibilityScreenPointForLayoutPointParameterizedAttribute : NSString;

external NSAccessibilityScreenSizeForLayoutSizeParameterizedAttribute : NSString;

external NSAccessibilityHandlesAttribute : NSString;

external NSAccessibilityAscendingSortDirectionValue : NSString;

external NSAccessibilityDescendingSortDirectionValue : NSString;

external NSAccessibilityUnknownSortDirectionValue : NSString;

external NSAccessibilityDisclosingAttribute : NSString;

external NSAccessibilityDisclosedRowsAttribute : NSString;

external NSAccessibilityDisclosedByRowAttribute : NSString;

external NSAccessibilityDisclosureLevelAttribute : NSString;

external NSAccessibilityAllowedValuesAttribute : NSString;

external NSAccessibilityLabelUIElementsAttribute : NSString;

external NSAccessibilityLabelValueAttribute : NSString;

external NSAccessibilityMatteHoleAttribute : NSString;

external NSAccessibilityMatteContentUIElementAttribute : NSString;

external NSAccessibilityMarkerUIElementsAttribute : NSString;

external NSAccessibilityMarkerValuesAttribute : NSString;

external NSAccessibilityMarkerGroupUIElementAttribute : NSString;

external NSAccessibilityUnitsAttribute : NSString;

external NSAccessibilityUnitDescriptionAttribute : NSString;

external NSAccessibilityMarkerTypeAttribute : NSString;

external NSAccessibilityMarkerTypeDescriptionAttribute : NSString;

external NSAccessibilityLeftTabStopMarkerTypeValue : NSString;

external NSAccessibilityRightTabStopMarkerTypeValue : NSString;

external NSAccessibilityCenterTabStopMarkerTypeValue : NSString;

external NSAccessibilityDecimalTabStopMarkerTypeValue : NSString;

external NSAccessibilityHeadIndentMarkerTypeValue : NSString;

external NSAccessibilityTailIndentMarkerTypeValue : NSString;

external NSAccessibilityFirstLineIndentMarkerTypeValue : NSString;

external NSAccessibilityUnknownMarkerTypeValue : NSString;

external NSAccessibilityInchesUnitValue : NSString;

external NSAccessibilityCentimetersUnitValue : NSString;

external NSAccessibilityPointsUnitValue : NSString;

external NSAccessibilityPicasUnitValue : NSString;

external NSAccessibilityUnknownUnitValue : NSString;

external NSAccessibilityPressAction : NSString;

external NSAccessibilityIncrementAction : NSString;

external NSAccessibilityDecrementAction : NSString;

external NSAccessibilityConfirmAction : NSString;

external NSAccessibilityPickAction : NSString;

external NSAccessibilityCancelAction : NSString;

external NSAccessibilityRaiseAction : NSString;

external NSAccessibilityShowMenuAction : NSString;

external NSAccessibilityDeleteAction : NSString;

external NSAccessibilityMainWindowChangedNotification : NSString;

external NSAccessibilityFocusedWindowChangedNotification : NSString;

external NSAccessibilityFocusedUIElementChangedNotification : NSString;

external NSAccessibilityApplicationActivatedNotification : NSString;

external NSAccessibilityApplicationDeactivatedNotification : NSString;

external NSAccessibilityApplicationHiddenNotification : NSString;

external NSAccessibilityApplicationShownNotification : NSString;

external NSAccessibilityWindowCreatedNotification : NSString;

external NSAccessibilityWindowMovedNotification : NSString;

external NSAccessibilityWindowResizedNotification : NSString;

external NSAccessibilityWindowMiniaturizedNotification : NSString;

external NSAccessibilityWindowDeminiaturizedNotification : NSString;

external NSAccessibilityDrawerCreatedNotification : NSString;

external NSAccessibilitySheetCreatedNotification : NSString;

external NSAccessibilityUIElementDestroyedNotification : NSString;

external NSAccessibilityValueChangedNotification : NSString;

external NSAccessibilityTitleChangedNotification : NSString;

external NSAccessibilityResizedNotification : NSString;

external NSAccessibilityMovedNotification : NSString;

external NSAccessibilityCreatedNotification : NSString;

external NSAccessibilityHelpTagCreatedNotification : NSString;

external NSAccessibilitySelectedTextChangedNotification : NSString;

external NSAccessibilityRowCountChangedNotification : NSString;

external NSAccessibilitySelectedChildrenChangedNotification : NSString;

external NSAccessibilitySelectedRowsChangedNotification : NSString;

external NSAccessibilitySelectedColumnsChangedNotification : NSString;

external NSAccessibilityRowExpandedNotification : NSString;

external NSAccessibilityRowCollapsedNotification : NSString;

external NSAccessibilitySelectedCellsChangedNotification : NSString;

external NSAccessibilityUnitsChangedNotification : NSString;

external NSAccessibilitySelectedChildrenMovedNotification : NSString;

external NSAccessibilityUnknownRole : NSString;

external NSAccessibilityButtonRole : NSString;

external NSAccessibilityRadioButtonRole : NSString;

external NSAccessibilityCheckBoxRole : NSString;

external NSAccessibilitySliderRole : NSString;

external NSAccessibilityTabGroupRole : NSString;

external NSAccessibilityTextFieldRole : NSString;

external NSAccessibilityStaticTextRole : NSString;

external NSAccessibilityTextAreaRole : NSString;

external NSAccessibilityScrollAreaRole : NSString;

external NSAccessibilityPopUpButtonRole : NSString;

external NSAccessibilityMenuButtonRole : NSString;

external NSAccessibilityTableRole : NSString;

external NSAccessibilityApplicationRole : NSString;

external NSAccessibilityGroupRole : NSString;

external NSAccessibilityRadioGroupRole : NSString;

external NSAccessibilityListRole : NSString;

external NSAccessibilityScrollBarRole : NSString;

external NSAccessibilityValueIndicatorRole : NSString;

external NSAccessibilityImageRole : NSString;

external NSAccessibilityMenuBarRole : NSString;

external NSAccessibilityMenuRole : NSString;

external NSAccessibilityMenuItemRole : NSString;

external NSAccessibilityColumnRole : NSString;

external NSAccessibilityRowRole : NSString;

external NSAccessibilityToolbarRole : NSString;

external NSAccessibilityBusyIndicatorRole : NSString;

external NSAccessibilityProgressIndicatorRole : NSString;

external NSAccessibilityWindowRole : NSString;

external NSAccessibilityDrawerRole : NSString;

external NSAccessibilitySystemWideRole : NSString;

external NSAccessibilityOutlineRole : NSString;

external NSAccessibilityIncrementorRole : NSString;

external NSAccessibilityBrowserRole : NSString;

external NSAccessibilityComboBoxRole : NSString;

external NSAccessibilitySplitGroupRole : NSString;

external NSAccessibilitySplitterRole : NSString;

external NSAccessibilityColorWellRole : NSString;

external NSAccessibilityGrowAreaRole : NSString;

external NSAccessibilitySheetRole : NSString;

external NSAccessibilityHelpTagRole : NSString;

external NSAccessibilityMatteRole : NSString;

external NSAccessibilityRulerRole : NSString;

external NSAccessibilityRulerMarkerRole : NSString;

external NSAccessibilityLinkRole : NSString;

external NSAccessibilityDisclosureTriangleRole : NSString;

external NSAccessibilityGridRole : NSString;

external NSAccessibilityRelevanceIndicatorRole : NSString;

external NSAccessibilityLevelIndicatorRole : NSString;

external NSAccessibilityCellRole : NSString;

external NSAccessibilityLayoutAreaRole : NSString;

external NSAccessibilityLayoutItemRole : NSString;

external NSAccessibilityHandleRole : NSString;

external NSAccessibilityUnknownSubrole : NSString;

external NSAccessibilityCloseButtonSubrole : NSString;

external NSAccessibilityZoomButtonSubrole : NSString;

external NSAccessibilityMinimizeButtonSubrole : NSString;

external NSAccessibilityToolbarButtonSubrole : NSString;

external NSAccessibilityTableRowSubrole : NSString;

external NSAccessibilityOutlineRowSubrole : NSString;

external NSAccessibilitySecureTextFieldSubrole : NSString;

external NSAccessibilityStandardWindowSubrole : NSString;

external NSAccessibilityDialogSubrole : NSString;

external NSAccessibilitySystemDialogSubrole : NSString;

external NSAccessibilityFloatingWindowSubrole : NSString;

external NSAccessibilitySystemFloatingWindowSubrole : NSString;

external NSAccessibilityIncrementArrowSubrole : NSString;

external NSAccessibilityDecrementArrowSubrole : NSString;

external NSAccessibilityIncrementPageSubrole : NSString;

external NSAccessibilityDecrementPageSubrole : NSString;

external NSAccessibilitySearchFieldSubrole : NSString;

external NSAccessibilityTextAttachmentSubrole : NSString;

external NSAccessibilityTextLinkSubrole : NSString;

external NSAccessibilityTimelineSubrole : NSString;

external NSAccessibilitySortButtonSubrole : NSString;

external NSAccessibilityRatingIndicatorSubrole : NSString;

external NSAccessibilityContentListSubrole : NSString;

external NSAccessibilityDefinitionListSubrole : NSString;

external NSAccessibilitySortButtonRole : NSString;

external NSAccessibilityHorizontialUnitsAttribute : NSString;

external NSAccessibilityHorizontialUnitDescriptionAttribute : NSString;

alias NSAnimationEaseInOut = 0;
alias NSAnimationEaseIn = 1;
alias NSAnimationEaseOut = 2;
alias NSAnimationLinear = 3;

alias NSAnimationCurve = CULong;

alias NSAnimationBlocking = 0;
alias NSAnimationNonblocking = 1;
alias NSAnimationNonblockingThreaded = 2;

alias NSAnimationBlockingMode = CULong;

alias NSAnimationProgress = Float;

external NSAnimationProgressMarkNotification : NSString;

external NSAnimationProgressMark : NSString;

external NSViewAnimationTargetKey : NSString;

external NSViewAnimationStartFrameKey : NSString;

external NSViewAnimationEndFrameKey : NSString;

external NSViewAnimationEffectKey : NSString;

external NSViewAnimationFadeInEffect : NSString;

external NSViewAnimationFadeOutEffect : NSString;

external NSAnimationTriggerOrderIn : NSString;

external NSAnimationTriggerOrderOut : NSString;

alias NSViewNotSizable = 0;
alias NSViewMinXMargin = 1;
alias NSViewWidthSizable = 2;
alias NSViewMaxXMargin = 4;
alias NSViewMinYMargin = 8;
alias NSViewHeightSizable = 16;
alias NSViewMaxYMargin = 32;

alias NSNoBorder = 0;
alias NSLineBorder = 1;
alias NSBezelBorder = 2;
alias NSGrooveBorder = 3;

alias NSBorderType = CULong;

alias NSViewLayerContentsRedrawNever = 0;
alias NSViewLayerContentsRedrawOnSetNeedsDisplay = 1;
alias NSViewLayerContentsRedrawDuringViewResize = 2;
alias NSViewLayerContentsRedrawBeforeViewResize = 3;

alias NSViewLayerContentsRedrawPolicy = CLong;

alias NSViewLayerContentsPlacementScaleAxesIndependently = 0;
alias NSViewLayerContentsPlacementScaleProportionallyToFit = 1;
alias NSViewLayerContentsPlacementScaleProportionallyToFill = 2;
alias NSViewLayerContentsPlacementCenter = 3;
alias NSViewLayerContentsPlacementTop = 4;
alias NSViewLayerContentsPlacementTopRight = 5;
alias NSViewLayerContentsPlacementRight = 6;
alias NSViewLayerContentsPlacementBottomRight = 7;
alias NSViewLayerContentsPlacementBottom = 8;
alias NSViewLayerContentsPlacementBottomLeft = 9;
alias NSViewLayerContentsPlacementLeft = 10;
alias NSViewLayerContentsPlacementTopLeft = 11;

alias NSViewLayerContentsPlacement = CLong;

record Struct___VFlags (
    aboutToResize : UInt,
    retainCountOverMax : UInt,
    retainCount : UInt,
    interfaceStyle1 : UInt,
    specialArchiving : UInt,
    needsDisplayForBounds : UInt,
    interfaceStyle0 : UInt,
    removingWithoutInvalidation : UInt,
    needsBoundsChangeNote : UInt,
    boundsChangeNotesSuspended : UInt,
    focusChangeNotesSuspended : UInt,
    needsFrameChangeNote : UInt,
    frameChangeNotesSuspended : UInt,
    noVerticalAutosizing : UInt,
    newGState : UInt,
    validGState : UInt,
    needsDisplay : UInt,
    wantsGState : UInt,
    autoresizeSubviews : UInt,
    autosizing : UInt,
    rotatedOrScaledFromBase : UInt,
    rotatedFromBase : UInt,
);

alias _VFlags = Struct___VFlags;

alias NSTrackingRectTag = CLong;

alias NSToolTipTag = CLong;

external NSFullScreenModeAllScreens : NSString;

external NSFullScreenModeSetting : NSString;

external NSFullScreenModeWindowLevel : NSString;

external NSFullScreenModeApplicationPresentationOptions : NSString;

external NSDefinitionPresentationTypeKey : NSString;

external NSDefinitionPresentationTypeOverlay : NSString;

external NSDefinitionPresentationTypeDictionaryApplication : NSString;

external NSViewFrameDidChangeNotification : NSString;

external NSViewFocusDidChangeNotification : NSString;

external NSViewBoundsDidChangeNotification : NSString;

external NSViewGlobalFrameDidChangeNotification : NSString;

external NSViewDidUpdateTrackingAreasNotification : NSString;

alias NSEnterCharacter = 3;
alias NSBackspaceCharacter = 8;
alias NSTabCharacter = 9;
alias NSNewlineCharacter = 10;
alias NSFormFeedCharacter = 12;
alias NSCarriageReturnCharacter = 13;
alias NSBackTabCharacter = 25;
alias NSDeleteCharacter = 127;
alias NSLineSeparatorCharacter = 8232;
alias NSParagraphSeparatorCharacter = 8233;

alias NSLeftTextAlignment = 0;
alias NSRightTextAlignment = 1;
alias NSCenterTextAlignment = 2;
alias NSJustifiedTextAlignment = 3;
alias NSNaturalTextAlignment = 4;

alias NSTextAlignment = CULong;

alias NSWritingDirectionNatural = 4294967295;
alias NSWritingDirectionLeftToRight = 0;
alias NSWritingDirectionRightToLeft = 1;

alias NSWritingDirection = CLong;

alias NSTextWritingDirectionEmbedding = 0;
alias NSTextWritingDirectionOverride = 2;

alias NSIllegalTextMovement = 0;
alias NSReturnTextMovement = 16;
alias NSTabTextMovement = 17;
alias NSBacktabTextMovement = 18;
alias NSLeftTextMovement = 19;
alias NSRightTextMovement = 20;
alias NSUpTextMovement = 21;
alias NSDownTextMovement = 22;
alias NSCancelTextMovement = 23;
alias NSOtherTextMovement = 0;

external NSTextDidBeginEditingNotification : NSString;

external NSTextDidEndEditingNotification : NSString;

external NSTextDidChangeNotification : NSString;

alias NSLeftTabStopType = 0;
alias NSRightTabStopType = 1;
alias NSCenterTabStopType = 2;
alias NSDecimalTabStopType = 3;

alias NSTextTabType = CULong;

alias NSLineBreakByWordWrapping = 0;
alias NSLineBreakByCharWrapping = 1;
alias NSLineBreakByClipping = 2;
alias NSLineBreakByTruncatingHead = 3;
alias NSLineBreakByTruncatingTail = 4;
alias NSLineBreakByTruncatingMiddle = 5;

alias NSLineBreakMode = CULong;

external NSTabColumnTerminatorsAttributeName : NSString;

alias NSWorkspaceLaunchOptions = CULong;

alias NSWorkspaceLaunchAndPrint = 2;
alias NSWorkspaceLaunchInhibitingBackgroundOnly = 128;
alias NSWorkspaceLaunchWithoutAddingToRecents = 256;
alias NSWorkspaceLaunchWithoutActivation = 512;
alias NSWorkspaceLaunchAsync = 65536;
alias NSWorkspaceLaunchAllowingClassicStartup = 131072;
alias NSWorkspaceLaunchPreferringClassic = 262144;
alias NSWorkspaceLaunchNewInstance = 524288;
alias NSWorkspaceLaunchAndHide = 1048576;
alias NSWorkspaceLaunchAndHideOthers = 2097152;
alias NSWorkspaceLaunchDefault = 196608;

alias NSWorkspaceIconCreationOptions = CULong;

alias NSExcludeQuickDrawElementsIconCreationOption = 2;
alias NSExclude10_4ElementsIconCreationOption = 4;

external NSWorkspaceDesktopImageScalingKey : NSString;

external NSWorkspaceDesktopImageAllowClippingKey : NSString;

external NSWorkspaceDesktopImageFillColorKey : NSString;

external NSWorkspaceApplicationKey : NSString;

external NSWorkspaceWillLaunchApplicationNotification : NSString;

external NSWorkspaceDidLaunchApplicationNotification : NSString;

external NSWorkspaceDidTerminateApplicationNotification : NSString;

external NSWorkspaceDidHideApplicationNotification : NSString;

external NSWorkspaceDidUnhideApplicationNotification : NSString;

external NSWorkspaceDidActivateApplicationNotification : NSString;

external NSWorkspaceDidDeactivateApplicationNotification : NSString;

external NSWorkspaceVolumeLocalizedNameKey : NSString;

external NSWorkspaceVolumeURLKey : NSString;

external NSWorkspaceVolumeOldLocalizedNameKey : NSString;

external NSWorkspaceVolumeOldURLKey : NSString;

external NSWorkspaceDidMountNotification : NSString;

external NSWorkspaceDidUnmountNotification : NSString;

external NSWorkspaceWillUnmountNotification : NSString;

external NSWorkspaceDidRenameVolumeNotification : NSString;

external NSWorkspaceWillPowerOffNotification : NSString;

external NSWorkspaceWillSleepNotification : NSString;

external NSWorkspaceDidWakeNotification : NSString;

external NSWorkspaceScreensDidSleepNotification : NSString;

external NSWorkspaceScreensDidWakeNotification : NSString;

external NSWorkspaceSessionDidBecomeActiveNotification : NSString;

external NSWorkspaceSessionDidResignActiveNotification : NSString;

external NSWorkspaceDidPerformFileOperationNotification : NSString;

external NSWorkspaceDidChangeFileLabelsNotification : NSString;

external NSWorkspaceActiveSpaceDidChangeNotification : NSString;

external NSWorkspaceLaunchConfigurationAppleEvent : NSString;

external NSWorkspaceLaunchConfigurationArguments : NSString;

external NSWorkspaceLaunchConfigurationEnvironment : NSString;

external NSWorkspaceLaunchConfigurationArchitecture : NSString;

external NSWorkspaceMoveOperation : NSString;

external NSWorkspaceCopyOperation : NSString;

external NSWorkspaceLinkOperation : NSString;

external NSWorkspaceCompressOperation : NSString;

external NSWorkspaceDecompressOperation : NSString;

external NSWorkspaceEncryptOperation : NSString;

external NSWorkspaceDecryptOperation : NSString;

external NSWorkspaceDestroyOperation : NSString;

external NSWorkspaceRecycleOperation : NSString;

external NSWorkspaceDuplicateOperation : NSString;

external NSPlainFileType : NSString;

external NSDirectoryFileType : NSString;

external NSApplicationFileType : NSString;

external NSFilesystemFileType : NSString;

external NSShellCommandFileType : NSString;

alias NSApplicationActivateAllWindows = 1;
alias NSApplicationActivateIgnoringOtherApps = 2;

alias NSApplicationActivationOptions = CULong;

alias NSApplicationActivationPolicyRegular = 0;
alias NSApplicationActivationPolicyAccessory = 1;
alias NSApplicationActivationPolicyProhibited = 2;

alias NSApplicationActivationPolicy = CLong;

external NSAppKitVersionNumber : Double;

external NSModalPanelRunLoopMode : NSString;

external NSEventTrackingRunLoopMode : NSString;

alias NSRunStoppedResponse = 4294966296;
alias NSRunAbortedResponse = 4294966295;
alias NSRunContinuesResponse = 4294966294;

alias NSUpdateWindowsRunLoopOrdering = 500000;

alias NSApplicationPresentationDefault = 0;
alias NSApplicationPresentationAutoHideDock = 1;
alias NSApplicationPresentationHideDock = 2;
alias NSApplicationPresentationAutoHideMenuBar = 4;
alias NSApplicationPresentationHideMenuBar = 8;
alias NSApplicationPresentationDisableAppleMenu = 16;
alias NSApplicationPresentationDisableProcessSwitching = 32;
alias NSApplicationPresentationDisableForceQuit = 64;
alias NSApplicationPresentationDisableSessionTermination = 128;
alias NSApplicationPresentationDisableHideApplication = 256;
alias NSApplicationPresentationDisableMenuBarTransparency = 512;

alias NSApplicationPresentationOptions = CULong;

external NSApp : Id;

alias NSModalSession = OpaquePointer;

alias _NSThreadPrivate = Opaque;

alias NSTerminateCancel = 0;
alias NSTerminateNow = 1;
alias NSTerminateLater = 2;

alias NSApplicationTerminateReply = CULong;

alias NSPrintingCancelled = 0;
alias NSPrintingSuccess = 1;
alias NSPrintingFailure = 3;
alias NSPrintingReplyLater = 2;

alias NSApplicationPrintReply = CULong;

alias NSUserInterfaceLayoutDirectionLeftToRight = 0;
alias NSUserInterfaceLayoutDirectionRightToLeft = 1;

alias NSUserInterfaceLayoutDirection = CLong;

external NSApplicationMain(
    argc : Int,
    argv : Pointer[Pointer[CChar]]) : Int;

external NSApplicationLoad() : Bool;

external NSShowsServicesMenuItem(
    itemName : NSString) : Bool;

external NSSetShowsServicesMenuItem(
    itemName : NSString,
    enabled : Bool) : CLong;

external NSUpdateDynamicServices();

external NSPerformService(
    itemName : NSString,
    pboard : NSPasteboard) : Bool;

external NSRegisterServicesProvider(
    provider : Id,
    name : NSString);

external NSUnregisterServicesProvider(
    name : NSString);

external NSApplicationDidBecomeActiveNotification : NSString;

external NSApplicationDidHideNotification : NSString;

external NSApplicationDidFinishLaunchingNotification : NSString;

external NSApplicationDidResignActiveNotification : NSString;

external NSApplicationDidUnhideNotification : NSString;

external NSApplicationDidUpdateNotification : NSString;

external NSApplicationWillBecomeActiveNotification : NSString;

external NSApplicationWillHideNotification : NSString;

external NSApplicationWillFinishLaunchingNotification : NSString;

external NSApplicationWillResignActiveNotification : NSString;

external NSApplicationWillUnhideNotification : NSString;

external NSApplicationWillUpdateNotification : NSString;

external NSApplicationWillTerminateNotification : NSString;

external NSApplicationDidChangeScreenParametersNotification : NSString;

alias NSAnyType = 0;
alias NSIntType = 1;
alias NSPositiveIntType = 2;
alias NSFloatType = 3;
alias NSPositiveFloatType = 4;
alias NSDoubleType = 6;
alias NSPositiveDoubleType = 7;

alias NSNullCellType = 0;
alias NSTextCellType = 1;
alias NSImageCellType = 2;

alias NSCellType = CULong;

alias NSCellDisabled = 0;
alias NSCellState = 1;
alias NSPushInCell = 2;
alias NSCellEditable = 3;
alias NSChangeGrayCell = 4;
alias NSCellHighlighted = 5;
alias NSCellLightsByContents = 6;
alias NSCellLightsByGray = 7;
alias NSChangeBackgroundCell = 8;
alias NSCellLightsByBackground = 9;
alias NSCellIsBordered = 10;
alias NSCellHasOverlappingImage = 11;
alias NSCellHasImageHorizontal = 12;
alias NSCellHasImageOnLeftOrBottom = 13;
alias NSCellChangesContents = 14;
alias NSCellIsInsetButton = 15;
alias NSCellAllowsMixedState = 16;

alias NSCellAttribute = CULong;

alias NSNoImage = 0;
alias NSImageOnly = 1;
alias NSImageLeft = 2;
alias NSImageRight = 3;
alias NSImageBelow = 4;
alias NSImageAbove = 5;
alias NSImageOverlaps = 6;

alias NSCellImagePosition = CULong;

alias NSImageScaleProportionallyDown = 0;
alias NSImageScaleAxesIndependently = 1;
alias NSImageScaleNone = 2;
alias NSImageScaleProportionallyUpOrDown = 3;

alias NSImageScaling = CULong;

alias NSMixedState = 4294967295;
alias NSOffState = 0;
alias NSOnState = 1;

alias NSCellStateValue = CLong;

alias NSNoCellMask = 0;
alias NSContentsCellMask = 1;
alias NSPushInCellMask = 2;
alias NSChangeGrayCellMask = 4;
alias NSChangeBackgroundCellMask = 8;

alias NSDefaultControlTint = 0;
alias NSBlueControlTint = 1;
alias NSGraphiteControlTint = 6;
alias NSClearControlTint = 7;

alias NSControlTint = CULong;

alias NSRegularControlSize = 0;
alias NSSmallControlSize = 1;
alias NSMiniControlSize = 2;

alias NSControlSize = CULong;

record Struct___CFlags (
    state : UInt,
    highlighted : UInt,
    disabled : UInt,
    editable : UInt,
    type : CULong,
    vCentered : UInt,
    hCentered : UInt,
    bordered : UInt,
    bezeled : UInt,
    selectable : UInt,
    scrollable : UInt,
    continuous : UInt,
    actOnMouseDown : UInt,
    isLeaf : UInt,
    invalidObjectValue : UInt,
    invalidFont : UInt,
    lineBreakMode : CULong,
    cellReserved1 : UInt,
    singleLineMode : UInt,
    actOnMouseDragged : UInt,
    isLoaded : UInt,
    truncateLastLine : UInt,
    dontActOnMouseUp : UInt,
    isWhite : UInt,
    useUserKeyEquivalent : UInt,
    showsFirstResponder : UInt,
    focusRingType : UInt,
    wasSelectable : UInt,
    hasInvalidObject : UInt,
    allowsEditingTextAttributes : UInt,
    importsGraphics : UInt,
    alignment : CULong,
    layoutDirectionRTL : UInt,
    backgroundStyle : UInt,
    cellReserved2 : UInt,
    refusesFirstResponder : UInt,
    needsHighlightedText : UInt,
    dontAllowsUndo : UInt,
    currentlyEditing : UInt,
    allowsMixedState : UInt,
    inMixedState : UInt,
    sendsActionOnEndEditing : UInt,
    inSendAction : UInt,
    menuWasSet : UInt,
    controlTint : UInt,
    controlSize : UInt,
    branchImageDisabled : UInt,
    drawingInRevealover : UInt,
    needsHighlightedTextHint : UInt,
);

alias _CFlags = Struct___CFlags;

external NSControlTintDidChangeNotification : NSString;

alias NSCellHitNone = 0;
alias NSCellHitContentArea = 1;
alias NSCellHitEditableTextArea = 2;
alias NSCellHitTrackableArea = 4;

alias NSBackgroundStyleLight = 0;
alias NSBackgroundStyleDark = 1;
alias NSBackgroundStyleRaised = 2;
alias NSBackgroundStyleLowered = 3;

alias NSBackgroundStyle = CLong;

external NSDrawThreePartImage(
    frame : NSRect,
    startCap : NSImage,
    centerFill : NSImage,
    endCap : NSImage,
    vertical : Bool,
    op : CULong,
    alphaFraction : Double,
    flipped : Bool);

external NSDrawNinePartImage(
    frame : NSRect,
    topLeftCorner : NSImage,
    topEdgeFill : NSImage,
    topRightCorner : NSImage,
    leftEdgeFill : NSImage,
    centerFill : NSImage,
    rightEdgeFill : NSImage,
    bottomLeftCorner : NSImage,
    bottomEdgeFill : NSImage,
    bottomRightCorner : NSImage,
    op : CULong,
    alphaFraction : Double,
    flipped : Bool);

alias NSWarningAlertStyle = 0;
alias NSInformationalAlertStyle = 1;
alias NSCriticalAlertStyle = 2;

alias NSAlertStyle = CULong;

alias NSNoTitle = 0;
alias NSAboveTop = 1;
alias NSAtTop = 2;
alias NSBelowTop = 3;
alias NSAboveBottom = 4;
alias NSAtBottom = 5;
alias NSBelowBottom = 6;

alias NSTitlePosition = CULong;

alias NSBoxPrimary = 0;
alias NSBoxSecondary = 1;
alias NSBoxSeparator = 2;
alias NSBoxOldStyle = 3;
alias NSBoxCustom = 4;

alias NSBoxType = CULong;

external NSControlTextDidBeginEditingNotification : NSString;

external NSControlTextDidEndEditingNotification : NSString;

external NSControlTextDidChangeNotification : NSString;

alias NSMomentaryLightButton = 0;
alias NSPushOnPushOffButton = 1;
alias NSToggleButton = 2;
alias NSSwitchButton = 3;
alias NSRadioButton = 4;
alias NSMomentaryChangeButton = 5;
alias NSOnOffButton = 6;
alias NSMomentaryPushInButton = 7;
alias NSMomentaryPushButton = 0;
alias NSMomentaryLight = 7;

alias NSButtonType = CULong;

alias NSRoundedBezelStyle = 1;
alias NSRegularSquareBezelStyle = 2;
alias NSThickSquareBezelStyle = 3;
alias NSThickerSquareBezelStyle = 4;
alias NSDisclosureBezelStyle = 5;
alias NSShadowlessSquareBezelStyle = 6;
alias NSCircularBezelStyle = 7;
alias NSTexturedSquareBezelStyle = 8;
alias NSHelpButtonBezelStyle = 9;
alias NSSmallSquareBezelStyle = 10;
alias NSTexturedRoundedBezelStyle = 11;
alias NSRoundRectBezelStyle = 12;
alias NSRecessedBezelStyle = 13;
alias NSRoundedDisclosureBezelStyle = 14;
alias NSSmallIconButtonBezelStyle = 2;

alias NSBezelStyle = CULong;

record Struct___BCFlags (
    alternateMnemonicLocation : UInt,
    useButtonImageSource : UInt,
    reserved : UInt,
    suppressAXValueChangeNote : UInt,
    doesNotDimImage : UInt,
    inset : UInt,
    transparent : UInt,
    lastState : UInt,
    hasKeyEquivalentInsteadOfImage : UInt,
    imageSizeDiff : UInt,
    imageAndText : UInt,
    bottomOrLeft : UInt,
    horizontal : UInt,
    imageOverlaps : UInt,
    bordered : UInt,
    drawing : UInt,
    lightByGray : UInt,
    lightByBackground : UInt,
    lightByContents : UInt,
    changeGray : UInt,
    changeBackground : UInt,
    changeContents : UInt,
    pushIn : UInt,
);

alias _BCFlags = Struct___BCFlags;

record Struct___BCFlags2 (
    bezelStyle : UInt,
    showsBorderOnlyWhileMouseInside : UInt,
    mouseInside : UInt,
    bezelStyle2 : UInt,
    imageScaling : UInt,
    keyEquivalentModifierMask : UInt,
);

alias _BCFlags2 = Struct___BCFlags2;

alias NSGradientNone = 0;
alias NSGradientConcaveWeak = 1;
alias NSGradientConcaveStrong = 2;
alias NSGradientConvexWeak = 3;
alias NSGradientConvexStrong = 4;

alias NSGradientType = CULong;

alias NSGlyph = UInt;

alias NSControlGlyph = 16777215;
alias NSNullGlyph = 0;

external NSFontIdentityMatrix : Pointer[Double];

alias NSNativeShortGlyphPacking = 5;

alias NSMultibyteGlyphPacking = CULong;

alias NSFontDefaultRenderingMode = 0;
alias NSFontAntialiasedRenderingMode = 1;
alias NSFontIntegerAdvancementsRenderingMode = 2;
alias NSFontAntialiasedIntegerAdvancementsRenderingMode = 3;

alias NSFontRenderingMode = CULong;

external NSConvertGlyphsToPackedGlyphs(
    glBuf : Pointer[UInt],
    count : CLong,
    packing : CULong,
    packedGlyphs : Pointer[CChar]) : CLong;

external NSAntialiasThresholdChangedNotification : NSString;

external NSFontSetChangedNotification : NSString;

alias NSFontSymbolicTraits = UInt;

alias NSFontUnknownClass = 0;
alias NSFontOldStyleSerifsClass = 268435456;
alias NSFontTransitionalSerifsClass = 536870912;
alias NSFontModernSerifsClass = 805306368;
alias NSFontClarendonSerifsClass = 1073741824;
alias NSFontSlabSerifsClass = 1342177280;
alias NSFontFreeformSerifsClass = 1879048192;
alias NSFontSansSerifClass = 2147483648;
alias NSFontOrnamentalsClass = 2415919104;
alias NSFontScriptsClass = 2684354560;
alias NSFontSymbolicClass = 3221225472;

alias NSFontFamilyClass = UInt;

alias NSFontFamilyClassMask = 4026531840;

alias NSFontItalicTrait = 1;
alias NSFontBoldTrait = 2;
alias NSFontExpandedTrait = 32;
alias NSFontCondensedTrait = 64;
alias NSFontMonoSpaceTrait = 1024;
alias NSFontVerticalTrait = 2048;
alias NSFontUIOptimizedTrait = 4096;

external NSFontFamilyAttribute : NSString;

external NSFontNameAttribute : NSString;

external NSFontFaceAttribute : NSString;

external NSFontSizeAttribute : NSString;

external NSFontVisibleNameAttribute : NSString;

external NSFontMatrixAttribute : NSString;

external NSFontVariationAttribute : NSString;

external NSFontCharacterSetAttribute : NSString;

external NSFontCascadeListAttribute : NSString;

external NSFontTraitsAttribute : NSString;

external NSFontFixedAdvanceAttribute : NSString;

external NSFontFeatureSettingsAttribute : NSString;

external NSFontColorAttribute : NSString;

external NSFontSymbolicTrait : NSString;

external NSFontWeightTrait : NSString;

external NSFontWidthTrait : NSString;

external NSFontSlantTrait : NSString;

external NSFontVariationAxisIdentifierKey : NSString;

external NSFontVariationAxisMinimumValueKey : NSString;

external NSFontVariationAxisMaximumValueKey : NSString;

external NSFontVariationAxisDefaultValueKey : NSString;

external NSFontVariationAxisNameKey : NSString;

external NSFontFeatureTypeIdentifierKey : NSString;

external NSFontFeatureSelectorIdentifierKey : NSString;

alias NSFontTraitMask = CULong;

alias NSItalicFontMask = 1;
alias NSBoldFontMask = 2;
alias NSUnboldFontMask = 4;
alias NSNonStandardCharacterSetFontMask = 8;
alias NSNarrowFontMask = 16;
alias NSExpandedFontMask = 32;
alias NSCondensedFontMask = 64;
alias NSSmallCapsFontMask = 128;
alias NSPosterFontMask = 256;
alias NSCompressedFontMask = 512;
alias NSFixedPitchFontMask = 1024;
alias NSUnitalicFontMask = 16777216;

alias NSFontCollectionApplicationOnlyMask = 1;

alias NSNoFontChangeAction = 0;
alias NSViaPanelFontAction = 1;
alias NSAddTraitFontAction = 2;
alias NSSizeUpFontAction = 3;
alias NSSizeDownFontAction = 4;
alias NSHeavierFontAction = 5;
alias NSLighterFontAction = 6;
alias NSRemoveTraitFontAction = 7;

alias NSFontAction = CULong;

alias NSBorderlessWindowMask = 0;
alias NSTitledWindowMask = 1;
alias NSClosableWindowMask = 2;
alias NSMiniaturizableWindowMask = 4;
alias NSResizableWindowMask = 8;

alias NSTexturedBackgroundWindowMask = 256;

alias NSUnscaledWindowMask = 2048;

alias NSUnifiedTitleAndToolbarWindowMask = 4096;

alias NSDisplayWindowRunLoopOrdering = 600000;
alias NSResetCursorRectsRunLoopOrdering = 700000;

alias NSWindowSharingNone = 0;
alias NSWindowSharingReadOnly = 1;
alias NSWindowSharingReadWrite = 2;

alias NSWindowSharingType = CULong;

alias NSWindowBackingLocationDefault = 0;
alias NSWindowBackingLocationVideoMemory = 1;
alias NSWindowBackingLocationMainMemory = 2;

alias NSWindowBackingLocation = CULong;

alias NSWindowCollectionBehaviorDefault = 0;
alias NSWindowCollectionBehaviorCanJoinAllSpaces = 1;
alias NSWindowCollectionBehaviorMoveToActiveSpace = 2;

alias NSWindowCollectionBehaviorManaged = 4;
alias NSWindowCollectionBehaviorTransient = 8;
alias NSWindowCollectionBehaviorStationary = 16;

alias NSWindowCollectionBehaviorParticipatesInCycle = 32;
alias NSWindowCollectionBehaviorIgnoresCycle = 64;

alias NSWindowCollectionBehavior = CULong;

alias NSWindowNumberListAllApplications = 1;
alias NSWindowNumberListAllSpaces = 16;

alias NSWindowNumberListOptions = CULong;

alias NSDirectSelection = 0;
alias NSSelectingNext = 1;
alias NSSelectingPrevious = 2;

alias NSSelectionDirection = CULong;

alias NSWindowCloseButton = 0;
alias NSWindowMiniaturizeButton = 1;
alias NSWindowZoomButton = 2;
alias NSWindowToolbarButton = 3;
alias NSWindowDocumentIconButton = 4;

alias NSWindowButton = CULong;

external NSWindowDidBecomeKeyNotification : NSString;

external NSWindowDidBecomeMainNotification : NSString;

external NSWindowDidChangeScreenNotification : NSString;

external NSWindowDidDeminiaturizeNotification : NSString;

external NSWindowDidExposeNotification : NSString;

external NSWindowDidMiniaturizeNotification : NSString;

external NSWindowDidMoveNotification : NSString;

external NSWindowDidResignKeyNotification : NSString;

external NSWindowDidResignMainNotification : NSString;

external NSWindowDidResizeNotification : NSString;

external NSWindowDidUpdateNotification : NSString;

external NSWindowWillCloseNotification : NSString;

external NSWindowWillMiniaturizeNotification : NSString;

external NSWindowWillMoveNotification : NSString;

external NSWindowWillBeginSheetNotification : NSString;

external NSWindowDidEndSheetNotification : NSString;

external NSWindowDidChangeScreenProfileNotification : NSString;

external NSWindowWillStartLiveResizeNotification : NSString;

external NSWindowDidEndLiveResizeNotification : NSString;

external NSRunAlertPanel(
    title : NSString,
    msgFormat : NSString,
    defaultButton : NSString,
    alternateButton : NSString,
    otherButton : NSString,
    ..) : CLong;

external NSRunInformationalAlertPanel(
    title : NSString,
    msgFormat : NSString,
    defaultButton : NSString,
    alternateButton : NSString,
    otherButton : NSString,
    ..) : CLong;

external NSRunCriticalAlertPanel(
    title : NSString,
    msgFormat : NSString,
    defaultButton : NSString,
    alternateButton : NSString,
    otherButton : NSString,
    ..) : CLong;

external NSRunAlertPanelRelativeToWindow(
    title : NSString,
    msgFormat : NSString,
    defaultButton : NSString,
    alternateButton : NSString,
    otherButton : NSString,
    docWindow : NSWindow,
    ..) : CLong;

external NSRunInformationalAlertPanelRelativeToWindow(
    title : NSString,
    msgFormat : NSString,
    defaultButton : NSString,
    alternateButton : NSString,
    otherButton : NSString,
    docWindow : NSWindow,
    ..) : CLong;

external NSRunCriticalAlertPanelRelativeToWindow(
    title : NSString,
    msgFormat : NSString,
    defaultButton : NSString,
    alternateButton : NSString,
    otherButton : NSString,
    docWindow : NSWindow,
    ..) : CLong;

external NSBeginAlertSheet(
    title : NSString,
    defaultButton : NSString,
    alternateButton : NSString,
    otherButton : NSString,
    docWindow : NSWindow,
    modalDelegate : Id,
    didEndSelector : SelectorHandle,
    didDismissSelector : SelectorHandle,
    contextInfo : RawPointer,
    msgFormat : NSString,
    ..);

external NSBeginInformationalAlertSheet(
    title : NSString,
    defaultButton : NSString,
    alternateButton : NSString,
    otherButton : NSString,
    docWindow : NSWindow,
    modalDelegate : Id,
    didEndSelector : SelectorHandle,
    didDismissSelector : SelectorHandle,
    contextInfo : RawPointer,
    msgFormat : NSString,
    ..);

external NSBeginCriticalAlertSheet(
    title : NSString,
    defaultButton : NSString,
    alternateButton : NSString,
    otherButton : NSString,
    docWindow : NSWindow,
    modalDelegate : Id,
    didEndSelector : SelectorHandle,
    didDismissSelector : SelectorHandle,
    contextInfo : RawPointer,
    msgFormat : NSString,
    ..);

external NSGetAlertPanel(
    title : NSString,
    msgFormat : NSString,
    defaultButton : NSString,
    alternateButton : NSString,
    otherButton : NSString,
    ..) : Id;

external NSGetInformationalAlertPanel(
    title : NSString,
    msgFormat : NSString,
    defaultButton : NSString,
    alternateButton : NSString,
    otherButton : NSString,
    ..) : Id;

external NSGetCriticalAlertPanel(
    title : NSString,
    msgFormat : NSString,
    defaultButton : NSString,
    alternateButton : NSString,
    otherButton : NSString,
    ..) : Id;

external NSReleaseAlertPanel(
    panel : Id);

alias NSAlertDefaultReturn = 1;
alias NSAlertAlternateReturn = 0;
alias NSAlertOtherReturn = 4294967295;
alias NSAlertErrorReturn = 4294967294;

alias NSOKButton = 1;
alias NSCancelButton = 0;

alias NSUtilityWindowMask = 16;
alias NSDocModalWindowMask = 64;

alias NSNonactivatingPanelMask = 128;

alias NSHUDWindowMask = 8192;

alias NSFPPreviewButton = 131;
alias NSFPRevertButton = 130;
alias NSFPSetButton = 132;
alias NSFPPreviewField = 128;
alias NSFPSizeField = 129;
alias NSFPSizeTitle = 133;
alias NSFPCurrentField = 134;

alias NSFontPanelFaceModeMask = 1;
alias NSFontPanelSizeModeMask = 2;
alias NSFontPanelCollectionModeMask = 4;
alias NSFontPanelUnderlineEffectModeMask = 256;
alias NSFontPanelStrikethroughEffectModeMask = 512;
alias NSFontPanelTextColorEffectModeMask = 1024;
alias NSFontPanelDocumentColorEffectModeMask = 2048;
alias NSFontPanelShadowEffectModeMask = 4096;
alias NSFontPanelAllEffectsModeMask = 1048320;
alias NSFontPanelStandardModesMask = 65535;
alias NSFontPanelAllModesMask = 4294967295;

alias NSRadioModeMatrix = 0;
alias NSHighlightModeMatrix = 1;
alias NSListModeMatrix = 2;
alias NSTrackModeMatrix = 3;

alias NSMatrixMode = CULong;

record Struct___MFlags (
    reservedMatrix : UInt,
    drawingContextMenuHighlightOnAllSelectedRows : UInt,
    drawingContextMenuHighlight : UInt,
    browserOptimizationsEnabled : UInt,
    needsRedrawBeforeFirstLiveResizeCache : UInt,
    tmpAllowNonVisibleCellsToBecomeFirstResponder : UInt,
    subclassIsSafeForLiveResize : UInt,
    hasCachedSubclassIsSafeForLiveResize : UInt,
    liveResizeImageCacheingEnabled : UInt,
    checkForSimpleTrackingMode : UInt,
    useSimpleTrackingMode : UInt,
    refusesFirstResponder : UInt,
    dontScroll : UInt,
    changingSelectionWithKeyboard : UInt,
    onlySetKeyCell : UInt,
    currentlySelectingCell : UInt,
    allowsIncrementalSearching : UInt,
    tabKeyTraversesCellsExplicitlySet : UInt,
    tabKeyTraversesCells : UInt,
    drawingAncestor : UInt,
    autosizeCells : UInt,
    drawsBackground : UInt,
    drawsCellBackground : UInt,
    selectionByRect : UInt,
    autoscroll : UInt,
    allowEmptySel : UInt,
    listMode : UInt,
    radioMode : UInt,
    highlightMode : UInt,
);

alias _MFlags = Struct___MFlags;

alias NSMenuPropertyItemTitle = 1;
alias NSMenuPropertyItemAttributedTitle = 2;
alias NSMenuPropertyItemKeyEquivalent = 4;
alias NSMenuPropertyItemImage = 8;
alias NSMenuPropertyItemEnabled = 16;
alias NSMenuPropertyItemAccessibilityDescription = 32;

alias NSMenuProperties = CULong;

external NSMenuWillSendActionNotification : NSString;

external NSMenuDidSendActionNotification : NSString;

external NSMenuDidAddItemNotification : NSString;

external NSMenuDidRemoveItemNotification : NSString;

external NSMenuDidChangeItemNotification : NSString;

external NSMenuDidBeginTrackingNotification : NSString;

external NSMenuDidEndTrackingNotification : NSString;

external NSPasteboardTypeString : NSString;

external NSPasteboardTypePDF : NSString;

external NSPasteboardTypeTIFF : NSString;

external NSPasteboardTypePNG : NSString;

external NSPasteboardTypeRTF : NSString;

external NSPasteboardTypeRTFD : NSString;

external NSPasteboardTypeHTML : NSString;

external NSPasteboardTypeTabularText : NSString;

external NSPasteboardTypeFont : NSString;

external NSPasteboardTypeRuler : NSString;

external NSPasteboardTypeColor : NSString;

external NSPasteboardTypeSound : NSString;

external NSPasteboardTypeMultipleTextSelection : NSString;

external NSPasteboardTypeFindPanelSearchOptions : NSString;

external NSGeneralPboard : NSString;

external NSFontPboard : NSString;

external NSRulerPboard : NSString;

external NSFindPboard : NSString;

external NSDragPboard : NSString;

external NSPasteboardURLReadingFileURLsOnlyKey : NSString;

external NSPasteboardURLReadingContentsConformToTypesKey : NSString;

alias NSPasteboardWritingPromised = 512;

alias NSPasteboardWritingOptions = CULong;

alias NSPasteboardReadingAsData = 0;
alias NSPasteboardReadingAsString = 1;
alias NSPasteboardReadingAsPropertyList = 2;
alias NSPasteboardReadingAsKeyedArchive = 4;

alias NSPasteboardReadingOptions = CULong;

external NSStringPboardType : NSString;

external NSFilenamesPboardType : NSString;

external NSTIFFPboardType : NSString;

external NSRTFPboardType : NSString;

external NSTabularTextPboardType : NSString;

external NSFontPboardType : NSString;

external NSRulerPboardType : NSString;

external NSColorPboardType : NSString;

external NSRTFDPboardType : NSString;

external NSHTMLPboardType : NSString;

external NSURLPboardType : NSString;

external NSPDFPboardType : NSString;

external NSMultipleTextSelectionPboardType : NSString;

external NSPostScriptPboardType : NSString;

external NSVCardPboardType : NSString;

external NSInkTextPboardType : NSString;

external NSFilesPromisePboardType : NSString;

external NSFileContentsPboardType : NSString;

external NSCreateFilenamePboardType(
    fileType : NSString) : NSString;

external NSCreateFileContentsPboardType(
    fileType : NSString) : NSString;

external NSGetFileType(
    pboardType : NSString) : NSString;

external NSGetFileTypes(
    pboardTypes : NSArray) : NSArray;

external NSPICTPboardType : NSString;

external NSSystemColorsDidChangeNotification : NSString;

alias NSUnknownColorSpaceModel = 4294967295;
alias NSGrayColorSpaceModel = 0;
alias NSRGBColorSpaceModel = 1;
alias NSCMYKColorSpaceModel = 2;
alias NSLABColorSpaceModel = 3;
alias NSDeviceNColorSpaceModel = 4;
alias NSIndexedColorSpaceModel = 5;
alias NSPatternColorSpaceModel = 6;

alias NSColorSpaceModel = CLong;

alias NSImageRepMatchesDevice = 0;

external NSImageRepRegistryDidChangeNotification : NSString;

alias NSTIFFCompressionNone = 1;
alias NSTIFFCompressionCCITTFAX3 = 3;
alias NSTIFFCompressionCCITTFAX4 = 4;
alias NSTIFFCompressionLZW = 5;
alias NSTIFFCompressionJPEG = 6;
alias NSTIFFCompressionNEXT = 32766;
alias NSTIFFCompressionPackBits = 32773;
alias NSTIFFCompressionOldJPEG = 32865;

alias NSTIFFCompression = CULong;

alias NSTIFFFileType = 0;
alias NSBMPFileType = 1;
alias NSGIFFileType = 2;
alias NSJPEGFileType = 3;
alias NSPNGFileType = 4;
alias NSJPEG2000FileType = 5;

alias NSBitmapImageFileType = CULong;

alias NSImageRepLoadStatusUnknownType = 4294967295;
alias NSImageRepLoadStatusReadingHeader = 4294967294;
alias NSImageRepLoadStatusWillNeedAllData = 4294967293;
alias NSImageRepLoadStatusInvalidData = 4294967292;
alias NSImageRepLoadStatusUnexpectedEOF = 4294967291;
alias NSImageRepLoadStatusCompleted = 4294967290;

alias NSImageRepLoadStatus = CLong;

alias NSAlphaFirstBitmapFormat = 1;
alias NSAlphaNonpremultipliedBitmapFormat = 2;
alias NSFloatingPointSamplesBitmapFormat = 4;

alias NSBitmapFormat = CULong;

external NSImageCompressionMethod : NSString;

external NSImageCompressionFactor : NSString;

external NSImageDitherTransparency : NSString;

external NSImageRGBColorTable : NSString;

external NSImageInterlaced : NSString;

external NSImageColorSyncProfileData : NSString;

external NSImageFrameCount : NSString;

external NSImageCurrentFrame : NSString;

external NSImageCurrentFrameDuration : NSString;

external NSImageLoopCount : NSString;

external NSImageGamma : NSString;

external NSImageProgressive : NSString;

external NSImageEXIFData : NSString;

external NSImageFallbackBackgroundColor : NSString;

alias NSDragOperation = CULong;

alias NSDragOperationNone = 0;
alias NSDragOperationCopy = 1;
alias NSDragOperationLink = 2;
alias NSDragOperationGeneric = 4;
alias NSDragOperationPrivate = 8;
alias NSDragOperationAll_Obsolete = 15;
alias NSDragOperationMove = 16;
alias NSDragOperationDelete = 32;
alias NSDragOperationEvery = 18446744073709551615;

record Struct___Brflags (
    firstVisibleCalculationDisabled : UInt,
    prefersAllColumnUserResizing : UInt,
    usesSmallScrollers : UInt,
    usesSmallSizeTitleFont : UInt,
    actionNeedsToBeSent : UInt,
    acceptsFirstMouse : UInt,
    refusesFirstResponder : UInt,
    disableCompositing : UInt,
    delegateSelectsCellsByRow : UInt,
    allowsIncrementalSearching : UInt,
    time : UInt,
    hasHorizontalScroller : UInt,
    prohibitEmptySel : UInt,
    sendActionOnArrowKeys : UInt,
    dontDrawTitles : UInt,
    acceptArrowKeys : UInt,
    delegateValidatesColumns : UInt,
    delegateDoesNotCreateRowsInMatrix : UInt,
    delegateSelectsCellsByString : UInt,
    delegateSetsTitles : UInt,
    delegateImplementsWillDisplayCell : UInt,
    separateColumns : UInt,
    titleFromPrevious : UInt,
    isTitled : UInt,
    reuseColumns : UInt,
    allowsBranchSelection : UInt,
    allowsMultipleSelection : UInt,
);

alias _Brflags = Struct___Brflags;

alias NSBrowserNoColumnResizing = 0;
alias NSBrowserAutoColumnResizing = 1;
alias NSBrowserUserColumnResizing = 2;

alias NSBrowserColumnResizingType = CULong;

alias NSBrowserDropOn = 0;
alias NSBrowserDropAbove = 1;

alias NSBrowserDropOperation = CULong;

external NSBrowserColumnConfigurationDidChangeNotification : NSString;

external NSColorListDidChangeNotification : NSString;

alias NSColorPanelMode = CLong;

alias NSNoModeColorPanel = 4294967295;
alias NSGrayModeColorPanel = 0;
alias NSRGBModeColorPanel = 1;
alias NSCMYKModeColorPanel = 2;
alias NSHSBModeColorPanel = 3;
alias NSCustomPaletteModeColorPanel = 4;
alias NSColorListModeColorPanel = 5;
alias NSWheelModeColorPanel = 6;
alias NSCrayonModeColorPanel = 7;

alias NSColorPanelGrayModeMask = 1;
alias NSColorPanelRGBModeMask = 2;
alias NSColorPanelCMYKModeMask = 4;
alias NSColorPanelHSBModeMask = 8;
alias NSColorPanelCustomPaletteModeMask = 16;
alias NSColorPanelColorListModeMask = 32;
alias NSColorPanelWheelModeMask = 64;
alias NSColorPanelCrayonModeMask = 128;
alias NSColorPanelAllModesMask = 65535;

external NSColorPanelColorDidChangeNotification : NSString;

alias NSChangeDone = 0;
alias NSChangeUndone = 1;
alias NSChangeCleared = 2;
alias NSChangeRedone = 5;
alias NSChangeReadOtherContents = 3;
alias NSChangeAutosaved = 4;

alias NSDocumentChangeType = CULong;

alias NSSaveOperation = 0;
alias NSSaveAsOperation = 1;
alias NSSaveToOperation = 2;
alias NSAutosaveOperation = 3;

alias NSSaveOperationType = CULong;

alias NSTouchPhaseBegan = 1;
alias NSTouchPhaseMoved = 2;
alias NSTouchPhaseStationary = 4;
alias NSTouchPhaseEnded = 8;
alias NSTouchPhaseCancelled = 16;
alias NSTouchPhaseTouching = 7;
alias NSTouchPhaseAny = 18446744073709551615;

alias NSTouchPhase = CULong;

alias NSLeftMouseDown = 1;
alias NSLeftMouseUp = 2;
alias NSRightMouseDown = 3;
alias NSRightMouseUp = 4;
alias NSMouseMoved = 5;
alias NSLeftMouseDragged = 6;
alias NSRightMouseDragged = 7;
alias NSMouseEntered = 8;
alias NSMouseExited = 9;
alias NSKeyDown = 10;
alias NSKeyUp = 11;
alias NSFlagsChanged = 12;
alias NSAppKitDefined = 13;
alias NSSystemDefined = 14;
alias NSApplicationDefined = 15;
alias NSPeriodic = 16;
alias NSCursorUpdate = 17;
alias NSScrollWheel = 22;
alias NSTabletPoint = 23;
alias NSTabletProximity = 24;
alias NSOtherMouseDown = 25;
alias NSOtherMouseUp = 26;
alias NSOtherMouseDragged = 27;
alias NSEventTypeGesture = 29;
alias NSEventTypeMagnify = 30;
alias NSEventTypeSwipe = 31;
alias NSEventTypeRotate = 18;
alias NSEventTypeBeginGesture = 19;
alias NSEventTypeEndGesture = 20;

alias NSEventType = CULong;

alias NSEventMask = UInt64;

alias NSLeftMouseDownMask = 2;
alias NSLeftMouseUpMask = 4;
alias NSRightMouseDownMask = 8;
alias NSRightMouseUpMask = 16;
alias NSMouseMovedMask = 32;
alias NSLeftMouseDraggedMask = 64;
alias NSRightMouseDraggedMask = 128;
alias NSMouseEnteredMask = 256;
alias NSMouseExitedMask = 512;
alias NSKeyDownMask = 1024;
alias NSKeyUpMask = 2048;
alias NSFlagsChangedMask = 4096;
alias NSAppKitDefinedMask = 8192;
alias NSSystemDefinedMask = 16384;
alias NSApplicationDefinedMask = 32768;
alias NSPeriodicMask = 65536;
alias NSCursorUpdateMask = 131072;
alias NSScrollWheelMask = 4194304;
alias NSTabletPointMask = 8388608;
alias NSTabletProximityMask = 16777216;
alias NSOtherMouseDownMask = 33554432;
alias NSOtherMouseUpMask = 67108864;
alias NSOtherMouseDraggedMask = 134217728;
alias NSEventMaskGesture = 536870912;
alias NSEventMaskMagnify = 1073741824;
alias NSEventMaskSwipe = 2147483648;
alias NSEventMaskRotate = 262144;
alias NSEventMaskBeginGesture = 524288;
alias NSEventMaskEndGesture = 1048576;
alias NSAnyEventMask = 18446744073709551615;

alias NSAlphaShiftKeyMask = 65536;
alias NSShiftKeyMask = 131072;
alias NSControlKeyMask = 262144;
alias NSAlternateKeyMask = 524288;
alias NSCommandKeyMask = 1048576;
alias NSNumericPadKeyMask = 2097152;
alias NSHelpKeyMask = 4194304;
alias NSFunctionKeyMask = 8388608;
alias NSDeviceIndependentModifierFlagsMask = 4294901760;

alias NSUnknownPointingDevice = 0;
alias NSPenPointingDevice = 1;
alias NSCursorPointingDevice = 2;
alias NSEraserPointingDevice = 3;

alias NSPointingDeviceType = CULong;

alias NSPenTipMask = 1;
alias NSPenLowerSideMask = 2;
alias NSPenUpperSideMask = 4;

alias NSUpArrowFunctionKey = 63232;
alias NSDownArrowFunctionKey = 63233;
alias NSLeftArrowFunctionKey = 63234;
alias NSRightArrowFunctionKey = 63235;
alias NSF1FunctionKey = 63236;
alias NSF2FunctionKey = 63237;
alias NSF3FunctionKey = 63238;
alias NSF4FunctionKey = 63239;
alias NSF5FunctionKey = 63240;
alias NSF6FunctionKey = 63241;
alias NSF7FunctionKey = 63242;
alias NSF8FunctionKey = 63243;
alias NSF9FunctionKey = 63244;
alias NSF10FunctionKey = 63245;
alias NSF11FunctionKey = 63246;
alias NSF12FunctionKey = 63247;
alias NSF13FunctionKey = 63248;
alias NSF14FunctionKey = 63249;
alias NSF15FunctionKey = 63250;
alias NSF16FunctionKey = 63251;
alias NSF17FunctionKey = 63252;
alias NSF18FunctionKey = 63253;
alias NSF19FunctionKey = 63254;
alias NSF20FunctionKey = 63255;
alias NSF21FunctionKey = 63256;
alias NSF22FunctionKey = 63257;
alias NSF23FunctionKey = 63258;
alias NSF24FunctionKey = 63259;
alias NSF25FunctionKey = 63260;
alias NSF26FunctionKey = 63261;
alias NSF27FunctionKey = 63262;
alias NSF28FunctionKey = 63263;
alias NSF29FunctionKey = 63264;
alias NSF30FunctionKey = 63265;
alias NSF31FunctionKey = 63266;
alias NSF32FunctionKey = 63267;
alias NSF33FunctionKey = 63268;
alias NSF34FunctionKey = 63269;
alias NSF35FunctionKey = 63270;
alias NSInsertFunctionKey = 63271;
alias NSDeleteFunctionKey = 63272;
alias NSHomeFunctionKey = 63273;
alias NSBeginFunctionKey = 63274;
alias NSEndFunctionKey = 63275;
alias NSPageUpFunctionKey = 63276;
alias NSPageDownFunctionKey = 63277;
alias NSPrintScreenFunctionKey = 63278;
alias NSScrollLockFunctionKey = 63279;
alias NSPauseFunctionKey = 63280;
alias NSSysReqFunctionKey = 63281;
alias NSBreakFunctionKey = 63282;
alias NSResetFunctionKey = 63283;
alias NSStopFunctionKey = 63284;
alias NSMenuFunctionKey = 63285;
alias NSUserFunctionKey = 63286;
alias NSSystemFunctionKey = 63287;
alias NSPrintFunctionKey = 63288;
alias NSClearLineFunctionKey = 63289;
alias NSClearDisplayFunctionKey = 63290;
alias NSInsertLineFunctionKey = 63291;
alias NSDeleteLineFunctionKey = 63292;
alias NSInsertCharFunctionKey = 63293;
alias NSDeleteCharFunctionKey = 63294;
alias NSPrevFunctionKey = 63295;
alias NSNextFunctionKey = 63296;
alias NSSelectFunctionKey = 63297;
alias NSExecuteFunctionKey = 63298;
alias NSUndoFunctionKey = 63299;
alias NSRedoFunctionKey = 63300;
alias NSFindFunctionKey = 63301;
alias NSHelpFunctionKey = 63302;
alias NSModeSwitchFunctionKey = 63303;

alias NSWindowExposedEventType = 0;
alias NSApplicationActivatedEventType = 1;
alias NSApplicationDeactivatedEventType = 2;
alias NSWindowMovedEventType = 4;
alias NSScreenChangedEventType = 8;
alias NSAWTEventType = 16;

alias NSPowerOffEventType = 1;

alias NSMouseEventSubtype = 0;
alias NSTabletPointEventSubtype = 1;
alias NSTabletProximityEventSubtype = 2;
alias NSTouchEventSubtype = 3;

alias NSFileWrapperReadingImmediate = 1;
alias NSFileWrapperReadingWithoutMapping = 2;

alias NSFileWrapperReadingOptions = CULong;

alias NSFileWrapperWritingAtomic = 1;
alias NSFileWrapperWritingWithNameUpdating = 2;

alias NSFileWrapperWritingOptions = CULong;

external NSContextHelpModeDidActivateNotification : NSString;

external NSContextHelpModeDidDeactivateNotification : NSString;

alias NSGradientDrawingOptions = CULong;

alias NSGradientDrawsBeforeStartingLocation = 1;
alias NSGradientDrawsAfterEndingLocation = 2;

alias NSImageLoadStatusCompleted = 0;
alias NSImageLoadStatusCancelled = 1;
alias NSImageLoadStatusInvalidData = 2;
alias NSImageLoadStatusUnexpectedEOF = 3;
alias NSImageLoadStatusReadError = 4;

alias NSImageLoadStatus = CULong;

alias NSImageCacheDefault = 0;
alias NSImageCacheAlways = 1;
alias NSImageCacheBySize = 2;
alias NSImageCacheNever = 3;

alias NSImageCacheMode = CULong;

external NSImageHintCTM : NSString;

external NSImageHintInterpolation : NSString;

external NSImageNameQuickLookTemplate : NSString;

external NSImageNameBluetoothTemplate : NSString;

external NSImageNameIChatTheaterTemplate : NSString;

external NSImageNameSlideshowTemplate : NSString;

external NSImageNameActionTemplate : NSString;

external NSImageNameSmartBadgeTemplate : NSString;

external NSImageNameIconViewTemplate : NSString;

external NSImageNameListViewTemplate : NSString;

external NSImageNameColumnViewTemplate : NSString;

external NSImageNameFlowViewTemplate : NSString;

external NSImageNamePathTemplate : NSString;

external NSImageNameInvalidDataFreestandingTemplate : NSString;

external NSImageNameLockLockedTemplate : NSString;

external NSImageNameLockUnlockedTemplate : NSString;

external NSImageNameGoRightTemplate : NSString;

external NSImageNameGoLeftTemplate : NSString;

external NSImageNameRightFacingTriangleTemplate : NSString;

external NSImageNameLeftFacingTriangleTemplate : NSString;

external NSImageNameAddTemplate : NSString;

external NSImageNameRemoveTemplate : NSString;

external NSImageNameRevealFreestandingTemplate : NSString;

external NSImageNameFollowLinkFreestandingTemplate : NSString;

external NSImageNameEnterFullScreenTemplate : NSString;

external NSImageNameExitFullScreenTemplate : NSString;

external NSImageNameStopProgressTemplate : NSString;

external NSImageNameStopProgressFreestandingTemplate : NSString;

external NSImageNameRefreshTemplate : NSString;

external NSImageNameRefreshFreestandingTemplate : NSString;

external NSImageNameBonjour : NSString;

external NSImageNameComputer : NSString;

external NSImageNameFolderBurnable : NSString;

external NSImageNameFolderSmart : NSString;

external NSImageNameFolder : NSString;

external NSImageNameNetwork : NSString;

external NSImageNameDotMac : NSString;

external NSImageNameMobileMe : NSString;

external NSImageNameMultipleDocuments : NSString;

external NSImageNameUserAccounts : NSString;

external NSImageNamePreferencesGeneral : NSString;

external NSImageNameAdvanced : NSString;

external NSImageNameInfo : NSString;

external NSImageNameFontPanel : NSString;

external NSImageNameColorPanel : NSString;

external NSImageNameUser : NSString;

external NSImageNameUserGroup : NSString;

external NSImageNameEveryone : NSString;

external NSImageNameUserGuest : NSString;

external NSImageNameMenuOnStateTemplate : NSString;

external NSImageNameMenuMixedStateTemplate : NSString;

external NSImageNameApplicationIcon : NSString;

external NSImageNameTrashEmpty : NSString;

external NSImageNameTrashFull : NSString;

external NSImageNameHomeTemplate : NSString;

external NSImageNameBookmarksTemplate : NSString;

external NSImageNameCaution : NSString;

external NSImageNameStatusAvailable : NSString;

external NSImageNameStatusPartiallyAvailable : NSString;

external NSImageNameStatusUnavailable : NSString;

external NSImageNameStatusNone : NSString;

alias NSImageAlignCenter = 0;
alias NSImageAlignTop = 1;
alias NSImageAlignTopLeft = 2;
alias NSImageAlignTopRight = 3;
alias NSImageAlignLeft = 4;
alias NSImageAlignBottom = 5;
alias NSImageAlignBottomLeft = 6;
alias NSImageAlignBottomRight = 7;
alias NSImageAlignRight = 8;

alias NSImageAlignment = CULong;

alias NSImageFrameNone = 0;
alias NSImageFramePhoto = 1;
alias NSImageFrameGrayBezel = 2;
alias NSImageFrameGroove = 3;
alias NSImageFrameButton = 4;

alias NSImageFrameStyle = CULong;

external NSNibOwner : NSString;

external NSNibTopLevelObjects : NSString;

alias NSPrinterTableOK = 0;
alias NSPrinterTableNotFound = 1;
alias NSPrinterTableError = 2;

alias NSPrinterTableStatus = CULong;

external NSVoiceName : NSString;

external NSVoiceIdentifier : NSString;

external NSVoiceAge : NSString;

external NSVoiceGender : NSString;

external NSVoiceDemoText : NSString;

external NSVoiceLocaleIdentifier : NSString;

external NSVoiceSupportedCharacters : NSString;

external NSVoiceIndividuallySpokenCharacters : NSString;

external NSVoiceGenderNeuter : NSString;

external NSVoiceGenderMale : NSString;

external NSVoiceGenderFemale : NSString;

external NSVoiceLanguage : NSString;

alias NSSpeechImmediateBoundary = 0;
alias NSSpeechWordBoundary = 1;
alias NSSpeechSentenceBoundary = 2;

alias NSSpeechBoundary = CULong;

external NSSpeechStatusProperty : NSString;

external NSSpeechErrorsProperty : NSString;

external NSSpeechInputModeProperty : NSString;

external NSSpeechCharacterModeProperty : NSString;

external NSSpeechNumberModeProperty : NSString;

external NSSpeechRateProperty : NSString;

external NSSpeechPitchBaseProperty : NSString;

external NSSpeechPitchModProperty : NSString;

external NSSpeechVolumeProperty : NSString;

external NSSpeechSynthesizerInfoProperty : NSString;

external NSSpeechRecentSyncProperty : NSString;

external NSSpeechPhonemeSymbolsProperty : NSString;

external NSSpeechCurrentVoiceProperty : NSString;

external NSSpeechCommandDelimiterProperty : NSString;

external NSSpeechResetProperty : NSString;

external NSSpeechOutputToFileURLProperty : NSString;

external NSSpeechModeText : NSString;

external NSSpeechModePhoneme : NSString;

external NSSpeechModeNormal : NSString;

external NSSpeechModeLiteral : NSString;

external NSSpeechStatusOutputBusy : NSString;

external NSSpeechStatusOutputPaused : NSString;

external NSSpeechStatusNumberOfCharactersLeft : NSString;

external NSSpeechStatusPhonemeCode : NSString;

external NSSpeechErrorCount : NSString;

external NSSpeechErrorOldestCode : NSString;

external NSSpeechErrorOldestCharacterOffset : NSString;

external NSSpeechErrorNewestCode : NSString;

external NSSpeechErrorNewestCharacterOffset : NSString;

external NSSpeechSynthesizerInfoIdentifier : NSString;

external NSSpeechSynthesizerInfoVersion : NSString;

external NSSpeechPhonemeInfoOpcode : NSString;

external NSSpeechPhonemeInfoSymbol : NSString;

external NSSpeechPhonemeInfoExample : NSString;

external NSSpeechPhonemeInfoHiliteStart : NSString;

external NSSpeechPhonemeInfoHiliteEnd : NSString;

external NSSpeechCommandPrefix : NSString;

external NSSpeechCommandSuffix : NSString;

external NSSpeechDictionaryLocaleIdentifier : NSString;

external NSSpeechDictionaryModificationDate : NSString;

external NSSpeechDictionaryPronunciations : NSString;

external NSSpeechDictionaryAbbreviations : NSString;

external NSSpeechDictionaryEntrySpelling : NSString;

external NSSpeechDictionaryEntryPhonemes : NSString;

alias NSSplitViewDividerStyleThick = 1;
alias NSSplitViewDividerStyleThin = 2;
alias NSSplitViewDividerStylePaneSplitter = 3;

alias NSSplitViewDividerStyle = CLong;

external NSSplitViewWillResizeSubviewsNotification : NSString;

external NSSplitViewDidResizeSubviewsNotification : NSString;

alias NSFileHandlingPanelCancelButton = 0;
alias NSFileHandlingPanelOKButton = 1;

record Struct___SPFlags (
    saveMode : UInt,
    isExpanded : UInt,
    allowsOtherFileTypes : UInt,
    canCreateDirectories : UInt,
    canSelectedHiddenExtension : UInt,
    inConfigureForDirectory : UInt,
    delegate_shouldShowFilename : UInt,
    delegate_compareFilename : UInt,
    delegate_shouldEnableURL : UInt,
    delegate_validateURL : UInt,
    delegate_didChangeToDirectoryURL : UInt,
    changingFrameSize : UInt,
    movingAccessoryView : UInt,
    userAccessoryViewFrameChange : UInt,
    reserved : UInt,
);

alias _SPFlags = Struct___SPFlags;

external NSPopUpButtonWillPopUpNotification : NSString;

alias NSPortraitOrientation = 0;
alias NSLandscapeOrientation = 1;

alias NSPrintingOrientation = CULong;

alias NSAutoPagination = 0;
alias NSFitPagination = 1;
alias NSClipPagination = 2;

alias NSPrintingPaginationMode = CULong;

external NSPrintSpoolJob : NSString;

external NSPrintPreviewJob : NSString;

external NSPrintSaveJob : NSString;

external NSPrintCancelJob : NSString;

external NSPrintPaperName : NSString;

external NSPrintPaperSize : NSString;

external NSPrintOrientation : NSString;

external NSPrintScalingFactor : NSString;

external NSPrintLeftMargin : NSString;

external NSPrintRightMargin : NSString;

external NSPrintTopMargin : NSString;

external NSPrintBottomMargin : NSString;

external NSPrintHorizontallyCentered : NSString;

external NSPrintVerticallyCentered : NSString;

external NSPrintHorizontalPagination : NSString;

external NSPrintVerticalPagination : NSString;

external NSPrintPrinter : NSString;

external NSPrintCopies : NSString;

external NSPrintAllPages : NSString;

external NSPrintFirstPage : NSString;

external NSPrintLastPage : NSString;

external NSPrintMustCollate : NSString;

external NSPrintReversePageOrder : NSString;

external NSPrintJobDisposition : NSString;

external NSPrintPagesAcross : NSString;

external NSPrintPagesDown : NSString;

external NSPrintTime : NSString;

external NSPrintDetailedErrorReporting : NSString;

external NSPrintFaxNumber : NSString;

external NSPrintPrinterName : NSString;

external NSPrintSelectionOnly : NSString;

external NSPrintJobSavingURL : NSString;

external NSPrintJobSavingFileNameExtensionHidden : NSString;

external NSPrintHeaderAndFooter : NSString;

external NSPrintFormName : NSString;

external NSPrintJobFeatures : NSString;

external NSPrintManualFeed : NSString;

external NSPrintPagesPerSheet : NSString;

external NSPrintPaperFeed : NSString;

external NSPrintSavePath : NSString;

alias NSDescendingPageOrder = 4294967295;
alias NSSpecialPageOrder = 0;
alias NSAscendingPageOrder = 1;
alias NSUnknownPageOrder = 2;

alias NSPrintingPageOrder = CLong;

external NSPrintOperationExistsException : NSString;

alias NSPrintPanelShowsCopies = 1;
alias NSPrintPanelShowsPageRange = 2;
alias NSPrintPanelShowsPaperSize = 4;
alias NSPrintPanelShowsOrientation = 8;
alias NSPrintPanelShowsScaling = 16;
alias NSPrintPanelShowsPrintSelection = 32;
alias NSPrintPanelShowsPageSetupAccessory = 256;
alias NSPrintPanelShowsPreview = 131072;

alias NSPrintPanelOptions = CLong;

external NSPrintPhotoJobStyleHint : NSString;

external NSPrintAllPresetsJobStyleHint : NSString;

external NSPrintNoPresetsJobStyleHint : NSString;

external NSPrintPanelAccessorySummaryItemNameKey : NSString;

external NSPrintPanelAccessorySummaryItemDescriptionKey : NSString;

alias NSScreenAuxiliaryOpaque = Opaque;

external NSScreenColorSpaceDidChangeNotification : NSString;

record Struct___SFlags (
    RESERVED : UInt,
    autoforwardsScrollWheelEvents : UInt,
    autohidesScrollers : UInt,
    hasCustomLineBorderColor : UInt,
    focusRingNeedsRedisplay : UInt,
    skipRemoveSuperviewCheck : UInt,
    doesNotDrawBackground : UInt,
    needsTile : UInt,
    hasVerticalRuler : UInt,
    hasHorizontalRuler : UInt,
    showRulers : UInt,
    oldRulerInstalled : UInt,
    borderType : CULong,
    noDynamicScrolling : UInt,
    hScrollerStatus : UInt,
    vScrollerStatus : UInt,
    hScrollerRequired : UInt,
    vScrollerRequired : UInt,
);

alias _SFlags = Struct___SFlags;

alias NSScrollerArrowsMaxEnd = 0;
alias NSScrollerArrowsMinEnd = 1;
alias NSScrollerArrowsDefaultSetting = 0;
alias NSScrollerArrowsNone = 2;

alias NSScrollArrowPosition = CULong;

alias NSNoScrollerParts = 0;
alias NSOnlyScrollerArrows = 1;
alias NSAllScrollerParts = 2;

alias NSUsableScrollerParts = CULong;

alias NSScrollerNoPart = 0;
alias NSScrollerDecrementPage = 1;
alias NSScrollerKnob = 2;
alias NSScrollerIncrementPage = 3;
alias NSScrollerDecrementLine = 4;
alias NSScrollerIncrementLine = 5;
alias NSScrollerKnobSlot = 6;

alias NSScrollerPart = CULong;

alias NSScrollerIncrementArrow = 0;
alias NSScrollerDecrementArrow = 1;

alias NSScrollerArrow = CULong;

alias NSSegmentStyleAutomatic = 0;
alias NSSegmentStyleRounded = 1;
alias NSSegmentStyleTexturedRounded = 2;
alias NSSegmentStyleRoundRect = 3;
alias NSSegmentStyleTexturedSquare = 4;
alias NSSegmentStyleCapsule = 5;
alias NSSegmentStyleSmallSquare = 6;

alias NSSegmentStyle = CLong;

alias NSSegmentSwitchTrackingSelectOne = 0;
alias NSSegmentSwitchTrackingSelectAny = 1;
alias NSSegmentSwitchTrackingMomentary = 2;

alias NSSegmentSwitchTracking = CULong;

alias NSTickMarkBelow = 0;
alias NSTickMarkAbove = 1;
alias NSTickMarkLeft = 1;
alias NSTickMarkRight = 0;

alias NSTickMarkPosition = CULong;

alias NSLinearSlider = 0;
alias NSCircularSlider = 1;

alias NSSliderType = CULong;

alias NSTextFieldSquareBezel = 0;
alias NSTextFieldRoundedBezel = 1;

alias NSTextFieldBezelStyle = CULong;

alias NSLineSweepLeft = 0;
alias NSLineSweepRight = 1;
alias NSLineSweepDown = 2;
alias NSLineSweepUp = 3;

alias NSLineSweepDirection = CULong;

alias NSLineDoesntMove = 0;
alias NSLineMovesLeft = 1;
alias NSLineMovesRight = 2;
alias NSLineMovesDown = 3;
alias NSLineMovesUp = 4;

alias NSLineMovementDirection = CULong;

alias NSDefaultTokenStyle = 0;
alias NSPlainTextTokenStyle = 1;
alias NSRoundedTokenStyle = 2;

alias NSTokenStyle = CULong;

alias NSTrackingMouseEnteredAndExited = 1;
alias NSTrackingMouseMoved = 2;
alias NSTrackingCursorUpdate = 4;

alias NSTrackingActiveWhenFirstResponder = 16;
alias NSTrackingActiveInKeyWindow = 32;
alias NSTrackingActiveInActiveApp = 64;
alias NSTrackingActiveAlways = 128;

alias NSTrackingAssumeInside = 256;
alias NSTrackingInVisibleRect = 512;
alias NSTrackingEnabledDuringMouseDrag = 1024;

alias NSTrackingAreaOptions = CULong;

external NSComboBoxWillPopUpNotification : NSString;

external NSComboBoxWillDismissNotification : NSString;

external NSComboBoxSelectionDidChangeNotification : NSString;

external NSComboBoxSelectionIsChangingNotification : NSString;

external NSFontAttributeName : NSString;

external NSParagraphStyleAttributeName : NSString;

external NSForegroundColorAttributeName : NSString;

external NSUnderlineStyleAttributeName : NSString;

external NSSuperscriptAttributeName : NSString;

external NSBackgroundColorAttributeName : NSString;

external NSAttachmentAttributeName : NSString;

external NSLigatureAttributeName : NSString;

external NSBaselineOffsetAttributeName : NSString;

external NSKernAttributeName : NSString;

external NSLinkAttributeName : NSString;

external NSStrokeWidthAttributeName : NSString;

external NSStrokeColorAttributeName : NSString;

external NSUnderlineColorAttributeName : NSString;

external NSStrikethroughStyleAttributeName : NSString;

external NSStrikethroughColorAttributeName : NSString;

external NSShadowAttributeName : NSString;

external NSObliquenessAttributeName : NSString;

external NSExpansionAttributeName : NSString;

external NSCursorAttributeName : NSString;

external NSToolTipAttributeName : NSString;

external NSCharacterShapeAttributeName : NSString;

external NSGlyphInfoAttributeName : NSString;

external NSWritingDirectionAttributeName : NSString;

external NSMarkedClauseSegmentAttributeName : NSString;

alias NSUnderlineStyleNone = 0;
alias NSUnderlineStyleSingle = 1;
alias NSUnderlineStyleThick = 2;
alias NSUnderlineStyleDouble = 9;

alias NSUnderlinePatternSolid = 0;
alias NSUnderlinePatternDot = 256;
alias NSUnderlinePatternDash = 512;
alias NSUnderlinePatternDashDot = 768;
alias NSUnderlinePatternDashDotDot = 1024;

external NSUnderlineByWordMask : CULong;

external NSSpellingStateAttributeName : NSString;

alias NSSpellingStateSpellingFlag = 1;
alias NSSpellingStateGrammarFlag = 2;

external NSPlainTextDocumentType : NSString;

external NSRTFTextDocumentType : NSString;

external NSRTFDTextDocumentType : NSString;

external NSMacSimpleTextDocumentType : NSString;

external NSHTMLTextDocumentType : NSString;

external NSDocFormatTextDocumentType : NSString;

external NSWordMLTextDocumentType : NSString;

external NSWebArchiveTextDocumentType : NSString;

external NSOfficeOpenXMLTextDocumentType : NSString;

external NSOpenDocumentTextDocumentType : NSString;

external NSPaperSizeDocumentAttribute : NSString;

external NSLeftMarginDocumentAttribute : NSString;

external NSRightMarginDocumentAttribute : NSString;

external NSTopMarginDocumentAttribute : NSString;

external NSBottomMarginDocumentAttribute : NSString;

external NSViewSizeDocumentAttribute : NSString;

external NSViewZoomDocumentAttribute : NSString;

external NSViewModeDocumentAttribute : NSString;

external NSDocumentTypeDocumentAttribute : NSString;

external NSReadOnlyDocumentAttribute : NSString;

external NSConvertedDocumentAttribute : NSString;

external NSCocoaVersionDocumentAttribute : NSString;

external NSBackgroundColorDocumentAttribute : NSString;

external NSHyphenationFactorDocumentAttribute : NSString;

external NSDefaultTabIntervalDocumentAttribute : NSString;

external NSCharacterEncodingDocumentAttribute : NSString;

external NSFileTypeDocumentAttribute : NSString;

external NSTitleDocumentAttribute : NSString;

external NSCompanyDocumentAttribute : NSString;

external NSCopyrightDocumentAttribute : NSString;

external NSSubjectDocumentAttribute : NSString;

external NSAuthorDocumentAttribute : NSString;

external NSKeywordsDocumentAttribute : NSString;

external NSCommentDocumentAttribute : NSString;

external NSEditorDocumentAttribute : NSString;

external NSCreationTimeDocumentAttribute : NSString;

external NSModificationTimeDocumentAttribute : NSString;

external NSManagerDocumentAttribute : NSString;

external NSCategoryDocumentAttribute : NSString;

external NSExcludedElementsDocumentAttribute : NSString;

external NSTextEncodingNameDocumentAttribute : NSString;

external NSPrefixSpacesDocumentAttribute : NSString;

external NSDocumentTypeDocumentOption : NSString;

external NSDefaultAttributesDocumentOption : NSString;

external NSCharacterEncodingDocumentOption : NSString;

external NSTextEncodingNameDocumentOption : NSString;

external NSBaseURLDocumentOption : NSString;

external NSTimeoutDocumentOption : NSString;

external NSWebPreferencesDocumentOption : NSString;

external NSWebResourceLoadDelegateDocumentOption : NSString;

external NSTextSizeMultiplierDocumentOption : NSString;

external NSFileTypeDocumentOption : NSString;

alias NSNoUnderlineStyle = 0;
alias NSSingleUnderlineStyle = 1;

external NSUnderlineStrikethroughMask : CULong;

alias NSAttachmentCharacter = 65532;

alias NSSelectByCharacter = 0;
alias NSSelectByWord = 1;
alias NSSelectByParagraph = 2;

alias NSSelectionGranularity = CULong;

alias NSSelectionAffinityUpstream = 0;
alias NSSelectionAffinityDownstream = 1;

alias NSSelectionAffinity = CULong;

alias NSFindPanelActionShowFindPanel = 1;
alias NSFindPanelActionNext = 2;
alias NSFindPanelActionPrevious = 3;
alias NSFindPanelActionReplaceAll = 4;
alias NSFindPanelActionReplace = 5;
alias NSFindPanelActionReplaceAndFind = 6;
alias NSFindPanelActionSetFindString = 7;
alias NSFindPanelActionReplaceAllInSelection = 8;
alias NSFindPanelActionSelectAll = 9;
alias NSFindPanelActionSelectAllInSelection = 10;

alias NSFindPanelAction = CULong;

external NSFindPanelSearchOptionsPboardType : NSString;

external NSFindPanelCaseInsensitiveSearch : NSString;

external NSFindPanelSubstringMatch : NSString;

alias NSFindPanelSubstringMatchTypeContains = 0;
alias NSFindPanelSubstringMatchTypeStartsWith = 1;
alias NSFindPanelSubstringMatchTypeFullWord = 2;
alias NSFindPanelSubstringMatchTypeEndsWith = 3;

alias NSFindPanelSubstringMatchType = CULong;

external NSAllRomanInputSourcesLocaleIdentifier : NSString;

external NSTextViewWillChangeNotifyingTextViewNotification : NSString;

external NSTextViewDidChangeSelectionNotification : NSString;

external NSTextViewDidChangeTypingAttributesNotification : NSString;

record Struct___TvFlags (
    refusesFirstResponder : UInt,
    movedPostingDisableCount : UInt,
    selectionPostingDisableCount : UInt,
    dataSourceSetObjectValue : UInt,
    oldAutoresizesAllColumnsToFit : UInt,
    delegateSelectionShouldChangeInTableView : UInt,
    delegateShouldSelectTableColumn : UInt,
    delegateShouldSelectRow : UInt,
    delegateShouldEditTableColumn : UInt,
    delegateWillDisplayCell : UInt,
    compareWidthWithSuperview : UInt,
    changingLayout : UInt,
    selectionType : UInt,
    allowsColumnSelection : UInt,
    allowsMultipleSelection : UInt,
    allowsEmptySelection : UInt,
    oldDrawsGridFlag : UInt,
    allowsColumnResizing : UInt,
    allowsColumnReordering : UInt,
);

alias _TvFlags = Struct___TvFlags;

alias NSTableViewDropOn = 0;
alias NSTableViewDropAbove = 1;

alias NSTableViewDropOperation = CULong;

external NSTableViewSelectionDidChangeNotification : NSString;

external NSTableViewColumnDidMoveNotification : NSString;

external NSTableViewColumnDidResizeNotification : NSString;

external NSTableViewSelectionIsChangingNotification : NSString;

record Struct___OvFlags (
    _reserved : UInt,
    dontRedisplayOnFrameChange : UInt,
    flashingOutlineCell : UInt,
    flashingEntireRow : UInt,
    delegateShouldAutoExpandItem : UInt,
    delegateAutoCollapseItem : UInt,
    delegateAutoExpandItem : UInt,
    delegateShouldShowOutlineCellForItem : UInt,
    dataSourceDraggedImageMovedTo : UInt,
    dataSourceDraggingEndedAt : UInt,
    reloadingData : UInt,
    validDataSourceMethods : UInt,
    numberOfRowsDataExpandEntered : UInt,
    delayRowEntryFreeDisabled : UInt,
    delegateHeightOfRowByItem : UInt,
    _unused : UInt,
    autoExpandFlashState : UInt,
    selectionAdjustmentDisabled : UInt,
    removeChildInProgress : UInt,
    delegateWillDisplayOutlineCell : UInt,
    enableExpandNotifications : UInt,
    autoSaveExpandItems : UInt,
    autoresizesOutlineColumn : UInt,
    delegateShouldExpandItem : UInt,
    delegateShouldCollapseItem : UInt,
    delegateSelectionShouldChangeInOutlineView : UInt,
    delegateShouldSelectTableColumn : UInt,
    delegateShouldSelectItem : UInt,
    delegateShouldEditTableColumn : UInt,
    delegateWillDisplayCell : UInt,
);

alias _OVFlags = Struct___OvFlags;

alias NSOutlineViewDropOnItemIndex = 4294967295;

external NSOutlineViewSelectionDidChangeNotification : NSString;

external NSOutlineViewColumnDidMoveNotification : NSString;

external NSOutlineViewColumnDidResizeNotification : NSString;

external NSOutlineViewSelectionIsChangingNotification : NSString;

external NSOutlineViewItemWillExpandNotification : NSString;

external NSOutlineViewItemDidExpandNotification : NSString;

external NSOutlineViewItemWillCollapseNotification : NSString;

external NSOutlineViewItemDidCollapseNotification : NSString;

alias NSShowControlGlyphs = 1;
alias NSShowInvisibleGlyphs = 2;
alias NSWantsBidiLevels = 4;

alias NSGlyphAttributeSoft = 0;
alias NSGlyphAttributeElastic = 1;
alias NSGlyphAttributeBidiLevel = 2;
alias NSGlyphAttributeInscribe = 5;

alias NSGlyphInscribeBase = 0;
alias NSGlyphInscribeBelow = 1;
alias NSGlyphInscribeAbove = 2;
alias NSGlyphInscribeOverstrike = 3;
alias NSGlyphInscribeOverBelow = 4;

alias NSGlyphInscription = CULong;

alias NSTypesetterLatestBehavior = 4294967295;
alias NSTypesetterOriginalBehavior = 0;
alias NSTypesetterBehavior_10_2_WithCompatibility = 1;
alias NSTypesetterBehavior_10_2 = 2;
alias NSTypesetterBehavior_10_3 = 3;
alias NSTypesetterBehavior_10_4 = 4;

alias NSTypesetterBehavior = CLong;

alias NSTextStorageEditedAttributes = 1;
alias NSTextStorageEditedCharacters = 2;

external NSTextStorageWillProcessEditingNotification : NSString;

external NSTextStorageDidProcessEditingNotification : NSString;

alias NSStringDrawingTruncatesLastVisibleLine = 32;
alias NSStringDrawingUsesLineFragmentOrigin = 1;
alias NSStringDrawingUsesFontLeading = 2;
alias NSStringDrawingDisableScreenFontSubstitution = 4;
alias NSStringDrawingUsesDeviceMetrics = 8;
alias NSStringDrawingOneShot = 16;

alias NSStringDrawingOptions = CLong;

alias NSHorizontalRuler = 0;
alias NSVerticalRuler = 1;

alias NSRulerOrientation = CULong;

alias NSNoInterfaceStyle = 0;
alias NSNextStepInterfaceStyle = 1;
alias NSWindows95InterfaceStyle = 2;
alias NSMacintoshInterfaceStyle = 3;

alias NSInterfaceStyle = CULong;

external NSInterfaceStyleForKey(
    key : NSString,
    responder : NSResponder) : CULong;

external NSInterfaceStyleDefault : NSString;

alias _NSProgressIndicatorThreadInfo = Opaque;

alias NSProgressIndicatorPreferredThickness = 14;
alias NSProgressIndicatorPreferredSmallThickness = 10;
alias NSProgressIndicatorPreferredLargeThickness = 18;
alias NSProgressIndicatorPreferredAquaThickness = 12;

alias NSProgressIndicatorThickness = CULong;

alias NSProgressIndicatorBarStyle = 0;
alias NSProgressIndicatorSpinningStyle = 1;

alias NSProgressIndicatorStyle = CULong;

alias NSTopTabsBezelBorder = 0;
alias NSLeftTabsBezelBorder = 1;
alias NSBottomTabsBezelBorder = 2;
alias NSRightTabsBezelBorder = 3;
alias NSNoTabsBezelBorder = 4;
alias NSNoTabsLineBorder = 5;
alias NSNoTabsNoBorder = 6;

alias NSTabViewType = CULong;

alias NSSelectedTab = 0;
alias NSBackgroundTab = 1;
alias NSPressedTab = 2;

alias NSTabState = CULong;

alias NSPopUpNoArrow = 0;
alias NSPopUpArrowAtCenter = 1;
alias NSPopUpArrowAtBottom = 2;

alias NSPopUpArrowPosition = CULong;

external NSPopUpButtonCellWillPopUpNotification : NSString;

alias NSButtLineCapStyle = 0;
alias NSRoundLineCapStyle = 1;
alias NSSquareLineCapStyle = 2;

alias NSLineCapStyle = CULong;

alias NSMiterLineJoinStyle = 0;
alias NSRoundLineJoinStyle = 1;
alias NSBevelLineJoinStyle = 2;

alias NSLineJoinStyle = CULong;

alias NSNonZeroWindingRule = 0;
alias NSEvenOddWindingRule = 1;

alias NSWindingRule = CULong;

alias NSMoveToBezierPathElement = 0;
alias NSLineToBezierPathElement = 1;
alias NSCurveToBezierPathElement = 2;
alias NSClosePathBezierPathElement = 3;

alias NSBezierPathElement = CULong;

external NSSoundPboardType : NSString;

alias NSDrawerClosedState = 0;
alias NSDrawerOpeningState = 1;
alias NSDrawerOpenState = 2;
alias NSDrawerClosingState = 3;

alias NSDrawerState = CULong;

external NSDrawerWillOpenNotification : NSString;

external NSDrawerDidOpenNotification : NSString;

external NSDrawerWillCloseNotification : NSString;

external NSDrawerDidCloseNotification : NSString;

alias NSOpenGLGOFormatCacheSize = 501;
alias NSOpenGLGOClearFormatCache = 502;
alias NSOpenGLGORetainRenderers = 503;
alias NSOpenGLGOResetLibrary = 504;

alias NSOpenGLGlobalOption = Int;

external NSOpenGLSetOption(
    pname : NSOpenGLGlobalOption,
    param : Int);

external NSOpenGLGetOption(
    pname : NSOpenGLGlobalOption,
    param : Pointer[Int]);

external NSOpenGLGetVersion(
    major : Pointer[Int],
    minor : Pointer[Int]);

alias NSOpenGLPFAAllRenderers = 1;
alias NSOpenGLPFADoubleBuffer = 5;
alias NSOpenGLPFAStereo = 6;
alias NSOpenGLPFAAuxBuffers = 7;
alias NSOpenGLPFAColorSize = 8;
alias NSOpenGLPFAAlphaSize = 11;
alias NSOpenGLPFADepthSize = 12;
alias NSOpenGLPFAStencilSize = 13;
alias NSOpenGLPFAAccumSize = 14;
alias NSOpenGLPFAMinimumPolicy = 51;
alias NSOpenGLPFAMaximumPolicy = 52;
alias NSOpenGLPFAOffScreen = 53;
alias NSOpenGLPFAFullScreen = 54;
alias NSOpenGLPFASampleBuffers = 55;
alias NSOpenGLPFASamples = 56;
alias NSOpenGLPFAAuxDepthStencil = 57;
alias NSOpenGLPFAColorFloat = 58;
alias NSOpenGLPFAMultisample = 59;
alias NSOpenGLPFASupersample = 60;
alias NSOpenGLPFASampleAlpha = 61;
alias NSOpenGLPFARendererID = 70;
alias NSOpenGLPFASingleRenderer = 71;
alias NSOpenGLPFANoRecovery = 72;
alias NSOpenGLPFAAccelerated = 73;
alias NSOpenGLPFAClosestPolicy = 74;
alias NSOpenGLPFARobust = 75;
alias NSOpenGLPFABackingStore = 76;
alias NSOpenGLPFAMPSafe = 78;
alias NSOpenGLPFAWindow = 80;
alias NSOpenGLPFAMultiScreen = 81;
alias NSOpenGLPFACompliant = 83;
alias NSOpenGLPFAScreenMask = 84;
alias NSOpenGLPFAPixelBuffer = 90;
alias NSOpenGLPFARemotePixelBuffer = 91;
alias NSOpenGLPFAAllowOfflineRenderers = 96;
alias NSOpenGLPFAAcceleratedCompute = 97;
alias NSOpenGLPFAVirtualScreenCount = 128;

alias NSOpenGLPixelFormatAttribute = UInt;

alias NSOpenGLPixelFormatAuxiliary = Opaque;

alias NSOpenGLCPSwapRectangle = 200;
alias NSOpenGLCPSwapRectangleEnable = 201;
alias NSOpenGLCPRasterizationEnable = 221;
alias NSOpenGLCPSwapInterval = 222;
alias NSOpenGLCPSurfaceOrder = 235;
alias NSOpenGLCPSurfaceOpacity = 236;
alias NSOpenGLCPStateValidation = 301;

alias NSOpenGLContextParameter = Int;

alias NSOpenGLContextAuxiliary = Opaque;

alias NSToolbarDisplayModeDefault = 0;
alias NSToolbarDisplayModeIconAndLabel = 1;
alias NSToolbarDisplayModeIconOnly = 2;
alias NSToolbarDisplayModeLabelOnly = 3;

alias NSToolbarDisplayMode = CULong;

alias NSToolbarSizeModeDefault = 0;
alias NSToolbarSizeModeRegular = 1;
alias NSToolbarSizeModeSmall = 2;

alias NSToolbarSizeMode = CULong;

external NSToolbarWillAddItemNotification : NSString;

external NSToolbarDidRemoveItemNotification : NSString;

external NSToolbarSeparatorItemIdentifier : NSString;

external NSToolbarSpaceItemIdentifier : NSString;

external NSToolbarFlexibleSpaceItemIdentifier : NSString;

external NSToolbarShowColorsItemIdentifier : NSString;

external NSToolbarShowFontsItemIdentifier : NSString;

external NSToolbarCustomizeToolbarItemIdentifier : NSString;

external NSToolbarPrintItemIdentifier : NSString;

alias NSIdentityMappingCharacterCollection = 0;
alias NSAdobeCNS1CharacterCollection = 1;
alias NSAdobeGB1CharacterCollection = 2;
alias NSAdobeJapan1CharacterCollection = 3;
alias NSAdobeJapan2CharacterCollection = 4;
alias NSAdobeKorea1CharacterCollection = 5;

alias NSCharacterCollection = CULong;

alias NSTypesetterZeroAdvancementAction = 1;
alias NSTypesetterWhitespaceAction = 2;
alias NSTypesetterHorizontalTabAction = 4;
alias NSTypesetterLineBreakAction = 8;
alias NSTypesetterParagraphBreakAction = 16;
alias NSTypesetterContainerBreakAction = 32;

alias NSTypesetterControlCharacterAction = CULong;

external NSMultipleValuesMarker : Id;

external NSNoSelectionMarker : Id;

external NSNotApplicableMarker : Id;

external NSIsControllerMarker(
    object : Id) : Bool;

external NSObservedObjectKey : NSString;

external NSObservedKeyPathKey : NSString;

external NSOptionsKey : NSString;

external NSAlignmentBinding : NSString;

external NSAlternateImageBinding : NSString;

external NSAlternateTitleBinding : NSString;

external NSAnimateBinding : NSString;

external NSAnimationDelayBinding : NSString;

external NSArgumentBinding : NSString;

external NSAttributedStringBinding : NSString;

external NSContentArrayBinding : NSString;

external NSContentArrayForMultipleSelectionBinding : NSString;

external NSContentBinding : NSString;

external NSContentDictionaryBinding : NSString;

external NSContentHeightBinding : NSString;

external NSContentObjectBinding : NSString;

external NSContentObjectsBinding : NSString;

external NSContentSetBinding : NSString;

external NSContentValuesBinding : NSString;

external NSContentWidthBinding : NSString;

external NSCriticalValueBinding : NSString;

external NSDataBinding : NSString;

external NSDisplayPatternTitleBinding : NSString;

external NSDisplayPatternValueBinding : NSString;

external NSDocumentEditedBinding : NSString;

external NSDoubleClickArgumentBinding : NSString;

external NSDoubleClickTargetBinding : NSString;

external NSEditableBinding : NSString;

external NSEnabledBinding : NSString;

external NSExcludedKeysBinding : NSString;

external NSFilterPredicateBinding : NSString;

external NSFontBinding : NSString;

external NSFontBoldBinding : NSString;

external NSFontFamilyNameBinding : NSString;

external NSFontItalicBinding : NSString;

external NSFontNameBinding : NSString;

external NSFontSizeBinding : NSString;

external NSHeaderTitleBinding : NSString;

external NSHiddenBinding : NSString;

external NSImageBinding : NSString;

external NSIncludedKeysBinding : NSString;

external NSInitialKeyBinding : NSString;

external NSInitialValueBinding : NSString;

external NSIsIndeterminateBinding : NSString;

external NSLabelBinding : NSString;

external NSLocalizedKeyDictionaryBinding : NSString;

external NSManagedObjectContextBinding : NSString;

external NSMaximumRecentsBinding : NSString;

external NSMaxValueBinding : NSString;

external NSMaxWidthBinding : NSString;

external NSMinValueBinding : NSString;

external NSMinWidthBinding : NSString;

external NSMixedStateImageBinding : NSString;

external NSOffStateImageBinding : NSString;

external NSOnStateImageBinding : NSString;

external NSPredicateBinding : NSString;

external NSRecentSearchesBinding : NSString;

external NSRepresentedFilenameBinding : NSString;

external NSRowHeightBinding : NSString;

external NSSelectedIdentifierBinding : NSString;

external NSSelectedIndexBinding : NSString;

external NSSelectedLabelBinding : NSString;

external NSSelectedObjectBinding : NSString;

external NSSelectedObjectsBinding : NSString;

external NSSelectedTagBinding : NSString;

external NSSelectedValueBinding : NSString;

external NSSelectedValuesBinding : NSString;

external NSSelectionIndexesBinding : NSString;

external NSSelectionIndexPathsBinding : NSString;

external NSSortDescriptorsBinding : NSString;

external NSTargetBinding : NSString;

external NSTextColorBinding : NSString;

external NSTitleBinding : NSString;

external NSToolTipBinding : NSString;

external NSTransparentBinding : NSString;

external NSValueBinding : NSString;

external NSValuePathBinding : NSString;

external NSValueURLBinding : NSString;

external NSVisibleBinding : NSString;

external NSWarningValueBinding : NSString;

external NSWidthBinding : NSString;

external NSAllowsEditingMultipleValuesSelectionBindingOption : NSString;

external NSAllowsNullArgumentBindingOption : NSString;

external NSAlwaysPresentsApplicationModalAlertsBindingOption : NSString;

external NSConditionallySetsEditableBindingOption : NSString;

external NSConditionallySetsEnabledBindingOption : NSString;

external NSConditionallySetsHiddenBindingOption : NSString;

external NSContinuouslyUpdatesValueBindingOption : NSString;

external NSCreatesSortDescriptorBindingOption : NSString;

external NSDeletesObjectsOnRemoveBindingsOption : NSString;

external NSDisplayNameBindingOption : NSString;

external NSDisplayPatternBindingOption : NSString;

external NSContentPlacementTagBindingOption : NSString;

external NSHandlesContentAsCompoundValueBindingOption : NSString;

external NSInsertsNullPlaceholderBindingOption : NSString;

external NSInvokesSeparatelyWithArrayObjectsBindingOption : NSString;

external NSMultipleValuesPlaceholderBindingOption : NSString;

external NSNoSelectionPlaceholderBindingOption : NSString;

external NSNotApplicablePlaceholderBindingOption : NSString;

external NSNullPlaceholderBindingOption : NSString;

external NSRaisesForNotApplicableKeysBindingOption : NSString;

external NSPredicateFormatBindingOption : NSString;

external NSSelectorNameBindingOption : NSString;

external NSSelectsAllWhenSettingContentBindingOption : NSString;

external NSValidatesImmediatelyBindingOption : NSString;

external NSValueTransformerNameBindingOption : NSString;

external NSValueTransformerBindingOption : NSString;

alias NSTextListPrependEnclosingMarker = 1;

alias NSTextBlockAbsoluteValueType = 0;
alias NSTextBlockPercentageValueType = 1;

alias NSTextBlockValueType = CULong;

alias NSTextBlockWidth = 0;
alias NSTextBlockMinimumWidth = 1;
alias NSTextBlockMaximumWidth = 2;
alias NSTextBlockHeight = 4;
alias NSTextBlockMinimumHeight = 5;
alias NSTextBlockMaximumHeight = 6;

alias NSTextBlockDimension = CULong;

alias NSTextBlockPadding = 4294967295;
alias NSTextBlockBorder = 0;
alias NSTextBlockMargin = 1;

alias NSTextBlockLayer = CLong;

alias NSTextBlockTopAlignment = 0;
alias NSTextBlockMiddleAlignment = 1;
alias NSTextBlockBottomAlignment = 2;
alias NSTextBlockBaselineAlignment = 3;

alias NSTextBlockVerticalAlignment = CULong;

alias NSTextTableAutomaticLayoutAlgorithm = 0;
alias NSTextTableFixedLayoutAlgorithm = 1;

alias NSTextTableLayoutAlgorithm = CULong;

alias NSTextFieldAndStepperDatePickerStyle = 0;
alias NSClockAndCalendarDatePickerStyle = 1;
alias NSTextFieldDatePickerStyle = 2;

alias NSDatePickerStyle = CULong;

alias NSSingleDateMode = 0;
alias NSRangeDateMode = 1;

alias NSDatePickerMode = CULong;

alias NSDatePickerElementFlags = CULong;

alias NSHourMinuteDatePickerElementFlag = 12;
alias NSHourMinuteSecondDatePickerElementFlag = 14;
alias NSTimeZoneDatePickerElementFlag = 16;
alias NSYearMonthDatePickerElementFlag = 192;
alias NSYearMonthDayDatePickerElementFlag = 224;
alias NSEraDatePickerElementFlag = 256;

alias NSRelevancyLevelIndicatorStyle = 0;
alias NSContinuousCapacityLevelIndicatorStyle = 1;
alias NSDiscreteCapacityLevelIndicatorStyle = 2;
alias NSRatingLevelIndicatorStyle = 3;

alias NSLevelIndicatorStyle = CULong;

alias NSRuleEditorNestingModeSingle = 0;
alias NSRuleEditorNestingModeList = 1;
alias NSRuleEditorNestingModeCompound = 2;
alias NSRuleEditorNestingModeSimple = 3;

alias NSRuleEditorNestingMode = CULong;

alias NSRuleEditorRowTypeSimple = 0;
alias NSRuleEditorRowTypeCompound = 1;

alias NSRuleEditorRowType = CULong;

external NSRuleEditorPredicateLeftExpression : NSString;

external NSRuleEditorPredicateRightExpression : NSString;

external NSRuleEditorPredicateComparisonModifier : NSString;

external NSRuleEditorPredicateOptions : NSString;

external NSRuleEditorPredicateOperatorType : NSString;

external NSRuleEditorPredicateCustomSelector : NSString;

external NSRuleEditorPredicateCompoundType : NSString;

external NSRuleEditorRowsDidChangeNotification : NSString;

alias NSPathStyleStandard = 0;
alias NSPathStyleNavigationBar = 1;
alias NSPathStylePopUp = 2;

alias NSPathStyle = CLong;

alias NSCollectionViewDropOperation = CLong;

alias NSCollectionViewDropOn = 0;
alias NSCollectionViewDropBefore = 1;

external NSTextInputContextKeyboardSelectionDidChangeNotification : NSString;
