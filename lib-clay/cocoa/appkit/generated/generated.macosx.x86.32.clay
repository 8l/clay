// Automatically generated by clay-bindgen
// language: objective-c

import cocoa.objc.*;

import libc.*;
import cocoa.corefoundation.*;
import cocoa.applicationservices.*;
import cocoa.foundation.*;
import cocoa.quartzcore.*;

private alias OpaquePointer = RawPointer;
private alias UnknownType = Int;
private alias AUnionType = Int;


overload selector(static #"AMSymbol") = NSString;
overload selector(static #"CATransform3DValue") = CATransform3D;
overload selector(static #"CGColorSpace") = CGColorSpaceRef;
overload selector(static #"CGEvent") = CGEventRef;
overload selector(static #"CGImage") = CGImageRef;
overload selector(static #"CGImageForProposedRect:context:hints:") = CGImageRef, Pointer[NSRect], NSGraphicsContext, NSDictionary;
overload selector(static #"CGLContextObj") = RawPointer;
overload selector(static #"CGLPBufferObj") = RawPointer;
overload selector(static #"CGLPixelFormatObj") = RawPointer;
overload selector(static #"CIContext") = CIContext;
overload selector(static #"CIImage") = CIImage;
overload selector(static #"DTD") = NSXMLDTD;
overload selector(static #"DTDKind") = UInt;
overload selector(static #"DTDNodeWithXMLString:") = Id, NSString;
overload selector(static #"EPSOperationWithView:insideRect:toData:") = NSPrintOperation, NSView, NSRect, NSMutableData;
overload selector(static #"EPSOperationWithView:insideRect:toData:printInfo:") = NSPrintOperation, NSView, NSRect, NSMutableData, NSPrintInfo;
overload selector(static #"EPSOperationWithView:insideRect:toPath:printInfo:") = NSPrintOperation, NSView, NSRect, NSString, NSPrintInfo;
overload selector(static #"EPSRepresentation") = NSData;
overload selector(static #"HTTPBody") = NSData;
overload selector(static #"HTTPBodyStream") = NSInputStream;
overload selector(static #"HTTPMethod") = NSString;
overload selector(static #"HTTPShouldHandleCookies") = Bool;
overload selector(static #"IBeamCursor") = NSCursor;
overload selector(static #"ICCProfileData") = NSData;
overload selector(static #"ISOCountryCodes") = NSArray;
overload selector(static #"ISOCurrencyCodes") = NSArray;
overload selector(static #"ISOLanguageCodes") = NSArray;
overload selector(static #"MIMEType") = NSString;
overload selector(static #"PDFOperationWithView:insideRect:toData:") = NSPrintOperation, NSView, NSRect, NSMutableData;
overload selector(static #"PDFOperationWithView:insideRect:toData:printInfo:") = NSPrintOperation, NSView, NSRect, NSMutableData, NSPrintInfo;
overload selector(static #"PDFOperationWithView:insideRect:toPath:printInfo:") = NSPrintOperation, NSView, NSRect, NSString, NSPrintInfo;
overload selector(static #"PDFRepresentation") = NSData;
overload selector(static #"PICTRepresentation") = NSData;
overload selector(static #"PMPageFormat") = RawPointer;
overload selector(static #"PMPrintSession") = RawPointer;
overload selector(static #"PMPrintSettings") = RawPointer;
overload selector(static #"PMSymbol") = NSString;
overload selector(static #"QTMovie") = RawPointer;
overload selector(static #"RTFDFileWrapperFromRange:documentAttributes:") = NSFileWrapper, NSRange, NSDictionary;
overload selector(static #"RTFDFromRange:") = NSData, NSRange;
overload selector(static #"RTFDFromRange:documentAttributes:") = NSData, NSRange, NSDictionary;
overload selector(static #"RTFFromRange:") = NSData, NSRange;
overload selector(static #"RTFFromRange:documentAttributes:") = NSData, NSRange, NSDictionary;
overload selector(static #"TIFFRepresentation") = NSData;
overload selector(static #"TIFFRepresentationOfImageRepsInArray:") = NSData, NSArray;
overload selector(static #"TIFFRepresentationOfImageRepsInArray:usingCompression:factor:") = NSData, NSArray, UInt, Float;
overload selector(static #"TIFFRepresentationUsingCompression:factor:") = NSData, UInt, Float;
overload selector(static #"TXTRecordData") = NSData;
overload selector(static #"URI") = NSString;
overload selector(static #"URL") = NSURL;
overload selector(static #"URL:resourceDataDidBecomeAvailable:") = Void, NSURL, NSData;
overload selector(static #"URL:resourceDidFailLoadingWithReason:") = Void, NSURL, NSString;
overload selector(static #"URLAtIndex:effectiveRange:") = NSURL, UInt, NSRangePointer;
overload selector(static #"URLByAppendingPathComponent:") = NSURL, NSString;
overload selector(static #"URLByAppendingPathExtension:") = NSURL, NSString;
overload selector(static #"URLByDeletingLastPathComponent") = NSURL;
overload selector(static #"URLByDeletingPathExtension") = NSURL;
overload selector(static #"URLByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:") = Id, NSData, UInt, NSURL, Pointer[Bool], Pointer[NSError];
overload selector(static #"URLByResolvingSymlinksInPath") = NSURL;
overload selector(static #"URLByStandardizingPath") = NSURL;
overload selector(static #"URLForApplicationToOpenURL:") = NSURL, NSURL;
overload selector(static #"URLForApplicationWithBundleIdentifier:") = NSURL, NSString;
overload selector(static #"URLForAuxiliaryExecutable:") = NSURL, NSString;
overload selector(static #"URLForDirectory:inDomain:appropriateForURL:create:error:") = NSURL, UInt, UInt, NSURL, Bool, Pointer[NSError];
overload selector(static #"URLForImageResource:") = NSURL, NSString;
overload selector(static #"URLForKey:") = NSURL, NSString;
overload selector(static #"URLForResource:withExtension:") = NSURL, NSString, NSString;
overload selector(static #"URLForResource:withExtension:subdirectory:") = NSURL, NSString, NSString, NSString;
overload selector(static #"URLForResource:withExtension:subdirectory:inBundleWithURL:") = NSURL, NSString, NSString, NSString, NSURL;
overload selector(static #"URLForResource:withExtension:subdirectory:localization:") = NSURL, NSString, NSString, NSString, NSString;
overload selector(static #"URLFromPasteboard:") = NSURL, NSPasteboard;
overload selector(static #"URLHandle:resourceDataDidBecomeAvailable:") = Void, NSURLHandle, NSData;
overload selector(static #"URLHandle:resourceDidFailLoadingWithReason:") = Void, NSURLHandle, NSString;
overload selector(static #"URLHandleClassForURL:") = Id, NSURL;
overload selector(static #"URLHandleResourceDidBeginLoading:") = Void, NSURLHandle;
overload selector(static #"URLHandleResourceDidCancelLoading:") = Void, NSURLHandle;
overload selector(static #"URLHandleResourceDidFinishLoading:") = Void, NSURLHandle;
overload selector(static #"URLHandleUsingCache:") = NSURLHandle, Bool;
overload selector(static #"URLProtocol:cachedResponseIsValid:") = Void, NSURLProtocol, NSCachedURLResponse;
overload selector(static #"URLProtocol:didCancelAuthenticationChallenge:") = Void, NSURLProtocol, NSURLAuthenticationChallenge;
overload selector(static #"URLProtocol:didFailWithError:") = Void, NSURLProtocol, NSError;
overload selector(static #"URLProtocol:didLoadData:") = Void, NSURLProtocol, NSData;
overload selector(static #"URLProtocol:didReceiveAuthenticationChallenge:") = Void, NSURLProtocol, NSURLAuthenticationChallenge;
overload selector(static #"URLProtocol:didReceiveResponse:cacheStoragePolicy:") = Void, NSURLProtocol, NSURLResponse, UInt;
overload selector(static #"URLProtocol:wasRedirectedToRequest:redirectResponse:") = Void, NSURLProtocol, NSURLRequest, NSURLResponse;
overload selector(static #"URLProtocolDidFinishLoading:") = Void, NSURLProtocol;
overload selector(static #"URLResourceDidCancelLoading:") = Void, NSURL;
overload selector(static #"URLResourceDidFinishLoading:") = Void, NSURL;
overload selector(static #"URLWithString:") = Id, NSString;
overload selector(static #"URLWithString:relativeToURL:") = Id, NSString, NSURL;
overload selector(static #"URLs") = NSArray;
overload selector(static #"URLsForDirectory:inDomains:") = NSArray, UInt, UInt;
overload selector(static #"URLsForResourcesWithExtension:subdirectory:") = NSArray, NSString, NSString;
overload selector(static #"URLsForResourcesWithExtension:subdirectory:inBundleWithURL:") = NSArray, NSString, NSString, NSURL;
overload selector(static #"URLsForResourcesWithExtension:subdirectory:localization:") = NSArray, NSString, NSString, NSString;
overload selector(static #"URLsFromRunningOpenPanel") = NSArray;
overload selector(static #"UTF8String") = Pointer[CChar];
overload selector(static #"W") = Float;
overload selector(static #"X") = Float;
overload selector(static #"XMLData") = NSData;
overload selector(static #"XMLDataWithOptions:") = NSData, UInt;
overload selector(static #"XMLString") = NSString;
overload selector(static #"XMLStringWithOptions:") = NSString, UInt;
overload selector(static #"XPath") = NSString;
overload selector(static #"Y") = Float;
overload selector(static #"Z") = Float;
overload selector(static #"abbreviation") = NSString;
overload selector(static #"abbreviationDictionary") = NSDictionary;
overload selector(static #"abbreviationForDate:") = NSString, NSDate;
overload selector(static #"abortEditing") = Bool;
overload selector(static #"abortModal") = Void;
overload selector(static #"abortParsing") = Void;
overload selector(static #"absolutePathForAppBundleWithIdentifier:") = NSString, NSString;
overload selector(static #"absoluteString") = NSString;
overload selector(static #"absoluteURL") = NSURL;
overload selector(static #"absoluteX") = Int;
overload selector(static #"absoluteY") = Int;
overload selector(static #"absoluteZ") = Int;
overload selector(static #"acceptConnectionInBackgroundAndNotify") = Void;
overload selector(static #"acceptConnectionInBackgroundAndNotifyForModes:") = Void, NSArray;
overload selector(static #"acceptInputForMode:beforeDate:") = Void, NSString, NSDate;
overload selector(static #"acceptableDragTypes") = NSArray;
overload selector(static #"acceptsArrowKeys") = Bool;
overload selector(static #"acceptsBinary") = Bool;
overload selector(static #"acceptsFirstMouse:") = Bool, NSEvent;
overload selector(static #"acceptsFirstResponder") = Bool;
overload selector(static #"acceptsGlyphInfo") = Bool;
overload selector(static #"acceptsMouseMovedEvents") = Bool;
overload selector(static #"acceptsTouchEvents") = Bool;
overload selector(static #"accessInstanceVariablesDirectly") = Bool;
overload selector(static #"accessibilityActionDescription:") = NSString, NSString;
overload selector(static #"accessibilityActionNames") = NSArray;
overload selector(static #"accessibilityArrayAttributeCount:") = UInt, NSString;
overload selector(static #"accessibilityArrayAttributeValues:index:maxCount:") = NSArray, NSString, UInt, UInt;
overload selector(static #"accessibilityAttributeNames") = NSArray;
overload selector(static #"accessibilityAttributeValue:") = Id, NSString;
overload selector(static #"accessibilityAttributeValue:forParameter:") = Id, NSString, Id;
overload selector(static #"accessibilityDescription") = NSString;
overload selector(static #"accessibilityFocusedUIElement") = Id;
overload selector(static #"accessibilityHitTest:") = Id, NSPoint;
overload selector(static #"accessibilityIndexOfChild:") = UInt, Id;
overload selector(static #"accessibilityIsAttributeSettable:") = Bool, NSString;
overload selector(static #"accessibilityIsIgnored") = Bool;
overload selector(static #"accessibilityParameterizedAttributeNames") = NSArray;
overload selector(static #"accessibilityPerformAction:") = Void, NSString;
overload selector(static #"accessibilitySetOverrideValue:forAttribute:") = Bool, Id, NSString;
overload selector(static #"accessibilitySetValue:forAttribute:") = Void, Id, NSString;
overload selector(static #"accessoryControllers") = NSArray;
overload selector(static #"accessoryView") = NSView;
overload selector(static #"acquireFunction") = CCodePointer[(RawPointer,CCodePointer[(RawPointer),(UInt)],CChar),(RawPointer)];
overload selector(static #"action") = SelectorHandle;
overload selector(static #"actionForControlCharacterAtIndex:") = UInt, UInt;
overload selector(static #"actionForKey:") = Id, NSString;
overload selector(static #"actionForLayer:forKey:") = Id, CALayer, NSString;
overload selector(static #"actions") = NSDictionary;
overload selector(static #"activate") = Void;
overload selector(static #"activate:") = Void, Bool;
overload selector(static #"activateContextHelpMode:") = Void, Id;
overload selector(static #"activateFileViewerSelectingURLs:") = Void, NSArray;
overload selector(static #"activateIgnoringOtherApps:") = Void, Bool;
overload selector(static #"activateWithOptions:") = Bool, UInt;
overload selector(static #"activationPolicy") = Int;
overload selector(static #"activeApplication") = NSDictionary;
overload selector(static #"activeConversationChanged:toNewConversation:") = Void, Id, Int;
overload selector(static #"activeConversationWillChange:fromOldConversation:") = Void, Id, Int;
overload selector(static #"activeProcessorCount") = UInt;
overload selector(static #"add:") = Void, Id;
overload selector(static #"addAccessoryController:") = Void, NSViewController;
overload selector(static #"addAnimation:forKey:") = Void, CAAnimation, NSString;
overload selector(static #"addAttribute:") = Void, NSXMLNode;
overload selector(static #"addAttribute:value:range:") = Void, NSString, Id, NSRange;
overload selector(static #"addAttributes:range:") = Void, NSDictionary, NSRange;
overload selector(static #"addButtonWithTitle:") = NSButton, NSString;
overload selector(static #"addCharactersInRange:") = Void, NSRange;
overload selector(static #"addCharactersInString:") = Void, NSString;
overload selector(static #"addChild:") = Void, NSXMLNode;
overload selector(static #"addChildWindow:ordered:") = Void, NSWindow, Int;
overload selector(static #"addClient:") = Void, Id;
overload selector(static #"addClip") = Void;
overload selector(static #"addCollection:options:") = Bool, NSString, Int;
overload selector(static #"addColumn") = Void;
overload selector(static #"addColumnWithCells:") = Void, NSArray;
overload selector(static #"addConnection:toRunLoop:forMode:") = Void, NSConnection, NSRunLoop, NSString;
overload selector(static #"addCursorRect:cursor:") = Void, NSRect, NSCursor;
overload selector(static #"addDependency:") = Void, NSOperation;
overload selector(static #"addDocument:") = Void, NSDocument;
overload selector(static #"addEntriesFromDictionary:") = Void, NSDictionary;
overload selector(static #"addEntry:") = NSFormCell, NSString;
overload selector(static #"addExecutionBlock:") = Void, UnknownType;
overload selector(static #"addFileWithPath:") = NSString, NSString;
overload selector(static #"addFileWrapper:") = NSString, NSFileWrapper;
overload selector(static #"addFontDescriptors:toCollection:") = Void, NSArray, NSString;
overload selector(static #"addFontTrait:") = Void, Id;
overload selector(static #"addGlobalMonitorForEventsMatchingMask:handler:") = Id, UInt64, UnknownType;
overload selector(static #"addIndex:") = Void, UInt;
overload selector(static #"addIndexes:") = Void, NSIndexSet;
overload selector(static #"addIndexesInRange:") = Void, NSRange;
overload selector(static #"addItem:") = Void, NSMenuItem;
overload selector(static #"addItemWithObjectValue:") = Void, Id;
overload selector(static #"addItemWithTitle:") = Void, NSString;
overload selector(static #"addItemWithTitle:action:keyEquivalent:") = NSMenuItem, NSString, SelectorHandle, NSString;
overload selector(static #"addItemsWithObjectValues:") = Void, NSArray;
overload selector(static #"addItemsWithTitles:") = Void, NSArray;
overload selector(static #"addLayoutManager:") = Void, NSLayoutManager;
overload selector(static #"addLocalMonitorForEventsMatchingMask:handler:") = Id, UInt64, UnknownType;
overload selector(static #"addMarker:") = Void, NSRulerMarker;
overload selector(static #"addNamespace:") = Void, NSXMLNode;
overload selector(static #"addObject:") = Void, Id;
overload selector(static #"addObjects:") = Void, NSArray;
overload selector(static #"addObjectsFromArray:") = Void, NSArray;
overload selector(static #"addObserver:forKeyPath:options:context:") = Void, NSObject, NSString, UInt, RawPointer;
overload selector(static #"addObserver:selector:name:object:") = Void, Id, SelectorHandle, NSString, Id;
overload selector(static #"addObserver:selector:name:object:suspensionBehavior:") = Void, Id, SelectorHandle, NSString, NSString, UInt;
overload selector(static #"addObserver:toObjectsAtIndexes:forKeyPath:options:context:") = Void, NSObject, NSIndexSet, NSString, UInt, RawPointer;
overload selector(static #"addObserverForName:object:queue:usingBlock:") = Id, NSString, Id, NSOperationQueue, UnknownType;
overload selector(static #"addOperation:") = Void, NSOperation;
overload selector(static #"addOperationWithBlock:") = Void, UnknownType;
overload selector(static #"addOperations:waitUntilFinished:") = Void, NSArray, Bool;
overload selector(static #"addPointer:") = Void, RawPointer;
overload selector(static #"addPort:forMode:") = Void, NSPort, NSString;
overload selector(static #"addProgressMark:") = Void, Float;
overload selector(static #"addRegularFileWithContents:preferredFilename:") = NSString, NSData, NSString;
overload selector(static #"addRepresentation:") = Void, NSImageRep;
overload selector(static #"addRepresentations:") = Void, NSArray;
overload selector(static #"addRequestMode:") = Void, NSString;
overload selector(static #"addRow") = Void;
overload selector(static #"addRow:") = Void, Id;
overload selector(static #"addRowWithCells:") = Void, NSArray;
overload selector(static #"addRunLoop:") = Void, NSRunLoop;
overload selector(static #"addSelectedObjects:") = Bool, NSArray;
overload selector(static #"addSelectionIndexPaths:") = Bool, NSArray;
overload selector(static #"addSelectionIndexes:") = Bool, NSIndexSet;
overload selector(static #"addSpeechDictionary:") = Void, NSDictionary;
overload selector(static #"addSublayer:") = Void, CALayer;
overload selector(static #"addSubview:") = Void, NSView;
overload selector(static #"addSubview:positioned:relativeTo:") = Void, NSView, Int, NSView;
overload selector(static #"addSuiteNamed:") = Void, NSString;
overload selector(static #"addSymbolicLinkWithDestination:preferredFilename:") = NSString, NSString, NSString;
overload selector(static #"addTabStop:") = Void, NSTextTab;
overload selector(static #"addTabViewItem:") = Void, NSTabViewItem;
overload selector(static #"addTableColumn:") = Void, NSTableColumn;
overload selector(static #"addTemporaryAttribute:value:forCharacterRange:") = Void, NSString, Id, NSRange;
overload selector(static #"addTemporaryAttributes:forCharacterRange:") = Void, NSDictionary, NSRange;
overload selector(static #"addTextContainer:") = Void, NSTextContainer;
overload selector(static #"addTimeInterval:") = Id, Double;
overload selector(static #"addTimer:forMode:") = Void, NSTimer, NSString;
overload selector(static #"addToolTipRect:owner:userData:") = Int, NSRect, Id, RawPointer;
overload selector(static #"addTrackingArea:") = Void, NSTrackingArea;
overload selector(static #"addTrackingRect:owner:userData:assumeInside:") = Int, NSRect, Id, RawPointer, Bool;
overload selector(static #"addTypes:owner:") = Int, NSArray, Id;
overload selector(static #"addValue:forHTTPHeaderField:") = Void, NSString, NSString;
overload selector(static #"addWindowController:") = Void, NSWindowController;
overload selector(static #"addWindowsItem:title:filename:") = Void, NSWindow, NSString, Bool;
overload selector(static #"address") = Id;
overload selector(static #"addressCheckingResultWithRange:components:") = NSTextCheckingResult, NSRange, NSDictionary;
overload selector(static #"addressComponents") = NSDictionary;
overload selector(static #"addresses") = NSArray;
overload selector(static #"adjustPageHeightNew:top:bottom:limit:") = Void, Pointer[Float], Float, Float, Float;
overload selector(static #"adjustPageWidthNew:left:right:limit:") = Void, Pointer[Float], Float, Float, Float;
overload selector(static #"adjustScroll:") = NSRect, NSRect;
overload selector(static #"adjustSubviews") = Void;
overload selector(static #"adobeRGB1998ColorSpace") = NSColorSpace;
overload selector(static #"advancementForGlyph:") = NSSize, UInt;
overload selector(static #"aeDesc") = Pointer[AEDesc];
overload selector(static #"aeteResource:") = NSData, NSString;
overload selector(static #"affineTransform") = CGAffineTransform;
overload selector(static #"afmDictionary") = NSDictionary;
overload selector(static #"alertShowHelp:") = Bool, NSAlert;
overload selector(static #"alertStyle") = UInt;
overload selector(static #"alertWithError:") = NSAlert, NSError;
overload varargSelector(static #"alertWithMessageText:defaultButton:alternateButton:otherButton:informativeTextWithFormat:") = NSAlert, NSString, NSString, NSString, NSString, NSString;
overload selector(static #"alignCenter:") = Void, Id;
overload selector(static #"alignJustified:") = Void, Id;
overload selector(static #"alignLeft:") = Void, Id;
overload selector(static #"alignRight:") = Void, Id;
overload selector(static #"alignment") = UInt;
overload selector(static #"alignmentRect") = NSRect;
overload selector(static #"allBundles") = NSArray;
overload selector(static #"allConnections") = NSArray;
overload selector(static #"allCredentials") = NSDictionary;
overload selector(static #"allFrameworks") = NSArray;
overload selector(static #"allHTTPHeaderFields") = NSDictionary;
overload selector(static #"allHeaderFields") = NSDictionary;
overload selector(static #"allKeys") = NSArray;
overload selector(static #"allKeysForObject:") = NSArray, Id;
overload selector(static #"allLanguages") = NSArray;
overload selector(static #"allObjects") = NSArray;
overload selector(static #"allScripts") = NSArray;
overload selector(static #"allValues") = NSArray;
overload selector(static #"alloc") = Id;
overload selector(static #"allocWithZone:") = Id, Pointer[NSZone];
overload selector(static #"allocateGState") = Void;
overload selector(static #"allowedFileTypes") = NSArray;
overload selector(static #"allowedInputSourceLocales") = NSArray;
overload selector(static #"allowedTypes") = NSArray;
overload selector(static #"allowsBranchSelection") = Bool;
overload selector(static #"allowsColumnReordering") = Bool;
overload selector(static #"allowsColumnResizing") = Bool;
overload selector(static #"allowsColumnSelection") = Bool;
overload selector(static #"allowsConcurrentViewDrawing") = Bool;
overload selector(static #"allowsContextMenuPlugIns") = Bool;
overload selector(static #"allowsCutCopyPaste") = Bool;
overload selector(static #"allowsDocumentBackgroundColorChange") = Bool;
overload selector(static #"allowsDuplicatesInToolbar") = Bool;
overload selector(static #"allowsEditingTextAttributes") = Bool;
overload selector(static #"allowsEmptySelection") = Bool;
overload selector(static #"allowsFloats") = Bool;
overload selector(static #"allowsImageEditing") = Bool;
overload selector(static #"allowsKeyedCoding") = Bool;
overload selector(static #"allowsMixedState") = Bool;
overload selector(static #"allowsMultipleSelection") = Bool;
overload selector(static #"allowsNaturalLanguage") = Bool;
overload selector(static #"allowsNonContiguousLayout") = Bool;
overload selector(static #"allowsOtherFileTypes") = Bool;
overload selector(static #"allowsReverseTransformation") = Bool;
overload selector(static #"allowsTickMarkValuesOnly") = Bool;
overload selector(static #"allowsToolTipsWhenApplicationIsInactive") = Bool;
overload selector(static #"allowsTruncatedLabels") = Bool;
overload selector(static #"allowsTypeSelect") = Bool;
overload selector(static #"allowsUndo") = Bool;
overload selector(static #"allowsUserCustomization") = Bool;
overload selector(static #"alpha") = Float;
overload selector(static #"alphaComponent") = Float;
overload selector(static #"alphaControlAddedOrRemoved:") = Void, Id;
overload selector(static #"alphaValue") = Float;
overload selector(static #"alphanumericCharacterSet") = Id;
overload selector(static #"altIncrementValue") = Double;
overload selector(static #"alternateImage") = NSImage;
overload selector(static #"alternateMnemonic") = NSString;
overload selector(static #"alternateMnemonicLocation") = UInt;
overload selector(static #"alternateSelectedControlColor") = NSColor;
overload selector(static #"alternateSelectedControlTextColor") = NSColor;
overload selector(static #"alternateTitle") = NSString;
overload selector(static #"altersStateOfSelectedItem") = Bool;
overload selector(static #"alwaysShowsDecimalSeparator") = Bool;
overload selector(static #"alwaysUsesMultipleValuesMarker") = Bool;
overload selector(static #"ancestorSharedWithView:") = NSView, NSView;
overload selector(static #"anchorPoint") = CGPoint;
overload selector(static #"anchorPointZ") = Float;
overload selector(static #"andPredicateWithSubpredicates:") = NSPredicate, NSArray;
overload selector(static #"animate:") = Void, Id;
overload selector(static #"animates") = Bool;
overload selector(static #"animation:didReachProgressMark:") = Void, NSAnimation, Float;
overload selector(static #"animation:valueForProgress:") = Float, NSAnimation, Float;
overload selector(static #"animationBlockingMode") = UInt;
overload selector(static #"animationCurve") = UInt;
overload selector(static #"animationDelay") = Double;
overload selector(static #"animationDidEnd:") = Void, NSAnimation;
overload selector(static #"animationDidStop:") = Void, NSAnimation;
overload selector(static #"animationForKey:") = Id, NSString;
overload selector(static #"animationKeys") = NSArray;
overload selector(static #"animationResizeTime:") = Double, NSRect;
overload selector(static #"animationShouldStart:") = Bool, NSAnimation;
overload selector(static #"animations") = NSDictionary;
overload selector(static #"animator") = Id;
overload selector(static #"anyObject") = Id;
overload selector(static #"appendAttributedString:") = Void, NSAttributedString;
overload selector(static #"appendBezierPath:") = Void, NSBezierPath;
overload selector(static #"appendBezierPathWithArcFromPoint:toPoint:radius:") = Void, NSPoint, NSPoint, Float;
overload selector(static #"appendBezierPathWithArcWithCenter:radius:startAngle:endAngle:") = Void, NSPoint, Float, Float, Float;
overload selector(static #"appendBezierPathWithArcWithCenter:radius:startAngle:endAngle:clockwise:") = Void, NSPoint, Float, Float, Float, Bool;
overload selector(static #"appendBezierPathWithGlyph:inFont:") = Void, UInt, NSFont;
overload selector(static #"appendBezierPathWithGlyphs:count:inFont:") = Void, Pointer[UInt], Int, NSFont;
overload selector(static #"appendBezierPathWithOvalInRect:") = Void, NSRect;
overload selector(static #"appendBezierPathWithPackedGlyphs:") = Void, Pointer[CChar];
overload selector(static #"appendBezierPathWithPoints:count:") = Void, NSPointArray, Int;
overload selector(static #"appendBezierPathWithRect:") = Void, NSRect;
overload selector(static #"appendBezierPathWithRoundedRect:xRadius:yRadius:") = Void, NSRect, Float, Float;
overload selector(static #"appendBytes:length:") = Void, RawPointer, UInt;
overload selector(static #"appendData:") = Void, NSData;
overload varargSelector(static #"appendFormat:") = Void, NSString;
overload selector(static #"appendString:") = Void, NSString;
overload selector(static #"appendTransform:") = Void, NSAffineTransform;
overload selector(static #"appleEvent") = NSAppleEventDescriptor;
overload selector(static #"appleEventClassCode") = CULong;
overload selector(static #"appleEventCode") = CULong;
overload selector(static #"appleEventCodeForArgumentWithName:") = CULong, NSString;
overload selector(static #"appleEventCodeForKey:") = CULong, NSString;
overload selector(static #"appleEventCodeForReturnType") = CULong;
overload selector(static #"appleEventCodeForSuite:") = CULong, NSString;
overload selector(static #"appleEventForSuspensionID:") = NSAppleEventDescriptor, NSAppleEventManagerSuspensionID;
overload selector(static #"appleEventWithEventClass:eventID:targetDescriptor:returnID:transactionID:") = NSAppleEventDescriptor, CULong, CULong, NSAppleEventDescriptor, Short, CLong;
overload selector(static #"application:delegateHandlesKey:") = Bool, NSApplication, NSString;
overload selector(static #"application:openFile:") = Bool, NSApplication, NSString;
overload selector(static #"application:openFileWithoutUI:") = Bool, Id, NSString;
overload selector(static #"application:openFiles:") = Void, NSApplication, NSArray;
overload selector(static #"application:openTempFile:") = Bool, NSApplication, NSString;
overload selector(static #"application:printFile:") = Bool, NSApplication, NSString;
overload selector(static #"application:printFiles:") = Void, NSApplication, NSArray;
overload selector(static #"application:printFiles:withSettings:showPrintPanels:") = UInt, NSApplication, NSArray, NSDictionary, Bool;
overload selector(static #"application:willPresentError:") = NSError, NSApplication, NSError;
overload selector(static #"applicationDidBecomeActive:") = Void, NSNotification;
overload selector(static #"applicationDidChangeScreenParameters:") = Void, NSNotification;
overload selector(static #"applicationDidFinishLaunching:") = Void, NSNotification;
overload selector(static #"applicationDidHide:") = Void, NSNotification;
overload selector(static #"applicationDidResignActive:") = Void, NSNotification;
overload selector(static #"applicationDidUnhide:") = Void, NSNotification;
overload selector(static #"applicationDidUpdate:") = Void, NSNotification;
overload selector(static #"applicationDockMenu:") = NSMenu, NSApplication;
overload selector(static #"applicationIconImage") = NSImage;
overload selector(static #"applicationOpenUntitledFile:") = Bool, NSApplication;
overload selector(static #"applicationShouldHandleReopen:hasVisibleWindows:") = Bool, NSApplication, Bool;
overload selector(static #"applicationShouldOpenUntitledFile:") = Bool, NSApplication;
overload selector(static #"applicationShouldTerminate:") = UInt, NSApplication;
overload selector(static #"applicationShouldTerminateAfterLastWindowClosed:") = Bool, NSApplication;
overload selector(static #"applicationWillBecomeActive:") = Void, NSNotification;
overload selector(static #"applicationWillFinishLaunching:") = Void, NSNotification;
overload selector(static #"applicationWillHide:") = Void, NSNotification;
overload selector(static #"applicationWillResignActive:") = Void, NSNotification;
overload selector(static #"applicationWillTerminate:") = Void, NSNotification;
overload selector(static #"applicationWillUnhide:") = Void, NSNotification;
overload selector(static #"applicationWillUpdate:") = Void, NSNotification;
overload selector(static #"appliesImmediately") = Bool;
overload selector(static #"applyFontTraits:range:") = Void, UInt, NSRange;
overload selector(static #"archiveRootObject:toFile:") = Bool, Id, NSString;
overload selector(static #"archivedDataWithRootObject:") = NSData, Id;
overload selector(static #"archiver:didEncodeObject:") = Void, NSKeyedArchiver, Id;
overload selector(static #"archiver:willEncodeObject:") = Id, NSKeyedArchiver, Id;
overload selector(static #"archiver:willReplaceObject:withObject:") = Void, NSKeyedArchiver, Id, Id;
overload selector(static #"archiverData") = NSMutableData;
overload selector(static #"archiverDidFinish:") = Void, NSKeyedArchiver;
overload selector(static #"archiverWillFinish:") = Void, NSKeyedArchiver;
overload selector(static #"areCursorRectsEnabled") = Bool;
overload selector(static #"argumentNames") = NSArray;
overload selector(static #"arguments") = Id;
overload selector(static #"argumentsRetained") = Bool;
overload selector(static #"arrangeInFront:") = Void, Id;
overload selector(static #"arrangeObjects:") = NSArray, NSArray;
overload selector(static #"arrangedObjects") = Id;
overload selector(static #"array") = Id;
overload selector(static #"arrayByAddingObject:") = NSArray, Id;
overload selector(static #"arrayByAddingObjectsFromArray:") = NSArray, NSArray;
overload selector(static #"arrayForKey:") = NSArray, NSString;
overload selector(static #"arrayWithArray:") = Id, NSArray;
overload selector(static #"arrayWithCapacity:") = Id, UInt;
overload selector(static #"arrayWithContentsOfFile:") = Id, NSString;
overload selector(static #"arrayWithContentsOfURL:") = Id, NSURL;
overload selector(static #"arrayWithObject:") = Id, Id;
overload varargSelector(static #"arrayWithObjects:") = Id, Id;
overload selector(static #"arrayWithObjects:count:") = Id, Pointer[Id], UInt;
overload selector(static #"arrowCursor") = NSCursor;
overload selector(static #"arrowPosition") = UInt;
overload selector(static #"arrowsPosition") = UInt;
overload selector(static #"ascender") = Float;
overload selector(static #"ascending") = Bool;
overload selector(static #"aspectRatio") = NSSize;
overload selector(static #"attachColorList:") = Void, NSColorList;
overload selector(static #"attachPopUpWithFrame:inView:") = Void, NSRect, NSView;
overload selector(static #"attachSubmenuForItemAtIndex:") = Void, Int;
overload selector(static #"attachedMenu") = NSMenu;
overload selector(static #"attachedMenuView") = NSMenuView;
overload selector(static #"attachedSheet") = NSWindow;
overload selector(static #"attachment") = NSTextAttachment;
overload selector(static #"attachmentCell") = Id;
overload selector(static #"attachmentSizeForGlyphAtIndex:") = NSSize, UInt;
overload selector(static #"attemptRecoveryFromError:optionIndex:") = Bool, NSError, UInt;
overload selector(static #"attemptRecoveryFromError:optionIndex:delegate:didRecoverSelector:contextInfo:") = Void, NSError, UInt, Id, SelectorHandle, RawPointer;
overload selector(static #"attribute") = NSString;
overload selector(static #"attribute:atIndex:effectiveRange:") = Id, NSString, UInt, NSRangePointer;
overload selector(static #"attribute:atIndex:longestEffectiveRange:inRange:") = Id, NSString, UInt, NSRangePointer, NSRange;
overload selector(static #"attributeDeclarationForName:elementName:") = NSXMLDTDNode, NSString, NSString;
overload selector(static #"attributeDescriptorForKeyword:") = NSAppleEventDescriptor, CULong;
overload selector(static #"attributeForLocalName:URI:") = NSXMLNode, NSString, NSString;
overload selector(static #"attributeForName:") = NSXMLNode, NSString;
overload selector(static #"attributeKeys") = NSArray;
overload selector(static #"attributeRuns") = NSArray;
overload selector(static #"attributeType") = UInt;
overload selector(static #"attributeValueClassName") = NSString;
overload selector(static #"attributeWithName:URI:stringValue:") = Id, NSString, NSString, NSString;
overload selector(static #"attributeWithName:stringValue:") = Id, NSString, NSString;
overload selector(static #"attributedAlternateTitle") = NSAttributedString;
overload selector(static #"attributedString") = NSAttributedString;
overload selector(static #"attributedStringForNil") = NSAttributedString;
overload selector(static #"attributedStringForNotANumber") = NSAttributedString;
overload selector(static #"attributedStringForObjectValue:withDefaultAttributes:") = NSAttributedString, Id, NSDictionary;
overload selector(static #"attributedStringForZero") = NSAttributedString;
overload selector(static #"attributedStringValue") = NSAttributedString;
overload selector(static #"attributedStringWithAttachment:") = NSAttributedString, NSTextAttachment;
overload selector(static #"attributedSubstringForProposedRange:actualRange:") = NSAttributedString, NSRange, NSRangePointer;
overload selector(static #"attributedSubstringFromRange:") = NSAttributedString, NSRange;
overload selector(static #"attributedTitle") = NSAttributedString;
overload selector(static #"attributes") = Id;
overload selector(static #"attributesAtIndex:effectiveRange:") = NSDictionary, UInt, NSRangePointer;
overload selector(static #"attributesAtIndex:longestEffectiveRange:inRange:") = NSDictionary, UInt, NSRangePointer, NSRange;
overload selector(static #"attributesForExtraLineFragment") = NSDictionary;
overload selector(static #"attributesForVoice:") = NSDictionary, NSString;
overload selector(static #"attributesOfFileSystemForPath:error:") = NSDictionary, NSString, Pointer[NSError];
overload selector(static #"attributesOfItemAtPath:error:") = NSDictionary, NSString, Pointer[NSError];
overload selector(static #"authenticateComponents:withData:") = Bool, NSArray, NSData;
overload selector(static #"authenticationDataForComponents:") = NSData, NSArray;
overload selector(static #"authenticationMethod") = NSString;
overload selector(static #"autoContentAccessingProxy") = Id;
overload selector(static #"autoenablesItems") = Bool;
overload selector(static #"autohidesScroller") = Bool;
overload selector(static #"autohidesScrollers") = Bool;
overload selector(static #"automaticRearrangementKeyPaths") = NSArray;
overload selector(static #"automaticallyIdentifiesLanguages") = Bool;
overload selector(static #"automaticallyNotifiesObserversForKey:") = Bool, NSString;
overload selector(static #"automaticallyPreparesContent") = Bool;
overload selector(static #"automaticallyRearrangesObjects") = Bool;
overload selector(static #"autorecalculatesContentBorderThicknessForEdge:") = Bool, NSRectEdge;
overload selector(static #"autorecalculatesKeyViewLoop") = Bool;
overload selector(static #"autorelease") = Id;
overload selector(static #"autorepeat") = Bool;
overload selector(static #"autoresizesAllColumnsToFit") = Bool;
overload selector(static #"autoresizesOutlineColumn") = Bool;
overload selector(static #"autoresizesSubviews") = Bool;
overload selector(static #"autoresizingMask") = UInt;
overload selector(static #"autoreverses") = Bool;
overload selector(static #"autosaveDocumentWithDelegate:didAutosaveSelector:contextInfo:") = Void, Id, SelectorHandle, RawPointer;
overload selector(static #"autosaveExpandedItems") = Bool;
overload selector(static #"autosaveName") = NSString;
overload selector(static #"autosaveTableColumns") = Bool;
overload selector(static #"autosavedContentsFileURL") = NSURL;
overload selector(static #"autosavesConfiguration") = Bool;
overload selector(static #"autosavingDelay") = Double;
overload selector(static #"autosavingFileType") = NSString;
overload selector(static #"autoscroll:") = Bool, NSEvent;
overload selector(static #"autosizesCells") = Bool;
overload selector(static #"autoupdatingCurrentCalendar") = Id;
overload selector(static #"autoupdatingCurrentLocale") = Id;
overload selector(static #"autovalidates") = Bool;
overload selector(static #"availableColorLists") = NSArray;
overload selector(static #"availableColorSpacesWithModel:") = NSArray, Int;
overload selector(static #"availableData") = NSData;
overload selector(static #"availableFontFamilies") = NSArray;
overload selector(static #"availableFontNamesMatchingFontDescriptor:") = NSArray, NSFontDescriptor;
overload selector(static #"availableFontNamesWithTraits:") = NSArray, UInt;
overload selector(static #"availableFonts") = NSArray;
overload selector(static #"availableLanguages") = NSArray;
overload selector(static #"availableLocaleIdentifiers") = NSArray;
overload selector(static #"availableMembersOfFontFamily:") = NSArray, NSString;
overload selector(static #"availableResourceData") = NSData;
overload selector(static #"availableStringEncodings") = Pointer[UInt];
overload selector(static #"availableTypeFromArray:") = NSString, NSArray;
overload selector(static #"availableVoices") = NSArray;
overload selector(static #"avoidsEmptySelection") = Bool;
overload selector(static #"awakeAfterUsingCoder:") = Id, NSCoder;
overload selector(static #"awakeFromNib") = Void;
overload selector(static #"backgroundColor") = NSColor;
overload selector(static #"backgroundColors") = NSArray;
overload selector(static #"backgroundFilters") = NSArray;
overload selector(static #"backgroundLayoutEnabled") = Bool;
overload selector(static #"backgroundLoadDidFailWithReason:") = Void, NSString;
overload selector(static #"backgroundStyle") = Int;
overload selector(static #"backingLocation") = UInt;
overload selector(static #"backingType") = UInt;
overload selector(static #"badgeLabel") = NSString;
overload selector(static #"baseSpecifier") = NSScriptObjectSpecifier;
overload selector(static #"baseURL") = NSURL;
overload selector(static #"baseWritingDirection") = Int;
overload selector(static #"baselineDeltaForCharacterAtIndex:") = Float, UInt;
overload selector(static #"baselineLocation") = Float;
overload selector(static #"baselineOffsetInLayoutManager:glyphIndex:") = Float, NSLayoutManager, UInt;
overload selector(static #"becomeFirstResponder") = Bool;
overload selector(static #"becomeKeyWindow") = Void;
overload selector(static #"becomeMainWindow") = Void;
overload selector(static #"becomesKeyOnlyIfNeeded") = Bool;
overload selector(static #"beginContentAccess") = Bool;
overload selector(static #"beginDocument") = Void;
overload selector(static #"beginEditing") = Void;
overload selector(static #"beginForDirectory:file:types:modelessDelegate:didEndSelector:contextInfo:") = Void, NSString, NSString, NSArray, Id, SelectorHandle, RawPointer;
overload selector(static #"beginGestureWithEvent:") = Void, NSEvent;
overload selector(static #"beginGrouping") = Void;
overload selector(static #"beginLineWithGlyphAtIndex:") = Void, UInt;
overload selector(static #"beginLoadInBackground") = Void;
overload selector(static #"beginModalSessionForWindow:") = NSModalSession, NSWindow;
overload selector(static #"beginModalSessionForWindow:relativeToWindow:") = NSModalSession, NSWindow, NSWindow;
overload selector(static #"beginPageInRect:atPlacement:") = Void, NSRect, NSPoint;
overload selector(static #"beginParagraph") = Void;
overload selector(static #"beginSheet:modalForWindow:modalDelegate:didEndSelector:contextInfo:") = Void, NSWindow, NSWindow, Id, SelectorHandle, RawPointer;
overload selector(static #"beginSheetForDirectory:file:modalForWindow:modalDelegate:didEndSelector:contextInfo:") = Void, NSString, NSString, NSWindow, Id, SelectorHandle, RawPointer;
overload selector(static #"beginSheetForDirectory:file:types:modalForWindow:modalDelegate:didEndSelector:contextInfo:") = Void, NSString, NSString, NSArray, NSWindow, Id, SelectorHandle, RawPointer;
overload selector(static #"beginSheetModalForWindow:completionHandler:") = Void, NSWindow, UnknownType;
overload selector(static #"beginSheetModalForWindow:modalDelegate:didEndSelector:contextInfo:") = Void, NSWindow, Id, SelectorHandle, RawPointer;
overload selector(static #"beginSheetWithPrintInfo:modalForWindow:delegate:didEndSelector:contextInfo:") = Void, NSPrintInfo, NSWindow, Id, SelectorHandle, RawPointer;
overload selector(static #"beginTime") = Double;
overload selector(static #"beginUndoGrouping") = Void;
overload selector(static #"beginWithCompletionHandler:") = Void, UnknownType;
overload selector(static #"bestRepresentationForDevice:") = NSImageRep, NSDictionary;
overload selector(static #"bestRepresentationForRect:context:hints:") = NSImageRep, NSRect, NSGraphicsContext, NSDictionary;
overload selector(static #"bezelStyle") = UInt;
overload selector(static #"bezierPath") = NSBezierPath;
overload selector(static #"bezierPathByFlatteningPath") = NSBezierPath;
overload selector(static #"bezierPathByReversingPath") = NSBezierPath;
overload selector(static #"bezierPathWithOvalInRect:") = NSBezierPath, NSRect;
overload selector(static #"bezierPathWithRect:") = NSBezierPath, NSRect;
overload selector(static #"bezierPathWithRoundedRect:xRadius:yRadius:") = NSBezierPath, NSRect, Float, Float;
overload selector(static #"bidiProcessingEnabled") = Bool;
overload selector(static #"bind:toObject:withKeyPath:options:") = Void, NSString, Id, NSString, NSDictionary;
overload selector(static #"bitmapData") = Pointer[CUChar];
overload selector(static #"bitmapFormat") = UInt;
overload selector(static #"bitmapImageRepByConvertingToColorSpace:renderingIntent:") = NSBitmapImageRep, NSColorSpace, Int;
overload selector(static #"bitmapImageRepByRetaggingWithColorSpace:") = NSBitmapImageRep, NSColorSpace;
overload selector(static #"bitmapImageRepForCachingDisplayInRect:") = NSBitmapImageRep, NSRect;
overload selector(static #"bitmapRepresentation") = NSData;
overload selector(static #"bitsPerPixel") = Int;
overload selector(static #"bitsPerSample") = Int;
overload selector(static #"blackColor") = NSColor;
overload selector(static #"blackComponent") = Float;
overload selector(static #"blendedColorWithFraction:ofColor:") = NSColor, Float, NSColor;
overload selector(static #"blockOperationWithBlock:") = Id, UnknownType;
overload selector(static #"blocksOtherRecognizers") = Bool;
overload selector(static #"blue") = Float;
overload selector(static #"blueColor") = NSColor;
overload selector(static #"blueComponent") = Float;
overload selector(static #"boldSystemFontOfSize:") = NSFont, Float;
overload selector(static #"bookmarkDataWithContentsOfURL:error:") = NSData, NSURL, Pointer[NSError];
overload selector(static #"bookmarkDataWithOptions:includingResourceValuesForKeys:relativeToURL:error:") = NSData, UInt, NSArray, NSURL, Pointer[NSError];
overload selector(static #"boolForKey:") = Bool, NSString;
overload selector(static #"boolValue") = Bool;
overload selector(static #"booleanForKey:inTable:") = Bool, NSString, NSString;
overload selector(static #"booleanValue") = CUChar;
overload selector(static #"borderColor") = NSColor;
overload selector(static #"borderColorForEdge:") = NSColor, NSRectEdge;
overload selector(static #"borderRect") = NSRect;
overload selector(static #"borderType") = UInt;
overload selector(static #"borderWidth") = Float;
overload selector(static #"bottomMargin") = Float;
overload selector(static #"boundingBox") = NSRect;
overload selector(static #"boundingBoxForControlGlyphAtIndex:forTextContainer:proposedLineFragment:glyphPosition:characterIndex:") = NSRect, UInt, NSTextContainer, NSRect, NSPoint, UInt;
overload selector(static #"boundingRectForFont") = NSRect;
overload selector(static #"boundingRectForGlyph:") = NSRect, UInt;
overload selector(static #"boundingRectForGlyphRange:inTextContainer:") = NSRect, NSRange, NSTextContainer;
overload selector(static #"boundingRectWithSize:options:") = NSRect, NSSize, Int;
overload selector(static #"boundingRectWithSize:options:attributes:") = NSRect, NSSize, Int, NSDictionary;
overload selector(static #"bounds") = NSRect;
overload selector(static #"boundsRectForBlock:contentRect:inRect:textContainer:characterRange:") = NSRect, NSTextTableBlock, NSRect, NSRect, NSTextContainer, NSRange;
overload selector(static #"boundsRectForContentRect:inRect:textContainer:characterRange:") = NSRect, NSRect, NSRect, NSTextContainer, NSRange;
overload selector(static #"boundsRectForTextBlock:atIndex:effectiveRange:") = NSRect, NSTextBlock, UInt, NSRangePointer;
overload selector(static #"boundsRectForTextBlock:glyphRange:") = NSRect, NSTextBlock, NSRange;
overload selector(static #"boundsRotation") = Float;
overload selector(static #"boxType") = UInt;
overload selector(static #"branchImage") = NSImage;
overload selector(static #"breakLock") = Void;
overload selector(static #"breakUndoCoalescing") = Void;
overload selector(static #"brightnessComponent") = Float;
overload selector(static #"broadcast") = Void;
overload selector(static #"brownColor") = NSColor;
overload selector(static #"browser:acceptDrop:atRow:column:dropOperation:") = Bool, NSBrowser, Id, Int, Int, UInt;
overload selector(static #"browser:canDragRowsWithIndexes:inColumn:withEvent:") = Bool, NSBrowser, NSIndexSet, Int, NSEvent;
overload selector(static #"browser:child:ofItem:") = Id, NSBrowser, Int, Id;
overload selector(static #"browser:createRowsForColumn:inMatrix:") = Void, NSBrowser, Int, NSMatrix;
overload selector(static #"browser:didChangeLastColumn:toColumn:") = Void, NSBrowser, Int, Int;
overload selector(static #"browser:draggingImageForRowsWithIndexes:inColumn:withEvent:offset:") = NSImage, NSBrowser, NSIndexSet, Int, NSEvent, NSPointPointer;
overload selector(static #"browser:headerViewControllerForItem:") = NSViewController, NSBrowser, Id;
overload selector(static #"browser:heightOfRow:inColumn:") = Float, NSBrowser, Int, Int;
overload selector(static #"browser:isColumnValid:") = Bool, NSBrowser, Int;
overload selector(static #"browser:isLeafItem:") = Bool, NSBrowser, Id;
overload selector(static #"browser:namesOfPromisedFilesDroppedAtDestination:forDraggedRowsWithIndexes:inColumn:") = NSArray, NSBrowser, NSURL, NSIndexSet, Int;
overload selector(static #"browser:nextTypeSelectMatchFromRow:toRow:inColumn:forString:") = Int, NSBrowser, Int, Int, Int, NSString;
overload selector(static #"browser:numberOfChildrenOfItem:") = Int, NSBrowser, Id;
overload selector(static #"browser:numberOfRowsInColumn:") = Int, NSBrowser, Int;
overload selector(static #"browser:objectValueForItem:") = Id, NSBrowser, Id;
overload selector(static #"browser:previewViewControllerForLeafItem:") = NSViewController, NSBrowser, Id;
overload selector(static #"browser:selectCellWithString:inColumn:") = Bool, NSBrowser, NSString, Int;
overload selector(static #"browser:selectRow:inColumn:") = Bool, NSBrowser, Int, Int;
overload selector(static #"browser:selectionIndexesForProposedSelection:inColumn:") = NSIndexSet, NSBrowser, NSIndexSet, Int;
overload selector(static #"browser:setObjectValue:forItem:") = Void, NSBrowser, Id, Id;
overload selector(static #"browser:shouldEditItem:") = Bool, NSBrowser, Id;
overload selector(static #"browser:shouldShowCellExpansionForRow:column:") = Bool, NSBrowser, Int, Int;
overload selector(static #"browser:shouldSizeColumn:forUserResize:toWidth:") = Float, NSBrowser, Int, Bool, Float;
overload selector(static #"browser:shouldTypeSelectForEvent:withCurrentSearchString:") = Bool, NSBrowser, NSEvent, NSString;
overload selector(static #"browser:sizeToFitWidthOfColumn:") = Float, NSBrowser, Int;
overload selector(static #"browser:titleOfColumn:") = NSString, NSBrowser, Int;
overload selector(static #"browser:typeSelectStringForRow:inColumn:") = NSString, NSBrowser, Int, Int;
overload selector(static #"browser:validateDrop:proposedRow:column:dropOperation:") = UInt, NSBrowser, Id, Pointer[Int], Pointer[Int], Pointer[UInt];
overload selector(static #"browser:willDisplayCell:atRow:column:") = Void, NSBrowser, Id, Int, Int;
overload selector(static #"browser:writeRowsWithIndexes:inColumn:toPasteboard:") = Bool, NSBrowser, NSIndexSet, Int, NSPasteboard;
overload selector(static #"browserColumnConfigurationDidChange:") = Void, NSNotification;
overload selector(static #"browserDidScroll:") = Void, NSBrowser;
overload selector(static #"browserWillScroll:") = Void, NSBrowser;
overload selector(static #"builtInPlugInsPath") = NSString;
overload selector(static #"builtInPlugInsURL") = NSURL;
overload selector(static #"bundleForClass:") = NSBundle, Id;
overload selector(static #"bundleForSuite:") = NSBundle, NSString;
overload selector(static #"bundleIdentifier") = NSString;
overload selector(static #"bundlePath") = NSString;
overload selector(static #"bundleURL") = NSURL;
overload selector(static #"bundleWithIdentifier:") = NSBundle, NSString;
overload selector(static #"bundleWithPath:") = NSBundle, NSString;
overload selector(static #"bundleWithURL:") = NSBundle, NSURL;
overload selector(static #"buttonMask") = UInt;
overload selector(static #"buttonNumber") = Int;
overload selector(static #"buttonToolTip") = NSString;
overload selector(static #"buttons") = NSArray;
overload selector(static #"bytes") = RawPointer;
overload selector(static #"bytesPerPlane") = Int;
overload selector(static #"bytesPerRow") = Int;
overload selector(static #"cString") = Pointer[CChar];
overload selector(static #"cStringLength") = UInt;
overload selector(static #"cStringUsingEncoding:") = Pointer[CChar], UInt;
overload selector(static #"cache:willEvictObject:") = Void, NSCache, Id;
overload selector(static #"cacheDepthMatchesImageDepth") = Bool;
overload selector(static #"cacheDisplayInRect:toBitmapImageRep:") = Void, NSRect, NSBitmapImageRep;
overload selector(static #"cacheImageInRect:") = Void, NSRect;
overload selector(static #"cacheMode") = UInt;
overload selector(static #"cachePolicy") = UInt;
overload selector(static #"cachedHandleForURL:") = NSURLHandle, NSURL;
overload selector(static #"cachedResponse") = NSCachedURLResponse;
overload selector(static #"cachedResponseForRequest:") = NSCachedURLResponse, NSURLRequest;
overload selector(static #"cachesBezierPath") = Bool;
overload selector(static #"calcDrawInfo:") = Void, NSRect;
overload selector(static #"calcSize") = Void;
overload selector(static #"calendar") = NSCalendar;
overload selector(static #"calendarDate") = Id;
overload selector(static #"calendarFormat") = NSString;
overload selector(static #"calendarIdentifier") = NSString;
overload selector(static #"callStackReturnAddresses") = NSArray;
overload selector(static #"callStackSymbols") = NSArray;
overload selector(static #"canAdd") = Bool;
overload selector(static #"canAddChild") = Bool;
overload selector(static #"canBeCompressedUsing:") = Bool, UInt;
overload selector(static #"canBeConvertedToEncoding:") = Bool, UInt;
overload selector(static #"canBeDisabled") = Bool;
overload selector(static #"canBeVisibleOnAllSpaces") = Bool;
overload selector(static #"canBecomeKeyView") = Bool;
overload selector(static #"canBecomeKeyWindow") = Bool;
overload selector(static #"canBecomeMainWindow") = Bool;
overload selector(static #"canBecomeVisibleWithoutLogin") = Bool;
overload selector(static #"canChooseDirectories") = Bool;
overload selector(static #"canChooseFiles") = Bool;
overload selector(static #"canCloseDocumentWithDelegate:shouldCloseSelector:contextInfo:") = Void, Id, SelectorHandle, RawPointer;
overload selector(static #"canConcurrentlyReadDocumentsOfType:") = Bool, NSString;
overload selector(static #"canCreateDirectories") = Bool;
overload selector(static #"canDragRowsWithIndexes:atPoint:") = Bool, NSIndexSet, NSPoint;
overload selector(static #"canDragRowsWithIndexes:inColumn:withEvent:") = Bool, NSIndexSet, Int, NSEvent;
overload selector(static #"canDraw") = Bool;
overload selector(static #"canDrawConcurrently") = Bool;
overload selector(static #"canDrawInCGLContext:pixelFormat:forLayerTime:displayTime:") = Bool, CGLContextObj, CGLPixelFormatObj, Double, Pointer[CVTimeStamp];
overload selector(static #"canDrawInOpenGLContext:pixelFormat:forLayerTime:displayTime:") = Bool, NSOpenGLContext, NSOpenGLPixelFormat, Double, Pointer[CVTimeStamp];
overload selector(static #"canHandleRequest:") = Bool, NSURLRequest;
overload selector(static #"canHide") = Bool;
overload selector(static #"canInitWithData:") = Bool, NSData;
overload selector(static #"canInitWithPasteboard:") = Bool, NSPasteboard;
overload selector(static #"canInitWithRequest:") = Bool, NSURLRequest;
overload selector(static #"canInitWithURL:") = Bool, NSURL;
overload selector(static #"canInsert") = Bool;
overload selector(static #"canInsertChild") = Bool;
overload selector(static #"canReadItemWithDataConformingToTypes:") = Bool, NSArray;
overload selector(static #"canReadObjectForClasses:options:") = Bool, NSArray, NSDictionary;
overload selector(static #"canRedo") = Bool;
overload selector(static #"canRemove") = Bool;
overload selector(static #"canRemoveAllRows") = Bool;
overload selector(static #"canResumeDownloadDecodedWithEncodingMIMEType:") = Bool, NSString;
overload selector(static #"canSelectHiddenExtension") = Bool;
overload selector(static #"canSelectNext") = Bool;
overload selector(static #"canSelectPrevious") = Bool;
overload selector(static #"canSpawnSeparateThread") = Bool;
overload selector(static #"canStoreColor") = Bool;
overload selector(static #"canUndo") = Bool;
overload selector(static #"cancel") = Void;
overload selector(static #"cancel:") = Void, Id;
overload selector(static #"cancelAllOperations") = Void;
overload selector(static #"cancelAuthenticationChallenge:") = Void, NSURLAuthenticationChallenge;
overload selector(static #"cancelButtonCell") = NSButtonCell;
overload selector(static #"cancelButtonRectForBounds:") = NSRect, NSRect;
overload selector(static #"cancelIncrementalLoad") = Void;
overload selector(static #"cancelLoadInBackground") = Void;
overload selector(static #"cancelOperation:") = Void, Id;
overload selector(static #"cancelPerformSelector:target:argument:") = Void, SelectorHandle, Id, Id;
overload selector(static #"cancelPerformSelectorsWithTarget:") = Void, Id;
overload selector(static #"cancelPreviousPerformRequestsWithTarget:") = Void, Id;
overload selector(static #"cancelPreviousPerformRequestsWithTarget:selector:object:") = Void, Id, SelectorHandle, Id;
overload selector(static #"cancelTracking") = Void;
overload selector(static #"cancelTrackingWithoutAnimation") = Void;
overload selector(static #"cancelUserAttentionRequest:") = Void, Int;
overload selector(static #"canonicalLanguageIdentifierFromString:") = NSString, NSString;
overload selector(static #"canonicalLocaleIdentifierFromString:") = NSString, NSString;
overload selector(static #"canonicalRequestForRequest:") = NSURLRequest, NSURLRequest;
overload selector(static #"canonicalXMLStringPreservingComments:") = NSString, Bool;
overload selector(static #"capHeight") = Float;
overload selector(static #"capabilityMask") = UInt;
overload selector(static #"capitalizeWord:") = Void, Id;
overload selector(static #"capitalizedLetterCharacterSet") = Id;
overload selector(static #"capitalizedString") = NSString;
overload selector(static #"cascadeTopLeftFromPoint:") = NSPoint, NSPoint;
overload selector(static #"caseInsensitiveCompare:") = Int, NSString;
overload selector(static #"caseSensitive") = Bool;
overload selector(static #"catalogNameComponent") = NSString;
overload selector(static #"cell") = Id;
overload selector(static #"cellAtIndex:") = Id, Int;
overload selector(static #"cellAtRow:column:") = Id, Int, Int;
overload selector(static #"cellAttribute:") = Int, UInt;
overload selector(static #"cellBackgroundColor") = NSColor;
overload selector(static #"cellBaselineOffset") = NSPoint;
overload selector(static #"cellClass") = Id;
overload selector(static #"cellFrameAtRow:column:") = NSRect, Int, Int;
overload selector(static #"cellFrameForTextContainer:proposedLineFragment:glyphPosition:characterIndex:") = NSRect, NSTextContainer, NSRect, NSPoint, UInt;
overload selector(static #"cellPrototype") = Id;
overload selector(static #"cellSize") = NSSize;
overload selector(static #"cellSizeForBounds:") = NSSize, NSRect;
overload selector(static #"cellWithTag:") = Id, Int;
overload selector(static #"cells") = NSArray;
overload selector(static #"center") = Void;
overload selector(static #"centerScanRect:") = NSRect, NSRect;
overload selector(static #"centerSelectionInVisibleArea:") = Void, Id;
overload selector(static #"certificates") = NSArray;
overload selector(static #"changeAttributes:") = Void, Id;
overload selector(static #"changeCaseOfLetter:") = Void, Id;
overload selector(static #"changeColor:") = Void, Id;
overload selector(static #"changeCount") = Int;
overload selector(static #"changeCurrentDirectoryPath:") = Bool, NSString;
overload selector(static #"changeDocumentBackgroundColor:") = Void, Id;
overload selector(static #"changeFileAttributes:atPath:") = Bool, NSDictionary, NSString;
overload selector(static #"changeFont:") = Void, Id;
overload selector(static #"changeInLength") = Int;
overload selector(static #"changeSpelling:") = Void, Id;
overload selector(static #"changeWindowsItem:title:filename:") = Void, NSWindow, NSString, Bool;
overload selector(static #"channelMapping") = NSArray;
overload selector(static #"charValue") = CChar;
overload selector(static #"characterAtIndex:") = UShort, UInt;
overload selector(static #"characterCollection") = UInt;
overload selector(static #"characterDirectionForLanguage:") = UInt, NSString;
overload selector(static #"characterEncoding") = NSString;
overload selector(static #"characterIdentifier") = UInt;
overload selector(static #"characterIndexForGlyphAtIndex:") = UInt, UInt;
overload selector(static #"characterIndexForInsertionAtPoint:") = UInt, NSPoint;
overload selector(static #"characterIndexForPoint:") = UInt, NSPoint;
overload selector(static #"characterIndexForPoint:inTextContainer:fractionOfDistanceBetweenInsertionPoints:") = UInt, NSPoint, NSTextContainer, Pointer[Float];
overload selector(static #"characterIsMember:") = Bool, UShort;
overload selector(static #"characterRangeForGlyphRange:actualGlyphRange:") = NSRange, NSRange, NSRangePointer;
overload selector(static #"characterSetWithBitmapRepresentation:") = Id, NSData;
overload selector(static #"characterSetWithCharactersInString:") = Id, NSString;
overload selector(static #"characterSetWithContentsOfFile:") = Id, NSString;
overload selector(static #"characterSetWithRange:") = Id, NSRange;
overload selector(static #"characters") = Id;
overload selector(static #"charactersIgnoringModifiers") = NSString;
overload selector(static #"charactersToBeSkipped") = NSCharacterSet;
overload selector(static #"checkForRemovableMedia") = Void;
overload selector(static #"checkGrammarOfString:startingAt:language:wrap:inSpellDocumentWithTag:details:") = NSRange, NSString, Int, NSString, Bool, Int, Pointer[NSArray];
overload selector(static #"checkResourceIsReachableAndReturnError:") = Bool, Pointer[NSError];
overload selector(static #"checkSpaceForParts") = Void;
overload selector(static #"checkSpelling:") = Void, Id;
overload selector(static #"checkSpellingOfString:startingAt:") = NSRange, NSString, Int;
overload selector(static #"checkSpellingOfString:startingAt:language:wrap:inSpellDocumentWithTag:wordCount:") = NSRange, NSString, Int, NSString, Bool, Int, Pointer[Int];
overload selector(static #"checkString:range:types:options:inSpellDocumentWithTag:orthography:wordCount:") = NSArray, NSString, NSRange, UInt64, NSDictionary, Int, Pointer[NSOrthography], Pointer[Int];
overload selector(static #"checkTextInDocument:") = Void, Id;
overload selector(static #"checkTextInRange:types:options:") = Void, NSRange, UInt64, NSDictionary;
overload selector(static #"checkTextInSelection:") = Void, Id;
overload selector(static #"childAtIndex:") = NSXMLNode, UInt;
overload selector(static #"childCount") = UInt;
overload selector(static #"childNodes") = NSArray;
overload selector(static #"childSpecifier") = NSScriptObjectSpecifier;
overload selector(static #"childWindows") = NSArray;
overload selector(static #"children") = NSArray;
overload selector(static #"childrenKeyPath") = NSString;
overload selector(static #"childrenKeyPathForNode:") = NSString, NSTreeNode;
overload selector(static #"class") = Id;
overload selector(static #"classCode") = CULong;
overload selector(static #"classDescription") = NSClassDescription;
overload selector(static #"classDescriptionForClass:") = Id, Id;
overload selector(static #"classDescriptionForKey:") = NSScriptClassDescription, NSString;
overload selector(static #"classDescriptionWithAppleEventCode:") = NSScriptClassDescription, CULong;
overload selector(static #"classDescriptionsInSuite:") = NSDictionary, NSString;
overload selector(static #"classFallbacksForKeyedArchiver") = NSArray;
overload selector(static #"classForArchiver") = Id;
overload selector(static #"classForClassName:") = Id, NSString;
overload selector(static #"classForCoder") = Id;
overload selector(static #"classForKeyedArchiver") = Id;
overload selector(static #"classForKeyedUnarchiver") = Id;
overload selector(static #"classForPortCoder") = Id;
overload selector(static #"className") = NSString;
overload selector(static #"classNameDecodedForArchiveClassName:") = NSString, NSString;
overload selector(static #"classNameEncodedForTrueClassName:") = NSString, NSString;
overload selector(static #"classNameForClass:") = NSString, Id;
overload selector(static #"classNamed:") = Id, NSString;
overload selector(static #"cleanUpAfterDragOperation") = Void;
overload selector(static #"cleanUpOperation") = Void;
overload selector(static #"clear:") = Void, Id;
overload selector(static #"clearColor") = NSColor;
overload selector(static #"clearContents") = Int;
overload selector(static #"clearCurrentContext") = Void;
overload selector(static #"clearDrawable") = Void;
overload selector(static #"clearGLContext") = Void;
overload selector(static #"clearRecentDocuments:") = Void, Id;
overload selector(static #"clearStartAnimation") = Void;
overload selector(static #"clearStopAnimation") = Void;
overload selector(static #"clearsFilterPredicateOnInsertion") = Bool;
overload selector(static #"clickCount") = Int;
overload selector(static #"clickedColumn") = Int;
overload selector(static #"clickedOnLink:atIndex:") = Void, Id, UInt;
overload selector(static #"clickedPathComponentCell") = NSPathComponentCell;
overload selector(static #"clickedRow") = Int;
overload selector(static #"client") = Id;
overload selector(static #"clientView") = NSView;
overload selector(static #"clipRect:") = Void, NSRect;
overload selector(static #"close") = Void;
overload selector(static #"close:") = Void, Id;
overload selector(static #"closeAllDocumentsWithDelegate:didCloseAllSelector:contextInfo:") = Void, Id, SelectorHandle, RawPointer;
overload selector(static #"closeFile") = Void;
overload selector(static #"closePath") = Void;
overload selector(static #"closeSpellDocumentWithTag:") = Void, Int;
overload selector(static #"closedHandCursor") = NSCursor;
overload selector(static #"closestTickMarkValueToValue:") = Double, Double;
overload selector(static #"code") = Int;
overload selector(static #"coerceToDescriptorType:") = NSAppleEventDescriptor, CULong;
overload selector(static #"coerceValue:forKey:") = Id, Id, NSString;
overload selector(static #"coerceValue:toClass:") = Id, Id, Id;
overload selector(static #"collapseItem:") = Void, Id;
overload selector(static #"collapseItem:collapseChildren:") = Void, Id, Bool;
overload selector(static #"collapsesBorders") = Bool;
overload selector(static #"collectExhaustively") = Void;
overload selector(static #"collectIfNeeded") = Void;
overload selector(static #"collection") = Id;
overload selector(static #"collectionBehavior") = UInt;
overload selector(static #"collectionNames") = NSArray;
overload selector(static #"collectionView") = NSCollectionView;
overload selector(static #"collectionView:acceptDrop:index:dropOperation:") = Bool, NSCollectionView, Id, Int, Int;
overload selector(static #"collectionView:canDragItemsAtIndexes:withEvent:") = Bool, NSCollectionView, NSIndexSet, NSEvent;
overload selector(static #"collectionView:draggingImageForItemsAtIndexes:withEvent:offset:") = NSImage, NSCollectionView, NSIndexSet, NSEvent, NSPointPointer;
overload selector(static #"collectionView:namesOfPromisedFilesDroppedAtDestination:forDraggedItemsAtIndexes:") = NSArray, NSCollectionView, NSURL, NSIndexSet;
overload selector(static #"collectionView:validateDrop:proposedIndex:dropOperation:") = UInt, NSCollectionView, Id, Pointer[Int], Pointer[Int];
overload selector(static #"collectionView:writeItemsAtIndexes:toPasteboard:") = Bool, NSCollectionView, NSIndexSet, NSPasteboard;
overload selector(static #"color") = NSColor;
overload selector(static #"colorAtX:y:") = NSColor, Int, Int;
overload selector(static #"colorForControlTint:") = NSColor, UInt;
overload selector(static #"colorFromPasteboard:") = NSColor, NSPasteboard;
overload selector(static #"colorListNamed:") = NSColorList, NSString;
overload selector(static #"colorNameComponent") = NSString;
overload selector(static #"colorPanel") = NSColorPanel;
overload selector(static #"colorRenderingIntent") = Int;
overload selector(static #"colorSpace") = NSColorSpace;
overload selector(static #"colorSpaceModel") = Int;
overload selector(static #"colorSpaceName") = NSString;
overload selector(static #"colorSyncProfile") = RawPointer;
overload selector(static #"colorUsingColorSpace:") = NSColor, NSColorSpace;
overload selector(static #"colorUsingColorSpaceName:") = NSColor, NSString;
overload selector(static #"colorUsingColorSpaceName:device:") = NSColor, NSString, NSDictionary;
overload selector(static #"colorWithAlphaComponent:") = NSColor, Float;
overload selector(static #"colorWithCGColor:") = CIColor, CGColorRef;
overload selector(static #"colorWithCIColor:") = NSColor, CIColor;
overload selector(static #"colorWithCalibratedHue:saturation:brightness:alpha:") = NSColor, Float, Float, Float, Float;
overload selector(static #"colorWithCalibratedRed:green:blue:alpha:") = NSColor, Float, Float, Float, Float;
overload selector(static #"colorWithCalibratedWhite:alpha:") = NSColor, Float, Float;
overload selector(static #"colorWithCatalogName:colorName:") = NSColor, NSString, NSString;
overload selector(static #"colorWithColorSpace:components:count:") = NSColor, NSColorSpace, Pointer[Float], Int;
overload selector(static #"colorWithDeviceCyan:magenta:yellow:black:alpha:") = NSColor, Float, Float, Float, Float, Float;
overload selector(static #"colorWithDeviceHue:saturation:brightness:alpha:") = NSColor, Float, Float, Float, Float;
overload selector(static #"colorWithDeviceRed:green:blue:alpha:") = NSColor, Float, Float, Float, Float;
overload selector(static #"colorWithDeviceWhite:alpha:") = NSColor, Float, Float;
overload selector(static #"colorWithKey:") = NSColor, NSString;
overload selector(static #"colorWithPatternImage:") = NSColor, NSImage;
overload selector(static #"colorWithRed:green:blue:") = CIColor, Float, Float, Float;
overload selector(static #"colorWithRed:green:blue:alpha:") = CIColor, Float, Float, Float, Float;
overload selector(static #"colorWithString:") = CIColor, NSString;
overload selector(static #"colorizeByMappingGray:toColor:blackMapping:whiteMapping:") = Void, Float, NSColor, NSColor, NSColor;
overload selector(static #"columnAtPoint:") = Int, NSPoint;
overload selector(static #"columnAutoresizingStyle") = UInt;
overload selector(static #"columnContentWidthForColumnWidth:") = Float, Float;
overload selector(static #"columnIndexesInRect:") = NSIndexSet, NSRect;
overload selector(static #"columnNumber") = Int;
overload selector(static #"columnOfMatrix:") = Int, NSMatrix;
overload selector(static #"columnResizingType") = UInt;
overload selector(static #"columnSpan") = Int;
overload selector(static #"columnWidthForColumnContentWidth:") = Float, Float;
overload selector(static #"columnWithIdentifier:") = Int, Id;
overload selector(static #"columnsAutosaveName") = NSString;
overload selector(static #"columnsInRect:") = NSRange, NSRect;
overload selector(static #"comboBox:completedString:") = NSString, NSComboBox, NSString;
overload selector(static #"comboBox:indexOfItemWithStringValue:") = UInt, NSComboBox, NSString;
overload selector(static #"comboBox:objectValueForItemAtIndex:") = Id, NSComboBox, Int;
overload selector(static #"comboBoxCell:completedString:") = NSString, NSComboBoxCell, NSString;
overload selector(static #"comboBoxCell:indexOfItemWithStringValue:") = UInt, NSComboBoxCell, NSString;
overload selector(static #"comboBoxCell:objectValueForItemAtIndex:") = Id, NSComboBoxCell, Int;
overload selector(static #"comboBoxSelectionDidChange:") = Void, NSNotification;
overload selector(static #"comboBoxSelectionIsChanging:") = Void, NSNotification;
overload selector(static #"comboBoxWillDismiss:") = Void, NSNotification;
overload selector(static #"comboBoxWillPopUp:") = Void, NSNotification;
overload selector(static #"commandClassName") = NSString;
overload selector(static #"commandDescription") = NSScriptCommandDescription;
overload selector(static #"commandDescriptionWithAppleEventClass:andAppleEventCode:") = NSScriptCommandDescription, CULong, CULong;
overload selector(static #"commandDescriptionsInSuite:") = NSDictionary, NSString;
overload selector(static #"commandName") = NSString;
overload selector(static #"commands") = NSArray;
overload selector(static #"comment") = NSString;
overload selector(static #"commentURL") = NSURL;
overload selector(static #"commentWithStringValue:") = Id, NSString;
overload selector(static #"commitEditing") = Bool;
overload selector(static #"commitEditingWithDelegate:didCommitSelector:contextInfo:") = Void, Id, SelectorHandle, RawPointer;
overload selector(static #"commonISOCurrencyCodes") = NSArray;
overload selector(static #"commonPrefixWithString:options:") = NSString, NSString, UInt;
overload selector(static #"compact") = Void;
overload selector(static #"comparator") = NSComparator;
overload selector(static #"compare:") = Int, NSNumber;
overload selector(static #"compare:options:") = Int, NSString, UInt;
overload selector(static #"compare:options:range:") = Int, NSString, UInt, NSRange;
overload selector(static #"compare:options:range:locale:") = Int, NSString, UInt, NSRange, Id;
overload selector(static #"compareObject:toObject:") = Int, Id, Id;
overload selector(static #"comparisonPredicateModifier") = UInt;
overload selector(static #"compileAndReturnError:") = Bool, Pointer[NSDictionary];
overload selector(static #"complete:") = Void, Id;
overload selector(static #"completePathIntoString:caseSensitive:matchesIntoArray:filterTypes:") = UInt, Pointer[NSString], Bool, Pointer[NSArray], NSArray;
overload selector(static #"completedString:") = NSString, NSString;
overload selector(static #"completes") = Bool;
overload selector(static #"completionBlock") = UnknownType;
overload selector(static #"completionDelay") = Double;
overload selector(static #"completionsForPartialWordRange:inString:language:inSpellDocumentWithTag:") = NSArray, NSRange, NSString, NSString, Int;
overload selector(static #"completionsForPartialWordRange:indexOfSelectedItem:") = NSArray, NSRange, Pointer[Int];
overload selector(static #"components") = NSArray;
overload selector(static #"components:fromDate:") = NSDateComponents, UInt, NSDate;
overload selector(static #"components:fromDate:toDate:options:") = NSDateComponents, UInt, NSDate, NSDate, UInt;
overload selector(static #"componentsFromLocaleIdentifier:") = NSDictionary, NSString;
overload selector(static #"componentsJoinedByString:") = NSString, NSString;
overload selector(static #"componentsSeparatedByCharactersInSet:") = NSArray, NSCharacterSet;
overload selector(static #"componentsSeparatedByString:") = NSArray, NSString;
overload selector(static #"componentsToDisplayForPath:") = NSArray, NSString;
overload selector(static #"compositeToPoint:fromRect:operation:") = Void, NSPoint, NSRect, UInt;
overload selector(static #"compositeToPoint:fromRect:operation:fraction:") = Void, NSPoint, NSRect, UInt, Float;
overload selector(static #"compositeToPoint:operation:") = Void, NSPoint, UInt;
overload selector(static #"compositeToPoint:operation:fraction:") = Void, NSPoint, UInt, Float;
overload selector(static #"compositingFilter") = Id;
overload selector(static #"compositingOperation") = UInt;
overload selector(static #"compoundPredicateType") = UInt;
overload selector(static #"compoundTypes") = NSArray;
overload selector(static #"concat") = Void;
overload selector(static #"concludeDragOperation:") = Void, Id;
overload selector(static #"condition") = Int;
overload selector(static #"configurationDictionary") = NSDictionary;
overload selector(static #"configureAsServer") = Void;
overload selector(static #"configurePersistentStoreCoordinatorForURL:ofType:error:") = Bool, NSURL, NSString, Pointer[NSError];
overload selector(static #"configurePersistentStoreCoordinatorForURL:ofType:modelConfiguration:storeOptions:error:") = Bool, NSURL, NSString, NSString, NSDictionary, Pointer[NSError];
overload selector(static #"confinementRectForMenu:onScreen:") = NSRect, NSMenu, NSScreen;
overload selector(static #"conformsToProtocol:") = Bool, Id;
overload selector(static #"connection") = NSConnection;
overload selector(static #"connection:canAuthenticateAgainstProtectionSpace:") = Bool, NSURLConnection, NSURLProtectionSpace;
overload selector(static #"connection:didCancelAuthenticationChallenge:") = Void, NSURLConnection, NSURLAuthenticationChallenge;
overload selector(static #"connection:didFailWithError:") = Void, NSURLConnection, NSError;
overload selector(static #"connection:didReceiveAuthenticationChallenge:") = Void, NSURLConnection, NSURLAuthenticationChallenge;
overload selector(static #"connection:didReceiveData:") = Void, NSURLConnection, NSData;
overload selector(static #"connection:didReceiveResponse:") = Void, NSURLConnection, NSURLResponse;
overload selector(static #"connection:didSendBodyData:totalBytesWritten:totalBytesExpectedToWrite:") = Void, NSURLConnection, Int, Int, Int;
overload selector(static #"connection:handleRequest:") = Bool, NSConnection, NSDistantObjectRequest;
overload selector(static #"connection:needNewBodyStream:") = NSInputStream, NSURLConnection, NSURLRequest;
overload selector(static #"connection:shouldMakeNewConnection:") = Bool, NSConnection, NSConnection;
overload selector(static #"connection:willCacheResponse:") = NSCachedURLResponse, NSURLConnection, NSCachedURLResponse;
overload selector(static #"connection:willSendRequest:redirectResponse:") = NSURLRequest, NSURLConnection, NSURLRequest, NSURLResponse;
overload selector(static #"connectionDidFinishLoading:") = Void, NSURLConnection;
overload selector(static #"connectionForProxy") = NSConnection;
overload selector(static #"connectionShouldUseCredentialStorage:") = Bool, NSURLConnection;
overload selector(static #"connectionWithReceivePort:sendPort:") = Id, NSPort, NSPort;
overload selector(static #"connectionWithRegisteredName:host:") = Id, NSString, NSString;
overload selector(static #"connectionWithRegisteredName:host:usingNameServer:") = Id, NSString, NSString, NSPortNameServer;
overload selector(static #"connectionWithRequest:delegate:") = NSURLConnection, NSURLRequest, Id;
overload selector(static #"constantValue") = Id;
overload selector(static #"constrainFrameRect:toScreen:") = NSRect, NSRect, NSScreen;
overload selector(static #"constrainScrollPoint:") = NSPoint, NSPoint;
overload selector(static #"containerClassDescription") = NSScriptClassDescription;
overload selector(static #"containerIsObjectBeingTested") = Bool;
overload selector(static #"containerIsRangeContainerObject") = Bool;
overload selector(static #"containerSize") = NSSize;
overload selector(static #"containerSpecifier") = NSScriptObjectSpecifier;
overload selector(static #"containsAttachments") = Bool;
overload selector(static #"containsIndex:") = Bool, UInt;
overload selector(static #"containsIndexes:") = Bool, NSIndexSet;
overload selector(static #"containsIndexesInRange:") = Bool, NSRange;
overload selector(static #"containsObject:") = Bool, Id;
overload selector(static #"containsPoint:") = Bool, NSPoint;
overload selector(static #"containsValueForKey:") = Bool, NSString;
overload selector(static #"content") = Id;
overload selector(static #"contentAspectRatio") = NSSize;
overload selector(static #"contentBorderThicknessForEdge:") = Float, NSRectEdge;
overload selector(static #"contentFilters") = NSArray;
overload selector(static #"contentMaxSize") = NSSize;
overload selector(static #"contentMinSize") = NSSize;
overload selector(static #"contentRect") = NSRect;
overload selector(static #"contentRectForFrameRect:") = NSRect, NSRect;
overload selector(static #"contentRectForFrameRect:styleMask:") = NSRect, NSRect, UInt;
overload selector(static #"contentResizeIncrements") = NSSize;
overload selector(static #"contentSize") = NSSize;
overload selector(static #"contentSizeForFrameSize:hasHorizontalScroller:hasVerticalScroller:borderType:") = NSSize, NSSize, Bool, Bool, UInt;
overload selector(static #"contentView") = Id;
overload selector(static #"contentViewMargins") = NSSize;
overload selector(static #"contentWidth") = Float;
overload selector(static #"contentWidthValueType") = UInt;
overload selector(static #"contents") = Id;
overload selector(static #"contentsAreFlipped") = Bool;
overload selector(static #"contentsAtPath:") = NSData, NSString;
overload selector(static #"contentsCenter") = CGRect;
overload selector(static #"contentsEqualAtPath:andPath:") = Bool, NSString, NSString;
overload selector(static #"contentsGravity") = NSString;
overload selector(static #"contentsOfDirectoryAtPath:error:") = NSArray, NSString, Pointer[NSError];
overload selector(static #"contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:") = NSArray, NSURL, NSArray, UInt, Pointer[NSError];
overload selector(static #"contentsRect") = CGRect;
overload selector(static #"context") = NSGraphicsContext;
overload selector(static #"contextHelpForKey:") = NSAttributedString, NSString;
overload selector(static #"contextHelpForObject:") = NSAttributedString, Id;
overload selector(static #"contextMenuRepresentation") = Id;
overload selector(static #"contextualMenuCursor") = NSCursor;
overload selector(static #"continueSpeaking") = Void;
overload selector(static #"continueTracking:at:inView:") = Bool, NSPoint, NSPoint, NSView;
overload selector(static #"continueWithoutCredentialForAuthenticationChallenge:") = Void, NSURLAuthenticationChallenge;
overload selector(static #"control:didFailToFormatString:errorDescription:") = Bool, NSControl, NSString, NSString;
overload selector(static #"control:didFailToValidatePartialString:errorDescription:") = Void, NSControl, NSString, NSString;
overload selector(static #"control:isValidObject:") = Bool, NSControl, Id;
overload selector(static #"control:textShouldBeginEditing:") = Bool, NSControl, NSText;
overload selector(static #"control:textShouldEndEditing:") = Bool, NSControl, NSText;
overload selector(static #"control:textView:completions:forPartialWordRange:indexOfSelectedItem:") = NSArray, NSControl, NSTextView, NSArray, NSRange, Pointer[Int];
overload selector(static #"control:textView:doCommandBySelector:") = Bool, NSControl, NSTextView, SelectorHandle;
overload selector(static #"controlAlternatingRowBackgroundColors") = NSArray;
overload selector(static #"controlBackgroundColor") = NSColor;
overload selector(static #"controlCharacterSet") = Id;
overload selector(static #"controlColor") = NSColor;
overload selector(static #"controlContentFontOfSize:") = NSFont, Float;
overload selector(static #"controlDarkShadowColor") = NSColor;
overload selector(static #"controlHighlightColor") = NSColor;
overload selector(static #"controlLightHighlightColor") = NSColor;
overload selector(static #"controlPointBounds") = NSRect;
overload selector(static #"controlShadowColor") = NSColor;
overload selector(static #"controlSize") = UInt;
overload selector(static #"controlTextColor") = NSColor;
overload selector(static #"controlTextDidBeginEditing:") = Void, NSNotification;
overload selector(static #"controlTextDidChange:") = Void, NSNotification;
overload selector(static #"controlTextDidEndEditing:") = Void, NSNotification;
overload selector(static #"controlTint") = UInt;
overload selector(static #"controlView") = NSView;
overload selector(static #"conversation") = Id;
overload selector(static #"conversationIdentifier") = Int;
overload selector(static #"convertAttributes:") = NSDictionary, NSDictionary;
overload selector(static #"convertBaseToScreen:") = NSPoint, NSPoint;
overload selector(static #"convertFont:") = NSFont, NSFont;
overload selector(static #"convertFont:toFace:") = NSFont, NSFont, NSString;
overload selector(static #"convertFont:toFamily:") = NSFont, NSFont, NSString;
overload selector(static #"convertFont:toHaveTrait:") = NSFont, NSFont, UInt;
overload selector(static #"convertFont:toNotHaveTrait:") = NSFont, NSFont, UInt;
overload selector(static #"convertFont:toSize:") = NSFont, NSFont, Float;
overload selector(static #"convertFontTraits:") = UInt, UInt;
overload selector(static #"convertPoint:fromLayer:") = CGPoint, CGPoint, CALayer;
overload selector(static #"convertPoint:fromView:") = NSPoint, NSPoint, NSView;
overload selector(static #"convertPoint:toLayer:") = CGPoint, CGPoint, CALayer;
overload selector(static #"convertPoint:toView:") = NSPoint, NSPoint, NSView;
overload selector(static #"convertPointFromBase:") = NSPoint, NSPoint;
overload selector(static #"convertPointToBase:") = NSPoint, NSPoint;
overload selector(static #"convertRect:fromLayer:") = CGRect, CGRect, CALayer;
overload selector(static #"convertRect:fromView:") = NSRect, NSRect, NSView;
overload selector(static #"convertRect:toLayer:") = CGRect, CGRect, CALayer;
overload selector(static #"convertRect:toView:") = NSRect, NSRect, NSView;
overload selector(static #"convertRectFromBase:") = NSRect, NSRect;
overload selector(static #"convertRectToBase:") = NSRect, NSRect;
overload selector(static #"convertScreenToBase:") = NSPoint, NSPoint;
overload selector(static #"convertSize:fromView:") = NSSize, NSSize, NSView;
overload selector(static #"convertSize:toView:") = NSSize, NSSize, NSView;
overload selector(static #"convertSizeFromBase:") = NSSize, NSSize;
overload selector(static #"convertSizeToBase:") = NSSize, NSSize;
overload selector(static #"convertTime:fromLayer:") = Double, Double, CALayer;
overload selector(static #"convertTime:toLayer:") = Double, Double, CALayer;
overload selector(static #"convertWeight:ofFont:") = NSFont, Bool, NSFont;
overload selector(static #"cookieAcceptPolicy") = UInt;
overload selector(static #"cookieWithProperties:") = Id, NSDictionary;
overload selector(static #"cookies") = NSArray;
overload selector(static #"cookiesForURL:") = NSArray, NSURL;
overload selector(static #"cookiesWithResponseHeaderFields:forURL:") = NSArray, NSDictionary, NSURL;
overload selector(static #"copiesOnScroll") = Bool;
overload selector(static #"copy") = Id;
overload selector(static #"copy:") = Void, Id;
overload selector(static #"copyAttributesFromContext:withMask:") = Void, NSOpenGLContext, UInt;
overload selector(static #"copyCGLContextForPixelFormat:") = CGLContextObj, CGLPixelFormatObj;
overload selector(static #"copyCGLPixelFormatForDisplayMask:") = CGLPixelFormatObj, UInt;
overload selector(static #"copyFont:") = Void, Id;
overload selector(static #"copyItemAtPath:toPath:error:") = Bool, NSString, NSString, Pointer[NSError];
overload selector(static #"copyItemAtURL:toURL:error:") = Bool, NSURL, NSURL, Pointer[NSError];
overload selector(static #"copyPath:toPath:handler:") = Bool, NSString, NSString, Id;
overload selector(static #"copyRuler:") = Void, Id;
overload selector(static #"copyScriptingValue:forKey:withProperties:") = Id, Id, NSString, NSDictionary;
overload selector(static #"copyWithZone:") = Id, Pointer[NSZone];
overload selector(static #"cornerRadius") = Float;
overload selector(static #"cornerView") = NSView;
overload selector(static #"correctionCheckingResultWithRange:replacementString:") = NSTextCheckingResult, NSRange, NSString;
overload selector(static #"count") = UInt;
overload selector(static #"countByEnumeratingWithState:objects:count:") = UInt, Pointer[NSFastEnumerationState], Pointer[Id], UInt;
overload selector(static #"countForObject:") = UInt, Id;
overload selector(static #"countKeyPath") = NSString;
overload selector(static #"countKeyPathForNode:") = NSString, NSTreeNode;
overload selector(static #"countLimit") = UInt;
overload selector(static #"countOfIndexesInRange:") = UInt, NSRange;
overload selector(static #"countWordsInString:language:") = Int, NSString, NSString;
overload selector(static #"coveredCharacterSet") = NSCharacterSet;
overload selector(static #"createClassDescription") = NSScriptClassDescription;
overload selector(static #"createCommandInstance") = NSScriptCommand;
overload selector(static #"createCommandInstanceWithZone:") = NSScriptCommand, Pointer[NSZone];
overload selector(static #"createContext") = NSGraphicsContext;
overload selector(static #"createConversationForConnection:") = Id, NSConnection;
overload selector(static #"createDirectoryAtPath:attributes:") = Bool, NSString, NSDictionary;
overload selector(static #"createDirectoryAtPath:withIntermediateDirectories:attributes:error:") = Bool, NSString, Bool, NSDictionary, Pointer[NSError];
overload selector(static #"createFileAtPath:contents:attributes:") = Bool, NSString, NSData, NSDictionary;
overload selector(static #"createSymbolicLinkAtPath:pathContent:") = Bool, NSString, NSString;
overload selector(static #"createSymbolicLinkAtPath:withDestinationPath:error:") = Bool, NSString, NSString, Pointer[NSError];
overload selector(static #"createTexture:fromView:internalFormat:") = Void, UInt, NSView, UInt;
overload selector(static #"credentialForTrust:") = NSURLCredential, SecTrustRef;
overload selector(static #"credentialWithIdentity:certificates:persistence:") = NSURLCredential, SecIdentityRef, NSArray, UInt;
overload selector(static #"credentialWithUser:password:persistence:") = NSURLCredential, NSString, NSString, UInt;
overload selector(static #"credentialsForProtectionSpace:") = NSDictionary, NSURLProtectionSpace;
overload selector(static #"criteriaForRow:") = NSArray, Int;
overload selector(static #"criteriaKeyPath") = NSString;
overload selector(static #"criticalValue") = Double;
overload selector(static #"crosshairCursor") = NSCursor;
overload selector(static #"currencyCode") = NSString;
overload selector(static #"currencyDecimalSeparator") = NSString;
overload selector(static #"currencyGroupingSeparator") = NSString;
overload selector(static #"currencySymbol") = NSString;
overload selector(static #"currentAppleEvent") = NSAppleEventDescriptor;
overload selector(static #"currentApplication") = NSRunningApplication;
overload selector(static #"currentCalendar") = Id;
overload selector(static #"currentCommand") = NSScriptCommand;
overload selector(static #"currentContext") = Id;
overload selector(static #"currentContextDrawingToScreen") = Bool;
overload selector(static #"currentControlTint") = UInt;
overload selector(static #"currentConversation") = Id;
overload selector(static #"currentCursor") = NSCursor;
overload selector(static #"currentDirectory") = NSString;
overload selector(static #"currentDirectoryPath") = NSString;
overload selector(static #"currentDiskUsage") = UInt;
overload selector(static #"currentDocument") = Id;
overload selector(static #"currentEditor") = NSText;
overload selector(static #"currentEvent") = NSEvent;
overload selector(static #"currentFontAction") = UInt;
overload selector(static #"currentHandler") = NSAssertionHandler;
overload selector(static #"currentHost") = NSHost;
overload selector(static #"currentInputContext") = NSTextInputContext;
overload selector(static #"currentInputManager") = NSInputManager;
overload selector(static #"currentLocale") = Id;
overload selector(static #"currentMemoryUsage") = UInt;
overload selector(static #"currentMode") = NSString;
overload selector(static #"currentOperation") = NSPrintOperation;
overload selector(static #"currentPage") = Int;
overload selector(static #"currentParagraphStyle") = NSParagraphStyle;
overload selector(static #"currentPoint") = NSPoint;
overload selector(static #"currentProgress") = Float;
overload selector(static #"currentQueue") = Id;
overload selector(static #"currentReplyAppleEvent") = NSAppleEventDescriptor;
overload selector(static #"currentRunLoop") = NSRunLoop;
overload selector(static #"currentSystemCursor") = NSCursor;
overload selector(static #"currentSystemPresentationOptions") = UInt;
overload selector(static #"currentTextContainer") = NSTextContainer;
overload selector(static #"currentThread") = NSThread;
overload selector(static #"currentTime") = Double;
overload selector(static #"currentValue") = Float;
overload selector(static #"currentVirtualScreen") = Int;
overload selector(static #"cursorUpdate:") = Void, NSEvent;
overload selector(static #"curveToPoint:controlPoint1:controlPoint2:") = Void, NSPoint, NSPoint, NSPoint;
overload selector(static #"customSelector") = SelectorHandle;
overload selector(static #"customizationPaletteIsRunning") = Bool;
overload selector(static #"cut:") = Void, Id;
overload selector(static #"cyanColor") = NSColor;
overload selector(static #"cyanComponent") = Float;
overload selector(static #"cycleToNextInputLanguage:") = Void, Id;
overload selector(static #"cycleToNextInputServerInLanguage:") = Void, Id;
overload selector(static #"darkGrayColor") = NSColor;
overload selector(static #"dashCheckingResultWithRange:replacementString:") = NSTextCheckingResult, NSRange, NSString;
overload selector(static #"data") = Id;
overload selector(static #"data1") = Int;
overload selector(static #"data2") = Int;
overload selector(static #"dataCell") = Id;
overload selector(static #"dataCellForRow:") = Id, Int;
overload selector(static #"dataForKey:") = NSData, NSString;
overload selector(static #"dataForType:") = NSData, NSString;
overload selector(static #"dataFromPropertyList:format:errorDescription:") = NSData, Id, UInt, Pointer[NSString];
overload selector(static #"dataFromRange:documentAttributes:error:") = NSData, NSRange, NSDictionary, Pointer[NSError];
overload selector(static #"dataFromTXTRecordDictionary:") = NSData, NSDictionary;
overload selector(static #"dataOfType:error:") = NSData, NSString, Pointer[NSError];
overload selector(static #"dataRepresentationOfType:") = NSData, NSString;
overload selector(static #"dataSource") = Id;
overload selector(static #"dataUsingEncoding:") = NSData, UInt;
overload selector(static #"dataUsingEncoding:allowLossyConversion:") = NSData, UInt, Bool;
overload selector(static #"dataWithBytes:length:") = Id, RawPointer, UInt;
overload selector(static #"dataWithBytesNoCopy:length:") = Id, RawPointer, UInt;
overload selector(static #"dataWithBytesNoCopy:length:freeWhenDone:") = Id, RawPointer, UInt, Bool;
overload selector(static #"dataWithCapacity:") = Id, UInt;
overload selector(static #"dataWithContentsOfFile:") = Id, NSString;
overload selector(static #"dataWithContentsOfFile:options:error:") = Id, NSString, UInt, Pointer[NSError];
overload selector(static #"dataWithContentsOfMappedFile:") = Id, NSString;
overload selector(static #"dataWithContentsOfURL:") = Id, NSURL;
overload selector(static #"dataWithContentsOfURL:options:error:") = Id, NSURL, UInt, Pointer[NSError];
overload selector(static #"dataWithData:") = Id, NSData;
overload selector(static #"dataWithEPSInsideRect:") = NSData, NSRect;
overload selector(static #"dataWithLength:") = Id, UInt;
overload selector(static #"dataWithPDFInsideRect:") = NSData, NSRect;
overload selector(static #"dataWithPropertyList:format:options:error:") = NSData, Id, UInt, UInt, Pointer[NSError];
overload selector(static #"date") = Id;
overload selector(static #"dateByAddingComponents:toDate:options:") = NSDate, NSDateComponents, NSDate, UInt;
overload selector(static #"dateByAddingTimeInterval:") = Id, Double;
overload selector(static #"dateByAddingYears:months:days:hours:minutes:seconds:") = NSCalendarDate, Int, Int, Int, Int, Int, Int;
overload selector(static #"dateCheckingResultWithRange:date:") = NSTextCheckingResult, NSRange, NSDate;
overload selector(static #"dateCheckingResultWithRange:date:timeZone:duration:") = NSTextCheckingResult, NSRange, NSDate, NSTimeZone, Double;
overload selector(static #"dateFormat") = NSString;
overload selector(static #"dateFormatFromTemplate:options:locale:") = NSString, NSString, UInt, NSLocale;
overload selector(static #"dateFromComponents:") = NSDate, NSDateComponents;
overload selector(static #"dateFromString:") = NSDate, NSString;
overload selector(static #"datePickerCell:validateProposedDateValue:timeInterval:") = Void, NSDatePickerCell, Pointer[NSDate], Pointer[Double];
overload selector(static #"datePickerElements") = UInt;
overload selector(static #"datePickerMode") = UInt;
overload selector(static #"datePickerStyle") = UInt;
overload selector(static #"dateStyle") = UInt;
overload selector(static #"dateValue") = NSDate;
overload selector(static #"dateWithCalendarFormat:timeZone:") = NSCalendarDate, NSString, NSTimeZone;
overload selector(static #"dateWithNaturalLanguageString:") = Id, NSString;
overload selector(static #"dateWithNaturalLanguageString:locale:") = Id, NSString, Id;
overload selector(static #"dateWithString:") = Id, NSString;
overload selector(static #"dateWithString:calendarFormat:") = Id, NSString, NSString;
overload selector(static #"dateWithString:calendarFormat:locale:") = Id, NSString, NSString, Id;
overload selector(static #"dateWithTimeInterval:sinceDate:") = Id, Double, NSDate;
overload selector(static #"dateWithTimeIntervalSince1970:") = Id, Double;
overload selector(static #"dateWithTimeIntervalSinceNow:") = Id, Double;
overload selector(static #"dateWithTimeIntervalSinceReferenceDate:") = Id, Double;
overload selector(static #"dateWithYear:month:day:hour:minute:second:timeZone:") = Id, Int, UInt, UInt, UInt, UInt, UInt, NSTimeZone;
overload selector(static #"day") = Int;
overload selector(static #"dayOfCommonEra") = Int;
overload selector(static #"dayOfMonth") = Int;
overload selector(static #"dayOfWeek") = Int;
overload selector(static #"dayOfYear") = Int;
overload selector(static #"daylightSavingTimeOffset") = Double;
overload selector(static #"daylightSavingTimeOffsetForDate:") = Double, NSDate;
overload selector(static #"deactivate") = Void;
overload selector(static #"dealloc") = Void;
overload selector(static #"decimalDigitCharacterSet") = Id;
overload selector(static #"decimalNumberByAdding:") = NSDecimalNumber, NSDecimalNumber;
overload selector(static #"decimalNumberByAdding:withBehavior:") = NSDecimalNumber, NSDecimalNumber, Id;
overload selector(static #"decimalNumberByDividingBy:") = NSDecimalNumber, NSDecimalNumber;
overload selector(static #"decimalNumberByDividingBy:withBehavior:") = NSDecimalNumber, NSDecimalNumber, Id;
overload selector(static #"decimalNumberByMultiplyingBy:") = NSDecimalNumber, NSDecimalNumber;
overload selector(static #"decimalNumberByMultiplyingBy:withBehavior:") = NSDecimalNumber, NSDecimalNumber, Id;
overload selector(static #"decimalNumberByMultiplyingByPowerOf10:") = NSDecimalNumber, Short;
overload selector(static #"decimalNumberByMultiplyingByPowerOf10:withBehavior:") = NSDecimalNumber, Short, Id;
overload selector(static #"decimalNumberByRaisingToPower:") = NSDecimalNumber, UInt;
overload selector(static #"decimalNumberByRaisingToPower:withBehavior:") = NSDecimalNumber, UInt, Id;
overload selector(static #"decimalNumberByRoundingAccordingToBehavior:") = NSDecimalNumber, Id;
overload selector(static #"decimalNumberBySubtracting:") = NSDecimalNumber, NSDecimalNumber;
overload selector(static #"decimalNumberBySubtracting:withBehavior:") = NSDecimalNumber, NSDecimalNumber, Id;
overload selector(static #"decimalNumberHandlerWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:") = Id, UInt, Short, Bool, Bool, Bool, Bool;
overload selector(static #"decimalNumberWithDecimal:") = NSDecimalNumber, NSDecimal;
overload selector(static #"decimalNumberWithMantissa:exponent:isNegative:") = NSDecimalNumber, UInt64, Short, Bool;
overload selector(static #"decimalNumberWithString:") = NSDecimalNumber, NSString;
overload selector(static #"decimalNumberWithString:locale:") = NSDecimalNumber, NSString, Id;
overload selector(static #"decimalSeparator") = NSString;
overload selector(static #"decimalValue") = NSDecimal;
overload selector(static #"declareTypes:owner:") = Int, NSArray, Id;
overload selector(static #"decodeArrayOfObjCType:count:at:") = Void, Pointer[CChar], UInt, RawPointer;
overload selector(static #"decodeBoolForKey:") = Bool, NSString;
overload selector(static #"decodeBytesForKey:returnedLength:") = Pointer[CUChar], NSString, Pointer[UInt];
overload selector(static #"decodeBytesWithReturnedLength:") = RawPointer, Pointer[UInt];
overload selector(static #"decodeClassName:asClassName:") = Void, NSString, NSString;
overload selector(static #"decodeDataObject") = NSData;
overload selector(static #"decodeDoubleForKey:") = Double, NSString;
overload selector(static #"decodeFloatForKey:") = Float, NSString;
overload selector(static #"decodeInt32ForKey:") = Int, NSString;
overload selector(static #"decodeInt64ForKey:") = Int64, NSString;
overload selector(static #"decodeIntForKey:") = Int, NSString;
overload selector(static #"decodeIntegerForKey:") = Int, NSString;
overload selector(static #"decodeNXColor") = NSColor;
overload selector(static #"decodeNXObject") = Id;
overload selector(static #"decodeObject") = Id;
overload selector(static #"decodeObjectForKey:") = Id, NSString;
overload selector(static #"decodePoint") = NSPoint;
overload selector(static #"decodePointForKey:") = NSPoint, NSString;
overload selector(static #"decodePortObject") = NSPort;
overload selector(static #"decodePropertyList") = Id;
overload selector(static #"decodeRect") = NSRect;
overload selector(static #"decodeRectForKey:") = NSRect, NSString;
overload selector(static #"decodeSize") = NSSize;
overload selector(static #"decodeSizeForKey:") = NSSize, NSString;
overload selector(static #"decodeValueOfObjCType:at:") = Void, Pointer[CChar], RawPointer;
overload varargSelector(static #"decodeValuesOfObjCTypes:") = Void, Pointer[CChar];
overload selector(static #"decomposableCharacterSet") = Id;
overload selector(static #"decomposedStringWithCanonicalMapping") = NSString;
overload selector(static #"decomposedStringWithCompatibilityMapping") = NSString;
overload selector(static #"deepestScreen") = NSScreen;
overload selector(static #"defaultActionForKey:") = Id, NSString;
overload selector(static #"defaultAnimationForKey:") = Id, NSString;
overload selector(static #"defaultAttachmentScaling") = UInt;
overload selector(static #"defaultBaselineOffsetForFont:") = Float, NSFont;
overload selector(static #"defaultBehavior") = Id;
overload selector(static #"defaultButtonCell") = NSButtonCell;
overload selector(static #"defaultButtonTitle") = NSString;
overload selector(static #"defaultCStringEncoding") = UInt;
overload selector(static #"defaultCenter") = Id;
overload selector(static #"defaultCollector") = Id;
overload selector(static #"defaultColumnWidth") = Float;
overload selector(static #"defaultCompletionDelay") = Double;
overload selector(static #"defaultConnection") = NSConnection;
overload selector(static #"defaultCredentialForProtectionSpace:") = NSURLCredential, NSURLProtectionSpace;
overload selector(static #"defaultDate") = NSDate;
overload selector(static #"defaultDecimalNumberHandler") = Id;
overload selector(static #"defaultDepthLimit") = Int;
overload selector(static #"defaultFetchRequest") = NSFetchRequest;
overload selector(static #"defaultFlatness") = Float;
overload selector(static #"defaultFocusRingType") = UInt;
overload selector(static #"defaultFormatterBehavior") = UInt;
overload selector(static #"defaultLineCapStyle") = UInt;
overload selector(static #"defaultLineHeightForFont") = Float;
overload selector(static #"defaultLineHeightForFont:") = Float, NSFont;
overload selector(static #"defaultLineJoinStyle") = UInt;
overload selector(static #"defaultLineWidth") = Float;
overload selector(static #"defaultManager") = NSFileManager;
overload selector(static #"defaultMenu") = NSMenu;
overload selector(static #"defaultMiterLimit") = Float;
overload selector(static #"defaultNameServerPortNumber") = UShort;
overload selector(static #"defaultParagraphStyle") = NSParagraphStyle;
overload selector(static #"defaultPixelFormat") = NSOpenGLPixelFormat;
overload selector(static #"defaultPlaceholderForMarker:withBinding:") = Id, Id, NSString;
overload selector(static #"defaultPrinter") = NSPrinter;
overload selector(static #"defaultQueue") = Id;
overload selector(static #"defaultSubcontainerAttributeKey") = NSString;
overload selector(static #"defaultTabInterval") = Float;
overload selector(static #"defaultTimeZone") = NSTimeZone;
overload selector(static #"defaultTokenizingCharacterSet") = NSCharacterSet;
overload selector(static #"defaultType") = NSString;
overload selector(static #"defaultTypesetterBehavior") = Int;
overload selector(static #"defaultValue") = Id;
overload selector(static #"defaultValueForKey:") = Id, NSString;
overload selector(static #"defaultVoice") = NSString;
overload selector(static #"defaultWindingRule") = UInt;
overload selector(static #"defaultWritingDirectionForLanguage:") = Int, NSString;
overload selector(static #"defaults") = NSUserDefaults;
overload selector(static #"definition") = CIFilterShape;
overload selector(static #"delegate") = Id;
overload selector(static #"delete:") = Void, Id;
overload selector(static #"deleteBackward:") = Void, Id;
overload selector(static #"deleteBackwardByDecomposingPreviousCharacter:") = Void, Id;
overload selector(static #"deleteCharactersInRange:") = Void, NSRange;
overload selector(static #"deleteCookie:") = Void, NSHTTPCookie;
overload selector(static #"deleteForward:") = Void, Id;
overload selector(static #"deleteGlyphsInRange:") = Void, NSRange;
overload selector(static #"deleteToBeginningOfLine:") = Void, Id;
overload selector(static #"deleteToBeginningOfParagraph:") = Void, Id;
overload selector(static #"deleteToEndOfLine:") = Void, Id;
overload selector(static #"deleteToEndOfParagraph:") = Void, Id;
overload selector(static #"deleteToMark:") = Void, Id;
overload selector(static #"deleteWordBackward:") = Void, Id;
overload selector(static #"deleteWordForward:") = Void, Id;
overload selector(static #"deletesFileUponFailure") = Bool;
overload selector(static #"deliverResult") = Bool;
overload selector(static #"deltaX") = Float;
overload selector(static #"deltaY") = Float;
overload selector(static #"deltaZ") = Float;
overload selector(static #"deminiaturize:") = Void, Id;
overload selector(static #"dependencies") = NSArray;
overload selector(static #"depth") = Int;
overload selector(static #"depthLimit") = Int;
overload selector(static #"dequeueNotificationsMatching:coalesceMask:") = Void, NSNotification, UInt;
overload selector(static #"descendantNodeAtIndexPath:") = NSTreeNode, NSIndexPath;
overload selector(static #"descender") = Float;
overload selector(static #"description") = NSString;
overload selector(static #"descriptionFunction") = CCodePointer[(RawPointer),(NSString)];
overload selector(static #"descriptionInStringsFileFormat") = NSString;
overload selector(static #"descriptionWithCalendarFormat:") = NSString, NSString;
overload selector(static #"descriptionWithCalendarFormat:locale:") = NSString, NSString, Id;
overload selector(static #"descriptionWithCalendarFormat:timeZone:locale:") = NSString, NSString, NSTimeZone, Id;
overload selector(static #"descriptionWithLocale:") = NSString, Id;
overload selector(static #"descriptionWithLocale:indent:") = NSString, Id, UInt;
overload selector(static #"descriptor") = NSAppleEventDescriptor;
overload selector(static #"descriptorAtIndex:") = NSAppleEventDescriptor, Int;
overload selector(static #"descriptorForKeyword:") = NSAppleEventDescriptor, CULong;
overload selector(static #"descriptorType") = CULong;
overload selector(static #"descriptorWithBoolean:") = NSAppleEventDescriptor, CUChar;
overload selector(static #"descriptorWithDescriptorType:bytes:length:") = NSAppleEventDescriptor, CULong, RawPointer, UInt;
overload selector(static #"descriptorWithDescriptorType:data:") = NSAppleEventDescriptor, CULong, NSData;
overload selector(static #"descriptorWithEnumCode:") = NSAppleEventDescriptor, CULong;
overload selector(static #"descriptorWithInt32:") = NSAppleEventDescriptor, CLong;
overload selector(static #"descriptorWithString:") = NSAppleEventDescriptor, NSString;
overload selector(static #"descriptorWithTypeCode:") = NSAppleEventDescriptor, CULong;
overload selector(static #"deselectAll:") = Void, Id;
overload selector(static #"deselectAllCells") = Void;
overload selector(static #"deselectColumn:") = Void, Int;
overload selector(static #"deselectItemAtIndex:") = Void, Int;
overload selector(static #"deselectRow:") = Void, Int;
overload selector(static #"deselectSelectedCell") = Void;
overload selector(static #"desktopImageOptionsForScreen:") = NSDictionary, NSScreen;
overload selector(static #"desktopImageURLForScreen:") = NSURL, NSScreen;
overload selector(static #"destinationOfSymbolicLinkAtPath:error:") = NSString, NSString, Pointer[NSError];
overload selector(static #"destroyContext") = Void;
overload selector(static #"detach") = Void;
overload selector(static #"detachColorList:") = Void, NSColorList;
overload selector(static #"detachDrawingThread:toTarget:withObject:") = Void, SelectorHandle, Id, Id;
overload selector(static #"detachNewThreadSelector:toTarget:withObject:") = Void, SelectorHandle, Id, Id;
overload selector(static #"detachSubmenu") = Void;
overload selector(static #"developmentLocalization") = NSString;
overload selector(static #"device") = Id;
overload selector(static #"deviceCMYKColorSpace") = NSColorSpace;
overload selector(static #"deviceDescription") = NSDictionary;
overload selector(static #"deviceGrayColorSpace") = NSColorSpace;
overload selector(static #"deviceID") = UInt;
overload selector(static #"deviceRGBColorSpace") = NSColorSpace;
overload selector(static #"deviceSize") = NSSize;
overload selector(static #"dictionary") = Id;
overload selector(static #"dictionaryForKey:") = NSDictionary, NSString;
overload selector(static #"dictionaryFromTXTRecordData:") = NSDictionary, NSData;
overload selector(static #"dictionaryRepresentation") = NSDictionary;
overload selector(static #"dictionaryWithCapacity:") = Id, UInt;
overload selector(static #"dictionaryWithContentsOfFile:") = Id, NSString;
overload selector(static #"dictionaryWithContentsOfURL:") = Id, NSURL;
overload selector(static #"dictionaryWithDictionary:") = Id, NSDictionary;
overload selector(static #"dictionaryWithObject:forKey:") = Id, Id, Id;
overload selector(static #"dictionaryWithObjects:forKeys:") = Id, NSArray, NSArray;
overload selector(static #"dictionaryWithObjects:forKeys:count:") = Id, Pointer[Id], Pointer[Id], UInt;
overload varargSelector(static #"dictionaryWithObjectsAndKeys:") = Id, Id;
overload selector(static #"dictionaryWithValuesForKeys:") = NSDictionary, NSArray;
overload selector(static #"didAddSubview:") = Void, NSView;
overload selector(static #"didChange:valuesAtIndexes:forKey:") = Void, UInt, NSIndexSet, NSString;
overload selector(static #"didChangeArrangementCriteria") = Void;
overload selector(static #"didChangeText") = Void;
overload selector(static #"didChangeValueForKey:") = Void, NSString;
overload selector(static #"didChangeValueForKey:withSetMutation:usingObjects:") = Void, NSString, UInt, NSSet;
overload selector(static #"didLoadBytes:loadComplete:") = Void, NSData, Bool;
overload selector(static #"directParameter") = Id;
overload selector(static #"directory") = NSString;
overload selector(static #"directoryAttributes") = NSDictionary;
overload selector(static #"directoryContentsAtPath:") = NSArray, NSString;
overload selector(static #"directoryURL") = NSURL;
overload selector(static #"disable") = Void;
overload selector(static #"disableCollectorForPointer:") = Void, RawPointer;
overload selector(static #"disableCursorRects") = Void;
overload selector(static #"disableFlushWindow") = Void;
overload selector(static #"disableKeyEquivalentForDefaultButtonCell") = Void;
overload selector(static #"disableScreenUpdatesUntilFlush") = Void;
overload selector(static #"disableSuddenTermination") = Void;
overload selector(static #"disableUndoRegistration") = Void;
overload selector(static #"disableUpdates") = Void;
overload selector(static #"disabledControlTextColor") = NSColor;
overload selector(static #"disappearingItemCursor") = NSCursor;
overload selector(static #"discardCachedImage") = Void;
overload selector(static #"discardContentIfPossible") = Void;
overload selector(static #"discardCursorRects") = Void;
overload selector(static #"discardEditing") = Void;
overload selector(static #"discardEventsMatchingMask:beforeEvent:") = Void, UInt, NSEvent;
overload selector(static #"discardMarkedText") = Void;
overload selector(static #"diskCapacity") = UInt;
overload selector(static #"dismissPopUp") = Void;
overload selector(static #"dispatch") = Void;
overload selector(static #"dispatchRawAppleEvent:withRawReply:handlerRefCon:") = Short, Pointer[AppleEvent], Pointer[AppleEvent], CLong;
overload selector(static #"display") = Void;
overload selector(static #"displayAllColumns") = Void;
overload selector(static #"displayColumn:") = Void, Int;
overload selector(static #"displayIfNeeded") = Void;
overload selector(static #"displayIfNeededIgnoringOpacity") = Void;
overload selector(static #"displayIfNeededInRect:") = Void, NSRect;
overload selector(static #"displayIfNeededInRectIgnoringOpacity:") = Void, NSRect;
overload selector(static #"displayLayer:") = Void, CALayer;
overload selector(static #"displayMode") = UInt;
overload selector(static #"displayName") = NSString;
overload selector(static #"displayNameAtPath:") = NSString, NSString;
overload selector(static #"displayNameForKey:value:") = NSString, Id, Id;
overload selector(static #"displayNameForType:") = NSString, NSString;
overload selector(static #"displayRect:") = Void, NSRect;
overload selector(static #"displayRectIgnoringOpacity:") = Void, NSRect;
overload selector(static #"displayRectIgnoringOpacity:inContext:") = Void, NSRect, NSGraphicsContext;
overload selector(static #"displayValuesForRow:") = NSArray, Int;
overload selector(static #"displayValuesKeyPath") = NSString;
overload selector(static #"displayableSubpredicatesOfPredicate:") = NSArray, NSPredicate;
overload selector(static #"displayedCommandsTitle") = NSString;
overload selector(static #"displaysLinkToolTips") = Bool;
overload selector(static #"displaysWhenScreenProfileChanges") = Bool;
overload selector(static #"dissolveToPoint:fraction:") = Void, NSPoint, Float;
overload selector(static #"dissolveToPoint:fromRect:fraction:") = Void, NSPoint, NSRect, Float;
overload selector(static #"distantFuture") = Id;
overload selector(static #"distantPast") = Id;
overload selector(static #"distinguishedNames") = NSArray;
overload selector(static #"dividerColor") = NSColor;
overload selector(static #"dividerStyle") = Int;
overload selector(static #"dividerThickness") = Float;
overload selector(static #"doClick:") = Void, Id;
overload selector(static #"doCommandBySelector:") = Void, SelectorHandle;
overload selector(static #"doCommandBySelector:client:") = Void, SelectorHandle, Id;
overload selector(static #"doDoubleClick:") = Void, Id;
overload selector(static #"docFormatFromRange:documentAttributes:") = NSData, NSRange, NSDictionary;
overload selector(static #"dockMenu") = NSMenu;
overload selector(static #"dockTile") = NSDockTile;
overload selector(static #"document") = Id;
overload selector(static #"documentClassForType:") = Id, NSString;
overload selector(static #"documentClassNames") = NSArray;
overload selector(static #"documentContentKind") = UInt;
overload selector(static #"documentCursor") = NSCursor;
overload selector(static #"documentForFileName:") = Id, NSString;
overload selector(static #"documentForURL:") = Id, NSURL;
overload selector(static #"documentForWindow:") = Id, NSWindow;
overload selector(static #"documentRect") = NSRect;
overload selector(static #"documentView") = Id;
overload selector(static #"documentVisibleRect") = NSRect;
overload selector(static #"documentWithRootElement:") = Id, NSXMLElement;
overload selector(static #"documents") = NSArray;
overload selector(static #"doesContain:") = Bool, Id;
overload selector(static #"doesNotRecognizeSelector:") = Void, SelectorHandle;
overload selector(static #"doesRelativeDateFormatting") = Bool;
overload selector(static #"domain") = NSString;
overload selector(static #"dominantLanguage") = NSString;
overload selector(static #"dominantLanguageForScript:") = NSString, NSString;
overload selector(static #"dominantScript") = NSString;
overload selector(static #"doubleAction") = SelectorHandle;
overload selector(static #"doubleClickAtIndex:") = NSRange, UInt;
overload selector(static #"doubleClickInterval") = Double;
overload selector(static #"doubleForKey:") = Double, NSString;
overload selector(static #"doubleValue") = Double;
overload selector(static #"download:canAuthenticateAgainstProtectionSpace:") = Bool, NSURLDownload, NSURLProtectionSpace;
overload selector(static #"download:decideDestinationWithSuggestedFilename:") = Void, NSURLDownload, NSString;
overload selector(static #"download:didCancelAuthenticationChallenge:") = Void, NSURLDownload, NSURLAuthenticationChallenge;
overload selector(static #"download:didCreateDestination:") = Void, NSURLDownload, NSString;
overload selector(static #"download:didFailWithError:") = Void, NSURLDownload, NSError;
overload selector(static #"download:didReceiveAuthenticationChallenge:") = Void, NSURLDownload, NSURLAuthenticationChallenge;
overload selector(static #"download:didReceiveDataOfLength:") = Void, NSURLDownload, UInt;
overload selector(static #"download:didReceiveResponse:") = Void, NSURLDownload, NSURLResponse;
overload selector(static #"download:shouldDecodeSourceDataOfMIMEType:") = Bool, NSURLDownload, NSString;
overload selector(static #"download:willResumeWithResponse:fromByte:") = Void, NSURLDownload, NSURLResponse, Int64;
overload selector(static #"download:willSendRequest:redirectResponse:") = NSURLRequest, NSURLDownload, NSURLRequest, NSURLResponse;
overload selector(static #"downloadDidBegin:") = Void, NSURLDownload;
overload selector(static #"downloadDidFinish:") = Void, NSURLDownload;
overload selector(static #"downloadShouldUseCredentialStorage:") = Bool, NSURLDownload;
overload selector(static #"dragColor:withEvent:fromView:") = Bool, NSColor, NSEvent, NSView;
overload selector(static #"dragCopyCursor") = NSCursor;
overload selector(static #"dragFile:fromRect:slideBack:event:") = Bool, NSString, NSRect, Bool, NSEvent;
overload selector(static #"dragImage:at:offset:event:pasteboard:source:slideBack:") = Void, NSImage, NSPoint, NSSize, NSEvent, NSPasteboard, Id, Bool;
overload selector(static #"dragImageForRows:event:dragImageOffset:") = NSImage, NSArray, NSEvent, NSPointPointer;
overload selector(static #"dragImageForRowsWithIndexes:tableColumns:event:offset:") = NSImage, NSIndexSet, NSArray, NSEvent, NSPointPointer;
overload selector(static #"dragImageForSelectionWithEvent:origin:") = NSImage, NSEvent, NSPointPointer;
overload selector(static #"dragLinkCursor") = NSCursor;
overload selector(static #"dragOperationForDraggingInfo:type:") = UInt, Id, NSString;
overload selector(static #"dragPromisedFilesOfTypes:fromRect:source:slideBack:event:") = Bool, NSArray, NSRect, Id, Bool, NSEvent;
overload selector(static #"dragSelectionWithEvent:offset:slideBack:") = Bool, NSEvent, NSSize, Bool;
overload selector(static #"draggedColumn") = Int;
overload selector(static #"draggedDistance") = Float;
overload selector(static #"draggedImage") = NSImage;
overload selector(static #"draggedImage:beganAt:") = Void, NSImage, NSPoint;
overload selector(static #"draggedImage:endedAt:deposited:") = Void, NSImage, NSPoint, Bool;
overload selector(static #"draggedImage:endedAt:operation:") = Void, NSImage, NSPoint, UInt;
overload selector(static #"draggedImage:movedTo:") = Void, NSImage, NSPoint;
overload selector(static #"draggedImageLocation") = NSPoint;
overload selector(static #"draggingDestinationFeedbackStyle") = Int;
overload selector(static #"draggingDestinationWindow") = NSWindow;
overload selector(static #"draggingEnded:") = Void, Id;
overload selector(static #"draggingEntered:") = UInt, Id;
overload selector(static #"draggingExited:") = Void, Id;
overload selector(static #"draggingImageForItemsAtIndexes:withEvent:offset:") = NSImage, NSIndexSet, NSEvent, NSPointPointer;
overload selector(static #"draggingImageForRowsWithIndexes:inColumn:withEvent:offset:") = NSImage, NSIndexSet, Int, NSEvent, NSPointPointer;
overload selector(static #"draggingLocation") = NSPoint;
overload selector(static #"draggingPasteboard") = NSPasteboard;
overload selector(static #"draggingSequenceNumber") = Int;
overload selector(static #"draggingSource") = Id;
overload selector(static #"draggingSourceOperationMask") = UInt;
overload selector(static #"draggingSourceOperationMaskForLocal:") = UInt, Bool;
overload selector(static #"draggingUpdated:") = UInt, Id;
overload selector(static #"drain") = Void;
overload selector(static #"draw") = Bool;
overload selector(static #"drawArrow:highlight:") = Void, UInt, Bool;
overload selector(static #"drawAtPoint:") = Bool, NSPoint;
overload selector(static #"drawAtPoint:fromRect:operation:fraction:") = Void, NSPoint, NSRect, UInt, Float;
overload selector(static #"drawAtPoint:withAttributes:") = Void, NSPoint, NSDictionary;
overload selector(static #"drawBackgroundForBlock:withFrame:inView:characterRange:layoutManager:") = Void, NSTextTableBlock, NSRect, NSView, NSRange, NSLayoutManager;
overload selector(static #"drawBackgroundForGlyphRange:atPoint:") = Void, NSRange, NSPoint;
overload selector(static #"drawBackgroundInClipRect:") = Void, NSRect;
overload selector(static #"drawBackgroundWithFrame:inView:characterRange:layoutManager:") = Void, NSRect, NSView, NSRange, NSLayoutManager;
overload selector(static #"drawBarInside:flipped:") = Void, NSRect, Bool;
overload selector(static #"drawBezelWithFrame:inView:") = Void, NSRect, NSView;
overload selector(static #"drawBorderAndBackgroundWithFrame:inView:") = Void, NSRect, NSView;
overload selector(static #"drawCell:") = Void, NSCell;
overload selector(static #"drawCellAtIndex:") = Void, Int;
overload selector(static #"drawCellAtRow:column:") = Void, Int, Int;
overload selector(static #"drawCellInside:") = Void, NSCell;
overload selector(static #"drawDividerInRect:") = Void, NSRect;
overload selector(static #"drawFromCenter:radius:toCenter:radius:options:") = Void, NSPoint, Float, NSPoint, Float, UInt;
overload selector(static #"drawFromPoint:toPoint:options:") = Void, NSPoint, NSPoint, UInt;
overload selector(static #"drawGlyphsForGlyphRange:atPoint:") = Void, NSRange, NSPoint;
overload selector(static #"drawGridInClipRect:") = Void, NSRect;
overload selector(static #"drawHashMarksAndLabelsInRect:") = Void, NSRect;
overload selector(static #"drawImage:withFrame:inView:") = Void, NSImage, NSRect, NSView;
overload selector(static #"drawImageWithFrame:inView:") = Void, NSRect, NSView;
overload selector(static #"drawInBezierPath:angle:") = Void, NSBezierPath, Float;
overload selector(static #"drawInBezierPath:relativeCenterPosition:") = Void, NSBezierPath, NSPoint;
overload selector(static #"drawInCGLContext:pixelFormat:forLayerTime:displayTime:") = Void, CGLContextObj, CGLPixelFormatObj, Double, Pointer[CVTimeStamp];
overload selector(static #"drawInContext:") = Void, CGContextRef;
overload selector(static #"drawInOpenGLContext:pixelFormat:forLayerTime:displayTime:") = Void, NSOpenGLContext, NSOpenGLPixelFormat, Double, Pointer[CVTimeStamp];
overload selector(static #"drawInRect:") = Bool, NSRect;
overload selector(static #"drawInRect:angle:") = Void, NSRect, Float;
overload selector(static #"drawInRect:fromRect:operation:fraction:") = Void, NSRect, NSRect, UInt, Float;
overload selector(static #"drawInRect:fromRect:operation:fraction:respectFlipped:hints:") = Bool, NSRect, NSRect, UInt, Float, Bool, NSDictionary;
overload selector(static #"drawInRect:relativeCenterPosition:") = Void, NSRect, NSPoint;
overload selector(static #"drawInRect:withAttributes:") = Void, NSRect, NSDictionary;
overload selector(static #"drawInsertionPointInRect:color:turnedOn:") = Void, NSRect, NSColor, Bool;
overload selector(static #"drawInteriorWithFrame:inView:") = Void, NSRect, NSView;
overload selector(static #"drawKeyEquivalentWithFrame:inView:") = Void, NSRect, NSView;
overload selector(static #"drawKnob") = Void;
overload selector(static #"drawKnob:") = Void, NSRect;
overload selector(static #"drawKnobSlotInRect:highlight:") = Void, NSRect, Bool;
overload selector(static #"drawLabel:inRect:") = Void, Bool, NSRect;
overload selector(static #"drawLayer:inContext:") = Void, CALayer, CGContextRef;
overload selector(static #"drawMarkersInRect:") = Void, NSRect;
overload selector(static #"drawPackedGlyphs:atPoint:") = Void, Pointer[CChar], NSPoint;
overload selector(static #"drawPageBorderWithSize:") = Void, NSSize;
overload selector(static #"drawParts") = Void;
overload selector(static #"drawRect:") = Void, NSRect;
overload selector(static #"drawRepresentation:inRect:") = Bool, NSImageRep, NSRect;
overload selector(static #"drawRow:clipRect:") = Void, Int, NSRect;
overload selector(static #"drawSegment:inFrame:withView:") = Void, Int, NSRect, NSView;
overload selector(static #"drawSelector") = SelectorHandle;
overload selector(static #"drawSeparatorItemWithFrame:inView:") = Void, NSRect, NSView;
overload selector(static #"drawSheetBorderWithSize:") = Void, NSSize;
overload selector(static #"drawSortIndicatorWithFrame:inView:ascending:priority:") = Void, NSRect, NSView, Bool, Int;
overload selector(static #"drawStateImageWithFrame:inView:") = Void, NSRect, NSView;
overload selector(static #"drawStatusBarBackgroundInRect:withHighlight:") = Void, NSRect, Bool;
overload selector(static #"drawStrikethroughForGlyphRange:strikethroughType:baselineOffset:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:") = Void, NSRange, Int, Float, NSRect, NSRange, NSPoint;
overload selector(static #"drawSwatchInRect:") = Void, NSRect;
overload selector(static #"drawTitle:withFrame:inView:") = NSRect, NSAttributedString, NSRect, NSView;
overload selector(static #"drawTitleOfColumn:inRect:") = Void, Int, NSRect;
overload selector(static #"drawTitleWithFrame:inView:") = Void, NSRect, NSView;
overload selector(static #"drawUnderlineForGlyphRange:underlineType:baselineOffset:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:") = Void, NSRange, Int, Float, NSRect, NSRange, NSPoint;
overload selector(static #"drawViewBackgroundInRect:") = Void, NSRect;
overload selector(static #"drawWellInside:") = Void, NSRect;
overload selector(static #"drawWithExpansionFrame:inView:") = Void, NSRect, NSView;
overload selector(static #"drawWithFrame:inView:") = Void, NSRect, NSView;
overload selector(static #"drawWithFrame:inView:characterIndex:") = Void, NSRect, NSView, UInt;
overload selector(static #"drawWithFrame:inView:characterIndex:layoutManager:") = Void, NSRect, NSView, UInt, NSLayoutManager;
overload selector(static #"drawWithRect:options:") = Void, NSRect, Int;
overload selector(static #"drawWithRect:options:attributes:") = Void, NSRect, Int, NSDictionary;
overload selector(static #"drawerDidClose:") = Void, NSNotification;
overload selector(static #"drawerDidOpen:") = Void, NSNotification;
overload selector(static #"drawerShouldClose:") = Bool, NSDrawer;
overload selector(static #"drawerShouldOpen:") = Bool, NSDrawer;
overload selector(static #"drawerWillClose:") = Void, NSNotification;
overload selector(static #"drawerWillOpen:") = Void, NSNotification;
overload selector(static #"drawerWillResizeContents:toSize:") = NSSize, NSDrawer, NSSize;
overload selector(static #"drawers") = NSArray;
overload selector(static #"drawingRectForBounds:") = NSRect, NSRect;
overload selector(static #"drawsBackground") = Bool;
overload selector(static #"drawsCellBackground") = Bool;
overload selector(static #"drawsGrid") = Bool;
overload selector(static #"drawsOutsideLineFragmentForGlyphAtIndex:") = Bool, UInt;
overload selector(static #"drawsVerticallyForCharacterAtIndex:") = Bool, UInt;
overload selector(static #"duplicateURLs:completionHandler:") = Void, NSArray, UnknownType;
overload selector(static #"duration") = Double;
overload selector(static #"earlierDate:") = NSDate, NSDate;
overload selector(static #"echosBullets") = Bool;
overload selector(static #"edge") = NSRectEdge;
overload selector(static #"edgeAntialiasingMask") = UInt;
overload selector(static #"editColumn:row:withEvent:select:") = Void, Int, Int, NSEvent, Bool;
overload selector(static #"editItemAtIndexPath:withEvent:select:") = Void, NSIndexPath, NSEvent, Bool;
overload selector(static #"editWithFrame:inView:editor:delegate:event:") = Void, NSRect, NSView, NSText, Id, NSEvent;
overload selector(static #"edited:range:changeInLength:") = Void, UInt, NSRange, Int;
overload selector(static #"editedColumn") = Int;
overload selector(static #"editedMask") = UInt;
overload selector(static #"editedRange") = NSRange;
overload selector(static #"editedRow") = Int;
overload selector(static #"editingStringForObjectValue:") = NSString, Id;
overload selector(static #"elementAtIndex:") = UInt, Int;
overload selector(static #"elementAtIndex:associatedPoints:") = UInt, Int, NSPointArray;
overload selector(static #"elementCount") = Int;
overload selector(static #"elementDeclarationForName:") = NSXMLDTDNode, NSString;
overload selector(static #"elementWithName:") = Id, NSString;
overload selector(static #"elementWithName:URI:") = Id, NSString, NSString;
overload selector(static #"elementWithName:children:attributes:") = Id, NSString, NSArray, NSArray;
overload selector(static #"elementWithName:stringValue:") = Id, NSString, NSString;
overload selector(static #"elementsForLocalName:URI:") = NSArray, NSString, NSString;
overload selector(static #"elementsForName:") = NSArray, NSString;
overload selector(static #"emptyImage") = CIImage;
overload selector(static #"enable") = Void;
overload selector(static #"enableCollectorForPointer:") = Void, RawPointer;
overload selector(static #"enableCursorRects") = Void;
overload selector(static #"enableFlushWindow") = Void;
overload selector(static #"enableKeyEquivalentForDefaultButtonCell") = Void;
overload selector(static #"enableMultipleThreads") = Void;
overload selector(static #"enableSuddenTermination") = Void;
overload selector(static #"enableUndoRegistration") = Void;
overload selector(static #"enableUpdates") = Void;
overload selector(static #"enabledTextCheckingTypes") = UInt64;
overload selector(static #"enclosingMenuItem") = NSMenuItem;
overload selector(static #"enclosingScrollView") = NSScrollView;
overload selector(static #"encodeArrayOfObjCType:count:at:") = Void, Pointer[CChar], UInt, RawPointer;
overload selector(static #"encodeBool:forKey:") = Void, Bool, NSString;
overload selector(static #"encodeBycopyObject:") = Void, Id;
overload selector(static #"encodeByrefObject:") = Void, Id;
overload selector(static #"encodeBytes:length:") = Void, RawPointer, UInt;
overload selector(static #"encodeBytes:length:forKey:") = Void, Pointer[CUChar], UInt, NSString;
overload selector(static #"encodeClassName:intoClassName:") = Void, NSString, NSString;
overload selector(static #"encodeConditionalObject:") = Void, Id;
overload selector(static #"encodeConditionalObject:forKey:") = Void, Id, NSString;
overload selector(static #"encodeDataObject:") = Void, NSData;
overload selector(static #"encodeDouble:forKey:") = Void, Double, NSString;
overload selector(static #"encodeFloat:forKey:") = Void, Float, NSString;
overload selector(static #"encodeInt32:forKey:") = Void, Int, NSString;
overload selector(static #"encodeInt64:forKey:") = Void, Int64, NSString;
overload selector(static #"encodeInt:forKey:") = Void, Int, NSString;
overload selector(static #"encodeInteger:forKey:") = Void, Int, NSString;
overload selector(static #"encodeNXObject:") = Void, Id;
overload selector(static #"encodeObject:") = Void, Id;
overload selector(static #"encodeObject:forKey:") = Void, Id, NSString;
overload selector(static #"encodePoint:") = Void, NSPoint;
overload selector(static #"encodePoint:forKey:") = Void, NSPoint, NSString;
overload selector(static #"encodePortObject:") = Void, NSPort;
overload selector(static #"encodePropertyList:") = Void, Id;
overload selector(static #"encodeRect:") = Void, NSRect;
overload selector(static #"encodeRect:forKey:") = Void, NSRect, NSString;
overload selector(static #"encodeRootObject:") = Void, Id;
overload selector(static #"encodeSize:") = Void, NSSize;
overload selector(static #"encodeSize:forKey:") = Void, NSSize, NSString;
overload selector(static #"encodeValueOfObjCType:at:") = Void, Pointer[CChar], RawPointer;
overload varargSelector(static #"encodeValuesOfObjCTypes:") = Void, Pointer[CChar];
overload selector(static #"encodeWithCoder:") = Void, NSCoder;
overload selector(static #"encodingScheme") = NSString;
overload selector(static #"endContentAccess") = Void;
overload selector(static #"endDocument") = Void;
overload selector(static #"endEditing") = Void;
overload selector(static #"endEditing:") = Void, NSText;
overload selector(static #"endEditingFor:") = Void, Id;
overload selector(static #"endGestureWithEvent:") = Void, NSEvent;
overload selector(static #"endGrouping") = Void;
overload selector(static #"endLineWithGlyphRange:") = Void, NSRange;
overload selector(static #"endLoadInBackground") = Void;
overload selector(static #"endModalSession:") = Void, NSModalSession;
overload selector(static #"endPage") = Void;
overload selector(static #"endParagraph") = Void;
overload selector(static #"endSheet:") = Void, NSWindow;
overload selector(static #"endSheet:returnCode:") = Void, NSWindow, Int;
overload selector(static #"endSpecifier") = NSScriptObjectSpecifier;
overload selector(static #"endSubelementIdentifier") = UInt;
overload selector(static #"endSubelementIndex") = Int;
overload selector(static #"endUndoGrouping") = Void;
overload selector(static #"enqueueNotification:postingStyle:") = Void, NSNotification, UInt;
overload selector(static #"enqueueNotification:postingStyle:coalesceMask:forModes:") = Void, NSNotification, UInt, UInt, NSArray;
overload selector(static #"ensureAttributesAreFixedInRange:") = Void, NSRange;
overload selector(static #"ensureGlyphsForCharacterRange:") = Void, NSRange;
overload selector(static #"ensureGlyphsForGlyphRange:") = Void, NSRange;
overload selector(static #"ensureLayoutForBoundingRect:inTextContainer:") = Void, NSRect, NSTextContainer;
overload selector(static #"ensureLayoutForCharacterRange:") = Void, NSRange;
overload selector(static #"ensureLayoutForGlyphRange:") = Void, NSRange;
overload selector(static #"ensureLayoutForTextContainer:") = Void, NSTextContainer;
overload selector(static #"enterExitEventWithType:location:modifierFlags:timestamp:windowNumber:context:eventNumber:trackingNumber:userData:") = NSEvent, UInt, NSPoint, UInt, Double, Int, NSGraphicsContext, Int, Int, RawPointer;
overload selector(static #"enterFullScreenMode:withOptions:") = Bool, NSScreen, NSDictionary;
overload selector(static #"entity") = NSEntityDescription;
overload selector(static #"entityDeclarationForName:") = NSXMLDTDNode, NSString;
overload selector(static #"entityName") = NSString;
overload selector(static #"entryType") = Int;
overload selector(static #"enumCodeValue") = CULong;
overload selector(static #"enumerateAttribute:inRange:options:usingBlock:") = Void, NSString, NSRange, UInt, UnknownType;
overload selector(static #"enumerateAttributesInRange:options:usingBlock:") = Void, NSRange, UInt, UnknownType;
overload selector(static #"enumerateIndexesInRange:options:usingBlock:") = Void, NSRange, UInt, UnknownType;
overload selector(static #"enumerateIndexesUsingBlock:") = Void, UnknownType;
overload selector(static #"enumerateIndexesWithOptions:usingBlock:") = Void, UInt, UnknownType;
overload selector(static #"enumerateKeysAndObjectsUsingBlock:") = Void, UnknownType;
overload selector(static #"enumerateKeysAndObjectsWithOptions:usingBlock:") = Void, UInt, UnknownType;
overload selector(static #"enumerateLinesUsingBlock:") = Void, UnknownType;
overload selector(static #"enumerateObjectsAtIndexes:options:usingBlock:") = Void, NSIndexSet, UInt, UnknownType;
overload selector(static #"enumerateObjectsUsingBlock:") = Void, UnknownType;
overload selector(static #"enumerateObjectsWithOptions:usingBlock:") = Void, UInt, UnknownType;
overload selector(static #"enumerateSubstringsInRange:options:usingBlock:") = Void, NSRange, UInt, UnknownType;
overload selector(static #"enumeratorAtPath:") = NSDirectoryEnumerator, NSString;
overload selector(static #"enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:") = NSDirectoryEnumerator, NSURL, NSArray, UInt, UnknownType;
overload selector(static #"environment") = NSDictionary;
overload selector(static #"era") = Int;
overload selector(static #"eraSymbols") = NSArray;
overload selector(static #"error") = NSError;
overload selector(static #"errorWithDomain:code:userInfo:") = Id, NSString, Int, NSDictionary;
overload selector(static #"evaluate") = Void;
overload selector(static #"evaluateWithObject:") = Bool, Id;
overload selector(static #"evaluateWithObject:substitutionVariables:") = Bool, Id, NSDictionary;
overload selector(static #"evaluatedArguments") = NSDictionary;
overload selector(static #"evaluatedReceivers") = Id;
overload selector(static #"evaluationErrorNumber") = Int;
overload selector(static #"evaluationErrorSpecifier") = NSScriptObjectSpecifier;
overload selector(static #"eventClass") = CULong;
overload selector(static #"eventID") = CULong;
overload selector(static #"eventNumber") = Int;
overload selector(static #"eventRef") = RawPointer;
overload selector(static #"eventWithCGEvent:") = NSEvent, CGEventRef;
overload selector(static #"eventWithEventRef:") = NSEvent, RawPointer;
overload selector(static #"evictsObjectsWithDiscardedContent") = Bool;
overload selector(static #"exceptionDuringOperation:error:leftOperand:rightOperand:") = NSDecimalNumber, SelectorHandle, UInt, NSDecimalNumber, NSDecimalNumber;
overload selector(static #"exceptionWithName:reason:userInfo:") = NSException, NSString, NSString, NSDictionary;
overload selector(static #"exchangeObjectAtIndex:withObjectAtIndex:") = Void, UInt, UInt;
overload selector(static #"excludedKeys") = NSArray;
overload selector(static #"executableArchitecture") = Int;
overload selector(static #"executableArchitectures") = NSArray;
overload selector(static #"executablePath") = NSString;
overload selector(static #"executableURL") = NSURL;
overload selector(static #"executeAndReturnError:") = NSAppleEventDescriptor, Pointer[NSDictionary];
overload selector(static #"executeAppleEvent:error:") = NSAppleEventDescriptor, NSAppleEventDescriptor, Pointer[NSDictionary];
overload selector(static #"executeCommand") = Id;
overload selector(static #"executionBlocks") = NSArray;
overload selector(static #"exit") = Void;
overload selector(static #"exitFullScreenModeWithOptions:") = Void, NSDictionary;
overload selector(static #"expandItem:") = Void, Id;
overload selector(static #"expandItem:expandChildren:") = Void, Id, Bool;
overload selector(static #"expansionFrameWithFrame:inView:") = NSRect, NSRect, NSView;
overload selector(static #"expectedContentLength") = Int64;
overload selector(static #"expectedResourceDataSize") = Int64;
overload selector(static #"expiresDate") = NSDate;
overload selector(static #"exponentSymbol") = NSString;
overload selector(static #"exposeBinding:") = Void, NSString;
overload selector(static #"exposedBindings") = NSArray;
overload selector(static #"expressionBlock") = UnknownType;
overload selector(static #"expressionForAggregate:") = NSExpression, NSArray;
overload selector(static #"expressionForBlock:arguments:") = NSExpression, UnknownType, NSArray;
overload selector(static #"expressionForConstantValue:") = NSExpression, Id;
overload selector(static #"expressionForEvaluatedObject") = NSExpression;
overload selector(static #"expressionForFunction:arguments:") = NSExpression, NSString, NSArray;
overload selector(static #"expressionForFunction:selectorName:arguments:") = NSExpression, NSExpression, NSString, NSArray;
overload selector(static #"expressionForIntersectSet:with:") = NSExpression, NSExpression, NSExpression;
overload selector(static #"expressionForKeyPath:") = NSExpression, NSString;
overload selector(static #"expressionForMinusSet:with:") = NSExpression, NSExpression, NSExpression;
overload selector(static #"expressionForSubquery:usingIteratorVariable:predicate:") = NSExpression, NSExpression, NSString, Id;
overload selector(static #"expressionForUnionSet:with:") = NSExpression, NSExpression, NSExpression;
overload selector(static #"expressionForVariable:") = NSExpression, NSString;
overload selector(static #"expressionType") = UInt;
overload selector(static #"expressionValueWithObject:context:") = Id, Id, NSMutableDictionary;
overload selector(static #"extendPowerOffBy:") = Int, Int;
overload selector(static #"extent") = CGRect;
overload selector(static #"extraLineFragmentRect") = NSRect;
overload selector(static #"extraLineFragmentTextContainer") = NSTextContainer;
overload selector(static #"extraLineFragmentUsedRect") = NSRect;
overload selector(static #"failureReason") = NSString;
overload selector(static #"failureResponse") = NSURLResponse;
overload selector(static #"familyName") = NSString;
overload selector(static #"fastestEncoding") = UInt;
overload selector(static #"fetch:") = Void, Id;
overload selector(static #"fetchPredicate") = NSPredicate;
overload selector(static #"fetchWithRequest:merge:error:") = Bool, NSFetchRequest, Bool, Pointer[NSError];
overload selector(static #"fieldEditor:forObject:") = NSText, Bool, Id;
overload selector(static #"fieldEditorForView:") = NSTextView, NSView;
overload selector(static #"fileAttributes") = NSDictionary;
overload selector(static #"fileAttributesAtPath:traverseLink:") = NSDictionary, NSString, Bool;
overload selector(static #"fileAttributesToWriteToFile:ofType:saveOperation:") = NSDictionary, NSString, NSString, UInt;
overload selector(static #"fileAttributesToWriteToURL:ofType:forSaveOperation:originalContentsURL:error:") = NSDictionary, NSURL, NSString, UInt, NSURL, Pointer[NSError];
overload selector(static #"fileCreationDate") = NSDate;
overload selector(static #"fileDescriptor") = Int;
overload selector(static #"fileExistsAtPath:") = Bool, NSString;
overload selector(static #"fileExistsAtPath:isDirectory:") = Bool, NSString, Pointer[Bool];
overload selector(static #"fileExtensionHidden") = Bool;
overload selector(static #"fileExtensionsFromType:") = NSArray, NSString;
overload selector(static #"fileGroupOwnerAccountID") = NSNumber;
overload selector(static #"fileGroupOwnerAccountName") = NSString;
overload selector(static #"fileHFSCreatorCode") = CULong;
overload selector(static #"fileHFSTypeCode") = CULong;
overload selector(static #"fileHandleForReading") = NSFileHandle;
overload selector(static #"fileHandleForReadingAtPath:") = Id, NSString;
overload selector(static #"fileHandleForReadingFromURL:error:") = Id, NSURL, Pointer[NSError];
overload selector(static #"fileHandleForUpdatingAtPath:") = Id, NSString;
overload selector(static #"fileHandleForUpdatingURL:error:") = Id, NSURL, Pointer[NSError];
overload selector(static #"fileHandleForWriting") = NSFileHandle;
overload selector(static #"fileHandleForWritingAtPath:") = Id, NSString;
overload selector(static #"fileHandleForWritingToURL:error:") = Id, NSURL, Pointer[NSError];
overload selector(static #"fileHandleWithNullDevice") = Id;
overload selector(static #"fileHandleWithStandardError") = Id;
overload selector(static #"fileHandleWithStandardInput") = Id;
overload selector(static #"fileHandleWithStandardOutput") = Id;
overload selector(static #"fileIsAppendOnly") = Bool;
overload selector(static #"fileIsImmutable") = Bool;
overload selector(static #"fileLabelColors") = NSArray;
overload selector(static #"fileLabels") = NSArray;
overload selector(static #"fileManager:shouldCopyItemAtPath:toPath:") = Bool, NSFileManager, NSString, NSString;
overload selector(static #"fileManager:shouldCopyItemAtURL:toURL:") = Bool, NSFileManager, NSURL, NSURL;
overload selector(static #"fileManager:shouldLinkItemAtPath:toPath:") = Bool, NSFileManager, NSString, NSString;
overload selector(static #"fileManager:shouldLinkItemAtURL:toURL:") = Bool, NSFileManager, NSURL, NSURL;
overload selector(static #"fileManager:shouldMoveItemAtPath:toPath:") = Bool, NSFileManager, NSString, NSString;
overload selector(static #"fileManager:shouldMoveItemAtURL:toURL:") = Bool, NSFileManager, NSURL, NSURL;
overload selector(static #"fileManager:shouldProceedAfterError:") = Bool, NSFileManager, NSDictionary;
overload selector(static #"fileManager:shouldProceedAfterError:copyingItemAtPath:toPath:") = Bool, NSFileManager, NSError, NSString, NSString;
overload selector(static #"fileManager:shouldProceedAfterError:copyingItemAtURL:toURL:") = Bool, NSFileManager, NSError, NSURL, NSURL;
overload selector(static #"fileManager:shouldProceedAfterError:linkingItemAtPath:toPath:") = Bool, NSFileManager, NSError, NSString, NSString;
overload selector(static #"fileManager:shouldProceedAfterError:linkingItemAtURL:toURL:") = Bool, NSFileManager, NSError, NSURL, NSURL;
overload selector(static #"fileManager:shouldProceedAfterError:movingItemAtPath:toPath:") = Bool, NSFileManager, NSError, NSString, NSString;
overload selector(static #"fileManager:shouldProceedAfterError:movingItemAtURL:toURL:") = Bool, NSFileManager, NSError, NSURL, NSURL;
overload selector(static #"fileManager:shouldProceedAfterError:removingItemAtPath:") = Bool, NSFileManager, NSError, NSString;
overload selector(static #"fileManager:shouldProceedAfterError:removingItemAtURL:") = Bool, NSFileManager, NSError, NSURL;
overload selector(static #"fileManager:shouldRemoveItemAtPath:") = Bool, NSFileManager, NSString;
overload selector(static #"fileManager:shouldRemoveItemAtURL:") = Bool, NSFileManager, NSURL;
overload selector(static #"fileManager:willProcessPath:") = Void, NSFileManager, NSString;
overload selector(static #"fileModificationDate") = NSDate;
overload selector(static #"fileName") = NSString;
overload selector(static #"fileNameExtensionForType:saveOperation:") = NSString, NSString, UInt;
overload selector(static #"fileNameExtensionWasHiddenInLastRunSavePanel") = Bool;
overload selector(static #"fileNamesFromRunningOpenPanel") = NSArray;
overload selector(static #"fileOwnerAccountID") = NSNumber;
overload selector(static #"fileOwnerAccountName") = NSString;
overload selector(static #"filePathURL") = NSURL;
overload selector(static #"filePosixPermissions") = UInt;
overload selector(static #"fileReferenceURL") = NSURL;
overload selector(static #"fileSize") = UInt64;
overload selector(static #"fileSystemAttributesAtPath:") = NSDictionary, NSString;
overload selector(static #"fileSystemChanged") = Bool;
overload selector(static #"fileSystemFileNumber") = UInt;
overload selector(static #"fileSystemNumber") = Int;
overload selector(static #"fileSystemRepresentation") = Pointer[CChar];
overload selector(static #"fileSystemRepresentationWithPath:") = Pointer[CChar], NSString;
overload selector(static #"fileType") = NSString;
overload selector(static #"fileTypeFromLastRunSavePanel") = NSString;
overload selector(static #"fileURL") = NSURL;
overload selector(static #"fileURLWithPath:") = Id, NSString;
overload selector(static #"fileURLWithPath:isDirectory:") = Id, NSString, Bool;
overload selector(static #"fileURLWithPathComponents:") = NSURL, NSArray;
overload selector(static #"fileWrapper") = NSFileWrapper;
overload selector(static #"fileWrapperFromRange:documentAttributes:error:") = NSFileWrapper, NSRange, NSDictionary, Pointer[NSError];
overload selector(static #"fileWrapperOfType:error:") = NSFileWrapper, NSString, Pointer[NSError];
overload selector(static #"fileWrapperRepresentationOfType:") = NSFileWrapper, NSString;
overload selector(static #"fileWrappers") = NSDictionary;
overload selector(static #"filename") = NSString;
overload selector(static #"filenameExtension:isValidForType:") = Bool, NSString, NSString;
overload selector(static #"filenames") = NSArray;
overload selector(static #"fill") = Void;
overload selector(static #"fillBackgroundRectArray:count:forCharacterRange:color:") = Void, NSRectArray, UInt, NSRange, NSColor;
overload selector(static #"fillColor") = NSColor;
overload selector(static #"fillMode") = NSString;
overload selector(static #"fillRect:") = Void, NSRect;
overload selector(static #"filterPredicate") = NSPredicate;
overload selector(static #"filterUsingPredicate:") = Void, NSPredicate;
overload selector(static #"filteredArrayUsingPredicate:") = NSArray, NSPredicate;
overload selector(static #"filteredSetUsingPredicate:") = NSSet, NSPredicate;
overload selector(static #"filters") = NSArray;
overload selector(static #"finalWritePrintInfo") = Void;
overload selector(static #"finalize") = Void;
overload selector(static #"findApplications") = Void;
overload selector(static #"findString:inBook:") = Void, NSString, NSString;
overload selector(static #"finishDecoding") = Void;
overload selector(static #"finishEncoding") = Void;
overload selector(static #"finishLaunching") = Void;
overload selector(static #"fire") = Void;
overload selector(static #"fireDate") = NSDate;
overload selector(static #"firstIndex") = UInt;
overload selector(static #"firstLineHeadIndent") = Float;
overload selector(static #"firstObjectCommonWithArray:") = Id, NSArray;
overload selector(static #"firstRectForCharacterRange:") = NSRect, NSRange;
overload selector(static #"firstRectForCharacterRange:actualRange:") = NSRect, NSRange, NSRangePointer;
overload selector(static #"firstResponder") = NSResponder;
overload selector(static #"firstTextView") = NSTextView;
overload selector(static #"firstUnlaidCharacterIndex") = UInt;
overload selector(static #"firstUnlaidGlyphIndex") = UInt;
overload selector(static #"firstVisibleColumn") = Int;
overload selector(static #"firstWeekday") = UInt;
overload selector(static #"fixAttachmentAttributeInRange:") = Void, NSRange;
overload selector(static #"fixAttributesInRange:") = Void, NSRange;
overload selector(static #"fixFontAttributeInRange:") = Void, NSRange;
overload selector(static #"fixParagraphStyleAttributeInRange:") = Void, NSRange;
overload selector(static #"fixesAttributesLazily") = Bool;
overload selector(static #"flagsChanged:") = Void, NSEvent;
overload selector(static #"flatness") = Float;
overload selector(static #"floatForKey:") = Float, NSString;
overload selector(static #"floatForKey:inTable:") = Float, NSString, NSString;
overload selector(static #"floatValue") = Float;
overload selector(static #"flushBuffer") = Void;
overload selector(static #"flushBufferedKeyEvents") = Void;
overload selector(static #"flushCachedData") = Void;
overload selector(static #"flushGraphics") = Void;
overload selector(static #"flushHostCache") = Void;
overload selector(static #"flushWindow") = Void;
overload selector(static #"flushWindowIfNeeded") = Void;
overload selector(static #"focusRingType") = UInt;
overload selector(static #"focusView") = NSView;
overload selector(static #"focusedColumn") = Int;
overload selector(static #"font") = NSFont;
overload selector(static #"fontAttributes") = NSDictionary;
overload selector(static #"fontAttributesInRange:") = NSDictionary, NSRange;
overload selector(static #"fontDescriptor") = NSFontDescriptor;
overload selector(static #"fontDescriptorByAddingAttributes:") = NSFontDescriptor, NSDictionary;
overload selector(static #"fontDescriptorWithFace:") = NSFontDescriptor, NSString;
overload selector(static #"fontDescriptorWithFamily:") = NSFontDescriptor, NSString;
overload selector(static #"fontDescriptorWithFontAttributes:") = NSFontDescriptor, NSDictionary;
overload selector(static #"fontDescriptorWithMatrix:") = NSFontDescriptor, NSAffineTransform;
overload selector(static #"fontDescriptorWithName:matrix:") = NSFontDescriptor, NSString, NSAffineTransform;
overload selector(static #"fontDescriptorWithName:size:") = NSFontDescriptor, NSString, Float;
overload selector(static #"fontDescriptorWithSize:") = NSFontDescriptor, Float;
overload selector(static #"fontDescriptorWithSymbolicTraits:") = NSFontDescriptor, UInt;
overload selector(static #"fontDescriptorsInCollection:") = NSArray, NSString;
overload selector(static #"fontManager:willIncludeFont:") = Bool, Id, NSString;
overload selector(static #"fontMenu:") = NSMenu, Bool;
overload selector(static #"fontName") = NSString;
overload selector(static #"fontNamed:hasTraits:") = Bool, NSString, UInt;
overload selector(static #"fontPanel:") = NSFontPanel, Bool;
overload selector(static #"fontWithDescriptor:size:") = NSFont, NSFontDescriptor, Float;
overload selector(static #"fontWithDescriptor:textTransform:") = NSFont, NSFontDescriptor, NSAffineTransform;
overload selector(static #"fontWithFamily:traits:weight:size:") = NSFont, NSString, UInt, Int, Float;
overload selector(static #"fontWithName:matrix:") = NSFont, NSString, Pointer[Float];
overload selector(static #"fontWithName:size:") = NSFont, NSString, Float;
overload selector(static #"forceTerminate") = Bool;
overload selector(static #"foregroundColor") = NSColor;
overload selector(static #"forgetWord:") = Void, NSString;
overload selector(static #"formIntersectionWithCharacterSet:") = Void, NSCharacterSet;
overload selector(static #"formUnionWithCharacterSet:") = Void, NSCharacterSet;
overload selector(static #"format") = NSString;
overload selector(static #"formatWidth") = UInt;
overload selector(static #"formatter") = Id;
overload selector(static #"formatterBehavior") = UInt;
overload selector(static #"formattingDictionary") = NSDictionary;
overload selector(static #"formattingStringsFilename") = NSString;
overload selector(static #"forwardInvocation:") = Void, NSInvocation;
overload selector(static #"forwardingTargetForSelector:") = Id, SelectorHandle;
overload selector(static #"fractionOfDistanceThroughGlyphForPoint:") = Float, NSPoint;
overload selector(static #"fractionOfDistanceThroughGlyphForPoint:inTextContainer:") = Float, NSPoint, NSTextContainer;
overload selector(static #"fragment") = NSString;
overload selector(static #"frame") = NSRect;
overload selector(static #"frameAutosaveName") = NSString;
overload selector(static #"frameCenterRotation") = Float;
overload selector(static #"frameForItemAtIndex:") = NSRect, UInt;
overload selector(static #"frameLength") = UInt;
overload selector(static #"frameOfCellAtColumn:row:") = NSRect, Int, Int;
overload selector(static #"frameOfColumn:") = NSRect, Int;
overload selector(static #"frameOfInsideOfColumn:") = NSRect, Int;
overload selector(static #"frameOfOutlineCellAtRow:") = NSRect, Int;
overload selector(static #"frameOfRow:inColumn:") = NSRect, Int, Int;
overload selector(static #"frameRate") = Float;
overload selector(static #"frameRectForContentRect:") = NSRect, NSRect;
overload selector(static #"frameRectForContentRect:styleMask:") = NSRect, NSRect, UInt;
overload selector(static #"frameRotation") = Float;
overload selector(static #"frameSizeForContentSize:hasHorizontalScroller:hasVerticalScroller:borderType:") = NSSize, NSSize, Bool, Bool, UInt;
overload selector(static #"fullPathForApplication:") = NSString, NSString;
overload selector(static #"function") = NSString;
overload selector(static #"gState") = Int;
overload selector(static #"generalPasteboard") = NSPasteboard;
overload selector(static #"generateGlyphsForGlyphStorage:desiredNumberOfCharacters:glyphIndex:characterIndex:") = Void, Id, UInt, Pointer[UInt], Pointer[UInt];
overload selector(static #"generatesCalendarDates") = Bool;
overload selector(static #"generatesDecimalNumbers") = Bool;
overload selector(static #"genericCMYKColorSpace") = NSColorSpace;
overload selector(static #"genericGamma22GrayColorSpace") = NSColorSpace;
overload selector(static #"genericGrayColorSpace") = NSColorSpace;
overload selector(static #"genericRGBColorSpace") = NSColorSpace;
overload selector(static #"getAdvancements:forGlyphs:count:") = Void, NSSizeArray, Pointer[UInt], UInt;
overload selector(static #"getAdvancements:forPackedGlyphs:length:") = Void, NSSizeArray, RawPointer, UInt;
overload selector(static #"getArgument:atIndex:") = Void, RawPointer, Int;
overload selector(static #"getArgumentTypeAtIndex:") = Pointer[CChar], UInt;
overload selector(static #"getBitmapDataPlanes:") = Void, Pointer[Pointer[CUChar]];
overload selector(static #"getBoundingRects:forGlyphs:count:") = Void, NSRectArray, Pointer[UInt], UInt;
overload selector(static #"getBuffer:length:") = Bool, Pointer[Pointer[CUChar]], Pointer[UInt];
overload selector(static #"getBytes:") = Void, RawPointer;
overload selector(static #"getBytes:length:") = Void, RawPointer, UInt;
overload selector(static #"getBytes:maxLength:usedLength:encoding:options:range:remainingRange:") = Bool, RawPointer, UInt, Pointer[UInt], UInt, UInt, NSRange, NSRangePointer;
overload selector(static #"getBytes:range:") = Void, RawPointer, NSRange;
overload selector(static #"getCFRunLoop") = CFRunLoopRef;
overload selector(static #"getCString:") = Void, Pointer[CChar];
overload selector(static #"getCString:maxLength:") = Void, Pointer[CChar], UInt;
overload selector(static #"getCString:maxLength:encoding:") = Bool, Pointer[CChar], UInt, UInt;
overload selector(static #"getCString:maxLength:range:remainingRange:") = Void, Pointer[CChar], UInt, NSRange, NSRangePointer;
overload selector(static #"getCharacters:") = Void, Pointer[UShort];
overload selector(static #"getCharacters:range:") = Void, Pointer[UShort], NSRange;
overload selector(static #"getColor:location:atIndex:") = Void, Pointer[NSColor], Pointer[Float], Int;
overload selector(static #"getComponents:") = Void, Pointer[Float];
overload selector(static #"getCompression:factor:") = Void, Pointer[UInt], Pointer[Float];
overload selector(static #"getCyan:magenta:yellow:black:alpha:") = Void, Pointer[Float], Pointer[Float], Pointer[Float], Pointer[Float], Pointer[Float];
overload selector(static #"getFileSystemInfoForPath:isRemovable:isWritable:isUnmountable:description:type:") = Bool, NSString, Pointer[Bool], Pointer[Bool], Pointer[Bool], Pointer[NSString], Pointer[NSString];
overload selector(static #"getFileSystemRepresentation:maxLength:") = Bool, Pointer[CChar], UInt;
overload selector(static #"getFirstUnlaidCharacterIndex:glyphIndex:") = Void, Pointer[UInt], Pointer[UInt];
overload selector(static #"getGlyphs:range:") = UInt, Pointer[UInt], NSRange;
overload selector(static #"getGlyphsInRange:glyphs:characterIndexes:glyphInscriptions:elasticBits:") = UInt, NSRange, Pointer[UInt], Pointer[UInt], Pointer[UInt], Pointer[Bool];
overload selector(static #"getGlyphsInRange:glyphs:characterIndexes:glyphInscriptions:elasticBits:bidiLevels:") = UInt, NSRange, Pointer[UInt], Pointer[UInt], Pointer[UInt], Pointer[Bool], Pointer[CUChar];
overload selector(static #"getHue:saturation:brightness:alpha:") = Void, Pointer[Float], Pointer[Float], Pointer[Float], Pointer[Float];
overload selector(static #"getIndexes:") = Void, Pointer[UInt];
overload selector(static #"getIndexes:maxCount:inIndexRange:") = UInt, Pointer[UInt], UInt, NSRangePointer;
overload selector(static #"getInfoForFile:application:type:") = Bool, NSString, Pointer[NSString], Pointer[NSString];
overload selector(static #"getInputStream:outputStream:") = Bool, Pointer[NSInputStream], Pointer[NSOutputStream];
overload selector(static #"getLineDash:count:phase:") = Void, Pointer[Float], Pointer[Int], Pointer[Float];
overload selector(static #"getLineFragmentInsertionPointsForCharacterAtIndex:alternatePositions:inDisplayOrder:positions:characterIndexes:") = UInt, UInt, Bool, Bool, Pointer[Float], Pointer[UInt];
overload selector(static #"getLineFragmentRect:usedRect:forParagraphSeparatorGlyphRange:atProposedOrigin:") = Void, NSRectPointer, NSRectPointer, NSRange, NSPoint;
overload selector(static #"getLineFragmentRect:usedRect:remainingRect:forStartingGlyphAtIndex:proposedRect:lineSpacing:paragraphSpacingBefore:paragraphSpacingAfter:") = Void, NSRectPointer, NSRectPointer, NSRectPointer, UInt, NSRect, Float, Float, Float;
overload selector(static #"getLineStart:end:contentsEnd:forRange:") = Void, Pointer[UInt], Pointer[UInt], Pointer[UInt], NSRange;
overload selector(static #"getNumberOfRows:columns:") = Void, Pointer[Int], Pointer[Int];
overload selector(static #"getObjectValue:forString:errorDescription:") = Bool, Pointer[Id], NSString, Pointer[NSString];
overload selector(static #"getObjectValue:forString:range:error:") = Bool, Pointer[Id], NSString, Pointer[NSRange], Pointer[NSError];
overload selector(static #"getObjects:") = Void, Pointer[Id];
overload selector(static #"getObjects:andKeys:") = Void, Pointer[Id], Pointer[Id];
overload selector(static #"getObjects:range:") = Void, Pointer[Id], NSRange;
overload selector(static #"getParagraphStart:end:contentsEnd:forRange:") = Void, Pointer[UInt], Pointer[UInt], Pointer[UInt], NSRange;
overload selector(static #"getPeriodicDelay:interval:") = Void, Pointer[Float], Pointer[Float];
overload selector(static #"getPixel:atX:y:") = Void, Pointer[UInt], Int, Int;
overload selector(static #"getRectsBeingDrawn:count:") = Void, Pointer[Pointer[NSRect]], Pointer[Int];
overload selector(static #"getRectsExposedDuringLiveResize:count:") = Void, Pointer[NSRect], Pointer[Int];
overload selector(static #"getRed:green:blue:alpha:") = Void, Pointer[Float], Pointer[Float], Pointer[Float], Pointer[Float];
overload selector(static #"getResourceValue:forKey:error:") = Bool, Pointer[Id], NSString, Pointer[NSError];
overload selector(static #"getReturnValue:") = Void, RawPointer;
overload selector(static #"getRow:column:forPoint:") = Bool, Pointer[Int], Pointer[Int], NSPoint;
overload selector(static #"getRow:column:ofCell:") = Bool, Pointer[Int], Pointer[Int], NSCell;
overload selector(static #"getStreamsToHost:port:inputStream:outputStream:") = Void, NSHost, Int, Pointer[NSInputStream], Pointer[NSOutputStream];
overload selector(static #"getTIFFCompressionTypes:count:") = Void, Pointer[Pointer[UInt]], Pointer[Int];
overload selector(static #"getValue:") = Void, RawPointer;
overload selector(static #"getValues:forAttribute:forVirtualScreen:") = Void, Pointer[Int], UInt, Int;
overload selector(static #"getValues:forParameter:") = Void, Pointer[Int], NSOpenGLContextParameter;
overload selector(static #"getWhite:alpha:") = Void, Pointer[Float], Pointer[Float];
overload selector(static #"globallyUniqueString") = NSString;
overload selector(static #"glyphAtIndex:") = UInt, UInt;
overload selector(static #"glyphAtIndex:isValidIndex:") = UInt, UInt, Pointer[Bool];
overload selector(static #"glyphGenerator") = NSGlyphGenerator;
overload selector(static #"glyphIndexForCharacterAtIndex:") = UInt, UInt;
overload selector(static #"glyphIndexForPoint:inTextContainer:") = UInt, NSPoint, NSTextContainer;
overload selector(static #"glyphIndexForPoint:inTextContainer:fractionOfDistanceThroughGlyph:") = UInt, NSPoint, NSTextContainer, Pointer[Float];
overload selector(static #"glyphInfoWithCharacterIdentifier:collection:baseString:") = NSGlyphInfo, UInt, UInt, NSString;
overload selector(static #"glyphInfoWithGlyph:forFont:baseString:") = NSGlyphInfo, UInt, NSFont, NSString;
overload selector(static #"glyphInfoWithGlyphName:forFont:baseString:") = NSGlyphInfo, NSString, NSFont, NSString;
overload selector(static #"glyphIsEncoded:") = Bool, UInt;
overload selector(static #"glyphName") = NSString;
overload selector(static #"glyphPacking") = UInt;
overload selector(static #"glyphRangeForBoundingRect:inTextContainer:") = NSRange, NSRect, NSTextContainer;
overload selector(static #"glyphRangeForBoundingRectWithoutAdditionalLayout:inTextContainer:") = NSRange, NSRect, NSTextContainer;
overload selector(static #"glyphRangeForCharacterRange:actualCharacterRange:") = NSRange, NSRange, NSRangePointer;
overload selector(static #"glyphRangeForTextContainer:") = NSRange, NSTextContainer;
overload selector(static #"glyphWithName:") = UInt, NSString;
overload selector(static #"gotoBeginning:") = Void, Id;
overload selector(static #"gotoEnd:") = Void, Id;
overload selector(static #"gotoPosterFrame:") = Void, Id;
overload selector(static #"gradientType") = UInt;
overload selector(static #"grammarCheckingResultWithRange:details:") = NSTextCheckingResult, NSRange, NSArray;
overload selector(static #"grammarDetails") = NSArray;
overload selector(static #"graphicsContext") = NSGraphicsContext;
overload selector(static #"graphicsContextWithAttributes:") = NSGraphicsContext, NSDictionary;
overload selector(static #"graphicsContextWithBitmapImageRep:") = NSGraphicsContext, NSBitmapImageRep;
overload selector(static #"graphicsContextWithGraphicsPort:flipped:") = NSGraphicsContext, RawPointer, Bool;
overload selector(static #"graphicsContextWithWindow:") = NSGraphicsContext, NSWindow;
overload selector(static #"graphicsPort") = RawPointer;
overload selector(static #"grayColor") = NSColor;
overload selector(static #"green") = Float;
overload selector(static #"greenColor") = NSColor;
overload selector(static #"greenComponent") = Float;
overload selector(static #"gregorianStartDate") = NSDate;
overload selector(static #"gridColor") = NSColor;
overload selector(static #"gridStyleMask") = UInt;
overload selector(static #"groupedResults") = NSArray;
overload selector(static #"groupingAttributes") = NSArray;
overload selector(static #"groupingLevel") = Int;
overload selector(static #"groupingSeparator") = NSString;
overload selector(static #"groupingSize") = UInt;
overload selector(static #"groupsByEvent") = Bool;
overload selector(static #"guessesForWord:") = NSArray, NSString;
overload selector(static #"guessesForWordRange:inString:language:inSpellDocumentWithTag:") = NSArray, NSRange, NSString, NSString, Int;
overload selector(static #"handleCloseScriptCommand:") = Id, NSCloseCommand;
overload selector(static #"handleEvent:") = Bool, NSEvent;
overload varargSelector(static #"handleFailureInFunction:file:lineNumber:description:") = Void, NSString, NSString, Int, NSString;
overload varargSelector(static #"handleFailureInMethod:object:file:lineNumber:description:") = Void, SelectorHandle, Id, NSString, Int, NSString;
overload selector(static #"handleMachMessage:") = Void, RawPointer;
overload selector(static #"handleMouseEvent:") = Bool, NSEvent;
overload selector(static #"handlePortMessage:") = Void, NSPortMessage;
overload selector(static #"handlePrintScriptCommand:") = Id, NSScriptCommand;
overload selector(static #"handleQueryWithUnboundKey:") = Id, NSString;
overload selector(static #"handleSaveScriptCommand:") = Id, NSScriptCommand;
overload selector(static #"handleTakeValue:forUnboundKey:") = Void, Id, NSString;
overload selector(static #"handleTextCheckingResults:forRange:types:options:orthography:wordCount:") = Void, NSArray, NSRange, UInt64, NSDictionary, NSOrthography, Int;
overload selector(static #"hasAlpha") = Bool;
overload selector(static #"hasBytesAvailable") = Bool;
overload selector(static #"hasCloseBox") = Bool;
overload selector(static #"hasDynamicDepthLimit") = Bool;
overload selector(static #"hasEditedDocuments") = Bool;
overload selector(static #"hasHorizontalRuler") = Bool;
overload selector(static #"hasHorizontalScroller") = Bool;
overload selector(static #"hasLearnedWord:") = Bool, NSString;
overload selector(static #"hasMarkedText") = Bool;
overload selector(static #"hasMemberInPlane:") = Bool, CUChar;
overload selector(static #"hasNonContiguousLayout") = Bool;
overload selector(static #"hasOrderedToManyRelationshipForKey:") = Bool, NSString;
overload selector(static #"hasPassword") = Bool;
overload selector(static #"hasPrefix:") = Bool, NSString;
overload selector(static #"hasPropertyForKey:") = Bool, NSString;
overload selector(static #"hasReadablePropertyForKey:") = Bool, NSString;
overload selector(static #"hasShadow") = Bool;
overload selector(static #"hasSpaceAvailable") = Bool;
overload selector(static #"hasSubmenu") = Bool;
overload selector(static #"hasSuffix:") = Bool, NSString;
overload selector(static #"hasThousandSeparators") = Bool;
overload selector(static #"hasTitleBar") = Bool;
overload selector(static #"hasUnappliedChanges") = Bool;
overload selector(static #"hasUnautosavedChanges") = Bool;
overload selector(static #"hasUndoManager") = Bool;
overload selector(static #"hasValidObjectValue") = Bool;
overload selector(static #"hasVerticalRuler") = Bool;
overload selector(static #"hasVerticalScroller") = Bool;
overload selector(static #"hasWritablePropertyForKey:") = Bool, NSString;
overload selector(static #"hash") = UInt;
overload selector(static #"hashFunction") = CCodePointer[(RawPointer,CCodePointer[(RawPointer),(UInt)]),(UInt)];
overload selector(static #"hashTableWithOptions:") = Id, UInt;
overload selector(static #"hashTableWithWeakObjects") = Id;
overload selector(static #"headIndent") = Float;
overload selector(static #"headerCell") = Id;
overload selector(static #"headerColor") = NSColor;
overload selector(static #"headerLevel") = Int;
overload selector(static #"headerRectOfColumn:") = NSRect, Int;
overload selector(static #"headerTextColor") = NSColor;
overload selector(static #"headerToolTip") = NSString;
overload selector(static #"headerView") = NSTableHeaderView;
overload selector(static #"heightAdjustLimit") = Float;
overload selector(static #"heightTracksTextView") = Bool;
overload selector(static #"helpAnchor") = NSString;
overload selector(static #"helpMenu") = NSMenu;
overload selector(static #"helpRequested:") = Void, NSEvent;
overload selector(static #"hide") = Bool;
overload selector(static #"hide:") = Void, Id;
overload selector(static #"hideOtherApplications") = Void;
overload selector(static #"hideOtherApplications:") = Void, Id;
overload selector(static #"hidesEmptyCells") = Bool;
overload selector(static #"hidesOnDeactivate") = Bool;
overload selector(static #"highlight:") = Void, Bool;
overload selector(static #"highlight:withFrame:inView:") = Void, Bool, NSRect, NSView;
overload selector(static #"highlightCell:atRow:column:") = Void, Bool, Int, Int;
overload selector(static #"highlightColor") = NSColor;
overload selector(static #"highlightColorInView:") = NSColor, NSView;
overload selector(static #"highlightColorWithFrame:inView:") = NSColor, NSRect, NSView;
overload selector(static #"highlightMode") = Bool;
overload selector(static #"highlightSelectionInClipRect:") = Void, NSRect;
overload selector(static #"highlightWithLevel:") = NSColor, Float;
overload selector(static #"highlightedBranchImage") = NSImage;
overload selector(static #"highlightedItem") = NSMenuItem;
overload selector(static #"highlightedItemIndex") = Int;
overload selector(static #"highlightedTableColumn") = NSTableColumn;
overload selector(static #"highlightsBy") = Int;
overload selector(static #"hitPart") = UInt;
overload selector(static #"hitTest:") = Id, NSPoint;
overload selector(static #"hitTestForEvent:inRect:ofView:") = UInt, NSEvent, NSRect, NSView;
overload selector(static #"hitTestRect:withImageDestinationRect:context:hints:flipped:") = Bool, NSRect, NSRect, NSGraphicsContext, NSDictionary, Bool;
overload selector(static #"horizontalEdgePadding") = Float;
overload selector(static #"horizontalLineScroll") = Float;
overload selector(static #"horizontalPageScroll") = Float;
overload selector(static #"horizontalPagination") = UInt;
overload selector(static #"horizontalRulerView") = NSRulerView;
overload selector(static #"horizontalScroller") = NSScroller;
overload selector(static #"host") = NSString;
overload selector(static #"hostName") = NSString;
overload selector(static #"hostWithAddress:") = NSHost, NSString;
overload selector(static #"hostWithName:") = NSHost, NSString;
overload selector(static #"hotSpot") = NSPoint;
overload selector(static #"hour") = Int;
overload selector(static #"hourOfDay") = Int;
overload selector(static #"hueComponent") = Float;
overload selector(static #"hyphenCharacterForGlyphAtIndex:") = CULong, UInt;
overload selector(static #"hyphenationFactor") = Float;
overload selector(static #"hyphenationFactorForGlyphAtIndex:") = Float, UInt;
overload selector(static #"icon") = NSImage;
overload selector(static #"iconForFile:") = NSImage, NSString;
overload selector(static #"iconForFileType:") = NSImage, NSString;
overload selector(static #"iconForFiles:") = NSImage, NSArray;
overload selector(static #"identifier") = Id;
overload selector(static #"identity") = SecIdentityRef;
overload selector(static #"ignoreModifierKeysWhileDragging") = Bool;
overload selector(static #"ignoreSpelling:") = Void, Id;
overload selector(static #"ignoreWord:inSpellDocumentWithTag:") = Void, NSString, Int;
overload selector(static #"ignoredWordsInSpellDocumentWithTag:") = NSArray, Int;
overload selector(static #"ignoresAlpha") = Bool;
overload selector(static #"ignoresMouseEvents") = Bool;
overload selector(static #"ignoresMultiClick") = Bool;
overload selector(static #"illegalCharacterSet") = Id;
overload selector(static #"image") = NSImage;
overload selector(static #"image:didLoadPartOfRepresentation:withValidRows:") = Void, NSImage, NSImageRep, Int;
overload selector(static #"image:didLoadRepresentation:withStatus:") = Void, NSImage, NSImageRep, UInt;
overload selector(static #"image:didLoadRepresentationHeader:") = Void, NSImage, NSImageRep;
overload selector(static #"image:willLoadRepresentation:") = Void, NSImage, NSImageRep;
overload selector(static #"imageAlignment") = UInt;
overload selector(static #"imageAndTitleOffset") = Float;
overload selector(static #"imageAndTitleWidth") = Float;
overload selector(static #"imageByApplyingTransform:") = CIImage, CGAffineTransform;
overload selector(static #"imageByCroppingToRect:") = CIImage, CGRect;
overload selector(static #"imageDidNotDraw:inRect:") = NSImage, Id, NSRect;
overload selector(static #"imageDimsWhenDisabled") = Bool;
overload selector(static #"imageFileTypes") = NSArray;
overload selector(static #"imageForSegment:") = NSImage, Int;
overload selector(static #"imageFrameStyle") = UInt;
overload selector(static #"imageInterpolation") = UInt;
overload selector(static #"imageNamed:") = Id, NSString;
overload selector(static #"imageOrigin") = NSPoint;
overload selector(static #"imagePasteboardTypes") = NSArray;
overload selector(static #"imagePosition") = UInt;
overload selector(static #"imageRectForBounds:") = NSRect, NSRect;
overload selector(static #"imageRectForPaper:") = NSRect, NSString;
overload selector(static #"imageRectInRuler") = NSRect;
overload selector(static #"imageRepClassForData:") = Id, NSData;
overload selector(static #"imageRepClassForFileType:") = Id, NSString;
overload selector(static #"imageRepClassForPasteboardType:") = Id, NSString;
overload selector(static #"imageRepClassForType:") = Id, NSString;
overload selector(static #"imageRepWithCIImage:") = Id, CIImage;
overload selector(static #"imageRepWithContentsOfFile:") = Id, NSString;
overload selector(static #"imageRepWithContentsOfURL:") = Id, NSURL;
overload selector(static #"imageRepWithData:") = Id, NSData;
overload selector(static #"imageRepWithPasteboard:") = Id, NSPasteboard;
overload selector(static #"imageRepsWithContentsOfFile:") = NSArray, NSString;
overload selector(static #"imageRepsWithContentsOfURL:") = NSArray, NSURL;
overload selector(static #"imageRepsWithData:") = NSArray, NSData;
overload selector(static #"imageRepsWithPasteboard:") = NSArray, NSPasteboard;
overload selector(static #"imageScaling") = UInt;
overload selector(static #"imageScalingForSegment:") = UInt, Int;
overload selector(static #"imageTypes") = NSArray;
overload selector(static #"imageUnfilteredFileTypes") = NSArray;
overload selector(static #"imageUnfilteredPasteboardTypes") = NSArray;
overload selector(static #"imageUnfilteredTypes") = NSArray;
overload selector(static #"imageWidth") = Float;
overload selector(static #"imageWithBitmapData:bytesPerRow:size:format:colorSpace:") = CIImage, NSData, CULong, CGSize, Int, CGColorSpaceRef;
overload selector(static #"imageWithCGImage:") = CIImage, CGImageRef;
overload selector(static #"imageWithCGImage:options:") = CIImage, CGImageRef, NSDictionary;
overload selector(static #"imageWithCGLayer:") = CIImage, CGLayerRef;
overload selector(static #"imageWithCGLayer:options:") = CIImage, CGLayerRef, NSDictionary;
overload selector(static #"imageWithCVImageBuffer:") = CIImage, CVImageBufferRef;
overload selector(static #"imageWithCVImageBuffer:options:") = CIImage, CVImageBufferRef, NSDictionary;
overload selector(static #"imageWithColor:") = CIImage, CIColor;
overload selector(static #"imageWithContentsOfURL:") = CIImage, NSURL;
overload selector(static #"imageWithContentsOfURL:options:") = CIImage, NSURL, NSDictionary;
overload selector(static #"imageWithData:") = CIImage, NSData;
overload selector(static #"imageWithData:options:") = CIImage, NSData, NSDictionary;
overload selector(static #"imageWithIOSurface:") = CIImage, IOSurfaceRef;
overload selector(static #"imageWithIOSurface:options:") = CIImage, IOSurfaceRef, NSDictionary;
overload selector(static #"imageWithTexture:size:flipped:colorSpace:") = CIImage, UInt, CGSize, Bool, CGColorSpaceRef;
overload selector(static #"imageablePageBounds") = NSRect;
overload selector(static #"implementationClassName") = NSString;
overload selector(static #"importsGraphics") = Bool;
overload selector(static #"inLiveResize") = Bool;
overload selector(static #"includedKeys") = NSArray;
overload selector(static #"increaseLengthBy:") = Void, UInt;
overload selector(static #"increment") = Double;
overload selector(static #"incrementBy:") = Void, Double;
overload selector(static #"incrementalLoadFromData:complete:") = Int, NSData, Bool;
overload selector(static #"indent:") = Void, Id;
overload selector(static #"indentationLevel") = Int;
overload selector(static #"indentationMarkerFollowsCell") = Bool;
overload selector(static #"indentationPerLevel") = Float;
overload selector(static #"independentConversationQueueing") = Bool;
overload selector(static #"index") = UInt;
overload selector(static #"indexAtPosition:") = UInt, UInt;
overload selector(static #"indexGreaterThanIndex:") = UInt, UInt;
overload selector(static #"indexGreaterThanOrEqualToIndex:") = UInt, UInt;
overload selector(static #"indexInRange:options:passingTest:") = UInt, NSRange, UInt, UnknownType;
overload selector(static #"indexLessThanIndex:") = UInt, UInt;
overload selector(static #"indexLessThanOrEqualToIndex:") = UInt, UInt;
overload selector(static #"indexOfCellWithTag:") = Int, Int;
overload selector(static #"indexOfItem:") = Int, NSMenuItem;
overload selector(static #"indexOfItemAtPoint:") = Int, NSPoint;
overload selector(static #"indexOfItemWithObjectValue:") = Int, Id;
overload selector(static #"indexOfItemWithRepresentedObject:") = Int, Id;
overload selector(static #"indexOfItemWithSubmenu:") = Int, NSMenu;
overload selector(static #"indexOfItemWithTag:") = Int, Int;
overload selector(static #"indexOfItemWithTarget:andAction:") = Int, Id, SelectorHandle;
overload selector(static #"indexOfItemWithTitle:") = Int, NSString;
overload selector(static #"indexOfObject:") = UInt, Id;
overload selector(static #"indexOfObject:inRange:") = UInt, Id, NSRange;
overload selector(static #"indexOfObject:inSortedRange:options:usingComparator:") = UInt, Id, NSRange, UInt, NSComparator;
overload selector(static #"indexOfObjectAtIndexes:options:passingTest:") = UInt, NSIndexSet, UInt, UnknownType;
overload selector(static #"indexOfObjectIdenticalTo:") = UInt, Id;
overload selector(static #"indexOfObjectIdenticalTo:inRange:") = UInt, Id, NSRange;
overload selector(static #"indexOfObjectPassingTest:") = UInt, UnknownType;
overload selector(static #"indexOfObjectWithOptions:passingTest:") = UInt, UInt, UnknownType;
overload selector(static #"indexOfPasteboardItem:") = UInt, NSPasteboardItem;
overload selector(static #"indexOfResult:") = UInt, Id;
overload selector(static #"indexOfSelectedItem") = Int;
overload selector(static #"indexOfTabViewItem:") = Int, NSTabViewItem;
overload selector(static #"indexOfTabViewItemWithIdentifier:") = Int, Id;
overload selector(static #"indexOfTickMarkAtPoint:") = Int, NSPoint;
overload selector(static #"indexPassingTest:") = UInt, UnknownType;
overload selector(static #"indexPath") = NSIndexPath;
overload selector(static #"indexPathByAddingIndex:") = NSIndexPath, UInt;
overload selector(static #"indexPathByRemovingLastIndex") = NSIndexPath;
overload selector(static #"indexPathForColumn:") = NSIndexPath, Int;
overload selector(static #"indexPathWithIndex:") = Id, UInt;
overload selector(static #"indexPathWithIndexes:length:") = Id, Pointer[UInt], UInt;
overload selector(static #"indexSet") = Id;
overload selector(static #"indexSetWithIndex:") = Id, UInt;
overload selector(static #"indexSetWithIndexesInRange:") = Id, NSRange;
overload selector(static #"indexWithOptions:passingTest:") = UInt, UInt, UnknownType;
overload selector(static #"indexesInRange:options:passingTest:") = NSIndexSet, NSRange, UInt, UnknownType;
overload selector(static #"indexesOfObjectsAtIndexes:options:passingTest:") = NSIndexSet, NSIndexSet, UInt, UnknownType;
overload selector(static #"indexesOfObjectsPassingTest:") = NSIndexSet, UnknownType;
overload selector(static #"indexesOfObjectsWithOptions:passingTest:") = NSIndexSet, UInt, UnknownType;
overload selector(static #"indexesPassingTest:") = NSIndexSet, UnknownType;
overload selector(static #"indexesWithOptions:passingTest:") = NSIndexSet, UInt, UnknownType;
overload selector(static #"indicatorImageInTableColumn:") = NSImage, NSTableColumn;
overload selector(static #"indicesOfObjectsByEvaluatingObjectSpecifier:") = NSArray, NSScriptObjectSpecifier;
overload selector(static #"indicesOfObjectsByEvaluatingWithContainer:count:") = Pointer[Int], Id, Pointer[Int];
overload selector(static #"infoDictionary") = NSDictionary;
overload selector(static #"infoForBinding:") = NSDictionary, NSString;
overload selector(static #"informativeText") = NSString;
overload selector(static #"init") = Id;
overload selector(static #"initAndTestWithTests:") = Id, NSArray;
overload selector(static #"initAsTearOff") = Id;
overload selector(static #"initByReferencingFile:") = Id, NSString;
overload selector(static #"initByReferencingURL:") = Id, NSURL;
overload selector(static #"initByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:") = Id, NSData, UInt, NSURL, Pointer[Bool], Pointer[NSError];
overload selector(static #"initDirectoryWithFileWrappers:") = Id, NSDictionary;
overload selector(static #"initFileURLWithPath:") = Id, NSString;
overload selector(static #"initFileURLWithPath:isDirectory:") = Id, NSString, Bool;
overload selector(static #"initForIncrementalLoad") = Id;
overload selector(static #"initForReadingWithData:") = Id, NSData;
overload selector(static #"initForURL:withContentsOfURL:ofType:error:") = Id, NSURL, NSURL, NSString, Pointer[NSError];
overload selector(static #"initForWritingWithMutableData:") = Id, NSMutableData;
overload selector(static #"initImageCell:") = Id, NSImage;
overload selector(static #"initListDescriptor") = Id;
overload selector(static #"initNotTestWithTest:") = Id, NSScriptWhoseTest;
overload selector(static #"initOrTestWithTests:") = Id, NSArray;
overload selector(static #"initRecordDescriptor") = Id;
overload selector(static #"initRegularFileWithContents:") = Id, NSData;
overload selector(static #"initRemoteWithProtocolFamily:socketType:protocol:address:") = Id, Int, Int, Int, NSData;
overload selector(static #"initRemoteWithTCPPort:host:") = Id, UShort, NSString;
overload selector(static #"initSymbolicLinkWithDestination:") = Id, NSString;
overload selector(static #"initSymbolicLinkWithDestinationURL:") = Id, NSURL;
overload selector(static #"initTextCell:") = Id, NSString;
overload selector(static #"initTextCell:pullsDown:") = Id, NSString, Bool;
overload selector(static #"initToBuffer:capacity:") = Id, Pointer[CUChar], UInt;
overload selector(static #"initToFileAtPath:append:") = Id, NSString, Bool;
overload selector(static #"initToMemory") = Id;
overload selector(static #"initWithAEDescNoCopy:") = Id, Pointer[AEDesc];
overload selector(static #"initWithArray:") = Id, NSArray;
overload selector(static #"initWithArray:copyItems:") = Id, NSArray, Bool;
overload selector(static #"initWithAttributedString:") = Id, NSAttributedString;
overload selector(static #"initWithAttributes:") = Id, Pointer[UInt];
overload selector(static #"initWithAuthenticationChallenge:sender:") = Id, NSURLAuthenticationChallenge, Id;
overload selector(static #"initWithBitmapData:bytesPerRow:size:format:colorSpace:") = Id, NSData, CULong, CGSize, Int, CGColorSpaceRef;
overload selector(static #"initWithBitmapDataPlanes:pixelsWide:pixelsHigh:bitsPerSample:samplesPerPixel:hasAlpha:isPlanar:colorSpaceName:bitmapFormat:bytesPerRow:bitsPerPixel:") = Id, Pointer[Pointer[CUChar]], Int, Int, Int, Int, Bool, Bool, NSString, UInt, Int, Int;
overload selector(static #"initWithBitmapDataPlanes:pixelsWide:pixelsHigh:bitsPerSample:samplesPerPixel:hasAlpha:isPlanar:colorSpaceName:bytesPerRow:bitsPerPixel:") = Id, Pointer[Pointer[CUChar]], Int, Int, Int, Int, Bool, Bool, NSString, Int, Int;
overload selector(static #"initWithBitmapImageRep:") = Id, NSBitmapImageRep;
overload selector(static #"initWithBool:") = Id, Bool;
overload selector(static #"initWithBytes:length:") = Id, RawPointer, UInt;
overload selector(static #"initWithBytes:length:encoding:") = Id, RawPointer, UInt, UInt;
overload selector(static #"initWithBytes:objCType:") = Id, RawPointer, Pointer[CChar];
overload selector(static #"initWithBytesNoCopy:length:") = Id, RawPointer, UInt;
overload selector(static #"initWithBytesNoCopy:length:encoding:freeWhenDone:") = Id, RawPointer, UInt, UInt, Bool;
overload selector(static #"initWithBytesNoCopy:length:freeWhenDone:") = Id, RawPointer, UInt, Bool;
overload selector(static #"initWithCGColor:") = Id, CGColorRef;
overload selector(static #"initWithCGColorSpace:") = Id, CGColorSpaceRef;
overload selector(static #"initWithCGImage:") = Id, CGImageRef;
overload selector(static #"initWithCGImage:options:") = Id, CGImageRef, NSDictionary;
overload selector(static #"initWithCGImage:size:") = Id, CGImageRef, NSSize;
overload selector(static #"initWithCGLContextObj:") = Id, RawPointer;
overload selector(static #"initWithCGLPBufferObj:") = Id, RawPointer;
overload selector(static #"initWithCGLPixelFormatObj:") = Id, RawPointer;
overload selector(static #"initWithCGLayer:") = Id, CGLayerRef;
overload selector(static #"initWithCGLayer:options:") = Id, CGLayerRef, NSDictionary;
overload selector(static #"initWithCIImage:") = Id, CIImage;
overload selector(static #"initWithCString:") = Id, Pointer[CChar];
overload selector(static #"initWithCString:encoding:") = Id, Pointer[CChar], UInt;
overload selector(static #"initWithCString:length:") = Id, Pointer[CChar], UInt;
overload selector(static #"initWithCStringNoCopy:length:freeWhenDone:") = Id, Pointer[CChar], UInt, Bool;
overload selector(static #"initWithCVImageBuffer:") = Id, CVImageBufferRef;
overload selector(static #"initWithCVImageBuffer:options:") = Id, CVImageBufferRef, NSDictionary;
overload selector(static #"initWithCalendarIdentifier:") = Id, NSString;
overload selector(static #"initWithCapacity:") = Id, UInt;
overload selector(static #"initWithChar:") = Id, CChar;
overload selector(static #"initWithCharacters:length:") = Id, Pointer[UShort], UInt;
overload selector(static #"initWithCharactersNoCopy:length:freeWhenDone:") = Id, Pointer[UShort], UInt, Bool;
overload selector(static #"initWithClient:") = Id, Id;
overload selector(static #"initWithCoder:") = Id, NSCoder;
overload selector(static #"initWithColor:") = Id, NSColor;
overload selector(static #"initWithColorSyncProfile:") = Id, RawPointer;
overload selector(static #"initWithColors:") = Id, NSArray;
overload selector(static #"initWithColors:atLocations:colorSpace:") = Id, NSArray, Pointer[Float], NSColorSpace;
overload varargSelector(static #"initWithColorsAndLocations:") = Id, NSColor;
overload selector(static #"initWithCommandDescription:") = Id, NSScriptCommandDescription;
overload selector(static #"initWithCompoundTypes:") = Id, NSArray;
overload selector(static #"initWithCondition:") = Id, Int;
overload selector(static #"initWithContainerClassDescription:containerSpecifier:key:") = Id, NSScriptClassDescription, NSScriptObjectSpecifier, NSString;
overload selector(static #"initWithContainerClassDescription:containerSpecifier:key:index:") = Id, NSScriptClassDescription, NSScriptObjectSpecifier, NSString, Int;
overload selector(static #"initWithContainerClassDescription:containerSpecifier:key:name:") = Id, NSScriptClassDescription, NSScriptObjectSpecifier, NSString, NSString;
overload selector(static #"initWithContainerClassDescription:containerSpecifier:key:relativePosition:baseSpecifier:") = Id, NSScriptClassDescription, NSScriptObjectSpecifier, NSString, UInt, NSScriptObjectSpecifier;
overload selector(static #"initWithContainerClassDescription:containerSpecifier:key:startSpecifier:endSpecifier:") = Id, NSScriptClassDescription, NSScriptObjectSpecifier, NSString, NSScriptObjectSpecifier, NSScriptObjectSpecifier;
overload selector(static #"initWithContainerClassDescription:containerSpecifier:key:test:") = Id, NSScriptClassDescription, NSScriptObjectSpecifier, NSString, NSScriptWhoseTest;
overload selector(static #"initWithContainerClassDescription:containerSpecifier:key:uniqueID:") = Id, NSScriptClassDescription, NSScriptObjectSpecifier, NSString, Id;
overload selector(static #"initWithContainerSize:") = Id, NSSize;
overload selector(static #"initWithContainerSpecifier:key:") = Id, NSScriptObjectSpecifier, NSString;
overload selector(static #"initWithContent:") = Id, Id;
overload selector(static #"initWithContentRect:styleMask:backing:defer:") = Id, NSRect, UInt, UInt, Bool;
overload selector(static #"initWithContentRect:styleMask:backing:defer:screen:") = Id, NSRect, UInt, UInt, Bool, NSScreen;
overload selector(static #"initWithContentSize:preferredEdge:") = Id, NSSize, NSRectEdge;
overload selector(static #"initWithContentsOfFile:") = Id, NSString;
overload selector(static #"initWithContentsOfFile:byReference:") = Id, NSString, Bool;
overload selector(static #"initWithContentsOfFile:encoding:error:") = Id, NSString, UInt, Pointer[NSError];
overload selector(static #"initWithContentsOfFile:ofType:") = Id, NSString, NSString;
overload selector(static #"initWithContentsOfFile:options:error:") = Id, NSString, UInt, Pointer[NSError];
overload selector(static #"initWithContentsOfFile:usedEncoding:error:") = Id, NSString, Pointer[UInt], Pointer[NSError];
overload selector(static #"initWithContentsOfMappedFile:") = Id, NSString;
overload selector(static #"initWithContentsOfURL:") = Id, NSURL;
overload selector(static #"initWithContentsOfURL:byReference:") = Id, NSURL, Bool;
overload selector(static #"initWithContentsOfURL:encoding:error:") = Id, NSURL, UInt, Pointer[NSError];
overload selector(static #"initWithContentsOfURL:error:") = Id, NSURL, Pointer[NSDictionary];
overload selector(static #"initWithContentsOfURL:ofType:") = Id, NSURL, NSString;
overload selector(static #"initWithContentsOfURL:ofType:error:") = Id, NSURL, NSString, Pointer[NSError];
overload selector(static #"initWithContentsOfURL:options:") = Id, NSURL, NSDictionary;
overload selector(static #"initWithContentsOfURL:options:error:") = Id, NSURL, UInt, Pointer[NSError];
overload selector(static #"initWithContentsOfURL:usedEncoding:error:") = Id, NSURL, Pointer[UInt], Pointer[NSError];
overload selector(static #"initWithData:") = Id, NSData;
overload selector(static #"initWithData:encoding:") = Id, NSData, UInt;
overload selector(static #"initWithData:options:") = Id, NSData, NSDictionary;
overload selector(static #"initWithData:options:documentAttributes:error:") = Id, NSData, NSDictionary, Pointer[NSDictionary], Pointer[NSError];
overload selector(static #"initWithData:options:error:") = Id, NSData, UInt, Pointer[NSError];
overload selector(static #"initWithDataIgnoringOrientation:") = Id, NSData;
overload selector(static #"initWithDateFormat:allowNaturalLanguage:") = Id, NSString, Bool;
overload selector(static #"initWithDecimal:") = Id, NSDecimal;
overload selector(static #"initWithDefaults:initialValues:") = Id, NSUserDefaults, NSDictionary;
overload selector(static #"initWithDelegate:name:") = Id, Id, NSString;
overload selector(static #"initWithDescriptorType:bytes:length:") = Id, CULong, RawPointer, UInt;
overload selector(static #"initWithDescriptorType:data:") = Id, CULong, NSData;
overload selector(static #"initWithDictionary:") = Id, NSDictionary;
overload selector(static #"initWithDictionary:copyItems:") = Id, NSDictionary, Bool;
overload selector(static #"initWithDocFormat:documentAttributes:") = Id, NSData, Pointer[NSDictionary];
overload selector(static #"initWithDomain:code:userInfo:") = Id, NSString, Int, NSDictionary;
overload selector(static #"initWithDomain:type:name:") = Id, NSString, NSString, NSString;
overload selector(static #"initWithDomain:type:name:port:") = Id, NSString, NSString, NSString, Int;
overload selector(static #"initWithDominantScript:languageMap:") = Id, NSString, NSDictionary;
overload selector(static #"initWithDouble:") = Id, Double;
overload selector(static #"initWithDrawSelector:delegate:") = Id, SelectorHandle, Id;
overload selector(static #"initWithDuration:animationCurve:") = Id, Double, UInt;
overload selector(static #"initWithEventClass:eventID:targetDescriptor:returnID:transactionID:") = Id, CULong, CULong, NSAppleEventDescriptor, Short, CLong;
overload selector(static #"initWithExpressionType:") = Id, UInt;
overload selector(static #"initWithFileAtPath:") = Id, NSString;
overload selector(static #"initWithFileDescriptor:") = Id, Int;
overload selector(static #"initWithFileDescriptor:closeOnDealloc:") = Id, Int, Bool;
overload selector(static #"initWithFileWrapper:") = Id, NSFileWrapper;
overload selector(static #"initWithFireDate:interval:target:selector:userInfo:repeats:") = Id, NSDate, Double, Id, SelectorHandle, Id, Bool;
overload selector(static #"initWithFloat:") = Id, Float;
overload selector(static #"initWithFocusedViewRect:") = Id, NSRect;
overload selector(static #"initWithFontAttributes:") = Id, NSDictionary;
overload varargSelector(static #"initWithFormat:") = Id, NSString;
overload selector(static #"initWithFormat:arguments:") = Id, NSString, va_list;
overload varargSelector(static #"initWithFormat:locale:") = Id, NSString, Id;
overload selector(static #"initWithFormat:locale:arguments:") = Id, NSString, Id, va_list;
overload selector(static #"initWithFormat:shareContext:") = Id, NSOpenGLPixelFormat, NSOpenGLContext;
overload selector(static #"initWithFrame:") = Id, NSRect;
overload selector(static #"initWithFrame:mode:cellClass:numberOfRows:numberOfColumns:") = Id, NSRect, UInt, Id, Int, Int;
overload selector(static #"initWithFrame:mode:prototype:numberOfRows:numberOfColumns:") = Id, NSRect, UInt, NSCell, Int, Int;
overload selector(static #"initWithFrame:pixelFormat:") = Id, NSRect, NSOpenGLPixelFormat;
overload selector(static #"initWithFrame:pullsDown:") = Id, NSRect, Bool;
overload selector(static #"initWithFrame:textContainer:") = Id, NSRect, NSTextContainer;
overload selector(static #"initWithHTML:baseURL:documentAttributes:") = Id, NSData, NSURL, Pointer[NSDictionary];
overload selector(static #"initWithHTML:documentAttributes:") = Id, NSData, Pointer[NSDictionary];
overload selector(static #"initWithHTML:options:documentAttributes:") = Id, NSData, NSDictionary, Pointer[NSDictionary];
overload selector(static #"initWithHost:port:protocol:realm:authenticationMethod:") = Id, NSString, Int, NSString, NSString, NSString;
overload selector(static #"initWithICCProfileData:") = Id, NSData;
overload selector(static #"initWithIOSurface:") = Id, IOSurfaceRef;
overload selector(static #"initWithIOSurface:options:") = Id, IOSurfaceRef, NSDictionary;
overload selector(static #"initWithIconRef:") = Id, IconRef;
overload selector(static #"initWithIdentifier:") = Id, Id;
overload selector(static #"initWithIdentity:certificates:persistence:") = Id, SecIdentityRef, NSArray, UInt;
overload selector(static #"initWithImage:foregroundColorHint:backgroundColorHint:hotSpot:") = Id, NSImage, NSColor, NSColor, NSPoint;
overload selector(static #"initWithImage:hotSpot:") = Id, NSImage, NSPoint;
overload selector(static #"initWithIndex:") = Id, UInt;
overload selector(static #"initWithIndexSet:") = Id, NSIndexSet;
overload selector(static #"initWithIndexes:length:") = Id, Pointer[UInt], UInt;
overload selector(static #"initWithIndexesInRange:") = Id, NSRange;
overload selector(static #"initWithInt:") = Id, Int;
overload selector(static #"initWithInteger:") = Id, Int;
overload selector(static #"initWithInvocation:") = Id, NSInvocation;
overload selector(static #"initWithItemIdentifier:") = Id, NSString;
overload selector(static #"initWithKey:ascending:") = Id, NSString, Bool;
overload selector(static #"initWithKey:ascending:comparator:") = Id, NSString, Bool, NSComparator;
overload selector(static #"initWithKey:ascending:selector:") = Id, NSString, Bool, SelectorHandle;
overload selector(static #"initWithKeyOptions:valueOptions:capacity:") = Id, UInt, UInt, UInt;
overload selector(static #"initWithKeyPointerFunctions:valuePointerFunctions:capacity:") = Id, NSPointerFunctions, NSPointerFunctions, UInt;
overload selector(static #"initWithKind:") = Id, UInt;
overload selector(static #"initWithKind:options:") = Id, UInt, UInt;
overload selector(static #"initWithLayer:") = Id, Id;
overload selector(static #"initWithLeftExpression:rightExpression:customSelector:") = Id, NSExpression, NSExpression, SelectorHandle;
overload selector(static #"initWithLeftExpression:rightExpression:modifier:type:options:") = Id, NSExpression, NSExpression, UInt, UInt, UInt;
overload selector(static #"initWithLeftExpressions:rightExpressionAttributeType:modifier:operators:options:") = Id, NSArray, UInt, UInt, NSArray, UInt;
overload selector(static #"initWithLeftExpressions:rightExpressions:modifier:operators:options:") = Id, NSArray, NSArray, UInt, NSArray, UInt;
overload selector(static #"initWithLength:") = Id, UInt;
overload selector(static #"initWithLevelIndicatorStyle:") = Id, UInt;
overload selector(static #"initWithLocal:connection:") = Id, Id, NSConnection;
overload selector(static #"initWithLocaleIdentifier:") = Id, NSString;
overload selector(static #"initWithLong:") = Id, CLong;
overload selector(static #"initWithLongLong:") = Id, Int64;
overload selector(static #"initWithMachPort:") = Id, UInt;
overload selector(static #"initWithMachPort:options:") = Id, UInt, UInt;
overload selector(static #"initWithMantissa:exponent:isNegative:") = Id, UInt64, Short, Bool;
overload selector(static #"initWithMarkerFormat:options:") = Id, NSString, UInt;
overload selector(static #"initWithMemoryCapacity:diskCapacity:diskPath:") = Id, UInt, UInt, NSString;
overload selector(static #"initWithMovie:") = Id, RawPointer;
overload selector(static #"initWithName:") = Id, NSString;
overload selector(static #"initWithName:URI:") = Id, NSString, NSString;
overload selector(static #"initWithName:data:") = Id, NSString, NSData;
overload selector(static #"initWithName:fromFile:") = Id, NSString, NSString;
overload selector(static #"initWithName:host:") = NSInputManager, NSString, NSString;
overload selector(static #"initWithName:reason:userInfo:") = Id, NSString, NSString, NSDictionary;
overload selector(static #"initWithName:stringValue:") = Id, NSString, NSString;
overload selector(static #"initWithNibName:bundle:") = Id, NSString, NSBundle;
overload selector(static #"initWithNibNamed:bundle:") = Id, NSString, NSBundle;
overload selector(static #"initWithNotificationCenter:") = Id, NSNotificationCenter;
overload selector(static #"initWithObjectSpecifier:comparisonOperator:testObject:") = Id, NSScriptObjectSpecifier, UInt, Id;
overload varargSelector(static #"initWithObjects:") = Id, Id;
overload selector(static #"initWithObjects:count:") = Id, Pointer[Id], UInt;
overload selector(static #"initWithObjects:forKeys:") = Id, NSArray, NSArray;
overload selector(static #"initWithObjects:forKeys:count:") = Id, Pointer[Id], Pointer[Id], UInt;
overload varargSelector(static #"initWithObjectsAndKeys:") = Id, Id;
overload selector(static #"initWithOptions:") = Id, UInt;
overload selector(static #"initWithOptions:capacity:") = Id, UInt, UInt;
overload selector(static #"initWithPasteboard:") = Id, NSPasteboard;
overload selector(static #"initWithPasteboardPropertyList:ofType:") = Id, Id, NSString;
overload selector(static #"initWithPath:") = Id, NSString;
overload selector(static #"initWithPath:documentAttributes:") = Id, NSString, Pointer[NSDictionary];
overload selector(static #"initWithPickerMask:colorPanel:") = Id, UInt, NSColorPanel;
overload selector(static #"initWithPointerFunctions:") = Id, NSPointerFunctions;
overload selector(static #"initWithPointerFunctions:capacity:") = Id, NSPointerFunctions, UInt;
overload selector(static #"initWithPosition:objectSpecifier:") = Id, UInt, NSScriptObjectSpecifier;
overload selector(static #"initWithProperties:") = Id, NSDictionary;
overload selector(static #"initWithProtectionSpace:proposedCredential:previousFailureCount:failureResponse:error:sender:") = Id, NSURLProtectionSpace, NSURLCredential, Int, NSURLResponse, NSError, Id;
overload selector(static #"initWithProtocolFamily:socketType:protocol:address:") = Id, Int, Int, Int, NSData;
overload selector(static #"initWithProtocolFamily:socketType:protocol:socket:") = Id, Int, Int, Int, Int;
overload selector(static #"initWithProxyHost:port:type:realm:authenticationMethod:") = Id, NSString, Int, NSString, NSString, NSString;
overload selector(static #"initWithRTF:documentAttributes:") = Id, NSData, Pointer[NSDictionary];
overload selector(static #"initWithRTFD:documentAttributes:") = Id, NSData, Pointer[NSDictionary];
overload selector(static #"initWithRTFDFileWrapper:documentAttributes:") = Id, NSFileWrapper, Pointer[NSDictionary];
overload selector(static #"initWithReceivePort:sendPort:") = Id, NSPort, NSPort;
overload selector(static #"initWithReceivePort:sendPort:components:") = Id, NSPort, NSPort, NSArray;
overload selector(static #"initWithRect:options:owner:userInfo:") = Id, NSRect, UInt, Id, NSDictionary;
overload selector(static #"initWithRepresentedObject:") = Id, Id;
overload selector(static #"initWithRequest:cachedResponse:client:") = Id, NSURLRequest, NSCachedURLResponse, Id;
overload selector(static #"initWithRequest:delegate:") = Id, NSURLRequest, Id;
overload selector(static #"initWithRequest:delegate:startImmediately:") = Id, NSURLRequest, Id, Bool;
overload selector(static #"initWithResponse:data:") = Id, NSURLResponse, NSData;
overload selector(static #"initWithResponse:data:userInfo:storagePolicy:") = Id, NSURLResponse, NSData, NSDictionary, UInt;
overload selector(static #"initWithResumeData:delegate:path:") = Id, NSData, Id, NSString;
overload selector(static #"initWithRootElement:") = Id, NSXMLElement;
overload selector(static #"initWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:") = Id, UInt, Short, Bool, Bool, Bool, Bool;
overload selector(static #"initWithRulerView:markerLocation:image:imageOrigin:") = Id, NSRulerView, Float, NSImage, NSPoint;
overload selector(static #"initWithScheme:host:path:") = Id, NSString, NSString, NSString;
overload selector(static #"initWithScrollView:orientation:") = Id, NSScrollView, UInt;
overload selector(static #"initWithSendPort:receivePort:components:") = Id, NSPort, NSPort, NSArray;
overload selector(static #"initWithSerializedRepresentation:") = Id, NSData;
overload selector(static #"initWithSet:") = Id, NSSet;
overload selector(static #"initWithSet:copyItems:") = Id, NSSet, Bool;
overload selector(static #"initWithShort:") = Id, Short;
overload selector(static #"initWithSize:") = Id, NSSize;
overload selector(static #"initWithSize:depth:separate:alpha:") = Id, NSSize, Int, Bool, Bool;
overload selector(static #"initWithSource:") = Id, NSString;
overload selector(static #"initWithStartingColor:endingColor:") = Id, NSColor, NSColor;
overload selector(static #"initWithStorageLocation:") = Id, NSURL;
overload selector(static #"initWithString:") = Id, NSString;
overload selector(static #"initWithString:attributes:") = Id, NSString, NSDictionary;
overload selector(static #"initWithString:calendarFormat:") = Id, NSString, NSString;
overload selector(static #"initWithString:calendarFormat:locale:") = Id, NSString, NSString, Id;
overload selector(static #"initWithString:locale:") = Id, NSString, Id;
overload selector(static #"initWithString:relativeToURL:") = Id, NSString, NSURL;
overload selector(static #"initWithSuiteName:className:dictionary:") = Id, NSString, NSString, NSDictionary;
overload selector(static #"initWithSuiteName:commandName:dictionary:") = Id, NSString, NSString, NSDictionary;
overload selector(static #"initWithTCPPort:") = Id, UShort;
overload selector(static #"initWithTable:startingRow:rowSpan:startingColumn:columnSpan:") = Id, NSTextTable, Int, Int, Int, Int;
overload selector(static #"initWithTarget:connection:") = Id, Id, NSConnection;
overload selector(static #"initWithTarget:protocol:") = Id, NSObject, Id;
overload selector(static #"initWithTarget:selector:object:") = Id, Id, SelectorHandle, Id;
overload selector(static #"initWithTextAlignment:location:options:") = Id, UInt, Float, NSDictionary;
overload selector(static #"initWithTexture:size:flipped:colorSpace:") = Id, UInt, CGSize, Bool, CGColorSpaceRef;
overload selector(static #"initWithTextureTarget:textureInternalFormat:textureMaxMipMapLevel:pixelsWide:pixelsHigh:") = Id, UInt, UInt, Int, Int, Int;
overload selector(static #"initWithTimeInterval:sinceDate:") = Id, Double, NSDate;
overload selector(static #"initWithTimeIntervalSince1970:") = Id, Double;
overload selector(static #"initWithTimeIntervalSinceNow:") = Id, Double;
overload selector(static #"initWithTimeIntervalSinceReferenceDate:") = Id, Double;
overload selector(static #"initWithTitle:") = Id, NSString;
overload selector(static #"initWithTitle:action:keyEquivalent:") = Id, NSString, SelectorHandle, NSString;
overload selector(static #"initWithTransform:") = Id, NSAffineTransform;
overload selector(static #"initWithTrust:") = Id, SecTrustRef;
overload selector(static #"initWithType:error:") = Id, NSString, Pointer[NSError];
overload selector(static #"initWithType:location:") = Id, UInt, Float;
overload selector(static #"initWithType:subpredicates:") = Id, UInt, NSArray;
overload selector(static #"initWithURL:") = Id, NSURL;
overload selector(static #"initWithURL:MIMEType:expectedContentLength:textEncodingName:") = Id, NSURL, NSString, Int, NSString;
overload selector(static #"initWithURL:append:") = Id, NSURL, Bool;
overload selector(static #"initWithURL:byReference:") = Id, NSURL, Bool;
overload selector(static #"initWithURL:cachePolicy:timeoutInterval:") = Id, NSURL, UInt, Double;
overload selector(static #"initWithURL:cached:") = Id, NSURL, Bool;
overload selector(static #"initWithURL:documentAttributes:") = Id, NSURL, Pointer[NSDictionary];
overload selector(static #"initWithURL:options:documentAttributes:error:") = Id, NSURL, NSDictionary, Pointer[NSDictionary], Pointer[NSError];
overload selector(static #"initWithURL:options:error:") = Id, NSURL, UInt, Pointer[NSError];
overload selector(static #"initWithUTF8String:") = Id, Pointer[CChar];
overload selector(static #"initWithUnsignedChar:") = Id, CUChar;
overload selector(static #"initWithUnsignedInt:") = Id, UInt;
overload selector(static #"initWithUnsignedInteger:") = Id, UInt;
overload selector(static #"initWithUnsignedLong:") = Id, CULong;
overload selector(static #"initWithUnsignedLongLong:") = Id, UInt64;
overload selector(static #"initWithUnsignedShort:") = Id, UShort;
overload selector(static #"initWithUser:") = Id, NSString;
overload selector(static #"initWithUser:password:persistence:") = Id, NSString, NSString, UInt;
overload selector(static #"initWithValues:count:") = Id, Pointer[Float], CULong;
overload selector(static #"initWithViewAnimations:") = Id, NSArray;
overload selector(static #"initWithVoice:") = Id, NSString;
overload selector(static #"initWithWindow:") = Id, NSWindow;
overload selector(static #"initWithWindow:rect:") = Id, NSWindow, NSRect;
overload selector(static #"initWithWindowNibName:") = Id, NSString;
overload selector(static #"initWithWindowNibName:owner:") = Id, NSString, Id;
overload selector(static #"initWithWindowNibPath:owner:") = Id, NSString, Id;
overload selector(static #"initWithWindowRef:") = NSWindow, RawPointer;
overload selector(static #"initWithX:") = Id, Float;
overload selector(static #"initWithX:Y:") = Id, Float, Float;
overload selector(static #"initWithX:Y:Z:") = Id, Float, Float, Float;
overload selector(static #"initWithX:Y:Z:W:") = Id, Float, Float, Float, Float;
overload selector(static #"initWithXMLString:") = Id, NSString;
overload selector(static #"initWithXMLString:error:") = Id, NSString, Pointer[NSError];
overload selector(static #"initWithXMLString:options:error:") = Id, NSString, UInt, Pointer[NSError];
overload selector(static #"initWithYear:month:day:hour:minute:second:timeZone:") = Id, Int, UInt, UInt, UInt, UInt, UInt, NSTimeZone;
overload selector(static #"initialFirstResponder") = Id;
overload selector(static #"initialKey") = NSString;
overload selector(static #"initialValue") = Id;
overload selector(static #"initialValues") = NSDictionary;
overload selector(static #"initialize") = Void;
overload selector(static #"innerRect") = NSRect;
overload selector(static #"inputClientBecomeActive:") = Void, Id;
overload selector(static #"inputClientDisabled:") = Void, Id;
overload selector(static #"inputClientEnabled:") = Void, Id;
overload selector(static #"inputClientResignActive:") = Void, Id;
overload selector(static #"inputContext") = NSTextInputContext;
overload selector(static #"inputStreamWithData:") = Id, NSData;
overload selector(static #"inputStreamWithFileAtPath:") = Id, NSString;
overload selector(static #"inputStreamWithURL:") = Id, NSURL;
overload selector(static #"insert:") = Void, Id;
overload selector(static #"insertAttributedString:atIndex:") = Void, NSAttributedString, UInt;
overload selector(static #"insertBacktab:") = Void, Id;
overload selector(static #"insertChild:") = Void, Id;
overload selector(static #"insertChild:atIndex:") = Void, NSXMLNode, UInt;
overload selector(static #"insertChildren:atIndex:") = Void, NSArray, UInt;
overload selector(static #"insertColor:key:atIndex:") = Void, NSColor, NSString, UInt;
overload selector(static #"insertColumn:") = Void, Int;
overload selector(static #"insertColumn:withCells:") = Void, Int, NSArray;
overload selector(static #"insertCompletion:forPartialWordRange:movement:isFinal:") = Void, NSString, NSRange, Int, Bool;
overload selector(static #"insertContainerBreak:") = Void, Id;
overload selector(static #"insertDescriptor:atIndex:") = Void, NSAppleEventDescriptor, Int;
overload selector(static #"insertDoubleQuoteIgnoringSubstitution:") = Void, Id;
overload selector(static #"insertEntry:atIndex:") = NSFormCell, NSString, Int;
overload selector(static #"insertGlyph:atGlyphIndex:characterIndex:") = Void, UInt, UInt, UInt;
overload selector(static #"insertGlyphs:length:forStartingGlyphAtIndex:characterIndex:") = Void, Pointer[UInt], UInt, UInt, UInt;
overload selector(static #"insertItem:atIndex:") = Void, NSMenuItem, Int;
overload selector(static #"insertItemWithItemIdentifier:atIndex:") = Void, NSString, Int;
overload selector(static #"insertItemWithObjectValue:atIndex:") = Void, Id, Int;
overload selector(static #"insertItemWithTitle:action:keyEquivalent:atIndex:") = NSMenuItem, NSString, SelectorHandle, NSString, Int;
overload selector(static #"insertItemWithTitle:atIndex:") = Void, NSString, Int;
overload selector(static #"insertLineBreak:") = Void, Id;
overload selector(static #"insertNewButtonImage:in:") = Void, NSImage, NSButtonCell;
overload selector(static #"insertNewline:") = Void, Id;
overload selector(static #"insertNewlineIgnoringFieldEditor:") = Void, Id;
overload selector(static #"insertObject:atArrangedObjectIndex:") = Void, Id, UInt;
overload selector(static #"insertObject:atArrangedObjectIndexPath:") = Void, Id, NSIndexPath;
overload selector(static #"insertObject:atIndex:") = Void, Id, UInt;
overload selector(static #"insertObjects:atArrangedObjectIndexPaths:") = Void, NSArray, NSArray;
overload selector(static #"insertObjects:atArrangedObjectIndexes:") = Void, NSArray, NSIndexSet;
overload selector(static #"insertObjects:atIndexes:") = Void, NSArray, NSIndexSet;
overload selector(static #"insertParagraphSeparator:") = Void, Id;
overload selector(static #"insertPointer:atIndex:") = Void, RawPointer, UInt;
overload selector(static #"insertRow:") = Void, Int;
overload selector(static #"insertRow:withCells:") = Void, Int, NSArray;
overload selector(static #"insertRowAtIndex:withType:asSubrowOfRow:animate:") = Void, Int, UInt, Int, Bool;
overload selector(static #"insertSingleQuoteIgnoringSubstitution:") = Void, Id;
overload selector(static #"insertString:atIndex:") = Void, NSString, UInt;
overload selector(static #"insertSublayer:above:") = Void, CALayer, CALayer;
overload selector(static #"insertSublayer:atIndex:") = Void, CALayer, UInt;
overload selector(static #"insertSublayer:below:") = Void, CALayer, CALayer;
overload selector(static #"insertTab:") = Void, Id;
overload selector(static #"insertTabIgnoringFieldEditor:") = Void, Id;
overload selector(static #"insertTabViewItem:atIndex:") = Void, NSTabViewItem, Int;
overload selector(static #"insertText:") = Void, Id;
overload selector(static #"insertText:client:") = Void, Id, Id;
overload selector(static #"insertText:replacementRange:") = Void, Id, NSRange;
overload selector(static #"insertTextContainer:atIndex:") = Void, NSTextContainer, UInt;
overload selector(static #"insertValue:atIndex:inPropertyWithKey:") = Void, Id, UInt, NSString;
overload selector(static #"insertValue:inPropertyWithKey:") = Void, Id, NSString;
overload selector(static #"insertionContainer") = Id;
overload selector(static #"insertionIndex") = Int;
overload selector(static #"insertionKey") = NSString;
overload selector(static #"insertionPointColor") = NSColor;
overload selector(static #"insertionReplaces") = Bool;
overload selector(static #"instanceMethodForSelector:") = IMP, SelectorHandle;
overload selector(static #"instanceMethodSignatureForSelector:") = NSMethodSignature, SelectorHandle;
overload selector(static #"instancesRespondToSelector:") = Bool, SelectorHandle;
overload selector(static #"instantiateNibWithExternalNameTable:") = Bool, NSDictionary;
overload selector(static #"instantiateNibWithOwner:topLevelObjects:") = Bool, Id, Pointer[NSArray];
overload selector(static #"int32Value") = CLong;
overload selector(static #"intAttribute:forGlyphAtIndex:") = Int, Int, UInt;
overload selector(static #"intForKey:inTable:") = Int, NSString, NSString;
overload selector(static #"intValue") = Int;
overload selector(static #"integerForKey:") = Int, NSString;
overload selector(static #"integerValue") = Int;
overload selector(static #"intercellSpacing") = NSSize;
overload selector(static #"interfaceStyle") = UInt;
overload selector(static #"interiorBackgroundStyle") = Int;
overload selector(static #"interiorBackgroundStyleForSegment:") = Int, Int;
overload selector(static #"internationalCurrencySymbol") = NSString;
overload selector(static #"interpolatedColorAtLocation:") = NSColor, Float;
overload selector(static #"interpretKeyEvents:") = Void, NSArray;
overload selector(static #"interrupt") = Void;
overload selector(static #"intersectHashTable:") = Void, NSHashTable;
overload selector(static #"intersectSet:") = Void, NSSet;
overload selector(static #"intersectsHashTable:") = Bool, NSHashTable;
overload selector(static #"intersectsIndexesInRange:") = Bool, NSRange;
overload selector(static #"intersectsSet:") = Bool, NSSet;
overload selector(static #"invalidate") = Void;
overload selector(static #"invalidateAttributesInRange:") = Void, NSRange;
overload selector(static #"invalidateCharacterCoordinates") = Void;
overload selector(static #"invalidateClassDescriptionCache") = Void;
overload selector(static #"invalidateCursorRectsForView:") = Void, NSView;
overload selector(static #"invalidateDisplayForCharacterRange:") = Void, NSRange;
overload selector(static #"invalidateDisplayForGlyphRange:") = Void, NSRange;
overload selector(static #"invalidateGlyphsForCharacterRange:changeInLength:actualCharacterRange:") = Void, NSRange, Int, NSRangePointer;
overload selector(static #"invalidateGlyphsOnLayoutInvalidationForGlyphRange:") = Void, NSRange;
overload selector(static #"invalidateHashMarks") = Void;
overload selector(static #"invalidateLayoutForCharacterRange:actualCharacterRange:") = Void, NSRange, NSRangePointer;
overload selector(static #"invalidateLayoutForCharacterRange:isSoft:actualCharacterRange:") = Void, NSRange, Bool, NSRangePointer;
overload selector(static #"invalidateLayoutOfLayer:") = Void, CALayer;
overload selector(static #"invalidateShadow") = Void;
overload selector(static #"invalidateTextContainerOrigin") = Void;
overload selector(static #"inverseForRelationshipKey:") = NSString, NSString;
overload selector(static #"invert") = Void;
overload selector(static #"invertedSet") = NSCharacterSet;
overload selector(static #"invocation") = NSInvocation;
overload selector(static #"invocationWithMethodSignature:") = NSInvocation, NSMethodSignature;
overload selector(static #"invoke") = Void;
overload selector(static #"invokeWithTarget:") = Void, Id;
overload selector(static #"isARepeat") = Bool;
overload selector(static #"isAbsolutePath") = Bool;
overload selector(static #"isActive") = Bool;
overload selector(static #"isAlternate") = Bool;
overload selector(static #"isAnimating") = Bool;
overload selector(static #"isAnyApplicationSpeaking") = Bool;
overload selector(static #"isAsynchronous") = Bool;
overload selector(static #"isAtEnd") = Bool;
overload selector(static #"isAttached") = Bool;
overload selector(static #"isAutodisplay") = Bool;
overload selector(static #"isAutomaticDashSubstitutionEnabled") = Bool;
overload selector(static #"isAutomaticDataDetectionEnabled") = Bool;
overload selector(static #"isAutomaticLinkDetectionEnabled") = Bool;
overload selector(static #"isAutomaticQuoteSubstitutionEnabled") = Bool;
overload selector(static #"isAutomaticSpellingCorrectionEnabled") = Bool;
overload selector(static #"isAutomaticTextReplacementEnabled") = Bool;
overload selector(static #"isAutoscroll") = Bool;
overload selector(static #"isBaseFont") = Bool;
overload selector(static #"isBezeled") = Bool;
overload selector(static #"isBordered") = Bool;
overload selector(static #"isButtonBordered") = Bool;
overload selector(static #"isBycopy") = Bool;
overload selector(static #"isByref") = Bool;
overload selector(static #"isCachedSeparately") = Bool;
overload selector(static #"isCancelled") = Bool;
overload selector(static #"isCaseInsensitiveLike:") = Bool, NSString;
overload selector(static #"isCoalescingUndo") = Bool;
overload selector(static #"isCollecting") = Bool;
overload selector(static #"isColor") = Bool;
overload selector(static #"isColumnSelected:") = Bool, Int;
overload selector(static #"isCompiled") = Bool;
overload selector(static #"isConcurrent") = Bool;
overload selector(static #"isContentDiscarded") = Bool;
overload selector(static #"isContextHelpModeActive") = Bool;
overload selector(static #"isContinuous") = Bool;
overload selector(static #"isContinuousSpellCheckingEnabled") = Bool;
overload selector(static #"isControllerVisible") = Bool;
overload selector(static #"isCopyingOperation") = Bool;
overload selector(static #"isDataRetained") = Bool;
overload selector(static #"isDaylightSavingTime") = Bool;
overload selector(static #"isDaylightSavingTimeForDate:") = Bool, NSDate;
overload selector(static #"isDeletableFileAtPath:") = Bool, NSString;
overload selector(static #"isDescendantOf:") = Bool, NSView;
overload selector(static #"isDirectory") = Bool;
overload selector(static #"isDisplayedWhenStopped") = Bool;
overload selector(static #"isDocumentEdited") = Bool;
overload selector(static #"isDoubleSided") = Bool;
overload selector(static #"isDragging") = Bool;
overload selector(static #"isDrawingToScreen") = Bool;
overload selector(static #"isEditable") = Bool;
overload selector(static #"isEditing") = Bool;
overload selector(static #"isEmpty") = Bool;
overload selector(static #"isEnabled") = Bool;
overload selector(static #"isEnabledForSegment:") = Bool, Int;
overload selector(static #"isEnteringProximity") = Bool;
overload selector(static #"isEntryAcceptable:") = Bool, NSString;
overload selector(static #"isEqual:") = Bool, Id;
overload selector(static #"isEqualFunction") = CCodePointer[(RawPointer,RawPointer,CCodePointer[(RawPointer),(UInt)]),(CChar)];
overload selector(static #"isEqualTo:") = Bool, Id;
overload selector(static #"isEqualToArray:") = Bool, NSArray;
overload selector(static #"isEqualToAttributedString:") = Bool, NSAttributedString;
overload selector(static #"isEqualToData:") = Bool, NSData;
overload selector(static #"isEqualToDate:") = Bool, NSDate;
overload selector(static #"isEqualToDictionary:") = Bool, NSDictionary;
overload selector(static #"isEqualToHashTable:") = Bool, NSHashTable;
overload selector(static #"isEqualToHost:") = Bool, NSHost;
overload selector(static #"isEqualToIndexSet:") = Bool, NSIndexSet;
overload selector(static #"isEqualToNumber:") = Bool, NSNumber;
overload selector(static #"isEqualToSet:") = Bool, NSSet;
overload selector(static #"isEqualToString:") = Bool, NSString;
overload selector(static #"isEqualToTimeZone:") = Bool, NSTimeZone;
overload selector(static #"isEqualToValue:") = Bool, NSValue;
overload selector(static #"isExcludedFromWindowsMenu") = Bool;
overload selector(static #"isExecutableFileAtPath:") = Bool, NSString;
overload selector(static #"isExecuting") = Bool;
overload selector(static #"isExpandable:") = Bool, Id;
overload selector(static #"isExpanded") = Bool;
overload selector(static #"isExplicitlyIncluded") = Bool;
overload selector(static #"isExtensionHidden") = Bool;
overload selector(static #"isExternal") = Bool;
overload selector(static #"isFieldEditor") = Bool;
overload selector(static #"isFilePackageAtPath:") = Bool, NSString;
overload selector(static #"isFileReferenceURL") = Bool;
overload selector(static #"isFileURL") = Bool;
overload selector(static #"isFinished") = Bool;
overload selector(static #"isFinishedLaunching") = Bool;
overload selector(static #"isFirstResponder") = Bool;
overload selector(static #"isFixedPitch") = Bool;
overload selector(static #"isFlipped") = Bool;
overload selector(static #"isFloatingPanel") = Bool;
overload selector(static #"isFlushWindowDisabled") = Bool;
overload selector(static #"isFontAvailable:") = Bool, NSString;
overload selector(static #"isFullKeyboardAccessEnabled") = Bool;
overload selector(static #"isGathering") = Bool;
overload selector(static #"isGeometryFlipped") = Bool;
overload selector(static #"isGrammarCheckingEnabled") = Bool;
overload selector(static #"isGreaterThan:") = Bool, Id;
overload selector(static #"isGreaterThanOrEqualTo:") = Bool, Id;
overload selector(static #"isHTTPOnly") = Bool;
overload selector(static #"isHidden") = Bool;
overload selector(static #"isHiddenOrHasHiddenAncestor") = Bool;
overload selector(static #"isHighlighted") = Bool;
overload selector(static #"isHorizontal") = Bool;
overload selector(static #"isHorizontallyCentered") = Bool;
overload selector(static #"isHorizontallyResizable") = Bool;
overload selector(static #"isHostCacheEnabled") = Bool;
overload selector(static #"isInFullScreenMode") = Bool;
overload selector(static #"isIndeterminate") = Bool;
overload selector(static #"isIndexed") = Bool;
overload selector(static #"isIndexedBySpotlight") = Bool;
overload selector(static #"isItemExpanded:") = Bool, Id;
overload selector(static #"isKey:inTable:") = Bool, NSString, NSString;
overload selector(static #"isKeyWindow") = Bool;
overload selector(static #"isKindOfClass:") = Bool, Id;
overload selector(static #"isLeaf") = Bool;
overload selector(static #"isLeafItem:") = Bool, Id;
overload selector(static #"isLenient") = Bool;
overload selector(static #"isLessThan:") = Bool, Id;
overload selector(static #"isLessThanOrEqualTo:") = Bool, Id;
overload selector(static #"isLike:") = Bool, NSString;
overload selector(static #"isLoaded") = Bool;
overload selector(static #"isLocationRequiredToCreateForKey:") = Bool, NSString;
overload selector(static #"isMainThread") = Bool;
overload selector(static #"isMainWindow") = Bool;
overload selector(static #"isMemberOfClass:") = Bool, Id;
overload selector(static #"isMiniaturizable") = Bool;
overload selector(static #"isMiniaturized") = Bool;
overload selector(static #"isModalPanel") = Bool;
overload selector(static #"isMouseCoalescingEnabled") = Bool;
overload selector(static #"isMovable") = Bool;
overload selector(static #"isMovableByWindowBackground") = Bool;
overload selector(static #"isMultiThreaded") = Bool;
overload selector(static #"isMultiple") = Bool;
overload selector(static #"isMuted") = Bool;
overload selector(static #"isNativeType:") = Bool, NSString;
overload selector(static #"isNotEqualTo:") = Bool, Id;
overload selector(static #"isOnActiveSpace") = Bool;
overload selector(static #"isOneShot") = Bool;
overload selector(static #"isOneway") = Bool;
overload selector(static #"isOpaque") = Bool;
overload selector(static #"isOptional") = Bool;
overload selector(static #"isOptionalArgumentWithName:") = Bool, NSString;
overload selector(static #"isOutputStackInReverseOrder") = Bool;
overload selector(static #"isPaneSplitter") = Bool;
overload selector(static #"isPartialStringValid:newEditingString:errorDescription:") = Bool, NSString, Pointer[NSString], Pointer[NSString];
overload selector(static #"isPartialStringValid:proposedSelectedRange:originalString:originalSelectedRange:errorDescription:") = Bool, Pointer[NSString], NSRangePointer, NSString, NSRange, Pointer[NSString];
overload selector(static #"isPartialStringValidationEnabled") = Bool;
overload selector(static #"isPlanar") = Bool;
overload selector(static #"isPlaying") = Bool;
overload selector(static #"isProxy") = Bool;
overload selector(static #"isReadOnlyKey:") = Bool, NSString;
overload selector(static #"isReadableFileAtPath:") = Bool, NSString;
overload selector(static #"isReady") = Bool;
overload selector(static #"isRedoing") = Bool;
overload selector(static #"isRegularFile") = Bool;
overload selector(static #"isReleasedWhenClosed") = Bool;
overload selector(static #"isRemovable") = Bool;
overload selector(static #"isResizable") = Bool;
overload selector(static #"isResting") = Bool;
overload selector(static #"isRichText") = Bool;
overload selector(static #"isRotatedFromBase") = Bool;
overload selector(static #"isRotatedOrScaledFromBase") = Bool;
overload selector(static #"isRowSelected:") = Bool, Int;
overload selector(static #"isRulerVisible") = Bool;
overload selector(static #"isRunning") = Bool;
overload selector(static #"isScrollable") = Bool;
overload selector(static #"isSecure") = Bool;
overload selector(static #"isSelectable") = Bool;
overload selector(static #"isSelected") = Bool;
overload selector(static #"isSelectedForSegment:") = Bool, Int;
overload selector(static #"isSelectionByRect") = Bool;
overload selector(static #"isSelectionOnly") = Bool;
overload selector(static #"isSeparatorItem") = Bool;
overload selector(static #"isSessionOnly") = Bool;
overload selector(static #"isSetOnMouseEntered") = Bool;
overload selector(static #"isSetOnMouseExited") = Bool;
overload selector(static #"isSheet") = Bool;
overload selector(static #"isSimpleRectangularTextContainer") = Bool;
overload selector(static #"isSpeaking") = Bool;
overload selector(static #"isStandalone") = Bool;
overload selector(static #"isStarted") = Bool;
overload selector(static #"isStopped") = Bool;
overload selector(static #"isStoredInExternalRecord") = Bool;
overload selector(static #"isSubclassOfClass:") = Bool, Id;
overload selector(static #"isSubsetOfHashTable:") = Bool, NSHashTable;
overload selector(static #"isSubsetOfSet:") = Bool, NSSet;
overload selector(static #"isSubviewCollapsed:") = Bool, NSView;
overload selector(static #"isSupersetOfSet:") = Bool, NSCharacterSet;
overload selector(static #"isSuspended") = Bool;
overload selector(static #"isSymbolicLink") = Bool;
overload selector(static #"isTemplate") = Bool;
overload selector(static #"isTerminated") = Bool;
overload selector(static #"isTitled") = Bool;
overload selector(static #"isTornOff") = Bool;
overload selector(static #"isTransient") = Bool;
overload selector(static #"isTransparent") = Bool;
overload selector(static #"isTrue") = Bool;
overload selector(static #"isUndoRegistrationEnabled") = Bool;
overload selector(static #"isUndoing") = Bool;
overload selector(static #"isValid") = Bool;
overload selector(static #"isValidGlyphIndex:") = Bool, UInt;
overload selector(static #"isVertical") = Bool;
overload selector(static #"isVerticallyCentered") = Bool;
overload selector(static #"isVerticallyResizable") = Bool;
overload selector(static #"isVisible") = Bool;
overload selector(static #"isWellFormed") = Bool;
overload selector(static #"isWindowLoaded") = Bool;
overload selector(static #"isWordInUserDictionaries:caseSensitive:") = Bool, NSString, Bool;
overload selector(static #"isWritableFileAtPath:") = Bool, NSString;
overload selector(static #"isZoomable") = Bool;
overload selector(static #"isZoomed") = Bool;
overload selector(static #"italicAngle") = Float;
overload selector(static #"itemAdded:") = Void, NSNotification;
overload selector(static #"itemArray") = NSArray;
overload selector(static #"itemAtIndex:") = Id, Int;
overload selector(static #"itemAtIndexPath:") = Id, NSIndexPath;
overload selector(static #"itemAtRow:") = Id, Int;
overload selector(static #"itemAtRow:inColumn:") = Id, Int, Int;
overload selector(static #"itemChanged:") = Void, NSMenuItem;
overload selector(static #"itemHeight") = Float;
overload selector(static #"itemIdentifier") = NSString;
overload selector(static #"itemNumberInTextList:atIndex:") = Int, NSTextList, UInt;
overload selector(static #"itemObjectValueAtIndex:") = Id, Int;
overload selector(static #"itemPrototype") = NSCollectionViewItem;
overload selector(static #"itemRemoved:") = Void, NSNotification;
overload selector(static #"itemTitleAtIndex:") = NSString, Int;
overload selector(static #"itemTitles") = NSArray;
overload selector(static #"itemWithTag:") = NSMenuItem, Int;
overload selector(static #"itemWithTitle:") = NSMenuItem, NSString;
overload selector(static #"items") = NSArray;
overload selector(static #"jobDisposition") = NSString;
overload selector(static #"jobStyleHint") = NSString;
overload selector(static #"jobTitle") = NSString;
overload selector(static #"keepBackupFile") = Bool;
overload selector(static #"key") = NSString;
overload selector(static #"keyCell") = Id;
overload selector(static #"keyClassDescription") = NSScriptClassDescription;
overload selector(static #"keyCode") = UShort;
overload selector(static #"keyDown:") = Void, NSEvent;
overload selector(static #"keyEnumerator") = NSEnumerator;
overload selector(static #"keyEquivalent") = NSString;
overload selector(static #"keyEquivalentFont") = NSFont;
overload selector(static #"keyEquivalentModifierMask") = UInt;
overload selector(static #"keyEquivalentOffset") = Float;
overload selector(static #"keyEquivalentRectForBounds:") = NSRect, NSRect;
overload selector(static #"keyEquivalentWidth") = Float;
overload selector(static #"keyEventWithType:location:modifierFlags:timestamp:windowNumber:context:characters:charactersIgnoringModifiers:isARepeat:keyCode:") = NSEvent, UInt, NSPoint, UInt, Double, Int, NSGraphicsContext, NSString, NSString, Bool, UShort;
overload selector(static #"keyForFileWrapper:") = NSString, NSFileWrapper;
overload selector(static #"keyPath") = NSString;
overload selector(static #"keyPathsForValuesAffectingPreview") = NSSet;
overload selector(static #"keyPathsForValuesAffectingValueForKey:") = NSSet, NSString;
overload selector(static #"keyPointerFunctions") = NSPointerFunctions;
overload selector(static #"keyRepeatDelay") = Double;
overload selector(static #"keyRepeatInterval") = Double;
overload selector(static #"keySpecifier") = NSScriptObjectSpecifier;
overload selector(static #"keyUp:") = Void, NSEvent;
overload selector(static #"keyViewSelectionDirection") = UInt;
overload selector(static #"keyWindow") = NSWindow;
overload selector(static #"keyWithAppleEventCode:") = NSString, CULong;
overload selector(static #"keyboardFocusIndicatorColor") = NSColor;
overload selector(static #"keyboardInputSources") = NSArray;
overload selector(static #"keysOfEntriesPassingTest:") = NSSet, UnknownType;
overload selector(static #"keysOfEntriesWithOptions:passingTest:") = NSSet, UInt, UnknownType;
overload selector(static #"keysSortedByValueUsingComparator:") = NSArray, NSComparator;
overload selector(static #"keysSortedByValueUsingSelector:") = NSArray, SelectorHandle;
overload selector(static #"keysSortedByValueWithOptions:usingComparator:") = NSArray, UInt, NSComparator;
overload selector(static #"keywordForDescriptorAtIndex:") = CULong, Int;
overload selector(static #"kind") = UInt;
overload selector(static #"knobColor") = NSColor;
overload selector(static #"knobProportion") = Float;
overload selector(static #"knobRectFlipped:") = NSRect, Bool;
overload selector(static #"knobThickness") = Float;
overload selector(static #"knownTimeZoneNames") = NSArray;
overload selector(static #"knowsPageRange:") = Bool, NSRangePointer;
overload selector(static #"label") = NSString;
overload selector(static #"labelFontOfSize:") = NSFont, Float;
overload selector(static #"labelFontSize") = Float;
overload selector(static #"labelForSegment:") = NSString, Int;
overload selector(static #"language") = NSString;
overload selector(static #"languageLevel") = Int;
overload selector(static #"languageMap") = NSDictionary;
overload selector(static #"languagesForScript:") = NSArray, NSString;
overload selector(static #"lastColumn") = Int;
overload selector(static #"lastComponentOfFileName") = NSString;
overload selector(static #"lastIndex") = UInt;
overload selector(static #"lastItem") = NSMenuItem;
overload selector(static #"lastObject") = Id;
overload selector(static #"lastPathComponent") = NSString;
overload selector(static #"lastVisibleColumn") = Int;
overload selector(static #"laterDate:") = NSDate, NSDate;
overload selector(static #"launch") = Void;
overload selector(static #"launchAppWithBundleIdentifier:options:additionalEventParamDescriptor:launchIdentifier:") = Bool, NSString, UInt, NSAppleEventDescriptor, Pointer[NSNumber];
overload selector(static #"launchApplication:") = Bool, NSString;
overload selector(static #"launchApplication:showIcon:autolaunch:") = Bool, NSString, Bool, Bool;
overload selector(static #"launchApplicationAtURL:options:configuration:error:") = NSRunningApplication, NSURL, UInt, NSDictionary, Pointer[NSError];
overload selector(static #"launchDate") = NSDate;
overload selector(static #"launchPath") = NSString;
overload selector(static #"launchedApplications") = NSArray;
overload selector(static #"launchedTaskWithLaunchPath:arguments:") = NSTask, NSString, NSArray;
overload selector(static #"layer") = Id;
overload selector(static #"layerContentsPlacement") = Int;
overload selector(static #"layerContentsRedrawPolicy") = Int;
overload selector(static #"layout") = Void;
overload selector(static #"layoutAlgorithm") = UInt;
overload selector(static #"layoutCharactersInRange:forLayoutManager:maximumNumberOfLineFragments:") = NSRange, NSRange, NSLayoutManager, UInt;
overload selector(static #"layoutGlyphsInLayoutManager:startingAtGlyphIndex:maxNumberOfLineFragments:nextGlyphIndex:") = Void, NSLayoutManager, UInt, UInt, Pointer[UInt];
overload selector(static #"layoutIfNeeded") = Void;
overload selector(static #"layoutManager") = Id;
overload selector(static #"layoutManager:didCompleteLayoutForTextContainer:atEnd:") = Void, NSLayoutManager, NSTextContainer, Bool;
overload selector(static #"layoutManager:shouldUseTemporaryAttributes:forDrawingToScreen:atCharacterIndex:effectiveRange:") = NSDictionary, NSLayoutManager, NSDictionary, Bool, UInt, NSRangePointer;
overload selector(static #"layoutManagerDidInvalidateLayout:") = Void, NSLayoutManager;
overload selector(static #"layoutManagerOwnsFirstResponderInWindow:") = Bool, NSWindow;
overload selector(static #"layoutManagers") = NSArray;
overload selector(static #"layoutOptions") = UInt;
overload selector(static #"layoutParagraphAtPoint:") = UInt, NSPointPointer;
overload selector(static #"layoutRectForTextBlock:atIndex:effectiveRange:") = NSRect, NSTextBlock, UInt, NSRangePointer;
overload selector(static #"layoutRectForTextBlock:glyphRange:") = NSRect, NSTextBlock, NSRange;
overload selector(static #"layoutSublayers") = Void;
overload selector(static #"layoutSublayersOfLayer:") = Void, CALayer;
overload selector(static #"leading") = Float;
overload selector(static #"leadingOffset") = Float;
overload selector(static #"leafKeyPath") = NSString;
overload selector(static #"leafKeyPathForNode:") = NSString, NSTreeNode;
overload selector(static #"learnWord:") = Void, NSString;
overload selector(static #"leftExpression") = NSExpression;
overload selector(static #"leftExpressions") = NSArray;
overload selector(static #"leftMargin") = Float;
overload selector(static #"length") = UInt;
overload selector(static #"lengthOfBytesUsingEncoding:") = UInt, UInt;
overload selector(static #"letterCharacterSet") = Id;
overload selector(static #"level") = UInt;
overload selector(static #"levelForItem:") = Int, Id;
overload selector(static #"levelForRow:") = Int, Int;
overload selector(static #"levelIndicatorStyle") = UInt;
overload selector(static #"levelsOfUndo") = UInt;
overload selector(static #"lightGrayColor") = NSColor;
overload selector(static #"limitDateForMode:") = NSDate, NSString;
overload selector(static #"lineBreakBeforeIndex:withinRange:") = UInt, UInt, NSRange;
overload selector(static #"lineBreakByHyphenatingBeforeIndex:withinRange:") = UInt, UInt, NSRange;
overload selector(static #"lineBreakMode") = UInt;
overload selector(static #"lineCapStyle") = UInt;
overload selector(static #"lineDirectionForLanguage:") = UInt, NSString;
overload selector(static #"lineFragmentPadding") = Float;
overload selector(static #"lineFragmentRectForGlyphAtIndex:effectiveRange:") = NSRect, UInt, NSRangePointer;
overload selector(static #"lineFragmentRectForGlyphAtIndex:effectiveRange:withoutAdditionalLayout:") = NSRect, UInt, NSRangePointer, Bool;
overload selector(static #"lineFragmentRectForProposedRect:remainingRect:") = NSRect, NSRect, NSRectPointer;
overload selector(static #"lineFragmentRectForProposedRect:sweepDirection:movementDirection:remainingRect:") = NSRect, NSRect, UInt, UInt, NSRectPointer;
overload selector(static #"lineFragmentUsedRectForGlyphAtIndex:effectiveRange:") = NSRect, UInt, NSRangePointer;
overload selector(static #"lineFragmentUsedRectForGlyphAtIndex:effectiveRange:withoutAdditionalLayout:") = NSRect, UInt, NSRangePointer, Bool;
overload selector(static #"lineHeightMultiple") = Float;
overload selector(static #"lineJoinStyle") = UInt;
overload selector(static #"lineNumber") = Int;
overload selector(static #"lineRangeForRange:") = NSRange, NSRange;
overload selector(static #"lineScroll") = Float;
overload selector(static #"lineSpacing") = Float;
overload selector(static #"lineSpacingAfterGlyphAtIndex:withProposedLineFragmentRect:") = Float, UInt, NSRect;
overload selector(static #"lineToPoint:") = Void, NSPoint;
overload selector(static #"lineWidth") = Float;
overload selector(static #"linkCheckingResultWithRange:URL:") = NSTextCheckingResult, NSRange, NSURL;
overload selector(static #"linkItemAtPath:toPath:error:") = Bool, NSString, NSString, Pointer[NSError];
overload selector(static #"linkItemAtURL:toURL:error:") = Bool, NSURL, NSURL, Pointer[NSError];
overload selector(static #"linkPath:toPath:handler:") = Bool, NSString, NSString, Id;
overload selector(static #"linkTextAttributes") = NSDictionary;
overload selector(static #"listDescriptor") = NSAppleEventDescriptor;
overload selector(static #"listOptions") = UInt;
overload selector(static #"listensInForegroundOnly") = Bool;
overload selector(static #"load") = Bool;
overload selector(static #"loadAndReturnError:") = Bool, Pointer[NSError];
overload selector(static #"loadColumnZero") = Void;
overload selector(static #"loadDataRepresentation:ofType:") = Bool, NSData, NSString;
overload selector(static #"loadFileWrapperRepresentation:ofType:") = Bool, NSFileWrapper, NSString;
overload selector(static #"loadInBackground") = Void;
overload selector(static #"loadInForeground") = NSData;
overload selector(static #"loadNibFile:externalNameTable:withZone:") = Bool, NSString, NSDictionary, Pointer[NSZone];
overload selector(static #"loadNibNamed:owner:") = Bool, NSString, Id;
overload selector(static #"loadResourceDataNotifyingClient:usingCache:") = Void, Id, Bool;
overload selector(static #"loadSuiteWithDictionary:fromBundle:") = Void, NSDictionary, NSBundle;
overload selector(static #"loadSuitesFromBundle:") = Void, NSBundle;
overload selector(static #"loadView") = Void;
overload selector(static #"loadWindow") = Void;
overload selector(static #"loadedCellAtRow:column:") = Id, Int, Int;
overload selector(static #"localName") = NSString;
overload selector(static #"localNameForName:") = NSString, NSString;
overload selector(static #"localObjects") = NSArray;
overload selector(static #"localTimeZone") = NSTimeZone;
overload selector(static #"locale") = Id;
overload selector(static #"localeIdentifier") = NSString;
overload selector(static #"localeIdentifierFromComponents:") = NSString, NSDictionary;
overload selector(static #"localeIdentifierFromWindowsLocaleCode:") = NSString, UInt;
overload selector(static #"localizations") = NSArray;
overload selector(static #"localizedCaseInsensitiveCompare:") = Int, NSString;
overload selector(static #"localizedCatalogNameComponent") = NSString;
overload selector(static #"localizedColorNameComponent") = NSString;
overload selector(static #"localizedCompare:") = Int, NSString;
overload selector(static #"localizedDescription") = NSString;
overload selector(static #"localizedDescriptionForType:") = NSString, NSString;
overload selector(static #"localizedFailureReason") = NSString;
overload selector(static #"localizedInfoDictionary") = NSDictionary;
overload selector(static #"localizedInputManagerName") = NSString;
overload selector(static #"localizedKey") = NSString;
overload selector(static #"localizedKeyDictionary") = NSDictionary;
overload selector(static #"localizedKeyTable") = NSString;
overload selector(static #"localizedName") = NSString;
overload selector(static #"localizedName:locale:") = NSString, Int, NSLocale;
overload selector(static #"localizedNameForFamily:face:") = NSString, NSString, NSString;
overload selector(static #"localizedNameForInputSource:") = NSString, NSString;
overload selector(static #"localizedNameForTIFFCompressionType:") = NSString, UInt;
overload selector(static #"localizedNameOfStringEncoding:") = NSString, UInt;
overload selector(static #"localizedPaperName") = NSString;
overload selector(static #"localizedRecoveryOptions") = NSArray;
overload selector(static #"localizedRecoverySuggestion") = NSString;
overload selector(static #"localizedScannerWithString:") = Id, NSString;
overload selector(static #"localizedStandardCompare:") = Int, NSString;
overload selector(static #"localizedStringForKey:value:table:") = NSString, NSString, NSString, NSString;
overload selector(static #"localizedStringForStatusCode:") = NSString, Int;
overload selector(static #"localizedStringFromDate:dateStyle:timeStyle:") = NSString, NSDate, UInt, UInt;
overload selector(static #"localizedStringFromNumber:numberStyle:") = NSString, NSNumber, UInt;
overload varargSelector(static #"localizedStringWithFormat:") = Id, NSString;
overload selector(static #"localizedSummaryItems") = NSArray;
overload selector(static #"localizedTitlesForItem:") = NSArray, Id;
overload selector(static #"localizesFormat") = Bool;
overload selector(static #"location") = Float;
overload selector(static #"locationForGlyphAtIndex:") = NSPoint, UInt;
overload selector(static #"locationForSubmenu:") = NSPoint, NSMenu;
overload selector(static #"locationInWindow") = NSPoint;
overload selector(static #"locationOfPrintRect:") = NSPoint, NSRect;
overload selector(static #"lock") = Void;
overload selector(static #"lockBeforeDate:") = Bool, NSDate;
overload selector(static #"lockDate") = NSDate;
overload selector(static #"lockFocus") = Void;
overload selector(static #"lockFocusFlipped:") = Void, Bool;
overload selector(static #"lockFocusIfCanDraw") = Bool;
overload selector(static #"lockFocusIfCanDrawInContext:") = Bool, NSGraphicsContext;
overload selector(static #"lockFocusOnRepresentation:") = Void, NSImageRep;
overload selector(static #"lockWhenCondition:") = Void, Int;
overload selector(static #"lockWhenCondition:beforeDate:") = Bool, Int, NSDate;
overload selector(static #"lockWithPath:") = NSDistributedLock, NSString;
overload selector(static #"longCharacterIsMember:") = Bool, CULong;
overload selector(static #"longEraSymbols") = NSArray;
overload selector(static #"longLongValue") = Int64;
overload selector(static #"longValue") = CLong;
overload selector(static #"loopMode") = UInt;
overload selector(static #"loops") = Bool;
overload selector(static #"loosenKerning:") = Void, Id;
overload selector(static #"lossyCString") = Pointer[CChar];
overload selector(static #"lowerBaseline:") = Void, Id;
overload selector(static #"lowercaseLetterCharacterSet") = Id;
overload selector(static #"lowercaseString") = NSString;
overload selector(static #"lowercaseWord:") = Void, Id;
overload selector(static #"machPort") = UInt;
overload selector(static #"magentaColor") = NSColor;
overload selector(static #"magentaComponent") = Float;
overload selector(static #"magnification") = Float;
overload selector(static #"magnificationFilter") = NSString;
overload selector(static #"magnifyWithEvent:") = Void, NSEvent;
overload selector(static #"main") = Void;
overload selector(static #"mainBundle") = NSBundle;
overload selector(static #"mainDocumentURL") = NSURL;
overload selector(static #"mainMenu") = NSMenu;
overload selector(static #"mainQueue") = Id;
overload selector(static #"mainRunLoop") = NSRunLoop;
overload selector(static #"mainScreen") = NSScreen;
overload selector(static #"mainThread") = NSThread;
overload selector(static #"mainWindow") = NSWindow;
overload selector(static #"makeBackingLayer") = CALayer;
overload selector(static #"makeBaseWritingDirectionLeftToRight:") = Void, Id;
overload selector(static #"makeBaseWritingDirectionNatural:") = Void, Id;
overload selector(static #"makeBaseWritingDirectionRightToLeft:") = Void, Id;
overload selector(static #"makeCellAtRow:column:") = NSCell, Int, Int;
overload selector(static #"makeCurrentContext") = Void;
overload selector(static #"makeDocumentForURL:withContentsOfURL:ofType:error:") = Id, NSURL, NSURL, NSString, Pointer[NSError];
overload selector(static #"makeDocumentWithContentsOfFile:ofType:") = Id, NSString, NSString;
overload selector(static #"makeDocumentWithContentsOfURL:ofType:") = Id, NSURL, NSString;
overload selector(static #"makeDocumentWithContentsOfURL:ofType:error:") = Id, NSURL, NSString, Pointer[NSError];
overload selector(static #"makeFirstResponder:") = Bool, NSResponder;
overload selector(static #"makeKeyAndOrderFront:") = Void, Id;
overload selector(static #"makeKeyWindow") = Void;
overload selector(static #"makeMainWindow") = Void;
overload selector(static #"makeNewConnection:sender:") = Bool, NSConnection, NSConnection;
overload selector(static #"makeNextSegmentKey") = Void;
overload selector(static #"makeObjectsPerformSelector:") = Void, SelectorHandle;
overload selector(static #"makeObjectsPerformSelector:withObject:") = Void, SelectorHandle, Id;
overload selector(static #"makePreviousSegmentKey") = Void;
overload selector(static #"makeTextWritingDirectionLeftToRight:") = Void, Id;
overload selector(static #"makeTextWritingDirectionNatural:") = Void, Id;
overload selector(static #"makeTextWritingDirectionRightToLeft:") = Void, Id;
overload selector(static #"makeUntitledDocumentOfType:") = Id, NSString;
overload selector(static #"makeUntitledDocumentOfType:error:") = Id, NSString, Pointer[NSError];
overload selector(static #"makeWindowControllers") = Void;
overload selector(static #"makeWindowsPerform:inOrder:") = NSWindow, SelectorHandle, Bool;
overload selector(static #"managedObjectContext") = NSManagedObjectContext;
overload selector(static #"managedObjectModel") = Id;
overload selector(static #"mapTableWithKeyOptions:valueOptions:") = Id, UInt, UInt;
overload selector(static #"mapTableWithStrongToStrongObjects") = Id;
overload selector(static #"mapTableWithStrongToWeakObjects") = Id;
overload selector(static #"mapTableWithWeakToStrongObjects") = Id;
overload selector(static #"mapTableWithWeakToWeakObjects") = Id;
overload selector(static #"markedRange") = NSRange;
overload selector(static #"markedTextAbandoned:") = Void, Id;
overload selector(static #"markedTextAttributes") = NSDictionary;
overload selector(static #"markedTextSelectionChanged:client:") = Void, NSRange, Id;
overload selector(static #"markerForItemNumber:") = NSString, Int;
overload selector(static #"markerFormat") = NSString;
overload selector(static #"markerLocation") = Float;
overload selector(static #"markers") = NSArray;
overload selector(static #"mask") = CALayer;
overload selector(static #"masksToBounds") = Bool;
overload selector(static #"matchForPredicate:") = Double, NSPredicate;
overload selector(static #"matchesAppleEventCode:") = Bool, CULong;
overload selector(static #"matchesContentsOfURL:") = Bool, NSURL;
overload selector(static #"matchesOnMultipleResolution") = Bool;
overload selector(static #"matchingFontDescriptorWithMandatoryKeys:") = NSFontDescriptor, NSSet;
overload selector(static #"matchingFontDescriptorsWithMandatoryKeys:") = NSArray, NSSet;
overload selector(static #"matrix") = Pointer[Float];
overload selector(static #"matrixClass") = Id;
overload selector(static #"matrixInColumn:") = NSMatrix, Int;
overload selector(static #"maxConcurrentOperationCount") = Int;
overload selector(static #"maxContentSize") = NSSize;
overload selector(static #"maxDate") = NSDate;
overload selector(static #"maxItemSize") = NSSize;
overload selector(static #"maxNumberOfColumns") = UInt;
overload selector(static #"maxNumberOfRows") = UInt;
overload selector(static #"maxPossiblePositionOfDividerAtIndex:") = Float, Int;
overload selector(static #"maxSize") = NSSize;
overload selector(static #"maxValue") = Double;
overload selector(static #"maxVisibleColumns") = Int;
overload selector(static #"maxWidth") = Float;
overload selector(static #"maximum") = NSNumber;
overload selector(static #"maximumAdvancement") = NSSize;
overload selector(static #"maximumDecimalNumber") = NSDecimalNumber;
overload selector(static #"maximumFractionDigits") = UInt;
overload selector(static #"maximumIntegerDigits") = UInt;
overload selector(static #"maximumLengthOfBytesUsingEncoding:") = UInt, UInt;
overload selector(static #"maximumLineHeight") = Float;
overload selector(static #"maximumRangeOfUnit:") = NSRange, UInt;
overload selector(static #"maximumRecentDocumentCount") = UInt;
overload selector(static #"maximumRecents") = Int;
overload selector(static #"maximumSignificantDigits") = UInt;
overload selector(static #"measurementUnits") = NSString;
overload selector(static #"member:") = Id, Id;
overload selector(static #"memoryCapacity") = UInt;
overload selector(static #"menu") = NSMenu;
overload selector(static #"menu:updateItem:atIndex:shouldCancel:") = Bool, NSMenu, NSMenuItem, Int, Bool;
overload selector(static #"menu:willHighlightItem:") = Void, NSMenu, NSMenuItem;
overload selector(static #"menuBarFontOfSize:") = NSFont, Float;
overload selector(static #"menuBarHeight") = Float;
overload selector(static #"menuBarVisible") = Bool;
overload selector(static #"menuChanged:") = Void, NSMenu;
overload selector(static #"menuChangedMessagesEnabled") = Bool;
overload selector(static #"menuDidClose:") = Void, NSMenu;
overload selector(static #"menuFontOfSize:") = NSFont, Float;
overload selector(static #"menuForEvent:") = NSMenu, NSEvent;
overload selector(static #"menuForEvent:inRect:ofView:") = NSMenu, NSEvent, NSRect, NSView;
overload selector(static #"menuForResult:string:options:atLocation:inView:") = NSMenu, NSTextCheckingResult, NSString, NSDictionary, NSPoint, NSView;
overload selector(static #"menuForSegment:") = NSMenu, Int;
overload selector(static #"menuFormRepresentation") = NSMenuItem;
overload selector(static #"menuHasKeyEquivalent:forEvent:target:action:") = Bool, NSMenu, NSEvent, Pointer[Id], Pointer[SelectorHandle];
overload selector(static #"menuItem") = NSMenuItem;
overload selector(static #"menuItemCellForItemAtIndex:") = NSMenuItemCell, Int;
overload selector(static #"menuNeedsUpdate:") = Void, NSMenu;
overload selector(static #"menuRepresentation") = Id;
overload selector(static #"menuView") = NSMenuView;
overload selector(static #"menuWillOpen:") = Void, NSMenu;
overload selector(static #"menuZone") = Pointer[NSZone];
overload selector(static #"message") = NSString;
overload selector(static #"messageFontOfSize:") = NSFont, Float;
overload selector(static #"messageText") = NSString;
overload selector(static #"metadataQuery:replacementObjectForResultObject:") = Id, NSMetadataQuery, NSMetadataItem;
overload selector(static #"metadataQuery:replacementValueForAttribute:value:") = Id, NSMetadataQuery, NSString, Id;
overload selector(static #"methodForSelector:") = IMP, SelectorHandle;
overload selector(static #"methodReturnLength") = UInt;
overload selector(static #"methodReturnType") = Pointer[CChar];
overload selector(static #"methodSignature") = NSMethodSignature;
overload selector(static #"methodSignatureForSelector:") = NSMethodSignature, SelectorHandle;
overload selector(static #"minColumnWidth") = Float;
overload selector(static #"minContentSize") = NSSize;
overload selector(static #"minDate") = NSDate;
overload selector(static #"minFrameWidthWithTitle:styleMask:") = Float, NSString, UInt;
overload selector(static #"minItemSize") = NSSize;
overload selector(static #"minPossiblePositionOfDividerAtIndex:") = Float, Int;
overload selector(static #"minSize") = NSSize;
overload selector(static #"minValue") = Double;
overload selector(static #"minWidth") = Float;
overload selector(static #"miniaturize:") = Void, Id;
overload selector(static #"miniaturizeAll:") = Void, Id;
overload selector(static #"minificationFilter") = NSString;
overload selector(static #"minificationFilterBias") = Float;
overload selector(static #"minimum") = NSNumber;
overload selector(static #"minimumDaysInFirstWeek") = UInt;
overload selector(static #"minimumDecimalNumber") = NSDecimalNumber;
overload selector(static #"minimumFractionDigits") = UInt;
overload selector(static #"minimumIntegerDigits") = UInt;
overload selector(static #"minimumLineHeight") = Float;
overload selector(static #"minimumRangeOfUnit:") = NSRange, UInt;
overload selector(static #"minimumSignificantDigits") = UInt;
overload selector(static #"minimumSize") = NSSize;
overload selector(static #"minimumWidth") = Float;
overload selector(static #"miniwindowImage") = NSImage;
overload selector(static #"miniwindowTitle") = NSString;
overload selector(static #"minusHashTable:") = Void, NSHashTable;
overload selector(static #"minusSet:") = Void, NSSet;
overload selector(static #"minusSign") = NSString;
overload selector(static #"minute") = Int;
overload selector(static #"minuteOfHour") = Int;
overload selector(static #"miterLimit") = Float;
overload selector(static #"mixedStateImage") = NSImage;
overload selector(static #"mnemonic") = NSString;
overload selector(static #"mnemonicLocation") = UInt;
overload selector(static #"modalWindow") = NSWindow;
overload selector(static #"mode") = UInt;
overload selector(static #"modelLayer") = Id;
overload selector(static #"modifier") = UInt;
overload selector(static #"modifierFlags") = UInt;
overload selector(static #"modifyFont:") = Void, Id;
overload selector(static #"modifyFontViaPanel:") = Void, Id;
overload selector(static #"month") = Int;
overload selector(static #"monthOfYear") = Int;
overload selector(static #"monthSymbols") = NSArray;
overload selector(static #"mostCompatibleStringEncoding") = UInt;
overload selector(static #"mountNewRemovableMedia") = NSArray;
overload selector(static #"mountedLocalVolumePaths") = NSArray;
overload selector(static #"mountedRemovableMedia") = NSArray;
overload selector(static #"mountedVolumeURLsIncludingResourceValuesForKeys:options:") = NSArray, NSArray, UInt;
overload selector(static #"mouse:inRect:") = Bool, NSPoint, NSRect;
overload selector(static #"mouseDown:") = Void, NSEvent;
overload selector(static #"mouseDownCanMoveWindow") = Bool;
overload selector(static #"mouseDownFlags") = Int;
overload selector(static #"mouseDownOnCharacterIndex:atCoordinate:withModifier:client:") = Bool, UInt, NSPoint, UInt, Id;
overload selector(static #"mouseDragged:") = Void, NSEvent;
overload selector(static #"mouseDraggedOnCharacterIndex:atCoordinate:withModifier:client:") = Bool, UInt, NSPoint, UInt, Id;
overload selector(static #"mouseEntered:") = Void, NSEvent;
overload selector(static #"mouseEntered:withFrame:inView:") = Void, NSEvent, NSRect, NSView;
overload selector(static #"mouseEventWithType:location:modifierFlags:timestamp:windowNumber:context:eventNumber:clickCount:pressure:") = NSEvent, UInt, NSPoint, UInt, Double, Int, NSGraphicsContext, Int, Int, Float;
overload selector(static #"mouseExited:") = Void, NSEvent;
overload selector(static #"mouseExited:withFrame:inView:") = Void, NSEvent, NSRect, NSView;
overload selector(static #"mouseLocation") = NSPoint;
overload selector(static #"mouseLocationOutsideOfEventStream") = NSPoint;
overload selector(static #"mouseMoved:") = Void, NSEvent;
overload selector(static #"mouseUp:") = Void, NSEvent;
overload selector(static #"mouseUpOnCharacterIndex:atCoordinate:withModifier:client:") = Void, UInt, NSPoint, UInt, Id;
overload selector(static #"moveBackward:") = Void, Id;
overload selector(static #"moveBackwardAndModifySelection:") = Void, Id;
overload selector(static #"moveColumn:toColumn:") = Void, Int, Int;
overload selector(static #"moveDown:") = Void, Id;
overload selector(static #"moveDownAndModifySelection:") = Void, Id;
overload selector(static #"moveForward:") = Void, Id;
overload selector(static #"moveForwardAndModifySelection:") = Void, Id;
overload selector(static #"moveItemAtPath:toPath:error:") = Bool, NSString, NSString, Pointer[NSError];
overload selector(static #"moveItemAtURL:toURL:error:") = Bool, NSURL, NSURL, Pointer[NSError];
overload selector(static #"moveLeft:") = Void, Id;
overload selector(static #"moveLeftAndModifySelection:") = Void, Id;
overload selector(static #"moveNode:toIndexPath:") = Void, NSTreeNode, NSIndexPath;
overload selector(static #"moveNodes:toIndexPath:") = Void, NSArray, NSIndexPath;
overload selector(static #"moveParagraphBackwardAndModifySelection:") = Void, Id;
overload selector(static #"moveParagraphForwardAndModifySelection:") = Void, Id;
overload selector(static #"movePath:toPath:handler:") = Bool, NSString, NSString, Id;
overload selector(static #"moveRight:") = Void, Id;
overload selector(static #"moveRightAndModifySelection:") = Void, Id;
overload selector(static #"moveRulerlineFromLocation:toLocation:") = Void, Float, Float;
overload selector(static #"moveToBeginningOfDocument:") = Void, Id;
overload selector(static #"moveToBeginningOfDocumentAndModifySelection:") = Void, Id;
overload selector(static #"moveToBeginningOfLine:") = Void, Id;
overload selector(static #"moveToBeginningOfLineAndModifySelection:") = Void, Id;
overload selector(static #"moveToBeginningOfParagraph:") = Void, Id;
overload selector(static #"moveToBeginningOfParagraphAndModifySelection:") = Void, Id;
overload selector(static #"moveToEndOfDocument:") = Void, Id;
overload selector(static #"moveToEndOfDocumentAndModifySelection:") = Void, Id;
overload selector(static #"moveToEndOfLine:") = Void, Id;
overload selector(static #"moveToEndOfLineAndModifySelection:") = Void, Id;
overload selector(static #"moveToEndOfParagraph:") = Void, Id;
overload selector(static #"moveToEndOfParagraphAndModifySelection:") = Void, Id;
overload selector(static #"moveToLeftEndOfLine:") = Void, Id;
overload selector(static #"moveToLeftEndOfLineAndModifySelection:") = Void, Id;
overload selector(static #"moveToPoint:") = Void, NSPoint;
overload selector(static #"moveToRightEndOfLine:") = Void, Id;
overload selector(static #"moveToRightEndOfLineAndModifySelection:") = Void, Id;
overload selector(static #"moveUp:") = Void, Id;
overload selector(static #"moveUpAndModifySelection:") = Void, Id;
overload selector(static #"moveWordBackward:") = Void, Id;
overload selector(static #"moveWordBackwardAndModifySelection:") = Void, Id;
overload selector(static #"moveWordForward:") = Void, Id;
overload selector(static #"moveWordForwardAndModifySelection:") = Void, Id;
overload selector(static #"moveWordLeft:") = Void, Id;
overload selector(static #"moveWordLeftAndModifySelection:") = Void, Id;
overload selector(static #"moveWordRight:") = Void, Id;
overload selector(static #"moveWordRightAndModifySelection:") = Void, Id;
overload selector(static #"movie") = NSMovie;
overload selector(static #"movieController") = RawPointer;
overload selector(static #"movieRect") = NSRect;
overload selector(static #"movieUnfilteredFileTypes") = NSArray;
overload selector(static #"movieUnfilteredPasteboardTypes") = NSArray;
overload selector(static #"msgid") = UInt;
overload selector(static #"multipleThreadsEnabled") = Bool;
overload selector(static #"multiplier") = NSNumber;
overload selector(static #"mutableArrayValueForKey:") = NSMutableArray, NSString;
overload selector(static #"mutableArrayValueForKeyPath:") = NSMutableArray, NSString;
overload selector(static #"mutableBytes") = RawPointer;
overload selector(static #"mutableChildNodes") = NSMutableArray;
overload selector(static #"mutableCopy") = Id;
overload selector(static #"mutableCopyWithZone:") = Id, Pointer[NSZone];
overload selector(static #"mutableSetValueForKey:") = NSMutableSet, NSString;
overload selector(static #"mutableSetValueForKeyPath:") = NSMutableSet, NSString;
overload selector(static #"mutableString") = NSMutableString;
overload selector(static #"name") = NSString;
overload selector(static #"nameFieldLabel") = NSString;
overload selector(static #"nameFieldStringValue") = NSString;
overload selector(static #"names") = NSArray;
overload selector(static #"namesOfPromisedFilesDroppedAtDestination:") = NSArray, NSURL;
overload selector(static #"namespaceForPrefix:") = NSXMLNode, NSString;
overload selector(static #"namespaceWithName:stringValue:") = Id, NSString, NSString;
overload selector(static #"namespaces") = NSArray;
overload selector(static #"needsDisplay") = Bool;
overload selector(static #"needsDisplayForKey:") = Bool, NSString;
overload selector(static #"needsDisplayOnBoundsChange") = Bool;
overload selector(static #"needsLayout") = Bool;
overload selector(static #"needsPanelToBecomeKey") = Bool;
overload selector(static #"needsSizing") = Bool;
overload selector(static #"needsToBeUpdatedFromPath:") = Bool, NSString;
overload selector(static #"needsToDrawRect:") = Bool, NSRect;
overload selector(static #"negativeFormat") = NSString;
overload selector(static #"negativeInfinitySymbol") = NSString;
overload selector(static #"negativePrefix") = NSString;
overload selector(static #"negativeSuffix") = NSString;
overload selector(static #"nestingMode") = UInt;
overload selector(static #"netService:didNotPublish:") = Void, NSNetService, NSDictionary;
overload selector(static #"netService:didNotResolve:") = Void, NSNetService, NSDictionary;
overload selector(static #"netService:didUpdateTXTRecordData:") = Void, NSNetService, NSData;
overload selector(static #"netServiceBrowser:didFindDomain:moreComing:") = Void, NSNetServiceBrowser, NSString, Bool;
overload selector(static #"netServiceBrowser:didFindService:moreComing:") = Void, NSNetServiceBrowser, NSNetService, Bool;
overload selector(static #"netServiceBrowser:didNotSearch:") = Void, NSNetServiceBrowser, NSDictionary;
overload selector(static #"netServiceBrowser:didRemoveDomain:moreComing:") = Void, NSNetServiceBrowser, NSString, Bool;
overload selector(static #"netServiceBrowser:didRemoveService:moreComing:") = Void, NSNetServiceBrowser, NSNetService, Bool;
overload selector(static #"netServiceBrowserDidStopSearch:") = Void, NSNetServiceBrowser;
overload selector(static #"netServiceBrowserWillSearch:") = Void, NSNetServiceBrowser;
overload selector(static #"netServiceDidPublish:") = Void, NSNetService;
overload selector(static #"netServiceDidResolveAddress:") = Void, NSNetService;
overload selector(static #"netServiceDidStop:") = Void, NSNetService;
overload selector(static #"netServiceWillPublish:") = Void, NSNetService;
overload selector(static #"netServiceWillResolve:") = Void, NSNetService;
overload selector(static #"new") = Id;
overload selector(static #"newDocument:") = Void, Id;
overload selector(static #"newItemForRepresentedObject:") = NSCollectionViewItem, Id;
overload selector(static #"newObject") = Id;
overload selector(static #"newScriptingObjectOfClass:forValueForKey:withContentsValue:properties:") = Id, Id, NSString, Id, NSDictionary;
overload selector(static #"newlineCharacterSet") = Id;
overload selector(static #"nextDaylightSavingTimeTransition") = NSDate;
overload selector(static #"nextDaylightSavingTimeTransitionAfterDate:") = NSDate, NSDate;
overload selector(static #"nextEventMatchingMask:") = NSEvent, UInt;
overload selector(static #"nextEventMatchingMask:untilDate:inMode:dequeue:") = NSEvent, UInt, NSDate, NSString, Bool;
overload selector(static #"nextKeyView") = NSView;
overload selector(static #"nextNode") = NSXMLNode;
overload selector(static #"nextObject") = Id;
overload selector(static #"nextResponder") = NSResponder;
overload selector(static #"nextSibling") = NSXMLNode;
overload selector(static #"nextState") = Int;
overload selector(static #"nextValidKeyView") = NSView;
overload selector(static #"nextWordFromIndex:forward:") = UInt, UInt, Bool;
overload selector(static #"nibBundle") = NSBundle;
overload selector(static #"nibName") = NSString;
overload selector(static #"nilSymbol") = NSString;
overload selector(static #"noResponderFor:") = Void, SelectorHandle;
overload selector(static #"nodesForXPath:error:") = NSArray, NSString, Pointer[NSError];
overload selector(static #"nonBaseCharacterSet") = Id;
overload selector(static #"nonretainedObjectValue") = Id;
overload selector(static #"normalizeAdjacentTextNodesPreservingCDATA:") = Void, Bool;
overload selector(static #"normalizedPosition") = NSPoint;
overload selector(static #"notANumber") = NSDecimalNumber;
overload selector(static #"notANumberSymbol") = NSString;
overload selector(static #"notPredicateWithSubpredicate:") = NSPredicate, NSPredicate;
overload selector(static #"notShownAttributeForGlyphAtIndex:") = Bool, UInt;
overload selector(static #"notationDeclarationForName:") = NSXMLDTDNode, NSString;
overload selector(static #"notationName") = NSString;
overload selector(static #"note") = NSString;
overload selector(static #"noteFileSystemChanged") = Void;
overload selector(static #"noteFileSystemChanged:") = Void, NSString;
overload selector(static #"noteHeightOfRowsWithIndexesChanged:") = Void, NSIndexSet;
overload selector(static #"noteHeightOfRowsWithIndexesChanged:inColumn:") = Void, NSIndexSet, Int;
overload selector(static #"noteNewRecentDocument:") = Void, NSDocument;
overload selector(static #"noteNewRecentDocumentURL:") = Void, NSURL;
overload selector(static #"noteNumberOfItemsChanged") = Void;
overload selector(static #"noteNumberOfRowsChanged") = Void;
overload selector(static #"noteUserDefaultsChanged") = Void;
overload selector(static #"notificationBatchingInterval") = Double;
overload selector(static #"notificationCenter") = NSNotificationCenter;
overload selector(static #"notificationCenterForType:") = NSDistributedNotificationCenter, NSString;
overload selector(static #"notificationWithName:object:") = Id, NSString, Id;
overload selector(static #"notificationWithName:object:userInfo:") = Id, NSString, Id, NSDictionary;
overload selector(static #"null") = NSNull;
overload selector(static #"nullDescriptor") = NSAppleEventDescriptor;
overload selector(static #"numberFromString:") = NSNumber, NSString;
overload selector(static #"numberOfArguments") = UInt;
overload selector(static #"numberOfColorComponents") = Int;
overload selector(static #"numberOfColorStops") = Int;
overload selector(static #"numberOfColumns") = Int;
overload selector(static #"numberOfComponents") = CULong;
overload selector(static #"numberOfGlyphs") = UInt;
overload selector(static #"numberOfItems") = Int;
overload selector(static #"numberOfItemsInComboBox:") = Int, NSComboBox;
overload selector(static #"numberOfItemsInComboBoxCell:") = Int, NSComboBoxCell;
overload selector(static #"numberOfItemsInMenu:") = Int, NSMenu;
overload selector(static #"numberOfMajorTickMarks") = Int;
overload selector(static #"numberOfPlanes") = Int;
overload selector(static #"numberOfRows") = Int;
overload selector(static #"numberOfRowsInTableView:") = Int, NSTableView;
overload selector(static #"numberOfSelectedColumns") = Int;
overload selector(static #"numberOfSelectedRows") = Int;
overload selector(static #"numberOfTabViewItems") = Int;
overload selector(static #"numberOfTickMarks") = Int;
overload selector(static #"numberOfVirtualScreens") = Int;
overload selector(static #"numberOfVisibleColumns") = Int;
overload selector(static #"numberOfVisibleItems") = Int;
overload selector(static #"numberStyle") = UInt;
overload selector(static #"numberWithBool:") = NSNumber, Bool;
overload selector(static #"numberWithChar:") = NSNumber, CChar;
overload selector(static #"numberWithDouble:") = NSNumber, Double;
overload selector(static #"numberWithFloat:") = NSNumber, Float;
overload selector(static #"numberWithInt:") = NSNumber, Int;
overload selector(static #"numberWithInteger:") = NSNumber, Int;
overload selector(static #"numberWithLong:") = NSNumber, CLong;
overload selector(static #"numberWithLongLong:") = NSNumber, Int64;
overload selector(static #"numberWithShort:") = NSNumber, Short;
overload selector(static #"numberWithUnsignedChar:") = NSNumber, CUChar;
overload selector(static #"numberWithUnsignedInt:") = NSNumber, UInt;
overload selector(static #"numberWithUnsignedInteger:") = NSNumber, UInt;
overload selector(static #"numberWithUnsignedLong:") = NSNumber, CULong;
overload selector(static #"numberWithUnsignedLongLong:") = NSNumber, UInt64;
overload selector(static #"numberWithUnsignedShort:") = NSNumber, UShort;
overload selector(static #"objCType") = Pointer[CChar];
overload selector(static #"object") = Id;
overload selector(static #"objectAtIndex:") = Id, UInt;
overload selector(static #"objectBeingTested") = Id;
overload selector(static #"objectByApplyingXSLT:arguments:error:") = Id, NSData, NSDictionary, Pointer[NSError];
overload selector(static #"objectByApplyingXSLTAtURL:arguments:error:") = Id, NSURL, NSDictionary, Pointer[NSError];
overload selector(static #"objectByApplyingXSLTString:arguments:error:") = Id, NSString, NSDictionary, Pointer[NSError];
overload selector(static #"objectClass") = Id;
overload selector(static #"objectDidBeginEditing:") = Void, Id;
overload selector(static #"objectDidEndEditing:") = Void, Id;
overload selector(static #"objectEnumerator") = NSEnumerator;
overload selector(static #"objectForInfoDictionaryKey:") = Id, NSString;
overload selector(static #"objectForKey:") = Id, Id;
overload selector(static #"objectForProperty:error:") = Id, NSString, Pointer[NSError];
overload selector(static #"objectIsForcedForKey:") = Bool, NSString;
overload selector(static #"objectIsForcedForKey:inDomain:") = Bool, NSString, NSString;
overload selector(static #"objectSpecifier") = NSScriptObjectSpecifier;
overload selector(static #"objectSpecifierWithDescriptor:") = NSScriptObjectSpecifier, NSAppleEventDescriptor;
overload selector(static #"objectValue") = Id;
overload selector(static #"objectValueOfSelectedItem") = Id;
overload selector(static #"objectValues") = NSArray;
overload selector(static #"objectZone") = Pointer[NSZone];
overload selector(static #"objectsAtIndexes:") = NSArray, NSIndexSet;
overload selector(static #"objectsByEvaluatingSpecifier") = Id;
overload selector(static #"objectsByEvaluatingWithContainers:") = Id, Id;
overload selector(static #"objectsForKeys:notFoundMarker:") = NSArray, NSArray, Id;
overload selector(static #"objectsForXQuery:constants:error:") = NSArray, NSString, NSDictionary, Pointer[NSError];
overload selector(static #"objectsForXQuery:error:") = NSArray, NSString, Pointer[NSError];
overload selector(static #"objectsPassingTest:") = NSSet, UnknownType;
overload selector(static #"objectsWithOptions:passingTest:") = NSSet, UInt, UnknownType;
overload selector(static #"observationInfo") = RawPointer;
overload selector(static #"observeValueForKeyPath:ofObject:change:context:") = Void, NSString, Id, NSDictionary, RawPointer;
overload selector(static #"offStateImage") = NSImage;
overload selector(static #"offsetInFile") = UInt64;
overload selector(static #"ok:") = Void, Id;
overload selector(static #"onStateImage") = NSImage;
overload selector(static #"one") = NSDecimalNumber;
overload selector(static #"opacity") = Float;
overload selector(static #"opaqueAncestor") = NSView;
overload selector(static #"open") = Void;
overload selector(static #"open:") = Void, Id;
overload selector(static #"openDocument:") = Void, Id;
overload selector(static #"openDocumentWithContentsOfFile:display:") = Id, NSString, Bool;
overload selector(static #"openDocumentWithContentsOfURL:display:") = Id, NSURL, Bool;
overload selector(static #"openDocumentWithContentsOfURL:display:error:") = Id, NSURL, Bool, Pointer[NSError];
overload selector(static #"openFile:") = Bool, NSString;
overload selector(static #"openFile:fromImage:at:inView:") = Bool, NSString, NSImage, NSPoint, NSView;
overload selector(static #"openFile:withApplication:") = Bool, NSString, NSString;
overload selector(static #"openFile:withApplication:andDeactivate:") = Bool, NSString, NSString, Bool;
overload selector(static #"openGLContext") = NSOpenGLContext;
overload selector(static #"openGLContextForPixelFormat:") = NSOpenGLContext, NSOpenGLPixelFormat;
overload selector(static #"openGLPixelFormat") = NSOpenGLPixelFormat;
overload selector(static #"openGLPixelFormatForDisplayMask:") = NSOpenGLPixelFormat, UInt;
overload selector(static #"openHandCursor") = NSCursor;
overload selector(static #"openHelpAnchor:inBook:") = Void, NSString, NSString;
overload selector(static #"openOnEdge:") = Void, NSRectEdge;
overload selector(static #"openPanel") = NSOpenPanel;
overload selector(static #"openTempFile:") = Bool, NSString;
overload selector(static #"openURL:") = Bool, NSURL;
overload selector(static #"openURLs:withAppBundleIdentifier:options:additionalEventParamDescriptor:launchIdentifiers:") = Bool, NSArray, NSString, UInt, NSAppleEventDescriptor, Pointer[NSArray];
overload selector(static #"openUntitledDocumentAndDisplay:error:") = Id, Bool, Pointer[NSError];
overload selector(static #"openUntitledDocumentOfType:display:") = Id, NSString, Bool;
overload selector(static #"operand") = NSExpression;
overload selector(static #"operatingSystem") = UInt;
overload selector(static #"operatingSystemName") = NSString;
overload selector(static #"operatingSystemVersionString") = NSString;
overload selector(static #"operationCount") = UInt;
overload selector(static #"operationNotAllowedCursor") = NSCursor;
overload selector(static #"operations") = NSArray;
overload selector(static #"operators") = NSArray;
overload selector(static #"optionDescriptionsForBinding:") = NSArray, NSString;
overload selector(static #"options") = UInt;
overload selector(static #"orPredicateWithSubpredicates:") = NSPredicate, NSArray;
overload selector(static #"orangeColor") = NSColor;
overload selector(static #"orderBack:") = Void, Id;
overload selector(static #"orderFront:") = Void, Id;
overload selector(static #"orderFrontCharacterPalette:") = Void, Id;
overload selector(static #"orderFrontColorPanel:") = Void, Id;
overload selector(static #"orderFrontFontPanel:") = Void, Id;
overload selector(static #"orderFrontLinkPanel:") = Void, Id;
overload selector(static #"orderFrontListPanel:") = Void, Id;
overload selector(static #"orderFrontRegardless") = Void;
overload selector(static #"orderFrontSpacingPanel:") = Void, Id;
overload selector(static #"orderFrontStandardAboutPanel:") = Void, Id;
overload selector(static #"orderFrontStandardAboutPanelWithOptions:") = Void, NSDictionary;
overload selector(static #"orderFrontStylesPanel:") = Void, Id;
overload selector(static #"orderFrontSubstitutionsPanel:") = Void, Id;
overload selector(static #"orderFrontTablePanel:") = Void, Id;
overload selector(static #"orderOut:") = Void, Id;
overload selector(static #"orderWindow:relativeTo:") = Void, Int, Int;
overload selector(static #"orderedDocuments") = NSArray;
overload selector(static #"orderedIndex") = Int;
overload selector(static #"orderedWindows") = NSArray;
overload selector(static #"ordinalityOfUnit:inUnit:forDate:") = UInt, UInt, UInt, NSDate;
overload selector(static #"orientation") = UInt;
overload selector(static #"originOffset") = Float;
overload selector(static #"orthography") = NSOrthography;
overload selector(static #"orthographyCheckingResultWithRange:orthography:") = NSTextCheckingResult, NSRange, NSOrthography;
overload selector(static #"orthographyWithDominantScript:languageMap:") = Id, NSString, NSDictionary;
overload selector(static #"otherEventWithType:location:modifierFlags:timestamp:windowNumber:context:subtype:data1:data2:") = NSEvent, UInt, NSPoint, UInt, Double, Int, NSGraphicsContext, Short, Int, Int;
overload selector(static #"otherMouseDown:") = Void, NSEvent;
overload selector(static #"otherMouseDragged:") = Void, NSEvent;
overload selector(static #"otherMouseUp:") = Void, NSEvent;
overload selector(static #"outline:") = Void, Id;
overload selector(static #"outlineTableColumn") = NSTableColumn;
overload selector(static #"outlineView:acceptDrop:item:childIndex:") = Bool, NSOutlineView, Id, Id, Int;
overload selector(static #"outlineView:child:ofItem:") = Id, NSOutlineView, Int, Id;
overload selector(static #"outlineView:dataCellForTableColumn:item:") = NSCell, NSOutlineView, NSTableColumn, Id;
overload selector(static #"outlineView:didClickTableColumn:") = Void, NSOutlineView, NSTableColumn;
overload selector(static #"outlineView:didDragTableColumn:") = Void, NSOutlineView, NSTableColumn;
overload selector(static #"outlineView:heightOfRowByItem:") = Float, NSOutlineView, Id;
overload selector(static #"outlineView:isGroupItem:") = Bool, NSOutlineView, Id;
overload selector(static #"outlineView:isItemExpandable:") = Bool, NSOutlineView, Id;
overload selector(static #"outlineView:itemForPersistentObject:") = Id, NSOutlineView, Id;
overload selector(static #"outlineView:mouseDownInHeaderOfTableColumn:") = Void, NSOutlineView, NSTableColumn;
overload selector(static #"outlineView:namesOfPromisedFilesDroppedAtDestination:forDraggedItems:") = NSArray, NSOutlineView, NSURL, NSArray;
overload selector(static #"outlineView:nextTypeSelectMatchFromItem:toItem:forString:") = Id, NSOutlineView, Id, Id, NSString;
overload selector(static #"outlineView:numberOfChildrenOfItem:") = Int, NSOutlineView, Id;
overload selector(static #"outlineView:objectValueForTableColumn:byItem:") = Id, NSOutlineView, NSTableColumn, Id;
overload selector(static #"outlineView:persistentObjectForItem:") = Id, NSOutlineView, Id;
overload selector(static #"outlineView:selectionIndexesForProposedSelection:") = NSIndexSet, NSOutlineView, NSIndexSet;
overload selector(static #"outlineView:setObjectValue:forTableColumn:byItem:") = Void, NSOutlineView, Id, NSTableColumn, Id;
overload selector(static #"outlineView:shouldCollapseItem:") = Bool, NSOutlineView, Id;
overload selector(static #"outlineView:shouldEditTableColumn:item:") = Bool, NSOutlineView, NSTableColumn, Id;
overload selector(static #"outlineView:shouldExpandItem:") = Bool, NSOutlineView, Id;
overload selector(static #"outlineView:shouldReorderColumn:toColumn:") = Bool, NSOutlineView, Int, Int;
overload selector(static #"outlineView:shouldSelectItem:") = Bool, NSOutlineView, Id;
overload selector(static #"outlineView:shouldSelectTableColumn:") = Bool, NSOutlineView, NSTableColumn;
overload selector(static #"outlineView:shouldShowCellExpansionForTableColumn:item:") = Bool, NSOutlineView, NSTableColumn, Id;
overload selector(static #"outlineView:shouldShowOutlineCellForItem:") = Bool, NSOutlineView, Id;
overload selector(static #"outlineView:shouldTrackCell:forTableColumn:item:") = Bool, NSOutlineView, NSCell, NSTableColumn, Id;
overload selector(static #"outlineView:shouldTypeSelectForEvent:withCurrentSearchString:") = Bool, NSOutlineView, NSEvent, NSString;
overload selector(static #"outlineView:sizeToFitWidthOfColumn:") = Float, NSOutlineView, Int;
overload selector(static #"outlineView:sortDescriptorsDidChange:") = Void, NSOutlineView, NSArray;
overload selector(static #"outlineView:toolTipForCell:rect:tableColumn:item:mouseLocation:") = NSString, NSOutlineView, NSCell, NSRectPointer, NSTableColumn, Id, NSPoint;
overload selector(static #"outlineView:typeSelectStringForTableColumn:item:") = NSString, NSOutlineView, NSTableColumn, Id;
overload selector(static #"outlineView:validateDrop:proposedItem:proposedChildIndex:") = UInt, NSOutlineView, Id, Id, Int;
overload selector(static #"outlineView:willDisplayCell:forTableColumn:item:") = Void, NSOutlineView, Id, NSTableColumn, Id;
overload selector(static #"outlineView:willDisplayOutlineCell:forTableColumn:item:") = Void, NSOutlineView, Id, NSTableColumn, Id;
overload selector(static #"outlineView:writeItems:toPasteboard:") = Bool, NSOutlineView, NSArray, NSPasteboard;
overload selector(static #"outlineViewColumnDidMove:") = Void, NSNotification;
overload selector(static #"outlineViewColumnDidResize:") = Void, NSNotification;
overload selector(static #"outlineViewItemDidCollapse:") = Void, NSNotification;
overload selector(static #"outlineViewItemDidExpand:") = Void, NSNotification;
overload selector(static #"outlineViewItemWillCollapse:") = Void, NSNotification;
overload selector(static #"outlineViewItemWillExpand:") = Void, NSNotification;
overload selector(static #"outlineViewSelectionDidChange:") = Void, NSNotification;
overload selector(static #"outlineViewSelectionIsChanging:") = Void, NSNotification;
overload selector(static #"outputFormat") = UInt;
overload selector(static #"outputStreamToBuffer:capacity:") = Id, Pointer[CUChar], UInt;
overload selector(static #"outputStreamToFileAtPath:append:") = Id, NSString, Bool;
overload selector(static #"outputStreamToMemory") = Id;
overload selector(static #"outputStreamWithURL:append:") = Id, NSURL, Bool;
overload selector(static #"owner") = Id;
overload selector(static #"paddingCharacter") = NSString;
overload selector(static #"paddingPosition") = UInt;
overload selector(static #"pageCount") = Int;
overload selector(static #"pageDown:") = Void, Id;
overload selector(static #"pageDownAndModifySelection:") = Void, Id;
overload selector(static #"pageFooter") = NSAttributedString;
overload selector(static #"pageHeader") = NSAttributedString;
overload selector(static #"pageLayout") = NSPageLayout;
overload selector(static #"pageOrder") = Int;
overload selector(static #"pageRange") = NSRange;
overload selector(static #"pageScroll") = Float;
overload selector(static #"pageSizeForPaper:") = NSSize, NSString;
overload selector(static #"pageUp:") = Void, Id;
overload selector(static #"pageUpAndModifySelection:") = Void, Id;
overload selector(static #"paletteFontOfSize:") = NSFont, Float;
overload selector(static #"paletteLabel") = NSString;
overload selector(static #"panel:compareFilename:with:caseSensitive:") = Int, Id, NSString, NSString, Bool;
overload selector(static #"panel:didChangeToDirectoryURL:") = Void, Id, NSURL;
overload selector(static #"panel:directoryDidChange:") = Void, Id, NSString;
overload selector(static #"panel:isValidFilename:") = Bool, Id, NSString;
overload selector(static #"panel:shouldEnableURL:") = Bool, Id, NSURL;
overload selector(static #"panel:shouldShowFilename:") = Bool, Id, NSString;
overload selector(static #"panel:userEnteredFilename:confirmed:") = NSString, Id, NSString, Bool;
overload selector(static #"panel:validateURL:error:") = Bool, Id, NSURL, Pointer[NSError];
overload selector(static #"panel:willExpand:") = Void, Id, Bool;
overload selector(static #"panelConvertFont:") = NSFont, NSFont;
overload selector(static #"panelSelectionDidChange:") = Void, Id;
overload selector(static #"paperName") = NSString;
overload selector(static #"paperSize") = NSSize;
overload selector(static #"paragraphCharacterRange") = NSRange;
overload selector(static #"paragraphGlyphRange") = NSRange;
overload selector(static #"paragraphRangeForRange:") = NSRange, NSRange;
overload selector(static #"paragraphSeparatorCharacterRange") = NSRange;
overload selector(static #"paragraphSeparatorGlyphRange") = NSRange;
overload selector(static #"paragraphSpacing") = Float;
overload selector(static #"paragraphSpacingAfterGlyphAtIndex:withProposedLineFragmentRect:") = Float, UInt, NSRect;
overload selector(static #"paragraphSpacingBefore") = Float;
overload selector(static #"paragraphSpacingBeforeGlyphAtIndex:withProposedLineFragmentRect:") = Float, UInt, NSRect;
overload selector(static #"paragraphs") = NSArray;
overload selector(static #"paramDescriptorForKeyword:") = NSAppleEventDescriptor, CULong;
overload selector(static #"parameterString") = NSString;
overload selector(static #"parent") = NSXMLNode;
overload selector(static #"parentForItem:") = Id, Id;
overload selector(static #"parentForItemsInColumn:") = Id, Int;
overload selector(static #"parentItem") = NSMenuItem;
overload selector(static #"parentNode") = NSTreeNode;
overload selector(static #"parentRowForRow:") = Int, Int;
overload selector(static #"parentWindow") = NSWindow;
overload selector(static #"parse") = Bool;
overload selector(static #"parser:didEndElement:namespaceURI:qualifiedName:") = Void, NSXMLParser, NSString, NSString, NSString;
overload selector(static #"parser:didEndMappingPrefix:") = Void, NSXMLParser, NSString;
overload selector(static #"parser:didStartElement:namespaceURI:qualifiedName:attributes:") = Void, NSXMLParser, NSString, NSString, NSString, NSDictionary;
overload selector(static #"parser:didStartMappingPrefix:toURI:") = Void, NSXMLParser, NSString, NSString;
overload selector(static #"parser:foundAttributeDeclarationWithName:forElement:type:defaultValue:") = Void, NSXMLParser, NSString, NSString, NSString, NSString;
overload selector(static #"parser:foundCDATA:") = Void, NSXMLParser, NSData;
overload selector(static #"parser:foundCharacters:") = Void, NSXMLParser, NSString;
overload selector(static #"parser:foundComment:") = Void, NSXMLParser, NSString;
overload selector(static #"parser:foundElementDeclarationWithName:model:") = Void, NSXMLParser, NSString, NSString;
overload selector(static #"parser:foundExternalEntityDeclarationWithName:publicID:systemID:") = Void, NSXMLParser, NSString, NSString, NSString;
overload selector(static #"parser:foundIgnorableWhitespace:") = Void, NSXMLParser, NSString;
overload selector(static #"parser:foundInternalEntityDeclarationWithName:value:") = Void, NSXMLParser, NSString, NSString;
overload selector(static #"parser:foundNotationDeclarationWithName:publicID:systemID:") = Void, NSXMLParser, NSString, NSString, NSString;
overload selector(static #"parser:foundProcessingInstructionWithTarget:data:") = Void, NSXMLParser, NSString, NSString;
overload selector(static #"parser:foundUnparsedEntityDeclarationWithName:publicID:systemID:notationName:") = Void, NSXMLParser, NSString, NSString, NSString, NSString;
overload selector(static #"parser:parseErrorOccurred:") = Void, NSXMLParser, NSError;
overload selector(static #"parser:resolveExternalEntityName:systemID:") = NSData, NSXMLParser, NSString, NSString;
overload selector(static #"parser:validationErrorOccurred:") = Void, NSXMLParser, NSError;
overload selector(static #"parserDidEndDocument:") = Void, NSXMLParser;
overload selector(static #"parserDidStartDocument:") = Void, NSXMLParser;
overload selector(static #"parserError") = NSError;
overload selector(static #"password") = NSString;
overload selector(static #"paste:") = Void, Id;
overload selector(static #"pasteAsPlainText:") = Void, Id;
overload selector(static #"pasteAsRichText:") = Void, Id;
overload selector(static #"pasteFont:") = Void, Id;
overload selector(static #"pasteRuler:") = Void, Id;
overload selector(static #"pasteboard:item:provideDataForType:") = Void, NSPasteboard, NSPasteboardItem, NSString;
overload selector(static #"pasteboard:provideDataForType:") = Void, NSPasteboard, NSString;
overload selector(static #"pasteboardByFilteringData:ofType:") = NSPasteboard, NSData, NSString;
overload selector(static #"pasteboardByFilteringFile:") = NSPasteboard, NSString;
overload selector(static #"pasteboardByFilteringTypesInPasteboard:") = NSPasteboard, NSPasteboard;
overload selector(static #"pasteboardChangedOwner:") = Void, NSPasteboard;
overload selector(static #"pasteboardFinishedWithDataProvider:") = Void, NSPasteboard;
overload selector(static #"pasteboardItems") = NSArray;
overload selector(static #"pasteboardPropertyListForType:") = Id, NSString;
overload selector(static #"pasteboardWithName:") = NSPasteboard, NSString;
overload selector(static #"pasteboardWithUniqueName") = NSPasteboard;
overload selector(static #"path") = NSString;
overload selector(static #"pathCell:willDisplayOpenPanel:") = Void, NSPathCell, NSOpenPanel;
overload selector(static #"pathCell:willPopUpMenu:") = Void, NSPathCell, NSMenu;
overload selector(static #"pathComponentCellAtPoint:withFrame:inView:") = NSPathComponentCell, NSPoint, NSRect, NSView;
overload selector(static #"pathComponentCellClass") = Id;
overload selector(static #"pathComponentCells") = NSArray;
overload selector(static #"pathComponents") = NSArray;
overload selector(static #"pathContentOfSymbolicLinkAtPath:") = NSString, NSString;
overload selector(static #"pathControl:acceptDrop:") = Bool, NSPathControl, Id;
overload selector(static #"pathControl:shouldDragPathComponentCell:withPasteboard:") = Bool, NSPathControl, NSPathComponentCell, NSPasteboard;
overload selector(static #"pathControl:validateDrop:") = UInt, NSPathControl, Id;
overload selector(static #"pathControl:willDisplayOpenPanel:") = Void, NSPathControl, NSOpenPanel;
overload selector(static #"pathControl:willPopUpMenu:") = Void, NSPathControl, NSMenu;
overload selector(static #"pathExtension") = NSString;
overload selector(static #"pathForAuxiliaryExecutable:") = NSString, NSString;
overload selector(static #"pathForImageResource:") = NSString, NSString;
overload selector(static #"pathForResource:ofType:") = NSString, NSString, NSString;
overload selector(static #"pathForResource:ofType:inDirectory:") = NSString, NSString, NSString, NSString;
overload selector(static #"pathForResource:ofType:inDirectory:forLocalization:") = NSString, NSString, NSString, NSString, NSString;
overload selector(static #"pathForSoundResource:") = NSString, NSString;
overload selector(static #"pathSeparator") = NSString;
overload selector(static #"pathStyle") = Int;
overload selector(static #"pathToColumn:") = NSString, Int;
overload selector(static #"pathWithComponents:") = NSString, NSArray;
overload selector(static #"pathsForResourcesOfType:inDirectory:") = NSArray, NSString, NSString;
overload selector(static #"pathsForResourcesOfType:inDirectory:forLocalization:") = NSArray, NSString, NSString, NSString;
overload selector(static #"pathsMatchingExtensions:") = NSArray, NSArray;
overload selector(static #"patternImage") = NSImage;
overload selector(static #"patternPhase") = NSPoint;
overload selector(static #"pause") = Bool;
overload selector(static #"pauseSpeakingAtBoundary:") = Void, UInt;
overload selector(static #"perMillSymbol") = NSString;
overload selector(static #"percentSymbol") = NSString;
overload selector(static #"performActionForItem:") = Void, Id;
overload selector(static #"performActionForItemAtIndex:") = Void, Int;
overload selector(static #"performActionWithHighlightingForItemAtIndex:") = Void, Int;
overload selector(static #"performClick:") = Void, Id;
overload selector(static #"performClickOnCellAtColumn:row:") = Void, Int, Int;
overload selector(static #"performClickWithFrame:inView:") = Void, NSRect, NSView;
overload selector(static #"performClose:") = Void, Id;
overload selector(static #"performDefaultImplementation") = Id;
overload selector(static #"performDragOperation:") = Bool, Id;
overload selector(static #"performFileOperation:source:destination:files:tag:") = Bool, NSString, NSString, NSString, NSArray, Pointer[Int];
overload selector(static #"performFindPanelAction:") = Void, Id;
overload selector(static #"performKeyEquivalent:") = Bool, NSEvent;
overload selector(static #"performMiniaturize:") = Void, Id;
overload selector(static #"performMnemonic:") = Bool, NSString;
overload selector(static #"performSelector:") = Id, SelectorHandle;
overload selector(static #"performSelector:onThread:withObject:waitUntilDone:") = Void, SelectorHandle, NSThread, Id, Bool;
overload selector(static #"performSelector:onThread:withObject:waitUntilDone:modes:") = Void, SelectorHandle, NSThread, Id, Bool, NSArray;
overload selector(static #"performSelector:target:argument:order:modes:") = Void, SelectorHandle, Id, Id, UInt, NSArray;
overload selector(static #"performSelector:withObject:") = Id, SelectorHandle, Id;
overload selector(static #"performSelector:withObject:afterDelay:") = Void, SelectorHandle, Id, Double;
overload selector(static #"performSelector:withObject:afterDelay:inModes:") = Void, SelectorHandle, Id, Double, NSArray;
overload selector(static #"performSelector:withObject:withObject:") = Id, SelectorHandle, Id, Id;
overload selector(static #"performSelectorInBackground:withObject:") = Void, SelectorHandle, Id;
overload selector(static #"performSelectorOnMainThread:withObject:waitUntilDone:") = Void, SelectorHandle, Id, Bool;
overload selector(static #"performSelectorOnMainThread:withObject:waitUntilDone:modes:") = Void, SelectorHandle, Id, Bool, NSArray;
overload selector(static #"performZoom:") = Void, Id;
overload selector(static #"persistence") = UInt;
overload selector(static #"persistentDomainForName:") = NSDictionary, NSString;
overload selector(static #"persistentDomainNames") = NSArray;
overload selector(static #"persistentStoreTypeForFileType:") = NSString, NSString;
overload selector(static #"phase") = UInt;
overload selector(static #"phonemesFromText:") = NSString, NSString;
overload selector(static #"physicalMemory") = UInt64;
overload selector(static #"pipe") = Id;
overload selector(static #"pixelBuffer") = NSOpenGLPixelBuffer;
overload selector(static #"pixelBufferCubeMapFace") = UInt;
overload selector(static #"pixelBufferMipMapLevel") = Int;
overload selector(static #"pixelFormat") = NSOpenGLPixelFormat;
overload selector(static #"pixelsHigh") = Int;
overload selector(static #"pixelsWide") = Int;
overload selector(static #"placeholderAttributedString") = NSAttributedString;
overload selector(static #"placeholderString") = NSString;
overload selector(static #"play") = Bool;
overload selector(static #"playbackDeviceIdentifier") = NSString;
overload selector(static #"playsEveryFrame") = Bool;
overload selector(static #"playsSelectionOnly") = Bool;
overload selector(static #"plusSign") = NSString;
overload selector(static #"pointSize") = Float;
overload selector(static #"pointValue") = NSPoint;
overload selector(static #"pointerArrayWithOptions:") = Id, UInt;
overload selector(static #"pointerArrayWithPointerFunctions:") = Id, NSPointerFunctions;
overload selector(static #"pointerArrayWithStrongObjects") = Id;
overload selector(static #"pointerArrayWithWeakObjects") = Id;
overload selector(static #"pointerAtIndex:") = RawPointer, UInt;
overload selector(static #"pointerFunctions") = NSPointerFunctions;
overload selector(static #"pointerFunctionsWithOptions:") = Id, UInt;
overload selector(static #"pointerValue") = RawPointer;
overload selector(static #"pointingDeviceID") = UInt;
overload selector(static #"pointingDeviceSerialNumber") = UInt;
overload selector(static #"pointingDeviceType") = UInt;
overload selector(static #"pointingHandCursor") = NSCursor;
overload selector(static #"pop") = Void;
overload selector(static #"popUpContextMenu:withEvent:forView:") = Void, NSMenu, NSEvent, NSView;
overload selector(static #"popUpContextMenu:withEvent:forView:withFont:") = Void, NSMenu, NSEvent, NSView, NSFont;
overload selector(static #"popUpMenuPositioningItem:atLocation:inView:") = Bool, NSMenuItem, NSPoint, NSView;
overload selector(static #"popUpStatusItemMenu:") = Void, NSMenu;
overload selector(static #"port") = Id;
overload selector(static #"portCoderWithReceivePort:sendPort:components:") = Id, NSPort, NSPort, NSArray;
overload selector(static #"portForName:") = NSPort, NSString;
overload selector(static #"portForName:host:") = NSPort, NSString, NSString;
overload selector(static #"portForName:host:nameServerPortNumber:") = NSPort, NSString, NSString, UShort;
overload selector(static #"portList") = NSArray;
overload selector(static #"portWithMachPort:") = NSPort, UInt;
overload selector(static #"portWithMachPort:options:") = NSPort, UInt, UInt;
overload selector(static #"poseAsClass:") = Void, Id;
overload selector(static #"position") = UInt;
overload selector(static #"positionOfGlyph:forCharacter:struckOverRect:") = NSPoint, UInt, UShort, NSRect;
overload selector(static #"positionOfGlyph:precededByGlyph:isNominal:") = NSPoint, UInt, UInt, Pointer[Bool];
overload selector(static #"positionOfGlyph:struckOverGlyph:metricsExist:") = NSPoint, UInt, UInt, Pointer[Bool];
overload selector(static #"positionOfGlyph:struckOverRect:metricsExist:") = NSPoint, UInt, NSRect, Pointer[Bool];
overload selector(static #"positionOfGlyph:withRelation:toBaseGlyph:totalAdvancement:metricsExist:") = NSPoint, UInt, UInt, UInt, NSSizePointer, Pointer[Bool];
overload selector(static #"positionsForCompositeSequence:numberOfGlyphs:pointArray:") = Int, Pointer[UInt], Int, NSPointArray;
overload selector(static #"positiveFormat") = NSString;
overload selector(static #"positiveInfinitySymbol") = NSString;
overload selector(static #"positivePrefix") = NSString;
overload selector(static #"positiveSuffix") = NSString;
overload selector(static #"postEvent:atStart:") = Void, NSEvent, Bool;
overload selector(static #"postNotification:") = Void, NSNotification;
overload selector(static #"postNotificationName:object:") = Void, NSString, Id;
overload selector(static #"postNotificationName:object:userInfo:") = Void, NSString, Id, NSDictionary;
overload selector(static #"postNotificationName:object:userInfo:deliverImmediately:") = Void, NSString, NSString, NSDictionary, Bool;
overload selector(static #"postNotificationName:object:userInfo:options:") = Void, NSString, NSString, NSDictionary, UInt;
overload selector(static #"postsBoundsChangedNotifications") = Bool;
overload selector(static #"postsFrameChangedNotifications") = Bool;
overload selector(static #"postscriptName") = NSString;
overload selector(static #"precomposedStringWithCanonicalMapping") = NSString;
overload selector(static #"precomposedStringWithCompatibilityMapping") = NSString;
overload selector(static #"predefinedEntityDeclarationForName:") = NSXMLDTDNode, NSString;
overload selector(static #"predefinedNamespaceForPrefix:") = NSXMLNode, NSString;
overload selector(static #"predicate") = NSPredicate;
overload selector(static #"predicateForRow:") = NSPredicate, Int;
overload selector(static #"predicateFormat") = NSString;
overload selector(static #"predicateOperatorType") = UInt;
overload selector(static #"predicateWithBlock:") = NSPredicate, UnknownType;
overload varargSelector(static #"predicateWithFormat:") = NSPredicate, NSString;
overload selector(static #"predicateWithFormat:argumentArray:") = NSPredicate, NSString, NSArray;
overload selector(static #"predicateWithFormat:arguments:") = NSPredicate, NSString, va_list;
overload selector(static #"predicateWithLeftExpression:rightExpression:customSelector:") = NSPredicate, NSExpression, NSExpression, SelectorHandle;
overload selector(static #"predicateWithLeftExpression:rightExpression:modifier:type:options:") = NSPredicate, NSExpression, NSExpression, UInt, UInt, UInt;
overload selector(static #"predicateWithSubpredicates:") = NSPredicate, NSArray;
overload selector(static #"predicateWithSubstitutionVariables:") = NSPredicate, NSDictionary;
overload selector(static #"predicateWithValue:") = NSPredicate, Bool;
overload selector(static #"preferredBackingLocation") = UInt;
overload selector(static #"preferredEdge") = NSRectEdge;
overload selector(static #"preferredFilename") = NSString;
overload selector(static #"preferredFilenameExtensionForType:") = NSString, NSString;
overload selector(static #"preferredFontNames") = NSArray;
overload selector(static #"preferredFrameSize") = CGSize;
overload selector(static #"preferredLanguages") = NSArray;
overload selector(static #"preferredLocalizations") = NSArray;
overload selector(static #"preferredLocalizationsFromArray:") = NSArray, NSArray;
overload selector(static #"preferredLocalizationsFromArray:forPreferences:") = NSArray, NSArray, NSArray;
overload selector(static #"preferredPasteboardTypeFromArray:restrictedToTypesFromArray:") = NSString, NSArray, NSArray;
overload selector(static #"preferredSizeOfLayer:") = CGSize, CALayer;
overload selector(static #"prefersAllColumnUserResizing") = Bool;
overload selector(static #"prefersColorMatch") = Bool;
overload selector(static #"prefersTrackingUntilMouseUp") = Bool;
overload selector(static #"prefix") = NSString;
overload selector(static #"prefixForName:") = NSString, NSString;
overload selector(static #"preflightAndReturnError:") = Bool, Pointer[NSError];
overload selector(static #"prepareContent") = Void;
overload selector(static #"prepareForDragOperation:") = Bool, Id;
overload selector(static #"prepareGState") = Void;
overload selector(static #"prepareOpenGL") = Void;
overload selector(static #"preparePageLayout:") = Bool, NSPageLayout;
overload selector(static #"prepareSavePanel:") = Bool, NSSavePanel;
overload selector(static #"prepareWithInvocationTarget:") = Id, Id;
overload selector(static #"preparedCellAtColumn:row:") = NSCell, Int, Int;
overload selector(static #"prependTransform:") = Void, NSAffineTransform;
overload selector(static #"presentError:") = Bool, NSError;
overload selector(static #"presentError:modalForWindow:delegate:didPresentSelector:contextInfo:") = Void, NSError, NSWindow, Id, SelectorHandle, RawPointer;
overload selector(static #"presentationLayer") = Id;
overload selector(static #"presentationOptions") = UInt;
overload selector(static #"preservesContentDuringLiveResize") = Bool;
overload selector(static #"preservesSelection") = Bool;
overload selector(static #"pressedMouseButtons") = UInt;
overload selector(static #"pressure") = Float;
overload selector(static #"preventWindowOrdering") = Void;
overload selector(static #"preventsApplicationTerminationWhenModal") = Bool;
overload selector(static #"previousFailureCount") = Int;
overload selector(static #"previousKeyView") = NSView;
overload selector(static #"previousNode") = NSXMLNode;
overload selector(static #"previousSibling") = NSXMLNode;
overload selector(static #"previousValidKeyView") = NSView;
overload selector(static #"principalClass") = Id;
overload selector(static #"print:") = Void, Id;
overload selector(static #"printDocument:") = Void, Id;
overload selector(static #"printDocumentWithSettings:showPrintPanel:delegate:didPrintSelector:contextInfo:") = Void, NSDictionary, Bool, Id, SelectorHandle, RawPointer;
overload selector(static #"printInfo") = NSPrintInfo;
overload selector(static #"printJobTitle") = NSString;
overload selector(static #"printOperationWithSettings:error:") = NSPrintOperation, NSDictionary, Pointer[NSError];
overload selector(static #"printOperationWithView:") = NSPrintOperation, NSView;
overload selector(static #"printOperationWithView:printInfo:") = NSPrintOperation, NSView, NSPrintInfo;
overload selector(static #"printPanel") = NSPrintPanel;
overload selector(static #"printSettings") = NSMutableDictionary;
overload selector(static #"printShowingPrintPanel:") = Void, Bool;
overload selector(static #"printer") = NSPrinter;
overload selector(static #"printerFont") = NSFont;
overload selector(static #"printerNames") = NSArray;
overload selector(static #"printerTypes") = NSArray;
overload selector(static #"printerWithName:") = NSPrinter, NSString;
overload selector(static #"printerWithName:domain:includeUnavailable:") = NSPrinter, NSString, NSString, Bool;
overload selector(static #"printerWithType:") = NSPrinter, NSString;
overload selector(static #"printingAdjustmentInLayoutManager:forNominallySpacedGlyphRange:packedGlyphs:count:") = NSSize, NSLayoutManager, NSRange, Pointer[CUChar], UInt;
overload selector(static #"privateFrameworksPath") = NSString;
overload selector(static #"privateFrameworksURL") = NSURL;
overload selector(static #"processEditing") = Void;
overload selector(static #"processIdentifier") = Int;
overload selector(static #"processInfo") = NSProcessInfo;
overload selector(static #"processName") = NSString;
overload selector(static #"processingInstructionWithName:stringValue:") = Id, NSString, NSString;
overload selector(static #"processorCount") = UInt;
overload selector(static #"progressMarks") = NSArray;
overload selector(static #"prompt") = NSString;
overload selector(static #"properties") = NSDictionary;
overload selector(static #"propertiesToUpdate") = UInt;
overload selector(static #"propertyForKey:") = Id, NSString;
overload selector(static #"propertyForKey:inRequest:") = Id, NSString, NSURLRequest;
overload selector(static #"propertyForKeyIfAvailable:") = Id, NSString;
overload selector(static #"propertyList") = Id;
overload selector(static #"propertyList:isValidForFormat:") = Bool, Id, UInt;
overload selector(static #"propertyListForType:") = Id, NSString;
overload selector(static #"propertyListFromData:mutabilityOption:format:errorDescription:") = Id, NSData, UInt, Pointer[UInt], Pointer[NSString];
overload selector(static #"propertyListFromStringsFileFormat") = NSDictionary;
overload selector(static #"propertyListWithData:options:format:error:") = Id, NSData, UInt, Pointer[UInt], Pointer[NSError];
overload selector(static #"propertyListWithStream:options:format:error:") = Id, NSInputStream, UInt, Pointer[UInt], Pointer[NSError];
overload selector(static #"proposedCredential") = NSURLCredential;
overload selector(static #"protectionSpace") = NSURLProtectionSpace;
overload selector(static #"protocol") = Int;
overload selector(static #"protocolCheckerWithTarget:protocol:") = Id, NSObject, Id;
overload selector(static #"protocolFamily") = Int;
overload selector(static #"protocolSpecificInformation") = NSString;
overload selector(static #"prototype") = Id;
overload selector(static #"provideNewButtonImage") = NSImage;
overload selector(static #"provideNewView:") = NSView, Bool;
overload selector(static #"proxyType") = NSString;
overload selector(static #"proxyWithLocal:connection:") = NSDistantObject, Id, NSConnection;
overload selector(static #"proxyWithTarget:connection:") = NSDistantObject, Id, NSConnection;
overload selector(static #"publicID") = NSString;
overload selector(static #"publish") = Void;
overload selector(static #"publishWithOptions:") = Void, UInt;
overload selector(static #"pullsDown") = Bool;
overload selector(static #"punctuationCharacterSet") = Id;
overload selector(static #"purpleColor") = NSColor;
overload selector(static #"push") = Void;
overload selector(static #"putCell:atRow:column:") = Void, NSCell, Int, Int;
overload selector(static #"qdPort") = RawPointer;
overload selector(static #"quarter") = Int;
overload selector(static #"quarterSymbols") = NSArray;
overload selector(static #"query") = NSString;
overload selector(static #"queuePriority") = Int;
overload selector(static #"quoteCheckingResultWithRange:replacementString:") = NSTextCheckingResult, NSRange, NSString;
overload selector(static #"raise") = Void;
overload varargSelector(static #"raise:format:") = Void, NSString, NSString;
overload selector(static #"raise:format:arguments:") = Void, NSString, NSString, va_list;
overload selector(static #"raiseBaseline:") = Void, Id;
overload selector(static #"range") = NSRange;
overload selector(static #"rangeContainerObject") = Id;
overload selector(static #"rangeForUserCharacterAttributeChange") = NSRange;
overload selector(static #"rangeForUserCompletion") = NSRange;
overload selector(static #"rangeForUserParagraphAttributeChange") = NSRange;
overload selector(static #"rangeForUserTextChange") = NSRange;
overload selector(static #"rangeOfCharacterFromSet:") = NSRange, NSCharacterSet;
overload selector(static #"rangeOfCharacterFromSet:options:") = NSRange, NSCharacterSet, UInt;
overload selector(static #"rangeOfCharacterFromSet:options:range:") = NSRange, NSCharacterSet, UInt, NSRange;
overload selector(static #"rangeOfComposedCharacterSequenceAtIndex:") = NSRange, UInt;
overload selector(static #"rangeOfComposedCharacterSequencesForRange:") = NSRange, NSRange;
overload selector(static #"rangeOfData:options:range:") = NSRange, NSData, UInt, NSRange;
overload selector(static #"rangeOfNominallySpacedGlyphsContainingIndex:") = NSRange, UInt;
overload selector(static #"rangeOfString:") = NSRange, NSString;
overload selector(static #"rangeOfString:options:") = NSRange, NSString, UInt;
overload selector(static #"rangeOfString:options:range:") = NSRange, NSString, UInt, NSRange;
overload selector(static #"rangeOfString:options:range:locale:") = NSRange, NSString, UInt, NSRange, NSLocale;
overload selector(static #"rangeOfTextBlock:atIndex:") = NSRange, NSTextBlock, UInt;
overload selector(static #"rangeOfTextList:atIndex:") = NSRange, NSTextList, UInt;
overload selector(static #"rangeOfTextTable:atIndex:") = NSRange, NSTextTable, UInt;
overload selector(static #"rangeOfUnit:inUnit:forDate:") = NSRange, UInt, UInt, NSDate;
overload selector(static #"rangeOfUnit:startDate:interval:forDate:") = Bool, UInt, Pointer[NSDate], Pointer[Double], NSDate;
overload selector(static #"rangeValue") = NSRange;
overload selector(static #"rangesForUserCharacterAttributeChange") = NSArray;
overload selector(static #"rangesForUserParagraphAttributeChange") = NSArray;
overload selector(static #"rangesForUserTextChange") = NSArray;
overload selector(static #"rate") = Float;
overload selector(static #"read:maxLength:") = Int, Pointer[CUChar], UInt;
overload selector(static #"readDataOfLength:") = NSData, UInt;
overload selector(static #"readDataToEndOfFile") = NSData;
overload selector(static #"readFileContentsType:toFile:") = NSString, NSString, NSString;
overload selector(static #"readFileWrapper") = NSFileWrapper;
overload selector(static #"readFromData:ofType:error:") = Bool, NSData, NSString, Pointer[NSError];
overload selector(static #"readFromData:options:documentAttributes:") = Bool, NSData, NSDictionary, Pointer[NSDictionary];
overload selector(static #"readFromData:options:documentAttributes:error:") = Bool, NSData, NSDictionary, Pointer[NSDictionary], Pointer[NSError];
overload selector(static #"readFromFile:ofType:") = Bool, NSString, NSString;
overload selector(static #"readFromFileWrapper:ofType:error:") = Bool, NSFileWrapper, NSString, Pointer[NSError];
overload selector(static #"readFromURL:ofType:") = Bool, NSURL, NSString;
overload selector(static #"readFromURL:ofType:error:") = Bool, NSURL, NSString, Pointer[NSError];
overload selector(static #"readFromURL:options:documentAttributes:") = Bool, NSURL, NSDictionary, Pointer[NSDictionary];
overload selector(static #"readFromURL:options:documentAttributes:error:") = Bool, NSURL, NSDictionary, Pointer[NSDictionary], Pointer[NSError];
overload selector(static #"readFromURL:options:error:") = Bool, NSURL, UInt, Pointer[NSError];
overload selector(static #"readInBackgroundAndNotify") = Void;
overload selector(static #"readInBackgroundAndNotifyForModes:") = Void, NSArray;
overload selector(static #"readObjectsForClasses:options:") = NSArray, NSArray, NSDictionary;
overload selector(static #"readPrintInfo") = Void;
overload selector(static #"readRTFDFromFile:") = Bool, NSString;
overload selector(static #"readSelectionFromPasteboard:") = Bool, NSPasteboard;
overload selector(static #"readSelectionFromPasteboard:type:") = Bool, NSPasteboard, NSString;
overload selector(static #"readToEndOfFileInBackgroundAndNotify") = Void;
overload selector(static #"readToEndOfFileInBackgroundAndNotifyForModes:") = Void, NSArray;
overload selector(static #"readablePasteboardTypes") = NSArray;
overload selector(static #"readableTypes") = NSArray;
overload selector(static #"readableTypesForPasteboard:") = NSArray, NSPasteboard;
overload selector(static #"readingOptionsForType:pasteboard:") = UInt, NSString, NSPasteboard;
overload selector(static #"realm") = NSString;
overload selector(static #"rearrangeObjects") = Void;
overload selector(static #"reason") = NSString;
overload selector(static #"recache") = Void;
overload selector(static #"recalculateKeyViewLoop") = Void;
overload selector(static #"receivePort") = NSPort;
overload selector(static #"receiversSpecifier") = NSScriptObjectSpecifier;
overload selector(static #"receivesCredentialSecurely") = Bool;
overload selector(static #"recentDocumentURLs") = NSArray;
overload selector(static #"recentSearches") = NSArray;
overload selector(static #"recentsAutosaveName") = NSString;
overload selector(static #"recordDescriptor") = NSAppleEventDescriptor;
overload selector(static #"recoveryAttempter") = Id;
overload selector(static #"rect") = NSRect;
overload selector(static #"rectArrayForCharacterRange:withinSelectedCharacterRange:inTextContainer:rectCount:") = NSRectArray, NSRange, NSRange, NSTextContainer, Pointer[UInt];
overload selector(static #"rectArrayForGlyphRange:withinSelectedGlyphRange:inTextContainer:rectCount:") = NSRectArray, NSRange, NSRange, NSTextContainer, Pointer[UInt];
overload selector(static #"rectForBlock:layoutAtPoint:inRect:textContainer:characterRange:") = NSRect, NSTextTableBlock, NSPoint, NSRect, NSTextContainer, NSRange;
overload selector(static #"rectForKey:inTable:") = NSRect, NSString, NSString;
overload selector(static #"rectForLayoutAtPoint:inRect:textContainer:characterRange:") = NSRect, NSPoint, NSRect, NSTextContainer, NSRange;
overload selector(static #"rectForPage:") = NSRect, Int;
overload selector(static #"rectForPart:") = NSRect, UInt;
overload selector(static #"rectOfColumn:") = NSRect, Int;
overload selector(static #"rectOfItemAtIndex:") = NSRect, Int;
overload selector(static #"rectOfPathComponentCell:withFrame:inView:") = NSRect, NSPathComponentCell, NSRect, NSView;
overload selector(static #"rectOfRow:") = NSRect, Int;
overload selector(static #"rectOfTickMarkAtIndex:") = NSRect, Int;
overload selector(static #"rectPreservedDuringLiveResize") = NSRect;
overload selector(static #"rectValue") = NSRect;
overload selector(static #"recycleURLs:completionHandler:") = Void, NSArray, UnknownType;
overload selector(static #"red") = Float;
overload selector(static #"redColor") = NSColor;
overload selector(static #"redComponent") = Float;
overload selector(static #"redo") = Void;
overload selector(static #"redoActionName") = NSString;
overload selector(static #"redoMenuItemTitle") = NSString;
overload selector(static #"redoMenuTitleForUndoActionName:") = NSString, NSString;
overload selector(static #"reflectScrolledClipView:") = Void, NSClipView;
overload selector(static #"refusesFirstResponder") = Bool;
overload selector(static #"registerBooksInBundle:") = Bool, NSBundle;
overload selector(static #"registerClass:") = Bool, Id;
overload selector(static #"registerClassDescription:") = Void, NSScriptClassDescription;
overload selector(static #"registerClassDescription:forClass:") = Void, NSClassDescription, Id;
overload selector(static #"registerCoercer:selector:toConvertFromClass:toClass:") = Void, Id, SelectorHandle, Id, Id;
overload selector(static #"registerCommandDescription:") = Void, NSScriptCommandDescription;
overload selector(static #"registerDefaults:") = Void, NSDictionary;
overload selector(static #"registerForDraggedTypes:") = Void, NSArray;
overload selector(static #"registerForServices") = Void;
overload selector(static #"registerImageRepClass:") = Void, Id;
overload selector(static #"registerLanguage:byVendor:") = Bool, NSString, NSString;
overload selector(static #"registerName:") = Bool, NSString;
overload selector(static #"registerName:withNameServer:") = Bool, NSString, NSPortNameServer;
overload selector(static #"registerPort:name:") = Bool, NSPort, NSString;
overload selector(static #"registerPort:name:nameServerPortNumber:") = Bool, NSPort, NSString, UShort;
overload selector(static #"registerServicesMenuSendTypes:returnTypes:") = Void, NSArray, NSArray;
overload selector(static #"registerURLHandleClass:") = Void, Id;
overload selector(static #"registerUndoWithTarget:selector:object:") = Void, Id, SelectorHandle, Id;
overload selector(static #"registerUnitWithName:abbreviation:unitToPointsConversionFactor:stepUpCycle:stepDownCycle:") = Void, NSString, NSString, Float, NSArray, NSArray;
overload selector(static #"registerUserInterfaceItemSearchHandler:") = Void, Id;
overload selector(static #"registeredDraggedTypes") = NSArray;
overload selector(static #"registeredImageRepClasses") = NSArray;
overload selector(static #"regularFileContents") = NSData;
overload selector(static #"relativeCurveToPoint:controlPoint1:controlPoint2:") = Void, NSPoint, NSPoint, NSPoint;
overload selector(static #"relativeLineToPoint:") = Void, NSPoint;
overload selector(static #"relativeMoveToPoint:") = Void, NSPoint;
overload selector(static #"relativePath") = NSString;
overload selector(static #"relativePosition") = UInt;
overload selector(static #"relativeString") = NSString;
overload selector(static #"release") = Void;
overload selector(static #"releaseCGLContext:") = Void, CGLContextObj;
overload selector(static #"releaseCGLPixelFormat:") = Void, CGLPixelFormatObj;
overload selector(static #"releaseGState") = Void;
overload selector(static #"releaseGlobally") = Void;
overload selector(static #"relinquishFunction") = CCodePointer[(RawPointer,CCodePointer[(RawPointer),(UInt)]),()];
overload selector(static #"reloadColumn:") = Void, Int;
overload selector(static #"reloadCriteria") = Void;
overload selector(static #"reloadData") = Void;
overload selector(static #"reloadDataForRowIndexes:columnIndexes:") = Void, NSIndexSet, NSIndexSet;
overload selector(static #"reloadDataForRowIndexes:inColumn:") = Void, NSIndexSet, Int;
overload selector(static #"reloadDefaultFontFamilies") = Void;
overload selector(static #"reloadItem:") = Void, Id;
overload selector(static #"reloadItem:reloadChildren:") = Void, Id, Bool;
overload selector(static #"reloadPredicate") = Void;
overload selector(static #"remoteObjects") = NSArray;
overload selector(static #"remove:") = Void, Id;
overload selector(static #"removeAccessoryController:") = Void, NSViewController;
overload selector(static #"removeAllActions") = Void;
overload selector(static #"removeAllActionsWithTarget:") = Void, Id;
overload selector(static #"removeAllAnimations") = Void;
overload selector(static #"removeAllCachedResponses") = Void;
overload selector(static #"removeAllIndexes") = Void;
overload selector(static #"removeAllItems") = Void;
overload selector(static #"removeAllObjects") = Void;
overload selector(static #"removeAllPoints") = Void;
overload selector(static #"removeAllToolTips") = Void;
overload selector(static #"removeAnimationForKey:") = Void, NSString;
overload selector(static #"removeAttribute:range:") = Void, NSString, NSRange;
overload selector(static #"removeAttributeForName:") = Void, NSString;
overload selector(static #"removeCachedResponseForRequest:") = Void, NSURLRequest;
overload selector(static #"removeCharactersInRange:") = Void, NSRange;
overload selector(static #"removeCharactersInString:") = Void, NSString;
overload selector(static #"removeChildAtIndex:") = Void, UInt;
overload selector(static #"removeChildWindow:") = Void, NSWindow;
overload selector(static #"removeClient:") = Void, Id;
overload selector(static #"removeCollection:") = Bool, NSString;
overload selector(static #"removeColorWithKey:") = Void, NSString;
overload selector(static #"removeColumn:") = Void, Int;
overload selector(static #"removeConnection:fromRunLoop:forMode:") = Void, NSConnection, NSRunLoop, NSString;
overload selector(static #"removeContextHelpForObject:") = Void, Id;
overload selector(static #"removeCredential:forProtectionSpace:") = Void, NSURLCredential, NSURLProtectionSpace;
overload selector(static #"removeCursorRect:cursor:") = Void, NSRect, NSCursor;
overload selector(static #"removeDependency:") = Void, NSOperation;
overload selector(static #"removeDescriptorAtIndex:") = Void, Int;
overload selector(static #"removeDescriptorWithKeyword:") = Void, CULong;
overload selector(static #"removeDocument:") = Void, NSDocument;
overload selector(static #"removeEntryAtIndex:") = Void, Int;
overload selector(static #"removeEventHandlerForEventClass:andEventID:") = Void, CULong, CULong;
overload selector(static #"removeFile") = Void;
overload selector(static #"removeFileAtPath:handler:") = Bool, NSString, Id;
overload selector(static #"removeFileWrapper:") = Void, NSFileWrapper;
overload selector(static #"removeFontDescriptor:fromCollection:") = Void, NSFontDescriptor, NSString;
overload selector(static #"removeFontTrait:") = Void, Id;
overload selector(static #"removeFrameUsingName:") = Void, NSString;
overload selector(static #"removeFromRunLoop:forMode:") = Void, NSRunLoop, NSString;
overload selector(static #"removeFromSuperlayer") = Void;
overload selector(static #"removeFromSuperview") = Void;
overload selector(static #"removeFromSuperviewWithoutNeedingDisplay") = Void;
overload selector(static #"removeIndex:") = Void, UInt;
overload selector(static #"removeIndexes:") = Void, NSIndexSet;
overload selector(static #"removeIndexesInRange:") = Void, NSRange;
overload selector(static #"removeItem:") = Void, NSMenuItem;
overload selector(static #"removeItemAtIndex:") = Void, Int;
overload selector(static #"removeItemAtPath:error:") = Bool, NSString, Pointer[NSError];
overload selector(static #"removeItemAtURL:error:") = Bool, NSURL, Pointer[NSError];
overload selector(static #"removeItemWithObjectValue:") = Void, Id;
overload selector(static #"removeItemWithTitle:") = Void, NSString;
overload selector(static #"removeLastObject") = Void;
overload selector(static #"removeLayoutManager:") = Void, NSLayoutManager;
overload selector(static #"removeMarker:") = Void, NSRulerMarker;
overload selector(static #"removeMonitor:") = Void, Id;
overload selector(static #"removeNamespaceForPrefix:") = Void, NSString;
overload selector(static #"removeObject:") = Void, Id;
overload selector(static #"removeObject:inRange:") = Void, Id, NSRange;
overload selector(static #"removeObjectAtArrangedObjectIndex:") = Void, UInt;
overload selector(static #"removeObjectAtArrangedObjectIndexPath:") = Void, NSIndexPath;
overload selector(static #"removeObjectAtIndex:") = Void, UInt;
overload selector(static #"removeObjectForKey:") = Void, Id;
overload selector(static #"removeObjectIdenticalTo:") = Void, Id;
overload selector(static #"removeObjectIdenticalTo:inRange:") = Void, Id, NSRange;
overload selector(static #"removeObjects:") = Void, NSArray;
overload selector(static #"removeObjectsAtArrangedObjectIndexPaths:") = Void, NSArray;
overload selector(static #"removeObjectsAtArrangedObjectIndexes:") = Void, NSIndexSet;
overload selector(static #"removeObjectsAtIndexes:") = Void, NSIndexSet;
overload selector(static #"removeObjectsForKeys:") = Void, NSArray;
overload selector(static #"removeObjectsFromIndices:numIndices:") = Void, Pointer[UInt], UInt;
overload selector(static #"removeObjectsInArray:") = Void, NSArray;
overload selector(static #"removeObjectsInRange:") = Void, NSRange;
overload selector(static #"removeObserver:") = Void, Id;
overload selector(static #"removeObserver:forKeyPath:") = Void, NSObject, NSString;
overload selector(static #"removeObserver:fromObjectsAtIndexes:forKeyPath:") = Void, NSObject, NSIndexSet, NSString;
overload selector(static #"removeObserver:name:object:") = Void, Id, NSString, Id;
overload selector(static #"removeParamDescriptorWithKeyword:") = Void, CULong;
overload selector(static #"removePersistentDomainForName:") = Void, NSString;
overload selector(static #"removePointerAtIndex:") = Void, UInt;
overload selector(static #"removePort:forMode:") = Void, NSPort, NSString;
overload selector(static #"removePortForName:") = Bool, NSString;
overload selector(static #"removeProgressMark:") = Void, Float;
overload selector(static #"removePropertyForKey:inRequest:") = Void, NSString, NSMutableURLRequest;
overload selector(static #"removeRepresentation:") = Void, NSImageRep;
overload selector(static #"removeRequestMode:") = Void, NSString;
overload selector(static #"removeRow:") = Void, Int;
overload selector(static #"removeRowAtIndex:") = Void, Int;
overload selector(static #"removeRowsAtIndexes:includeSubrows:") = Void, NSIndexSet, Bool;
overload selector(static #"removeRunLoop:") = Void, NSRunLoop;
overload selector(static #"removeSavedColumnsWithAutosaveName:") = Void, NSString;
overload selector(static #"removeSelectedObjects:") = Bool, NSArray;
overload selector(static #"removeSelectionIndexPaths:") = Bool, NSArray;
overload selector(static #"removeSelectionIndexes:") = Bool, NSIndexSet;
overload selector(static #"removeStatusItem:") = Void, NSStatusItem;
overload selector(static #"removeSuiteNamed:") = Void, NSString;
overload selector(static #"removeTabStop:") = Void, NSTextTab;
overload selector(static #"removeTabViewItem:") = Void, NSTabViewItem;
overload selector(static #"removeTableColumn:") = Void, NSTableColumn;
overload selector(static #"removeTemporaryAttribute:forCharacterRange:") = Void, NSString, NSRange;
overload selector(static #"removeTextContainerAtIndex:") = Void, UInt;
overload selector(static #"removeToolTip:") = Void, Int;
overload selector(static #"removeTrackingArea:") = Void, NSTrackingArea;
overload selector(static #"removeTrackingRect:") = Void, Int;
overload selector(static #"removeValueAtIndex:fromPropertyWithKey:") = Void, UInt, NSString;
overload selector(static #"removeVolatileDomainForName:") = Void, NSString;
overload selector(static #"removeWindowController:") = Void, NSWindowController;
overload selector(static #"removeWindowsItem:") = Void, NSWindow;
overload selector(static #"renamingIdentifier") = NSString;
overload selector(static #"renderInContext:") = Void, CGContextRef;
overload selector(static #"renderingMode") = UInt;
overload selector(static #"renewGState") = Void;
overload selector(static #"renewRows:columns:") = Void, Int, Int;
overload selector(static #"reopenDocumentForURL:withContentsOfURL:error:") = Bool, NSURL, NSURL, Pointer[NSError];
overload selector(static #"repeatCount") = Float;
overload selector(static #"repeatDuration") = Double;
overload selector(static #"replaceBytesInRange:withBytes:") = Void, NSRange, RawPointer;
overload selector(static #"replaceBytesInRange:withBytes:length:") = Void, NSRange, RawPointer, UInt;
overload selector(static #"replaceCharactersInRange:withAttributedString:") = Void, NSRange, NSAttributedString;
overload selector(static #"replaceCharactersInRange:withRTF:") = Void, NSRange, NSData;
overload selector(static #"replaceCharactersInRange:withRTFD:") = Void, NSRange, NSData;
overload selector(static #"replaceCharactersInRange:withString:") = Void, NSRange, NSString;
overload selector(static #"replaceChildAtIndex:withNode:") = Void, UInt, NSXMLNode;
overload selector(static #"replaceGlyphAtIndex:withGlyph:") = Void, UInt, UInt;
overload selector(static #"replaceItemAtURL:withItemAtURL:backupItemName:options:resultingItemURL:error:") = Bool, NSURL, NSURL, NSString, UInt, Pointer[NSURL], Pointer[NSError];
overload selector(static #"replaceLayoutManager:") = Void, NSLayoutManager;
overload selector(static #"replaceObject:withObject:") = Void, Id, Id;
overload selector(static #"replaceObjectAtIndex:withObject:") = Void, UInt, Id;
overload selector(static #"replaceObjectsAtIndexes:withObjects:") = Void, NSIndexSet, NSArray;
overload selector(static #"replaceObjectsInRange:withObjectsFromArray:") = Void, NSRange, NSArray;
overload selector(static #"replaceObjectsInRange:withObjectsFromArray:range:") = Void, NSRange, NSArray, NSRange;
overload selector(static #"replaceOccurrencesOfString:withString:options:range:") = UInt, NSString, NSString, UInt, NSRange;
overload selector(static #"replacePointerAtIndex:withPointer:") = Void, UInt, RawPointer;
overload selector(static #"replaceSublayer:with:") = Void, CALayer, CALayer;
overload selector(static #"replaceSubview:with:") = Void, NSView, NSView;
overload selector(static #"replaceTextContainer:") = Void, NSTextContainer;
overload selector(static #"replaceTextStorage:") = Void, NSTextStorage;
overload selector(static #"replaceValueAtIndex:inPropertyWithKey:withValue:") = Void, UInt, NSString, Id;
overload selector(static #"replacementCheckingResultWithRange:replacementString:") = NSTextCheckingResult, NSRange, NSString;
overload selector(static #"replacementClassForClass:") = Id, Id;
overload selector(static #"replacementObjectForArchiver:") = Id, NSArchiver;
overload selector(static #"replacementObjectForCoder:") = Id, NSCoder;
overload selector(static #"replacementObjectForKeyedArchiver:") = Id, NSKeyedArchiver;
overload selector(static #"replacementObjectForPortCoder:") = Id, NSPortCoder;
overload selector(static #"replacementString") = NSString;
overload selector(static #"replyAppleEventForSuspensionID:") = NSAppleEventDescriptor, NSAppleEventManagerSuspensionID;
overload selector(static #"replyTimeout") = Double;
overload selector(static #"replyToApplicationShouldTerminate:") = Void, Bool;
overload selector(static #"replyToOpenOrPrint:") = Void, UInt;
overload selector(static #"replyWithException:") = Void, NSException;
overload selector(static #"reportException:") = Void, NSException;
overload selector(static #"representationOfImageRepsInArray:usingType:properties:") = NSData, NSArray, UInt, NSDictionary;
overload selector(static #"representationUsingType:properties:") = NSData, UInt, NSDictionary;
overload selector(static #"representations") = NSArray;
overload selector(static #"representedFilename") = NSString;
overload selector(static #"representedObject") = Id;
overload selector(static #"representedURL") = NSURL;
overload selector(static #"request") = NSURLRequest;
overload selector(static #"requestCheckingOfString:range:types:options:inSpellDocumentWithTag:completionHandler:") = Int, NSString, NSRange, UInt64, NSDictionary, Int, UnknownType;
overload selector(static #"requestHeaderFieldsWithCookies:") = NSDictionary, NSArray;
overload selector(static #"requestIsCacheEquivalent:toRequest:") = Bool, NSURLRequest, NSURLRequest;
overload selector(static #"requestModes") = NSArray;
overload selector(static #"requestTimeout") = Double;
overload selector(static #"requestUserAttention:") = Int, UInt;
overload selector(static #"requestWithURL:") = Id, NSURL;
overload selector(static #"requestWithURL:cachePolicy:timeoutInterval:") = Id, NSURL, UInt, Double;
overload selector(static #"requiredFileType") = NSString;
overload selector(static #"requiredThickness") = Float;
overload selector(static #"reservedSpaceLength") = UInt;
overload selector(static #"reservedThicknessForAccessoryView") = Float;
overload selector(static #"reservedThicknessForMarkers") = Float;
overload selector(static #"reset") = Void;
overload selector(static #"resetBytesInRange:") = Void, NSRange;
overload selector(static #"resetCancelButtonCell") = Void;
overload selector(static #"resetCursorRect:inView:") = Void, NSRect, NSView;
overload selector(static #"resetCursorRects") = Void;
overload selector(static #"resetSearchButtonCell") = Void;
overload selector(static #"resetStandardUserDefaults") = Void;
overload selector(static #"resetSystemTimeZone") = Void;
overload selector(static #"reshape") = Void;
overload selector(static #"resignFirstResponder") = Bool;
overload selector(static #"resignKeyWindow") = Void;
overload selector(static #"resignMainWindow") = Void;
overload selector(static #"resizeDownCursor") = NSCursor;
overload selector(static #"resizeFlags") = Int;
overload selector(static #"resizeIncrements") = NSSize;
overload selector(static #"resizeLeftCursor") = NSCursor;
overload selector(static #"resizeLeftRightCursor") = NSCursor;
overload selector(static #"resizeRightCursor") = NSCursor;
overload selector(static #"resizeSublayersWithOldSize:") = Void, CGSize;
overload selector(static #"resizeSubviewsWithOldSize:") = Void, NSSize;
overload selector(static #"resizeUpCursor") = NSCursor;
overload selector(static #"resizeUpDownCursor") = NSCursor;
overload selector(static #"resizeWithMagnification:") = Void, Float;
overload selector(static #"resizeWithOldSuperlayerSize:") = Void, CGSize;
overload selector(static #"resizeWithOldSuperviewSize:") = Void, NSSize;
overload selector(static #"resizedColumn") = Int;
overload selector(static #"resizingMask") = UInt;
overload selector(static #"resolve") = Void;
overload selector(static #"resolveClassMethod:") = Bool, SelectorHandle;
overload selector(static #"resolveInstanceMethod:") = Bool, SelectorHandle;
overload selector(static #"resolveNamespaceForName:") = NSXMLNode, NSString;
overload selector(static #"resolvePrefixForNamespaceURI:") = NSString, NSString;
overload selector(static #"resolveWithTimeout:") = Void, Double;
overload selector(static #"resolvedKeyDictionary") = NSDictionary;
overload selector(static #"resolvesAliases") = Bool;
overload selector(static #"resourceData") = NSData;
overload selector(static #"resourceDataUsingCache:") = NSData, Bool;
overload selector(static #"resourcePath") = NSString;
overload selector(static #"resourceSpecifier") = NSString;
overload selector(static #"resourceURL") = NSURL;
overload selector(static #"resourceValuesForKeys:error:") = NSDictionary, NSArray, Pointer[NSError];
overload selector(static #"resourceValuesForKeys:fromBookmarkData:") = NSDictionary, NSArray, NSData;
overload selector(static #"respondsToSelector:") = Bool, SelectorHandle;
overload selector(static #"response") = NSURLResponse;
overload selector(static #"restoreCachedImage") = Void;
overload selector(static #"restoreGraphicsState") = Void;
overload selector(static #"result") = Id;
overload selector(static #"resultAtIndex:") = Id, UInt;
overload selector(static #"resultCount") = UInt;
overload selector(static #"resultType") = UInt64;
overload selector(static #"results") = NSArray;
overload selector(static #"resume") = Bool;
overload selector(static #"resumeData") = NSData;
overload selector(static #"resumeExecutionWithResult:") = Void, Id;
overload selector(static #"resumeWithSuspensionID:") = Void, NSAppleEventManagerSuspensionID;
overload selector(static #"retain") = Id;
overload selector(static #"retainArguments") = Void;
overload selector(static #"retainCount") = UInt;
overload selector(static #"returnID") = Short;
overload selector(static #"returnType") = NSString;
overload selector(static #"reusesColumns") = Bool;
overload selector(static #"reverseObjectEnumerator") = NSEnumerator;
overload selector(static #"reverseTransformedValue:") = Id, Id;
overload selector(static #"reversedSortDescriptor") = Id;
overload selector(static #"revert:") = Void, Id;
overload selector(static #"revertDocumentToSaved:") = Void, Id;
overload selector(static #"revertToContentsOfURL:ofType:error:") = Bool, NSURL, NSString, Pointer[NSError];
overload selector(static #"revertToInitialValues:") = Void, Id;
overload selector(static #"revertToSavedFromFile:ofType:") = Bool, NSString, NSString;
overload selector(static #"revertToSavedFromURL:ofType:") = Bool, NSURL, NSString;
overload selector(static #"reviewUnsavedDocumentsWithAlertTitle:cancellable:delegate:didReviewAllSelector:contextInfo:") = Void, NSString, Bool, Id, SelectorHandle, RawPointer;
overload selector(static #"richTextSource") = NSAttributedString;
overload selector(static #"rightExpression") = NSExpression;
overload selector(static #"rightExpressionAttributeType") = UInt;
overload selector(static #"rightExpressions") = NSArray;
overload selector(static #"rightMargin") = Float;
overload selector(static #"rightMouseDown:") = Void, NSEvent;
overload selector(static #"rightMouseDragged:") = Void, NSEvent;
overload selector(static #"rightMouseUp:") = Void, NSEvent;
overload selector(static #"rootDocument") = NSXMLDocument;
overload selector(static #"rootElement") = NSXMLElement;
overload selector(static #"rootItemForBrowser:") = Id, NSBrowser;
overload selector(static #"rootObject") = Id;
overload selector(static #"rootProxy") = NSDistantObject;
overload selector(static #"rootProxyForConnectionWithRegisteredName:host:") = NSDistantObject, NSString, NSString;
overload selector(static #"rootProxyForConnectionWithRegisteredName:host:usingNameServer:") = NSDistantObject, NSString, NSString, NSPortNameServer;
overload selector(static #"rotateByAngle:") = Void, Float;
overload selector(static #"rotateByDegrees:") = Void, Float;
overload selector(static #"rotateByRadians:") = Void, Float;
overload selector(static #"rotateWithEvent:") = Void, NSEvent;
overload selector(static #"rotation") = Float;
overload selector(static #"roundingBehavior") = NSDecimalNumberHandler;
overload selector(static #"roundingIncrement") = NSNumber;
overload selector(static #"roundingMode") = UInt;
overload selector(static #"rowAtPoint:") = Int, NSPoint;
overload selector(static #"rowClass") = Id;
overload selector(static #"rowForDisplayValue:") = Int, Id;
overload selector(static #"rowForItem:") = Int, Id;
overload selector(static #"rowHeight") = Float;
overload selector(static #"rowSpan") = Int;
overload selector(static #"rowTemplates") = NSArray;
overload selector(static #"rowTypeForRow:") = UInt, Int;
overload selector(static #"rowTypeKeyPath") = NSString;
overload selector(static #"rowsInRect:") = NSRange, NSRect;
overload selector(static #"ruleEditor:child:forCriterion:withRowType:") = Id, NSRuleEditor, Int, Id, UInt;
overload selector(static #"ruleEditor:displayValueForCriterion:inRow:") = Id, NSRuleEditor, Id, Int;
overload selector(static #"ruleEditor:numberOfChildrenForCriterion:withRowType:") = Int, NSRuleEditor, Id, UInt;
overload selector(static #"ruleEditor:predicatePartsForCriterion:withDisplayValue:inRow:") = NSDictionary, NSRuleEditor, Id, Id, Int;
overload selector(static #"ruleEditorRowsDidChange:") = Void, NSNotification;
overload selector(static #"ruleThickness") = Float;
overload selector(static #"ruler") = NSRulerView;
overload selector(static #"rulerAccessoryViewForTextView:paragraphStyle:ruler:enabled:") = NSView, NSTextView, NSParagraphStyle, NSRulerView, Bool;
overload selector(static #"rulerAttributesInRange:") = NSDictionary, NSRange;
overload selector(static #"rulerMarkersForTextView:paragraphStyle:ruler:") = NSArray, NSTextView, NSParagraphStyle, NSRulerView;
overload selector(static #"rulerView:didAddMarker:") = Void, NSRulerView, NSRulerMarker;
overload selector(static #"rulerView:didMoveMarker:") = Void, NSRulerView, NSRulerMarker;
overload selector(static #"rulerView:didRemoveMarker:") = Void, NSRulerView, NSRulerMarker;
overload selector(static #"rulerView:handleMouseDown:") = Void, NSRulerView, NSEvent;
overload selector(static #"rulerView:shouldAddMarker:") = Bool, NSRulerView, NSRulerMarker;
overload selector(static #"rulerView:shouldMoveMarker:") = Bool, NSRulerView, NSRulerMarker;
overload selector(static #"rulerView:shouldRemoveMarker:") = Bool, NSRulerView, NSRulerMarker;
overload selector(static #"rulerView:willAddMarker:atLocation:") = Float, NSRulerView, NSRulerMarker, Float;
overload selector(static #"rulerView:willMoveMarker:toLocation:") = Float, NSRulerView, NSRulerMarker, Float;
overload selector(static #"rulerView:willSetClientView:") = Void, NSRulerView, NSView;
overload selector(static #"rulerViewClass") = Id;
overload selector(static #"rulersVisible") = Bool;
overload selector(static #"run") = Void;
overload selector(static #"runActionForKey:object:arguments:") = Void, NSString, Id, NSDictionary;
overload selector(static #"runCustomizationPalette:") = Void, Id;
overload selector(static #"runInNewThread") = Void;
overload selector(static #"runLoopModes") = NSArray;
overload selector(static #"runLoopModesForAnimating") = NSArray;
overload selector(static #"runModal") = Int;
overload selector(static #"runModalForDirectory:file:") = Int, NSString, NSString;
overload selector(static #"runModalForDirectory:file:types:") = Int, NSString, NSString, NSArray;
overload selector(static #"runModalForTypes:") = Int, NSArray;
overload selector(static #"runModalForWindow:") = Int, NSWindow;
overload selector(static #"runModalForWindow:relativeToWindow:") = Int, NSWindow, NSWindow;
overload selector(static #"runModalOpenPanel:forTypes:") = Int, NSOpenPanel, NSArray;
overload selector(static #"runModalPageLayoutWithPrintInfo:") = Int, NSPrintInfo;
overload selector(static #"runModalPageLayoutWithPrintInfo:delegate:didRunSelector:contextInfo:") = Void, NSPrintInfo, Id, SelectorHandle, RawPointer;
overload selector(static #"runModalPrintOperation:delegate:didRunSelector:contextInfo:") = Void, NSPrintOperation, Id, SelectorHandle, RawPointer;
overload selector(static #"runModalSavePanelForSaveOperation:delegate:didSaveSelector:contextInfo:") = Void, UInt, Id, SelectorHandle, RawPointer;
overload selector(static #"runModalSession:") = Int, NSModalSession;
overload selector(static #"runModalWithPrintInfo:") = Int, NSPrintInfo;
overload selector(static #"runMode:beforeDate:") = Bool, NSString, NSDate;
overload selector(static #"runOperation") = Bool;
overload selector(static #"runOperationModalForWindow:delegate:didRunSelector:contextInfo:") = Void, NSWindow, Id, SelectorHandle, RawPointer;
overload selector(static #"runPageLayout:") = Void, Id;
overload selector(static #"runToolbarCustomizationPalette:") = Void, Id;
overload selector(static #"runUntilDate:") = Void, NSDate;
overload selector(static #"runningApplicationWithProcessIdentifier:") = NSRunningApplication, Int;
overload selector(static #"runningApplications") = NSArray;
overload selector(static #"runningApplicationsWithBundleIdentifier:") = NSArray, NSString;
overload selector(static #"sRGBColorSpace") = NSColorSpace;
overload selector(static #"samplesPerPixel") = Int;
overload selector(static #"saturationComponent") = Float;
overload selector(static #"save:") = Void, Id;
overload selector(static #"saveAllDocuments:") = Void, Id;
overload selector(static #"saveDocument:") = Void, Id;
overload selector(static #"saveDocumentAs:") = Void, Id;
overload selector(static #"saveDocumentTo:") = Void, Id;
overload selector(static #"saveDocumentWithDelegate:didSaveSelector:contextInfo:") = Void, Id, SelectorHandle, RawPointer;
overload selector(static #"saveFrameUsingName:") = Void, NSString;
overload selector(static #"saveGraphicsState") = Void;
overload selector(static #"saveOptions") = UInt;
overload selector(static #"savePanel") = NSSavePanel;
overload selector(static #"saveToFile:saveOperation:delegate:didSaveSelector:contextInfo:") = Void, NSString, UInt, Id, SelectorHandle, RawPointer;
overload selector(static #"saveToURL:ofType:forSaveOperation:delegate:didSaveSelector:contextInfo:") = Void, NSURL, NSString, UInt, Id, SelectorHandle, RawPointer;
overload selector(static #"saveToURL:ofType:forSaveOperation:error:") = Bool, NSURL, NSString, UInt, Pointer[NSError];
overload selector(static #"scale") = Short;
overload selector(static #"scaleBy:") = Void, Float;
overload selector(static #"scaleUnitSquareToSize:") = Void, NSSize;
overload selector(static #"scaleXBy:yBy:") = Void, Float, Float;
overload selector(static #"scalesWhenResized") = Bool;
overload selector(static #"scalingFactor") = Float;
overload selector(static #"scanCharactersFromSet:intoString:") = Bool, NSCharacterSet, Pointer[NSString];
overload selector(static #"scanDecimal:") = Bool, Pointer[NSDecimal];
overload selector(static #"scanDouble:") = Bool, Pointer[Double];
overload selector(static #"scanFloat:") = Bool, Pointer[Float];
overload selector(static #"scanHexDouble:") = Bool, Pointer[Double];
overload selector(static #"scanHexFloat:") = Bool, Pointer[Float];
overload selector(static #"scanHexInt:") = Bool, Pointer[UInt];
overload selector(static #"scanHexLongLong:") = Bool, Pointer[UInt64];
overload selector(static #"scanInt:") = Bool, Pointer[Int];
overload selector(static #"scanInteger:") = Bool, Pointer[Int];
overload selector(static #"scanLocation") = UInt;
overload selector(static #"scanLongLong:") = Bool, Pointer[Int64];
overload selector(static #"scanString:intoString:") = Bool, NSString, Pointer[NSString];
overload selector(static #"scanUpToCharactersFromSet:intoString:") = Bool, NSCharacterSet, Pointer[NSString];
overload selector(static #"scanUpToString:intoString:") = Bool, NSString, Pointer[NSString];
overload selector(static #"scannerWithString:") = Id, NSString;
overload selector(static #"scheduleInRunLoop:forMode:") = Void, NSRunLoop, NSString;
overload selector(static #"scheduledTimerWithTimeInterval:invocation:repeats:") = NSTimer, Double, NSInvocation, Bool;
overload selector(static #"scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:") = NSTimer, Double, Id, SelectorHandle, Id, Bool;
overload selector(static #"scheme") = NSString;
overload selector(static #"screen") = NSScreen;
overload selector(static #"screenFont") = NSFont;
overload selector(static #"screenFontWithRenderingMode:") = NSFont, UInt;
overload selector(static #"screens") = NSArray;
overload selector(static #"scriptErrorExpectedTypeDescriptor") = NSAppleEventDescriptor;
overload selector(static #"scriptErrorNumber") = Int;
overload selector(static #"scriptErrorOffendingObjectDescriptor") = NSAppleEventDescriptor;
overload selector(static #"scriptErrorString") = NSString;
overload selector(static #"scriptingBeginsWith:") = Bool, Id;
overload selector(static #"scriptingContains:") = Bool, Id;
overload selector(static #"scriptingEndsWith:") = Bool, Id;
overload selector(static #"scriptingIsEqualTo:") = Bool, Id;
overload selector(static #"scriptingIsGreaterThan:") = Bool, Id;
overload selector(static #"scriptingIsGreaterThanOrEqualTo:") = Bool, Id;
overload selector(static #"scriptingIsLessThan:") = Bool, Id;
overload selector(static #"scriptingIsLessThanOrEqualTo:") = Bool, Id;
overload selector(static #"scriptingProperties") = NSDictionary;
overload selector(static #"scriptingValueForSpecifier:") = Id, NSScriptObjectSpecifier;
overload selector(static #"scrollBarColor") = NSColor;
overload selector(static #"scrollCellToVisibleAtRow:column:") = Void, Int, Int;
overload selector(static #"scrollClipView:toPoint:") = Void, NSClipView, NSPoint;
overload selector(static #"scrollColumnToVisible:") = Void, Int;
overload selector(static #"scrollColumnsLeftBy:") = Void, Int;
overload selector(static #"scrollColumnsRightBy:") = Void, Int;
overload selector(static #"scrollItemAtIndexToTop:") = Void, Int;
overload selector(static #"scrollItemAtIndexToVisible:") = Void, Int;
overload selector(static #"scrollLineDown:") = Void, Id;
overload selector(static #"scrollLineUp:") = Void, Id;
overload selector(static #"scrollPageDown:") = Void, Id;
overload selector(static #"scrollPageUp:") = Void, Id;
overload selector(static #"scrollPoint:") = Void, NSPoint;
overload selector(static #"scrollRangeToVisible:") = Void, NSRange;
overload selector(static #"scrollRect:by:") = Void, NSRect, NSSize;
overload selector(static #"scrollRectToVisible:") = Bool, NSRect;
overload selector(static #"scrollRowToVisible:") = Void, Int;
overload selector(static #"scrollRowToVisible:inColumn:") = Void, Int, Int;
overload selector(static #"scrollToBeginningOfDocument:") = Void, Id;
overload selector(static #"scrollToEndOfDocument:") = Void, Id;
overload selector(static #"scrollToPoint:") = Void, NSPoint;
overload selector(static #"scrollViaScroller:") = Void, NSScroller;
overload selector(static #"scrollView") = NSScrollView;
overload selector(static #"scrollWheel:") = Void, NSEvent;
overload selector(static #"scrollerWidth") = Float;
overload selector(static #"scrollerWidthForControlSize:") = Float, UInt;
overload selector(static #"scrollsDynamically") = Bool;
overload selector(static #"searchButtonCell") = NSButtonCell;
overload selector(static #"searchButtonRectForBounds:") = NSRect, NSRect;
overload selector(static #"searchForAllDomains") = Void;
overload selector(static #"searchForBrowsableDomains") = Void;
overload selector(static #"searchForItemsWithSearchString:resultLimit:matchedItemHandler:") = Void, NSString, Int, UnknownType;
overload selector(static #"searchForRegistrationDomains") = Void;
overload selector(static #"searchForServicesOfType:inDomain:") = Void, NSString, NSString;
overload selector(static #"searchMenuTemplate") = NSMenu;
overload selector(static #"searchScopes") = NSArray;
overload selector(static #"searchString:inUserInterfaceItemString:searchRange:foundRange:") = Bool, NSString, NSString, NSRange, Pointer[NSRange];
overload selector(static #"searchTextRectForBounds:") = NSRect, NSRect;
overload selector(static #"second") = Int;
overload selector(static #"secondOfMinute") = Int;
overload selector(static #"secondaryGroupingSize") = UInt;
overload selector(static #"secondarySelectedControlColor") = NSColor;
overload selector(static #"secondsFromGMT") = Int;
overload selector(static #"secondsFromGMTForDate:") = Int, NSDate;
overload selector(static #"seekToEndOfFile") = UInt64;
overload selector(static #"seekToFileOffset:") = Void, UInt64;
overload selector(static #"segmentCount") = Int;
overload selector(static #"segmentStyle") = Int;
overload selector(static #"selectAll:") = Void, Id;
overload selector(static #"selectCell:") = Void, NSCell;
overload selector(static #"selectCellAtRow:column:") = Void, Int, Int;
overload selector(static #"selectCellWithTag:") = Bool, Int;
overload selector(static #"selectColumn:byExtendingSelection:") = Void, Int, Bool;
overload selector(static #"selectColumnIndexes:byExtendingSelection:") = Void, NSIndexSet, Bool;
overload selector(static #"selectFile:inFileViewerRootedAtPath:") = Bool, NSString, NSString;
overload selector(static #"selectFirstTabViewItem:") = Void, Id;
overload selector(static #"selectItem:") = Void, NSMenuItem;
overload selector(static #"selectItemAtIndex:") = Void, Int;
overload selector(static #"selectItemWithObjectValue:") = Void, Id;
overload selector(static #"selectItemWithTag:") = Bool, Int;
overload selector(static #"selectItemWithTitle:") = Void, NSString;
overload selector(static #"selectKeyViewFollowingView:") = Void, NSView;
overload selector(static #"selectKeyViewPrecedingView:") = Void, NSView;
overload selector(static #"selectLastTabViewItem:") = Void, Id;
overload selector(static #"selectLine:") = Void, Id;
overload selector(static #"selectNext:") = Void, Id;
overload selector(static #"selectNextKeyView:") = Void, Id;
overload selector(static #"selectNextTabViewItem:") = Void, Id;
overload selector(static #"selectParagraph:") = Void, Id;
overload selector(static #"selectPrevious:") = Void, Id;
overload selector(static #"selectPreviousKeyView:") = Void, Id;
overload selector(static #"selectPreviousTabViewItem:") = Void, Id;
overload selector(static #"selectRow:byExtendingSelection:") = Void, Int, Bool;
overload selector(static #"selectRow:inColumn:") = Void, Int, Int;
overload selector(static #"selectRowIndexes:byExtendingSelection:") = Void, NSIndexSet, Bool;
overload selector(static #"selectRowIndexes:inColumn:") = Void, NSIndexSet, Int;
overload selector(static #"selectSegmentWithTag:") = Bool, Int;
overload selector(static #"selectTabViewItem:") = Void, NSTabViewItem;
overload selector(static #"selectTabViewItemAtIndex:") = Void, Int;
overload selector(static #"selectTabViewItemWithIdentifier:") = Void, Id;
overload selector(static #"selectText:") = Void, Id;
overload selector(static #"selectTextAtIndex:") = Void, Int;
overload selector(static #"selectTextAtRow:column:") = Id, Int, Int;
overload selector(static #"selectToMark:") = Void, Id;
overload selector(static #"selectWithFrame:inView:editor:delegate:start:length:") = Void, NSRect, NSView, NSText, Id, Int, Int;
overload selector(static #"selectWord:") = Void, Id;
overload selector(static #"selectedCell") = Id;
overload selector(static #"selectedCellInColumn:") = Id, Int;
overload selector(static #"selectedCells") = NSArray;
overload selector(static #"selectedColumn") = Int;
overload selector(static #"selectedColumnEnumerator") = NSEnumerator;
overload selector(static #"selectedColumnIndexes") = NSIndexSet;
overload selector(static #"selectedControlColor") = NSColor;
overload selector(static #"selectedControlTextColor") = NSColor;
overload selector(static #"selectedFont") = NSFont;
overload selector(static #"selectedItem") = NSMenuItem;
overload selector(static #"selectedItemIdentifier") = NSString;
overload selector(static #"selectedKeyboardInputSource") = NSString;
overload selector(static #"selectedKnobColor") = NSColor;
overload selector(static #"selectedMenuItemColor") = NSColor;
overload selector(static #"selectedMenuItemTextColor") = NSColor;
overload selector(static #"selectedNodes") = NSArray;
overload selector(static #"selectedObjects") = NSArray;
overload selector(static #"selectedRange") = NSRange;
overload selector(static #"selectedRanges") = NSArray;
overload selector(static #"selectedRow") = Int;
overload selector(static #"selectedRowEnumerator") = NSEnumerator;
overload selector(static #"selectedRowInColumn:") = Int, Int;
overload selector(static #"selectedRowIndexes") = NSIndexSet;
overload selector(static #"selectedRowIndexesInColumn:") = NSIndexSet, Int;
overload selector(static #"selectedSegment") = Int;
overload selector(static #"selectedTabViewItem") = NSTabViewItem;
overload selector(static #"selectedTag") = Int;
overload selector(static #"selectedTextAttributes") = NSDictionary;
overload selector(static #"selectedTextBackgroundColor") = NSColor;
overload selector(static #"selectedTextColor") = NSColor;
overload selector(static #"selection") = Id;
overload selector(static #"selectionAffinity") = UInt;
overload selector(static #"selectionGranularity") = UInt;
overload selector(static #"selectionHighlightStyle") = Int;
overload selector(static #"selectionIndex") = UInt;
overload selector(static #"selectionIndexPath") = NSIndexPath;
overload selector(static #"selectionIndexPaths") = NSArray;
overload selector(static #"selectionIndexes") = NSIndexSet;
overload selector(static #"selectionRangeForProposedRange:granularity:") = NSRange, NSRange, UInt;
overload selector(static #"selectionShouldChangeInOutlineView:") = Bool, NSOutlineView;
overload selector(static #"selectionShouldChangeInTableView:") = Bool, NSTableView;
overload selector(static #"selector") = SelectorHandle;
overload selector(static #"selectorForCommand:") = SelectorHandle, NSScriptCommandDescription;
overload selector(static #"selectsInsertedObjects") = Bool;
overload selector(static #"self") = Id;
overload selector(static #"sendAction") = Bool;
overload selector(static #"sendAction:to:") = Bool, SelectorHandle, Id;
overload selector(static #"sendAction:to:forAllCells:") = Void, SelectorHandle, Id, Bool;
overload selector(static #"sendAction:to:from:") = Bool, SelectorHandle, Id, Id;
overload selector(static #"sendActionOn:") = Int, Int;
overload selector(static #"sendBeforeDate:") = Bool, NSDate;
overload selector(static #"sendBeforeDate:components:from:reserved:") = Bool, NSDate, NSMutableArray, NSPort, UInt;
overload selector(static #"sendBeforeDate:msgid:components:from:reserved:") = Bool, NSDate, UInt, NSMutableArray, NSPort, UInt;
overload selector(static #"sendDoubleAction") = Void;
overload selector(static #"sendEvent:") = Void, NSEvent;
overload selector(static #"sendPort") = NSPort;
overload selector(static #"sendSynchronousRequest:returningResponse:error:") = NSData, NSURLRequest, Pointer[NSURLResponse], Pointer[NSError];
overload selector(static #"sender") = Id;
overload selector(static #"sendsActionOnArrowKeys") = Bool;
overload selector(static #"sendsActionOnEndEditing") = Bool;
overload selector(static #"sendsSearchStringImmediately") = Bool;
overload selector(static #"sendsWholeSearchString") = Bool;
overload selector(static #"separatesColumns") = Bool;
overload selector(static #"separatorItem") = NSMenuItem;
overload selector(static #"serializedRepresentation") = NSData;
overload selector(static #"server") = NSInputServer;
overload selector(static #"serverTrust") = SecTrustRef;
overload selector(static #"serviceConnectionWithName:rootObject:") = Id, NSString, Id;
overload selector(static #"serviceConnectionWithName:rootObject:usingNameServer:") = Id, NSString, Id, NSPortNameServer;
overload selector(static #"servicePortWithName:") = NSPort, NSString;
overload selector(static #"servicesMenu") = NSMenu;
overload selector(static #"servicesProvider") = Id;
overload selector(static #"set") = Id;
overload selector(static #"setAMSymbol:") = Void, NSString;
overload selector(static #"setAbbreviationDictionary:") = Void, NSDictionary;
overload selector(static #"setAcceptsArrowKeys:") = Void, Bool;
overload selector(static #"setAcceptsGlyphInfo:") = Void, Bool;
overload selector(static #"setAcceptsMouseMovedEvents:") = Void, Bool;
overload selector(static #"setAcceptsTouchEvents:") = Void, Bool;
overload selector(static #"setAccessibilityDescription:") = Void, NSString;
overload selector(static #"setAccessoryView:") = Void, NSView;
overload selector(static #"setAcquireFunction:") = Void, CCodePointer[(RawPointer,CCodePointer[(RawPointer),(UInt)],CChar),(RawPointer)];
overload selector(static #"setAction:") = Void, SelectorHandle;
overload selector(static #"setActionName:") = Void, NSString;
overload selector(static #"setActions:") = Void, NSDictionary;
overload selector(static #"setActivationPolicy:") = Bool, Int;
overload selector(static #"setAffineTransform:") = Void, CGAffineTransform;
overload selector(static #"setAlertStyle:") = Void, UInt;
overload selector(static #"setAlignment:") = Void, UInt;
overload selector(static #"setAlignment:range:") = Void, UInt, NSRange;
overload selector(static #"setAlignmentRect:") = Void, NSRect;
overload selector(static #"setAllHTTPHeaderFields:") = Void, NSDictionary;
overload selector(static #"setAllowedFileTypes:") = Void, NSArray;
overload selector(static #"setAllowedInputSourceLocales:") = Void, NSArray;
overload selector(static #"setAllowedTypes:") = Void, NSArray;
overload selector(static #"setAllowsBranchSelection:") = Void, Bool;
overload selector(static #"setAllowsColumnReordering:") = Void, Bool;
overload selector(static #"setAllowsColumnResizing:") = Void, Bool;
overload selector(static #"setAllowsColumnSelection:") = Void, Bool;
overload selector(static #"setAllowsConcurrentViewDrawing:") = Void, Bool;
overload selector(static #"setAllowsContextMenuPlugIns:") = Void, Bool;
overload selector(static #"setAllowsCutCopyPaste:") = Void, Bool;
overload selector(static #"setAllowsDocumentBackgroundColorChange:") = Void, Bool;
overload selector(static #"setAllowsEditingTextAttributes:") = Void, Bool;
overload selector(static #"setAllowsEmptySelection:") = Void, Bool;
overload selector(static #"setAllowsFloats:") = Void, Bool;
overload selector(static #"setAllowsImageEditing:") = Void, Bool;
overload selector(static #"setAllowsMixedState:") = Void, Bool;
overload selector(static #"setAllowsMultipleSelection:") = Void, Bool;
overload selector(static #"setAllowsNonContiguousLayout:") = Void, Bool;
overload selector(static #"setAllowsOtherFileTypes:") = Void, Bool;
overload selector(static #"setAllowsTickMarkValuesOnly:") = Void, Bool;
overload selector(static #"setAllowsToolTipsWhenApplicationIsInactive:") = Void, Bool;
overload selector(static #"setAllowsTruncatedLabels:") = Void, Bool;
overload selector(static #"setAllowsTypeSelect:") = Void, Bool;
overload selector(static #"setAllowsUndo:") = Void, Bool;
overload selector(static #"setAllowsUserCustomization:") = Void, Bool;
overload selector(static #"setAlpha:") = Void, Bool;
overload selector(static #"setAlphaValue:") = Void, Float;
overload selector(static #"setAltIncrementValue:") = Void, Double;
overload selector(static #"setAlternate:") = Void, Bool;
overload selector(static #"setAlternateImage:") = Void, NSImage;
overload selector(static #"setAlternateMnemonicLocation:") = Void, UInt;
overload selector(static #"setAlternateTitle:") = Void, NSString;
overload selector(static #"setAlternateTitleWithMnemonic:") = Void, NSString;
overload selector(static #"setAltersStateOfSelectedItem:") = Void, Bool;
overload selector(static #"setAlwaysShowsDecimalSeparator:") = Void, Bool;
overload selector(static #"setAlwaysUsesMultipleValuesMarker:") = Void, Bool;
overload selector(static #"setAnchorPoint:") = Void, CGPoint;
overload selector(static #"setAnchorPointZ:") = Void, Float;
overload selector(static #"setAnimates:") = Void, Bool;
overload selector(static #"setAnimationBlockingMode:") = Void, UInt;
overload selector(static #"setAnimationCurve:") = Void, UInt;
overload selector(static #"setAnimationDelay:") = Void, Double;
overload selector(static #"setAnimations:") = Void, NSDictionary;
overload selector(static #"setApplicationIconImage:") = Void, NSImage;
overload selector(static #"setAppliesImmediately:") = Void, Bool;
overload selector(static #"setArgument:atIndex:") = Void, RawPointer, Int;
overload selector(static #"setArguments:") = Void, NSArray;
overload selector(static #"setArray:") = Void, NSArray;
overload selector(static #"setArrowPosition:") = Void, UInt;
overload selector(static #"setArrowsPosition:") = Void, UInt;
overload selector(static #"setAspectRatio:") = Void, NSSize;
overload selector(static #"setAssociatedPoints:atIndex:") = Void, NSPointArray, Int;
overload selector(static #"setAsynchronous:") = Void, Bool;
overload selector(static #"setAttachment:") = Void, NSTextAttachment;
overload selector(static #"setAttachmentCell:") = Void, Id;
overload selector(static #"setAttachmentSize:forGlyphRange:") = Void, NSSize, NSRange;
overload selector(static #"setAttributeDescriptor:forKeyword:") = Void, NSAppleEventDescriptor, CULong;
overload selector(static #"setAttributeRuns:") = Void, NSArray;
overload selector(static #"setAttributeType:") = Void, UInt;
overload selector(static #"setAttributeValueClassName:") = Void, NSString;
overload selector(static #"setAttributedAlternateTitle:") = Void, NSAttributedString;
overload selector(static #"setAttributedString:") = Void, NSAttributedString;
overload selector(static #"setAttributedStringForNil:") = Void, NSAttributedString;
overload selector(static #"setAttributedStringForNotANumber:") = Void, NSAttributedString;
overload selector(static #"setAttributedStringForZero:") = Void, NSAttributedString;
overload selector(static #"setAttributedStringValue:") = Void, NSAttributedString;
overload selector(static #"setAttributedTitle:") = Void, NSAttributedString;
overload selector(static #"setAttributes:") = Void, NSArray;
overload selector(static #"setAttributes:ofItemAtPath:error:") = Bool, NSDictionary, NSString, Pointer[NSError];
overload selector(static #"setAttributes:range:") = Void, NSDictionary, NSRange;
overload selector(static #"setAttributesAsDictionary:") = Void, NSDictionary;
overload selector(static #"setAutodisplay:") = Void, Bool;
overload selector(static #"setAutoenablesItems:") = Void, Bool;
overload selector(static #"setAutohidesScroller:") = Void, Bool;
overload selector(static #"setAutohidesScrollers:") = Void, Bool;
overload selector(static #"setAutomaticDashSubstitutionEnabled:") = Void, Bool;
overload selector(static #"setAutomaticDataDetectionEnabled:") = Void, Bool;
overload selector(static #"setAutomaticLinkDetectionEnabled:") = Void, Bool;
overload selector(static #"setAutomaticQuoteSubstitutionEnabled:") = Void, Bool;
overload selector(static #"setAutomaticSpellingCorrectionEnabled:") = Void, Bool;
overload selector(static #"setAutomaticTextReplacementEnabled:") = Void, Bool;
overload selector(static #"setAutomaticallyIdentifiesLanguages:") = Void, Bool;
overload selector(static #"setAutomaticallyPreparesContent:") = Void, Bool;
overload selector(static #"setAutomaticallyRearrangesObjects:") = Void, Bool;
overload selector(static #"setAutorecalculatesContentBorderThickness:forEdge:") = Void, Bool, NSRectEdge;
overload selector(static #"setAutorecalculatesKeyViewLoop:") = Void, Bool;
overload selector(static #"setAutorepeat:") = Void, Bool;
overload selector(static #"setAutoresizesAllColumnsToFit:") = Void, Bool;
overload selector(static #"setAutoresizesOutlineColumn:") = Void, Bool;
overload selector(static #"setAutoresizesSubviews:") = Void, Bool;
overload selector(static #"setAutoresizingMask:") = Void, UInt;
overload selector(static #"setAutoreverses:") = Void, Bool;
overload selector(static #"setAutosaveExpandedItems:") = Void, Bool;
overload selector(static #"setAutosaveName:") = Void, NSString;
overload selector(static #"setAutosaveTableColumns:") = Void, Bool;
overload selector(static #"setAutosavedContentsFileURL:") = Void, NSURL;
overload selector(static #"setAutosavesConfiguration:") = Void, Bool;
overload selector(static #"setAutosavingDelay:") = Void, Double;
overload selector(static #"setAutoscroll:") = Void, Bool;
overload selector(static #"setAutosizesCells:") = Void, Bool;
overload selector(static #"setAutovalidates:") = Void, Bool;
overload selector(static #"setAvoidsEmptySelection:") = Void, Bool;
overload selector(static #"setBackgroundColor:") = Void, NSColor;
overload selector(static #"setBackgroundColors:") = Void, NSArray;
overload selector(static #"setBackgroundFilters:") = Void, NSArray;
overload selector(static #"setBackgroundLayoutEnabled:") = Void, Bool;
overload selector(static #"setBackgroundStyle:") = Void, Int;
overload selector(static #"setBackingType:") = Void, UInt;
overload selector(static #"setBadgeLabel:") = Void, NSString;
overload selector(static #"setBaseSpecifier:") = Void, NSScriptObjectSpecifier;
overload selector(static #"setBaseWritingDirection:") = Void, Int;
overload selector(static #"setBaseWritingDirection:range:") = Void, Int, NSRange;
overload selector(static #"setBecomesKeyOnlyIfNeeded:") = Void, Bool;
overload selector(static #"setBeginTime:") = Void, Double;
overload selector(static #"setBezelStyle:") = Void, UInt;
overload selector(static #"setBezeled:") = Void, Bool;
overload selector(static #"setBidiLevels:forGlyphRange:") = Void, Pointer[CUChar], NSRange;
overload selector(static #"setBidiProcessingEnabled:") = Void, Bool;
overload selector(static #"setBitsPerSample:") = Void, Int;
overload selector(static #"setBlocksOtherRecognizers:") = Void, Bool;
overload selector(static #"setBool:forKey:") = Void, Bool, NSString;
overload selector(static #"setBorderColor:") = Void, NSColor;
overload selector(static #"setBorderColor:forEdge:") = Void, NSColor, NSRectEdge;
overload selector(static #"setBorderType:") = Void, UInt;
overload selector(static #"setBorderWidth:") = Void, Float;
overload selector(static #"setBordered:") = Void, Bool;
overload selector(static #"setBottomMargin:") = Void, Float;
overload selector(static #"setBounds:") = Void, NSRect;
overload selector(static #"setBoundsOrigin:") = Void, NSPoint;
overload selector(static #"setBoundsRect:forTextBlock:glyphRange:") = Void, NSRect, NSTextBlock, NSRange;
overload selector(static #"setBoundsRotation:") = Void, Float;
overload selector(static #"setBoundsSize:") = Void, NSSize;
overload selector(static #"setBoxType:") = Void, UInt;
overload selector(static #"setButtonBordered:") = Void, Bool;
overload selector(static #"setButtonType:") = Void, UInt;
overload selector(static #"setByAddingObject:") = NSSet, Id;
overload selector(static #"setByAddingObjectsFromArray:") = NSSet, NSArray;
overload selector(static #"setByAddingObjectsFromSet:") = NSSet, NSSet;
overload selector(static #"setCacheDepthMatchesImageDepth:") = Void, Bool;
overload selector(static #"setCacheMode:") = Void, UInt;
overload selector(static #"setCachePolicy:") = Void, UInt;
overload selector(static #"setCachedSeparately:") = Void, Bool;
overload selector(static #"setCachesBezierPath:") = Void, Bool;
overload selector(static #"setCalendar:") = Void, NSCalendar;
overload selector(static #"setCalendarFormat:") = Void, NSString;
overload selector(static #"setCanBeVisibleOnAllSpaces:") = Void, Bool;
overload selector(static #"setCanBecomeVisibleWithoutLogin:") = Void, Bool;
overload selector(static #"setCanChooseDirectories:") = Void, Bool;
overload selector(static #"setCanChooseFiles:") = Void, Bool;
overload selector(static #"setCanCreateDirectories:") = Void, Bool;
overload selector(static #"setCanDrawConcurrently:") = Void, Bool;
overload selector(static #"setCanHide:") = Void, Bool;
overload selector(static #"setCanRemoveAllRows:") = Void, Bool;
overload selector(static #"setCanSelectHiddenExtension:") = Void, Bool;
overload selector(static #"setCanSpawnSeparateThread:") = Void, Bool;
overload selector(static #"setCancelButtonCell:") = Void, NSButtonCell;
overload selector(static #"setCaseSensitive:") = Void, Bool;
overload selector(static #"setCell:") = Void, NSCell;
overload selector(static #"setCellAttribute:to:") = Void, UInt, Int;
overload selector(static #"setCellBackgroundColor:") = Void, NSColor;
overload selector(static #"setCellClass:") = Void, Id;
overload selector(static #"setCellPrototype:") = Void, NSCell;
overload selector(static #"setCellSize:") = Void, NSSize;
overload selector(static #"setChannelMapping:") = Void, NSArray;
overload selector(static #"setCharacterEncoding:") = Void, NSString;
overload selector(static #"setCharacterIndex:forGlyphAtIndex:") = Void, UInt, UInt;
overload selector(static #"setCharacters:") = Void, NSArray;
overload selector(static #"setCharactersToBeSkipped:") = Void, NSCharacterSet;
overload selector(static #"setChildSpecifier:") = Void, NSScriptObjectSpecifier;
overload selector(static #"setChildren:") = Void, NSArray;
overload selector(static #"setChildrenKeyPath:") = Void, NSString;
overload selector(static #"setClass:forClassName:") = Void, Id, NSString;
overload selector(static #"setClassName:forClass:") = Void, NSString, Id;
overload selector(static #"setClearsFilterPredicateOnInsertion:") = Void, Bool;
overload selector(static #"setClientView:") = Void, NSView;
overload selector(static #"setClip") = Void;
overload selector(static #"setCollapsesBorders:") = Void, Bool;
overload selector(static #"setCollectionBehavior:") = Void, UInt;
overload selector(static #"setColor:") = Void, NSColor;
overload selector(static #"setColor:atX:y:") = Void, NSColor, Int, Int;
overload selector(static #"setColor:forKey:") = Void, NSColor, NSString;
overload selector(static #"setColorRenderingIntent:") = Void, Int;
overload selector(static #"setColorSpace:") = Void, NSColorSpace;
overload selector(static #"setColorSpaceName:") = Void, NSString;
overload selector(static #"setColumnAutoresizingStyle:") = Void, UInt;
overload selector(static #"setColumnResizingType:") = Void, UInt;
overload selector(static #"setColumnsAutosaveName:") = Void, NSString;
overload selector(static #"setCommands:") = Void, NSArray;
overload selector(static #"setCompletes:") = Void, Bool;
overload selector(static #"setCompletionBlock:") = Void, UnknownType;
overload selector(static #"setCompletionDelay:") = Void, Double;
overload selector(static #"setCompositingFilter:") = Void, CIFilter;
overload selector(static #"setCompositingOperation:") = Void, UInt;
overload selector(static #"setCompression:factor:") = Void, UInt, Float;
overload selector(static #"setConfigurationFromDictionary:") = Void, NSDictionary;
overload selector(static #"setConstrainedFrameSize:") = Void, NSSize;
overload selector(static #"setContainerClassDescription:") = Void, NSScriptClassDescription;
overload selector(static #"setContainerIsObjectBeingTested:") = Void, Bool;
overload selector(static #"setContainerIsRangeContainerObject:") = Void, Bool;
overload selector(static #"setContainerSize:") = Void, NSSize;
overload selector(static #"setContainerSpecifier:") = Void, NSScriptObjectSpecifier;
overload selector(static #"setContent:") = Void, Id;
overload selector(static #"setContentAspectRatio:") = Void, NSSize;
overload selector(static #"setContentBorderThickness:forEdge:") = Void, Float, NSRectEdge;
overload selector(static #"setContentFilters:") = Void, NSArray;
overload selector(static #"setContentMaxSize:") = Void, NSSize;
overload selector(static #"setContentMinSize:") = Void, NSSize;
overload selector(static #"setContentResizeIncrements:") = Void, NSSize;
overload selector(static #"setContentSize:") = Void, NSSize;
overload selector(static #"setContentView:") = Void, NSView;
overload selector(static #"setContentViewMargins:") = Void, NSSize;
overload selector(static #"setContentWidth:type:") = Void, Float, UInt;
overload selector(static #"setContents:") = Void, Id;
overload selector(static #"setContentsCenter:") = Void, CGRect;
overload selector(static #"setContentsGravity:") = Void, NSString;
overload selector(static #"setContentsRect:") = Void, CGRect;
overload selector(static #"setContextHelp:forObject:") = Void, NSAttributedString, Id;
overload selector(static #"setContextHelpModeActive:") = Void, Bool;
overload selector(static #"setContextMenuRepresentation:") = Void, Id;
overload selector(static #"setContinuous:") = Void, Bool;
overload selector(static #"setContinuousSpellCheckingEnabled:") = Void, Bool;
overload selector(static #"setControlSize:") = Void, UInt;
overload selector(static #"setControlTint:") = Void, UInt;
overload selector(static #"setControlView:") = Void, NSView;
overload selector(static #"setCookie:") = Void, NSHTTPCookie;
overload selector(static #"setCookieAcceptPolicy:") = Void, UInt;
overload selector(static #"setCookies:forURL:mainDocumentURL:") = Void, NSArray, NSURL, NSURL;
overload selector(static #"setCopiesOnScroll:") = Void, Bool;
overload selector(static #"setCornerRadius:") = Void, Float;
overload selector(static #"setCornerView:") = Void, NSView;
overload selector(static #"setCount:") = Void, UInt;
overload selector(static #"setCountKeyPath:") = Void, NSString;
overload selector(static #"setCountLimit:") = Void, UInt;
overload selector(static #"setCredential:forProtectionSpace:") = Void, NSURLCredential, NSURLProtectionSpace;
overload selector(static #"setCriteria:andDisplayValues:forRowAtIndex:") = Void, NSArray, NSArray, Int;
overload selector(static #"setCriteriaKeyPath:") = Void, NSString;
overload selector(static #"setCriticalValue:") = Void, Double;
overload selector(static #"setCurrencyCode:") = Void, NSString;
overload selector(static #"setCurrencyDecimalSeparator:") = Void, NSString;
overload selector(static #"setCurrencyGroupingSeparator:") = Void, NSString;
overload selector(static #"setCurrencySymbol:") = Void, NSString;
overload selector(static #"setCurrentAppleEventAndReplyEventWithSuspensionID:") = Void, NSAppleEventManagerSuspensionID;
overload selector(static #"setCurrentContext:") = Void, NSGraphicsContext;
overload selector(static #"setCurrentDirectoryPath:") = Void, NSString;
overload selector(static #"setCurrentOperation:") = Void, NSPrintOperation;
overload selector(static #"setCurrentPage:") = Void, Int;
overload selector(static #"setCurrentProgress:") = Void, Float;
overload selector(static #"setCurrentTime:") = Void, Double;
overload selector(static #"setCurrentVirtualScreen:") = Void, Int;
overload selector(static #"setDTD:") = Void, NSXMLDTD;
overload selector(static #"setDTDKind:") = Void, UInt;
overload selector(static #"setData:") = Void, NSData;
overload selector(static #"setData:forType:") = Bool, NSData, NSString;
overload selector(static #"setDataCell:") = Void, NSCell;
overload selector(static #"setDataProvider:forTypes:") = Bool, Id, NSArray;
overload selector(static #"setDataRetained:") = Void, Bool;
overload selector(static #"setDataSource:") = Void, Id;
overload selector(static #"setDateFormat:") = Void, NSString;
overload selector(static #"setDatePickerElements:") = Void, UInt;
overload selector(static #"setDatePickerMode:") = Void, UInt;
overload selector(static #"setDatePickerStyle:") = Void, UInt;
overload selector(static #"setDateStyle:") = Void, UInt;
overload selector(static #"setDateValue:") = Void, NSDate;
overload selector(static #"setDay:") = Void, Int;
overload selector(static #"setDecimalSeparator:") = Void, NSString;
overload selector(static #"setDefaultAttachmentScaling:") = Void, UInt;
overload selector(static #"setDefaultBehavior:") = Void, Id;
overload selector(static #"setDefaultButtonCell:") = Void, NSButtonCell;
overload selector(static #"setDefaultButtonTitle:") = Void, NSString;
overload selector(static #"setDefaultColumnWidth:") = Void, Float;
overload selector(static #"setDefaultCredential:forProtectionSpace:") = Void, NSURLCredential, NSURLProtectionSpace;
overload selector(static #"setDefaultDate:") = Void, NSDate;
overload selector(static #"setDefaultFlatness:") = Void, Float;
overload selector(static #"setDefaultFormatterBehavior:") = Void, UInt;
overload selector(static #"setDefaultLineCapStyle:") = Void, UInt;
overload selector(static #"setDefaultLineJoinStyle:") = Void, UInt;
overload selector(static #"setDefaultLineWidth:") = Void, Float;
overload selector(static #"setDefaultMiterLimit:") = Void, Float;
overload selector(static #"setDefaultNameServerPortNumber:") = Void, UShort;
overload selector(static #"setDefaultParagraphStyle:") = Void, NSParagraphStyle;
overload selector(static #"setDefaultPlaceholder:forMarker:withBinding:") = Void, Id, Id, NSString;
overload selector(static #"setDefaultPrinter:") = Void, NSPrinter;
overload selector(static #"setDefaultTabInterval:") = Void, Float;
overload selector(static #"setDefaultTimeZone:") = Void, NSTimeZone;
overload selector(static #"setDefaultValue:") = Void, Id;
overload selector(static #"setDefaultWindingRule:") = Void, UInt;
overload selector(static #"setDelegate:") = Void, Id;
overload selector(static #"setDeletesFileUponFailure:") = Void, Bool;
overload selector(static #"setDepthLimit:") = Void, Int;
overload selector(static #"setDescriptionFunction:") = Void, CCodePointer[(RawPointer),(NSString)];
overload selector(static #"setDescriptor:forKeyword:") = Void, NSAppleEventDescriptor, CULong;
overload selector(static #"setDesktopImageURL:forScreen:options:error:") = Bool, NSURL, NSScreen, NSDictionary, Pointer[NSError];
overload selector(static #"setDestination:allowOverwrite:") = Void, NSString, Bool;
overload selector(static #"setDictionary:") = Void, NSDictionary;
overload selector(static #"setDirectParameter:") = Void, Id;
overload selector(static #"setDirectory:") = Void, NSString;
overload selector(static #"setDirectoryURL:") = Void, NSURL;
overload selector(static #"setDiskCapacity:") = Void, UInt;
overload selector(static #"setDisplayMode:") = Void, UInt;
overload selector(static #"setDisplayValuesKeyPath:") = Void, NSString;
overload selector(static #"setDisplayedCommandsTitle:") = Void, NSString;
overload selector(static #"setDisplayedWhenStopped:") = Void, Bool;
overload selector(static #"setDisplaysLinkToolTips:") = Void, Bool;
overload selector(static #"setDisplaysWhenScreenProfileChanges:") = Void, Bool;
overload selector(static #"setDividerStyle:") = Void, Int;
overload selector(static #"setDockTile:") = Void, NSDockTile;
overload selector(static #"setDocument:") = Void, NSDocument;
overload selector(static #"setDocumentContentKind:") = Void, UInt;
overload selector(static #"setDocumentCursor:") = Void, NSCursor;
overload selector(static #"setDocumentEdited:") = Void, Bool;
overload selector(static #"setDocumentView:") = Void, NSView;
overload selector(static #"setDoesRelativeDateFormatting:") = Void, Bool;
overload selector(static #"setDouble:forKey:") = Void, Double, NSString;
overload selector(static #"setDoubleAction:") = Void, SelectorHandle;
overload selector(static #"setDoubleSided:") = Void, Bool;
overload selector(static #"setDoubleValue:") = Void, Double;
overload selector(static #"setDraggingDestinationFeedbackStyle:") = Void, Int;
overload selector(static #"setDraggingSourceOperationMask:forLocal:") = Void, UInt, Bool;
overload selector(static #"setDrawsBackground:") = Void, Bool;
overload selector(static #"setDrawsCellBackground:") = Void, Bool;
overload selector(static #"setDrawsGrid:") = Void, Bool;
overload selector(static #"setDrawsOutsideLineFragment:forGlyphAtIndex:") = Void, Bool, UInt;
overload selector(static #"setDrawsOutsideLineFragment:forGlyphRange:") = Void, Bool, NSRange;
overload selector(static #"setDropItem:dropChildIndex:") = Void, Id, Int;
overload selector(static #"setDropRow:dropOperation:") = Void, Int, UInt;
overload selector(static #"setDuration:") = Void, Double;
overload selector(static #"setDynamicDepthLimit:") = Void, Bool;
overload selector(static #"setEchosBullets:") = Void, Bool;
overload selector(static #"setEdgeAntialiasingMask:") = Void, UInt;
overload selector(static #"setEditable:") = Void, Bool;
overload selector(static #"setEnabled:") = Void, Bool;
overload selector(static #"setEnabled:forSegment:") = Void, Bool, Int;
overload selector(static #"setEnabledTextCheckingTypes:") = Void, UInt64;
overload selector(static #"setEndSpecifier:") = Void, NSScriptObjectSpecifier;
overload selector(static #"setEndSubelementIdentifier:") = Void, UInt;
overload selector(static #"setEndSubelementIndex:") = Void, Int;
overload selector(static #"setEntityName:") = Void, NSString;
overload selector(static #"setEntryType:") = Void, Int;
overload selector(static #"setEntryWidth:") = Void, Float;
overload selector(static #"setEnvironment:") = Void, NSDictionary;
overload selector(static #"setEra:") = Void, Int;
overload selector(static #"setEraSymbols:") = Void, NSArray;
overload selector(static #"setEvaluationErrorNumber:") = Void, Int;
overload selector(static #"setEventHandler:andSelector:forEventClass:andEventID:") = Void, Id, SelectorHandle, CULong, CULong;
overload selector(static #"setEvictsObjectsWithDiscardedContent:") = Void, Bool;
overload selector(static #"setExcludedFromWindowsMenu:") = Void, Bool;
overload selector(static #"setExcludedKeys:") = Void, NSArray;
overload selector(static #"setExponentSymbol:") = Void, NSString;
overload selector(static #"setExtensionHidden:") = Void, Bool;
overload selector(static #"setExtraLineFragmentRect:usedRect:textContainer:") = Void, NSRect, NSRect, NSTextContainer;
overload selector(static #"setFetchPredicate:") = Void, NSPredicate;
overload selector(static #"setFieldEditor:") = Void, Bool;
overload selector(static #"setFileAttributes:") = Void, NSDictionary;
overload selector(static #"setFileModificationDate:") = Void, NSDate;
overload selector(static #"setFileName:") = Void, NSString;
overload selector(static #"setFileType:") = Void, NSString;
overload selector(static #"setFileURL:") = Void, NSURL;
overload selector(static #"setFileWrapper:") = Void, NSFileWrapper;
overload selector(static #"setFilename:") = Void, NSString;
overload selector(static #"setFill") = Void;
overload selector(static #"setFillColor:") = Void, NSColor;
overload selector(static #"setFillMode:") = Void, NSString;
overload selector(static #"setFilterPredicate:") = Void, NSPredicate;
overload selector(static #"setFilters:") = Void, NSArray;
overload selector(static #"setFireDate:") = Void, NSDate;
overload selector(static #"setFirstLineHeadIndent:") = Void, Float;
overload selector(static #"setFirstWeekday:") = Void, UInt;
overload selector(static #"setFlatness:") = Void, Float;
overload selector(static #"setFlipped:") = Void, Bool;
overload selector(static #"setFloat:forKey:") = Void, Float, NSString;
overload selector(static #"setFloatValue:") = Void, Float;
overload selector(static #"setFloatValue:knobProportion:") = Void, Float, Float;
overload selector(static #"setFloatingPanel:") = Void, Bool;
overload selector(static #"setFloatingPointFormat:left:right:") = Void, Bool, UInt, UInt;
overload selector(static #"setFocusRingType:") = Void, UInt;
overload selector(static #"setFocusedColumn:") = Void, Int;
overload selector(static #"setFont:") = Void, NSFont;
overload selector(static #"setFont:range:") = Void, NSFont, NSRange;
overload selector(static #"setFontManagerFactory:") = Void, Id;
overload selector(static #"setFontMenu:") = Void, NSMenu;
overload selector(static #"setFontPanelFactory:") = Void, Id;
overload selector(static #"setForegroundColor:") = Void, NSColor;
overload selector(static #"setFormat:") = Void, NSString;
overload selector(static #"setFormatWidth:") = Void, UInt;
overload selector(static #"setFormatter:") = Void, NSFormatter;
overload selector(static #"setFormatterBehavior:") = Void, UInt;
overload selector(static #"setFormattingDictionary:") = Void, NSDictionary;
overload selector(static #"setFormattingStringsFilename:") = Void, NSString;
overload selector(static #"setFrame:") = Void, NSRect;
overload selector(static #"setFrame:display:") = Void, NSRect, Bool;
overload selector(static #"setFrame:display:animate:") = Void, NSRect, Bool, Bool;
overload selector(static #"setFrameAutosaveName:") = Bool, NSString;
overload selector(static #"setFrameCenterRotation:") = Void, Float;
overload selector(static #"setFrameFromContentFrame:") = Void, NSRect;
overload selector(static #"setFrameFromString:") = Void, NSString;
overload selector(static #"setFrameOrigin:") = Void, NSPoint;
overload selector(static #"setFrameRate:") = Void, Float;
overload selector(static #"setFrameRotation:") = Void, Float;
overload selector(static #"setFrameSize:") = Void, NSSize;
overload selector(static #"setFrameTopLeftPoint:") = Void, NSPoint;
overload selector(static #"setFrameUsingName:") = Bool, NSString;
overload selector(static #"setFrameUsingName:force:") = Bool, NSString, Bool;
overload selector(static #"setFullScreen") = Void;
overload selector(static #"setGeneratesCalendarDates:") = Void, Bool;
overload selector(static #"setGeneratesDecimalNumbers:") = Void, Bool;
overload selector(static #"setGeometryFlipped:") = Void, Bool;
overload selector(static #"setGlyphGenerator:") = Void, NSGlyphGenerator;
overload selector(static #"setGradientType:") = Void, UInt;
overload selector(static #"setGrammarCheckingEnabled:") = Void, Bool;
overload selector(static #"setGraphicsState:") = Void, Int;
overload selector(static #"setGregorianStartDate:") = Void, NSDate;
overload selector(static #"setGridColor:") = Void, NSColor;
overload selector(static #"setGridStyleMask:") = Void, UInt;
overload selector(static #"setGroupingAttributes:") = Void, NSArray;
overload selector(static #"setGroupingSeparator:") = Void, NSString;
overload selector(static #"setGroupingSize:") = Void, UInt;
overload selector(static #"setGroupsByEvent:") = Void, Bool;
overload selector(static #"setHTTPBody:") = Void, NSData;
overload selector(static #"setHTTPBodyStream:") = Void, NSInputStream;
overload selector(static #"setHTTPMethod:") = Void, NSString;
overload selector(static #"setHTTPShouldHandleCookies:") = Void, Bool;
overload selector(static #"setHardInvalidation:forGlyphRange:") = Void, Bool, NSRange;
overload selector(static #"setHasHorizontalRuler:") = Void, Bool;
overload selector(static #"setHasHorizontalScroller:") = Void, Bool;
overload selector(static #"setHasShadow:") = Void, Bool;
overload selector(static #"setHasThousandSeparators:") = Void, Bool;
overload selector(static #"setHasUndoManager:") = Void, Bool;
overload selector(static #"setHasVerticalRuler:") = Void, Bool;
overload selector(static #"setHasVerticalScroller:") = Void, Bool;
overload selector(static #"setHashFunction:") = Void, CCodePointer[(RawPointer,CCodePointer[(RawPointer),(UInt)]),(UInt)];
overload selector(static #"setHeadIndent:") = Void, Float;
overload selector(static #"setHeaderCell:") = Void, NSCell;
overload selector(static #"setHeaderLevel:") = Void, Int;
overload selector(static #"setHeaderToolTip:") = Void, NSString;
overload selector(static #"setHeaderView:") = Void, NSTableHeaderView;
overload selector(static #"setHeightTracksTextView:") = Void, Bool;
overload selector(static #"setHelpAnchor:") = Void, NSString;
overload selector(static #"setHelpMenu:") = Void, NSMenu;
overload selector(static #"setHidden:") = Void, Bool;
overload selector(static #"setHiddenUntilMouseMoves:") = Void, Bool;
overload selector(static #"setHidesEmptyCells:") = Void, Bool;
overload selector(static #"setHidesOnDeactivate:") = Void, Bool;
overload selector(static #"setHighlightMode:") = Void, Bool;
overload selector(static #"setHighlighted:") = Void, Bool;
overload selector(static #"setHighlightedItemIndex:") = Void, Int;
overload selector(static #"setHighlightedTableColumn:") = Void, NSTableColumn;
overload selector(static #"setHighlightsBy:") = Void, Int;
overload selector(static #"setHorizontal:") = Void, Bool;
overload selector(static #"setHorizontalEdgePadding:") = Void, Float;
overload selector(static #"setHorizontalLineScroll:") = Void, Float;
overload selector(static #"setHorizontalPageScroll:") = Void, Float;
overload selector(static #"setHorizontalPagination:") = Void, UInt;
overload selector(static #"setHorizontalRulerView:") = Void, NSRulerView;
overload selector(static #"setHorizontalScroller:") = Void, NSScroller;
overload selector(static #"setHorizontallyCentered:") = Void, Bool;
overload selector(static #"setHorizontallyResizable:") = Void, Bool;
overload selector(static #"setHostCacheEnabled:") = Void, Bool;
overload selector(static #"setHour:") = Void, Int;
overload selector(static #"setHyphenationFactor:") = Void, Float;
overload selector(static #"setIcon:") = Void, NSImage;
overload selector(static #"setIcon:forFile:options:") = Bool, NSImage, NSString, UInt;
overload selector(static #"setIdentifier:") = Void, Id;
overload selector(static #"setIgnoredWords:inSpellDocumentWithTag:") = Void, NSArray, Int;
overload selector(static #"setIgnoresAlpha:") = Void, Bool;
overload selector(static #"setIgnoresMouseEvents:") = Void, Bool;
overload selector(static #"setIgnoresMultiClick:") = Void, Bool;
overload selector(static #"setImage:") = Void, NSImage;
overload selector(static #"setImage:forSegment:") = Void, NSImage, Int;
overload selector(static #"setImageAlignment:") = Void, UInt;
overload selector(static #"setImageDimsWhenDisabled:") = Void, Bool;
overload selector(static #"setImageFrameStyle:") = Void, UInt;
overload selector(static #"setImageInterpolation:") = Void, UInt;
overload selector(static #"setImageOrigin:") = Void, NSPoint;
overload selector(static #"setImagePosition:") = Void, UInt;
overload selector(static #"setImageScaling:") = Void, UInt;
overload selector(static #"setImageScaling:forSegment:") = Void, UInt, Int;
overload selector(static #"setImportsGraphics:") = Void, Bool;
overload selector(static #"setInContext:") = Void, NSGraphicsContext;
overload selector(static #"setIncludedKeys:") = Void, NSArray;
overload selector(static #"setIncrement:") = Void, Double;
overload selector(static #"setIndentationLevel:") = Void, Int;
overload selector(static #"setIndentationMarkerFollowsCell:") = Void, Bool;
overload selector(static #"setIndentationPerLevel:") = Void, Float;
overload selector(static #"setIndependentConversationQueueing:") = Void, Bool;
overload selector(static #"setIndeterminate:") = Void, Bool;
overload selector(static #"setIndex:") = Void, Int;
overload selector(static #"setIndexed:") = Void, Bool;
overload selector(static #"setIndexedBySpotlight:") = Void, Bool;
overload selector(static #"setIndicatorImage:inTableColumn:") = Void, NSImage, NSTableColumn;
overload selector(static #"setInformativeText:") = Void, NSString;
overload selector(static #"setInitialFirstResponder:") = Void, NSView;
overload selector(static #"setInitialKey:") = Void, NSString;
overload selector(static #"setInitialValue:") = Void, Id;
overload selector(static #"setInitialValues:") = Void, NSDictionary;
overload selector(static #"setInsertionClassDescription:") = Void, NSScriptClassDescription;
overload selector(static #"setInsertionPointColor:") = Void, NSColor;
overload selector(static #"setIntAttribute:value:forGlyphAtIndex:") = Void, Int, Int, UInt;
overload selector(static #"setIntValue:") = Void, Int;
overload selector(static #"setInteger:forKey:") = Void, Int, NSString;
overload selector(static #"setIntegerValue:") = Void, Int;
overload selector(static #"setIntercellSpacing:") = Void, NSSize;
overload selector(static #"setInterfaceStyle:") = Void, UInt;
overload selector(static #"setInterlineSpacing:") = Void, Float;
overload selector(static #"setInternationalCurrencySymbol:") = Void, NSString;
overload selector(static #"setIsEqualFunction:") = Void, CCodePointer[(RawPointer,RawPointer,CCodePointer[(RawPointer),(UInt)]),(CChar)];
overload selector(static #"setIsMiniaturized:") = Void, Bool;
overload selector(static #"setIsPaneSplitter:") = Void, Bool;
overload selector(static #"setIsVisible:") = Void, Bool;
overload selector(static #"setIsZoomed:") = Void, Bool;
overload selector(static #"setItemHeight:") = Void, Float;
overload selector(static #"setItemPrototype:") = Void, NSCollectionViewItem;
overload selector(static #"setJobDisposition:") = Void, NSString;
overload selector(static #"setJobStyleHint:") = Void, NSString;
overload selector(static #"setJobTitle:") = Void, NSString;
overload selector(static #"setKey:") = Void, NSString;
overload selector(static #"setKeyCell:") = Void, NSCell;
overload selector(static #"setKeyEquivalent:") = Void, NSString;
overload selector(static #"setKeyEquivalentFont:") = Void, NSFont;
overload selector(static #"setKeyEquivalentFont:size:") = Void, NSString, Float;
overload selector(static #"setKeyEquivalentModifierMask:") = Void, UInt;
overload selector(static #"setKeyboardFocusRingNeedsDisplayInRect:") = Void, NSRect;
overload selector(static #"setKeys:triggerChangeNotificationsForDependentKey:") = Void, NSArray, NSString;
overload selector(static #"setKnobProportion:") = Void, Float;
overload selector(static #"setKnobThickness:") = Void, Float;
overload selector(static #"setLabel:") = Void, NSString;
overload selector(static #"setLabel:forSegment:") = Void, NSString, Int;
overload selector(static #"setLanguage:") = Bool, NSString;
overload selector(static #"setLastColumn:") = Void, Int;
overload selector(static #"setLastComponentOfFileName:") = Void, NSString;
overload selector(static #"setLaunchPath:") = Void, NSString;
overload selector(static #"setLayer:") = Void, CALayer;
overload selector(static #"setLayerContentsPlacement:") = Void, Int;
overload selector(static #"setLayerContentsRedrawPolicy:") = Void, Int;
overload selector(static #"setLayoutAlgorithm:") = Void, UInt;
overload selector(static #"setLayoutManager:") = Void, NSLayoutManager;
overload selector(static #"setLayoutRect:forTextBlock:glyphRange:") = Void, NSRect, NSTextBlock, NSRange;
overload selector(static #"setLeadingOffset:") = Void, Float;
overload selector(static #"setLeaf:") = Void, Bool;
overload selector(static #"setLeafKeyPath:") = Void, NSString;
overload selector(static #"setLeftMargin:") = Void, Float;
overload selector(static #"setLength:") = Void, UInt;
overload selector(static #"setLenient:") = Void, Bool;
overload selector(static #"setLevel:") = Void, Int;
overload selector(static #"setLevelIndicatorStyle:") = Void, UInt;
overload selector(static #"setLevelsOfUndo:") = Void, UInt;
overload selector(static #"setLineBreakMode:") = Void, UInt;
overload selector(static #"setLineCapStyle:") = Void, UInt;
overload selector(static #"setLineDash:count:phase:") = Void, Pointer[Float], Int, Float;
overload selector(static #"setLineFragmentPadding:") = Void, Float;
overload selector(static #"setLineFragmentRect:forGlyphRange:usedRect:") = Void, NSRect, NSRange, NSRect;
overload selector(static #"setLineFragmentRect:forGlyphRange:usedRect:baselineOffset:") = Void, NSRect, NSRange, NSRect, Float;
overload selector(static #"setLineHeightMultiple:") = Void, Float;
overload selector(static #"setLineJoinStyle:") = Void, UInt;
overload selector(static #"setLineScroll:") = Void, Float;
overload selector(static #"setLineSpacing:") = Void, Float;
overload selector(static #"setLineWidth:") = Void, Float;
overload selector(static #"setLinkTextAttributes:") = Void, NSDictionary;
overload selector(static #"setListensInForegroundOnly:") = Void, Bool;
overload selector(static #"setLoaded:") = Void, Bool;
overload selector(static #"setLocale:") = Void, NSLocale;
overload selector(static #"setLocalizedKey:") = Void, NSString;
overload selector(static #"setLocalizedKeyDictionary:") = Void, NSDictionary;
overload selector(static #"setLocalizedKeyTable:") = Void, NSString;
overload selector(static #"setLocalizesFormat:") = Void, Bool;
overload selector(static #"setLocation:forStartOfGlyphRange:") = Void, NSPoint, NSRange;
overload selector(static #"setLocation:withAdvancements:forStartOfGlyphRange:") = Void, NSPoint, Pointer[Float], NSRange;
overload selector(static #"setLocations:startingGlyphIndexes:count:forGlyphRange:") = Void, NSPointArray, Pointer[UInt], UInt, NSRange;
overload selector(static #"setLongEraSymbols:") = Void, NSArray;
overload selector(static #"setLoopMode:") = Void, UInt;
overload selector(static #"setLoops:") = Void, Bool;
overload selector(static #"setMIMEType:") = Void, NSString;
overload selector(static #"setMagnificationFilter:") = Void, NSString;
overload selector(static #"setMainDocumentURL:") = Void, NSURL;
overload selector(static #"setMainMenu:") = Void, NSMenu;
overload selector(static #"setManagedObjectContext:") = Void, NSManagedObjectContext;
overload selector(static #"setMark:") = Void, Id;
overload selector(static #"setMarkedText:selectedRange:") = Void, Id, NSRange;
overload selector(static #"setMarkedText:selectedRange:replacementRange:") = Void, Id, NSRange, NSRange;
overload selector(static #"setMarkedTextAttributes:") = Void, NSDictionary;
overload selector(static #"setMarkerLocation:") = Void, Float;
overload selector(static #"setMarkers:") = Void, NSArray;
overload selector(static #"setMask:") = Void, CALayer;
overload selector(static #"setMasksToBounds:") = Void, Bool;
overload selector(static #"setMatchesOnMultipleResolution:") = Void, Bool;
overload selector(static #"setMatrixClass:") = Void, Id;
overload selector(static #"setMaxConcurrentOperationCount:") = Void, Int;
overload selector(static #"setMaxContentSize:") = Void, NSSize;
overload selector(static #"setMaxDate:") = Void, NSDate;
overload selector(static #"setMaxItemSize:") = Void, NSSize;
overload selector(static #"setMaxNumberOfColumns:") = Void, UInt;
overload selector(static #"setMaxNumberOfRows:") = Void, UInt;
overload selector(static #"setMaxSize:") = Void, NSSize;
overload selector(static #"setMaxValue:") = Void, Double;
overload selector(static #"setMaxVisibleColumns:") = Void, Int;
overload selector(static #"setMaxWidth:") = Void, Float;
overload selector(static #"setMaximum:") = Void, NSNumber;
overload selector(static #"setMaximumFractionDigits:") = Void, UInt;
overload selector(static #"setMaximumIntegerDigits:") = Void, UInt;
overload selector(static #"setMaximumLineHeight:") = Void, Float;
overload selector(static #"setMaximumRecents:") = Void, Int;
overload selector(static #"setMaximumSignificantDigits:") = Void, UInt;
overload selector(static #"setMeasurementUnits:") = Void, NSString;
overload selector(static #"setMemoryCapacity:") = Void, UInt;
overload selector(static #"setMenu:") = Void, NSMenu;
overload selector(static #"setMenu:forSegment:") = Void, NSMenu, Int;
overload selector(static #"setMenuBarVisible:") = Void, Bool;
overload selector(static #"setMenuChangedMessagesEnabled:") = Void, Bool;
overload selector(static #"setMenuFormRepresentation:") = Void, NSMenuItem;
overload selector(static #"setMenuItem:") = Void, NSMenuItem;
overload selector(static #"setMenuItemCell:forItemAtIndex:") = Void, NSMenuItemCell, Int;
overload selector(static #"setMenuRepresentation:") = Void, Id;
overload selector(static #"setMenuView:") = Void, NSMenuView;
overload selector(static #"setMenuZone:") = Void, Pointer[NSZone];
overload selector(static #"setMessage:") = Void, NSString;
overload selector(static #"setMessageText:") = Void, NSString;
overload selector(static #"setMinColumnWidth:") = Void, Float;
overload selector(static #"setMinContentSize:") = Void, NSSize;
overload selector(static #"setMinDate:") = Void, NSDate;
overload selector(static #"setMinItemSize:") = Void, NSSize;
overload selector(static #"setMinSize:") = Void, NSSize;
overload selector(static #"setMinValue:") = Void, Double;
overload selector(static #"setMinWidth:") = Void, Float;
overload selector(static #"setMinificationFilter:") = Void, NSString;
overload selector(static #"setMinificationFilterBias:") = Void, Float;
overload selector(static #"setMinimum:") = Void, NSNumber;
overload selector(static #"setMinimumDaysInFirstWeek:") = Void, UInt;
overload selector(static #"setMinimumFractionDigits:") = Void, UInt;
overload selector(static #"setMinimumIntegerDigits:") = Void, UInt;
overload selector(static #"setMinimumLineHeight:") = Void, Float;
overload selector(static #"setMinimumSignificantDigits:") = Void, UInt;
overload selector(static #"setMinimumWidth:") = Void, Float;
overload selector(static #"setMiniwindowImage:") = Void, NSImage;
overload selector(static #"setMiniwindowTitle:") = Void, NSString;
overload selector(static #"setMinusSign:") = Void, NSString;
overload selector(static #"setMinute:") = Void, Int;
overload selector(static #"setMiterLimit:") = Void, Float;
overload selector(static #"setMixedStateImage:") = Void, NSImage;
overload selector(static #"setMnemonicLocation:") = Void, UInt;
overload selector(static #"setMode:") = Void, UInt;
overload selector(static #"setMonth:") = Void, Int;
overload selector(static #"setMonthSymbols:") = Void, NSArray;
overload selector(static #"setMouseCoalescingEnabled:") = Void, Bool;
overload selector(static #"setMovable:") = Void, Bool;
overload selector(static #"setMovableByWindowBackground:") = Void, Bool;
overload selector(static #"setMovie:") = Void, NSMovie;
overload selector(static #"setMsgid:") = Void, UInt;
overload selector(static #"setMultiplier:") = Void, NSNumber;
overload selector(static #"setMuted:") = Void, Bool;
overload selector(static #"setName:") = Bool, NSString;
overload selector(static #"setNameFieldLabel:") = Void, NSString;
overload selector(static #"setNameFieldStringValue:") = Void, NSString;
overload selector(static #"setNamespaces:") = Void, NSArray;
overload selector(static #"setNeedsDisplay") = Void;
overload selector(static #"setNeedsDisplay:") = Void, Bool;
overload selector(static #"setNeedsDisplayForItemAtIndex:") = Void, Int;
overload selector(static #"setNeedsDisplayInRect:") = Void, NSRect;
overload selector(static #"setNeedsDisplayInRect:avoidAdditionalLayout:") = Void, NSRect, Bool;
overload selector(static #"setNeedsDisplayOnBoundsChange:") = Void, Bool;
overload selector(static #"setNeedsLayout") = Void;
overload selector(static #"setNeedsSizing:") = Void, Bool;
overload selector(static #"setNegativeFormat:") = Void, NSString;
overload selector(static #"setNegativeInfinitySymbol:") = Void, NSString;
overload selector(static #"setNegativePrefix:") = Void, NSString;
overload selector(static #"setNegativeSuffix:") = Void, NSString;
overload selector(static #"setNestingMode:") = Void, UInt;
overload selector(static #"setNextKeyView:") = Void, NSView;
overload selector(static #"setNextResponder:") = Void, NSResponder;
overload selector(static #"setNextState") = Void;
overload selector(static #"setNilSymbol:") = Void, NSString;
overload selector(static #"setNilValueForKey:") = Void, NSString;
overload selector(static #"setNotANumberSymbol:") = Void, NSString;
overload selector(static #"setNotShownAttribute:forGlyphAtIndex:") = Void, Bool, UInt;
overload selector(static #"setNotShownAttribute:forGlyphRange:") = Void, Bool, NSRange;
overload selector(static #"setNotationName:") = Void, NSString;
overload selector(static #"setNotificationBatchingInterval:") = Void, Double;
overload selector(static #"setNumberOfColumns:") = Void, UInt;
overload selector(static #"setNumberOfMajorTickMarks:") = Void, Int;
overload selector(static #"setNumberOfTickMarks:") = Void, Int;
overload selector(static #"setNumberOfVisibleItems:") = Void, Int;
overload selector(static #"setNumberStyle:") = Void, UInt;
overload selector(static #"setObject:forKey:") = Void, Id, Id;
overload selector(static #"setObject:forKey:cost:") = Void, Id, Id, UInt;
overload selector(static #"setObject:forProperty:error:") = Bool, Id, NSString, Pointer[NSError];
overload selector(static #"setObjectBeingTested:") = Void, Id;
overload selector(static #"setObjectClass:") = Void, Id;
overload selector(static #"setObjectValue:") = Void, Id;
overload selector(static #"setObjectZone:") = Void, Pointer[NSZone];
overload selector(static #"setObservationInfo:") = Void, RawPointer;
overload selector(static #"setOffScreen:width:height:rowbytes:") = Void, RawPointer, Int, Int, Int;
overload selector(static #"setOffStateImage:") = Void, NSImage;
overload selector(static #"setOnMouseEntered:") = Void, Bool;
overload selector(static #"setOnMouseExited:") = Void, Bool;
overload selector(static #"setOnStateImage:") = Void, NSImage;
overload selector(static #"setOneShot:") = Void, Bool;
overload selector(static #"setOpacity:") = Void, Float;
overload selector(static #"setOpaque:") = Void, Bool;
overload selector(static #"setOpenGLContext:") = Void, NSOpenGLContext;
overload selector(static #"setOpenGLPixelFormat:") = Void, NSOpenGLPixelFormat;
overload selector(static #"setOptional:") = Void, Bool;
overload selector(static #"setOptions:") = Void, Int;
overload selector(static #"setOrderedIndex:") = Void, Int;
overload selector(static #"setOrientation:") = Void, UInt;
overload selector(static #"setOriginOffset:") = Void, Float;
overload selector(static #"setOutlineTableColumn:") = Void, NSTableColumn;
overload selector(static #"setOutputFormat:") = Void, UInt;
overload selector(static #"setPMSymbol:") = Void, NSString;
overload selector(static #"setPaddingCharacter:") = Void, NSString;
overload selector(static #"setPaddingPosition:") = Void, UInt;
overload selector(static #"setPageOrder:") = Void, Int;
overload selector(static #"setPageScroll:") = Void, Float;
overload selector(static #"setPaletteLabel:") = Void, NSString;
overload selector(static #"setPanelFont:isMultiple:") = Void, NSFont, Bool;
overload selector(static #"setPaperName:") = Void, NSString;
overload selector(static #"setPaperSize:") = Void, NSSize;
overload selector(static #"setParagraphGlyphRange:separatorGlyphRange:") = Void, NSRange, NSRange;
overload selector(static #"setParagraphSpacing:") = Void, Float;
overload selector(static #"setParagraphSpacingBefore:") = Void, Float;
overload selector(static #"setParagraphStyle:") = Void, NSParagraphStyle;
overload selector(static #"setParagraphs:") = Void, NSArray;
overload selector(static #"setParamDescriptor:forKeyword:") = Void, NSAppleEventDescriptor, CULong;
overload selector(static #"setParentWindow:") = Void, NSWindow;
overload selector(static #"setPartialStringValidationEnabled:") = Void, Bool;
overload selector(static #"setPath:") = Bool, NSString;
overload selector(static #"setPathComponentCells:") = Void, NSArray;
overload selector(static #"setPathSeparator:") = Void, NSString;
overload selector(static #"setPathStyle:") = Void, Int;
overload selector(static #"setPatternPhase:") = Void, NSPoint;
overload selector(static #"setPerMillSymbol:") = Void, NSString;
overload selector(static #"setPercentSymbol:") = Void, NSString;
overload selector(static #"setPeriodicDelay:interval:") = Void, Float, Float;
overload selector(static #"setPersistentDomain:forName:") = Void, NSDictionary, NSString;
overload selector(static #"setPickerMask:") = Void, UInt;
overload selector(static #"setPickerMode:") = Void, Int;
overload selector(static #"setPixel:atX:y:") = Void, Pointer[UInt], Int, Int;
overload selector(static #"setPixelBuffer:cubeMapFace:mipMapLevel:currentVirtualScreen:") = Void, NSOpenGLPixelBuffer, UInt, Int, Int;
overload selector(static #"setPixelFormat:") = Void, NSOpenGLPixelFormat;
overload selector(static #"setPixelsHigh:") = Void, Int;
overload selector(static #"setPixelsWide:") = Void, Int;
overload selector(static #"setPlaceholderAttributedString:") = Void, NSAttributedString;
overload selector(static #"setPlaceholderString:") = Void, NSString;
overload selector(static #"setPlaybackDeviceIdentifier:") = Void, NSString;
overload selector(static #"setPlaysEveryFrame:") = Void, Bool;
overload selector(static #"setPlaysSelectionOnly:") = Void, Bool;
overload selector(static #"setPlusSign:") = Void, NSString;
overload selector(static #"setPosition:") = Void, CGPoint;
overload selector(static #"setPosition:ofDividerAtIndex:") = Void, Float, Int;
overload selector(static #"setPositiveFormat:") = Void, NSString;
overload selector(static #"setPositiveInfinitySymbol:") = Void, NSString;
overload selector(static #"setPositivePrefix:") = Void, NSString;
overload selector(static #"setPositiveSuffix:") = Void, NSString;
overload selector(static #"setPostsBoundsChangedNotifications:") = Void, Bool;
overload selector(static #"setPostsFrameChangedNotifications:") = Void, Bool;
overload selector(static #"setPredicate:") = Void, NSPredicate;
overload selector(static #"setPreferredBackingLocation:") = Void, UInt;
overload selector(static #"setPreferredEdge:") = Void, NSRectEdge;
overload selector(static #"setPreferredFilename:") = Void, NSString;
overload selector(static #"setPreferredFontNames:") = Void, NSArray;
overload selector(static #"setPrefersAllColumnUserResizing:") = Void, Bool;
overload selector(static #"setPrefersColorMatch:") = Void, Bool;
overload selector(static #"setPresentationOptions:") = Void, UInt;
overload selector(static #"setPreservesContentDuringLiveResize:") = Void, Bool;
overload selector(static #"setPreservesSelection:") = Void, Bool;
overload selector(static #"setPreventsApplicationTerminationWhenModal:") = Void, Bool;
overload selector(static #"setPrintInfo:") = Void, NSPrintInfo;
overload selector(static #"setPrintPanel:") = Void, NSPrintPanel;
overload selector(static #"setPrinter:") = Void, NSPrinter;
overload selector(static #"setProcessName:") = Void, NSString;
overload selector(static #"setProgressMarks:") = Void, NSArray;
overload selector(static #"setPrompt:") = Void, NSString;
overload selector(static #"setProperty:forKey:") = Bool, Id, NSString;
overload selector(static #"setProperty:forKey:inRequest:") = Void, Id, NSString, NSMutableURLRequest;
overload selector(static #"setProperty:withValue:") = Void, NSString, Id;
overload selector(static #"setPropertyList:forType:") = Bool, Id, NSString;
overload selector(static #"setProtocolForProxy:") = Void, Id;
overload selector(static #"setProtocolSpecificInformation:") = Void, NSString;
overload selector(static #"setPrototype:") = Void, NSCell;
overload selector(static #"setPublicID:") = Void, NSString;
overload selector(static #"setPullsDown:") = Void, Bool;
overload selector(static #"setQuarter:") = Void, Int;
overload selector(static #"setQuarterSymbols:") = Void, NSArray;
overload selector(static #"setQueuePriority:") = Void, Int;
overload selector(static #"setRangeContainerObject:") = Void, Id;
overload selector(static #"setRate:") = Void, Float;
overload selector(static #"setReceiversSpecifier:") = Void, NSScriptObjectSpecifier;
overload selector(static #"setRecentSearches:") = Void, NSArray;
overload selector(static #"setRecentsAutosaveName:") = Void, NSString;
overload selector(static #"setRefusesFirstResponder:") = Void, Bool;
overload selector(static #"setRelativePosition:") = Void, UInt;
overload selector(static #"setReleasedWhenClosed:") = Void, Bool;
overload selector(static #"setRelinquishFunction:") = Void, CCodePointer[(RawPointer,CCodePointer[(RawPointer),(UInt)]),()];
overload selector(static #"setRemovable:") = Void, Bool;
overload selector(static #"setRenamingIdentifier:") = Void, NSString;
overload selector(static #"setRepeatCount:") = Void, Float;
overload selector(static #"setRepeatDuration:") = Void, Double;
overload selector(static #"setReplyTimeout:") = Void, Double;
overload selector(static #"setRepresentation") = NSSet;
overload selector(static #"setRepresentedFilename:") = Void, NSString;
overload selector(static #"setRepresentedObject:") = Void, Id;
overload selector(static #"setRepresentedURL:") = Void, NSURL;
overload selector(static #"setRequestTimeout:") = Void, Double;
overload selector(static #"setRequiredFileType:") = Void, NSString;
overload selector(static #"setReservedThicknessForAccessoryView:") = Void, Float;
overload selector(static #"setReservedThicknessForMarkers:") = Void, Float;
overload selector(static #"setResizable:") = Void, Bool;
overload selector(static #"setResizeIncrements:") = Void, NSSize;
overload selector(static #"setResizingMask:") = Void, UInt;
overload selector(static #"setResolvesAliases:") = Void, Bool;
overload selector(static #"setResourceData:") = Bool, NSData;
overload selector(static #"setResourceValue:forKey:error:") = Bool, Id, NSString, Pointer[NSError];
overload selector(static #"setResourceValues:error:") = Bool, NSDictionary, Pointer[NSError];
overload selector(static #"setReturnValue:") = Void, RawPointer;
overload selector(static #"setReusesColumns:") = Void, Bool;
overload selector(static #"setRichText:") = Void, Bool;
overload selector(static #"setRightMargin:") = Void, Float;
overload selector(static #"setRootElement:") = Void, NSXMLNode;
overload selector(static #"setRootObject:") = Void, Id;
overload selector(static #"setRoundingBehavior:") = Void, NSDecimalNumberHandler;
overload selector(static #"setRoundingIncrement:") = Void, NSNumber;
overload selector(static #"setRoundingMode:") = Void, UInt;
overload selector(static #"setRowClass:") = Void, Id;
overload selector(static #"setRowHeight:") = Void, Float;
overload selector(static #"setRowTemplates:") = Void, NSArray;
overload selector(static #"setRowTypeKeyPath:") = Void, NSString;
overload selector(static #"setRuleThickness:") = Void, Float;
overload selector(static #"setRulerViewClass:") = Void, Id;
overload selector(static #"setRulerVisible:") = Void, Bool;
overload selector(static #"setRulersVisible:") = Void, Bool;
overload selector(static #"setRunLoopModes:") = Void, NSArray;
overload selector(static #"setScalesWhenResized:") = Void, Bool;
overload selector(static #"setScalingFactor:") = Void, Float;
overload selector(static #"setScanLocation:") = Void, UInt;
overload selector(static #"setScriptErrorExpectedTypeDescriptor:") = Void, NSAppleEventDescriptor;
overload selector(static #"setScriptErrorNumber:") = Void, Int;
overload selector(static #"setScriptErrorOffendingObjectDescriptor:") = Void, NSAppleEventDescriptor;
overload selector(static #"setScriptErrorString:") = Void, NSString;
overload selector(static #"setScriptingProperties:") = Void, NSDictionary;
overload selector(static #"setScrollView:") = Void, NSScrollView;
overload selector(static #"setScrollable:") = Void, Bool;
overload selector(static #"setScrollsDynamically:") = Void, Bool;
overload selector(static #"setSearchButtonCell:") = Void, NSButtonCell;
overload selector(static #"setSearchMenuTemplate:") = Void, NSMenu;
overload selector(static #"setSearchScopes:") = Void, NSArray;
overload selector(static #"setSecond:") = Void, Int;
overload selector(static #"setSecondaryGroupingSize:") = Void, UInt;
overload selector(static #"setSegmentCount:") = Void, Int;
overload selector(static #"setSegmentStyle:") = Void, Int;
overload selector(static #"setSelectable:") = Void, Bool;
overload selector(static #"setSelected:") = Void, Bool;
overload selector(static #"setSelected:forSegment:") = Void, Bool, Int;
overload selector(static #"setSelectedAttributes:isMultiple:") = Void, NSDictionary, Bool;
overload selector(static #"setSelectedFont:isMultiple:") = Void, NSFont, Bool;
overload selector(static #"setSelectedItemIdentifier:") = Void, NSString;
overload selector(static #"setSelectedKeyboardInputSource:") = Void, NSString;
overload selector(static #"setSelectedObjects:") = Bool, NSArray;
overload selector(static #"setSelectedRange:") = Void, NSRange;
overload selector(static #"setSelectedRange:affinity:stillSelecting:") = Void, NSRange, UInt, Bool;
overload selector(static #"setSelectedRanges:") = Void, NSArray;
overload selector(static #"setSelectedRanges:affinity:stillSelecting:") = Void, NSArray, UInt, Bool;
overload selector(static #"setSelectedSegment:") = Void, Int;
overload selector(static #"setSelectedTextAttributes:") = Void, NSDictionary;
overload selector(static #"setSelectionByRect:") = Void, Bool;
overload selector(static #"setSelectionFrom:to:anchor:highlight:") = Void, Int, Int, Int, Bool;
overload selector(static #"setSelectionGranularity:") = Void, UInt;
overload selector(static #"setSelectionHighlightStyle:") = Void, Int;
overload selector(static #"setSelectionIndex:") = Bool, UInt;
overload selector(static #"setSelectionIndexPath:") = Bool, NSIndexPath;
overload selector(static #"setSelectionIndexPaths:") = Bool, NSArray;
overload selector(static #"setSelectionIndexes:") = Bool, NSIndexSet;
overload selector(static #"setSelectionOnly:") = Void, Bool;
overload selector(static #"setSelector:") = Void, SelectorHandle;
overload selector(static #"setSelectsInsertedObjects:") = Void, Bool;
overload selector(static #"setSendsActionOnArrowKeys:") = Void, Bool;
overload selector(static #"setSendsActionOnEndEditing:") = Void, Bool;
overload selector(static #"setSendsSearchStringImmediately:") = Void, Bool;
overload selector(static #"setSendsWholeSearchString:") = Void, Bool;
overload selector(static #"setSeparatesColumns:") = Void, Bool;
overload selector(static #"setServicesMenu:") = Void, NSMenu;
overload selector(static #"setServicesProvider:") = Void, Id;
overload selector(static #"setSet:") = Void, NSSet;
overload selector(static #"setShadow:") = Void, NSShadow;
overload selector(static #"setShadowBlurRadius:") = Void, Float;
overload selector(static #"setShadowColor:") = Void, CGColorRef;
overload selector(static #"setShadowOffset:") = Void, CGSize;
overload selector(static #"setShadowOpacity:") = Void, Float;
overload selector(static #"setShadowRadius:") = Void, Float;
overload selector(static #"setSharedPrintInfo:") = Void, NSPrintInfo;
overload selector(static #"setSharedScriptSuiteRegistry:") = Void, NSScriptSuiteRegistry;
overload selector(static #"setSharedURLCache:") = Void, NSURLCache;
overload selector(static #"setSharingType:") = Void, UInt;
overload selector(static #"setShortMonthSymbols:") = Void, NSArray;
overload selector(static #"setShortQuarterSymbols:") = Void, NSArray;
overload selector(static #"setShortStandaloneMonthSymbols:") = Void, NSArray;
overload selector(static #"setShortStandaloneQuarterSymbols:") = Void, NSArray;
overload selector(static #"setShortStandaloneWeekdaySymbols:") = Void, NSArray;
overload selector(static #"setShortWeekdaySymbols:") = Void, NSArray;
overload selector(static #"setShouldAntialias:") = Void, Bool;
overload selector(static #"setShouldCascadeWindows:") = Void, Bool;
overload selector(static #"setShouldCloseDocument:") = Void, Bool;
overload selector(static #"setShouldCreateUI:") = Void, Bool;
overload selector(static #"setShouldProcessNamespaces:") = Void, Bool;
overload selector(static #"setShouldReportNamespacePrefixes:") = Void, Bool;
overload selector(static #"setShouldResolveExternalEntities:") = Void, Bool;
overload selector(static #"setShowPanels:") = Void, Bool;
overload selector(static #"setShowsAlpha:") = Void, Bool;
overload selector(static #"setShowsApplicationBadge:") = Void, Bool;
overload selector(static #"setShowsBaselineSeparator:") = Void, Bool;
overload selector(static #"setShowsBorderOnlyWhileMouseInside:") = Void, Bool;
overload selector(static #"setShowsControlCharacters:") = Void, Bool;
overload selector(static #"setShowsFirstResponder:") = Void, Bool;
overload selector(static #"setShowsHelp:") = Void, Bool;
overload selector(static #"setShowsHiddenFiles:") = Void, Bool;
overload selector(static #"setShowsInvisibleCharacters:") = Void, Bool;
overload selector(static #"setShowsPrintPanel:") = Void, Bool;
overload selector(static #"setShowsProgressPanel:") = Void, Bool;
overload selector(static #"setShowsResizeIndicator:") = Void, Bool;
overload selector(static #"setShowsStateBy:") = Void, Int;
overload selector(static #"setShowsStateColumn:") = Void, Bool;
overload selector(static #"setShowsSuppressionButton:") = Void, Bool;
overload selector(static #"setShowsToolbarButton:") = Void, Bool;
overload selector(static #"setSize:") = Void, NSSize;
overload selector(static #"setSizeFunction:") = Void, CCodePointer[(RawPointer),(UInt)];
overload selector(static #"setSizeMode:") = Void, UInt;
overload selector(static #"setSliderType:") = Void, UInt;
overload selector(static #"setSmartInsertDeleteEnabled:") = Void, Bool;
overload selector(static #"setSortDescriptorPrototype:") = Void, NSSortDescriptor;
overload selector(static #"setSortDescriptors:") = Void, NSArray;
overload selector(static #"setSound:") = Void, NSSound;
overload selector(static #"setSpeed:") = Void, Float;
overload selector(static #"setSpellingState:range:") = Void, Int, NSRange;
overload selector(static #"setStackSize:") = Void, UInt;
overload selector(static #"setStandalone:") = Void, Bool;
overload selector(static #"setStandaloneMonthSymbols:") = Void, NSArray;
overload selector(static #"setStandaloneQuarterSymbols:") = Void, NSArray;
overload selector(static #"setStandaloneWeekdaySymbols:") = Void, NSArray;
overload selector(static #"setStandardError:") = Void, Id;
overload selector(static #"setStandardInput:") = Void, Id;
overload selector(static #"setStandardOutput:") = Void, Id;
overload selector(static #"setStartSpecifier:") = Void, NSScriptObjectSpecifier;
overload selector(static #"setStartSubelementIdentifier:") = Void, UInt;
overload selector(static #"setStartSubelementIndex:") = Void, Int;
overload selector(static #"setStartingItemNumber:") = Void, Int;
overload selector(static #"setState:") = Void, Int;
overload selector(static #"setState:atRow:column:") = Void, Int, Int, Int;
overload selector(static #"setStoredInExternalRecord:") = Void, Bool;
overload selector(static #"setString:") = Void, NSString;
overload selector(static #"setString:forType:") = Bool, NSString, NSString;
overload selector(static #"setStringValue:") = Void, NSString;
overload selector(static #"setStringValue:resolvingEntities:") = Void, NSString, Bool;
overload selector(static #"setStroke") = Void;
overload selector(static #"setStyle:") = Void, UInt;
overload selector(static #"setStyleMask:") = Void, UInt;
overload selector(static #"setSubitems:") = Void, NSArray;
overload selector(static #"setSublayerTransform:") = Void, CATransform3D;
overload selector(static #"setSublayers:") = Void, NSArray;
overload selector(static #"setSubmenu:") = Void, NSMenu;
overload selector(static #"setSubmenu:forItem:") = Void, NSMenu, NSMenuItem;
overload selector(static #"setSubrowsKeyPath:") = Void, NSString;
overload selector(static #"setSubstitutionsPanelAccessoryViewController:") = Void, NSViewController;
overload selector(static #"setSubviews:") = Void, NSArray;
overload selector(static #"setSupermenu:") = Void, NSMenu;
overload selector(static #"setSuspended:") = Void, Bool;
overload selector(static #"setSystemID:") = Void, NSString;
overload selector(static #"setTXTRecordData:") = Bool, NSData;
overload selector(static #"setTabKeyTraversesCells:") = Void, Bool;
overload selector(static #"setTabStops:") = Void, NSArray;
overload selector(static #"setTabViewType:") = Void, UInt;
overload selector(static #"setTableView:") = Void, NSTableView;
overload selector(static #"setTag:") = Void, Int;
overload selector(static #"setTag:forSegment:") = Void, Int, Int;
overload selector(static #"setTailIndent:") = Void, Float;
overload selector(static #"setTakesTitleFromPreviousColumn:") = Void, Bool;
overload selector(static #"setTarget:") = Void, Id;
overload selector(static #"setTearOffMenuRepresentation:") = Void, Id;
overload selector(static #"setTemplate:") = Void, Bool;
overload selector(static #"setTemporaryAttributes:forCharacterRange:") = Void, NSDictionary, NSRange;
overload selector(static #"setTest:") = Void, NSScriptWhoseTest;
overload selector(static #"setTextAlignment:") = Void, UInt;
overload selector(static #"setTextAttributesForNegativeInfinity:") = Void, NSDictionary;
overload selector(static #"setTextAttributesForNegativeValues:") = Void, NSDictionary;
overload selector(static #"setTextAttributesForNil:") = Void, NSDictionary;
overload selector(static #"setTextAttributesForNotANumber:") = Void, NSDictionary;
overload selector(static #"setTextAttributesForPositiveInfinity:") = Void, NSDictionary;
overload selector(static #"setTextAttributesForPositiveValues:") = Void, NSDictionary;
overload selector(static #"setTextAttributesForZero:") = Void, NSDictionary;
overload selector(static #"setTextBaseWritingDirection:") = Void, Int;
overload selector(static #"setTextBlocks:") = Void, NSArray;
overload selector(static #"setTextColor:") = Void, NSColor;
overload selector(static #"setTextColor:range:") = Void, NSColor, NSRange;
overload selector(static #"setTextContainer:") = Void, NSTextContainer;
overload selector(static #"setTextContainer:forGlyphRange:") = Void, NSTextContainer, NSRange;
overload selector(static #"setTextContainerInset:") = Void, NSSize;
overload selector(static #"setTextFont:") = Void, NSFont;
overload selector(static #"setTextLists:") = Void, NSArray;
overload selector(static #"setTextStorage:") = Void, NSTextStorage;
overload selector(static #"setTextView:") = Void, NSTextView;
overload selector(static #"setTextureImageToPixelBuffer:colorBuffer:") = Void, NSOpenGLPixelBuffer, UInt;
overload selector(static #"setThousandSeparator:") = Void, NSString;
overload selector(static #"setThreadPriority:") = Bool, Double;
overload selector(static #"setTickMarkPosition:") = Void, UInt;
overload selector(static #"setTighteningFactorForTruncation:") = Void, Float;
overload selector(static #"setTimeInterval:") = Void, Double;
overload selector(static #"setTimeOffset:") = Void, Double;
overload selector(static #"setTimeStyle:") = Void, UInt;
overload selector(static #"setTimeZone:") = Void, NSTimeZone;
overload selector(static #"setTimeoutInterval:") = Void, Double;
overload selector(static #"setTitle:") = Void, NSString;
overload selector(static #"setTitle:ofColumn:") = Void, NSString, Int;
overload selector(static #"setTitleAlignment:") = Void, UInt;
overload selector(static #"setTitleBaseWritingDirection:") = Void, Int;
overload selector(static #"setTitleCell:") = Void, NSCell;
overload selector(static #"setTitleColor:") = Void, NSColor;
overload selector(static #"setTitleFont:") = Void, NSFont;
overload selector(static #"setTitlePosition:") = Void, UInt;
overload selector(static #"setTitleWidth:") = Void, Float;
overload selector(static #"setTitleWithMnemonic:") = Void, NSString;
overload selector(static #"setTitleWithRepresentedFilename:") = Void, NSString;
overload selector(static #"setTitled:") = Void, Bool;
overload selector(static #"setTokenStyle:") = Void, UInt;
overload selector(static #"setTokenizingCharacterSet:") = Void, NSCharacterSet;
overload selector(static #"setToolTip:") = Void, NSString;
overload selector(static #"setToolTip:forCell:") = Void, NSString, NSCell;
overload selector(static #"setToolTip:forSegment:") = Void, NSString, Int;
overload selector(static #"setToolbar:") = Void, NSToolbar;
overload selector(static #"setTopLevelObject:") = Void, Id;
overload selector(static #"setTopMargin:") = Void, Float;
overload selector(static #"setTotalCostLimit:") = Void, UInt;
overload selector(static #"setTrackingMode:") = Void, UInt;
overload selector(static #"setTrailingOffset:") = Void, Float;
overload selector(static #"setTransform:") = Void, CATransform3D;
overload selector(static #"setTransformStruct:") = Void, NSAffineTransformStruct;
overload selector(static #"setTransient:") = Void, Bool;
overload selector(static #"setTransparent:") = Void, Bool;
overload selector(static #"setTreatsFilePackagesAsDirectories:") = Void, Bool;
overload selector(static #"setTruncatesLastVisibleLine:") = Void, Bool;
overload selector(static #"setTwoDigitStartDate:") = Void, NSDate;
overload selector(static #"setType:") = Void, UInt;
overload selector(static #"setTypesetter:") = Void, NSTypesetter;
overload selector(static #"setTypesetterBehavior:") = Void, Int;
overload selector(static #"setTypingAttributes:") = Void, NSDictionary;
overload selector(static #"setURI:") = Void, NSString;
overload selector(static #"setURL:") = Void, NSURL;
overload selector(static #"setURL:forKey:") = Void, NSURL, NSString;
overload selector(static #"setUndoManager:") = Void, NSUndoManager;
overload selector(static #"setUniqueID:") = Void, Id;
overload selector(static #"setUpFieldEditorAttributes:") = NSText, NSText;
overload selector(static #"setUpGState") = Void;
overload selector(static #"setUpPrintOperationDefaultValues") = Void;
overload selector(static #"setUserFixedPitchFont:") = Void, NSFont;
overload selector(static #"setUserFont:") = Void, NSFont;
overload selector(static #"setUserInfo:") = Void, NSDictionary;
overload selector(static #"setUserInterfaceLayoutDirection:") = Void, Int;
overload selector(static #"setUsesAlternatingRowBackgroundColors:") = Void, Bool;
overload selector(static #"setUsesDataSource:") = Void, Bool;
overload selector(static #"setUsesEPSOnResolutionMismatch:") = Void, Bool;
overload selector(static #"setUsesFeedbackWindow:") = Void, Bool;
overload selector(static #"setUsesFindPanel:") = Void, Bool;
overload selector(static #"setUsesFontLeading:") = Void, Bool;
overload selector(static #"setUsesFontPanel:") = Void, Bool;
overload selector(static #"setUsesGroupingSeparator:") = Void, Bool;
overload selector(static #"setUsesItemFromMenu:") = Void, Bool;
overload selector(static #"setUsesLazyFetching:") = Void, Bool;
overload selector(static #"setUsesRuler:") = Void, Bool;
overload selector(static #"setUsesScreenFonts:") = Void, Bool;
overload selector(static #"setUsesSignificantDigits:") = Void, Bool;
overload selector(static #"setUsesSingleLineMode:") = Void, Bool;
overload selector(static #"setUsesStrongWriteBarrier:") = Void, Bool;
overload selector(static #"setUsesThreadedAnimation:") = Void, Bool;
overload selector(static #"setUsesUserKeyEquivalents:") = Void, Bool;
overload selector(static #"setUsesWeakReadAndWriteBarriers:") = Void, Bool;
overload selector(static #"setValidateSize:") = Void, Bool;
overload selector(static #"setValidationPredicates:withValidationWarnings:") = Void, NSArray, NSArray;
overload selector(static #"setValue:") = Void, Id;
overload selector(static #"setValue:forHTTPHeaderField:") = Void, NSString, NSString;
overload selector(static #"setValue:forKey:") = Void, Id, NSString;
overload selector(static #"setValue:forKeyPath:") = Void, Id, NSString;
overload selector(static #"setValue:forUndefinedKey:") = Void, Id, NSString;
overload selector(static #"setValue:type:forDimension:") = Void, Float, UInt, UInt;
overload selector(static #"setValueListAttributes:") = Void, NSArray;
overload selector(static #"setValueTransformer:forName:") = Void, NSValueTransformer, NSString;
overload selector(static #"setValueTransformerName:") = Void, NSString;
overload selector(static #"setValueWraps:") = Void, Bool;
overload selector(static #"setValues:forParameter:") = Void, Pointer[Int], NSOpenGLContextParameter;
overload selector(static #"setValuesForKeysWithDictionary:") = Void, NSDictionary;
overload selector(static #"setVersion:") = Void, Int;
overload selector(static #"setVersionHashModifier:") = Void, NSString;
overload selector(static #"setVertical:") = Void, Bool;
overload selector(static #"setVerticalAlignment:") = Void, UInt;
overload selector(static #"setVerticalLineScroll:") = Void, Float;
overload selector(static #"setVerticalMotionCanBeginDrag:") = Void, Bool;
overload selector(static #"setVerticalPageScroll:") = Void, Float;
overload selector(static #"setVerticalPagination:") = Void, UInt;
overload selector(static #"setVerticalRulerView:") = Void, NSRulerView;
overload selector(static #"setVerticalScroller:") = Void, NSScroller;
overload selector(static #"setVerticallyCentered:") = Void, Bool;
overload selector(static #"setVerticallyResizable:") = Void, Bool;
overload selector(static #"setVeryShortMonthSymbols:") = Void, NSArray;
overload selector(static #"setVeryShortStandaloneMonthSymbols:") = Void, NSArray;
overload selector(static #"setVeryShortStandaloneWeekdaySymbols:") = Void, NSArray;
overload selector(static #"setVeryShortWeekdaySymbols:") = Void, NSArray;
overload selector(static #"setView:") = Void, NSView;
overload selector(static #"setViewAnimations:") = Void, NSArray;
overload selector(static #"setViewsNeedDisplay:") = Void, Bool;
overload selector(static #"setVisibilityPriority:") = Void, Int;
overload selector(static #"setVisible:") = Void, Bool;
overload selector(static #"setVoice:") = Bool, NSString;
overload selector(static #"setVolatileDomain:forName:") = Void, NSDictionary, NSString;
overload selector(static #"setVolume:") = Void, Float;
overload selector(static #"setWantsLayer:") = Void, Bool;
overload selector(static #"setWantsNotificationForMarkedText:") = Void, Bool;
overload selector(static #"setWantsRestingTouches:") = Void, Bool;
overload selector(static #"setWarningValue:") = Void, Double;
overload selector(static #"setWeek:") = Void, Int;
overload selector(static #"setWeekday:") = Void, Int;
overload selector(static #"setWeekdayOrdinal:") = Void, Int;
overload selector(static #"setWeekdaySymbols:") = Void, NSArray;
overload selector(static #"setWidth:") = Void, Float;
overload selector(static #"setWidth:forSegment:") = Void, Float, Int;
overload selector(static #"setWidth:ofColumn:") = Void, Float, Int;
overload selector(static #"setWidth:type:forLayer:") = Void, Float, UInt, Int;
overload selector(static #"setWidth:type:forLayer:edge:") = Void, Float, UInt, Int, NSRectEdge;
overload selector(static #"setWidthTracksTextView:") = Void, Bool;
overload selector(static #"setWindingRule:") = Void, UInt;
overload selector(static #"setWindow:") = Void, NSWindow;
overload selector(static #"setWindowController:") = Void, NSWindowController;
overload selector(static #"setWindowFrameAutosaveName:") = Void, NSString;
overload selector(static #"setWindowFrameForAttachingToRect:onScreen:preferredEdge:popUpSelectedItem:") = Void, NSRect, NSScreen, NSRectEdge, Int;
overload selector(static #"setWindowsMenu:") = Void, NSMenu;
overload selector(static #"setWindowsNeedUpdate:") = Void, Bool;
overload selector(static #"setWithArray:") = Id, NSArray;
overload selector(static #"setWithCapacity:") = Id, UInt;
overload selector(static #"setWithObject:") = Id, Id;
overload varargSelector(static #"setWithObjects:") = Id, Id;
overload selector(static #"setWithObjects:count:") = Id, Pointer[Id], UInt;
overload selector(static #"setWithSet:") = Id, NSSet;
overload selector(static #"setWordFieldStringValue:") = Void, NSString;
overload selector(static #"setWords:") = Void, NSArray;
overload selector(static #"setWorksWhenModal:") = Void, Bool;
overload selector(static #"setWraps:") = Void, Bool;
overload selector(static #"setYear:") = Void, Int;
overload selector(static #"setZPosition:") = Void, Float;
overload selector(static #"setZeroSymbol:") = Void, NSString;
overload selector(static #"shadow") = NSShadow;
overload selector(static #"shadowBlurRadius") = Float;
overload selector(static #"shadowColor") = NSColor;
overload selector(static #"shadowOffset") = CGSize;
overload selector(static #"shadowOpacity") = Float;
overload selector(static #"shadowRadius") = Float;
overload selector(static #"shadowWithLevel:") = NSColor, Float;
overload selector(static #"sharedAppleEventManager") = NSAppleEventManager;
overload selector(static #"sharedApplication") = NSApplication;
overload selector(static #"sharedCoercionHandler") = NSScriptCoercionHandler;
overload selector(static #"sharedColorPanel") = NSColorPanel;
overload selector(static #"sharedColorPanelExists") = Bool;
overload selector(static #"sharedCredentialStorage") = NSURLCredentialStorage;
overload selector(static #"sharedDocumentController") = Id;
overload selector(static #"sharedFontManager") = NSFontManager;
overload selector(static #"sharedFontPanel") = NSFontPanel;
overload selector(static #"sharedFontPanelExists") = Bool;
overload selector(static #"sharedFrameworksPath") = NSString;
overload selector(static #"sharedFrameworksURL") = NSURL;
overload selector(static #"sharedGlyphGenerator") = Id;
overload selector(static #"sharedHTTPCookieStorage") = NSHTTPCookieStorage;
overload selector(static #"sharedHelpManager") = NSHelpManager;
overload selector(static #"sharedInstance") = Id;
overload selector(static #"sharedPrintInfo") = NSPrintInfo;
overload selector(static #"sharedScriptExecutionContext") = NSScriptExecutionContext;
overload selector(static #"sharedScriptSuiteRegistry") = NSScriptSuiteRegistry;
overload selector(static #"sharedSpellChecker") = NSSpellChecker;
overload selector(static #"sharedSpellCheckerExists") = Bool;
overload selector(static #"sharedSupportPath") = NSString;
overload selector(static #"sharedSupportURL") = NSURL;
overload selector(static #"sharedSystemTypesetter") = Id;
overload selector(static #"sharedSystemTypesetterForBehavior:") = Id, Int;
overload selector(static #"sharedTypesetter") = Id;
overload selector(static #"sharedURLCache") = NSURLCache;
overload selector(static #"sharedUserDefaultsController") = Id;
overload selector(static #"sharedWorkspace") = NSWorkspace;
overload selector(static #"sharingType") = UInt;
overload selector(static #"shiftIndexesStartingAtIndex:by:") = Void, UInt, Int;
overload selector(static #"shortMonthSymbols") = NSArray;
overload selector(static #"shortQuarterSymbols") = NSArray;
overload selector(static #"shortStandaloneMonthSymbols") = NSArray;
overload selector(static #"shortStandaloneQuarterSymbols") = NSArray;
overload selector(static #"shortStandaloneWeekdaySymbols") = NSArray;
overload selector(static #"shortValue") = Short;
overload selector(static #"shortWeekdaySymbols") = NSArray;
overload selector(static #"shouldAntialias") = Bool;
overload selector(static #"shouldArchiveValueForKey:") = Bool, NSString;
overload selector(static #"shouldBeTreatedAsInkEvent:") = Bool, NSEvent;
overload selector(static #"shouldBreakLineByHyphenatingBeforeCharacterAtIndex:") = Bool, UInt;
overload selector(static #"shouldBreakLineByWordBeforeCharacterAtIndex:") = Bool, UInt;
overload selector(static #"shouldCascadeWindows") = Bool;
overload selector(static #"shouldChangePrintInfo:") = Bool, NSPrintInfo;
overload selector(static #"shouldChangeTextInRange:replacementString:") = Bool, NSRange, NSString;
overload selector(static #"shouldChangeTextInRanges:replacementStrings:") = Bool, NSArray, NSArray;
overload selector(static #"shouldCloseDocument") = Bool;
overload selector(static #"shouldCloseWindowController:delegate:shouldCloseSelector:contextInfo:") = Void, NSWindowController, Id, SelectorHandle, RawPointer;
overload selector(static #"shouldCollapseAutoExpandedItemsForDeposited:") = Bool, Bool;
overload selector(static #"shouldCreateUI") = Bool;
overload selector(static #"shouldDelayWindowOrderingForEvent:") = Bool, NSEvent;
overload selector(static #"shouldDrawColor") = Bool;
overload selector(static #"shouldDrawInsertionPoint") = Bool;
overload selector(static #"shouldFocusCell:atColumn:row:") = Bool, NSCell, Int, Int;
overload selector(static #"shouldProcessNamespaces") = Bool;
overload selector(static #"shouldReportNamespacePrefixes") = Bool;
overload selector(static #"shouldResolveExternalEntities") = Bool;
overload selector(static #"shouldRunSavePanelWithAccessoryView") = Bool;
overload selector(static #"showAllHelpTopicsForSearchString:") = Void, NSString;
overload selector(static #"showAttachmentCell:inRect:characterIndex:") = Void, NSCell, NSRect, UInt;
overload selector(static #"showContextHelp:") = Void, Id;
overload selector(static #"showContextHelpForObject:locationHint:") = Bool, Id, NSPoint;
overload selector(static #"showController:adjustingSize:") = Void, Bool, Bool;
overload selector(static #"showDefinitionForAttributedString:atPoint:") = Void, NSAttributedString, NSPoint;
overload selector(static #"showDefinitionForAttributedString:range:options:baselineOriginProvider:") = Void, NSAttributedString, NSRange, NSDictionary, UnknownType;
overload selector(static #"showFindIndicatorForRange:") = Void, NSRange;
overload selector(static #"showGuessPanel:") = Void, Id;
overload selector(static #"showHelp:") = Void, Id;
overload selector(static #"showPackedGlyphs:length:glyphRange:atPoint:font:color:printingAdjustment:") = Void, Pointer[CChar], UInt, NSRange, NSPoint, NSFont, NSColor, NSSize;
overload selector(static #"showPanels") = Bool;
overload selector(static #"showSearchResultsForQueryString:") = Bool, NSString;
overload selector(static #"showWindow:") = Void, Id;
overload selector(static #"showWindows") = Void;
overload selector(static #"showsAlpha") = Bool;
overload selector(static #"showsApplicationBadge") = Bool;
overload selector(static #"showsBaselineSeparator") = Bool;
overload selector(static #"showsBorderOnlyWhileMouseInside") = Bool;
overload selector(static #"showsControlCharacters") = Bool;
overload selector(static #"showsFirstResponder") = Bool;
overload selector(static #"showsHelp") = Bool;
overload selector(static #"showsHiddenFiles") = Bool;
overload selector(static #"showsInvisibleCharacters") = Bool;
overload selector(static #"showsPrintPanel") = Bool;
overload selector(static #"showsProgressPanel") = Bool;
overload selector(static #"showsResizeIndicator") = Bool;
overload selector(static #"showsStateBy") = Int;
overload selector(static #"showsStateColumn") = Bool;
overload selector(static #"showsSuppressionButton") = Bool;
overload selector(static #"showsToolbarButton") = Bool;
overload selector(static #"signal") = Void;
overload selector(static #"signatureWithObjCTypes:") = NSMethodSignature, Pointer[CChar];
overload selector(static #"size") = NSSize;
overload selector(static #"sizeForKey:inTable:") = NSSize, NSString, NSString;
overload selector(static #"sizeForMagnification:") = NSSize, Float;
overload selector(static #"sizeForPaperName:") = NSSize, NSString;
overload selector(static #"sizeFunction") = CCodePointer[(RawPointer),(UInt)];
overload selector(static #"sizeLastColumnToFit") = Void;
overload selector(static #"sizeMode") = UInt;
overload selector(static #"sizeOfLabel:") = NSSize, Bool;
overload selector(static #"sizeToCells") = Void;
overload selector(static #"sizeToFit") = Void;
overload selector(static #"sizeValue") = NSSize;
overload selector(static #"sizeWithAttributes:") = NSSize, NSDictionary;
overload selector(static #"skipDescendants") = Void;
overload selector(static #"skipDescendents") = Void;
overload selector(static #"sleepForTimeInterval:") = Void, Double;
overload selector(static #"sleepUntilDate:") = Void, NSDate;
overload selector(static #"slideDraggedImageTo:") = Void, NSPoint;
overload selector(static #"slideImage:from:to:") = Void, NSImage, NSPoint, NSPoint;
overload selector(static #"sliderType") = UInt;
overload selector(static #"smallSystemFontSize") = Float;
overload selector(static #"smallestEncoding") = UInt;
overload selector(static #"smartDeleteRangeForProposedRange:") = NSRange, NSRange;
overload selector(static #"smartInsertAfterStringForString:replacingRange:") = NSString, NSString, NSRange;
overload selector(static #"smartInsertBeforeStringForString:replacingRange:") = NSString, NSString, NSRange;
overload selector(static #"smartInsertDeleteEnabled") = Bool;
overload selector(static #"smartInsertForString:replacingRange:beforeString:afterString:") = Void, NSString, NSRange, Pointer[NSString], Pointer[NSString];
overload selector(static #"socket") = Int;
overload selector(static #"socketType") = Int;
overload selector(static #"sortDescriptorPrototype") = NSSortDescriptor;
overload selector(static #"sortDescriptorWithKey:ascending:") = Id, NSString, Bool;
overload selector(static #"sortDescriptorWithKey:ascending:comparator:") = Id, NSString, Bool, NSComparator;
overload selector(static #"sortDescriptorWithKey:ascending:selector:") = Id, NSString, Bool, SelectorHandle;
overload selector(static #"sortDescriptors") = NSArray;
overload selector(static #"sortIndicatorRectForBounds:") = NSRect, NSRect;
overload selector(static #"sortSubviewsUsingFunction:context:") = Void, CCodePointer[(Id,Id,RawPointer),(Int)], RawPointer;
overload selector(static #"sortUsingComparator:") = Void, NSComparator;
overload selector(static #"sortUsingDescriptors:") = Void, NSArray;
overload selector(static #"sortUsingFunction:context:") = Void, CCodePointer[(Id,Id,RawPointer),(Int)], RawPointer;
overload selector(static #"sortUsingSelector:") = Void, SelectorHandle;
overload selector(static #"sortWithOptions:usingComparator:") = Void, UInt, NSComparator;
overload selector(static #"sortWithSortDescriptors:recursively:") = Void, NSArray, Bool;
overload selector(static #"sortedArrayHint") = NSData;
overload selector(static #"sortedArrayUsingComparator:") = NSArray, NSComparator;
overload selector(static #"sortedArrayUsingDescriptors:") = NSArray, NSArray;
overload selector(static #"sortedArrayUsingFunction:context:") = NSArray, CCodePointer[(Id,Id,RawPointer),(Int)], RawPointer;
overload selector(static #"sortedArrayUsingFunction:context:hint:") = NSArray, CCodePointer[(Id,Id,RawPointer),(Int)], RawPointer, NSData;
overload selector(static #"sortedArrayUsingSelector:") = NSArray, SelectorHandle;
overload selector(static #"sortedArrayWithOptions:usingComparator:") = NSArray, UInt, NSComparator;
overload selector(static #"sound") = NSSound;
overload selector(static #"sound:didFinishPlaying:") = Void, NSSound, Bool;
overload selector(static #"soundNamed:") = Id, NSString;
overload selector(static #"soundUnfilteredFileTypes") = NSArray;
overload selector(static #"soundUnfilteredPasteboardTypes") = NSArray;
overload selector(static #"soundUnfilteredTypes") = NSArray;
overload selector(static #"source") = NSString;
overload selector(static #"speechRecognizer:didRecognizeCommand:") = Void, NSSpeechRecognizer, Id;
overload selector(static #"speechSynthesizer:didEncounterErrorAtIndex:ofString:message:") = Void, NSSpeechSynthesizer, UInt, NSString, NSString;
overload selector(static #"speechSynthesizer:didEncounterSyncMessage:") = Void, NSSpeechSynthesizer, NSString;
overload selector(static #"speechSynthesizer:didFinishSpeaking:") = Void, NSSpeechSynthesizer, Bool;
overload selector(static #"speechSynthesizer:willSpeakPhoneme:") = Void, NSSpeechSynthesizer, Short;
overload selector(static #"speechSynthesizer:willSpeakWord:ofString:") = Void, NSSpeechSynthesizer, NSRange, NSString;
overload selector(static #"speed") = Float;
overload selector(static #"spellCheckerDocumentTag") = Int;
overload selector(static #"spellCheckingResultWithRange:") = NSTextCheckingResult, NSRange;
overload selector(static #"spellServer:checkGrammarInString:language:details:") = NSRange, NSSpellServer, NSString, NSString, Pointer[NSArray];
overload selector(static #"spellServer:checkString:offset:types:options:orthography:wordCount:") = NSArray, NSSpellServer, NSString, UInt, UInt64, NSDictionary, NSOrthography, Pointer[Int];
overload selector(static #"spellServer:didForgetWord:inLanguage:") = Void, NSSpellServer, NSString, NSString;
overload selector(static #"spellServer:didLearnWord:inLanguage:") = Void, NSSpellServer, NSString, NSString;
overload selector(static #"spellServer:findMisspelledWordInString:language:wordCount:countOnly:") = NSRange, NSSpellServer, NSString, NSString, Pointer[Int], Bool;
overload selector(static #"spellServer:suggestCompletionsForPartialWordRange:inString:language:") = NSArray, NSSpellServer, NSRange, NSString, NSString;
overload selector(static #"spellServer:suggestGuessesForWord:inLanguage:") = NSArray, NSSpellServer, NSString, NSString;
overload selector(static #"spellingPanel") = NSPanel;
overload selector(static #"splitView:additionalEffectiveRectOfDividerAtIndex:") = NSRect, NSSplitView, Int;
overload selector(static #"splitView:canCollapseSubview:") = Bool, NSSplitView, NSView;
overload selector(static #"splitView:constrainMaxCoordinate:ofSubviewAt:") = Float, NSSplitView, Float, Int;
overload selector(static #"splitView:constrainMinCoordinate:ofSubviewAt:") = Float, NSSplitView, Float, Int;
overload selector(static #"splitView:constrainSplitPosition:ofSubviewAt:") = Float, NSSplitView, Float, Int;
overload selector(static #"splitView:effectiveRect:forDrawnRect:ofDividerAtIndex:") = NSRect, NSSplitView, NSRect, NSRect, Int;
overload selector(static #"splitView:resizeSubviewsWithOldSize:") = Void, NSSplitView, NSSize;
overload selector(static #"splitView:shouldAdjustSizeOfSubview:") = Bool, NSSplitView, NSView;
overload selector(static #"splitView:shouldCollapseSubview:forDoubleClickOnDividerAtIndex:") = Bool, NSSplitView, NSView, Int;
overload selector(static #"splitView:shouldHideDividerAtIndex:") = Bool, NSSplitView, Int;
overload selector(static #"splitViewDidResizeSubviews:") = Void, NSNotification;
overload selector(static #"splitViewWillResizeSubviews:") = Void, NSNotification;
overload selector(static #"stackSize") = UInt;
overload selector(static #"standaloneMonthSymbols") = NSArray;
overload selector(static #"standaloneQuarterSymbols") = NSArray;
overload selector(static #"standaloneWeekdaySymbols") = NSArray;
overload selector(static #"standardError") = Id;
overload selector(static #"standardInput") = Id;
overload selector(static #"standardOutput") = Id;
overload selector(static #"standardUserDefaults") = NSUserDefaults;
overload selector(static #"standardWindowButton:") = NSButton, UInt;
overload selector(static #"standardWindowButton:forStyleMask:") = NSButton, UInt, UInt;
overload selector(static #"standardizedURL") = NSURL;
overload selector(static #"start") = Void;
overload selector(static #"start:") = Void, Id;
overload selector(static #"startAnimation") = Void;
overload selector(static #"startAnimation:") = Void, Id;
overload selector(static #"startListening") = Void;
overload selector(static #"startLoading") = Void;
overload selector(static #"startMonitoring") = Void;
overload selector(static #"startPeriodicEventsAfterDelay:withPeriod:") = Void, Double, Double;
overload selector(static #"startQuery") = Bool;
overload selector(static #"startSpeaking:") = Void, Id;
overload selector(static #"startSpeakingString:") = Bool, NSString;
overload selector(static #"startSpeakingString:toURL:") = Bool, NSString, NSURL;
overload selector(static #"startSpecifier") = NSScriptObjectSpecifier;
overload selector(static #"startSubelementIdentifier") = UInt;
overload selector(static #"startSubelementIndex") = Int;
overload selector(static #"startTrackingAt:inView:") = Bool, NSPoint, NSView;
overload selector(static #"startWhenAnimation:reachesProgress:") = Void, NSAnimation, Float;
overload selector(static #"startingColumn") = Int;
overload selector(static #"startingItemNumber") = Int;
overload selector(static #"startingRow") = Int;
overload selector(static #"state") = Int;
overload selector(static #"stateImageOffset") = Float;
overload selector(static #"stateImageRectForBounds:") = NSRect, NSRect;
overload selector(static #"stateImageWidth") = Float;
overload selector(static #"statistics") = NSDictionary;
overload selector(static #"status") = UInt;
overload selector(static #"statusBar") = NSStatusBar;
overload selector(static #"statusCode") = Int;
overload selector(static #"statusForTable:") = UInt, NSString;
overload selector(static #"statusItemWithLength:") = NSStatusItem, Float;
overload selector(static #"stepBack:") = Void, Id;
overload selector(static #"stepForward:") = Void, Id;
overload selector(static #"stop") = Bool;
overload selector(static #"stop:") = Void, Id;
overload selector(static #"stopAnimation") = Void;
overload selector(static #"stopAnimation:") = Void, Id;
overload selector(static #"stopListening") = Void;
overload selector(static #"stopLoading") = Void;
overload selector(static #"stopModal") = Void;
overload selector(static #"stopModalWithCode:") = Void, Int;
overload selector(static #"stopMonitoring") = Void;
overload selector(static #"stopPeriodicEvents") = Void;
overload selector(static #"stopQuery") = Void;
overload selector(static #"stopSpeaking") = Void;
overload selector(static #"stopSpeaking:") = Void, Id;
overload selector(static #"stopSpeakingAtBoundary:") = Void, UInt;
overload selector(static #"stopTracking:at:inView:mouseIsUp:") = Void, NSPoint, NSPoint, NSView, Bool;
overload selector(static #"stopWhenAnimation:reachesProgress:") = Void, NSAnimation, Float;
overload selector(static #"storagePolicy") = UInt;
overload selector(static #"storeCachedResponse:forRequest:") = Void, NSCachedURLResponse, NSURLRequest;
overload selector(static #"storedValueForKey:") = Id, NSString;
overload selector(static #"stream:handleEvent:") = Void, NSStream, UInt;
overload selector(static #"streamError") = NSError;
overload selector(static #"streamStatus") = UInt;
overload selector(static #"strikethroughGlyphRange:strikethroughType:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:") = Void, NSRange, Int, NSRect, NSRange, NSPoint;
overload selector(static #"string") = Id;
overload selector(static #"stringArrayForKey:") = NSArray, NSString;
overload selector(static #"stringByAbbreviatingWithTildeInPath") = NSString;
overload selector(static #"stringByAddingPercentEscapesUsingEncoding:") = NSString, UInt;
overload varargSelector(static #"stringByAppendingFormat:") = NSString, NSString;
overload selector(static #"stringByAppendingPathComponent:") = NSString, NSString;
overload selector(static #"stringByAppendingPathExtension:") = NSString, NSString;
overload selector(static #"stringByAppendingString:") = NSString, NSString;
overload selector(static #"stringByDeletingLastPathComponent") = NSString;
overload selector(static #"stringByDeletingPathExtension") = NSString;
overload selector(static #"stringByExpandingTildeInPath") = NSString;
overload selector(static #"stringByFoldingWithOptions:locale:") = NSString, UInt, NSLocale;
overload selector(static #"stringByPaddingToLength:withString:startingAtIndex:") = NSString, UInt, NSString, UInt;
overload selector(static #"stringByReplacingCharactersInRange:withString:") = NSString, NSRange, NSString;
overload selector(static #"stringByReplacingOccurrencesOfString:withString:") = NSString, NSString, NSString;
overload selector(static #"stringByReplacingOccurrencesOfString:withString:options:range:") = NSString, NSString, NSString, UInt, NSRange;
overload selector(static #"stringByReplacingPercentEscapesUsingEncoding:") = NSString, UInt;
overload selector(static #"stringByResolvingSymlinksInPath") = NSString;
overload selector(static #"stringByStandardizingPath") = NSString;
overload selector(static #"stringByTrimmingCharactersInSet:") = NSString, NSCharacterSet;
overload selector(static #"stringForKey:") = NSString, NSString;
overload selector(static #"stringForKey:inTable:") = NSString, NSString, NSString;
overload selector(static #"stringForObjectValue:") = NSString, Id;
overload selector(static #"stringForType:") = NSString, NSString;
overload selector(static #"stringFromDate:") = NSString, NSDate;
overload selector(static #"stringFromNumber:") = NSString, NSNumber;
overload selector(static #"stringListForKey:inTable:") = NSArray, NSString, NSString;
overload selector(static #"stringRepresentation") = NSString;
overload selector(static #"stringValue") = NSString;
overload selector(static #"stringWithCString:") = Id, Pointer[CChar];
overload selector(static #"stringWithCString:encoding:") = Id, Pointer[CChar], UInt;
overload selector(static #"stringWithCString:length:") = Id, Pointer[CChar], UInt;
overload selector(static #"stringWithCapacity:") = Id, UInt;
overload selector(static #"stringWithCharacters:length:") = Id, Pointer[UShort], UInt;
overload selector(static #"stringWithContentsOfFile:") = Id, NSString;
overload selector(static #"stringWithContentsOfFile:encoding:error:") = Id, NSString, UInt, Pointer[NSError];
overload selector(static #"stringWithContentsOfFile:usedEncoding:error:") = Id, NSString, Pointer[UInt], Pointer[NSError];
overload selector(static #"stringWithContentsOfURL:") = Id, NSURL;
overload selector(static #"stringWithContentsOfURL:encoding:error:") = Id, NSURL, UInt, Pointer[NSError];
overload selector(static #"stringWithContentsOfURL:usedEncoding:error:") = Id, NSURL, Pointer[UInt], Pointer[NSError];
overload selector(static #"stringWithFileSystemRepresentation:length:") = NSString, Pointer[CChar], UInt;
overload varargSelector(static #"stringWithFormat:") = Id, NSString;
overload selector(static #"stringWithSavedFrame") = NSString;
overload selector(static #"stringWithString:") = Id, NSString;
overload selector(static #"stringWithUTF8String:") = Id, Pointer[CChar];
overload selector(static #"stringsByAppendingPaths:") = NSArray, NSArray;
overload selector(static #"stroke") = Void;
overload selector(static #"strokeLineFromPoint:toPoint:") = Void, NSPoint, NSPoint;
overload selector(static #"strokeRect:") = Void, NSRect;
overload selector(static #"style") = UInt;
overload selector(static #"styleMask") = UInt;
overload selector(static #"subarrayWithRange:") = NSArray, NSRange;
overload selector(static #"subdataWithRange:") = NSData, NSRange;
overload selector(static #"subgroups") = NSArray;
overload selector(static #"subitems") = NSArray;
overload selector(static #"sublayerTransform") = CATransform3D;
overload selector(static #"sublayers") = NSArray;
overload selector(static #"submenu") = NSMenu;
overload selector(static #"submenuAction:") = Void, Id;
overload selector(static #"subpathsAtPath:") = NSArray, NSString;
overload selector(static #"subpathsOfDirectoryAtPath:error:") = NSArray, NSString, Pointer[NSError];
overload selector(static #"subpredicates") = NSArray;
overload selector(static #"subrowIndexesForRow:") = NSIndexSet, Int;
overload selector(static #"subrowsKeyPath") = NSString;
overload selector(static #"subscript:") = Void, Id;
overload selector(static #"subscriptRange:") = Void, NSRange;
overload selector(static #"substituteFontForFont:") = NSFont, NSFont;
overload selector(static #"substituteGlyphsInRange:withGlyphs:") = Void, NSRange, Pointer[UInt];
overload selector(static #"substitutionsPanel") = NSPanel;
overload selector(static #"substitutionsPanelAccessoryViewController") = NSViewController;
overload selector(static #"substringFromIndex:") = NSString, UInt;
overload selector(static #"substringToIndex:") = NSString, UInt;
overload selector(static #"substringWithRange:") = NSString, NSRange;
overload selector(static #"subtype") = Short;
overload selector(static #"subviews") = NSArray;
overload selector(static #"suggestedFilename") = NSString;
overload selector(static #"suiteForAppleEventCode:") = NSString, CULong;
overload selector(static #"suiteName") = NSString;
overload selector(static #"suiteNames") = NSArray;
overload selector(static #"superclass") = Id;
overload selector(static #"superclassDescription") = NSScriptClassDescription;
overload selector(static #"superlayer") = CALayer;
overload selector(static #"supermenu") = NSMenu;
overload selector(static #"superscript:") = Void, Id;
overload selector(static #"superscriptRange:") = Void, NSRange;
overload selector(static #"superview") = NSView;
overload selector(static #"supportedWindowDepths") = Pointer[Int];
overload selector(static #"supportsCommand:") = Bool, NSScriptCommandDescription;
overload selector(static #"supportsMode:") = Bool, Int;
overload selector(static #"suppressionButton") = NSButton;
overload selector(static #"suspend") = Bool;
overload selector(static #"suspendCurrentAppleEvent") = NSAppleEventManagerSuspensionID;
overload selector(static #"suspendExecution") = Void;
overload selector(static #"suspended") = Bool;
overload selector(static #"swapWithMark:") = Void, Id;
overload selector(static #"swipeWithEvent:") = Void, NSEvent;
overload selector(static #"symbolCharacterSet") = Id;
overload selector(static #"symbolicLinkDestination") = NSString;
overload selector(static #"symbolicLinkDestinationURL") = NSURL;
overload selector(static #"symbolicTraits") = UInt;
overload selector(static #"synchronize") = Bool;
overload selector(static #"synchronizeFile") = Void;
overload selector(static #"synchronizeTitleAndSelectedItem") = Void;
overload selector(static #"synchronizeWindowTitleWithDocumentName") = Void;
overload selector(static #"systemDefaultPortNameServer") = NSPortNameServer;
overload selector(static #"systemFontOfSize:") = NSFont, Float;
overload selector(static #"systemFontSize") = Float;
overload selector(static #"systemFontSizeForControlSize:") = Float, UInt;
overload selector(static #"systemID") = NSString;
overload selector(static #"systemLocale") = Id;
overload selector(static #"systemStatusBar") = NSStatusBar;
overload selector(static #"systemTabletID") = UInt;
overload selector(static #"systemTimeZone") = NSTimeZone;
overload selector(static #"systemUptime") = Double;
overload selector(static #"systemVersion") = UInt;
overload selector(static #"tabKeyTraversesCells") = Bool;
overload selector(static #"tabState") = UInt;
overload selector(static #"tabStopType") = UInt;
overload selector(static #"tabStops") = NSArray;
overload selector(static #"tabView") = NSTabView;
overload selector(static #"tabView:didSelectTabViewItem:") = Void, NSTabView, NSTabViewItem;
overload selector(static #"tabView:shouldSelectTabViewItem:") = Bool, NSTabView, NSTabViewItem;
overload selector(static #"tabView:willSelectTabViewItem:") = Void, NSTabView, NSTabViewItem;
overload selector(static #"tabViewDidChangeNumberOfTabViewItems:") = Void, NSTabView;
overload selector(static #"tabViewItemAtIndex:") = NSTabViewItem, Int;
overload selector(static #"tabViewItemAtPoint:") = NSTabViewItem, NSPoint;
overload selector(static #"tabViewItems") = NSArray;
overload selector(static #"tabViewType") = UInt;
overload selector(static #"table") = NSTextTable;
overload selector(static #"tableColumnWithIdentifier:") = NSTableColumn, Id;
overload selector(static #"tableColumns") = NSArray;
overload selector(static #"tableView") = NSTableView;
overload selector(static #"tableView:acceptDrop:row:dropOperation:") = Bool, NSTableView, Id, Int, UInt;
overload selector(static #"tableView:dataCellForTableColumn:row:") = NSCell, NSTableView, NSTableColumn, Int;
overload selector(static #"tableView:didClickTableColumn:") = Void, NSTableView, NSTableColumn;
overload selector(static #"tableView:didDragTableColumn:") = Void, NSTableView, NSTableColumn;
overload selector(static #"tableView:heightOfRow:") = Float, NSTableView, Int;
overload selector(static #"tableView:isGroupRow:") = Bool, NSTableView, Int;
overload selector(static #"tableView:mouseDownInHeaderOfTableColumn:") = Void, NSTableView, NSTableColumn;
overload selector(static #"tableView:namesOfPromisedFilesDroppedAtDestination:forDraggedRowsWithIndexes:") = NSArray, NSTableView, NSURL, NSIndexSet;
overload selector(static #"tableView:nextTypeSelectMatchFromRow:toRow:forString:") = Int, NSTableView, Int, Int, NSString;
overload selector(static #"tableView:objectValueForTableColumn:row:") = Id, NSTableView, NSTableColumn, Int;
overload selector(static #"tableView:selectionIndexesForProposedSelection:") = NSIndexSet, NSTableView, NSIndexSet;
overload selector(static #"tableView:setObjectValue:forTableColumn:row:") = Void, NSTableView, Id, NSTableColumn, Int;
overload selector(static #"tableView:shouldEditTableColumn:row:") = Bool, NSTableView, NSTableColumn, Int;
overload selector(static #"tableView:shouldReorderColumn:toColumn:") = Bool, NSTableView, Int, Int;
overload selector(static #"tableView:shouldSelectRow:") = Bool, NSTableView, Int;
overload selector(static #"tableView:shouldSelectTableColumn:") = Bool, NSTableView, NSTableColumn;
overload selector(static #"tableView:shouldShowCellExpansionForTableColumn:row:") = Bool, NSTableView, NSTableColumn, Int;
overload selector(static #"tableView:shouldTrackCell:forTableColumn:row:") = Bool, NSTableView, NSCell, NSTableColumn, Int;
overload selector(static #"tableView:shouldTypeSelectForEvent:withCurrentSearchString:") = Bool, NSTableView, NSEvent, NSString;
overload selector(static #"tableView:sizeToFitWidthOfColumn:") = Float, NSTableView, Int;
overload selector(static #"tableView:sortDescriptorsDidChange:") = Void, NSTableView, NSArray;
overload selector(static #"tableView:toolTipForCell:rect:tableColumn:row:mouseLocation:") = NSString, NSTableView, NSCell, NSRectPointer, NSTableColumn, Int, NSPoint;
overload selector(static #"tableView:typeSelectStringForTableColumn:row:") = NSString, NSTableView, NSTableColumn, Int;
overload selector(static #"tableView:validateDrop:proposedRow:proposedDropOperation:") = UInt, NSTableView, Id, Int, UInt;
overload selector(static #"tableView:willDisplayCell:forTableColumn:row:") = Void, NSTableView, Id, NSTableColumn, Int;
overload selector(static #"tableView:writeRows:toPasteboard:") = Bool, NSTableView, NSArray, NSPasteboard;
overload selector(static #"tableView:writeRowsWithIndexes:toPasteboard:") = Bool, NSTableView, NSIndexSet, NSPasteboard;
overload selector(static #"tableViewColumnDidMove:") = Void, NSNotification;
overload selector(static #"tableViewColumnDidResize:") = Void, NSNotification;
overload selector(static #"tableViewSelectionDidChange:") = Void, NSNotification;
overload selector(static #"tableViewSelectionIsChanging:") = Void, NSNotification;
overload selector(static #"tabletID") = UInt;
overload selector(static #"tabletPoint:") = Void, NSEvent;
overload selector(static #"tabletProximity:") = Void, NSEvent;
overload selector(static #"tag") = Int;
overload selector(static #"tagForSegment:") = Int, Int;
overload selector(static #"tailIndent") = Float;
overload selector(static #"takeColorFrom:") = Void, Id;
overload selector(static #"takeDoubleValueFrom:") = Void, Id;
overload selector(static #"takeFloatValueFrom:") = Void, Id;
overload selector(static #"takeIntValueFrom:") = Void, Id;
overload selector(static #"takeIntegerValueFrom:") = Void, Id;
overload selector(static #"takeObjectValueFrom:") = Void, Id;
overload selector(static #"takeSelectedTabViewItemFromSender:") = Void, Id;
overload selector(static #"takeStoredValue:forKey:") = Void, Id, NSString;
overload selector(static #"takeStringValueFrom:") = Void, Id;
overload selector(static #"takeValue:forKey:") = Void, Id, NSString;
overload selector(static #"takeValue:forKeyPath:") = Void, Id, NSString;
overload selector(static #"takeValuesFromDictionary:") = Void, NSDictionary;
overload selector(static #"takesTitleFromPreviousColumn") = Bool;
overload selector(static #"tangentialPressure") = Float;
overload selector(static #"target") = Id;
overload selector(static #"targetForAction:") = Id, SelectorHandle;
overload selector(static #"targetForAction:to:from:") = Id, SelectorHandle, Id, Id;
overload selector(static #"tearOffMenuRepresentation") = Id;
overload selector(static #"templateViews") = NSArray;
overload selector(static #"templatesWithAttributeKeyPaths:inEntityDescription:") = NSArray, NSArray, NSEntityDescription;
overload selector(static #"temporaryAttribute:atCharacterIndex:effectiveRange:") = Id, NSString, UInt, NSRangePointer;
overload selector(static #"temporaryAttribute:atCharacterIndex:longestEffectiveRange:inRange:") = Id, NSString, UInt, NSRangePointer, NSRange;
overload selector(static #"temporaryAttributesAtCharacterIndex:effectiveRange:") = NSDictionary, UInt, NSRangePointer;
overload selector(static #"temporaryAttributesAtCharacterIndex:longestEffectiveRange:inRange:") = NSDictionary, UInt, NSRangePointer, NSRange;
overload selector(static #"terminate") = Bool;
overload selector(static #"terminate:") = Void, Id;
overload selector(static #"terminationReason") = Int;
overload selector(static #"terminationStatus") = Int;
overload selector(static #"test") = NSScriptWhoseTest;
overload selector(static #"testPart:") = UInt, NSPoint;
overload selector(static #"textAttributesForNegativeInfinity") = NSDictionary;
overload selector(static #"textAttributesForNegativeValues") = NSDictionary;
overload selector(static #"textAttributesForNil") = NSDictionary;
overload selector(static #"textAttributesForNotANumber") = NSDictionary;
overload selector(static #"textAttributesForPositiveInfinity") = NSDictionary;
overload selector(static #"textAttributesForPositiveValues") = NSDictionary;
overload selector(static #"textAttributesForZero") = NSDictionary;
overload selector(static #"textBackgroundColor") = NSColor;
overload selector(static #"textBlocks") = NSArray;
overload selector(static #"textColor") = NSColor;
overload selector(static #"textContainer") = NSTextContainer;
overload selector(static #"textContainerChangedGeometry:") = Void, NSTextContainer;
overload selector(static #"textContainerChangedTextView:") = Void, NSTextContainer;
overload selector(static #"textContainerForGlyphAtIndex:effectiveRange:") = NSTextContainer, UInt, NSRangePointer;
overload selector(static #"textContainerForGlyphAtIndex:effectiveRange:withoutAdditionalLayout:") = NSTextContainer, UInt, NSRangePointer, Bool;
overload selector(static #"textContainerInset") = NSSize;
overload selector(static #"textContainerOrigin") = NSPoint;
overload selector(static #"textContainers") = NSArray;
overload selector(static #"textDidBeginEditing:") = Void, NSNotification;
overload selector(static #"textDidChange:") = Void, NSNotification;
overload selector(static #"textDidEndEditing:") = Void, NSNotification;
overload selector(static #"textEncodingName") = NSString;
overload selector(static #"textFileTypes") = NSArray;
overload selector(static #"textLists") = NSArray;
overload selector(static #"textPasteboardTypes") = NSArray;
overload selector(static #"textShouldBeginEditing:") = Bool, NSText;
overload selector(static #"textShouldEndEditing:") = Bool, NSText;
overload selector(static #"textStorage") = NSTextStorage;
overload selector(static #"textStorage:edited:range:changeInLength:invalidatedRange:") = Void, NSTextStorage, UInt, NSRange, Int, NSRange;
overload selector(static #"textStorageDidProcessEditing:") = Void, NSNotification;
overload selector(static #"textStorageWillProcessEditing:") = Void, NSNotification;
overload selector(static #"textTabForGlyphLocation:writingDirection:maxLocation:") = NSTextTab, Float, Int, Float;
overload selector(static #"textTransform") = NSAffineTransform;
overload selector(static #"textTypes") = NSArray;
overload selector(static #"textUnfilteredFileTypes") = NSArray;
overload selector(static #"textUnfilteredPasteboardTypes") = NSArray;
overload selector(static #"textUnfilteredTypes") = NSArray;
overload selector(static #"textView") = NSTextView;
overload selector(static #"textView:clickedOnCell:inRect:") = Void, NSTextView, Id, NSRect;
overload selector(static #"textView:clickedOnCell:inRect:atIndex:") = Void, NSTextView, Id, NSRect, UInt;
overload selector(static #"textView:clickedOnLink:") = Bool, NSTextView, Id;
overload selector(static #"textView:clickedOnLink:atIndex:") = Bool, NSTextView, Id, UInt;
overload selector(static #"textView:completions:forPartialWordRange:indexOfSelectedItem:") = NSArray, NSTextView, NSArray, NSRange, Pointer[Int];
overload selector(static #"textView:didCheckTextInRange:types:options:results:orthography:wordCount:") = NSArray, NSTextView, NSRange, UInt64, NSDictionary, NSArray, NSOrthography, Int;
overload selector(static #"textView:doCommandBySelector:") = Bool, NSTextView, SelectorHandle;
overload selector(static #"textView:doubleClickedOnCell:inRect:") = Void, NSTextView, Id, NSRect;
overload selector(static #"textView:doubleClickedOnCell:inRect:atIndex:") = Void, NSTextView, Id, NSRect, UInt;
overload selector(static #"textView:draggedCell:inRect:event:") = Void, NSTextView, Id, NSRect, NSEvent;
overload selector(static #"textView:draggedCell:inRect:event:atIndex:") = Void, NSTextView, Id, NSRect, NSEvent, UInt;
overload selector(static #"textView:menu:forEvent:atIndex:") = NSMenu, NSTextView, NSMenu, NSEvent, UInt;
overload selector(static #"textView:shouldChangeTextInRange:replacementString:") = Bool, NSTextView, NSRange, NSString;
overload selector(static #"textView:shouldChangeTextInRanges:replacementStrings:") = Bool, NSTextView, NSArray, NSArray;
overload selector(static #"textView:shouldChangeTypingAttributes:toAttributes:") = NSDictionary, NSTextView, NSDictionary, NSDictionary;
overload selector(static #"textView:shouldSetSpellingState:range:") = Int, NSTextView, Int, NSRange;
overload selector(static #"textView:willChangeSelectionFromCharacterRange:toCharacterRange:") = NSRange, NSTextView, NSRange, NSRange;
overload selector(static #"textView:willChangeSelectionFromCharacterRanges:toCharacterRanges:") = NSArray, NSTextView, NSArray, NSArray;
overload selector(static #"textView:willCheckTextInRange:options:types:") = NSDictionary, NSTextView, NSRange, NSDictionary, Pointer[UInt64];
overload selector(static #"textView:willDisplayToolTip:forCharacterAtIndex:") = NSString, NSTextView, NSString, UInt;
overload selector(static #"textView:writablePasteboardTypesForCell:atIndex:") = NSArray, NSTextView, Id, UInt;
overload selector(static #"textView:writeCell:atIndex:toPasteboard:type:") = Bool, NSTextView, Id, UInt, NSPasteboard, NSString;
overload selector(static #"textViewDidChangeSelection:") = Void, NSNotification;
overload selector(static #"textViewDidChangeTypingAttributes:") = Void, NSNotification;
overload selector(static #"textViewForBeginningOfSelection") = NSTextView;
overload selector(static #"textWithStringValue:") = Id, NSString;
overload selector(static #"textureInternalFormat") = UInt;
overload selector(static #"textureMaxMipMapLevel") = Int;
overload selector(static #"textureTarget") = UInt;
overload selector(static #"thickness") = Float;
overload selector(static #"thicknessRequiredInRuler") = Float;
overload selector(static #"thousandSeparator") = NSString;
overload selector(static #"threadDictionary") = NSMutableDictionary;
overload selector(static #"threadPriority") = Double;
overload selector(static #"tickMarkPosition") = UInt;
overload selector(static #"tickMarkValueAtIndex:") = Double, Int;
overload selector(static #"tightenKerning:") = Void, Id;
overload selector(static #"tighteningFactorForTruncation") = Float;
overload selector(static #"tile") = Void;
overload selector(static #"tilt") = NSPoint;
overload selector(static #"timeInterval") = Double;
overload selector(static #"timeIntervalSince1970") = Double;
overload selector(static #"timeIntervalSinceDate:") = Double, NSDate;
overload selector(static #"timeIntervalSinceNow") = Double;
overload selector(static #"timeIntervalSinceReferenceDate") = Double;
overload selector(static #"timeOffset") = Double;
overload selector(static #"timeStyle") = UInt;
overload selector(static #"timeZone") = NSTimeZone;
overload selector(static #"timeZoneDataVersion") = NSString;
overload selector(static #"timeZoneForSecondsFromGMT:") = Id, Int;
overload selector(static #"timeZoneWithAbbreviation:") = Id, NSString;
overload selector(static #"timeZoneWithName:") = Id, NSString;
overload selector(static #"timeZoneWithName:data:") = Id, NSString, NSData;
overload selector(static #"timeoutInterval") = Double;
overload selector(static #"timerWithTimeInterval:invocation:repeats:") = NSTimer, Double, NSInvocation, Bool;
overload selector(static #"timerWithTimeInterval:target:selector:userInfo:repeats:") = NSTimer, Double, Id, SelectorHandle, Id, Bool;
overload selector(static #"timestamp") = Double;
overload selector(static #"title") = NSString;
overload selector(static #"titleAlignment") = UInt;
overload selector(static #"titleBarFontOfSize:") = NSFont, Float;
overload selector(static #"titleBaseWritingDirection") = Int;
overload selector(static #"titleCell") = Id;
overload selector(static #"titleColor") = NSColor;
overload selector(static #"titleFont") = NSFont;
overload selector(static #"titleFrameOfColumn:") = NSRect, Int;
overload selector(static #"titleHeight") = Float;
overload selector(static #"titleOfColumn:") = NSString, Int;
overload selector(static #"titleOfSelectedItem") = NSString;
overload selector(static #"titlePosition") = UInt;
overload selector(static #"titleRect") = NSRect;
overload selector(static #"titleRectForBounds:") = NSRect, NSRect;
overload selector(static #"titleWidth") = Float;
overload selector(static #"titleWidth:") = Float, NSSize;
overload selector(static #"toManyRelationshipKeys") = NSArray;
overload selector(static #"toOneRelationshipKeys") = NSArray;
overload selector(static #"toggle:") = Void, Id;
overload selector(static #"toggleAutomaticDashSubstitution:") = Void, Id;
overload selector(static #"toggleAutomaticDataDetection:") = Void, Id;
overload selector(static #"toggleAutomaticLinkDetection:") = Void, Id;
overload selector(static #"toggleAutomaticQuoteSubstitution:") = Void, Id;
overload selector(static #"toggleAutomaticSpellingCorrection:") = Void, Id;
overload selector(static #"toggleAutomaticTextReplacement:") = Void, Id;
overload selector(static #"toggleBaseWritingDirection:") = Void, Id;
overload selector(static #"toggleContinuousSpellChecking:") = Void, Id;
overload selector(static #"toggleGrammarChecking:") = Void, Id;
overload selector(static #"toggleRuler:") = Void, Id;
overload selector(static #"toggleSmartInsertDelete:") = Void, Id;
overload selector(static #"toggleToolbarShown:") = Void, Id;
overload selector(static #"toggleTraditionalCharacterShape:") = Void, Id;
overload selector(static #"tokenField:completionsForSubstring:indexOfToken:indexOfSelectedItem:") = NSArray, NSTokenField, NSString, Int, Pointer[Int];
overload selector(static #"tokenField:displayStringForRepresentedObject:") = NSString, NSTokenField, Id;
overload selector(static #"tokenField:editingStringForRepresentedObject:") = NSString, NSTokenField, Id;
overload selector(static #"tokenField:hasMenuForRepresentedObject:") = Bool, NSTokenField, Id;
overload selector(static #"tokenField:menuForRepresentedObject:") = NSMenu, NSTokenField, Id;
overload selector(static #"tokenField:readFromPasteboard:") = NSArray, NSTokenField, NSPasteboard;
overload selector(static #"tokenField:representedObjectForEditingString:") = Id, NSTokenField, NSString;
overload selector(static #"tokenField:shouldAddObjects:atIndex:") = NSArray, NSTokenField, NSArray, UInt;
overload selector(static #"tokenField:styleForRepresentedObject:") = UInt, NSTokenField, Id;
overload selector(static #"tokenField:writeRepresentedObjects:toPasteboard:") = Bool, NSTokenField, NSArray, NSPasteboard;
overload selector(static #"tokenFieldCell:completionsForSubstring:indexOfToken:indexOfSelectedItem:") = NSArray, NSTokenFieldCell, NSString, Int, Pointer[Int];
overload selector(static #"tokenFieldCell:displayStringForRepresentedObject:") = NSString, NSTokenFieldCell, Id;
overload selector(static #"tokenFieldCell:editingStringForRepresentedObject:") = NSString, NSTokenFieldCell, Id;
overload selector(static #"tokenFieldCell:hasMenuForRepresentedObject:") = Bool, NSTokenFieldCell, Id;
overload selector(static #"tokenFieldCell:menuForRepresentedObject:") = NSMenu, NSTokenFieldCell, Id;
overload selector(static #"tokenFieldCell:readFromPasteboard:") = NSArray, NSTokenFieldCell, NSPasteboard;
overload selector(static #"tokenFieldCell:representedObjectForEditingString:") = Id, NSTokenFieldCell, NSString;
overload selector(static #"tokenFieldCell:shouldAddObjects:atIndex:") = NSArray, NSTokenFieldCell, NSArray, UInt;
overload selector(static #"tokenFieldCell:styleForRepresentedObject:") = UInt, NSTokenFieldCell, Id;
overload selector(static #"tokenFieldCell:writeRepresentedObjects:toPasteboard:") = Bool, NSTokenFieldCell, NSArray, NSPasteboard;
overload selector(static #"tokenStyle") = UInt;
overload selector(static #"tokenizingCharacterSet") = NSCharacterSet;
overload selector(static #"toolTip") = NSString;
overload selector(static #"toolTipForCell:") = NSString, NSCell;
overload selector(static #"toolTipForSegment:") = NSString, Int;
overload selector(static #"toolTipsFontOfSize:") = NSFont, Float;
overload selector(static #"toolbar") = NSToolbar;
overload selector(static #"toolbar:itemForItemIdentifier:willBeInsertedIntoToolbar:") = NSToolbarItem, NSToolbar, NSString, Bool;
overload selector(static #"toolbarAllowedItemIdentifiers:") = NSArray, NSToolbar;
overload selector(static #"toolbarDefaultItemIdentifiers:") = NSArray, NSToolbar;
overload selector(static #"toolbarDidRemoveItem:") = Void, NSNotification;
overload selector(static #"toolbarSelectableItemIdentifiers:") = NSArray, NSToolbar;
overload selector(static #"toolbarWillAddItem:") = Void, NSNotification;
overload selector(static #"topLevelObject") = Id;
overload selector(static #"topMargin") = Float;
overload selector(static #"totalCostLimit") = UInt;
overload selector(static #"touchesBeganWithEvent:") = Void, NSEvent;
overload selector(static #"touchesCancelledWithEvent:") = Void, NSEvent;
overload selector(static #"touchesEndedWithEvent:") = Void, NSEvent;
overload selector(static #"touchesMatchingPhase:inView:") = NSSet, UInt, NSView;
overload selector(static #"touchesMovedWithEvent:") = Void, NSEvent;
overload selector(static #"trackKnob:") = Void, NSEvent;
overload selector(static #"trackMarker:withMouseEvent:") = Bool, NSRulerMarker, NSEvent;
overload selector(static #"trackMouse:adding:") = Bool, NSEvent, Bool;
overload selector(static #"trackMouse:inRect:ofView:atCharacterIndex:untilMouseUp:") = Bool, NSEvent, NSRect, NSView, UInt, Bool;
overload selector(static #"trackMouse:inRect:ofView:untilMouseUp:") = Bool, NSEvent, NSRect, NSView, Bool;
overload selector(static #"trackRect") = NSRect;
overload selector(static #"trackScrollButtons:") = Void, NSEvent;
overload selector(static #"trackWithEvent:") = Bool, NSEvent;
overload selector(static #"trackingArea") = NSTrackingArea;
overload selector(static #"trackingAreas") = NSArray;
overload selector(static #"trackingMode") = UInt;
overload selector(static #"trackingNumber") = Int;
overload selector(static #"trailingOffset") = Float;
overload selector(static #"traitsOfFont:") = UInt, NSFont;
overload selector(static #"transactionID") = CLong;
overload selector(static #"transform") = NSAffineTransform;
overload selector(static #"transformBezierPath:") = NSBezierPath, NSBezierPath;
overload selector(static #"transformPoint:") = NSPoint, NSPoint;
overload selector(static #"transformSize:") = NSSize, NSSize;
overload selector(static #"transformStruct") = NSAffineTransformStruct;
overload selector(static #"transformUsingAffineTransform:") = Void, NSAffineTransform;
overload selector(static #"transformedValue:") = Id, Id;
overload selector(static #"transformedValueClass") = Id;
overload selector(static #"translateOriginToPoint:") = Void, NSPoint;
overload selector(static #"translateRectsNeedingDisplayInRect:by:") = Void, NSRect, NSSize;
overload selector(static #"translateXBy:yBy:") = Void, Float, Float;
overload selector(static #"transpose:") = Void, Id;
overload selector(static #"transposeWords:") = Void, Id;
overload selector(static #"treatsFilePackagesAsDirectories") = Bool;
overload selector(static #"treeNodeWithRepresentedObject:") = Id, Id;
overload selector(static #"truncateFileAtOffset:") = Void, UInt64;
overload selector(static #"truncatesLastVisibleLine") = Bool;
overload selector(static #"tryLock") = Bool;
overload selector(static #"tryLockWhenCondition:") = Bool, Int;
overload selector(static #"tryToPerform:with:") = Bool, SelectorHandle, Id;
overload selector(static #"turnOffKerning:") = Void, Id;
overload selector(static #"turnOffLigatures:") = Void, Id;
overload selector(static #"twoDigitStartDate") = NSDate;
overload selector(static #"type") = NSString;
overload selector(static #"type:conformsToType:") = Bool, NSString, NSString;
overload selector(static #"typeCodeValue") = CULong;
overload selector(static #"typeForArgumentWithName:") = NSString, NSString;
overload selector(static #"typeForContentsOfURL:error:") = NSString, NSURL, Pointer[NSError];
overload selector(static #"typeForKey:") = NSString, NSString;
overload selector(static #"typeFromFileExtension:") = NSString, NSString;
overload selector(static #"typeOfFile:error:") = NSString, NSString, Pointer[NSError];
overload selector(static #"types") = NSArray;
overload selector(static #"typesFilterableTo:") = NSArray, NSString;
overload selector(static #"typesetter") = NSTypesetter;
overload selector(static #"typesetterBehavior") = Int;
overload selector(static #"typingAttributes") = NSDictionary;
overload selector(static #"unableToSetNilForKey:") = Void, NSString;
overload selector(static #"unarchiveObjectWithData:") = Id, NSData;
overload selector(static #"unarchiveObjectWithFile:") = Id, NSString;
overload selector(static #"unarchiver:cannotDecodeObjectOfClassName:originalClasses:") = Id, NSKeyedUnarchiver, NSString, NSArray;
overload selector(static #"unarchiver:didDecodeObject:") = Id, NSKeyedUnarchiver, Id;
overload selector(static #"unarchiver:willReplaceObject:withObject:") = Void, NSKeyedUnarchiver, Id, Id;
overload selector(static #"unarchiverDidFinish:") = Void, NSKeyedUnarchiver;
overload selector(static #"unarchiverWillFinish:") = Void, NSKeyedUnarchiver;
overload selector(static #"unbind:") = Void, NSString;
overload selector(static #"underline:") = Void, Id;
overload selector(static #"underlineGlyphRange:underlineType:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:") = Void, NSRange, Int, NSRect, NSRange, NSPoint;
overload selector(static #"underlinePosition") = Float;
overload selector(static #"underlineThickness") = Float;
overload selector(static #"undo") = Void;
overload selector(static #"undoActionName") = NSString;
overload selector(static #"undoManager") = NSUndoManager;
overload selector(static #"undoManagerForTextView:") = NSUndoManager, NSTextView;
overload selector(static #"undoMenuItemTitle") = NSString;
overload selector(static #"undoMenuTitleForUndoActionName:") = NSString, NSString;
overload selector(static #"undoNestedGroup") = Void;
overload selector(static #"unhide") = Bool;
overload selector(static #"unhide:") = Void, Id;
overload selector(static #"unhideAllApplications:") = Void, Id;
overload selector(static #"unhideWithoutActivation") = Void;
overload selector(static #"unionHashTable:") = Void, NSHashTable;
overload selector(static #"unionSet:") = Void, NSSet;
overload selector(static #"uniqueID") = Id;
overload selector(static #"uniqueSpellDocumentTag") = Int;
overload selector(static #"unlearnWord:") = Void, NSString;
overload selector(static #"unload") = Bool;
overload selector(static #"unlock") = Void;
overload selector(static #"unlockFocus") = Void;
overload selector(static #"unlockWithCondition:") = Void, Int;
overload selector(static #"unmarkText") = Void;
overload selector(static #"unmountAndEjectDeviceAtPath:") = Bool, NSString;
overload selector(static #"unmountAndEjectDeviceAtURL:error:") = Bool, NSURL, Pointer[NSError];
overload selector(static #"unregisterClass:") = Void, Id;
overload selector(static #"unregisterDraggedTypes") = Void;
overload selector(static #"unregisterImageRepClass:") = Void, Id;
overload selector(static #"unregisterUserInterfaceItemSearchHandler:") = Void, Id;
overload selector(static #"unscheduleFromRunLoop:forMode:") = Void, NSRunLoop, NSString;
overload selector(static #"unscript:") = Void, Id;
overload selector(static #"unscriptRange:") = Void, NSRange;
overload selector(static #"unsignedCharValue") = CUChar;
overload selector(static #"unsignedIntValue") = UInt;
overload selector(static #"unsignedIntegerValue") = UInt;
overload selector(static #"unsignedLongLongValue") = UInt64;
overload selector(static #"unsignedLongValue") = CULong;
overload selector(static #"unsignedShortValue") = UShort;
overload selector(static #"update") = Void;
overload selector(static #"updateAttachmentsFromPath:") = Void, NSString;
overload selector(static #"updateCell:") = Void, NSCell;
overload selector(static #"updateCellInside:") = Void, NSCell;
overload selector(static #"updateChangeCount:") = Void, UInt;
overload selector(static #"updateDragTypeRegistration") = Void;
overload selector(static #"updateFontPanel") = Void;
overload selector(static #"updateFromPMPageFormat") = Void;
overload selector(static #"updateFromPMPrintSettings") = Void;
overload selector(static #"updateFromPath:") = Bool, NSString;
overload selector(static #"updateFromPrintInfo") = Void;
overload selector(static #"updateInsertionPointStateAndRestartTimer:") = Void, Bool;
overload selector(static #"updatePanels") = Void;
overload selector(static #"updateRuler") = Void;
overload selector(static #"updateScroller") = Void;
overload selector(static #"updateSpellingPanelWithGrammarString:detail:") = Void, NSString, NSDictionary;
overload selector(static #"updateSpellingPanelWithMisspelledWord:") = Void, NSString;
overload selector(static #"updateTrackingAreas") = Void;
overload selector(static #"updateWindows") = Void;
overload selector(static #"updateWindowsItem:") = Void, NSWindow;
overload selector(static #"uppercaseLetterCharacterSet") = Id;
overload selector(static #"uppercaseString") = NSString;
overload selector(static #"uppercaseWord:") = Void, Id;
overload selector(static #"url") = NSURL;
overload selector(static #"usableParts") = UInt;
overload selector(static #"useAllLigatures:") = Void, Id;
overload selector(static #"useCredential:forAuthenticationChallenge:") = Void, NSURLCredential, NSURLAuthenticationChallenge;
overload selector(static #"useFont:") = Void, NSString;
overload selector(static #"useOptimizedDrawing:") = Void, Bool;
overload selector(static #"useStandardKerning:") = Void, Id;
overload selector(static #"useStandardLigatures:") = Void, Id;
overload selector(static #"useStoredAccessor") = Bool;
overload selector(static #"usedRectForTextContainer:") = NSRect, NSTextContainer;
overload selector(static #"user") = NSString;
overload selector(static #"userData") = RawPointer;
overload selector(static #"userDefaultsChanged") = Bool;
overload selector(static #"userFixedPitchFontOfSize:") = NSFont, Float;
overload selector(static #"userFontOfSize:") = NSFont, Float;
overload selector(static #"userInfo") = Id;
overload selector(static #"userInterfaceLayoutDirection") = Int;
overload selector(static #"userKeyEquivalent") = NSString;
overload selector(static #"userPreferredLanguages") = NSArray;
overload selector(static #"userQuotesArrayForLanguage:") = NSArray, NSString;
overload selector(static #"userReplacementsDictionary") = NSDictionary;
overload selector(static #"userSpaceScaleFactor") = Float;
overload selector(static #"usesAlternatingRowBackgroundColors") = Bool;
overload selector(static #"usesDataSource") = Bool;
overload selector(static #"usesEPSOnResolutionMismatch") = Bool;
overload selector(static #"usesFeedbackWindow") = Bool;
overload selector(static #"usesFindPanel") = Bool;
overload selector(static #"usesFontLeading") = Bool;
overload selector(static #"usesFontPanel") = Bool;
overload selector(static #"usesGroupingSeparator") = Bool;
overload selector(static #"usesItemFromMenu") = Bool;
overload selector(static #"usesLazyFetching") = Bool;
overload selector(static #"usesRuler") = Bool;
overload selector(static #"usesScreenFonts") = Bool;
overload selector(static #"usesSignificantDigits") = Bool;
overload selector(static #"usesSingleLineMode") = Bool;
overload selector(static #"usesStrongWriteBarrier") = Bool;
overload selector(static #"usesThreadedAnimation") = Bool;
overload selector(static #"usesUserKeyEquivalents") = Bool;
overload selector(static #"usesWeakReadAndWriteBarriers") = Bool;
overload selector(static #"validAttributesForMarkedText") = NSArray;
overload selector(static #"validModesForFontPanel:") = UInt, NSFontPanel;
overload selector(static #"validRequestorForSendType:returnType:") = Id, NSString, NSString;
overload selector(static #"validate") = Void;
overload selector(static #"validateAndReturnError:") = Bool, Pointer[NSError];
overload selector(static #"validateEditing") = Void;
overload selector(static #"validateMenuItem:") = Bool, NSMenuItem;
overload selector(static #"validateToolbarItem:") = Bool, NSToolbarItem;
overload selector(static #"validateUserInterfaceItem:") = Bool, Id;
overload selector(static #"validateValue:forKey:error:") = Bool, Pointer[Id], NSString, Pointer[NSError];
overload selector(static #"validateValue:forKeyPath:error:") = Bool, Pointer[Id], NSString, Pointer[NSError];
overload selector(static #"validateVisibleColumns") = Void;
overload selector(static #"validateVisibleItems") = Void;
overload selector(static #"validationPredicates") = NSArray;
overload selector(static #"validationWarnings") = NSArray;
overload selector(static #"value") = Id;
overload selector(static #"value:withObjCType:") = NSValue, RawPointer, Pointer[CChar];
overload selector(static #"valueAtIndex:") = Float, CULong;
overload selector(static #"valueAtIndex:inPropertyWithKey:") = Id, UInt, NSString;
overload selector(static #"valueClassForBinding:") = Id, NSString;
overload selector(static #"valueForAttribute:") = Id, NSString;
overload selector(static #"valueForDimension:") = Float, UInt;
overload selector(static #"valueForHTTPHeaderField:") = NSString, NSString;
overload selector(static #"valueForKey:") = Id, NSString;
overload selector(static #"valueForKeyPath:") = Id, NSString;
overload selector(static #"valueForProperty:") = Id, NSString;
overload selector(static #"valueForUndefinedKey:") = Id, NSString;
overload selector(static #"valueListAttributes") = NSArray;
overload selector(static #"valueLists") = NSDictionary;
overload selector(static #"valueOfAttribute:forResultAtIndex:") = Id, NSString, UInt;
overload selector(static #"valuePointerFunctions") = NSPointerFunctions;
overload selector(static #"valueTransformerForName:") = NSValueTransformer, NSString;
overload selector(static #"valueTransformerName") = NSString;
overload selector(static #"valueTransformerNames") = NSArray;
overload selector(static #"valueTypeForDimension:") = UInt, UInt;
overload selector(static #"valueWithBytes:objCType:") = NSValue, RawPointer, Pointer[CChar];
overload selector(static #"valueWithCATransform3D:") = NSValue, CATransform3D;
overload selector(static #"valueWithName:inPropertyWithKey:") = Id, NSString, NSString;
overload selector(static #"valueWithNonretainedObject:") = NSValue, Id;
overload selector(static #"valueWithPoint:") = NSValue, NSPoint;
overload selector(static #"valueWithPointer:") = NSValue, RawPointer;
overload selector(static #"valueWithRange:") = NSValue, NSRange;
overload selector(static #"valueWithRect:") = NSValue, NSRect;
overload selector(static #"valueWithSize:") = NSValue, NSSize;
overload selector(static #"valueWithUniqueID:inPropertyWithKey:") = Id, Id, NSString;
overload selector(static #"valueWraps") = Bool;
overload selector(static #"values") = Id;
overload selector(static #"valuesForAttributes:") = NSDictionary, NSArray;
overload selector(static #"valuesForKeys:") = NSDictionary, NSArray;
overload selector(static #"variable") = NSString;
overload selector(static #"vectorWithString:") = CIVector, NSString;
overload selector(static #"vectorWithValues:count:") = CIVector, Pointer[Float], CULong;
overload selector(static #"vectorWithX:") = CIVector, Float;
overload selector(static #"vectorWithX:Y:") = CIVector, Float, Float;
overload selector(static #"vectorWithX:Y:Z:") = CIVector, Float, Float, Float;
overload selector(static #"vectorWithX:Y:Z:W:") = CIVector, Float, Float, Float, Float;
overload selector(static #"vendorDefined") = Id;
overload selector(static #"vendorID") = UInt;
overload selector(static #"vendorPointingDeviceType") = UInt;
overload selector(static #"version") = Int;
overload selector(static #"versionForClassName:") = Int, NSString;
overload selector(static #"versionHash") = NSData;
overload selector(static #"versionHashModifier") = NSString;
overload selector(static #"verticalAlignment") = UInt;
overload selector(static #"verticalLineScroll") = Float;
overload selector(static #"verticalMotionCanBeginDrag") = Bool;
overload selector(static #"verticalPageScroll") = Float;
overload selector(static #"verticalPagination") = UInt;
overload selector(static #"verticalRulerView") = NSRulerView;
overload selector(static #"verticalScroller") = NSScroller;
overload selector(static #"veryShortMonthSymbols") = NSArray;
overload selector(static #"veryShortStandaloneMonthSymbols") = NSArray;
overload selector(static #"veryShortStandaloneWeekdaySymbols") = NSArray;
overload selector(static #"veryShortWeekdaySymbols") = NSArray;
overload selector(static #"view") = Id;
overload selector(static #"view:stringForToolTip:point:userData:") = NSString, NSView, Int, NSPoint, RawPointer;
overload selector(static #"viewAnimations") = NSArray;
overload selector(static #"viewBoundsChanged:") = Void, NSNotification;
overload selector(static #"viewDidEndLiveResize") = Void;
overload selector(static #"viewDidHide") = Void;
overload selector(static #"viewDidMoveToSuperview") = Void;
overload selector(static #"viewDidMoveToWindow") = Void;
overload selector(static #"viewDidUnhide") = Void;
overload selector(static #"viewFrameChanged:") = Void, NSNotification;
overload selector(static #"viewSizeChanged:") = Void, Id;
overload selector(static #"viewWillDraw") = Void;
overload selector(static #"viewWillMoveToSuperview:") = Void, NSView;
overload selector(static #"viewWillMoveToWindow:") = Void, NSWindow;
overload selector(static #"viewWillStartLiveResize") = Void;
overload selector(static #"viewWithTag:") = Id, Int;
overload selector(static #"viewsNeedDisplay") = Bool;
overload selector(static #"visibilityPriority") = Int;
overload selector(static #"visibleFrame") = NSRect;
overload selector(static #"visibleItems") = NSArray;
overload selector(static #"visibleRect") = NSRect;
overload selector(static #"voice") = NSString;
overload selector(static #"volatileDomainForName:") = NSDictionary, NSString;
overload selector(static #"volatileDomainNames") = NSArray;
overload selector(static #"volume") = Float;
overload selector(static #"wait") = Void;
overload selector(static #"waitForDataInBackgroundAndNotify") = Void;
overload selector(static #"waitForDataInBackgroundAndNotifyForModes:") = Void, NSArray;
overload selector(static #"waitUntilAllOperationsAreFinished") = Void;
overload selector(static #"waitUntilDate:") = Bool, NSDate;
overload selector(static #"waitUntilExit") = Void;
overload selector(static #"waitUntilFinished") = Void;
overload selector(static #"wantsDefaultClipping") = Bool;
overload selector(static #"wantsLayer") = Bool;
overload selector(static #"wantsNotificationForMarkedText") = Bool;
overload selector(static #"wantsPeriodicDraggingUpdates") = Bool;
overload selector(static #"wantsRestingTouches") = Bool;
overload selector(static #"wantsToDelayTextChangeNotifications") = Bool;
overload selector(static #"wantsToHandleMouseEvents") = Bool;
overload selector(static #"wantsToInterpretAllKeystrokes") = Bool;
overload selector(static #"wantsToTrackMouse") = Bool;
overload selector(static #"wantsToTrackMouseForEvent:inRect:ofView:atCharacterIndex:") = Bool, NSEvent, NSRect, NSView, UInt;
overload selector(static #"warningValue") = Double;
overload selector(static #"week") = Int;
overload selector(static #"weekday") = Int;
overload selector(static #"weekdayOrdinal") = Int;
overload selector(static #"weekdaySymbols") = NSArray;
overload selector(static #"weightOfFont:") = Int, NSFont;
overload selector(static #"whiteColor") = NSColor;
overload selector(static #"whiteComponent") = Float;
overload selector(static #"whitespaceAndNewlineCharacterSet") = Id;
overload selector(static #"whitespaceCharacterSet") = Id;
overload selector(static #"width") = Float;
overload selector(static #"widthAdjustLimit") = Float;
overload selector(static #"widthForLayer:edge:") = Float, Int, NSRectEdge;
overload selector(static #"widthForSegment:") = Float, Int;
overload selector(static #"widthOfColumn:") = Float, Int;
overload selector(static #"widthOfString:") = Float, NSString;
overload selector(static #"widthTracksTextView") = Bool;
overload selector(static #"widthValueTypeForLayer:edge:") = UInt, Int, NSRectEdge;
overload selector(static #"willChange:valuesAtIndexes:forKey:") = Void, UInt, NSIndexSet, NSString;
overload selector(static #"willChangeValueForKey:") = Void, NSString;
overload selector(static #"willChangeValueForKey:withSetMutation:usingObjects:") = Void, NSString, UInt, NSSet;
overload selector(static #"willPresentError:") = NSError, NSError;
overload selector(static #"willRemoveSubview:") = Void, NSView;
overload selector(static #"willSetLineFragmentRect:forGlyphRange:usedRect:baselineOffset:") = Void, NSRectPointer, NSRange, NSRectPointer, Pointer[Float];
overload selector(static #"windingRule") = UInt;
overload selector(static #"window") = Id;
overload selector(static #"window:shouldDragDocumentWithEvent:from:withPasteboard:") = Bool, NSWindow, NSEvent, NSPoint, NSPasteboard;
overload selector(static #"window:shouldPopUpDocumentPathMenu:") = Bool, NSWindow, NSMenu;
overload selector(static #"window:willPositionSheet:usingRect:") = NSRect, NSWindow, NSWindow, NSRect;
overload selector(static #"windowBackgroundColor") = NSColor;
overload selector(static #"windowController") = Id;
overload selector(static #"windowControllerDidLoadNib:") = Void, NSWindowController;
overload selector(static #"windowControllerWillLoadNib:") = Void, NSWindowController;
overload selector(static #"windowControllers") = NSArray;
overload selector(static #"windowDidBecomeKey:") = Void, NSNotification;
overload selector(static #"windowDidBecomeMain:") = Void, NSNotification;
overload selector(static #"windowDidChangeScreen:") = Void, NSNotification;
overload selector(static #"windowDidChangeScreenProfile:") = Void, NSNotification;
overload selector(static #"windowDidDeminiaturize:") = Void, NSNotification;
overload selector(static #"windowDidEndLiveResize:") = Void, NSNotification;
overload selector(static #"windowDidEndSheet:") = Void, NSNotification;
overload selector(static #"windowDidExpose:") = Void, NSNotification;
overload selector(static #"windowDidLoad") = Void;
overload selector(static #"windowDidMiniaturize:") = Void, NSNotification;
overload selector(static #"windowDidMove:") = Void, NSNotification;
overload selector(static #"windowDidResignKey:") = Void, NSNotification;
overload selector(static #"windowDidResignMain:") = Void, NSNotification;
overload selector(static #"windowDidResize:") = Void, NSNotification;
overload selector(static #"windowDidUpdate:") = Void, NSNotification;
overload selector(static #"windowForSheet") = NSWindow;
overload selector(static #"windowFrameAutosaveName") = NSString;
overload selector(static #"windowFrameColor") = NSColor;
overload selector(static #"windowFrameTextColor") = NSColor;
overload selector(static #"windowLevel") = Int;
overload selector(static #"windowNibName") = NSString;
overload selector(static #"windowNibPath") = NSString;
overload selector(static #"windowNumber") = Int;
overload selector(static #"windowNumberAtPoint:belowWindowWithWindowNumber:") = Int, NSPoint, Int;
overload selector(static #"windowNumbersWithOptions:") = NSArray, UInt;
overload selector(static #"windowRef") = RawPointer;
overload selector(static #"windowShouldClose:") = Bool, Id;
overload selector(static #"windowShouldZoom:toFrame:") = Bool, NSWindow, NSRect;
overload selector(static #"windowTitleForDocumentDisplayName:") = NSString, NSString;
overload selector(static #"windowWillBeginSheet:") = Void, NSNotification;
overload selector(static #"windowWillClose:") = Void, NSNotification;
overload selector(static #"windowWillLoad") = Void;
overload selector(static #"windowWillMiniaturize:") = Void, NSNotification;
overload selector(static #"windowWillMove:") = Void, NSNotification;
overload selector(static #"windowWillResize:toSize:") = NSSize, NSWindow, NSSize;
overload selector(static #"windowWillReturnFieldEditor:toObject:") = Id, NSWindow, Id;
overload selector(static #"windowWillReturnUndoManager:") = NSUndoManager, NSWindow;
overload selector(static #"windowWillStartLiveResize:") = Void, NSNotification;
overload selector(static #"windowWillUseStandardFrame:defaultFrame:") = NSRect, NSWindow, NSRect;
overload selector(static #"windowWithWindowNumber:") = NSWindow, Int;
overload selector(static #"windows") = NSArray;
overload selector(static #"windowsLocaleCodeFromLocaleIdentifier:") = UInt, NSString;
overload selector(static #"windowsMenu") = NSMenu;
overload selector(static #"words") = NSArray;
overload selector(static #"worksWhenModal") = Bool;
overload selector(static #"wraps") = Bool;
overload selector(static #"writablePasteboardTypes") = NSArray;
overload selector(static #"writableTypes") = NSArray;
overload selector(static #"writableTypesForPasteboard:") = NSArray, NSPasteboard;
overload selector(static #"writableTypesForSaveOperation:") = NSArray, UInt;
overload selector(static #"write:maxLength:") = Int, Pointer[CUChar], UInt;
overload selector(static #"writeBookmarkData:toURL:options:error:") = Bool, NSData, NSURL, UInt, Pointer[NSError];
overload selector(static #"writeData:") = Bool, NSData;
overload selector(static #"writeEPSInsideRect:toPasteboard:") = Void, NSRect, NSPasteboard;
overload selector(static #"writeFileContents:") = Bool, NSString;
overload selector(static #"writeFileWrapper:") = Bool, NSFileWrapper;
overload selector(static #"writeObjects:") = Bool, NSArray;
overload selector(static #"writePDFInsideRect:toPasteboard:") = Void, NSRect, NSPasteboard;
overload selector(static #"writePrintInfo") = Void;
overload selector(static #"writeProperty:forKey:") = Bool, Id, NSString;
overload selector(static #"writePropertyList:toStream:format:options:error:") = Int, Id, NSOutputStream, UInt, UInt, Pointer[NSError];
overload selector(static #"writeRTFDToFile:atomically:") = Bool, NSString, Bool;
overload selector(static #"writeSafelyToURL:ofType:forSaveOperation:error:") = Bool, NSURL, NSString, UInt, Pointer[NSError];
overload selector(static #"writeSelectionToPasteboard:type:") = Bool, NSPasteboard, NSString;
overload selector(static #"writeSelectionToPasteboard:types:") = Bool, NSPasteboard, NSArray;
overload selector(static #"writeToFile:") = Bool, NSString;
overload selector(static #"writeToFile:atomically:") = Bool, NSString, Bool;
overload selector(static #"writeToFile:atomically:encoding:error:") = Bool, NSString, Bool, UInt, Pointer[NSError];
overload selector(static #"writeToFile:atomically:updateFilenames:") = Bool, NSString, Bool, Bool;
overload selector(static #"writeToFile:ofType:") = Bool, NSString, NSString;
overload selector(static #"writeToFile:ofType:originalFile:saveOperation:") = Bool, NSString, NSString, NSString, UInt;
overload selector(static #"writeToFile:options:error:") = Bool, NSString, UInt, Pointer[NSError];
overload selector(static #"writeToPasteboard:") = Void, NSPasteboard;
overload selector(static #"writeToURL:atomically:") = Bool, NSURL, Bool;
overload selector(static #"writeToURL:atomically:encoding:error:") = Bool, NSURL, Bool, UInt, Pointer[NSError];
overload selector(static #"writeToURL:ofType:") = Bool, NSURL, NSString;
overload selector(static #"writeToURL:ofType:error:") = Bool, NSURL, NSString, Pointer[NSError];
overload selector(static #"writeToURL:ofType:forSaveOperation:originalContentsURL:error:") = Bool, NSURL, NSString, UInt, NSURL, Pointer[NSError];
overload selector(static #"writeToURL:options:error:") = Bool, NSURL, UInt, Pointer[NSError];
overload selector(static #"writeToURL:options:originalContentsURL:error:") = Bool, NSURL, UInt, NSURL, Pointer[NSError];
overload selector(static #"writeWithBackupToFile:ofType:saveOperation:") = Bool, NSString, NSString, UInt;
overload selector(static #"writingOptionsForType:pasteboard:") = UInt, NSString, NSPasteboard;
overload selector(static #"xHeight") = Float;
overload selector(static #"yank:") = Void, Id;
overload selector(static #"year") = Int;
overload selector(static #"yearOfCommonEra") = Int;
overload selector(static #"years:months:days:hours:minutes:seconds:sinceDate:") = Void, Pointer[Int], Pointer[Int], Pointer[Int], Pointer[Int], Pointer[Int], Pointer[Int], NSCalendarDate;
overload selector(static #"yellowColor") = NSColor;
overload selector(static #"yellowComponent") = Float;
overload selector(static #"zPosition") = Float;
overload selector(static #"zero") = NSDecimalNumber;
overload selector(static #"zeroSymbol") = NSString;
overload selector(static #"zone") = Pointer[NSZone];
overload selector(static #"zoom:") = Void, Id;

overload externalInstanceMethod(static CIColor, static #"initWithColor:") = Id, NSColor;

overload externalInstanceMethod(static CIImage, static #"initWithBitmapImageRep:") = Id, NSBitmapImageRep;
overload externalInstanceMethod(static CIImage, static #"drawInRect:fromRect:operation:fraction:") = Void, NSRect, NSRect, UInt, Float;
overload externalInstanceMethod(static CIImage, static #"drawAtPoint:fromRect:operation:fraction:") = Void, NSPoint, NSRect, UInt, Float;

record NSATSTypesetter = externalClass(NSTypesetter);
overload externalClassMethod(static NSATSTypesetter, static #"sharedTypesetter") = Id;
overload externalInstanceMethod(static NSATSTypesetter, static #"lineFragmentRectForProposedRect:remainingRect:") = NSRect, NSRect, NSRectPointer;

record NSActionCell = externalClass(NSCell);
overload externalInstanceMethod(static NSActionCell, static #"target") = Id;
overload externalInstanceMethod(static NSActionCell, static #"setTarget:") = Void, Id;
overload externalInstanceMethod(static NSActionCell, static #"action") = SelectorHandle;
overload externalInstanceMethod(static NSActionCell, static #"setAction:") = Void, SelectorHandle;
overload externalInstanceMethod(static NSActionCell, static #"tag") = Int;
overload externalInstanceMethod(static NSActionCell, static #"setTag:") = Void, Int;

overload externalInstanceMethod(static NSAffineTransform, static #"transformBezierPath:") = NSBezierPath, NSBezierPath;
overload externalInstanceMethod(static NSAffineTransform, static #"set") = Void;
overload externalInstanceMethod(static NSAffineTransform, static #"concat") = Void;

record NSAlert = externalClass(NSObject);
overload externalClassMethod(static NSAlert, static #"alertWithError:") = NSAlert, NSError;
overload externalVarargClassMethod(static NSAlert, static #"alertWithMessageText:defaultButton:alternateButton:otherButton:informativeTextWithFormat:") = NSAlert, NSString, NSString, NSString, NSString, NSString;
overload externalInstanceMethod(static NSAlert, static #"setMessageText:") = Void, NSString;
overload externalInstanceMethod(static NSAlert, static #"setInformativeText:") = Void, NSString;
overload externalInstanceMethod(static NSAlert, static #"messageText") = NSString;
overload externalInstanceMethod(static NSAlert, static #"informativeText") = NSString;
overload externalInstanceMethod(static NSAlert, static #"setIcon:") = Void, NSImage;
overload externalInstanceMethod(static NSAlert, static #"icon") = NSImage;
overload externalInstanceMethod(static NSAlert, static #"addButtonWithTitle:") = NSButton, NSString;
overload externalInstanceMethod(static NSAlert, static #"buttons") = NSArray;
overload externalInstanceMethod(static NSAlert, static #"setShowsHelp:") = Void, Bool;
overload externalInstanceMethod(static NSAlert, static #"showsHelp") = Bool;
overload externalInstanceMethod(static NSAlert, static #"setHelpAnchor:") = Void, NSString;
overload externalInstanceMethod(static NSAlert, static #"helpAnchor") = NSString;
overload externalInstanceMethod(static NSAlert, static #"setAlertStyle:") = Void, UInt;
overload externalInstanceMethod(static NSAlert, static #"alertStyle") = UInt;
overload externalInstanceMethod(static NSAlert, static #"setDelegate:") = Void, Id;
overload externalInstanceMethod(static NSAlert, static #"delegate") = Id;
overload externalInstanceMethod(static NSAlert, static #"setShowsSuppressionButton:") = Void, Bool;
overload externalInstanceMethod(static NSAlert, static #"showsSuppressionButton") = Bool;
overload externalInstanceMethod(static NSAlert, static #"suppressionButton") = NSButton;
overload externalInstanceMethod(static NSAlert, static #"setAccessoryView:") = Void, NSView;
overload externalInstanceMethod(static NSAlert, static #"accessoryView") = NSView;
overload externalInstanceMethod(static NSAlert, static #"layout") = Void;
overload externalInstanceMethod(static NSAlert, static #"runModal") = Int;
overload externalInstanceMethod(static NSAlert, static #"beginSheetModalForWindow:modalDelegate:didEndSelector:contextInfo:") = Void, NSWindow, Id, SelectorHandle, RawPointer;
overload externalInstanceMethod(static NSAlert, static #"window") = Id;

record NSAnimation = externalClass(NSObject);
overload externalInstanceMethod(static NSAnimation, static #"copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(static NSAnimation, static #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static NSAnimation, static #"initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(static NSAnimation, static #"initWithDuration:animationCurve:") = Id, Double, UInt;
overload externalInstanceMethod(static NSAnimation, static #"startAnimation") = Void;
overload externalInstanceMethod(static NSAnimation, static #"stopAnimation") = Void;
overload externalInstanceMethod(static NSAnimation, static #"isAnimating") = Bool;
overload externalInstanceMethod(static NSAnimation, static #"currentProgress") = Float;
overload externalInstanceMethod(static NSAnimation, static #"setCurrentProgress:") = Void, Float;
overload externalInstanceMethod(static NSAnimation, static #"setDuration:") = Void, Double;
overload externalInstanceMethod(static NSAnimation, static #"duration") = Double;
overload externalInstanceMethod(static NSAnimation, static #"animationBlockingMode") = UInt;
overload externalInstanceMethod(static NSAnimation, static #"setAnimationBlockingMode:") = Void, UInt;
overload externalInstanceMethod(static NSAnimation, static #"setFrameRate:") = Void, Float;
overload externalInstanceMethod(static NSAnimation, static #"frameRate") = Float;
overload externalInstanceMethod(static NSAnimation, static #"setAnimationCurve:") = Void, UInt;
overload externalInstanceMethod(static NSAnimation, static #"animationCurve") = UInt;
overload externalInstanceMethod(static NSAnimation, static #"currentValue") = Float;
overload externalInstanceMethod(static NSAnimation, static #"setDelegate:") = Void, Id;
overload externalInstanceMethod(static NSAnimation, static #"delegate") = Id;
overload externalInstanceMethod(static NSAnimation, static #"progressMarks") = NSArray;
overload externalInstanceMethod(static NSAnimation, static #"setProgressMarks:") = Void, NSArray;
overload externalInstanceMethod(static NSAnimation, static #"addProgressMark:") = Void, Float;
overload externalInstanceMethod(static NSAnimation, static #"removeProgressMark:") = Void, Float;
overload externalInstanceMethod(static NSAnimation, static #"startWhenAnimation:reachesProgress:") = Void, NSAnimation, Float;
overload externalInstanceMethod(static NSAnimation, static #"stopWhenAnimation:reachesProgress:") = Void, NSAnimation, Float;
overload externalInstanceMethod(static NSAnimation, static #"clearStartAnimation") = Void;
overload externalInstanceMethod(static NSAnimation, static #"clearStopAnimation") = Void;
overload externalInstanceMethod(static NSAnimation, static #"runLoopModesForAnimating") = NSArray;

record NSAnimationContext = externalClass(NSObject);
overload externalClassMethod(static NSAnimationContext, static #"beginGrouping") = Void;
overload externalClassMethod(static NSAnimationContext, static #"endGrouping") = Void;
overload externalClassMethod(static NSAnimationContext, static #"currentContext") = NSAnimationContext;
overload externalInstanceMethod(static NSAnimationContext, static #"setDuration:") = Void, Double;
overload externalInstanceMethod(static NSAnimationContext, static #"duration") = Double;

overload externalInstanceMethod(static NSAppleScript, static #"richTextSource") = NSAttributedString;

record NSApplication = externalClass(NSResponder);
overload externalInstanceMethod(static NSApplication, static #"validateUserInterfaceItem:") = Bool, Id;
overload externalClassMethod(static NSApplication, static #"sharedApplication") = NSApplication;
overload externalInstanceMethod(static NSApplication, static #"setDelegate:") = Void, Id;
overload externalInstanceMethod(static NSApplication, static #"delegate") = Id;
overload externalInstanceMethod(static NSApplication, static #"context") = NSGraphicsContext;
overload externalInstanceMethod(static NSApplication, static #"hide:") = Void, Id;
overload externalInstanceMethod(static NSApplication, static #"unhide:") = Void, Id;
overload externalInstanceMethod(static NSApplication, static #"unhideWithoutActivation") = Void;
overload externalInstanceMethod(static NSApplication, static #"windowWithWindowNumber:") = NSWindow, Int;
overload externalInstanceMethod(static NSApplication, static #"mainWindow") = NSWindow;
overload externalInstanceMethod(static NSApplication, static #"keyWindow") = NSWindow;
overload externalInstanceMethod(static NSApplication, static #"isActive") = Bool;
overload externalInstanceMethod(static NSApplication, static #"isHidden") = Bool;
overload externalInstanceMethod(static NSApplication, static #"isRunning") = Bool;
overload externalInstanceMethod(static NSApplication, static #"deactivate") = Void;
overload externalInstanceMethod(static NSApplication, static #"activateIgnoringOtherApps:") = Void, Bool;
overload externalInstanceMethod(static NSApplication, static #"hideOtherApplications:") = Void, Id;
overload externalInstanceMethod(static NSApplication, static #"unhideAllApplications:") = Void, Id;
overload externalInstanceMethod(static NSApplication, static #"finishLaunching") = Void;
overload externalInstanceMethod(static NSApplication, static #"run") = Void;
overload externalInstanceMethod(static NSApplication, static #"runModalForWindow:") = Int, NSWindow;
overload externalInstanceMethod(static NSApplication, static #"stop:") = Void, Id;
overload externalInstanceMethod(static NSApplication, static #"stopModal") = Void;
overload externalInstanceMethod(static NSApplication, static #"stopModalWithCode:") = Void, Int;
overload externalInstanceMethod(static NSApplication, static #"abortModal") = Void;
overload externalInstanceMethod(static NSApplication, static #"modalWindow") = NSWindow;
overload externalInstanceMethod(static NSApplication, static #"beginModalSessionForWindow:") = NSModalSession, NSWindow;
overload externalInstanceMethod(static NSApplication, static #"runModalSession:") = Int, NSModalSession;
overload externalInstanceMethod(static NSApplication, static #"endModalSession:") = Void, NSModalSession;
overload externalInstanceMethod(static NSApplication, static #"terminate:") = Void, Id;
overload externalInstanceMethod(static NSApplication, static #"requestUserAttention:") = Int, UInt;
overload externalInstanceMethod(static NSApplication, static #"cancelUserAttentionRequest:") = Void, Int;
overload externalInstanceMethod(static NSApplication, static #"beginSheet:modalForWindow:modalDelegate:didEndSelector:contextInfo:") = Void, NSWindow, NSWindow, Id, SelectorHandle, RawPointer;
overload externalInstanceMethod(static NSApplication, static #"endSheet:") = Void, NSWindow;
overload externalInstanceMethod(static NSApplication, static #"endSheet:returnCode:") = Void, NSWindow, Int;
overload externalInstanceMethod(static NSApplication, static #"nextEventMatchingMask:untilDate:inMode:dequeue:") = NSEvent, UInt, NSDate, NSString, Bool;
overload externalInstanceMethod(static NSApplication, static #"discardEventsMatchingMask:beforeEvent:") = Void, UInt, NSEvent;
overload externalInstanceMethod(static NSApplication, static #"postEvent:atStart:") = Void, NSEvent, Bool;
overload externalInstanceMethod(static NSApplication, static #"currentEvent") = NSEvent;
overload externalInstanceMethod(static NSApplication, static #"sendEvent:") = Void, NSEvent;
overload externalInstanceMethod(static NSApplication, static #"preventWindowOrdering") = Void;
overload externalInstanceMethod(static NSApplication, static #"makeWindowsPerform:inOrder:") = NSWindow, SelectorHandle, Bool;
overload externalInstanceMethod(static NSApplication, static #"windows") = NSArray;
overload externalInstanceMethod(static NSApplication, static #"setWindowsNeedUpdate:") = Void, Bool;
overload externalInstanceMethod(static NSApplication, static #"updateWindows") = Void;
overload externalInstanceMethod(static NSApplication, static #"setMainMenu:") = Void, NSMenu;
overload externalInstanceMethod(static NSApplication, static #"mainMenu") = NSMenu;
overload externalInstanceMethod(static NSApplication, static #"setHelpMenu:") = Void, NSMenu;
overload externalInstanceMethod(static NSApplication, static #"helpMenu") = NSMenu;
overload externalInstanceMethod(static NSApplication, static #"setApplicationIconImage:") = Void, NSImage;
overload externalInstanceMethod(static NSApplication, static #"applicationIconImage") = NSImage;
overload externalInstanceMethod(static NSApplication, static #"activationPolicy") = Int;
overload externalInstanceMethod(static NSApplication, static #"setActivationPolicy:") = Bool, Int;
overload externalInstanceMethod(static NSApplication, static #"dockTile") = NSDockTile;
overload externalInstanceMethod(static NSApplication, static #"sendAction:to:from:") = Bool, SelectorHandle, Id, Id;
overload externalInstanceMethod(static NSApplication, static #"targetForAction:") = Id, SelectorHandle;
overload externalInstanceMethod(static NSApplication, static #"targetForAction:to:from:") = Id, SelectorHandle, Id, Id;
overload externalInstanceMethod(static NSApplication, static #"tryToPerform:with:") = Bool, SelectorHandle, Id;
overload externalInstanceMethod(static NSApplication, static #"validRequestorForSendType:returnType:") = Id, NSString, NSString;
overload externalInstanceMethod(static NSApplication, static #"reportException:") = Void, NSException;
overload externalClassMethod(static NSApplication, static #"detachDrawingThread:toTarget:withObject:") = Void, SelectorHandle, Id, Id;
overload externalInstanceMethod(static NSApplication, static #"replyToApplicationShouldTerminate:") = Void, Bool;
overload externalInstanceMethod(static NSApplication, static #"replyToOpenOrPrint:") = Void, UInt;
overload externalInstanceMethod(static NSApplication, static #"orderFrontCharacterPalette:") = Void, Id;
overload externalInstanceMethod(static NSApplication, static #"presentationOptions") = UInt;
overload externalInstanceMethod(static NSApplication, static #"setPresentationOptions:") = Void, UInt;
overload externalInstanceMethod(static NSApplication, static #"currentSystemPresentationOptions") = UInt;
overload externalInstanceMethod(static NSApplication, static #"setWindowsMenu:") = Void, NSMenu;
overload externalInstanceMethod(static NSApplication, static #"windowsMenu") = NSMenu;
overload externalInstanceMethod(static NSApplication, static #"arrangeInFront:") = Void, Id;
overload externalInstanceMethod(static NSApplication, static #"removeWindowsItem:") = Void, NSWindow;
overload externalInstanceMethod(static NSApplication, static #"addWindowsItem:title:filename:") = Void, NSWindow, NSString, Bool;
overload externalInstanceMethod(static NSApplication, static #"changeWindowsItem:title:filename:") = Void, NSWindow, NSString, Bool;
overload externalInstanceMethod(static NSApplication, static #"updateWindowsItem:") = Void, NSWindow;
overload externalInstanceMethod(static NSApplication, static #"miniaturizeAll:") = Void, Id;
overload externalInstanceMethod(static NSApplication, static #"isFullKeyboardAccessEnabled") = Bool;
overload externalInstanceMethod(static NSApplication, static #"setServicesMenu:") = Void, NSMenu;
overload externalInstanceMethod(static NSApplication, static #"servicesMenu") = NSMenu;
overload externalInstanceMethod(static NSApplication, static #"registerServicesMenuSendTypes:returnTypes:") = Void, NSArray, NSArray;
overload externalInstanceMethod(static NSApplication, static #"setServicesProvider:") = Void, Id;
overload externalInstanceMethod(static NSApplication, static #"servicesProvider") = Id;
overload externalInstanceMethod(static NSApplication, static #"orderFrontStandardAboutPanel:") = Void, Id;
overload externalInstanceMethod(static NSApplication, static #"orderFrontStandardAboutPanelWithOptions:") = Void, NSDictionary;
overload externalInstanceMethod(static NSApplication, static #"userInterfaceLayoutDirection") = Int;
overload externalInstanceMethod(static NSApplication, static #"runModalForWindow:relativeToWindow:") = Int, NSWindow, NSWindow;
overload externalInstanceMethod(static NSApplication, static #"beginModalSessionForWindow:relativeToWindow:") = NSModalSession, NSWindow, NSWindow;
overload externalInstanceMethod(static NSApplication, static #"application:printFiles:") = Void, NSApplication, NSArray;
overload externalInstanceMethod(static NSApplication, static #"orderFrontColorPanel:") = Void, Id;
overload externalInstanceMethod(static NSApplication, static #"activateContextHelpMode:") = Void, Id;
overload externalInstanceMethod(static NSApplication, static #"showHelp:") = Void, Id;
overload externalInstanceMethod(static NSApplication, static #"runPageLayout:") = Void, Id;
overload externalInstanceMethod(static NSApplication, static #"orderedDocuments") = NSArray;
overload externalInstanceMethod(static NSApplication, static #"orderedWindows") = NSArray;
overload externalInstanceMethod(static NSApplication, static #"registerUserInterfaceItemSearchHandler:") = Void, Id;
overload externalInstanceMethod(static NSApplication, static #"unregisterUserInterfaceItemSearchHandler:") = Void, Id;
overload externalInstanceMethod(static NSApplication, static #"searchString:inUserInterfaceItemString:searchRange:foundRange:") = Bool, NSString, NSString, NSRange, Pointer[NSRange];

record NSArrayController = externalClass(NSObjectController);
overload externalInstanceMethod(static NSArrayController, static #"rearrangeObjects") = Void;
overload externalInstanceMethod(static NSArrayController, static #"setAutomaticallyRearrangesObjects:") = Void, Bool;
overload externalInstanceMethod(static NSArrayController, static #"automaticallyRearrangesObjects") = Bool;
overload externalInstanceMethod(static NSArrayController, static #"automaticRearrangementKeyPaths") = NSArray;
overload externalInstanceMethod(static NSArrayController, static #"didChangeArrangementCriteria") = Void;
overload externalInstanceMethod(static NSArrayController, static #"setSortDescriptors:") = Void, NSArray;
overload externalInstanceMethod(static NSArrayController, static #"sortDescriptors") = NSArray;
overload externalInstanceMethod(static NSArrayController, static #"setFilterPredicate:") = Void, NSPredicate;
overload externalInstanceMethod(static NSArrayController, static #"filterPredicate") = NSPredicate;
overload externalInstanceMethod(static NSArrayController, static #"setClearsFilterPredicateOnInsertion:") = Void, Bool;
overload externalInstanceMethod(static NSArrayController, static #"clearsFilterPredicateOnInsertion") = Bool;
overload externalInstanceMethod(static NSArrayController, static #"arrangeObjects:") = NSArray, NSArray;
overload externalInstanceMethod(static NSArrayController, static #"arrangedObjects") = Id;
overload externalInstanceMethod(static NSArrayController, static #"setAvoidsEmptySelection:") = Void, Bool;
overload externalInstanceMethod(static NSArrayController, static #"avoidsEmptySelection") = Bool;
overload externalInstanceMethod(static NSArrayController, static #"setPreservesSelection:") = Void, Bool;
overload externalInstanceMethod(static NSArrayController, static #"preservesSelection") = Bool;
overload externalInstanceMethod(static NSArrayController, static #"setSelectsInsertedObjects:") = Void, Bool;
overload externalInstanceMethod(static NSArrayController, static #"selectsInsertedObjects") = Bool;
overload externalInstanceMethod(static NSArrayController, static #"setAlwaysUsesMultipleValuesMarker:") = Void, Bool;
overload externalInstanceMethod(static NSArrayController, static #"alwaysUsesMultipleValuesMarker") = Bool;
overload externalInstanceMethod(static NSArrayController, static #"setSelectionIndexes:") = Bool, NSIndexSet;
overload externalInstanceMethod(static NSArrayController, static #"selectionIndexes") = NSIndexSet;
overload externalInstanceMethod(static NSArrayController, static #"setSelectionIndex:") = Bool, UInt;
overload externalInstanceMethod(static NSArrayController, static #"selectionIndex") = UInt;
overload externalInstanceMethod(static NSArrayController, static #"addSelectionIndexes:") = Bool, NSIndexSet;
overload externalInstanceMethod(static NSArrayController, static #"removeSelectionIndexes:") = Bool, NSIndexSet;
overload externalInstanceMethod(static NSArrayController, static #"setSelectedObjects:") = Bool, NSArray;
overload externalInstanceMethod(static NSArrayController, static #"selectedObjects") = NSArray;
overload externalInstanceMethod(static NSArrayController, static #"addSelectedObjects:") = Bool, NSArray;
overload externalInstanceMethod(static NSArrayController, static #"removeSelectedObjects:") = Bool, NSArray;
overload externalInstanceMethod(static NSArrayController, static #"add:") = Void, Id;
overload externalInstanceMethod(static NSArrayController, static #"remove:") = Void, Id;
overload externalInstanceMethod(static NSArrayController, static #"insert:") = Void, Id;
overload externalInstanceMethod(static NSArrayController, static #"canInsert") = Bool;
overload externalInstanceMethod(static NSArrayController, static #"selectNext:") = Void, Id;
overload externalInstanceMethod(static NSArrayController, static #"selectPrevious:") = Void, Id;
overload externalInstanceMethod(static NSArrayController, static #"canSelectNext") = Bool;
overload externalInstanceMethod(static NSArrayController, static #"canSelectPrevious") = Bool;
overload externalInstanceMethod(static NSArrayController, static #"addObject:") = Void, Id;
overload externalInstanceMethod(static NSArrayController, static #"addObjects:") = Void, NSArray;
overload externalInstanceMethod(static NSArrayController, static #"insertObject:atArrangedObjectIndex:") = Void, Id, UInt;
overload externalInstanceMethod(static NSArrayController, static #"insertObjects:atArrangedObjectIndexes:") = Void, NSArray, NSIndexSet;
overload externalInstanceMethod(static NSArrayController, static #"removeObjectAtArrangedObjectIndex:") = Void, UInt;
overload externalInstanceMethod(static NSArrayController, static #"removeObjectsAtArrangedObjectIndexes:") = Void, NSIndexSet;
overload externalInstanceMethod(static NSArrayController, static #"removeObject:") = Void, Id;
overload externalInstanceMethod(static NSArrayController, static #"removeObjects:") = Void, NSArray;

overload externalInstanceMethod(static NSAttributedString, static #"fontAttributesInRange:") = NSDictionary, NSRange;
overload externalInstanceMethod(static NSAttributedString, static #"rulerAttributesInRange:") = NSDictionary, NSRange;
overload externalInstanceMethod(static NSAttributedString, static #"containsAttachments") = Bool;
overload externalInstanceMethod(static NSAttributedString, static #"lineBreakBeforeIndex:withinRange:") = UInt, UInt, NSRange;
overload externalInstanceMethod(static NSAttributedString, static #"lineBreakByHyphenatingBeforeIndex:withinRange:") = UInt, UInt, NSRange;
overload externalInstanceMethod(static NSAttributedString, static #"doubleClickAtIndex:") = NSRange, UInt;
overload externalInstanceMethod(static NSAttributedString, static #"nextWordFromIndex:forward:") = UInt, UInt, Bool;
overload externalInstanceMethod(static NSAttributedString, static #"URLAtIndex:effectiveRange:") = NSURL, UInt, NSRangePointer;
overload externalClassMethod(static NSAttributedString, static #"textTypes") = NSArray;
overload externalClassMethod(static NSAttributedString, static #"textUnfilteredTypes") = NSArray;
overload externalInstanceMethod(static NSAttributedString, static #"rangeOfTextBlock:atIndex:") = NSRange, NSTextBlock, UInt;
overload externalInstanceMethod(static NSAttributedString, static #"rangeOfTextTable:atIndex:") = NSRange, NSTextTable, UInt;
overload externalInstanceMethod(static NSAttributedString, static #"rangeOfTextList:atIndex:") = NSRange, NSTextList, UInt;
overload externalInstanceMethod(static NSAttributedString, static #"itemNumberInTextList:atIndex:") = Int, NSTextList, UInt;
overload externalInstanceMethod(static NSAttributedString, static #"initWithURL:options:documentAttributes:error:") = Id, NSURL, NSDictionary, Pointer[NSDictionary], Pointer[NSError];
overload externalInstanceMethod(static NSAttributedString, static #"initWithData:options:documentAttributes:error:") = Id, NSData, NSDictionary, Pointer[NSDictionary], Pointer[NSError];
overload externalInstanceMethod(static NSAttributedString, static #"initWithPath:documentAttributes:") = Id, NSString, Pointer[NSDictionary];
overload externalInstanceMethod(static NSAttributedString, static #"initWithURL:documentAttributes:") = Id, NSURL, Pointer[NSDictionary];
overload externalInstanceMethod(static NSAttributedString, static #"initWithRTF:documentAttributes:") = Id, NSData, Pointer[NSDictionary];
overload externalInstanceMethod(static NSAttributedString, static #"initWithRTFD:documentAttributes:") = Id, NSData, Pointer[NSDictionary];
overload externalInstanceMethod(static NSAttributedString, static #"initWithHTML:documentAttributes:") = Id, NSData, Pointer[NSDictionary];
overload externalInstanceMethod(static NSAttributedString, static #"initWithHTML:baseURL:documentAttributes:") = Id, NSData, NSURL, Pointer[NSDictionary];
overload externalInstanceMethod(static NSAttributedString, static #"initWithDocFormat:documentAttributes:") = Id, NSData, Pointer[NSDictionary];
overload externalInstanceMethod(static NSAttributedString, static #"initWithHTML:options:documentAttributes:") = Id, NSData, NSDictionary, Pointer[NSDictionary];
overload externalInstanceMethod(static NSAttributedString, static #"initWithRTFDFileWrapper:documentAttributes:") = Id, NSFileWrapper, Pointer[NSDictionary];
overload externalInstanceMethod(static NSAttributedString, static #"dataFromRange:documentAttributes:error:") = NSData, NSRange, NSDictionary, Pointer[NSError];
overload externalInstanceMethod(static NSAttributedString, static #"fileWrapperFromRange:documentAttributes:error:") = NSFileWrapper, NSRange, NSDictionary, Pointer[NSError];
overload externalInstanceMethod(static NSAttributedString, static #"RTFFromRange:documentAttributes:") = NSData, NSRange, NSDictionary;
overload externalInstanceMethod(static NSAttributedString, static #"RTFDFromRange:documentAttributes:") = NSData, NSRange, NSDictionary;
overload externalInstanceMethod(static NSAttributedString, static #"RTFDFileWrapperFromRange:documentAttributes:") = NSFileWrapper, NSRange, NSDictionary;
overload externalInstanceMethod(static NSAttributedString, static #"docFormatFromRange:documentAttributes:") = NSData, NSRange, NSDictionary;
overload externalClassMethod(static NSAttributedString, static #"textFileTypes") = NSArray;
overload externalClassMethod(static NSAttributedString, static #"textPasteboardTypes") = NSArray;
overload externalClassMethod(static NSAttributedString, static #"textUnfilteredFileTypes") = NSArray;
overload externalClassMethod(static NSAttributedString, static #"textUnfilteredPasteboardTypes") = NSArray;
overload externalClassMethod(static NSAttributedString, static #"attributedStringWithAttachment:") = NSAttributedString, NSTextAttachment;
overload externalInstanceMethod(static NSAttributedString, static #"size") = NSSize;
overload externalInstanceMethod(static NSAttributedString, static #"drawAtPoint:") = Void, NSPoint;
overload externalInstanceMethod(static NSAttributedString, static #"drawInRect:") = Void, NSRect;
overload externalInstanceMethod(static NSAttributedString, static #"drawWithRect:options:") = Void, NSRect, Int;
overload externalInstanceMethod(static NSAttributedString, static #"boundingRectWithSize:options:") = NSRect, NSSize, Int;

record NSBezierPath = externalClass(NSObject);
overload externalInstanceMethod(static NSBezierPath, static #"copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(static NSBezierPath, static #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static NSBezierPath, static #"initWithCoder:") = Id, NSCoder;
overload externalClassMethod(static NSBezierPath, static #"bezierPath") = NSBezierPath;
overload externalClassMethod(static NSBezierPath, static #"bezierPathWithRect:") = NSBezierPath, NSRect;
overload externalClassMethod(static NSBezierPath, static #"bezierPathWithOvalInRect:") = NSBezierPath, NSRect;
overload externalClassMethod(static NSBezierPath, static #"bezierPathWithRoundedRect:xRadius:yRadius:") = NSBezierPath, NSRect, Float, Float;
overload externalClassMethod(static NSBezierPath, static #"fillRect:") = Void, NSRect;
overload externalClassMethod(static NSBezierPath, static #"strokeRect:") = Void, NSRect;
overload externalClassMethod(static NSBezierPath, static #"clipRect:") = Void, NSRect;
overload externalClassMethod(static NSBezierPath, static #"strokeLineFromPoint:toPoint:") = Void, NSPoint, NSPoint;
overload externalClassMethod(static NSBezierPath, static #"drawPackedGlyphs:atPoint:") = Void, Pointer[CChar], NSPoint;
overload externalClassMethod(static NSBezierPath, static #"setDefaultMiterLimit:") = Void, Float;
overload externalClassMethod(static NSBezierPath, static #"defaultMiterLimit") = Float;
overload externalClassMethod(static NSBezierPath, static #"setDefaultFlatness:") = Void, Float;
overload externalClassMethod(static NSBezierPath, static #"defaultFlatness") = Float;
overload externalClassMethod(static NSBezierPath, static #"setDefaultWindingRule:") = Void, UInt;
overload externalClassMethod(static NSBezierPath, static #"defaultWindingRule") = UInt;
overload externalClassMethod(static NSBezierPath, static #"setDefaultLineCapStyle:") = Void, UInt;
overload externalClassMethod(static NSBezierPath, static #"defaultLineCapStyle") = UInt;
overload externalClassMethod(static NSBezierPath, static #"setDefaultLineJoinStyle:") = Void, UInt;
overload externalClassMethod(static NSBezierPath, static #"defaultLineJoinStyle") = UInt;
overload externalClassMethod(static NSBezierPath, static #"setDefaultLineWidth:") = Void, Float;
overload externalClassMethod(static NSBezierPath, static #"defaultLineWidth") = Float;
overload externalInstanceMethod(static NSBezierPath, static #"moveToPoint:") = Void, NSPoint;
overload externalInstanceMethod(static NSBezierPath, static #"lineToPoint:") = Void, NSPoint;
overload externalInstanceMethod(static NSBezierPath, static #"curveToPoint:controlPoint1:controlPoint2:") = Void, NSPoint, NSPoint, NSPoint;
overload externalInstanceMethod(static NSBezierPath, static #"closePath") = Void;
overload externalInstanceMethod(static NSBezierPath, static #"removeAllPoints") = Void;
overload externalInstanceMethod(static NSBezierPath, static #"relativeMoveToPoint:") = Void, NSPoint;
overload externalInstanceMethod(static NSBezierPath, static #"relativeLineToPoint:") = Void, NSPoint;
overload externalInstanceMethod(static NSBezierPath, static #"relativeCurveToPoint:controlPoint1:controlPoint2:") = Void, NSPoint, NSPoint, NSPoint;
overload externalInstanceMethod(static NSBezierPath, static #"lineWidth") = Float;
overload externalInstanceMethod(static NSBezierPath, static #"setLineWidth:") = Void, Float;
overload externalInstanceMethod(static NSBezierPath, static #"lineCapStyle") = UInt;
overload externalInstanceMethod(static NSBezierPath, static #"setLineCapStyle:") = Void, UInt;
overload externalInstanceMethod(static NSBezierPath, static #"lineJoinStyle") = UInt;
overload externalInstanceMethod(static NSBezierPath, static #"setLineJoinStyle:") = Void, UInt;
overload externalInstanceMethod(static NSBezierPath, static #"windingRule") = UInt;
overload externalInstanceMethod(static NSBezierPath, static #"setWindingRule:") = Void, UInt;
overload externalInstanceMethod(static NSBezierPath, static #"miterLimit") = Float;
overload externalInstanceMethod(static NSBezierPath, static #"setMiterLimit:") = Void, Float;
overload externalInstanceMethod(static NSBezierPath, static #"flatness") = Float;
overload externalInstanceMethod(static NSBezierPath, static #"setFlatness:") = Void, Float;
overload externalInstanceMethod(static NSBezierPath, static #"getLineDash:count:phase:") = Void, Pointer[Float], Pointer[Int], Pointer[Float];
overload externalInstanceMethod(static NSBezierPath, static #"setLineDash:count:phase:") = Void, Pointer[Float], Int, Float;
overload externalInstanceMethod(static NSBezierPath, static #"stroke") = Void;
overload externalInstanceMethod(static NSBezierPath, static #"fill") = Void;
overload externalInstanceMethod(static NSBezierPath, static #"addClip") = Void;
overload externalInstanceMethod(static NSBezierPath, static #"setClip") = Void;
overload externalInstanceMethod(static NSBezierPath, static #"bezierPathByFlatteningPath") = NSBezierPath;
overload externalInstanceMethod(static NSBezierPath, static #"bezierPathByReversingPath") = NSBezierPath;
overload externalInstanceMethod(static NSBezierPath, static #"transformUsingAffineTransform:") = Void, NSAffineTransform;
overload externalInstanceMethod(static NSBezierPath, static #"isEmpty") = Bool;
overload externalInstanceMethod(static NSBezierPath, static #"currentPoint") = NSPoint;
overload externalInstanceMethod(static NSBezierPath, static #"controlPointBounds") = NSRect;
overload externalInstanceMethod(static NSBezierPath, static #"bounds") = NSRect;
overload externalInstanceMethod(static NSBezierPath, static #"elementCount") = Int;
overload externalInstanceMethod(static NSBezierPath, static #"elementAtIndex:associatedPoints:") = UInt, Int, NSPointArray;
overload externalInstanceMethod(static NSBezierPath, static #"elementAtIndex:") = UInt, Int;
overload externalInstanceMethod(static NSBezierPath, static #"setAssociatedPoints:atIndex:") = Void, NSPointArray, Int;
overload externalInstanceMethod(static NSBezierPath, static #"appendBezierPath:") = Void, NSBezierPath;
overload externalInstanceMethod(static NSBezierPath, static #"appendBezierPathWithRect:") = Void, NSRect;
overload externalInstanceMethod(static NSBezierPath, static #"appendBezierPathWithPoints:count:") = Void, NSPointArray, Int;
overload externalInstanceMethod(static NSBezierPath, static #"appendBezierPathWithOvalInRect:") = Void, NSRect;
overload externalInstanceMethod(static NSBezierPath, static #"appendBezierPathWithArcWithCenter:radius:startAngle:endAngle:clockwise:") = Void, NSPoint, Float, Float, Float, Bool;
overload externalInstanceMethod(static NSBezierPath, static #"appendBezierPathWithArcWithCenter:radius:startAngle:endAngle:") = Void, NSPoint, Float, Float, Float;
overload externalInstanceMethod(static NSBezierPath, static #"appendBezierPathWithArcFromPoint:toPoint:radius:") = Void, NSPoint, NSPoint, Float;
overload externalInstanceMethod(static NSBezierPath, static #"appendBezierPathWithGlyph:inFont:") = Void, UInt, NSFont;
overload externalInstanceMethod(static NSBezierPath, static #"appendBezierPathWithGlyphs:count:inFont:") = Void, Pointer[UInt], Int, NSFont;
overload externalInstanceMethod(static NSBezierPath, static #"appendBezierPathWithPackedGlyphs:") = Void, Pointer[CChar];
overload externalInstanceMethod(static NSBezierPath, static #"appendBezierPathWithRoundedRect:xRadius:yRadius:") = Void, NSRect, Float, Float;
overload externalInstanceMethod(static NSBezierPath, static #"containsPoint:") = Bool, NSPoint;
overload externalInstanceMethod(static NSBezierPath, static #"cachesBezierPath") = Bool;
overload externalInstanceMethod(static NSBezierPath, static #"setCachesBezierPath:") = Void, Bool;

record NSBitmapImageRep = externalClass(NSImageRep);
overload externalInstanceMethod(static NSBitmapImageRep, static #"initWithFocusedViewRect:") = Id, NSRect;
overload externalInstanceMethod(static NSBitmapImageRep, static #"initWithBitmapDataPlanes:pixelsWide:pixelsHigh:bitsPerSample:samplesPerPixel:hasAlpha:isPlanar:colorSpaceName:bytesPerRow:bitsPerPixel:") = Id, Pointer[Pointer[CUChar]], Int, Int, Int, Int, Bool, Bool, NSString, Int, Int;
overload externalInstanceMethod(static NSBitmapImageRep, static #"initWithBitmapDataPlanes:pixelsWide:pixelsHigh:bitsPerSample:samplesPerPixel:hasAlpha:isPlanar:colorSpaceName:bitmapFormat:bytesPerRow:bitsPerPixel:") = Id, Pointer[Pointer[CUChar]], Int, Int, Int, Int, Bool, Bool, NSString, UInt, Int, Int;
overload externalInstanceMethod(static NSBitmapImageRep, static #"initWithCGImage:") = Id, CGImageRef;
overload externalInstanceMethod(static NSBitmapImageRep, static #"initWithCIImage:") = Id, CIImage;
overload externalClassMethod(static NSBitmapImageRep, static #"imageRepsWithData:") = NSArray, NSData;
overload externalClassMethod(static NSBitmapImageRep, static #"imageRepWithData:") = Id, NSData;
overload externalInstanceMethod(static NSBitmapImageRep, static #"initWithData:") = Id, NSData;
overload externalInstanceMethod(static NSBitmapImageRep, static #"bitmapData") = Pointer[CUChar];
overload externalInstanceMethod(static NSBitmapImageRep, static #"getBitmapDataPlanes:") = Void, Pointer[Pointer[CUChar]];
overload externalInstanceMethod(static NSBitmapImageRep, static #"isPlanar") = Bool;
overload externalInstanceMethod(static NSBitmapImageRep, static #"samplesPerPixel") = Int;
overload externalInstanceMethod(static NSBitmapImageRep, static #"bitsPerPixel") = Int;
overload externalInstanceMethod(static NSBitmapImageRep, static #"bytesPerRow") = Int;
overload externalInstanceMethod(static NSBitmapImageRep, static #"bytesPerPlane") = Int;
overload externalInstanceMethod(static NSBitmapImageRep, static #"numberOfPlanes") = Int;
overload externalInstanceMethod(static NSBitmapImageRep, static #"bitmapFormat") = UInt;
overload externalInstanceMethod(static NSBitmapImageRep, static #"getCompression:factor:") = Void, Pointer[UInt], Pointer[Float];
overload externalInstanceMethod(static NSBitmapImageRep, static #"setCompression:factor:") = Void, UInt, Float;
overload externalInstanceMethod(static NSBitmapImageRep, static #"TIFFRepresentation") = NSData;
overload externalInstanceMethod(static NSBitmapImageRep, static #"TIFFRepresentationUsingCompression:factor:") = NSData, UInt, Float;
overload externalClassMethod(static NSBitmapImageRep, static #"TIFFRepresentationOfImageRepsInArray:") = NSData, NSArray;
overload externalClassMethod(static NSBitmapImageRep, static #"TIFFRepresentationOfImageRepsInArray:usingCompression:factor:") = NSData, NSArray, UInt, Float;
overload externalClassMethod(static NSBitmapImageRep, static #"getTIFFCompressionTypes:count:") = Void, Pointer[Pointer[UInt]], Pointer[Int];
overload externalClassMethod(static NSBitmapImageRep, static #"localizedNameForTIFFCompressionType:") = NSString, UInt;
overload externalInstanceMethod(static NSBitmapImageRep, static #"canBeCompressedUsing:") = Bool, UInt;
overload externalInstanceMethod(static NSBitmapImageRep, static #"colorizeByMappingGray:toColor:blackMapping:whiteMapping:") = Void, Float, NSColor, NSColor, NSColor;
overload externalInstanceMethod(static NSBitmapImageRep, static #"initForIncrementalLoad") = Id;
overload externalInstanceMethod(static NSBitmapImageRep, static #"incrementalLoadFromData:complete:") = Int, NSData, Bool;
overload externalInstanceMethod(static NSBitmapImageRep, static #"setColor:atX:y:") = Void, NSColor, Int, Int;
overload externalInstanceMethod(static NSBitmapImageRep, static #"colorAtX:y:") = NSColor, Int, Int;
overload externalInstanceMethod(static NSBitmapImageRep, static #"getPixel:atX:y:") = Void, Pointer[UInt], Int, Int;
overload externalInstanceMethod(static NSBitmapImageRep, static #"setPixel:atX:y:") = Void, Pointer[UInt], Int, Int;
overload externalInstanceMethod(static NSBitmapImageRep, static #"CGImage") = CGImageRef;
overload externalInstanceMethod(static NSBitmapImageRep, static #"colorSpace") = NSColorSpace;
overload externalInstanceMethod(static NSBitmapImageRep, static #"bitmapImageRepByConvertingToColorSpace:renderingIntent:") = NSBitmapImageRep, NSColorSpace, Int;
overload externalInstanceMethod(static NSBitmapImageRep, static #"bitmapImageRepByRetaggingWithColorSpace:") = NSBitmapImageRep, NSColorSpace;
overload externalClassMethod(static NSBitmapImageRep, static #"representationOfImageRepsInArray:usingType:properties:") = NSData, NSArray, UInt, NSDictionary;
overload externalInstanceMethod(static NSBitmapImageRep, static #"representationUsingType:properties:") = NSData, UInt, NSDictionary;
overload externalInstanceMethod(static NSBitmapImageRep, static #"setProperty:withValue:") = Void, NSString, Id;
overload externalInstanceMethod(static NSBitmapImageRep, static #"valueForProperty:") = Id, NSString;

record NSBox = externalClass(NSView);
overload externalInstanceMethod(static NSBox, static #"borderType") = UInt;
overload externalInstanceMethod(static NSBox, static #"titlePosition") = UInt;
overload externalInstanceMethod(static NSBox, static #"setBorderType:") = Void, UInt;
overload externalInstanceMethod(static NSBox, static #"setBoxType:") = Void, UInt;
overload externalInstanceMethod(static NSBox, static #"boxType") = UInt;
overload externalInstanceMethod(static NSBox, static #"setTitlePosition:") = Void, UInt;
overload externalInstanceMethod(static NSBox, static #"title") = NSString;
overload externalInstanceMethod(static NSBox, static #"setTitle:") = Void, NSString;
overload externalInstanceMethod(static NSBox, static #"titleFont") = NSFont;
overload externalInstanceMethod(static NSBox, static #"setTitleFont:") = Void, NSFont;
overload externalInstanceMethod(static NSBox, static #"borderRect") = NSRect;
overload externalInstanceMethod(static NSBox, static #"titleRect") = NSRect;
overload externalInstanceMethod(static NSBox, static #"titleCell") = Id;
overload externalInstanceMethod(static NSBox, static #"sizeToFit") = Void;
overload externalInstanceMethod(static NSBox, static #"contentViewMargins") = NSSize;
overload externalInstanceMethod(static NSBox, static #"setContentViewMargins:") = Void, NSSize;
overload externalInstanceMethod(static NSBox, static #"setFrameFromContentFrame:") = Void, NSRect;
overload externalInstanceMethod(static NSBox, static #"contentView") = Id;
overload externalInstanceMethod(static NSBox, static #"setContentView:") = Void, NSView;
overload externalInstanceMethod(static NSBox, static #"isTransparent") = Bool;
overload externalInstanceMethod(static NSBox, static #"setTransparent:") = Void, Bool;
overload externalInstanceMethod(static NSBox, static #"setTitleWithMnemonic:") = Void, NSString;
overload externalInstanceMethod(static NSBox, static #"borderWidth") = Float;
overload externalInstanceMethod(static NSBox, static #"setBorderWidth:") = Void, Float;
overload externalInstanceMethod(static NSBox, static #"cornerRadius") = Float;
overload externalInstanceMethod(static NSBox, static #"setCornerRadius:") = Void, Float;
overload externalInstanceMethod(static NSBox, static #"borderColor") = NSColor;
overload externalInstanceMethod(static NSBox, static #"setBorderColor:") = Void, NSColor;
overload externalInstanceMethod(static NSBox, static #"fillColor") = NSColor;
overload externalInstanceMethod(static NSBox, static #"setFillColor:") = Void, NSColor;

record NSBrowser = externalClass(NSControl);
overload externalClassMethod(static NSBrowser, static #"cellClass") = Id;
overload externalInstanceMethod(static NSBrowser, static #"loadColumnZero") = Void;
overload externalInstanceMethod(static NSBrowser, static #"isLoaded") = Bool;
overload externalInstanceMethod(static NSBrowser, static #"setDoubleAction:") = Void, SelectorHandle;
overload externalInstanceMethod(static NSBrowser, static #"doubleAction") = SelectorHandle;
overload externalInstanceMethod(static NSBrowser, static #"setMatrixClass:") = Void, Id;
overload externalInstanceMethod(static NSBrowser, static #"matrixClass") = Id;
overload externalInstanceMethod(static NSBrowser, static #"setCellClass:") = Void, Id;
overload externalInstanceMethod(static NSBrowser, static #"setCellPrototype:") = Void, NSCell;
overload externalInstanceMethod(static NSBrowser, static #"cellPrototype") = Id;
overload externalInstanceMethod(static NSBrowser, static #"setDelegate:") = Void, Id;
overload externalInstanceMethod(static NSBrowser, static #"delegate") = Id;
overload externalInstanceMethod(static NSBrowser, static #"setReusesColumns:") = Void, Bool;
overload externalInstanceMethod(static NSBrowser, static #"reusesColumns") = Bool;
overload externalInstanceMethod(static NSBrowser, static #"setHasHorizontalScroller:") = Void, Bool;
overload externalInstanceMethod(static NSBrowser, static #"hasHorizontalScroller") = Bool;
overload externalInstanceMethod(static NSBrowser, static #"setAutohidesScroller:") = Void, Bool;
overload externalInstanceMethod(static NSBrowser, static #"autohidesScroller") = Bool;
overload externalInstanceMethod(static NSBrowser, static #"setSeparatesColumns:") = Void, Bool;
overload externalInstanceMethod(static NSBrowser, static #"separatesColumns") = Bool;
overload externalInstanceMethod(static NSBrowser, static #"setTitled:") = Void, Bool;
overload externalInstanceMethod(static NSBrowser, static #"isTitled") = Bool;
overload externalInstanceMethod(static NSBrowser, static #"setMinColumnWidth:") = Void, Float;
overload externalInstanceMethod(static NSBrowser, static #"minColumnWidth") = Float;
overload externalInstanceMethod(static NSBrowser, static #"setMaxVisibleColumns:") = Void, Int;
overload externalInstanceMethod(static NSBrowser, static #"maxVisibleColumns") = Int;
overload externalInstanceMethod(static NSBrowser, static #"setAllowsMultipleSelection:") = Void, Bool;
overload externalInstanceMethod(static NSBrowser, static #"allowsMultipleSelection") = Bool;
overload externalInstanceMethod(static NSBrowser, static #"setAllowsBranchSelection:") = Void, Bool;
overload externalInstanceMethod(static NSBrowser, static #"allowsBranchSelection") = Bool;
overload externalInstanceMethod(static NSBrowser, static #"setAllowsEmptySelection:") = Void, Bool;
overload externalInstanceMethod(static NSBrowser, static #"allowsEmptySelection") = Bool;
overload externalInstanceMethod(static NSBrowser, static #"setTakesTitleFromPreviousColumn:") = Void, Bool;
overload externalInstanceMethod(static NSBrowser, static #"takesTitleFromPreviousColumn") = Bool;
overload externalInstanceMethod(static NSBrowser, static #"setSendsActionOnArrowKeys:") = Void, Bool;
overload externalInstanceMethod(static NSBrowser, static #"sendsActionOnArrowKeys") = Bool;
overload externalInstanceMethod(static NSBrowser, static #"itemAtIndexPath:") = Id, NSIndexPath;
overload externalInstanceMethod(static NSBrowser, static #"itemAtRow:inColumn:") = Id, Int, Int;
overload externalInstanceMethod(static NSBrowser, static #"indexPathForColumn:") = NSIndexPath, Int;
overload externalInstanceMethod(static NSBrowser, static #"isLeafItem:") = Bool, Id;
overload externalInstanceMethod(static NSBrowser, static #"reloadDataForRowIndexes:inColumn:") = Void, NSIndexSet, Int;
overload externalInstanceMethod(static NSBrowser, static #"parentForItemsInColumn:") = Id, Int;
overload externalInstanceMethod(static NSBrowser, static #"scrollRowToVisible:inColumn:") = Void, Int, Int;
overload externalInstanceMethod(static NSBrowser, static #"setTitle:ofColumn:") = Void, NSString, Int;
overload externalInstanceMethod(static NSBrowser, static #"titleOfColumn:") = NSString, Int;
overload externalInstanceMethod(static NSBrowser, static #"setPathSeparator:") = Void, NSString;
overload externalInstanceMethod(static NSBrowser, static #"pathSeparator") = NSString;
overload externalInstanceMethod(static NSBrowser, static #"setPath:") = Bool, NSString;
overload externalInstanceMethod(static NSBrowser, static #"path") = NSString;
overload externalInstanceMethod(static NSBrowser, static #"pathToColumn:") = NSString, Int;
overload externalInstanceMethod(static NSBrowser, static #"clickedColumn") = Int;
overload externalInstanceMethod(static NSBrowser, static #"clickedRow") = Int;
overload externalInstanceMethod(static NSBrowser, static #"selectedColumn") = Int;
overload externalInstanceMethod(static NSBrowser, static #"selectedCell") = Id;
overload externalInstanceMethod(static NSBrowser, static #"selectedCellInColumn:") = Id, Int;
overload externalInstanceMethod(static NSBrowser, static #"selectedCells") = NSArray;
overload externalInstanceMethod(static NSBrowser, static #"selectRow:inColumn:") = Void, Int, Int;
overload externalInstanceMethod(static NSBrowser, static #"selectedRowInColumn:") = Int, Int;
overload externalInstanceMethod(static NSBrowser, static #"selectionIndexPath") = NSIndexPath;
overload externalInstanceMethod(static NSBrowser, static #"setSelectionIndexPath:") = Void, NSIndexPath;
overload externalInstanceMethod(static NSBrowser, static #"selectionIndexPaths") = NSArray;
overload externalInstanceMethod(static NSBrowser, static #"setSelectionIndexPaths:") = Void, NSArray;
overload externalInstanceMethod(static NSBrowser, static #"selectRowIndexes:inColumn:") = Void, NSIndexSet, Int;
overload externalInstanceMethod(static NSBrowser, static #"selectedRowIndexesInColumn:") = NSIndexSet, Int;
overload externalInstanceMethod(static NSBrowser, static #"reloadColumn:") = Void, Int;
overload externalInstanceMethod(static NSBrowser, static #"validateVisibleColumns") = Void;
overload externalInstanceMethod(static NSBrowser, static #"scrollColumnsRightBy:") = Void, Int;
overload externalInstanceMethod(static NSBrowser, static #"scrollColumnsLeftBy:") = Void, Int;
overload externalInstanceMethod(static NSBrowser, static #"scrollColumnToVisible:") = Void, Int;
overload externalInstanceMethod(static NSBrowser, static #"lastColumn") = Int;
overload externalInstanceMethod(static NSBrowser, static #"setLastColumn:") = Void, Int;
overload externalInstanceMethod(static NSBrowser, static #"addColumn") = Void;
overload externalInstanceMethod(static NSBrowser, static #"numberOfVisibleColumns") = Int;
overload externalInstanceMethod(static NSBrowser, static #"firstVisibleColumn") = Int;
overload externalInstanceMethod(static NSBrowser, static #"lastVisibleColumn") = Int;
overload externalInstanceMethod(static NSBrowser, static #"columnOfMatrix:") = Int, NSMatrix;
overload externalInstanceMethod(static NSBrowser, static #"matrixInColumn:") = NSMatrix, Int;
overload externalInstanceMethod(static NSBrowser, static #"loadedCellAtRow:column:") = Id, Int, Int;
overload externalInstanceMethod(static NSBrowser, static #"selectAll:") = Void, Id;
overload externalInstanceMethod(static NSBrowser, static #"tile") = Void;
overload externalInstanceMethod(static NSBrowser, static #"doClick:") = Void, Id;
overload externalInstanceMethod(static NSBrowser, static #"doDoubleClick:") = Void, Id;
overload externalInstanceMethod(static NSBrowser, static #"sendAction") = Bool;
overload externalInstanceMethod(static NSBrowser, static #"titleFrameOfColumn:") = NSRect, Int;
overload externalInstanceMethod(static NSBrowser, static #"drawTitleOfColumn:inRect:") = Void, Int, NSRect;
overload externalInstanceMethod(static NSBrowser, static #"titleHeight") = Float;
overload externalInstanceMethod(static NSBrowser, static #"frameOfColumn:") = NSRect, Int;
overload externalInstanceMethod(static NSBrowser, static #"frameOfInsideOfColumn:") = NSRect, Int;
overload externalInstanceMethod(static NSBrowser, static #"frameOfRow:inColumn:") = NSRect, Int, Int;
overload externalInstanceMethod(static NSBrowser, static #"getRow:column:forPoint:") = Bool, Pointer[Int], Pointer[Int], NSPoint;
overload externalInstanceMethod(static NSBrowser, static #"columnWidthForColumnContentWidth:") = Float, Float;
overload externalInstanceMethod(static NSBrowser, static #"columnContentWidthForColumnWidth:") = Float, Float;
overload externalInstanceMethod(static NSBrowser, static #"setColumnResizingType:") = Void, UInt;
overload externalInstanceMethod(static NSBrowser, static #"columnResizingType") = UInt;
overload externalInstanceMethod(static NSBrowser, static #"setPrefersAllColumnUserResizing:") = Void, Bool;
overload externalInstanceMethod(static NSBrowser, static #"prefersAllColumnUserResizing") = Bool;
overload externalInstanceMethod(static NSBrowser, static #"setWidth:ofColumn:") = Void, Float, Int;
overload externalInstanceMethod(static NSBrowser, static #"widthOfColumn:") = Float, Int;
overload externalInstanceMethod(static NSBrowser, static #"setRowHeight:") = Void, Float;
overload externalInstanceMethod(static NSBrowser, static #"rowHeight") = Float;
overload externalInstanceMethod(static NSBrowser, static #"noteHeightOfRowsWithIndexesChanged:inColumn:") = Void, NSIndexSet, Int;
overload externalInstanceMethod(static NSBrowser, static #"setDefaultColumnWidth:") = Void, Float;
overload externalInstanceMethod(static NSBrowser, static #"defaultColumnWidth") = Float;
overload externalInstanceMethod(static NSBrowser, static #"setColumnsAutosaveName:") = Void, NSString;
overload externalInstanceMethod(static NSBrowser, static #"columnsAutosaveName") = NSString;
overload externalClassMethod(static NSBrowser, static #"removeSavedColumnsWithAutosaveName:") = Void, NSString;
overload externalInstanceMethod(static NSBrowser, static #"canDragRowsWithIndexes:inColumn:withEvent:") = Bool, NSIndexSet, Int, NSEvent;
overload externalInstanceMethod(static NSBrowser, static #"draggingImageForRowsWithIndexes:inColumn:withEvent:offset:") = NSImage, NSIndexSet, Int, NSEvent, NSPointPointer;
overload externalInstanceMethod(static NSBrowser, static #"setDraggingSourceOperationMask:forLocal:") = Void, UInt, Bool;
overload externalInstanceMethod(static NSBrowser, static #"allowsTypeSelect") = Bool;
overload externalInstanceMethod(static NSBrowser, static #"setAllowsTypeSelect:") = Void, Bool;
overload externalInstanceMethod(static NSBrowser, static #"setBackgroundColor:") = Void, NSColor;
overload externalInstanceMethod(static NSBrowser, static #"backgroundColor") = NSColor;
overload externalInstanceMethod(static NSBrowser, static #"editItemAtIndexPath:withEvent:select:") = Void, NSIndexPath, NSEvent, Bool;
overload externalInstanceMethod(static NSBrowser, static #"setAcceptsArrowKeys:") = Void, Bool;
overload externalInstanceMethod(static NSBrowser, static #"acceptsArrowKeys") = Bool;
overload externalInstanceMethod(static NSBrowser, static #"displayColumn:") = Void, Int;
overload externalInstanceMethod(static NSBrowser, static #"displayAllColumns") = Void;
overload externalInstanceMethod(static NSBrowser, static #"scrollViaScroller:") = Void, NSScroller;
overload externalInstanceMethod(static NSBrowser, static #"updateScroller") = Void;

record NSBrowserCell = externalClass(NSCell);
overload externalClassMethod(static NSBrowserCell, static #"branchImage") = NSImage;
overload externalClassMethod(static NSBrowserCell, static #"highlightedBranchImage") = NSImage;
overload externalInstanceMethod(static NSBrowserCell, static #"highlightColorInView:") = NSColor, NSView;
overload externalInstanceMethod(static NSBrowserCell, static #"isLeaf") = Bool;
overload externalInstanceMethod(static NSBrowserCell, static #"setLeaf:") = Void, Bool;
overload externalInstanceMethod(static NSBrowserCell, static #"isLoaded") = Bool;
overload externalInstanceMethod(static NSBrowserCell, static #"setLoaded:") = Void, Bool;
overload externalInstanceMethod(static NSBrowserCell, static #"reset") = Void;
overload externalInstanceMethod(static NSBrowserCell, static #"set") = Void;
overload externalInstanceMethod(static NSBrowserCell, static #"setImage:") = Void, NSImage;
overload externalInstanceMethod(static NSBrowserCell, static #"image") = NSImage;
overload externalInstanceMethod(static NSBrowserCell, static #"setAlternateImage:") = Void, NSImage;
overload externalInstanceMethod(static NSBrowserCell, static #"alternateImage") = NSImage;

overload externalInstanceMethod(static NSBundle, static #"contextHelpForKey:") = NSAttributedString, NSString;
overload externalInstanceMethod(static NSBundle, static #"pathForImageResource:") = NSString, NSString;
overload externalInstanceMethod(static NSBundle, static #"URLForImageResource:") = NSURL, NSString;
overload externalClassMethod(static NSBundle, static #"loadNibFile:externalNameTable:withZone:") = Bool, NSString, NSDictionary, Pointer[NSZone];
overload externalClassMethod(static NSBundle, static #"loadNibNamed:owner:") = Bool, NSString, Id;
overload externalInstanceMethod(static NSBundle, static #"loadNibFile:externalNameTable:withZone:") = Bool, NSString, NSDictionary, Pointer[NSZone];
overload externalInstanceMethod(static NSBundle, static #"pathForSoundResource:") = NSString, NSString;

record NSButton = externalClass(NSControl);
overload externalInstanceMethod(static NSButton, static #"validateUserInterfaceItem:") = Bool, Id;
overload externalInstanceMethod(static NSButton, static #"title") = NSString;
overload externalInstanceMethod(static NSButton, static #"setTitle:") = Void, NSString;
overload externalInstanceMethod(static NSButton, static #"alternateTitle") = NSString;
overload externalInstanceMethod(static NSButton, static #"setAlternateTitle:") = Void, NSString;
overload externalInstanceMethod(static NSButton, static #"image") = NSImage;
overload externalInstanceMethod(static NSButton, static #"setImage:") = Void, NSImage;
overload externalInstanceMethod(static NSButton, static #"alternateImage") = NSImage;
overload externalInstanceMethod(static NSButton, static #"setAlternateImage:") = Void, NSImage;
overload externalInstanceMethod(static NSButton, static #"imagePosition") = UInt;
overload externalInstanceMethod(static NSButton, static #"setImagePosition:") = Void, UInt;
overload externalInstanceMethod(static NSButton, static #"setButtonType:") = Void, UInt;
overload externalInstanceMethod(static NSButton, static #"state") = Int;
overload externalInstanceMethod(static NSButton, static #"setState:") = Void, Int;
overload externalInstanceMethod(static NSButton, static #"isBordered") = Bool;
overload externalInstanceMethod(static NSButton, static #"setBordered:") = Void, Bool;
overload externalInstanceMethod(static NSButton, static #"isTransparent") = Bool;
overload externalInstanceMethod(static NSButton, static #"setTransparent:") = Void, Bool;
overload externalInstanceMethod(static NSButton, static #"setPeriodicDelay:interval:") = Void, Float, Float;
overload externalInstanceMethod(static NSButton, static #"getPeriodicDelay:interval:") = Void, Pointer[Float], Pointer[Float];
overload externalInstanceMethod(static NSButton, static #"keyEquivalent") = NSString;
overload externalInstanceMethod(static NSButton, static #"setKeyEquivalent:") = Void, NSString;
overload externalInstanceMethod(static NSButton, static #"keyEquivalentModifierMask") = UInt;
overload externalInstanceMethod(static NSButton, static #"setKeyEquivalentModifierMask:") = Void, UInt;
overload externalInstanceMethod(static NSButton, static #"highlight:") = Void, Bool;
overload externalInstanceMethod(static NSButton, static #"performKeyEquivalent:") = Bool, NSEvent;
overload externalInstanceMethod(static NSButton, static #"setTitleWithMnemonic:") = Void, NSString;
overload externalInstanceMethod(static NSButton, static #"attributedTitle") = NSAttributedString;
overload externalInstanceMethod(static NSButton, static #"setAttributedTitle:") = Void, NSAttributedString;
overload externalInstanceMethod(static NSButton, static #"attributedAlternateTitle") = NSAttributedString;
overload externalInstanceMethod(static NSButton, static #"setAttributedAlternateTitle:") = Void, NSAttributedString;
overload externalInstanceMethod(static NSButton, static #"setBezelStyle:") = Void, UInt;
overload externalInstanceMethod(static NSButton, static #"bezelStyle") = UInt;
overload externalInstanceMethod(static NSButton, static #"setAllowsMixedState:") = Void, Bool;
overload externalInstanceMethod(static NSButton, static #"allowsMixedState") = Bool;
overload externalInstanceMethod(static NSButton, static #"setNextState") = Void;
overload externalInstanceMethod(static NSButton, static #"setShowsBorderOnlyWhileMouseInside:") = Void, Bool;
overload externalInstanceMethod(static NSButton, static #"showsBorderOnlyWhileMouseInside") = Bool;
overload externalInstanceMethod(static NSButton, static #"setSound:") = Void, NSSound;
overload externalInstanceMethod(static NSButton, static #"sound") = NSSound;

record NSButtonCell = externalClass(NSActionCell);
overload externalInstanceMethod(static NSButtonCell, static #"title") = NSString;
overload externalInstanceMethod(static NSButtonCell, static #"setTitle:") = Void, NSString;
overload externalInstanceMethod(static NSButtonCell, static #"alternateTitle") = NSString;
overload externalInstanceMethod(static NSButtonCell, static #"setAlternateTitle:") = Void, NSString;
overload externalInstanceMethod(static NSButtonCell, static #"alternateImage") = NSImage;
overload externalInstanceMethod(static NSButtonCell, static #"setAlternateImage:") = Void, NSImage;
overload externalInstanceMethod(static NSButtonCell, static #"imagePosition") = UInt;
overload externalInstanceMethod(static NSButtonCell, static #"setImagePosition:") = Void, UInt;
overload externalInstanceMethod(static NSButtonCell, static #"imageScaling") = UInt;
overload externalInstanceMethod(static NSButtonCell, static #"setImageScaling:") = Void, UInt;
overload externalInstanceMethod(static NSButtonCell, static #"highlightsBy") = Int;
overload externalInstanceMethod(static NSButtonCell, static #"setHighlightsBy:") = Void, Int;
overload externalInstanceMethod(static NSButtonCell, static #"showsStateBy") = Int;
overload externalInstanceMethod(static NSButtonCell, static #"setShowsStateBy:") = Void, Int;
overload externalInstanceMethod(static NSButtonCell, static #"setButtonType:") = Void, UInt;
overload externalInstanceMethod(static NSButtonCell, static #"isOpaque") = Bool;
overload externalInstanceMethod(static NSButtonCell, static #"setFont:") = Void, NSFont;
overload externalInstanceMethod(static NSButtonCell, static #"isTransparent") = Bool;
overload externalInstanceMethod(static NSButtonCell, static #"setTransparent:") = Void, Bool;
overload externalInstanceMethod(static NSButtonCell, static #"setPeriodicDelay:interval:") = Void, Float, Float;
overload externalInstanceMethod(static NSButtonCell, static #"getPeriodicDelay:interval:") = Void, Pointer[Float], Pointer[Float];
overload externalInstanceMethod(static NSButtonCell, static #"keyEquivalent") = NSString;
overload externalInstanceMethod(static NSButtonCell, static #"setKeyEquivalent:") = Void, NSString;
overload externalInstanceMethod(static NSButtonCell, static #"keyEquivalentModifierMask") = UInt;
overload externalInstanceMethod(static NSButtonCell, static #"setKeyEquivalentModifierMask:") = Void, UInt;
overload externalInstanceMethod(static NSButtonCell, static #"keyEquivalentFont") = NSFont;
overload externalInstanceMethod(static NSButtonCell, static #"setKeyEquivalentFont:") = Void, NSFont;
overload externalInstanceMethod(static NSButtonCell, static #"setKeyEquivalentFont:size:") = Void, NSString, Float;
overload externalInstanceMethod(static NSButtonCell, static #"performClick:") = Void, Id;
overload externalInstanceMethod(static NSButtonCell, static #"drawImage:withFrame:inView:") = Void, NSImage, NSRect, NSView;
overload externalInstanceMethod(static NSButtonCell, static #"drawTitle:withFrame:inView:") = NSRect, NSAttributedString, NSRect, NSView;
overload externalInstanceMethod(static NSButtonCell, static #"drawBezelWithFrame:inView:") = Void, NSRect, NSView;
overload externalInstanceMethod(static NSButtonCell, static #"setTitleWithMnemonic:") = Void, NSString;
overload externalInstanceMethod(static NSButtonCell, static #"setAlternateTitleWithMnemonic:") = Void, NSString;
overload externalInstanceMethod(static NSButtonCell, static #"setAlternateMnemonicLocation:") = Void, UInt;
overload externalInstanceMethod(static NSButtonCell, static #"alternateMnemonicLocation") = UInt;
overload externalInstanceMethod(static NSButtonCell, static #"alternateMnemonic") = NSString;
overload externalInstanceMethod(static NSButtonCell, static #"gradientType") = UInt;
overload externalInstanceMethod(static NSButtonCell, static #"setGradientType:") = Void, UInt;
overload externalInstanceMethod(static NSButtonCell, static #"setImageDimsWhenDisabled:") = Void, Bool;
overload externalInstanceMethod(static NSButtonCell, static #"imageDimsWhenDisabled") = Bool;
overload externalInstanceMethod(static NSButtonCell, static #"setShowsBorderOnlyWhileMouseInside:") = Void, Bool;
overload externalInstanceMethod(static NSButtonCell, static #"showsBorderOnlyWhileMouseInside") = Bool;
overload externalInstanceMethod(static NSButtonCell, static #"mouseEntered:") = Void, NSEvent;
overload externalInstanceMethod(static NSButtonCell, static #"mouseExited:") = Void, NSEvent;
overload externalInstanceMethod(static NSButtonCell, static #"backgroundColor") = NSColor;
overload externalInstanceMethod(static NSButtonCell, static #"setBackgroundColor:") = Void, NSColor;
overload externalInstanceMethod(static NSButtonCell, static #"attributedTitle") = NSAttributedString;
overload externalInstanceMethod(static NSButtonCell, static #"setAttributedTitle:") = Void, NSAttributedString;
overload externalInstanceMethod(static NSButtonCell, static #"attributedAlternateTitle") = NSAttributedString;
overload externalInstanceMethod(static NSButtonCell, static #"setAttributedAlternateTitle:") = Void, NSAttributedString;
overload externalInstanceMethod(static NSButtonCell, static #"setBezelStyle:") = Void, UInt;
overload externalInstanceMethod(static NSButtonCell, static #"bezelStyle") = UInt;
overload externalInstanceMethod(static NSButtonCell, static #"setSound:") = Void, NSSound;
overload externalInstanceMethod(static NSButtonCell, static #"sound") = NSSound;

record NSCIImageRep = externalClass(NSImageRep);
overload externalClassMethod(static NSCIImageRep, static #"imageRepWithCIImage:") = Id, CIImage;
overload externalInstanceMethod(static NSCIImageRep, static #"initWithCIImage:") = Id, CIImage;
overload externalInstanceMethod(static NSCIImageRep, static #"CIImage") = CIImage;

record NSCachedImageRep = externalClass(NSImageRep);
overload externalInstanceMethod(static NSCachedImageRep, static #"initWithWindow:rect:") = Id, NSWindow, NSRect;
overload externalInstanceMethod(static NSCachedImageRep, static #"initWithSize:depth:separate:alpha:") = Id, NSSize, Int, Bool, Bool;
overload externalInstanceMethod(static NSCachedImageRep, static #"window") = NSWindow;
overload externalInstanceMethod(static NSCachedImageRep, static #"rect") = NSRect;

record NSCell = externalClass(NSObject);
overload externalInstanceMethod(static NSCell, static #"copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(static NSCell, static #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static NSCell, static #"initWithCoder:") = Id, NSCoder;
overload externalClassMethod(static NSCell, static #"prefersTrackingUntilMouseUp") = Bool;
overload externalInstanceMethod(static NSCell, static #"initTextCell:") = Id, NSString;
overload externalInstanceMethod(static NSCell, static #"initImageCell:") = Id, NSImage;
overload externalInstanceMethod(static NSCell, static #"controlView") = NSView;
overload externalInstanceMethod(static NSCell, static #"setControlView:") = Void, NSView;
overload externalInstanceMethod(static NSCell, static #"type") = UInt;
overload externalInstanceMethod(static NSCell, static #"setType:") = Void, UInt;
overload externalInstanceMethod(static NSCell, static #"state") = Int;
overload externalInstanceMethod(static NSCell, static #"setState:") = Void, Int;
overload externalInstanceMethod(static NSCell, static #"target") = Id;
overload externalInstanceMethod(static NSCell, static #"setTarget:") = Void, Id;
overload externalInstanceMethod(static NSCell, static #"action") = SelectorHandle;
overload externalInstanceMethod(static NSCell, static #"setAction:") = Void, SelectorHandle;
overload externalInstanceMethod(static NSCell, static #"tag") = Int;
overload externalInstanceMethod(static NSCell, static #"setTag:") = Void, Int;
overload externalInstanceMethod(static NSCell, static #"title") = NSString;
overload externalInstanceMethod(static NSCell, static #"setTitle:") = Void, NSString;
overload externalInstanceMethod(static NSCell, static #"isOpaque") = Bool;
overload externalInstanceMethod(static NSCell, static #"isEnabled") = Bool;
overload externalInstanceMethod(static NSCell, static #"setEnabled:") = Void, Bool;
overload externalInstanceMethod(static NSCell, static #"sendActionOn:") = Int, Int;
overload externalInstanceMethod(static NSCell, static #"isContinuous") = Bool;
overload externalInstanceMethod(static NSCell, static #"setContinuous:") = Void, Bool;
overload externalInstanceMethod(static NSCell, static #"isEditable") = Bool;
overload externalInstanceMethod(static NSCell, static #"setEditable:") = Void, Bool;
overload externalInstanceMethod(static NSCell, static #"isSelectable") = Bool;
overload externalInstanceMethod(static NSCell, static #"setSelectable:") = Void, Bool;
overload externalInstanceMethod(static NSCell, static #"isBordered") = Bool;
overload externalInstanceMethod(static NSCell, static #"setBordered:") = Void, Bool;
overload externalInstanceMethod(static NSCell, static #"isBezeled") = Bool;
overload externalInstanceMethod(static NSCell, static #"setBezeled:") = Void, Bool;
overload externalInstanceMethod(static NSCell, static #"isScrollable") = Bool;
overload externalInstanceMethod(static NSCell, static #"setScrollable:") = Void, Bool;
overload externalInstanceMethod(static NSCell, static #"isHighlighted") = Bool;
overload externalInstanceMethod(static NSCell, static #"setHighlighted:") = Void, Bool;
overload externalInstanceMethod(static NSCell, static #"alignment") = UInt;
overload externalInstanceMethod(static NSCell, static #"setAlignment:") = Void, UInt;
overload externalInstanceMethod(static NSCell, static #"wraps") = Bool;
overload externalInstanceMethod(static NSCell, static #"setWraps:") = Void, Bool;
overload externalInstanceMethod(static NSCell, static #"font") = NSFont;
overload externalInstanceMethod(static NSCell, static #"setFont:") = Void, NSFont;
overload externalInstanceMethod(static NSCell, static #"isEntryAcceptable:") = Bool, NSString;
overload externalInstanceMethod(static NSCell, static #"keyEquivalent") = NSString;
overload externalInstanceMethod(static NSCell, static #"setFormatter:") = Void, NSFormatter;
overload externalInstanceMethod(static NSCell, static #"formatter") = Id;
overload externalInstanceMethod(static NSCell, static #"objectValue") = Id;
overload externalInstanceMethod(static NSCell, static #"setObjectValue:") = Void, Id;
overload externalInstanceMethod(static NSCell, static #"hasValidObjectValue") = Bool;
overload externalInstanceMethod(static NSCell, static #"stringValue") = NSString;
overload externalInstanceMethod(static NSCell, static #"setStringValue:") = Void, NSString;
overload externalInstanceMethod(static NSCell, static #"compare:") = Int, Id;
overload externalInstanceMethod(static NSCell, static #"intValue") = Int;
overload externalInstanceMethod(static NSCell, static #"setIntValue:") = Void, Int;
overload externalInstanceMethod(static NSCell, static #"floatValue") = Float;
overload externalInstanceMethod(static NSCell, static #"setFloatValue:") = Void, Float;
overload externalInstanceMethod(static NSCell, static #"doubleValue") = Double;
overload externalInstanceMethod(static NSCell, static #"setDoubleValue:") = Void, Double;
overload externalInstanceMethod(static NSCell, static #"takeIntValueFrom:") = Void, Id;
overload externalInstanceMethod(static NSCell, static #"takeFloatValueFrom:") = Void, Id;
overload externalInstanceMethod(static NSCell, static #"takeDoubleValueFrom:") = Void, Id;
overload externalInstanceMethod(static NSCell, static #"takeStringValueFrom:") = Void, Id;
overload externalInstanceMethod(static NSCell, static #"takeObjectValueFrom:") = Void, Id;
overload externalInstanceMethod(static NSCell, static #"image") = NSImage;
overload externalInstanceMethod(static NSCell, static #"setImage:") = Void, NSImage;
overload externalInstanceMethod(static NSCell, static #"setControlTint:") = Void, UInt;
overload externalInstanceMethod(static NSCell, static #"controlTint") = UInt;
overload externalInstanceMethod(static NSCell, static #"setControlSize:") = Void, UInt;
overload externalInstanceMethod(static NSCell, static #"controlSize") = UInt;
overload externalInstanceMethod(static NSCell, static #"representedObject") = Id;
overload externalInstanceMethod(static NSCell, static #"setRepresentedObject:") = Void, Id;
overload externalInstanceMethod(static NSCell, static #"cellAttribute:") = Int, UInt;
overload externalInstanceMethod(static NSCell, static #"setCellAttribute:to:") = Void, UInt, Int;
overload externalInstanceMethod(static NSCell, static #"imageRectForBounds:") = NSRect, NSRect;
overload externalInstanceMethod(static NSCell, static #"titleRectForBounds:") = NSRect, NSRect;
overload externalInstanceMethod(static NSCell, static #"drawingRectForBounds:") = NSRect, NSRect;
overload externalInstanceMethod(static NSCell, static #"cellSize") = NSSize;
overload externalInstanceMethod(static NSCell, static #"cellSizeForBounds:") = NSSize, NSRect;
overload externalInstanceMethod(static NSCell, static #"highlightColorWithFrame:inView:") = NSColor, NSRect, NSView;
overload externalInstanceMethod(static NSCell, static #"calcDrawInfo:") = Void, NSRect;
overload externalInstanceMethod(static NSCell, static #"setUpFieldEditorAttributes:") = NSText, NSText;
overload externalInstanceMethod(static NSCell, static #"drawInteriorWithFrame:inView:") = Void, NSRect, NSView;
overload externalInstanceMethod(static NSCell, static #"drawWithFrame:inView:") = Void, NSRect, NSView;
overload externalInstanceMethod(static NSCell, static #"highlight:withFrame:inView:") = Void, Bool, NSRect, NSView;
overload externalInstanceMethod(static NSCell, static #"mouseDownFlags") = Int;
overload externalInstanceMethod(static NSCell, static #"getPeriodicDelay:interval:") = Void, Pointer[Float], Pointer[Float];
overload externalInstanceMethod(static NSCell, static #"startTrackingAt:inView:") = Bool, NSPoint, NSView;
overload externalInstanceMethod(static NSCell, static #"continueTracking:at:inView:") = Bool, NSPoint, NSPoint, NSView;
overload externalInstanceMethod(static NSCell, static #"stopTracking:at:inView:mouseIsUp:") = Void, NSPoint, NSPoint, NSView, Bool;
overload externalInstanceMethod(static NSCell, static #"trackMouse:inRect:ofView:untilMouseUp:") = Bool, NSEvent, NSRect, NSView, Bool;
overload externalInstanceMethod(static NSCell, static #"editWithFrame:inView:editor:delegate:event:") = Void, NSRect, NSView, NSText, Id, NSEvent;
overload externalInstanceMethod(static NSCell, static #"selectWithFrame:inView:editor:delegate:start:length:") = Void, NSRect, NSView, NSText, Id, Int, Int;
overload externalInstanceMethod(static NSCell, static #"endEditing:") = Void, NSText;
overload externalInstanceMethod(static NSCell, static #"resetCursorRect:inView:") = Void, NSRect, NSView;
overload externalInstanceMethod(static NSCell, static #"setMenu:") = Void, NSMenu;
overload externalInstanceMethod(static NSCell, static #"menu") = NSMenu;
overload externalInstanceMethod(static NSCell, static #"menuForEvent:inRect:ofView:") = NSMenu, NSEvent, NSRect, NSView;
overload externalClassMethod(static NSCell, static #"defaultMenu") = NSMenu;
overload externalInstanceMethod(static NSCell, static #"setSendsActionOnEndEditing:") = Void, Bool;
overload externalInstanceMethod(static NSCell, static #"sendsActionOnEndEditing") = Bool;
overload externalInstanceMethod(static NSCell, static #"baseWritingDirection") = Int;
overload externalInstanceMethod(static NSCell, static #"setBaseWritingDirection:") = Void, Int;
overload externalInstanceMethod(static NSCell, static #"setLineBreakMode:") = Void, UInt;
overload externalInstanceMethod(static NSCell, static #"lineBreakMode") = UInt;
overload externalInstanceMethod(static NSCell, static #"setAllowsUndo:") = Void, Bool;
overload externalInstanceMethod(static NSCell, static #"allowsUndo") = Bool;
overload externalInstanceMethod(static NSCell, static #"integerValue") = Int;
overload externalInstanceMethod(static NSCell, static #"setIntegerValue:") = Void, Int;
overload externalInstanceMethod(static NSCell, static #"takeIntegerValueFrom:") = Void, Id;
overload externalInstanceMethod(static NSCell, static #"truncatesLastVisibleLine") = Bool;
overload externalInstanceMethod(static NSCell, static #"setTruncatesLastVisibleLine:") = Void, Bool;
overload externalInstanceMethod(static NSCell, static #"userInterfaceLayoutDirection") = Int;
overload externalInstanceMethod(static NSCell, static #"setUserInterfaceLayoutDirection:") = Void, Int;
overload externalInstanceMethod(static NSCell, static #"fieldEditorForView:") = NSTextView, NSView;
overload externalInstanceMethod(static NSCell, static #"usesSingleLineMode") = Bool;
overload externalInstanceMethod(static NSCell, static #"setUsesSingleLineMode:") = Void, Bool;
overload externalInstanceMethod(static NSCell, static #"setRefusesFirstResponder:") = Void, Bool;
overload externalInstanceMethod(static NSCell, static #"refusesFirstResponder") = Bool;
overload externalInstanceMethod(static NSCell, static #"acceptsFirstResponder") = Bool;
overload externalInstanceMethod(static NSCell, static #"setShowsFirstResponder:") = Void, Bool;
overload externalInstanceMethod(static NSCell, static #"showsFirstResponder") = Bool;
overload externalInstanceMethod(static NSCell, static #"setMnemonicLocation:") = Void, UInt;
overload externalInstanceMethod(static NSCell, static #"mnemonicLocation") = UInt;
overload externalInstanceMethod(static NSCell, static #"mnemonic") = NSString;
overload externalInstanceMethod(static NSCell, static #"setTitleWithMnemonic:") = Void, NSString;
overload externalInstanceMethod(static NSCell, static #"performClick:") = Void, Id;
overload externalInstanceMethod(static NSCell, static #"setFocusRingType:") = Void, UInt;
overload externalInstanceMethod(static NSCell, static #"focusRingType") = UInt;
overload externalClassMethod(static NSCell, static #"defaultFocusRingType") = UInt;
overload externalInstanceMethod(static NSCell, static #"wantsNotificationForMarkedText") = Bool;
overload externalInstanceMethod(static NSCell, static #"attributedStringValue") = NSAttributedString;
overload externalInstanceMethod(static NSCell, static #"setAttributedStringValue:") = Void, NSAttributedString;
overload externalInstanceMethod(static NSCell, static #"allowsEditingTextAttributes") = Bool;
overload externalInstanceMethod(static NSCell, static #"setAllowsEditingTextAttributes:") = Void, Bool;
overload externalInstanceMethod(static NSCell, static #"importsGraphics") = Bool;
overload externalInstanceMethod(static NSCell, static #"setImportsGraphics:") = Void, Bool;
overload externalInstanceMethod(static NSCell, static #"setAllowsMixedState:") = Void, Bool;
overload externalInstanceMethod(static NSCell, static #"allowsMixedState") = Bool;
overload externalInstanceMethod(static NSCell, static #"nextState") = Int;
overload externalInstanceMethod(static NSCell, static #"setNextState") = Void;
overload externalInstanceMethod(static NSCell, static #"hitTestForEvent:inRect:ofView:") = UInt, NSEvent, NSRect, NSView;
overload externalInstanceMethod(static NSCell, static #"expansionFrameWithFrame:inView:") = NSRect, NSRect, NSView;
overload externalInstanceMethod(static NSCell, static #"drawWithExpansionFrame:inView:") = Void, NSRect, NSView;
overload externalInstanceMethod(static NSCell, static #"backgroundStyle") = Int;
overload externalInstanceMethod(static NSCell, static #"setBackgroundStyle:") = Void, Int;
overload externalInstanceMethod(static NSCell, static #"interiorBackgroundStyle") = Int;
overload externalInstanceMethod(static NSCell, static #"entryType") = Int;
overload externalInstanceMethod(static NSCell, static #"setEntryType:") = Void, Int;
overload externalInstanceMethod(static NSCell, static #"setFloatingPointFormat:left:right:") = Void, Bool, UInt, UInt;

record NSClipView = externalClass(NSView);
overload externalInstanceMethod(static NSClipView, static #"setBackgroundColor:") = Void, NSColor;
overload externalInstanceMethod(static NSClipView, static #"backgroundColor") = NSColor;
overload externalInstanceMethod(static NSClipView, static #"setDrawsBackground:") = Void, Bool;
overload externalInstanceMethod(static NSClipView, static #"drawsBackground") = Bool;
overload externalInstanceMethod(static NSClipView, static #"setDocumentView:") = Void, NSView;
overload externalInstanceMethod(static NSClipView, static #"documentView") = Id;
overload externalInstanceMethod(static NSClipView, static #"documentRect") = NSRect;
overload externalInstanceMethod(static NSClipView, static #"setDocumentCursor:") = Void, NSCursor;
overload externalInstanceMethod(static NSClipView, static #"documentCursor") = NSCursor;
overload externalInstanceMethod(static NSClipView, static #"documentVisibleRect") = NSRect;
overload externalInstanceMethod(static NSClipView, static #"viewFrameChanged:") = Void, NSNotification;
overload externalInstanceMethod(static NSClipView, static #"viewBoundsChanged:") = Void, NSNotification;
overload externalInstanceMethod(static NSClipView, static #"setCopiesOnScroll:") = Void, Bool;
overload externalInstanceMethod(static NSClipView, static #"copiesOnScroll") = Bool;
overload externalInstanceMethod(static NSClipView, static #"autoscroll:") = Bool, NSEvent;
overload externalInstanceMethod(static NSClipView, static #"constrainScrollPoint:") = NSPoint, NSPoint;
overload externalInstanceMethod(static NSClipView, static #"scrollToPoint:") = Void, NSPoint;

overload externalInstanceMethod(static NSCoder, static #"decodeNXColor") = NSColor;

record NSCollectionView = externalClass(NSView);
overload externalInstanceMethod(static NSCollectionView, static #"setDelegate:") = Void, Id;
overload externalInstanceMethod(static NSCollectionView, static #"delegate") = Id;
overload externalInstanceMethod(static NSCollectionView, static #"isFirstResponder") = Bool;
overload externalInstanceMethod(static NSCollectionView, static #"setContent:") = Void, NSArray;
overload externalInstanceMethod(static NSCollectionView, static #"content") = NSArray;
overload externalInstanceMethod(static NSCollectionView, static #"setSelectable:") = Void, Bool;
overload externalInstanceMethod(static NSCollectionView, static #"isSelectable") = Bool;
overload externalInstanceMethod(static NSCollectionView, static #"setAllowsMultipleSelection:") = Void, Bool;
overload externalInstanceMethod(static NSCollectionView, static #"allowsMultipleSelection") = Bool;
overload externalInstanceMethod(static NSCollectionView, static #"setSelectionIndexes:") = Void, NSIndexSet;
overload externalInstanceMethod(static NSCollectionView, static #"selectionIndexes") = NSIndexSet;
overload externalInstanceMethod(static NSCollectionView, static #"newItemForRepresentedObject:") = NSCollectionViewItem, Id;
overload externalInstanceMethod(static NSCollectionView, static #"setItemPrototype:") = Void, NSCollectionViewItem;
overload externalInstanceMethod(static NSCollectionView, static #"itemPrototype") = NSCollectionViewItem;
overload externalInstanceMethod(static NSCollectionView, static #"setMaxNumberOfRows:") = Void, UInt;
overload externalInstanceMethod(static NSCollectionView, static #"maxNumberOfRows") = UInt;
overload externalInstanceMethod(static NSCollectionView, static #"setMaxNumberOfColumns:") = Void, UInt;
overload externalInstanceMethod(static NSCollectionView, static #"maxNumberOfColumns") = UInt;
overload externalInstanceMethod(static NSCollectionView, static #"setMinItemSize:") = Void, NSSize;
overload externalInstanceMethod(static NSCollectionView, static #"minItemSize") = NSSize;
overload externalInstanceMethod(static NSCollectionView, static #"setMaxItemSize:") = Void, NSSize;
overload externalInstanceMethod(static NSCollectionView, static #"maxItemSize") = NSSize;
overload externalInstanceMethod(static NSCollectionView, static #"setBackgroundColors:") = Void, NSArray;
overload externalInstanceMethod(static NSCollectionView, static #"backgroundColors") = NSArray;
overload externalInstanceMethod(static NSCollectionView, static #"itemAtIndex:") = NSCollectionViewItem, UInt;
overload externalInstanceMethod(static NSCollectionView, static #"frameForItemAtIndex:") = NSRect, UInt;
overload externalInstanceMethod(static NSCollectionView, static #"setDraggingSourceOperationMask:forLocal:") = Void, UInt, Bool;
overload externalInstanceMethod(static NSCollectionView, static #"draggingImageForItemsAtIndexes:withEvent:offset:") = NSImage, NSIndexSet, NSEvent, NSPointPointer;

record NSCollectionViewItem = externalClass(NSViewController);
overload externalInstanceMethod(static NSCollectionViewItem, static #"copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(static NSCollectionViewItem, static #"collectionView") = NSCollectionView;
overload externalInstanceMethod(static NSCollectionViewItem, static #"setSelected:") = Void, Bool;
overload externalInstanceMethod(static NSCollectionViewItem, static #"isSelected") = Bool;

record NSColor = externalClass(NSObject);
overload externalInstanceMethod(static NSColor, static #"copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(static NSColor, static #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static NSColor, static #"initWithCoder:") = Id, NSCoder;
overload externalClassMethod(static NSColor, static #"readableTypesForPasteboard:") = NSArray, NSPasteboard;
overload externalClassMethod(static NSColor, static #"readingOptionsForType:pasteboard:") = UInt, NSString, NSPasteboard;
overload externalInstanceMethod(static NSColor, static #"initWithPasteboardPropertyList:ofType:") = Id, Id, NSString;
overload externalInstanceMethod(static NSColor, static #"writableTypesForPasteboard:") = NSArray, NSPasteboard;
overload externalInstanceMethod(static NSColor, static #"writingOptionsForType:pasteboard:") = UInt, NSString, NSPasteboard;
overload externalInstanceMethod(static NSColor, static #"pasteboardPropertyListForType:") = Id, NSString;
overload externalClassMethod(static NSColor, static #"colorWithCalibratedWhite:alpha:") = NSColor, Float, Float;
overload externalClassMethod(static NSColor, static #"colorWithCalibratedHue:saturation:brightness:alpha:") = NSColor, Float, Float, Float, Float;
overload externalClassMethod(static NSColor, static #"colorWithCalibratedRed:green:blue:alpha:") = NSColor, Float, Float, Float, Float;
overload externalClassMethod(static NSColor, static #"colorWithDeviceWhite:alpha:") = NSColor, Float, Float;
overload externalClassMethod(static NSColor, static #"colorWithDeviceHue:saturation:brightness:alpha:") = NSColor, Float, Float, Float, Float;
overload externalClassMethod(static NSColor, static #"colorWithDeviceRed:green:blue:alpha:") = NSColor, Float, Float, Float, Float;
overload externalClassMethod(static NSColor, static #"colorWithDeviceCyan:magenta:yellow:black:alpha:") = NSColor, Float, Float, Float, Float, Float;
overload externalClassMethod(static NSColor, static #"colorWithCatalogName:colorName:") = NSColor, NSString, NSString;
overload externalClassMethod(static NSColor, static #"colorWithColorSpace:components:count:") = NSColor, NSColorSpace, Pointer[Float], Int;
overload externalClassMethod(static NSColor, static #"blackColor") = NSColor;
overload externalClassMethod(static NSColor, static #"darkGrayColor") = NSColor;
overload externalClassMethod(static NSColor, static #"lightGrayColor") = NSColor;
overload externalClassMethod(static NSColor, static #"whiteColor") = NSColor;
overload externalClassMethod(static NSColor, static #"grayColor") = NSColor;
overload externalClassMethod(static NSColor, static #"redColor") = NSColor;
overload externalClassMethod(static NSColor, static #"greenColor") = NSColor;
overload externalClassMethod(static NSColor, static #"blueColor") = NSColor;
overload externalClassMethod(static NSColor, static #"cyanColor") = NSColor;
overload externalClassMethod(static NSColor, static #"yellowColor") = NSColor;
overload externalClassMethod(static NSColor, static #"magentaColor") = NSColor;
overload externalClassMethod(static NSColor, static #"orangeColor") = NSColor;
overload externalClassMethod(static NSColor, static #"purpleColor") = NSColor;
overload externalClassMethod(static NSColor, static #"brownColor") = NSColor;
overload externalClassMethod(static NSColor, static #"clearColor") = NSColor;
overload externalClassMethod(static NSColor, static #"controlShadowColor") = NSColor;
overload externalClassMethod(static NSColor, static #"controlDarkShadowColor") = NSColor;
overload externalClassMethod(static NSColor, static #"controlColor") = NSColor;
overload externalClassMethod(static NSColor, static #"controlHighlightColor") = NSColor;
overload externalClassMethod(static NSColor, static #"controlLightHighlightColor") = NSColor;
overload externalClassMethod(static NSColor, static #"controlTextColor") = NSColor;
overload externalClassMethod(static NSColor, static #"controlBackgroundColor") = NSColor;
overload externalClassMethod(static NSColor, static #"selectedControlColor") = NSColor;
overload externalClassMethod(static NSColor, static #"secondarySelectedControlColor") = NSColor;
overload externalClassMethod(static NSColor, static #"selectedControlTextColor") = NSColor;
overload externalClassMethod(static NSColor, static #"disabledControlTextColor") = NSColor;
overload externalClassMethod(static NSColor, static #"textColor") = NSColor;
overload externalClassMethod(static NSColor, static #"textBackgroundColor") = NSColor;
overload externalClassMethod(static NSColor, static #"selectedTextColor") = NSColor;
overload externalClassMethod(static NSColor, static #"selectedTextBackgroundColor") = NSColor;
overload externalClassMethod(static NSColor, static #"gridColor") = NSColor;
overload externalClassMethod(static NSColor, static #"keyboardFocusIndicatorColor") = NSColor;
overload externalClassMethod(static NSColor, static #"windowBackgroundColor") = NSColor;
overload externalClassMethod(static NSColor, static #"scrollBarColor") = NSColor;
overload externalClassMethod(static NSColor, static #"knobColor") = NSColor;
overload externalClassMethod(static NSColor, static #"selectedKnobColor") = NSColor;
overload externalClassMethod(static NSColor, static #"windowFrameColor") = NSColor;
overload externalClassMethod(static NSColor, static #"windowFrameTextColor") = NSColor;
overload externalClassMethod(static NSColor, static #"selectedMenuItemColor") = NSColor;
overload externalClassMethod(static NSColor, static #"selectedMenuItemTextColor") = NSColor;
overload externalClassMethod(static NSColor, static #"highlightColor") = NSColor;
overload externalClassMethod(static NSColor, static #"shadowColor") = NSColor;
overload externalClassMethod(static NSColor, static #"headerColor") = NSColor;
overload externalClassMethod(static NSColor, static #"headerTextColor") = NSColor;
overload externalClassMethod(static NSColor, static #"alternateSelectedControlColor") = NSColor;
overload externalClassMethod(static NSColor, static #"alternateSelectedControlTextColor") = NSColor;
overload externalClassMethod(static NSColor, static #"controlAlternatingRowBackgroundColors") = NSArray;
overload externalInstanceMethod(static NSColor, static #"highlightWithLevel:") = NSColor, Float;
overload externalInstanceMethod(static NSColor, static #"shadowWithLevel:") = NSColor, Float;
overload externalClassMethod(static NSColor, static #"colorForControlTint:") = NSColor, UInt;
overload externalClassMethod(static NSColor, static #"currentControlTint") = UInt;
overload externalInstanceMethod(static NSColor, static #"set") = Void;
overload externalInstanceMethod(static NSColor, static #"setFill") = Void;
overload externalInstanceMethod(static NSColor, static #"setStroke") = Void;
overload externalInstanceMethod(static NSColor, static #"colorSpaceName") = NSString;
overload externalInstanceMethod(static NSColor, static #"colorUsingColorSpaceName:") = NSColor, NSString;
overload externalInstanceMethod(static NSColor, static #"colorUsingColorSpaceName:device:") = NSColor, NSString, NSDictionary;
overload externalInstanceMethod(static NSColor, static #"colorUsingColorSpace:") = NSColor, NSColorSpace;
overload externalInstanceMethod(static NSColor, static #"blendedColorWithFraction:ofColor:") = NSColor, Float, NSColor;
overload externalInstanceMethod(static NSColor, static #"colorWithAlphaComponent:") = NSColor, Float;
overload externalInstanceMethod(static NSColor, static #"catalogNameComponent") = NSString;
overload externalInstanceMethod(static NSColor, static #"colorNameComponent") = NSString;
overload externalInstanceMethod(static NSColor, static #"localizedCatalogNameComponent") = NSString;
overload externalInstanceMethod(static NSColor, static #"localizedColorNameComponent") = NSString;
overload externalInstanceMethod(static NSColor, static #"redComponent") = Float;
overload externalInstanceMethod(static NSColor, static #"greenComponent") = Float;
overload externalInstanceMethod(static NSColor, static #"blueComponent") = Float;
overload externalInstanceMethod(static NSColor, static #"getRed:green:blue:alpha:") = Void, Pointer[Float], Pointer[Float], Pointer[Float], Pointer[Float];
overload externalInstanceMethod(static NSColor, static #"hueComponent") = Float;
overload externalInstanceMethod(static NSColor, static #"saturationComponent") = Float;
overload externalInstanceMethod(static NSColor, static #"brightnessComponent") = Float;
overload externalInstanceMethod(static NSColor, static #"getHue:saturation:brightness:alpha:") = Void, Pointer[Float], Pointer[Float], Pointer[Float], Pointer[Float];
overload externalInstanceMethod(static NSColor, static #"whiteComponent") = Float;
overload externalInstanceMethod(static NSColor, static #"getWhite:alpha:") = Void, Pointer[Float], Pointer[Float];
overload externalInstanceMethod(static NSColor, static #"cyanComponent") = Float;
overload externalInstanceMethod(static NSColor, static #"magentaComponent") = Float;
overload externalInstanceMethod(static NSColor, static #"yellowComponent") = Float;
overload externalInstanceMethod(static NSColor, static #"blackComponent") = Float;
overload externalInstanceMethod(static NSColor, static #"getCyan:magenta:yellow:black:alpha:") = Void, Pointer[Float], Pointer[Float], Pointer[Float], Pointer[Float], Pointer[Float];
overload externalInstanceMethod(static NSColor, static #"colorSpace") = NSColorSpace;
overload externalInstanceMethod(static NSColor, static #"numberOfComponents") = Int;
overload externalInstanceMethod(static NSColor, static #"getComponents:") = Void, Pointer[Float];
overload externalInstanceMethod(static NSColor, static #"alphaComponent") = Float;
overload externalClassMethod(static NSColor, static #"colorFromPasteboard:") = NSColor, NSPasteboard;
overload externalInstanceMethod(static NSColor, static #"writeToPasteboard:") = Void, NSPasteboard;
overload externalClassMethod(static NSColor, static #"colorWithPatternImage:") = NSColor, NSImage;
overload externalInstanceMethod(static NSColor, static #"patternImage") = NSImage;
overload externalInstanceMethod(static NSColor, static #"drawSwatchInRect:") = Void, NSRect;
overload externalClassMethod(static NSColor, static #"setIgnoresAlpha:") = Void, Bool;
overload externalClassMethod(static NSColor, static #"ignoresAlpha") = Bool;
overload externalClassMethod(static NSColor, static #"colorWithCIColor:") = NSColor, CIColor;

record NSColorList = externalClass(NSObject);
overload externalInstanceMethod(static NSColorList, static #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static NSColorList, static #"initWithCoder:") = Id, NSCoder;
overload externalClassMethod(static NSColorList, static #"availableColorLists") = NSArray;
overload externalClassMethod(static NSColorList, static #"colorListNamed:") = NSColorList, NSString;
overload externalInstanceMethod(static NSColorList, static #"initWithName:") = Id, NSString;
overload externalInstanceMethod(static NSColorList, static #"initWithName:fromFile:") = Id, NSString, NSString;
overload externalInstanceMethod(static NSColorList, static #"name") = NSString;
overload externalInstanceMethod(static NSColorList, static #"setColor:forKey:") = Void, NSColor, NSString;
overload externalInstanceMethod(static NSColorList, static #"insertColor:key:atIndex:") = Void, NSColor, NSString, UInt;
overload externalInstanceMethod(static NSColorList, static #"removeColorWithKey:") = Void, NSString;
overload externalInstanceMethod(static NSColorList, static #"colorWithKey:") = NSColor, NSString;
overload externalInstanceMethod(static NSColorList, static #"allKeys") = NSArray;
overload externalInstanceMethod(static NSColorList, static #"isEditable") = Bool;
overload externalInstanceMethod(static NSColorList, static #"writeToFile:") = Bool, NSString;
overload externalInstanceMethod(static NSColorList, static #"removeFile") = Void;

record NSColorPanel = externalClass(NSPanel);
overload externalClassMethod(static NSColorPanel, static #"sharedColorPanel") = NSColorPanel;
overload externalClassMethod(static NSColorPanel, static #"sharedColorPanelExists") = Bool;
overload externalClassMethod(static NSColorPanel, static #"dragColor:withEvent:fromView:") = Bool, NSColor, NSEvent, NSView;
overload externalClassMethod(static NSColorPanel, static #"setPickerMask:") = Void, UInt;
overload externalClassMethod(static NSColorPanel, static #"setPickerMode:") = Void, Int;
overload externalInstanceMethod(static NSColorPanel, static #"setAccessoryView:") = Void, NSView;
overload externalInstanceMethod(static NSColorPanel, static #"accessoryView") = NSView;
overload externalInstanceMethod(static NSColorPanel, static #"setContinuous:") = Void, Bool;
overload externalInstanceMethod(static NSColorPanel, static #"isContinuous") = Bool;
overload externalInstanceMethod(static NSColorPanel, static #"setShowsAlpha:") = Void, Bool;
overload externalInstanceMethod(static NSColorPanel, static #"showsAlpha") = Bool;
overload externalInstanceMethod(static NSColorPanel, static #"setMode:") = Void, Int;
overload externalInstanceMethod(static NSColorPanel, static #"mode") = Int;
overload externalInstanceMethod(static NSColorPanel, static #"setColor:") = Void, NSColor;
overload externalInstanceMethod(static NSColorPanel, static #"color") = NSColor;
overload externalInstanceMethod(static NSColorPanel, static #"alpha") = Float;
overload externalInstanceMethod(static NSColorPanel, static #"setAction:") = Void, SelectorHandle;
overload externalInstanceMethod(static NSColorPanel, static #"setTarget:") = Void, Id;
overload externalInstanceMethod(static NSColorPanel, static #"attachColorList:") = Void, NSColorList;
overload externalInstanceMethod(static NSColorPanel, static #"detachColorList:") = Void, NSColorList;

record NSColorPicker = externalClass(NSObject);
overload externalInstanceMethod(static NSColorPicker, static #"initWithPickerMask:colorPanel:") = Id, UInt, NSColorPanel;
overload externalInstanceMethod(static NSColorPicker, static #"provideNewButtonImage") = NSImage;
overload externalInstanceMethod(static NSColorPicker, static #"insertNewButtonImage:in:") = Void, NSImage, NSButtonCell;
overload externalInstanceMethod(static NSColorPicker, static #"viewSizeChanged:") = Void, Id;
overload externalInstanceMethod(static NSColorPicker, static #"alphaControlAddedOrRemoved:") = Void, Id;
overload externalInstanceMethod(static NSColorPicker, static #"attachColorList:") = Void, NSColorList;
overload externalInstanceMethod(static NSColorPicker, static #"detachColorList:") = Void, NSColorList;
overload externalInstanceMethod(static NSColorPicker, static #"setMode:") = Void, Int;
overload externalInstanceMethod(static NSColorPicker, static #"buttonToolTip") = NSString;
overload externalInstanceMethod(static NSColorPicker, static #"minContentSize") = NSSize;
overload externalInstanceMethod(static NSColorPicker, static #"initWithPickerMask:colorPanel:") = Id, UInt, NSColorPanel;
overload externalInstanceMethod(static NSColorPicker, static #"colorPanel") = NSColorPanel;
overload externalInstanceMethod(static NSColorPicker, static #"provideNewButtonImage") = NSImage;
overload externalInstanceMethod(static NSColorPicker, static #"insertNewButtonImage:in:") = Void, NSImage, NSButtonCell;
overload externalInstanceMethod(static NSColorPicker, static #"viewSizeChanged:") = Void, Id;
overload externalInstanceMethod(static NSColorPicker, static #"attachColorList:") = Void, NSColorList;
overload externalInstanceMethod(static NSColorPicker, static #"detachColorList:") = Void, NSColorList;
overload externalInstanceMethod(static NSColorPicker, static #"setMode:") = Void, Int;
overload externalInstanceMethod(static NSColorPicker, static #"buttonToolTip") = NSString;
overload externalInstanceMethod(static NSColorPicker, static #"minContentSize") = NSSize;

record NSColorSpace = externalClass(NSObject);
overload externalInstanceMethod(static NSColorSpace, static #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static NSColorSpace, static #"initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(static NSColorSpace, static #"initWithICCProfileData:") = Id, NSData;
overload externalInstanceMethod(static NSColorSpace, static #"ICCProfileData") = NSData;
overload externalInstanceMethod(static NSColorSpace, static #"initWithColorSyncProfile:") = Id, RawPointer;
overload externalInstanceMethod(static NSColorSpace, static #"colorSyncProfile") = RawPointer;
overload externalInstanceMethod(static NSColorSpace, static #"initWithCGColorSpace:") = Id, CGColorSpaceRef;
overload externalInstanceMethod(static NSColorSpace, static #"CGColorSpace") = CGColorSpaceRef;
overload externalInstanceMethod(static NSColorSpace, static #"numberOfColorComponents") = Int;
overload externalInstanceMethod(static NSColorSpace, static #"colorSpaceModel") = Int;
overload externalInstanceMethod(static NSColorSpace, static #"localizedName") = NSString;
overload externalClassMethod(static NSColorSpace, static #"genericRGBColorSpace") = NSColorSpace;
overload externalClassMethod(static NSColorSpace, static #"genericGrayColorSpace") = NSColorSpace;
overload externalClassMethod(static NSColorSpace, static #"genericCMYKColorSpace") = NSColorSpace;
overload externalClassMethod(static NSColorSpace, static #"deviceRGBColorSpace") = NSColorSpace;
overload externalClassMethod(static NSColorSpace, static #"deviceGrayColorSpace") = NSColorSpace;
overload externalClassMethod(static NSColorSpace, static #"deviceCMYKColorSpace") = NSColorSpace;
overload externalClassMethod(static NSColorSpace, static #"sRGBColorSpace") = NSColorSpace;
overload externalClassMethod(static NSColorSpace, static #"genericGamma22GrayColorSpace") = NSColorSpace;
overload externalClassMethod(static NSColorSpace, static #"adobeRGB1998ColorSpace") = NSColorSpace;
overload externalClassMethod(static NSColorSpace, static #"availableColorSpacesWithModel:") = NSArray, Int;

record NSColorWell = externalClass(NSControl);
overload externalInstanceMethod(static NSColorWell, static #"deactivate") = Void;
overload externalInstanceMethod(static NSColorWell, static #"activate:") = Void, Bool;
overload externalInstanceMethod(static NSColorWell, static #"isActive") = Bool;
overload externalInstanceMethod(static NSColorWell, static #"drawWellInside:") = Void, NSRect;
overload externalInstanceMethod(static NSColorWell, static #"isBordered") = Bool;
overload externalInstanceMethod(static NSColorWell, static #"setBordered:") = Void, Bool;
overload externalInstanceMethod(static NSColorWell, static #"takeColorFrom:") = Void, Id;
overload externalInstanceMethod(static NSColorWell, static #"setColor:") = Void, NSColor;
overload externalInstanceMethod(static NSColorWell, static #"color") = NSColor;

record NSComboBox = externalClass(NSTextField);
overload externalInstanceMethod(static NSComboBox, static #"hasVerticalScroller") = Bool;
overload externalInstanceMethod(static NSComboBox, static #"setHasVerticalScroller:") = Void, Bool;
overload externalInstanceMethod(static NSComboBox, static #"intercellSpacing") = NSSize;
overload externalInstanceMethod(static NSComboBox, static #"setIntercellSpacing:") = Void, NSSize;
overload externalInstanceMethod(static NSComboBox, static #"itemHeight") = Float;
overload externalInstanceMethod(static NSComboBox, static #"setItemHeight:") = Void, Float;
overload externalInstanceMethod(static NSComboBox, static #"numberOfVisibleItems") = Int;
overload externalInstanceMethod(static NSComboBox, static #"setNumberOfVisibleItems:") = Void, Int;
overload externalInstanceMethod(static NSComboBox, static #"setButtonBordered:") = Void, Bool;
overload externalInstanceMethod(static NSComboBox, static #"isButtonBordered") = Bool;
overload externalInstanceMethod(static NSComboBox, static #"reloadData") = Void;
overload externalInstanceMethod(static NSComboBox, static #"noteNumberOfItemsChanged") = Void;
overload externalInstanceMethod(static NSComboBox, static #"setUsesDataSource:") = Void, Bool;
overload externalInstanceMethod(static NSComboBox, static #"usesDataSource") = Bool;
overload externalInstanceMethod(static NSComboBox, static #"scrollItemAtIndexToTop:") = Void, Int;
overload externalInstanceMethod(static NSComboBox, static #"scrollItemAtIndexToVisible:") = Void, Int;
overload externalInstanceMethod(static NSComboBox, static #"selectItemAtIndex:") = Void, Int;
overload externalInstanceMethod(static NSComboBox, static #"deselectItemAtIndex:") = Void, Int;
overload externalInstanceMethod(static NSComboBox, static #"indexOfSelectedItem") = Int;
overload externalInstanceMethod(static NSComboBox, static #"numberOfItems") = Int;
overload externalInstanceMethod(static NSComboBox, static #"completes") = Bool;
overload externalInstanceMethod(static NSComboBox, static #"setCompletes:") = Void, Bool;
overload externalInstanceMethod(static NSComboBox, static #"delegate") = Id;
overload externalInstanceMethod(static NSComboBox, static #"setDelegate:") = Void, Id;
overload externalInstanceMethod(static NSComboBox, static #"dataSource") = Id;
overload externalInstanceMethod(static NSComboBox, static #"setDataSource:") = Void, Id;
overload externalInstanceMethod(static NSComboBox, static #"addItemWithObjectValue:") = Void, Id;
overload externalInstanceMethod(static NSComboBox, static #"addItemsWithObjectValues:") = Void, NSArray;
overload externalInstanceMethod(static NSComboBox, static #"insertItemWithObjectValue:atIndex:") = Void, Id, Int;
overload externalInstanceMethod(static NSComboBox, static #"removeItemWithObjectValue:") = Void, Id;
overload externalInstanceMethod(static NSComboBox, static #"removeItemAtIndex:") = Void, Int;
overload externalInstanceMethod(static NSComboBox, static #"removeAllItems") = Void;
overload externalInstanceMethod(static NSComboBox, static #"selectItemWithObjectValue:") = Void, Id;
overload externalInstanceMethod(static NSComboBox, static #"itemObjectValueAtIndex:") = Id, Int;
overload externalInstanceMethod(static NSComboBox, static #"objectValueOfSelectedItem") = Id;
overload externalInstanceMethod(static NSComboBox, static #"indexOfItemWithObjectValue:") = Int, Id;
overload externalInstanceMethod(static NSComboBox, static #"objectValues") = NSArray;

record NSComboBoxCell = externalClass(NSTextFieldCell);
overload externalInstanceMethod(static NSComboBoxCell, static #"hasVerticalScroller") = Bool;
overload externalInstanceMethod(static NSComboBoxCell, static #"setHasVerticalScroller:") = Void, Bool;
overload externalInstanceMethod(static NSComboBoxCell, static #"intercellSpacing") = NSSize;
overload externalInstanceMethod(static NSComboBoxCell, static #"setIntercellSpacing:") = Void, NSSize;
overload externalInstanceMethod(static NSComboBoxCell, static #"itemHeight") = Float;
overload externalInstanceMethod(static NSComboBoxCell, static #"setItemHeight:") = Void, Float;
overload externalInstanceMethod(static NSComboBoxCell, static #"numberOfVisibleItems") = Int;
overload externalInstanceMethod(static NSComboBoxCell, static #"setNumberOfVisibleItems:") = Void, Int;
overload externalInstanceMethod(static NSComboBoxCell, static #"setButtonBordered:") = Void, Bool;
overload externalInstanceMethod(static NSComboBoxCell, static #"isButtonBordered") = Bool;
overload externalInstanceMethod(static NSComboBoxCell, static #"reloadData") = Void;
overload externalInstanceMethod(static NSComboBoxCell, static #"noteNumberOfItemsChanged") = Void;
overload externalInstanceMethod(static NSComboBoxCell, static #"setUsesDataSource:") = Void, Bool;
overload externalInstanceMethod(static NSComboBoxCell, static #"usesDataSource") = Bool;
overload externalInstanceMethod(static NSComboBoxCell, static #"scrollItemAtIndexToTop:") = Void, Int;
overload externalInstanceMethod(static NSComboBoxCell, static #"scrollItemAtIndexToVisible:") = Void, Int;
overload externalInstanceMethod(static NSComboBoxCell, static #"selectItemAtIndex:") = Void, Int;
overload externalInstanceMethod(static NSComboBoxCell, static #"deselectItemAtIndex:") = Void, Int;
overload externalInstanceMethod(static NSComboBoxCell, static #"indexOfSelectedItem") = Int;
overload externalInstanceMethod(static NSComboBoxCell, static #"numberOfItems") = Int;
overload externalInstanceMethod(static NSComboBoxCell, static #"completes") = Bool;
overload externalInstanceMethod(static NSComboBoxCell, static #"setCompletes:") = Void, Bool;
overload externalInstanceMethod(static NSComboBoxCell, static #"completedString:") = NSString, NSString;
overload externalInstanceMethod(static NSComboBoxCell, static #"dataSource") = Id;
overload externalInstanceMethod(static NSComboBoxCell, static #"setDataSource:") = Void, Id;
overload externalInstanceMethod(static NSComboBoxCell, static #"addItemWithObjectValue:") = Void, Id;
overload externalInstanceMethod(static NSComboBoxCell, static #"addItemsWithObjectValues:") = Void, NSArray;
overload externalInstanceMethod(static NSComboBoxCell, static #"insertItemWithObjectValue:atIndex:") = Void, Id, Int;
overload externalInstanceMethod(static NSComboBoxCell, static #"removeItemWithObjectValue:") = Void, Id;
overload externalInstanceMethod(static NSComboBoxCell, static #"removeItemAtIndex:") = Void, Int;
overload externalInstanceMethod(static NSComboBoxCell, static #"removeAllItems") = Void;
overload externalInstanceMethod(static NSComboBoxCell, static #"selectItemWithObjectValue:") = Void, Id;
overload externalInstanceMethod(static NSComboBoxCell, static #"itemObjectValueAtIndex:") = Id, Int;
overload externalInstanceMethod(static NSComboBoxCell, static #"objectValueOfSelectedItem") = Id;
overload externalInstanceMethod(static NSComboBoxCell, static #"indexOfItemWithObjectValue:") = Int, Id;
overload externalInstanceMethod(static NSComboBoxCell, static #"objectValues") = NSArray;

record NSControl = externalClass(NSView);
overload externalClassMethod(static NSControl, static #"setCellClass:") = Void, Id;
overload externalClassMethod(static NSControl, static #"cellClass") = Id;
overload externalInstanceMethod(static NSControl, static #"initWithFrame:") = Id, NSRect;
overload externalInstanceMethod(static NSControl, static #"sizeToFit") = Void;
overload externalInstanceMethod(static NSControl, static #"calcSize") = Void;
overload externalInstanceMethod(static NSControl, static #"cell") = Id;
overload externalInstanceMethod(static NSControl, static #"setCell:") = Void, NSCell;
overload externalInstanceMethod(static NSControl, static #"selectedCell") = Id;
overload externalInstanceMethod(static NSControl, static #"target") = Id;
overload externalInstanceMethod(static NSControl, static #"setTarget:") = Void, Id;
overload externalInstanceMethod(static NSControl, static #"action") = SelectorHandle;
overload externalInstanceMethod(static NSControl, static #"setAction:") = Void, SelectorHandle;
overload externalInstanceMethod(static NSControl, static #"tag") = Int;
overload externalInstanceMethod(static NSControl, static #"setTag:") = Void, Int;
overload externalInstanceMethod(static NSControl, static #"selectedTag") = Int;
overload externalInstanceMethod(static NSControl, static #"setIgnoresMultiClick:") = Void, Bool;
overload externalInstanceMethod(static NSControl, static #"ignoresMultiClick") = Bool;
overload externalInstanceMethod(static NSControl, static #"sendActionOn:") = Int, Int;
overload externalInstanceMethod(static NSControl, static #"isContinuous") = Bool;
overload externalInstanceMethod(static NSControl, static #"setContinuous:") = Void, Bool;
overload externalInstanceMethod(static NSControl, static #"isEnabled") = Bool;
overload externalInstanceMethod(static NSControl, static #"setEnabled:") = Void, Bool;
overload externalInstanceMethod(static NSControl, static #"alignment") = UInt;
overload externalInstanceMethod(static NSControl, static #"setAlignment:") = Void, UInt;
overload externalInstanceMethod(static NSControl, static #"font") = NSFont;
overload externalInstanceMethod(static NSControl, static #"setFont:") = Void, NSFont;
overload externalInstanceMethod(static NSControl, static #"setFormatter:") = Void, NSFormatter;
overload externalInstanceMethod(static NSControl, static #"formatter") = Id;
overload externalInstanceMethod(static NSControl, static #"setObjectValue:") = Void, Id;
overload externalInstanceMethod(static NSControl, static #"setStringValue:") = Void, NSString;
overload externalInstanceMethod(static NSControl, static #"setIntValue:") = Void, Int;
overload externalInstanceMethod(static NSControl, static #"setFloatValue:") = Void, Float;
overload externalInstanceMethod(static NSControl, static #"setDoubleValue:") = Void, Double;
overload externalInstanceMethod(static NSControl, static #"objectValue") = Id;
overload externalInstanceMethod(static NSControl, static #"stringValue") = NSString;
overload externalInstanceMethod(static NSControl, static #"intValue") = Int;
overload externalInstanceMethod(static NSControl, static #"floatValue") = Float;
overload externalInstanceMethod(static NSControl, static #"doubleValue") = Double;
overload externalInstanceMethod(static NSControl, static #"setNeedsDisplay") = Void;
overload externalInstanceMethod(static NSControl, static #"updateCell:") = Void, NSCell;
overload externalInstanceMethod(static NSControl, static #"updateCellInside:") = Void, NSCell;
overload externalInstanceMethod(static NSControl, static #"drawCellInside:") = Void, NSCell;
overload externalInstanceMethod(static NSControl, static #"drawCell:") = Void, NSCell;
overload externalInstanceMethod(static NSControl, static #"selectCell:") = Void, NSCell;
overload externalInstanceMethod(static NSControl, static #"sendAction:to:") = Bool, SelectorHandle, Id;
overload externalInstanceMethod(static NSControl, static #"takeIntValueFrom:") = Void, Id;
overload externalInstanceMethod(static NSControl, static #"takeFloatValueFrom:") = Void, Id;
overload externalInstanceMethod(static NSControl, static #"takeDoubleValueFrom:") = Void, Id;
overload externalInstanceMethod(static NSControl, static #"takeStringValueFrom:") = Void, Id;
overload externalInstanceMethod(static NSControl, static #"takeObjectValueFrom:") = Void, Id;
overload externalInstanceMethod(static NSControl, static #"currentEditor") = NSText;
overload externalInstanceMethod(static NSControl, static #"abortEditing") = Bool;
overload externalInstanceMethod(static NSControl, static #"validateEditing") = Void;
overload externalInstanceMethod(static NSControl, static #"mouseDown:") = Void, NSEvent;
overload externalInstanceMethod(static NSControl, static #"baseWritingDirection") = Int;
overload externalInstanceMethod(static NSControl, static #"setBaseWritingDirection:") = Void, Int;
overload externalInstanceMethod(static NSControl, static #"integerValue") = Int;
overload externalInstanceMethod(static NSControl, static #"setIntegerValue:") = Void, Int;
overload externalInstanceMethod(static NSControl, static #"takeIntegerValueFrom:") = Void, Id;
overload externalInstanceMethod(static NSControl, static #"performClick:") = Void, Id;
overload externalInstanceMethod(static NSControl, static #"setRefusesFirstResponder:") = Void, Bool;
overload externalInstanceMethod(static NSControl, static #"refusesFirstResponder") = Bool;
overload externalInstanceMethod(static NSControl, static #"attributedStringValue") = NSAttributedString;
overload externalInstanceMethod(static NSControl, static #"setAttributedStringValue:") = Void, NSAttributedString;
overload externalInstanceMethod(static NSControl, static #"setFloatingPointFormat:left:right:") = Void, Bool, UInt, UInt;

record NSController = externalClass(NSObject);
overload externalInstanceMethod(static NSController, static #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static NSController, static #"initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(static NSController, static #"objectDidBeginEditing:") = Void, Id;
overload externalInstanceMethod(static NSController, static #"objectDidEndEditing:") = Void, Id;
overload externalInstanceMethod(static NSController, static #"discardEditing") = Void;
overload externalInstanceMethod(static NSController, static #"commitEditing") = Bool;
overload externalInstanceMethod(static NSController, static #"commitEditingWithDelegate:didCommitSelector:contextInfo:") = Void, Id, SelectorHandle, RawPointer;
overload externalInstanceMethod(static NSController, static #"isEditing") = Bool;

record NSCursor = externalClass(NSObject);
overload externalInstanceMethod(static NSCursor, static #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static NSCursor, static #"initWithCoder:") = Id, NSCoder;
overload externalClassMethod(static NSCursor, static #"currentCursor") = NSCursor;
overload externalClassMethod(static NSCursor, static #"currentSystemCursor") = NSCursor;
overload externalClassMethod(static NSCursor, static #"arrowCursor") = NSCursor;
overload externalClassMethod(static NSCursor, static #"IBeamCursor") = NSCursor;
overload externalClassMethod(static NSCursor, static #"pointingHandCursor") = NSCursor;
overload externalClassMethod(static NSCursor, static #"closedHandCursor") = NSCursor;
overload externalClassMethod(static NSCursor, static #"openHandCursor") = NSCursor;
overload externalClassMethod(static NSCursor, static #"resizeLeftCursor") = NSCursor;
overload externalClassMethod(static NSCursor, static #"resizeRightCursor") = NSCursor;
overload externalClassMethod(static NSCursor, static #"resizeLeftRightCursor") = NSCursor;
overload externalClassMethod(static NSCursor, static #"resizeUpCursor") = NSCursor;
overload externalClassMethod(static NSCursor, static #"resizeDownCursor") = NSCursor;
overload externalClassMethod(static NSCursor, static #"resizeUpDownCursor") = NSCursor;
overload externalClassMethod(static NSCursor, static #"crosshairCursor") = NSCursor;
overload externalClassMethod(static NSCursor, static #"disappearingItemCursor") = NSCursor;
overload externalClassMethod(static NSCursor, static #"operationNotAllowedCursor") = NSCursor;
overload externalClassMethod(static NSCursor, static #"dragLinkCursor") = NSCursor;
overload externalClassMethod(static NSCursor, static #"dragCopyCursor") = NSCursor;
overload externalClassMethod(static NSCursor, static #"contextualMenuCursor") = NSCursor;
overload externalInstanceMethod(static NSCursor, static #"initWithImage:hotSpot:") = Id, NSImage, NSPoint;
overload externalInstanceMethod(static NSCursor, static #"initWithImage:foregroundColorHint:backgroundColorHint:hotSpot:") = Id, NSImage, NSColor, NSColor, NSPoint;
overload externalClassMethod(static NSCursor, static #"hide") = Void;
overload externalClassMethod(static NSCursor, static #"unhide") = Void;
overload externalClassMethod(static NSCursor, static #"setHiddenUntilMouseMoves:") = Void, Bool;
overload externalClassMethod(static NSCursor, static #"pop") = Void;
overload externalInstanceMethod(static NSCursor, static #"image") = NSImage;
overload externalInstanceMethod(static NSCursor, static #"hotSpot") = NSPoint;
overload externalInstanceMethod(static NSCursor, static #"push") = Void;
overload externalInstanceMethod(static NSCursor, static #"pop") = Void;
overload externalInstanceMethod(static NSCursor, static #"set") = Void;
overload externalInstanceMethod(static NSCursor, static #"setOnMouseExited:") = Void, Bool;
overload externalInstanceMethod(static NSCursor, static #"setOnMouseEntered:") = Void, Bool;
overload externalInstanceMethod(static NSCursor, static #"isSetOnMouseExited") = Bool;
overload externalInstanceMethod(static NSCursor, static #"isSetOnMouseEntered") = Bool;
overload externalInstanceMethod(static NSCursor, static #"mouseEntered:") = Void, NSEvent;
overload externalInstanceMethod(static NSCursor, static #"mouseExited:") = Void, NSEvent;

record NSCustomImageRep = externalClass(NSImageRep);
overload externalInstanceMethod(static NSCustomImageRep, static #"initWithDrawSelector:delegate:") = Id, SelectorHandle, Id;
overload externalInstanceMethod(static NSCustomImageRep, static #"drawSelector") = SelectorHandle;
overload externalInstanceMethod(static NSCustomImageRep, static #"delegate") = Id;

record NSDatePicker = externalClass(NSControl);
overload externalInstanceMethod(static NSDatePicker, static #"datePickerStyle") = UInt;
overload externalInstanceMethod(static NSDatePicker, static #"setDatePickerStyle:") = Void, UInt;
overload externalInstanceMethod(static NSDatePicker, static #"isBezeled") = Bool;
overload externalInstanceMethod(static NSDatePicker, static #"setBezeled:") = Void, Bool;
overload externalInstanceMethod(static NSDatePicker, static #"isBordered") = Bool;
overload externalInstanceMethod(static NSDatePicker, static #"setBordered:") = Void, Bool;
overload externalInstanceMethod(static NSDatePicker, static #"drawsBackground") = Bool;
overload externalInstanceMethod(static NSDatePicker, static #"setDrawsBackground:") = Void, Bool;
overload externalInstanceMethod(static NSDatePicker, static #"backgroundColor") = NSColor;
overload externalInstanceMethod(static NSDatePicker, static #"setBackgroundColor:") = Void, NSColor;
overload externalInstanceMethod(static NSDatePicker, static #"textColor") = NSColor;
overload externalInstanceMethod(static NSDatePicker, static #"setTextColor:") = Void, NSColor;
overload externalInstanceMethod(static NSDatePicker, static #"datePickerMode") = UInt;
overload externalInstanceMethod(static NSDatePicker, static #"setDatePickerMode:") = Void, UInt;
overload externalInstanceMethod(static NSDatePicker, static #"datePickerElements") = UInt;
overload externalInstanceMethod(static NSDatePicker, static #"setDatePickerElements:") = Void, UInt;
overload externalInstanceMethod(static NSDatePicker, static #"calendar") = NSCalendar;
overload externalInstanceMethod(static NSDatePicker, static #"setCalendar:") = Void, NSCalendar;
overload externalInstanceMethod(static NSDatePicker, static #"locale") = NSLocale;
overload externalInstanceMethod(static NSDatePicker, static #"setLocale:") = Void, NSLocale;
overload externalInstanceMethod(static NSDatePicker, static #"timeZone") = NSTimeZone;
overload externalInstanceMethod(static NSDatePicker, static #"setTimeZone:") = Void, NSTimeZone;
overload externalInstanceMethod(static NSDatePicker, static #"dateValue") = NSDate;
overload externalInstanceMethod(static NSDatePicker, static #"setDateValue:") = Void, NSDate;
overload externalInstanceMethod(static NSDatePicker, static #"timeInterval") = Double;
overload externalInstanceMethod(static NSDatePicker, static #"setTimeInterval:") = Void, Double;
overload externalInstanceMethod(static NSDatePicker, static #"minDate") = NSDate;
overload externalInstanceMethod(static NSDatePicker, static #"setMinDate:") = Void, NSDate;
overload externalInstanceMethod(static NSDatePicker, static #"maxDate") = NSDate;
overload externalInstanceMethod(static NSDatePicker, static #"setMaxDate:") = Void, NSDate;
overload externalInstanceMethod(static NSDatePicker, static #"delegate") = Id;
overload externalInstanceMethod(static NSDatePicker, static #"setDelegate:") = Void, Id;

record NSDatePickerCell = externalClass(NSActionCell);
overload externalInstanceMethod(static NSDatePickerCell, static #"datePickerStyle") = UInt;
overload externalInstanceMethod(static NSDatePickerCell, static #"setDatePickerStyle:") = Void, UInt;
overload externalInstanceMethod(static NSDatePickerCell, static #"drawsBackground") = Bool;
overload externalInstanceMethod(static NSDatePickerCell, static #"setDrawsBackground:") = Void, Bool;
overload externalInstanceMethod(static NSDatePickerCell, static #"backgroundColor") = NSColor;
overload externalInstanceMethod(static NSDatePickerCell, static #"setBackgroundColor:") = Void, NSColor;
overload externalInstanceMethod(static NSDatePickerCell, static #"textColor") = NSColor;
overload externalInstanceMethod(static NSDatePickerCell, static #"setTextColor:") = Void, NSColor;
overload externalInstanceMethod(static NSDatePickerCell, static #"datePickerMode") = UInt;
overload externalInstanceMethod(static NSDatePickerCell, static #"setDatePickerMode:") = Void, UInt;
overload externalInstanceMethod(static NSDatePickerCell, static #"datePickerElements") = UInt;
overload externalInstanceMethod(static NSDatePickerCell, static #"setDatePickerElements:") = Void, UInt;
overload externalInstanceMethod(static NSDatePickerCell, static #"calendar") = NSCalendar;
overload externalInstanceMethod(static NSDatePickerCell, static #"setCalendar:") = Void, NSCalendar;
overload externalInstanceMethod(static NSDatePickerCell, static #"locale") = NSLocale;
overload externalInstanceMethod(static NSDatePickerCell, static #"setLocale:") = Void, NSLocale;
overload externalInstanceMethod(static NSDatePickerCell, static #"timeZone") = NSTimeZone;
overload externalInstanceMethod(static NSDatePickerCell, static #"setTimeZone:") = Void, NSTimeZone;
overload externalInstanceMethod(static NSDatePickerCell, static #"dateValue") = NSDate;
overload externalInstanceMethod(static NSDatePickerCell, static #"setDateValue:") = Void, NSDate;
overload externalInstanceMethod(static NSDatePickerCell, static #"timeInterval") = Double;
overload externalInstanceMethod(static NSDatePickerCell, static #"setTimeInterval:") = Void, Double;
overload externalInstanceMethod(static NSDatePickerCell, static #"minDate") = NSDate;
overload externalInstanceMethod(static NSDatePickerCell, static #"setMinDate:") = Void, NSDate;
overload externalInstanceMethod(static NSDatePickerCell, static #"maxDate") = NSDate;
overload externalInstanceMethod(static NSDatePickerCell, static #"setMaxDate:") = Void, NSDate;
overload externalInstanceMethod(static NSDatePickerCell, static #"delegate") = Id;
overload externalInstanceMethod(static NSDatePickerCell, static #"setDelegate:") = Void, Id;

record NSDictionaryController = externalClass(NSArrayController);
overload externalInstanceMethod(static NSDictionaryController, static #"newObject") = Id;
overload externalInstanceMethod(static NSDictionaryController, static #"setInitialKey:") = Void, NSString;
overload externalInstanceMethod(static NSDictionaryController, static #"initialKey") = NSString;
overload externalInstanceMethod(static NSDictionaryController, static #"setInitialValue:") = Void, Id;
overload externalInstanceMethod(static NSDictionaryController, static #"initialValue") = Id;
overload externalInstanceMethod(static NSDictionaryController, static #"setIncludedKeys:") = Void, NSArray;
overload externalInstanceMethod(static NSDictionaryController, static #"includedKeys") = NSArray;
overload externalInstanceMethod(static NSDictionaryController, static #"setExcludedKeys:") = Void, NSArray;
overload externalInstanceMethod(static NSDictionaryController, static #"excludedKeys") = NSArray;
overload externalInstanceMethod(static NSDictionaryController, static #"setLocalizedKeyDictionary:") = Void, NSDictionary;
overload externalInstanceMethod(static NSDictionaryController, static #"localizedKeyDictionary") = NSDictionary;
overload externalInstanceMethod(static NSDictionaryController, static #"setLocalizedKeyTable:") = Void, NSString;
overload externalInstanceMethod(static NSDictionaryController, static #"localizedKeyTable") = NSString;

record NSDockTile = externalClass(NSObject);
overload externalInstanceMethod(static NSDockTile, static #"size") = NSSize;
overload externalInstanceMethod(static NSDockTile, static #"setContentView:") = Void, NSView;
overload externalInstanceMethod(static NSDockTile, static #"contentView") = NSView;
overload externalInstanceMethod(static NSDockTile, static #"display") = Void;
overload externalInstanceMethod(static NSDockTile, static #"setShowsApplicationBadge:") = Void, Bool;
overload externalInstanceMethod(static NSDockTile, static #"showsApplicationBadge") = Bool;
overload externalInstanceMethod(static NSDockTile, static #"setBadgeLabel:") = Void, NSString;
overload externalInstanceMethod(static NSDockTile, static #"badgeLabel") = NSString;
overload externalInstanceMethod(static NSDockTile, static #"owner") = Id;

record NSDocument = externalClass(NSObject);
overload externalInstanceMethod(static NSDocument, static #"validateUserInterfaceItem:") = Bool, Id;
overload externalInstanceMethod(static NSDocument, static #"init") = Id;
overload externalInstanceMethod(static NSDocument, static #"initWithType:error:") = Id, NSString, Pointer[NSError];
overload externalClassMethod(static NSDocument, static #"canConcurrentlyReadDocumentsOfType:") = Bool, NSString;
overload externalInstanceMethod(static NSDocument, static #"initWithContentsOfURL:ofType:error:") = Id, NSURL, NSString, Pointer[NSError];
overload externalInstanceMethod(static NSDocument, static #"initForURL:withContentsOfURL:ofType:error:") = Id, NSURL, NSURL, NSString, Pointer[NSError];
overload externalInstanceMethod(static NSDocument, static #"setFileType:") = Void, NSString;
overload externalInstanceMethod(static NSDocument, static #"fileType") = NSString;
overload externalInstanceMethod(static NSDocument, static #"setFileURL:") = Void, NSURL;
overload externalInstanceMethod(static NSDocument, static #"fileURL") = NSURL;
overload externalInstanceMethod(static NSDocument, static #"setFileModificationDate:") = Void, NSDate;
overload externalInstanceMethod(static NSDocument, static #"fileModificationDate") = NSDate;
overload externalInstanceMethod(static NSDocument, static #"revertDocumentToSaved:") = Void, Id;
overload externalInstanceMethod(static NSDocument, static #"revertToContentsOfURL:ofType:error:") = Bool, NSURL, NSString, Pointer[NSError];
overload externalInstanceMethod(static NSDocument, static #"readFromURL:ofType:error:") = Bool, NSURL, NSString, Pointer[NSError];
overload externalInstanceMethod(static NSDocument, static #"readFromFileWrapper:ofType:error:") = Bool, NSFileWrapper, NSString, Pointer[NSError];
overload externalInstanceMethod(static NSDocument, static #"readFromData:ofType:error:") = Bool, NSData, NSString, Pointer[NSError];
overload externalInstanceMethod(static NSDocument, static #"writeToURL:ofType:error:") = Bool, NSURL, NSString, Pointer[NSError];
overload externalInstanceMethod(static NSDocument, static #"fileWrapperOfType:error:") = NSFileWrapper, NSString, Pointer[NSError];
overload externalInstanceMethod(static NSDocument, static #"dataOfType:error:") = NSData, NSString, Pointer[NSError];
overload externalInstanceMethod(static NSDocument, static #"writeSafelyToURL:ofType:forSaveOperation:error:") = Bool, NSURL, NSString, UInt, Pointer[NSError];
overload externalInstanceMethod(static NSDocument, static #"writeToURL:ofType:forSaveOperation:originalContentsURL:error:") = Bool, NSURL, NSString, UInt, NSURL, Pointer[NSError];
overload externalInstanceMethod(static NSDocument, static #"fileAttributesToWriteToURL:ofType:forSaveOperation:originalContentsURL:error:") = NSDictionary, NSURL, NSString, UInt, NSURL, Pointer[NSError];
overload externalInstanceMethod(static NSDocument, static #"keepBackupFile") = Bool;
overload externalInstanceMethod(static NSDocument, static #"saveDocument:") = Void, Id;
overload externalInstanceMethod(static NSDocument, static #"saveDocumentAs:") = Void, Id;
overload externalInstanceMethod(static NSDocument, static #"saveDocumentTo:") = Void, Id;
overload externalInstanceMethod(static NSDocument, static #"saveDocumentWithDelegate:didSaveSelector:contextInfo:") = Void, Id, SelectorHandle, RawPointer;
overload externalInstanceMethod(static NSDocument, static #"runModalSavePanelForSaveOperation:delegate:didSaveSelector:contextInfo:") = Void, UInt, Id, SelectorHandle, RawPointer;
overload externalInstanceMethod(static NSDocument, static #"shouldRunSavePanelWithAccessoryView") = Bool;
overload externalInstanceMethod(static NSDocument, static #"prepareSavePanel:") = Bool, NSSavePanel;
overload externalInstanceMethod(static NSDocument, static #"fileNameExtensionWasHiddenInLastRunSavePanel") = Bool;
overload externalInstanceMethod(static NSDocument, static #"fileTypeFromLastRunSavePanel") = NSString;
overload externalInstanceMethod(static NSDocument, static #"saveToURL:ofType:forSaveOperation:delegate:didSaveSelector:contextInfo:") = Void, NSURL, NSString, UInt, Id, SelectorHandle, RawPointer;
overload externalInstanceMethod(static NSDocument, static #"saveToURL:ofType:forSaveOperation:error:") = Bool, NSURL, NSString, UInt, Pointer[NSError];
overload externalInstanceMethod(static NSDocument, static #"hasUnautosavedChanges") = Bool;
overload externalInstanceMethod(static NSDocument, static #"autosaveDocumentWithDelegate:didAutosaveSelector:contextInfo:") = Void, Id, SelectorHandle, RawPointer;
overload externalInstanceMethod(static NSDocument, static #"autosavingFileType") = NSString;
overload externalInstanceMethod(static NSDocument, static #"setAutosavedContentsFileURL:") = Void, NSURL;
overload externalInstanceMethod(static NSDocument, static #"autosavedContentsFileURL") = NSURL;
overload externalInstanceMethod(static NSDocument, static #"canCloseDocumentWithDelegate:shouldCloseSelector:contextInfo:") = Void, Id, SelectorHandle, RawPointer;
overload externalInstanceMethod(static NSDocument, static #"close") = Void;
overload externalInstanceMethod(static NSDocument, static #"runPageLayout:") = Void, Id;
overload externalInstanceMethod(static NSDocument, static #"runModalPageLayoutWithPrintInfo:delegate:didRunSelector:contextInfo:") = Void, NSPrintInfo, Id, SelectorHandle, RawPointer;
overload externalInstanceMethod(static NSDocument, static #"preparePageLayout:") = Bool, NSPageLayout;
overload externalInstanceMethod(static NSDocument, static #"shouldChangePrintInfo:") = Bool, NSPrintInfo;
overload externalInstanceMethod(static NSDocument, static #"setPrintInfo:") = Void, NSPrintInfo;
overload externalInstanceMethod(static NSDocument, static #"printInfo") = NSPrintInfo;
overload externalInstanceMethod(static NSDocument, static #"printDocument:") = Void, Id;
overload externalInstanceMethod(static NSDocument, static #"printDocumentWithSettings:showPrintPanel:delegate:didPrintSelector:contextInfo:") = Void, NSDictionary, Bool, Id, SelectorHandle, RawPointer;
overload externalInstanceMethod(static NSDocument, static #"printOperationWithSettings:error:") = NSPrintOperation, NSDictionary, Pointer[NSError];
overload externalInstanceMethod(static NSDocument, static #"runModalPrintOperation:delegate:didRunSelector:contextInfo:") = Void, NSPrintOperation, Id, SelectorHandle, RawPointer;
overload externalInstanceMethod(static NSDocument, static #"isDocumentEdited") = Bool;
overload externalInstanceMethod(static NSDocument, static #"updateChangeCount:") = Void, UInt;
overload externalInstanceMethod(static NSDocument, static #"setUndoManager:") = Void, NSUndoManager;
overload externalInstanceMethod(static NSDocument, static #"undoManager") = NSUndoManager;
overload externalInstanceMethod(static NSDocument, static #"setHasUndoManager:") = Void, Bool;
overload externalInstanceMethod(static NSDocument, static #"hasUndoManager") = Bool;
overload externalInstanceMethod(static NSDocument, static #"presentError:modalForWindow:delegate:didPresentSelector:contextInfo:") = Void, NSError, NSWindow, Id, SelectorHandle, RawPointer;
overload externalInstanceMethod(static NSDocument, static #"presentError:") = Bool, NSError;
overload externalInstanceMethod(static NSDocument, static #"willPresentError:") = NSError, NSError;
overload externalInstanceMethod(static NSDocument, static #"makeWindowControllers") = Void;
overload externalInstanceMethod(static NSDocument, static #"windowNibName") = NSString;
overload externalInstanceMethod(static NSDocument, static #"windowControllerWillLoadNib:") = Void, NSWindowController;
overload externalInstanceMethod(static NSDocument, static #"windowControllerDidLoadNib:") = Void, NSWindowController;
overload externalInstanceMethod(static NSDocument, static #"setWindow:") = Void, NSWindow;
overload externalInstanceMethod(static NSDocument, static #"addWindowController:") = Void, NSWindowController;
overload externalInstanceMethod(static NSDocument, static #"removeWindowController:") = Void, NSWindowController;
overload externalInstanceMethod(static NSDocument, static #"showWindows") = Void;
overload externalInstanceMethod(static NSDocument, static #"windowControllers") = NSArray;
overload externalInstanceMethod(static NSDocument, static #"shouldCloseWindowController:delegate:shouldCloseSelector:contextInfo:") = Void, NSWindowController, Id, SelectorHandle, RawPointer;
overload externalInstanceMethod(static NSDocument, static #"displayName") = NSString;
overload externalInstanceMethod(static NSDocument, static #"windowForSheet") = NSWindow;
overload externalClassMethod(static NSDocument, static #"readableTypes") = NSArray;
overload externalClassMethod(static NSDocument, static #"writableTypes") = NSArray;
overload externalClassMethod(static NSDocument, static #"isNativeType:") = Bool, NSString;
overload externalInstanceMethod(static NSDocument, static #"writableTypesForSaveOperation:") = NSArray, UInt;
overload externalInstanceMethod(static NSDocument, static #"fileNameExtensionForType:saveOperation:") = NSString, NSString, UInt;
overload externalInstanceMethod(static NSDocument, static #"validateUserInterfaceItem:") = Bool, Id;
overload externalInstanceMethod(static NSDocument, static #"dataRepresentationOfType:") = NSData, NSString;
overload externalInstanceMethod(static NSDocument, static #"fileAttributesToWriteToFile:ofType:saveOperation:") = NSDictionary, NSString, NSString, UInt;
overload externalInstanceMethod(static NSDocument, static #"fileName") = NSString;
overload externalInstanceMethod(static NSDocument, static #"fileWrapperRepresentationOfType:") = NSFileWrapper, NSString;
overload externalInstanceMethod(static NSDocument, static #"initWithContentsOfFile:ofType:") = Id, NSString, NSString;
overload externalInstanceMethod(static NSDocument, static #"initWithContentsOfURL:ofType:") = Id, NSURL, NSString;
overload externalInstanceMethod(static NSDocument, static #"loadDataRepresentation:ofType:") = Bool, NSData, NSString;
overload externalInstanceMethod(static NSDocument, static #"loadFileWrapperRepresentation:ofType:") = Bool, NSFileWrapper, NSString;
overload externalInstanceMethod(static NSDocument, static #"printShowingPrintPanel:") = Void, Bool;
overload externalInstanceMethod(static NSDocument, static #"readFromFile:ofType:") = Bool, NSString, NSString;
overload externalInstanceMethod(static NSDocument, static #"readFromURL:ofType:") = Bool, NSURL, NSString;
overload externalInstanceMethod(static NSDocument, static #"revertToSavedFromFile:ofType:") = Bool, NSString, NSString;
overload externalInstanceMethod(static NSDocument, static #"revertToSavedFromURL:ofType:") = Bool, NSURL, NSString;
overload externalInstanceMethod(static NSDocument, static #"runModalPageLayoutWithPrintInfo:") = Int, NSPrintInfo;
overload externalInstanceMethod(static NSDocument, static #"saveToFile:saveOperation:delegate:didSaveSelector:contextInfo:") = Void, NSString, UInt, Id, SelectorHandle, RawPointer;
overload externalInstanceMethod(static NSDocument, static #"setFileName:") = Void, NSString;
overload externalInstanceMethod(static NSDocument, static #"writeToFile:ofType:") = Bool, NSString, NSString;
overload externalInstanceMethod(static NSDocument, static #"writeToFile:ofType:originalFile:saveOperation:") = Bool, NSString, NSString, NSString, UInt;
overload externalInstanceMethod(static NSDocument, static #"writeToURL:ofType:") = Bool, NSURL, NSString;
overload externalInstanceMethod(static NSDocument, static #"writeWithBackupToFile:ofType:saveOperation:") = Bool, NSString, NSString, UInt;
overload externalInstanceMethod(static NSDocument, static #"lastComponentOfFileName") = NSString;
overload externalInstanceMethod(static NSDocument, static #"setLastComponentOfFileName:") = Void, NSString;
overload externalInstanceMethod(static NSDocument, static #"handleSaveScriptCommand:") = Id, NSScriptCommand;
overload externalInstanceMethod(static NSDocument, static #"handleCloseScriptCommand:") = Id, NSCloseCommand;
overload externalInstanceMethod(static NSDocument, static #"handlePrintScriptCommand:") = Id, NSScriptCommand;
overload externalInstanceMethod(static NSDocument, static #"objectSpecifier") = NSScriptObjectSpecifier;

record NSDocumentController = externalClass(NSObject);
overload externalInstanceMethod(static NSDocumentController, static #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static NSDocumentController, static #"initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(static NSDocumentController, static #"validateUserInterfaceItem:") = Bool, Id;
overload externalClassMethod(static NSDocumentController, static #"sharedDocumentController") = Id;
overload externalInstanceMethod(static NSDocumentController, static #"init") = Id;
overload externalInstanceMethod(static NSDocumentController, static #"documents") = NSArray;
overload externalInstanceMethod(static NSDocumentController, static #"currentDocument") = Id;
overload externalInstanceMethod(static NSDocumentController, static #"currentDirectory") = NSString;
overload externalInstanceMethod(static NSDocumentController, static #"documentForURL:") = Id, NSURL;
overload externalInstanceMethod(static NSDocumentController, static #"documentForWindow:") = Id, NSWindow;
overload externalInstanceMethod(static NSDocumentController, static #"addDocument:") = Void, NSDocument;
overload externalInstanceMethod(static NSDocumentController, static #"removeDocument:") = Void, NSDocument;
overload externalInstanceMethod(static NSDocumentController, static #"newDocument:") = Void, Id;
overload externalInstanceMethod(static NSDocumentController, static #"openUntitledDocumentAndDisplay:error:") = Id, Bool, Pointer[NSError];
overload externalInstanceMethod(static NSDocumentController, static #"makeUntitledDocumentOfType:error:") = Id, NSString, Pointer[NSError];
overload externalInstanceMethod(static NSDocumentController, static #"openDocument:") = Void, Id;
overload externalInstanceMethod(static NSDocumentController, static #"URLsFromRunningOpenPanel") = NSArray;
overload externalInstanceMethod(static NSDocumentController, static #"runModalOpenPanel:forTypes:") = Int, NSOpenPanel, NSArray;
overload externalInstanceMethod(static NSDocumentController, static #"openDocumentWithContentsOfURL:display:error:") = Id, NSURL, Bool, Pointer[NSError];
overload externalInstanceMethod(static NSDocumentController, static #"makeDocumentWithContentsOfURL:ofType:error:") = Id, NSURL, NSString, Pointer[NSError];
overload externalInstanceMethod(static NSDocumentController, static #"reopenDocumentForURL:withContentsOfURL:error:") = Bool, NSURL, NSURL, Pointer[NSError];
overload externalInstanceMethod(static NSDocumentController, static #"makeDocumentForURL:withContentsOfURL:ofType:error:") = Id, NSURL, NSURL, NSString, Pointer[NSError];
overload externalInstanceMethod(static NSDocumentController, static #"setAutosavingDelay:") = Void, Double;
overload externalInstanceMethod(static NSDocumentController, static #"autosavingDelay") = Double;
overload externalInstanceMethod(static NSDocumentController, static #"saveAllDocuments:") = Void, Id;
overload externalInstanceMethod(static NSDocumentController, static #"hasEditedDocuments") = Bool;
overload externalInstanceMethod(static NSDocumentController, static #"reviewUnsavedDocumentsWithAlertTitle:cancellable:delegate:didReviewAllSelector:contextInfo:") = Void, NSString, Bool, Id, SelectorHandle, RawPointer;
overload externalInstanceMethod(static NSDocumentController, static #"closeAllDocumentsWithDelegate:didCloseAllSelector:contextInfo:") = Void, Id, SelectorHandle, RawPointer;
overload externalInstanceMethod(static NSDocumentController, static #"presentError:modalForWindow:delegate:didPresentSelector:contextInfo:") = Void, NSError, NSWindow, Id, SelectorHandle, RawPointer;
overload externalInstanceMethod(static NSDocumentController, static #"presentError:") = Bool, NSError;
overload externalInstanceMethod(static NSDocumentController, static #"willPresentError:") = NSError, NSError;
overload externalInstanceMethod(static NSDocumentController, static #"maximumRecentDocumentCount") = UInt;
overload externalInstanceMethod(static NSDocumentController, static #"clearRecentDocuments:") = Void, Id;
overload externalInstanceMethod(static NSDocumentController, static #"noteNewRecentDocument:") = Void, NSDocument;
overload externalInstanceMethod(static NSDocumentController, static #"noteNewRecentDocumentURL:") = Void, NSURL;
overload externalInstanceMethod(static NSDocumentController, static #"recentDocumentURLs") = NSArray;
overload externalInstanceMethod(static NSDocumentController, static #"defaultType") = NSString;
overload externalInstanceMethod(static NSDocumentController, static #"typeForContentsOfURL:error:") = NSString, NSURL, Pointer[NSError];
overload externalInstanceMethod(static NSDocumentController, static #"documentClassNames") = NSArray;
overload externalInstanceMethod(static NSDocumentController, static #"documentClassForType:") = Id, NSString;
overload externalInstanceMethod(static NSDocumentController, static #"displayNameForType:") = NSString, NSString;
overload externalInstanceMethod(static NSDocumentController, static #"validateUserInterfaceItem:") = Bool, Id;
overload externalInstanceMethod(static NSDocumentController, static #"fileExtensionsFromType:") = NSArray, NSString;
overload externalInstanceMethod(static NSDocumentController, static #"typeFromFileExtension:") = NSString, NSString;
overload externalInstanceMethod(static NSDocumentController, static #"documentForFileName:") = Id, NSString;
overload externalInstanceMethod(static NSDocumentController, static #"fileNamesFromRunningOpenPanel") = NSArray;
overload externalInstanceMethod(static NSDocumentController, static #"makeDocumentWithContentsOfFile:ofType:") = Id, NSString, NSString;
overload externalInstanceMethod(static NSDocumentController, static #"makeDocumentWithContentsOfURL:ofType:") = Id, NSURL, NSString;
overload externalInstanceMethod(static NSDocumentController, static #"makeUntitledDocumentOfType:") = Id, NSString;
overload externalInstanceMethod(static NSDocumentController, static #"openDocumentWithContentsOfFile:display:") = Id, NSString, Bool;
overload externalInstanceMethod(static NSDocumentController, static #"openDocumentWithContentsOfURL:display:") = Id, NSURL, Bool;
overload externalInstanceMethod(static NSDocumentController, static #"openUntitledDocumentOfType:display:") = Id, NSString, Bool;
overload externalInstanceMethod(static NSDocumentController, static #"setShouldCreateUI:") = Void, Bool;
overload externalInstanceMethod(static NSDocumentController, static #"shouldCreateUI") = Bool;

record NSDrawer = externalClass(NSResponder);
overload externalInstanceMethod(static NSDrawer, static #"initWithContentSize:preferredEdge:") = Id, NSSize, NSRectEdge;
overload externalInstanceMethod(static NSDrawer, static #"setParentWindow:") = Void, NSWindow;
overload externalInstanceMethod(static NSDrawer, static #"parentWindow") = NSWindow;
overload externalInstanceMethod(static NSDrawer, static #"setContentView:") = Void, NSView;
overload externalInstanceMethod(static NSDrawer, static #"contentView") = NSView;
overload externalInstanceMethod(static NSDrawer, static #"setPreferredEdge:") = Void, NSRectEdge;
overload externalInstanceMethod(static NSDrawer, static #"preferredEdge") = NSRectEdge;
overload externalInstanceMethod(static NSDrawer, static #"setDelegate:") = Void, Id;
overload externalInstanceMethod(static NSDrawer, static #"delegate") = Id;
overload externalInstanceMethod(static NSDrawer, static #"open") = Void;
overload externalInstanceMethod(static NSDrawer, static #"openOnEdge:") = Void, NSRectEdge;
overload externalInstanceMethod(static NSDrawer, static #"close") = Void;
overload externalInstanceMethod(static NSDrawer, static #"open:") = Void, Id;
overload externalInstanceMethod(static NSDrawer, static #"close:") = Void, Id;
overload externalInstanceMethod(static NSDrawer, static #"toggle:") = Void, Id;
overload externalInstanceMethod(static NSDrawer, static #"state") = Int;
overload externalInstanceMethod(static NSDrawer, static #"edge") = NSRectEdge;
overload externalInstanceMethod(static NSDrawer, static #"setContentSize:") = Void, NSSize;
overload externalInstanceMethod(static NSDrawer, static #"contentSize") = NSSize;
overload externalInstanceMethod(static NSDrawer, static #"setMinContentSize:") = Void, NSSize;
overload externalInstanceMethod(static NSDrawer, static #"minContentSize") = NSSize;
overload externalInstanceMethod(static NSDrawer, static #"setMaxContentSize:") = Void, NSSize;
overload externalInstanceMethod(static NSDrawer, static #"maxContentSize") = NSSize;
overload externalInstanceMethod(static NSDrawer, static #"setLeadingOffset:") = Void, Float;
overload externalInstanceMethod(static NSDrawer, static #"leadingOffset") = Float;
overload externalInstanceMethod(static NSDrawer, static #"setTrailingOffset:") = Void, Float;
overload externalInstanceMethod(static NSDrawer, static #"trailingOffset") = Float;

record NSEPSImageRep = externalClass(NSImageRep);
overload externalClassMethod(static NSEPSImageRep, static #"imageRepWithData:") = Id, NSData;
overload externalInstanceMethod(static NSEPSImageRep, static #"initWithData:") = Id, NSData;
overload externalInstanceMethod(static NSEPSImageRep, static #"prepareGState") = Void;
overload externalInstanceMethod(static NSEPSImageRep, static #"EPSRepresentation") = NSData;
overload externalInstanceMethod(static NSEPSImageRep, static #"boundingBox") = NSRect;

record NSEvent = externalClass(NSObject);
overload externalInstanceMethod(static NSEvent, static #"copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(static NSEvent, static #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static NSEvent, static #"initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(static NSEvent, static #"type") = UInt;
overload externalInstanceMethod(static NSEvent, static #"modifierFlags") = UInt;
overload externalInstanceMethod(static NSEvent, static #"timestamp") = Double;
overload externalInstanceMethod(static NSEvent, static #"window") = NSWindow;
overload externalInstanceMethod(static NSEvent, static #"windowNumber") = Int;
overload externalInstanceMethod(static NSEvent, static #"context") = NSGraphicsContext;
overload externalInstanceMethod(static NSEvent, static #"clickCount") = Int;
overload externalInstanceMethod(static NSEvent, static #"buttonNumber") = Int;
overload externalInstanceMethod(static NSEvent, static #"eventNumber") = Int;
overload externalInstanceMethod(static NSEvent, static #"pressure") = Float;
overload externalInstanceMethod(static NSEvent, static #"locationInWindow") = NSPoint;
overload externalInstanceMethod(static NSEvent, static #"deltaX") = Float;
overload externalInstanceMethod(static NSEvent, static #"deltaY") = Float;
overload externalInstanceMethod(static NSEvent, static #"deltaZ") = Float;
overload externalInstanceMethod(static NSEvent, static #"characters") = NSString;
overload externalInstanceMethod(static NSEvent, static #"charactersIgnoringModifiers") = NSString;
overload externalInstanceMethod(static NSEvent, static #"isARepeat") = Bool;
overload externalInstanceMethod(static NSEvent, static #"keyCode") = UShort;
overload externalInstanceMethod(static NSEvent, static #"trackingNumber") = Int;
overload externalInstanceMethod(static NSEvent, static #"userData") = RawPointer;
overload externalInstanceMethod(static NSEvent, static #"trackingArea") = NSTrackingArea;
overload externalInstanceMethod(static NSEvent, static #"subtype") = Short;
overload externalInstanceMethod(static NSEvent, static #"data1") = Int;
overload externalInstanceMethod(static NSEvent, static #"data2") = Int;
overload externalInstanceMethod(static NSEvent, static #"eventRef") = RawPointer;
overload externalClassMethod(static NSEvent, static #"eventWithEventRef:") = NSEvent, RawPointer;
overload externalInstanceMethod(static NSEvent, static #"CGEvent") = CGEventRef;
overload externalClassMethod(static NSEvent, static #"eventWithCGEvent:") = NSEvent, CGEventRef;
overload externalClassMethod(static NSEvent, static #"setMouseCoalescingEnabled:") = Void, Bool;
overload externalClassMethod(static NSEvent, static #"isMouseCoalescingEnabled") = Bool;
overload externalInstanceMethod(static NSEvent, static #"magnification") = Float;
overload externalInstanceMethod(static NSEvent, static #"deviceID") = UInt;
overload externalInstanceMethod(static NSEvent, static #"rotation") = Float;
overload externalInstanceMethod(static NSEvent, static #"absoluteX") = Int;
overload externalInstanceMethod(static NSEvent, static #"absoluteY") = Int;
overload externalInstanceMethod(static NSEvent, static #"absoluteZ") = Int;
overload externalInstanceMethod(static NSEvent, static #"buttonMask") = UInt;
overload externalInstanceMethod(static NSEvent, static #"tilt") = NSPoint;
overload externalInstanceMethod(static NSEvent, static #"tangentialPressure") = Float;
overload externalInstanceMethod(static NSEvent, static #"vendorDefined") = Id;
overload externalInstanceMethod(static NSEvent, static #"vendorID") = UInt;
overload externalInstanceMethod(static NSEvent, static #"tabletID") = UInt;
overload externalInstanceMethod(static NSEvent, static #"pointingDeviceID") = UInt;
overload externalInstanceMethod(static NSEvent, static #"systemTabletID") = UInt;
overload externalInstanceMethod(static NSEvent, static #"vendorPointingDeviceType") = UInt;
overload externalInstanceMethod(static NSEvent, static #"pointingDeviceSerialNumber") = UInt;
overload externalInstanceMethod(static NSEvent, static #"uniqueID") = UInt64;
overload externalInstanceMethod(static NSEvent, static #"capabilityMask") = UInt;
overload externalInstanceMethod(static NSEvent, static #"pointingDeviceType") = UInt;
overload externalInstanceMethod(static NSEvent, static #"isEnteringProximity") = Bool;
overload externalInstanceMethod(static NSEvent, static #"touchesMatchingPhase:inView:") = NSSet, UInt, NSView;
overload externalClassMethod(static NSEvent, static #"startPeriodicEventsAfterDelay:withPeriod:") = Void, Double, Double;
overload externalClassMethod(static NSEvent, static #"stopPeriodicEvents") = Void;
overload externalClassMethod(static NSEvent, static #"mouseEventWithType:location:modifierFlags:timestamp:windowNumber:context:eventNumber:clickCount:pressure:") = NSEvent, UInt, NSPoint, UInt, Double, Int, NSGraphicsContext, Int, Int, Float;
overload externalClassMethod(static NSEvent, static #"keyEventWithType:location:modifierFlags:timestamp:windowNumber:context:characters:charactersIgnoringModifiers:isARepeat:keyCode:") = NSEvent, UInt, NSPoint, UInt, Double, Int, NSGraphicsContext, NSString, NSString, Bool, UShort;
overload externalClassMethod(static NSEvent, static #"enterExitEventWithType:location:modifierFlags:timestamp:windowNumber:context:eventNumber:trackingNumber:userData:") = NSEvent, UInt, NSPoint, UInt, Double, Int, NSGraphicsContext, Int, Int, RawPointer;
overload externalClassMethod(static NSEvent, static #"otherEventWithType:location:modifierFlags:timestamp:windowNumber:context:subtype:data1:data2:") = NSEvent, UInt, NSPoint, UInt, Double, Int, NSGraphicsContext, Short, Int, Int;
overload externalClassMethod(static NSEvent, static #"mouseLocation") = NSPoint;
overload externalClassMethod(static NSEvent, static #"modifierFlags") = UInt;
overload externalClassMethod(static NSEvent, static #"pressedMouseButtons") = UInt;
overload externalClassMethod(static NSEvent, static #"doubleClickInterval") = Double;
overload externalClassMethod(static NSEvent, static #"keyRepeatDelay") = Double;
overload externalClassMethod(static NSEvent, static #"keyRepeatInterval") = Double;
overload externalClassMethod(static NSEvent, static #"addGlobalMonitorForEventsMatchingMask:handler:") = Id, UInt64, UnknownType;
overload externalClassMethod(static NSEvent, static #"addLocalMonitorForEventsMatchingMask:handler:") = Id, UInt64, UnknownType;
overload externalClassMethod(static NSEvent, static #"removeMonitor:") = Void, Id;

record NSFileWrapper = externalClass(NSObject);
overload externalInstanceMethod(static NSFileWrapper, static #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static NSFileWrapper, static #"initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(static NSFileWrapper, static #"initWithURL:options:error:") = Id, NSURL, UInt, Pointer[NSError];
overload externalInstanceMethod(static NSFileWrapper, static #"initDirectoryWithFileWrappers:") = Id, NSDictionary;
overload externalInstanceMethod(static NSFileWrapper, static #"initRegularFileWithContents:") = Id, NSData;
overload externalInstanceMethod(static NSFileWrapper, static #"initSymbolicLinkWithDestinationURL:") = Id, NSURL;
overload externalInstanceMethod(static NSFileWrapper, static #"initWithSerializedRepresentation:") = Id, NSData;
overload externalInstanceMethod(static NSFileWrapper, static #"isDirectory") = Bool;
overload externalInstanceMethod(static NSFileWrapper, static #"isRegularFile") = Bool;
overload externalInstanceMethod(static NSFileWrapper, static #"isSymbolicLink") = Bool;
overload externalInstanceMethod(static NSFileWrapper, static #"setPreferredFilename:") = Void, NSString;
overload externalInstanceMethod(static NSFileWrapper, static #"preferredFilename") = NSString;
overload externalInstanceMethod(static NSFileWrapper, static #"setFilename:") = Void, NSString;
overload externalInstanceMethod(static NSFileWrapper, static #"filename") = NSString;
overload externalInstanceMethod(static NSFileWrapper, static #"setFileAttributes:") = Void, NSDictionary;
overload externalInstanceMethod(static NSFileWrapper, static #"fileAttributes") = NSDictionary;
overload externalInstanceMethod(static NSFileWrapper, static #"setIcon:") = Void, NSImage;
overload externalInstanceMethod(static NSFileWrapper, static #"icon") = NSImage;
overload externalInstanceMethod(static NSFileWrapper, static #"matchesContentsOfURL:") = Bool, NSURL;
overload externalInstanceMethod(static NSFileWrapper, static #"readFromURL:options:error:") = Bool, NSURL, UInt, Pointer[NSError];
overload externalInstanceMethod(static NSFileWrapper, static #"writeToURL:options:originalContentsURL:error:") = Bool, NSURL, UInt, NSURL, Pointer[NSError];
overload externalInstanceMethod(static NSFileWrapper, static #"serializedRepresentation") = NSData;
overload externalInstanceMethod(static NSFileWrapper, static #"addFileWrapper:") = NSString, NSFileWrapper;
overload externalInstanceMethod(static NSFileWrapper, static #"addRegularFileWithContents:preferredFilename:") = NSString, NSData, NSString;
overload externalInstanceMethod(static NSFileWrapper, static #"removeFileWrapper:") = Void, NSFileWrapper;
overload externalInstanceMethod(static NSFileWrapper, static #"fileWrappers") = NSDictionary;
overload externalInstanceMethod(static NSFileWrapper, static #"keyForFileWrapper:") = NSString, NSFileWrapper;
overload externalInstanceMethod(static NSFileWrapper, static #"regularFileContents") = NSData;
overload externalInstanceMethod(static NSFileWrapper, static #"symbolicLinkDestinationURL") = NSURL;
overload externalInstanceMethod(static NSFileWrapper, static #"initWithPath:") = Id, NSString;
overload externalInstanceMethod(static NSFileWrapper, static #"initSymbolicLinkWithDestination:") = Id, NSString;
overload externalInstanceMethod(static NSFileWrapper, static #"needsToBeUpdatedFromPath:") = Bool, NSString;
overload externalInstanceMethod(static NSFileWrapper, static #"updateFromPath:") = Bool, NSString;
overload externalInstanceMethod(static NSFileWrapper, static #"writeToFile:atomically:updateFilenames:") = Bool, NSString, Bool, Bool;
overload externalInstanceMethod(static NSFileWrapper, static #"addFileWithPath:") = NSString, NSString;
overload externalInstanceMethod(static NSFileWrapper, static #"addSymbolicLinkWithDestination:preferredFilename:") = NSString, NSString, NSString;
overload externalInstanceMethod(static NSFileWrapper, static #"symbolicLinkDestination") = NSString;

record NSFont = externalClass(NSObject);
overload externalInstanceMethod(static NSFont, static #"copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(static NSFont, static #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static NSFont, static #"initWithCoder:") = Id, NSCoder;
overload externalClassMethod(static NSFont, static #"fontWithName:size:") = NSFont, NSString, Float;
overload externalClassMethod(static NSFont, static #"fontWithName:matrix:") = NSFont, NSString, Pointer[Float];
overload externalClassMethod(static NSFont, static #"fontWithDescriptor:size:") = NSFont, NSFontDescriptor, Float;
overload externalClassMethod(static NSFont, static #"fontWithDescriptor:textTransform:") = NSFont, NSFontDescriptor, NSAffineTransform;
overload externalClassMethod(static NSFont, static #"userFontOfSize:") = NSFont, Float;
overload externalClassMethod(static NSFont, static #"userFixedPitchFontOfSize:") = NSFont, Float;
overload externalClassMethod(static NSFont, static #"setUserFont:") = Void, NSFont;
overload externalClassMethod(static NSFont, static #"setUserFixedPitchFont:") = Void, NSFont;
overload externalClassMethod(static NSFont, static #"systemFontOfSize:") = NSFont, Float;
overload externalClassMethod(static NSFont, static #"boldSystemFontOfSize:") = NSFont, Float;
overload externalClassMethod(static NSFont, static #"labelFontOfSize:") = NSFont, Float;
overload externalClassMethod(static NSFont, static #"titleBarFontOfSize:") = NSFont, Float;
overload externalClassMethod(static NSFont, static #"menuFontOfSize:") = NSFont, Float;
overload externalClassMethod(static NSFont, static #"menuBarFontOfSize:") = NSFont, Float;
overload externalClassMethod(static NSFont, static #"messageFontOfSize:") = NSFont, Float;
overload externalClassMethod(static NSFont, static #"paletteFontOfSize:") = NSFont, Float;
overload externalClassMethod(static NSFont, static #"toolTipsFontOfSize:") = NSFont, Float;
overload externalClassMethod(static NSFont, static #"controlContentFontOfSize:") = NSFont, Float;
overload externalClassMethod(static NSFont, static #"systemFontSize") = Float;
overload externalClassMethod(static NSFont, static #"smallSystemFontSize") = Float;
overload externalClassMethod(static NSFont, static #"labelFontSize") = Float;
overload externalClassMethod(static NSFont, static #"systemFontSizeForControlSize:") = Float, UInt;
overload externalInstanceMethod(static NSFont, static #"fontName") = NSString;
overload externalInstanceMethod(static NSFont, static #"pointSize") = Float;
overload externalInstanceMethod(static NSFont, static #"matrix") = Pointer[Float];
overload externalInstanceMethod(static NSFont, static #"familyName") = NSString;
overload externalInstanceMethod(static NSFont, static #"displayName") = NSString;
overload externalInstanceMethod(static NSFont, static #"fontDescriptor") = NSFontDescriptor;
overload externalInstanceMethod(static NSFont, static #"textTransform") = NSAffineTransform;
overload externalInstanceMethod(static NSFont, static #"numberOfGlyphs") = UInt;
overload externalInstanceMethod(static NSFont, static #"mostCompatibleStringEncoding") = UInt;
overload externalInstanceMethod(static NSFont, static #"glyphWithName:") = UInt, NSString;
overload externalInstanceMethod(static NSFont, static #"coveredCharacterSet") = NSCharacterSet;
overload externalInstanceMethod(static NSFont, static #"boundingRectForFont") = NSRect;
overload externalInstanceMethod(static NSFont, static #"maximumAdvancement") = NSSize;
overload externalInstanceMethod(static NSFont, static #"ascender") = Float;
overload externalInstanceMethod(static NSFont, static #"descender") = Float;
overload externalInstanceMethod(static NSFont, static #"leading") = Float;
overload externalInstanceMethod(static NSFont, static #"underlinePosition") = Float;
overload externalInstanceMethod(static NSFont, static #"underlineThickness") = Float;
overload externalInstanceMethod(static NSFont, static #"italicAngle") = Float;
overload externalInstanceMethod(static NSFont, static #"capHeight") = Float;
overload externalInstanceMethod(static NSFont, static #"xHeight") = Float;
overload externalInstanceMethod(static NSFont, static #"isFixedPitch") = Bool;
overload externalInstanceMethod(static NSFont, static #"boundingRectForGlyph:") = NSRect, UInt;
overload externalInstanceMethod(static NSFont, static #"advancementForGlyph:") = NSSize, UInt;
overload externalInstanceMethod(static NSFont, static #"getBoundingRects:forGlyphs:count:") = Void, NSRectArray, Pointer[UInt], UInt;
overload externalInstanceMethod(static NSFont, static #"getAdvancements:forGlyphs:count:") = Void, NSSizeArray, Pointer[UInt], UInt;
overload externalInstanceMethod(static NSFont, static #"getAdvancements:forPackedGlyphs:length:") = Void, NSSizeArray, RawPointer, UInt;
overload externalInstanceMethod(static NSFont, static #"set") = Void;
overload externalInstanceMethod(static NSFont, static #"setInContext:") = Void, NSGraphicsContext;
overload externalInstanceMethod(static NSFont, static #"printerFont") = NSFont;
overload externalInstanceMethod(static NSFont, static #"screenFont") = NSFont;
overload externalInstanceMethod(static NSFont, static #"screenFontWithRenderingMode:") = NSFont, UInt;
overload externalInstanceMethod(static NSFont, static #"renderingMode") = UInt;
overload externalClassMethod(static NSFont, static #"useFont:") = Void, NSString;
overload externalInstanceMethod(static NSFont, static #"widthOfString:") = Float, NSString;
overload externalInstanceMethod(static NSFont, static #"isBaseFont") = Bool;
overload externalInstanceMethod(static NSFont, static #"afmDictionary") = NSDictionary;
overload externalInstanceMethod(static NSFont, static #"glyphIsEncoded:") = Bool, UInt;
overload externalInstanceMethod(static NSFont, static #"defaultLineHeightForFont") = Float;
overload externalClassMethod(static NSFont, static #"preferredFontNames") = NSArray;
overload externalClassMethod(static NSFont, static #"setPreferredFontNames:") = Void, NSArray;
overload externalInstanceMethod(static NSFont, static #"encodingScheme") = NSString;
overload externalInstanceMethod(static NSFont, static #"glyphPacking") = UInt;
overload externalInstanceMethod(static NSFont, static #"positionOfGlyph:precededByGlyph:isNominal:") = NSPoint, UInt, UInt, Pointer[Bool];
overload externalInstanceMethod(static NSFont, static #"positionsForCompositeSequence:numberOfGlyphs:pointArray:") = Int, Pointer[UInt], Int, NSPointArray;
overload externalInstanceMethod(static NSFont, static #"positionOfGlyph:struckOverGlyph:metricsExist:") = NSPoint, UInt, UInt, Pointer[Bool];
overload externalInstanceMethod(static NSFont, static #"positionOfGlyph:struckOverRect:metricsExist:") = NSPoint, UInt, NSRect, Pointer[Bool];
overload externalInstanceMethod(static NSFont, static #"positionOfGlyph:forCharacter:struckOverRect:") = NSPoint, UInt, UShort, NSRect;
overload externalInstanceMethod(static NSFont, static #"positionOfGlyph:withRelation:toBaseGlyph:totalAdvancement:metricsExist:") = NSPoint, UInt, UInt, UInt, NSSizePointer, Pointer[Bool];

record NSFontDescriptor = externalClass(NSObject);
overload externalInstanceMethod(static NSFontDescriptor, static #"copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(static NSFontDescriptor, static #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static NSFontDescriptor, static #"initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(static NSFontDescriptor, static #"postscriptName") = NSString;
overload externalInstanceMethod(static NSFontDescriptor, static #"pointSize") = Float;
overload externalInstanceMethod(static NSFontDescriptor, static #"matrix") = NSAffineTransform;
overload externalInstanceMethod(static NSFontDescriptor, static #"symbolicTraits") = UInt;
overload externalInstanceMethod(static NSFontDescriptor, static #"objectForKey:") = Id, NSString;
overload externalInstanceMethod(static NSFontDescriptor, static #"fontAttributes") = NSDictionary;
overload externalClassMethod(static NSFontDescriptor, static #"fontDescriptorWithFontAttributes:") = NSFontDescriptor, NSDictionary;
overload externalClassMethod(static NSFontDescriptor, static #"fontDescriptorWithName:size:") = NSFontDescriptor, NSString, Float;
overload externalClassMethod(static NSFontDescriptor, static #"fontDescriptorWithName:matrix:") = NSFontDescriptor, NSString, NSAffineTransform;
overload externalInstanceMethod(static NSFontDescriptor, static #"initWithFontAttributes:") = Id, NSDictionary;
overload externalInstanceMethod(static NSFontDescriptor, static #"matchingFontDescriptorsWithMandatoryKeys:") = NSArray, NSSet;
overload externalInstanceMethod(static NSFontDescriptor, static #"matchingFontDescriptorWithMandatoryKeys:") = NSFontDescriptor, NSSet;
overload externalInstanceMethod(static NSFontDescriptor, static #"fontDescriptorByAddingAttributes:") = NSFontDescriptor, NSDictionary;
overload externalInstanceMethod(static NSFontDescriptor, static #"fontDescriptorWithSymbolicTraits:") = NSFontDescriptor, UInt;
overload externalInstanceMethod(static NSFontDescriptor, static #"fontDescriptorWithSize:") = NSFontDescriptor, Float;
overload externalInstanceMethod(static NSFontDescriptor, static #"fontDescriptorWithMatrix:") = NSFontDescriptor, NSAffineTransform;
overload externalInstanceMethod(static NSFontDescriptor, static #"fontDescriptorWithFace:") = NSFontDescriptor, NSString;
overload externalInstanceMethod(static NSFontDescriptor, static #"fontDescriptorWithFamily:") = NSFontDescriptor, NSString;

record NSFontManager = externalClass(NSObject);
overload externalClassMethod(static NSFontManager, static #"setFontPanelFactory:") = Void, Id;
overload externalClassMethod(static NSFontManager, static #"setFontManagerFactory:") = Void, Id;
overload externalClassMethod(static NSFontManager, static #"sharedFontManager") = NSFontManager;
overload externalInstanceMethod(static NSFontManager, static #"isMultiple") = Bool;
overload externalInstanceMethod(static NSFontManager, static #"selectedFont") = NSFont;
overload externalInstanceMethod(static NSFontManager, static #"setSelectedFont:isMultiple:") = Void, NSFont, Bool;
overload externalInstanceMethod(static NSFontManager, static #"setFontMenu:") = Void, NSMenu;
overload externalInstanceMethod(static NSFontManager, static #"fontMenu:") = NSMenu, Bool;
overload externalInstanceMethod(static NSFontManager, static #"fontPanel:") = NSFontPanel, Bool;
overload externalInstanceMethod(static NSFontManager, static #"fontWithFamily:traits:weight:size:") = NSFont, NSString, UInt, Int, Float;
overload externalInstanceMethod(static NSFontManager, static #"traitsOfFont:") = UInt, NSFont;
overload externalInstanceMethod(static NSFontManager, static #"weightOfFont:") = Int, NSFont;
overload externalInstanceMethod(static NSFontManager, static #"availableFonts") = NSArray;
overload externalInstanceMethod(static NSFontManager, static #"availableFontFamilies") = NSArray;
overload externalInstanceMethod(static NSFontManager, static #"availableMembersOfFontFamily:") = NSArray, NSString;
overload externalInstanceMethod(static NSFontManager, static #"convertFont:") = NSFont, NSFont;
overload externalInstanceMethod(static NSFontManager, static #"convertFont:toSize:") = NSFont, NSFont, Float;
overload externalInstanceMethod(static NSFontManager, static #"convertFont:toFace:") = NSFont, NSFont, NSString;
overload externalInstanceMethod(static NSFontManager, static #"convertFont:toFamily:") = NSFont, NSFont, NSString;
overload externalInstanceMethod(static NSFontManager, static #"convertFont:toHaveTrait:") = NSFont, NSFont, UInt;
overload externalInstanceMethod(static NSFontManager, static #"convertFont:toNotHaveTrait:") = NSFont, NSFont, UInt;
overload externalInstanceMethod(static NSFontManager, static #"convertWeight:ofFont:") = NSFont, Bool, NSFont;
overload externalInstanceMethod(static NSFontManager, static #"isEnabled") = Bool;
overload externalInstanceMethod(static NSFontManager, static #"setEnabled:") = Void, Bool;
overload externalInstanceMethod(static NSFontManager, static #"action") = SelectorHandle;
overload externalInstanceMethod(static NSFontManager, static #"setAction:") = Void, SelectorHandle;
overload externalInstanceMethod(static NSFontManager, static #"sendAction") = Bool;
overload externalInstanceMethod(static NSFontManager, static #"setDelegate:") = Void, Id;
overload externalInstanceMethod(static NSFontManager, static #"delegate") = Id;
overload externalInstanceMethod(static NSFontManager, static #"localizedNameForFamily:face:") = NSString, NSString, NSString;
overload externalInstanceMethod(static NSFontManager, static #"setSelectedAttributes:isMultiple:") = Void, NSDictionary, Bool;
overload externalInstanceMethod(static NSFontManager, static #"convertAttributes:") = NSDictionary, NSDictionary;
overload externalInstanceMethod(static NSFontManager, static #"availableFontNamesMatchingFontDescriptor:") = NSArray, NSFontDescriptor;
overload externalInstanceMethod(static NSFontManager, static #"collectionNames") = NSArray;
overload externalInstanceMethod(static NSFontManager, static #"fontDescriptorsInCollection:") = NSArray, NSString;
overload externalInstanceMethod(static NSFontManager, static #"addCollection:options:") = Bool, NSString, Int;
overload externalInstanceMethod(static NSFontManager, static #"removeCollection:") = Bool, NSString;
overload externalInstanceMethod(static NSFontManager, static #"addFontDescriptors:toCollection:") = Void, NSArray, NSString;
overload externalInstanceMethod(static NSFontManager, static #"removeFontDescriptor:fromCollection:") = Void, NSFontDescriptor, NSString;
overload externalInstanceMethod(static NSFontManager, static #"currentFontAction") = UInt;
overload externalInstanceMethod(static NSFontManager, static #"convertFontTraits:") = UInt, UInt;
overload externalInstanceMethod(static NSFontManager, static #"setTarget:") = Void, Id;
overload externalInstanceMethod(static NSFontManager, static #"target") = Id;
overload externalInstanceMethod(static NSFontManager, static #"fontNamed:hasTraits:") = Bool, NSString, UInt;
overload externalInstanceMethod(static NSFontManager, static #"availableFontNamesWithTraits:") = NSArray, UInt;
overload externalInstanceMethod(static NSFontManager, static #"addFontTrait:") = Void, Id;
overload externalInstanceMethod(static NSFontManager, static #"removeFontTrait:") = Void, Id;
overload externalInstanceMethod(static NSFontManager, static #"modifyFontViaPanel:") = Void, Id;
overload externalInstanceMethod(static NSFontManager, static #"modifyFont:") = Void, Id;
overload externalInstanceMethod(static NSFontManager, static #"orderFrontFontPanel:") = Void, Id;
overload externalInstanceMethod(static NSFontManager, static #"orderFrontStylesPanel:") = Void, Id;

record NSFontPanel = externalClass(NSPanel);
overload externalClassMethod(static NSFontPanel, static #"sharedFontPanel") = NSFontPanel;
overload externalClassMethod(static NSFontPanel, static #"sharedFontPanelExists") = Bool;
overload externalInstanceMethod(static NSFontPanel, static #"accessoryView") = NSView;
overload externalInstanceMethod(static NSFontPanel, static #"setAccessoryView:") = Void, NSView;
overload externalInstanceMethod(static NSFontPanel, static #"setPanelFont:isMultiple:") = Void, NSFont, Bool;
overload externalInstanceMethod(static NSFontPanel, static #"panelConvertFont:") = NSFont, NSFont;
overload externalInstanceMethod(static NSFontPanel, static #"worksWhenModal") = Bool;
overload externalInstanceMethod(static NSFontPanel, static #"isEnabled") = Bool;
overload externalInstanceMethod(static NSFontPanel, static #"setEnabled:") = Void, Bool;
overload externalInstanceMethod(static NSFontPanel, static #"reloadDefaultFontFamilies") = Void;

record NSForm = externalClass(NSMatrix);
overload externalInstanceMethod(static NSForm, static #"indexOfSelectedItem") = Int;
overload externalInstanceMethod(static NSForm, static #"setEntryWidth:") = Void, Float;
overload externalInstanceMethod(static NSForm, static #"setInterlineSpacing:") = Void, Float;
overload externalInstanceMethod(static NSForm, static #"setBordered:") = Void, Bool;
overload externalInstanceMethod(static NSForm, static #"setBezeled:") = Void, Bool;
overload externalInstanceMethod(static NSForm, static #"setTitleAlignment:") = Void, UInt;
overload externalInstanceMethod(static NSForm, static #"setTextAlignment:") = Void, UInt;
overload externalInstanceMethod(static NSForm, static #"setTitleFont:") = Void, NSFont;
overload externalInstanceMethod(static NSForm, static #"setTextFont:") = Void, NSFont;
overload externalInstanceMethod(static NSForm, static #"cellAtIndex:") = Id, Int;
overload externalInstanceMethod(static NSForm, static #"drawCellAtIndex:") = Void, Int;
overload externalInstanceMethod(static NSForm, static #"addEntry:") = NSFormCell, NSString;
overload externalInstanceMethod(static NSForm, static #"insertEntry:atIndex:") = NSFormCell, NSString, Int;
overload externalInstanceMethod(static NSForm, static #"removeEntryAtIndex:") = Void, Int;
overload externalInstanceMethod(static NSForm, static #"indexOfCellWithTag:") = Int, Int;
overload externalInstanceMethod(static NSForm, static #"selectTextAtIndex:") = Void, Int;
overload externalInstanceMethod(static NSForm, static #"setFrameSize:") = Void, NSSize;
overload externalInstanceMethod(static NSForm, static #"setTitleBaseWritingDirection:") = Void, Int;
overload externalInstanceMethod(static NSForm, static #"setTextBaseWritingDirection:") = Void, Int;

record NSFormCell = externalClass(NSActionCell);
overload externalInstanceMethod(static NSFormCell, static #"initTextCell:") = Id, NSString;
overload externalInstanceMethod(static NSFormCell, static #"titleWidth:") = Float, NSSize;
overload externalInstanceMethod(static NSFormCell, static #"titleWidth") = Float;
overload externalInstanceMethod(static NSFormCell, static #"setTitleWidth:") = Void, Float;
overload externalInstanceMethod(static NSFormCell, static #"title") = NSString;
overload externalInstanceMethod(static NSFormCell, static #"setTitle:") = Void, NSString;
overload externalInstanceMethod(static NSFormCell, static #"titleFont") = NSFont;
overload externalInstanceMethod(static NSFormCell, static #"setTitleFont:") = Void, NSFont;
overload externalInstanceMethod(static NSFormCell, static #"titleAlignment") = UInt;
overload externalInstanceMethod(static NSFormCell, static #"setTitleAlignment:") = Void, UInt;
overload externalInstanceMethod(static NSFormCell, static #"isOpaque") = Bool;
overload externalInstanceMethod(static NSFormCell, static #"setPlaceholderString:") = Void, NSString;
overload externalInstanceMethod(static NSFormCell, static #"placeholderString") = NSString;
overload externalInstanceMethod(static NSFormCell, static #"setPlaceholderAttributedString:") = Void, NSAttributedString;
overload externalInstanceMethod(static NSFormCell, static #"placeholderAttributedString") = NSAttributedString;
overload externalInstanceMethod(static NSFormCell, static #"titleBaseWritingDirection") = Int;
overload externalInstanceMethod(static NSFormCell, static #"setTitleBaseWritingDirection:") = Void, Int;
overload externalInstanceMethod(static NSFormCell, static #"setTitleWithMnemonic:") = Void, NSString;
overload externalInstanceMethod(static NSFormCell, static #"attributedTitle") = NSAttributedString;
overload externalInstanceMethod(static NSFormCell, static #"setAttributedTitle:") = Void, NSAttributedString;

record NSGlyphGenerator = externalClass(NSObject);
overload externalInstanceMethod(static NSGlyphGenerator, static #"generateGlyphsForGlyphStorage:desiredNumberOfCharacters:glyphIndex:characterIndex:") = Void, Id, UInt, Pointer[UInt], Pointer[UInt];
overload externalClassMethod(static NSGlyphGenerator, static #"sharedGlyphGenerator") = Id;

record NSGlyphInfo = externalClass(NSObject);
overload externalInstanceMethod(static NSGlyphInfo, static #"copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(static NSGlyphInfo, static #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static NSGlyphInfo, static #"initWithCoder:") = Id, NSCoder;
overload externalClassMethod(static NSGlyphInfo, static #"glyphInfoWithGlyphName:forFont:baseString:") = NSGlyphInfo, NSString, NSFont, NSString;
overload externalClassMethod(static NSGlyphInfo, static #"glyphInfoWithGlyph:forFont:baseString:") = NSGlyphInfo, UInt, NSFont, NSString;
overload externalClassMethod(static NSGlyphInfo, static #"glyphInfoWithCharacterIdentifier:collection:baseString:") = NSGlyphInfo, UInt, UInt, NSString;
overload externalInstanceMethod(static NSGlyphInfo, static #"glyphName") = NSString;
overload externalInstanceMethod(static NSGlyphInfo, static #"characterIdentifier") = UInt;
overload externalInstanceMethod(static NSGlyphInfo, static #"characterCollection") = UInt;

record NSGradient = externalClass(NSObject);
overload externalInstanceMethod(static NSGradient, static #"copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(static NSGradient, static #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static NSGradient, static #"initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(static NSGradient, static #"initWithStartingColor:endingColor:") = Id, NSColor, NSColor;
overload externalInstanceMethod(static NSGradient, static #"initWithColors:") = Id, NSArray;
overload externalVarargInstanceMethod(static NSGradient, static #"initWithColorsAndLocations:") = Id, NSColor;
overload externalInstanceMethod(static NSGradient, static #"initWithColors:atLocations:colorSpace:") = Id, NSArray, Pointer[Float], NSColorSpace;
overload externalInstanceMethod(static NSGradient, static #"drawFromPoint:toPoint:options:") = Void, NSPoint, NSPoint, UInt;
overload externalInstanceMethod(static NSGradient, static #"drawInRect:angle:") = Void, NSRect, Float;
overload externalInstanceMethod(static NSGradient, static #"drawInBezierPath:angle:") = Void, NSBezierPath, Float;
overload externalInstanceMethod(static NSGradient, static #"drawFromCenter:radius:toCenter:radius:options:") = Void, NSPoint, Float, NSPoint, Float, UInt;
overload externalInstanceMethod(static NSGradient, static #"drawInRect:relativeCenterPosition:") = Void, NSRect, NSPoint;
overload externalInstanceMethod(static NSGradient, static #"drawInBezierPath:relativeCenterPosition:") = Void, NSBezierPath, NSPoint;
overload externalInstanceMethod(static NSGradient, static #"colorSpace") = NSColorSpace;
overload externalInstanceMethod(static NSGradient, static #"numberOfColorStops") = Int;
overload externalInstanceMethod(static NSGradient, static #"getColor:location:atIndex:") = Void, Pointer[NSColor], Pointer[Float], Int;
overload externalInstanceMethod(static NSGradient, static #"interpolatedColorAtLocation:") = NSColor, Float;

record NSGraphicsContext = externalClass(NSObject);
overload externalClassMethod(static NSGraphicsContext, static #"graphicsContextWithAttributes:") = NSGraphicsContext, NSDictionary;
overload externalClassMethod(static NSGraphicsContext, static #"graphicsContextWithWindow:") = NSGraphicsContext, NSWindow;
overload externalClassMethod(static NSGraphicsContext, static #"graphicsContextWithBitmapImageRep:") = NSGraphicsContext, NSBitmapImageRep;
overload externalClassMethod(static NSGraphicsContext, static #"graphicsContextWithGraphicsPort:flipped:") = NSGraphicsContext, RawPointer, Bool;
overload externalClassMethod(static NSGraphicsContext, static #"currentContext") = NSGraphicsContext;
overload externalClassMethod(static NSGraphicsContext, static #"setCurrentContext:") = Void, NSGraphicsContext;
overload externalClassMethod(static NSGraphicsContext, static #"currentContextDrawingToScreen") = Bool;
overload externalClassMethod(static NSGraphicsContext, static #"saveGraphicsState") = Void;
overload externalClassMethod(static NSGraphicsContext, static #"restoreGraphicsState") = Void;
overload externalClassMethod(static NSGraphicsContext, static #"setGraphicsState:") = Void, Int;
overload externalInstanceMethod(static NSGraphicsContext, static #"attributes") = NSDictionary;
overload externalInstanceMethod(static NSGraphicsContext, static #"isDrawingToScreen") = Bool;
overload externalInstanceMethod(static NSGraphicsContext, static #"saveGraphicsState") = Void;
overload externalInstanceMethod(static NSGraphicsContext, static #"restoreGraphicsState") = Void;
overload externalInstanceMethod(static NSGraphicsContext, static #"flushGraphics") = Void;
overload externalInstanceMethod(static NSGraphicsContext, static #"graphicsPort") = RawPointer;
overload externalInstanceMethod(static NSGraphicsContext, static #"isFlipped") = Bool;
overload externalInstanceMethod(static NSGraphicsContext, static #"setShouldAntialias:") = Void, Bool;
overload externalInstanceMethod(static NSGraphicsContext, static #"shouldAntialias") = Bool;
overload externalInstanceMethod(static NSGraphicsContext, static #"setImageInterpolation:") = Void, UInt;
overload externalInstanceMethod(static NSGraphicsContext, static #"imageInterpolation") = UInt;
overload externalInstanceMethod(static NSGraphicsContext, static #"setPatternPhase:") = Void, NSPoint;
overload externalInstanceMethod(static NSGraphicsContext, static #"patternPhase") = NSPoint;
overload externalInstanceMethod(static NSGraphicsContext, static #"setCompositingOperation:") = Void, UInt;
overload externalInstanceMethod(static NSGraphicsContext, static #"compositingOperation") = UInt;
overload externalInstanceMethod(static NSGraphicsContext, static #"colorRenderingIntent") = Int;
overload externalInstanceMethod(static NSGraphicsContext, static #"setColorRenderingIntent:") = Void, Int;
overload externalInstanceMethod(static NSGraphicsContext, static #"CIContext") = CIContext;

record NSHelpManager = externalClass(NSObject);
overload externalClassMethod(static NSHelpManager, static #"sharedHelpManager") = NSHelpManager;
overload externalClassMethod(static NSHelpManager, static #"setContextHelpModeActive:") = Void, Bool;
overload externalClassMethod(static NSHelpManager, static #"isContextHelpModeActive") = Bool;
overload externalInstanceMethod(static NSHelpManager, static #"setContextHelp:forObject:") = Void, NSAttributedString, Id;
overload externalInstanceMethod(static NSHelpManager, static #"removeContextHelpForObject:") = Void, Id;
overload externalInstanceMethod(static NSHelpManager, static #"contextHelpForObject:") = NSAttributedString, Id;
overload externalInstanceMethod(static NSHelpManager, static #"showContextHelpForObject:locationHint:") = Bool, Id, NSPoint;
overload externalInstanceMethod(static NSHelpManager, static #"openHelpAnchor:inBook:") = Void, NSString, NSString;
overload externalInstanceMethod(static NSHelpManager, static #"findString:inBook:") = Void, NSString, NSString;
overload externalInstanceMethod(static NSHelpManager, static #"registerBooksInBundle:") = Bool, NSBundle;

record NSImage = externalClass(NSObject);
overload externalInstanceMethod(static NSImage, static #"copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(static NSImage, static #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static NSImage, static #"initWithCoder:") = Id, NSCoder;
overload externalClassMethod(static NSImage, static #"readableTypesForPasteboard:") = NSArray, NSPasteboard;
overload externalClassMethod(static NSImage, static #"readingOptionsForType:pasteboard:") = UInt, NSString, NSPasteboard;
overload externalInstanceMethod(static NSImage, static #"initWithPasteboardPropertyList:ofType:") = Id, Id, NSString;
overload externalInstanceMethod(static NSImage, static #"writableTypesForPasteboard:") = NSArray, NSPasteboard;
overload externalInstanceMethod(static NSImage, static #"writingOptionsForType:pasteboard:") = UInt, NSString, NSPasteboard;
overload externalInstanceMethod(static NSImage, static #"pasteboardPropertyListForType:") = Id, NSString;
overload externalClassMethod(static NSImage, static #"imageNamed:") = Id, NSString;
overload externalInstanceMethod(static NSImage, static #"initWithSize:") = Id, NSSize;
overload externalInstanceMethod(static NSImage, static #"initWithData:") = Id, NSData;
overload externalInstanceMethod(static NSImage, static #"initWithContentsOfFile:") = Id, NSString;
overload externalInstanceMethod(static NSImage, static #"initWithContentsOfURL:") = Id, NSURL;
overload externalInstanceMethod(static NSImage, static #"initByReferencingFile:") = Id, NSString;
overload externalInstanceMethod(static NSImage, static #"initByReferencingURL:") = Id, NSURL;
overload externalInstanceMethod(static NSImage, static #"initWithIconRef:") = Id, IconRef;
overload externalInstanceMethod(static NSImage, static #"initWithPasteboard:") = Id, NSPasteboard;
overload externalInstanceMethod(static NSImage, static #"initWithDataIgnoringOrientation:") = Id, NSData;
overload externalInstanceMethod(static NSImage, static #"setSize:") = Void, NSSize;
overload externalInstanceMethod(static NSImage, static #"size") = NSSize;
overload externalInstanceMethod(static NSImage, static #"setName:") = Bool, NSString;
overload externalInstanceMethod(static NSImage, static #"name") = NSString;
overload externalInstanceMethod(static NSImage, static #"setBackgroundColor:") = Void, NSColor;
overload externalInstanceMethod(static NSImage, static #"backgroundColor") = NSColor;
overload externalInstanceMethod(static NSImage, static #"setUsesEPSOnResolutionMismatch:") = Void, Bool;
overload externalInstanceMethod(static NSImage, static #"usesEPSOnResolutionMismatch") = Bool;
overload externalInstanceMethod(static NSImage, static #"setPrefersColorMatch:") = Void, Bool;
overload externalInstanceMethod(static NSImage, static #"prefersColorMatch") = Bool;
overload externalInstanceMethod(static NSImage, static #"setMatchesOnMultipleResolution:") = Void, Bool;
overload externalInstanceMethod(static NSImage, static #"matchesOnMultipleResolution") = Bool;
overload externalInstanceMethod(static NSImage, static #"drawAtPoint:fromRect:operation:fraction:") = Void, NSPoint, NSRect, UInt, Float;
overload externalInstanceMethod(static NSImage, static #"drawInRect:fromRect:operation:fraction:") = Void, NSRect, NSRect, UInt, Float;
overload externalInstanceMethod(static NSImage, static #"drawInRect:fromRect:operation:fraction:respectFlipped:hints:") = Void, NSRect, NSRect, UInt, Float, Bool, NSDictionary;
overload externalInstanceMethod(static NSImage, static #"drawRepresentation:inRect:") = Bool, NSImageRep, NSRect;
overload externalInstanceMethod(static NSImage, static #"recache") = Void;
overload externalInstanceMethod(static NSImage, static #"TIFFRepresentation") = NSData;
overload externalInstanceMethod(static NSImage, static #"TIFFRepresentationUsingCompression:factor:") = NSData, UInt, Float;
overload externalInstanceMethod(static NSImage, static #"representations") = NSArray;
overload externalInstanceMethod(static NSImage, static #"addRepresentations:") = Void, NSArray;
overload externalInstanceMethod(static NSImage, static #"addRepresentation:") = Void, NSImageRep;
overload externalInstanceMethod(static NSImage, static #"removeRepresentation:") = Void, NSImageRep;
overload externalInstanceMethod(static NSImage, static #"isValid") = Bool;
overload externalInstanceMethod(static NSImage, static #"lockFocus") = Void;
overload externalInstanceMethod(static NSImage, static #"lockFocusFlipped:") = Void, Bool;
overload externalInstanceMethod(static NSImage, static #"unlockFocus") = Void;
overload externalInstanceMethod(static NSImage, static #"bestRepresentationForDevice:") = NSImageRep, NSDictionary;
overload externalInstanceMethod(static NSImage, static #"setDelegate:") = Void, Id;
overload externalInstanceMethod(static NSImage, static #"delegate") = Id;
overload externalClassMethod(static NSImage, static #"imageUnfilteredFileTypes") = NSArray;
overload externalClassMethod(static NSImage, static #"imageUnfilteredPasteboardTypes") = NSArray;
overload externalClassMethod(static NSImage, static #"imageFileTypes") = NSArray;
overload externalClassMethod(static NSImage, static #"imagePasteboardTypes") = NSArray;
overload externalClassMethod(static NSImage, static #"imageTypes") = NSArray;
overload externalClassMethod(static NSImage, static #"imageUnfilteredTypes") = NSArray;
overload externalClassMethod(static NSImage, static #"canInitWithPasteboard:") = Bool, NSPasteboard;
overload externalInstanceMethod(static NSImage, static #"cancelIncrementalLoad") = Void;
overload externalInstanceMethod(static NSImage, static #"setCacheMode:") = Void, UInt;
overload externalInstanceMethod(static NSImage, static #"cacheMode") = UInt;
overload externalInstanceMethod(static NSImage, static #"alignmentRect") = NSRect;
overload externalInstanceMethod(static NSImage, static #"setAlignmentRect:") = Void, NSRect;
overload externalInstanceMethod(static NSImage, static #"isTemplate") = Bool;
overload externalInstanceMethod(static NSImage, static #"setTemplate:") = Void, Bool;
overload externalInstanceMethod(static NSImage, static #"accessibilityDescription") = NSString;
overload externalInstanceMethod(static NSImage, static #"setAccessibilityDescription:") = Void, NSString;
overload externalInstanceMethod(static NSImage, static #"initWithCGImage:size:") = Id, CGImageRef, NSSize;
overload externalInstanceMethod(static NSImage, static #"CGImageForProposedRect:context:hints:") = CGImageRef, Pointer[NSRect], NSGraphicsContext, NSDictionary;
overload externalInstanceMethod(static NSImage, static #"bestRepresentationForRect:context:hints:") = NSImageRep, NSRect, NSGraphicsContext, NSDictionary;
overload externalInstanceMethod(static NSImage, static #"hitTestRect:withImageDestinationRect:context:hints:flipped:") = Bool, NSRect, NSRect, NSGraphicsContext, NSDictionary, Bool;
overload externalInstanceMethod(static NSImage, static #"setFlipped:") = Void, Bool;
overload externalInstanceMethod(static NSImage, static #"isFlipped") = Bool;
overload externalInstanceMethod(static NSImage, static #"dissolveToPoint:fraction:") = Void, NSPoint, Float;
overload externalInstanceMethod(static NSImage, static #"dissolveToPoint:fromRect:fraction:") = Void, NSPoint, NSRect, Float;
overload externalInstanceMethod(static NSImage, static #"compositeToPoint:operation:") = Void, NSPoint, UInt;
overload externalInstanceMethod(static NSImage, static #"compositeToPoint:fromRect:operation:") = Void, NSPoint, NSRect, UInt;
overload externalInstanceMethod(static NSImage, static #"compositeToPoint:operation:fraction:") = Void, NSPoint, UInt, Float;
overload externalInstanceMethod(static NSImage, static #"compositeToPoint:fromRect:operation:fraction:") = Void, NSPoint, NSRect, UInt, Float;
overload externalInstanceMethod(static NSImage, static #"lockFocusOnRepresentation:") = Void, NSImageRep;
overload externalInstanceMethod(static NSImage, static #"setScalesWhenResized:") = Void, Bool;
overload externalInstanceMethod(static NSImage, static #"scalesWhenResized") = Bool;
overload externalInstanceMethod(static NSImage, static #"setDataRetained:") = Void, Bool;
overload externalInstanceMethod(static NSImage, static #"isDataRetained") = Bool;
overload externalInstanceMethod(static NSImage, static #"setCachedSeparately:") = Void, Bool;
overload externalInstanceMethod(static NSImage, static #"isCachedSeparately") = Bool;
overload externalInstanceMethod(static NSImage, static #"setCacheDepthMatchesImageDepth:") = Void, Bool;
overload externalInstanceMethod(static NSImage, static #"cacheDepthMatchesImageDepth") = Bool;

record NSImageCell = externalClass(NSCell);
overload externalInstanceMethod(static NSImageCell, static #"copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(static NSImageCell, static #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static NSImageCell, static #"initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(static NSImageCell, static #"imageAlignment") = UInt;
overload externalInstanceMethod(static NSImageCell, static #"setImageAlignment:") = Void, UInt;
overload externalInstanceMethod(static NSImageCell, static #"imageScaling") = UInt;
overload externalInstanceMethod(static NSImageCell, static #"setImageScaling:") = Void, UInt;
overload externalInstanceMethod(static NSImageCell, static #"imageFrameStyle") = UInt;
overload externalInstanceMethod(static NSImageCell, static #"setImageFrameStyle:") = Void, UInt;

record NSImageRep = externalClass(NSObject);
overload externalInstanceMethod(static NSImageRep, static #"copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(static NSImageRep, static #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static NSImageRep, static #"initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(static NSImageRep, static #"draw") = Bool;
overload externalInstanceMethod(static NSImageRep, static #"drawAtPoint:") = Bool, NSPoint;
overload externalInstanceMethod(static NSImageRep, static #"drawInRect:") = Bool, NSRect;
overload externalInstanceMethod(static NSImageRep, static #"drawInRect:fromRect:operation:fraction:respectFlipped:hints:") = Bool, NSRect, NSRect, UInt, Float, Bool, NSDictionary;
overload externalInstanceMethod(static NSImageRep, static #"setSize:") = Void, NSSize;
overload externalInstanceMethod(static NSImageRep, static #"size") = NSSize;
overload externalInstanceMethod(static NSImageRep, static #"setAlpha:") = Void, Bool;
overload externalInstanceMethod(static NSImageRep, static #"hasAlpha") = Bool;
overload externalInstanceMethod(static NSImageRep, static #"setOpaque:") = Void, Bool;
overload externalInstanceMethod(static NSImageRep, static #"isOpaque") = Bool;
overload externalInstanceMethod(static NSImageRep, static #"setColorSpaceName:") = Void, NSString;
overload externalInstanceMethod(static NSImageRep, static #"colorSpaceName") = NSString;
overload externalInstanceMethod(static NSImageRep, static #"setBitsPerSample:") = Void, Int;
overload externalInstanceMethod(static NSImageRep, static #"bitsPerSample") = Int;
overload externalInstanceMethod(static NSImageRep, static #"setPixelsWide:") = Void, Int;
overload externalInstanceMethod(static NSImageRep, static #"pixelsWide") = Int;
overload externalInstanceMethod(static NSImageRep, static #"setPixelsHigh:") = Void, Int;
overload externalInstanceMethod(static NSImageRep, static #"pixelsHigh") = Int;
overload externalClassMethod(static NSImageRep, static #"registerImageRepClass:") = Void, Id;
overload externalClassMethod(static NSImageRep, static #"unregisterImageRepClass:") = Void, Id;
overload externalClassMethod(static NSImageRep, static #"registeredImageRepClasses") = NSArray;
overload externalClassMethod(static NSImageRep, static #"imageRepClassForFileType:") = Id, NSString;
overload externalClassMethod(static NSImageRep, static #"imageRepClassForPasteboardType:") = Id, NSString;
overload externalClassMethod(static NSImageRep, static #"imageRepClassForType:") = Id, NSString;
overload externalClassMethod(static NSImageRep, static #"imageRepClassForData:") = Id, NSData;
overload externalClassMethod(static NSImageRep, static #"canInitWithData:") = Bool, NSData;
overload externalClassMethod(static NSImageRep, static #"imageUnfilteredFileTypes") = NSArray;
overload externalClassMethod(static NSImageRep, static #"imageUnfilteredPasteboardTypes") = NSArray;
overload externalClassMethod(static NSImageRep, static #"imageFileTypes") = NSArray;
overload externalClassMethod(static NSImageRep, static #"imagePasteboardTypes") = NSArray;
overload externalClassMethod(static NSImageRep, static #"imageUnfilteredTypes") = NSArray;
overload externalClassMethod(static NSImageRep, static #"imageTypes") = NSArray;
overload externalClassMethod(static NSImageRep, static #"canInitWithPasteboard:") = Bool, NSPasteboard;
overload externalClassMethod(static NSImageRep, static #"imageRepsWithContentsOfFile:") = NSArray, NSString;
overload externalClassMethod(static NSImageRep, static #"imageRepWithContentsOfFile:") = Id, NSString;
overload externalClassMethod(static NSImageRep, static #"imageRepsWithContentsOfURL:") = NSArray, NSURL;
overload externalClassMethod(static NSImageRep, static #"imageRepWithContentsOfURL:") = Id, NSURL;
overload externalClassMethod(static NSImageRep, static #"imageRepsWithPasteboard:") = NSArray, NSPasteboard;
overload externalClassMethod(static NSImageRep, static #"imageRepWithPasteboard:") = Id, NSPasteboard;
overload externalInstanceMethod(static NSImageRep, static #"CGImageForProposedRect:context:hints:") = CGImageRef, Pointer[NSRect], NSGraphicsContext, NSDictionary;

record NSImageView = externalClass(NSControl);
overload externalInstanceMethod(static NSImageView, static #"image") = NSImage;
overload externalInstanceMethod(static NSImageView, static #"setImage:") = Void, NSImage;
overload externalInstanceMethod(static NSImageView, static #"imageAlignment") = UInt;
overload externalInstanceMethod(static NSImageView, static #"setImageAlignment:") = Void, UInt;
overload externalInstanceMethod(static NSImageView, static #"imageScaling") = UInt;
overload externalInstanceMethod(static NSImageView, static #"setImageScaling:") = Void, UInt;
overload externalInstanceMethod(static NSImageView, static #"imageFrameStyle") = UInt;
overload externalInstanceMethod(static NSImageView, static #"setImageFrameStyle:") = Void, UInt;
overload externalInstanceMethod(static NSImageView, static #"setEditable:") = Void, Bool;
overload externalInstanceMethod(static NSImageView, static #"isEditable") = Bool;
overload externalInstanceMethod(static NSImageView, static #"setAnimates:") = Void, Bool;
overload externalInstanceMethod(static NSImageView, static #"animates") = Bool;
overload externalInstanceMethod(static NSImageView, static #"allowsCutCopyPaste") = Bool;
overload externalInstanceMethod(static NSImageView, static #"setAllowsCutCopyPaste:") = Void, Bool;

record NSInputManager = externalClass(NSObject);
overload externalInstanceMethod(static NSInputManager, static #"insertText:") = Void, Id;
overload externalInstanceMethod(static NSInputManager, static #"doCommandBySelector:") = Void, SelectorHandle;
overload externalInstanceMethod(static NSInputManager, static #"setMarkedText:selectedRange:") = Void, Id, NSRange;
overload externalInstanceMethod(static NSInputManager, static #"unmarkText") = Void;
overload externalInstanceMethod(static NSInputManager, static #"hasMarkedText") = Bool;
overload externalInstanceMethod(static NSInputManager, static #"conversationIdentifier") = Int;
overload externalInstanceMethod(static NSInputManager, static #"attributedSubstringFromRange:") = NSAttributedString, NSRange;
overload externalInstanceMethod(static NSInputManager, static #"markedRange") = NSRange;
overload externalInstanceMethod(static NSInputManager, static #"selectedRange") = NSRange;
overload externalInstanceMethod(static NSInputManager, static #"firstRectForCharacterRange:") = NSRect, NSRange;
overload externalInstanceMethod(static NSInputManager, static #"characterIndexForPoint:") = UInt, NSPoint;
overload externalInstanceMethod(static NSInputManager, static #"validAttributesForMarkedText") = NSArray;
overload externalClassMethod(static NSInputManager, static #"currentInputManager") = NSInputManager;
overload externalClassMethod(static NSInputManager, static #"cycleToNextInputLanguage:") = Void, Id;
overload externalClassMethod(static NSInputManager, static #"cycleToNextInputServerInLanguage:") = Void, Id;
overload externalInstanceMethod(static NSInputManager, static #"initWithName:host:") = NSInputManager, NSString, NSString;
overload externalInstanceMethod(static NSInputManager, static #"localizedInputManagerName") = NSString;
overload externalInstanceMethod(static NSInputManager, static #"markedTextAbandoned:") = Void, Id;
overload externalInstanceMethod(static NSInputManager, static #"markedTextSelectionChanged:client:") = Void, NSRange, Id;
overload externalInstanceMethod(static NSInputManager, static #"wantsToInterpretAllKeystrokes") = Bool;
overload externalInstanceMethod(static NSInputManager, static #"language") = NSString;
overload externalInstanceMethod(static NSInputManager, static #"image") = NSImage;
overload externalInstanceMethod(static NSInputManager, static #"server") = NSInputServer;
overload externalInstanceMethod(static NSInputManager, static #"wantsToHandleMouseEvents") = Bool;
overload externalInstanceMethod(static NSInputManager, static #"handleMouseEvent:") = Bool, NSEvent;
overload externalInstanceMethod(static NSInputManager, static #"wantsToDelayTextChangeNotifications") = Bool;

record NSInputServer = externalClass(NSObject);
overload externalInstanceMethod(static NSInputServer, static #"insertText:client:") = Void, Id, Id;
overload externalInstanceMethod(static NSInputServer, static #"doCommandBySelector:client:") = Void, SelectorHandle, Id;
overload externalInstanceMethod(static NSInputServer, static #"markedTextAbandoned:") = Void, Id;
overload externalInstanceMethod(static NSInputServer, static #"markedTextSelectionChanged:client:") = Void, NSRange, Id;
overload externalInstanceMethod(static NSInputServer, static #"terminate:") = Void, Id;
overload externalInstanceMethod(static NSInputServer, static #"canBeDisabled") = Bool;
overload externalInstanceMethod(static NSInputServer, static #"wantsToInterpretAllKeystrokes") = Bool;
overload externalInstanceMethod(static NSInputServer, static #"wantsToHandleMouseEvents") = Bool;
overload externalInstanceMethod(static NSInputServer, static #"wantsToDelayTextChangeNotifications") = Bool;
overload externalInstanceMethod(static NSInputServer, static #"inputClientBecomeActive:") = Void, Id;
overload externalInstanceMethod(static NSInputServer, static #"inputClientResignActive:") = Void, Id;
overload externalInstanceMethod(static NSInputServer, static #"inputClientEnabled:") = Void, Id;
overload externalInstanceMethod(static NSInputServer, static #"inputClientDisabled:") = Void, Id;
overload externalInstanceMethod(static NSInputServer, static #"activeConversationWillChange:fromOldConversation:") = Void, Id, Int;
overload externalInstanceMethod(static NSInputServer, static #"activeConversationChanged:toNewConversation:") = Void, Id, Int;
overload externalInstanceMethod(static NSInputServer, static #"mouseDownOnCharacterIndex:atCoordinate:withModifier:client:") = Bool, UInt, NSPoint, UInt, Id;
overload externalInstanceMethod(static NSInputServer, static #"mouseDraggedOnCharacterIndex:atCoordinate:withModifier:client:") = Bool, UInt, NSPoint, UInt, Id;
overload externalInstanceMethod(static NSInputServer, static #"mouseUpOnCharacterIndex:atCoordinate:withModifier:client:") = Void, UInt, NSPoint, UInt, Id;
overload externalInstanceMethod(static NSInputServer, static #"initWithDelegate:name:") = Id, Id, NSString;

record NSLayoutManager = externalClass(NSObject);
overload externalInstanceMethod(static NSLayoutManager, static #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static NSLayoutManager, static #"initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(static NSLayoutManager, static #"insertGlyphs:length:forStartingGlyphAtIndex:characterIndex:") = Void, Pointer[UInt], UInt, UInt, UInt;
overload externalInstanceMethod(static NSLayoutManager, static #"setIntAttribute:value:forGlyphAtIndex:") = Void, Int, Int, UInt;
overload externalInstanceMethod(static NSLayoutManager, static #"attributedString") = NSAttributedString;
overload externalInstanceMethod(static NSLayoutManager, static #"layoutOptions") = UInt;
overload externalInstanceMethod(static NSLayoutManager, static #"init") = Id;
overload externalInstanceMethod(static NSLayoutManager, static #"textStorage") = NSTextStorage;
overload externalInstanceMethod(static NSLayoutManager, static #"setTextStorage:") = Void, NSTextStorage;
overload externalInstanceMethod(static NSLayoutManager, static #"attributedString") = NSAttributedString;
overload externalInstanceMethod(static NSLayoutManager, static #"replaceTextStorage:") = Void, NSTextStorage;
overload externalInstanceMethod(static NSLayoutManager, static #"glyphGenerator") = NSGlyphGenerator;
overload externalInstanceMethod(static NSLayoutManager, static #"setGlyphGenerator:") = Void, NSGlyphGenerator;
overload externalInstanceMethod(static NSLayoutManager, static #"typesetter") = NSTypesetter;
overload externalInstanceMethod(static NSLayoutManager, static #"setTypesetter:") = Void, NSTypesetter;
overload externalInstanceMethod(static NSLayoutManager, static #"delegate") = Id;
overload externalInstanceMethod(static NSLayoutManager, static #"setDelegate:") = Void, Id;
overload externalInstanceMethod(static NSLayoutManager, static #"textContainers") = NSArray;
overload externalInstanceMethod(static NSLayoutManager, static #"addTextContainer:") = Void, NSTextContainer;
overload externalInstanceMethod(static NSLayoutManager, static #"insertTextContainer:atIndex:") = Void, NSTextContainer, UInt;
overload externalInstanceMethod(static NSLayoutManager, static #"removeTextContainerAtIndex:") = Void, UInt;
overload externalInstanceMethod(static NSLayoutManager, static #"textContainerChangedGeometry:") = Void, NSTextContainer;
overload externalInstanceMethod(static NSLayoutManager, static #"textContainerChangedTextView:") = Void, NSTextContainer;
overload externalInstanceMethod(static NSLayoutManager, static #"setBackgroundLayoutEnabled:") = Void, Bool;
overload externalInstanceMethod(static NSLayoutManager, static #"backgroundLayoutEnabled") = Bool;
overload externalInstanceMethod(static NSLayoutManager, static #"setUsesScreenFonts:") = Void, Bool;
overload externalInstanceMethod(static NSLayoutManager, static #"usesScreenFonts") = Bool;
overload externalInstanceMethod(static NSLayoutManager, static #"setShowsInvisibleCharacters:") = Void, Bool;
overload externalInstanceMethod(static NSLayoutManager, static #"showsInvisibleCharacters") = Bool;
overload externalInstanceMethod(static NSLayoutManager, static #"setShowsControlCharacters:") = Void, Bool;
overload externalInstanceMethod(static NSLayoutManager, static #"showsControlCharacters") = Bool;
overload externalInstanceMethod(static NSLayoutManager, static #"setHyphenationFactor:") = Void, Float;
overload externalInstanceMethod(static NSLayoutManager, static #"hyphenationFactor") = Float;
overload externalInstanceMethod(static NSLayoutManager, static #"setDefaultAttachmentScaling:") = Void, UInt;
overload externalInstanceMethod(static NSLayoutManager, static #"defaultAttachmentScaling") = UInt;
overload externalInstanceMethod(static NSLayoutManager, static #"setTypesetterBehavior:") = Void, Int;
overload externalInstanceMethod(static NSLayoutManager, static #"typesetterBehavior") = Int;
overload externalInstanceMethod(static NSLayoutManager, static #"layoutOptions") = UInt;
overload externalInstanceMethod(static NSLayoutManager, static #"setAllowsNonContiguousLayout:") = Void, Bool;
overload externalInstanceMethod(static NSLayoutManager, static #"allowsNonContiguousLayout") = Bool;
overload externalInstanceMethod(static NSLayoutManager, static #"hasNonContiguousLayout") = Bool;
overload externalInstanceMethod(static NSLayoutManager, static #"invalidateGlyphsForCharacterRange:changeInLength:actualCharacterRange:") = Void, NSRange, Int, NSRangePointer;
overload externalInstanceMethod(static NSLayoutManager, static #"invalidateLayoutForCharacterRange:actualCharacterRange:") = Void, NSRange, NSRangePointer;
overload externalInstanceMethod(static NSLayoutManager, static #"invalidateLayoutForCharacterRange:isSoft:actualCharacterRange:") = Void, NSRange, Bool, NSRangePointer;
overload externalInstanceMethod(static NSLayoutManager, static #"invalidateDisplayForCharacterRange:") = Void, NSRange;
overload externalInstanceMethod(static NSLayoutManager, static #"invalidateDisplayForGlyphRange:") = Void, NSRange;
overload externalInstanceMethod(static NSLayoutManager, static #"textStorage:edited:range:changeInLength:invalidatedRange:") = Void, NSTextStorage, UInt, NSRange, Int, NSRange;
overload externalInstanceMethod(static NSLayoutManager, static #"ensureGlyphsForCharacterRange:") = Void, NSRange;
overload externalInstanceMethod(static NSLayoutManager, static #"ensureGlyphsForGlyphRange:") = Void, NSRange;
overload externalInstanceMethod(static NSLayoutManager, static #"ensureLayoutForCharacterRange:") = Void, NSRange;
overload externalInstanceMethod(static NSLayoutManager, static #"ensureLayoutForGlyphRange:") = Void, NSRange;
overload externalInstanceMethod(static NSLayoutManager, static #"ensureLayoutForTextContainer:") = Void, NSTextContainer;
overload externalInstanceMethod(static NSLayoutManager, static #"ensureLayoutForBoundingRect:inTextContainer:") = Void, NSRect, NSTextContainer;
overload externalInstanceMethod(static NSLayoutManager, static #"insertGlyphs:length:forStartingGlyphAtIndex:characterIndex:") = Void, Pointer[UInt], UInt, UInt, UInt;
overload externalInstanceMethod(static NSLayoutManager, static #"insertGlyph:atGlyphIndex:characterIndex:") = Void, UInt, UInt, UInt;
overload externalInstanceMethod(static NSLayoutManager, static #"replaceGlyphAtIndex:withGlyph:") = Void, UInt, UInt;
overload externalInstanceMethod(static NSLayoutManager, static #"deleteGlyphsInRange:") = Void, NSRange;
overload externalInstanceMethod(static NSLayoutManager, static #"setCharacterIndex:forGlyphAtIndex:") = Void, UInt, UInt;
overload externalInstanceMethod(static NSLayoutManager, static #"setIntAttribute:value:forGlyphAtIndex:") = Void, Int, Int, UInt;
overload externalInstanceMethod(static NSLayoutManager, static #"invalidateGlyphsOnLayoutInvalidationForGlyphRange:") = Void, NSRange;
overload externalInstanceMethod(static NSLayoutManager, static #"numberOfGlyphs") = UInt;
overload externalInstanceMethod(static NSLayoutManager, static #"glyphAtIndex:isValidIndex:") = UInt, UInt, Pointer[Bool];
overload externalInstanceMethod(static NSLayoutManager, static #"glyphAtIndex:") = UInt, UInt;
overload externalInstanceMethod(static NSLayoutManager, static #"isValidGlyphIndex:") = Bool, UInt;
overload externalInstanceMethod(static NSLayoutManager, static #"characterIndexForGlyphAtIndex:") = UInt, UInt;
overload externalInstanceMethod(static NSLayoutManager, static #"glyphIndexForCharacterAtIndex:") = UInt, UInt;
overload externalInstanceMethod(static NSLayoutManager, static #"intAttribute:forGlyphAtIndex:") = Int, Int, UInt;
overload externalInstanceMethod(static NSLayoutManager, static #"getGlyphsInRange:glyphs:characterIndexes:glyphInscriptions:elasticBits:") = UInt, NSRange, Pointer[UInt], Pointer[UInt], Pointer[UInt], Pointer[Bool];
overload externalInstanceMethod(static NSLayoutManager, static #"getGlyphsInRange:glyphs:characterIndexes:glyphInscriptions:elasticBits:bidiLevels:") = UInt, NSRange, Pointer[UInt], Pointer[UInt], Pointer[UInt], Pointer[Bool], Pointer[CUChar];
overload externalInstanceMethod(static NSLayoutManager, static #"getGlyphs:range:") = UInt, Pointer[UInt], NSRange;
overload externalInstanceMethod(static NSLayoutManager, static #"setTextContainer:forGlyphRange:") = Void, NSTextContainer, NSRange;
overload externalInstanceMethod(static NSLayoutManager, static #"setLineFragmentRect:forGlyphRange:usedRect:") = Void, NSRect, NSRange, NSRect;
overload externalInstanceMethod(static NSLayoutManager, static #"setExtraLineFragmentRect:usedRect:textContainer:") = Void, NSRect, NSRect, NSTextContainer;
overload externalInstanceMethod(static NSLayoutManager, static #"setLocation:forStartOfGlyphRange:") = Void, NSPoint, NSRange;
overload externalInstanceMethod(static NSLayoutManager, static #"setLocations:startingGlyphIndexes:count:forGlyphRange:") = Void, NSPointArray, Pointer[UInt], UInt, NSRange;
overload externalInstanceMethod(static NSLayoutManager, static #"setNotShownAttribute:forGlyphAtIndex:") = Void, Bool, UInt;
overload externalInstanceMethod(static NSLayoutManager, static #"setDrawsOutsideLineFragment:forGlyphAtIndex:") = Void, Bool, UInt;
overload externalInstanceMethod(static NSLayoutManager, static #"setAttachmentSize:forGlyphRange:") = Void, NSSize, NSRange;
overload externalInstanceMethod(static NSLayoutManager, static #"getFirstUnlaidCharacterIndex:glyphIndex:") = Void, Pointer[UInt], Pointer[UInt];
overload externalInstanceMethod(static NSLayoutManager, static #"firstUnlaidCharacterIndex") = UInt;
overload externalInstanceMethod(static NSLayoutManager, static #"firstUnlaidGlyphIndex") = UInt;
overload externalInstanceMethod(static NSLayoutManager, static #"textContainerForGlyphAtIndex:effectiveRange:") = NSTextContainer, UInt, NSRangePointer;
overload externalInstanceMethod(static NSLayoutManager, static #"usedRectForTextContainer:") = NSRect, NSTextContainer;
overload externalInstanceMethod(static NSLayoutManager, static #"lineFragmentRectForGlyphAtIndex:effectiveRange:") = NSRect, UInt, NSRangePointer;
overload externalInstanceMethod(static NSLayoutManager, static #"lineFragmentUsedRectForGlyphAtIndex:effectiveRange:") = NSRect, UInt, NSRangePointer;
overload externalInstanceMethod(static NSLayoutManager, static #"lineFragmentRectForGlyphAtIndex:effectiveRange:withoutAdditionalLayout:") = NSRect, UInt, NSRangePointer, Bool;
overload externalInstanceMethod(static NSLayoutManager, static #"lineFragmentUsedRectForGlyphAtIndex:effectiveRange:withoutAdditionalLayout:") = NSRect, UInt, NSRangePointer, Bool;
overload externalInstanceMethod(static NSLayoutManager, static #"textContainerForGlyphAtIndex:effectiveRange:withoutAdditionalLayout:") = NSTextContainer, UInt, NSRangePointer, Bool;
overload externalInstanceMethod(static NSLayoutManager, static #"extraLineFragmentRect") = NSRect;
overload externalInstanceMethod(static NSLayoutManager, static #"extraLineFragmentUsedRect") = NSRect;
overload externalInstanceMethod(static NSLayoutManager, static #"extraLineFragmentTextContainer") = NSTextContainer;
overload externalInstanceMethod(static NSLayoutManager, static #"locationForGlyphAtIndex:") = NSPoint, UInt;
overload externalInstanceMethod(static NSLayoutManager, static #"notShownAttributeForGlyphAtIndex:") = Bool, UInt;
overload externalInstanceMethod(static NSLayoutManager, static #"drawsOutsideLineFragmentForGlyphAtIndex:") = Bool, UInt;
overload externalInstanceMethod(static NSLayoutManager, static #"attachmentSizeForGlyphAtIndex:") = NSSize, UInt;
overload externalInstanceMethod(static NSLayoutManager, static #"setLayoutRect:forTextBlock:glyphRange:") = Void, NSRect, NSTextBlock, NSRange;
overload externalInstanceMethod(static NSLayoutManager, static #"setBoundsRect:forTextBlock:glyphRange:") = Void, NSRect, NSTextBlock, NSRange;
overload externalInstanceMethod(static NSLayoutManager, static #"layoutRectForTextBlock:glyphRange:") = NSRect, NSTextBlock, NSRange;
overload externalInstanceMethod(static NSLayoutManager, static #"boundsRectForTextBlock:glyphRange:") = NSRect, NSTextBlock, NSRange;
overload externalInstanceMethod(static NSLayoutManager, static #"layoutRectForTextBlock:atIndex:effectiveRange:") = NSRect, NSTextBlock, UInt, NSRangePointer;
overload externalInstanceMethod(static NSLayoutManager, static #"boundsRectForTextBlock:atIndex:effectiveRange:") = NSRect, NSTextBlock, UInt, NSRangePointer;
overload externalInstanceMethod(static NSLayoutManager, static #"glyphRangeForCharacterRange:actualCharacterRange:") = NSRange, NSRange, NSRangePointer;
overload externalInstanceMethod(static NSLayoutManager, static #"characterRangeForGlyphRange:actualGlyphRange:") = NSRange, NSRange, NSRangePointer;
overload externalInstanceMethod(static NSLayoutManager, static #"glyphRangeForTextContainer:") = NSRange, NSTextContainer;
overload externalInstanceMethod(static NSLayoutManager, static #"rangeOfNominallySpacedGlyphsContainingIndex:") = NSRange, UInt;
overload externalInstanceMethod(static NSLayoutManager, static #"rectArrayForCharacterRange:withinSelectedCharacterRange:inTextContainer:rectCount:") = NSRectArray, NSRange, NSRange, NSTextContainer, Pointer[UInt];
overload externalInstanceMethod(static NSLayoutManager, static #"rectArrayForGlyphRange:withinSelectedGlyphRange:inTextContainer:rectCount:") = NSRectArray, NSRange, NSRange, NSTextContainer, Pointer[UInt];
overload externalInstanceMethod(static NSLayoutManager, static #"boundingRectForGlyphRange:inTextContainer:") = NSRect, NSRange, NSTextContainer;
overload externalInstanceMethod(static NSLayoutManager, static #"glyphRangeForBoundingRect:inTextContainer:") = NSRange, NSRect, NSTextContainer;
overload externalInstanceMethod(static NSLayoutManager, static #"glyphRangeForBoundingRectWithoutAdditionalLayout:inTextContainer:") = NSRange, NSRect, NSTextContainer;
overload externalInstanceMethod(static NSLayoutManager, static #"glyphIndexForPoint:inTextContainer:fractionOfDistanceThroughGlyph:") = UInt, NSPoint, NSTextContainer, Pointer[Float];
overload externalInstanceMethod(static NSLayoutManager, static #"glyphIndexForPoint:inTextContainer:") = UInt, NSPoint, NSTextContainer;
overload externalInstanceMethod(static NSLayoutManager, static #"fractionOfDistanceThroughGlyphForPoint:inTextContainer:") = Float, NSPoint, NSTextContainer;
overload externalInstanceMethod(static NSLayoutManager, static #"characterIndexForPoint:inTextContainer:fractionOfDistanceBetweenInsertionPoints:") = UInt, NSPoint, NSTextContainer, Pointer[Float];
overload externalInstanceMethod(static NSLayoutManager, static #"getLineFragmentInsertionPointsForCharacterAtIndex:alternatePositions:inDisplayOrder:positions:characterIndexes:") = UInt, UInt, Bool, Bool, Pointer[Float], Pointer[UInt];
overload externalInstanceMethod(static NSLayoutManager, static #"temporaryAttributesAtCharacterIndex:effectiveRange:") = NSDictionary, UInt, NSRangePointer;
overload externalInstanceMethod(static NSLayoutManager, static #"setTemporaryAttributes:forCharacterRange:") = Void, NSDictionary, NSRange;
overload externalInstanceMethod(static NSLayoutManager, static #"addTemporaryAttributes:forCharacterRange:") = Void, NSDictionary, NSRange;
overload externalInstanceMethod(static NSLayoutManager, static #"removeTemporaryAttribute:forCharacterRange:") = Void, NSString, NSRange;
overload externalInstanceMethod(static NSLayoutManager, static #"temporaryAttribute:atCharacterIndex:effectiveRange:") = Id, NSString, UInt, NSRangePointer;
overload externalInstanceMethod(static NSLayoutManager, static #"temporaryAttribute:atCharacterIndex:longestEffectiveRange:inRange:") = Id, NSString, UInt, NSRangePointer, NSRange;
overload externalInstanceMethod(static NSLayoutManager, static #"temporaryAttributesAtCharacterIndex:longestEffectiveRange:inRange:") = NSDictionary, UInt, NSRangePointer, NSRange;
overload externalInstanceMethod(static NSLayoutManager, static #"addTemporaryAttribute:value:forCharacterRange:") = Void, NSString, Id, NSRange;
overload externalInstanceMethod(static NSLayoutManager, static #"substituteFontForFont:") = NSFont, NSFont;
overload externalInstanceMethod(static NSLayoutManager, static #"defaultLineHeightForFont:") = Float, NSFont;
overload externalInstanceMethod(static NSLayoutManager, static #"defaultBaselineOffsetForFont:") = Float, NSFont;
overload externalInstanceMethod(static NSLayoutManager, static #"usesFontLeading") = Bool;
overload externalInstanceMethod(static NSLayoutManager, static #"setUsesFontLeading:") = Void, Bool;
overload externalInstanceMethod(static NSLayoutManager, static #"rulerMarkersForTextView:paragraphStyle:ruler:") = NSArray, NSTextView, NSParagraphStyle, NSRulerView;
overload externalInstanceMethod(static NSLayoutManager, static #"rulerAccessoryViewForTextView:paragraphStyle:ruler:enabled:") = NSView, NSTextView, NSParagraphStyle, NSRulerView, Bool;
overload externalInstanceMethod(static NSLayoutManager, static #"layoutManagerOwnsFirstResponderInWindow:") = Bool, NSWindow;
overload externalInstanceMethod(static NSLayoutManager, static #"firstTextView") = NSTextView;
overload externalInstanceMethod(static NSLayoutManager, static #"textViewForBeginningOfSelection") = NSTextView;
overload externalInstanceMethod(static NSLayoutManager, static #"drawBackgroundForGlyphRange:atPoint:") = Void, NSRange, NSPoint;
overload externalInstanceMethod(static NSLayoutManager, static #"drawGlyphsForGlyphRange:atPoint:") = Void, NSRange, NSPoint;
overload externalInstanceMethod(static NSLayoutManager, static #"showPackedGlyphs:length:glyphRange:atPoint:font:color:printingAdjustment:") = Void, Pointer[CChar], UInt, NSRange, NSPoint, NSFont, NSColor, NSSize;
overload externalInstanceMethod(static NSLayoutManager, static #"showAttachmentCell:inRect:characterIndex:") = Void, NSCell, NSRect, UInt;
overload externalInstanceMethod(static NSLayoutManager, static #"fillBackgroundRectArray:count:forCharacterRange:color:") = Void, NSRectArray, UInt, NSRange, NSColor;
overload externalInstanceMethod(static NSLayoutManager, static #"drawUnderlineForGlyphRange:underlineType:baselineOffset:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:") = Void, NSRange, Int, Float, NSRect, NSRange, NSPoint;
overload externalInstanceMethod(static NSLayoutManager, static #"underlineGlyphRange:underlineType:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:") = Void, NSRange, Int, NSRect, NSRange, NSPoint;
overload externalInstanceMethod(static NSLayoutManager, static #"drawStrikethroughForGlyphRange:strikethroughType:baselineOffset:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:") = Void, NSRange, Int, Float, NSRect, NSRange, NSPoint;
overload externalInstanceMethod(static NSLayoutManager, static #"strikethroughGlyphRange:strikethroughType:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:") = Void, NSRange, Int, NSRect, NSRange, NSPoint;

record NSLevelIndicator = externalClass(NSControl);
overload externalInstanceMethod(static NSLevelIndicator, static #"minValue") = Double;
overload externalInstanceMethod(static NSLevelIndicator, static #"setMinValue:") = Void, Double;
overload externalInstanceMethod(static NSLevelIndicator, static #"maxValue") = Double;
overload externalInstanceMethod(static NSLevelIndicator, static #"setMaxValue:") = Void, Double;
overload externalInstanceMethod(static NSLevelIndicator, static #"warningValue") = Double;
overload externalInstanceMethod(static NSLevelIndicator, static #"setWarningValue:") = Void, Double;
overload externalInstanceMethod(static NSLevelIndicator, static #"criticalValue") = Double;
overload externalInstanceMethod(static NSLevelIndicator, static #"setCriticalValue:") = Void, Double;
overload externalInstanceMethod(static NSLevelIndicator, static #"tickMarkPosition") = UInt;
overload externalInstanceMethod(static NSLevelIndicator, static #"setTickMarkPosition:") = Void, UInt;
overload externalInstanceMethod(static NSLevelIndicator, static #"numberOfTickMarks") = Int;
overload externalInstanceMethod(static NSLevelIndicator, static #"setNumberOfTickMarks:") = Void, Int;
overload externalInstanceMethod(static NSLevelIndicator, static #"numberOfMajorTickMarks") = Int;
overload externalInstanceMethod(static NSLevelIndicator, static #"setNumberOfMajorTickMarks:") = Void, Int;
overload externalInstanceMethod(static NSLevelIndicator, static #"tickMarkValueAtIndex:") = Double, Int;
overload externalInstanceMethod(static NSLevelIndicator, static #"rectOfTickMarkAtIndex:") = NSRect, Int;

record NSLevelIndicatorCell = externalClass(NSActionCell);
overload externalInstanceMethod(static NSLevelIndicatorCell, static #"initWithLevelIndicatorStyle:") = Id, UInt;
overload externalInstanceMethod(static NSLevelIndicatorCell, static #"levelIndicatorStyle") = UInt;
overload externalInstanceMethod(static NSLevelIndicatorCell, static #"setLevelIndicatorStyle:") = Void, UInt;
overload externalInstanceMethod(static NSLevelIndicatorCell, static #"minValue") = Double;
overload externalInstanceMethod(static NSLevelIndicatorCell, static #"setMinValue:") = Void, Double;
overload externalInstanceMethod(static NSLevelIndicatorCell, static #"maxValue") = Double;
overload externalInstanceMethod(static NSLevelIndicatorCell, static #"setMaxValue:") = Void, Double;
overload externalInstanceMethod(static NSLevelIndicatorCell, static #"warningValue") = Double;
overload externalInstanceMethod(static NSLevelIndicatorCell, static #"setWarningValue:") = Void, Double;
overload externalInstanceMethod(static NSLevelIndicatorCell, static #"criticalValue") = Double;
overload externalInstanceMethod(static NSLevelIndicatorCell, static #"setCriticalValue:") = Void, Double;
overload externalInstanceMethod(static NSLevelIndicatorCell, static #"setTickMarkPosition:") = Void, UInt;
overload externalInstanceMethod(static NSLevelIndicatorCell, static #"tickMarkPosition") = UInt;
overload externalInstanceMethod(static NSLevelIndicatorCell, static #"setNumberOfTickMarks:") = Void, Int;
overload externalInstanceMethod(static NSLevelIndicatorCell, static #"numberOfTickMarks") = Int;
overload externalInstanceMethod(static NSLevelIndicatorCell, static #"setNumberOfMajorTickMarks:") = Void, Int;
overload externalInstanceMethod(static NSLevelIndicatorCell, static #"numberOfMajorTickMarks") = Int;
overload externalInstanceMethod(static NSLevelIndicatorCell, static #"rectOfTickMarkAtIndex:") = NSRect, Int;
overload externalInstanceMethod(static NSLevelIndicatorCell, static #"tickMarkValueAtIndex:") = Double, Int;
overload externalInstanceMethod(static NSLevelIndicatorCell, static #"setImage:") = Void, NSImage;

record NSMatrix = externalClass(NSControl);
overload externalInstanceMethod(static NSMatrix, static #"validateUserInterfaceItem:") = Bool, Id;
overload externalInstanceMethod(static NSMatrix, static #"initWithFrame:") = Id, NSRect;
overload externalInstanceMethod(static NSMatrix, static #"initWithFrame:mode:prototype:numberOfRows:numberOfColumns:") = Id, NSRect, UInt, NSCell, Int, Int;
overload externalInstanceMethod(static NSMatrix, static #"initWithFrame:mode:cellClass:numberOfRows:numberOfColumns:") = Id, NSRect, UInt, Id, Int, Int;
overload externalInstanceMethod(static NSMatrix, static #"setCellClass:") = Void, Id;
overload externalInstanceMethod(static NSMatrix, static #"cellClass") = Id;
overload externalInstanceMethod(static NSMatrix, static #"prototype") = Id;
overload externalInstanceMethod(static NSMatrix, static #"setPrototype:") = Void, NSCell;
overload externalInstanceMethod(static NSMatrix, static #"makeCellAtRow:column:") = NSCell, Int, Int;
overload externalInstanceMethod(static NSMatrix, static #"mode") = UInt;
overload externalInstanceMethod(static NSMatrix, static #"setMode:") = Void, UInt;
overload externalInstanceMethod(static NSMatrix, static #"setAllowsEmptySelection:") = Void, Bool;
overload externalInstanceMethod(static NSMatrix, static #"allowsEmptySelection") = Bool;
overload externalInstanceMethod(static NSMatrix, static #"sendAction:to:forAllCells:") = Void, SelectorHandle, Id, Bool;
overload externalInstanceMethod(static NSMatrix, static #"cells") = NSArray;
overload externalInstanceMethod(static NSMatrix, static #"sortUsingSelector:") = Void, SelectorHandle;
overload externalInstanceMethod(static NSMatrix, static #"sortUsingFunction:context:") = Void, CCodePointer[(Id,Id,RawPointer),(Int)], RawPointer;
overload externalInstanceMethod(static NSMatrix, static #"selectedCell") = Id;
overload externalInstanceMethod(static NSMatrix, static #"selectedCells") = NSArray;
overload externalInstanceMethod(static NSMatrix, static #"selectedRow") = Int;
overload externalInstanceMethod(static NSMatrix, static #"selectedColumn") = Int;
overload externalInstanceMethod(static NSMatrix, static #"setSelectionByRect:") = Void, Bool;
overload externalInstanceMethod(static NSMatrix, static #"isSelectionByRect") = Bool;
overload externalInstanceMethod(static NSMatrix, static #"setSelectionFrom:to:anchor:highlight:") = Void, Int, Int, Int, Bool;
overload externalInstanceMethod(static NSMatrix, static #"deselectSelectedCell") = Void;
overload externalInstanceMethod(static NSMatrix, static #"deselectAllCells") = Void;
overload externalInstanceMethod(static NSMatrix, static #"selectCellAtRow:column:") = Void, Int, Int;
overload externalInstanceMethod(static NSMatrix, static #"selectAll:") = Void, Id;
overload externalInstanceMethod(static NSMatrix, static #"selectCellWithTag:") = Bool, Int;
overload externalInstanceMethod(static NSMatrix, static #"cellSize") = NSSize;
overload externalInstanceMethod(static NSMatrix, static #"setCellSize:") = Void, NSSize;
overload externalInstanceMethod(static NSMatrix, static #"intercellSpacing") = NSSize;
overload externalInstanceMethod(static NSMatrix, static #"setIntercellSpacing:") = Void, NSSize;
overload externalInstanceMethod(static NSMatrix, static #"setScrollable:") = Void, Bool;
overload externalInstanceMethod(static NSMatrix, static #"setBackgroundColor:") = Void, NSColor;
overload externalInstanceMethod(static NSMatrix, static #"backgroundColor") = NSColor;
overload externalInstanceMethod(static NSMatrix, static #"setCellBackgroundColor:") = Void, NSColor;
overload externalInstanceMethod(static NSMatrix, static #"cellBackgroundColor") = NSColor;
overload externalInstanceMethod(static NSMatrix, static #"setDrawsCellBackground:") = Void, Bool;
overload externalInstanceMethod(static NSMatrix, static #"drawsCellBackground") = Bool;
overload externalInstanceMethod(static NSMatrix, static #"setDrawsBackground:") = Void, Bool;
overload externalInstanceMethod(static NSMatrix, static #"drawsBackground") = Bool;
overload externalInstanceMethod(static NSMatrix, static #"setState:atRow:column:") = Void, Int, Int, Int;
overload externalInstanceMethod(static NSMatrix, static #"getNumberOfRows:columns:") = Void, Pointer[Int], Pointer[Int];
overload externalInstanceMethod(static NSMatrix, static #"numberOfRows") = Int;
overload externalInstanceMethod(static NSMatrix, static #"numberOfColumns") = Int;
overload externalInstanceMethod(static NSMatrix, static #"cellAtRow:column:") = Id, Int, Int;
overload externalInstanceMethod(static NSMatrix, static #"cellFrameAtRow:column:") = NSRect, Int, Int;
overload externalInstanceMethod(static NSMatrix, static #"getRow:column:ofCell:") = Bool, Pointer[Int], Pointer[Int], NSCell;
overload externalInstanceMethod(static NSMatrix, static #"getRow:column:forPoint:") = Bool, Pointer[Int], Pointer[Int], NSPoint;
overload externalInstanceMethod(static NSMatrix, static #"renewRows:columns:") = Void, Int, Int;
overload externalInstanceMethod(static NSMatrix, static #"putCell:atRow:column:") = Void, NSCell, Int, Int;
overload externalInstanceMethod(static NSMatrix, static #"addRow") = Void;
overload externalInstanceMethod(static NSMatrix, static #"addRowWithCells:") = Void, NSArray;
overload externalInstanceMethod(static NSMatrix, static #"insertRow:") = Void, Int;
overload externalInstanceMethod(static NSMatrix, static #"insertRow:withCells:") = Void, Int, NSArray;
overload externalInstanceMethod(static NSMatrix, static #"removeRow:") = Void, Int;
overload externalInstanceMethod(static NSMatrix, static #"addColumn") = Void;
overload externalInstanceMethod(static NSMatrix, static #"addColumnWithCells:") = Void, NSArray;
overload externalInstanceMethod(static NSMatrix, static #"insertColumn:") = Void, Int;
overload externalInstanceMethod(static NSMatrix, static #"insertColumn:withCells:") = Void, Int, NSArray;
overload externalInstanceMethod(static NSMatrix, static #"removeColumn:") = Void, Int;
overload externalInstanceMethod(static NSMatrix, static #"cellWithTag:") = Id, Int;
overload externalInstanceMethod(static NSMatrix, static #"doubleAction") = SelectorHandle;
overload externalInstanceMethod(static NSMatrix, static #"setDoubleAction:") = Void, SelectorHandle;
overload externalInstanceMethod(static NSMatrix, static #"setAutosizesCells:") = Void, Bool;
overload externalInstanceMethod(static NSMatrix, static #"autosizesCells") = Bool;
overload externalInstanceMethod(static NSMatrix, static #"sizeToCells") = Void;
overload externalInstanceMethod(static NSMatrix, static #"setValidateSize:") = Void, Bool;
overload externalInstanceMethod(static NSMatrix, static #"drawCellAtRow:column:") = Void, Int, Int;
overload externalInstanceMethod(static NSMatrix, static #"highlightCell:atRow:column:") = Void, Bool, Int, Int;
overload externalInstanceMethod(static NSMatrix, static #"setAutoscroll:") = Void, Bool;
overload externalInstanceMethod(static NSMatrix, static #"isAutoscroll") = Bool;
overload externalInstanceMethod(static NSMatrix, static #"scrollCellToVisibleAtRow:column:") = Void, Int, Int;
overload externalInstanceMethod(static NSMatrix, static #"mouseDownFlags") = Int;
overload externalInstanceMethod(static NSMatrix, static #"mouseDown:") = Void, NSEvent;
overload externalInstanceMethod(static NSMatrix, static #"performKeyEquivalent:") = Bool, NSEvent;
overload externalInstanceMethod(static NSMatrix, static #"sendAction") = Bool;
overload externalInstanceMethod(static NSMatrix, static #"sendDoubleAction") = Void;
overload externalInstanceMethod(static NSMatrix, static #"delegate") = Id;
overload externalInstanceMethod(static NSMatrix, static #"setDelegate:") = Void, Id;
overload externalInstanceMethod(static NSMatrix, static #"textShouldBeginEditing:") = Bool, NSText;
overload externalInstanceMethod(static NSMatrix, static #"textShouldEndEditing:") = Bool, NSText;
overload externalInstanceMethod(static NSMatrix, static #"textDidBeginEditing:") = Void, NSNotification;
overload externalInstanceMethod(static NSMatrix, static #"textDidEndEditing:") = Void, NSNotification;
overload externalInstanceMethod(static NSMatrix, static #"textDidChange:") = Void, NSNotification;
overload externalInstanceMethod(static NSMatrix, static #"selectText:") = Void, Id;
overload externalInstanceMethod(static NSMatrix, static #"selectTextAtRow:column:") = Id, Int, Int;
overload externalInstanceMethod(static NSMatrix, static #"acceptsFirstMouse:") = Bool, NSEvent;
overload externalInstanceMethod(static NSMatrix, static #"resetCursorRects") = Void;
overload externalInstanceMethod(static NSMatrix, static #"setToolTip:forCell:") = Void, NSString, NSCell;
overload externalInstanceMethod(static NSMatrix, static #"toolTipForCell:") = NSString, NSCell;
overload externalInstanceMethod(static NSMatrix, static #"setTabKeyTraversesCells:") = Void, Bool;
overload externalInstanceMethod(static NSMatrix, static #"tabKeyTraversesCells") = Bool;
overload externalInstanceMethod(static NSMatrix, static #"setKeyCell:") = Void, NSCell;
overload externalInstanceMethod(static NSMatrix, static #"keyCell") = Id;

record NSMenu = externalClass(NSObject);
overload externalInstanceMethod(static NSMenu, static #"copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(static NSMenu, static #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static NSMenu, static #"initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(static NSMenu, static #"initWithTitle:") = Id, NSString;
overload externalInstanceMethod(static NSMenu, static #"setTitle:") = Void, NSString;
overload externalInstanceMethod(static NSMenu, static #"title") = NSString;
overload externalClassMethod(static NSMenu, static #"popUpContextMenu:withEvent:forView:") = Void, NSMenu, NSEvent, NSView;
overload externalClassMethod(static NSMenu, static #"popUpContextMenu:withEvent:forView:withFont:") = Void, NSMenu, NSEvent, NSView, NSFont;
overload externalInstanceMethod(static NSMenu, static #"popUpMenuPositioningItem:atLocation:inView:") = Bool, NSMenuItem, NSPoint, NSView;
overload externalClassMethod(static NSMenu, static #"setMenuBarVisible:") = Void, Bool;
overload externalClassMethod(static NSMenu, static #"menuBarVisible") = Bool;
overload externalInstanceMethod(static NSMenu, static #"supermenu") = NSMenu;
overload externalInstanceMethod(static NSMenu, static #"setSupermenu:") = Void, NSMenu;
overload externalInstanceMethod(static NSMenu, static #"insertItem:atIndex:") = Void, NSMenuItem, Int;
overload externalInstanceMethod(static NSMenu, static #"addItem:") = Void, NSMenuItem;
overload externalInstanceMethod(static NSMenu, static #"insertItemWithTitle:action:keyEquivalent:atIndex:") = NSMenuItem, NSString, SelectorHandle, NSString, Int;
overload externalInstanceMethod(static NSMenu, static #"addItemWithTitle:action:keyEquivalent:") = NSMenuItem, NSString, SelectorHandle, NSString;
overload externalInstanceMethod(static NSMenu, static #"removeItemAtIndex:") = Void, Int;
overload externalInstanceMethod(static NSMenu, static #"removeItem:") = Void, NSMenuItem;
overload externalInstanceMethod(static NSMenu, static #"setSubmenu:forItem:") = Void, NSMenu, NSMenuItem;
overload externalInstanceMethod(static NSMenu, static #"removeAllItems") = Void;
overload externalInstanceMethod(static NSMenu, static #"itemArray") = NSArray;
overload externalInstanceMethod(static NSMenu, static #"numberOfItems") = Int;
overload externalInstanceMethod(static NSMenu, static #"itemAtIndex:") = NSMenuItem, Int;
overload externalInstanceMethod(static NSMenu, static #"indexOfItem:") = Int, NSMenuItem;
overload externalInstanceMethod(static NSMenu, static #"indexOfItemWithTitle:") = Int, NSString;
overload externalInstanceMethod(static NSMenu, static #"indexOfItemWithTag:") = Int, Int;
overload externalInstanceMethod(static NSMenu, static #"indexOfItemWithRepresentedObject:") = Int, Id;
overload externalInstanceMethod(static NSMenu, static #"indexOfItemWithSubmenu:") = Int, NSMenu;
overload externalInstanceMethod(static NSMenu, static #"indexOfItemWithTarget:andAction:") = Int, Id, SelectorHandle;
overload externalInstanceMethod(static NSMenu, static #"itemWithTitle:") = NSMenuItem, NSString;
overload externalInstanceMethod(static NSMenu, static #"itemWithTag:") = NSMenuItem, Int;
overload externalInstanceMethod(static NSMenu, static #"setAutoenablesItems:") = Void, Bool;
overload externalInstanceMethod(static NSMenu, static #"autoenablesItems") = Bool;
overload externalInstanceMethod(static NSMenu, static #"update") = Void;
overload externalInstanceMethod(static NSMenu, static #"performKeyEquivalent:") = Bool, NSEvent;
overload externalInstanceMethod(static NSMenu, static #"itemChanged:") = Void, NSMenuItem;
overload externalInstanceMethod(static NSMenu, static #"performActionForItemAtIndex:") = Void, Int;
overload externalInstanceMethod(static NSMenu, static #"setDelegate:") = Void, Id;
overload externalInstanceMethod(static NSMenu, static #"delegate") = Id;
overload externalInstanceMethod(static NSMenu, static #"menuBarHeight") = Float;
overload externalInstanceMethod(static NSMenu, static #"cancelTracking") = Void;
overload externalInstanceMethod(static NSMenu, static #"cancelTrackingWithoutAnimation") = Void;
overload externalInstanceMethod(static NSMenu, static #"highlightedItem") = NSMenuItem;
overload externalInstanceMethod(static NSMenu, static #"minimumWidth") = Float;
overload externalInstanceMethod(static NSMenu, static #"setMinimumWidth:") = Void, Float;
overload externalInstanceMethod(static NSMenu, static #"size") = NSSize;
overload externalInstanceMethod(static NSMenu, static #"font") = NSFont;
overload externalInstanceMethod(static NSMenu, static #"setFont:") = Void, NSFont;
overload externalInstanceMethod(static NSMenu, static #"allowsContextMenuPlugIns") = Bool;
overload externalInstanceMethod(static NSMenu, static #"setAllowsContextMenuPlugIns:") = Void, Bool;
overload externalInstanceMethod(static NSMenu, static #"setShowsStateColumn:") = Void, Bool;
overload externalInstanceMethod(static NSMenu, static #"showsStateColumn") = Bool;
overload externalClassMethod(static NSMenu, static #"menuZone") = Pointer[NSZone];
overload externalInstanceMethod(static NSMenu, static #"setMenuChangedMessagesEnabled:") = Void, Bool;
overload externalInstanceMethod(static NSMenu, static #"menuChangedMessagesEnabled") = Bool;
overload externalInstanceMethod(static NSMenu, static #"helpRequested:") = Void, NSEvent;
overload externalInstanceMethod(static NSMenu, static #"isTornOff") = Bool;
overload externalInstanceMethod(static NSMenu, static #"submenuAction:") = Void, Id;
overload externalInstanceMethod(static NSMenu, static #"propertiesToUpdate") = UInt;
overload externalInstanceMethod(static NSMenu, static #"setMenuRepresentation:") = Void, Id;
overload externalInstanceMethod(static NSMenu, static #"menuRepresentation") = Id;
overload externalInstanceMethod(static NSMenu, static #"setContextMenuRepresentation:") = Void, Id;
overload externalInstanceMethod(static NSMenu, static #"contextMenuRepresentation") = Id;
overload externalInstanceMethod(static NSMenu, static #"setTearOffMenuRepresentation:") = Void, Id;
overload externalInstanceMethod(static NSMenu, static #"tearOffMenuRepresentation") = Id;
overload externalClassMethod(static NSMenu, static #"setMenuZone:") = Void, Pointer[NSZone];
overload externalInstanceMethod(static NSMenu, static #"attachedMenu") = NSMenu;
overload externalInstanceMethod(static NSMenu, static #"isAttached") = Bool;
overload externalInstanceMethod(static NSMenu, static #"sizeToFit") = Void;
overload externalInstanceMethod(static NSMenu, static #"locationForSubmenu:") = NSPoint, NSMenu;

record NSMenuItem = externalClass(NSObject);
overload externalInstanceMethod(static NSMenuItem, static #"copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(static NSMenuItem, static #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static NSMenuItem, static #"initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(static NSMenuItem, static #"action") = SelectorHandle;
overload externalInstanceMethod(static NSMenuItem, static #"tag") = Int;
overload externalClassMethod(static NSMenuItem, static #"setUsesUserKeyEquivalents:") = Void, Bool;
overload externalClassMethod(static NSMenuItem, static #"usesUserKeyEquivalents") = Bool;
overload externalClassMethod(static NSMenuItem, static #"separatorItem") = NSMenuItem;
overload externalInstanceMethod(static NSMenuItem, static #"initWithTitle:action:keyEquivalent:") = Id, NSString, SelectorHandle, NSString;
overload externalInstanceMethod(static NSMenuItem, static #"setMenu:") = Void, NSMenu;
overload externalInstanceMethod(static NSMenuItem, static #"menu") = NSMenu;
overload externalInstanceMethod(static NSMenuItem, static #"hasSubmenu") = Bool;
overload externalInstanceMethod(static NSMenuItem, static #"setSubmenu:") = Void, NSMenu;
overload externalInstanceMethod(static NSMenuItem, static #"submenu") = NSMenu;
overload externalInstanceMethod(static NSMenuItem, static #"parentItem") = NSMenuItem;
overload externalInstanceMethod(static NSMenuItem, static #"setTitle:") = Void, NSString;
overload externalInstanceMethod(static NSMenuItem, static #"title") = NSString;
overload externalInstanceMethod(static NSMenuItem, static #"setAttributedTitle:") = Void, NSAttributedString;
overload externalInstanceMethod(static NSMenuItem, static #"attributedTitle") = NSAttributedString;
overload externalInstanceMethod(static NSMenuItem, static #"isSeparatorItem") = Bool;
overload externalInstanceMethod(static NSMenuItem, static #"setKeyEquivalent:") = Void, NSString;
overload externalInstanceMethod(static NSMenuItem, static #"keyEquivalent") = NSString;
overload externalInstanceMethod(static NSMenuItem, static #"setKeyEquivalentModifierMask:") = Void, UInt;
overload externalInstanceMethod(static NSMenuItem, static #"keyEquivalentModifierMask") = UInt;
overload externalInstanceMethod(static NSMenuItem, static #"userKeyEquivalent") = NSString;
overload externalInstanceMethod(static NSMenuItem, static #"setTitleWithMnemonic:") = Void, NSString;
overload externalInstanceMethod(static NSMenuItem, static #"setImage:") = Void, NSImage;
overload externalInstanceMethod(static NSMenuItem, static #"image") = NSImage;
overload externalInstanceMethod(static NSMenuItem, static #"setState:") = Void, Int;
overload externalInstanceMethod(static NSMenuItem, static #"state") = Int;
overload externalInstanceMethod(static NSMenuItem, static #"setOnStateImage:") = Void, NSImage;
overload externalInstanceMethod(static NSMenuItem, static #"onStateImage") = NSImage;
overload externalInstanceMethod(static NSMenuItem, static #"setOffStateImage:") = Void, NSImage;
overload externalInstanceMethod(static NSMenuItem, static #"offStateImage") = NSImage;
overload externalInstanceMethod(static NSMenuItem, static #"setMixedStateImage:") = Void, NSImage;
overload externalInstanceMethod(static NSMenuItem, static #"mixedStateImage") = NSImage;
overload externalInstanceMethod(static NSMenuItem, static #"setEnabled:") = Void, Bool;
overload externalInstanceMethod(static NSMenuItem, static #"isEnabled") = Bool;
overload externalInstanceMethod(static NSMenuItem, static #"setAlternate:") = Void, Bool;
overload externalInstanceMethod(static NSMenuItem, static #"isAlternate") = Bool;
overload externalInstanceMethod(static NSMenuItem, static #"setIndentationLevel:") = Void, Int;
overload externalInstanceMethod(static NSMenuItem, static #"indentationLevel") = Int;
overload externalInstanceMethod(static NSMenuItem, static #"setTarget:") = Void, Id;
overload externalInstanceMethod(static NSMenuItem, static #"target") = Id;
overload externalInstanceMethod(static NSMenuItem, static #"setAction:") = Void, SelectorHandle;
overload externalInstanceMethod(static NSMenuItem, static #"action") = SelectorHandle;
overload externalInstanceMethod(static NSMenuItem, static #"setTag:") = Void, Int;
overload externalInstanceMethod(static NSMenuItem, static #"tag") = Int;
overload externalInstanceMethod(static NSMenuItem, static #"setRepresentedObject:") = Void, Id;
overload externalInstanceMethod(static NSMenuItem, static #"representedObject") = Id;
overload externalInstanceMethod(static NSMenuItem, static #"setView:") = Void, NSView;
overload externalInstanceMethod(static NSMenuItem, static #"view") = NSView;
overload externalInstanceMethod(static NSMenuItem, static #"isHighlighted") = Bool;
overload externalInstanceMethod(static NSMenuItem, static #"setHidden:") = Void, Bool;
overload externalInstanceMethod(static NSMenuItem, static #"isHidden") = Bool;
overload externalInstanceMethod(static NSMenuItem, static #"isHiddenOrHasHiddenAncestor") = Bool;
overload externalInstanceMethod(static NSMenuItem, static #"setToolTip:") = Void, NSString;
overload externalInstanceMethod(static NSMenuItem, static #"toolTip") = NSString;
overload externalInstanceMethod(static NSMenuItem, static #"setMnemonicLocation:") = Void, UInt;
overload externalInstanceMethod(static NSMenuItem, static #"mnemonicLocation") = UInt;
overload externalInstanceMethod(static NSMenuItem, static #"mnemonic") = NSString;

record NSMenuItemCell = externalClass(NSButtonCell);
overload externalInstanceMethod(static NSMenuItemCell, static #"setMenuItem:") = Void, NSMenuItem;
overload externalInstanceMethod(static NSMenuItemCell, static #"menuItem") = NSMenuItem;
overload externalInstanceMethod(static NSMenuItemCell, static #"setMenuView:") = Void, NSMenuView;
overload externalInstanceMethod(static NSMenuItemCell, static #"menuView") = NSMenuView;
overload externalInstanceMethod(static NSMenuItemCell, static #"setNeedsSizing:") = Void, Bool;
overload externalInstanceMethod(static NSMenuItemCell, static #"needsSizing") = Bool;
overload externalInstanceMethod(static NSMenuItemCell, static #"calcSize") = Void;
overload externalInstanceMethod(static NSMenuItemCell, static #"setNeedsDisplay:") = Void, Bool;
overload externalInstanceMethod(static NSMenuItemCell, static #"needsDisplay") = Bool;
overload externalInstanceMethod(static NSMenuItemCell, static #"stateImageWidth") = Float;
overload externalInstanceMethod(static NSMenuItemCell, static #"imageWidth") = Float;
overload externalInstanceMethod(static NSMenuItemCell, static #"titleWidth") = Float;
overload externalInstanceMethod(static NSMenuItemCell, static #"keyEquivalentWidth") = Float;
overload externalInstanceMethod(static NSMenuItemCell, static #"stateImageRectForBounds:") = NSRect, NSRect;
overload externalInstanceMethod(static NSMenuItemCell, static #"titleRectForBounds:") = NSRect, NSRect;
overload externalInstanceMethod(static NSMenuItemCell, static #"keyEquivalentRectForBounds:") = NSRect, NSRect;
overload externalInstanceMethod(static NSMenuItemCell, static #"drawSeparatorItemWithFrame:inView:") = Void, NSRect, NSView;
overload externalInstanceMethod(static NSMenuItemCell, static #"drawStateImageWithFrame:inView:") = Void, NSRect, NSView;
overload externalInstanceMethod(static NSMenuItemCell, static #"drawImageWithFrame:inView:") = Void, NSRect, NSView;
overload externalInstanceMethod(static NSMenuItemCell, static #"drawTitleWithFrame:inView:") = Void, NSRect, NSView;
overload externalInstanceMethod(static NSMenuItemCell, static #"drawKeyEquivalentWithFrame:inView:") = Void, NSRect, NSView;
overload externalInstanceMethod(static NSMenuItemCell, static #"drawBorderAndBackgroundWithFrame:inView:") = Void, NSRect, NSView;
overload externalInstanceMethod(static NSMenuItemCell, static #"tag") = Int;

record NSMenuView = externalClass(NSView);
overload externalClassMethod(static NSMenuView, static #"menuBarHeight") = Float;
overload externalInstanceMethod(static NSMenuView, static #"initWithFrame:") = Id, NSRect;
overload externalInstanceMethod(static NSMenuView, static #"initAsTearOff") = Id;
overload externalInstanceMethod(static NSMenuView, static #"setMenu:") = Void, NSMenu;
overload externalInstanceMethod(static NSMenuView, static #"menu") = NSMenu;
overload externalInstanceMethod(static NSMenuView, static #"itemChanged:") = Void, NSNotification;
overload externalInstanceMethod(static NSMenuView, static #"itemAdded:") = Void, NSNotification;
overload externalInstanceMethod(static NSMenuView, static #"itemRemoved:") = Void, NSNotification;
overload externalInstanceMethod(static NSMenuView, static #"update") = Void;
overload externalInstanceMethod(static NSMenuView, static #"setHorizontal:") = Void, Bool;
overload externalInstanceMethod(static NSMenuView, static #"isHorizontal") = Bool;
overload externalInstanceMethod(static NSMenuView, static #"setFont:") = Void, NSFont;
overload externalInstanceMethod(static NSMenuView, static #"font") = NSFont;
overload externalInstanceMethod(static NSMenuView, static #"innerRect") = NSRect;
overload externalInstanceMethod(static NSMenuView, static #"rectOfItemAtIndex:") = NSRect, Int;
overload externalInstanceMethod(static NSMenuView, static #"indexOfItemAtPoint:") = Int, NSPoint;
overload externalInstanceMethod(static NSMenuView, static #"setNeedsDisplayForItemAtIndex:") = Void, Int;
overload externalInstanceMethod(static NSMenuView, static #"setHighlightedItemIndex:") = Void, Int;
overload externalInstanceMethod(static NSMenuView, static #"highlightedItemIndex") = Int;
overload externalInstanceMethod(static NSMenuView, static #"stateImageOffset") = Float;
overload externalInstanceMethod(static NSMenuView, static #"stateImageWidth") = Float;
overload externalInstanceMethod(static NSMenuView, static #"imageAndTitleOffset") = Float;
overload externalInstanceMethod(static NSMenuView, static #"imageAndTitleWidth") = Float;
overload externalInstanceMethod(static NSMenuView, static #"keyEquivalentOffset") = Float;
overload externalInstanceMethod(static NSMenuView, static #"keyEquivalentWidth") = Float;
overload externalInstanceMethod(static NSMenuView, static #"setMenuItemCell:forItemAtIndex:") = Void, NSMenuItemCell, Int;
overload externalInstanceMethod(static NSMenuView, static #"menuItemCellForItemAtIndex:") = NSMenuItemCell, Int;
overload externalInstanceMethod(static NSMenuView, static #"attachedMenuView") = NSMenuView;
overload externalInstanceMethod(static NSMenuView, static #"setNeedsSizing:") = Void, Bool;
overload externalInstanceMethod(static NSMenuView, static #"needsSizing") = Bool;
overload externalInstanceMethod(static NSMenuView, static #"sizeToFit") = Void;
overload externalInstanceMethod(static NSMenuView, static #"attachedMenu") = NSMenu;
overload externalInstanceMethod(static NSMenuView, static #"isAttached") = Bool;
overload externalInstanceMethod(static NSMenuView, static #"isTornOff") = Bool;
overload externalInstanceMethod(static NSMenuView, static #"locationForSubmenu:") = NSPoint, NSMenu;
overload externalInstanceMethod(static NSMenuView, static #"setWindowFrameForAttachingToRect:onScreen:preferredEdge:popUpSelectedItem:") = Void, NSRect, NSScreen, NSRectEdge, Int;
overload externalInstanceMethod(static NSMenuView, static #"detachSubmenu") = Void;
overload externalInstanceMethod(static NSMenuView, static #"attachSubmenuForItemAtIndex:") = Void, Int;
overload externalInstanceMethod(static NSMenuView, static #"performActionWithHighlightingForItemAtIndex:") = Void, Int;
overload externalInstanceMethod(static NSMenuView, static #"trackWithEvent:") = Bool, NSEvent;
overload externalInstanceMethod(static NSMenuView, static #"horizontalEdgePadding") = Float;
overload externalInstanceMethod(static NSMenuView, static #"setHorizontalEdgePadding:") = Void, Float;

record NSMovie = externalClass(NSObject);
overload externalInstanceMethod(static NSMovie, static #"copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(static NSMovie, static #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static NSMovie, static #"initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(static NSMovie, static #"initWithMovie:") = Id, RawPointer;
overload externalInstanceMethod(static NSMovie, static #"initWithURL:byReference:") = Id, NSURL, Bool;
overload externalInstanceMethod(static NSMovie, static #"initWithPasteboard:") = Id, NSPasteboard;
overload externalInstanceMethod(static NSMovie, static #"QTMovie") = RawPointer;
overload externalInstanceMethod(static NSMovie, static #"URL") = NSURL;
overload externalClassMethod(static NSMovie, static #"movieUnfilteredFileTypes") = NSArray;
overload externalClassMethod(static NSMovie, static #"movieUnfilteredPasteboardTypes") = NSArray;
overload externalClassMethod(static NSMovie, static #"canInitWithPasteboard:") = Bool, NSPasteboard;

record NSMovieView = externalClass(NSView);
overload externalInstanceMethod(static NSMovieView, static #"validateUserInterfaceItem:") = Bool, Id;
overload externalInstanceMethod(static NSMovieView, static #"setMovie:") = Void, NSMovie;
overload externalInstanceMethod(static NSMovieView, static #"movie") = NSMovie;
overload externalInstanceMethod(static NSMovieView, static #"movieController") = RawPointer;
overload externalInstanceMethod(static NSMovieView, static #"movieRect") = NSRect;
overload externalInstanceMethod(static NSMovieView, static #"start:") = Void, Id;
overload externalInstanceMethod(static NSMovieView, static #"stop:") = Void, Id;
overload externalInstanceMethod(static NSMovieView, static #"isPlaying") = Bool;
overload externalInstanceMethod(static NSMovieView, static #"gotoPosterFrame:") = Void, Id;
overload externalInstanceMethod(static NSMovieView, static #"gotoBeginning:") = Void, Id;
overload externalInstanceMethod(static NSMovieView, static #"gotoEnd:") = Void, Id;
overload externalInstanceMethod(static NSMovieView, static #"stepForward:") = Void, Id;
overload externalInstanceMethod(static NSMovieView, static #"stepBack:") = Void, Id;
overload externalInstanceMethod(static NSMovieView, static #"setRate:") = Void, Float;
overload externalInstanceMethod(static NSMovieView, static #"rate") = Float;
overload externalInstanceMethod(static NSMovieView, static #"setVolume:") = Void, Float;
overload externalInstanceMethod(static NSMovieView, static #"volume") = Float;
overload externalInstanceMethod(static NSMovieView, static #"setMuted:") = Void, Bool;
overload externalInstanceMethod(static NSMovieView, static #"isMuted") = Bool;
overload externalInstanceMethod(static NSMovieView, static #"setLoopMode:") = Void, UInt;
overload externalInstanceMethod(static NSMovieView, static #"loopMode") = UInt;
overload externalInstanceMethod(static NSMovieView, static #"setPlaysSelectionOnly:") = Void, Bool;
overload externalInstanceMethod(static NSMovieView, static #"playsSelectionOnly") = Bool;
overload externalInstanceMethod(static NSMovieView, static #"setPlaysEveryFrame:") = Void, Bool;
overload externalInstanceMethod(static NSMovieView, static #"playsEveryFrame") = Bool;
overload externalInstanceMethod(static NSMovieView, static #"showController:adjustingSize:") = Void, Bool, Bool;
overload externalInstanceMethod(static NSMovieView, static #"isControllerVisible") = Bool;
overload externalInstanceMethod(static NSMovieView, static #"resizeWithMagnification:") = Void, Float;
overload externalInstanceMethod(static NSMovieView, static #"sizeForMagnification:") = NSSize, Float;
overload externalInstanceMethod(static NSMovieView, static #"setEditable:") = Void, Bool;
overload externalInstanceMethod(static NSMovieView, static #"isEditable") = Bool;
overload externalInstanceMethod(static NSMovieView, static #"cut:") = Void, Id;
overload externalInstanceMethod(static NSMovieView, static #"copy:") = Void, Id;
overload externalInstanceMethod(static NSMovieView, static #"paste:") = Void, Id;
overload externalInstanceMethod(static NSMovieView, static #"delete:") = Void, Id;
overload externalInstanceMethod(static NSMovieView, static #"selectAll:") = Void, Id;
overload externalInstanceMethod(static NSMovieView, static #"clear:") = Void, Id;

overload externalInstanceMethod(static NSMutableAttributedString, static #"readFromURL:options:documentAttributes:error:") = Bool, NSURL, NSDictionary, Pointer[NSDictionary], Pointer[NSError];
overload externalInstanceMethod(static NSMutableAttributedString, static #"readFromData:options:documentAttributes:error:") = Bool, NSData, NSDictionary, Pointer[NSDictionary], Pointer[NSError];
overload externalInstanceMethod(static NSMutableAttributedString, static #"readFromURL:options:documentAttributes:") = Bool, NSURL, NSDictionary, Pointer[NSDictionary];
overload externalInstanceMethod(static NSMutableAttributedString, static #"readFromData:options:documentAttributes:") = Bool, NSData, NSDictionary, Pointer[NSDictionary];
overload externalInstanceMethod(static NSMutableAttributedString, static #"superscriptRange:") = Void, NSRange;
overload externalInstanceMethod(static NSMutableAttributedString, static #"subscriptRange:") = Void, NSRange;
overload externalInstanceMethod(static NSMutableAttributedString, static #"unscriptRange:") = Void, NSRange;
overload externalInstanceMethod(static NSMutableAttributedString, static #"applyFontTraits:range:") = Void, UInt, NSRange;
overload externalInstanceMethod(static NSMutableAttributedString, static #"setAlignment:range:") = Void, UInt, NSRange;
overload externalInstanceMethod(static NSMutableAttributedString, static #"setBaseWritingDirection:range:") = Void, Int, NSRange;
overload externalInstanceMethod(static NSMutableAttributedString, static #"fixAttributesInRange:") = Void, NSRange;
overload externalInstanceMethod(static NSMutableAttributedString, static #"fixFontAttributeInRange:") = Void, NSRange;
overload externalInstanceMethod(static NSMutableAttributedString, static #"fixParagraphStyleAttributeInRange:") = Void, NSRange;
overload externalInstanceMethod(static NSMutableAttributedString, static #"fixAttachmentAttributeInRange:") = Void, NSRange;
overload externalInstanceMethod(static NSMutableAttributedString, static #"updateAttachmentsFromPath:") = Void, NSString;

record NSMutableParagraphStyle = externalClass(NSParagraphStyle);
overload externalInstanceMethod(static NSMutableParagraphStyle, static #"setLineSpacing:") = Void, Float;
overload externalInstanceMethod(static NSMutableParagraphStyle, static #"setParagraphSpacing:") = Void, Float;
overload externalInstanceMethod(static NSMutableParagraphStyle, static #"setAlignment:") = Void, UInt;
overload externalInstanceMethod(static NSMutableParagraphStyle, static #"setFirstLineHeadIndent:") = Void, Float;
overload externalInstanceMethod(static NSMutableParagraphStyle, static #"setHeadIndent:") = Void, Float;
overload externalInstanceMethod(static NSMutableParagraphStyle, static #"setTailIndent:") = Void, Float;
overload externalInstanceMethod(static NSMutableParagraphStyle, static #"setLineBreakMode:") = Void, UInt;
overload externalInstanceMethod(static NSMutableParagraphStyle, static #"setMinimumLineHeight:") = Void, Float;
overload externalInstanceMethod(static NSMutableParagraphStyle, static #"setMaximumLineHeight:") = Void, Float;
overload externalInstanceMethod(static NSMutableParagraphStyle, static #"addTabStop:") = Void, NSTextTab;
overload externalInstanceMethod(static NSMutableParagraphStyle, static #"removeTabStop:") = Void, NSTextTab;
overload externalInstanceMethod(static NSMutableParagraphStyle, static #"setTabStops:") = Void, NSArray;
overload externalInstanceMethod(static NSMutableParagraphStyle, static #"setParagraphStyle:") = Void, NSParagraphStyle;
overload externalInstanceMethod(static NSMutableParagraphStyle, static #"setBaseWritingDirection:") = Void, Int;
overload externalInstanceMethod(static NSMutableParagraphStyle, static #"setLineHeightMultiple:") = Void, Float;
overload externalInstanceMethod(static NSMutableParagraphStyle, static #"setParagraphSpacingBefore:") = Void, Float;
overload externalInstanceMethod(static NSMutableParagraphStyle, static #"setDefaultTabInterval:") = Void, Float;
overload externalInstanceMethod(static NSMutableParagraphStyle, static #"setTextBlocks:") = Void, NSArray;
overload externalInstanceMethod(static NSMutableParagraphStyle, static #"setTextLists:") = Void, NSArray;
overload externalInstanceMethod(static NSMutableParagraphStyle, static #"setHyphenationFactor:") = Void, Float;
overload externalInstanceMethod(static NSMutableParagraphStyle, static #"setTighteningFactorForTruncation:") = Void, Float;
overload externalInstanceMethod(static NSMutableParagraphStyle, static #"setHeaderLevel:") = Void, Int;

record NSNib = externalClass(NSObject);
overload externalInstanceMethod(static NSNib, static #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static NSNib, static #"initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(static NSNib, static #"initWithContentsOfURL:") = Id, NSURL;
overload externalInstanceMethod(static NSNib, static #"initWithNibNamed:bundle:") = Id, NSString, NSBundle;
overload externalInstanceMethod(static NSNib, static #"instantiateNibWithExternalNameTable:") = Bool, NSDictionary;
overload externalInstanceMethod(static NSNib, static #"instantiateNibWithOwner:topLevelObjects:") = Bool, Id, Pointer[NSArray];

overload externalInstanceMethod(static NSObject, static #"accessibilityAttributeNames") = NSArray;
overload externalInstanceMethod(static NSObject, static #"accessibilityAttributeValue:") = Id, NSString;
overload externalInstanceMethod(static NSObject, static #"accessibilityIsAttributeSettable:") = Bool, NSString;
overload externalInstanceMethod(static NSObject, static #"accessibilitySetValue:forAttribute:") = Void, Id, NSString;
overload externalInstanceMethod(static NSObject, static #"accessibilityParameterizedAttributeNames") = NSArray;
overload externalInstanceMethod(static NSObject, static #"accessibilityAttributeValue:forParameter:") = Id, NSString, Id;
overload externalInstanceMethod(static NSObject, static #"accessibilityActionNames") = NSArray;
overload externalInstanceMethod(static NSObject, static #"accessibilityActionDescription:") = NSString, NSString;
overload externalInstanceMethod(static NSObject, static #"accessibilityPerformAction:") = Void, NSString;
overload externalInstanceMethod(static NSObject, static #"accessibilityIsIgnored") = Bool;
overload externalInstanceMethod(static NSObject, static #"accessibilityHitTest:") = Id, NSPoint;
overload externalInstanceMethod(static NSObject, static #"accessibilityFocusedUIElement") = Id;
overload externalInstanceMethod(static NSObject, static #"accessibilityIndexOfChild:") = UInt, Id;
overload externalInstanceMethod(static NSObject, static #"accessibilityArrayAttributeCount:") = UInt, NSString;
overload externalInstanceMethod(static NSObject, static #"accessibilityArrayAttributeValues:index:maxCount:") = NSArray, NSString, UInt, UInt;
overload externalInstanceMethod(static NSObject, static #"accessibilitySetOverrideValue:forAttribute:") = Bool, Id, NSString;
overload externalInstanceMethod(static NSObject, static #"view:stringForToolTip:point:userData:") = NSString, NSView, Int, NSPoint, RawPointer;
overload externalInstanceMethod(static NSObject, static #"writeSelectionToPasteboard:types:") = Bool, NSPasteboard, NSArray;
overload externalInstanceMethod(static NSObject, static #"readSelectionFromPasteboard:") = Bool, NSPasteboard;
overload externalInstanceMethod(static NSObject, static #"controlTextDidBeginEditing:") = Void, NSNotification;
overload externalInstanceMethod(static NSObject, static #"controlTextDidEndEditing:") = Void, NSNotification;
overload externalInstanceMethod(static NSObject, static #"controlTextDidChange:") = Void, NSNotification;
overload externalInstanceMethod(static NSObject, static #"fontManager:willIncludeFont:") = Bool, Id, NSString;
overload externalInstanceMethod(static NSObject, static #"changeFont:") = Void, Id;
overload externalInstanceMethod(static NSObject, static #"validModesForFontPanel:") = UInt, NSFontPanel;
overload externalInstanceMethod(static NSObject, static #"validateMenuItem:") = Bool, NSMenuItem;
overload externalInstanceMethod(static NSObject, static #"pasteboard:provideDataForType:") = Void, NSPasteboard, NSString;
overload externalInstanceMethod(static NSObject, static #"pasteboardChangedOwner:") = Void, NSPasteboard;
overload externalInstanceMethod(static NSObject, static #"draggingEntered:") = UInt, Id;
overload externalInstanceMethod(static NSObject, static #"draggingUpdated:") = UInt, Id;
overload externalInstanceMethod(static NSObject, static #"draggingExited:") = Void, Id;
overload externalInstanceMethod(static NSObject, static #"prepareForDragOperation:") = Bool, Id;
overload externalInstanceMethod(static NSObject, static #"performDragOperation:") = Bool, Id;
overload externalInstanceMethod(static NSObject, static #"concludeDragOperation:") = Void, Id;
overload externalInstanceMethod(static NSObject, static #"draggingEnded:") = Void, Id;
overload externalInstanceMethod(static NSObject, static #"wantsPeriodicDraggingUpdates") = Bool;
overload externalInstanceMethod(static NSObject, static #"draggingSourceOperationMaskForLocal:") = UInt, Bool;
overload externalInstanceMethod(static NSObject, static #"namesOfPromisedFilesDroppedAtDestination:") = NSArray, NSURL;
overload externalInstanceMethod(static NSObject, static #"draggedImage:beganAt:") = Void, NSImage, NSPoint;
overload externalInstanceMethod(static NSObject, static #"draggedImage:endedAt:operation:") = Void, NSImage, NSPoint, UInt;
overload externalInstanceMethod(static NSObject, static #"draggedImage:movedTo:") = Void, NSImage, NSPoint;
overload externalInstanceMethod(static NSObject, static #"ignoreModifierKeysWhileDragging") = Bool;
overload externalInstanceMethod(static NSObject, static #"draggedImage:endedAt:deposited:") = Void, NSImage, NSPoint, Bool;
overload externalInstanceMethod(static NSObject, static #"changeColor:") = Void, Id;
overload externalInstanceMethod(static NSObject, static #"awakeFromNib") = Void;
overload externalInstanceMethod(static NSObject, static #"panel:isValidFilename:") = Bool, Id, NSString;
overload externalInstanceMethod(static NSObject, static #"panel:directoryDidChange:") = Void, Id, NSString;
overload externalInstanceMethod(static NSObject, static #"panel:compareFilename:with:caseSensitive:") = Int, Id, NSString, NSString, Bool;
overload externalInstanceMethod(static NSObject, static #"panel:shouldShowFilename:") = Bool, Id, NSString;
overload externalInstanceMethod(static NSObject, static #"tableView:writeRows:toPasteboard:") = Bool, NSTableView, NSArray, NSPasteboard;
overload externalInstanceMethod(static NSObject, static #"outlineViewSelectionDidChange:") = Void, NSNotification;
overload externalInstanceMethod(static NSObject, static #"outlineViewColumnDidMove:") = Void, NSNotification;
overload externalInstanceMethod(static NSObject, static #"outlineViewColumnDidResize:") = Void, NSNotification;
overload externalInstanceMethod(static NSObject, static #"outlineViewSelectionIsChanging:") = Void, NSNotification;
overload externalInstanceMethod(static NSObject, static #"outlineViewItemWillExpand:") = Void, NSNotification;
overload externalInstanceMethod(static NSObject, static #"outlineViewItemDidExpand:") = Void, NSNotification;
overload externalInstanceMethod(static NSObject, static #"outlineViewItemWillCollapse:") = Void, NSNotification;
overload externalInstanceMethod(static NSObject, static #"outlineViewItemDidCollapse:") = Void, NSNotification;
overload externalInstanceMethod(static NSObject, static #"application:delegateHandlesKey:") = Bool, NSApplication, NSString;
overload externalInstanceMethod(static NSObject, static #"validateToolbarItem:") = Bool, NSToolbarItem;
overload externalClassMethod(static NSObject, static #"exposeBinding:") = Void, NSString;
overload externalInstanceMethod(static NSObject, static #"exposedBindings") = NSArray;
overload externalInstanceMethod(static NSObject, static #"valueClassForBinding:") = Id, NSString;
overload externalInstanceMethod(static NSObject, static #"bind:toObject:withKeyPath:options:") = Void, NSString, Id, NSString, NSDictionary;
overload externalInstanceMethod(static NSObject, static #"unbind:") = Void, NSString;
overload externalInstanceMethod(static NSObject, static #"infoForBinding:") = NSDictionary, NSString;
overload externalInstanceMethod(static NSObject, static #"optionDescriptionsForBinding:") = NSArray, NSString;
overload externalClassMethod(static NSObject, static #"setDefaultPlaceholder:forMarker:withBinding:") = Void, Id, Id, NSString;
overload externalClassMethod(static NSObject, static #"defaultPlaceholderForMarker:withBinding:") = Id, Id, NSString;
overload externalInstanceMethod(static NSObject, static #"objectDidBeginEditing:") = Void, Id;
overload externalInstanceMethod(static NSObject, static #"objectDidEndEditing:") = Void, Id;
overload externalInstanceMethod(static NSObject, static #"discardEditing") = Void;
overload externalInstanceMethod(static NSObject, static #"commitEditing") = Bool;
overload externalInstanceMethod(static NSObject, static #"commitEditingWithDelegate:didCommitSelector:contextInfo:") = Void, Id, SelectorHandle, RawPointer;
overload externalInstanceMethod(static NSObject, static #"setLocalizedKey:") = Void, NSString;
overload externalInstanceMethod(static NSObject, static #"localizedKey") = NSString;
overload externalInstanceMethod(static NSObject, static #"setKey:") = Void, NSString;
overload externalInstanceMethod(static NSObject, static #"key") = NSString;
overload externalInstanceMethod(static NSObject, static #"setValue:") = Void, Id;
overload externalInstanceMethod(static NSObject, static #"value") = Id;
overload externalInstanceMethod(static NSObject, static #"isExplicitlyIncluded") = Bool;

record NSObjectController = externalClass(NSController);
overload externalInstanceMethod(static NSObjectController, static #"initWithContent:") = Id, Id;
overload externalInstanceMethod(static NSObjectController, static #"setContent:") = Void, Id;
overload externalInstanceMethod(static NSObjectController, static #"content") = Id;
overload externalInstanceMethod(static NSObjectController, static #"selection") = Id;
overload externalInstanceMethod(static NSObjectController, static #"selectedObjects") = NSArray;
overload externalInstanceMethod(static NSObjectController, static #"setAutomaticallyPreparesContent:") = Void, Bool;
overload externalInstanceMethod(static NSObjectController, static #"automaticallyPreparesContent") = Bool;
overload externalInstanceMethod(static NSObjectController, static #"prepareContent") = Void;
overload externalInstanceMethod(static NSObjectController, static #"setObjectClass:") = Void, Id;
overload externalInstanceMethod(static NSObjectController, static #"objectClass") = Id;
overload externalInstanceMethod(static NSObjectController, static #"newObject") = Id;
overload externalInstanceMethod(static NSObjectController, static #"addObject:") = Void, Id;
overload externalInstanceMethod(static NSObjectController, static #"removeObject:") = Void, Id;
overload externalInstanceMethod(static NSObjectController, static #"setEditable:") = Void, Bool;
overload externalInstanceMethod(static NSObjectController, static #"isEditable") = Bool;
overload externalInstanceMethod(static NSObjectController, static #"add:") = Void, Id;
overload externalInstanceMethod(static NSObjectController, static #"canAdd") = Bool;
overload externalInstanceMethod(static NSObjectController, static #"remove:") = Void, Id;
overload externalInstanceMethod(static NSObjectController, static #"canRemove") = Bool;
overload externalInstanceMethod(static NSObjectController, static #"validateUserInterfaceItem:") = Bool, Id;
overload externalInstanceMethod(static NSObjectController, static #"managedObjectContext") = NSManagedObjectContext;
overload externalInstanceMethod(static NSObjectController, static #"setManagedObjectContext:") = Void, NSManagedObjectContext;
overload externalInstanceMethod(static NSObjectController, static #"entityName") = NSString;
overload externalInstanceMethod(static NSObjectController, static #"setEntityName:") = Void, NSString;
overload externalInstanceMethod(static NSObjectController, static #"fetchPredicate") = NSPredicate;
overload externalInstanceMethod(static NSObjectController, static #"setFetchPredicate:") = Void, NSPredicate;
overload externalInstanceMethod(static NSObjectController, static #"fetchWithRequest:merge:error:") = Bool, NSFetchRequest, Bool, Pointer[NSError];
overload externalInstanceMethod(static NSObjectController, static #"fetch:") = Void, Id;
overload externalInstanceMethod(static NSObjectController, static #"setUsesLazyFetching:") = Void, Bool;
overload externalInstanceMethod(static NSObjectController, static #"usesLazyFetching") = Bool;
overload externalInstanceMethod(static NSObjectController, static #"defaultFetchRequest") = NSFetchRequest;

record NSOpenGLContext = externalClass(NSObject);
overload externalInstanceMethod(static NSOpenGLContext, static #"initWithFormat:shareContext:") = Id, NSOpenGLPixelFormat, NSOpenGLContext;
overload externalInstanceMethod(static NSOpenGLContext, static #"initWithCGLContextObj:") = Id, RawPointer;
overload externalInstanceMethod(static NSOpenGLContext, static #"setView:") = Void, NSView;
overload externalInstanceMethod(static NSOpenGLContext, static #"view") = NSView;
overload externalInstanceMethod(static NSOpenGLContext, static #"setFullScreen") = Void;
overload externalInstanceMethod(static NSOpenGLContext, static #"setOffScreen:width:height:rowbytes:") = Void, RawPointer, Int, Int, Int;
overload externalInstanceMethod(static NSOpenGLContext, static #"clearDrawable") = Void;
overload externalInstanceMethod(static NSOpenGLContext, static #"update") = Void;
overload externalInstanceMethod(static NSOpenGLContext, static #"flushBuffer") = Void;
overload externalInstanceMethod(static NSOpenGLContext, static #"makeCurrentContext") = Void;
overload externalClassMethod(static NSOpenGLContext, static #"clearCurrentContext") = Void;
overload externalClassMethod(static NSOpenGLContext, static #"currentContext") = NSOpenGLContext;
overload externalInstanceMethod(static NSOpenGLContext, static #"copyAttributesFromContext:withMask:") = Void, NSOpenGLContext, UInt;
overload externalInstanceMethod(static NSOpenGLContext, static #"setValues:forParameter:") = Void, Pointer[Int], NSOpenGLContextParameter;
overload externalInstanceMethod(static NSOpenGLContext, static #"getValues:forParameter:") = Void, Pointer[Int], NSOpenGLContextParameter;
overload externalInstanceMethod(static NSOpenGLContext, static #"setCurrentVirtualScreen:") = Void, Int;
overload externalInstanceMethod(static NSOpenGLContext, static #"currentVirtualScreen") = Int;
overload externalInstanceMethod(static NSOpenGLContext, static #"createTexture:fromView:internalFormat:") = Void, UInt, NSView, UInt;
overload externalInstanceMethod(static NSOpenGLContext, static #"CGLContextObj") = RawPointer;
overload externalInstanceMethod(static NSOpenGLContext, static #"setPixelBuffer:cubeMapFace:mipMapLevel:currentVirtualScreen:") = Void, NSOpenGLPixelBuffer, UInt, Int, Int;
overload externalInstanceMethod(static NSOpenGLContext, static #"pixelBuffer") = NSOpenGLPixelBuffer;
overload externalInstanceMethod(static NSOpenGLContext, static #"pixelBufferCubeMapFace") = UInt;
overload externalInstanceMethod(static NSOpenGLContext, static #"pixelBufferMipMapLevel") = Int;
overload externalInstanceMethod(static NSOpenGLContext, static #"setTextureImageToPixelBuffer:colorBuffer:") = Void, NSOpenGLPixelBuffer, UInt;

record NSOpenGLLayer = externalClass(CAOpenGLLayer);
overload externalInstanceMethod(static NSOpenGLLayer, static #"openGLPixelFormatForDisplayMask:") = NSOpenGLPixelFormat, UInt;
overload externalInstanceMethod(static NSOpenGLLayer, static #"openGLContextForPixelFormat:") = NSOpenGLContext, NSOpenGLPixelFormat;
overload externalInstanceMethod(static NSOpenGLLayer, static #"canDrawInOpenGLContext:pixelFormat:forLayerTime:displayTime:") = Bool, NSOpenGLContext, NSOpenGLPixelFormat, Double, Pointer[CVTimeStamp];
overload externalInstanceMethod(static NSOpenGLLayer, static #"drawInOpenGLContext:pixelFormat:forLayerTime:displayTime:") = Void, NSOpenGLContext, NSOpenGLPixelFormat, Double, Pointer[CVTimeStamp];
overload externalInstanceMethod(static NSOpenGLLayer, static #"view") = NSView;
overload externalInstanceMethod(static NSOpenGLLayer, static #"setView:") = Void, NSView;
overload externalInstanceMethod(static NSOpenGLLayer, static #"openGLPixelFormat") = NSOpenGLPixelFormat;
overload externalInstanceMethod(static NSOpenGLLayer, static #"setOpenGLPixelFormat:") = Void, NSOpenGLPixelFormat;
overload externalInstanceMethod(static NSOpenGLLayer, static #"openGLContext") = NSOpenGLContext;
overload externalInstanceMethod(static NSOpenGLLayer, static #"setOpenGLContext:") = Void, NSOpenGLContext;

record NSOpenGLPixelBuffer = externalClass(NSObject);
overload externalInstanceMethod(static NSOpenGLPixelBuffer, static #"initWithTextureTarget:textureInternalFormat:textureMaxMipMapLevel:pixelsWide:pixelsHigh:") = Id, UInt, UInt, Int, Int, Int;
overload externalInstanceMethod(static NSOpenGLPixelBuffer, static #"initWithCGLPBufferObj:") = Id, RawPointer;
overload externalInstanceMethod(static NSOpenGLPixelBuffer, static #"CGLPBufferObj") = RawPointer;
overload externalInstanceMethod(static NSOpenGLPixelBuffer, static #"pixelsWide") = Int;
overload externalInstanceMethod(static NSOpenGLPixelBuffer, static #"pixelsHigh") = Int;
overload externalInstanceMethod(static NSOpenGLPixelBuffer, static #"textureTarget") = UInt;
overload externalInstanceMethod(static NSOpenGLPixelBuffer, static #"textureInternalFormat") = UInt;
overload externalInstanceMethod(static NSOpenGLPixelBuffer, static #"textureMaxMipMapLevel") = Int;

record NSOpenGLPixelFormat = externalClass(NSObject);
overload externalInstanceMethod(static NSOpenGLPixelFormat, static #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static NSOpenGLPixelFormat, static #"initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(static NSOpenGLPixelFormat, static #"initWithAttributes:") = Id, Pointer[UInt];
overload externalInstanceMethod(static NSOpenGLPixelFormat, static #"initWithData:") = Id, NSData;
overload externalInstanceMethod(static NSOpenGLPixelFormat, static #"initWithCGLPixelFormatObj:") = Id, RawPointer;
overload externalInstanceMethod(static NSOpenGLPixelFormat, static #"attributes") = NSData;
overload externalInstanceMethod(static NSOpenGLPixelFormat, static #"setAttributes:") = Void, NSData;
overload externalInstanceMethod(static NSOpenGLPixelFormat, static #"getValues:forAttribute:forVirtualScreen:") = Void, Pointer[Int], UInt, Int;
overload externalInstanceMethod(static NSOpenGLPixelFormat, static #"numberOfVirtualScreens") = Int;
overload externalInstanceMethod(static NSOpenGLPixelFormat, static #"CGLPixelFormatObj") = RawPointer;

record NSOpenGLView = externalClass(NSView);
overload externalClassMethod(static NSOpenGLView, static #"defaultPixelFormat") = NSOpenGLPixelFormat;
overload externalInstanceMethod(static NSOpenGLView, static #"initWithFrame:pixelFormat:") = Id, NSRect, NSOpenGLPixelFormat;
overload externalInstanceMethod(static NSOpenGLView, static #"setOpenGLContext:") = Void, NSOpenGLContext;
overload externalInstanceMethod(static NSOpenGLView, static #"openGLContext") = NSOpenGLContext;
overload externalInstanceMethod(static NSOpenGLView, static #"clearGLContext") = Void;
overload externalInstanceMethod(static NSOpenGLView, static #"update") = Void;
overload externalInstanceMethod(static NSOpenGLView, static #"reshape") = Void;
overload externalInstanceMethod(static NSOpenGLView, static #"setPixelFormat:") = Void, NSOpenGLPixelFormat;
overload externalInstanceMethod(static NSOpenGLView, static #"pixelFormat") = NSOpenGLPixelFormat;
overload externalInstanceMethod(static NSOpenGLView, static #"prepareOpenGL") = Void;

record NSOpenPanel = externalClass(NSSavePanel);
overload externalClassMethod(static NSOpenPanel, static #"openPanel") = NSOpenPanel;
overload externalInstanceMethod(static NSOpenPanel, static #"URLs") = NSArray;
overload externalInstanceMethod(static NSOpenPanel, static #"resolvesAliases") = Bool;
overload externalInstanceMethod(static NSOpenPanel, static #"setResolvesAliases:") = Void, Bool;
overload externalInstanceMethod(static NSOpenPanel, static #"canChooseDirectories") = Bool;
overload externalInstanceMethod(static NSOpenPanel, static #"setCanChooseDirectories:") = Void, Bool;
overload externalInstanceMethod(static NSOpenPanel, static #"allowsMultipleSelection") = Bool;
overload externalInstanceMethod(static NSOpenPanel, static #"setAllowsMultipleSelection:") = Void, Bool;
overload externalInstanceMethod(static NSOpenPanel, static #"canChooseFiles") = Bool;
overload externalInstanceMethod(static NSOpenPanel, static #"setCanChooseFiles:") = Void, Bool;
overload externalInstanceMethod(static NSOpenPanel, static #"filenames") = NSArray;
overload externalInstanceMethod(static NSOpenPanel, static #"beginSheetForDirectory:file:types:modalForWindow:modalDelegate:didEndSelector:contextInfo:") = Void, NSString, NSString, NSArray, NSWindow, Id, SelectorHandle, RawPointer;
overload externalInstanceMethod(static NSOpenPanel, static #"beginForDirectory:file:types:modelessDelegate:didEndSelector:contextInfo:") = Void, NSString, NSString, NSArray, Id, SelectorHandle, RawPointer;
overload externalInstanceMethod(static NSOpenPanel, static #"runModalForDirectory:file:types:") = Int, NSString, NSString, NSArray;
overload externalInstanceMethod(static NSOpenPanel, static #"runModalForTypes:") = Int, NSArray;

record NSOutlineView = externalClass(NSTableView);
overload externalInstanceMethod(static NSOutlineView, static #"setDelegate:") = Void, Id;
overload externalInstanceMethod(static NSOutlineView, static #"delegate") = Id;
overload externalInstanceMethod(static NSOutlineView, static #"setDataSource:") = Void, Id;
overload externalInstanceMethod(static NSOutlineView, static #"dataSource") = Id;
overload externalInstanceMethod(static NSOutlineView, static #"setOutlineTableColumn:") = Void, NSTableColumn;
overload externalInstanceMethod(static NSOutlineView, static #"outlineTableColumn") = NSTableColumn;
overload externalInstanceMethod(static NSOutlineView, static #"isExpandable:") = Bool, Id;
overload externalInstanceMethod(static NSOutlineView, static #"expandItem:expandChildren:") = Void, Id, Bool;
overload externalInstanceMethod(static NSOutlineView, static #"expandItem:") = Void, Id;
overload externalInstanceMethod(static NSOutlineView, static #"collapseItem:collapseChildren:") = Void, Id, Bool;
overload externalInstanceMethod(static NSOutlineView, static #"collapseItem:") = Void, Id;
overload externalInstanceMethod(static NSOutlineView, static #"reloadItem:reloadChildren:") = Void, Id, Bool;
overload externalInstanceMethod(static NSOutlineView, static #"reloadItem:") = Void, Id;
overload externalInstanceMethod(static NSOutlineView, static #"parentForItem:") = Id, Id;
overload externalInstanceMethod(static NSOutlineView, static #"itemAtRow:") = Id, Int;
overload externalInstanceMethod(static NSOutlineView, static #"rowForItem:") = Int, Id;
overload externalInstanceMethod(static NSOutlineView, static #"levelForItem:") = Int, Id;
overload externalInstanceMethod(static NSOutlineView, static #"levelForRow:") = Int, Int;
overload externalInstanceMethod(static NSOutlineView, static #"isItemExpanded:") = Bool, Id;
overload externalInstanceMethod(static NSOutlineView, static #"setIndentationPerLevel:") = Void, Float;
overload externalInstanceMethod(static NSOutlineView, static #"indentationPerLevel") = Float;
overload externalInstanceMethod(static NSOutlineView, static #"setIndentationMarkerFollowsCell:") = Void, Bool;
overload externalInstanceMethod(static NSOutlineView, static #"indentationMarkerFollowsCell") = Bool;
overload externalInstanceMethod(static NSOutlineView, static #"setAutoresizesOutlineColumn:") = Void, Bool;
overload externalInstanceMethod(static NSOutlineView, static #"autoresizesOutlineColumn") = Bool;
overload externalInstanceMethod(static NSOutlineView, static #"frameOfOutlineCellAtRow:") = NSRect, Int;
overload externalInstanceMethod(static NSOutlineView, static #"setDropItem:dropChildIndex:") = Void, Id, Int;
overload externalInstanceMethod(static NSOutlineView, static #"shouldCollapseAutoExpandedItemsForDeposited:") = Bool, Bool;
overload externalInstanceMethod(static NSOutlineView, static #"autosaveExpandedItems") = Bool;
overload externalInstanceMethod(static NSOutlineView, static #"setAutosaveExpandedItems:") = Void, Bool;

record NSPDFImageRep = externalClass(NSImageRep);
overload externalClassMethod(static NSPDFImageRep, static #"imageRepWithData:") = Id, NSData;
overload externalInstanceMethod(static NSPDFImageRep, static #"initWithData:") = Id, NSData;
overload externalInstanceMethod(static NSPDFImageRep, static #"PDFRepresentation") = NSData;
overload externalInstanceMethod(static NSPDFImageRep, static #"bounds") = NSRect;
overload externalInstanceMethod(static NSPDFImageRep, static #"setCurrentPage:") = Void, Int;
overload externalInstanceMethod(static NSPDFImageRep, static #"currentPage") = Int;
overload externalInstanceMethod(static NSPDFImageRep, static #"pageCount") = Int;

record NSPICTImageRep = externalClass(NSImageRep);
overload externalClassMethod(static NSPICTImageRep, static #"imageRepWithData:") = Id, NSData;
overload externalInstanceMethod(static NSPICTImageRep, static #"initWithData:") = Id, NSData;
overload externalInstanceMethod(static NSPICTImageRep, static #"PICTRepresentation") = NSData;
overload externalInstanceMethod(static NSPICTImageRep, static #"boundingBox") = NSRect;

record NSPageLayout = externalClass(NSObject);
overload externalClassMethod(static NSPageLayout, static #"pageLayout") = NSPageLayout;
overload externalInstanceMethod(static NSPageLayout, static #"addAccessoryController:") = Void, NSViewController;
overload externalInstanceMethod(static NSPageLayout, static #"removeAccessoryController:") = Void, NSViewController;
overload externalInstanceMethod(static NSPageLayout, static #"accessoryControllers") = NSArray;
overload externalInstanceMethod(static NSPageLayout, static #"beginSheetWithPrintInfo:modalForWindow:delegate:didEndSelector:contextInfo:") = Void, NSPrintInfo, NSWindow, Id, SelectorHandle, RawPointer;
overload externalInstanceMethod(static NSPageLayout, static #"runModalWithPrintInfo:") = Int, NSPrintInfo;
overload externalInstanceMethod(static NSPageLayout, static #"runModal") = Int;
overload externalInstanceMethod(static NSPageLayout, static #"printInfo") = NSPrintInfo;
overload externalInstanceMethod(static NSPageLayout, static #"setAccessoryView:") = Void, NSView;
overload externalInstanceMethod(static NSPageLayout, static #"accessoryView") = NSView;
overload externalInstanceMethod(static NSPageLayout, static #"readPrintInfo") = Void;
overload externalInstanceMethod(static NSPageLayout, static #"writePrintInfo") = Void;

record NSPanel = externalClass(NSWindow);
overload externalInstanceMethod(static NSPanel, static #"isFloatingPanel") = Bool;
overload externalInstanceMethod(static NSPanel, static #"setFloatingPanel:") = Void, Bool;
overload externalInstanceMethod(static NSPanel, static #"becomesKeyOnlyIfNeeded") = Bool;
overload externalInstanceMethod(static NSPanel, static #"setBecomesKeyOnlyIfNeeded:") = Void, Bool;
overload externalInstanceMethod(static NSPanel, static #"worksWhenModal") = Bool;
overload externalInstanceMethod(static NSPanel, static #"setWorksWhenModal:") = Void, Bool;

record NSParagraphStyle = externalClass(NSObject);
overload externalInstanceMethod(static NSParagraphStyle, static #"copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(static NSParagraphStyle, static #"mutableCopyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(static NSParagraphStyle, static #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static NSParagraphStyle, static #"initWithCoder:") = Id, NSCoder;
overload externalClassMethod(static NSParagraphStyle, static #"defaultParagraphStyle") = NSParagraphStyle;
overload externalClassMethod(static NSParagraphStyle, static #"defaultWritingDirectionForLanguage:") = Int, NSString;
overload externalInstanceMethod(static NSParagraphStyle, static #"lineSpacing") = Float;
overload externalInstanceMethod(static NSParagraphStyle, static #"paragraphSpacing") = Float;
overload externalInstanceMethod(static NSParagraphStyle, static #"alignment") = UInt;
overload externalInstanceMethod(static NSParagraphStyle, static #"headIndent") = Float;
overload externalInstanceMethod(static NSParagraphStyle, static #"tailIndent") = Float;
overload externalInstanceMethod(static NSParagraphStyle, static #"firstLineHeadIndent") = Float;
overload externalInstanceMethod(static NSParagraphStyle, static #"tabStops") = NSArray;
overload externalInstanceMethod(static NSParagraphStyle, static #"minimumLineHeight") = Float;
overload externalInstanceMethod(static NSParagraphStyle, static #"maximumLineHeight") = Float;
overload externalInstanceMethod(static NSParagraphStyle, static #"lineBreakMode") = UInt;
overload externalInstanceMethod(static NSParagraphStyle, static #"baseWritingDirection") = Int;
overload externalInstanceMethod(static NSParagraphStyle, static #"lineHeightMultiple") = Float;
overload externalInstanceMethod(static NSParagraphStyle, static #"paragraphSpacingBefore") = Float;
overload externalInstanceMethod(static NSParagraphStyle, static #"defaultTabInterval") = Float;
overload externalInstanceMethod(static NSParagraphStyle, static #"textBlocks") = NSArray;
overload externalInstanceMethod(static NSParagraphStyle, static #"textLists") = NSArray;
overload externalInstanceMethod(static NSParagraphStyle, static #"hyphenationFactor") = Float;
overload externalInstanceMethod(static NSParagraphStyle, static #"tighteningFactorForTruncation") = Float;
overload externalInstanceMethod(static NSParagraphStyle, static #"headerLevel") = Int;

record NSPasteboard = externalClass(NSObject);
overload externalClassMethod(static NSPasteboard, static #"generalPasteboard") = NSPasteboard;
overload externalClassMethod(static NSPasteboard, static #"pasteboardWithName:") = NSPasteboard, NSString;
overload externalClassMethod(static NSPasteboard, static #"pasteboardWithUniqueName") = NSPasteboard;
overload externalInstanceMethod(static NSPasteboard, static #"name") = NSString;
overload externalInstanceMethod(static NSPasteboard, static #"changeCount") = Int;
overload externalInstanceMethod(static NSPasteboard, static #"releaseGlobally") = Void;
overload externalInstanceMethod(static NSPasteboard, static #"clearContents") = Int;
overload externalInstanceMethod(static NSPasteboard, static #"writeObjects:") = Bool, NSArray;
overload externalInstanceMethod(static NSPasteboard, static #"readObjectsForClasses:options:") = NSArray, NSArray, NSDictionary;
overload externalInstanceMethod(static NSPasteboard, static #"pasteboardItems") = NSArray;
overload externalInstanceMethod(static NSPasteboard, static #"indexOfPasteboardItem:") = UInt, NSPasteboardItem;
overload externalInstanceMethod(static NSPasteboard, static #"canReadItemWithDataConformingToTypes:") = Bool, NSArray;
overload externalInstanceMethod(static NSPasteboard, static #"canReadObjectForClasses:options:") = Bool, NSArray, NSDictionary;
overload externalInstanceMethod(static NSPasteboard, static #"declareTypes:owner:") = Int, NSArray, Id;
overload externalInstanceMethod(static NSPasteboard, static #"addTypes:owner:") = Int, NSArray, Id;
overload externalInstanceMethod(static NSPasteboard, static #"types") = NSArray;
overload externalInstanceMethod(static NSPasteboard, static #"availableTypeFromArray:") = NSString, NSArray;
overload externalInstanceMethod(static NSPasteboard, static #"setData:forType:") = Bool, NSData, NSString;
overload externalInstanceMethod(static NSPasteboard, static #"setPropertyList:forType:") = Bool, Id, NSString;
overload externalInstanceMethod(static NSPasteboard, static #"setString:forType:") = Bool, NSString, NSString;
overload externalInstanceMethod(static NSPasteboard, static #"dataForType:") = NSData, NSString;
overload externalInstanceMethod(static NSPasteboard, static #"propertyListForType:") = Id, NSString;
overload externalInstanceMethod(static NSPasteboard, static #"stringForType:") = NSString, NSString;
overload externalClassMethod(static NSPasteboard, static #"typesFilterableTo:") = NSArray, NSString;
overload externalClassMethod(static NSPasteboard, static #"pasteboardByFilteringFile:") = NSPasteboard, NSString;
overload externalClassMethod(static NSPasteboard, static #"pasteboardByFilteringData:ofType:") = NSPasteboard, NSData, NSString;
overload externalClassMethod(static NSPasteboard, static #"pasteboardByFilteringTypesInPasteboard:") = NSPasteboard, NSPasteboard;
overload externalInstanceMethod(static NSPasteboard, static #"writeFileContents:") = Bool, NSString;
overload externalInstanceMethod(static NSPasteboard, static #"readFileContentsType:toFile:") = NSString, NSString, NSString;
overload externalInstanceMethod(static NSPasteboard, static #"writeFileWrapper:") = Bool, NSFileWrapper;
overload externalInstanceMethod(static NSPasteboard, static #"readFileWrapper") = NSFileWrapper;

record NSPasteboardItem = externalClass(NSObject);
overload externalInstanceMethod(static NSPasteboardItem, static #"writableTypesForPasteboard:") = NSArray, NSPasteboard;
overload externalInstanceMethod(static NSPasteboardItem, static #"writingOptionsForType:pasteboard:") = UInt, NSString, NSPasteboard;
overload externalInstanceMethod(static NSPasteboardItem, static #"pasteboardPropertyListForType:") = Id, NSString;
overload externalClassMethod(static NSPasteboardItem, static #"readableTypesForPasteboard:") = NSArray, NSPasteboard;
overload externalClassMethod(static NSPasteboardItem, static #"readingOptionsForType:pasteboard:") = UInt, NSString, NSPasteboard;
overload externalInstanceMethod(static NSPasteboardItem, static #"initWithPasteboardPropertyList:ofType:") = Id, Id, NSString;
overload externalInstanceMethod(static NSPasteboardItem, static #"types") = NSArray;
overload externalInstanceMethod(static NSPasteboardItem, static #"availableTypeFromArray:") = NSString, NSArray;
overload externalInstanceMethod(static NSPasteboardItem, static #"setDataProvider:forTypes:") = Bool, Id, NSArray;
overload externalInstanceMethod(static NSPasteboardItem, static #"setData:forType:") = Bool, NSData, NSString;
overload externalInstanceMethod(static NSPasteboardItem, static #"setString:forType:") = Bool, NSString, NSString;
overload externalInstanceMethod(static NSPasteboardItem, static #"setPropertyList:forType:") = Bool, Id, NSString;
overload externalInstanceMethod(static NSPasteboardItem, static #"dataForType:") = NSData, NSString;
overload externalInstanceMethod(static NSPasteboardItem, static #"stringForType:") = NSString, NSString;
overload externalInstanceMethod(static NSPasteboardItem, static #"propertyListForType:") = Id, NSString;

record NSPathCell = externalClass(NSActionCell);
overload externalInstanceMethod(static NSPathCell, static #"panel:shouldEnableURL:") = Bool, Id, NSURL;
overload externalInstanceMethod(static NSPathCell, static #"panel:validateURL:error:") = Bool, Id, NSURL, Pointer[NSError];
overload externalInstanceMethod(static NSPathCell, static #"panel:didChangeToDirectoryURL:") = Void, Id, NSURL;
overload externalInstanceMethod(static NSPathCell, static #"panel:userEnteredFilename:confirmed:") = NSString, Id, NSString, Bool;
overload externalInstanceMethod(static NSPathCell, static #"panel:willExpand:") = Void, Id, Bool;
overload externalInstanceMethod(static NSPathCell, static #"panelSelectionDidChange:") = Void, Id;
overload externalInstanceMethod(static NSPathCell, static #"pathStyle") = Int;
overload externalInstanceMethod(static NSPathCell, static #"setPathStyle:") = Void, Int;
overload externalInstanceMethod(static NSPathCell, static #"URL") = NSURL;
overload externalInstanceMethod(static NSPathCell, static #"setURL:") = Void, NSURL;
overload externalInstanceMethod(static NSPathCell, static #"setObjectValue:") = Void, Id;
overload externalInstanceMethod(static NSPathCell, static #"allowedTypes") = NSArray;
overload externalInstanceMethod(static NSPathCell, static #"setAllowedTypes:") = Void, NSArray;
overload externalInstanceMethod(static NSPathCell, static #"delegate") = Id;
overload externalInstanceMethod(static NSPathCell, static #"setDelegate:") = Void, Id;
overload externalClassMethod(static NSPathCell, static #"pathComponentCellClass") = Id;
overload externalInstanceMethod(static NSPathCell, static #"pathComponentCells") = NSArray;
overload externalInstanceMethod(static NSPathCell, static #"setPathComponentCells:") = Void, NSArray;
overload externalInstanceMethod(static NSPathCell, static #"rectOfPathComponentCell:withFrame:inView:") = NSRect, NSPathComponentCell, NSRect, NSView;
overload externalInstanceMethod(static NSPathCell, static #"pathComponentCellAtPoint:withFrame:inView:") = NSPathComponentCell, NSPoint, NSRect, NSView;
overload externalInstanceMethod(static NSPathCell, static #"clickedPathComponentCell") = NSPathComponentCell;
overload externalInstanceMethod(static NSPathCell, static #"mouseEntered:withFrame:inView:") = Void, NSEvent, NSRect, NSView;
overload externalInstanceMethod(static NSPathCell, static #"mouseExited:withFrame:inView:") = Void, NSEvent, NSRect, NSView;
overload externalInstanceMethod(static NSPathCell, static #"doubleAction") = SelectorHandle;
overload externalInstanceMethod(static NSPathCell, static #"setDoubleAction:") = Void, SelectorHandle;
overload externalInstanceMethod(static NSPathCell, static #"setBackgroundColor:") = Void, NSColor;
overload externalInstanceMethod(static NSPathCell, static #"backgroundColor") = NSColor;
overload externalInstanceMethod(static NSPathCell, static #"setPlaceholderString:") = Void, NSString;
overload externalInstanceMethod(static NSPathCell, static #"placeholderString") = NSString;
overload externalInstanceMethod(static NSPathCell, static #"setPlaceholderAttributedString:") = Void, NSAttributedString;
overload externalInstanceMethod(static NSPathCell, static #"placeholderAttributedString") = NSAttributedString;
overload externalInstanceMethod(static NSPathCell, static #"setControlSize:") = Void, UInt;

record NSPathComponentCell = externalClass(NSTextFieldCell);
overload externalInstanceMethod(static NSPathComponentCell, static #"image") = NSImage;
overload externalInstanceMethod(static NSPathComponentCell, static #"setImage:") = Void, NSImage;
overload externalInstanceMethod(static NSPathComponentCell, static #"URL") = NSURL;
overload externalInstanceMethod(static NSPathComponentCell, static #"setURL:") = Void, NSURL;

record NSPathControl = externalClass(NSControl);
overload externalInstanceMethod(static NSPathControl, static #"URL") = NSURL;
overload externalInstanceMethod(static NSPathControl, static #"setURL:") = Void, NSURL;
overload externalInstanceMethod(static NSPathControl, static #"doubleAction") = SelectorHandle;
overload externalInstanceMethod(static NSPathControl, static #"setDoubleAction:") = Void, SelectorHandle;
overload externalInstanceMethod(static NSPathControl, static #"pathStyle") = Int;
overload externalInstanceMethod(static NSPathControl, static #"setPathStyle:") = Void, Int;
overload externalInstanceMethod(static NSPathControl, static #"clickedPathComponentCell") = NSPathComponentCell;
overload externalInstanceMethod(static NSPathControl, static #"pathComponentCells") = NSArray;
overload externalInstanceMethod(static NSPathControl, static #"setPathComponentCells:") = Void, NSArray;
overload externalInstanceMethod(static NSPathControl, static #"setBackgroundColor:") = Void, NSColor;
overload externalInstanceMethod(static NSPathControl, static #"backgroundColor") = NSColor;
overload externalInstanceMethod(static NSPathControl, static #"delegate") = Id;
overload externalInstanceMethod(static NSPathControl, static #"setDelegate:") = Void, Id;
overload externalInstanceMethod(static NSPathControl, static #"setDraggingSourceOperationMask:forLocal:") = Void, UInt, Bool;
overload externalInstanceMethod(static NSPathControl, static #"setMenu:") = Void, NSMenu;
overload externalInstanceMethod(static NSPathControl, static #"menu") = NSMenu;

record NSPersistentDocument = externalClass(NSDocument);
overload externalInstanceMethod(static NSPersistentDocument, static #"managedObjectContext") = NSManagedObjectContext;
overload externalInstanceMethod(static NSPersistentDocument, static #"setManagedObjectContext:") = Void, NSManagedObjectContext;
overload externalInstanceMethod(static NSPersistentDocument, static #"managedObjectModel") = Id;
overload externalInstanceMethod(static NSPersistentDocument, static #"configurePersistentStoreCoordinatorForURL:ofType:modelConfiguration:storeOptions:error:") = Bool, NSURL, NSString, NSString, NSDictionary, Pointer[NSError];
overload externalInstanceMethod(static NSPersistentDocument, static #"persistentStoreTypeForFileType:") = NSString, NSString;
overload externalInstanceMethod(static NSPersistentDocument, static #"writeToURL:ofType:forSaveOperation:originalContentsURL:error:") = Bool, NSURL, NSString, UInt, NSURL, Pointer[NSError];
overload externalInstanceMethod(static NSPersistentDocument, static #"readFromURL:ofType:error:") = Bool, NSURL, NSString, Pointer[NSError];
overload externalInstanceMethod(static NSPersistentDocument, static #"revertToContentsOfURL:ofType:error:") = Bool, NSURL, NSString, Pointer[NSError];
overload externalInstanceMethod(static NSPersistentDocument, static #"configurePersistentStoreCoordinatorForURL:ofType:error:") = Bool, NSURL, NSString, Pointer[NSError];

record NSPopUpButton = externalClass(NSButton);
overload externalInstanceMethod(static NSPopUpButton, static #"initWithFrame:pullsDown:") = Id, NSRect, Bool;
overload externalInstanceMethod(static NSPopUpButton, static #"setMenu:") = Void, NSMenu;
overload externalInstanceMethod(static NSPopUpButton, static #"menu") = NSMenu;
overload externalInstanceMethod(static NSPopUpButton, static #"setPullsDown:") = Void, Bool;
overload externalInstanceMethod(static NSPopUpButton, static #"pullsDown") = Bool;
overload externalInstanceMethod(static NSPopUpButton, static #"setAutoenablesItems:") = Void, Bool;
overload externalInstanceMethod(static NSPopUpButton, static #"autoenablesItems") = Bool;
overload externalInstanceMethod(static NSPopUpButton, static #"setPreferredEdge:") = Void, NSRectEdge;
overload externalInstanceMethod(static NSPopUpButton, static #"preferredEdge") = NSRectEdge;
overload externalInstanceMethod(static NSPopUpButton, static #"addItemWithTitle:") = Void, NSString;
overload externalInstanceMethod(static NSPopUpButton, static #"addItemsWithTitles:") = Void, NSArray;
overload externalInstanceMethod(static NSPopUpButton, static #"insertItemWithTitle:atIndex:") = Void, NSString, Int;
overload externalInstanceMethod(static NSPopUpButton, static #"removeItemWithTitle:") = Void, NSString;
overload externalInstanceMethod(static NSPopUpButton, static #"removeItemAtIndex:") = Void, Int;
overload externalInstanceMethod(static NSPopUpButton, static #"removeAllItems") = Void;
overload externalInstanceMethod(static NSPopUpButton, static #"itemArray") = NSArray;
overload externalInstanceMethod(static NSPopUpButton, static #"numberOfItems") = Int;
overload externalInstanceMethod(static NSPopUpButton, static #"indexOfItem:") = Int, NSMenuItem;
overload externalInstanceMethod(static NSPopUpButton, static #"indexOfItemWithTitle:") = Int, NSString;
overload externalInstanceMethod(static NSPopUpButton, static #"indexOfItemWithTag:") = Int, Int;
overload externalInstanceMethod(static NSPopUpButton, static #"indexOfItemWithRepresentedObject:") = Int, Id;
overload externalInstanceMethod(static NSPopUpButton, static #"indexOfItemWithTarget:andAction:") = Int, Id, SelectorHandle;
overload externalInstanceMethod(static NSPopUpButton, static #"itemAtIndex:") = NSMenuItem, Int;
overload externalInstanceMethod(static NSPopUpButton, static #"itemWithTitle:") = NSMenuItem, NSString;
overload externalInstanceMethod(static NSPopUpButton, static #"lastItem") = NSMenuItem;
overload externalInstanceMethod(static NSPopUpButton, static #"selectItem:") = Void, NSMenuItem;
overload externalInstanceMethod(static NSPopUpButton, static #"selectItemAtIndex:") = Void, Int;
overload externalInstanceMethod(static NSPopUpButton, static #"selectItemWithTitle:") = Void, NSString;
overload externalInstanceMethod(static NSPopUpButton, static #"selectItemWithTag:") = Bool, Int;
overload externalInstanceMethod(static NSPopUpButton, static #"setTitle:") = Void, NSString;
overload externalInstanceMethod(static NSPopUpButton, static #"selectedItem") = NSMenuItem;
overload externalInstanceMethod(static NSPopUpButton, static #"indexOfSelectedItem") = Int;
overload externalInstanceMethod(static NSPopUpButton, static #"synchronizeTitleAndSelectedItem") = Void;
overload externalInstanceMethod(static NSPopUpButton, static #"itemTitleAtIndex:") = NSString, Int;
overload externalInstanceMethod(static NSPopUpButton, static #"itemTitles") = NSArray;
overload externalInstanceMethod(static NSPopUpButton, static #"titleOfSelectedItem") = NSString;

record NSPopUpButtonCell = externalClass(NSMenuItemCell);
overload externalInstanceMethod(static NSPopUpButtonCell, static #"initTextCell:pullsDown:") = Id, NSString, Bool;
overload externalInstanceMethod(static NSPopUpButtonCell, static #"setMenu:") = Void, NSMenu;
overload externalInstanceMethod(static NSPopUpButtonCell, static #"menu") = NSMenu;
overload externalInstanceMethod(static NSPopUpButtonCell, static #"setPullsDown:") = Void, Bool;
overload externalInstanceMethod(static NSPopUpButtonCell, static #"pullsDown") = Bool;
overload externalInstanceMethod(static NSPopUpButtonCell, static #"setAutoenablesItems:") = Void, Bool;
overload externalInstanceMethod(static NSPopUpButtonCell, static #"autoenablesItems") = Bool;
overload externalInstanceMethod(static NSPopUpButtonCell, static #"setPreferredEdge:") = Void, NSRectEdge;
overload externalInstanceMethod(static NSPopUpButtonCell, static #"preferredEdge") = NSRectEdge;
overload externalInstanceMethod(static NSPopUpButtonCell, static #"setUsesItemFromMenu:") = Void, Bool;
overload externalInstanceMethod(static NSPopUpButtonCell, static #"usesItemFromMenu") = Bool;
overload externalInstanceMethod(static NSPopUpButtonCell, static #"setAltersStateOfSelectedItem:") = Void, Bool;
overload externalInstanceMethod(static NSPopUpButtonCell, static #"altersStateOfSelectedItem") = Bool;
overload externalInstanceMethod(static NSPopUpButtonCell, static #"addItemWithTitle:") = Void, NSString;
overload externalInstanceMethod(static NSPopUpButtonCell, static #"addItemsWithTitles:") = Void, NSArray;
overload externalInstanceMethod(static NSPopUpButtonCell, static #"insertItemWithTitle:atIndex:") = Void, NSString, Int;
overload externalInstanceMethod(static NSPopUpButtonCell, static #"removeItemWithTitle:") = Void, NSString;
overload externalInstanceMethod(static NSPopUpButtonCell, static #"removeItemAtIndex:") = Void, Int;
overload externalInstanceMethod(static NSPopUpButtonCell, static #"removeAllItems") = Void;
overload externalInstanceMethod(static NSPopUpButtonCell, static #"itemArray") = NSArray;
overload externalInstanceMethod(static NSPopUpButtonCell, static #"numberOfItems") = Int;
overload externalInstanceMethod(static NSPopUpButtonCell, static #"indexOfItem:") = Int, NSMenuItem;
overload externalInstanceMethod(static NSPopUpButtonCell, static #"indexOfItemWithTitle:") = Int, NSString;
overload externalInstanceMethod(static NSPopUpButtonCell, static #"indexOfItemWithTag:") = Int, Int;
overload externalInstanceMethod(static NSPopUpButtonCell, static #"indexOfItemWithRepresentedObject:") = Int, Id;
overload externalInstanceMethod(static NSPopUpButtonCell, static #"indexOfItemWithTarget:andAction:") = Int, Id, SelectorHandle;
overload externalInstanceMethod(static NSPopUpButtonCell, static #"itemAtIndex:") = NSMenuItem, Int;
overload externalInstanceMethod(static NSPopUpButtonCell, static #"itemWithTitle:") = NSMenuItem, NSString;
overload externalInstanceMethod(static NSPopUpButtonCell, static #"lastItem") = NSMenuItem;
overload externalInstanceMethod(static NSPopUpButtonCell, static #"selectItem:") = Void, NSMenuItem;
overload externalInstanceMethod(static NSPopUpButtonCell, static #"selectItemAtIndex:") = Void, Int;
overload externalInstanceMethod(static NSPopUpButtonCell, static #"selectItemWithTitle:") = Void, NSString;
overload externalInstanceMethod(static NSPopUpButtonCell, static #"selectItemWithTag:") = Bool, Int;
overload externalInstanceMethod(static NSPopUpButtonCell, static #"setTitle:") = Void, NSString;
overload externalInstanceMethod(static NSPopUpButtonCell, static #"selectedItem") = NSMenuItem;
overload externalInstanceMethod(static NSPopUpButtonCell, static #"indexOfSelectedItem") = Int;
overload externalInstanceMethod(static NSPopUpButtonCell, static #"synchronizeTitleAndSelectedItem") = Void;
overload externalInstanceMethod(static NSPopUpButtonCell, static #"itemTitleAtIndex:") = NSString, Int;
overload externalInstanceMethod(static NSPopUpButtonCell, static #"itemTitles") = NSArray;
overload externalInstanceMethod(static NSPopUpButtonCell, static #"titleOfSelectedItem") = NSString;
overload externalInstanceMethod(static NSPopUpButtonCell, static #"attachPopUpWithFrame:inView:") = Void, NSRect, NSView;
overload externalInstanceMethod(static NSPopUpButtonCell, static #"dismissPopUp") = Void;
overload externalInstanceMethod(static NSPopUpButtonCell, static #"performClickWithFrame:inView:") = Void, NSRect, NSView;
overload externalInstanceMethod(static NSPopUpButtonCell, static #"arrowPosition") = UInt;
overload externalInstanceMethod(static NSPopUpButtonCell, static #"setArrowPosition:") = Void, UInt;
overload externalInstanceMethod(static NSPopUpButtonCell, static #"objectValue") = Id;
overload externalInstanceMethod(static NSPopUpButtonCell, static #"setObjectValue:") = Void, Id;

record NSPredicateEditor = externalClass(NSRuleEditor);
overload externalInstanceMethod(static NSPredicateEditor, static #"setRowTemplates:") = Void, NSArray;
overload externalInstanceMethod(static NSPredicateEditor, static #"rowTemplates") = NSArray;

record NSPredicateEditorRowTemplate = externalClass(NSObject);
overload externalInstanceMethod(static NSPredicateEditorRowTemplate, static #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static NSPredicateEditorRowTemplate, static #"initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(static NSPredicateEditorRowTemplate, static #"copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(static NSPredicateEditorRowTemplate, static #"matchForPredicate:") = Double, NSPredicate;
overload externalInstanceMethod(static NSPredicateEditorRowTemplate, static #"templateViews") = NSArray;
overload externalInstanceMethod(static NSPredicateEditorRowTemplate, static #"setPredicate:") = Void, NSPredicate;
overload externalInstanceMethod(static NSPredicateEditorRowTemplate, static #"predicateWithSubpredicates:") = NSPredicate, NSArray;
overload externalInstanceMethod(static NSPredicateEditorRowTemplate, static #"displayableSubpredicatesOfPredicate:") = NSArray, NSPredicate;
overload externalInstanceMethod(static NSPredicateEditorRowTemplate, static #"initWithLeftExpressions:rightExpressions:modifier:operators:options:") = Id, NSArray, NSArray, UInt, NSArray, UInt;
overload externalInstanceMethod(static NSPredicateEditorRowTemplate, static #"initWithLeftExpressions:rightExpressionAttributeType:modifier:operators:options:") = Id, NSArray, UInt, UInt, NSArray, UInt;
overload externalInstanceMethod(static NSPredicateEditorRowTemplate, static #"initWithCompoundTypes:") = Id, NSArray;
overload externalInstanceMethod(static NSPredicateEditorRowTemplate, static #"leftExpressions") = NSArray;
overload externalInstanceMethod(static NSPredicateEditorRowTemplate, static #"rightExpressions") = NSArray;
overload externalInstanceMethod(static NSPredicateEditorRowTemplate, static #"rightExpressionAttributeType") = UInt;
overload externalInstanceMethod(static NSPredicateEditorRowTemplate, static #"modifier") = UInt;
overload externalInstanceMethod(static NSPredicateEditorRowTemplate, static #"operators") = NSArray;
overload externalInstanceMethod(static NSPredicateEditorRowTemplate, static #"options") = UInt;
overload externalInstanceMethod(static NSPredicateEditorRowTemplate, static #"compoundTypes") = NSArray;
overload externalClassMethod(static NSPredicateEditorRowTemplate, static #"templatesWithAttributeKeyPaths:inEntityDescription:") = NSArray, NSArray, NSEntityDescription;

record NSPrintInfo = externalClass(NSObject);
overload externalInstanceMethod(static NSPrintInfo, static #"copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(static NSPrintInfo, static #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static NSPrintInfo, static #"initWithCoder:") = Id, NSCoder;
overload externalClassMethod(static NSPrintInfo, static #"setSharedPrintInfo:") = Void, NSPrintInfo;
overload externalClassMethod(static NSPrintInfo, static #"sharedPrintInfo") = NSPrintInfo;
overload externalInstanceMethod(static NSPrintInfo, static #"initWithDictionary:") = Id, NSDictionary;
overload externalInstanceMethod(static NSPrintInfo, static #"dictionary") = NSMutableDictionary;
overload externalInstanceMethod(static NSPrintInfo, static #"setPaperName:") = Void, NSString;
overload externalInstanceMethod(static NSPrintInfo, static #"setPaperSize:") = Void, NSSize;
overload externalInstanceMethod(static NSPrintInfo, static #"setOrientation:") = Void, UInt;
overload externalInstanceMethod(static NSPrintInfo, static #"setScalingFactor:") = Void, Float;
overload externalInstanceMethod(static NSPrintInfo, static #"paperName") = NSString;
overload externalInstanceMethod(static NSPrintInfo, static #"paperSize") = NSSize;
overload externalInstanceMethod(static NSPrintInfo, static #"orientation") = UInt;
overload externalInstanceMethod(static NSPrintInfo, static #"scalingFactor") = Float;
overload externalInstanceMethod(static NSPrintInfo, static #"setLeftMargin:") = Void, Float;
overload externalInstanceMethod(static NSPrintInfo, static #"setRightMargin:") = Void, Float;
overload externalInstanceMethod(static NSPrintInfo, static #"setTopMargin:") = Void, Float;
overload externalInstanceMethod(static NSPrintInfo, static #"setBottomMargin:") = Void, Float;
overload externalInstanceMethod(static NSPrintInfo, static #"leftMargin") = Float;
overload externalInstanceMethod(static NSPrintInfo, static #"rightMargin") = Float;
overload externalInstanceMethod(static NSPrintInfo, static #"topMargin") = Float;
overload externalInstanceMethod(static NSPrintInfo, static #"bottomMargin") = Float;
overload externalInstanceMethod(static NSPrintInfo, static #"setHorizontallyCentered:") = Void, Bool;
overload externalInstanceMethod(static NSPrintInfo, static #"setVerticallyCentered:") = Void, Bool;
overload externalInstanceMethod(static NSPrintInfo, static #"isHorizontallyCentered") = Bool;
overload externalInstanceMethod(static NSPrintInfo, static #"isVerticallyCentered") = Bool;
overload externalInstanceMethod(static NSPrintInfo, static #"setHorizontalPagination:") = Void, UInt;
overload externalInstanceMethod(static NSPrintInfo, static #"setVerticalPagination:") = Void, UInt;
overload externalInstanceMethod(static NSPrintInfo, static #"horizontalPagination") = UInt;
overload externalInstanceMethod(static NSPrintInfo, static #"verticalPagination") = UInt;
overload externalInstanceMethod(static NSPrintInfo, static #"setJobDisposition:") = Void, NSString;
overload externalInstanceMethod(static NSPrintInfo, static #"jobDisposition") = NSString;
overload externalInstanceMethod(static NSPrintInfo, static #"setPrinter:") = Void, NSPrinter;
overload externalInstanceMethod(static NSPrintInfo, static #"printer") = NSPrinter;
overload externalInstanceMethod(static NSPrintInfo, static #"setUpPrintOperationDefaultValues") = Void;
overload externalInstanceMethod(static NSPrintInfo, static #"imageablePageBounds") = NSRect;
overload externalInstanceMethod(static NSPrintInfo, static #"localizedPaperName") = NSString;
overload externalClassMethod(static NSPrintInfo, static #"defaultPrinter") = NSPrinter;
overload externalInstanceMethod(static NSPrintInfo, static #"printSettings") = NSMutableDictionary;
overload externalInstanceMethod(static NSPrintInfo, static #"PMPrintSession") = RawPointer;
overload externalInstanceMethod(static NSPrintInfo, static #"PMPageFormat") = RawPointer;
overload externalInstanceMethod(static NSPrintInfo, static #"PMPrintSettings") = RawPointer;
overload externalInstanceMethod(static NSPrintInfo, static #"updateFromPMPageFormat") = Void;
overload externalInstanceMethod(static NSPrintInfo, static #"updateFromPMPrintSettings") = Void;
overload externalInstanceMethod(static NSPrintInfo, static #"setSelectionOnly:") = Void, Bool;
overload externalInstanceMethod(static NSPrintInfo, static #"isSelectionOnly") = Bool;
overload externalClassMethod(static NSPrintInfo, static #"setDefaultPrinter:") = Void, NSPrinter;
overload externalClassMethod(static NSPrintInfo, static #"sizeForPaperName:") = NSSize, NSString;

record NSPrintOperation = externalClass(NSObject);
overload externalClassMethod(static NSPrintOperation, static #"printOperationWithView:printInfo:") = NSPrintOperation, NSView, NSPrintInfo;
overload externalClassMethod(static NSPrintOperation, static #"PDFOperationWithView:insideRect:toData:printInfo:") = NSPrintOperation, NSView, NSRect, NSMutableData, NSPrintInfo;
overload externalClassMethod(static NSPrintOperation, static #"PDFOperationWithView:insideRect:toPath:printInfo:") = NSPrintOperation, NSView, NSRect, NSString, NSPrintInfo;
overload externalClassMethod(static NSPrintOperation, static #"EPSOperationWithView:insideRect:toData:printInfo:") = NSPrintOperation, NSView, NSRect, NSMutableData, NSPrintInfo;
overload externalClassMethod(static NSPrintOperation, static #"EPSOperationWithView:insideRect:toPath:printInfo:") = NSPrintOperation, NSView, NSRect, NSString, NSPrintInfo;
overload externalClassMethod(static NSPrintOperation, static #"printOperationWithView:") = NSPrintOperation, NSView;
overload externalClassMethod(static NSPrintOperation, static #"PDFOperationWithView:insideRect:toData:") = NSPrintOperation, NSView, NSRect, NSMutableData;
overload externalClassMethod(static NSPrintOperation, static #"EPSOperationWithView:insideRect:toData:") = NSPrintOperation, NSView, NSRect, NSMutableData;
overload externalClassMethod(static NSPrintOperation, static #"currentOperation") = NSPrintOperation;
overload externalClassMethod(static NSPrintOperation, static #"setCurrentOperation:") = Void, NSPrintOperation;
overload externalInstanceMethod(static NSPrintOperation, static #"isCopyingOperation") = Bool;
overload externalInstanceMethod(static NSPrintOperation, static #"setJobTitle:") = Void, NSString;
overload externalInstanceMethod(static NSPrintOperation, static #"jobTitle") = NSString;
overload externalInstanceMethod(static NSPrintOperation, static #"setShowsPrintPanel:") = Void, Bool;
overload externalInstanceMethod(static NSPrintOperation, static #"showsPrintPanel") = Bool;
overload externalInstanceMethod(static NSPrintOperation, static #"setShowsProgressPanel:") = Void, Bool;
overload externalInstanceMethod(static NSPrintOperation, static #"showsProgressPanel") = Bool;
overload externalInstanceMethod(static NSPrintOperation, static #"setPrintPanel:") = Void, NSPrintPanel;
overload externalInstanceMethod(static NSPrintOperation, static #"printPanel") = NSPrintPanel;
overload externalInstanceMethod(static NSPrintOperation, static #"setCanSpawnSeparateThread:") = Void, Bool;
overload externalInstanceMethod(static NSPrintOperation, static #"canSpawnSeparateThread") = Bool;
overload externalInstanceMethod(static NSPrintOperation, static #"setPageOrder:") = Void, Int;
overload externalInstanceMethod(static NSPrintOperation, static #"pageOrder") = Int;
overload externalInstanceMethod(static NSPrintOperation, static #"runOperationModalForWindow:delegate:didRunSelector:contextInfo:") = Void, NSWindow, Id, SelectorHandle, RawPointer;
overload externalInstanceMethod(static NSPrintOperation, static #"runOperation") = Bool;
overload externalInstanceMethod(static NSPrintOperation, static #"view") = NSView;
overload externalInstanceMethod(static NSPrintOperation, static #"printInfo") = NSPrintInfo;
overload externalInstanceMethod(static NSPrintOperation, static #"setPrintInfo:") = Void, NSPrintInfo;
overload externalInstanceMethod(static NSPrintOperation, static #"context") = NSGraphicsContext;
overload externalInstanceMethod(static NSPrintOperation, static #"pageRange") = NSRange;
overload externalInstanceMethod(static NSPrintOperation, static #"currentPage") = Int;
overload externalInstanceMethod(static NSPrintOperation, static #"createContext") = NSGraphicsContext;
overload externalInstanceMethod(static NSPrintOperation, static #"destroyContext") = Void;
overload externalInstanceMethod(static NSPrintOperation, static #"deliverResult") = Bool;
overload externalInstanceMethod(static NSPrintOperation, static #"cleanUpOperation") = Void;
overload externalInstanceMethod(static NSPrintOperation, static #"setAccessoryView:") = Void, NSView;
overload externalInstanceMethod(static NSPrintOperation, static #"accessoryView") = NSView;
overload externalInstanceMethod(static NSPrintOperation, static #"setJobStyleHint:") = Void, NSString;
overload externalInstanceMethod(static NSPrintOperation, static #"jobStyleHint") = NSString;
overload externalInstanceMethod(static NSPrintOperation, static #"setShowPanels:") = Void, Bool;
overload externalInstanceMethod(static NSPrintOperation, static #"showPanels") = Bool;

record NSPrintPanel = externalClass(NSObject);
overload externalClassMethod(static NSPrintPanel, static #"printPanel") = NSPrintPanel;
overload externalInstanceMethod(static NSPrintPanel, static #"addAccessoryController:") = Void, NSViewController;
overload externalInstanceMethod(static NSPrintPanel, static #"removeAccessoryController:") = Void, NSViewController;
overload externalInstanceMethod(static NSPrintPanel, static #"accessoryControllers") = NSArray;
overload externalInstanceMethod(static NSPrintPanel, static #"setOptions:") = Void, Int;
overload externalInstanceMethod(static NSPrintPanel, static #"options") = Int;
overload externalInstanceMethod(static NSPrintPanel, static #"setDefaultButtonTitle:") = Void, NSString;
overload externalInstanceMethod(static NSPrintPanel, static #"defaultButtonTitle") = NSString;
overload externalInstanceMethod(static NSPrintPanel, static #"setHelpAnchor:") = Void, NSString;
overload externalInstanceMethod(static NSPrintPanel, static #"helpAnchor") = NSString;
overload externalInstanceMethod(static NSPrintPanel, static #"setJobStyleHint:") = Void, NSString;
overload externalInstanceMethod(static NSPrintPanel, static #"jobStyleHint") = NSString;
overload externalInstanceMethod(static NSPrintPanel, static #"beginSheetWithPrintInfo:modalForWindow:delegate:didEndSelector:contextInfo:") = Void, NSPrintInfo, NSWindow, Id, SelectorHandle, RawPointer;
overload externalInstanceMethod(static NSPrintPanel, static #"runModalWithPrintInfo:") = Int, NSPrintInfo;
overload externalInstanceMethod(static NSPrintPanel, static #"runModal") = Int;
overload externalInstanceMethod(static NSPrintPanel, static #"printInfo") = NSPrintInfo;
overload externalInstanceMethod(static NSPrintPanel, static #"setAccessoryView:") = Void, NSView;
overload externalInstanceMethod(static NSPrintPanel, static #"accessoryView") = NSView;
overload externalInstanceMethod(static NSPrintPanel, static #"updateFromPrintInfo") = Void;
overload externalInstanceMethod(static NSPrintPanel, static #"finalWritePrintInfo") = Void;

record NSPrinter = externalClass(NSObject);
overload externalInstanceMethod(static NSPrinter, static #"copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(static NSPrinter, static #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static NSPrinter, static #"initWithCoder:") = Id, NSCoder;
overload externalClassMethod(static NSPrinter, static #"printerNames") = NSArray;
overload externalClassMethod(static NSPrinter, static #"printerTypes") = NSArray;
overload externalClassMethod(static NSPrinter, static #"printerWithName:") = NSPrinter, NSString;
overload externalClassMethod(static NSPrinter, static #"printerWithType:") = NSPrinter, NSString;
overload externalInstanceMethod(static NSPrinter, static #"name") = NSString;
overload externalInstanceMethod(static NSPrinter, static #"type") = NSString;
overload externalInstanceMethod(static NSPrinter, static #"languageLevel") = Int;
overload externalInstanceMethod(static NSPrinter, static #"pageSizeForPaper:") = NSSize, NSString;
overload externalInstanceMethod(static NSPrinter, static #"statusForTable:") = UInt, NSString;
overload externalInstanceMethod(static NSPrinter, static #"isKey:inTable:") = Bool, NSString, NSString;
overload externalInstanceMethod(static NSPrinter, static #"booleanForKey:inTable:") = Bool, NSString, NSString;
overload externalInstanceMethod(static NSPrinter, static #"floatForKey:inTable:") = Float, NSString, NSString;
overload externalInstanceMethod(static NSPrinter, static #"intForKey:inTable:") = Int, NSString, NSString;
overload externalInstanceMethod(static NSPrinter, static #"rectForKey:inTable:") = NSRect, NSString, NSString;
overload externalInstanceMethod(static NSPrinter, static #"sizeForKey:inTable:") = NSSize, NSString, NSString;
overload externalInstanceMethod(static NSPrinter, static #"stringForKey:inTable:") = NSString, NSString, NSString;
overload externalInstanceMethod(static NSPrinter, static #"stringListForKey:inTable:") = NSArray, NSString, NSString;
overload externalInstanceMethod(static NSPrinter, static #"deviceDescription") = NSDictionary;
overload externalInstanceMethod(static NSPrinter, static #"imageRectForPaper:") = NSRect, NSString;
overload externalInstanceMethod(static NSPrinter, static #"acceptsBinary") = Bool;
overload externalInstanceMethod(static NSPrinter, static #"isColor") = Bool;
overload externalInstanceMethod(static NSPrinter, static #"isFontAvailable:") = Bool, NSString;
overload externalInstanceMethod(static NSPrinter, static #"isOutputStackInReverseOrder") = Bool;
overload externalClassMethod(static NSPrinter, static #"printerWithName:domain:includeUnavailable:") = NSPrinter, NSString, NSString, Bool;
overload externalInstanceMethod(static NSPrinter, static #"domain") = NSString;
overload externalInstanceMethod(static NSPrinter, static #"host") = NSString;
overload externalInstanceMethod(static NSPrinter, static #"note") = NSString;

record NSProgressIndicator = externalClass(NSView);
overload externalInstanceMethod(static NSProgressIndicator, static #"isIndeterminate") = Bool;
overload externalInstanceMethod(static NSProgressIndicator, static #"setIndeterminate:") = Void, Bool;
overload externalInstanceMethod(static NSProgressIndicator, static #"isBezeled") = Bool;
overload externalInstanceMethod(static NSProgressIndicator, static #"setBezeled:") = Void, Bool;
overload externalInstanceMethod(static NSProgressIndicator, static #"controlTint") = UInt;
overload externalInstanceMethod(static NSProgressIndicator, static #"setControlTint:") = Void, UInt;
overload externalInstanceMethod(static NSProgressIndicator, static #"controlSize") = UInt;
overload externalInstanceMethod(static NSProgressIndicator, static #"setControlSize:") = Void, UInt;
overload externalInstanceMethod(static NSProgressIndicator, static #"doubleValue") = Double;
overload externalInstanceMethod(static NSProgressIndicator, static #"setDoubleValue:") = Void, Double;
overload externalInstanceMethod(static NSProgressIndicator, static #"incrementBy:") = Void, Double;
overload externalInstanceMethod(static NSProgressIndicator, static #"minValue") = Double;
overload externalInstanceMethod(static NSProgressIndicator, static #"maxValue") = Double;
overload externalInstanceMethod(static NSProgressIndicator, static #"setMinValue:") = Void, Double;
overload externalInstanceMethod(static NSProgressIndicator, static #"setMaxValue:") = Void, Double;
overload externalInstanceMethod(static NSProgressIndicator, static #"usesThreadedAnimation") = Bool;
overload externalInstanceMethod(static NSProgressIndicator, static #"setUsesThreadedAnimation:") = Void, Bool;
overload externalInstanceMethod(static NSProgressIndicator, static #"startAnimation:") = Void, Id;
overload externalInstanceMethod(static NSProgressIndicator, static #"stopAnimation:") = Void, Id;
overload externalInstanceMethod(static NSProgressIndicator, static #"setStyle:") = Void, UInt;
overload externalInstanceMethod(static NSProgressIndicator, static #"style") = UInt;
overload externalInstanceMethod(static NSProgressIndicator, static #"sizeToFit") = Void;
overload externalInstanceMethod(static NSProgressIndicator, static #"isDisplayedWhenStopped") = Bool;
overload externalInstanceMethod(static NSProgressIndicator, static #"setDisplayedWhenStopped:") = Void, Bool;
overload externalInstanceMethod(static NSProgressIndicator, static #"animationDelay") = Double;
overload externalInstanceMethod(static NSProgressIndicator, static #"setAnimationDelay:") = Void, Double;
overload externalInstanceMethod(static NSProgressIndicator, static #"animate:") = Void, Id;

record NSQuickDrawView = externalClass(NSView);
overload externalInstanceMethod(static NSQuickDrawView, static #"qdPort") = RawPointer;

record NSResponder = externalClass(NSObject);
overload externalInstanceMethod(static NSResponder, static #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static NSResponder, static #"initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(static NSResponder, static #"nextResponder") = NSResponder;
overload externalInstanceMethod(static NSResponder, static #"setNextResponder:") = Void, NSResponder;
overload externalInstanceMethod(static NSResponder, static #"tryToPerform:with:") = Bool, SelectorHandle, Id;
overload externalInstanceMethod(static NSResponder, static #"performKeyEquivalent:") = Bool, NSEvent;
overload externalInstanceMethod(static NSResponder, static #"validRequestorForSendType:returnType:") = Id, NSString, NSString;
overload externalInstanceMethod(static NSResponder, static #"mouseDown:") = Void, NSEvent;
overload externalInstanceMethod(static NSResponder, static #"rightMouseDown:") = Void, NSEvent;
overload externalInstanceMethod(static NSResponder, static #"otherMouseDown:") = Void, NSEvent;
overload externalInstanceMethod(static NSResponder, static #"mouseUp:") = Void, NSEvent;
overload externalInstanceMethod(static NSResponder, static #"rightMouseUp:") = Void, NSEvent;
overload externalInstanceMethod(static NSResponder, static #"otherMouseUp:") = Void, NSEvent;
overload externalInstanceMethod(static NSResponder, static #"mouseMoved:") = Void, NSEvent;
overload externalInstanceMethod(static NSResponder, static #"mouseDragged:") = Void, NSEvent;
overload externalInstanceMethod(static NSResponder, static #"scrollWheel:") = Void, NSEvent;
overload externalInstanceMethod(static NSResponder, static #"rightMouseDragged:") = Void, NSEvent;
overload externalInstanceMethod(static NSResponder, static #"otherMouseDragged:") = Void, NSEvent;
overload externalInstanceMethod(static NSResponder, static #"mouseEntered:") = Void, NSEvent;
overload externalInstanceMethod(static NSResponder, static #"mouseExited:") = Void, NSEvent;
overload externalInstanceMethod(static NSResponder, static #"keyDown:") = Void, NSEvent;
overload externalInstanceMethod(static NSResponder, static #"keyUp:") = Void, NSEvent;
overload externalInstanceMethod(static NSResponder, static #"flagsChanged:") = Void, NSEvent;
overload externalInstanceMethod(static NSResponder, static #"tabletPoint:") = Void, NSEvent;
overload externalInstanceMethod(static NSResponder, static #"tabletProximity:") = Void, NSEvent;
overload externalInstanceMethod(static NSResponder, static #"cursorUpdate:") = Void, NSEvent;
overload externalInstanceMethod(static NSResponder, static #"magnifyWithEvent:") = Void, NSEvent;
overload externalInstanceMethod(static NSResponder, static #"rotateWithEvent:") = Void, NSEvent;
overload externalInstanceMethod(static NSResponder, static #"swipeWithEvent:") = Void, NSEvent;
overload externalInstanceMethod(static NSResponder, static #"beginGestureWithEvent:") = Void, NSEvent;
overload externalInstanceMethod(static NSResponder, static #"endGestureWithEvent:") = Void, NSEvent;
overload externalInstanceMethod(static NSResponder, static #"touchesBeganWithEvent:") = Void, NSEvent;
overload externalInstanceMethod(static NSResponder, static #"touchesMovedWithEvent:") = Void, NSEvent;
overload externalInstanceMethod(static NSResponder, static #"touchesEndedWithEvent:") = Void, NSEvent;
overload externalInstanceMethod(static NSResponder, static #"touchesCancelledWithEvent:") = Void, NSEvent;
overload externalInstanceMethod(static NSResponder, static #"noResponderFor:") = Void, SelectorHandle;
overload externalInstanceMethod(static NSResponder, static #"acceptsFirstResponder") = Bool;
overload externalInstanceMethod(static NSResponder, static #"becomeFirstResponder") = Bool;
overload externalInstanceMethod(static NSResponder, static #"resignFirstResponder") = Bool;
overload externalInstanceMethod(static NSResponder, static #"interpretKeyEvents:") = Void, NSArray;
overload externalInstanceMethod(static NSResponder, static #"flushBufferedKeyEvents") = Void;
overload externalInstanceMethod(static NSResponder, static #"setMenu:") = Void, NSMenu;
overload externalInstanceMethod(static NSResponder, static #"menu") = NSMenu;
overload externalInstanceMethod(static NSResponder, static #"showContextHelp:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"helpRequested:") = Void, NSEvent;
overload externalInstanceMethod(static NSResponder, static #"shouldBeTreatedAsInkEvent:") = Bool, NSEvent;
overload externalInstanceMethod(static NSResponder, static #"performMnemonic:") = Bool, NSString;
overload externalInstanceMethod(static NSResponder, static #"insertText:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"doCommandBySelector:") = Void, SelectorHandle;
overload externalInstanceMethod(static NSResponder, static #"moveForward:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"moveRight:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"moveBackward:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"moveLeft:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"moveUp:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"moveDown:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"moveWordForward:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"moveWordBackward:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"moveToBeginningOfLine:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"moveToEndOfLine:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"moveToBeginningOfParagraph:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"moveToEndOfParagraph:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"moveToEndOfDocument:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"moveToBeginningOfDocument:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"pageDown:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"pageUp:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"centerSelectionInVisibleArea:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"moveBackwardAndModifySelection:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"moveForwardAndModifySelection:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"moveWordForwardAndModifySelection:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"moveWordBackwardAndModifySelection:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"moveUpAndModifySelection:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"moveDownAndModifySelection:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"moveToBeginningOfLineAndModifySelection:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"moveToEndOfLineAndModifySelection:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"moveToBeginningOfParagraphAndModifySelection:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"moveToEndOfParagraphAndModifySelection:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"moveToEndOfDocumentAndModifySelection:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"moveToBeginningOfDocumentAndModifySelection:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"pageDownAndModifySelection:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"pageUpAndModifySelection:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"moveParagraphForwardAndModifySelection:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"moveParagraphBackwardAndModifySelection:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"moveWordRight:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"moveWordLeft:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"moveRightAndModifySelection:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"moveLeftAndModifySelection:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"moveWordRightAndModifySelection:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"moveWordLeftAndModifySelection:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"moveToLeftEndOfLine:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"moveToRightEndOfLine:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"moveToLeftEndOfLineAndModifySelection:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"moveToRightEndOfLineAndModifySelection:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"scrollPageUp:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"scrollPageDown:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"scrollLineUp:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"scrollLineDown:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"scrollToBeginningOfDocument:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"scrollToEndOfDocument:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"transpose:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"transposeWords:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"selectAll:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"selectParagraph:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"selectLine:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"selectWord:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"indent:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"insertTab:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"insertBacktab:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"insertNewline:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"insertParagraphSeparator:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"insertNewlineIgnoringFieldEditor:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"insertTabIgnoringFieldEditor:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"insertLineBreak:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"insertContainerBreak:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"insertSingleQuoteIgnoringSubstitution:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"insertDoubleQuoteIgnoringSubstitution:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"changeCaseOfLetter:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"uppercaseWord:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"lowercaseWord:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"capitalizeWord:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"deleteForward:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"deleteBackward:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"deleteBackwardByDecomposingPreviousCharacter:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"deleteWordForward:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"deleteWordBackward:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"deleteToBeginningOfLine:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"deleteToEndOfLine:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"deleteToBeginningOfParagraph:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"deleteToEndOfParagraph:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"yank:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"complete:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"setMark:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"deleteToMark:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"selectToMark:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"swapWithMark:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"cancelOperation:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"makeBaseWritingDirectionNatural:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"makeBaseWritingDirectionLeftToRight:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"makeBaseWritingDirectionRightToLeft:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"makeTextWritingDirectionNatural:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"makeTextWritingDirectionLeftToRight:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"makeTextWritingDirectionRightToLeft:") = Void, Id;
overload externalInstanceMethod(static NSResponder, static #"undoManager") = NSUndoManager;
overload externalInstanceMethod(static NSResponder, static #"presentError:modalForWindow:delegate:didPresentSelector:contextInfo:") = Void, NSError, NSWindow, Id, SelectorHandle, RawPointer;
overload externalInstanceMethod(static NSResponder, static #"presentError:") = Bool, NSError;
overload externalInstanceMethod(static NSResponder, static #"willPresentError:") = NSError, NSError;
overload externalInstanceMethod(static NSResponder, static #"interfaceStyle") = UInt;
overload externalInstanceMethod(static NSResponder, static #"setInterfaceStyle:") = Void, UInt;

record NSRuleEditor = externalClass(NSControl);
overload externalInstanceMethod(static NSRuleEditor, static #"setDelegate:") = Void, Id;
overload externalInstanceMethod(static NSRuleEditor, static #"delegate") = Id;
overload externalInstanceMethod(static NSRuleEditor, static #"setFormattingStringsFilename:") = Void, NSString;
overload externalInstanceMethod(static NSRuleEditor, static #"formattingStringsFilename") = NSString;
overload externalInstanceMethod(static NSRuleEditor, static #"setFormattingDictionary:") = Void, NSDictionary;
overload externalInstanceMethod(static NSRuleEditor, static #"formattingDictionary") = NSDictionary;
overload externalInstanceMethod(static NSRuleEditor, static #"reloadCriteria") = Void;
overload externalInstanceMethod(static NSRuleEditor, static #"setNestingMode:") = Void, UInt;
overload externalInstanceMethod(static NSRuleEditor, static #"nestingMode") = UInt;
overload externalInstanceMethod(static NSRuleEditor, static #"setRowHeight:") = Void, Float;
overload externalInstanceMethod(static NSRuleEditor, static #"rowHeight") = Float;
overload externalInstanceMethod(static NSRuleEditor, static #"setEditable:") = Void, Bool;
overload externalInstanceMethod(static NSRuleEditor, static #"isEditable") = Bool;
overload externalInstanceMethod(static NSRuleEditor, static #"setCanRemoveAllRows:") = Void, Bool;
overload externalInstanceMethod(static NSRuleEditor, static #"canRemoveAllRows") = Bool;
overload externalInstanceMethod(static NSRuleEditor, static #"predicate") = NSPredicate;
overload externalInstanceMethod(static NSRuleEditor, static #"reloadPredicate") = Void;
overload externalInstanceMethod(static NSRuleEditor, static #"predicateForRow:") = NSPredicate, Int;
overload externalInstanceMethod(static NSRuleEditor, static #"numberOfRows") = Int;
overload externalInstanceMethod(static NSRuleEditor, static #"subrowIndexesForRow:") = NSIndexSet, Int;
overload externalInstanceMethod(static NSRuleEditor, static #"criteriaForRow:") = NSArray, Int;
overload externalInstanceMethod(static NSRuleEditor, static #"displayValuesForRow:") = NSArray, Int;
overload externalInstanceMethod(static NSRuleEditor, static #"rowForDisplayValue:") = Int, Id;
overload externalInstanceMethod(static NSRuleEditor, static #"rowTypeForRow:") = UInt, Int;
overload externalInstanceMethod(static NSRuleEditor, static #"parentRowForRow:") = Int, Int;
overload externalInstanceMethod(static NSRuleEditor, static #"addRow:") = Void, Id;
overload externalInstanceMethod(static NSRuleEditor, static #"insertRowAtIndex:withType:asSubrowOfRow:animate:") = Void, Int, UInt, Int, Bool;
overload externalInstanceMethod(static NSRuleEditor, static #"setCriteria:andDisplayValues:forRowAtIndex:") = Void, NSArray, NSArray, Int;
overload externalInstanceMethod(static NSRuleEditor, static #"removeRowAtIndex:") = Void, Int;
overload externalInstanceMethod(static NSRuleEditor, static #"removeRowsAtIndexes:includeSubrows:") = Void, NSIndexSet, Bool;
overload externalInstanceMethod(static NSRuleEditor, static #"selectedRowIndexes") = NSIndexSet;
overload externalInstanceMethod(static NSRuleEditor, static #"selectRowIndexes:byExtendingSelection:") = Void, NSIndexSet, Bool;
overload externalInstanceMethod(static NSRuleEditor, static #"setRowClass:") = Void, Id;
overload externalInstanceMethod(static NSRuleEditor, static #"rowClass") = Id;
overload externalInstanceMethod(static NSRuleEditor, static #"setRowTypeKeyPath:") = Void, NSString;
overload externalInstanceMethod(static NSRuleEditor, static #"rowTypeKeyPath") = NSString;
overload externalInstanceMethod(static NSRuleEditor, static #"setSubrowsKeyPath:") = Void, NSString;
overload externalInstanceMethod(static NSRuleEditor, static #"subrowsKeyPath") = NSString;
overload externalInstanceMethod(static NSRuleEditor, static #"setCriteriaKeyPath:") = Void, NSString;
overload externalInstanceMethod(static NSRuleEditor, static #"criteriaKeyPath") = NSString;
overload externalInstanceMethod(static NSRuleEditor, static #"setDisplayValuesKeyPath:") = Void, NSString;
overload externalInstanceMethod(static NSRuleEditor, static #"displayValuesKeyPath") = NSString;

record NSRulerMarker = externalClass(NSObject);
overload externalInstanceMethod(static NSRulerMarker, static #"copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(static NSRulerMarker, static #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static NSRulerMarker, static #"initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(static NSRulerMarker, static #"initWithRulerView:markerLocation:image:imageOrigin:") = Id, NSRulerView, Float, NSImage, NSPoint;
overload externalInstanceMethod(static NSRulerMarker, static #"ruler") = NSRulerView;
overload externalInstanceMethod(static NSRulerMarker, static #"setMarkerLocation:") = Void, Float;
overload externalInstanceMethod(static NSRulerMarker, static #"markerLocation") = Float;
overload externalInstanceMethod(static NSRulerMarker, static #"setImage:") = Void, NSImage;
overload externalInstanceMethod(static NSRulerMarker, static #"image") = NSImage;
overload externalInstanceMethod(static NSRulerMarker, static #"setImageOrigin:") = Void, NSPoint;
overload externalInstanceMethod(static NSRulerMarker, static #"imageOrigin") = NSPoint;
overload externalInstanceMethod(static NSRulerMarker, static #"setMovable:") = Void, Bool;
overload externalInstanceMethod(static NSRulerMarker, static #"setRemovable:") = Void, Bool;
overload externalInstanceMethod(static NSRulerMarker, static #"isMovable") = Bool;
overload externalInstanceMethod(static NSRulerMarker, static #"isRemovable") = Bool;
overload externalInstanceMethod(static NSRulerMarker, static #"isDragging") = Bool;
overload externalInstanceMethod(static NSRulerMarker, static #"setRepresentedObject:") = Void, Id;
overload externalInstanceMethod(static NSRulerMarker, static #"representedObject") = Id;
overload externalInstanceMethod(static NSRulerMarker, static #"imageRectInRuler") = NSRect;
overload externalInstanceMethod(static NSRulerMarker, static #"thicknessRequiredInRuler") = Float;
overload externalInstanceMethod(static NSRulerMarker, static #"drawRect:") = Void, NSRect;
overload externalInstanceMethod(static NSRulerMarker, static #"trackMouse:adding:") = Bool, NSEvent, Bool;

record NSRulerView = externalClass(NSView);
overload externalClassMethod(static NSRulerView, static #"registerUnitWithName:abbreviation:unitToPointsConversionFactor:stepUpCycle:stepDownCycle:") = Void, NSString, NSString, Float, NSArray, NSArray;
overload externalInstanceMethod(static NSRulerView, static #"initWithScrollView:orientation:") = Id, NSScrollView, UInt;
overload externalInstanceMethod(static NSRulerView, static #"setScrollView:") = Void, NSScrollView;
overload externalInstanceMethod(static NSRulerView, static #"scrollView") = NSScrollView;
overload externalInstanceMethod(static NSRulerView, static #"setOrientation:") = Void, UInt;
overload externalInstanceMethod(static NSRulerView, static #"orientation") = UInt;
overload externalInstanceMethod(static NSRulerView, static #"baselineLocation") = Float;
overload externalInstanceMethod(static NSRulerView, static #"requiredThickness") = Float;
overload externalInstanceMethod(static NSRulerView, static #"setRuleThickness:") = Void, Float;
overload externalInstanceMethod(static NSRulerView, static #"ruleThickness") = Float;
overload externalInstanceMethod(static NSRulerView, static #"setReservedThicknessForMarkers:") = Void, Float;
overload externalInstanceMethod(static NSRulerView, static #"reservedThicknessForMarkers") = Float;
overload externalInstanceMethod(static NSRulerView, static #"setReservedThicknessForAccessoryView:") = Void, Float;
overload externalInstanceMethod(static NSRulerView, static #"reservedThicknessForAccessoryView") = Float;
overload externalInstanceMethod(static NSRulerView, static #"setMeasurementUnits:") = Void, NSString;
overload externalInstanceMethod(static NSRulerView, static #"measurementUnits") = NSString;
overload externalInstanceMethod(static NSRulerView, static #"setOriginOffset:") = Void, Float;
overload externalInstanceMethod(static NSRulerView, static #"originOffset") = Float;
overload externalInstanceMethod(static NSRulerView, static #"setClientView:") = Void, NSView;
overload externalInstanceMethod(static NSRulerView, static #"clientView") = NSView;
overload externalInstanceMethod(static NSRulerView, static #"setMarkers:") = Void, NSArray;
overload externalInstanceMethod(static NSRulerView, static #"addMarker:") = Void, NSRulerMarker;
overload externalInstanceMethod(static NSRulerView, static #"removeMarker:") = Void, NSRulerMarker;
overload externalInstanceMethod(static NSRulerView, static #"markers") = NSArray;
overload externalInstanceMethod(static NSRulerView, static #"trackMarker:withMouseEvent:") = Bool, NSRulerMarker, NSEvent;
overload externalInstanceMethod(static NSRulerView, static #"setAccessoryView:") = Void, NSView;
overload externalInstanceMethod(static NSRulerView, static #"accessoryView") = NSView;
overload externalInstanceMethod(static NSRulerView, static #"moveRulerlineFromLocation:toLocation:") = Void, Float, Float;
overload externalInstanceMethod(static NSRulerView, static #"invalidateHashMarks") = Void;
overload externalInstanceMethod(static NSRulerView, static #"drawHashMarksAndLabelsInRect:") = Void, NSRect;
overload externalInstanceMethod(static NSRulerView, static #"drawMarkersInRect:") = Void, NSRect;
overload externalInstanceMethod(static NSRulerView, static #"isFlipped") = Bool;

record NSRunningApplication = externalClass(NSObject);
overload externalInstanceMethod(static NSRunningApplication, static #"hide") = Bool;
overload externalInstanceMethod(static NSRunningApplication, static #"unhide") = Bool;
overload externalInstanceMethod(static NSRunningApplication, static #"activateWithOptions:") = Bool, UInt;
overload externalInstanceMethod(static NSRunningApplication, static #"terminate") = Bool;
overload externalInstanceMethod(static NSRunningApplication, static #"forceTerminate") = Bool;
overload externalClassMethod(static NSRunningApplication, static #"runningApplicationsWithBundleIdentifier:") = NSArray, NSString;
overload externalClassMethod(static NSRunningApplication, static #"runningApplicationWithProcessIdentifier:") = NSRunningApplication, Int;
overload externalClassMethod(static NSRunningApplication, static #"currentApplication") = NSRunningApplication;
overload externalInstanceMethod(static NSRunningApplication, static #"isTerminated") = Bool;
overload externalInstanceMethod(static NSRunningApplication, static #"isFinishedLaunching") = Bool;
overload externalInstanceMethod(static NSRunningApplication, static #"isHidden") = Bool;
overload externalInstanceMethod(static NSRunningApplication, static #"isActive") = Bool;
overload externalInstanceMethod(static NSRunningApplication, static #"activationPolicy") = Int;
overload externalInstanceMethod(static NSRunningApplication, static #"localizedName") = NSString;
overload externalInstanceMethod(static NSRunningApplication, static #"bundleIdentifier") = NSString;
overload externalInstanceMethod(static NSRunningApplication, static #"bundleURL") = NSURL;
overload externalInstanceMethod(static NSRunningApplication, static #"executableURL") = NSURL;
overload externalInstanceMethod(static NSRunningApplication, static #"processIdentifier") = Int;
overload externalInstanceMethod(static NSRunningApplication, static #"launchDate") = NSDate;
overload externalInstanceMethod(static NSRunningApplication, static #"icon") = NSImage;
overload externalInstanceMethod(static NSRunningApplication, static #"executableArchitecture") = Int;

record NSSavePanel = externalClass(NSPanel);
overload externalClassMethod(static NSSavePanel, static #"savePanel") = NSSavePanel;
overload externalInstanceMethod(static NSSavePanel, static #"URL") = NSURL;
overload externalInstanceMethod(static NSSavePanel, static #"directoryURL") = NSURL;
overload externalInstanceMethod(static NSSavePanel, static #"setDirectoryURL:") = Void, NSURL;
overload externalInstanceMethod(static NSSavePanel, static #"allowedFileTypes") = NSArray;
overload externalInstanceMethod(static NSSavePanel, static #"setAllowedFileTypes:") = Void, NSArray;
overload externalInstanceMethod(static NSSavePanel, static #"allowsOtherFileTypes") = Bool;
overload externalInstanceMethod(static NSSavePanel, static #"setAllowsOtherFileTypes:") = Void, Bool;
overload externalInstanceMethod(static NSSavePanel, static #"accessoryView") = NSView;
overload externalInstanceMethod(static NSSavePanel, static #"setAccessoryView:") = Void, NSView;
overload externalInstanceMethod(static NSSavePanel, static #"delegate") = Id;
overload externalInstanceMethod(static NSSavePanel, static #"setDelegate:") = Void, Id;
overload externalInstanceMethod(static NSSavePanel, static #"isExpanded") = Bool;
overload externalInstanceMethod(static NSSavePanel, static #"canCreateDirectories") = Bool;
overload externalInstanceMethod(static NSSavePanel, static #"setCanCreateDirectories:") = Void, Bool;
overload externalInstanceMethod(static NSSavePanel, static #"canSelectHiddenExtension") = Bool;
overload externalInstanceMethod(static NSSavePanel, static #"setCanSelectHiddenExtension:") = Void, Bool;
overload externalInstanceMethod(static NSSavePanel, static #"isExtensionHidden") = Bool;
overload externalInstanceMethod(static NSSavePanel, static #"setExtensionHidden:") = Void, Bool;
overload externalInstanceMethod(static NSSavePanel, static #"treatsFilePackagesAsDirectories") = Bool;
overload externalInstanceMethod(static NSSavePanel, static #"setTreatsFilePackagesAsDirectories:") = Void, Bool;
overload externalInstanceMethod(static NSSavePanel, static #"prompt") = NSString;
overload externalInstanceMethod(static NSSavePanel, static #"setPrompt:") = Void, NSString;
overload externalInstanceMethod(static NSSavePanel, static #"title") = NSString;
overload externalInstanceMethod(static NSSavePanel, static #"setTitle:") = Void, NSString;
overload externalInstanceMethod(static NSSavePanel, static #"nameFieldLabel") = NSString;
overload externalInstanceMethod(static NSSavePanel, static #"setNameFieldLabel:") = Void, NSString;
overload externalInstanceMethod(static NSSavePanel, static #"nameFieldStringValue") = NSString;
overload externalInstanceMethod(static NSSavePanel, static #"setNameFieldStringValue:") = Void, NSString;
overload externalInstanceMethod(static NSSavePanel, static #"message") = NSString;
overload externalInstanceMethod(static NSSavePanel, static #"setMessage:") = Void, NSString;
overload externalInstanceMethod(static NSSavePanel, static #"validateVisibleColumns") = Void;
overload externalInstanceMethod(static NSSavePanel, static #"showsHiddenFiles") = Bool;
overload externalInstanceMethod(static NSSavePanel, static #"setShowsHiddenFiles:") = Void, Bool;
overload externalInstanceMethod(static NSSavePanel, static #"ok:") = Void, Id;
overload externalInstanceMethod(static NSSavePanel, static #"cancel:") = Void, Id;
overload externalInstanceMethod(static NSSavePanel, static #"beginSheetModalForWindow:completionHandler:") = Void, NSWindow, UnknownType;
overload externalInstanceMethod(static NSSavePanel, static #"beginWithCompletionHandler:") = Void, UnknownType;
overload externalInstanceMethod(static NSSavePanel, static #"runModal") = Int;
overload externalInstanceMethod(static NSSavePanel, static #"filename") = NSString;
overload externalInstanceMethod(static NSSavePanel, static #"directory") = NSString;
overload externalInstanceMethod(static NSSavePanel, static #"setDirectory:") = Void, NSString;
overload externalInstanceMethod(static NSSavePanel, static #"requiredFileType") = NSString;
overload externalInstanceMethod(static NSSavePanel, static #"setRequiredFileType:") = Void, NSString;
overload externalInstanceMethod(static NSSavePanel, static #"beginSheetForDirectory:file:modalForWindow:modalDelegate:didEndSelector:contextInfo:") = Void, NSString, NSString, NSWindow, Id, SelectorHandle, RawPointer;
overload externalInstanceMethod(static NSSavePanel, static #"runModalForDirectory:file:") = Int, NSString, NSString;
overload externalInstanceMethod(static NSSavePanel, static #"selectText:") = Void, Id;

record NSScreen = externalClass(NSObject);
overload externalClassMethod(static NSScreen, static #"screens") = NSArray;
overload externalClassMethod(static NSScreen, static #"mainScreen") = NSScreen;
overload externalClassMethod(static NSScreen, static #"deepestScreen") = NSScreen;
overload externalInstanceMethod(static NSScreen, static #"depth") = Int;
overload externalInstanceMethod(static NSScreen, static #"frame") = NSRect;
overload externalInstanceMethod(static NSScreen, static #"visibleFrame") = NSRect;
overload externalInstanceMethod(static NSScreen, static #"deviceDescription") = NSDictionary;
overload externalInstanceMethod(static NSScreen, static #"colorSpace") = NSColorSpace;
overload externalInstanceMethod(static NSScreen, static #"supportedWindowDepths") = Pointer[Int];
overload externalInstanceMethod(static NSScreen, static #"userSpaceScaleFactor") = Float;

record NSScrollView = externalClass(NSView);
overload externalClassMethod(static NSScrollView, static #"frameSizeForContentSize:hasHorizontalScroller:hasVerticalScroller:borderType:") = NSSize, NSSize, Bool, Bool, UInt;
overload externalClassMethod(static NSScrollView, static #"contentSizeForFrameSize:hasHorizontalScroller:hasVerticalScroller:borderType:") = NSSize, NSSize, Bool, Bool, UInt;
overload externalInstanceMethod(static NSScrollView, static #"documentVisibleRect") = NSRect;
overload externalInstanceMethod(static NSScrollView, static #"contentSize") = NSSize;
overload externalInstanceMethod(static NSScrollView, static #"setDocumentView:") = Void, NSView;
overload externalInstanceMethod(static NSScrollView, static #"documentView") = Id;
overload externalInstanceMethod(static NSScrollView, static #"setContentView:") = Void, NSClipView;
overload externalInstanceMethod(static NSScrollView, static #"contentView") = NSClipView;
overload externalInstanceMethod(static NSScrollView, static #"setDocumentCursor:") = Void, NSCursor;
overload externalInstanceMethod(static NSScrollView, static #"documentCursor") = NSCursor;
overload externalInstanceMethod(static NSScrollView, static #"setBorderType:") = Void, UInt;
overload externalInstanceMethod(static NSScrollView, static #"borderType") = UInt;
overload externalInstanceMethod(static NSScrollView, static #"setBackgroundColor:") = Void, NSColor;
overload externalInstanceMethod(static NSScrollView, static #"backgroundColor") = NSColor;
overload externalInstanceMethod(static NSScrollView, static #"setDrawsBackground:") = Void, Bool;
overload externalInstanceMethod(static NSScrollView, static #"drawsBackground") = Bool;
overload externalInstanceMethod(static NSScrollView, static #"setHasVerticalScroller:") = Void, Bool;
overload externalInstanceMethod(static NSScrollView, static #"hasVerticalScroller") = Bool;
overload externalInstanceMethod(static NSScrollView, static #"setHasHorizontalScroller:") = Void, Bool;
overload externalInstanceMethod(static NSScrollView, static #"hasHorizontalScroller") = Bool;
overload externalInstanceMethod(static NSScrollView, static #"setVerticalScroller:") = Void, NSScroller;
overload externalInstanceMethod(static NSScrollView, static #"verticalScroller") = NSScroller;
overload externalInstanceMethod(static NSScrollView, static #"setHorizontalScroller:") = Void, NSScroller;
overload externalInstanceMethod(static NSScrollView, static #"horizontalScroller") = NSScroller;
overload externalInstanceMethod(static NSScrollView, static #"autohidesScrollers") = Bool;
overload externalInstanceMethod(static NSScrollView, static #"setAutohidesScrollers:") = Void, Bool;
overload externalInstanceMethod(static NSScrollView, static #"setHorizontalLineScroll:") = Void, Float;
overload externalInstanceMethod(static NSScrollView, static #"setVerticalLineScroll:") = Void, Float;
overload externalInstanceMethod(static NSScrollView, static #"setLineScroll:") = Void, Float;
overload externalInstanceMethod(static NSScrollView, static #"horizontalLineScroll") = Float;
overload externalInstanceMethod(static NSScrollView, static #"verticalLineScroll") = Float;
overload externalInstanceMethod(static NSScrollView, static #"lineScroll") = Float;
overload externalInstanceMethod(static NSScrollView, static #"setHorizontalPageScroll:") = Void, Float;
overload externalInstanceMethod(static NSScrollView, static #"setVerticalPageScroll:") = Void, Float;
overload externalInstanceMethod(static NSScrollView, static #"setPageScroll:") = Void, Float;
overload externalInstanceMethod(static NSScrollView, static #"horizontalPageScroll") = Float;
overload externalInstanceMethod(static NSScrollView, static #"verticalPageScroll") = Float;
overload externalInstanceMethod(static NSScrollView, static #"pageScroll") = Float;
overload externalInstanceMethod(static NSScrollView, static #"setScrollsDynamically:") = Void, Bool;
overload externalInstanceMethod(static NSScrollView, static #"scrollsDynamically") = Bool;
overload externalInstanceMethod(static NSScrollView, static #"tile") = Void;
overload externalInstanceMethod(static NSScrollView, static #"reflectScrolledClipView:") = Void, NSClipView;
overload externalInstanceMethod(static NSScrollView, static #"scrollWheel:") = Void, NSEvent;
overload externalClassMethod(static NSScrollView, static #"setRulerViewClass:") = Void, Id;
overload externalClassMethod(static NSScrollView, static #"rulerViewClass") = Id;
overload externalInstanceMethod(static NSScrollView, static #"setRulersVisible:") = Void, Bool;
overload externalInstanceMethod(static NSScrollView, static #"rulersVisible") = Bool;
overload externalInstanceMethod(static NSScrollView, static #"setHasHorizontalRuler:") = Void, Bool;
overload externalInstanceMethod(static NSScrollView, static #"hasHorizontalRuler") = Bool;
overload externalInstanceMethod(static NSScrollView, static #"setHasVerticalRuler:") = Void, Bool;
overload externalInstanceMethod(static NSScrollView, static #"hasVerticalRuler") = Bool;
overload externalInstanceMethod(static NSScrollView, static #"setHorizontalRulerView:") = Void, NSRulerView;
overload externalInstanceMethod(static NSScrollView, static #"horizontalRulerView") = NSRulerView;
overload externalInstanceMethod(static NSScrollView, static #"setVerticalRulerView:") = Void, NSRulerView;
overload externalInstanceMethod(static NSScrollView, static #"verticalRulerView") = NSRulerView;

record NSScroller = externalClass(NSControl);
overload externalClassMethod(static NSScroller, static #"scrollerWidth") = Float;
overload externalClassMethod(static NSScroller, static #"scrollerWidthForControlSize:") = Float, UInt;
overload externalInstanceMethod(static NSScroller, static #"drawParts") = Void;
overload externalInstanceMethod(static NSScroller, static #"rectForPart:") = NSRect, UInt;
overload externalInstanceMethod(static NSScroller, static #"checkSpaceForParts") = Void;
overload externalInstanceMethod(static NSScroller, static #"usableParts") = UInt;
overload externalInstanceMethod(static NSScroller, static #"setArrowsPosition:") = Void, UInt;
overload externalInstanceMethod(static NSScroller, static #"arrowsPosition") = UInt;
overload externalInstanceMethod(static NSScroller, static #"setControlTint:") = Void, UInt;
overload externalInstanceMethod(static NSScroller, static #"controlTint") = UInt;
overload externalInstanceMethod(static NSScroller, static #"setControlSize:") = Void, UInt;
overload externalInstanceMethod(static NSScroller, static #"controlSize") = UInt;
overload externalInstanceMethod(static NSScroller, static #"drawArrow:highlight:") = Void, UInt, Bool;
overload externalInstanceMethod(static NSScroller, static #"drawKnob") = Void;
overload externalInstanceMethod(static NSScroller, static #"drawKnobSlotInRect:highlight:") = Void, NSRect, Bool;
overload externalInstanceMethod(static NSScroller, static #"highlight:") = Void, Bool;
overload externalInstanceMethod(static NSScroller, static #"testPart:") = UInt, NSPoint;
overload externalInstanceMethod(static NSScroller, static #"trackKnob:") = Void, NSEvent;
overload externalInstanceMethod(static NSScroller, static #"trackScrollButtons:") = Void, NSEvent;
overload externalInstanceMethod(static NSScroller, static #"hitPart") = UInt;
overload externalInstanceMethod(static NSScroller, static #"knobProportion") = Float;
overload externalInstanceMethod(static NSScroller, static #"setKnobProportion:") = Void, Float;
overload externalInstanceMethod(static NSScroller, static #"setFloatValue:knobProportion:") = Void, Float, Float;

record NSSearchField = externalClass(NSTextField);
overload externalInstanceMethod(static NSSearchField, static #"setRecentSearches:") = Void, NSArray;
overload externalInstanceMethod(static NSSearchField, static #"recentSearches") = NSArray;
overload externalInstanceMethod(static NSSearchField, static #"setRecentsAutosaveName:") = Void, NSString;
overload externalInstanceMethod(static NSSearchField, static #"recentsAutosaveName") = NSString;

record NSSearchFieldCell = externalClass(NSTextFieldCell);
overload externalInstanceMethod(static NSSearchFieldCell, static #"searchButtonCell") = NSButtonCell;
overload externalInstanceMethod(static NSSearchFieldCell, static #"setSearchButtonCell:") = Void, NSButtonCell;
overload externalInstanceMethod(static NSSearchFieldCell, static #"cancelButtonCell") = NSButtonCell;
overload externalInstanceMethod(static NSSearchFieldCell, static #"setCancelButtonCell:") = Void, NSButtonCell;
overload externalInstanceMethod(static NSSearchFieldCell, static #"resetSearchButtonCell") = Void;
overload externalInstanceMethod(static NSSearchFieldCell, static #"resetCancelButtonCell") = Void;
overload externalInstanceMethod(static NSSearchFieldCell, static #"searchTextRectForBounds:") = NSRect, NSRect;
overload externalInstanceMethod(static NSSearchFieldCell, static #"searchButtonRectForBounds:") = NSRect, NSRect;
overload externalInstanceMethod(static NSSearchFieldCell, static #"cancelButtonRectForBounds:") = NSRect, NSRect;
overload externalInstanceMethod(static NSSearchFieldCell, static #"setSearchMenuTemplate:") = Void, NSMenu;
overload externalInstanceMethod(static NSSearchFieldCell, static #"searchMenuTemplate") = NSMenu;
overload externalInstanceMethod(static NSSearchFieldCell, static #"setSendsWholeSearchString:") = Void, Bool;
overload externalInstanceMethod(static NSSearchFieldCell, static #"sendsWholeSearchString") = Bool;
overload externalInstanceMethod(static NSSearchFieldCell, static #"setMaximumRecents:") = Void, Int;
overload externalInstanceMethod(static NSSearchFieldCell, static #"maximumRecents") = Int;
overload externalInstanceMethod(static NSSearchFieldCell, static #"setRecentSearches:") = Void, NSArray;
overload externalInstanceMethod(static NSSearchFieldCell, static #"recentSearches") = NSArray;
overload externalInstanceMethod(static NSSearchFieldCell, static #"setRecentsAutosaveName:") = Void, NSString;
overload externalInstanceMethod(static NSSearchFieldCell, static #"recentsAutosaveName") = NSString;
overload externalInstanceMethod(static NSSearchFieldCell, static #"sendsSearchStringImmediately") = Bool;
overload externalInstanceMethod(static NSSearchFieldCell, static #"setSendsSearchStringImmediately:") = Void, Bool;

record NSSecureTextField = externalClass(NSTextField);

record NSSecureTextFieldCell = externalClass(NSTextFieldCell);
overload externalInstanceMethod(static NSSecureTextFieldCell, static #"setEchosBullets:") = Void, Bool;
overload externalInstanceMethod(static NSSecureTextFieldCell, static #"echosBullets") = Bool;

record NSSegmentedCell = externalClass(NSActionCell);
overload externalInstanceMethod(static NSSegmentedCell, static #"setSegmentCount:") = Void, Int;
overload externalInstanceMethod(static NSSegmentedCell, static #"segmentCount") = Int;
overload externalInstanceMethod(static NSSegmentedCell, static #"setSelectedSegment:") = Void, Int;
overload externalInstanceMethod(static NSSegmentedCell, static #"selectedSegment") = Int;
overload externalInstanceMethod(static NSSegmentedCell, static #"selectSegmentWithTag:") = Bool, Int;
overload externalInstanceMethod(static NSSegmentedCell, static #"makeNextSegmentKey") = Void;
overload externalInstanceMethod(static NSSegmentedCell, static #"makePreviousSegmentKey") = Void;
overload externalInstanceMethod(static NSSegmentedCell, static #"setTrackingMode:") = Void, UInt;
overload externalInstanceMethod(static NSSegmentedCell, static #"trackingMode") = UInt;
overload externalInstanceMethod(static NSSegmentedCell, static #"setWidth:forSegment:") = Void, Float, Int;
overload externalInstanceMethod(static NSSegmentedCell, static #"widthForSegment:") = Float, Int;
overload externalInstanceMethod(static NSSegmentedCell, static #"setImage:forSegment:") = Void, NSImage, Int;
overload externalInstanceMethod(static NSSegmentedCell, static #"imageForSegment:") = NSImage, Int;
overload externalInstanceMethod(static NSSegmentedCell, static #"setImageScaling:forSegment:") = Void, UInt, Int;
overload externalInstanceMethod(static NSSegmentedCell, static #"imageScalingForSegment:") = UInt, Int;
overload externalInstanceMethod(static NSSegmentedCell, static #"setLabel:forSegment:") = Void, NSString, Int;
overload externalInstanceMethod(static NSSegmentedCell, static #"labelForSegment:") = NSString, Int;
overload externalInstanceMethod(static NSSegmentedCell, static #"setSelected:forSegment:") = Void, Bool, Int;
overload externalInstanceMethod(static NSSegmentedCell, static #"isSelectedForSegment:") = Bool, Int;
overload externalInstanceMethod(static NSSegmentedCell, static #"setEnabled:forSegment:") = Void, Bool, Int;
overload externalInstanceMethod(static NSSegmentedCell, static #"isEnabledForSegment:") = Bool, Int;
overload externalInstanceMethod(static NSSegmentedCell, static #"setMenu:forSegment:") = Void, NSMenu, Int;
overload externalInstanceMethod(static NSSegmentedCell, static #"menuForSegment:") = NSMenu, Int;
overload externalInstanceMethod(static NSSegmentedCell, static #"setToolTip:forSegment:") = Void, NSString, Int;
overload externalInstanceMethod(static NSSegmentedCell, static #"toolTipForSegment:") = NSString, Int;
overload externalInstanceMethod(static NSSegmentedCell, static #"setTag:forSegment:") = Void, Int, Int;
overload externalInstanceMethod(static NSSegmentedCell, static #"tagForSegment:") = Int, Int;
overload externalInstanceMethod(static NSSegmentedCell, static #"setSegmentStyle:") = Void, Int;
overload externalInstanceMethod(static NSSegmentedCell, static #"segmentStyle") = Int;
overload externalInstanceMethod(static NSSegmentedCell, static #"drawSegment:inFrame:withView:") = Void, Int, NSRect, NSView;
overload externalInstanceMethod(static NSSegmentedCell, static #"interiorBackgroundStyleForSegment:") = Int, Int;

record NSSegmentedControl = externalClass(NSControl);
overload externalInstanceMethod(static NSSegmentedControl, static #"setSegmentCount:") = Void, Int;
overload externalInstanceMethod(static NSSegmentedControl, static #"segmentCount") = Int;
overload externalInstanceMethod(static NSSegmentedControl, static #"setSelectedSegment:") = Void, Int;
overload externalInstanceMethod(static NSSegmentedControl, static #"selectedSegment") = Int;
overload externalInstanceMethod(static NSSegmentedControl, static #"selectSegmentWithTag:") = Bool, Int;
overload externalInstanceMethod(static NSSegmentedControl, static #"setWidth:forSegment:") = Void, Float, Int;
overload externalInstanceMethod(static NSSegmentedControl, static #"widthForSegment:") = Float, Int;
overload externalInstanceMethod(static NSSegmentedControl, static #"setImage:forSegment:") = Void, NSImage, Int;
overload externalInstanceMethod(static NSSegmentedControl, static #"imageForSegment:") = NSImage, Int;
overload externalInstanceMethod(static NSSegmentedControl, static #"setImageScaling:forSegment:") = Void, UInt, Int;
overload externalInstanceMethod(static NSSegmentedControl, static #"imageScalingForSegment:") = UInt, Int;
overload externalInstanceMethod(static NSSegmentedControl, static #"setLabel:forSegment:") = Void, NSString, Int;
overload externalInstanceMethod(static NSSegmentedControl, static #"labelForSegment:") = NSString, Int;
overload externalInstanceMethod(static NSSegmentedControl, static #"setMenu:forSegment:") = Void, NSMenu, Int;
overload externalInstanceMethod(static NSSegmentedControl, static #"menuForSegment:") = NSMenu, Int;
overload externalInstanceMethod(static NSSegmentedControl, static #"setSelected:forSegment:") = Void, Bool, Int;
overload externalInstanceMethod(static NSSegmentedControl, static #"isSelectedForSegment:") = Bool, Int;
overload externalInstanceMethod(static NSSegmentedControl, static #"setEnabled:forSegment:") = Void, Bool, Int;
overload externalInstanceMethod(static NSSegmentedControl, static #"isEnabledForSegment:") = Bool, Int;
overload externalInstanceMethod(static NSSegmentedControl, static #"setSegmentStyle:") = Void, Int;
overload externalInstanceMethod(static NSSegmentedControl, static #"segmentStyle") = Int;

record NSShadow = externalClass(NSObject);
overload externalInstanceMethod(static NSShadow, static #"copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(static NSShadow, static #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static NSShadow, static #"initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(static NSShadow, static #"init") = Id;
overload externalInstanceMethod(static NSShadow, static #"shadowOffset") = NSSize;
overload externalInstanceMethod(static NSShadow, static #"setShadowOffset:") = Void, NSSize;
overload externalInstanceMethod(static NSShadow, static #"shadowBlurRadius") = Float;
overload externalInstanceMethod(static NSShadow, static #"setShadowBlurRadius:") = Void, Float;
overload externalInstanceMethod(static NSShadow, static #"shadowColor") = NSColor;
overload externalInstanceMethod(static NSShadow, static #"setShadowColor:") = Void, NSColor;
overload externalInstanceMethod(static NSShadow, static #"set") = Void;

record NSSlider = externalClass(NSControl);
overload externalInstanceMethod(static NSSlider, static #"minValue") = Double;
overload externalInstanceMethod(static NSSlider, static #"setMinValue:") = Void, Double;
overload externalInstanceMethod(static NSSlider, static #"maxValue") = Double;
overload externalInstanceMethod(static NSSlider, static #"setMaxValue:") = Void, Double;
overload externalInstanceMethod(static NSSlider, static #"setAltIncrementValue:") = Void, Double;
overload externalInstanceMethod(static NSSlider, static #"altIncrementValue") = Double;
overload externalInstanceMethod(static NSSlider, static #"setTitleCell:") = Void, NSCell;
overload externalInstanceMethod(static NSSlider, static #"titleCell") = Id;
overload externalInstanceMethod(static NSSlider, static #"setTitleColor:") = Void, NSColor;
overload externalInstanceMethod(static NSSlider, static #"titleColor") = NSColor;
overload externalInstanceMethod(static NSSlider, static #"setTitleFont:") = Void, NSFont;
overload externalInstanceMethod(static NSSlider, static #"titleFont") = NSFont;
overload externalInstanceMethod(static NSSlider, static #"title") = NSString;
overload externalInstanceMethod(static NSSlider, static #"setTitle:") = Void, NSString;
overload externalInstanceMethod(static NSSlider, static #"setKnobThickness:") = Void, Float;
overload externalInstanceMethod(static NSSlider, static #"knobThickness") = Float;
overload externalInstanceMethod(static NSSlider, static #"setImage:") = Void, NSImage;
overload externalInstanceMethod(static NSSlider, static #"image") = NSImage;
overload externalInstanceMethod(static NSSlider, static #"isVertical") = Int;
overload externalInstanceMethod(static NSSlider, static #"acceptsFirstMouse:") = Bool, NSEvent;
overload externalInstanceMethod(static NSSlider, static #"setNumberOfTickMarks:") = Void, Int;
overload externalInstanceMethod(static NSSlider, static #"numberOfTickMarks") = Int;
overload externalInstanceMethod(static NSSlider, static #"setTickMarkPosition:") = Void, UInt;
overload externalInstanceMethod(static NSSlider, static #"tickMarkPosition") = UInt;
overload externalInstanceMethod(static NSSlider, static #"setAllowsTickMarkValuesOnly:") = Void, Bool;
overload externalInstanceMethod(static NSSlider, static #"allowsTickMarkValuesOnly") = Bool;
overload externalInstanceMethod(static NSSlider, static #"tickMarkValueAtIndex:") = Double, Int;
overload externalInstanceMethod(static NSSlider, static #"rectOfTickMarkAtIndex:") = NSRect, Int;
overload externalInstanceMethod(static NSSlider, static #"indexOfTickMarkAtPoint:") = Int, NSPoint;
overload externalInstanceMethod(static NSSlider, static #"closestTickMarkValueToValue:") = Double, Double;

record NSSliderCell = externalClass(NSActionCell);
overload externalClassMethod(static NSSliderCell, static #"prefersTrackingUntilMouseUp") = Bool;
overload externalInstanceMethod(static NSSliderCell, static #"minValue") = Double;
overload externalInstanceMethod(static NSSliderCell, static #"setMinValue:") = Void, Double;
overload externalInstanceMethod(static NSSliderCell, static #"maxValue") = Double;
overload externalInstanceMethod(static NSSliderCell, static #"setMaxValue:") = Void, Double;
overload externalInstanceMethod(static NSSliderCell, static #"setAltIncrementValue:") = Void, Double;
overload externalInstanceMethod(static NSSliderCell, static #"altIncrementValue") = Double;
overload externalInstanceMethod(static NSSliderCell, static #"isVertical") = Int;
overload externalInstanceMethod(static NSSliderCell, static #"setTitleColor:") = Void, NSColor;
overload externalInstanceMethod(static NSSliderCell, static #"titleColor") = NSColor;
overload externalInstanceMethod(static NSSliderCell, static #"setTitleFont:") = Void, NSFont;
overload externalInstanceMethod(static NSSliderCell, static #"titleFont") = NSFont;
overload externalInstanceMethod(static NSSliderCell, static #"title") = NSString;
overload externalInstanceMethod(static NSSliderCell, static #"setTitle:") = Void, NSString;
overload externalInstanceMethod(static NSSliderCell, static #"setTitleCell:") = Void, NSCell;
overload externalInstanceMethod(static NSSliderCell, static #"titleCell") = Id;
overload externalInstanceMethod(static NSSliderCell, static #"setKnobThickness:") = Void, Float;
overload externalInstanceMethod(static NSSliderCell, static #"knobThickness") = Float;
overload externalInstanceMethod(static NSSliderCell, static #"knobRectFlipped:") = NSRect, Bool;
overload externalInstanceMethod(static NSSliderCell, static #"drawKnob:") = Void, NSRect;
overload externalInstanceMethod(static NSSliderCell, static #"drawKnob") = Void;
overload externalInstanceMethod(static NSSliderCell, static #"drawBarInside:flipped:") = Void, NSRect, Bool;
overload externalInstanceMethod(static NSSliderCell, static #"trackRect") = NSRect;
overload externalInstanceMethod(static NSSliderCell, static #"setSliderType:") = Void, UInt;
overload externalInstanceMethod(static NSSliderCell, static #"sliderType") = UInt;
overload externalInstanceMethod(static NSSliderCell, static #"setNumberOfTickMarks:") = Void, Int;
overload externalInstanceMethod(static NSSliderCell, static #"numberOfTickMarks") = Int;
overload externalInstanceMethod(static NSSliderCell, static #"setTickMarkPosition:") = Void, UInt;
overload externalInstanceMethod(static NSSliderCell, static #"tickMarkPosition") = UInt;
overload externalInstanceMethod(static NSSliderCell, static #"setAllowsTickMarkValuesOnly:") = Void, Bool;
overload externalInstanceMethod(static NSSliderCell, static #"allowsTickMarkValuesOnly") = Bool;
overload externalInstanceMethod(static NSSliderCell, static #"tickMarkValueAtIndex:") = Double, Int;
overload externalInstanceMethod(static NSSliderCell, static #"rectOfTickMarkAtIndex:") = NSRect, Int;
overload externalInstanceMethod(static NSSliderCell, static #"indexOfTickMarkAtPoint:") = Int, NSPoint;
overload externalInstanceMethod(static NSSliderCell, static #"closestTickMarkValueToValue:") = Double, Double;

record NSSound = externalClass(NSObject);
overload externalInstanceMethod(static NSSound, static #"copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(static NSSound, static #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static NSSound, static #"initWithCoder:") = Id, NSCoder;
overload externalClassMethod(static NSSound, static #"readableTypesForPasteboard:") = NSArray, NSPasteboard;
overload externalClassMethod(static NSSound, static #"readingOptionsForType:pasteboard:") = UInt, NSString, NSPasteboard;
overload externalInstanceMethod(static NSSound, static #"initWithPasteboardPropertyList:ofType:") = Id, Id, NSString;
overload externalInstanceMethod(static NSSound, static #"writableTypesForPasteboard:") = NSArray, NSPasteboard;
overload externalInstanceMethod(static NSSound, static #"writingOptionsForType:pasteboard:") = UInt, NSString, NSPasteboard;
overload externalInstanceMethod(static NSSound, static #"pasteboardPropertyListForType:") = Id, NSString;
overload externalClassMethod(static NSSound, static #"soundNamed:") = Id, NSString;
overload externalInstanceMethod(static NSSound, static #"initWithContentsOfURL:byReference:") = Id, NSURL, Bool;
overload externalInstanceMethod(static NSSound, static #"initWithContentsOfFile:byReference:") = Id, NSString, Bool;
overload externalInstanceMethod(static NSSound, static #"initWithData:") = Id, NSData;
overload externalInstanceMethod(static NSSound, static #"setName:") = Bool, NSString;
overload externalInstanceMethod(static NSSound, static #"name") = NSString;
overload externalClassMethod(static NSSound, static #"canInitWithPasteboard:") = Bool, NSPasteboard;
overload externalClassMethod(static NSSound, static #"soundUnfilteredTypes") = NSArray;
overload externalInstanceMethod(static NSSound, static #"initWithPasteboard:") = Id, NSPasteboard;
overload externalInstanceMethod(static NSSound, static #"writeToPasteboard:") = Void, NSPasteboard;
overload externalInstanceMethod(static NSSound, static #"play") = Bool;
overload externalInstanceMethod(static NSSound, static #"pause") = Bool;
overload externalInstanceMethod(static NSSound, static #"resume") = Bool;
overload externalInstanceMethod(static NSSound, static #"stop") = Bool;
overload externalInstanceMethod(static NSSound, static #"isPlaying") = Bool;
overload externalInstanceMethod(static NSSound, static #"delegate") = Id;
overload externalInstanceMethod(static NSSound, static #"setDelegate:") = Void, Id;
overload externalInstanceMethod(static NSSound, static #"duration") = Double;
overload externalInstanceMethod(static NSSound, static #"setVolume:") = Void, Float;
overload externalInstanceMethod(static NSSound, static #"volume") = Float;
overload externalInstanceMethod(static NSSound, static #"currentTime") = Double;
overload externalInstanceMethod(static NSSound, static #"setCurrentTime:") = Void, Double;
overload externalInstanceMethod(static NSSound, static #"setLoops:") = Void, Bool;
overload externalInstanceMethod(static NSSound, static #"loops") = Bool;
overload externalInstanceMethod(static NSSound, static #"setPlaybackDeviceIdentifier:") = Void, NSString;
overload externalInstanceMethod(static NSSound, static #"playbackDeviceIdentifier") = NSString;
overload externalInstanceMethod(static NSSound, static #"setChannelMapping:") = Void, NSArray;
overload externalInstanceMethod(static NSSound, static #"channelMapping") = NSArray;
overload externalClassMethod(static NSSound, static #"soundUnfilteredFileTypes") = NSArray;
overload externalClassMethod(static NSSound, static #"soundUnfilteredPasteboardTypes") = NSArray;

record NSSpeechRecognizer = externalClass(NSObject);
overload externalInstanceMethod(static NSSpeechRecognizer, static #"init") = Id;
overload externalInstanceMethod(static NSSpeechRecognizer, static #"startListening") = Void;
overload externalInstanceMethod(static NSSpeechRecognizer, static #"stopListening") = Void;
overload externalInstanceMethod(static NSSpeechRecognizer, static #"delegate") = Id;
overload externalInstanceMethod(static NSSpeechRecognizer, static #"setDelegate:") = Void, Id;
overload externalInstanceMethod(static NSSpeechRecognizer, static #"commands") = NSArray;
overload externalInstanceMethod(static NSSpeechRecognizer, static #"setCommands:") = Void, NSArray;
overload externalInstanceMethod(static NSSpeechRecognizer, static #"displayedCommandsTitle") = NSString;
overload externalInstanceMethod(static NSSpeechRecognizer, static #"setDisplayedCommandsTitle:") = Void, NSString;
overload externalInstanceMethod(static NSSpeechRecognizer, static #"listensInForegroundOnly") = Bool;
overload externalInstanceMethod(static NSSpeechRecognizer, static #"setListensInForegroundOnly:") = Void, Bool;
overload externalInstanceMethod(static NSSpeechRecognizer, static #"blocksOtherRecognizers") = Bool;
overload externalInstanceMethod(static NSSpeechRecognizer, static #"setBlocksOtherRecognizers:") = Void, Bool;

record NSSpeechSynthesizer = externalClass(NSObject);
overload externalInstanceMethod(static NSSpeechSynthesizer, static #"initWithVoice:") = Id, NSString;
overload externalInstanceMethod(static NSSpeechSynthesizer, static #"startSpeakingString:") = Bool, NSString;
overload externalInstanceMethod(static NSSpeechSynthesizer, static #"startSpeakingString:toURL:") = Bool, NSString, NSURL;
overload externalInstanceMethod(static NSSpeechSynthesizer, static #"isSpeaking") = Bool;
overload externalInstanceMethod(static NSSpeechSynthesizer, static #"stopSpeaking") = Void;
overload externalInstanceMethod(static NSSpeechSynthesizer, static #"stopSpeakingAtBoundary:") = Void, UInt;
overload externalInstanceMethod(static NSSpeechSynthesizer, static #"pauseSpeakingAtBoundary:") = Void, UInt;
overload externalInstanceMethod(static NSSpeechSynthesizer, static #"continueSpeaking") = Void;
overload externalInstanceMethod(static NSSpeechSynthesizer, static #"delegate") = Id;
overload externalInstanceMethod(static NSSpeechSynthesizer, static #"setDelegate:") = Void, Id;
overload externalInstanceMethod(static NSSpeechSynthesizer, static #"voice") = NSString;
overload externalInstanceMethod(static NSSpeechSynthesizer, static #"setVoice:") = Bool, NSString;
overload externalInstanceMethod(static NSSpeechSynthesizer, static #"rate") = Float;
overload externalInstanceMethod(static NSSpeechSynthesizer, static #"setRate:") = Void, Float;
overload externalInstanceMethod(static NSSpeechSynthesizer, static #"volume") = Float;
overload externalInstanceMethod(static NSSpeechSynthesizer, static #"setVolume:") = Void, Float;
overload externalInstanceMethod(static NSSpeechSynthesizer, static #"usesFeedbackWindow") = Bool;
overload externalInstanceMethod(static NSSpeechSynthesizer, static #"setUsesFeedbackWindow:") = Void, Bool;
overload externalInstanceMethod(static NSSpeechSynthesizer, static #"addSpeechDictionary:") = Void, NSDictionary;
overload externalInstanceMethod(static NSSpeechSynthesizer, static #"phonemesFromText:") = NSString, NSString;
overload externalInstanceMethod(static NSSpeechSynthesizer, static #"objectForProperty:error:") = Id, NSString, Pointer[NSError];
overload externalInstanceMethod(static NSSpeechSynthesizer, static #"setObject:forProperty:error:") = Bool, Id, NSString, Pointer[NSError];
overload externalClassMethod(static NSSpeechSynthesizer, static #"isAnyApplicationSpeaking") = Bool;
overload externalClassMethod(static NSSpeechSynthesizer, static #"defaultVoice") = NSString;
overload externalClassMethod(static NSSpeechSynthesizer, static #"availableVoices") = NSArray;
overload externalClassMethod(static NSSpeechSynthesizer, static #"attributesForVoice:") = NSDictionary, NSString;

record NSSpellChecker = externalClass(NSObject);
overload externalClassMethod(static NSSpellChecker, static #"sharedSpellChecker") = NSSpellChecker;
overload externalClassMethod(static NSSpellChecker, static #"sharedSpellCheckerExists") = Bool;
overload externalClassMethod(static NSSpellChecker, static #"uniqueSpellDocumentTag") = Int;
overload externalInstanceMethod(static NSSpellChecker, static #"checkSpellingOfString:startingAt:language:wrap:inSpellDocumentWithTag:wordCount:") = NSRange, NSString, Int, NSString, Bool, Int, Pointer[Int];
overload externalInstanceMethod(static NSSpellChecker, static #"checkSpellingOfString:startingAt:") = NSRange, NSString, Int;
overload externalInstanceMethod(static NSSpellChecker, static #"countWordsInString:language:") = Int, NSString, NSString;
overload externalInstanceMethod(static NSSpellChecker, static #"checkGrammarOfString:startingAt:language:wrap:inSpellDocumentWithTag:details:") = NSRange, NSString, Int, NSString, Bool, Int, Pointer[NSArray];
overload externalInstanceMethod(static NSSpellChecker, static #"checkString:range:types:options:inSpellDocumentWithTag:orthography:wordCount:") = NSArray, NSString, NSRange, UInt64, NSDictionary, Int, Pointer[NSOrthography], Pointer[Int];
overload externalInstanceMethod(static NSSpellChecker, static #"requestCheckingOfString:range:types:options:inSpellDocumentWithTag:completionHandler:") = Int, NSString, NSRange, UInt64, NSDictionary, Int, UnknownType;
overload externalInstanceMethod(static NSSpellChecker, static #"menuForResult:string:options:atLocation:inView:") = NSMenu, NSTextCheckingResult, NSString, NSDictionary, NSPoint, NSView;
overload externalInstanceMethod(static NSSpellChecker, static #"userQuotesArrayForLanguage:") = NSArray, NSString;
overload externalInstanceMethod(static NSSpellChecker, static #"userReplacementsDictionary") = NSDictionary;
overload externalInstanceMethod(static NSSpellChecker, static #"updateSpellingPanelWithMisspelledWord:") = Void, NSString;
overload externalInstanceMethod(static NSSpellChecker, static #"updateSpellingPanelWithGrammarString:detail:") = Void, NSString, NSDictionary;
overload externalInstanceMethod(static NSSpellChecker, static #"spellingPanel") = NSPanel;
overload externalInstanceMethod(static NSSpellChecker, static #"accessoryView") = NSView;
overload externalInstanceMethod(static NSSpellChecker, static #"setAccessoryView:") = Void, NSView;
overload externalInstanceMethod(static NSSpellChecker, static #"substitutionsPanel") = NSPanel;
overload externalInstanceMethod(static NSSpellChecker, static #"substitutionsPanelAccessoryViewController") = NSViewController;
overload externalInstanceMethod(static NSSpellChecker, static #"setSubstitutionsPanelAccessoryViewController:") = Void, NSViewController;
overload externalInstanceMethod(static NSSpellChecker, static #"updatePanels") = Void;
overload externalInstanceMethod(static NSSpellChecker, static #"ignoreWord:inSpellDocumentWithTag:") = Void, NSString, Int;
overload externalInstanceMethod(static NSSpellChecker, static #"ignoredWordsInSpellDocumentWithTag:") = NSArray, Int;
overload externalInstanceMethod(static NSSpellChecker, static #"setIgnoredWords:inSpellDocumentWithTag:") = Void, NSArray, Int;
overload externalInstanceMethod(static NSSpellChecker, static #"guessesForWordRange:inString:language:inSpellDocumentWithTag:") = NSArray, NSRange, NSString, NSString, Int;
overload externalInstanceMethod(static NSSpellChecker, static #"completionsForPartialWordRange:inString:language:inSpellDocumentWithTag:") = NSArray, NSRange, NSString, NSString, Int;
overload externalInstanceMethod(static NSSpellChecker, static #"closeSpellDocumentWithTag:") = Void, Int;
overload externalInstanceMethod(static NSSpellChecker, static #"availableLanguages") = NSArray;
overload externalInstanceMethod(static NSSpellChecker, static #"userPreferredLanguages") = NSArray;
overload externalInstanceMethod(static NSSpellChecker, static #"automaticallyIdentifiesLanguages") = Bool;
overload externalInstanceMethod(static NSSpellChecker, static #"setAutomaticallyIdentifiesLanguages:") = Void, Bool;
overload externalInstanceMethod(static NSSpellChecker, static #"language") = NSString;
overload externalInstanceMethod(static NSSpellChecker, static #"setLanguage:") = Bool, NSString;
overload externalInstanceMethod(static NSSpellChecker, static #"setWordFieldStringValue:") = Void, NSString;
overload externalInstanceMethod(static NSSpellChecker, static #"learnWord:") = Void, NSString;
overload externalInstanceMethod(static NSSpellChecker, static #"hasLearnedWord:") = Bool, NSString;
overload externalInstanceMethod(static NSSpellChecker, static #"unlearnWord:") = Void, NSString;
overload externalInstanceMethod(static NSSpellChecker, static #"guessesForWord:") = NSArray, NSString;
overload externalInstanceMethod(static NSSpellChecker, static #"forgetWord:") = Void, NSString;

record NSSplitView = externalClass(NSView);
overload externalInstanceMethod(static NSSplitView, static #"setVertical:") = Void, Bool;
overload externalInstanceMethod(static NSSplitView, static #"isVertical") = Bool;
overload externalInstanceMethod(static NSSplitView, static #"setDividerStyle:") = Void, Int;
overload externalInstanceMethod(static NSSplitView, static #"dividerStyle") = Int;
overload externalInstanceMethod(static NSSplitView, static #"setAutosaveName:") = Void, NSString;
overload externalInstanceMethod(static NSSplitView, static #"autosaveName") = NSString;
overload externalInstanceMethod(static NSSplitView, static #"setDelegate:") = Void, Id;
overload externalInstanceMethod(static NSSplitView, static #"delegate") = Id;
overload externalInstanceMethod(static NSSplitView, static #"drawDividerInRect:") = Void, NSRect;
overload externalInstanceMethod(static NSSplitView, static #"dividerColor") = NSColor;
overload externalInstanceMethod(static NSSplitView, static #"dividerThickness") = Float;
overload externalInstanceMethod(static NSSplitView, static #"adjustSubviews") = Void;
overload externalInstanceMethod(static NSSplitView, static #"isSubviewCollapsed:") = Bool, NSView;
overload externalInstanceMethod(static NSSplitView, static #"minPossiblePositionOfDividerAtIndex:") = Float, Int;
overload externalInstanceMethod(static NSSplitView, static #"maxPossiblePositionOfDividerAtIndex:") = Float, Int;
overload externalInstanceMethod(static NSSplitView, static #"setPosition:ofDividerAtIndex:") = Void, Float, Int;
overload externalInstanceMethod(static NSSplitView, static #"setIsPaneSplitter:") = Void, Bool;
overload externalInstanceMethod(static NSSplitView, static #"isPaneSplitter") = Bool;

record NSStatusBar = externalClass(NSObject);
overload externalClassMethod(static NSStatusBar, static #"systemStatusBar") = NSStatusBar;
overload externalInstanceMethod(static NSStatusBar, static #"statusItemWithLength:") = NSStatusItem, Float;
overload externalInstanceMethod(static NSStatusBar, static #"removeStatusItem:") = Void, NSStatusItem;
overload externalInstanceMethod(static NSStatusBar, static #"isVertical") = Bool;
overload externalInstanceMethod(static NSStatusBar, static #"thickness") = Float;

record NSStatusItem = externalClass(NSObject);
overload externalInstanceMethod(static NSStatusItem, static #"statusBar") = NSStatusBar;
overload externalInstanceMethod(static NSStatusItem, static #"length") = Float;
overload externalInstanceMethod(static NSStatusItem, static #"setLength:") = Void, Float;
overload externalInstanceMethod(static NSStatusItem, static #"action") = SelectorHandle;
overload externalInstanceMethod(static NSStatusItem, static #"setAction:") = Void, SelectorHandle;
overload externalInstanceMethod(static NSStatusItem, static #"doubleAction") = SelectorHandle;
overload externalInstanceMethod(static NSStatusItem, static #"setDoubleAction:") = Void, SelectorHandle;
overload externalInstanceMethod(static NSStatusItem, static #"target") = Id;
overload externalInstanceMethod(static NSStatusItem, static #"setTarget:") = Void, Id;
overload externalInstanceMethod(static NSStatusItem, static #"title") = NSString;
overload externalInstanceMethod(static NSStatusItem, static #"setTitle:") = Void, NSString;
overload externalInstanceMethod(static NSStatusItem, static #"attributedTitle") = NSAttributedString;
overload externalInstanceMethod(static NSStatusItem, static #"setAttributedTitle:") = Void, NSAttributedString;
overload externalInstanceMethod(static NSStatusItem, static #"image") = NSImage;
overload externalInstanceMethod(static NSStatusItem, static #"setImage:") = Void, NSImage;
overload externalInstanceMethod(static NSStatusItem, static #"alternateImage") = NSImage;
overload externalInstanceMethod(static NSStatusItem, static #"setAlternateImage:") = Void, NSImage;
overload externalInstanceMethod(static NSStatusItem, static #"menu") = NSMenu;
overload externalInstanceMethod(static NSStatusItem, static #"setMenu:") = Void, NSMenu;
overload externalInstanceMethod(static NSStatusItem, static #"isEnabled") = Bool;
overload externalInstanceMethod(static NSStatusItem, static #"setEnabled:") = Void, Bool;
overload externalInstanceMethod(static NSStatusItem, static #"toolTip") = NSString;
overload externalInstanceMethod(static NSStatusItem, static #"setToolTip:") = Void, NSString;
overload externalInstanceMethod(static NSStatusItem, static #"setHighlightMode:") = Void, Bool;
overload externalInstanceMethod(static NSStatusItem, static #"highlightMode") = Bool;
overload externalInstanceMethod(static NSStatusItem, static #"sendActionOn:") = Int, Int;
overload externalInstanceMethod(static NSStatusItem, static #"popUpStatusItemMenu:") = Void, NSMenu;
overload externalInstanceMethod(static NSStatusItem, static #"drawStatusBarBackgroundInRect:withHighlight:") = Void, NSRect, Bool;
overload externalInstanceMethod(static NSStatusItem, static #"view") = NSView;
overload externalInstanceMethod(static NSStatusItem, static #"setView:") = Void, NSView;

record NSStepper = externalClass(NSControl);
overload externalInstanceMethod(static NSStepper, static #"minValue") = Double;
overload externalInstanceMethod(static NSStepper, static #"setMinValue:") = Void, Double;
overload externalInstanceMethod(static NSStepper, static #"maxValue") = Double;
overload externalInstanceMethod(static NSStepper, static #"setMaxValue:") = Void, Double;
overload externalInstanceMethod(static NSStepper, static #"increment") = Double;
overload externalInstanceMethod(static NSStepper, static #"setIncrement:") = Void, Double;
overload externalInstanceMethod(static NSStepper, static #"valueWraps") = Bool;
overload externalInstanceMethod(static NSStepper, static #"setValueWraps:") = Void, Bool;
overload externalInstanceMethod(static NSStepper, static #"autorepeat") = Bool;
overload externalInstanceMethod(static NSStepper, static #"setAutorepeat:") = Void, Bool;

record NSStepperCell = externalClass(NSActionCell);
overload externalInstanceMethod(static NSStepperCell, static #"minValue") = Double;
overload externalInstanceMethod(static NSStepperCell, static #"setMinValue:") = Void, Double;
overload externalInstanceMethod(static NSStepperCell, static #"maxValue") = Double;
overload externalInstanceMethod(static NSStepperCell, static #"setMaxValue:") = Void, Double;
overload externalInstanceMethod(static NSStepperCell, static #"increment") = Double;
overload externalInstanceMethod(static NSStepperCell, static #"setIncrement:") = Void, Double;
overload externalInstanceMethod(static NSStepperCell, static #"valueWraps") = Bool;
overload externalInstanceMethod(static NSStepperCell, static #"setValueWraps:") = Void, Bool;
overload externalInstanceMethod(static NSStepperCell, static #"autorepeat") = Bool;
overload externalInstanceMethod(static NSStepperCell, static #"setAutorepeat:") = Void, Bool;

overload externalInstanceMethod(static NSString, static #"sizeWithAttributes:") = NSSize, NSDictionary;
overload externalInstanceMethod(static NSString, static #"drawAtPoint:withAttributes:") = Void, NSPoint, NSDictionary;
overload externalInstanceMethod(static NSString, static #"drawInRect:withAttributes:") = Void, NSRect, NSDictionary;
overload externalInstanceMethod(static NSString, static #"drawWithRect:options:attributes:") = Void, NSRect, Int, NSDictionary;
overload externalInstanceMethod(static NSString, static #"boundingRectWithSize:options:attributes:") = NSRect, NSSize, Int, NSDictionary;

record NSTabView = externalClass(NSView);
overload externalInstanceMethod(static NSTabView, static #"selectTabViewItem:") = Void, NSTabViewItem;
overload externalInstanceMethod(static NSTabView, static #"selectTabViewItemAtIndex:") = Void, Int;
overload externalInstanceMethod(static NSTabView, static #"selectTabViewItemWithIdentifier:") = Void, Id;
overload externalInstanceMethod(static NSTabView, static #"takeSelectedTabViewItemFromSender:") = Void, Id;
overload externalInstanceMethod(static NSTabView, static #"selectFirstTabViewItem:") = Void, Id;
overload externalInstanceMethod(static NSTabView, static #"selectLastTabViewItem:") = Void, Id;
overload externalInstanceMethod(static NSTabView, static #"selectNextTabViewItem:") = Void, Id;
overload externalInstanceMethod(static NSTabView, static #"selectPreviousTabViewItem:") = Void, Id;
overload externalInstanceMethod(static NSTabView, static #"selectedTabViewItem") = NSTabViewItem;
overload externalInstanceMethod(static NSTabView, static #"font") = NSFont;
overload externalInstanceMethod(static NSTabView, static #"tabViewType") = UInt;
overload externalInstanceMethod(static NSTabView, static #"tabViewItems") = NSArray;
overload externalInstanceMethod(static NSTabView, static #"allowsTruncatedLabels") = Bool;
overload externalInstanceMethod(static NSTabView, static #"minimumSize") = NSSize;
overload externalInstanceMethod(static NSTabView, static #"drawsBackground") = Bool;
overload externalInstanceMethod(static NSTabView, static #"controlTint") = UInt;
overload externalInstanceMethod(static NSTabView, static #"controlSize") = UInt;
overload externalInstanceMethod(static NSTabView, static #"setFont:") = Void, NSFont;
overload externalInstanceMethod(static NSTabView, static #"setTabViewType:") = Void, UInt;
overload externalInstanceMethod(static NSTabView, static #"setAllowsTruncatedLabels:") = Void, Bool;
overload externalInstanceMethod(static NSTabView, static #"setDrawsBackground:") = Void, Bool;
overload externalInstanceMethod(static NSTabView, static #"setControlTint:") = Void, UInt;
overload externalInstanceMethod(static NSTabView, static #"setControlSize:") = Void, UInt;
overload externalInstanceMethod(static NSTabView, static #"addTabViewItem:") = Void, NSTabViewItem;
overload externalInstanceMethod(static NSTabView, static #"insertTabViewItem:atIndex:") = Void, NSTabViewItem, Int;
overload externalInstanceMethod(static NSTabView, static #"removeTabViewItem:") = Void, NSTabViewItem;
overload externalInstanceMethod(static NSTabView, static #"setDelegate:") = Void, Id;
overload externalInstanceMethod(static NSTabView, static #"delegate") = Id;
overload externalInstanceMethod(static NSTabView, static #"tabViewItemAtPoint:") = NSTabViewItem, NSPoint;
overload externalInstanceMethod(static NSTabView, static #"contentRect") = NSRect;
overload externalInstanceMethod(static NSTabView, static #"numberOfTabViewItems") = Int;
overload externalInstanceMethod(static NSTabView, static #"indexOfTabViewItem:") = Int, NSTabViewItem;
overload externalInstanceMethod(static NSTabView, static #"tabViewItemAtIndex:") = NSTabViewItem, Int;
overload externalInstanceMethod(static NSTabView, static #"indexOfTabViewItemWithIdentifier:") = Int, Id;

record NSTabViewItem = externalClass(NSObject);
overload externalInstanceMethod(static NSTabViewItem, static #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static NSTabViewItem, static #"initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(static NSTabViewItem, static #"initWithIdentifier:") = Id, Id;
overload externalInstanceMethod(static NSTabViewItem, static #"identifier") = Id;
overload externalInstanceMethod(static NSTabViewItem, static #"view") = Id;
overload externalInstanceMethod(static NSTabViewItem, static #"initialFirstResponder") = Id;
overload externalInstanceMethod(static NSTabViewItem, static #"label") = NSString;
overload externalInstanceMethod(static NSTabViewItem, static #"color") = NSColor;
overload externalInstanceMethod(static NSTabViewItem, static #"tabState") = UInt;
overload externalInstanceMethod(static NSTabViewItem, static #"tabView") = NSTabView;
overload externalInstanceMethod(static NSTabViewItem, static #"setIdentifier:") = Void, Id;
overload externalInstanceMethod(static NSTabViewItem, static #"setLabel:") = Void, NSString;
overload externalInstanceMethod(static NSTabViewItem, static #"setColor:") = Void, NSColor;
overload externalInstanceMethod(static NSTabViewItem, static #"setView:") = Void, NSView;
overload externalInstanceMethod(static NSTabViewItem, static #"setInitialFirstResponder:") = Void, NSView;
overload externalInstanceMethod(static NSTabViewItem, static #"toolTip") = NSString;
overload externalInstanceMethod(static NSTabViewItem, static #"setToolTip:") = Void, NSString;
overload externalInstanceMethod(static NSTabViewItem, static #"drawLabel:inRect:") = Void, Bool, NSRect;
overload externalInstanceMethod(static NSTabViewItem, static #"sizeOfLabel:") = NSSize, Bool;

record NSTableColumn = externalClass(NSObject);
overload externalInstanceMethod(static NSTableColumn, static #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static NSTableColumn, static #"initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(static NSTableColumn, static #"initWithIdentifier:") = Id, Id;
overload externalInstanceMethod(static NSTableColumn, static #"setIdentifier:") = Void, Id;
overload externalInstanceMethod(static NSTableColumn, static #"identifier") = Id;
overload externalInstanceMethod(static NSTableColumn, static #"setTableView:") = Void, NSTableView;
overload externalInstanceMethod(static NSTableColumn, static #"tableView") = NSTableView;
overload externalInstanceMethod(static NSTableColumn, static #"setWidth:") = Void, Float;
overload externalInstanceMethod(static NSTableColumn, static #"width") = Float;
overload externalInstanceMethod(static NSTableColumn, static #"setMinWidth:") = Void, Float;
overload externalInstanceMethod(static NSTableColumn, static #"minWidth") = Float;
overload externalInstanceMethod(static NSTableColumn, static #"setMaxWidth:") = Void, Float;
overload externalInstanceMethod(static NSTableColumn, static #"maxWidth") = Float;
overload externalInstanceMethod(static NSTableColumn, static #"setHeaderCell:") = Void, NSCell;
overload externalInstanceMethod(static NSTableColumn, static #"headerCell") = Id;
overload externalInstanceMethod(static NSTableColumn, static #"setDataCell:") = Void, NSCell;
overload externalInstanceMethod(static NSTableColumn, static #"dataCell") = Id;
overload externalInstanceMethod(static NSTableColumn, static #"dataCellForRow:") = Id, Int;
overload externalInstanceMethod(static NSTableColumn, static #"setEditable:") = Void, Bool;
overload externalInstanceMethod(static NSTableColumn, static #"isEditable") = Bool;
overload externalInstanceMethod(static NSTableColumn, static #"sizeToFit") = Void;
overload externalInstanceMethod(static NSTableColumn, static #"setSortDescriptorPrototype:") = Void, NSSortDescriptor;
overload externalInstanceMethod(static NSTableColumn, static #"sortDescriptorPrototype") = NSSortDescriptor;
overload externalInstanceMethod(static NSTableColumn, static #"setResizingMask:") = Void, UInt;
overload externalInstanceMethod(static NSTableColumn, static #"resizingMask") = UInt;
overload externalInstanceMethod(static NSTableColumn, static #"setHeaderToolTip:") = Void, NSString;
overload externalInstanceMethod(static NSTableColumn, static #"headerToolTip") = NSString;
overload externalInstanceMethod(static NSTableColumn, static #"isHidden") = Bool;
overload externalInstanceMethod(static NSTableColumn, static #"setHidden:") = Void, Bool;
overload externalInstanceMethod(static NSTableColumn, static #"setResizable:") = Void, Bool;
overload externalInstanceMethod(static NSTableColumn, static #"isResizable") = Bool;

record NSTableHeaderCell = externalClass(NSTextFieldCell);
overload externalInstanceMethod(static NSTableHeaderCell, static #"drawSortIndicatorWithFrame:inView:ascending:priority:") = Void, NSRect, NSView, Bool, Int;
overload externalInstanceMethod(static NSTableHeaderCell, static #"sortIndicatorRectForBounds:") = NSRect, NSRect;

record NSTableHeaderView = externalClass(NSView);
overload externalInstanceMethod(static NSTableHeaderView, static #"setTableView:") = Void, NSTableView;
overload externalInstanceMethod(static NSTableHeaderView, static #"tableView") = NSTableView;
overload externalInstanceMethod(static NSTableHeaderView, static #"draggedColumn") = Int;
overload externalInstanceMethod(static NSTableHeaderView, static #"draggedDistance") = Float;
overload externalInstanceMethod(static NSTableHeaderView, static #"resizedColumn") = Int;
overload externalInstanceMethod(static NSTableHeaderView, static #"headerRectOfColumn:") = NSRect, Int;
overload externalInstanceMethod(static NSTableHeaderView, static #"columnAtPoint:") = Int, NSPoint;

record NSTableView = externalClass(NSControl);
overload externalInstanceMethod(static NSTableView, static #"validateUserInterfaceItem:") = Bool, Id;
overload externalInstanceMethod(static NSTableView, static #"textView:clickedOnLink:atIndex:") = Bool, NSTextView, Id, UInt;
overload externalInstanceMethod(static NSTableView, static #"textView:clickedOnCell:inRect:atIndex:") = Void, NSTextView, Id, NSRect, UInt;
overload externalInstanceMethod(static NSTableView, static #"textView:doubleClickedOnCell:inRect:atIndex:") = Void, NSTextView, Id, NSRect, UInt;
overload externalInstanceMethod(static NSTableView, static #"textView:draggedCell:inRect:event:atIndex:") = Void, NSTextView, Id, NSRect, NSEvent, UInt;
overload externalInstanceMethod(static NSTableView, static #"textView:writablePasteboardTypesForCell:atIndex:") = NSArray, NSTextView, Id, UInt;
overload externalInstanceMethod(static NSTableView, static #"textView:writeCell:atIndex:toPasteboard:type:") = Bool, NSTextView, Id, UInt, NSPasteboard, NSString;
overload externalInstanceMethod(static NSTableView, static #"textView:willChangeSelectionFromCharacterRange:toCharacterRange:") = NSRange, NSTextView, NSRange, NSRange;
overload externalInstanceMethod(static NSTableView, static #"textView:willChangeSelectionFromCharacterRanges:toCharacterRanges:") = NSArray, NSTextView, NSArray, NSArray;
overload externalInstanceMethod(static NSTableView, static #"textView:shouldChangeTextInRanges:replacementStrings:") = Bool, NSTextView, NSArray, NSArray;
overload externalInstanceMethod(static NSTableView, static #"textView:shouldChangeTypingAttributes:toAttributes:") = NSDictionary, NSTextView, NSDictionary, NSDictionary;
overload externalInstanceMethod(static NSTableView, static #"textViewDidChangeSelection:") = Void, NSNotification;
overload externalInstanceMethod(static NSTableView, static #"textViewDidChangeTypingAttributes:") = Void, NSNotification;
overload externalInstanceMethod(static NSTableView, static #"textView:willDisplayToolTip:forCharacterAtIndex:") = NSString, NSTextView, NSString, UInt;
overload externalInstanceMethod(static NSTableView, static #"textView:completions:forPartialWordRange:indexOfSelectedItem:") = NSArray, NSTextView, NSArray, NSRange, Pointer[Int];
overload externalInstanceMethod(static NSTableView, static #"textView:shouldChangeTextInRange:replacementString:") = Bool, NSTextView, NSRange, NSString;
overload externalInstanceMethod(static NSTableView, static #"textView:doCommandBySelector:") = Bool, NSTextView, SelectorHandle;
overload externalInstanceMethod(static NSTableView, static #"textView:shouldSetSpellingState:range:") = Int, NSTextView, Int, NSRange;
overload externalInstanceMethod(static NSTableView, static #"textView:menu:forEvent:atIndex:") = NSMenu, NSTextView, NSMenu, NSEvent, UInt;
overload externalInstanceMethod(static NSTableView, static #"textView:willCheckTextInRange:options:types:") = NSDictionary, NSTextView, NSRange, NSDictionary, Pointer[UInt64];
overload externalInstanceMethod(static NSTableView, static #"textView:didCheckTextInRange:types:options:results:orthography:wordCount:") = NSArray, NSTextView, NSRange, UInt64, NSDictionary, NSArray, NSOrthography, Int;
overload externalInstanceMethod(static NSTableView, static #"textView:clickedOnLink:") = Bool, NSTextView, Id;
overload externalInstanceMethod(static NSTableView, static #"textView:clickedOnCell:inRect:") = Void, NSTextView, Id, NSRect;
overload externalInstanceMethod(static NSTableView, static #"textView:doubleClickedOnCell:inRect:") = Void, NSTextView, Id, NSRect;
overload externalInstanceMethod(static NSTableView, static #"textView:draggedCell:inRect:event:") = Void, NSTextView, Id, NSRect, NSEvent;
overload externalInstanceMethod(static NSTableView, static #"undoManagerForTextView:") = NSUndoManager, NSTextView;
overload externalInstanceMethod(static NSTableView, static #"setDataSource:") = Void, Id;
overload externalInstanceMethod(static NSTableView, static #"dataSource") = Id;
overload externalInstanceMethod(static NSTableView, static #"setDelegate:") = Void, Id;
overload externalInstanceMethod(static NSTableView, static #"delegate") = Id;
overload externalInstanceMethod(static NSTableView, static #"setHeaderView:") = Void, NSTableHeaderView;
overload externalInstanceMethod(static NSTableView, static #"headerView") = NSTableHeaderView;
overload externalInstanceMethod(static NSTableView, static #"setCornerView:") = Void, NSView;
overload externalInstanceMethod(static NSTableView, static #"cornerView") = NSView;
overload externalInstanceMethod(static NSTableView, static #"setAllowsColumnReordering:") = Void, Bool;
overload externalInstanceMethod(static NSTableView, static #"allowsColumnReordering") = Bool;
overload externalInstanceMethod(static NSTableView, static #"setAllowsColumnResizing:") = Void, Bool;
overload externalInstanceMethod(static NSTableView, static #"allowsColumnResizing") = Bool;
overload externalInstanceMethod(static NSTableView, static #"setColumnAutoresizingStyle:") = Void, UInt;
overload externalInstanceMethod(static NSTableView, static #"columnAutoresizingStyle") = UInt;
overload externalInstanceMethod(static NSTableView, static #"setGridStyleMask:") = Void, UInt;
overload externalInstanceMethod(static NSTableView, static #"gridStyleMask") = UInt;
overload externalInstanceMethod(static NSTableView, static #"setIntercellSpacing:") = Void, NSSize;
overload externalInstanceMethod(static NSTableView, static #"intercellSpacing") = NSSize;
overload externalInstanceMethod(static NSTableView, static #"setUsesAlternatingRowBackgroundColors:") = Void, Bool;
overload externalInstanceMethod(static NSTableView, static #"usesAlternatingRowBackgroundColors") = Bool;
overload externalInstanceMethod(static NSTableView, static #"setBackgroundColor:") = Void, NSColor;
overload externalInstanceMethod(static NSTableView, static #"backgroundColor") = NSColor;
overload externalInstanceMethod(static NSTableView, static #"setGridColor:") = Void, NSColor;
overload externalInstanceMethod(static NSTableView, static #"gridColor") = NSColor;
overload externalInstanceMethod(static NSTableView, static #"setRowHeight:") = Void, Float;
overload externalInstanceMethod(static NSTableView, static #"rowHeight") = Float;
overload externalInstanceMethod(static NSTableView, static #"noteHeightOfRowsWithIndexesChanged:") = Void, NSIndexSet;
overload externalInstanceMethod(static NSTableView, static #"tableColumns") = NSArray;
overload externalInstanceMethod(static NSTableView, static #"numberOfColumns") = Int;
overload externalInstanceMethod(static NSTableView, static #"numberOfRows") = Int;
overload externalInstanceMethod(static NSTableView, static #"addTableColumn:") = Void, NSTableColumn;
overload externalInstanceMethod(static NSTableView, static #"removeTableColumn:") = Void, NSTableColumn;
overload externalInstanceMethod(static NSTableView, static #"moveColumn:toColumn:") = Void, Int, Int;
overload externalInstanceMethod(static NSTableView, static #"columnWithIdentifier:") = Int, Id;
overload externalInstanceMethod(static NSTableView, static #"tableColumnWithIdentifier:") = NSTableColumn, Id;
overload externalInstanceMethod(static NSTableView, static #"tile") = Void;
overload externalInstanceMethod(static NSTableView, static #"sizeToFit") = Void;
overload externalInstanceMethod(static NSTableView, static #"sizeLastColumnToFit") = Void;
overload externalInstanceMethod(static NSTableView, static #"scrollRowToVisible:") = Void, Int;
overload externalInstanceMethod(static NSTableView, static #"scrollColumnToVisible:") = Void, Int;
overload externalInstanceMethod(static NSTableView, static #"reloadData") = Void;
overload externalInstanceMethod(static NSTableView, static #"noteNumberOfRowsChanged") = Void;
overload externalInstanceMethod(static NSTableView, static #"reloadDataForRowIndexes:columnIndexes:") = Void, NSIndexSet, NSIndexSet;
overload externalInstanceMethod(static NSTableView, static #"editedColumn") = Int;
overload externalInstanceMethod(static NSTableView, static #"editedRow") = Int;
overload externalInstanceMethod(static NSTableView, static #"clickedColumn") = Int;
overload externalInstanceMethod(static NSTableView, static #"clickedRow") = Int;
overload externalInstanceMethod(static NSTableView, static #"setDoubleAction:") = Void, SelectorHandle;
overload externalInstanceMethod(static NSTableView, static #"doubleAction") = SelectorHandle;
overload externalInstanceMethod(static NSTableView, static #"setSortDescriptors:") = Void, NSArray;
overload externalInstanceMethod(static NSTableView, static #"sortDescriptors") = NSArray;
overload externalInstanceMethod(static NSTableView, static #"setIndicatorImage:inTableColumn:") = Void, NSImage, NSTableColumn;
overload externalInstanceMethod(static NSTableView, static #"indicatorImageInTableColumn:") = NSImage, NSTableColumn;
overload externalInstanceMethod(static NSTableView, static #"setHighlightedTableColumn:") = Void, NSTableColumn;
overload externalInstanceMethod(static NSTableView, static #"highlightedTableColumn") = NSTableColumn;
overload externalInstanceMethod(static NSTableView, static #"setVerticalMotionCanBeginDrag:") = Void, Bool;
overload externalInstanceMethod(static NSTableView, static #"verticalMotionCanBeginDrag") = Bool;
overload externalInstanceMethod(static NSTableView, static #"canDragRowsWithIndexes:atPoint:") = Bool, NSIndexSet, NSPoint;
overload externalInstanceMethod(static NSTableView, static #"dragImageForRowsWithIndexes:tableColumns:event:offset:") = NSImage, NSIndexSet, NSArray, NSEvent, NSPointPointer;
overload externalInstanceMethod(static NSTableView, static #"setDraggingSourceOperationMask:forLocal:") = Void, UInt, Bool;
overload externalInstanceMethod(static NSTableView, static #"setDropRow:dropOperation:") = Void, Int, UInt;
overload externalInstanceMethod(static NSTableView, static #"setAllowsMultipleSelection:") = Void, Bool;
overload externalInstanceMethod(static NSTableView, static #"allowsMultipleSelection") = Bool;
overload externalInstanceMethod(static NSTableView, static #"setAllowsEmptySelection:") = Void, Bool;
overload externalInstanceMethod(static NSTableView, static #"allowsEmptySelection") = Bool;
overload externalInstanceMethod(static NSTableView, static #"setAllowsColumnSelection:") = Void, Bool;
overload externalInstanceMethod(static NSTableView, static #"allowsColumnSelection") = Bool;
overload externalInstanceMethod(static NSTableView, static #"selectAll:") = Void, Id;
overload externalInstanceMethod(static NSTableView, static #"deselectAll:") = Void, Id;
overload externalInstanceMethod(static NSTableView, static #"selectColumnIndexes:byExtendingSelection:") = Void, NSIndexSet, Bool;
overload externalInstanceMethod(static NSTableView, static #"selectRowIndexes:byExtendingSelection:") = Void, NSIndexSet, Bool;
overload externalInstanceMethod(static NSTableView, static #"selectedColumnIndexes") = NSIndexSet;
overload externalInstanceMethod(static NSTableView, static #"selectedRowIndexes") = NSIndexSet;
overload externalInstanceMethod(static NSTableView, static #"deselectColumn:") = Void, Int;
overload externalInstanceMethod(static NSTableView, static #"deselectRow:") = Void, Int;
overload externalInstanceMethod(static NSTableView, static #"selectedColumn") = Int;
overload externalInstanceMethod(static NSTableView, static #"selectedRow") = Int;
overload externalInstanceMethod(static NSTableView, static #"isColumnSelected:") = Bool, Int;
overload externalInstanceMethod(static NSTableView, static #"isRowSelected:") = Bool, Int;
overload externalInstanceMethod(static NSTableView, static #"numberOfSelectedColumns") = Int;
overload externalInstanceMethod(static NSTableView, static #"numberOfSelectedRows") = Int;
overload externalInstanceMethod(static NSTableView, static #"allowsTypeSelect") = Bool;
overload externalInstanceMethod(static NSTableView, static #"setAllowsTypeSelect:") = Void, Bool;
overload externalInstanceMethod(static NSTableView, static #"selectionHighlightStyle") = Int;
overload externalInstanceMethod(static NSTableView, static #"setSelectionHighlightStyle:") = Void, Int;
overload externalInstanceMethod(static NSTableView, static #"setDraggingDestinationFeedbackStyle:") = Void, Int;
overload externalInstanceMethod(static NSTableView, static #"draggingDestinationFeedbackStyle") = Int;
overload externalInstanceMethod(static NSTableView, static #"rectOfColumn:") = NSRect, Int;
overload externalInstanceMethod(static NSTableView, static #"rectOfRow:") = NSRect, Int;
overload externalInstanceMethod(static NSTableView, static #"columnIndexesInRect:") = NSIndexSet, NSRect;
overload externalInstanceMethod(static NSTableView, static #"rowsInRect:") = NSRange, NSRect;
overload externalInstanceMethod(static NSTableView, static #"columnAtPoint:") = Int, NSPoint;
overload externalInstanceMethod(static NSTableView, static #"rowAtPoint:") = Int, NSPoint;
overload externalInstanceMethod(static NSTableView, static #"frameOfCellAtColumn:row:") = NSRect, Int, Int;
overload externalInstanceMethod(static NSTableView, static #"preparedCellAtColumn:row:") = NSCell, Int, Int;
overload externalInstanceMethod(static NSTableView, static #"textShouldBeginEditing:") = Bool, NSText;
overload externalInstanceMethod(static NSTableView, static #"textShouldEndEditing:") = Bool, NSText;
overload externalInstanceMethod(static NSTableView, static #"textDidBeginEditing:") = Void, NSNotification;
overload externalInstanceMethod(static NSTableView, static #"textDidEndEditing:") = Void, NSNotification;
overload externalInstanceMethod(static NSTableView, static #"textDidChange:") = Void, NSNotification;
overload externalInstanceMethod(static NSTableView, static #"setAutosaveName:") = Void, NSString;
overload externalInstanceMethod(static NSTableView, static #"autosaveName") = NSString;
overload externalInstanceMethod(static NSTableView, static #"setAutosaveTableColumns:") = Void, Bool;
overload externalInstanceMethod(static NSTableView, static #"autosaveTableColumns") = Bool;
overload externalInstanceMethod(static NSTableView, static #"shouldFocusCell:atColumn:row:") = Bool, NSCell, Int, Int;
overload externalInstanceMethod(static NSTableView, static #"focusedColumn") = Int;
overload externalInstanceMethod(static NSTableView, static #"setFocusedColumn:") = Void, Int;
overload externalInstanceMethod(static NSTableView, static #"performClickOnCellAtColumn:row:") = Void, Int, Int;
overload externalInstanceMethod(static NSTableView, static #"editColumn:row:withEvent:select:") = Void, Int, Int, NSEvent, Bool;
overload externalInstanceMethod(static NSTableView, static #"drawRow:clipRect:") = Void, Int, NSRect;
overload externalInstanceMethod(static NSTableView, static #"highlightSelectionInClipRect:") = Void, NSRect;
overload externalInstanceMethod(static NSTableView, static #"drawGridInClipRect:") = Void, NSRect;
overload externalInstanceMethod(static NSTableView, static #"drawBackgroundInClipRect:") = Void, NSRect;
overload externalInstanceMethod(static NSTableView, static #"setDrawsGrid:") = Void, Bool;
overload externalInstanceMethod(static NSTableView, static #"drawsGrid") = Bool;
overload externalInstanceMethod(static NSTableView, static #"selectColumn:byExtendingSelection:") = Void, Int, Bool;
overload externalInstanceMethod(static NSTableView, static #"selectRow:byExtendingSelection:") = Void, Int, Bool;
overload externalInstanceMethod(static NSTableView, static #"selectedColumnEnumerator") = NSEnumerator;
overload externalInstanceMethod(static NSTableView, static #"selectedRowEnumerator") = NSEnumerator;
overload externalInstanceMethod(static NSTableView, static #"dragImageForRows:event:dragImageOffset:") = NSImage, NSArray, NSEvent, NSPointPointer;
overload externalInstanceMethod(static NSTableView, static #"setAutoresizesAllColumnsToFit:") = Void, Bool;
overload externalInstanceMethod(static NSTableView, static #"autoresizesAllColumnsToFit") = Bool;
overload externalInstanceMethod(static NSTableView, static #"columnsInRect:") = NSRange, NSRect;

record NSText = externalClass(NSView);
overload externalInstanceMethod(static NSText, static #"changeSpelling:") = Void, Id;
overload externalInstanceMethod(static NSText, static #"ignoreSpelling:") = Void, Id;
overload externalInstanceMethod(static NSText, static #"string") = NSString;
overload externalInstanceMethod(static NSText, static #"setString:") = Void, NSString;
overload externalInstanceMethod(static NSText, static #"replaceCharactersInRange:withString:") = Void, NSRange, NSString;
overload externalInstanceMethod(static NSText, static #"replaceCharactersInRange:withRTF:") = Void, NSRange, NSData;
overload externalInstanceMethod(static NSText, static #"replaceCharactersInRange:withRTFD:") = Void, NSRange, NSData;
overload externalInstanceMethod(static NSText, static #"RTFFromRange:") = NSData, NSRange;
overload externalInstanceMethod(static NSText, static #"RTFDFromRange:") = NSData, NSRange;
overload externalInstanceMethod(static NSText, static #"writeRTFDToFile:atomically:") = Bool, NSString, Bool;
overload externalInstanceMethod(static NSText, static #"readRTFDFromFile:") = Bool, NSString;
overload externalInstanceMethod(static NSText, static #"delegate") = Id;
overload externalInstanceMethod(static NSText, static #"setDelegate:") = Void, Id;
overload externalInstanceMethod(static NSText, static #"isEditable") = Bool;
overload externalInstanceMethod(static NSText, static #"setEditable:") = Void, Bool;
overload externalInstanceMethod(static NSText, static #"isSelectable") = Bool;
overload externalInstanceMethod(static NSText, static #"setSelectable:") = Void, Bool;
overload externalInstanceMethod(static NSText, static #"isRichText") = Bool;
overload externalInstanceMethod(static NSText, static #"setRichText:") = Void, Bool;
overload externalInstanceMethod(static NSText, static #"importsGraphics") = Bool;
overload externalInstanceMethod(static NSText, static #"setImportsGraphics:") = Void, Bool;
overload externalInstanceMethod(static NSText, static #"isFieldEditor") = Bool;
overload externalInstanceMethod(static NSText, static #"setFieldEditor:") = Void, Bool;
overload externalInstanceMethod(static NSText, static #"usesFontPanel") = Bool;
overload externalInstanceMethod(static NSText, static #"setUsesFontPanel:") = Void, Bool;
overload externalInstanceMethod(static NSText, static #"drawsBackground") = Bool;
overload externalInstanceMethod(static NSText, static #"setDrawsBackground:") = Void, Bool;
overload externalInstanceMethod(static NSText, static #"backgroundColor") = NSColor;
overload externalInstanceMethod(static NSText, static #"setBackgroundColor:") = Void, NSColor;
overload externalInstanceMethod(static NSText, static #"isRulerVisible") = Bool;
overload externalInstanceMethod(static NSText, static #"selectedRange") = NSRange;
overload externalInstanceMethod(static NSText, static #"setSelectedRange:") = Void, NSRange;
overload externalInstanceMethod(static NSText, static #"scrollRangeToVisible:") = Void, NSRange;
overload externalInstanceMethod(static NSText, static #"setFont:") = Void, NSFont;
overload externalInstanceMethod(static NSText, static #"font") = NSFont;
overload externalInstanceMethod(static NSText, static #"setTextColor:") = Void, NSColor;
overload externalInstanceMethod(static NSText, static #"textColor") = NSColor;
overload externalInstanceMethod(static NSText, static #"alignment") = UInt;
overload externalInstanceMethod(static NSText, static #"setAlignment:") = Void, UInt;
overload externalInstanceMethod(static NSText, static #"baseWritingDirection") = Int;
overload externalInstanceMethod(static NSText, static #"setBaseWritingDirection:") = Void, Int;
overload externalInstanceMethod(static NSText, static #"setTextColor:range:") = Void, NSColor, NSRange;
overload externalInstanceMethod(static NSText, static #"setFont:range:") = Void, NSFont, NSRange;
overload externalInstanceMethod(static NSText, static #"maxSize") = NSSize;
overload externalInstanceMethod(static NSText, static #"setMaxSize:") = Void, NSSize;
overload externalInstanceMethod(static NSText, static #"minSize") = NSSize;
overload externalInstanceMethod(static NSText, static #"setMinSize:") = Void, NSSize;
overload externalInstanceMethod(static NSText, static #"isHorizontallyResizable") = Bool;
overload externalInstanceMethod(static NSText, static #"setHorizontallyResizable:") = Void, Bool;
overload externalInstanceMethod(static NSText, static #"isVerticallyResizable") = Bool;
overload externalInstanceMethod(static NSText, static #"setVerticallyResizable:") = Void, Bool;
overload externalInstanceMethod(static NSText, static #"sizeToFit") = Void;
overload externalInstanceMethod(static NSText, static #"copy:") = Void, Id;
overload externalInstanceMethod(static NSText, static #"copyFont:") = Void, Id;
overload externalInstanceMethod(static NSText, static #"copyRuler:") = Void, Id;
overload externalInstanceMethod(static NSText, static #"cut:") = Void, Id;
overload externalInstanceMethod(static NSText, static #"delete:") = Void, Id;
overload externalInstanceMethod(static NSText, static #"paste:") = Void, Id;
overload externalInstanceMethod(static NSText, static #"pasteFont:") = Void, Id;
overload externalInstanceMethod(static NSText, static #"pasteRuler:") = Void, Id;
overload externalInstanceMethod(static NSText, static #"selectAll:") = Void, Id;
overload externalInstanceMethod(static NSText, static #"changeFont:") = Void, Id;
overload externalInstanceMethod(static NSText, static #"alignLeft:") = Void, Id;
overload externalInstanceMethod(static NSText, static #"alignRight:") = Void, Id;
overload externalInstanceMethod(static NSText, static #"alignCenter:") = Void, Id;
overload externalInstanceMethod(static NSText, static #"subscript:") = Void, Id;
overload externalInstanceMethod(static NSText, static #"superscript:") = Void, Id;
overload externalInstanceMethod(static NSText, static #"underline:") = Void, Id;
overload externalInstanceMethod(static NSText, static #"unscript:") = Void, Id;
overload externalInstanceMethod(static NSText, static #"showGuessPanel:") = Void, Id;
overload externalInstanceMethod(static NSText, static #"checkSpelling:") = Void, Id;
overload externalInstanceMethod(static NSText, static #"toggleRuler:") = Void, Id;

record NSTextAttachment = externalClass(NSObject);
overload externalInstanceMethod(static NSTextAttachment, static #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static NSTextAttachment, static #"initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(static NSTextAttachment, static #"initWithFileWrapper:") = Id, NSFileWrapper;
overload externalInstanceMethod(static NSTextAttachment, static #"setFileWrapper:") = Void, NSFileWrapper;
overload externalInstanceMethod(static NSTextAttachment, static #"fileWrapper") = NSFileWrapper;
overload externalInstanceMethod(static NSTextAttachment, static #"attachmentCell") = Id;
overload externalInstanceMethod(static NSTextAttachment, static #"setAttachmentCell:") = Void, Id;

record NSTextAttachmentCell = externalClass(NSCell);
overload externalInstanceMethod(static NSTextAttachmentCell, static #"drawWithFrame:inView:") = Void, NSRect, NSView;
overload externalInstanceMethod(static NSTextAttachmentCell, static #"wantsToTrackMouse") = Bool;
overload externalInstanceMethod(static NSTextAttachmentCell, static #"highlight:withFrame:inView:") = Void, Bool, NSRect, NSView;
overload externalInstanceMethod(static NSTextAttachmentCell, static #"trackMouse:inRect:ofView:untilMouseUp:") = Bool, NSEvent, NSRect, NSView, Bool;
overload externalInstanceMethod(static NSTextAttachmentCell, static #"cellSize") = NSSize;
overload externalInstanceMethod(static NSTextAttachmentCell, static #"cellBaselineOffset") = NSPoint;
overload externalInstanceMethod(static NSTextAttachmentCell, static #"setAttachment:") = Void, NSTextAttachment;
overload externalInstanceMethod(static NSTextAttachmentCell, static #"attachment") = NSTextAttachment;
overload externalInstanceMethod(static NSTextAttachmentCell, static #"drawWithFrame:inView:characterIndex:") = Void, NSRect, NSView, UInt;
overload externalInstanceMethod(static NSTextAttachmentCell, static #"drawWithFrame:inView:characterIndex:layoutManager:") = Void, NSRect, NSView, UInt, NSLayoutManager;
overload externalInstanceMethod(static NSTextAttachmentCell, static #"wantsToTrackMouseForEvent:inRect:ofView:atCharacterIndex:") = Bool, NSEvent, NSRect, NSView, UInt;
overload externalInstanceMethod(static NSTextAttachmentCell, static #"trackMouse:inRect:ofView:atCharacterIndex:untilMouseUp:") = Bool, NSEvent, NSRect, NSView, UInt, Bool;
overload externalInstanceMethod(static NSTextAttachmentCell, static #"cellFrameForTextContainer:proposedLineFragment:glyphPosition:characterIndex:") = NSRect, NSTextContainer, NSRect, NSPoint, UInt;

record NSTextBlock = externalClass(NSObject);
overload externalInstanceMethod(static NSTextBlock, static #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static NSTextBlock, static #"initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(static NSTextBlock, static #"copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(static NSTextBlock, static #"init") = Id;
overload externalInstanceMethod(static NSTextBlock, static #"setValue:type:forDimension:") = Void, Float, UInt, UInt;
overload externalInstanceMethod(static NSTextBlock, static #"valueForDimension:") = Float, UInt;
overload externalInstanceMethod(static NSTextBlock, static #"valueTypeForDimension:") = UInt, UInt;
overload externalInstanceMethod(static NSTextBlock, static #"setContentWidth:type:") = Void, Float, UInt;
overload externalInstanceMethod(static NSTextBlock, static #"contentWidth") = Float;
overload externalInstanceMethod(static NSTextBlock, static #"contentWidthValueType") = UInt;
overload externalInstanceMethod(static NSTextBlock, static #"setWidth:type:forLayer:edge:") = Void, Float, UInt, Int, NSRectEdge;
overload externalInstanceMethod(static NSTextBlock, static #"setWidth:type:forLayer:") = Void, Float, UInt, Int;
overload externalInstanceMethod(static NSTextBlock, static #"widthForLayer:edge:") = Float, Int, NSRectEdge;
overload externalInstanceMethod(static NSTextBlock, static #"widthValueTypeForLayer:edge:") = UInt, Int, NSRectEdge;
overload externalInstanceMethod(static NSTextBlock, static #"setVerticalAlignment:") = Void, UInt;
overload externalInstanceMethod(static NSTextBlock, static #"verticalAlignment") = UInt;
overload externalInstanceMethod(static NSTextBlock, static #"setBackgroundColor:") = Void, NSColor;
overload externalInstanceMethod(static NSTextBlock, static #"backgroundColor") = NSColor;
overload externalInstanceMethod(static NSTextBlock, static #"setBorderColor:forEdge:") = Void, NSColor, NSRectEdge;
overload externalInstanceMethod(static NSTextBlock, static #"setBorderColor:") = Void, NSColor;
overload externalInstanceMethod(static NSTextBlock, static #"borderColorForEdge:") = NSColor, NSRectEdge;
overload externalInstanceMethod(static NSTextBlock, static #"rectForLayoutAtPoint:inRect:textContainer:characterRange:") = NSRect, NSPoint, NSRect, NSTextContainer, NSRange;
overload externalInstanceMethod(static NSTextBlock, static #"boundsRectForContentRect:inRect:textContainer:characterRange:") = NSRect, NSRect, NSRect, NSTextContainer, NSRange;
overload externalInstanceMethod(static NSTextBlock, static #"drawBackgroundWithFrame:inView:characterRange:layoutManager:") = Void, NSRect, NSView, NSRange, NSLayoutManager;

record NSTextContainer = externalClass(NSObject);
overload externalInstanceMethod(static NSTextContainer, static #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static NSTextContainer, static #"initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(static NSTextContainer, static #"initWithContainerSize:") = Id, NSSize;
overload externalInstanceMethod(static NSTextContainer, static #"layoutManager") = NSLayoutManager;
overload externalInstanceMethod(static NSTextContainer, static #"setLayoutManager:") = Void, NSLayoutManager;
overload externalInstanceMethod(static NSTextContainer, static #"replaceLayoutManager:") = Void, NSLayoutManager;
overload externalInstanceMethod(static NSTextContainer, static #"textView") = NSTextView;
overload externalInstanceMethod(static NSTextContainer, static #"setTextView:") = Void, NSTextView;
overload externalInstanceMethod(static NSTextContainer, static #"setWidthTracksTextView:") = Void, Bool;
overload externalInstanceMethod(static NSTextContainer, static #"widthTracksTextView") = Bool;
overload externalInstanceMethod(static NSTextContainer, static #"setHeightTracksTextView:") = Void, Bool;
overload externalInstanceMethod(static NSTextContainer, static #"heightTracksTextView") = Bool;
overload externalInstanceMethod(static NSTextContainer, static #"setContainerSize:") = Void, NSSize;
overload externalInstanceMethod(static NSTextContainer, static #"containerSize") = NSSize;
overload externalInstanceMethod(static NSTextContainer, static #"setLineFragmentPadding:") = Void, Float;
overload externalInstanceMethod(static NSTextContainer, static #"lineFragmentPadding") = Float;
overload externalInstanceMethod(static NSTextContainer, static #"lineFragmentRectForProposedRect:sweepDirection:movementDirection:remainingRect:") = NSRect, NSRect, UInt, UInt, NSRectPointer;
overload externalInstanceMethod(static NSTextContainer, static #"isSimpleRectangularTextContainer") = Bool;
overload externalInstanceMethod(static NSTextContainer, static #"containsPoint:") = Bool, NSPoint;

record NSTextField = externalClass(NSControl);
overload externalInstanceMethod(static NSTextField, static #"validateUserInterfaceItem:") = Bool, Id;
overload externalInstanceMethod(static NSTextField, static #"setBackgroundColor:") = Void, NSColor;
overload externalInstanceMethod(static NSTextField, static #"backgroundColor") = NSColor;
overload externalInstanceMethod(static NSTextField, static #"setDrawsBackground:") = Void, Bool;
overload externalInstanceMethod(static NSTextField, static #"drawsBackground") = Bool;
overload externalInstanceMethod(static NSTextField, static #"setTextColor:") = Void, NSColor;
overload externalInstanceMethod(static NSTextField, static #"textColor") = NSColor;
overload externalInstanceMethod(static NSTextField, static #"isBordered") = Bool;
overload externalInstanceMethod(static NSTextField, static #"setBordered:") = Void, Bool;
overload externalInstanceMethod(static NSTextField, static #"isBezeled") = Bool;
overload externalInstanceMethod(static NSTextField, static #"setBezeled:") = Void, Bool;
overload externalInstanceMethod(static NSTextField, static #"isEditable") = Bool;
overload externalInstanceMethod(static NSTextField, static #"setEditable:") = Void, Bool;
overload externalInstanceMethod(static NSTextField, static #"isSelectable") = Bool;
overload externalInstanceMethod(static NSTextField, static #"setSelectable:") = Void, Bool;
overload externalInstanceMethod(static NSTextField, static #"selectText:") = Void, Id;
overload externalInstanceMethod(static NSTextField, static #"delegate") = Id;
overload externalInstanceMethod(static NSTextField, static #"setDelegate:") = Void, Id;
overload externalInstanceMethod(static NSTextField, static #"textShouldBeginEditing:") = Bool, NSText;
overload externalInstanceMethod(static NSTextField, static #"textShouldEndEditing:") = Bool, NSText;
overload externalInstanceMethod(static NSTextField, static #"textDidBeginEditing:") = Void, NSNotification;
overload externalInstanceMethod(static NSTextField, static #"textDidEndEditing:") = Void, NSNotification;
overload externalInstanceMethod(static NSTextField, static #"textDidChange:") = Void, NSNotification;
overload externalInstanceMethod(static NSTextField, static #"acceptsFirstResponder") = Bool;
overload externalInstanceMethod(static NSTextField, static #"setBezelStyle:") = Void, UInt;
overload externalInstanceMethod(static NSTextField, static #"bezelStyle") = UInt;
overload externalInstanceMethod(static NSTextField, static #"setTitleWithMnemonic:") = Void, NSString;
overload externalInstanceMethod(static NSTextField, static #"allowsEditingTextAttributes") = Bool;
overload externalInstanceMethod(static NSTextField, static #"setAllowsEditingTextAttributes:") = Void, Bool;
overload externalInstanceMethod(static NSTextField, static #"importsGraphics") = Bool;
overload externalInstanceMethod(static NSTextField, static #"setImportsGraphics:") = Void, Bool;

record NSTextFieldCell = externalClass(NSActionCell);
overload externalInstanceMethod(static NSTextFieldCell, static #"setBackgroundColor:") = Void, NSColor;
overload externalInstanceMethod(static NSTextFieldCell, static #"backgroundColor") = NSColor;
overload externalInstanceMethod(static NSTextFieldCell, static #"setDrawsBackground:") = Void, Bool;
overload externalInstanceMethod(static NSTextFieldCell, static #"drawsBackground") = Bool;
overload externalInstanceMethod(static NSTextFieldCell, static #"setTextColor:") = Void, NSColor;
overload externalInstanceMethod(static NSTextFieldCell, static #"textColor") = NSColor;
overload externalInstanceMethod(static NSTextFieldCell, static #"setUpFieldEditorAttributes:") = NSText, NSText;
overload externalInstanceMethod(static NSTextFieldCell, static #"setBezelStyle:") = Void, UInt;
overload externalInstanceMethod(static NSTextFieldCell, static #"bezelStyle") = UInt;
overload externalInstanceMethod(static NSTextFieldCell, static #"setPlaceholderString:") = Void, NSString;
overload externalInstanceMethod(static NSTextFieldCell, static #"placeholderString") = NSString;
overload externalInstanceMethod(static NSTextFieldCell, static #"setPlaceholderAttributedString:") = Void, NSAttributedString;
overload externalInstanceMethod(static NSTextFieldCell, static #"placeholderAttributedString") = NSAttributedString;
overload externalInstanceMethod(static NSTextFieldCell, static #"setWantsNotificationForMarkedText:") = Void, Bool;
overload externalInstanceMethod(static NSTextFieldCell, static #"allowedInputSourceLocales") = NSArray;
overload externalInstanceMethod(static NSTextFieldCell, static #"setAllowedInputSourceLocales:") = Void, NSArray;

record NSTextInputContext = externalClass(NSObject);
overload externalClassMethod(static NSTextInputContext, static #"currentInputContext") = NSTextInputContext;
overload externalInstanceMethod(static NSTextInputContext, static #"initWithClient:") = Id, Id;
overload externalInstanceMethod(static NSTextInputContext, static #"activate") = Void;
overload externalInstanceMethod(static NSTextInputContext, static #"deactivate") = Void;
overload externalInstanceMethod(static NSTextInputContext, static #"handleEvent:") = Bool, NSEvent;
overload externalInstanceMethod(static NSTextInputContext, static #"discardMarkedText") = Void;
overload externalInstanceMethod(static NSTextInputContext, static #"invalidateCharacterCoordinates") = Void;
overload externalClassMethod(static NSTextInputContext, static #"localizedNameForInputSource:") = NSString, NSString;
overload externalInstanceMethod(static NSTextInputContext, static #"client") = Id;
overload externalInstanceMethod(static NSTextInputContext, static #"acceptsGlyphInfo") = Bool;
overload externalInstanceMethod(static NSTextInputContext, static #"setAcceptsGlyphInfo:") = Void, Bool;
overload externalInstanceMethod(static NSTextInputContext, static #"allowedInputSourceLocales") = NSArray;
overload externalInstanceMethod(static NSTextInputContext, static #"setAllowedInputSourceLocales:") = Void, NSArray;
overload externalInstanceMethod(static NSTextInputContext, static #"keyboardInputSources") = NSArray;
overload externalInstanceMethod(static NSTextInputContext, static #"selectedKeyboardInputSource") = NSString;
overload externalInstanceMethod(static NSTextInputContext, static #"setSelectedKeyboardInputSource:") = Void, NSString;

record NSTextList = externalClass(NSObject);
overload externalInstanceMethod(static NSTextList, static #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static NSTextList, static #"initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(static NSTextList, static #"copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(static NSTextList, static #"initWithMarkerFormat:options:") = Id, NSString, UInt;
overload externalInstanceMethod(static NSTextList, static #"markerFormat") = NSString;
overload externalInstanceMethod(static NSTextList, static #"listOptions") = UInt;
overload externalInstanceMethod(static NSTextList, static #"markerForItemNumber:") = NSString, Int;
overload externalInstanceMethod(static NSTextList, static #"setStartingItemNumber:") = Void, Int;
overload externalInstanceMethod(static NSTextList, static #"startingItemNumber") = Int;

record NSTextStorage = externalClass(NSMutableAttributedString);
overload externalInstanceMethod(static NSTextStorage, static #"addLayoutManager:") = Void, NSLayoutManager;
overload externalInstanceMethod(static NSTextStorage, static #"removeLayoutManager:") = Void, NSLayoutManager;
overload externalInstanceMethod(static NSTextStorage, static #"layoutManagers") = NSArray;
overload externalInstanceMethod(static NSTextStorage, static #"edited:range:changeInLength:") = Void, UInt, NSRange, Int;
overload externalInstanceMethod(static NSTextStorage, static #"processEditing") = Void;
overload externalInstanceMethod(static NSTextStorage, static #"invalidateAttributesInRange:") = Void, NSRange;
overload externalInstanceMethod(static NSTextStorage, static #"ensureAttributesAreFixedInRange:") = Void, NSRange;
overload externalInstanceMethod(static NSTextStorage, static #"fixesAttributesLazily") = Bool;
overload externalInstanceMethod(static NSTextStorage, static #"editedMask") = UInt;
overload externalInstanceMethod(static NSTextStorage, static #"editedRange") = NSRange;
overload externalInstanceMethod(static NSTextStorage, static #"changeInLength") = Int;
overload externalInstanceMethod(static NSTextStorage, static #"setDelegate:") = Void, Id;
overload externalInstanceMethod(static NSTextStorage, static #"delegate") = Id;
overload externalInstanceMethod(static NSTextStorage, static #"attributeRuns") = NSArray;
overload externalInstanceMethod(static NSTextStorage, static #"setAttributeRuns:") = Void, NSArray;
overload externalInstanceMethod(static NSTextStorage, static #"paragraphs") = NSArray;
overload externalInstanceMethod(static NSTextStorage, static #"setParagraphs:") = Void, NSArray;
overload externalInstanceMethod(static NSTextStorage, static #"words") = NSArray;
overload externalInstanceMethod(static NSTextStorage, static #"setWords:") = Void, NSArray;
overload externalInstanceMethod(static NSTextStorage, static #"characters") = NSArray;
overload externalInstanceMethod(static NSTextStorage, static #"setCharacters:") = Void, NSArray;
overload externalInstanceMethod(static NSTextStorage, static #"font") = NSFont;
overload externalInstanceMethod(static NSTextStorage, static #"setFont:") = Void, NSFont;
overload externalInstanceMethod(static NSTextStorage, static #"foregroundColor") = NSColor;
overload externalInstanceMethod(static NSTextStorage, static #"setForegroundColor:") = Void, NSColor;

record NSTextTab = externalClass(NSObject);
overload externalInstanceMethod(static NSTextTab, static #"copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(static NSTextTab, static #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static NSTextTab, static #"initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(static NSTextTab, static #"initWithTextAlignment:location:options:") = Id, UInt, Float, NSDictionary;
overload externalInstanceMethod(static NSTextTab, static #"alignment") = UInt;
overload externalInstanceMethod(static NSTextTab, static #"options") = NSDictionary;
overload externalInstanceMethod(static NSTextTab, static #"initWithType:location:") = Id, UInt, Float;
overload externalInstanceMethod(static NSTextTab, static #"location") = Float;
overload externalInstanceMethod(static NSTextTab, static #"tabStopType") = UInt;

record NSTextTable = externalClass(NSTextBlock);
overload externalInstanceMethod(static NSTextTable, static #"numberOfColumns") = UInt;
overload externalInstanceMethod(static NSTextTable, static #"setNumberOfColumns:") = Void, UInt;
overload externalInstanceMethod(static NSTextTable, static #"layoutAlgorithm") = UInt;
overload externalInstanceMethod(static NSTextTable, static #"setLayoutAlgorithm:") = Void, UInt;
overload externalInstanceMethod(static NSTextTable, static #"collapsesBorders") = Bool;
overload externalInstanceMethod(static NSTextTable, static #"setCollapsesBorders:") = Void, Bool;
overload externalInstanceMethod(static NSTextTable, static #"hidesEmptyCells") = Bool;
overload externalInstanceMethod(static NSTextTable, static #"setHidesEmptyCells:") = Void, Bool;
overload externalInstanceMethod(static NSTextTable, static #"rectForBlock:layoutAtPoint:inRect:textContainer:characterRange:") = NSRect, NSTextTableBlock, NSPoint, NSRect, NSTextContainer, NSRange;
overload externalInstanceMethod(static NSTextTable, static #"boundsRectForBlock:contentRect:inRect:textContainer:characterRange:") = NSRect, NSTextTableBlock, NSRect, NSRect, NSTextContainer, NSRange;
overload externalInstanceMethod(static NSTextTable, static #"drawBackgroundForBlock:withFrame:inView:characterRange:layoutManager:") = Void, NSTextTableBlock, NSRect, NSView, NSRange, NSLayoutManager;

record NSTextTableBlock = externalClass(NSTextBlock);
overload externalInstanceMethod(static NSTextTableBlock, static #"initWithTable:startingRow:rowSpan:startingColumn:columnSpan:") = Id, NSTextTable, Int, Int, Int, Int;
overload externalInstanceMethod(static NSTextTableBlock, static #"table") = NSTextTable;
overload externalInstanceMethod(static NSTextTableBlock, static #"startingRow") = Int;
overload externalInstanceMethod(static NSTextTableBlock, static #"rowSpan") = Int;
overload externalInstanceMethod(static NSTextTableBlock, static #"startingColumn") = Int;
overload externalInstanceMethod(static NSTextTableBlock, static #"columnSpan") = Int;

record NSTextView = externalClass(NSText);
overload externalInstanceMethod(static NSTextView, static #"insertText:") = Void, Id;
overload externalInstanceMethod(static NSTextView, static #"doCommandBySelector:") = Void, SelectorHandle;
overload externalInstanceMethod(static NSTextView, static #"setMarkedText:selectedRange:") = Void, Id, NSRange;
overload externalInstanceMethod(static NSTextView, static #"unmarkText") = Void;
overload externalInstanceMethod(static NSTextView, static #"hasMarkedText") = Bool;
overload externalInstanceMethod(static NSTextView, static #"conversationIdentifier") = Int;
overload externalInstanceMethod(static NSTextView, static #"attributedSubstringFromRange:") = NSAttributedString, NSRange;
overload externalInstanceMethod(static NSTextView, static #"markedRange") = NSRange;
overload externalInstanceMethod(static NSTextView, static #"selectedRange") = NSRange;
overload externalInstanceMethod(static NSTextView, static #"firstRectForCharacterRange:") = NSRect, NSRange;
overload externalInstanceMethod(static NSTextView, static #"characterIndexForPoint:") = UInt, NSPoint;
overload externalInstanceMethod(static NSTextView, static #"validAttributesForMarkedText") = NSArray;
overload externalInstanceMethod(static NSTextView, static #"validateUserInterfaceItem:") = Bool, Id;
overload externalInstanceMethod(static NSTextView, static #"insertText:replacementRange:") = Void, Id, NSRange;
overload externalInstanceMethod(static NSTextView, static #"doCommandBySelector:") = Void, SelectorHandle;
overload externalInstanceMethod(static NSTextView, static #"setMarkedText:selectedRange:replacementRange:") = Void, Id, NSRange, NSRange;
overload externalInstanceMethod(static NSTextView, static #"unmarkText") = Void;
overload externalInstanceMethod(static NSTextView, static #"selectedRange") = NSRange;
overload externalInstanceMethod(static NSTextView, static #"markedRange") = NSRange;
overload externalInstanceMethod(static NSTextView, static #"hasMarkedText") = Bool;
overload externalInstanceMethod(static NSTextView, static #"attributedSubstringForProposedRange:actualRange:") = NSAttributedString, NSRange, NSRangePointer;
overload externalInstanceMethod(static NSTextView, static #"validAttributesForMarkedText") = NSArray;
overload externalInstanceMethod(static NSTextView, static #"firstRectForCharacterRange:actualRange:") = NSRect, NSRange, NSRangePointer;
overload externalInstanceMethod(static NSTextView, static #"characterIndexForPoint:") = UInt, NSPoint;
overload externalInstanceMethod(static NSTextView, static #"attributedString") = NSAttributedString;
overload externalInstanceMethod(static NSTextView, static #"fractionOfDistanceThroughGlyphForPoint:") = Float, NSPoint;
overload externalInstanceMethod(static NSTextView, static #"baselineDeltaForCharacterAtIndex:") = Float, UInt;
overload externalInstanceMethod(static NSTextView, static #"windowLevel") = Int;
overload externalInstanceMethod(static NSTextView, static #"drawsVerticallyForCharacterAtIndex:") = Bool, UInt;
overload externalInstanceMethod(static NSTextView, static #"initWithFrame:textContainer:") = Id, NSRect, NSTextContainer;
overload externalInstanceMethod(static NSTextView, static #"initWithFrame:") = Id, NSRect;
overload externalInstanceMethod(static NSTextView, static #"textContainer") = NSTextContainer;
overload externalInstanceMethod(static NSTextView, static #"setTextContainer:") = Void, NSTextContainer;
overload externalInstanceMethod(static NSTextView, static #"replaceTextContainer:") = Void, NSTextContainer;
overload externalInstanceMethod(static NSTextView, static #"setTextContainerInset:") = Void, NSSize;
overload externalInstanceMethod(static NSTextView, static #"textContainerInset") = NSSize;
overload externalInstanceMethod(static NSTextView, static #"textContainerOrigin") = NSPoint;
overload externalInstanceMethod(static NSTextView, static #"invalidateTextContainerOrigin") = Void;
overload externalInstanceMethod(static NSTextView, static #"layoutManager") = NSLayoutManager;
overload externalInstanceMethod(static NSTextView, static #"textStorage") = NSTextStorage;
overload externalInstanceMethod(static NSTextView, static #"insertText:") = Void, Id;
overload externalInstanceMethod(static NSTextView, static #"setConstrainedFrameSize:") = Void, NSSize;
overload externalInstanceMethod(static NSTextView, static #"setAlignment:range:") = Void, UInt, NSRange;
overload externalInstanceMethod(static NSTextView, static #"setBaseWritingDirection:range:") = Void, Int, NSRange;
overload externalInstanceMethod(static NSTextView, static #"turnOffKerning:") = Void, Id;
overload externalInstanceMethod(static NSTextView, static #"tightenKerning:") = Void, Id;
overload externalInstanceMethod(static NSTextView, static #"loosenKerning:") = Void, Id;
overload externalInstanceMethod(static NSTextView, static #"useStandardKerning:") = Void, Id;
overload externalInstanceMethod(static NSTextView, static #"turnOffLigatures:") = Void, Id;
overload externalInstanceMethod(static NSTextView, static #"useStandardLigatures:") = Void, Id;
overload externalInstanceMethod(static NSTextView, static #"useAllLigatures:") = Void, Id;
overload externalInstanceMethod(static NSTextView, static #"raiseBaseline:") = Void, Id;
overload externalInstanceMethod(static NSTextView, static #"lowerBaseline:") = Void, Id;
overload externalInstanceMethod(static NSTextView, static #"toggleTraditionalCharacterShape:") = Void, Id;
overload externalInstanceMethod(static NSTextView, static #"outline:") = Void, Id;
overload externalInstanceMethod(static NSTextView, static #"performFindPanelAction:") = Void, Id;
overload externalInstanceMethod(static NSTextView, static #"alignJustified:") = Void, Id;
overload externalInstanceMethod(static NSTextView, static #"changeColor:") = Void, Id;
overload externalInstanceMethod(static NSTextView, static #"changeAttributes:") = Void, Id;
overload externalInstanceMethod(static NSTextView, static #"changeDocumentBackgroundColor:") = Void, Id;
overload externalInstanceMethod(static NSTextView, static #"orderFrontSpacingPanel:") = Void, Id;
overload externalInstanceMethod(static NSTextView, static #"orderFrontLinkPanel:") = Void, Id;
overload externalInstanceMethod(static NSTextView, static #"orderFrontListPanel:") = Void, Id;
overload externalInstanceMethod(static NSTextView, static #"orderFrontTablePanel:") = Void, Id;
overload externalInstanceMethod(static NSTextView, static #"rulerView:didMoveMarker:") = Void, NSRulerView, NSRulerMarker;
overload externalInstanceMethod(static NSTextView, static #"rulerView:didRemoveMarker:") = Void, NSRulerView, NSRulerMarker;
overload externalInstanceMethod(static NSTextView, static #"rulerView:didAddMarker:") = Void, NSRulerView, NSRulerMarker;
overload externalInstanceMethod(static NSTextView, static #"rulerView:shouldMoveMarker:") = Bool, NSRulerView, NSRulerMarker;
overload externalInstanceMethod(static NSTextView, static #"rulerView:shouldAddMarker:") = Bool, NSRulerView, NSRulerMarker;
overload externalInstanceMethod(static NSTextView, static #"rulerView:willMoveMarker:toLocation:") = Float, NSRulerView, NSRulerMarker, Float;
overload externalInstanceMethod(static NSTextView, static #"rulerView:shouldRemoveMarker:") = Bool, NSRulerView, NSRulerMarker;
overload externalInstanceMethod(static NSTextView, static #"rulerView:willAddMarker:atLocation:") = Float, NSRulerView, NSRulerMarker, Float;
overload externalInstanceMethod(static NSTextView, static #"rulerView:handleMouseDown:") = Void, NSRulerView, NSEvent;
overload externalInstanceMethod(static NSTextView, static #"setNeedsDisplayInRect:avoidAdditionalLayout:") = Void, NSRect, Bool;
overload externalInstanceMethod(static NSTextView, static #"shouldDrawInsertionPoint") = Bool;
overload externalInstanceMethod(static NSTextView, static #"drawInsertionPointInRect:color:turnedOn:") = Void, NSRect, NSColor, Bool;
overload externalInstanceMethod(static NSTextView, static #"drawViewBackgroundInRect:") = Void, NSRect;
overload externalInstanceMethod(static NSTextView, static #"updateRuler") = Void;
overload externalInstanceMethod(static NSTextView, static #"updateFontPanel") = Void;
overload externalInstanceMethod(static NSTextView, static #"updateDragTypeRegistration") = Void;
overload externalInstanceMethod(static NSTextView, static #"selectionRangeForProposedRange:granularity:") = NSRange, NSRange, UInt;
overload externalInstanceMethod(static NSTextView, static #"clickedOnLink:atIndex:") = Void, Id, UInt;
overload externalInstanceMethod(static NSTextView, static #"startSpeaking:") = Void, Id;
overload externalInstanceMethod(static NSTextView, static #"stopSpeaking:") = Void, Id;
overload externalInstanceMethod(static NSTextView, static #"characterIndexForInsertionAtPoint:") = UInt, NSPoint;
overload externalInstanceMethod(static NSTextView, static #"complete:") = Void, Id;
overload externalInstanceMethod(static NSTextView, static #"rangeForUserCompletion") = NSRange;
overload externalInstanceMethod(static NSTextView, static #"completionsForPartialWordRange:indexOfSelectedItem:") = NSArray, NSRange, Pointer[Int];
overload externalInstanceMethod(static NSTextView, static #"insertCompletion:forPartialWordRange:movement:isFinal:") = Void, NSString, NSRange, Int, Bool;
overload externalInstanceMethod(static NSTextView, static #"writablePasteboardTypes") = NSArray;
overload externalInstanceMethod(static NSTextView, static #"writeSelectionToPasteboard:type:") = Bool, NSPasteboard, NSString;
overload externalInstanceMethod(static NSTextView, static #"writeSelectionToPasteboard:types:") = Bool, NSPasteboard, NSArray;
overload externalInstanceMethod(static NSTextView, static #"readablePasteboardTypes") = NSArray;
overload externalInstanceMethod(static NSTextView, static #"preferredPasteboardTypeFromArray:restrictedToTypesFromArray:") = NSString, NSArray, NSArray;
overload externalInstanceMethod(static NSTextView, static #"readSelectionFromPasteboard:type:") = Bool, NSPasteboard, NSString;
overload externalInstanceMethod(static NSTextView, static #"readSelectionFromPasteboard:") = Bool, NSPasteboard;
overload externalClassMethod(static NSTextView, static #"registerForServices") = Void;
overload externalInstanceMethod(static NSTextView, static #"validRequestorForSendType:returnType:") = Id, NSString, NSString;
overload externalInstanceMethod(static NSTextView, static #"pasteAsPlainText:") = Void, Id;
overload externalInstanceMethod(static NSTextView, static #"pasteAsRichText:") = Void, Id;
overload externalInstanceMethod(static NSTextView, static #"dragSelectionWithEvent:offset:slideBack:") = Bool, NSEvent, NSSize, Bool;
overload externalInstanceMethod(static NSTextView, static #"dragImageForSelectionWithEvent:origin:") = NSImage, NSEvent, NSPointPointer;
overload externalInstanceMethod(static NSTextView, static #"acceptableDragTypes") = NSArray;
overload externalInstanceMethod(static NSTextView, static #"dragOperationForDraggingInfo:type:") = UInt, Id, NSString;
overload externalInstanceMethod(static NSTextView, static #"cleanUpAfterDragOperation") = Void;
overload externalInstanceMethod(static NSTextView, static #"selectedRanges") = NSArray;
overload externalInstanceMethod(static NSTextView, static #"setSelectedRanges:affinity:stillSelecting:") = Void, NSArray, UInt, Bool;
overload externalInstanceMethod(static NSTextView, static #"setSelectedRanges:") = Void, NSArray;
overload externalInstanceMethod(static NSTextView, static #"setSelectedRange:affinity:stillSelecting:") = Void, NSRange, UInt, Bool;
overload externalInstanceMethod(static NSTextView, static #"selectionAffinity") = UInt;
overload externalInstanceMethod(static NSTextView, static #"selectionGranularity") = UInt;
overload externalInstanceMethod(static NSTextView, static #"setSelectionGranularity:") = Void, UInt;
overload externalInstanceMethod(static NSTextView, static #"setSelectedTextAttributes:") = Void, NSDictionary;
overload externalInstanceMethod(static NSTextView, static #"selectedTextAttributes") = NSDictionary;
overload externalInstanceMethod(static NSTextView, static #"setInsertionPointColor:") = Void, NSColor;
overload externalInstanceMethod(static NSTextView, static #"insertionPointColor") = NSColor;
overload externalInstanceMethod(static NSTextView, static #"updateInsertionPointStateAndRestartTimer:") = Void, Bool;
overload externalInstanceMethod(static NSTextView, static #"setMarkedTextAttributes:") = Void, NSDictionary;
overload externalInstanceMethod(static NSTextView, static #"markedTextAttributes") = NSDictionary;
overload externalInstanceMethod(static NSTextView, static #"setLinkTextAttributes:") = Void, NSDictionary;
overload externalInstanceMethod(static NSTextView, static #"linkTextAttributes") = NSDictionary;
overload externalInstanceMethod(static NSTextView, static #"displaysLinkToolTips") = Bool;
overload externalInstanceMethod(static NSTextView, static #"setDisplaysLinkToolTips:") = Void, Bool;
overload externalInstanceMethod(static NSTextView, static #"acceptsGlyphInfo") = Bool;
overload externalInstanceMethod(static NSTextView, static #"setAcceptsGlyphInfo:") = Void, Bool;
overload externalInstanceMethod(static NSTextView, static #"setRulerVisible:") = Void, Bool;
overload externalInstanceMethod(static NSTextView, static #"usesRuler") = Bool;
overload externalInstanceMethod(static NSTextView, static #"setUsesRuler:") = Void, Bool;
overload externalInstanceMethod(static NSTextView, static #"setContinuousSpellCheckingEnabled:") = Void, Bool;
overload externalInstanceMethod(static NSTextView, static #"isContinuousSpellCheckingEnabled") = Bool;
overload externalInstanceMethod(static NSTextView, static #"toggleContinuousSpellChecking:") = Void, Id;
overload externalInstanceMethod(static NSTextView, static #"spellCheckerDocumentTag") = Int;
overload externalInstanceMethod(static NSTextView, static #"setGrammarCheckingEnabled:") = Void, Bool;
overload externalInstanceMethod(static NSTextView, static #"isGrammarCheckingEnabled") = Bool;
overload externalInstanceMethod(static NSTextView, static #"toggleGrammarChecking:") = Void, Id;
overload externalInstanceMethod(static NSTextView, static #"setSpellingState:range:") = Void, Int, NSRange;
overload externalInstanceMethod(static NSTextView, static #"typingAttributes") = NSDictionary;
overload externalInstanceMethod(static NSTextView, static #"setTypingAttributes:") = Void, NSDictionary;
overload externalInstanceMethod(static NSTextView, static #"shouldChangeTextInRanges:replacementStrings:") = Bool, NSArray, NSArray;
overload externalInstanceMethod(static NSTextView, static #"rangesForUserTextChange") = NSArray;
overload externalInstanceMethod(static NSTextView, static #"rangesForUserCharacterAttributeChange") = NSArray;
overload externalInstanceMethod(static NSTextView, static #"rangesForUserParagraphAttributeChange") = NSArray;
overload externalInstanceMethod(static NSTextView, static #"shouldChangeTextInRange:replacementString:") = Bool, NSRange, NSString;
overload externalInstanceMethod(static NSTextView, static #"didChangeText") = Void;
overload externalInstanceMethod(static NSTextView, static #"rangeForUserTextChange") = NSRange;
overload externalInstanceMethod(static NSTextView, static #"rangeForUserCharacterAttributeChange") = NSRange;
overload externalInstanceMethod(static NSTextView, static #"rangeForUserParagraphAttributeChange") = NSRange;
overload externalInstanceMethod(static NSTextView, static #"setUsesFindPanel:") = Void, Bool;
overload externalInstanceMethod(static NSTextView, static #"usesFindPanel") = Bool;
overload externalInstanceMethod(static NSTextView, static #"setAllowsDocumentBackgroundColorChange:") = Void, Bool;
overload externalInstanceMethod(static NSTextView, static #"allowsDocumentBackgroundColorChange") = Bool;
overload externalInstanceMethod(static NSTextView, static #"setDefaultParagraphStyle:") = Void, NSParagraphStyle;
overload externalInstanceMethod(static NSTextView, static #"defaultParagraphStyle") = NSParagraphStyle;
overload externalInstanceMethod(static NSTextView, static #"setAllowsUndo:") = Void, Bool;
overload externalInstanceMethod(static NSTextView, static #"allowsUndo") = Bool;
overload externalInstanceMethod(static NSTextView, static #"breakUndoCoalescing") = Void;
overload externalInstanceMethod(static NSTextView, static #"isCoalescingUndo") = Bool;
overload externalInstanceMethod(static NSTextView, static #"allowsImageEditing") = Bool;
overload externalInstanceMethod(static NSTextView, static #"setAllowsImageEditing:") = Void, Bool;
overload externalInstanceMethod(static NSTextView, static #"showFindIndicatorForRange:") = Void, NSRange;
overload externalInstanceMethod(static NSTextView, static #"delegate") = Id;
overload externalInstanceMethod(static NSTextView, static #"setDelegate:") = Void, Id;
overload externalInstanceMethod(static NSTextView, static #"isEditable") = Bool;
overload externalInstanceMethod(static NSTextView, static #"setEditable:") = Void, Bool;
overload externalInstanceMethod(static NSTextView, static #"isSelectable") = Bool;
overload externalInstanceMethod(static NSTextView, static #"setSelectable:") = Void, Bool;
overload externalInstanceMethod(static NSTextView, static #"isRichText") = Bool;
overload externalInstanceMethod(static NSTextView, static #"setRichText:") = Void, Bool;
overload externalInstanceMethod(static NSTextView, static #"importsGraphics") = Bool;
overload externalInstanceMethod(static NSTextView, static #"setImportsGraphics:") = Void, Bool;
overload externalInstanceMethod(static NSTextView, static #"drawsBackground") = Bool;
overload externalInstanceMethod(static NSTextView, static #"setDrawsBackground:") = Void, Bool;
overload externalInstanceMethod(static NSTextView, static #"backgroundColor") = NSColor;
overload externalInstanceMethod(static NSTextView, static #"setBackgroundColor:") = Void, NSColor;
overload externalInstanceMethod(static NSTextView, static #"isFieldEditor") = Bool;
overload externalInstanceMethod(static NSTextView, static #"setFieldEditor:") = Void, Bool;
overload externalInstanceMethod(static NSTextView, static #"usesFontPanel") = Bool;
overload externalInstanceMethod(static NSTextView, static #"setUsesFontPanel:") = Void, Bool;
overload externalInstanceMethod(static NSTextView, static #"isRulerVisible") = Bool;
overload externalInstanceMethod(static NSTextView, static #"setSelectedRange:") = Void, NSRange;
overload externalInstanceMethod(static NSTextView, static #"allowedInputSourceLocales") = NSArray;
overload externalInstanceMethod(static NSTextView, static #"setAllowedInputSourceLocales:") = Void, NSArray;
overload externalInstanceMethod(static NSTextView, static #"smartInsertDeleteEnabled") = Bool;
overload externalInstanceMethod(static NSTextView, static #"setSmartInsertDeleteEnabled:") = Void, Bool;
overload externalInstanceMethod(static NSTextView, static #"smartDeleteRangeForProposedRange:") = NSRange, NSRange;
overload externalInstanceMethod(static NSTextView, static #"toggleSmartInsertDelete:") = Void, Id;
overload externalInstanceMethod(static NSTextView, static #"smartInsertForString:replacingRange:beforeString:afterString:") = Void, NSString, NSRange, Pointer[NSString], Pointer[NSString];
overload externalInstanceMethod(static NSTextView, static #"smartInsertBeforeStringForString:replacingRange:") = NSString, NSString, NSRange;
overload externalInstanceMethod(static NSTextView, static #"smartInsertAfterStringForString:replacingRange:") = NSString, NSString, NSRange;
overload externalInstanceMethod(static NSTextView, static #"setAutomaticQuoteSubstitutionEnabled:") = Void, Bool;
overload externalInstanceMethod(static NSTextView, static #"isAutomaticQuoteSubstitutionEnabled") = Bool;
overload externalInstanceMethod(static NSTextView, static #"toggleAutomaticQuoteSubstitution:") = Void, Id;
overload externalInstanceMethod(static NSTextView, static #"setAutomaticLinkDetectionEnabled:") = Void, Bool;
overload externalInstanceMethod(static NSTextView, static #"isAutomaticLinkDetectionEnabled") = Bool;
overload externalInstanceMethod(static NSTextView, static #"toggleAutomaticLinkDetection:") = Void, Id;
overload externalInstanceMethod(static NSTextView, static #"setAutomaticDataDetectionEnabled:") = Void, Bool;
overload externalInstanceMethod(static NSTextView, static #"isAutomaticDataDetectionEnabled") = Bool;
overload externalInstanceMethod(static NSTextView, static #"toggleAutomaticDataDetection:") = Void, Id;
overload externalInstanceMethod(static NSTextView, static #"setAutomaticDashSubstitutionEnabled:") = Void, Bool;
overload externalInstanceMethod(static NSTextView, static #"isAutomaticDashSubstitutionEnabled") = Bool;
overload externalInstanceMethod(static NSTextView, static #"toggleAutomaticDashSubstitution:") = Void, Id;
overload externalInstanceMethod(static NSTextView, static #"setAutomaticTextReplacementEnabled:") = Void, Bool;
overload externalInstanceMethod(static NSTextView, static #"isAutomaticTextReplacementEnabled") = Bool;
overload externalInstanceMethod(static NSTextView, static #"toggleAutomaticTextReplacement:") = Void, Id;
overload externalInstanceMethod(static NSTextView, static #"setAutomaticSpellingCorrectionEnabled:") = Void, Bool;
overload externalInstanceMethod(static NSTextView, static #"isAutomaticSpellingCorrectionEnabled") = Bool;
overload externalInstanceMethod(static NSTextView, static #"toggleAutomaticSpellingCorrection:") = Void, Id;
overload externalInstanceMethod(static NSTextView, static #"enabledTextCheckingTypes") = UInt64;
overload externalInstanceMethod(static NSTextView, static #"setEnabledTextCheckingTypes:") = Void, UInt64;
overload externalInstanceMethod(static NSTextView, static #"checkTextInRange:types:options:") = Void, NSRange, UInt64, NSDictionary;
overload externalInstanceMethod(static NSTextView, static #"handleTextCheckingResults:forRange:types:options:orthography:wordCount:") = Void, NSArray, NSRange, UInt64, NSDictionary, NSOrthography, Int;
overload externalInstanceMethod(static NSTextView, static #"orderFrontSubstitutionsPanel:") = Void, Id;
overload externalInstanceMethod(static NSTextView, static #"checkTextInSelection:") = Void, Id;
overload externalInstanceMethod(static NSTextView, static #"checkTextInDocument:") = Void, Id;
overload externalInstanceMethod(static NSTextView, static #"toggleBaseWritingDirection:") = Void, Id;

record NSTokenField = externalClass(NSTextField);
overload externalInstanceMethod(static NSTokenField, static #"setDelegate:") = Void, Id;
overload externalInstanceMethod(static NSTokenField, static #"delegate") = Id;
overload externalInstanceMethod(static NSTokenField, static #"setTokenStyle:") = Void, UInt;
overload externalInstanceMethod(static NSTokenField, static #"tokenStyle") = UInt;
overload externalInstanceMethod(static NSTokenField, static #"setCompletionDelay:") = Void, Double;
overload externalInstanceMethod(static NSTokenField, static #"completionDelay") = Double;
overload externalClassMethod(static NSTokenField, static #"defaultCompletionDelay") = Double;
overload externalInstanceMethod(static NSTokenField, static #"setTokenizingCharacterSet:") = Void, NSCharacterSet;
overload externalInstanceMethod(static NSTokenField, static #"tokenizingCharacterSet") = NSCharacterSet;
overload externalClassMethod(static NSTokenField, static #"defaultTokenizingCharacterSet") = NSCharacterSet;

record NSTokenFieldCell = externalClass(NSTextFieldCell);
overload externalInstanceMethod(static NSTokenFieldCell, static #"setTokenStyle:") = Void, UInt;
overload externalInstanceMethod(static NSTokenFieldCell, static #"tokenStyle") = UInt;
overload externalInstanceMethod(static NSTokenFieldCell, static #"setCompletionDelay:") = Void, Double;
overload externalInstanceMethod(static NSTokenFieldCell, static #"completionDelay") = Double;
overload externalClassMethod(static NSTokenFieldCell, static #"defaultCompletionDelay") = Double;
overload externalInstanceMethod(static NSTokenFieldCell, static #"setTokenizingCharacterSet:") = Void, NSCharacterSet;
overload externalInstanceMethod(static NSTokenFieldCell, static #"tokenizingCharacterSet") = NSCharacterSet;
overload externalClassMethod(static NSTokenFieldCell, static #"defaultTokenizingCharacterSet") = NSCharacterSet;
overload externalInstanceMethod(static NSTokenFieldCell, static #"setDelegate:") = Void, Id;
overload externalInstanceMethod(static NSTokenFieldCell, static #"delegate") = Id;

record NSToolbar = externalClass(NSObject);
overload externalInstanceMethod(static NSToolbar, static #"initWithIdentifier:") = Id, NSString;
overload externalInstanceMethod(static NSToolbar, static #"insertItemWithItemIdentifier:atIndex:") = Void, NSString, Int;
overload externalInstanceMethod(static NSToolbar, static #"removeItemAtIndex:") = Void, Int;
overload externalInstanceMethod(static NSToolbar, static #"setDelegate:") = Void, Id;
overload externalInstanceMethod(static NSToolbar, static #"delegate") = Id;
overload externalInstanceMethod(static NSToolbar, static #"setVisible:") = Void, Bool;
overload externalInstanceMethod(static NSToolbar, static #"isVisible") = Bool;
overload externalInstanceMethod(static NSToolbar, static #"runCustomizationPalette:") = Void, Id;
overload externalInstanceMethod(static NSToolbar, static #"customizationPaletteIsRunning") = Bool;
overload externalInstanceMethod(static NSToolbar, static #"setDisplayMode:") = Void, UInt;
overload externalInstanceMethod(static NSToolbar, static #"displayMode") = UInt;
overload externalInstanceMethod(static NSToolbar, static #"setSelectedItemIdentifier:") = Void, NSString;
overload externalInstanceMethod(static NSToolbar, static #"selectedItemIdentifier") = NSString;
overload externalInstanceMethod(static NSToolbar, static #"setSizeMode:") = Void, UInt;
overload externalInstanceMethod(static NSToolbar, static #"sizeMode") = UInt;
overload externalInstanceMethod(static NSToolbar, static #"setShowsBaselineSeparator:") = Void, Bool;
overload externalInstanceMethod(static NSToolbar, static #"showsBaselineSeparator") = Bool;
overload externalInstanceMethod(static NSToolbar, static #"setAllowsUserCustomization:") = Void, Bool;
overload externalInstanceMethod(static NSToolbar, static #"allowsUserCustomization") = Bool;
overload externalInstanceMethod(static NSToolbar, static #"identifier") = NSString;
overload externalInstanceMethod(static NSToolbar, static #"items") = NSArray;
overload externalInstanceMethod(static NSToolbar, static #"visibleItems") = NSArray;
overload externalInstanceMethod(static NSToolbar, static #"setAutosavesConfiguration:") = Void, Bool;
overload externalInstanceMethod(static NSToolbar, static #"autosavesConfiguration") = Bool;
overload externalInstanceMethod(static NSToolbar, static #"setConfigurationFromDictionary:") = Void, NSDictionary;
overload externalInstanceMethod(static NSToolbar, static #"configurationDictionary") = NSDictionary;
overload externalInstanceMethod(static NSToolbar, static #"validateVisibleItems") = Void;

record NSToolbarItem = externalClass(NSObject);
overload externalInstanceMethod(static NSToolbarItem, static #"copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(static NSToolbarItem, static #"action") = SelectorHandle;
overload externalInstanceMethod(static NSToolbarItem, static #"tag") = Int;
overload externalInstanceMethod(static NSToolbarItem, static #"initWithItemIdentifier:") = Id, NSString;
overload externalInstanceMethod(static NSToolbarItem, static #"itemIdentifier") = NSString;
overload externalInstanceMethod(static NSToolbarItem, static #"toolbar") = NSToolbar;
overload externalInstanceMethod(static NSToolbarItem, static #"setLabel:") = Void, NSString;
overload externalInstanceMethod(static NSToolbarItem, static #"label") = NSString;
overload externalInstanceMethod(static NSToolbarItem, static #"setPaletteLabel:") = Void, NSString;
overload externalInstanceMethod(static NSToolbarItem, static #"paletteLabel") = NSString;
overload externalInstanceMethod(static NSToolbarItem, static #"setToolTip:") = Void, NSString;
overload externalInstanceMethod(static NSToolbarItem, static #"toolTip") = NSString;
overload externalInstanceMethod(static NSToolbarItem, static #"setMenuFormRepresentation:") = Void, NSMenuItem;
overload externalInstanceMethod(static NSToolbarItem, static #"menuFormRepresentation") = NSMenuItem;
overload externalInstanceMethod(static NSToolbarItem, static #"setTag:") = Void, Int;
overload externalInstanceMethod(static NSToolbarItem, static #"tag") = Int;
overload externalInstanceMethod(static NSToolbarItem, static #"setTarget:") = Void, Id;
overload externalInstanceMethod(static NSToolbarItem, static #"target") = Id;
overload externalInstanceMethod(static NSToolbarItem, static #"setAction:") = Void, SelectorHandle;
overload externalInstanceMethod(static NSToolbarItem, static #"action") = SelectorHandle;
overload externalInstanceMethod(static NSToolbarItem, static #"setEnabled:") = Void, Bool;
overload externalInstanceMethod(static NSToolbarItem, static #"isEnabled") = Bool;
overload externalInstanceMethod(static NSToolbarItem, static #"setImage:") = Void, NSImage;
overload externalInstanceMethod(static NSToolbarItem, static #"image") = NSImage;
overload externalInstanceMethod(static NSToolbarItem, static #"setView:") = Void, NSView;
overload externalInstanceMethod(static NSToolbarItem, static #"view") = NSView;
overload externalInstanceMethod(static NSToolbarItem, static #"setMinSize:") = Void, NSSize;
overload externalInstanceMethod(static NSToolbarItem, static #"minSize") = NSSize;
overload externalInstanceMethod(static NSToolbarItem, static #"setMaxSize:") = Void, NSSize;
overload externalInstanceMethod(static NSToolbarItem, static #"maxSize") = NSSize;
overload externalInstanceMethod(static NSToolbarItem, static #"setVisibilityPriority:") = Void, Int;
overload externalInstanceMethod(static NSToolbarItem, static #"visibilityPriority") = Int;
overload externalInstanceMethod(static NSToolbarItem, static #"validate") = Void;
overload externalInstanceMethod(static NSToolbarItem, static #"setAutovalidates:") = Void, Bool;
overload externalInstanceMethod(static NSToolbarItem, static #"autovalidates") = Bool;
overload externalInstanceMethod(static NSToolbarItem, static #"allowsDuplicatesInToolbar") = Bool;

record NSToolbarItemGroup = externalClass(NSToolbarItem);
overload externalInstanceMethod(static NSToolbarItemGroup, static #"setSubitems:") = Void, NSArray;
overload externalInstanceMethod(static NSToolbarItemGroup, static #"subitems") = NSArray;

record NSTouch = externalClass(NSObject);
overload externalInstanceMethod(static NSTouch, static #"copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(static NSTouch, static #"identity") = Id;
overload externalInstanceMethod(static NSTouch, static #"phase") = UInt;
overload externalInstanceMethod(static NSTouch, static #"normalizedPosition") = NSPoint;
overload externalInstanceMethod(static NSTouch, static #"isResting") = Bool;
overload externalInstanceMethod(static NSTouch, static #"device") = Id;
overload externalInstanceMethod(static NSTouch, static #"deviceSize") = NSSize;

record NSTrackingArea = externalClass(NSObject);
overload externalInstanceMethod(static NSTrackingArea, static #"copyWithZone:") = Id, Pointer[NSZone];
overload externalInstanceMethod(static NSTrackingArea, static #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static NSTrackingArea, static #"initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(static NSTrackingArea, static #"initWithRect:options:owner:userInfo:") = Id, NSRect, UInt, Id, NSDictionary;
overload externalInstanceMethod(static NSTrackingArea, static #"rect") = NSRect;
overload externalInstanceMethod(static NSTrackingArea, static #"options") = UInt;
overload externalInstanceMethod(static NSTrackingArea, static #"owner") = Id;
overload externalInstanceMethod(static NSTrackingArea, static #"userInfo") = NSDictionary;

record NSTreeController = externalClass(NSObjectController);
overload externalInstanceMethod(static NSTreeController, static #"rearrangeObjects") = Void;
overload externalInstanceMethod(static NSTreeController, static #"arrangedObjects") = Id;
overload externalInstanceMethod(static NSTreeController, static #"setChildrenKeyPath:") = Void, NSString;
overload externalInstanceMethod(static NSTreeController, static #"childrenKeyPath") = NSString;
overload externalInstanceMethod(static NSTreeController, static #"setCountKeyPath:") = Void, NSString;
overload externalInstanceMethod(static NSTreeController, static #"countKeyPath") = NSString;
overload externalInstanceMethod(static NSTreeController, static #"setLeafKeyPath:") = Void, NSString;
overload externalInstanceMethod(static NSTreeController, static #"leafKeyPath") = NSString;
overload externalInstanceMethod(static NSTreeController, static #"setSortDescriptors:") = Void, NSArray;
overload externalInstanceMethod(static NSTreeController, static #"sortDescriptors") = NSArray;
overload externalInstanceMethod(static NSTreeController, static #"content") = Id;
overload externalInstanceMethod(static NSTreeController, static #"setContent:") = Void, Id;
overload externalInstanceMethod(static NSTreeController, static #"add:") = Void, Id;
overload externalInstanceMethod(static NSTreeController, static #"remove:") = Void, Id;
overload externalInstanceMethod(static NSTreeController, static #"addChild:") = Void, Id;
overload externalInstanceMethod(static NSTreeController, static #"insert:") = Void, Id;
overload externalInstanceMethod(static NSTreeController, static #"insertChild:") = Void, Id;
overload externalInstanceMethod(static NSTreeController, static #"canInsert") = Bool;
overload externalInstanceMethod(static NSTreeController, static #"canInsertChild") = Bool;
overload externalInstanceMethod(static NSTreeController, static #"canAddChild") = Bool;
overload externalInstanceMethod(static NSTreeController, static #"insertObject:atArrangedObjectIndexPath:") = Void, Id, NSIndexPath;
overload externalInstanceMethod(static NSTreeController, static #"insertObjects:atArrangedObjectIndexPaths:") = Void, NSArray, NSArray;
overload externalInstanceMethod(static NSTreeController, static #"removeObjectAtArrangedObjectIndexPath:") = Void, NSIndexPath;
overload externalInstanceMethod(static NSTreeController, static #"removeObjectsAtArrangedObjectIndexPaths:") = Void, NSArray;
overload externalInstanceMethod(static NSTreeController, static #"setAvoidsEmptySelection:") = Void, Bool;
overload externalInstanceMethod(static NSTreeController, static #"avoidsEmptySelection") = Bool;
overload externalInstanceMethod(static NSTreeController, static #"setPreservesSelection:") = Void, Bool;
overload externalInstanceMethod(static NSTreeController, static #"preservesSelection") = Bool;
overload externalInstanceMethod(static NSTreeController, static #"setSelectsInsertedObjects:") = Void, Bool;
overload externalInstanceMethod(static NSTreeController, static #"selectsInsertedObjects") = Bool;
overload externalInstanceMethod(static NSTreeController, static #"setAlwaysUsesMultipleValuesMarker:") = Void, Bool;
overload externalInstanceMethod(static NSTreeController, static #"alwaysUsesMultipleValuesMarker") = Bool;
overload externalInstanceMethod(static NSTreeController, static #"selectedObjects") = NSArray;
overload externalInstanceMethod(static NSTreeController, static #"setSelectionIndexPaths:") = Bool, NSArray;
overload externalInstanceMethod(static NSTreeController, static #"selectionIndexPaths") = NSArray;
overload externalInstanceMethod(static NSTreeController, static #"setSelectionIndexPath:") = Bool, NSIndexPath;
overload externalInstanceMethod(static NSTreeController, static #"selectionIndexPath") = NSIndexPath;
overload externalInstanceMethod(static NSTreeController, static #"addSelectionIndexPaths:") = Bool, NSArray;
overload externalInstanceMethod(static NSTreeController, static #"removeSelectionIndexPaths:") = Bool, NSArray;
overload externalInstanceMethod(static NSTreeController, static #"selectedNodes") = NSArray;
overload externalInstanceMethod(static NSTreeController, static #"moveNode:toIndexPath:") = Void, NSTreeNode, NSIndexPath;
overload externalInstanceMethod(static NSTreeController, static #"moveNodes:toIndexPath:") = Void, NSArray, NSIndexPath;
overload externalInstanceMethod(static NSTreeController, static #"childrenKeyPathForNode:") = NSString, NSTreeNode;
overload externalInstanceMethod(static NSTreeController, static #"countKeyPathForNode:") = NSString, NSTreeNode;
overload externalInstanceMethod(static NSTreeController, static #"leafKeyPathForNode:") = NSString, NSTreeNode;

record NSTreeNode = externalClass(NSObject);
overload externalClassMethod(static NSTreeNode, static #"treeNodeWithRepresentedObject:") = Id, Id;
overload externalInstanceMethod(static NSTreeNode, static #"initWithRepresentedObject:") = Id, Id;
overload externalInstanceMethod(static NSTreeNode, static #"representedObject") = Id;
overload externalInstanceMethod(static NSTreeNode, static #"indexPath") = NSIndexPath;
overload externalInstanceMethod(static NSTreeNode, static #"isLeaf") = Bool;
overload externalInstanceMethod(static NSTreeNode, static #"childNodes") = NSArray;
overload externalInstanceMethod(static NSTreeNode, static #"mutableChildNodes") = NSMutableArray;
overload externalInstanceMethod(static NSTreeNode, static #"descendantNodeAtIndexPath:") = NSTreeNode, NSIndexPath;
overload externalInstanceMethod(static NSTreeNode, static #"parentNode") = NSTreeNode;
overload externalInstanceMethod(static NSTreeNode, static #"sortWithSortDescriptors:recursively:") = Void, NSArray, Bool;

record NSTypesetter = externalClass(NSObject);
overload externalInstanceMethod(static NSTypesetter, static #"usesFontLeading") = Bool;
overload externalInstanceMethod(static NSTypesetter, static #"setUsesFontLeading:") = Void, Bool;
overload externalInstanceMethod(static NSTypesetter, static #"typesetterBehavior") = Int;
overload externalInstanceMethod(static NSTypesetter, static #"setTypesetterBehavior:") = Void, Int;
overload externalInstanceMethod(static NSTypesetter, static #"hyphenationFactor") = Float;
overload externalInstanceMethod(static NSTypesetter, static #"setHyphenationFactor:") = Void, Float;
overload externalInstanceMethod(static NSTypesetter, static #"lineFragmentPadding") = Float;
overload externalInstanceMethod(static NSTypesetter, static #"setLineFragmentPadding:") = Void, Float;
overload externalInstanceMethod(static NSTypesetter, static #"substituteFontForFont:") = NSFont, NSFont;
overload externalInstanceMethod(static NSTypesetter, static #"textTabForGlyphLocation:writingDirection:maxLocation:") = NSTextTab, Float, Int, Float;
overload externalInstanceMethod(static NSTypesetter, static #"bidiProcessingEnabled") = Bool;
overload externalInstanceMethod(static NSTypesetter, static #"setBidiProcessingEnabled:") = Void, Bool;
overload externalInstanceMethod(static NSTypesetter, static #"setAttributedString:") = Void, NSAttributedString;
overload externalInstanceMethod(static NSTypesetter, static #"attributedString") = NSAttributedString;
overload externalInstanceMethod(static NSTypesetter, static #"setParagraphGlyphRange:separatorGlyphRange:") = Void, NSRange, NSRange;
overload externalInstanceMethod(static NSTypesetter, static #"paragraphGlyphRange") = NSRange;
overload externalInstanceMethod(static NSTypesetter, static #"paragraphSeparatorGlyphRange") = NSRange;
overload externalInstanceMethod(static NSTypesetter, static #"paragraphCharacterRange") = NSRange;
overload externalInstanceMethod(static NSTypesetter, static #"paragraphSeparatorCharacterRange") = NSRange;
overload externalInstanceMethod(static NSTypesetter, static #"layoutParagraphAtPoint:") = UInt, NSPointPointer;
overload externalInstanceMethod(static NSTypesetter, static #"beginParagraph") = Void;
overload externalInstanceMethod(static NSTypesetter, static #"endParagraph") = Void;
overload externalInstanceMethod(static NSTypesetter, static #"beginLineWithGlyphAtIndex:") = Void, UInt;
overload externalInstanceMethod(static NSTypesetter, static #"endLineWithGlyphRange:") = Void, NSRange;
overload externalInstanceMethod(static NSTypesetter, static #"lineSpacingAfterGlyphAtIndex:withProposedLineFragmentRect:") = Float, UInt, NSRect;
overload externalInstanceMethod(static NSTypesetter, static #"paragraphSpacingBeforeGlyphAtIndex:withProposedLineFragmentRect:") = Float, UInt, NSRect;
overload externalInstanceMethod(static NSTypesetter, static #"paragraphSpacingAfterGlyphAtIndex:withProposedLineFragmentRect:") = Float, UInt, NSRect;
overload externalInstanceMethod(static NSTypesetter, static #"getLineFragmentRect:usedRect:forParagraphSeparatorGlyphRange:atProposedOrigin:") = Void, NSRectPointer, NSRectPointer, NSRange, NSPoint;
overload externalInstanceMethod(static NSTypesetter, static #"attributesForExtraLineFragment") = NSDictionary;
overload externalInstanceMethod(static NSTypesetter, static #"actionForControlCharacterAtIndex:") = UInt, UInt;
overload externalInstanceMethod(static NSTypesetter, static #"layoutManager") = NSLayoutManager;
overload externalInstanceMethod(static NSTypesetter, static #"textContainers") = NSArray;
overload externalInstanceMethod(static NSTypesetter, static #"currentTextContainer") = NSTextContainer;
overload externalInstanceMethod(static NSTypesetter, static #"currentParagraphStyle") = NSParagraphStyle;
overload externalInstanceMethod(static NSTypesetter, static #"setHardInvalidation:forGlyphRange:") = Void, Bool, NSRange;
overload externalInstanceMethod(static NSTypesetter, static #"layoutGlyphsInLayoutManager:startingAtGlyphIndex:maxNumberOfLineFragments:nextGlyphIndex:") = Void, NSLayoutManager, UInt, UInt, Pointer[UInt];
overload externalInstanceMethod(static NSTypesetter, static #"layoutCharactersInRange:forLayoutManager:maximumNumberOfLineFragments:") = NSRange, NSRange, NSLayoutManager, UInt;
overload externalClassMethod(static NSTypesetter, static #"printingAdjustmentInLayoutManager:forNominallySpacedGlyphRange:packedGlyphs:count:") = NSSize, NSLayoutManager, NSRange, Pointer[CUChar], UInt;
overload externalInstanceMethod(static NSTypesetter, static #"baselineOffsetInLayoutManager:glyphIndex:") = Float, NSLayoutManager, UInt;
overload externalClassMethod(static NSTypesetter, static #"sharedSystemTypesetter") = Id;
overload externalClassMethod(static NSTypesetter, static #"sharedSystemTypesetterForBehavior:") = Id, Int;
overload externalClassMethod(static NSTypesetter, static #"defaultTypesetterBehavior") = Int;
overload externalInstanceMethod(static NSTypesetter, static #"willSetLineFragmentRect:forGlyphRange:usedRect:baselineOffset:") = Void, NSRectPointer, NSRange, NSRectPointer, Pointer[Float];
overload externalInstanceMethod(static NSTypesetter, static #"shouldBreakLineByWordBeforeCharacterAtIndex:") = Bool, UInt;
overload externalInstanceMethod(static NSTypesetter, static #"shouldBreakLineByHyphenatingBeforeCharacterAtIndex:") = Bool, UInt;
overload externalInstanceMethod(static NSTypesetter, static #"hyphenationFactorForGlyphAtIndex:") = Float, UInt;
overload externalInstanceMethod(static NSTypesetter, static #"hyphenCharacterForGlyphAtIndex:") = CULong, UInt;
overload externalInstanceMethod(static NSTypesetter, static #"boundingBoxForControlGlyphAtIndex:forTextContainer:proposedLineFragment:glyphPosition:characterIndex:") = NSRect, UInt, NSTextContainer, NSRect, NSPoint, UInt;
overload externalInstanceMethod(static NSTypesetter, static #"characterRangeForGlyphRange:actualGlyphRange:") = NSRange, NSRange, NSRangePointer;
overload externalInstanceMethod(static NSTypesetter, static #"glyphRangeForCharacterRange:actualCharacterRange:") = NSRange, NSRange, NSRangePointer;
overload externalInstanceMethod(static NSTypesetter, static #"getGlyphsInRange:glyphs:characterIndexes:glyphInscriptions:elasticBits:bidiLevels:") = UInt, NSRange, Pointer[UInt], Pointer[UInt], Pointer[UInt], Pointer[Bool], Pointer[CUChar];
overload externalInstanceMethod(static NSTypesetter, static #"getLineFragmentRect:usedRect:remainingRect:forStartingGlyphAtIndex:proposedRect:lineSpacing:paragraphSpacingBefore:paragraphSpacingAfter:") = Void, NSRectPointer, NSRectPointer, NSRectPointer, UInt, NSRect, Float, Float, Float;
overload externalInstanceMethod(static NSTypesetter, static #"setLineFragmentRect:forGlyphRange:usedRect:baselineOffset:") = Void, NSRect, NSRange, NSRect, Float;
overload externalInstanceMethod(static NSTypesetter, static #"substituteGlyphsInRange:withGlyphs:") = Void, NSRange, Pointer[UInt];
overload externalInstanceMethod(static NSTypesetter, static #"insertGlyph:atGlyphIndex:characterIndex:") = Void, UInt, UInt, UInt;
overload externalInstanceMethod(static NSTypesetter, static #"deleteGlyphsInRange:") = Void, NSRange;
overload externalInstanceMethod(static NSTypesetter, static #"setNotShownAttribute:forGlyphRange:") = Void, Bool, NSRange;
overload externalInstanceMethod(static NSTypesetter, static #"setDrawsOutsideLineFragment:forGlyphRange:") = Void, Bool, NSRange;
overload externalInstanceMethod(static NSTypesetter, static #"setLocation:withAdvancements:forStartOfGlyphRange:") = Void, NSPoint, Pointer[Float], NSRange;
overload externalInstanceMethod(static NSTypesetter, static #"setAttachmentSize:forGlyphRange:") = Void, NSSize, NSRange;
overload externalInstanceMethod(static NSTypesetter, static #"setBidiLevels:forGlyphRange:") = Void, Pointer[CUChar], NSRange;

overload externalClassMethod(static NSURL, static #"URLFromPasteboard:") = NSURL, NSPasteboard;
overload externalInstanceMethod(static NSURL, static #"writeToPasteboard:") = Void, NSPasteboard;

record NSUserDefaultsController = externalClass(NSController);
overload externalClassMethod(static NSUserDefaultsController, static #"sharedUserDefaultsController") = Id;
overload externalInstanceMethod(static NSUserDefaultsController, static #"initWithDefaults:initialValues:") = Id, NSUserDefaults, NSDictionary;
overload externalInstanceMethod(static NSUserDefaultsController, static #"defaults") = NSUserDefaults;
overload externalInstanceMethod(static NSUserDefaultsController, static #"setInitialValues:") = Void, NSDictionary;
overload externalInstanceMethod(static NSUserDefaultsController, static #"initialValues") = NSDictionary;
overload externalInstanceMethod(static NSUserDefaultsController, static #"setAppliesImmediately:") = Void, Bool;
overload externalInstanceMethod(static NSUserDefaultsController, static #"appliesImmediately") = Bool;
overload externalInstanceMethod(static NSUserDefaultsController, static #"hasUnappliedChanges") = Bool;
overload externalInstanceMethod(static NSUserDefaultsController, static #"values") = Id;
overload externalInstanceMethod(static NSUserDefaultsController, static #"revert:") = Void, Id;
overload externalInstanceMethod(static NSUserDefaultsController, static #"save:") = Void, Id;
overload externalInstanceMethod(static NSUserDefaultsController, static #"revertToInitialValues:") = Void, Id;

record NSView = externalClass(NSResponder);
overload externalInstanceMethod(static NSView, static #"animator") = Id;
overload externalInstanceMethod(static NSView, static #"animations") = NSDictionary;
overload externalInstanceMethod(static NSView, static #"setAnimations:") = Void, NSDictionary;
overload externalInstanceMethod(static NSView, static #"animationForKey:") = Id, NSString;
overload externalClassMethod(static NSView, static #"defaultAnimationForKey:") = Id, NSString;
overload externalInstanceMethod(static NSView, static #"initWithFrame:") = Id, NSRect;
overload externalInstanceMethod(static NSView, static #"window") = NSWindow;
overload externalInstanceMethod(static NSView, static #"superview") = NSView;
overload externalInstanceMethod(static NSView, static #"subviews") = NSArray;
overload externalInstanceMethod(static NSView, static #"isDescendantOf:") = Bool, NSView;
overload externalInstanceMethod(static NSView, static #"ancestorSharedWithView:") = NSView, NSView;
overload externalInstanceMethod(static NSView, static #"opaqueAncestor") = NSView;
overload externalInstanceMethod(static NSView, static #"setHidden:") = Void, Bool;
overload externalInstanceMethod(static NSView, static #"isHidden") = Bool;
overload externalInstanceMethod(static NSView, static #"isHiddenOrHasHiddenAncestor") = Bool;
overload externalInstanceMethod(static NSView, static #"getRectsBeingDrawn:count:") = Void, Pointer[Pointer[NSRect]], Pointer[Int];
overload externalInstanceMethod(static NSView, static #"needsToDrawRect:") = Bool, NSRect;
overload externalInstanceMethod(static NSView, static #"wantsDefaultClipping") = Bool;
overload externalInstanceMethod(static NSView, static #"viewDidHide") = Void;
overload externalInstanceMethod(static NSView, static #"viewDidUnhide") = Void;
overload externalInstanceMethod(static NSView, static #"setSubviews:") = Void, NSArray;
overload externalInstanceMethod(static NSView, static #"addSubview:") = Void, NSView;
overload externalInstanceMethod(static NSView, static #"addSubview:positioned:relativeTo:") = Void, NSView, Int, NSView;
overload externalInstanceMethod(static NSView, static #"sortSubviewsUsingFunction:context:") = Void, CCodePointer[(Id,Id,RawPointer),(Int)], RawPointer;
overload externalInstanceMethod(static NSView, static #"viewWillMoveToWindow:") = Void, NSWindow;
overload externalInstanceMethod(static NSView, static #"viewDidMoveToWindow") = Void;
overload externalInstanceMethod(static NSView, static #"viewWillMoveToSuperview:") = Void, NSView;
overload externalInstanceMethod(static NSView, static #"viewDidMoveToSuperview") = Void;
overload externalInstanceMethod(static NSView, static #"didAddSubview:") = Void, NSView;
overload externalInstanceMethod(static NSView, static #"willRemoveSubview:") = Void, NSView;
overload externalInstanceMethod(static NSView, static #"removeFromSuperview") = Void;
overload externalInstanceMethod(static NSView, static #"replaceSubview:with:") = Void, NSView, NSView;
overload externalInstanceMethod(static NSView, static #"removeFromSuperviewWithoutNeedingDisplay") = Void;
overload externalInstanceMethod(static NSView, static #"setPostsFrameChangedNotifications:") = Void, Bool;
overload externalInstanceMethod(static NSView, static #"postsFrameChangedNotifications") = Bool;
overload externalInstanceMethod(static NSView, static #"resizeSubviewsWithOldSize:") = Void, NSSize;
overload externalInstanceMethod(static NSView, static #"resizeWithOldSuperviewSize:") = Void, NSSize;
overload externalInstanceMethod(static NSView, static #"setAutoresizesSubviews:") = Void, Bool;
overload externalInstanceMethod(static NSView, static #"autoresizesSubviews") = Bool;
overload externalInstanceMethod(static NSView, static #"setAutoresizingMask:") = Void, UInt;
overload externalInstanceMethod(static NSView, static #"autoresizingMask") = UInt;
overload externalInstanceMethod(static NSView, static #"setFrameOrigin:") = Void, NSPoint;
overload externalInstanceMethod(static NSView, static #"setFrameSize:") = Void, NSSize;
overload externalInstanceMethod(static NSView, static #"setFrame:") = Void, NSRect;
overload externalInstanceMethod(static NSView, static #"frame") = NSRect;
overload externalInstanceMethod(static NSView, static #"setFrameRotation:") = Void, Float;
overload externalInstanceMethod(static NSView, static #"frameRotation") = Float;
overload externalInstanceMethod(static NSView, static #"setFrameCenterRotation:") = Void, Float;
overload externalInstanceMethod(static NSView, static #"frameCenterRotation") = Float;
overload externalInstanceMethod(static NSView, static #"setBoundsOrigin:") = Void, NSPoint;
overload externalInstanceMethod(static NSView, static #"setBoundsSize:") = Void, NSSize;
overload externalInstanceMethod(static NSView, static #"setBoundsRotation:") = Void, Float;
overload externalInstanceMethod(static NSView, static #"boundsRotation") = Float;
overload externalInstanceMethod(static NSView, static #"translateOriginToPoint:") = Void, NSPoint;
overload externalInstanceMethod(static NSView, static #"scaleUnitSquareToSize:") = Void, NSSize;
overload externalInstanceMethod(static NSView, static #"rotateByAngle:") = Void, Float;
overload externalInstanceMethod(static NSView, static #"setBounds:") = Void, NSRect;
overload externalInstanceMethod(static NSView, static #"bounds") = NSRect;
overload externalInstanceMethod(static NSView, static #"isFlipped") = Bool;
overload externalInstanceMethod(static NSView, static #"isRotatedFromBase") = Bool;
overload externalInstanceMethod(static NSView, static #"isRotatedOrScaledFromBase") = Bool;
overload externalInstanceMethod(static NSView, static #"isOpaque") = Bool;
overload externalInstanceMethod(static NSView, static #"convertPoint:fromView:") = NSPoint, NSPoint, NSView;
overload externalInstanceMethod(static NSView, static #"convertPoint:toView:") = NSPoint, NSPoint, NSView;
overload externalInstanceMethod(static NSView, static #"convertSize:fromView:") = NSSize, NSSize, NSView;
overload externalInstanceMethod(static NSView, static #"convertSize:toView:") = NSSize, NSSize, NSView;
overload externalInstanceMethod(static NSView, static #"convertRect:fromView:") = NSRect, NSRect, NSView;
overload externalInstanceMethod(static NSView, static #"convertRect:toView:") = NSRect, NSRect, NSView;
overload externalInstanceMethod(static NSView, static #"centerScanRect:") = NSRect, NSRect;
overload externalInstanceMethod(static NSView, static #"convertPointToBase:") = NSPoint, NSPoint;
overload externalInstanceMethod(static NSView, static #"convertPointFromBase:") = NSPoint, NSPoint;
overload externalInstanceMethod(static NSView, static #"convertSizeToBase:") = NSSize, NSSize;
overload externalInstanceMethod(static NSView, static #"convertSizeFromBase:") = NSSize, NSSize;
overload externalInstanceMethod(static NSView, static #"convertRectToBase:") = NSRect, NSRect;
overload externalInstanceMethod(static NSView, static #"convertRectFromBase:") = NSRect, NSRect;
overload externalInstanceMethod(static NSView, static #"canDrawConcurrently") = Bool;
overload externalInstanceMethod(static NSView, static #"setCanDrawConcurrently:") = Void, Bool;
overload externalInstanceMethod(static NSView, static #"canDraw") = Bool;
overload externalInstanceMethod(static NSView, static #"setNeedsDisplay:") = Void, Bool;
overload externalInstanceMethod(static NSView, static #"setNeedsDisplayInRect:") = Void, NSRect;
overload externalInstanceMethod(static NSView, static #"needsDisplay") = Bool;
overload externalInstanceMethod(static NSView, static #"lockFocus") = Void;
overload externalInstanceMethod(static NSView, static #"unlockFocus") = Void;
overload externalInstanceMethod(static NSView, static #"lockFocusIfCanDraw") = Bool;
overload externalInstanceMethod(static NSView, static #"lockFocusIfCanDrawInContext:") = Bool, NSGraphicsContext;
overload externalClassMethod(static NSView, static #"focusView") = NSView;
overload externalInstanceMethod(static NSView, static #"visibleRect") = NSRect;
overload externalInstanceMethod(static NSView, static #"display") = Void;
overload externalInstanceMethod(static NSView, static #"displayIfNeeded") = Void;
overload externalInstanceMethod(static NSView, static #"displayIfNeededIgnoringOpacity") = Void;
overload externalInstanceMethod(static NSView, static #"displayRect:") = Void, NSRect;
overload externalInstanceMethod(static NSView, static #"displayIfNeededInRect:") = Void, NSRect;
overload externalInstanceMethod(static NSView, static #"displayRectIgnoringOpacity:") = Void, NSRect;
overload externalInstanceMethod(static NSView, static #"displayIfNeededInRectIgnoringOpacity:") = Void, NSRect;
overload externalInstanceMethod(static NSView, static #"drawRect:") = Void, NSRect;
overload externalInstanceMethod(static NSView, static #"displayRectIgnoringOpacity:inContext:") = Void, NSRect, NSGraphicsContext;
overload externalInstanceMethod(static NSView, static #"bitmapImageRepForCachingDisplayInRect:") = NSBitmapImageRep, NSRect;
overload externalInstanceMethod(static NSView, static #"cacheDisplayInRect:toBitmapImageRep:") = Void, NSRect, NSBitmapImageRep;
overload externalInstanceMethod(static NSView, static #"viewWillDraw") = Void;
overload externalInstanceMethod(static NSView, static #"gState") = Int;
overload externalInstanceMethod(static NSView, static #"allocateGState") = Void;
overload externalInstanceMethod(static NSView, static #"releaseGState") = Void;
overload externalInstanceMethod(static NSView, static #"setUpGState") = Void;
overload externalInstanceMethod(static NSView, static #"renewGState") = Void;
overload externalInstanceMethod(static NSView, static #"scrollPoint:") = Void, NSPoint;
overload externalInstanceMethod(static NSView, static #"scrollRectToVisible:") = Bool, NSRect;
overload externalInstanceMethod(static NSView, static #"autoscroll:") = Bool, NSEvent;
overload externalInstanceMethod(static NSView, static #"adjustScroll:") = NSRect, NSRect;
overload externalInstanceMethod(static NSView, static #"scrollRect:by:") = Void, NSRect, NSSize;
overload externalInstanceMethod(static NSView, static #"translateRectsNeedingDisplayInRect:by:") = Void, NSRect, NSSize;
overload externalInstanceMethod(static NSView, static #"hitTest:") = NSView, NSPoint;
overload externalInstanceMethod(static NSView, static #"mouse:inRect:") = Bool, NSPoint, NSRect;
overload externalInstanceMethod(static NSView, static #"viewWithTag:") = Id, Int;
overload externalInstanceMethod(static NSView, static #"tag") = Int;
overload externalInstanceMethod(static NSView, static #"performKeyEquivalent:") = Bool, NSEvent;
overload externalInstanceMethod(static NSView, static #"acceptsFirstMouse:") = Bool, NSEvent;
overload externalInstanceMethod(static NSView, static #"shouldDelayWindowOrderingForEvent:") = Bool, NSEvent;
overload externalInstanceMethod(static NSView, static #"needsPanelToBecomeKey") = Bool;
overload externalInstanceMethod(static NSView, static #"mouseDownCanMoveWindow") = Bool;
overload externalInstanceMethod(static NSView, static #"setAcceptsTouchEvents:") = Void, Bool;
overload externalInstanceMethod(static NSView, static #"acceptsTouchEvents") = Bool;
overload externalInstanceMethod(static NSView, static #"setWantsRestingTouches:") = Void, Bool;
overload externalInstanceMethod(static NSView, static #"wantsRestingTouches") = Bool;
overload externalInstanceMethod(static NSView, static #"addCursorRect:cursor:") = Void, NSRect, NSCursor;
overload externalInstanceMethod(static NSView, static #"removeCursorRect:cursor:") = Void, NSRect, NSCursor;
overload externalInstanceMethod(static NSView, static #"discardCursorRects") = Void;
overload externalInstanceMethod(static NSView, static #"resetCursorRects") = Void;
overload externalInstanceMethod(static NSView, static #"addTrackingRect:owner:userData:assumeInside:") = Int, NSRect, Id, RawPointer, Bool;
overload externalInstanceMethod(static NSView, static #"removeTrackingRect:") = Void, Int;
overload externalInstanceMethod(static NSView, static #"makeBackingLayer") = CALayer;
overload externalInstanceMethod(static NSView, static #"layerContentsRedrawPolicy") = Int;
overload externalInstanceMethod(static NSView, static #"setLayerContentsRedrawPolicy:") = Void, Int;
overload externalInstanceMethod(static NSView, static #"layerContentsPlacement") = Int;
overload externalInstanceMethod(static NSView, static #"setLayerContentsPlacement:") = Void, Int;
overload externalInstanceMethod(static NSView, static #"setWantsLayer:") = Void, Bool;
overload externalInstanceMethod(static NSView, static #"wantsLayer") = Bool;
overload externalInstanceMethod(static NSView, static #"setLayer:") = Void, CALayer;
overload externalInstanceMethod(static NSView, static #"layer") = CALayer;
overload externalInstanceMethod(static NSView, static #"setAlphaValue:") = Void, Float;
overload externalInstanceMethod(static NSView, static #"alphaValue") = Float;
overload externalInstanceMethod(static NSView, static #"setBackgroundFilters:") = Void, NSArray;
overload externalInstanceMethod(static NSView, static #"backgroundFilters") = NSArray;
overload externalInstanceMethod(static NSView, static #"setCompositingFilter:") = Void, CIFilter;
overload externalInstanceMethod(static NSView, static #"compositingFilter") = CIFilter;
overload externalInstanceMethod(static NSView, static #"setContentFilters:") = Void, NSArray;
overload externalInstanceMethod(static NSView, static #"contentFilters") = NSArray;
overload externalInstanceMethod(static NSView, static #"setShadow:") = Void, NSShadow;
overload externalInstanceMethod(static NSView, static #"shadow") = NSShadow;
overload externalInstanceMethod(static NSView, static #"addTrackingArea:") = Void, NSTrackingArea;
overload externalInstanceMethod(static NSView, static #"removeTrackingArea:") = Void, NSTrackingArea;
overload externalInstanceMethod(static NSView, static #"trackingAreas") = NSArray;
overload externalInstanceMethod(static NSView, static #"updateTrackingAreas") = Void;
overload externalInstanceMethod(static NSView, static #"shouldDrawColor") = Bool;
overload externalInstanceMethod(static NSView, static #"setPostsBoundsChangedNotifications:") = Void, Bool;
overload externalInstanceMethod(static NSView, static #"postsBoundsChangedNotifications") = Bool;
overload externalInstanceMethod(static NSView, static #"enclosingScrollView") = NSScrollView;
overload externalInstanceMethod(static NSView, static #"menuForEvent:") = NSMenu, NSEvent;
overload externalClassMethod(static NSView, static #"defaultMenu") = NSMenu;
overload externalInstanceMethod(static NSView, static #"setToolTip:") = Void, NSString;
overload externalInstanceMethod(static NSView, static #"toolTip") = NSString;
overload externalInstanceMethod(static NSView, static #"addToolTipRect:owner:userData:") = Int, NSRect, Id, RawPointer;
overload externalInstanceMethod(static NSView, static #"removeToolTip:") = Void, Int;
overload externalInstanceMethod(static NSView, static #"removeAllToolTips") = Void;
overload externalInstanceMethod(static NSView, static #"viewWillStartLiveResize") = Void;
overload externalInstanceMethod(static NSView, static #"viewDidEndLiveResize") = Void;
overload externalInstanceMethod(static NSView, static #"inLiveResize") = Bool;
overload externalInstanceMethod(static NSView, static #"preservesContentDuringLiveResize") = Bool;
overload externalInstanceMethod(static NSView, static #"rectPreservedDuringLiveResize") = NSRect;
overload externalInstanceMethod(static NSView, static #"getRectsExposedDuringLiveResize:count:") = Void, Pointer[NSRect], Pointer[Int];
overload externalInstanceMethod(static NSView, static #"inputContext") = NSTextInputContext;
overload externalInstanceMethod(static NSView, static #"performMnemonic:") = Bool, NSString;
overload externalInstanceMethod(static NSView, static #"setNextKeyView:") = Void, NSView;
overload externalInstanceMethod(static NSView, static #"nextKeyView") = NSView;
overload externalInstanceMethod(static NSView, static #"previousKeyView") = NSView;
overload externalInstanceMethod(static NSView, static #"nextValidKeyView") = NSView;
overload externalInstanceMethod(static NSView, static #"previousValidKeyView") = NSView;
overload externalInstanceMethod(static NSView, static #"canBecomeKeyView") = Bool;
overload externalInstanceMethod(static NSView, static #"setKeyboardFocusRingNeedsDisplayInRect:") = Void, NSRect;
overload externalInstanceMethod(static NSView, static #"setFocusRingType:") = Void, UInt;
overload externalInstanceMethod(static NSView, static #"focusRingType") = UInt;
overload externalClassMethod(static NSView, static #"defaultFocusRingType") = UInt;
overload externalInstanceMethod(static NSView, static #"writeEPSInsideRect:toPasteboard:") = Void, NSRect, NSPasteboard;
overload externalInstanceMethod(static NSView, static #"dataWithEPSInsideRect:") = NSData, NSRect;
overload externalInstanceMethod(static NSView, static #"writePDFInsideRect:toPasteboard:") = Void, NSRect, NSPasteboard;
overload externalInstanceMethod(static NSView, static #"dataWithPDFInsideRect:") = NSData, NSRect;
overload externalInstanceMethod(static NSView, static #"print:") = Void, Id;
overload externalInstanceMethod(static NSView, static #"knowsPageRange:") = Bool, NSRangePointer;
overload externalInstanceMethod(static NSView, static #"heightAdjustLimit") = Float;
overload externalInstanceMethod(static NSView, static #"widthAdjustLimit") = Float;
overload externalInstanceMethod(static NSView, static #"adjustPageWidthNew:left:right:limit:") = Void, Pointer[Float], Float, Float, Float;
overload externalInstanceMethod(static NSView, static #"adjustPageHeightNew:top:bottom:limit:") = Void, Pointer[Float], Float, Float, Float;
overload externalInstanceMethod(static NSView, static #"rectForPage:") = NSRect, Int;
overload externalInstanceMethod(static NSView, static #"locationOfPrintRect:") = NSPoint, NSRect;
overload externalInstanceMethod(static NSView, static #"drawPageBorderWithSize:") = Void, NSSize;
overload externalInstanceMethod(static NSView, static #"pageHeader") = NSAttributedString;
overload externalInstanceMethod(static NSView, static #"pageFooter") = NSAttributedString;
overload externalInstanceMethod(static NSView, static #"drawSheetBorderWithSize:") = Void, NSSize;
overload externalInstanceMethod(static NSView, static #"printJobTitle") = NSString;
overload externalInstanceMethod(static NSView, static #"beginDocument") = Void;
overload externalInstanceMethod(static NSView, static #"endDocument") = Void;
overload externalInstanceMethod(static NSView, static #"beginPageInRect:atPlacement:") = Void, NSRect, NSPoint;
overload externalInstanceMethod(static NSView, static #"endPage") = Void;
overload externalInstanceMethod(static NSView, static #"dragImage:at:offset:event:pasteboard:source:slideBack:") = Void, NSImage, NSPoint, NSSize, NSEvent, NSPasteboard, Id, Bool;
overload externalInstanceMethod(static NSView, static #"registeredDraggedTypes") = NSArray;
overload externalInstanceMethod(static NSView, static #"registerForDraggedTypes:") = Void, NSArray;
overload externalInstanceMethod(static NSView, static #"unregisterDraggedTypes") = Void;
overload externalInstanceMethod(static NSView, static #"dragFile:fromRect:slideBack:event:") = Bool, NSString, NSRect, Bool, NSEvent;
overload externalInstanceMethod(static NSView, static #"dragPromisedFilesOfTypes:fromRect:source:slideBack:event:") = Bool, NSArray, NSRect, Id, Bool, NSEvent;
overload externalInstanceMethod(static NSView, static #"enterFullScreenMode:withOptions:") = Bool, NSScreen, NSDictionary;
overload externalInstanceMethod(static NSView, static #"exitFullScreenModeWithOptions:") = Void, NSDictionary;
overload externalInstanceMethod(static NSView, static #"isInFullScreenMode") = Bool;
overload externalInstanceMethod(static NSView, static #"showDefinitionForAttributedString:atPoint:") = Void, NSAttributedString, NSPoint;
overload externalInstanceMethod(static NSView, static #"showDefinitionForAttributedString:range:options:baselineOriginProvider:") = Void, NSAttributedString, NSRange, NSDictionary, UnknownType;
overload externalInstanceMethod(static NSView, static #"reflectScrolledClipView:") = Void, NSClipView;
overload externalInstanceMethod(static NSView, static #"scrollClipView:toPoint:") = Void, NSClipView, NSPoint;
overload externalInstanceMethod(static NSView, static #"enclosingMenuItem") = NSMenuItem;
overload externalInstanceMethod(static NSView, static #"rulerView:shouldMoveMarker:") = Bool, NSRulerView, NSRulerMarker;
overload externalInstanceMethod(static NSView, static #"rulerView:willMoveMarker:toLocation:") = Float, NSRulerView, NSRulerMarker, Float;
overload externalInstanceMethod(static NSView, static #"rulerView:didMoveMarker:") = Void, NSRulerView, NSRulerMarker;
overload externalInstanceMethod(static NSView, static #"rulerView:shouldRemoveMarker:") = Bool, NSRulerView, NSRulerMarker;
overload externalInstanceMethod(static NSView, static #"rulerView:didRemoveMarker:") = Void, NSRulerView, NSRulerMarker;
overload externalInstanceMethod(static NSView, static #"rulerView:shouldAddMarker:") = Bool, NSRulerView, NSRulerMarker;
overload externalInstanceMethod(static NSView, static #"rulerView:willAddMarker:atLocation:") = Float, NSRulerView, NSRulerMarker, Float;
overload externalInstanceMethod(static NSView, static #"rulerView:didAddMarker:") = Void, NSRulerView, NSRulerMarker;
overload externalInstanceMethod(static NSView, static #"rulerView:handleMouseDown:") = Void, NSRulerView, NSEvent;
overload externalInstanceMethod(static NSView, static #"rulerView:willSetClientView:") = Void, NSRulerView, NSView;

record NSViewAnimation = externalClass(NSAnimation);
overload externalInstanceMethod(static NSViewAnimation, static #"initWithViewAnimations:") = Id, NSArray;
overload externalInstanceMethod(static NSViewAnimation, static #"viewAnimations") = NSArray;
overload externalInstanceMethod(static NSViewAnimation, static #"setViewAnimations:") = Void, NSArray;

record NSViewController = externalClass(NSResponder);
overload externalInstanceMethod(static NSViewController, static #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static NSViewController, static #"initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(static NSViewController, static #"initWithNibName:bundle:") = Id, NSString, NSBundle;
overload externalInstanceMethod(static NSViewController, static #"setRepresentedObject:") = Void, Id;
overload externalInstanceMethod(static NSViewController, static #"representedObject") = Id;
overload externalInstanceMethod(static NSViewController, static #"setTitle:") = Void, NSString;
overload externalInstanceMethod(static NSViewController, static #"title") = NSString;
overload externalInstanceMethod(static NSViewController, static #"view") = NSView;
overload externalInstanceMethod(static NSViewController, static #"loadView") = Void;
overload externalInstanceMethod(static NSViewController, static #"nibName") = NSString;
overload externalInstanceMethod(static NSViewController, static #"nibBundle") = NSBundle;
overload externalInstanceMethod(static NSViewController, static #"setView:") = Void, NSView;
overload externalInstanceMethod(static NSViewController, static #"commitEditingWithDelegate:didCommitSelector:contextInfo:") = Void, Id, SelectorHandle, RawPointer;
overload externalInstanceMethod(static NSViewController, static #"commitEditing") = Bool;
overload externalInstanceMethod(static NSViewController, static #"discardEditing") = Void;

record NSWindow = externalClass(NSResponder);
overload externalInstanceMethod(static NSWindow, static #"animator") = Id;
overload externalInstanceMethod(static NSWindow, static #"animations") = NSDictionary;
overload externalInstanceMethod(static NSWindow, static #"setAnimations:") = Void, NSDictionary;
overload externalInstanceMethod(static NSWindow, static #"animationForKey:") = Id, NSString;
overload externalClassMethod(static NSWindow, static #"defaultAnimationForKey:") = Id, NSString;
overload externalInstanceMethod(static NSWindow, static #"validateUserInterfaceItem:") = Bool, Id;
overload externalClassMethod(static NSWindow, static #"frameRectForContentRect:styleMask:") = NSRect, NSRect, UInt;
overload externalClassMethod(static NSWindow, static #"contentRectForFrameRect:styleMask:") = NSRect, NSRect, UInt;
overload externalClassMethod(static NSWindow, static #"minFrameWidthWithTitle:styleMask:") = Float, NSString, UInt;
overload externalClassMethod(static NSWindow, static #"defaultDepthLimit") = Int;
overload externalInstanceMethod(static NSWindow, static #"frameRectForContentRect:") = NSRect, NSRect;
overload externalInstanceMethod(static NSWindow, static #"contentRectForFrameRect:") = NSRect, NSRect;
overload externalInstanceMethod(static NSWindow, static #"initWithContentRect:styleMask:backing:defer:") = Id, NSRect, UInt, UInt, Bool;
overload externalInstanceMethod(static NSWindow, static #"initWithContentRect:styleMask:backing:defer:screen:") = Id, NSRect, UInt, UInt, Bool, NSScreen;
overload externalInstanceMethod(static NSWindow, static #"title") = NSString;
overload externalInstanceMethod(static NSWindow, static #"setTitle:") = Void, NSString;
overload externalInstanceMethod(static NSWindow, static #"setRepresentedURL:") = Void, NSURL;
overload externalInstanceMethod(static NSWindow, static #"representedURL") = NSURL;
overload externalInstanceMethod(static NSWindow, static #"representedFilename") = NSString;
overload externalInstanceMethod(static NSWindow, static #"setRepresentedFilename:") = Void, NSString;
overload externalInstanceMethod(static NSWindow, static #"setTitleWithRepresentedFilename:") = Void, NSString;
overload externalInstanceMethod(static NSWindow, static #"setExcludedFromWindowsMenu:") = Void, Bool;
overload externalInstanceMethod(static NSWindow, static #"isExcludedFromWindowsMenu") = Bool;
overload externalInstanceMethod(static NSWindow, static #"setContentView:") = Void, NSView;
overload externalInstanceMethod(static NSWindow, static #"contentView") = Id;
overload externalInstanceMethod(static NSWindow, static #"setDelegate:") = Void, Id;
overload externalInstanceMethod(static NSWindow, static #"delegate") = Id;
overload externalInstanceMethod(static NSWindow, static #"windowNumber") = Int;
overload externalInstanceMethod(static NSWindow, static #"styleMask") = UInt;
overload externalInstanceMethod(static NSWindow, static #"setStyleMask:") = Void, UInt;
overload externalInstanceMethod(static NSWindow, static #"fieldEditor:forObject:") = NSText, Bool, Id;
overload externalInstanceMethod(static NSWindow, static #"endEditingFor:") = Void, Id;
overload externalInstanceMethod(static NSWindow, static #"constrainFrameRect:toScreen:") = NSRect, NSRect, NSScreen;
overload externalInstanceMethod(static NSWindow, static #"setFrame:display:") = Void, NSRect, Bool;
overload externalInstanceMethod(static NSWindow, static #"setContentSize:") = Void, NSSize;
overload externalInstanceMethod(static NSWindow, static #"setFrameOrigin:") = Void, NSPoint;
overload externalInstanceMethod(static NSWindow, static #"setFrameTopLeftPoint:") = Void, NSPoint;
overload externalInstanceMethod(static NSWindow, static #"cascadeTopLeftFromPoint:") = NSPoint, NSPoint;
overload externalInstanceMethod(static NSWindow, static #"frame") = NSRect;
overload externalInstanceMethod(static NSWindow, static #"animationResizeTime:") = Double, NSRect;
overload externalInstanceMethod(static NSWindow, static #"setFrame:display:animate:") = Void, NSRect, Bool, Bool;
overload externalInstanceMethod(static NSWindow, static #"inLiveResize") = Bool;
overload externalInstanceMethod(static NSWindow, static #"setShowsResizeIndicator:") = Void, Bool;
overload externalInstanceMethod(static NSWindow, static #"showsResizeIndicator") = Bool;
overload externalInstanceMethod(static NSWindow, static #"setResizeIncrements:") = Void, NSSize;
overload externalInstanceMethod(static NSWindow, static #"resizeIncrements") = NSSize;
overload externalInstanceMethod(static NSWindow, static #"setAspectRatio:") = Void, NSSize;
overload externalInstanceMethod(static NSWindow, static #"aspectRatio") = NSSize;
overload externalInstanceMethod(static NSWindow, static #"setContentResizeIncrements:") = Void, NSSize;
overload externalInstanceMethod(static NSWindow, static #"contentResizeIncrements") = NSSize;
overload externalInstanceMethod(static NSWindow, static #"setContentAspectRatio:") = Void, NSSize;
overload externalInstanceMethod(static NSWindow, static #"contentAspectRatio") = NSSize;
overload externalInstanceMethod(static NSWindow, static #"useOptimizedDrawing:") = Void, Bool;
overload externalInstanceMethod(static NSWindow, static #"disableFlushWindow") = Void;
overload externalInstanceMethod(static NSWindow, static #"enableFlushWindow") = Void;
overload externalInstanceMethod(static NSWindow, static #"isFlushWindowDisabled") = Bool;
overload externalInstanceMethod(static NSWindow, static #"flushWindow") = Void;
overload externalInstanceMethod(static NSWindow, static #"flushWindowIfNeeded") = Void;
overload externalInstanceMethod(static NSWindow, static #"setViewsNeedDisplay:") = Void, Bool;
overload externalInstanceMethod(static NSWindow, static #"viewsNeedDisplay") = Bool;
overload externalInstanceMethod(static NSWindow, static #"displayIfNeeded") = Void;
overload externalInstanceMethod(static NSWindow, static #"display") = Void;
overload externalInstanceMethod(static NSWindow, static #"setAutodisplay:") = Void, Bool;
overload externalInstanceMethod(static NSWindow, static #"isAutodisplay") = Bool;
overload externalInstanceMethod(static NSWindow, static #"preservesContentDuringLiveResize") = Bool;
overload externalInstanceMethod(static NSWindow, static #"setPreservesContentDuringLiveResize:") = Void, Bool;
overload externalInstanceMethod(static NSWindow, static #"update") = Void;
overload externalInstanceMethod(static NSWindow, static #"makeFirstResponder:") = Bool, NSResponder;
overload externalInstanceMethod(static NSWindow, static #"firstResponder") = NSResponder;
overload externalInstanceMethod(static NSWindow, static #"resizeFlags") = Int;
overload externalInstanceMethod(static NSWindow, static #"keyDown:") = Void, NSEvent;
overload externalInstanceMethod(static NSWindow, static #"close") = Void;
overload externalInstanceMethod(static NSWindow, static #"setReleasedWhenClosed:") = Void, Bool;
overload externalInstanceMethod(static NSWindow, static #"isReleasedWhenClosed") = Bool;
overload externalInstanceMethod(static NSWindow, static #"miniaturize:") = Void, Id;
overload externalInstanceMethod(static NSWindow, static #"deminiaturize:") = Void, Id;
overload externalInstanceMethod(static NSWindow, static #"isZoomed") = Bool;
overload externalInstanceMethod(static NSWindow, static #"zoom:") = Void, Id;
overload externalInstanceMethod(static NSWindow, static #"isMiniaturized") = Bool;
overload externalInstanceMethod(static NSWindow, static #"tryToPerform:with:") = Bool, SelectorHandle, Id;
overload externalInstanceMethod(static NSWindow, static #"validRequestorForSendType:returnType:") = Id, NSString, NSString;
overload externalInstanceMethod(static NSWindow, static #"setBackgroundColor:") = Void, NSColor;
overload externalInstanceMethod(static NSWindow, static #"backgroundColor") = NSColor;
overload externalInstanceMethod(static NSWindow, static #"setContentBorderThickness:forEdge:") = Void, Float, NSRectEdge;
overload externalInstanceMethod(static NSWindow, static #"contentBorderThicknessForEdge:") = Float, NSRectEdge;
overload externalInstanceMethod(static NSWindow, static #"setAutorecalculatesContentBorderThickness:forEdge:") = Void, Bool, NSRectEdge;
overload externalInstanceMethod(static NSWindow, static #"autorecalculatesContentBorderThicknessForEdge:") = Bool, NSRectEdge;
overload externalInstanceMethod(static NSWindow, static #"setMovable:") = Void, Bool;
overload externalInstanceMethod(static NSWindow, static #"isMovable") = Bool;
overload externalInstanceMethod(static NSWindow, static #"setMovableByWindowBackground:") = Void, Bool;
overload externalInstanceMethod(static NSWindow, static #"isMovableByWindowBackground") = Bool;
overload externalInstanceMethod(static NSWindow, static #"setHidesOnDeactivate:") = Void, Bool;
overload externalInstanceMethod(static NSWindow, static #"hidesOnDeactivate") = Bool;
overload externalInstanceMethod(static NSWindow, static #"setCanHide:") = Void, Bool;
overload externalInstanceMethod(static NSWindow, static #"canHide") = Bool;
overload externalInstanceMethod(static NSWindow, static #"center") = Void;
overload externalInstanceMethod(static NSWindow, static #"makeKeyAndOrderFront:") = Void, Id;
overload externalInstanceMethod(static NSWindow, static #"orderFront:") = Void, Id;
overload externalInstanceMethod(static NSWindow, static #"orderBack:") = Void, Id;
overload externalInstanceMethod(static NSWindow, static #"orderOut:") = Void, Id;
overload externalInstanceMethod(static NSWindow, static #"orderWindow:relativeTo:") = Void, Int, Int;
overload externalInstanceMethod(static NSWindow, static #"orderFrontRegardless") = Void;
overload externalInstanceMethod(static NSWindow, static #"setMiniwindowImage:") = Void, NSImage;
overload externalInstanceMethod(static NSWindow, static #"setMiniwindowTitle:") = Void, NSString;
overload externalInstanceMethod(static NSWindow, static #"miniwindowImage") = NSImage;
overload externalInstanceMethod(static NSWindow, static #"miniwindowTitle") = NSString;
overload externalInstanceMethod(static NSWindow, static #"dockTile") = NSDockTile;
overload externalInstanceMethod(static NSWindow, static #"setDocumentEdited:") = Void, Bool;
overload externalInstanceMethod(static NSWindow, static #"isDocumentEdited") = Bool;
overload externalInstanceMethod(static NSWindow, static #"isVisible") = Bool;
overload externalInstanceMethod(static NSWindow, static #"isKeyWindow") = Bool;
overload externalInstanceMethod(static NSWindow, static #"isMainWindow") = Bool;
overload externalInstanceMethod(static NSWindow, static #"canBecomeKeyWindow") = Bool;
overload externalInstanceMethod(static NSWindow, static #"canBecomeMainWindow") = Bool;
overload externalInstanceMethod(static NSWindow, static #"makeKeyWindow") = Void;
overload externalInstanceMethod(static NSWindow, static #"makeMainWindow") = Void;
overload externalInstanceMethod(static NSWindow, static #"becomeKeyWindow") = Void;
overload externalInstanceMethod(static NSWindow, static #"resignKeyWindow") = Void;
overload externalInstanceMethod(static NSWindow, static #"becomeMainWindow") = Void;
overload externalInstanceMethod(static NSWindow, static #"resignMainWindow") = Void;
overload externalInstanceMethod(static NSWindow, static #"worksWhenModal") = Bool;
overload externalInstanceMethod(static NSWindow, static #"preventsApplicationTerminationWhenModal") = Bool;
overload externalInstanceMethod(static NSWindow, static #"setPreventsApplicationTerminationWhenModal:") = Void, Bool;
overload externalInstanceMethod(static NSWindow, static #"convertBaseToScreen:") = NSPoint, NSPoint;
overload externalInstanceMethod(static NSWindow, static #"convertScreenToBase:") = NSPoint, NSPoint;
overload externalInstanceMethod(static NSWindow, static #"performClose:") = Void, Id;
overload externalInstanceMethod(static NSWindow, static #"performMiniaturize:") = Void, Id;
overload externalInstanceMethod(static NSWindow, static #"performZoom:") = Void, Id;
overload externalInstanceMethod(static NSWindow, static #"gState") = Int;
overload externalInstanceMethod(static NSWindow, static #"setOneShot:") = Void, Bool;
overload externalInstanceMethod(static NSWindow, static #"isOneShot") = Bool;
overload externalInstanceMethod(static NSWindow, static #"dataWithEPSInsideRect:") = NSData, NSRect;
overload externalInstanceMethod(static NSWindow, static #"dataWithPDFInsideRect:") = NSData, NSRect;
overload externalInstanceMethod(static NSWindow, static #"print:") = Void, Id;
overload externalInstanceMethod(static NSWindow, static #"disableCursorRects") = Void;
overload externalInstanceMethod(static NSWindow, static #"enableCursorRects") = Void;
overload externalInstanceMethod(static NSWindow, static #"discardCursorRects") = Void;
overload externalInstanceMethod(static NSWindow, static #"areCursorRectsEnabled") = Bool;
overload externalInstanceMethod(static NSWindow, static #"invalidateCursorRectsForView:") = Void, NSView;
overload externalInstanceMethod(static NSWindow, static #"resetCursorRects") = Void;
overload externalInstanceMethod(static NSWindow, static #"setAllowsToolTipsWhenApplicationIsInactive:") = Void, Bool;
overload externalInstanceMethod(static NSWindow, static #"allowsToolTipsWhenApplicationIsInactive") = Bool;
overload externalInstanceMethod(static NSWindow, static #"setBackingType:") = Void, UInt;
overload externalInstanceMethod(static NSWindow, static #"backingType") = UInt;
overload externalInstanceMethod(static NSWindow, static #"setLevel:") = Void, Int;
overload externalInstanceMethod(static NSWindow, static #"level") = Int;
overload externalInstanceMethod(static NSWindow, static #"setDepthLimit:") = Void, Int;
overload externalInstanceMethod(static NSWindow, static #"depthLimit") = Int;
overload externalInstanceMethod(static NSWindow, static #"setDynamicDepthLimit:") = Void, Bool;
overload externalInstanceMethod(static NSWindow, static #"hasDynamicDepthLimit") = Bool;
overload externalInstanceMethod(static NSWindow, static #"screen") = NSScreen;
overload externalInstanceMethod(static NSWindow, static #"deepestScreen") = NSScreen;
overload externalInstanceMethod(static NSWindow, static #"canStoreColor") = Bool;
overload externalInstanceMethod(static NSWindow, static #"setHasShadow:") = Void, Bool;
overload externalInstanceMethod(static NSWindow, static #"hasShadow") = Bool;
overload externalInstanceMethod(static NSWindow, static #"invalidateShadow") = Void;
overload externalInstanceMethod(static NSWindow, static #"setAlphaValue:") = Void, Float;
overload externalInstanceMethod(static NSWindow, static #"alphaValue") = Float;
overload externalInstanceMethod(static NSWindow, static #"setOpaque:") = Void, Bool;
overload externalInstanceMethod(static NSWindow, static #"isOpaque") = Bool;
overload externalInstanceMethod(static NSWindow, static #"setSharingType:") = Void, UInt;
overload externalInstanceMethod(static NSWindow, static #"sharingType") = UInt;
overload externalInstanceMethod(static NSWindow, static #"setPreferredBackingLocation:") = Void, UInt;
overload externalInstanceMethod(static NSWindow, static #"preferredBackingLocation") = UInt;
overload externalInstanceMethod(static NSWindow, static #"backingLocation") = UInt;
overload externalInstanceMethod(static NSWindow, static #"allowsConcurrentViewDrawing") = Bool;
overload externalInstanceMethod(static NSWindow, static #"setAllowsConcurrentViewDrawing:") = Void, Bool;
overload externalInstanceMethod(static NSWindow, static #"displaysWhenScreenProfileChanges") = Bool;
overload externalInstanceMethod(static NSWindow, static #"setDisplaysWhenScreenProfileChanges:") = Void, Bool;
overload externalInstanceMethod(static NSWindow, static #"disableScreenUpdatesUntilFlush") = Void;
overload externalInstanceMethod(static NSWindow, static #"canBecomeVisibleWithoutLogin") = Bool;
overload externalInstanceMethod(static NSWindow, static #"setCanBecomeVisibleWithoutLogin:") = Void, Bool;
overload externalInstanceMethod(static NSWindow, static #"setCollectionBehavior:") = Void, UInt;
overload externalInstanceMethod(static NSWindow, static #"collectionBehavior") = UInt;
overload externalInstanceMethod(static NSWindow, static #"canBeVisibleOnAllSpaces") = Bool;
overload externalInstanceMethod(static NSWindow, static #"setCanBeVisibleOnAllSpaces:") = Void, Bool;
overload externalInstanceMethod(static NSWindow, static #"isOnActiveSpace") = Bool;
overload externalInstanceMethod(static NSWindow, static #"stringWithSavedFrame") = NSString;
overload externalInstanceMethod(static NSWindow, static #"setFrameFromString:") = Void, NSString;
overload externalInstanceMethod(static NSWindow, static #"saveFrameUsingName:") = Void, NSString;
overload externalInstanceMethod(static NSWindow, static #"setFrameUsingName:force:") = Bool, NSString, Bool;
overload externalInstanceMethod(static NSWindow, static #"setFrameUsingName:") = Bool, NSString;
overload externalInstanceMethod(static NSWindow, static #"setFrameAutosaveName:") = Bool, NSString;
overload externalInstanceMethod(static NSWindow, static #"frameAutosaveName") = NSString;
overload externalClassMethod(static NSWindow, static #"removeFrameUsingName:") = Void, NSString;
overload externalInstanceMethod(static NSWindow, static #"cacheImageInRect:") = Void, NSRect;
overload externalInstanceMethod(static NSWindow, static #"restoreCachedImage") = Void;
overload externalInstanceMethod(static NSWindow, static #"discardCachedImage") = Void;
overload externalInstanceMethod(static NSWindow, static #"minSize") = NSSize;
overload externalInstanceMethod(static NSWindow, static #"maxSize") = NSSize;
overload externalInstanceMethod(static NSWindow, static #"setMinSize:") = Void, NSSize;
overload externalInstanceMethod(static NSWindow, static #"setMaxSize:") = Void, NSSize;
overload externalInstanceMethod(static NSWindow, static #"contentMinSize") = NSSize;
overload externalInstanceMethod(static NSWindow, static #"contentMaxSize") = NSSize;
overload externalInstanceMethod(static NSWindow, static #"setContentMinSize:") = Void, NSSize;
overload externalInstanceMethod(static NSWindow, static #"setContentMaxSize:") = Void, NSSize;
overload externalInstanceMethod(static NSWindow, static #"nextEventMatchingMask:") = NSEvent, UInt;
overload externalInstanceMethod(static NSWindow, static #"nextEventMatchingMask:untilDate:inMode:dequeue:") = NSEvent, UInt, NSDate, NSString, Bool;
overload externalInstanceMethod(static NSWindow, static #"discardEventsMatchingMask:beforeEvent:") = Void, UInt, NSEvent;
overload externalInstanceMethod(static NSWindow, static #"postEvent:atStart:") = Void, NSEvent, Bool;
overload externalInstanceMethod(static NSWindow, static #"currentEvent") = NSEvent;
overload externalInstanceMethod(static NSWindow, static #"setAcceptsMouseMovedEvents:") = Void, Bool;
overload externalInstanceMethod(static NSWindow, static #"acceptsMouseMovedEvents") = Bool;
overload externalInstanceMethod(static NSWindow, static #"setIgnoresMouseEvents:") = Void, Bool;
overload externalInstanceMethod(static NSWindow, static #"ignoresMouseEvents") = Bool;
overload externalInstanceMethod(static NSWindow, static #"deviceDescription") = NSDictionary;
overload externalInstanceMethod(static NSWindow, static #"sendEvent:") = Void, NSEvent;
overload externalInstanceMethod(static NSWindow, static #"mouseLocationOutsideOfEventStream") = NSPoint;
overload externalClassMethod(static NSWindow, static #"menuChanged:") = Void, NSMenu;
overload externalInstanceMethod(static NSWindow, static #"windowController") = Id;
overload externalInstanceMethod(static NSWindow, static #"setWindowController:") = Void, NSWindowController;
overload externalInstanceMethod(static NSWindow, static #"isSheet") = Bool;
overload externalInstanceMethod(static NSWindow, static #"attachedSheet") = NSWindow;
overload externalClassMethod(static NSWindow, static #"standardWindowButton:forStyleMask:") = NSButton, UInt, UInt;
overload externalInstanceMethod(static NSWindow, static #"standardWindowButton:") = NSButton, UInt;
overload externalInstanceMethod(static NSWindow, static #"addChildWindow:ordered:") = Void, NSWindow, Int;
overload externalInstanceMethod(static NSWindow, static #"removeChildWindow:") = Void, NSWindow;
overload externalInstanceMethod(static NSWindow, static #"childWindows") = NSArray;
overload externalInstanceMethod(static NSWindow, static #"parentWindow") = NSWindow;
overload externalInstanceMethod(static NSWindow, static #"setParentWindow:") = Void, NSWindow;
overload externalInstanceMethod(static NSWindow, static #"graphicsContext") = NSGraphicsContext;
overload externalInstanceMethod(static NSWindow, static #"userSpaceScaleFactor") = Float;
overload externalInstanceMethod(static NSWindow, static #"setColorSpace:") = Void, NSColorSpace;
overload externalInstanceMethod(static NSWindow, static #"colorSpace") = NSColorSpace;
overload externalClassMethod(static NSWindow, static #"windowNumbersWithOptions:") = NSArray, UInt;
overload externalClassMethod(static NSWindow, static #"windowNumberAtPoint:belowWindowWithWindowNumber:") = Int, NSPoint, Int;
overload externalInstanceMethod(static NSWindow, static #"setInitialFirstResponder:") = Void, NSView;
overload externalInstanceMethod(static NSWindow, static #"initialFirstResponder") = NSView;
overload externalInstanceMethod(static NSWindow, static #"selectNextKeyView:") = Void, Id;
overload externalInstanceMethod(static NSWindow, static #"selectPreviousKeyView:") = Void, Id;
overload externalInstanceMethod(static NSWindow, static #"selectKeyViewFollowingView:") = Void, NSView;
overload externalInstanceMethod(static NSWindow, static #"selectKeyViewPrecedingView:") = Void, NSView;
overload externalInstanceMethod(static NSWindow, static #"keyViewSelectionDirection") = UInt;
overload externalInstanceMethod(static NSWindow, static #"setDefaultButtonCell:") = Void, NSButtonCell;
overload externalInstanceMethod(static NSWindow, static #"defaultButtonCell") = NSButtonCell;
overload externalInstanceMethod(static NSWindow, static #"disableKeyEquivalentForDefaultButtonCell") = Void;
overload externalInstanceMethod(static NSWindow, static #"enableKeyEquivalentForDefaultButtonCell") = Void;
overload externalInstanceMethod(static NSWindow, static #"setAutorecalculatesKeyViewLoop:") = Void, Bool;
overload externalInstanceMethod(static NSWindow, static #"autorecalculatesKeyViewLoop") = Bool;
overload externalInstanceMethod(static NSWindow, static #"recalculateKeyViewLoop") = Void;
overload externalInstanceMethod(static NSWindow, static #"setToolbar:") = Void, NSToolbar;
overload externalInstanceMethod(static NSWindow, static #"toolbar") = NSToolbar;
overload externalInstanceMethod(static NSWindow, static #"toggleToolbarShown:") = Void, Id;
overload externalInstanceMethod(static NSWindow, static #"runToolbarCustomizationPalette:") = Void, Id;
overload externalInstanceMethod(static NSWindow, static #"setShowsToolbarButton:") = Void, Bool;
overload externalInstanceMethod(static NSWindow, static #"showsToolbarButton") = Bool;
overload externalInstanceMethod(static NSWindow, static #"dragImage:at:offset:event:pasteboard:source:slideBack:") = Void, NSImage, NSPoint, NSSize, NSEvent, NSPasteboard, Id, Bool;
overload externalInstanceMethod(static NSWindow, static #"registerForDraggedTypes:") = Void, NSArray;
overload externalInstanceMethod(static NSWindow, static #"unregisterDraggedTypes") = Void;
overload externalInstanceMethod(static NSWindow, static #"initWithWindowRef:") = NSWindow, RawPointer;
overload externalInstanceMethod(static NSWindow, static #"windowRef") = RawPointer;
overload externalInstanceMethod(static NSWindow, static #"drawers") = NSArray;
overload externalInstanceMethod(static NSWindow, static #"hasCloseBox") = Bool;
overload externalInstanceMethod(static NSWindow, static #"hasTitleBar") = Bool;
overload externalInstanceMethod(static NSWindow, static #"isFloatingPanel") = Bool;
overload externalInstanceMethod(static NSWindow, static #"isMiniaturizable") = Bool;
overload externalInstanceMethod(static NSWindow, static #"isModalPanel") = Bool;
overload externalInstanceMethod(static NSWindow, static #"isResizable") = Bool;
overload externalInstanceMethod(static NSWindow, static #"isZoomable") = Bool;
overload externalInstanceMethod(static NSWindow, static #"orderedIndex") = Int;
overload externalInstanceMethod(static NSWindow, static #"setIsMiniaturized:") = Void, Bool;
overload externalInstanceMethod(static NSWindow, static #"setIsVisible:") = Void, Bool;
overload externalInstanceMethod(static NSWindow, static #"setIsZoomed:") = Void, Bool;
overload externalInstanceMethod(static NSWindow, static #"setOrderedIndex:") = Void, Int;
overload externalInstanceMethod(static NSWindow, static #"handleCloseScriptCommand:") = Id, NSCloseCommand;
overload externalInstanceMethod(static NSWindow, static #"handlePrintScriptCommand:") = Id, NSScriptCommand;
overload externalInstanceMethod(static NSWindow, static #"handleSaveScriptCommand:") = Id, NSScriptCommand;

record NSWindowController = externalClass(NSResponder);
overload externalInstanceMethod(static NSWindowController, static #"encodeWithCoder:") = Void, NSCoder;
overload externalInstanceMethod(static NSWindowController, static #"initWithCoder:") = Id, NSCoder;
overload externalInstanceMethod(static NSWindowController, static #"initWithWindow:") = Id, NSWindow;
overload externalInstanceMethod(static NSWindowController, static #"initWithWindowNibName:") = Id, NSString;
overload externalInstanceMethod(static NSWindowController, static #"initWithWindowNibName:owner:") = Id, NSString, Id;
overload externalInstanceMethod(static NSWindowController, static #"initWithWindowNibPath:owner:") = Id, NSString, Id;
overload externalInstanceMethod(static NSWindowController, static #"windowNibName") = NSString;
overload externalInstanceMethod(static NSWindowController, static #"windowNibPath") = NSString;
overload externalInstanceMethod(static NSWindowController, static #"owner") = Id;
overload externalInstanceMethod(static NSWindowController, static #"setWindowFrameAutosaveName:") = Void, NSString;
overload externalInstanceMethod(static NSWindowController, static #"windowFrameAutosaveName") = NSString;
overload externalInstanceMethod(static NSWindowController, static #"setShouldCascadeWindows:") = Void, Bool;
overload externalInstanceMethod(static NSWindowController, static #"shouldCascadeWindows") = Bool;
overload externalInstanceMethod(static NSWindowController, static #"document") = Id;
overload externalInstanceMethod(static NSWindowController, static #"setDocument:") = Void, NSDocument;
overload externalInstanceMethod(static NSWindowController, static #"setDocumentEdited:") = Void, Bool;
overload externalInstanceMethod(static NSWindowController, static #"setShouldCloseDocument:") = Void, Bool;
overload externalInstanceMethod(static NSWindowController, static #"shouldCloseDocument") = Bool;
overload externalInstanceMethod(static NSWindowController, static #"setWindow:") = Void, NSWindow;
overload externalInstanceMethod(static NSWindowController, static #"window") = NSWindow;
overload externalInstanceMethod(static NSWindowController, static #"synchronizeWindowTitleWithDocumentName") = Void;
overload externalInstanceMethod(static NSWindowController, static #"windowTitleForDocumentDisplayName:") = NSString, NSString;
overload externalInstanceMethod(static NSWindowController, static #"close") = Void;
overload externalInstanceMethod(static NSWindowController, static #"showWindow:") = Void, Id;
overload externalInstanceMethod(static NSWindowController, static #"isWindowLoaded") = Bool;
overload externalInstanceMethod(static NSWindowController, static #"windowWillLoad") = Void;
overload externalInstanceMethod(static NSWindowController, static #"windowDidLoad") = Void;
overload externalInstanceMethod(static NSWindowController, static #"loadWindow") = Void;

record NSWorkspace = externalClass(NSObject);
overload externalClassMethod(static NSWorkspace, static #"sharedWorkspace") = NSWorkspace;
overload externalInstanceMethod(static NSWorkspace, static #"notificationCenter") = NSNotificationCenter;
overload externalInstanceMethod(static NSWorkspace, static #"openFile:") = Bool, NSString;
overload externalInstanceMethod(static NSWorkspace, static #"openFile:withApplication:") = Bool, NSString, NSString;
overload externalInstanceMethod(static NSWorkspace, static #"openFile:withApplication:andDeactivate:") = Bool, NSString, NSString, Bool;
overload externalInstanceMethod(static NSWorkspace, static #"openFile:fromImage:at:inView:") = Bool, NSString, NSImage, NSPoint, NSView;
overload externalInstanceMethod(static NSWorkspace, static #"openURL:") = Bool, NSURL;
overload externalInstanceMethod(static NSWorkspace, static #"launchApplication:") = Bool, NSString;
overload externalInstanceMethod(static NSWorkspace, static #"launchApplicationAtURL:options:configuration:error:") = NSRunningApplication, NSURL, UInt, NSDictionary, Pointer[NSError];
overload externalInstanceMethod(static NSWorkspace, static #"launchApplication:showIcon:autolaunch:") = Bool, NSString, Bool, Bool;
overload externalInstanceMethod(static NSWorkspace, static #"fullPathForApplication:") = NSString, NSString;
overload externalInstanceMethod(static NSWorkspace, static #"selectFile:inFileViewerRootedAtPath:") = Bool, NSString, NSString;
overload externalInstanceMethod(static NSWorkspace, static #"activateFileViewerSelectingURLs:") = Void, NSArray;
overload externalInstanceMethod(static NSWorkspace, static #"showSearchResultsForQueryString:") = Bool, NSString;
overload externalInstanceMethod(static NSWorkspace, static #"noteFileSystemChanged:") = Void, NSString;
overload externalInstanceMethod(static NSWorkspace, static #"getInfoForFile:application:type:") = Bool, NSString, Pointer[NSString], Pointer[NSString];
overload externalInstanceMethod(static NSWorkspace, static #"isFilePackageAtPath:") = Bool, NSString;
overload externalInstanceMethod(static NSWorkspace, static #"iconForFile:") = NSImage, NSString;
overload externalInstanceMethod(static NSWorkspace, static #"iconForFiles:") = NSImage, NSArray;
overload externalInstanceMethod(static NSWorkspace, static #"iconForFileType:") = NSImage, NSString;
overload externalInstanceMethod(static NSWorkspace, static #"setIcon:forFile:options:") = Bool, NSImage, NSString, UInt;
overload externalInstanceMethod(static NSWorkspace, static #"fileLabels") = NSArray;
overload externalInstanceMethod(static NSWorkspace, static #"fileLabelColors") = NSArray;
overload externalInstanceMethod(static NSWorkspace, static #"recycleURLs:completionHandler:") = Void, NSArray, UnknownType;
overload externalInstanceMethod(static NSWorkspace, static #"duplicateURLs:completionHandler:") = Void, NSArray, UnknownType;
overload externalInstanceMethod(static NSWorkspace, static #"getFileSystemInfoForPath:isRemovable:isWritable:isUnmountable:description:type:") = Bool, NSString, Pointer[Bool], Pointer[Bool], Pointer[Bool], Pointer[NSString], Pointer[NSString];
overload externalInstanceMethod(static NSWorkspace, static #"performFileOperation:source:destination:files:tag:") = Bool, NSString, NSString, NSString, NSArray, Pointer[Int];
overload externalInstanceMethod(static NSWorkspace, static #"unmountAndEjectDeviceAtPath:") = Bool, NSString;
overload externalInstanceMethod(static NSWorkspace, static #"unmountAndEjectDeviceAtURL:error:") = Bool, NSURL, Pointer[NSError];
overload externalInstanceMethod(static NSWorkspace, static #"extendPowerOffBy:") = Int, Int;
overload externalInstanceMethod(static NSWorkspace, static #"hideOtherApplications") = Void;
overload externalInstanceMethod(static NSWorkspace, static #"mountedLocalVolumePaths") = NSArray;
overload externalInstanceMethod(static NSWorkspace, static #"mountedRemovableMedia") = NSArray;
overload externalInstanceMethod(static NSWorkspace, static #"URLForApplicationWithBundleIdentifier:") = NSURL, NSString;
overload externalInstanceMethod(static NSWorkspace, static #"URLForApplicationToOpenURL:") = NSURL, NSURL;
overload externalInstanceMethod(static NSWorkspace, static #"absolutePathForAppBundleWithIdentifier:") = NSString, NSString;
overload externalInstanceMethod(static NSWorkspace, static #"launchAppWithBundleIdentifier:options:additionalEventParamDescriptor:launchIdentifier:") = Bool, NSString, UInt, NSAppleEventDescriptor, Pointer[NSNumber];
overload externalInstanceMethod(static NSWorkspace, static #"openURLs:withAppBundleIdentifier:options:additionalEventParamDescriptor:launchIdentifiers:") = Bool, NSArray, NSString, UInt, NSAppleEventDescriptor, Pointer[NSArray];
overload externalInstanceMethod(static NSWorkspace, static #"launchedApplications") = NSArray;
overload externalInstanceMethod(static NSWorkspace, static #"activeApplication") = NSDictionary;
overload externalInstanceMethod(static NSWorkspace, static #"typeOfFile:error:") = NSString, NSString, Pointer[NSError];
overload externalInstanceMethod(static NSWorkspace, static #"localizedDescriptionForType:") = NSString, NSString;
overload externalInstanceMethod(static NSWorkspace, static #"preferredFilenameExtensionForType:") = NSString, NSString;
overload externalInstanceMethod(static NSWorkspace, static #"filenameExtension:isValidForType:") = Bool, NSString, NSString;
overload externalInstanceMethod(static NSWorkspace, static #"type:conformsToType:") = Bool, NSString, NSString;
overload externalInstanceMethod(static NSWorkspace, static #"setDesktopImageURL:forScreen:options:error:") = Bool, NSURL, NSScreen, NSDictionary, Pointer[NSError];
overload externalInstanceMethod(static NSWorkspace, static #"desktopImageURLForScreen:") = NSURL, NSScreen;
overload externalInstanceMethod(static NSWorkspace, static #"desktopImageOptionsForScreen:") = NSDictionary, NSScreen;
overload externalInstanceMethod(static NSWorkspace, static #"openTempFile:") = Bool, NSString;
overload externalInstanceMethod(static NSWorkspace, static #"findApplications") = Void;
overload externalInstanceMethod(static NSWorkspace, static #"noteUserDefaultsChanged") = Void;
overload externalInstanceMethod(static NSWorkspace, static #"slideImage:from:to:") = Void, NSImage, NSPoint, NSPoint;
overload externalInstanceMethod(static NSWorkspace, static #"checkForRemovableMedia") = Void;
overload externalInstanceMethod(static NSWorkspace, static #"noteFileSystemChanged") = Void;
overload externalInstanceMethod(static NSWorkspace, static #"fileSystemChanged") = Bool;
overload externalInstanceMethod(static NSWorkspace, static #"userDefaultsChanged") = Bool;
overload externalInstanceMethod(static NSWorkspace, static #"mountNewRemovableMedia") = NSArray;
overload externalInstanceMethod(static NSWorkspace, static #"runningApplications") = NSArray;


alias NSTextReadInapplicableDocumentTypeError = 65806;
alias NSTextWriteInapplicableDocumentTypeError = 66062;
alias NSTextReadWriteErrorMinimum = 65792;
alias NSTextReadWriteErrorMaximum = 66303;
alias NSServiceApplicationNotFoundError = 66560;
alias NSServiceApplicationLaunchFailedError = 66561;
alias NSServiceRequestTimedOutError = 66562;
alias NSServiceInvalidPasteboardDataError = 66563;
alias NSServiceMalformedServiceDictionaryError = 66564;
alias NSServiceMiscellaneousError = 66800;
alias NSServiceErrorMinimum = 66560;
alias NSServiceErrorMaximum = 66817;

alias NSCompositeClear = 0;
alias NSCompositeCopy = 1;
alias NSCompositeSourceOver = 2;
alias NSCompositeSourceIn = 3;
alias NSCompositeSourceOut = 4;
alias NSCompositeSourceAtop = 5;
alias NSCompositeDestinationOver = 6;
alias NSCompositeDestinationIn = 7;
alias NSCompositeDestinationOut = 8;
alias NSCompositeDestinationAtop = 9;
alias NSCompositeXOR = 10;
alias NSCompositePlusDarker = 11;
alias NSCompositeHighlight = 12;
alias NSCompositePlusLighter = 13;

alias NSCompositingOperation = UInt;

alias NSBackingStoreRetained = 0;
alias NSBackingStoreNonretained = 1;
alias NSBackingStoreBuffered = 2;

alias NSBackingStoreType = UInt;

alias NSWindowAbove = 1;
alias NSWindowBelow = 4294967295;
alias NSWindowOut = 0;

alias NSWindowOrderingMode = Int;

alias NSFocusRingOnly = 0;
alias NSFocusRingBelow = 1;
alias NSFocusRingAbove = 2;

alias NSFocusRingPlacement = UInt;

alias NSFocusRingTypeDefault = 0;
alias NSFocusRingTypeNone = 1;
alias NSFocusRingTypeExterior = 2;

alias NSFocusRingType = UInt;

alias NSColorRenderingIntentDefault = 0;
alias NSColorRenderingIntentAbsoluteColorimetric = 1;
alias NSColorRenderingIntentRelativeColorimetric = 2;
alias NSColorRenderingIntentPerceptual = 3;
alias NSColorRenderingIntentSaturation = 4;

alias NSColorRenderingIntent = Int;

external NSCalibratedWhiteColorSpace : NSString;

external NSCalibratedRGBColorSpace : NSString;

external NSDeviceWhiteColorSpace : NSString;

external NSDeviceRGBColorSpace : NSString;

external NSDeviceCMYKColorSpace : NSString;

external NSNamedColorSpace : NSString;

external NSPatternColorSpace : NSString;

external NSCustomColorSpace : NSString;

external NSCalibratedBlackColorSpace : NSString;

external NSDeviceBlackColorSpace : NSString;

alias NSWindowDepthTwentyfourBitRGB = 520;
alias NSWindowDepthSixtyfourBitRGB = 528;
alias NSWindowDepthOnehundredtwentyeightBitRGB = 544;

alias NSWindowDepth = Int;

external NSBestDepth(
    colorSpace : NSString,
    bps : Int,
    bpp : Int,
    planar : Bool,
    exactMatch : Pointer[Bool]) : Int;

external NSPlanarFromDepth(
    depth : Int) : Bool;

external NSColorSpaceFromDepth(
    depth : Int) : NSString;

external NSBitsPerSampleFromDepth(
    depth : Int) : Int;

external NSBitsPerPixelFromDepth(
    depth : Int) : Int;

external NSNumberOfColorComponents(
    colorSpaceName : NSString) : Int;

external NSAvailableWindowDepths() : Pointer[Int];

external NSWhite : Float;

external NSLightGray : Float;

external NSDarkGray : Float;

external NSBlack : Float;

external NSDeviceResolution : NSString;

external NSDeviceColorSpaceName : NSString;

external NSDeviceBitsPerSample : NSString;

external NSDeviceIsScreen : NSString;

external NSDeviceIsPrinter : NSString;

external NSDeviceSize : NSString;

external NSRectFill(
    aRect : NSRect);

external NSRectFillList(
    rects : Pointer[NSRect],
    count : Int);

external NSRectFillListWithGrays(
    rects : Pointer[NSRect],
    grays : Pointer[Float],
    num : Int);

external NSRectFillListWithColors(
    rects : Pointer[NSRect],
    colors : Pointer[NSColor],
    num : Int);

external NSRectFillUsingOperation(
    aRect : NSRect,
    op : UInt);

external NSRectFillListUsingOperation(
    rects : Pointer[NSRect],
    count : Int,
    op : UInt);

external NSRectFillListWithColorsUsingOperation(
    rects : Pointer[NSRect],
    colors : Pointer[NSColor],
    num : Int,
    op : UInt);

external NSFrameRect(
    aRect : NSRect);

external NSFrameRectWithWidth(
    aRect : NSRect,
    frameWidth : Float);

external NSFrameRectWithWidthUsingOperation(
    aRect : NSRect,
    frameWidth : Float,
    op : UInt);

external NSRectClip(
    aRect : NSRect);

external NSRectClipList(
    rects : Pointer[NSRect],
    count : Int);

external NSDrawTiledRects(
    boundsRect : NSRect,
    clipRect : NSRect,
    sides : Pointer[NSRectEdge],
    grays : Pointer[Float],
    count : Int) : NSRect;

external NSDrawGrayBezel(
    aRect : NSRect,
    clipRect : NSRect);

external NSDrawGroove(
    aRect : NSRect,
    clipRect : NSRect);

external NSDrawWhiteBezel(
    aRect : NSRect,
    clipRect : NSRect);

external NSDrawButton(
    aRect : NSRect,
    clipRect : NSRect);

external NSEraseRect(
    aRect : NSRect);

external NSReadPixel(
    passedPoint : NSPoint) : NSColor;

external NSDrawBitmap(
    rect : NSRect,
    width : Int,
    height : Int,
    bps : Int,
    spp : Int,
    bpp : Int,
    bpr : Int,
    isPlanar : Bool,
    hasAlpha : Bool,
    colorSpaceName : NSString,
    data : Pointer[Pointer[CUChar]]);

external NSCopyBits(
    srcGState : Int,
    srcRect : NSRect,
    destPoint : NSPoint);

external NSHighlightRect(
    aRect : NSRect);

external NSBeep();

external NSGetWindowServerMemory(
    context : Int,
    virtualMemory : Pointer[Int],
    windowBackingMemory : Pointer[Int],
    windowDumpString : Pointer[NSString]) : Int;

external NSDrawColorTiledRects(
    boundsRect : NSRect,
    clipRect : NSRect,
    sides : Pointer[NSRectEdge],
    colors : Pointer[NSColor],
    count : Int) : NSRect;

external NSDrawDarkBezel(
    aRect : NSRect,
    clipRect : NSRect);

external NSDrawLightBezel(
    aRect : NSRect,
    clipRect : NSRect);

external NSDottedFrameRect(
    aRect : NSRect);

external NSDrawWindowBackground(
    aRect : NSRect);

external NSSetFocusRingStyle(
    placement : UInt);

external NSDisableScreenUpdates();

external NSEnableScreenUpdates();

alias NSAnimationEffectDisappearingItemDefault = 0;
alias NSAnimationEffectPoof = 10;

alias NSAnimationEffect = UInt;

external NSShowAnimationEffect(
    animationEffect : UInt,
    centerLocation : NSPoint,
    size : NSSize,
    animationDelegate : Id,
    didEndSelector : SelectorHandle,
    contextInfo : RawPointer);

external NSCountWindows(
    count : Pointer[Int]);

external NSWindowList(
    size : Int,
    list : Pointer[Int]);

external NSCountWindowsForContext(
    context : Int,
    count : Pointer[Int]);

external NSWindowListForContext(
    context : Int,
    size : Int,
    list : Pointer[Int]);

external NSGraphicsContextDestinationAttributeName : NSString;

external NSGraphicsContextRepresentationFormatAttributeName : NSString;

external NSGraphicsContextPSFormat : NSString;

external NSGraphicsContextPDFFormat : NSString;

alias NSImageInterpolationDefault = 0;
alias NSImageInterpolationNone = 1;
alias NSImageInterpolationLow = 2;
alias NSImageInterpolationMedium = 4;
alias NSImageInterpolationHigh = 3;

alias NSImageInterpolation = UInt;

external NSTextLineTooLongException : NSString;

external NSTextNoSelectionException : NSString;

external NSWordTablesWriteException : NSString;

external NSWordTablesReadException : NSString;

external NSTextReadException : NSString;

external NSTextWriteException : NSString;

external NSPasteboardCommunicationException : NSString;

external NSPrintingCommunicationException : NSString;

external NSAbortModalException : NSString;

external NSAbortPrintingException : NSString;

external NSIllegalSelectorException : NSString;

external NSAppKitVirtualMemoryException : NSString;

external NSBadRTFDirectiveException : NSString;

external NSBadRTFFontTableException : NSString;

external NSBadRTFStyleSheetException : NSString;

external NSTypedStreamVersionException : NSString;

external NSTIFFException : NSString;

external NSPrintPackageException : NSString;

external NSBadRTFColorTableException : NSString;

external NSDraggingException : NSString;

external NSColorListIOException : NSString;

external NSColorListNotEditableException : NSString;

external NSBadBitmapParametersException : NSString;

external NSWindowServerCommunicationException : NSString;

external NSFontUnavailableException : NSString;

external NSPPDIncludeNotFoundException : NSString;

external NSPPDParseException : NSString;

external NSPPDIncludeStackOverflowException : NSString;

external NSPPDIncludeStackUnderflowException : NSString;

external NSRTFPropertyStackOverflowException : NSString;

external NSAppKitIgnoredException : NSString;

external NSBadComparisonException : NSString;

external NSImageCacheException : NSString;

external NSNibLoadingException : NSString;

external NSBrowserIllegalDelegateException : NSString;

external NSAccessibilityException : NSString;

external NSAccessibilityRoleDescription(
    role : NSString,
    subrole : NSString) : NSString;

external NSAccessibilityRoleDescriptionForUIElement(
    element : Id) : NSString;

external NSAccessibilityActionDescription(
    action : NSString) : NSString;

external NSAccessibilityRaiseBadArgumentException(
    element : Id,
    attribute : NSString,
    value : Id);

external NSAccessibilityUnignoredAncestor(
    element : Id) : Id;

external NSAccessibilityUnignoredDescendant(
    element : Id) : Id;

external NSAccessibilityUnignoredChildren(
    originalChildren : NSArray) : NSArray;

external NSAccessibilityUnignoredChildrenForOnlyChild(
    originalChild : Id) : NSArray;

external NSAccessibilityPostNotification(
    element : Id,
    notification : NSString);

external NSAccessibilityErrorCodeExceptionInfo : NSString;

external NSAccessibilityRoleAttribute : NSString;

external NSAccessibilityRoleDescriptionAttribute : NSString;

external NSAccessibilitySubroleAttribute : NSString;

external NSAccessibilityHelpAttribute : NSString;

external NSAccessibilityValueAttribute : NSString;

external NSAccessibilityMinValueAttribute : NSString;

external NSAccessibilityMaxValueAttribute : NSString;

external NSAccessibilityEnabledAttribute : NSString;

external NSAccessibilityFocusedAttribute : NSString;

external NSAccessibilityParentAttribute : NSString;

external NSAccessibilityChildrenAttribute : NSString;

external NSAccessibilityWindowAttribute : NSString;

external NSAccessibilityTopLevelUIElementAttribute : NSString;

external NSAccessibilitySelectedChildrenAttribute : NSString;

external NSAccessibilityVisibleChildrenAttribute : NSString;

external NSAccessibilityPositionAttribute : NSString;

external NSAccessibilitySizeAttribute : NSString;

external NSAccessibilityContentsAttribute : NSString;

external NSAccessibilityTitleAttribute : NSString;

external NSAccessibilityDescriptionAttribute : NSString;

external NSAccessibilityShownMenuAttribute : NSString;

external NSAccessibilityValueDescriptionAttribute : NSString;

external NSAccessibilityPreviousContentsAttribute : NSString;

external NSAccessibilityNextContentsAttribute : NSString;

external NSAccessibilityHeaderAttribute : NSString;

external NSAccessibilityEditedAttribute : NSString;

external NSAccessibilityTabsAttribute : NSString;

external NSAccessibilityHorizontalScrollBarAttribute : NSString;

external NSAccessibilityVerticalScrollBarAttribute : NSString;

external NSAccessibilityOverflowButtonAttribute : NSString;

external NSAccessibilityIncrementButtonAttribute : NSString;

external NSAccessibilityDecrementButtonAttribute : NSString;

external NSAccessibilityFilenameAttribute : NSString;

external NSAccessibilityExpandedAttribute : NSString;

external NSAccessibilitySelectedAttribute : NSString;

external NSAccessibilitySplittersAttribute : NSString;

external NSAccessibilityDocumentAttribute : NSString;

external NSAccessibilityURLAttribute : NSString;

external NSAccessibilityIndexAttribute : NSString;

external NSAccessibilityRowCountAttribute : NSString;

external NSAccessibilityColumnCountAttribute : NSString;

external NSAccessibilityOrderedByRowAttribute : NSString;

external NSAccessibilityWarningValueAttribute : NSString;

external NSAccessibilityCriticalValueAttribute : NSString;

external NSAccessibilityPlaceholderValueAttribute : NSString;

external NSAccessibilityTitleUIElementAttribute : NSString;

external NSAccessibilityServesAsTitleForUIElementsAttribute : NSString;

external NSAccessibilityLinkedUIElementsAttribute : NSString;

external NSAccessibilitySelectedTextAttribute : NSString;

external NSAccessibilitySelectedTextRangeAttribute : NSString;

external NSAccessibilityNumberOfCharactersAttribute : NSString;

external NSAccessibilityVisibleCharacterRangeAttribute : NSString;

external NSAccessibilitySharedTextUIElementsAttribute : NSString;

external NSAccessibilitySharedCharacterRangeAttribute : NSString;

external NSAccessibilityInsertionPointLineNumberAttribute : NSString;

external NSAccessibilitySelectedTextRangesAttribute : NSString;

external NSAccessibilityLineForIndexParameterizedAttribute : NSString;

external NSAccessibilityRangeForLineParameterizedAttribute : NSString;

external NSAccessibilityStringForRangeParameterizedAttribute : NSString;

external NSAccessibilityRangeForPositionParameterizedAttribute : NSString;

external NSAccessibilityRangeForIndexParameterizedAttribute : NSString;

external NSAccessibilityBoundsForRangeParameterizedAttribute : NSString;

external NSAccessibilityRTFForRangeParameterizedAttribute : NSString;

external NSAccessibilityStyleRangeForIndexParameterizedAttribute : NSString;

external NSAccessibilityAttributedStringForRangeParameterizedAttribute : NSString;

external NSAccessibilityFontTextAttribute : NSString;

external NSAccessibilityForegroundColorTextAttribute : NSString;

external NSAccessibilityBackgroundColorTextAttribute : NSString;

external NSAccessibilityUnderlineColorTextAttribute : NSString;

external NSAccessibilityStrikethroughColorTextAttribute : NSString;

external NSAccessibilityUnderlineTextAttribute : NSString;

external NSAccessibilitySuperscriptTextAttribute : NSString;

external NSAccessibilityStrikethroughTextAttribute : NSString;

external NSAccessibilityShadowTextAttribute : NSString;

external NSAccessibilityAttachmentTextAttribute : NSString;

external NSAccessibilityLinkTextAttribute : NSString;

external NSAccessibilityMisspelledTextAttribute : NSString;

external NSAccessibilityFontNameKey : NSString;

external NSAccessibilityFontFamilyKey : NSString;

external NSAccessibilityVisibleNameKey : NSString;

external NSAccessibilityFontSizeKey : NSString;

external NSAccessibilityMainAttribute : NSString;

external NSAccessibilityMinimizedAttribute : NSString;

external NSAccessibilityCloseButtonAttribute : NSString;

external NSAccessibilityZoomButtonAttribute : NSString;

external NSAccessibilityMinimizeButtonAttribute : NSString;

external NSAccessibilityToolbarButtonAttribute : NSString;

external NSAccessibilityProxyAttribute : NSString;

external NSAccessibilityGrowAreaAttribute : NSString;

external NSAccessibilityModalAttribute : NSString;

external NSAccessibilityDefaultButtonAttribute : NSString;

external NSAccessibilityCancelButtonAttribute : NSString;

external NSAccessibilityMenuBarAttribute : NSString;

external NSAccessibilityWindowsAttribute : NSString;

external NSAccessibilityFrontmostAttribute : NSString;

external NSAccessibilityHiddenAttribute : NSString;

external NSAccessibilityMainWindowAttribute : NSString;

external NSAccessibilityFocusedWindowAttribute : NSString;

external NSAccessibilityFocusedUIElementAttribute : NSString;

external NSAccessibilityOrientationAttribute : NSString;

external NSAccessibilityVerticalOrientationValue : NSString;

external NSAccessibilityHorizontalOrientationValue : NSString;

external NSAccessibilityUnknownOrientationValue : NSString;

external NSAccessibilityColumnTitlesAttribute : NSString;

external NSAccessibilitySearchButtonAttribute : NSString;

external NSAccessibilitySearchMenuAttribute : NSString;

external NSAccessibilityClearButtonAttribute : NSString;

external NSAccessibilityRowsAttribute : NSString;

external NSAccessibilityVisibleRowsAttribute : NSString;

external NSAccessibilitySelectedRowsAttribute : NSString;

external NSAccessibilityColumnsAttribute : NSString;

external NSAccessibilityVisibleColumnsAttribute : NSString;

external NSAccessibilitySelectedColumnsAttribute : NSString;

external NSAccessibilitySortDirectionAttribute : NSString;

external NSAccessibilitySelectedCellsAttribute : NSString;

external NSAccessibilityVisibleCellsAttribute : NSString;

external NSAccessibilityRowHeaderUIElementsAttribute : NSString;

external NSAccessibilityColumnHeaderUIElementsAttribute : NSString;

external NSAccessibilityCellForColumnAndRowParameterizedAttribute : NSString;

external NSAccessibilityRowIndexRangeAttribute : NSString;

external NSAccessibilityColumnIndexRangeAttribute : NSString;

external NSAccessibilityHorizontalUnitsAttribute : NSString;

external NSAccessibilityVerticalUnitsAttribute : NSString;

external NSAccessibilityHorizontalUnitDescriptionAttribute : NSString;

external NSAccessibilityVerticalUnitDescriptionAttribute : NSString;

external NSAccessibilityLayoutPointForScreenPointParameterizedAttribute : NSString;

external NSAccessibilityLayoutSizeForScreenSizeParameterizedAttribute : NSString;

external NSAccessibilityScreenPointForLayoutPointParameterizedAttribute : NSString;

external NSAccessibilityScreenSizeForLayoutSizeParameterizedAttribute : NSString;

external NSAccessibilityHandlesAttribute : NSString;

external NSAccessibilityAscendingSortDirectionValue : NSString;

external NSAccessibilityDescendingSortDirectionValue : NSString;

external NSAccessibilityUnknownSortDirectionValue : NSString;

external NSAccessibilityDisclosingAttribute : NSString;

external NSAccessibilityDisclosedRowsAttribute : NSString;

external NSAccessibilityDisclosedByRowAttribute : NSString;

external NSAccessibilityDisclosureLevelAttribute : NSString;

external NSAccessibilityAllowedValuesAttribute : NSString;

external NSAccessibilityLabelUIElementsAttribute : NSString;

external NSAccessibilityLabelValueAttribute : NSString;

external NSAccessibilityMatteHoleAttribute : NSString;

external NSAccessibilityMatteContentUIElementAttribute : NSString;

external NSAccessibilityMarkerUIElementsAttribute : NSString;

external NSAccessibilityMarkerValuesAttribute : NSString;

external NSAccessibilityMarkerGroupUIElementAttribute : NSString;

external NSAccessibilityUnitsAttribute : NSString;

external NSAccessibilityUnitDescriptionAttribute : NSString;

external NSAccessibilityMarkerTypeAttribute : NSString;

external NSAccessibilityMarkerTypeDescriptionAttribute : NSString;

external NSAccessibilityLeftTabStopMarkerTypeValue : NSString;

external NSAccessibilityRightTabStopMarkerTypeValue : NSString;

external NSAccessibilityCenterTabStopMarkerTypeValue : NSString;

external NSAccessibilityDecimalTabStopMarkerTypeValue : NSString;

external NSAccessibilityHeadIndentMarkerTypeValue : NSString;

external NSAccessibilityTailIndentMarkerTypeValue : NSString;

external NSAccessibilityFirstLineIndentMarkerTypeValue : NSString;

external NSAccessibilityUnknownMarkerTypeValue : NSString;

external NSAccessibilityInchesUnitValue : NSString;

external NSAccessibilityCentimetersUnitValue : NSString;

external NSAccessibilityPointsUnitValue : NSString;

external NSAccessibilityPicasUnitValue : NSString;

external NSAccessibilityUnknownUnitValue : NSString;

external NSAccessibilityPressAction : NSString;

external NSAccessibilityIncrementAction : NSString;

external NSAccessibilityDecrementAction : NSString;

external NSAccessibilityConfirmAction : NSString;

external NSAccessibilityPickAction : NSString;

external NSAccessibilityCancelAction : NSString;

external NSAccessibilityRaiseAction : NSString;

external NSAccessibilityShowMenuAction : NSString;

external NSAccessibilityDeleteAction : NSString;

external NSAccessibilityMainWindowChangedNotification : NSString;

external NSAccessibilityFocusedWindowChangedNotification : NSString;

external NSAccessibilityFocusedUIElementChangedNotification : NSString;

external NSAccessibilityApplicationActivatedNotification : NSString;

external NSAccessibilityApplicationDeactivatedNotification : NSString;

external NSAccessibilityApplicationHiddenNotification : NSString;

external NSAccessibilityApplicationShownNotification : NSString;

external NSAccessibilityWindowCreatedNotification : NSString;

external NSAccessibilityWindowMovedNotification : NSString;

external NSAccessibilityWindowResizedNotification : NSString;

external NSAccessibilityWindowMiniaturizedNotification : NSString;

external NSAccessibilityWindowDeminiaturizedNotification : NSString;

external NSAccessibilityDrawerCreatedNotification : NSString;

external NSAccessibilitySheetCreatedNotification : NSString;

external NSAccessibilityUIElementDestroyedNotification : NSString;

external NSAccessibilityValueChangedNotification : NSString;

external NSAccessibilityTitleChangedNotification : NSString;

external NSAccessibilityResizedNotification : NSString;

external NSAccessibilityMovedNotification : NSString;

external NSAccessibilityCreatedNotification : NSString;

external NSAccessibilityHelpTagCreatedNotification : NSString;

external NSAccessibilitySelectedTextChangedNotification : NSString;

external NSAccessibilityRowCountChangedNotification : NSString;

external NSAccessibilitySelectedChildrenChangedNotification : NSString;

external NSAccessibilitySelectedRowsChangedNotification : NSString;

external NSAccessibilitySelectedColumnsChangedNotification : NSString;

external NSAccessibilityRowExpandedNotification : NSString;

external NSAccessibilityRowCollapsedNotification : NSString;

external NSAccessibilitySelectedCellsChangedNotification : NSString;

external NSAccessibilityUnitsChangedNotification : NSString;

external NSAccessibilitySelectedChildrenMovedNotification : NSString;

external NSAccessibilityUnknownRole : NSString;

external NSAccessibilityButtonRole : NSString;

external NSAccessibilityRadioButtonRole : NSString;

external NSAccessibilityCheckBoxRole : NSString;

external NSAccessibilitySliderRole : NSString;

external NSAccessibilityTabGroupRole : NSString;

external NSAccessibilityTextFieldRole : NSString;

external NSAccessibilityStaticTextRole : NSString;

external NSAccessibilityTextAreaRole : NSString;

external NSAccessibilityScrollAreaRole : NSString;

external NSAccessibilityPopUpButtonRole : NSString;

external NSAccessibilityMenuButtonRole : NSString;

external NSAccessibilityTableRole : NSString;

external NSAccessibilityApplicationRole : NSString;

external NSAccessibilityGroupRole : NSString;

external NSAccessibilityRadioGroupRole : NSString;

external NSAccessibilityListRole : NSString;

external NSAccessibilityScrollBarRole : NSString;

external NSAccessibilityValueIndicatorRole : NSString;

external NSAccessibilityImageRole : NSString;

external NSAccessibilityMenuBarRole : NSString;

external NSAccessibilityMenuRole : NSString;

external NSAccessibilityMenuItemRole : NSString;

external NSAccessibilityColumnRole : NSString;

external NSAccessibilityRowRole : NSString;

external NSAccessibilityToolbarRole : NSString;

external NSAccessibilityBusyIndicatorRole : NSString;

external NSAccessibilityProgressIndicatorRole : NSString;

external NSAccessibilityWindowRole : NSString;

external NSAccessibilityDrawerRole : NSString;

external NSAccessibilitySystemWideRole : NSString;

external NSAccessibilityOutlineRole : NSString;

external NSAccessibilityIncrementorRole : NSString;

external NSAccessibilityBrowserRole : NSString;

external NSAccessibilityComboBoxRole : NSString;

external NSAccessibilitySplitGroupRole : NSString;

external NSAccessibilitySplitterRole : NSString;

external NSAccessibilityColorWellRole : NSString;

external NSAccessibilityGrowAreaRole : NSString;

external NSAccessibilitySheetRole : NSString;

external NSAccessibilityHelpTagRole : NSString;

external NSAccessibilityMatteRole : NSString;

external NSAccessibilityRulerRole : NSString;

external NSAccessibilityRulerMarkerRole : NSString;

external NSAccessibilityLinkRole : NSString;

external NSAccessibilityDisclosureTriangleRole : NSString;

external NSAccessibilityGridRole : NSString;

external NSAccessibilityRelevanceIndicatorRole : NSString;

external NSAccessibilityLevelIndicatorRole : NSString;

external NSAccessibilityCellRole : NSString;

external NSAccessibilityLayoutAreaRole : NSString;

external NSAccessibilityLayoutItemRole : NSString;

external NSAccessibilityHandleRole : NSString;

external NSAccessibilityUnknownSubrole : NSString;

external NSAccessibilityCloseButtonSubrole : NSString;

external NSAccessibilityZoomButtonSubrole : NSString;

external NSAccessibilityMinimizeButtonSubrole : NSString;

external NSAccessibilityToolbarButtonSubrole : NSString;

external NSAccessibilityTableRowSubrole : NSString;

external NSAccessibilityOutlineRowSubrole : NSString;

external NSAccessibilitySecureTextFieldSubrole : NSString;

external NSAccessibilityStandardWindowSubrole : NSString;

external NSAccessibilityDialogSubrole : NSString;

external NSAccessibilitySystemDialogSubrole : NSString;

external NSAccessibilityFloatingWindowSubrole : NSString;

external NSAccessibilitySystemFloatingWindowSubrole : NSString;

external NSAccessibilityIncrementArrowSubrole : NSString;

external NSAccessibilityDecrementArrowSubrole : NSString;

external NSAccessibilityIncrementPageSubrole : NSString;

external NSAccessibilityDecrementPageSubrole : NSString;

external NSAccessibilitySearchFieldSubrole : NSString;

external NSAccessibilityTextAttachmentSubrole : NSString;

external NSAccessibilityTextLinkSubrole : NSString;

external NSAccessibilityTimelineSubrole : NSString;

external NSAccessibilitySortButtonSubrole : NSString;

external NSAccessibilityRatingIndicatorSubrole : NSString;

external NSAccessibilityContentListSubrole : NSString;

external NSAccessibilityDefinitionListSubrole : NSString;

external NSAccessibilitySortButtonRole : NSString;

external NSAccessibilityHorizontialUnitsAttribute : NSString;

external NSAccessibilityHorizontialUnitDescriptionAttribute : NSString;

alias NSAnimationEaseInOut = 0;
alias NSAnimationEaseIn = 1;
alias NSAnimationEaseOut = 2;
alias NSAnimationLinear = 3;

alias NSAnimationCurve = UInt;

alias NSAnimationBlocking = 0;
alias NSAnimationNonblocking = 1;
alias NSAnimationNonblockingThreaded = 2;

alias NSAnimationBlockingMode = UInt;

alias NSAnimationProgress = Float;

external NSAnimationProgressMarkNotification : NSString;

external NSAnimationProgressMark : NSString;

external NSViewAnimationTargetKey : NSString;

external NSViewAnimationStartFrameKey : NSString;

external NSViewAnimationEndFrameKey : NSString;

external NSViewAnimationEffectKey : NSString;

external NSViewAnimationFadeInEffect : NSString;

external NSViewAnimationFadeOutEffect : NSString;

external NSAnimationTriggerOrderIn : NSString;

external NSAnimationTriggerOrderOut : NSString;

alias NSViewNotSizable = 0;
alias NSViewMinXMargin = 1;
alias NSViewWidthSizable = 2;
alias NSViewMaxXMargin = 4;
alias NSViewMinYMargin = 8;
alias NSViewHeightSizable = 16;
alias NSViewMaxYMargin = 32;

alias NSNoBorder = 0;
alias NSLineBorder = 1;
alias NSBezelBorder = 2;
alias NSGrooveBorder = 3;

alias NSBorderType = UInt;

alias NSViewLayerContentsRedrawNever = 0;
alias NSViewLayerContentsRedrawOnSetNeedsDisplay = 1;
alias NSViewLayerContentsRedrawDuringViewResize = 2;
alias NSViewLayerContentsRedrawBeforeViewResize = 3;

alias NSViewLayerContentsRedrawPolicy = Int;

alias NSViewLayerContentsPlacementScaleAxesIndependently = 0;
alias NSViewLayerContentsPlacementScaleProportionallyToFit = 1;
alias NSViewLayerContentsPlacementScaleProportionallyToFill = 2;
alias NSViewLayerContentsPlacementCenter = 3;
alias NSViewLayerContentsPlacementTop = 4;
alias NSViewLayerContentsPlacementTopRight = 5;
alias NSViewLayerContentsPlacementRight = 6;
alias NSViewLayerContentsPlacementBottomRight = 7;
alias NSViewLayerContentsPlacementBottom = 8;
alias NSViewLayerContentsPlacementBottomLeft = 9;
alias NSViewLayerContentsPlacementLeft = 10;
alias NSViewLayerContentsPlacementTopLeft = 11;

alias NSViewLayerContentsPlacement = Int;

record Struct___VFlags (
    aboutToResize : UInt,
    retainCountOverMax : UInt,
    retainCount : UInt,
    interfaceStyle1 : UInt,
    specialArchiving : UInt,
    needsDisplayForBounds : UInt,
    interfaceStyle0 : UInt,
    removingWithoutInvalidation : UInt,
    needsBoundsChangeNote : UInt,
    boundsChangeNotesSuspended : UInt,
    focusChangeNotesSuspended : UInt,
    needsFrameChangeNote : UInt,
    frameChangeNotesSuspended : UInt,
    noVerticalAutosizing : UInt,
    newGState : UInt,
    validGState : UInt,
    needsDisplay : UInt,
    wantsGState : UInt,
    autoresizeSubviews : UInt,
    autosizing : UInt,
    rotatedOrScaledFromBase : UInt,
    rotatedFromBase : UInt,
);

alias _VFlags = Struct___VFlags;

alias NSTrackingRectTag = Int;

alias NSToolTipTag = Int;

external NSFullScreenModeAllScreens : NSString;

external NSFullScreenModeSetting : NSString;

external NSFullScreenModeWindowLevel : NSString;

external NSFullScreenModeApplicationPresentationOptions : NSString;

external NSDefinitionPresentationTypeKey : NSString;

external NSDefinitionPresentationTypeOverlay : NSString;

external NSDefinitionPresentationTypeDictionaryApplication : NSString;

external NSViewFrameDidChangeNotification : NSString;

external NSViewFocusDidChangeNotification : NSString;

external NSViewBoundsDidChangeNotification : NSString;

external NSViewGlobalFrameDidChangeNotification : NSString;

external NSViewDidUpdateTrackingAreasNotification : NSString;

alias NSEnterCharacter = 3;
alias NSBackspaceCharacter = 8;
alias NSTabCharacter = 9;
alias NSNewlineCharacter = 10;
alias NSFormFeedCharacter = 12;
alias NSCarriageReturnCharacter = 13;
alias NSBackTabCharacter = 25;
alias NSDeleteCharacter = 127;
alias NSLineSeparatorCharacter = 8232;
alias NSParagraphSeparatorCharacter = 8233;

alias NSLeftTextAlignment = 0;
alias NSRightTextAlignment = 1;
alias NSCenterTextAlignment = 2;
alias NSJustifiedTextAlignment = 3;
alias NSNaturalTextAlignment = 4;

alias NSTextAlignment = UInt;

alias NSWritingDirectionNatural = 4294967295;
alias NSWritingDirectionLeftToRight = 0;
alias NSWritingDirectionRightToLeft = 1;

alias NSWritingDirection = Int;

alias NSTextWritingDirectionEmbedding = 0;
alias NSTextWritingDirectionOverride = 2;

alias NSIllegalTextMovement = 0;
alias NSReturnTextMovement = 16;
alias NSTabTextMovement = 17;
alias NSBacktabTextMovement = 18;
alias NSLeftTextMovement = 19;
alias NSRightTextMovement = 20;
alias NSUpTextMovement = 21;
alias NSDownTextMovement = 22;
alias NSCancelTextMovement = 23;
alias NSOtherTextMovement = 0;

external NSTextDidBeginEditingNotification : NSString;

external NSTextDidEndEditingNotification : NSString;

external NSTextDidChangeNotification : NSString;

alias NSLeftTabStopType = 0;
alias NSRightTabStopType = 1;
alias NSCenterTabStopType = 2;
alias NSDecimalTabStopType = 3;

alias NSTextTabType = UInt;

alias NSLineBreakByWordWrapping = 0;
alias NSLineBreakByCharWrapping = 1;
alias NSLineBreakByClipping = 2;
alias NSLineBreakByTruncatingHead = 3;
alias NSLineBreakByTruncatingTail = 4;
alias NSLineBreakByTruncatingMiddle = 5;

alias NSLineBreakMode = UInt;

external NSTabColumnTerminatorsAttributeName : NSString;

alias NSWorkspaceLaunchOptions = UInt;

alias NSWorkspaceLaunchAndPrint = 2;
alias NSWorkspaceLaunchInhibitingBackgroundOnly = 128;
alias NSWorkspaceLaunchWithoutAddingToRecents = 256;
alias NSWorkspaceLaunchWithoutActivation = 512;
alias NSWorkspaceLaunchAsync = 65536;
alias NSWorkspaceLaunchAllowingClassicStartup = 131072;
alias NSWorkspaceLaunchPreferringClassic = 262144;
alias NSWorkspaceLaunchNewInstance = 524288;
alias NSWorkspaceLaunchAndHide = 1048576;
alias NSWorkspaceLaunchAndHideOthers = 2097152;
alias NSWorkspaceLaunchDefault = 196608;

alias NSWorkspaceIconCreationOptions = UInt;

alias NSExcludeQuickDrawElementsIconCreationOption = 2;
alias NSExclude10_4ElementsIconCreationOption = 4;

external NSWorkspaceDesktopImageScalingKey : NSString;

external NSWorkspaceDesktopImageAllowClippingKey : NSString;

external NSWorkspaceDesktopImageFillColorKey : NSString;

external NSWorkspaceApplicationKey : NSString;

external NSWorkspaceWillLaunchApplicationNotification : NSString;

external NSWorkspaceDidLaunchApplicationNotification : NSString;

external NSWorkspaceDidTerminateApplicationNotification : NSString;

external NSWorkspaceDidHideApplicationNotification : NSString;

external NSWorkspaceDidUnhideApplicationNotification : NSString;

external NSWorkspaceDidActivateApplicationNotification : NSString;

external NSWorkspaceDidDeactivateApplicationNotification : NSString;

external NSWorkspaceVolumeLocalizedNameKey : NSString;

external NSWorkspaceVolumeURLKey : NSString;

external NSWorkspaceVolumeOldLocalizedNameKey : NSString;

external NSWorkspaceVolumeOldURLKey : NSString;

external NSWorkspaceDidMountNotification : NSString;

external NSWorkspaceDidUnmountNotification : NSString;

external NSWorkspaceWillUnmountNotification : NSString;

external NSWorkspaceDidRenameVolumeNotification : NSString;

external NSWorkspaceWillPowerOffNotification : NSString;

external NSWorkspaceWillSleepNotification : NSString;

external NSWorkspaceDidWakeNotification : NSString;

external NSWorkspaceScreensDidSleepNotification : NSString;

external NSWorkspaceScreensDidWakeNotification : NSString;

external NSWorkspaceSessionDidBecomeActiveNotification : NSString;

external NSWorkspaceSessionDidResignActiveNotification : NSString;

external NSWorkspaceDidPerformFileOperationNotification : NSString;

external NSWorkspaceDidChangeFileLabelsNotification : NSString;

external NSWorkspaceActiveSpaceDidChangeNotification : NSString;

external NSWorkspaceLaunchConfigurationAppleEvent : NSString;

external NSWorkspaceLaunchConfigurationArguments : NSString;

external NSWorkspaceLaunchConfigurationEnvironment : NSString;

external NSWorkspaceLaunchConfigurationArchitecture : NSString;

external NSWorkspaceMoveOperation : NSString;

external NSWorkspaceCopyOperation : NSString;

external NSWorkspaceLinkOperation : NSString;

external NSWorkspaceCompressOperation : NSString;

external NSWorkspaceDecompressOperation : NSString;

external NSWorkspaceEncryptOperation : NSString;

external NSWorkspaceDecryptOperation : NSString;

external NSWorkspaceDestroyOperation : NSString;

external NSWorkspaceRecycleOperation : NSString;

external NSWorkspaceDuplicateOperation : NSString;

external NSPlainFileType : NSString;

external NSDirectoryFileType : NSString;

external NSApplicationFileType : NSString;

external NSFilesystemFileType : NSString;

external NSShellCommandFileType : NSString;

alias NSApplicationActivateAllWindows = 1;
alias NSApplicationActivateIgnoringOtherApps = 2;

alias NSApplicationActivationOptions = UInt;

alias NSApplicationActivationPolicyRegular = 0;
alias NSApplicationActivationPolicyAccessory = 1;
alias NSApplicationActivationPolicyProhibited = 2;

alias NSApplicationActivationPolicy = Int;

external NSAppKitVersionNumber : Double;

external NSModalPanelRunLoopMode : NSString;

external NSEventTrackingRunLoopMode : NSString;

alias NSRunStoppedResponse = 4294966296;
alias NSRunAbortedResponse = 4294966295;
alias NSRunContinuesResponse = 4294966294;

alias NSUpdateWindowsRunLoopOrdering = 500000;

alias NSApplicationPresentationDefault = 0;
alias NSApplicationPresentationAutoHideDock = 1;
alias NSApplicationPresentationHideDock = 2;
alias NSApplicationPresentationAutoHideMenuBar = 4;
alias NSApplicationPresentationHideMenuBar = 8;
alias NSApplicationPresentationDisableAppleMenu = 16;
alias NSApplicationPresentationDisableProcessSwitching = 32;
alias NSApplicationPresentationDisableForceQuit = 64;
alias NSApplicationPresentationDisableSessionTermination = 128;
alias NSApplicationPresentationDisableHideApplication = 256;
alias NSApplicationPresentationDisableMenuBarTransparency = 512;

alias NSApplicationPresentationOptions = UInt;

external NSApp : Id;

alias NSModalSession = OpaquePointer;

alias _NSThreadPrivate = Opaque;

alias NSTerminateCancel = 0;
alias NSTerminateNow = 1;
alias NSTerminateLater = 2;

alias NSApplicationTerminateReply = UInt;

alias NSPrintingCancelled = 0;
alias NSPrintingSuccess = 1;
alias NSPrintingFailure = 3;
alias NSPrintingReplyLater = 2;

alias NSApplicationPrintReply = UInt;

alias NSUserInterfaceLayoutDirectionLeftToRight = 0;
alias NSUserInterfaceLayoutDirectionRightToLeft = 1;

alias NSUserInterfaceLayoutDirection = Int;

external NSApplicationMain(
    argc : Int,
    argv : Pointer[Pointer[CChar]]) : Int;

external NSApplicationLoad() : Bool;

external NSShowsServicesMenuItem(
    itemName : NSString) : Bool;

external NSSetShowsServicesMenuItem(
    itemName : NSString,
    enabled : Bool) : Int;

external NSUpdateDynamicServices();

external NSPerformService(
    itemName : NSString,
    pboard : NSPasteboard) : Bool;

external NSRegisterServicesProvider(
    provider : Id,
    name : NSString);

external NSUnregisterServicesProvider(
    name : NSString);

external NSApplicationDidBecomeActiveNotification : NSString;

external NSApplicationDidHideNotification : NSString;

external NSApplicationDidFinishLaunchingNotification : NSString;

external NSApplicationDidResignActiveNotification : NSString;

external NSApplicationDidUnhideNotification : NSString;

external NSApplicationDidUpdateNotification : NSString;

external NSApplicationWillBecomeActiveNotification : NSString;

external NSApplicationWillHideNotification : NSString;

external NSApplicationWillFinishLaunchingNotification : NSString;

external NSApplicationWillResignActiveNotification : NSString;

external NSApplicationWillUnhideNotification : NSString;

external NSApplicationWillUpdateNotification : NSString;

external NSApplicationWillTerminateNotification : NSString;

external NSApplicationDidChangeScreenParametersNotification : NSString;

alias NSAnyType = 0;
alias NSIntType = 1;
alias NSPositiveIntType = 2;
alias NSFloatType = 3;
alias NSPositiveFloatType = 4;
alias NSDoubleType = 6;
alias NSPositiveDoubleType = 7;

alias NSNullCellType = 0;
alias NSTextCellType = 1;
alias NSImageCellType = 2;

alias NSCellType = UInt;

alias NSCellDisabled = 0;
alias NSCellState = 1;
alias NSPushInCell = 2;
alias NSCellEditable = 3;
alias NSChangeGrayCell = 4;
alias NSCellHighlighted = 5;
alias NSCellLightsByContents = 6;
alias NSCellLightsByGray = 7;
alias NSChangeBackgroundCell = 8;
alias NSCellLightsByBackground = 9;
alias NSCellIsBordered = 10;
alias NSCellHasOverlappingImage = 11;
alias NSCellHasImageHorizontal = 12;
alias NSCellHasImageOnLeftOrBottom = 13;
alias NSCellChangesContents = 14;
alias NSCellIsInsetButton = 15;
alias NSCellAllowsMixedState = 16;

alias NSCellAttribute = UInt;

alias NSNoImage = 0;
alias NSImageOnly = 1;
alias NSImageLeft = 2;
alias NSImageRight = 3;
alias NSImageBelow = 4;
alias NSImageAbove = 5;
alias NSImageOverlaps = 6;

alias NSCellImagePosition = UInt;

alias NSImageScaleProportionallyDown = 0;
alias NSImageScaleAxesIndependently = 1;
alias NSImageScaleNone = 2;
alias NSImageScaleProportionallyUpOrDown = 3;

alias NSImageScaling = UInt;

alias NSMixedState = 4294967295;
alias NSOffState = 0;
alias NSOnState = 1;

alias NSCellStateValue = Int;

alias NSNoCellMask = 0;
alias NSContentsCellMask = 1;
alias NSPushInCellMask = 2;
alias NSChangeGrayCellMask = 4;
alias NSChangeBackgroundCellMask = 8;

alias NSDefaultControlTint = 0;
alias NSBlueControlTint = 1;
alias NSGraphiteControlTint = 6;
alias NSClearControlTint = 7;

alias NSControlTint = UInt;

alias NSRegularControlSize = 0;
alias NSSmallControlSize = 1;
alias NSMiniControlSize = 2;

alias NSControlSize = UInt;

record Struct___CFlags (
    state : UInt,
    highlighted : UInt,
    disabled : UInt,
    editable : UInt,
    type : UInt,
    vCentered : UInt,
    hCentered : UInt,
    bordered : UInt,
    bezeled : UInt,
    selectable : UInt,
    scrollable : UInt,
    continuous : UInt,
    actOnMouseDown : UInt,
    isLeaf : UInt,
    invalidObjectValue : UInt,
    invalidFont : UInt,
    lineBreakMode : UInt,
    cellReserved1 : UInt,
    singleLineMode : UInt,
    actOnMouseDragged : UInt,
    isLoaded : UInt,
    truncateLastLine : UInt,
    dontActOnMouseUp : UInt,
    isWhite : UInt,
    useUserKeyEquivalent : UInt,
    showsFirstResponder : UInt,
    focusRingType : UInt,
    wasSelectable : UInt,
    hasInvalidObject : UInt,
    allowsEditingTextAttributes : UInt,
    importsGraphics : UInt,
    alignment : UInt,
    layoutDirectionRTL : UInt,
    backgroundStyle : UInt,
    cellReserved2 : UInt,
    refusesFirstResponder : UInt,
    needsHighlightedText : UInt,
    dontAllowsUndo : UInt,
    currentlyEditing : UInt,
    allowsMixedState : UInt,
    inMixedState : UInt,
    sendsActionOnEndEditing : UInt,
    inSendAction : UInt,
    menuWasSet : UInt,
    controlTint : UInt,
    controlSize : UInt,
    branchImageDisabled : UInt,
    drawingInRevealover : UInt,
    needsHighlightedTextHint : UInt,
);

alias _CFlags = Struct___CFlags;

external NSControlTintDidChangeNotification : NSString;

alias NSCellHitNone = 0;
alias NSCellHitContentArea = 1;
alias NSCellHitEditableTextArea = 2;
alias NSCellHitTrackableArea = 4;

alias NSBackgroundStyleLight = 0;
alias NSBackgroundStyleDark = 1;
alias NSBackgroundStyleRaised = 2;
alias NSBackgroundStyleLowered = 3;

alias NSBackgroundStyle = Int;

external NSDrawThreePartImage(
    frame : NSRect,
    startCap : NSImage,
    centerFill : NSImage,
    endCap : NSImage,
    vertical : Bool,
    op : UInt,
    alphaFraction : Float,
    flipped : Bool);

external NSDrawNinePartImage(
    frame : NSRect,
    topLeftCorner : NSImage,
    topEdgeFill : NSImage,
    topRightCorner : NSImage,
    leftEdgeFill : NSImage,
    centerFill : NSImage,
    rightEdgeFill : NSImage,
    bottomLeftCorner : NSImage,
    bottomEdgeFill : NSImage,
    bottomRightCorner : NSImage,
    op : UInt,
    alphaFraction : Float,
    flipped : Bool);

alias NSWarningAlertStyle = 0;
alias NSInformationalAlertStyle = 1;
alias NSCriticalAlertStyle = 2;

alias NSAlertStyle = UInt;

alias NSNoTitle = 0;
alias NSAboveTop = 1;
alias NSAtTop = 2;
alias NSBelowTop = 3;
alias NSAboveBottom = 4;
alias NSAtBottom = 5;
alias NSBelowBottom = 6;

alias NSTitlePosition = UInt;

alias NSBoxPrimary = 0;
alias NSBoxSecondary = 1;
alias NSBoxSeparator = 2;
alias NSBoxOldStyle = 3;
alias NSBoxCustom = 4;

alias NSBoxType = UInt;

external NSControlTextDidBeginEditingNotification : NSString;

external NSControlTextDidEndEditingNotification : NSString;

external NSControlTextDidChangeNotification : NSString;

alias NSMomentaryLightButton = 0;
alias NSPushOnPushOffButton = 1;
alias NSToggleButton = 2;
alias NSSwitchButton = 3;
alias NSRadioButton = 4;
alias NSMomentaryChangeButton = 5;
alias NSOnOffButton = 6;
alias NSMomentaryPushInButton = 7;
alias NSMomentaryPushButton = 0;
alias NSMomentaryLight = 7;

alias NSButtonType = UInt;

alias NSRoundedBezelStyle = 1;
alias NSRegularSquareBezelStyle = 2;
alias NSThickSquareBezelStyle = 3;
alias NSThickerSquareBezelStyle = 4;
alias NSDisclosureBezelStyle = 5;
alias NSShadowlessSquareBezelStyle = 6;
alias NSCircularBezelStyle = 7;
alias NSTexturedSquareBezelStyle = 8;
alias NSHelpButtonBezelStyle = 9;
alias NSSmallSquareBezelStyle = 10;
alias NSTexturedRoundedBezelStyle = 11;
alias NSRoundRectBezelStyle = 12;
alias NSRecessedBezelStyle = 13;
alias NSRoundedDisclosureBezelStyle = 14;
alias NSSmallIconButtonBezelStyle = 2;

alias NSBezelStyle = UInt;

record Struct___BCFlags (
    alternateMnemonicLocation : UInt,
    useButtonImageSource : UInt,
    reserved : UInt,
    suppressAXValueChangeNote : UInt,
    doesNotDimImage : UInt,
    inset : UInt,
    transparent : UInt,
    lastState : UInt,
    hasKeyEquivalentInsteadOfImage : UInt,
    imageSizeDiff : UInt,
    imageAndText : UInt,
    bottomOrLeft : UInt,
    horizontal : UInt,
    imageOverlaps : UInt,
    bordered : UInt,
    drawing : UInt,
    lightByGray : UInt,
    lightByBackground : UInt,
    lightByContents : UInt,
    changeGray : UInt,
    changeBackground : UInt,
    changeContents : UInt,
    pushIn : UInt,
);

alias _BCFlags = Struct___BCFlags;

record Struct___BCFlags2 (
    bezelStyle : UInt,
    showsBorderOnlyWhileMouseInside : UInt,
    mouseInside : UInt,
    bezelStyle2 : UInt,
    imageScaling : UInt,
    keyEquivalentModifierMask : UInt,
);

alias _BCFlags2 = Struct___BCFlags2;

alias NSGradientNone = 0;
alias NSGradientConcaveWeak = 1;
alias NSGradientConcaveStrong = 2;
alias NSGradientConvexWeak = 3;
alias NSGradientConvexStrong = 4;

alias NSGradientType = UInt;

alias NSGlyph = UInt;

alias NSControlGlyph = 16777215;
alias NSNullGlyph = 0;

external NSFontIdentityMatrix : Pointer[Float];

alias NSNativeShortGlyphPacking = 5;

alias NSMultibyteGlyphPacking = UInt;

alias NSFontDefaultRenderingMode = 0;
alias NSFontAntialiasedRenderingMode = 1;
alias NSFontIntegerAdvancementsRenderingMode = 2;
alias NSFontAntialiasedIntegerAdvancementsRenderingMode = 3;

alias NSFontRenderingMode = UInt;

external NSConvertGlyphsToPackedGlyphs(
    glBuf : Pointer[UInt],
    count : Int,
    packing : UInt,
    packedGlyphs : Pointer[CChar]) : Int;

external NSAntialiasThresholdChangedNotification : NSString;

external NSFontSetChangedNotification : NSString;

alias NSGlyphRelation = UInt;

external NSAFMFamilyName : NSString;

external NSAFMFontName : NSString;

external NSAFMFormatVersion : NSString;

external NSAFMFullName : NSString;

external NSAFMNotice : NSString;

external NSAFMVersion : NSString;

external NSAFMWeight : NSString;

external NSAFMEncodingScheme : NSString;

external NSAFMCharacterSet : NSString;

external NSAFMCapHeight : NSString;

external NSAFMXHeight : NSString;

external NSAFMAscender : NSString;

external NSAFMDescender : NSString;

external NSAFMUnderlinePosition : NSString;

external NSAFMUnderlineThickness : NSString;

external NSAFMItalicAngle : NSString;

external NSAFMMappingScheme : NSString;

alias NSFontSymbolicTraits = UInt;

alias NSFontUnknownClass = 0;
alias NSFontOldStyleSerifsClass = 268435456;
alias NSFontTransitionalSerifsClass = 536870912;
alias NSFontModernSerifsClass = 805306368;
alias NSFontClarendonSerifsClass = 1073741824;
alias NSFontSlabSerifsClass = 1342177280;
alias NSFontFreeformSerifsClass = 1879048192;
alias NSFontSansSerifClass = 2147483648;
alias NSFontOrnamentalsClass = 2415919104;
alias NSFontScriptsClass = 2684354560;
alias NSFontSymbolicClass = 3221225472;

alias NSFontFamilyClass = UInt;

alias NSFontFamilyClassMask = 4026531840;

alias NSFontItalicTrait = 1;
alias NSFontBoldTrait = 2;
alias NSFontExpandedTrait = 32;
alias NSFontCondensedTrait = 64;
alias NSFontMonoSpaceTrait = 1024;
alias NSFontVerticalTrait = 2048;
alias NSFontUIOptimizedTrait = 4096;

external NSFontFamilyAttribute : NSString;

external NSFontNameAttribute : NSString;

external NSFontFaceAttribute : NSString;

external NSFontSizeAttribute : NSString;

external NSFontVisibleNameAttribute : NSString;

external NSFontMatrixAttribute : NSString;

external NSFontVariationAttribute : NSString;

external NSFontCharacterSetAttribute : NSString;

external NSFontCascadeListAttribute : NSString;

external NSFontTraitsAttribute : NSString;

external NSFontFixedAdvanceAttribute : NSString;

external NSFontFeatureSettingsAttribute : NSString;

external NSFontColorAttribute : NSString;

external NSFontSymbolicTrait : NSString;

external NSFontWeightTrait : NSString;

external NSFontWidthTrait : NSString;

external NSFontSlantTrait : NSString;

external NSFontVariationAxisIdentifierKey : NSString;

external NSFontVariationAxisMinimumValueKey : NSString;

external NSFontVariationAxisMaximumValueKey : NSString;

external NSFontVariationAxisDefaultValueKey : NSString;

external NSFontVariationAxisNameKey : NSString;

external NSFontFeatureTypeIdentifierKey : NSString;

external NSFontFeatureSelectorIdentifierKey : NSString;

alias NSFontTraitMask = UInt;

alias NSItalicFontMask = 1;
alias NSBoldFontMask = 2;
alias NSUnboldFontMask = 4;
alias NSNonStandardCharacterSetFontMask = 8;
alias NSNarrowFontMask = 16;
alias NSExpandedFontMask = 32;
alias NSCondensedFontMask = 64;
alias NSSmallCapsFontMask = 128;
alias NSPosterFontMask = 256;
alias NSCompressedFontMask = 512;
alias NSFixedPitchFontMask = 1024;
alias NSUnitalicFontMask = 16777216;

alias NSFontCollectionApplicationOnlyMask = 1;

alias NSNoFontChangeAction = 0;
alias NSViaPanelFontAction = 1;
alias NSAddTraitFontAction = 2;
alias NSSizeUpFontAction = 3;
alias NSSizeDownFontAction = 4;
alias NSHeavierFontAction = 5;
alias NSLighterFontAction = 6;
alias NSRemoveTraitFontAction = 7;

alias NSFontAction = UInt;

alias NSBorderlessWindowMask = 0;
alias NSTitledWindowMask = 1;
alias NSClosableWindowMask = 2;
alias NSMiniaturizableWindowMask = 4;
alias NSResizableWindowMask = 8;

alias NSTexturedBackgroundWindowMask = 256;

alias NSUnscaledWindowMask = 2048;

alias NSUnifiedTitleAndToolbarWindowMask = 4096;

alias NSDisplayWindowRunLoopOrdering = 600000;
alias NSResetCursorRectsRunLoopOrdering = 700000;

alias NSWindowSharingNone = 0;
alias NSWindowSharingReadOnly = 1;
alias NSWindowSharingReadWrite = 2;

alias NSWindowSharingType = UInt;

alias NSWindowBackingLocationDefault = 0;
alias NSWindowBackingLocationVideoMemory = 1;
alias NSWindowBackingLocationMainMemory = 2;

alias NSWindowBackingLocation = UInt;

alias NSWindowCollectionBehaviorDefault = 0;
alias NSWindowCollectionBehaviorCanJoinAllSpaces = 1;
alias NSWindowCollectionBehaviorMoveToActiveSpace = 2;

alias NSWindowCollectionBehaviorManaged = 4;
alias NSWindowCollectionBehaviorTransient = 8;
alias NSWindowCollectionBehaviorStationary = 16;

alias NSWindowCollectionBehaviorParticipatesInCycle = 32;
alias NSWindowCollectionBehaviorIgnoresCycle = 64;

alias NSWindowCollectionBehavior = UInt;

alias NSWindowNumberListAllApplications = 1;
alias NSWindowNumberListAllSpaces = 16;

alias NSWindowNumberListOptions = UInt;

alias NSDirectSelection = 0;
alias NSSelectingNext = 1;
alias NSSelectingPrevious = 2;

alias NSSelectionDirection = UInt;

alias NSWindowCloseButton = 0;
alias NSWindowMiniaturizeButton = 1;
alias NSWindowZoomButton = 2;
alias NSWindowToolbarButton = 3;
alias NSWindowDocumentIconButton = 4;

alias NSWindowButton = UInt;

external NSWindowDidBecomeKeyNotification : NSString;

external NSWindowDidBecomeMainNotification : NSString;

external NSWindowDidChangeScreenNotification : NSString;

external NSWindowDidDeminiaturizeNotification : NSString;

external NSWindowDidExposeNotification : NSString;

external NSWindowDidMiniaturizeNotification : NSString;

external NSWindowDidMoveNotification : NSString;

external NSWindowDidResignKeyNotification : NSString;

external NSWindowDidResignMainNotification : NSString;

external NSWindowDidResizeNotification : NSString;

external NSWindowDidUpdateNotification : NSString;

external NSWindowWillCloseNotification : NSString;

external NSWindowWillMiniaturizeNotification : NSString;

external NSWindowWillMoveNotification : NSString;

external NSWindowWillBeginSheetNotification : NSString;

external NSWindowDidEndSheetNotification : NSString;

external NSWindowDidChangeScreenProfileNotification : NSString;

external NSWindowWillStartLiveResizeNotification : NSString;

external NSWindowDidEndLiveResizeNotification : NSString;

external NSRunAlertPanel(
    title : NSString,
    msgFormat : NSString,
    defaultButton : NSString,
    alternateButton : NSString,
    otherButton : NSString,
    ..) : Int;

external NSRunInformationalAlertPanel(
    title : NSString,
    msgFormat : NSString,
    defaultButton : NSString,
    alternateButton : NSString,
    otherButton : NSString,
    ..) : Int;

external NSRunCriticalAlertPanel(
    title : NSString,
    msgFormat : NSString,
    defaultButton : NSString,
    alternateButton : NSString,
    otherButton : NSString,
    ..) : Int;

external NSRunAlertPanelRelativeToWindow(
    title : NSString,
    msgFormat : NSString,
    defaultButton : NSString,
    alternateButton : NSString,
    otherButton : NSString,
    docWindow : NSWindow,
    ..) : Int;

external NSRunInformationalAlertPanelRelativeToWindow(
    title : NSString,
    msgFormat : NSString,
    defaultButton : NSString,
    alternateButton : NSString,
    otherButton : NSString,
    docWindow : NSWindow,
    ..) : Int;

external NSRunCriticalAlertPanelRelativeToWindow(
    title : NSString,
    msgFormat : NSString,
    defaultButton : NSString,
    alternateButton : NSString,
    otherButton : NSString,
    docWindow : NSWindow,
    ..) : Int;

external NSBeginAlertSheet(
    title : NSString,
    defaultButton : NSString,
    alternateButton : NSString,
    otherButton : NSString,
    docWindow : NSWindow,
    modalDelegate : Id,
    didEndSelector : SelectorHandle,
    didDismissSelector : SelectorHandle,
    contextInfo : RawPointer,
    msgFormat : NSString,
    ..);

external NSBeginInformationalAlertSheet(
    title : NSString,
    defaultButton : NSString,
    alternateButton : NSString,
    otherButton : NSString,
    docWindow : NSWindow,
    modalDelegate : Id,
    didEndSelector : SelectorHandle,
    didDismissSelector : SelectorHandle,
    contextInfo : RawPointer,
    msgFormat : NSString,
    ..);

external NSBeginCriticalAlertSheet(
    title : NSString,
    defaultButton : NSString,
    alternateButton : NSString,
    otherButton : NSString,
    docWindow : NSWindow,
    modalDelegate : Id,
    didEndSelector : SelectorHandle,
    didDismissSelector : SelectorHandle,
    contextInfo : RawPointer,
    msgFormat : NSString,
    ..);

external NSGetAlertPanel(
    title : NSString,
    msgFormat : NSString,
    defaultButton : NSString,
    alternateButton : NSString,
    otherButton : NSString,
    ..) : Id;

external NSGetInformationalAlertPanel(
    title : NSString,
    msgFormat : NSString,
    defaultButton : NSString,
    alternateButton : NSString,
    otherButton : NSString,
    ..) : Id;

external NSGetCriticalAlertPanel(
    title : NSString,
    msgFormat : NSString,
    defaultButton : NSString,
    alternateButton : NSString,
    otherButton : NSString,
    ..) : Id;

external NSReleaseAlertPanel(
    panel : Id);

alias NSAlertDefaultReturn = 1;
alias NSAlertAlternateReturn = 0;
alias NSAlertOtherReturn = 4294967295;
alias NSAlertErrorReturn = 4294967294;

alias NSOKButton = 1;
alias NSCancelButton = 0;

alias NSUtilityWindowMask = 16;
alias NSDocModalWindowMask = 64;

alias NSNonactivatingPanelMask = 128;

alias NSHUDWindowMask = 8192;

alias NSFPPreviewButton = 131;
alias NSFPRevertButton = 130;
alias NSFPSetButton = 132;
alias NSFPPreviewField = 128;
alias NSFPSizeField = 129;
alias NSFPSizeTitle = 133;
alias NSFPCurrentField = 134;

alias NSFontPanelFaceModeMask = 1;
alias NSFontPanelSizeModeMask = 2;
alias NSFontPanelCollectionModeMask = 4;
alias NSFontPanelUnderlineEffectModeMask = 256;
alias NSFontPanelStrikethroughEffectModeMask = 512;
alias NSFontPanelTextColorEffectModeMask = 1024;
alias NSFontPanelDocumentColorEffectModeMask = 2048;
alias NSFontPanelShadowEffectModeMask = 4096;
alias NSFontPanelAllEffectsModeMask = 1048320;
alias NSFontPanelStandardModesMask = 65535;
alias NSFontPanelAllModesMask = 4294967295;

alias NSRadioModeMatrix = 0;
alias NSHighlightModeMatrix = 1;
alias NSListModeMatrix = 2;
alias NSTrackModeMatrix = 3;

alias NSMatrixMode = UInt;

record Struct___MFlags (
    reservedMatrix : UInt,
    drawingContextMenuHighlightOnAllSelectedRows : UInt,
    drawingContextMenuHighlight : UInt,
    browserOptimizationsEnabled : UInt,
    needsRedrawBeforeFirstLiveResizeCache : UInt,
    tmpAllowNonVisibleCellsToBecomeFirstResponder : UInt,
    subclassIsSafeForLiveResize : UInt,
    hasCachedSubclassIsSafeForLiveResize : UInt,
    liveResizeImageCacheingEnabled : UInt,
    checkForSimpleTrackingMode : UInt,
    useSimpleTrackingMode : UInt,
    refusesFirstResponder : UInt,
    dontScroll : UInt,
    changingSelectionWithKeyboard : UInt,
    onlySetKeyCell : UInt,
    currentlySelectingCell : UInt,
    allowsIncrementalSearching : UInt,
    tabKeyTraversesCellsExplicitlySet : UInt,
    tabKeyTraversesCells : UInt,
    drawingAncestor : UInt,
    autosizeCells : UInt,
    drawsBackground : UInt,
    drawsCellBackground : UInt,
    selectionByRect : UInt,
    autoscroll : UInt,
    allowEmptySel : UInt,
    listMode : UInt,
    radioMode : UInt,
    highlightMode : UInt,
);

alias _MFlags = Struct___MFlags;

alias NSMenuPropertyItemTitle = 1;
alias NSMenuPropertyItemAttributedTitle = 2;
alias NSMenuPropertyItemKeyEquivalent = 4;
alias NSMenuPropertyItemImage = 8;
alias NSMenuPropertyItemEnabled = 16;
alias NSMenuPropertyItemAccessibilityDescription = 32;

alias NSMenuProperties = UInt;

external NSMenuWillSendActionNotification : NSString;

external NSMenuDidSendActionNotification : NSString;

external NSMenuDidAddItemNotification : NSString;

external NSMenuDidRemoveItemNotification : NSString;

external NSMenuDidChangeItemNotification : NSString;

external NSMenuDidBeginTrackingNotification : NSString;

external NSMenuDidEndTrackingNotification : NSString;

external NSPasteboardTypeString : NSString;

external NSPasteboardTypePDF : NSString;

external NSPasteboardTypeTIFF : NSString;

external NSPasteboardTypePNG : NSString;

external NSPasteboardTypeRTF : NSString;

external NSPasteboardTypeRTFD : NSString;

external NSPasteboardTypeHTML : NSString;

external NSPasteboardTypeTabularText : NSString;

external NSPasteboardTypeFont : NSString;

external NSPasteboardTypeRuler : NSString;

external NSPasteboardTypeColor : NSString;

external NSPasteboardTypeSound : NSString;

external NSPasteboardTypeMultipleTextSelection : NSString;

external NSPasteboardTypeFindPanelSearchOptions : NSString;

external NSGeneralPboard : NSString;

external NSFontPboard : NSString;

external NSRulerPboard : NSString;

external NSFindPboard : NSString;

external NSDragPboard : NSString;

external NSPasteboardURLReadingFileURLsOnlyKey : NSString;

external NSPasteboardURLReadingContentsConformToTypesKey : NSString;

alias NSPasteboardWritingPromised = 512;

alias NSPasteboardWritingOptions = UInt;

alias NSPasteboardReadingAsData = 0;
alias NSPasteboardReadingAsString = 1;
alias NSPasteboardReadingAsPropertyList = 2;
alias NSPasteboardReadingAsKeyedArchive = 4;

alias NSPasteboardReadingOptions = UInt;

external NSStringPboardType : NSString;

external NSFilenamesPboardType : NSString;

external NSTIFFPboardType : NSString;

external NSRTFPboardType : NSString;

external NSTabularTextPboardType : NSString;

external NSFontPboardType : NSString;

external NSRulerPboardType : NSString;

external NSColorPboardType : NSString;

external NSRTFDPboardType : NSString;

external NSHTMLPboardType : NSString;

external NSURLPboardType : NSString;

external NSPDFPboardType : NSString;

external NSMultipleTextSelectionPboardType : NSString;

external NSPostScriptPboardType : NSString;

external NSVCardPboardType : NSString;

external NSInkTextPboardType : NSString;

external NSFilesPromisePboardType : NSString;

external NSFileContentsPboardType : NSString;

external NSCreateFilenamePboardType(
    fileType : NSString) : NSString;

external NSCreateFileContentsPboardType(
    fileType : NSString) : NSString;

external NSGetFileType(
    pboardType : NSString) : NSString;

external NSGetFileTypes(
    pboardTypes : NSArray) : NSArray;

external NSPICTPboardType : NSString;

external NSSystemColorsDidChangeNotification : NSString;

alias NSUnknownColorSpaceModel = 4294967295;
alias NSGrayColorSpaceModel = 0;
alias NSRGBColorSpaceModel = 1;
alias NSCMYKColorSpaceModel = 2;
alias NSLABColorSpaceModel = 3;
alias NSDeviceNColorSpaceModel = 4;
alias NSIndexedColorSpaceModel = 5;
alias NSPatternColorSpaceModel = 6;

alias NSColorSpaceModel = Int;

alias NSImageRepMatchesDevice = 0;

external NSImageRepRegistryDidChangeNotification : NSString;

alias NSTIFFCompressionNone = 1;
alias NSTIFFCompressionCCITTFAX3 = 3;
alias NSTIFFCompressionCCITTFAX4 = 4;
alias NSTIFFCompressionLZW = 5;
alias NSTIFFCompressionJPEG = 6;
alias NSTIFFCompressionNEXT = 32766;
alias NSTIFFCompressionPackBits = 32773;
alias NSTIFFCompressionOldJPEG = 32865;

alias NSTIFFCompression = UInt;

alias NSTIFFFileType = 0;
alias NSBMPFileType = 1;
alias NSGIFFileType = 2;
alias NSJPEGFileType = 3;
alias NSPNGFileType = 4;
alias NSJPEG2000FileType = 5;

alias NSBitmapImageFileType = UInt;

alias NSImageRepLoadStatusUnknownType = 4294967295;
alias NSImageRepLoadStatusReadingHeader = 4294967294;
alias NSImageRepLoadStatusWillNeedAllData = 4294967293;
alias NSImageRepLoadStatusInvalidData = 4294967292;
alias NSImageRepLoadStatusUnexpectedEOF = 4294967291;
alias NSImageRepLoadStatusCompleted = 4294967290;

alias NSImageRepLoadStatus = Int;

alias NSAlphaFirstBitmapFormat = 1;
alias NSAlphaNonpremultipliedBitmapFormat = 2;
alias NSFloatingPointSamplesBitmapFormat = 4;

alias NSBitmapFormat = UInt;

external NSImageCompressionMethod : NSString;

external NSImageCompressionFactor : NSString;

external NSImageDitherTransparency : NSString;

external NSImageRGBColorTable : NSString;

external NSImageInterlaced : NSString;

external NSImageColorSyncProfileData : NSString;

external NSImageFrameCount : NSString;

external NSImageCurrentFrame : NSString;

external NSImageCurrentFrameDuration : NSString;

external NSImageLoopCount : NSString;

external NSImageGamma : NSString;

external NSImageProgressive : NSString;

external NSImageEXIFData : NSString;

external NSImageFallbackBackgroundColor : NSString;

alias NSDragOperation = UInt;

alias NSDragOperationNone = 0;
alias NSDragOperationCopy = 1;
alias NSDragOperationLink = 2;
alias NSDragOperationGeneric = 4;
alias NSDragOperationPrivate = 8;
alias NSDragOperationAll_Obsolete = 15;
alias NSDragOperationMove = 16;
alias NSDragOperationDelete = 32;
alias NSDragOperationEvery = 4294967295;

record Struct___Brflags (
    firstVisibleCalculationDisabled : UInt,
    prefersAllColumnUserResizing : UInt,
    usesSmallScrollers : UInt,
    usesSmallSizeTitleFont : UInt,
    actionNeedsToBeSent : UInt,
    acceptsFirstMouse : UInt,
    refusesFirstResponder : UInt,
    disableCompositing : UInt,
    delegateSelectsCellsByRow : UInt,
    allowsIncrementalSearching : UInt,
    time : UInt,
    hasHorizontalScroller : UInt,
    prohibitEmptySel : UInt,
    sendActionOnArrowKeys : UInt,
    dontDrawTitles : UInt,
    acceptArrowKeys : UInt,
    delegateValidatesColumns : UInt,
    delegateDoesNotCreateRowsInMatrix : UInt,
    delegateSelectsCellsByString : UInt,
    delegateSetsTitles : UInt,
    delegateImplementsWillDisplayCell : UInt,
    separateColumns : UInt,
    titleFromPrevious : UInt,
    isTitled : UInt,
    reuseColumns : UInt,
    allowsBranchSelection : UInt,
    allowsMultipleSelection : UInt,
);

alias _Brflags = Struct___Brflags;

alias NSBrowserNoColumnResizing = 0;
alias NSBrowserAutoColumnResizing = 1;
alias NSBrowserUserColumnResizing = 2;

alias NSBrowserColumnResizingType = UInt;

alias NSBrowserDropOn = 0;
alias NSBrowserDropAbove = 1;

alias NSBrowserDropOperation = UInt;

external NSBrowserColumnConfigurationDidChangeNotification : NSString;

external NSColorListDidChangeNotification : NSString;

alias NSColorPanelMode = Int;

alias NSNoModeColorPanel = 4294967295;
alias NSGrayModeColorPanel = 0;
alias NSRGBModeColorPanel = 1;
alias NSCMYKModeColorPanel = 2;
alias NSHSBModeColorPanel = 3;
alias NSCustomPaletteModeColorPanel = 4;
alias NSColorListModeColorPanel = 5;
alias NSWheelModeColorPanel = 6;
alias NSCrayonModeColorPanel = 7;

alias NSColorPanelGrayModeMask = 1;
alias NSColorPanelRGBModeMask = 2;
alias NSColorPanelCMYKModeMask = 4;
alias NSColorPanelHSBModeMask = 8;
alias NSColorPanelCustomPaletteModeMask = 16;
alias NSColorPanelColorListModeMask = 32;
alias NSColorPanelWheelModeMask = 64;
alias NSColorPanelCrayonModeMask = 128;
alias NSColorPanelAllModesMask = 65535;

external NSColorPanelColorDidChangeNotification : NSString;

alias NSChangeDone = 0;
alias NSChangeUndone = 1;
alias NSChangeCleared = 2;
alias NSChangeRedone = 5;
alias NSChangeReadOtherContents = 3;
alias NSChangeAutosaved = 4;

alias NSDocumentChangeType = UInt;

alias NSSaveOperation = 0;
alias NSSaveAsOperation = 1;
alias NSSaveToOperation = 2;
alias NSAutosaveOperation = 3;

alias NSSaveOperationType = UInt;

alias NSTouchPhaseBegan = 1;
alias NSTouchPhaseMoved = 2;
alias NSTouchPhaseStationary = 4;
alias NSTouchPhaseEnded = 8;
alias NSTouchPhaseCancelled = 16;
alias NSTouchPhaseTouching = 7;
alias NSTouchPhaseAny = 4294967295;

alias NSTouchPhase = UInt;

alias NSLeftMouseDown = 1;
alias NSLeftMouseUp = 2;
alias NSRightMouseDown = 3;
alias NSRightMouseUp = 4;
alias NSMouseMoved = 5;
alias NSLeftMouseDragged = 6;
alias NSRightMouseDragged = 7;
alias NSMouseEntered = 8;
alias NSMouseExited = 9;
alias NSKeyDown = 10;
alias NSKeyUp = 11;
alias NSFlagsChanged = 12;
alias NSAppKitDefined = 13;
alias NSSystemDefined = 14;
alias NSApplicationDefined = 15;
alias NSPeriodic = 16;
alias NSCursorUpdate = 17;
alias NSScrollWheel = 22;
alias NSTabletPoint = 23;
alias NSTabletProximity = 24;
alias NSOtherMouseDown = 25;
alias NSOtherMouseUp = 26;
alias NSOtherMouseDragged = 27;
alias NSEventTypeGesture = 29;
alias NSEventTypeMagnify = 30;
alias NSEventTypeSwipe = 31;
alias NSEventTypeRotate = 18;
alias NSEventTypeBeginGesture = 19;
alias NSEventTypeEndGesture = 20;

alias NSEventType = UInt;

alias NSEventMask = UInt64;

alias NSLeftMouseDownMask = 2;
alias NSLeftMouseUpMask = 4;
alias NSRightMouseDownMask = 8;
alias NSRightMouseUpMask = 16;
alias NSMouseMovedMask = 32;
alias NSLeftMouseDraggedMask = 64;
alias NSRightMouseDraggedMask = 128;
alias NSMouseEnteredMask = 256;
alias NSMouseExitedMask = 512;
alias NSKeyDownMask = 1024;
alias NSKeyUpMask = 2048;
alias NSFlagsChangedMask = 4096;
alias NSAppKitDefinedMask = 8192;
alias NSSystemDefinedMask = 16384;
alias NSApplicationDefinedMask = 32768;
alias NSPeriodicMask = 65536;
alias NSCursorUpdateMask = 131072;
alias NSScrollWheelMask = 4194304;
alias NSTabletPointMask = 8388608;
alias NSTabletProximityMask = 16777216;
alias NSOtherMouseDownMask = 33554432;
alias NSOtherMouseUpMask = 67108864;
alias NSOtherMouseDraggedMask = 134217728;
alias NSEventMaskGesture = 536870912;
alias NSEventMaskMagnify = 1073741824;
alias NSEventMaskSwipe = 2147483648;
alias NSEventMaskRotate = 262144;
alias NSEventMaskBeginGesture = 524288;
alias NSEventMaskEndGesture = 1048576;
alias NSAnyEventMask = 4294967295;

alias NSAlphaShiftKeyMask = 65536;
alias NSShiftKeyMask = 131072;
alias NSControlKeyMask = 262144;
alias NSAlternateKeyMask = 524288;
alias NSCommandKeyMask = 1048576;
alias NSNumericPadKeyMask = 2097152;
alias NSHelpKeyMask = 4194304;
alias NSFunctionKeyMask = 8388608;
alias NSDeviceIndependentModifierFlagsMask = 4294901760;

alias NSUnknownPointingDevice = 0;
alias NSPenPointingDevice = 1;
alias NSCursorPointingDevice = 2;
alias NSEraserPointingDevice = 3;

alias NSPointingDeviceType = UInt;

alias NSPenTipMask = 1;
alias NSPenLowerSideMask = 2;
alias NSPenUpperSideMask = 4;

alias NSUpArrowFunctionKey = 63232;
alias NSDownArrowFunctionKey = 63233;
alias NSLeftArrowFunctionKey = 63234;
alias NSRightArrowFunctionKey = 63235;
alias NSF1FunctionKey = 63236;
alias NSF2FunctionKey = 63237;
alias NSF3FunctionKey = 63238;
alias NSF4FunctionKey = 63239;
alias NSF5FunctionKey = 63240;
alias NSF6FunctionKey = 63241;
alias NSF7FunctionKey = 63242;
alias NSF8FunctionKey = 63243;
alias NSF9FunctionKey = 63244;
alias NSF10FunctionKey = 63245;
alias NSF11FunctionKey = 63246;
alias NSF12FunctionKey = 63247;
alias NSF13FunctionKey = 63248;
alias NSF14FunctionKey = 63249;
alias NSF15FunctionKey = 63250;
alias NSF16FunctionKey = 63251;
alias NSF17FunctionKey = 63252;
alias NSF18FunctionKey = 63253;
alias NSF19FunctionKey = 63254;
alias NSF20FunctionKey = 63255;
alias NSF21FunctionKey = 63256;
alias NSF22FunctionKey = 63257;
alias NSF23FunctionKey = 63258;
alias NSF24FunctionKey = 63259;
alias NSF25FunctionKey = 63260;
alias NSF26FunctionKey = 63261;
alias NSF27FunctionKey = 63262;
alias NSF28FunctionKey = 63263;
alias NSF29FunctionKey = 63264;
alias NSF30FunctionKey = 63265;
alias NSF31FunctionKey = 63266;
alias NSF32FunctionKey = 63267;
alias NSF33FunctionKey = 63268;
alias NSF34FunctionKey = 63269;
alias NSF35FunctionKey = 63270;
alias NSInsertFunctionKey = 63271;
alias NSDeleteFunctionKey = 63272;
alias NSHomeFunctionKey = 63273;
alias NSBeginFunctionKey = 63274;
alias NSEndFunctionKey = 63275;
alias NSPageUpFunctionKey = 63276;
alias NSPageDownFunctionKey = 63277;
alias NSPrintScreenFunctionKey = 63278;
alias NSScrollLockFunctionKey = 63279;
alias NSPauseFunctionKey = 63280;
alias NSSysReqFunctionKey = 63281;
alias NSBreakFunctionKey = 63282;
alias NSResetFunctionKey = 63283;
alias NSStopFunctionKey = 63284;
alias NSMenuFunctionKey = 63285;
alias NSUserFunctionKey = 63286;
alias NSSystemFunctionKey = 63287;
alias NSPrintFunctionKey = 63288;
alias NSClearLineFunctionKey = 63289;
alias NSClearDisplayFunctionKey = 63290;
alias NSInsertLineFunctionKey = 63291;
alias NSDeleteLineFunctionKey = 63292;
alias NSInsertCharFunctionKey = 63293;
alias NSDeleteCharFunctionKey = 63294;
alias NSPrevFunctionKey = 63295;
alias NSNextFunctionKey = 63296;
alias NSSelectFunctionKey = 63297;
alias NSExecuteFunctionKey = 63298;
alias NSUndoFunctionKey = 63299;
alias NSRedoFunctionKey = 63300;
alias NSFindFunctionKey = 63301;
alias NSHelpFunctionKey = 63302;
alias NSModeSwitchFunctionKey = 63303;

alias NSWindowExposedEventType = 0;
alias NSApplicationActivatedEventType = 1;
alias NSApplicationDeactivatedEventType = 2;
alias NSWindowMovedEventType = 4;
alias NSScreenChangedEventType = 8;
alias NSAWTEventType = 16;

alias NSPowerOffEventType = 1;

alias NSMouseEventSubtype = 0;
alias NSTabletPointEventSubtype = 1;
alias NSTabletProximityEventSubtype = 2;
alias NSTouchEventSubtype = 3;

alias NSFileWrapperReadingImmediate = 1;
alias NSFileWrapperReadingWithoutMapping = 2;

alias NSFileWrapperReadingOptions = UInt;

alias NSFileWrapperWritingAtomic = 1;
alias NSFileWrapperWritingWithNameUpdating = 2;

alias NSFileWrapperWritingOptions = UInt;

external NSContextHelpModeDidActivateNotification : NSString;

external NSContextHelpModeDidDeactivateNotification : NSString;

alias NSGradientDrawingOptions = UInt;

alias NSGradientDrawsBeforeStartingLocation = 1;
alias NSGradientDrawsAfterEndingLocation = 2;

alias NSImageLoadStatusCompleted = 0;
alias NSImageLoadStatusCancelled = 1;
alias NSImageLoadStatusInvalidData = 2;
alias NSImageLoadStatusUnexpectedEOF = 3;
alias NSImageLoadStatusReadError = 4;

alias NSImageLoadStatus = UInt;

alias NSImageCacheDefault = 0;
alias NSImageCacheAlways = 1;
alias NSImageCacheBySize = 2;
alias NSImageCacheNever = 3;

alias NSImageCacheMode = UInt;

external NSImageHintCTM : NSString;

external NSImageHintInterpolation : NSString;

external NSImageNameQuickLookTemplate : NSString;

external NSImageNameBluetoothTemplate : NSString;

external NSImageNameIChatTheaterTemplate : NSString;

external NSImageNameSlideshowTemplate : NSString;

external NSImageNameActionTemplate : NSString;

external NSImageNameSmartBadgeTemplate : NSString;

external NSImageNameIconViewTemplate : NSString;

external NSImageNameListViewTemplate : NSString;

external NSImageNameColumnViewTemplate : NSString;

external NSImageNameFlowViewTemplate : NSString;

external NSImageNamePathTemplate : NSString;

external NSImageNameInvalidDataFreestandingTemplate : NSString;

external NSImageNameLockLockedTemplate : NSString;

external NSImageNameLockUnlockedTemplate : NSString;

external NSImageNameGoRightTemplate : NSString;

external NSImageNameGoLeftTemplate : NSString;

external NSImageNameRightFacingTriangleTemplate : NSString;

external NSImageNameLeftFacingTriangleTemplate : NSString;

external NSImageNameAddTemplate : NSString;

external NSImageNameRemoveTemplate : NSString;

external NSImageNameRevealFreestandingTemplate : NSString;

external NSImageNameFollowLinkFreestandingTemplate : NSString;

external NSImageNameEnterFullScreenTemplate : NSString;

external NSImageNameExitFullScreenTemplate : NSString;

external NSImageNameStopProgressTemplate : NSString;

external NSImageNameStopProgressFreestandingTemplate : NSString;

external NSImageNameRefreshTemplate : NSString;

external NSImageNameRefreshFreestandingTemplate : NSString;

external NSImageNameBonjour : NSString;

external NSImageNameComputer : NSString;

external NSImageNameFolderBurnable : NSString;

external NSImageNameFolderSmart : NSString;

external NSImageNameFolder : NSString;

external NSImageNameNetwork : NSString;

external NSImageNameDotMac : NSString;

external NSImageNameMobileMe : NSString;

external NSImageNameMultipleDocuments : NSString;

external NSImageNameUserAccounts : NSString;

external NSImageNamePreferencesGeneral : NSString;

external NSImageNameAdvanced : NSString;

external NSImageNameInfo : NSString;

external NSImageNameFontPanel : NSString;

external NSImageNameColorPanel : NSString;

external NSImageNameUser : NSString;

external NSImageNameUserGroup : NSString;

external NSImageNameEveryone : NSString;

external NSImageNameUserGuest : NSString;

external NSImageNameMenuOnStateTemplate : NSString;

external NSImageNameMenuMixedStateTemplate : NSString;

external NSImageNameApplicationIcon : NSString;

external NSImageNameTrashEmpty : NSString;

external NSImageNameTrashFull : NSString;

external NSImageNameHomeTemplate : NSString;

external NSImageNameBookmarksTemplate : NSString;

external NSImageNameCaution : NSString;

external NSImageNameStatusAvailable : NSString;

external NSImageNameStatusPartiallyAvailable : NSString;

external NSImageNameStatusUnavailable : NSString;

external NSImageNameStatusNone : NSString;

alias NSImageAlignCenter = 0;
alias NSImageAlignTop = 1;
alias NSImageAlignTopLeft = 2;
alias NSImageAlignTopRight = 3;
alias NSImageAlignLeft = 4;
alias NSImageAlignBottom = 5;
alias NSImageAlignBottomLeft = 6;
alias NSImageAlignBottomRight = 7;
alias NSImageAlignRight = 8;

alias NSImageAlignment = UInt;

alias NSImageFrameNone = 0;
alias NSImageFramePhoto = 1;
alias NSImageFrameGrayBezel = 2;
alias NSImageFrameGroove = 3;
alias NSImageFrameButton = 4;

alias NSImageFrameStyle = UInt;

external NSNibOwner : NSString;

external NSNibTopLevelObjects : NSString;

alias NSPrinterTableOK = 0;
alias NSPrinterTableNotFound = 1;
alias NSPrinterTableError = 2;

alias NSPrinterTableStatus = UInt;

external NSVoiceName : NSString;

external NSVoiceIdentifier : NSString;

external NSVoiceAge : NSString;

external NSVoiceGender : NSString;

external NSVoiceDemoText : NSString;

external NSVoiceLocaleIdentifier : NSString;

external NSVoiceSupportedCharacters : NSString;

external NSVoiceIndividuallySpokenCharacters : NSString;

external NSVoiceGenderNeuter : NSString;

external NSVoiceGenderMale : NSString;

external NSVoiceGenderFemale : NSString;

external NSVoiceLanguage : NSString;

alias NSSpeechImmediateBoundary = 0;
alias NSSpeechWordBoundary = 1;
alias NSSpeechSentenceBoundary = 2;

alias NSSpeechBoundary = UInt;

external NSSpeechStatusProperty : NSString;

external NSSpeechErrorsProperty : NSString;

external NSSpeechInputModeProperty : NSString;

external NSSpeechCharacterModeProperty : NSString;

external NSSpeechNumberModeProperty : NSString;

external NSSpeechRateProperty : NSString;

external NSSpeechPitchBaseProperty : NSString;

external NSSpeechPitchModProperty : NSString;

external NSSpeechVolumeProperty : NSString;

external NSSpeechSynthesizerInfoProperty : NSString;

external NSSpeechRecentSyncProperty : NSString;

external NSSpeechPhonemeSymbolsProperty : NSString;

external NSSpeechCurrentVoiceProperty : NSString;

external NSSpeechCommandDelimiterProperty : NSString;

external NSSpeechResetProperty : NSString;

external NSSpeechOutputToFileURLProperty : NSString;

external NSSpeechModeText : NSString;

external NSSpeechModePhoneme : NSString;

external NSSpeechModeNormal : NSString;

external NSSpeechModeLiteral : NSString;

external NSSpeechStatusOutputBusy : NSString;

external NSSpeechStatusOutputPaused : NSString;

external NSSpeechStatusNumberOfCharactersLeft : NSString;

external NSSpeechStatusPhonemeCode : NSString;

external NSSpeechErrorCount : NSString;

external NSSpeechErrorOldestCode : NSString;

external NSSpeechErrorOldestCharacterOffset : NSString;

external NSSpeechErrorNewestCode : NSString;

external NSSpeechErrorNewestCharacterOffset : NSString;

external NSSpeechSynthesizerInfoIdentifier : NSString;

external NSSpeechSynthesizerInfoVersion : NSString;

external NSSpeechPhonemeInfoOpcode : NSString;

external NSSpeechPhonemeInfoSymbol : NSString;

external NSSpeechPhonemeInfoExample : NSString;

external NSSpeechPhonemeInfoHiliteStart : NSString;

external NSSpeechPhonemeInfoHiliteEnd : NSString;

external NSSpeechCommandPrefix : NSString;

external NSSpeechCommandSuffix : NSString;

external NSSpeechDictionaryLocaleIdentifier : NSString;

external NSSpeechDictionaryModificationDate : NSString;

external NSSpeechDictionaryPronunciations : NSString;

external NSSpeechDictionaryAbbreviations : NSString;

external NSSpeechDictionaryEntrySpelling : NSString;

external NSSpeechDictionaryEntryPhonemes : NSString;

alias NSSplitViewDividerStyleThick = 1;
alias NSSplitViewDividerStyleThin = 2;
alias NSSplitViewDividerStylePaneSplitter = 3;

alias NSSplitViewDividerStyle = Int;

external NSSplitViewWillResizeSubviewsNotification : NSString;

external NSSplitViewDidResizeSubviewsNotification : NSString;

alias NSFileHandlingPanelCancelButton = 0;
alias NSFileHandlingPanelOKButton = 1;

record Struct___SPFlags (
    saveMode : UInt,
    isExpanded : UInt,
    allowsOtherFileTypes : UInt,
    canCreateDirectories : UInt,
    canSelectedHiddenExtension : UInt,
    inConfigureForDirectory : UInt,
    delegate_shouldShowFilename : UInt,
    delegate_compareFilename : UInt,
    delegate_shouldEnableURL : UInt,
    delegate_validateURL : UInt,
    delegate_didChangeToDirectoryURL : UInt,
    changingFrameSize : UInt,
    movingAccessoryView : UInt,
    userAccessoryViewFrameChange : UInt,
    reserved : UInt,
);

alias _SPFlags = Struct___SPFlags;

external NSPopUpButtonWillPopUpNotification : NSString;

alias NSPortraitOrientation = 0;
alias NSLandscapeOrientation = 1;

alias NSPrintingOrientation = UInt;

alias NSAutoPagination = 0;
alias NSFitPagination = 1;
alias NSClipPagination = 2;

alias NSPrintingPaginationMode = UInt;

external NSPrintSpoolJob : NSString;

external NSPrintPreviewJob : NSString;

external NSPrintSaveJob : NSString;

external NSPrintCancelJob : NSString;

external NSPrintPaperName : NSString;

external NSPrintPaperSize : NSString;

external NSPrintOrientation : NSString;

external NSPrintScalingFactor : NSString;

external NSPrintLeftMargin : NSString;

external NSPrintRightMargin : NSString;

external NSPrintTopMargin : NSString;

external NSPrintBottomMargin : NSString;

external NSPrintHorizontallyCentered : NSString;

external NSPrintVerticallyCentered : NSString;

external NSPrintHorizontalPagination : NSString;

external NSPrintVerticalPagination : NSString;

external NSPrintPrinter : NSString;

external NSPrintCopies : NSString;

external NSPrintAllPages : NSString;

external NSPrintFirstPage : NSString;

external NSPrintLastPage : NSString;

external NSPrintMustCollate : NSString;

external NSPrintReversePageOrder : NSString;

external NSPrintJobDisposition : NSString;

external NSPrintPagesAcross : NSString;

external NSPrintPagesDown : NSString;

external NSPrintTime : NSString;

external NSPrintDetailedErrorReporting : NSString;

external NSPrintFaxNumber : NSString;

external NSPrintPrinterName : NSString;

external NSPrintSelectionOnly : NSString;

external NSPrintJobSavingURL : NSString;

external NSPrintJobSavingFileNameExtensionHidden : NSString;

external NSPrintHeaderAndFooter : NSString;

external NSPrintFormName : NSString;

external NSPrintJobFeatures : NSString;

external NSPrintManualFeed : NSString;

external NSPrintPagesPerSheet : NSString;

external NSPrintPaperFeed : NSString;

external NSPrintSavePath : NSString;

alias NSDescendingPageOrder = 4294967295;
alias NSSpecialPageOrder = 0;
alias NSAscendingPageOrder = 1;
alias NSUnknownPageOrder = 2;

alias NSPrintingPageOrder = Int;

external NSPrintOperationExistsException : NSString;

alias NSPrintPanelShowsCopies = 1;
alias NSPrintPanelShowsPageRange = 2;
alias NSPrintPanelShowsPaperSize = 4;
alias NSPrintPanelShowsOrientation = 8;
alias NSPrintPanelShowsScaling = 16;
alias NSPrintPanelShowsPrintSelection = 32;
alias NSPrintPanelShowsPageSetupAccessory = 256;
alias NSPrintPanelShowsPreview = 131072;

alias NSPrintPanelOptions = Int;

external NSPrintPhotoJobStyleHint : NSString;

external NSPrintAllPresetsJobStyleHint : NSString;

external NSPrintNoPresetsJobStyleHint : NSString;

external NSPrintPanelAccessorySummaryItemNameKey : NSString;

external NSPrintPanelAccessorySummaryItemDescriptionKey : NSString;

alias NSScreenAuxiliaryOpaque = Opaque;

external NSScreenColorSpaceDidChangeNotification : NSString;

record Struct___SFlags (
    RESERVED : UInt,
    autoforwardsScrollWheelEvents : UInt,
    autohidesScrollers : UInt,
    hasCustomLineBorderColor : UInt,
    focusRingNeedsRedisplay : UInt,
    skipRemoveSuperviewCheck : UInt,
    doesNotDrawBackground : UInt,
    needsTile : UInt,
    hasVerticalRuler : UInt,
    hasHorizontalRuler : UInt,
    showRulers : UInt,
    oldRulerInstalled : UInt,
    borderType : UInt,
    noDynamicScrolling : UInt,
    hScrollerStatus : UInt,
    vScrollerStatus : UInt,
    hScrollerRequired : UInt,
    vScrollerRequired : UInt,
);

alias _SFlags = Struct___SFlags;

alias NSScrollerArrowsMaxEnd = 0;
alias NSScrollerArrowsMinEnd = 1;
alias NSScrollerArrowsDefaultSetting = 0;
alias NSScrollerArrowsNone = 2;

alias NSScrollArrowPosition = UInt;

alias NSNoScrollerParts = 0;
alias NSOnlyScrollerArrows = 1;
alias NSAllScrollerParts = 2;

alias NSUsableScrollerParts = UInt;

alias NSScrollerNoPart = 0;
alias NSScrollerDecrementPage = 1;
alias NSScrollerKnob = 2;
alias NSScrollerIncrementPage = 3;
alias NSScrollerDecrementLine = 4;
alias NSScrollerIncrementLine = 5;
alias NSScrollerKnobSlot = 6;

alias NSScrollerPart = UInt;

alias NSScrollerIncrementArrow = 0;
alias NSScrollerDecrementArrow = 1;

alias NSScrollerArrow = UInt;

alias NSSegmentStyleAutomatic = 0;
alias NSSegmentStyleRounded = 1;
alias NSSegmentStyleTexturedRounded = 2;
alias NSSegmentStyleRoundRect = 3;
alias NSSegmentStyleTexturedSquare = 4;
alias NSSegmentStyleCapsule = 5;
alias NSSegmentStyleSmallSquare = 6;

alias NSSegmentStyle = Int;

alias NSSegmentSwitchTrackingSelectOne = 0;
alias NSSegmentSwitchTrackingSelectAny = 1;
alias NSSegmentSwitchTrackingMomentary = 2;

alias NSSegmentSwitchTracking = UInt;

alias NSTickMarkBelow = 0;
alias NSTickMarkAbove = 1;
alias NSTickMarkLeft = 1;
alias NSTickMarkRight = 0;

alias NSTickMarkPosition = UInt;

alias NSLinearSlider = 0;
alias NSCircularSlider = 1;

alias NSSliderType = UInt;

alias NSTextFieldSquareBezel = 0;
alias NSTextFieldRoundedBezel = 1;

alias NSTextFieldBezelStyle = UInt;

alias NSLineSweepLeft = 0;
alias NSLineSweepRight = 1;
alias NSLineSweepDown = 2;
alias NSLineSweepUp = 3;

alias NSLineSweepDirection = UInt;

alias NSLineDoesntMove = 0;
alias NSLineMovesLeft = 1;
alias NSLineMovesRight = 2;
alias NSLineMovesDown = 3;
alias NSLineMovesUp = 4;

alias NSLineMovementDirection = UInt;

alias NSDefaultTokenStyle = 0;
alias NSPlainTextTokenStyle = 1;
alias NSRoundedTokenStyle = 2;

alias NSTokenStyle = UInt;

alias NSTrackingMouseEnteredAndExited = 1;
alias NSTrackingMouseMoved = 2;
alias NSTrackingCursorUpdate = 4;

alias NSTrackingActiveWhenFirstResponder = 16;
alias NSTrackingActiveInKeyWindow = 32;
alias NSTrackingActiveInActiveApp = 64;
alias NSTrackingActiveAlways = 128;

alias NSTrackingAssumeInside = 256;
alias NSTrackingInVisibleRect = 512;
alias NSTrackingEnabledDuringMouseDrag = 1024;

alias NSTrackingAreaOptions = UInt;

external NSComboBoxWillPopUpNotification : NSString;

external NSComboBoxWillDismissNotification : NSString;

external NSComboBoxSelectionDidChangeNotification : NSString;

external NSComboBoxSelectionIsChangingNotification : NSString;

external NSFontAttributeName : NSString;

external NSParagraphStyleAttributeName : NSString;

external NSForegroundColorAttributeName : NSString;

external NSUnderlineStyleAttributeName : NSString;

external NSSuperscriptAttributeName : NSString;

external NSBackgroundColorAttributeName : NSString;

external NSAttachmentAttributeName : NSString;

external NSLigatureAttributeName : NSString;

external NSBaselineOffsetAttributeName : NSString;

external NSKernAttributeName : NSString;

external NSLinkAttributeName : NSString;

external NSStrokeWidthAttributeName : NSString;

external NSStrokeColorAttributeName : NSString;

external NSUnderlineColorAttributeName : NSString;

external NSStrikethroughStyleAttributeName : NSString;

external NSStrikethroughColorAttributeName : NSString;

external NSShadowAttributeName : NSString;

external NSObliquenessAttributeName : NSString;

external NSExpansionAttributeName : NSString;

external NSCursorAttributeName : NSString;

external NSToolTipAttributeName : NSString;

external NSCharacterShapeAttributeName : NSString;

external NSGlyphInfoAttributeName : NSString;

external NSWritingDirectionAttributeName : NSString;

external NSMarkedClauseSegmentAttributeName : NSString;

alias NSUnderlineStyleNone = 0;
alias NSUnderlineStyleSingle = 1;
alias NSUnderlineStyleThick = 2;
alias NSUnderlineStyleDouble = 9;

alias NSUnderlinePatternSolid = 0;
alias NSUnderlinePatternDot = 256;
alias NSUnderlinePatternDash = 512;
alias NSUnderlinePatternDashDot = 768;
alias NSUnderlinePatternDashDotDot = 1024;

external NSUnderlineByWordMask : UInt;

external NSSpellingStateAttributeName : NSString;

alias NSSpellingStateSpellingFlag = 1;
alias NSSpellingStateGrammarFlag = 2;

external NSPlainTextDocumentType : NSString;

external NSRTFTextDocumentType : NSString;

external NSRTFDTextDocumentType : NSString;

external NSMacSimpleTextDocumentType : NSString;

external NSHTMLTextDocumentType : NSString;

external NSDocFormatTextDocumentType : NSString;

external NSWordMLTextDocumentType : NSString;

external NSWebArchiveTextDocumentType : NSString;

external NSOfficeOpenXMLTextDocumentType : NSString;

external NSOpenDocumentTextDocumentType : NSString;

external NSPaperSizeDocumentAttribute : NSString;

external NSLeftMarginDocumentAttribute : NSString;

external NSRightMarginDocumentAttribute : NSString;

external NSTopMarginDocumentAttribute : NSString;

external NSBottomMarginDocumentAttribute : NSString;

external NSViewSizeDocumentAttribute : NSString;

external NSViewZoomDocumentAttribute : NSString;

external NSViewModeDocumentAttribute : NSString;

external NSDocumentTypeDocumentAttribute : NSString;

external NSReadOnlyDocumentAttribute : NSString;

external NSConvertedDocumentAttribute : NSString;

external NSCocoaVersionDocumentAttribute : NSString;

external NSBackgroundColorDocumentAttribute : NSString;

external NSHyphenationFactorDocumentAttribute : NSString;

external NSDefaultTabIntervalDocumentAttribute : NSString;

external NSCharacterEncodingDocumentAttribute : NSString;

external NSFileTypeDocumentAttribute : NSString;

external NSTitleDocumentAttribute : NSString;

external NSCompanyDocumentAttribute : NSString;

external NSCopyrightDocumentAttribute : NSString;

external NSSubjectDocumentAttribute : NSString;

external NSAuthorDocumentAttribute : NSString;

external NSKeywordsDocumentAttribute : NSString;

external NSCommentDocumentAttribute : NSString;

external NSEditorDocumentAttribute : NSString;

external NSCreationTimeDocumentAttribute : NSString;

external NSModificationTimeDocumentAttribute : NSString;

external NSManagerDocumentAttribute : NSString;

external NSCategoryDocumentAttribute : NSString;

external NSExcludedElementsDocumentAttribute : NSString;

external NSTextEncodingNameDocumentAttribute : NSString;

external NSPrefixSpacesDocumentAttribute : NSString;

external NSDocumentTypeDocumentOption : NSString;

external NSDefaultAttributesDocumentOption : NSString;

external NSCharacterEncodingDocumentOption : NSString;

external NSTextEncodingNameDocumentOption : NSString;

external NSBaseURLDocumentOption : NSString;

external NSTimeoutDocumentOption : NSString;

external NSWebPreferencesDocumentOption : NSString;

external NSWebResourceLoadDelegateDocumentOption : NSString;

external NSTextSizeMultiplierDocumentOption : NSString;

external NSFileTypeDocumentOption : NSString;

alias NSNoUnderlineStyle = 0;
alias NSSingleUnderlineStyle = 1;

external NSUnderlineStrikethroughMask : UInt;

alias NSAttachmentCharacter = 65532;

alias NSSelectByCharacter = 0;
alias NSSelectByWord = 1;
alias NSSelectByParagraph = 2;

alias NSSelectionGranularity = UInt;

alias NSSelectionAffinityUpstream = 0;
alias NSSelectionAffinityDownstream = 1;

alias NSSelectionAffinity = UInt;

alias NSFindPanelActionShowFindPanel = 1;
alias NSFindPanelActionNext = 2;
alias NSFindPanelActionPrevious = 3;
alias NSFindPanelActionReplaceAll = 4;
alias NSFindPanelActionReplace = 5;
alias NSFindPanelActionReplaceAndFind = 6;
alias NSFindPanelActionSetFindString = 7;
alias NSFindPanelActionReplaceAllInSelection = 8;
alias NSFindPanelActionSelectAll = 9;
alias NSFindPanelActionSelectAllInSelection = 10;

alias NSFindPanelAction = UInt;

external NSFindPanelSearchOptionsPboardType : NSString;

external NSFindPanelCaseInsensitiveSearch : NSString;

external NSFindPanelSubstringMatch : NSString;

alias NSFindPanelSubstringMatchTypeContains = 0;
alias NSFindPanelSubstringMatchTypeStartsWith = 1;
alias NSFindPanelSubstringMatchTypeFullWord = 2;
alias NSFindPanelSubstringMatchTypeEndsWith = 3;

alias NSFindPanelSubstringMatchType = UInt;

external NSAllRomanInputSourcesLocaleIdentifier : NSString;

external NSTextViewWillChangeNotifyingTextViewNotification : NSString;

external NSTextViewDidChangeSelectionNotification : NSString;

external NSTextViewDidChangeTypingAttributesNotification : NSString;

record Struct___TvFlags (
    refusesFirstResponder : UInt,
    movedPostingDisableCount : UInt,
    selectionPostingDisableCount : UInt,
    dataSourceSetObjectValue : UInt,
    oldAutoresizesAllColumnsToFit : UInt,
    delegateSelectionShouldChangeInTableView : UInt,
    delegateShouldSelectTableColumn : UInt,
    delegateShouldSelectRow : UInt,
    delegateShouldEditTableColumn : UInt,
    delegateWillDisplayCell : UInt,
    compareWidthWithSuperview : UInt,
    changingLayout : UInt,
    selectionType : UInt,
    allowsColumnSelection : UInt,
    allowsMultipleSelection : UInt,
    allowsEmptySelection : UInt,
    oldDrawsGridFlag : UInt,
    allowsColumnResizing : UInt,
    allowsColumnReordering : UInt,
);

alias _TvFlags = Struct___TvFlags;

alias NSTableViewDropOn = 0;
alias NSTableViewDropAbove = 1;

alias NSTableViewDropOperation = UInt;

external NSTableViewSelectionDidChangeNotification : NSString;

external NSTableViewColumnDidMoveNotification : NSString;

external NSTableViewColumnDidResizeNotification : NSString;

external NSTableViewSelectionIsChangingNotification : NSString;

record Struct___OvFlags (
    _reserved : UInt,
    dontRedisplayOnFrameChange : UInt,
    flashingOutlineCell : UInt,
    flashingEntireRow : UInt,
    delegateShouldAutoExpandItem : UInt,
    delegateAutoCollapseItem : UInt,
    delegateAutoExpandItem : UInt,
    delegateShouldShowOutlineCellForItem : UInt,
    dataSourceDraggedImageMovedTo : UInt,
    dataSourceDraggingEndedAt : UInt,
    reloadingData : UInt,
    validDataSourceMethods : UInt,
    numberOfRowsDataExpandEntered : UInt,
    delayRowEntryFreeDisabled : UInt,
    delegateHeightOfRowByItem : UInt,
    _unused : UInt,
    autoExpandFlashState : UInt,
    selectionAdjustmentDisabled : UInt,
    removeChildInProgress : UInt,
    delegateWillDisplayOutlineCell : UInt,
    enableExpandNotifications : UInt,
    autoSaveExpandItems : UInt,
    autoresizesOutlineColumn : UInt,
    delegateShouldExpandItem : UInt,
    delegateShouldCollapseItem : UInt,
    delegateSelectionShouldChangeInOutlineView : UInt,
    delegateShouldSelectTableColumn : UInt,
    delegateShouldSelectItem : UInt,
    delegateShouldEditTableColumn : UInt,
    delegateWillDisplayCell : UInt,
);

alias _OVFlags = Struct___OvFlags;

alias NSOutlineViewDropOnItemIndex = 4294967295;

external NSOutlineViewSelectionDidChangeNotification : NSString;

external NSOutlineViewColumnDidMoveNotification : NSString;

external NSOutlineViewColumnDidResizeNotification : NSString;

external NSOutlineViewSelectionIsChangingNotification : NSString;

external NSOutlineViewItemWillExpandNotification : NSString;

external NSOutlineViewItemDidExpandNotification : NSString;

external NSOutlineViewItemWillCollapseNotification : NSString;

external NSOutlineViewItemDidCollapseNotification : NSString;

alias NSShowControlGlyphs = 1;
alias NSShowInvisibleGlyphs = 2;
alias NSWantsBidiLevels = 4;

alias NSGlyphAttributeSoft = 0;
alias NSGlyphAttributeElastic = 1;
alias NSGlyphAttributeBidiLevel = 2;
alias NSGlyphAttributeInscribe = 5;

alias NSGlyphInscribeBase = 0;
alias NSGlyphInscribeBelow = 1;
alias NSGlyphInscribeAbove = 2;
alias NSGlyphInscribeOverstrike = 3;
alias NSGlyphInscribeOverBelow = 4;

alias NSGlyphInscription = UInt;

alias NSTypesetterLatestBehavior = 4294967295;
alias NSTypesetterOriginalBehavior = 0;
alias NSTypesetterBehavior_10_2_WithCompatibility = 1;
alias NSTypesetterBehavior_10_2 = 2;
alias NSTypesetterBehavior_10_3 = 3;
alias NSTypesetterBehavior_10_4 = 4;

alias NSTypesetterBehavior = Int;

alias NSTextStorageEditedAttributes = 1;
alias NSTextStorageEditedCharacters = 2;

external NSTextStorageWillProcessEditingNotification : NSString;

external NSTextStorageDidProcessEditingNotification : NSString;

alias NSStringDrawingTruncatesLastVisibleLine = 32;
alias NSStringDrawingUsesLineFragmentOrigin = 1;
alias NSStringDrawingUsesFontLeading = 2;
alias NSStringDrawingDisableScreenFontSubstitution = 4;
alias NSStringDrawingUsesDeviceMetrics = 8;
alias NSStringDrawingOneShot = 16;

alias NSStringDrawingOptions = Int;

alias NSHorizontalRuler = 0;
alias NSVerticalRuler = 1;

alias NSRulerOrientation = UInt;

alias NSNoInterfaceStyle = 0;
alias NSNextStepInterfaceStyle = 1;
alias NSWindows95InterfaceStyle = 2;
alias NSMacintoshInterfaceStyle = 3;

alias NSInterfaceStyle = UInt;

external NSInterfaceStyleForKey(
    key : NSString,
    responder : NSResponder) : UInt;

external NSInterfaceStyleDefault : NSString;

alias _NSProgressIndicatorThreadInfo = Opaque;

alias NSProgressIndicatorPreferredThickness = 14;
alias NSProgressIndicatorPreferredSmallThickness = 10;
alias NSProgressIndicatorPreferredLargeThickness = 18;
alias NSProgressIndicatorPreferredAquaThickness = 12;

alias NSProgressIndicatorThickness = UInt;

alias NSProgressIndicatorBarStyle = 0;
alias NSProgressIndicatorSpinningStyle = 1;

alias NSProgressIndicatorStyle = UInt;

alias NSTopTabsBezelBorder = 0;
alias NSLeftTabsBezelBorder = 1;
alias NSBottomTabsBezelBorder = 2;
alias NSRightTabsBezelBorder = 3;
alias NSNoTabsBezelBorder = 4;
alias NSNoTabsLineBorder = 5;
alias NSNoTabsNoBorder = 6;

alias NSTabViewType = UInt;

alias NSSelectedTab = 0;
alias NSBackgroundTab = 1;
alias NSPressedTab = 2;

alias NSTabState = UInt;

alias NSPopUpNoArrow = 0;
alias NSPopUpArrowAtCenter = 1;
alias NSPopUpArrowAtBottom = 2;

alias NSPopUpArrowPosition = UInt;

external NSPopUpButtonCellWillPopUpNotification : NSString;

alias NSButtLineCapStyle = 0;
alias NSRoundLineCapStyle = 1;
alias NSSquareLineCapStyle = 2;

alias NSLineCapStyle = UInt;

alias NSMiterLineJoinStyle = 0;
alias NSRoundLineJoinStyle = 1;
alias NSBevelLineJoinStyle = 2;

alias NSLineJoinStyle = UInt;

alias NSNonZeroWindingRule = 0;
alias NSEvenOddWindingRule = 1;

alias NSWindingRule = UInt;

alias NSMoveToBezierPathElement = 0;
alias NSLineToBezierPathElement = 1;
alias NSCurveToBezierPathElement = 2;
alias NSClosePathBezierPathElement = 3;

alias NSBezierPathElement = UInt;

external NSSoundPboardType : NSString;

alias NSQTMovieNormalPlayback = 0;
alias NSQTMovieLoopingPlayback = 1;
alias NSQTMovieLoopingBackAndForthPlayback = 2;

alias NSQTMovieLoopMode = UInt;

record Struct___MVFlags (
    editable : UInt,
    loopMode : UInt,
    playsEveryFrame : UInt,
    playsSelectionOnly : UInt,
    controllerVisible : UInt,
    reserved : UInt,
);

alias _MVFlags = Struct___MVFlags;

alias NSDrawerClosedState = 0;
alias NSDrawerOpeningState = 1;
alias NSDrawerOpenState = 2;
alias NSDrawerClosingState = 3;

alias NSDrawerState = UInt;

external NSDrawerWillOpenNotification : NSString;

external NSDrawerDidOpenNotification : NSString;

external NSDrawerWillCloseNotification : NSString;

external NSDrawerDidCloseNotification : NSString;

alias NSOpenGLGOFormatCacheSize = 501;
alias NSOpenGLGOClearFormatCache = 502;
alias NSOpenGLGORetainRenderers = 503;
alias NSOpenGLGOResetLibrary = 504;

alias NSOpenGLGlobalOption = Int;

external NSOpenGLSetOption(
    pname : NSOpenGLGlobalOption,
    param : Int);

external NSOpenGLGetOption(
    pname : NSOpenGLGlobalOption,
    param : Pointer[Int]);

external NSOpenGLGetVersion(
    major : Pointer[Int],
    minor : Pointer[Int]);

alias NSOpenGLPFAAllRenderers = 1;
alias NSOpenGLPFADoubleBuffer = 5;
alias NSOpenGLPFAStereo = 6;
alias NSOpenGLPFAAuxBuffers = 7;
alias NSOpenGLPFAColorSize = 8;
alias NSOpenGLPFAAlphaSize = 11;
alias NSOpenGLPFADepthSize = 12;
alias NSOpenGLPFAStencilSize = 13;
alias NSOpenGLPFAAccumSize = 14;
alias NSOpenGLPFAMinimumPolicy = 51;
alias NSOpenGLPFAMaximumPolicy = 52;
alias NSOpenGLPFAOffScreen = 53;
alias NSOpenGLPFAFullScreen = 54;
alias NSOpenGLPFASampleBuffers = 55;
alias NSOpenGLPFASamples = 56;
alias NSOpenGLPFAAuxDepthStencil = 57;
alias NSOpenGLPFAColorFloat = 58;
alias NSOpenGLPFAMultisample = 59;
alias NSOpenGLPFASupersample = 60;
alias NSOpenGLPFASampleAlpha = 61;
alias NSOpenGLPFARendererID = 70;
alias NSOpenGLPFASingleRenderer = 71;
alias NSOpenGLPFANoRecovery = 72;
alias NSOpenGLPFAAccelerated = 73;
alias NSOpenGLPFAClosestPolicy = 74;
alias NSOpenGLPFARobust = 75;
alias NSOpenGLPFABackingStore = 76;
alias NSOpenGLPFAMPSafe = 78;
alias NSOpenGLPFAWindow = 80;
alias NSOpenGLPFAMultiScreen = 81;
alias NSOpenGLPFACompliant = 83;
alias NSOpenGLPFAScreenMask = 84;
alias NSOpenGLPFAPixelBuffer = 90;
alias NSOpenGLPFARemotePixelBuffer = 91;
alias NSOpenGLPFAAllowOfflineRenderers = 96;
alias NSOpenGLPFAAcceleratedCompute = 97;
alias NSOpenGLPFAVirtualScreenCount = 128;

alias NSOpenGLPixelFormatAttribute = UInt;

alias NSOpenGLPixelFormatAuxiliary = Opaque;

alias NSOpenGLCPSwapRectangle = 200;
alias NSOpenGLCPSwapRectangleEnable = 201;
alias NSOpenGLCPRasterizationEnable = 221;
alias NSOpenGLCPSwapInterval = 222;
alias NSOpenGLCPSurfaceOrder = 235;
alias NSOpenGLCPSurfaceOpacity = 236;
alias NSOpenGLCPStateValidation = 301;

alias NSOpenGLContextParameter = Int;

alias NSOpenGLContextAuxiliary = Opaque;

alias NSToolbarDisplayModeDefault = 0;
alias NSToolbarDisplayModeIconAndLabel = 1;
alias NSToolbarDisplayModeIconOnly = 2;
alias NSToolbarDisplayModeLabelOnly = 3;

alias NSToolbarDisplayMode = UInt;

alias NSToolbarSizeModeDefault = 0;
alias NSToolbarSizeModeRegular = 1;
alias NSToolbarSizeModeSmall = 2;

alias NSToolbarSizeMode = UInt;

external NSToolbarWillAddItemNotification : NSString;

external NSToolbarDidRemoveItemNotification : NSString;

external NSToolbarSeparatorItemIdentifier : NSString;

external NSToolbarSpaceItemIdentifier : NSString;

external NSToolbarFlexibleSpaceItemIdentifier : NSString;

external NSToolbarShowColorsItemIdentifier : NSString;

external NSToolbarShowFontsItemIdentifier : NSString;

external NSToolbarCustomizeToolbarItemIdentifier : NSString;

external NSToolbarPrintItemIdentifier : NSString;

alias NSIdentityMappingCharacterCollection = 0;
alias NSAdobeCNS1CharacterCollection = 1;
alias NSAdobeGB1CharacterCollection = 2;
alias NSAdobeJapan1CharacterCollection = 3;
alias NSAdobeJapan2CharacterCollection = 4;
alias NSAdobeKorea1CharacterCollection = 5;

alias NSCharacterCollection = UInt;

alias NSTypesetterZeroAdvancementAction = 1;
alias NSTypesetterWhitespaceAction = 2;
alias NSTypesetterHorizontalTabAction = 4;
alias NSTypesetterLineBreakAction = 8;
alias NSTypesetterParagraphBreakAction = 16;
alias NSTypesetterContainerBreakAction = 32;

alias NSTypesetterControlCharacterAction = UInt;

external NSMultipleValuesMarker : Id;

external NSNoSelectionMarker : Id;

external NSNotApplicableMarker : Id;

external NSIsControllerMarker(
    object : Id) : Bool;

external NSObservedObjectKey : NSString;

external NSObservedKeyPathKey : NSString;

external NSOptionsKey : NSString;

external NSAlignmentBinding : NSString;

external NSAlternateImageBinding : NSString;

external NSAlternateTitleBinding : NSString;

external NSAnimateBinding : NSString;

external NSAnimationDelayBinding : NSString;

external NSArgumentBinding : NSString;

external NSAttributedStringBinding : NSString;

external NSContentArrayBinding : NSString;

external NSContentArrayForMultipleSelectionBinding : NSString;

external NSContentBinding : NSString;

external NSContentDictionaryBinding : NSString;

external NSContentHeightBinding : NSString;

external NSContentObjectBinding : NSString;

external NSContentObjectsBinding : NSString;

external NSContentSetBinding : NSString;

external NSContentValuesBinding : NSString;

external NSContentWidthBinding : NSString;

external NSCriticalValueBinding : NSString;

external NSDataBinding : NSString;

external NSDisplayPatternTitleBinding : NSString;

external NSDisplayPatternValueBinding : NSString;

external NSDocumentEditedBinding : NSString;

external NSDoubleClickArgumentBinding : NSString;

external NSDoubleClickTargetBinding : NSString;

external NSEditableBinding : NSString;

external NSEnabledBinding : NSString;

external NSExcludedKeysBinding : NSString;

external NSFilterPredicateBinding : NSString;

external NSFontBinding : NSString;

external NSFontBoldBinding : NSString;

external NSFontFamilyNameBinding : NSString;

external NSFontItalicBinding : NSString;

external NSFontNameBinding : NSString;

external NSFontSizeBinding : NSString;

external NSHeaderTitleBinding : NSString;

external NSHiddenBinding : NSString;

external NSImageBinding : NSString;

external NSIncludedKeysBinding : NSString;

external NSInitialKeyBinding : NSString;

external NSInitialValueBinding : NSString;

external NSIsIndeterminateBinding : NSString;

external NSLabelBinding : NSString;

external NSLocalizedKeyDictionaryBinding : NSString;

external NSManagedObjectContextBinding : NSString;

external NSMaximumRecentsBinding : NSString;

external NSMaxValueBinding : NSString;

external NSMaxWidthBinding : NSString;

external NSMinValueBinding : NSString;

external NSMinWidthBinding : NSString;

external NSMixedStateImageBinding : NSString;

external NSOffStateImageBinding : NSString;

external NSOnStateImageBinding : NSString;

external NSPredicateBinding : NSString;

external NSRecentSearchesBinding : NSString;

external NSRepresentedFilenameBinding : NSString;

external NSRowHeightBinding : NSString;

external NSSelectedIdentifierBinding : NSString;

external NSSelectedIndexBinding : NSString;

external NSSelectedLabelBinding : NSString;

external NSSelectedObjectBinding : NSString;

external NSSelectedObjectsBinding : NSString;

external NSSelectedTagBinding : NSString;

external NSSelectedValueBinding : NSString;

external NSSelectedValuesBinding : NSString;

external NSSelectionIndexesBinding : NSString;

external NSSelectionIndexPathsBinding : NSString;

external NSSortDescriptorsBinding : NSString;

external NSTargetBinding : NSString;

external NSTextColorBinding : NSString;

external NSTitleBinding : NSString;

external NSToolTipBinding : NSString;

external NSTransparentBinding : NSString;

external NSValueBinding : NSString;

external NSValuePathBinding : NSString;

external NSValueURLBinding : NSString;

external NSVisibleBinding : NSString;

external NSWarningValueBinding : NSString;

external NSWidthBinding : NSString;

external NSAllowsEditingMultipleValuesSelectionBindingOption : NSString;

external NSAllowsNullArgumentBindingOption : NSString;

external NSAlwaysPresentsApplicationModalAlertsBindingOption : NSString;

external NSConditionallySetsEditableBindingOption : NSString;

external NSConditionallySetsEnabledBindingOption : NSString;

external NSConditionallySetsHiddenBindingOption : NSString;

external NSContinuouslyUpdatesValueBindingOption : NSString;

external NSCreatesSortDescriptorBindingOption : NSString;

external NSDeletesObjectsOnRemoveBindingsOption : NSString;

external NSDisplayNameBindingOption : NSString;

external NSDisplayPatternBindingOption : NSString;

external NSContentPlacementTagBindingOption : NSString;

external NSHandlesContentAsCompoundValueBindingOption : NSString;

external NSInsertsNullPlaceholderBindingOption : NSString;

external NSInvokesSeparatelyWithArrayObjectsBindingOption : NSString;

external NSMultipleValuesPlaceholderBindingOption : NSString;

external NSNoSelectionPlaceholderBindingOption : NSString;

external NSNotApplicablePlaceholderBindingOption : NSString;

external NSNullPlaceholderBindingOption : NSString;

external NSRaisesForNotApplicableKeysBindingOption : NSString;

external NSPredicateFormatBindingOption : NSString;

external NSSelectorNameBindingOption : NSString;

external NSSelectsAllWhenSettingContentBindingOption : NSString;

external NSValidatesImmediatelyBindingOption : NSString;

external NSValueTransformerNameBindingOption : NSString;

external NSValueTransformerBindingOption : NSString;

alias NSTextListPrependEnclosingMarker = 1;

alias NSTextBlockAbsoluteValueType = 0;
alias NSTextBlockPercentageValueType = 1;

alias NSTextBlockValueType = UInt;

alias NSTextBlockWidth = 0;
alias NSTextBlockMinimumWidth = 1;
alias NSTextBlockMaximumWidth = 2;
alias NSTextBlockHeight = 4;
alias NSTextBlockMinimumHeight = 5;
alias NSTextBlockMaximumHeight = 6;

alias NSTextBlockDimension = UInt;

alias NSTextBlockPadding = 4294967295;
alias NSTextBlockBorder = 0;
alias NSTextBlockMargin = 1;

alias NSTextBlockLayer = Int;

alias NSTextBlockTopAlignment = 0;
alias NSTextBlockMiddleAlignment = 1;
alias NSTextBlockBottomAlignment = 2;
alias NSTextBlockBaselineAlignment = 3;

alias NSTextBlockVerticalAlignment = UInt;

alias NSTextTableAutomaticLayoutAlgorithm = 0;
alias NSTextTableFixedLayoutAlgorithm = 1;

alias NSTextTableLayoutAlgorithm = UInt;

alias NSTextFieldAndStepperDatePickerStyle = 0;
alias NSClockAndCalendarDatePickerStyle = 1;
alias NSTextFieldDatePickerStyle = 2;

alias NSDatePickerStyle = UInt;

alias NSSingleDateMode = 0;
alias NSRangeDateMode = 1;

alias NSDatePickerMode = UInt;

alias NSDatePickerElementFlags = UInt;

alias NSHourMinuteDatePickerElementFlag = 12;
alias NSHourMinuteSecondDatePickerElementFlag = 14;
alias NSTimeZoneDatePickerElementFlag = 16;
alias NSYearMonthDatePickerElementFlag = 192;
alias NSYearMonthDayDatePickerElementFlag = 224;
alias NSEraDatePickerElementFlag = 256;

alias NSRelevancyLevelIndicatorStyle = 0;
alias NSContinuousCapacityLevelIndicatorStyle = 1;
alias NSDiscreteCapacityLevelIndicatorStyle = 2;
alias NSRatingLevelIndicatorStyle = 3;

alias NSLevelIndicatorStyle = UInt;

alias NSRuleEditorNestingModeSingle = 0;
alias NSRuleEditorNestingModeList = 1;
alias NSRuleEditorNestingModeCompound = 2;
alias NSRuleEditorNestingModeSimple = 3;

alias NSRuleEditorNestingMode = UInt;

alias NSRuleEditorRowTypeSimple = 0;
alias NSRuleEditorRowTypeCompound = 1;

alias NSRuleEditorRowType = UInt;

external NSRuleEditorPredicateLeftExpression : NSString;

external NSRuleEditorPredicateRightExpression : NSString;

external NSRuleEditorPredicateComparisonModifier : NSString;

external NSRuleEditorPredicateOptions : NSString;

external NSRuleEditorPredicateOperatorType : NSString;

external NSRuleEditorPredicateCustomSelector : NSString;

external NSRuleEditorPredicateCompoundType : NSString;

external NSRuleEditorRowsDidChangeNotification : NSString;

alias NSPathStyleStandard = 0;
alias NSPathStyleNavigationBar = 1;
alias NSPathStylePopUp = 2;

alias NSPathStyle = Int;

alias NSCollectionViewDropOperation = Int;

alias NSCollectionViewDropOn = 0;
alias NSCollectionViewDropBefore = 1;

external NSTextInputContextKeyboardSelectionDidChangeNotification : NSString;
