
import io.files.raw.*;



//
// File
//

record File (
    ptr : SharedPointer[FileData],
);

private alias BUFFER_SIZE = 4096;

private record FileData (
    file : RawFile,

    readBuffer : Array[Byte, BUFFER_SIZE],
    readBegin : Pointer[Byte],
    readEnd : Pointer[Byte],

    lineBuffered? : Bool,
    writeBuffer : Array[Byte, BUFFER_SIZE],
    writeCount : SizeT,
);



//
// constructors
//

[S | CCompatibleString?(S)]
overload File(path:S, mode:OpenMode) =
    File(new FileData(RawFile(path, mode)));

[S | CCompatibleString?(S)]
overload File(path:S) = File(new FileData(RawFile(path)));

overload File(rvalue f:RawFile) =
    File(new FileData(move(f)));

overload FileData(rvalue file:RawFile) returned:FileData {
    var lineBuffered? = terminal?(file);
    var buf = Array[Byte,BUFFER_SIZE]();
    return FileData(move(file),
                    buf, null(Byte), null(Byte),
                    lineBuffered?, buf, SizeT(0));
}



//
// destroy
//

overload destroy(fd:FileData) {
    if (fd.writeCount > 0) {
        write(fd.file, &fd.writeBuffer[0], fd.writeCount);
        fd.writeCount = 0;
    }
    destroy(fd.file);
}



//
// stdinFile, stdoutFile, stderrFile
//

stdinFile()  = File(new FileData(stdinRawFile()));
stdoutFile() = File(new FileData(stdoutRawFile()));
stderrFile() = File(new FileData(stderrRawFile()));



//
// fileHandle
//

overload fileHandle(f:File) = fileHandle(f.ptr^.file);



//
// read, write, flush
//

[I | Integer?(I)]
overload read(f:File, buffer:Pointer[Byte], n_:I) {
    ref fd = f.ptr^;

    var count = SizeT(0);
    var pending = SizeT(n_);
    var dest = buffer;
    var src = fd.readBegin;
    var end = fd.readEnd;

    while (pending > 0) {
        if (pending <= end - src) {
            count += pending;
            while (pending > 0) {
                dest^ = src^;
                inc(dest);
                inc(src);
                dec(pending);
            }
            fd.readBegin = src;
            return count;
        }

        count += (end - src);
        pending -= (end - src);
        while (src != end) {
            dest^ = src^;
            inc(dest);
            inc(src);
        }

        src = &fd.readBuffer[0];
        end = src;
        fd.readBegin = src;
        fd.readEnd = src;

        var nRead = read(fd.file, fd.readBegin, BUFFER_SIZE);
        if (nRead == 0)
            break;
        end += nRead;
        fd.readEnd = end;
    }

    return count;
}

[I | Integer?(I)]
overload write(f:File, buffer:Pointer[Byte], n:I) {
    ref fd = f.ptr^;

    var src = buffer;
    var srcEnd = src + n;
    var dest = &fd.writeBuffer[0] + fd.writeCount;
    var destEnd = &fd.writeBuffer[0] + BUFFER_SIZE;

    var pendingNewlines = SizeT(0);

    while (src != srcEnd) {
        if (dest == destEnd) {
            fd.writeCount = dest - &fd.writeBuffer[0];
            flushData(fd);
            dest = &fd.writeBuffer[0];
            pendingNewlines = 0;
        }

        pendingNewlines += SizeT(src^ == Byte('\n'));

        dest^ = src^;
        inc(dest);
        inc(src);
    }

    fd.writeCount = dest - &fd.writeBuffer[0];

    if (fd.lineBuffered? and (pendingNewlines > 0))
        flushData(fd);
}

overload flush(f:File) {
    flushData(f.ptr^);
    flush(f.ptr^.file);
}

private flushData(fd:FileData) {
    if (fd.writeCount > 0) {
        write(fd.file, &fd.writeBuffer[0], fd.writeCount);
        fd.writeCount = 0;
    }
}



//
// fileSize, seek
//

overload fileSize(f:File) {
    flushData(f.ptr^);
    return fileSize(f.ptr^.file);
}

overload seek(f:File, offset, whence) {
    ref fd = f.ptr^;
    fd.readBegin = &fd.readBuffer[0];
    fd.readEnd = fd.readBegin;
    flushData(fd);
    return seek(fd.file, offset, whence);
}



//
// terminal?
//

overload terminal?(f:File) = terminal?(f.ptr^.file);
