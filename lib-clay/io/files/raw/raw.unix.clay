import unix;



//
// RawFile
//

record RawFile {
    handle : Int;
    owned : Bool;
}


overload RegularRecord?(static RawFile) = false;



//
// stdinRawFile, stdoutRawFile, stderrRawFile
//

stdinRawFile()  = RawFile(0, false);
stdoutRawFile() = RawFile(1, false);
stderrRawFile() = RawFile(2, false);



//
// constructors, destroy
//

private openFlags(mode) {
    if (mode == READ)
        return unix.O_RDONLY;
    if (mode == READ_WRITE)
        return unix.O_RDWR;
    if (mode == CREATE)
        return bitwiseOr(unix.O_RDWR, unix.O_CREAT, unix.O_TRUNC);
    if (mode == APPEND)
        return bitwiseOr(unix.O_WRONLY, unix.O_CREAT, unix.O_APPEND);
    assert(false);
    return -1;
}

[S | CCompatibleString?(S)]
overload RawFile(path:S, mode:OpenMode) {
    var flags = openFlags(mode);
    var handle = Int();
    if (bitwiseAnd(flags, unix.O_CREAT) != 0)
        handle = unix.open(cstring(path), flags, 0644);
    else
        handle = unix.open(cstring(path), flags);
    if (handle == -1)
        error(unix.errorMessage(), ": ", path);
    return RawFile(handle, true);
}

[S | CCompatibleString?(S)]
overload RawFile(path:S) = RawFile(path, READ);

overload destroy(x:RawFile) {
    if (x.owned)
        unix.syscallNoThrow(unix.close, x.handle);
}

// disable default constructor, copy constructor, assignment
overload RawFile();
overload RawFile(x:RawFile);
overload assign(dest:RawFile, src:RawFile);


// move constructor

overload move(src:RawFile) returned:RawFile {
    returned <-- RawFile(src.handle, src.owned);
    src <-- RawFile(-1, false);
}



//
// fileHandle
//

overload fileHandle(f:RawFile) = f.handle;



//
// read, write, flush
//

[I | Integer?(I)]
overload read(f:RawFile, buffer:Pointer[Byte], n:I) SizeT {
    var result = unix.syscall(unix.read, f.handle, buffer, SizeT(n));
    return SizeT(result);
}

[I | Integer?(I)]
overload write(f:RawFile, buffer:Pointer[Byte], n:I) {
    unix.syscall(unix.write, f.handle, buffer, SizeT(n));
}

overload flush(f:RawFile) {
}



//
// fileSize, seek
//

overload fileSize(f:RawFile) {
    var statBuf = unix.Struct_stat();
    unix.syscall(unix.fstat, f.handle, &statBuf);
    return Int64(statBuf.st_size);
}

private seekWhence(x) {
    if (x == SEEK_SET) return unix.SEEK_SET;
    if (x == SEEK_CUR) return unix.SEEK_CUR;
    if (x == SEEK_END) return unix.SEEK_END;
    assert(false);
    return -1;
}

overload seek(f:RawFile, offset, whence) {
    return unix.syscall(unix.lseek,
                        f.handle,
                        Int64(offset),
                        seekWhence(whence));
}



//
// terminal?
//

overload terminal?(f:RawFile) {
    return Bool(unix.isatty(f.handle));
}
