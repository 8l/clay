import threads.core.*;
import uniquepointers.*;

record Future[..T] (
    thread: Thread,
    result: Maybe[Tuple[..T]],
    exception: Maybe[Exception],
);

[F]
async(f: F) --> future: Future[..CallOutputTypes(call, F)] {
    future.result <-- Type(future.result)();
    var futurePtr = @future;
    var launcher = => {
        try {
            futurePtr^.result = Maybe([..f()]);
        } catch (e) {
            futurePtr^.exception = Maybe(e);
        }
    };
    future.thread <-- startThread(launcher);
}

[..T]
futureGet(future: Future[..T]): ..T {
    joinThread(future.thread);
    if (just?(future.exception))
        throw just(future.exception);
    return ..unpack(just(future.result));
}
