import threads.core.*;
import uniquepointers.*;

record Future[..T] (
    thread: Thread,
    result: Maybe[Tuple[..T]],
);

private FunctionResultType(F) = ..Type(..(null(F)^)());

[F]
async(f: F) --> future: Future[..FunctionResultType(F)] {
    future.result <-- Type(future.result)();
    var resultPtr = @future.result;
    future.thread <-- startThread(=> { resultPtr^ = Maybe([..f()]); });
}

[..T]
futureGet(future: Future[..T]): ..T {
    joinThread(future.thread);
    return ..unpack(just(future.result));
}
