


//
// unpack, unpackRef
//

[T | Tuple?(T)]
overload unpack(a:T) = ...unpackRef(a);

[T | Tuple?(T)]
overload unpackRef(a:T) = ref  ...unpackTuple(a, static SizeT(0));

[i]
private unpackTuple(a, static i) =
    ref tupleRef(a, static i), ...unpackTuple(a, static i+1);

[T,i | i == TupleElementCount(T)]
overload unpackTuple(a:T, static i) = ;



//
// makeTuple
//

[...T]
inlined makeTuple(...args:T) = Tuple[...T](...args);



//
// basic constructor
//

[...T]
inlined overload Tuple[...T](...args:T) returned:Tuple[...T] {
    ...unpackRef(returned) <-- ...args;
}



//
// default constructor
//

[T|Tuple?(T)]
overload T() returned:T {
    initTupleElements(returned, static SizeT(0));
}

[i]
private initTupleElements(a, static i) {
    initialize(tupleRef(a, static i));
    initTupleElements(a, static i+1);
}

[T, i | (i == TupleElementCount(T))]
overload initTupleElements(a:T, static i) {
}



//
// copy constructor
//

[T|Tuple?(T)]
overload T(src:T) returned:T {
    copyTupleElements(returned, src, static SizeT(0));
}

[T,i]
private copyTupleElements(dest:T, src:T, static i)
{
    tupleRef(dest, static i) <-- tupleRef(src, static i);
    copyTupleElements(dest, src, static i+1);
}

[T,i | (i == TupleElementCount(T))]
overload copyTupleElements(dest:T, src:T, static i) {
}



//
// move constructor
//

[T|Tuple?(T)]
overload move(src:T) returned:T {
    moveTupleElements(returned, src, static SizeT(0));
}

[T,i]
private moveTupleElements(dest:T, src:T, static i)
{
    tupleRef(dest, static i) <-- move(tupleRef(src, static i));
    moveTupleElements(dest, src, static i+1);
}

[T,i | (i == TupleElementCount(T))]
overload moveTupleElements(dest:T, src:T, static i) {
}



//
// destroy
//

[T|Tuple?(T)]
overload destroy(a:T) {
    destroyTupleElements(a, static SizeT(0));
}

[i]
private destroyTupleElements(a, static i) {
    destroy(tupleRef(a, static i));
    destroyTupleElements(a, static i+1);
}

[T, i |(i == TupleElementCount(T))]
overload destroyTupleElements(a:T, static i) {
}



//
// assign
//

[T|Tuple?(T)]
overload assign(dest:T, src:T) {
    assignTupleElements(dest, src, static SizeT(0));
}

[T,i]
private assignTupleElements(dest:T, src:T, static i) {
    assign(tupleRef(dest, static i), tupleRef(src, static i));
    assignTupleElements(dest, src, static i+1);
}

[T,i | (i == TupleElementCount(T))]
overload assignTupleElements(dest:T, src:T, static i) {
}



//
// equals?
//

[T|Tuple?(T)]
overload equals?(a:T, b:T) {
    return equalTupleElements?(a, b, static SizeT(0));
}

[T,i]
private  equalTupleElements?(a:T, b:T, static i) {
    if (not equals?(tupleRef(a, static i), tupleRef(b, static i)))
        return false;
    return equalTupleElements(a, b, static i+1);
}

[T,i |(i == TupleElementCount(T))]
overload equalTupleElements?(a:T, b:T, static i) {
    return true;
}



//
// lesser?
//

[T|Tuple?(T)]
overload lesser?(a:T, b:T) {
    return lesserTupleElements?(a, b, static SizeT(0));
}

[T,i]
private lesserTupleElements?(a:T, b:T, static i) {
    ref av = tupleRef(a, static i);
    ref bv = tupleRef(b, static i);
    if (lesser?(av, bv))
        return true;
    if (lesser?(bv, av))
        return false;
    return lesserTupleElements(a, b, static i+1);
}

[T,i |(i == TupleElementCount(T))]
overload lesserTupleElements?(a:T, b:T, static i) {
    return false;
}
