
// default constructor

[T|Tuple?(T)]
overload T() : T {
    initTupleElements(returned, SizeT(0));
}

private overloadable initTupleElements;

[i]
overload initTupleElements(a, static i) {
    initialize(tupleRef(a, i));
    initTupleElements(a, i+1);
}

[T, i | (i == TupleElementCount(T))]
overload initTupleElements(a:T, static i) {
}


// copy constructor

[T|Tuple?(T)]
overload T(src:T) : T {
    copyTupleElements(returned, src, SizeT(0));
}

private overloadable copyTupleElements;

[T,i]
overload copyTupleElements(dest:T, src:T, static i)
{
    tupleRef(dest, i) <-- tupleRef(src, i);
    copyTupleElements(dest, src, i+1);
}

[T,i | (i == TupleElementCount(T))]
overload copyTupleElements(dest:T, src:T, static i) {
}


// move constructor

[T|Tuple?(T)]
overload move(src:T) : T {
    moveTupleElements(returned, src, SizeT(0));
}

private overloadable moveTupleElements;

[T,i]
overload moveTupleElements(dest:T, src:T, static i)
{
    tupleRef(dest, i) <-- move(tupleRef(src, i));
    moveTupleElements(dest, src, i+1);
}

[T,i | (i == TupleElementCount(T))]
overload moveTupleElements(dest:T, src:T, static i) {
}


// destroy

[T|Tuple?(T)]
overload destroy(a:T) {
    destroyTupleElements(a, SizeT(0));
}

private overloadable destroyTupleElements;

[i]
overload destroyTupleElements(a, static i) {
    destroy(tupleRef(a, i));
    destroyTupleElements(a, i+1);
}

[T, i |(i == TupleElementCount(T))]
overload destroyTupleElements(a:T, static i) {
}


// assign

[T|Tuple?(T)]
overload assign(dest:T, src:T) {
    assignTupleElements(dest, src, SizeT(0));
}

private overloadable assignTupleElements;

[T,i]
overload assignTupleElements(dest:T, src:T, static i) {
    assign(tupleRef(dest, i), tupleRef(src, i));
    assignTupleElements(dest, src, i+1);
}

[T,i | (i == TupleElementCount(T))]
overload assignTupleElements(dest:T, src:T, static i) {
}


// equals?


[T|Tuple?(T)]
overload equals?(a:T, b:T) {
    return equalTupleElements?(a, b, SizeT(0));
}

private overloadable equalTupleElements?;

[T,i]
overload equalTupleElements?(a:T, b:T, static i) {
    if (not equals?(tupleRef(a, i), tupleRef(b, i)))
        return false;
    return equalTupleElements(a, b, i+1);
}

[T,i |(i == TupleElementCount(T))]
overload equalTupleElements?(a:T, b:T, static i) {
    return true;
}


// lesser?

[T|Tuple?(T)]
overload lesser?(a:T, b:T) {
    return lesserTupleElements?(a, b, SizeT(0));
}

private overloadable lesserTupleElements?;

[T,i]
overload lesserTupleElements?(a:T, b:T, static i) {
    ref av = tupleRef(a, i);
    ref bv = tupleRef(b, i);
    if (lesser?(av, bv))
        return true;
    if (lesser?(bv, av))
        return false;
    return lesserTupleElements(a, b, i+1);
}

[T,i |(i == TupleElementCount(T))]
overload lesserTupleElements?(a:T, b:T, static i) {
    return false;
}
