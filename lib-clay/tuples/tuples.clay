


//
// Tuple?
//

Tuple?(x) = false;
[...T] overload Tuple?(static Tuple[...T]) = true;



//
// TupleElements
//

[...T] TupleElements(static Tuple[...T]) = ...T;



//
// staticIndex
//

[...T, i]
overload staticIndex(a:Tuple[...T], static i) =
    ref tupleRef(a, static SizeT(i));



//
// unpackTuple, unpackTupleRef
//

unpackTuple(x) = ...unpackTupleRef(x);

[...T]
unpackTupleRef(x:Tuple[...T]) = ref ...tupleElements(x);



//
// unpack, unpackRef
//

unpackRef(x) = ref x;
[...T]
overload unpackRef(x:Tuple[...T]) = ref ...unpackTupleRef(x);

unpack(x) = ...unpackRef(x);



//
// Tuple type inferring constructor
//

[...T]
macro overload Tuple(...args:T) = Tuple[...T](...args);



//
// basic constructor
//

[...T]
macro overload Tuple[...T](...args:T) returned:Tuple[...T] {
    ...unpackTupleRef(returned) <-- ...args;
}



//
// default constructor
//

[...T]
overload Tuple[...T]() returned:Tuple[...T] {
    static for (x in ...tupleElements(returned))
        initialize(x);
}



//
// copy constructor
//

[...T]
overload Tuple[...T](src:Tuple[...T]) returned:Tuple[...T] {
    alias n = TupleElementCount(Tuple[...T]);
    static for (i in ...staticIntegers(static n))
        staticIndex(returned, i) <-- staticIndex(src, i);
}



//
// move constructor
//

[...T]
overload move(src:Tuple[...T]) returned:Tuple[...T] {
    alias n = TupleElementCount(Tuple[...T]);
    static for (i in ...staticIntegers(static n))
        staticIndex(returned, i) <-- move(staticIndex(src, i));
}



//
// destroy
//

[...T]
overload destroy(a:Tuple[...T]) {
    static for (x in ...tupleElements(a))
        destroy(x);
}



//
// assign
//

[...T]
overload assign(dest:Tuple[...T], src:Tuple[...T]) {
    alias n = TupleElementCount(Tuple[...T]);
    static for (i in ...staticIntegers(static n))
        assign(staticIndex(dest, i), staticIndex(src, i));
}



//
// equals?
//

[...T]
overload equals?(a:Tuple[...T], b:Tuple[...T]) {
    alias n = TupleElementCount(Tuple[...T]);
    static for (i in ...staticIntegers(static n)) {
        if (not equals?(staticIndex(a, i), staticIndex(b, i)))
            return false;
    }
    return true;
}



//
// lesser?
//

[...T]
overload lesser?(a:Tuple[...T], b:Tuple[...T]) {
    alias n = TupleElementCount(Tuple[...T]);
    static for (i in ...staticIntegers(static n)) {
        ref av = staticIndex(a, i);
        ref bv = staticIndex(b, i);
        if (lesser?(av, bv))
            return true;
        if (lesser?(bv, av))
            return false;
    }
    return false;
}



//
// tupleLiteral
//

procedure tupleLiteral;

// by default create a tuple
macro overload tupleLiteral(...args) = Tuple(...args);

// in the case of single argument, return the argument itself.
overload tupleLiteral(forward x) = forward x;
