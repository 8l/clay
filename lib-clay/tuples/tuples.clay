


//
// Tuple?
//

Tuple?(x) = false;
[...T] overload Tuple?(static Tuple[...T]) = true;



//
// TupleElements
//

[...T] TupleElements(static Tuple[...T]) = ...T;



//
// staticIndex
//

[...T, i]
overload staticIndex(a:Tuple[...T], static i) =
    ref tupleRef(a, static SizeT(i));



//
// unpackTuple, unpackTupleRef
//

unpackTuple(x) = ...unpackTupleRef(x);

[...T]
unpackTupleRef(x:Tuple[...T]) = ref ...unpackElements(x, static 0);

[i]
private unpackElements(a, static i) =
    ref staticIndex(a, static i), ...unpackElements(a, static i+1);

[T,i | i == TupleElementCount(T)]
overload unpackElements(a:T, static i) = ;



//
// unpack, unpackRef
//

unpackRef(x) = ref x;
[...T]
overload unpackRef(x:Tuple[...T]) = ref ...unpackTupleRef(x);

unpack(x) = ...unpackRef(x);



//
// Tuple type inferring constructor
//

[...T]
inlined overload Tuple(...args:T) = Tuple[...T](...args);



//
// basic constructor
//

[...T]
inlined overload Tuple[...T](...args:T) returned:Tuple[...T] {
    ...unpackTupleRef(returned) <-- ...args;
}



//
// default constructor
//

[...T]
overload Tuple[...T]() returned:Tuple[...T] {
    initTupleElements(returned, static 0);
}

[i]
private initTupleElements(a, static i) {
    initialize(staticIndex(a, static i));
    initTupleElements(a, static i+1);
}

[T, i | (i == TupleElementCount(T))]
overload initTupleElements(a:T, static i) {
}



//
// copy constructor
//

[...T]
overload Tuple[...T](src:Tuple[...T]) returned:Tuple[...T] {
    copyTupleElements(returned, src, static 0);
}

[T,i]
private copyTupleElements(dest:T, src:T, static i) {
    staticIndex(dest, static i) <-- staticIndex(src, static i);
    copyTupleElements(dest, src, static i+1);
}

[T,i | (i == TupleElementCount(T))]
overload copyTupleElements(dest:T, src:T, static i) {
}



//
// move constructor
//

[...T]
overload move(src:Tuple[...T]) returned:Tuple[...T] {
    moveTupleElements(returned, src, static 0);
}

[T,i]
private moveTupleElements(dest:T, src:T, static i)
{
    staticIndex(dest, static i) <-- move(staticIndex(src, static i));
    moveTupleElements(dest, src, static i+1);
}

[T,i | (i == TupleElementCount(T))]
overload moveTupleElements(dest:T, src:T, static i) {
}



//
// destroy
//

[...T]
overload destroy(a:Tuple[...T]) {
    destroyTupleElements(a, static 0);
}

[i]
private destroyTupleElements(a, static i) {
    destroy(staticIndex(a, static i));
    destroyTupleElements(a, static i+1);
}

[T, i |(i == TupleElementCount(T))]
overload destroyTupleElements(a:T, static i) {
}



//
// assign
//

[...T]
overload assign(dest:Tuple[...T], src:Tuple[...T]) {
    assignTupleElements(dest, src, static 0);
}

[T,i]
private assignTupleElements(dest:T, src:T, static i) {
    assign(staticIndex(dest, static i), staticIndex(src, static i));
    assignTupleElements(dest, src, static i+1);
}

[T,i | (i == TupleElementCount(T))]
overload assignTupleElements(dest:T, src:T, static i) {
}



//
// equals?
//

[...T]
overload equals?(a:Tuple[...T], b:Tuple[...T]) {
    return equalTupleElements?(a, b, static 0);
}

[T,i]
private  equalTupleElements?(a:T, b:T, static i) {
    if (not equals?(staticIndex(a, static i), staticIndex(b, static i)))
        return false;
    return equalTupleElements?(a, b, static i+1);
}

[T,i |(i == TupleElementCount(T))]
overload equalTupleElements?(a:T, b:T, static i) {
    return true;
}



//
// lesser?
//

[...T]
overload lesser?(a:Tuple[...T], b:Tuple[...T]) {
    return lesserTupleElements?(a, b, static 0);
}

[T,i]
private lesserTupleElements?(a:T, b:T, static i) {
    ref av = staticIndex(a, static i);
    ref bv = staticIndex(b, static i);
    if (lesser?(av, bv))
        return true;
    if (lesser?(bv, av))
        return false;
    return lesserTupleElements(a, b, static i+1);
}

[T,i |(i == TupleElementCount(T))]
overload lesserTupleElements?(a:T, b:T, static i) {
    return false;
}



//
// tupleLiteral
//

procedure tupleLiteral;

// by default create a tuple
inlined overload tupleLiteral(...args) = Tuple(...args);

// in the case of single argument, return the argument itself.
overload tupleLiteral(forward x) = forward x;
