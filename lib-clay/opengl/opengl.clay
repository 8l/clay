public import opengl.types.*;
import opengl.lookup.*;
import opengl.platform.*;

alias GL_2D = 0x600u32;
alias GL_2_BYTES = 0x1407u32;
alias GL_3D = 0x601u32;
alias GL_3D_COLOR = 0x602u32;
alias GL_3D_COLOR_TEXTURE = 0x603u32;
alias GL_3_BYTES = 0x1408u32;
alias GL_4D_COLOR_TEXTURE = 0x604u32;
alias GL_4_BYTES = 0x1409u32;
alias GL_ACCUM = 0x100u32;
alias GL_ACCUM_ALPHA_BITS = 0xd5bu32;
alias GL_ACCUM_BLUE_BITS = 0xd5au32;
alias GL_ACCUM_BUFFER_BIT = 0x200u32;
alias GL_ACCUM_CLEAR_VALUE = 0xb80u32;
alias GL_ACCUM_GREEN_BITS = 0xd59u32;
alias GL_ACCUM_RED_BITS = 0xd58u32;
alias GL_ACTIVE_ATTRIBUTES = 0x8b89u32;
alias GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x8b8au32;
alias GL_ACTIVE_SUBROUTINES = 0x8de5u32;
alias GL_ACTIVE_SUBROUTINE_MAX_LENGTH = 0x8e48u32;
alias GL_ACTIVE_SUBROUTINE_UNIFORMS = 0x8de6u32;
alias GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS = 0x8e47u32;
alias GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH = 0x8e49u32;
alias GL_ACTIVE_TEXTURE = 0x84e0u32;
alias GL_ACTIVE_UNIFORMS = 0x8b86u32;
alias GL_ACTIVE_UNIFORM_BLOCKS = 0x8a36u32;
alias GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 0x8a35u32;
alias GL_ACTIVE_UNIFORM_MAX_LENGTH = 0x8b87u32;
alias GL_ADD = 0x104u32;
alias GL_ADD_SIGNED = 0x8574u32;
alias GL_ALIASED_LINE_WIDTH_RANGE = 0x846eu32;
alias GL_ALIASED_POINT_SIZE_RANGE = 0x846du32;
alias GL_ALL_ATTRIB_BITS = 0xfffffu32;
alias GL_ALL_CLIENT_ATTRIB_BITS = 0xffffffffu32;
alias GL_ALPHA = 0x1906u32;
alias GL_ALPHA12 = 0x803du32;
alias GL_ALPHA16 = 0x803eu32;
alias GL_ALPHA16F_ARB = 0x881cu32;
alias GL_ALPHA16I_EXT = 0x8d8au32;
alias GL_ALPHA16UI_EXT = 0x8d78u32;
alias GL_ALPHA32F_ARB = 0x8816u32;
alias GL_ALPHA32I_EXT = 0x8d84u32;
alias GL_ALPHA32UI_EXT = 0x8d72u32;
alias GL_ALPHA4 = 0x803bu32;
alias GL_ALPHA8 = 0x803cu32;
alias GL_ALPHA8I_EXT = 0x8d90u32;
alias GL_ALPHA8UI_EXT = 0x8d7eu32;
alias GL_ALPHA_BIAS = 0xd1du32;
alias GL_ALPHA_BITS = 0xd55u32;
alias GL_ALPHA_INTEGER_EXT = 0x8d97u32;
alias GL_ALPHA_SCALE = 0xd1cu32;
alias GL_ALPHA_TEST = 0xbc0u32;
alias GL_ALPHA_TEST_FUNC = 0xbc1u32;
alias GL_ALPHA_TEST_REF = 0xbc2u32;
alias GL_ALREADY_SIGNALED = 0x911au32;
alias GL_ALWAYS = 0x207u32;
alias GL_AMBIENT = 0x1200u32;
alias GL_AMBIENT_AND_DIFFUSE = 0x1602u32;
alias GL_AND = 0x1501u32;
alias GL_AND_INVERTED = 0x1504u32;
alias GL_AND_REVERSE = 0x1502u32;
alias GL_ANY_SAMPLES_PASSED = 0x8c2fu32;
alias GL_ARRAY_BUFFER = 0x8892u32;
alias GL_ARRAY_BUFFER_BINDING = 0x8894u32;
alias GL_ATTACHED_SHADERS = 0x8b85u32;
alias GL_ATTRIB_STACK_DEPTH = 0xbb0u32;
alias GL_AUTO_NORMAL = 0xd80u32;
alias GL_AUX0 = 0x409u32;
alias GL_AUX1 = 0x40au32;
alias GL_AUX2 = 0x40bu32;
alias GL_AUX3 = 0x40cu32;
alias GL_AUX_BUFFERS = 0xc00u32;
alias GL_BACK = 0x405u32;
alias GL_BACK_LEFT = 0x402u32;
alias GL_BACK_RIGHT = 0x403u32;
alias GL_BGR = 0x80e0u32;
alias GL_BGRA = 0x80e1u32;
alias GL_BGRA_INTEGER = 0x8d9bu32;
alias GL_BGR_INTEGER = 0x8d9au32;
alias GL_BITMAP = 0x1a00u32;
alias GL_BITMAP_TOKEN = 0x704u32;
alias GL_BLEND = 0xbe2u32;
alias GL_BLEND_COLOR = 0x8005u32;
alias GL_BLEND_DST = 0xbe0u32;
alias GL_BLEND_DST_ALPHA = 0x80cau32;
alias GL_BLEND_DST_RGB = 0x80c8u32;
alias GL_BLEND_EQUATION = 0x8009u32;
alias GL_BLEND_EQUATION_ALPHA = 0x883du32;
alias GL_BLEND_EQUATION_RGB = 0x8009u32;
alias GL_BLEND_SRC = 0xbe1u32;
alias GL_BLEND_SRC_ALPHA = 0x80cbu32;
alias GL_BLEND_SRC_RGB = 0x80c9u32;
alias GL_BLUE = 0x1905u32;
alias GL_BLUE_BIAS = 0xd1bu32;
alias GL_BLUE_BITS = 0xd54u32;
alias GL_BLUE_INTEGER = 0x8d96u32;
alias GL_BLUE_SCALE = 0xd1au32;
alias GL_BOOL = 0x8b56u32;
alias GL_BOOL_VEC2 = 0x8b57u32;
alias GL_BOOL_VEC3 = 0x8b58u32;
alias GL_BOOL_VEC4 = 0x8b59u32;
alias GL_BUFFER_ACCESS = 0x88bbu32;
alias GL_BUFFER_MAPPED = 0x88bcu32;
alias GL_BUFFER_MAP_POINTER = 0x88bdu32;
alias GL_BUFFER_SIZE = 0x8764u32;
alias GL_BUFFER_USAGE = 0x8765u32;
alias GL_BYTE = 0x1400u32;
alias GL_C3F_V3F = 0x2a24u32;
alias GL_C4F_N3F_V3F = 0x2a26u32;
alias GL_C4UB_V2F = 0x2a22u32;
alias GL_C4UB_V3F = 0x2a23u32;
alias GL_CCW = 0x901u32;
alias GL_CLAMP = 0x2900u32;
alias GL_CLAMP_READ_COLOR = 0x891cu32;
alias GL_CLAMP_TO_BORDER = 0x812du32;
alias GL_CLAMP_TO_EDGE = 0x812fu32;
alias GL_CLEAR = 0x1500u32;
alias GL_CLIENT_ACTIVE_TEXTURE = 0x84e1u32;
alias GL_CLIENT_ALL_ATTRIB_BITS = 0xffffffffu32;
alias GL_CLIENT_ATTRIB_STACK_DEPTH = 0xbb1u32;
alias GL_CLIENT_PIXEL_STORE_BIT = 0x1u32;
alias GL_CLIENT_VERTEX_ARRAY_BIT = 0x2u32;
alias GL_CLIP_DISTANCE0 = 0x3000u32;
alias GL_CLIP_DISTANCE1 = 0x3001u32;
alias GL_CLIP_DISTANCE2 = 0x3002u32;
alias GL_CLIP_DISTANCE3 = 0x3003u32;
alias GL_CLIP_DISTANCE4 = 0x3004u32;
alias GL_CLIP_DISTANCE5 = 0x3005u32;
alias GL_CLIP_PLANE0 = 0x3000u32;
alias GL_CLIP_PLANE1 = 0x3001u32;
alias GL_CLIP_PLANE2 = 0x3002u32;
alias GL_CLIP_PLANE3 = 0x3003u32;
alias GL_CLIP_PLANE4 = 0x3004u32;
alias GL_CLIP_PLANE5 = 0x3005u32;
alias GL_COEFF = 0xa00u32;
alias GL_COLOR = 0x1800u32;
alias GL_COLOR_ARRAY = 0x8076u32;
alias GL_COLOR_ARRAY_BUFFER_BINDING = 0x8898u32;
alias GL_COLOR_ARRAY_POINTER = 0x8090u32;
alias GL_COLOR_ARRAY_SIZE = 0x8081u32;
alias GL_COLOR_ARRAY_STRIDE = 0x8083u32;
alias GL_COLOR_ARRAY_TYPE = 0x8082u32;
alias GL_COLOR_ATTACHMENT0 = 0x8ce0u32;
alias GL_COLOR_ATTACHMENT1 = 0x8ce1u32;
alias GL_COLOR_ATTACHMENT10 = 0x8ceau32;
alias GL_COLOR_ATTACHMENT11 = 0x8cebu32;
alias GL_COLOR_ATTACHMENT12 = 0x8cecu32;
alias GL_COLOR_ATTACHMENT13 = 0x8cedu32;
alias GL_COLOR_ATTACHMENT14 = 0x8ceeu32;
alias GL_COLOR_ATTACHMENT15 = 0x8cefu32;
alias GL_COLOR_ATTACHMENT2 = 0x8ce2u32;
alias GL_COLOR_ATTACHMENT3 = 0x8ce3u32;
alias GL_COLOR_ATTACHMENT4 = 0x8ce4u32;
alias GL_COLOR_ATTACHMENT5 = 0x8ce5u32;
alias GL_COLOR_ATTACHMENT6 = 0x8ce6u32;
alias GL_COLOR_ATTACHMENT7 = 0x8ce7u32;
alias GL_COLOR_ATTACHMENT8 = 0x8ce8u32;
alias GL_COLOR_ATTACHMENT9 = 0x8ce9u32;
alias GL_COLOR_BUFFER_BIT = 0x4000u32;
alias GL_COLOR_CLEAR_VALUE = 0xc22u32;
alias GL_COLOR_INDEX = 0x1900u32;
alias GL_COLOR_INDEXES = 0x1603u32;
alias GL_COLOR_LOGIC_OP = 0xbf2u32;
alias GL_COLOR_MATERIAL = 0xb57u32;
alias GL_COLOR_MATERIAL_FACE = 0xb55u32;
alias GL_COLOR_MATERIAL_PARAMETER = 0xb56u32;
alias GL_COLOR_SUM = 0x8458u32;
alias GL_COLOR_WRITEMASK = 0xc23u32;
alias GL_COMBINE = 0x8570u32;
alias GL_COMBINE_ALPHA = 0x8572u32;
alias GL_COMBINE_RGB = 0x8571u32;
alias GL_COMPARE_REF_TO_TEXTURE = 0x884eu32;
alias GL_COMPARE_R_TO_TEXTURE = 0x884eu32;
alias GL_COMPATIBLE_SUBROUTINES = 0x8e4bu32;
alias GL_COMPILE = 0x1300u32;
alias GL_COMPILE_AND_EXECUTE = 0x1301u32;
alias GL_COMPILE_STATUS = 0x8b81u32;
alias GL_COMPRESSED_ALPHA = 0x84e9u32;
alias GL_COMPRESSED_INTENSITY = 0x84ecu32;
alias GL_COMPRESSED_LUMINANCE = 0x84eau32;
alias GL_COMPRESSED_LUMINANCE_ALPHA = 0x84ebu32;
alias GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT = 0x8c72u32;
alias GL_COMPRESSED_LUMINANCE_LATC1_EXT = 0x8c70u32;
alias GL_COMPRESSED_RED = 0x8225u32;
alias GL_COMPRESSED_RED_RGTC1 = 0x8dbbu32;
alias GL_COMPRESSED_RG = 0x8226u32;
alias GL_COMPRESSED_RGB = 0x84edu32;
alias GL_COMPRESSED_RGBA = 0x84eeu32;
alias GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83f1u32;
alias GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83f2u32;
alias GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83f3u32;
alias GL_COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83f0u32;
alias GL_COMPRESSED_RG_RGTC2 = 0x8dbdu32;
alias GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT = 0x8c73u32;
alias GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT = 0x8c71u32;
alias GL_COMPRESSED_SIGNED_RED_RGTC1 = 0x8dbcu32;
alias GL_COMPRESSED_SIGNED_RG_RGTC2 = 0x8dbeu32;
alias GL_COMPRESSED_SLUMINANCE = 0x8c4au32;
alias GL_COMPRESSED_SLUMINANCE_ALPHA = 0x8c4bu32;
alias GL_COMPRESSED_SRGB = 0x8c48u32;
alias GL_COMPRESSED_SRGB_ALPHA = 0x8c49u32;
alias GL_COMPRESSED_TEXTURE_FORMATS = 0x86a3u32;
alias GL_CONDITION_SATISFIED = 0x911cu32;
alias GL_CONSTANT = 0x8576u32;
alias GL_CONSTANT_ALPHA = 0x8003u32;
alias GL_CONSTANT_ATTENUATION = 0x1207u32;
alias GL_CONSTANT_COLOR = 0x8001u32;
alias GL_CONTEXT_COMPATIBILITY_PROFILE_BIT = 0x2u32;
alias GL_CONTEXT_CORE_PROFILE_BIT = 0x1u32;
alias GL_CONTEXT_FLAGS = 0x821eu32;
alias GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = 0x1u32;
alias GL_CONTEXT_PROFILE_MASK = 0x9126u32;
alias GL_COORD_REPLACE = 0x8862u32;
alias GL_COPY = 0x1503u32;
alias GL_COPY_INVERTED = 0x150cu32;
alias GL_COPY_PIXEL_TOKEN = 0x706u32;
alias GL_COPY_READ_BUFFER = 0x8f36u32;
alias GL_COPY_WRITE_BUFFER = 0x8f37u32;
alias GL_CULL_FACE = 0xb44u32;
alias GL_CULL_FACE_MODE = 0xb45u32;
alias GL_CURRENT_BIT = 0x1u32;
alias GL_CURRENT_COLOR = 0xb00u32;
alias GL_CURRENT_FOG_COORD = 0x8453u32;
alias GL_CURRENT_FOG_COORDINATE = 0x8453u32;
alias GL_CURRENT_INDEX = 0xb01u32;
alias GL_CURRENT_NORMAL = 0xb02u32;
alias GL_CURRENT_PROGRAM = 0x8b8du32;
alias GL_CURRENT_QUERY = 0x8865u32;
alias GL_CURRENT_RASTER_COLOR = 0xb04u32;
alias GL_CURRENT_RASTER_DISTANCE = 0xb09u32;
alias GL_CURRENT_RASTER_INDEX = 0xb05u32;
alias GL_CURRENT_RASTER_POSITION = 0xb07u32;
alias GL_CURRENT_RASTER_POSITION_VALID = 0xb08u32;
alias GL_CURRENT_RASTER_SECONDARY_COLOR = 0x845fu32;
alias GL_CURRENT_RASTER_TEXTURE_COORDS = 0xb06u32;
alias GL_CURRENT_SECONDARY_COLOR = 0x8459u32;
alias GL_CURRENT_TEXTURE_COORDS = 0xb03u32;
alias GL_CURRENT_VERTEX_ATTRIB = 0x8626u32;
alias GL_CW = 0x900u32;
alias GL_DECAL = 0x2101u32;
alias GL_DECR = 0x1e03u32;
alias GL_DECR_WRAP = 0x8508u32;
alias GL_DELETE_STATUS = 0x8b80u32;
alias GL_DEPTH = 0x1801u32;
alias GL_DEPTH24_STENCIL8 = 0x88f0u32;
alias GL_DEPTH32F_STENCIL8 = 0x8cadu32;
alias GL_DEPTH_ATTACHMENT = 0x8d00u32;
alias GL_DEPTH_BIAS = 0xd1fu32;
alias GL_DEPTH_BITS = 0xd56u32;
alias GL_DEPTH_BUFFER = 0x8223u32;
alias GL_DEPTH_BUFFER_BIT = 0x100u32;
alias GL_DEPTH_CLAMP = 0x864fu32;
alias GL_DEPTH_CLEAR_VALUE = 0xb73u32;
alias GL_DEPTH_COMPONENT = 0x1902u32;
alias GL_DEPTH_COMPONENT16 = 0x81a5u32;
alias GL_DEPTH_COMPONENT24 = 0x81a6u32;
alias GL_DEPTH_COMPONENT32 = 0x81a7u32;
alias GL_DEPTH_COMPONENT32F = 0x8cacu32;
alias GL_DEPTH_FUNC = 0xb74u32;
alias GL_DEPTH_RANGE = 0xb70u32;
alias GL_DEPTH_SCALE = 0xd1eu32;
alias GL_DEPTH_STENCIL = 0x84f9u32;
alias GL_DEPTH_STENCIL_ATTACHMENT = 0x821au32;
alias GL_DEPTH_TEST = 0xb71u32;
alias GL_DEPTH_TEXTURE_MODE = 0x884bu32;
alias GL_DEPTH_WRITEMASK = 0xb72u32;
alias GL_DIFFUSE = 0x1201u32;
alias GL_DITHER = 0xbd0u32;
alias GL_DOMAIN = 0xa02u32;
alias GL_DONT_CARE = 0x1100u32;
alias GL_DOT3_RGB = 0x86aeu32;
alias GL_DOT3_RGBA = 0x86afu32;
alias GL_DOUBLE = 0x140au32;
alias GL_DOUBLEBUFFER = 0xc32u32;
alias GL_DOUBLE_MAT2 = 0x8f46u32;
alias GL_DOUBLE_MAT2x3 = 0x8f49u32;
alias GL_DOUBLE_MAT2x4 = 0x8f4au32;
alias GL_DOUBLE_MAT3 = 0x8f47u32;
alias GL_DOUBLE_MAT3x2 = 0x8f4bu32;
alias GL_DOUBLE_MAT3x4 = 0x8f4cu32;
alias GL_DOUBLE_MAT4 = 0x8f48u32;
alias GL_DOUBLE_MAT4x2 = 0x8f4du32;
alias GL_DOUBLE_MAT4x3 = 0x8f4eu32;
alias GL_DOUBLE_VEC2 = 0x8ffcu32;
alias GL_DOUBLE_VEC3 = 0x8ffdu32;
alias GL_DOUBLE_VEC4 = 0x8ffeu32;
alias GL_DRAW_BUFFER = 0xc01u32;
alias GL_DRAW_BUFFER0 = 0x8825u32;
alias GL_DRAW_BUFFER1 = 0x8826u32;
alias GL_DRAW_BUFFER10 = 0x882fu32;
alias GL_DRAW_BUFFER11 = 0x8830u32;
alias GL_DRAW_BUFFER12 = 0x8831u32;
alias GL_DRAW_BUFFER13 = 0x8832u32;
alias GL_DRAW_BUFFER14 = 0x8833u32;
alias GL_DRAW_BUFFER15 = 0x8834u32;
alias GL_DRAW_BUFFER2 = 0x8827u32;
alias GL_DRAW_BUFFER3 = 0x8828u32;
alias GL_DRAW_BUFFER4 = 0x8829u32;
alias GL_DRAW_BUFFER5 = 0x882au32;
alias GL_DRAW_BUFFER6 = 0x882bu32;
alias GL_DRAW_BUFFER7 = 0x882cu32;
alias GL_DRAW_BUFFER8 = 0x882du32;
alias GL_DRAW_BUFFER9 = 0x882eu32;
alias GL_DRAW_FRAMEBUFFER = 0x8ca9u32;
alias GL_DRAW_FRAMEBUFFER_BINDING = 0x8ca6u32;
alias GL_DRAW_INDIRECT_BUFFER = 0x8f3fu32;
alias GL_DRAW_INDIRECT_BUFFER_BINDING = 0x8f43u32;
alias GL_DRAW_PIXEL_TOKEN = 0x705u32;
alias GL_DST_ALPHA = 0x304u32;
alias GL_DST_COLOR = 0x306u32;
alias GL_DYNAMIC_COPY = 0x88eau32;
alias GL_DYNAMIC_DRAW = 0x88e8u32;
alias GL_DYNAMIC_READ = 0x88e9u32;
alias GL_EDGE_FLAG = 0xb43u32;
alias GL_EDGE_FLAG_ARRAY = 0x8079u32;
alias GL_EDGE_FLAG_ARRAY_BUFFER_BINDING = 0x889bu32;
alias GL_EDGE_FLAG_ARRAY_POINTER = 0x8093u32;
alias GL_EDGE_FLAG_ARRAY_STRIDE = 0x808cu32;
alias GL_ELEMENT_ARRAY_BUFFER = 0x8893u32;
alias GL_ELEMENT_ARRAY_BUFFER_BINDING = 0x8895u32;
alias GL_EMISSION = 0x1600u32;
alias GL_ENABLE_BIT = 0x2000u32;
alias GL_EQUAL = 0x202u32;
alias GL_EQUIV = 0x1509u32;
alias GL_EVAL_BIT = 0x10000u32;
alias GL_EXP = 0x800u32;
alias GL_EXP2 = 0x801u32;
alias GL_EXTENSIONS = 0x1f03u32;
alias GL_EYE_LINEAR = 0x2400u32;
alias GL_EYE_PLANE = 0x2502u32;
alias GL_FALSE = 0x0u32;
alias GL_FASTEST = 0x1101u32;
alias GL_FEEDBACK = 0x1c01u32;
alias GL_FEEDBACK_BUFFER_POINTER = 0xdf0u32;
alias GL_FEEDBACK_BUFFER_SIZE = 0xdf1u32;
alias GL_FEEDBACK_BUFFER_TYPE = 0xdf2u32;
alias GL_FILL = 0x1b02u32;
alias GL_FIRST_VERTEX_CONVENTION = 0x8e4du32;
alias GL_FIXED_ONLY = 0x891du32;
alias GL_FLAT = 0x1d00u32;
alias GL_FLOAT = 0x1406u32;
alias GL_FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8dadu32;
alias GL_FLOAT_MAT2 = 0x8b5au32;
alias GL_FLOAT_MAT2x3 = 0x8b65u32;
alias GL_FLOAT_MAT2x4 = 0x8b66u32;
alias GL_FLOAT_MAT3 = 0x8b5bu32;
alias GL_FLOAT_MAT3x2 = 0x8b67u32;
alias GL_FLOAT_MAT3x4 = 0x8b68u32;
alias GL_FLOAT_MAT4 = 0x8b5cu32;
alias GL_FLOAT_MAT4x2 = 0x8b69u32;
alias GL_FLOAT_MAT4x3 = 0x8b6au32;
alias GL_FLOAT_VEC2 = 0x8b50u32;
alias GL_FLOAT_VEC3 = 0x8b51u32;
alias GL_FLOAT_VEC4 = 0x8b52u32;
alias GL_FOG = 0xb60u32;
alias GL_FOG_BIT = 0x80u32;
alias GL_FOG_COLOR = 0xb66u32;
alias GL_FOG_COORD = 0x8451u32;
alias GL_FOG_COORDINATE = 0x8451u32;
alias GL_FOG_COORDINATE_ARRAY = 0x8457u32;
alias GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING = 0x889du32;
alias GL_FOG_COORDINATE_ARRAY_POINTER = 0x8456u32;
alias GL_FOG_COORDINATE_ARRAY_STRIDE = 0x8455u32;
alias GL_FOG_COORDINATE_ARRAY_TYPE = 0x8454u32;
alias GL_FOG_COORDINATE_SOURCE = 0x8450u32;
alias GL_FOG_COORD_ARRAY = 0x8457u32;
alias GL_FOG_COORD_ARRAY_BUFFER_BINDING = 0x889du32;
alias GL_FOG_COORD_ARRAY_POINTER = 0x8456u32;
alias GL_FOG_COORD_ARRAY_STRIDE = 0x8455u32;
alias GL_FOG_COORD_ARRAY_TYPE = 0x8454u32;
alias GL_FOG_COORD_SRC = 0x8450u32;
alias GL_FOG_DENSITY = 0xb62u32;
alias GL_FOG_END = 0xb64u32;
alias GL_FOG_HINT = 0xc54u32;
alias GL_FOG_INDEX = 0xb61u32;
alias GL_FOG_MODE = 0xb65u32;
alias GL_FOG_START = 0xb63u32;
alias GL_FRACTIONAL_EVEN = 0x8e7cu32;
alias GL_FRACTIONAL_ODD = 0x8e7bu32;
alias GL_FRAGMENT_DEPTH = 0x8452u32;
alias GL_FRAGMENT_INTERPOLATION_OFFSET_BITS = 0x8e5du32;
alias GL_FRAGMENT_SHADER = 0x8b30u32;
alias GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8b8bu32;
alias GL_FRAMEBUFFER = 0x8d40u32;
alias GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 0x8215u32;
alias GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 0x8214u32;
alias GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x8210u32;
alias GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 0x8211u32;
alias GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 0x8216u32;
alias GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 0x8213u32;
alias GL_FRAMEBUFFER_ATTACHMENT_LAYERED = 0x8da7u32;
alias GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8cd1u32;
alias GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8cd0u32;
alias GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x8212u32;
alias GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x8217u32;
alias GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8cd3u32;
alias GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x8cd4u32;
alias GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8cd2u32;
alias GL_FRAMEBUFFER_BINDING = 0x8ca6u32;
alias GL_FRAMEBUFFER_COMPLETE = 0x8cd5u32;
alias GL_FRAMEBUFFER_DEFAULT = 0x8218u32;
alias GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8cd6u32;
alias GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT = 0x8cd9u32;
alias GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = 0x8cdbu32;
alias GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT = 0x8cdau32;
alias GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB = 0x8da9u32;
alias GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = 0x8da8u32;
alias GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8cd7u32;
alias GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x8d56u32;
alias GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = 0x8cdcu32;
alias GL_FRAMEBUFFER_SRGB = 0x8db9u32;
alias GL_FRAMEBUFFER_UNDEFINED = 0x8219u32;
alias GL_FRAMEBUFFER_UNSUPPORTED = 0x8cddu32;
alias GL_FRONT = 0x404u32;
alias GL_FRONT_AND_BACK = 0x408u32;
alias GL_FRONT_FACE = 0xb46u32;
alias GL_FRONT_LEFT = 0x400u32;
alias GL_FRONT_RIGHT = 0x401u32;
alias GL_FUNC_ADD = 0x8006u32;
alias GL_FUNC_REVERSE_SUBTRACT = 0x800bu32;
alias GL_FUNC_SUBTRACT = 0x800au32;
alias GL_GENERATE_MIPMAP = 0x8191u32;
alias GL_GENERATE_MIPMAP_HINT = 0x8192u32;
alias GL_GEOMETRY_INPUT_TYPE = 0x8917u32;
alias GL_GEOMETRY_OUTPUT_TYPE = 0x8918u32;
alias GL_GEOMETRY_SHADER = 0x8dd9u32;
alias GL_GEOMETRY_SHADER_INVOCATIONS = 0x887fu32;
alias GL_GEOMETRY_VERTICES_OUT = 0x8916u32;
alias GL_GEQUAL = 0x206u32;
alias GL_GREATER = 0x204u32;
alias GL_GREEN = 0x1904u32;
alias GL_GREEN_BIAS = 0xd19u32;
alias GL_GREEN_BITS = 0xd53u32;
alias GL_GREEN_INTEGER = 0x8d95u32;
alias GL_GREEN_SCALE = 0xd18u32;
alias GL_HALF_FLOAT = 0x140bu32;
alias GL_HINT_BIT = 0x8000u32;
alias GL_INCR = 0x1e02u32;
alias GL_INCR_WRAP = 0x8507u32;
alias GL_INDEX = 0x8222u32;
alias GL_INDEX_ARRAY = 0x8077u32;
alias GL_INDEX_ARRAY_BUFFER_BINDING = 0x8899u32;
alias GL_INDEX_ARRAY_POINTER = 0x8091u32;
alias GL_INDEX_ARRAY_STRIDE = 0x8086u32;
alias GL_INDEX_ARRAY_TYPE = 0x8085u32;
alias GL_INDEX_BITS = 0xd51u32;
alias GL_INDEX_CLEAR_VALUE = 0xc20u32;
alias GL_INDEX_LOGIC_OP = 0xbf1u32;
alias GL_INDEX_MODE = 0xc30u32;
alias GL_INDEX_OFFSET = 0xd13u32;
alias GL_INDEX_SHIFT = 0xd12u32;
alias GL_INDEX_WRITEMASK = 0xc21u32;
alias GL_INFO_LOG_LENGTH = 0x8b84u32;
alias GL_INT = 0x1404u32;
alias GL_INTENSITY = 0x8049u32;
alias GL_INTENSITY12 = 0x804cu32;
alias GL_INTENSITY16 = 0x804du32;
alias GL_INTENSITY16F_ARB = 0x881du32;
alias GL_INTENSITY16I_EXT = 0x8d8bu32;
alias GL_INTENSITY16UI_EXT = 0x8d79u32;
alias GL_INTENSITY32F_ARB = 0x8817u32;
alias GL_INTENSITY32I_EXT = 0x8d85u32;
alias GL_INTENSITY32UI_EXT = 0x8d73u32;
alias GL_INTENSITY4 = 0x804au32;
alias GL_INTENSITY8 = 0x804bu32;
alias GL_INTENSITY8I_EXT = 0x8d91u32;
alias GL_INTENSITY8UI_EXT = 0x8d7fu32;
alias GL_INTERLEAVED_ATTRIBS = 0x8c8cu32;
alias GL_INTERPOLATE = 0x8575u32;
alias GL_INT_2_10_10_10_REV = 0x8d9fu32;
alias GL_INT_SAMPLER_1D = 0x8dc9u32;
alias GL_INT_SAMPLER_1D_ARRAY = 0x8dceu32;
alias GL_INT_SAMPLER_2D = 0x8dcau32;
alias GL_INT_SAMPLER_2D_ARRAY = 0x8dcfu32;
alias GL_INT_SAMPLER_2D_MULTISAMPLE = 0x9109u32;
alias GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910cu32;
alias GL_INT_SAMPLER_2D_RECT = 0x8dcdu32;
alias GL_INT_SAMPLER_3D = 0x8dcbu32;
alias GL_INT_SAMPLER_BUFFER = 0x8dd0u32;
alias GL_INT_SAMPLER_CUBE = 0x8dccu32;
alias GL_INT_VEC2 = 0x8b53u32;
alias GL_INT_VEC3 = 0x8b54u32;
alias GL_INT_VEC4 = 0x8b55u32;
alias GL_INVALID_ENUM = 0x500u32;
alias GL_INVALID_FRAMEBUFFER_OPERATION = 0x506u32;
alias GL_INVALID_INDEX = 0xffffffffu32;
alias GL_INVALID_OPERATION = 0x502u32;
alias GL_INVALID_VALUE = 0x501u32;
alias GL_INVERT = 0x150au32;
alias GL_ISOLINES = 0x8e7au32;
alias GL_KEEP = 0x1e00u32;
alias GL_LAST_VERTEX_CONVENTION = 0x8e4eu32;
alias GL_LEFT = 0x406u32;
alias GL_LEQUAL = 0x203u32;
alias GL_LESS = 0x201u32;
alias GL_LIGHT0 = 0x4000u32;
alias GL_LIGHT1 = 0x4001u32;
alias GL_LIGHT2 = 0x4002u32;
alias GL_LIGHT3 = 0x4003u32;
alias GL_LIGHT4 = 0x4004u32;
alias GL_LIGHT5 = 0x4005u32;
alias GL_LIGHT6 = 0x4006u32;
alias GL_LIGHT7 = 0x4007u32;
alias GL_LIGHTING = 0xb50u32;
alias GL_LIGHTING_BIT = 0x40u32;
alias GL_LIGHT_MODEL_AMBIENT = 0xb53u32;
alias GL_LIGHT_MODEL_COLOR_CONTROL = 0x81f8u32;
alias GL_LIGHT_MODEL_LOCAL_VIEWER = 0xb51u32;
alias GL_LIGHT_MODEL_TWO_SIDE = 0xb52u32;
alias GL_LINE = 0x1b01u32;
alias GL_LINEAR = 0x2601u32;
alias GL_LINEAR_ATTENUATION = 0x1208u32;
alias GL_LINEAR_MIPMAP_LINEAR = 0x2703u32;
alias GL_LINEAR_MIPMAP_NEAREST = 0x2701u32;
alias GL_LINES = 0x1u32;
alias GL_LINES_ADJACENCY = 0xau32;
alias GL_LINE_BIT = 0x4u32;
alias GL_LINE_LOOP = 0x2u32;
alias GL_LINE_RESET_TOKEN = 0x707u32;
alias GL_LINE_SMOOTH = 0xb20u32;
alias GL_LINE_SMOOTH_HINT = 0xc52u32;
alias GL_LINE_STIPPLE = 0xb24u32;
alias GL_LINE_STIPPLE_PATTERN = 0xb25u32;
alias GL_LINE_STIPPLE_REPEAT = 0xb26u32;
alias GL_LINE_STRIP = 0x3u32;
alias GL_LINE_STRIP_ADJACENCY = 0xbu32;
alias GL_LINE_TOKEN = 0x702u32;
alias GL_LINE_WIDTH = 0xb21u32;
alias GL_LINE_WIDTH_GRANULARITY = 0xb23u32;
alias GL_LINE_WIDTH_RANGE = 0xb22u32;
alias GL_LINK_STATUS = 0x8b82u32;
alias GL_LIST_BASE = 0xb32u32;
alias GL_LIST_BIT = 0x20000u32;
alias GL_LIST_INDEX = 0xb33u32;
alias GL_LIST_MODE = 0xb30u32;
alias GL_LOAD = 0x101u32;
alias GL_LOGIC_OP = 0xbf1u32;
alias GL_LOGIC_OP_MODE = 0xbf0u32;
alias GL_LOWER_LEFT = 0x8ca1u32;
alias GL_LUMINANCE = 0x1909u32;
alias GL_LUMINANCE12 = 0x8041u32;
alias GL_LUMINANCE12_ALPHA12 = 0x8047u32;
alias GL_LUMINANCE12_ALPHA4 = 0x8046u32;
alias GL_LUMINANCE16 = 0x8042u32;
alias GL_LUMINANCE16F_ARB = 0x881eu32;
alias GL_LUMINANCE16I_EXT = 0x8d8cu32;
alias GL_LUMINANCE16UI_EXT = 0x8d7au32;
alias GL_LUMINANCE16_ALPHA16 = 0x8048u32;
alias GL_LUMINANCE32F_ARB = 0x8818u32;
alias GL_LUMINANCE32I_EXT = 0x8d86u32;
alias GL_LUMINANCE32UI_EXT = 0x8d74u32;
alias GL_LUMINANCE4 = 0x803fu32;
alias GL_LUMINANCE4_ALPHA4 = 0x8043u32;
alias GL_LUMINANCE6_ALPHA2 = 0x8044u32;
alias GL_LUMINANCE8 = 0x8040u32;
alias GL_LUMINANCE8I_EXT = 0x8d92u32;
alias GL_LUMINANCE8UI_EXT = 0x8d80u32;
alias GL_LUMINANCE8_ALPHA8 = 0x8045u32;
alias GL_LUMINANCE_ALPHA = 0x190au32;
alias GL_LUMINANCE_ALPHA16F_ARB = 0x881fu32;
alias GL_LUMINANCE_ALPHA16I_EXT = 0x8d8du32;
alias GL_LUMINANCE_ALPHA16UI_EXT = 0x8d7bu32;
alias GL_LUMINANCE_ALPHA32F_ARB = 0x8819u32;
alias GL_LUMINANCE_ALPHA32I_EXT = 0x8d87u32;
alias GL_LUMINANCE_ALPHA32UI_EXT = 0x8d75u32;
alias GL_LUMINANCE_ALPHA8I_EXT = 0x8d93u32;
alias GL_LUMINANCE_ALPHA8UI_EXT = 0x8d81u32;
alias GL_LUMINANCE_ALPHA_INTEGER_EXT = 0x8d9du32;
alias GL_LUMINANCE_INTEGER_EXT = 0x8d9cu32;
alias GL_MAJOR_VERSION = 0x821bu32;
alias GL_MAP1_COLOR_4 = 0xd90u32;
alias GL_MAP1_GRID_DOMAIN = 0xdd0u32;
alias GL_MAP1_GRID_SEGMENTS = 0xdd1u32;
alias GL_MAP1_INDEX = 0xd91u32;
alias GL_MAP1_NORMAL = 0xd92u32;
alias GL_MAP1_TEXTURE_COORD_1 = 0xd93u32;
alias GL_MAP1_TEXTURE_COORD_2 = 0xd94u32;
alias GL_MAP1_TEXTURE_COORD_3 = 0xd95u32;
alias GL_MAP1_TEXTURE_COORD_4 = 0xd96u32;
alias GL_MAP1_VERTEX_3 = 0xd97u32;
alias GL_MAP1_VERTEX_4 = 0xd98u32;
alias GL_MAP2_COLOR_4 = 0xdb0u32;
alias GL_MAP2_GRID_DOMAIN = 0xdd2u32;
alias GL_MAP2_GRID_SEGMENTS = 0xdd3u32;
alias GL_MAP2_INDEX = 0xdb1u32;
alias GL_MAP2_NORMAL = 0xdb2u32;
alias GL_MAP2_TEXTURE_COORD_1 = 0xdb3u32;
alias GL_MAP2_TEXTURE_COORD_2 = 0xdb4u32;
alias GL_MAP2_TEXTURE_COORD_3 = 0xdb5u32;
alias GL_MAP2_TEXTURE_COORD_4 = 0xdb6u32;
alias GL_MAP2_VERTEX_3 = 0xdb7u32;
alias GL_MAP2_VERTEX_4 = 0xdb8u32;
alias GL_MAP_COLOR = 0xd10u32;
alias GL_MAP_FLUSH_EXPLICIT_BIT = 0x10u32;
alias GL_MAP_INVALIDATE_BUFFER_BIT = 0x8u32;
alias GL_MAP_INVALIDATE_RANGE_BIT = 0x4u32;
alias GL_MAP_READ_BIT = 0x1u32;
alias GL_MAP_STENCIL = 0xd11u32;
alias GL_MAP_UNSYNCHRONIZED_BIT = 0x20u32;
alias GL_MAP_WRITE_BIT = 0x2u32;
alias GL_MATRIX_MODE = 0xba0u32;
alias GL_MAX = 0x8008u32;
alias GL_MAX_3D_TEXTURE_SIZE = 0x8073u32;
alias GL_MAX_ARRAY_TEXTURE_LAYERS = 0x88ffu32;
alias GL_MAX_ATTRIB_STACK_DEPTH = 0xd35u32;
alias GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = 0xd3bu32;
alias GL_MAX_CLIP_DISTANCES = 0xd32u32;
alias GL_MAX_CLIP_PLANES = 0xd32u32;
alias GL_MAX_COLOR_ATTACHMENTS = 0x8cdfu32;
alias GL_MAX_COLOR_TEXTURE_SAMPLES = 0x910eu32;
alias GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x8a33u32;
alias GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = 0x8a32u32;
alias GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8e1eu32;
alias GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8e1fu32;
alias GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8b4du32;
alias GL_MAX_COMBINED_UNIFORM_BLOCKS = 0x8a2eu32;
alias GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x8a31u32;
alias GL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x851cu32;
alias GL_MAX_DEPTH_TEXTURE_SAMPLES = 0x910fu32;
alias GL_MAX_DRAW_BUFFERS = 0x8824u32;
alias GL_MAX_DUAL_SOURCE_DRAW_BUFFERS = 0x88fcu32;
alias GL_MAX_ELEMENTS_INDICES = 0x80e9u32;
alias GL_MAX_ELEMENTS_VERTICES = 0x80e8u32;
alias GL_MAX_EVAL_ORDER = 0xd30u32;
alias GL_MAX_FRAGMENT_INPUT_COMPONENTS = 0x9125u32;
alias GL_MAX_FRAGMENT_INTERPOLATION_OFFSET = 0x8e5cu32;
alias GL_MAX_FRAGMENT_UNIFORM_BLOCKS = 0x8a2du32;
alias GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8b49u32;
alias GL_MAX_GEOMETRY_INPUT_COMPONENTS = 0x9123u32;
alias GL_MAX_GEOMETRY_OUTPUT_COMPONENTS = 0x9124u32;
alias GL_MAX_GEOMETRY_OUTPUT_VERTICES = 0x8de0u32;
alias GL_MAX_GEOMETRY_SHADER_INVOCATIONS = 0x8e5au32;
alias GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = 0x8c29u32;
alias GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = 0x8de1u32;
alias GL_MAX_GEOMETRY_UNIFORM_BLOCKS = 0x8a2cu32;
alias GL_MAX_GEOMETRY_UNIFORM_COMPONENTS = 0x8ddfu32;
alias GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB = 0x8dddu32;
alias GL_MAX_INTEGER_SAMPLES = 0x9110u32;
alias GL_MAX_LIGHTS = 0xd31u32;
alias GL_MAX_LIST_NESTING = 0xb31u32;
alias GL_MAX_MODELVIEW_STACK_DEPTH = 0xd36u32;
alias GL_MAX_NAME_STACK_DEPTH = 0xd37u32;
alias GL_MAX_PATCH_VERTICES = 0x8e7du32;
alias GL_MAX_PIXEL_MAP_TABLE = 0xd34u32;
alias GL_MAX_PROGRAM_TEXEL_OFFSET = 0x8905u32;
alias GL_MAX_PROJECTION_STACK_DEPTH = 0xd38u32;
alias GL_MAX_RECTANGLE_TEXTURE_SIZE = 0x84f8u32;
alias GL_MAX_RENDERBUFFER_SIZE = 0x84e8u32;
alias GL_MAX_SAMPLES = 0x8d57u32;
alias GL_MAX_SAMPLE_MASK_WORDS = 0x8e59u32;
alias GL_MAX_SERVER_WAIT_TIMEOUT = 0x9111u32;
alias GL_MAX_SUBROUTINES = 0x8de7u32;
alias GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS = 0x8de8u32;
alias GL_MAX_TESS_CONTROL_INPUT_COMPONENTS = 0x886cu32;
alias GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS = 0x8e83u32;
alias GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = 0x8e81u32;
alias GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = 0x8e85u32;
alias GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS = 0x8e89u32;
alias GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8e7fu32;
alias GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS = 0x886du32;
alias GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = 0x8e86u32;
alias GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = 0x8e82u32;
alias GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS = 0x8e8au32;
alias GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8e80u32;
alias GL_MAX_TESS_GEN_LEVEL = 0x8e7eu32;
alias GL_MAX_TESS_PATCH_COMPONENTS = 0x8e84u32;
alias GL_MAX_TEXTURE_BUFFER_SIZE = 0x8c2bu32;
alias GL_MAX_TEXTURE_COORDS = 0x8871u32;
alias GL_MAX_TEXTURE_IMAGE_UNITS = 0x8872u32;
alias GL_MAX_TEXTURE_LOD_BIAS = 0x84fdu32;
alias GL_MAX_TEXTURE_SIZE = 0xd33u32;
alias GL_MAX_TEXTURE_STACK_DEPTH = 0xd39u32;
alias GL_MAX_TEXTURE_UNITS = 0x84e2u32;
alias GL_MAX_TRANSFORM_FEEDBACK_BUFFERS = 0x8e70u32;
alias GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x8c8au32;
alias GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 0x8c8bu32;
alias GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 0x8c80u32;
alias GL_MAX_UNIFORM_BLOCK_SIZE = 0x8a30u32;
alias GL_MAX_UNIFORM_BUFFER_BINDINGS = 0x8a2fu32;
alias GL_MAX_VARYING_COMPONENTS = 0x8b4bu32;
alias GL_MAX_VARYING_FLOATS = 0x8b4bu32;
alias GL_MAX_VERTEX_ATTRIBS = 0x8869u32;
alias GL_MAX_VERTEX_OUTPUT_COMPONENTS = 0x9122u32;
alias GL_MAX_VERTEX_STREAMS = 0x8e71u32;
alias GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8b4cu32;
alias GL_MAX_VERTEX_UNIFORM_BLOCKS = 0x8a2bu32;
alias GL_MAX_VERTEX_UNIFORM_COMPONENTS = 0x8b4au32;
alias GL_MAX_VERTEX_VARYING_COMPONENTS_ARB = 0x8ddeu32;
alias GL_MAX_VIEWPORT_DIMS = 0xd3au32;
alias GL_MIN = 0x8007u32;
alias GL_MINOR_VERSION = 0x821cu32;
alias GL_MIN_FRAGMENT_INTERPOLATION_OFFSET = 0x8e5bu32;
alias GL_MIN_PROGRAM_TEXEL_OFFSET = 0x8904u32;
alias GL_MIRRORED_REPEAT = 0x8370u32;
alias GL_MODELVIEW = 0x1700u32;
alias GL_MODELVIEW_MATRIX = 0xba6u32;
alias GL_MODELVIEW_STACK_DEPTH = 0xba3u32;
alias GL_MODULATE = 0x2100u32;
alias GL_MULT = 0x103u32;
alias GL_MULTISAMPLE = 0x809du32;
alias GL_MULTISAMPLE_BIT = 0x20000000u32;
alias GL_N3F_V3F = 0x2a25u32;
alias GL_NAME_STACK_DEPTH = 0xd70u32;
alias GL_NAND = 0x150eu32;
alias GL_NEAREST = 0x2600u32;
alias GL_NEAREST_MIPMAP_LINEAR = 0x2702u32;
alias GL_NEAREST_MIPMAP_NEAREST = 0x2700u32;
alias GL_NEVER = 0x200u32;
alias GL_NICEST = 0x1102u32;
alias GL_NONE = 0x0u32;
alias GL_NOOP = 0x1505u32;
alias GL_NOR = 0x1508u32;
alias GL_NORMALIZE = 0xba1u32;
alias GL_NORMAL_ARRAY = 0x8075u32;
alias GL_NORMAL_ARRAY_BUFFER_BINDING = 0x8897u32;
alias GL_NORMAL_ARRAY_POINTER = 0x808fu32;
alias GL_NORMAL_ARRAY_STRIDE = 0x807fu32;
alias GL_NORMAL_ARRAY_TYPE = 0x807eu32;
alias GL_NORMAL_MAP = 0x8511u32;
alias GL_NOTEQUAL = 0x205u32;
alias GL_NO_ERROR = 0x0u32;
alias GL_NUM_COMPATIBLE_SUBROUTINES = 0x8e4au32;
alias GL_NUM_COMPRESSED_TEXTURE_FORMATS = 0x86a2u32;
alias GL_NUM_EXTENSIONS = 0x821du32;
alias GL_OBJECT_LINEAR = 0x2401u32;
alias GL_OBJECT_PLANE = 0x2501u32;
alias GL_OBJECT_TYPE = 0x9112u32;
alias GL_ONE = 0x1u32;
alias GL_ONE_MINUS_CONSTANT_ALPHA = 0x8004u32;
alias GL_ONE_MINUS_CONSTANT_COLOR = 0x8002u32;
alias GL_ONE_MINUS_DST_ALPHA = 0x305u32;
alias GL_ONE_MINUS_DST_COLOR = 0x307u32;
alias GL_ONE_MINUS_SRC1_ALPHA = 0x88fbu32;
alias GL_ONE_MINUS_SRC1_COLOR = 0x88fau32;
alias GL_ONE_MINUS_SRC_ALPHA = 0x303u32;
alias GL_ONE_MINUS_SRC_COLOR = 0x301u32;
alias GL_OPERAND0_ALPHA = 0x8598u32;
alias GL_OPERAND0_RGB = 0x8590u32;
alias GL_OPERAND1_ALPHA = 0x8599u32;
alias GL_OPERAND1_RGB = 0x8591u32;
alias GL_OPERAND2_ALPHA = 0x859au32;
alias GL_OPERAND2_RGB = 0x8592u32;
alias GL_OR = 0x1507u32;
alias GL_ORDER = 0xa01u32;
alias GL_OR_INVERTED = 0x150du32;
alias GL_OR_REVERSE = 0x150bu32;
alias GL_OUT_OF_MEMORY = 0x505u32;
alias GL_PACK_ALIGNMENT = 0xd05u32;
alias GL_PACK_IMAGE_HEIGHT = 0x806cu32;
alias GL_PACK_LSB_FIRST = 0xd01u32;
alias GL_PACK_ROW_LENGTH = 0xd02u32;
alias GL_PACK_SKIP_IMAGES = 0x806bu32;
alias GL_PACK_SKIP_PIXELS = 0xd04u32;
alias GL_PACK_SKIP_ROWS = 0xd03u32;
alias GL_PACK_SWAP_BYTES = 0xd00u32;
alias GL_PASS_THROUGH_TOKEN = 0x700u32;
alias GL_PATCHES = 0xeu32;
alias GL_PATCH_DEFAULT_INNER_LEVEL = 0x8e73u32;
alias GL_PATCH_DEFAULT_OUTER_LEVEL = 0x8e74u32;
alias GL_PATCH_VERTICES = 0x8e72u32;
alias GL_PERSPECTIVE_CORRECTION_HINT = 0xc50u32;
alias GL_PIXEL_MAP_A_TO_A = 0xc79u32;
alias GL_PIXEL_MAP_A_TO_A_SIZE = 0xcb9u32;
alias GL_PIXEL_MAP_B_TO_B = 0xc78u32;
alias GL_PIXEL_MAP_B_TO_B_SIZE = 0xcb8u32;
alias GL_PIXEL_MAP_G_TO_G = 0xc77u32;
alias GL_PIXEL_MAP_G_TO_G_SIZE = 0xcb7u32;
alias GL_PIXEL_MAP_I_TO_A = 0xc75u32;
alias GL_PIXEL_MAP_I_TO_A_SIZE = 0xcb5u32;
alias GL_PIXEL_MAP_I_TO_B = 0xc74u32;
alias GL_PIXEL_MAP_I_TO_B_SIZE = 0xcb4u32;
alias GL_PIXEL_MAP_I_TO_G = 0xc73u32;
alias GL_PIXEL_MAP_I_TO_G_SIZE = 0xcb3u32;
alias GL_PIXEL_MAP_I_TO_I = 0xc70u32;
alias GL_PIXEL_MAP_I_TO_I_SIZE = 0xcb0u32;
alias GL_PIXEL_MAP_I_TO_R = 0xc72u32;
alias GL_PIXEL_MAP_I_TO_R_SIZE = 0xcb2u32;
alias GL_PIXEL_MAP_R_TO_R = 0xc76u32;
alias GL_PIXEL_MAP_R_TO_R_SIZE = 0xcb6u32;
alias GL_PIXEL_MAP_S_TO_S = 0xc71u32;
alias GL_PIXEL_MAP_S_TO_S_SIZE = 0xcb1u32;
alias GL_PIXEL_MODE_BIT = 0x20u32;
alias GL_PIXEL_PACK_BUFFER = 0x88ebu32;
alias GL_PIXEL_PACK_BUFFER_BINDING = 0x88edu32;
alias GL_PIXEL_UNPACK_BUFFER = 0x88ecu32;
alias GL_PIXEL_UNPACK_BUFFER_BINDING = 0x88efu32;
alias GL_POINT = 0x1b00u32;
alias GL_POINTS = 0x0u32;
alias GL_POINT_BIT = 0x2u32;
alias GL_POINT_DISTANCE_ATTENUATION = 0x8129u32;
alias GL_POINT_FADE_THRESHOLD_SIZE = 0x8128u32;
alias GL_POINT_SIZE = 0xb11u32;
alias GL_POINT_SIZE_GRANULARITY = 0xb13u32;
alias GL_POINT_SIZE_MAX = 0x8127u32;
alias GL_POINT_SIZE_MIN = 0x8126u32;
alias GL_POINT_SIZE_RANGE = 0xb12u32;
alias GL_POINT_SMOOTH = 0xb10u32;
alias GL_POINT_SMOOTH_HINT = 0xc51u32;
alias GL_POINT_SPRITE = 0x8861u32;
alias GL_POINT_SPRITE_COORD_ORIGIN = 0x8ca0u32;
alias GL_POINT_TOKEN = 0x701u32;
alias GL_POLYGON = 0x9u32;
alias GL_POLYGON_BIT = 0x8u32;
alias GL_POLYGON_MODE = 0xb40u32;
alias GL_POLYGON_OFFSET_FACTOR = 0x8038u32;
alias GL_POLYGON_OFFSET_FILL = 0x8037u32;
alias GL_POLYGON_OFFSET_LINE = 0x2a02u32;
alias GL_POLYGON_OFFSET_POINT = 0x2a01u32;
alias GL_POLYGON_OFFSET_UNITS = 0x2a00u32;
alias GL_POLYGON_SMOOTH = 0xb41u32;
alias GL_POLYGON_SMOOTH_HINT = 0xc53u32;
alias GL_POLYGON_STIPPLE = 0xb42u32;
alias GL_POLYGON_STIPPLE_BIT = 0x10u32;
alias GL_POLYGON_TOKEN = 0x703u32;
alias GL_POSITION = 0x1203u32;
alias GL_PREVIOUS = 0x8578u32;
alias GL_PRIMARY_COLOR = 0x8577u32;
alias GL_PRIMITIVES_GENERATED = 0x8c87u32;
alias GL_PRIMITIVE_RESTART = 0x8f9du32;
alias GL_PRIMITIVE_RESTART_INDEX = 0x8f9eu32;
alias GL_PROGRAM_POINT_SIZE = 0x8642u32;
alias GL_PROJECTION = 0x1701u32;
alias GL_PROJECTION_MATRIX = 0xba7u32;
alias GL_PROJECTION_STACK_DEPTH = 0xba4u32;
alias GL_PROVOKING_VERTEX = 0x8e4fu32;
alias GL_PROXY_TEXTURE_1D = 0x8063u32;
alias GL_PROXY_TEXTURE_1D_ARRAY = 0x8c19u32;
alias GL_PROXY_TEXTURE_2D = 0x8064u32;
alias GL_PROXY_TEXTURE_2D_ARRAY = 0x8c1bu32;
alias GL_PROXY_TEXTURE_2D_MULTISAMPLE = 0x9101u32;
alias GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9103u32;
alias GL_PROXY_TEXTURE_3D = 0x8070u32;
alias GL_PROXY_TEXTURE_CUBE_MAP = 0x851bu32;
alias GL_PROXY_TEXTURE_RECTANGLE = 0x84f7u32;
alias GL_Q = 0x2003u32;
alias GL_QUADRATIC_ATTENUATION = 0x1209u32;
alias GL_QUADS = 0x7u32;
alias GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = 0x8e4cu32;
alias GL_QUAD_STRIP = 0x8u32;
alias GL_QUERY_BY_REGION_NO_WAIT = 0x8e16u32;
alias GL_QUERY_BY_REGION_WAIT = 0x8e15u32;
alias GL_QUERY_COUNTER_BITS = 0x8864u32;
alias GL_QUERY_NO_WAIT = 0x8e14u32;
alias GL_QUERY_RESULT = 0x8866u32;
alias GL_QUERY_RESULT_AVAILABLE = 0x8867u32;
alias GL_QUERY_WAIT = 0x8e13u32;
alias GL_R = 0x2002u32;
alias GL_R11F_G11F_B10F = 0x8c3au32;
alias GL_R16 = 0x822au32;
alias GL_R16F = 0x822du32;
alias GL_R16I = 0x8233u32;
alias GL_R16UI = 0x8234u32;
alias GL_R16_SNORM = 0x8f98u32;
alias GL_R32F = 0x822eu32;
alias GL_R32I = 0x8235u32;
alias GL_R32UI = 0x8236u32;
alias GL_R3_G3_B2 = 0x2a10u32;
alias GL_R8 = 0x8229u32;
alias GL_R8I = 0x8231u32;
alias GL_R8UI = 0x8232u32;
alias GL_R8_SNORM = 0x8f94u32;
alias GL_RASTERIZER_DISCARD = 0x8c89u32;
alias GL_READ_BUFFER = 0xc02u32;
alias GL_READ_FRAMEBUFFER = 0x8ca8u32;
alias GL_READ_FRAMEBUFFER_BINDING = 0x8caau32;
alias GL_READ_ONLY = 0x88b8u32;
alias GL_READ_WRITE = 0x88bau32;
alias GL_RED = 0x1903u32;
alias GL_RED_BIAS = 0xd15u32;
alias GL_RED_BITS = 0xd52u32;
alias GL_RED_INTEGER = 0x8d94u32;
alias GL_RED_SCALE = 0xd14u32;
alias GL_RED_SNORM = 0x8f90u32;
alias GL_REFLECTION_MAP = 0x8512u32;
alias GL_RENDER = 0x1c00u32;
alias GL_RENDERBUFFER = 0x8d41u32;
alias GL_RENDERBUFFER_ALPHA_SIZE = 0x8d53u32;
alias GL_RENDERBUFFER_BINDING = 0x8ca7u32;
alias GL_RENDERBUFFER_BLUE_SIZE = 0x8d52u32;
alias GL_RENDERBUFFER_DEPTH_SIZE = 0x8d54u32;
alias GL_RENDERBUFFER_GREEN_SIZE = 0x8d51u32;
alias GL_RENDERBUFFER_HEIGHT = 0x8d43u32;
alias GL_RENDERBUFFER_INTERNAL_FORMAT = 0x8d44u32;
alias GL_RENDERBUFFER_RED_SIZE = 0x8d50u32;
alias GL_RENDERBUFFER_SAMPLES = 0x8cabu32;
alias GL_RENDERBUFFER_STENCIL_SIZE = 0x8d55u32;
alias GL_RENDERBUFFER_WIDTH = 0x8d42u32;
alias GL_RENDERER = 0x1f01u32;
alias GL_RENDER_MODE = 0xc40u32;
alias GL_REPEAT = 0x2901u32;
alias GL_REPLACE = 0x1e01u32;
alias GL_RESCALE_NORMAL = 0x803au32;
alias GL_RETURN = 0x102u32;
alias GL_RG = 0x8227u32;
alias GL_RG16 = 0x822cu32;
alias GL_RG16F = 0x822fu32;
alias GL_RG16I = 0x8239u32;
alias GL_RG16UI = 0x823au32;
alias GL_RG16_SNORM = 0x8f99u32;
alias GL_RG32F = 0x8230u32;
alias GL_RG32I = 0x823bu32;
alias GL_RG32UI = 0x823cu32;
alias GL_RG8 = 0x822bu32;
alias GL_RG8I = 0x8237u32;
alias GL_RG8UI = 0x8238u32;
alias GL_RG8_SNORM = 0x8f95u32;
alias GL_RGB = 0x1907u32;
alias GL_RGB10 = 0x8052u32;
alias GL_RGB10_A2 = 0x8059u32;
alias GL_RGB10_A2UI = 0x906fu32;
alias GL_RGB12 = 0x8053u32;
alias GL_RGB16 = 0x8054u32;
alias GL_RGB16F = 0x881bu32;
alias GL_RGB16I = 0x8d89u32;
alias GL_RGB16UI = 0x8d77u32;
alias GL_RGB16_SNORM = 0x8f9au32;
alias GL_RGB32F = 0x8815u32;
alias GL_RGB32I = 0x8d83u32;
alias GL_RGB32UI = 0x8d71u32;
alias GL_RGB4 = 0x804fu32;
alias GL_RGB5 = 0x8050u32;
alias GL_RGB5_A1 = 0x8057u32;
alias GL_RGB8 = 0x8051u32;
alias GL_RGB8I = 0x8d8fu32;
alias GL_RGB8UI = 0x8d7du32;
alias GL_RGB8_SNORM = 0x8f96u32;
alias GL_RGB9_E5 = 0x8c3du32;
alias GL_RGBA = 0x1908u32;
alias GL_RGBA12 = 0x805au32;
alias GL_RGBA16 = 0x805bu32;
alias GL_RGBA16F = 0x881au32;
alias GL_RGBA16I = 0x8d88u32;
alias GL_RGBA16UI = 0x8d76u32;
alias GL_RGBA16_SNORM = 0x8f9bu32;
alias GL_RGBA2 = 0x8055u32;
alias GL_RGBA32F = 0x8814u32;
alias GL_RGBA32I = 0x8d82u32;
alias GL_RGBA32UI = 0x8d70u32;
alias GL_RGBA4 = 0x8056u32;
alias GL_RGBA8 = 0x8058u32;
alias GL_RGBA8I = 0x8d8eu32;
alias GL_RGBA8UI = 0x8d7cu32;
alias GL_RGBA8_SNORM = 0x8f97u32;
alias GL_RGBA_INTEGER = 0x8d99u32;
alias GL_RGBA_MODE = 0xc31u32;
alias GL_RGBA_SNORM = 0x8f93u32;
alias GL_RGB_INTEGER = 0x8d98u32;
alias GL_RGB_SCALE = 0x8573u32;
alias GL_RGB_SNORM = 0x8f92u32;
alias GL_RG_INTEGER = 0x8228u32;
alias GL_RG_SNORM = 0x8f91u32;
alias GL_RIGHT = 0x407u32;
alias GL_S = 0x2000u32;
alias GL_SAMPLER_1D = 0x8b5du32;
alias GL_SAMPLER_1D_ARRAY = 0x8dc0u32;
alias GL_SAMPLER_1D_ARRAY_SHADOW = 0x8dc3u32;
alias GL_SAMPLER_1D_SHADOW = 0x8b61u32;
alias GL_SAMPLER_2D = 0x8b5eu32;
alias GL_SAMPLER_2D_ARRAY = 0x8dc1u32;
alias GL_SAMPLER_2D_ARRAY_SHADOW = 0x8dc4u32;
alias GL_SAMPLER_2D_MULTISAMPLE = 0x9108u32;
alias GL_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910bu32;
alias GL_SAMPLER_2D_RECT = 0x8b63u32;
alias GL_SAMPLER_2D_RECT_SHADOW = 0x8b64u32;
alias GL_SAMPLER_2D_SHADOW = 0x8b62u32;
alias GL_SAMPLER_3D = 0x8b5fu32;
alias GL_SAMPLER_BINDING = 0x8919u32;
alias GL_SAMPLER_BUFFER = 0x8dc2u32;
alias GL_SAMPLER_CUBE = 0x8b60u32;
alias GL_SAMPLER_CUBE_SHADOW = 0x8dc5u32;
alias GL_SAMPLES = 0x80a9u32;
alias GL_SAMPLES_PASSED = 0x8914u32;
alias GL_SAMPLE_ALPHA_TO_COVERAGE = 0x809eu32;
alias GL_SAMPLE_ALPHA_TO_ONE = 0x809fu32;
alias GL_SAMPLE_BUFFERS = 0x80a8u32;
alias GL_SAMPLE_COVERAGE = 0x80a0u32;
alias GL_SAMPLE_COVERAGE_INVERT = 0x80abu32;
alias GL_SAMPLE_COVERAGE_VALUE = 0x80aau32;
alias GL_SAMPLE_MASK = 0x8e51u32;
alias GL_SAMPLE_MASK_VALUE = 0x8e52u32;
alias GL_SAMPLE_POSITION = 0x8e50u32;
alias GL_SCISSOR_BIT = 0x80000u32;
alias GL_SCISSOR_BOX = 0xc10u32;
alias GL_SCISSOR_TEST = 0xc11u32;
alias GL_SECONDARY_COLOR_ARRAY = 0x845eu32;
alias GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING = 0x889cu32;
alias GL_SECONDARY_COLOR_ARRAY_POINTER = 0x845du32;
alias GL_SECONDARY_COLOR_ARRAY_SIZE = 0x845au32;
alias GL_SECONDARY_COLOR_ARRAY_STRIDE = 0x845cu32;
alias GL_SECONDARY_COLOR_ARRAY_TYPE = 0x845bu32;
alias GL_SELECT = 0x1c02u32;
alias GL_SELECTION_BUFFER_POINTER = 0xdf3u32;
alias GL_SELECTION_BUFFER_SIZE = 0xdf4u32;
alias GL_SEPARATE_ATTRIBS = 0x8c8du32;
alias GL_SEPARATE_SPECULAR_COLOR = 0x81fau32;
alias GL_SET = 0x150fu32;
alias GL_SHADER_SOURCE_LENGTH = 0x8b88u32;
alias GL_SHADER_TYPE = 0x8b4fu32;
alias GL_SHADE_MODEL = 0xb54u32;
alias GL_SHADING_LANGUAGE_VERSION = 0x8b8cu32;
alias GL_SHININESS = 0x1601u32;
alias GL_SHORT = 0x1402u32;
alias GL_SIGNALED = 0x9119u32;
alias GL_SIGNED_NORMALIZED = 0x8f9cu32;
alias GL_SINGLE_COLOR = 0x81f9u32;
alias GL_SLUMINANCE = 0x8c46u32;
alias GL_SLUMINANCE8 = 0x8c47u32;
alias GL_SLUMINANCE8_ALPHA8 = 0x8c45u32;
alias GL_SLUMINANCE_ALPHA = 0x8c44u32;
alias GL_SMOOTH = 0x1d01u32;
alias GL_SMOOTH_LINE_WIDTH_GRANULARITY = 0xb23u32;
alias GL_SMOOTH_LINE_WIDTH_RANGE = 0xb22u32;
alias GL_SMOOTH_POINT_SIZE_GRANULARITY = 0xb13u32;
alias GL_SMOOTH_POINT_SIZE_RANGE = 0xb12u32;
alias GL_SOURCE0_ALPHA = 0x8588u32;
alias GL_SOURCE0_RGB = 0x8580u32;
alias GL_SOURCE1_ALPHA = 0x8589u32;
alias GL_SOURCE1_RGB = 0x8581u32;
alias GL_SOURCE2_ALPHA = 0x858au32;
alias GL_SOURCE2_RGB = 0x8582u32;
alias GL_SPECULAR = 0x1202u32;
alias GL_SPHERE_MAP = 0x2402u32;
alias GL_SPOT_CUTOFF = 0x1206u32;
alias GL_SPOT_DIRECTION = 0x1204u32;
alias GL_SPOT_EXPONENT = 0x1205u32;
alias GL_SRC0_ALPHA = 0x8588u32;
alias GL_SRC0_RGB = 0x8580u32;
alias GL_SRC1_ALPHA = 0x8589u32;
alias GL_SRC1_COLOR = 0x88f9u32;
alias GL_SRC1_RGB = 0x8581u32;
alias GL_SRC2_ALPHA = 0x858au32;
alias GL_SRC2_RGB = 0x8582u32;
alias GL_SRC_ALPHA = 0x302u32;
alias GL_SRC_ALPHA_SATURATE = 0x308u32;
alias GL_SRC_COLOR = 0x300u32;
alias GL_SRGB = 0x8c40u32;
alias GL_SRGB8 = 0x8c41u32;
alias GL_SRGB8_ALPHA8 = 0x8c43u32;
alias GL_SRGB_ALPHA = 0x8c42u32;
alias GL_STACK_OVERFLOW = 0x503u32;
alias GL_STACK_UNDERFLOW = 0x504u32;
alias GL_STATIC_COPY = 0x88e6u32;
alias GL_STATIC_DRAW = 0x88e4u32;
alias GL_STATIC_READ = 0x88e5u32;
alias GL_STENCIL = 0x1802u32;
alias GL_STENCIL_ATTACHMENT = 0x8d20u32;
alias GL_STENCIL_BACK_FAIL = 0x8801u32;
alias GL_STENCIL_BACK_FUNC = 0x8800u32;
alias GL_STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802u32;
alias GL_STENCIL_BACK_PASS_DEPTH_PASS = 0x8803u32;
alias GL_STENCIL_BACK_REF = 0x8ca3u32;
alias GL_STENCIL_BACK_VALUE_MASK = 0x8ca4u32;
alias GL_STENCIL_BACK_WRITEMASK = 0x8ca5u32;
alias GL_STENCIL_BITS = 0xd57u32;
alias GL_STENCIL_BUFFER = 0x8224u32;
alias GL_STENCIL_BUFFER_BIT = 0x400u32;
alias GL_STENCIL_CLEAR_VALUE = 0xb91u32;
alias GL_STENCIL_FAIL = 0xb94u32;
alias GL_STENCIL_FUNC = 0xb92u32;
alias GL_STENCIL_INDEX = 0x1901u32;
alias GL_STENCIL_INDEX1 = 0x8d46u32;
alias GL_STENCIL_INDEX16 = 0x8d49u32;
alias GL_STENCIL_INDEX4 = 0x8d47u32;
alias GL_STENCIL_INDEX8 = 0x8d48u32;
alias GL_STENCIL_PASS_DEPTH_FAIL = 0xb95u32;
alias GL_STENCIL_PASS_DEPTH_PASS = 0xb96u32;
alias GL_STENCIL_REF = 0xb97u32;
alias GL_STENCIL_TEST = 0xb90u32;
alias GL_STENCIL_VALUE_MASK = 0xb93u32;
alias GL_STENCIL_WRITEMASK = 0xb98u32;
alias GL_STEREO = 0xc33u32;
alias GL_STREAM_COPY = 0x88e2u32;
alias GL_STREAM_DRAW = 0x88e0u32;
alias GL_STREAM_READ = 0x88e1u32;
alias GL_SUBPIXEL_BITS = 0xd50u32;
alias GL_SUBTRACT = 0x84e7u32;
alias GL_SYNC_CONDITION = 0x9113u32;
alias GL_SYNC_FENCE = 0x9116u32;
alias GL_SYNC_FLAGS = 0x9115u32;
alias GL_SYNC_FLUSH_COMMANDS_BIT = 0x1u32;
alias GL_SYNC_GPU_COMMANDS_COMPLETE = 0x9117u32;
alias GL_SYNC_STATUS = 0x9114u32;
alias GL_T = 0x2001u32;
alias GL_T2F_C3F_V3F = 0x2a2au32;
alias GL_T2F_C4F_N3F_V3F = 0x2a2cu32;
alias GL_T2F_C4UB_V3F = 0x2a29u32;
alias GL_T2F_N3F_V3F = 0x2a2bu32;
alias GL_T2F_V3F = 0x2a27u32;
alias GL_T4F_C4F_N3F_V4F = 0x2a2du32;
alias GL_T4F_V4F = 0x2a28u32;
alias GL_TESS_CONTROL_OUTPUT_VERTICES = 0x8e75u32;
alias GL_TESS_CONTROL_SHADER = 0x8e88u32;
alias GL_TESS_EVALUATION_SHADER = 0x8e87u32;
alias GL_TESS_GEN_MODE = 0x8e76u32;
alias GL_TESS_GEN_POINT_MODE = 0x8e79u32;
alias GL_TESS_GEN_SPACING = 0x8e77u32;
alias GL_TESS_GEN_VERTEX_ORDER = 0x8e78u32;
alias GL_TEXTURE = 0x1702u32;
alias GL_TEXTURE0 = 0x84c0u32;
alias GL_TEXTURE1 = 0x84c1u32;
alias GL_TEXTURE10 = 0x84cau32;
alias GL_TEXTURE11 = 0x84cbu32;
alias GL_TEXTURE12 = 0x84ccu32;
alias GL_TEXTURE13 = 0x84cdu32;
alias GL_TEXTURE14 = 0x84ceu32;
alias GL_TEXTURE15 = 0x84cfu32;
alias GL_TEXTURE16 = 0x84d0u32;
alias GL_TEXTURE17 = 0x84d1u32;
alias GL_TEXTURE18 = 0x84d2u32;
alias GL_TEXTURE19 = 0x84d3u32;
alias GL_TEXTURE2 = 0x84c2u32;
alias GL_TEXTURE20 = 0x84d4u32;
alias GL_TEXTURE21 = 0x84d5u32;
alias GL_TEXTURE22 = 0x84d6u32;
alias GL_TEXTURE23 = 0x84d7u32;
alias GL_TEXTURE24 = 0x84d8u32;
alias GL_TEXTURE25 = 0x84d9u32;
alias GL_TEXTURE26 = 0x84dau32;
alias GL_TEXTURE27 = 0x84dbu32;
alias GL_TEXTURE28 = 0x84dcu32;
alias GL_TEXTURE29 = 0x84ddu32;
alias GL_TEXTURE3 = 0x84c3u32;
alias GL_TEXTURE30 = 0x84deu32;
alias GL_TEXTURE31 = 0x84dfu32;
alias GL_TEXTURE4 = 0x84c4u32;
alias GL_TEXTURE5 = 0x84c5u32;
alias GL_TEXTURE6 = 0x84c6u32;
alias GL_TEXTURE7 = 0x84c7u32;
alias GL_TEXTURE8 = 0x84c8u32;
alias GL_TEXTURE9 = 0x84c9u32;
alias GL_TEXTURE_1D = 0xde0u32;
alias GL_TEXTURE_1D_ARRAY = 0x8c18u32;
alias GL_TEXTURE_2D = 0xde1u32;
alias GL_TEXTURE_2D_ARRAY = 0x8c1au32;
alias GL_TEXTURE_2D_MULTISAMPLE = 0x9100u32;
alias GL_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9102u32;
alias GL_TEXTURE_3D = 0x806fu32;
alias GL_TEXTURE_ALPHA_SIZE = 0x805fu32;
alias GL_TEXTURE_ALPHA_TYPE = 0x8c13u32;
alias GL_TEXTURE_BASE_LEVEL = 0x813cu32;
alias GL_TEXTURE_BINDING_1D = 0x8068u32;
alias GL_TEXTURE_BINDING_1D_ARRAY = 0x8c1cu32;
alias GL_TEXTURE_BINDING_2D = 0x8069u32;
alias GL_TEXTURE_BINDING_2D_ARRAY = 0x8c1du32;
alias GL_TEXTURE_BINDING_2D_MULTISAMPLE = 0x9104u32;
alias GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 0x9105u32;
alias GL_TEXTURE_BINDING_3D = 0x806au32;
alias GL_TEXTURE_BINDING_BUFFER = 0x8c2cu32;
alias GL_TEXTURE_BINDING_CUBE_MAP = 0x8514u32;
alias GL_TEXTURE_BINDING_RECTANGLE = 0x84f6u32;
alias GL_TEXTURE_BIT = 0x40000u32;
alias GL_TEXTURE_BLUE_SIZE = 0x805eu32;
alias GL_TEXTURE_BLUE_TYPE = 0x8c12u32;
alias GL_TEXTURE_BORDER = 0x1005u32;
alias GL_TEXTURE_BORDER_COLOR = 0x1004u32;
alias GL_TEXTURE_BUFFER = 0x8c2au32;
alias GL_TEXTURE_BUFFER_DATA_STORE_BINDING = 0x8c2du32;
alias GL_TEXTURE_BUFFER_FORMAT = 0x8c2eu32;
alias GL_TEXTURE_COMPARE_FUNC = 0x884du32;
alias GL_TEXTURE_COMPARE_MODE = 0x884cu32;
alias GL_TEXTURE_COMPONENTS = 0x1003u32;
alias GL_TEXTURE_COMPRESSED = 0x86a1u32;
alias GL_TEXTURE_COMPRESSED_IMAGE_SIZE = 0x86a0u32;
alias GL_TEXTURE_COMPRESSION_HINT = 0x84efu32;
alias GL_TEXTURE_COORD_ARRAY = 0x8078u32;
alias GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING = 0x889au32;
alias GL_TEXTURE_COORD_ARRAY_POINTER = 0x8092u32;
alias GL_TEXTURE_COORD_ARRAY_SIZE = 0x8088u32;
alias GL_TEXTURE_COORD_ARRAY_STRIDE = 0x808au32;
alias GL_TEXTURE_COORD_ARRAY_TYPE = 0x8089u32;
alias GL_TEXTURE_CUBE_MAP = 0x8513u32;
alias GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516u32;
alias GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518u32;
alias GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851au32;
alias GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515u32;
alias GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517u32;
alias GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519u32;
alias GL_TEXTURE_CUBE_MAP_SEAMLESS = 0x884fu32;
alias GL_TEXTURE_DEPTH = 0x8071u32;
alias GL_TEXTURE_DEPTH_SIZE = 0x884au32;
alias GL_TEXTURE_DEPTH_TYPE = 0x8c16u32;
alias GL_TEXTURE_ENV = 0x2300u32;
alias GL_TEXTURE_ENV_COLOR = 0x2201u32;
alias GL_TEXTURE_ENV_MODE = 0x2200u32;
alias GL_TEXTURE_FILTER_CONTROL = 0x8500u32;
alias GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = 0x9107u32;
alias GL_TEXTURE_GEN_MODE = 0x2500u32;
alias GL_TEXTURE_GEN_Q = 0xc63u32;
alias GL_TEXTURE_GEN_R = 0xc62u32;
alias GL_TEXTURE_GEN_S = 0xc60u32;
alias GL_TEXTURE_GEN_T = 0xc61u32;
alias GL_TEXTURE_GREEN_SIZE = 0x805du32;
alias GL_TEXTURE_GREEN_TYPE = 0x8c11u32;
alias GL_TEXTURE_HEIGHT = 0x1001u32;
alias GL_TEXTURE_INTENSITY_SIZE = 0x8061u32;
alias GL_TEXTURE_INTENSITY_TYPE_ARB = 0x8c15u32;
alias GL_TEXTURE_INTERNAL_FORMAT = 0x1003u32;
alias GL_TEXTURE_LOD_BIAS = 0x8501u32;
alias GL_TEXTURE_LUMINANCE_SIZE = 0x8060u32;
alias GL_TEXTURE_LUMINANCE_TYPE_ARB = 0x8c14u32;
alias GL_TEXTURE_MAG_FILTER = 0x2800u32;
alias GL_TEXTURE_MATRIX = 0xba8u32;
alias GL_TEXTURE_MAX_LEVEL = 0x813du32;
alias GL_TEXTURE_MAX_LOD = 0x813bu32;
alias GL_TEXTURE_MIN_FILTER = 0x2801u32;
alias GL_TEXTURE_MIN_LOD = 0x813au32;
alias GL_TEXTURE_PRIORITY = 0x8066u32;
alias GL_TEXTURE_RECTANGLE = 0x84f5u32;
alias GL_TEXTURE_RED_SIZE = 0x805cu32;
alias GL_TEXTURE_RED_TYPE = 0x8c10u32;
alias GL_TEXTURE_RESIDENT = 0x8067u32;
alias GL_TEXTURE_SAMPLES = 0x9106u32;
alias GL_TEXTURE_SHARED_SIZE = 0x8c3fu32;
alias GL_TEXTURE_STACK_DEPTH = 0xba5u32;
alias GL_TEXTURE_STENCIL_SIZE = 0x88f1u32;
alias GL_TEXTURE_SWIZZLE_A = 0x8e45u32;
alias GL_TEXTURE_SWIZZLE_B = 0x8e44u32;
alias GL_TEXTURE_SWIZZLE_G = 0x8e43u32;
alias GL_TEXTURE_SWIZZLE_R = 0x8e42u32;
alias GL_TEXTURE_SWIZZLE_RGBA = 0x8e46u32;
alias GL_TEXTURE_WIDTH = 0x1000u32;
alias GL_TEXTURE_WRAP_R = 0x8072u32;
alias GL_TEXTURE_WRAP_S = 0x2802u32;
alias GL_TEXTURE_WRAP_T = 0x2803u32;
alias GL_TIMEOUT_EXPIRED = 0x911bu32;
alias GL_TIMEOUT_IGNORED = 0xffffffffffffffffu32;
alias GL_TIMESTAMP = 0x8e28u32;
alias GL_TIME_ELAPSED = 0x88bfu32;
alias GL_TRANSFORM_BIT = 0x1000u32;
alias GL_TRANSFORM_FEEDBACK = 0x8e22u32;
alias GL_TRANSFORM_FEEDBACK_BINDING = 0x8e25u32;
alias GL_TRANSFORM_FEEDBACK_BUFFER = 0x8c8eu32;
alias GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE = 0x8e24u32;
alias GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = 0x8c8fu32;
alias GL_TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8c7fu32;
alias GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED = 0x8e23u32;
alias GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = 0x8c85u32;
alias GL_TRANSFORM_FEEDBACK_BUFFER_START = 0x8c84u32;
alias GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8c88u32;
alias GL_TRANSFORM_FEEDBACK_VARYINGS = 0x8c83u32;
alias GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 0x8c76u32;
alias GL_TRANSPOSE_COLOR_MATRIX = 0x84e6u32;
alias GL_TRANSPOSE_MODELVIEW_MATRIX = 0x84e3u32;
alias GL_TRANSPOSE_PROJECTION_MATRIX = 0x84e4u32;
alias GL_TRANSPOSE_TEXTURE_MATRIX = 0x84e5u32;
alias GL_TRIANGLES = 0x4u32;
alias GL_TRIANGLES_ADJACENCY = 0xcu32;
alias GL_TRIANGLE_FAN = 0x6u32;
alias GL_TRIANGLE_STRIP = 0x5u32;
alias GL_TRIANGLE_STRIP_ADJACENCY = 0xdu32;
alias GL_TRUE = 0x1u32;
alias GL_UNIFORM_ARRAY_STRIDE = 0x8a3cu32;
alias GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = 0x8a42u32;
alias GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x8a43u32;
alias GL_UNIFORM_BLOCK_BINDING = 0x8a3fu32;
alias GL_UNIFORM_BLOCK_DATA_SIZE = 0x8a40u32;
alias GL_UNIFORM_BLOCK_INDEX = 0x8a3au32;
alias GL_UNIFORM_BLOCK_NAME_LENGTH = 0x8a41u32;
alias GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8a46u32;
alias GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = 0x8a45u32;
alias GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER = 0x84f0u32;
alias GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x84f1u32;
alias GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x8a44u32;
alias GL_UNIFORM_BUFFER = 0x8a11u32;
alias GL_UNIFORM_BUFFER_BINDING = 0x8a28u32;
alias GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x8a34u32;
alias GL_UNIFORM_BUFFER_SIZE = 0x8a2au32;
alias GL_UNIFORM_BUFFER_START = 0x8a29u32;
alias GL_UNIFORM_IS_ROW_MAJOR = 0x8a3eu32;
alias GL_UNIFORM_MATRIX_STRIDE = 0x8a3du32;
alias GL_UNIFORM_NAME_LENGTH = 0x8a39u32;
alias GL_UNIFORM_OFFSET = 0x8a3bu32;
alias GL_UNIFORM_SIZE = 0x8a38u32;
alias GL_UNIFORM_TYPE = 0x8a37u32;
alias GL_UNPACK_ALIGNMENT = 0xcf5u32;
alias GL_UNPACK_IMAGE_HEIGHT = 0x806eu32;
alias GL_UNPACK_LSB_FIRST = 0xcf1u32;
alias GL_UNPACK_ROW_LENGTH = 0xcf2u32;
alias GL_UNPACK_SKIP_IMAGES = 0x806du32;
alias GL_UNPACK_SKIP_PIXELS = 0xcf4u32;
alias GL_UNPACK_SKIP_ROWS = 0xcf3u32;
alias GL_UNPACK_SWAP_BYTES = 0xcf0u32;
alias GL_UNSIGNALED = 0x9118u32;
alias GL_UNSIGNED_BYTE = 0x1401u32;
alias GL_UNSIGNED_BYTE_2_3_3_REV = 0x8362u32;
alias GL_UNSIGNED_BYTE_3_3_2 = 0x8032u32;
alias GL_UNSIGNED_INT = 0x1405u32;
alias GL_UNSIGNED_INT_10F_11F_11F_REV = 0x8c3bu32;
alias GL_UNSIGNED_INT_10_10_10_2 = 0x8036u32;
alias GL_UNSIGNED_INT_24_8 = 0x84fau32;
alias GL_UNSIGNED_INT_2_10_10_10_REV = 0x8368u32;
alias GL_UNSIGNED_INT_5_9_9_9_REV = 0x8c3eu32;
alias GL_UNSIGNED_INT_8_8_8_8 = 0x8035u32;
alias GL_UNSIGNED_INT_8_8_8_8_REV = 0x8367u32;
alias GL_UNSIGNED_INT_SAMPLER_1D = 0x8dd1u32;
alias GL_UNSIGNED_INT_SAMPLER_1D_ARRAY = 0x8dd6u32;
alias GL_UNSIGNED_INT_SAMPLER_2D = 0x8dd2u32;
alias GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8dd7u32;
alias GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 0x910au32;
alias GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910du32;
alias GL_UNSIGNED_INT_SAMPLER_2D_RECT = 0x8dd5u32;
alias GL_UNSIGNED_INT_SAMPLER_3D = 0x8dd3u32;
alias GL_UNSIGNED_INT_SAMPLER_BUFFER = 0x8dd8u32;
alias GL_UNSIGNED_INT_SAMPLER_CUBE = 0x8dd4u32;
alias GL_UNSIGNED_INT_VEC2 = 0x8dc6u32;
alias GL_UNSIGNED_INT_VEC3 = 0x8dc7u32;
alias GL_UNSIGNED_INT_VEC4 = 0x8dc8u32;
alias GL_UNSIGNED_NORMALIZED = 0x8c17u32;
alias GL_UNSIGNED_SHORT = 0x1403u32;
alias GL_UNSIGNED_SHORT_1_5_5_5_REV = 0x8366u32;
alias GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033u32;
alias GL_UNSIGNED_SHORT_4_4_4_4_REV = 0x8365u32;
alias GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034u32;
alias GL_UNSIGNED_SHORT_5_6_5 = 0x8363u32;
alias GL_UNSIGNED_SHORT_5_6_5_REV = 0x8364u32;
alias GL_UPPER_LEFT = 0x8ca2u32;
alias GL_V2F = 0x2a20u32;
alias GL_V3F = 0x2a21u32;
alias GL_VALIDATE_STATUS = 0x8b83u32;
alias GL_VENDOR = 0x1f00u32;
alias GL_VERSION = 0x1f02u32;
alias GL_VERTEX_ARRAY = 0x8074u32;
alias GL_VERTEX_ARRAY_BINDING = 0x85b5u32;
alias GL_VERTEX_ARRAY_BUFFER_BINDING = 0x8896u32;
alias GL_VERTEX_ARRAY_POINTER = 0x808eu32;
alias GL_VERTEX_ARRAY_SIZE = 0x807au32;
alias GL_VERTEX_ARRAY_STRIDE = 0x807cu32;
alias GL_VERTEX_ARRAY_TYPE = 0x807bu32;
alias GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889fu32;
alias GL_VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622u32;
alias GL_VERTEX_ATTRIB_ARRAY_INTEGER = 0x88fdu32;
alias GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886au32;
alias GL_VERTEX_ATTRIB_ARRAY_POINTER = 0x8645u32;
alias GL_VERTEX_ATTRIB_ARRAY_SIZE = 0x8623u32;
alias GL_VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624u32;
alias GL_VERTEX_ATTRIB_ARRAY_TYPE = 0x8625u32;
alias GL_VERTEX_PROGRAM_POINT_SIZE = 0x8642u32;
alias GL_VERTEX_PROGRAM_TWO_SIDE = 0x8643u32;
alias GL_VERTEX_SHADER = 0x8b31u32;
alias GL_VIEWPORT = 0xba2u32;
alias GL_VIEWPORT_BIT = 0x800u32;
alias GL_WAIT_FAILED = 0x911du32;
alias GL_WEIGHT_ARRAY_BUFFER_BINDING = 0x889eu32;
alias GL_WRITE_ONLY = 0x88b9u32;
alias GL_XOR = 0x1506u32;
alias GL_ZERO = 0x0u32;
alias GL_ZOOM_X = 0xd16u32;
alias GL_ZOOM_Y = 0xd17u32;

record GLFunctions {
    Accum: GLCodePointer[(GLenum, GLfloat), ()];
    ActiveTexture: GLCodePointer[(GLenum), ()];
    AlphaFunc: GLCodePointer[(GLenum, GLclampf), ()];
    AreTexturesResident: GLCodePointer[(GLsizei, Pointer[GLuint], Pointer[GLboolean]), GLboolean];
    ArrayElement: GLCodePointer[(GLint), ()];
    AttachShader: GLCodePointer[(GLuint, GLuint), ()];
    Begin: GLCodePointer[(GLenum), ()];
    BeginConditionalRender: GLCodePointer[(GLuint, GLenum), ()];
    BeginQuery: GLCodePointer[(GLenum, GLuint), ()];
    BeginQueryIndexed: GLCodePointer[(GLenum, GLuint, GLuint), ()];
    BeginTransformFeedback: GLCodePointer[(GLenum), ()];
    BindAttribLocation: GLCodePointer[(GLuint, GLuint, GLstring), ()];
    BindBuffer: GLCodePointer[(GLenum, GLuint), ()];
    BindBufferBase: GLCodePointer[(GLenum, GLuint, GLuint), ()];
    BindBufferRange: GLCodePointer[(GLenum, GLuint, GLuint, GLintptr, GLsizeiptr), ()];
    BindFragDataLocation: GLCodePointer[(GLuint, GLuint, GLstring), ()];
    BindFragDataLocationIndexed: GLCodePointer[(GLuint, GLuint, GLuint, GLstring), ()];
    BindFramebuffer: GLCodePointer[(GLenum, GLuint), ()];
    BindRenderbuffer: GLCodePointer[(GLenum, GLuint), ()];
    BindSampler: GLCodePointer[(GLenum, GLuint), ()];
    BindTexture: GLCodePointer[(GLenum, GLuint), ()];
    BindTransformFeedback: GLCodePointer[(GLenum, GLuint), ()];
    BindVertexArray: GLCodePointer[(GLuint), ()];
    Bitmap: GLCodePointer[(GLsizei, GLsizei, GLfloat, GLfloat, GLfloat, GLfloat, Pointer[GLubyte]), ()];
    BlendColor: GLCodePointer[(GLclampf, GLclampf, GLclampf, GLclampf), ()];
    BlendEquation: GLCodePointer[(GLenum), ()];
    BlendEquationSeparate: GLCodePointer[(GLenum, GLenum), ()];
    BlendFunc: GLCodePointer[(GLenum, GLenum), ()];
    BlendFuncSeparate: GLCodePointer[(GLenum, GLenum, GLenum, GLenum), ()];
    BlitFramebuffer: GLCodePointer[(GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum), ()];
    BufferData: GLCodePointer[(GLenum, GLsizeiptr, Pointer[GLvoid], GLenum), ()];
    BufferSubData: GLCodePointer[(GLenum, GLintptr, GLsizeiptr, Pointer[GLvoid]), ()];
    CallList: GLCodePointer[(GLuint), ()];
    CallLists: GLCodePointer[(GLsizei, GLenum, Pointer[GLvoid]), ()];
    CheckFramebufferStatus: GLCodePointer[(GLenum), GLenum];
    ClampColor: GLCodePointer[(GLenum, GLenum), ()];
    Clear: GLCodePointer[(GLbitfield), ()];
    ClearAccum: GLCodePointer[(GLfloat, GLfloat, GLfloat, GLfloat), ()];
    ClearBufferfi: GLCodePointer[(GLenum, GLint, GLfloat, GLint), ()];
    ClearBufferfv: GLCodePointer[(GLenum, GLint, Pointer[GLfloat]), ()];
    ClearBufferiv: GLCodePointer[(GLenum, GLint, Pointer[GLint]), ()];
    ClearBufferuiv: GLCodePointer[(GLenum, GLint, Pointer[GLuint]), ()];
    ClearColor: GLCodePointer[(GLclampf, GLclampf, GLclampf, GLclampf), ()];
    ClearColorIiEXT: GLCodePointer[(GLint, GLint, GLint, GLint), ()];
    ClearColorIuiEXT: GLCodePointer[(GLuint, GLuint, GLuint, GLuint), ()];
    ClearDepth: GLCodePointer[(GLclampd), ()];
    ClearIndex: GLCodePointer[(GLfloat), ()];
    ClearStencil: GLCodePointer[(GLint), ()];
    ClientActiveTexture: GLCodePointer[(GLenum), ()];
    ClientWaitSync: GLCodePointer[(GLsync, GLbitfield, GLuint64), GLenum];
    ClipPlane: GLCodePointer[(GLenum, Pointer[GLdouble]), ()];
    Color3b: GLCodePointer[(GLbyte, GLbyte, GLbyte), ()];
    Color3bv: GLCodePointer[(Pointer[GLbyte]), ()];
    Color3d: GLCodePointer[(GLdouble, GLdouble, GLdouble), ()];
    Color3dv: GLCodePointer[(Pointer[GLdouble]), ()];
    Color3f: GLCodePointer[(GLfloat, GLfloat, GLfloat), ()];
    Color3fv: GLCodePointer[(Pointer[GLfloat]), ()];
    Color3i: GLCodePointer[(GLint, GLint, GLint), ()];
    Color3iv: GLCodePointer[(Pointer[GLint]), ()];
    Color3s: GLCodePointer[(GLshort, GLshort, GLshort), ()];
    Color3sv: GLCodePointer[(Pointer[GLshort]), ()];
    Color3ub: GLCodePointer[(GLubyte, GLubyte, GLubyte), ()];
    Color3ubv: GLCodePointer[(Pointer[GLubyte]), ()];
    Color3ui: GLCodePointer[(GLuint, GLuint, GLuint), ()];
    Color3uiv: GLCodePointer[(Pointer[GLuint]), ()];
    Color3us: GLCodePointer[(GLushort, GLushort, GLushort), ()];
    Color3usv: GLCodePointer[(Pointer[GLushort]), ()];
    Color4b: GLCodePointer[(GLbyte, GLbyte, GLbyte, GLbyte), ()];
    Color4bv: GLCodePointer[(Pointer[GLbyte]), ()];
    Color4d: GLCodePointer[(GLdouble, GLdouble, GLdouble, GLdouble), ()];
    Color4dv: GLCodePointer[(Pointer[GLdouble]), ()];
    Color4f: GLCodePointer[(GLfloat, GLfloat, GLfloat, GLfloat), ()];
    Color4fv: GLCodePointer[(Pointer[GLfloat]), ()];
    Color4i: GLCodePointer[(GLint, GLint, GLint, GLint), ()];
    Color4iv: GLCodePointer[(Pointer[GLint]), ()];
    Color4s: GLCodePointer[(GLshort, GLshort, GLshort, GLshort), ()];
    Color4sv: GLCodePointer[(Pointer[GLshort]), ()];
    Color4ub: GLCodePointer[(GLubyte, GLubyte, GLubyte, GLubyte), ()];
    Color4ubv: GLCodePointer[(Pointer[GLubyte]), ()];
    Color4ui: GLCodePointer[(GLuint, GLuint, GLuint, GLuint), ()];
    Color4uiv: GLCodePointer[(Pointer[GLuint]), ()];
    Color4us: GLCodePointer[(GLushort, GLushort, GLushort, GLushort), ()];
    Color4usv: GLCodePointer[(Pointer[GLushort]), ()];
    ColorMask: GLCodePointer[(GLboolean, GLboolean, GLboolean, GLboolean), ()];
    ColorMaski: GLCodePointer[(GLuint, GLboolean, GLboolean, GLboolean, GLboolean), ()];
    ColorMaterial: GLCodePointer[(GLenum, GLenum), ()];
    ColorP3ui: GLCodePointer[(GLenum, GLuint), ()];
    ColorP3uiv: GLCodePointer[(GLenum, Pointer[GLuint]), ()];
    ColorP4ui: GLCodePointer[(GLenum, GLuint), ()];
    ColorP4uiv: GLCodePointer[(GLenum, Pointer[GLuint]), ()];
    ColorPointer: GLCodePointer[(GLint, GLenum, GLsizei, Pointer[GLvoid]), ()];
    CompileShader: GLCodePointer[(GLuint), ()];
    CompressedTexImage1D: GLCodePointer[(GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, Pointer[GLvoid]), ()];
    CompressedTexImage2D: GLCodePointer[(GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, Pointer[GLvoid]), ()];
    CompressedTexImage3D: GLCodePointer[(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, Pointer[GLvoid]), ()];
    CompressedTexSubImage1D: GLCodePointer[(GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, Pointer[GLvoid]), ()];
    CompressedTexSubImage2D: GLCodePointer[(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, Pointer[GLvoid]), ()];
    CompressedTexSubImage3D: GLCodePointer[(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, Pointer[GLvoid]), ()];
    CopyBufferSubData: GLCodePointer[(GLenum, GLenum, GLintptr, GLintptr, GLsizeiptr), ()];
    CopyPixels: GLCodePointer[(GLint, GLint, GLsizei, GLsizei, GLenum), ()];
    CopyTexImage1D: GLCodePointer[(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint), ()];
    CopyTexImage2D: GLCodePointer[(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint), ()];
    CopyTexSubImage1D: GLCodePointer[(GLenum, GLint, GLint, GLint, GLint, GLsizei), ()];
    CopyTexSubImage2D: GLCodePointer[(GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei), ()];
    CopyTexSubImage3D: GLCodePointer[(GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei), ()];
    CreateProgram: GLCodePointer[(), GLuint];
    CreateShader: GLCodePointer[(GLenum), GLuint];
    CullFace: GLCodePointer[(GLenum), ()];
    DeleteBuffers: GLCodePointer[(GLsizei, Pointer[GLuint]), ()];
    DeleteFramebuffers: GLCodePointer[(GLsizei, Pointer[GLuint]), ()];
    DeleteLists: GLCodePointer[(GLuint, GLsizei), ()];
    DeleteProgram: GLCodePointer[(GLuint), ()];
    DeleteQueries: GLCodePointer[(GLsizei, Pointer[GLuint]), ()];
    DeleteRenderbuffers: GLCodePointer[(GLsizei, Pointer[GLuint]), ()];
    DeleteSamplers: GLCodePointer[(GLsizei, Pointer[GLuint]), ()];
    DeleteShader: GLCodePointer[(GLuint), ()];
    DeleteSync: GLCodePointer[(GLsync), ()];
    DeleteTextures: GLCodePointer[(GLsizei, Pointer[GLuint]), ()];
    DeleteTransformFeedbacks: GLCodePointer[(GLsizei, Pointer[GLuint]), ()];
    DeleteVertexArrays: GLCodePointer[(GLsizei, Pointer[GLuint]), ()];
    DepthFunc: GLCodePointer[(GLenum), ()];
    DepthMask: GLCodePointer[(GLboolean), ()];
    DepthRange: GLCodePointer[(GLclampd, GLclampd), ()];
    DetachShader: GLCodePointer[(GLuint, GLuint), ()];
    Disable: GLCodePointer[(GLenum), ()];
    DisableClientState: GLCodePointer[(GLenum), ()];
    DisableVertexAttribArray: GLCodePointer[(GLuint), ()];
    Disablei: GLCodePointer[(GLenum, GLuint), ()];
    DrawArrays: GLCodePointer[(GLenum, GLint, GLsizei), ()];
    DrawArraysInstanced: GLCodePointer[(GLenum, GLint, GLsizei, GLsizei), ()];
    DrawBuffer: GLCodePointer[(GLenum), ()];
    DrawBuffers: GLCodePointer[(GLsizei, Pointer[GLenum]), ()];
    DrawElements: GLCodePointer[(GLenum, GLsizei, GLenum, Pointer[GLvoid]), ()];
    DrawElementsInstanced: GLCodePointer[(GLenum, GLsizei, GLenum, Pointer[GLvoid], GLsizei), ()];
    DrawPixels: GLCodePointer[(GLsizei, GLsizei, GLenum, GLenum, Pointer[GLvoid]), ()];
    DrawRangeElements: GLCodePointer[(GLenum, GLuint, GLuint, GLsizei, GLenum, Pointer[GLvoid]), ()];
    DrawTransformFeedback: GLCodePointer[(GLenum, GLuint), ()];
    DrawTransformFeedbackStream: GLCodePointer[(GLenum, GLuint, GLuint), ()];
    EdgeFlag: GLCodePointer[(GLboolean), ()];
    EdgeFlagPointer: GLCodePointer[(GLsizei, Pointer[GLvoid]), ()];
    EdgeFlagv: GLCodePointer[(Pointer[GLboolean]), ()];
    Enable: GLCodePointer[(GLenum), ()];
    EnableClientState: GLCodePointer[(GLenum), ()];
    EnableVertexAttribArray: GLCodePointer[(GLuint), ()];
    Enablei: GLCodePointer[(GLenum, GLuint), ()];
    End: GLCodePointer[(), ()];
    EndConditionalRender: GLCodePointer[(), ()];
    EndList: GLCodePointer[(), ()];
    EndQuery: GLCodePointer[(GLenum), ()];
    EndQueryIndexed: GLCodePointer[(GLenum, GLuint), ()];
    EndTransformFeedback: GLCodePointer[(), ()];
    EvalCoord1d: GLCodePointer[(GLdouble), ()];
    EvalCoord1dv: GLCodePointer[(Pointer[GLdouble]), ()];
    EvalCoord1f: GLCodePointer[(GLfloat), ()];
    EvalCoord1fv: GLCodePointer[(Pointer[GLfloat]), ()];
    EvalCoord2d: GLCodePointer[(GLdouble, GLdouble), ()];
    EvalCoord2dv: GLCodePointer[(Pointer[GLdouble]), ()];
    EvalCoord2f: GLCodePointer[(GLfloat, GLfloat), ()];
    EvalCoord2fv: GLCodePointer[(Pointer[GLfloat]), ()];
    EvalMesh1: GLCodePointer[(GLenum, GLint, GLint), ()];
    EvalMesh2: GLCodePointer[(GLenum, GLint, GLint, GLint, GLint), ()];
    EvalPoint1: GLCodePointer[(GLint), ()];
    EvalPoint2: GLCodePointer[(GLint, GLint), ()];
    FeedbackBuffer: GLCodePointer[(GLsizei, GLenum, Pointer[GLfloat]), ()];
    FenceSync: GLCodePointer[(GLenum, GLbitfield), GLsync];
    Finish: GLCodePointer[(), ()];
    Flush: GLCodePointer[(), ()];
    FlushMappedBufferRange: GLCodePointer[(GLenum, GLintptr, GLsizeiptr), ()];
    FogCoordPointer: GLCodePointer[(GLenum, GLsizei, Pointer[GLvoid]), ()];
    FogCoordd: GLCodePointer[(GLdouble), ()];
    FogCoorddv: GLCodePointer[(Pointer[GLdouble]), ()];
    FogCoordf: GLCodePointer[(GLfloat), ()];
    FogCoordfv: GLCodePointer[(Pointer[GLfloat]), ()];
    Fogf: GLCodePointer[(GLenum, GLfloat), ()];
    Fogfv: GLCodePointer[(GLenum, Pointer[GLfloat]), ()];
    Fogi: GLCodePointer[(GLenum, GLint), ()];
    Fogiv: GLCodePointer[(GLenum, Pointer[GLint]), ()];
    FramebufferRenderbuffer: GLCodePointer[(GLenum, GLenum, GLenum, GLuint), ()];
    FramebufferTexture: GLCodePointer[(GLenum, GLenum, GLuint, GLint), ()];
    FramebufferTexture1D: GLCodePointer[(GLenum, GLenum, GLenum, GLuint, GLint), ()];
    FramebufferTexture2D: GLCodePointer[(GLenum, GLenum, GLenum, GLuint, GLint), ()];
    FramebufferTexture3D: GLCodePointer[(GLenum, GLenum, GLenum, GLuint, GLint, GLint), ()];
    FramebufferTextureFaceARB: GLCodePointer[(GLenum, GLenum, GLuint, GLint, GLenum), ()];
    FramebufferTextureLayer: GLCodePointer[(GLenum, GLenum, GLuint, GLint, GLint), ()];
    FramebufferTextureLayerARB: GLCodePointer[(GLenum, GLenum, GLuint, GLint, GLint), ()];
    FrontFace: GLCodePointer[(GLenum), ()];
    Frustum: GLCodePointer[(GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble), ()];
    GenBuffers: GLCodePointer[(GLsizei, Pointer[GLuint]), ()];
    GenFramebuffers: GLCodePointer[(GLsizei, Pointer[GLuint]), ()];
    GenLists: GLCodePointer[(GLsizei), GLuint];
    GenQueries: GLCodePointer[(GLsizei, Pointer[GLuint]), ()];
    GenRenderbuffers: GLCodePointer[(GLsizei, Pointer[GLuint]), ()];
    GenSamplers: GLCodePointer[(GLsizei, Pointer[GLuint]), ()];
    GenTextures: GLCodePointer[(GLsizei, Pointer[GLuint]), ()];
    GenTransformFeedbacks: GLCodePointer[(GLsizei, Pointer[GLuint]), ()];
    GenVertexArrays: GLCodePointer[(GLsizei, Pointer[GLuint]), ()];
    GenerateMipmap: GLCodePointer[(GLenum), ()];
    GetActiveAttrib: GLCodePointer[(GLuint, GLuint, GLsizei, Pointer[GLsizei], Pointer[GLint], Pointer[GLenum], GLstring), ()];
    GetActiveSubroutineName: GLCodePointer[(GLuint, GLenum, GLuint, GLsizei, Pointer[GLsizei], GLstring), ()];
    GetActiveSubroutineUniformName: GLCodePointer[(GLuint, GLenum, GLuint, GLsizei, Pointer[GLsizei], GLstring), ()];
    GetActiveSubroutineUniformiv: GLCodePointer[(GLuint, GLenum, GLuint, GLenum, Pointer[GLint]), ()];
    GetActiveUniform: GLCodePointer[(GLuint, GLuint, GLsizei, Pointer[GLsizei], Pointer[GLint], Pointer[GLenum], GLstring), ()];
    GetActiveUniformBlockName: GLCodePointer[(GLuint, GLuint, GLsizei, Pointer[GLsizei], GLstring), ()];
    GetActiveUniformBlockiv: GLCodePointer[(GLuint, GLuint, GLenum, Pointer[GLint]), ()];
    GetActiveUniformName: GLCodePointer[(GLuint, GLuint, GLsizei, Pointer[GLsizei], GLstring), ()];
    GetActiveUniformsiv: GLCodePointer[(GLuint, GLsizei, Pointer[GLuint], GLenum, Pointer[GLint]), ()];
    GetAttachedShaders: GLCodePointer[(GLuint, GLsizei, Pointer[GLsizei], Pointer[GLuint]), ()];
    GetAttribLocation: GLCodePointer[(GLuint, GLstring), GLint];
    GetBooleani_v: GLCodePointer[(GLenum, GLuint, Pointer[GLboolean]), ()];
    GetBooleanv: GLCodePointer[(GLenum, Pointer[GLboolean]), ()];
    GetBufferParameteri64v: GLCodePointer[(GLenum, GLenum, Pointer[GLint64]), ()];
    GetBufferParameteriv: GLCodePointer[(GLenum, GLenum, Pointer[GLint]), ()];
    GetBufferPointerv: GLCodePointer[(GLenum, GLenum, Pointer[Pointer[GLvoid]]), ()];
    GetBufferSubData: GLCodePointer[(GLenum, GLintptr, GLsizeiptr, Pointer[GLvoid]), ()];
    GetClipPlane: GLCodePointer[(GLenum, Pointer[GLdouble]), ()];
    GetCompressedTexImage: GLCodePointer[(GLenum, GLint, Pointer[GLvoid]), ()];
    GetDoublev: GLCodePointer[(GLenum, Pointer[GLdouble]), ()];
    GetError: GLCodePointer[(), GLenum];
    GetFloatv: GLCodePointer[(GLenum, Pointer[GLfloat]), ()];
    GetFragDataIndex: GLCodePointer[(GLuint, GLstring), GLint];
    GetFragDataLocation: GLCodePointer[(GLuint, GLstring), GLint];
    GetFramebufferAttachmentParameteriv: GLCodePointer[(GLenum, GLenum, GLenum, Pointer[GLint]), ()];
    GetInteger64i_v: GLCodePointer[(GLenum, GLuint, Pointer[GLint64]), ()];
    GetInteger64v: GLCodePointer[(GLenum, Pointer[GLint64]), ()];
    GetIntegeri_v: GLCodePointer[(GLenum, GLuint, Pointer[GLint]), ()];
    GetIntegerv: GLCodePointer[(GLenum, Pointer[GLint]), ()];
    GetLightfv: GLCodePointer[(GLenum, GLenum, Pointer[GLfloat]), ()];
    GetLightiv: GLCodePointer[(GLenum, GLenum, Pointer[GLint]), ()];
    GetMapdv: GLCodePointer[(GLenum, GLenum, Pointer[GLdouble]), ()];
    GetMapfv: GLCodePointer[(GLenum, GLenum, Pointer[GLfloat]), ()];
    GetMapiv: GLCodePointer[(GLenum, GLenum, Pointer[GLint]), ()];
    GetMaterialfv: GLCodePointer[(GLenum, GLenum, Pointer[GLfloat]), ()];
    GetMaterialiv: GLCodePointer[(GLenum, GLenum, Pointer[GLint]), ()];
    GetMultisamplefv: GLCodePointer[(GLenum, GLuint, Pointer[GLfloat]), ()];
    GetPixelMapfv: GLCodePointer[(GLenum, Pointer[GLfloat]), ()];
    GetPixelMapuiv: GLCodePointer[(GLenum, Pointer[GLuint]), ()];
    GetPixelMapusv: GLCodePointer[(GLenum, Pointer[GLushort]), ()];
    GetPointerv: GLCodePointer[(GLenum, Pointer[Pointer[GLvoid]]), ()];
    GetPolygonStipple: GLCodePointer[(Pointer[GLubyte]), ()];
    GetProgramInfoLog: GLCodePointer[(GLuint, GLsizei, Pointer[GLsizei], GLstring), ()];
    GetProgramStageiv: GLCodePointer[(GLuint, GLenum, GLenum, Pointer[GLint]), ()];
    GetProgramiv: GLCodePointer[(GLuint, GLenum, Pointer[GLint]), ()];
    GetQueryIndexediv: GLCodePointer[(GLenum, GLuint, GLenum, Pointer[GLint]), ()];
    GetQueryObjecti64v: GLCodePointer[(GLuint, GLenum, Pointer[GLint64]), ()];
    GetQueryObjectiv: GLCodePointer[(GLuint, GLenum, Pointer[GLint]), ()];
    GetQueryObjectui64v: GLCodePointer[(GLuint, GLenum, Pointer[GLuint64]), ()];
    GetQueryObjectuiv: GLCodePointer[(GLuint, GLenum, Pointer[GLuint]), ()];
    GetQueryiv: GLCodePointer[(GLenum, GLenum, Pointer[GLint]), ()];
    GetRenderbufferParameteriv: GLCodePointer[(GLenum, GLenum, Pointer[GLint]), ()];
    GetSamplerParameterIfv: GLCodePointer[(GLuint, GLenum, Pointer[GLfloat]), ()];
    GetSamplerParameterIiv: GLCodePointer[(GLuint, GLenum, Pointer[GLint]), ()];
    GetSamplerParameterfv: GLCodePointer[(GLuint, GLenum, Pointer[GLfloat]), ()];
    GetSamplerParameteriv: GLCodePointer[(GLuint, GLenum, Pointer[GLint]), ()];
    GetShaderInfoLog: GLCodePointer[(GLuint, GLsizei, Pointer[GLsizei], GLstring), ()];
    GetShaderSource: GLCodePointer[(GLint, GLsizei, Pointer[GLsizei], GLstring), ()];
    GetShaderiv: GLCodePointer[(GLuint, GLenum, Pointer[GLint]), ()];
    GetString: GLCodePointer[(GLenum), GLstring];
    GetStringi: GLCodePointer[(GLenum, GLuint), Pointer[GLubyte]];
    GetSubroutineIndex: GLCodePointer[(GLuint, GLenum, GLstring), GLuint];
    GetSubroutineUniformLocation: GLCodePointer[(GLuint, GLenum, GLstring), GLint];
    GetSynciv: GLCodePointer[(GLsync, GLenum, GLsizei, Pointer[GLsizei], Pointer[GLint]), ()];
    GetTexEnvfv: GLCodePointer[(GLenum, GLenum, Pointer[GLfloat]), ()];
    GetTexEnviv: GLCodePointer[(GLenum, GLenum, Pointer[GLint]), ()];
    GetTexGendv: GLCodePointer[(GLenum, GLenum, Pointer[GLdouble]), ()];
    GetTexGenfv: GLCodePointer[(GLenum, GLenum, Pointer[GLfloat]), ()];
    GetTexGeniv: GLCodePointer[(GLenum, GLenum, Pointer[GLint]), ()];
    GetTexImage: GLCodePointer[(GLenum, GLint, GLenum, GLenum, Pointer[GLvoid]), ()];
    GetTexLevelParameterfv: GLCodePointer[(GLenum, GLint, GLenum, Pointer[GLfloat]), ()];
    GetTexLevelParameteriv: GLCodePointer[(GLenum, GLint, GLenum, Pointer[GLint]), ()];
    GetTexParameterIiv: GLCodePointer[(GLenum, GLenum, Pointer[GLint]), ()];
    GetTexParameterIuiv: GLCodePointer[(GLenum, GLenum, Pointer[GLuint]), ()];
    GetTexParameterfv: GLCodePointer[(GLenum, GLenum, Pointer[GLfloat]), ()];
    GetTexParameteriv: GLCodePointer[(GLenum, GLenum, Pointer[GLint]), ()];
    GetTransformFeedbackVarying: GLCodePointer[(GLuint, GLuint, GLsizei, Pointer[GLsizei], Pointer[GLsizei], Pointer[GLenum], GLstring), ()];
    GetUniformBlockIndex: GLCodePointer[(GLuint, GLstring), GLuint];
    GetUniformIndices: GLCodePointer[(GLuint, GLsizei, Pointer[GLstring], Pointer[GLuint]), ()];
    GetUniformLocation: GLCodePointer[(GLint, GLstring), GLint];
    GetUniformSubroutineuiv: GLCodePointer[(GLenum, GLint, Pointer[GLuint]), ()];
    GetUniformdv: GLCodePointer[(GLuint, GLint, Pointer[GLdouble]), ()];
    GetUniformfv: GLCodePointer[(GLuint, GLint, Pointer[GLfloat]), ()];
    GetUniformiv: GLCodePointer[(GLuint, GLint, Pointer[GLint]), ()];
    GetUniformuiv: GLCodePointer[(GLuint, GLint, Pointer[GLuint]), ()];
    GetVertexAttribIiv: GLCodePointer[(GLuint, GLenum, Pointer[GLint]), ()];
    GetVertexAttribIuiv: GLCodePointer[(GLuint, GLenum, Pointer[GLuint]), ()];
    GetVertexAttribPointerv: GLCodePointer[(GLuint, GLenum, Pointer[Pointer[GLvoid]]), ()];
    GetVertexAttribdv: GLCodePointer[(GLuint, GLenum, Pointer[GLdouble]), ()];
    GetVertexAttribfv: GLCodePointer[(GLuint, GLenum, Pointer[GLfloat]), ()];
    GetVertexAttribiv: GLCodePointer[(GLuint, GLenum, Pointer[GLint]), ()];
    Hint: GLCodePointer[(GLenum, GLenum), ()];
    IndexMask: GLCodePointer[(GLuint), ()];
    IndexPointer: GLCodePointer[(GLenum, GLsizei, Pointer[GLvoid]), ()];
    Indexd: GLCodePointer[(GLdouble), ()];
    Indexdv: GLCodePointer[(Pointer[GLdouble]), ()];
    Indexf: GLCodePointer[(GLfloat), ()];
    Indexfv: GLCodePointer[(Pointer[GLfloat]), ()];
    Indexi: GLCodePointer[(GLint), ()];
    Indexiv: GLCodePointer[(Pointer[GLint]), ()];
    Indexs: GLCodePointer[(GLshort), ()];
    Indexsv: GLCodePointer[(Pointer[GLshort]), ()];
    Indexub: GLCodePointer[(GLubyte), ()];
    Indexubv: GLCodePointer[(Pointer[GLubyte]), ()];
    InitNames: GLCodePointer[(), ()];
    InterleavedArrays: GLCodePointer[(GLenum, GLsizei, Pointer[GLvoid]), ()];
    IsBuffer: GLCodePointer[(GLuint), GLboolean];
    IsEnabled: GLCodePointer[(GLenum), GLboolean];
    IsEnabledi: GLCodePointer[(GLenum, GLuint), GLboolean];
    IsFramebuffer: GLCodePointer[(GLuint), GLboolean];
    IsList: GLCodePointer[(GLuint), GLboolean];
    IsProgram: GLCodePointer[(GLuint), GLboolean];
    IsQuery: GLCodePointer[(GLuint), GLboolean];
    IsRenderbuffer: GLCodePointer[(GLuint), GLboolean];
    IsSampler: GLCodePointer[(GLuint), GLboolean];
    IsShader: GLCodePointer[(GLuint), GLboolean];
    IsSync: GLCodePointer[(GLsync), GLboolean];
    IsTexture: GLCodePointer[(GLuint), GLboolean];
    IsTransformFeedback: GLCodePointer[(GLuint), GLboolean];
    IsVertexArray: GLCodePointer[(GLuint), GLboolean];
    LightModelf: GLCodePointer[(GLenum, GLfloat), ()];
    LightModelfv: GLCodePointer[(GLenum, Pointer[GLfloat]), ()];
    LightModeli: GLCodePointer[(GLenum, GLint), ()];
    LightModeliv: GLCodePointer[(GLenum, Pointer[GLint]), ()];
    Lightf: GLCodePointer[(GLenum, GLenum, GLfloat), ()];
    Lightfv: GLCodePointer[(GLenum, GLenum, Pointer[GLfloat]), ()];
    Lighti: GLCodePointer[(GLenum, GLenum, GLint), ()];
    Lightiv: GLCodePointer[(GLenum, GLenum, Pointer[GLint]), ()];
    LineStipple: GLCodePointer[(GLint, GLushort), ()];
    LineWidth: GLCodePointer[(GLfloat), ()];
    LinkProgram: GLCodePointer[(GLuint), ()];
    ListBase: GLCodePointer[(GLuint), ()];
    LoadIdentity: GLCodePointer[(), ()];
    LoadMatrixd: GLCodePointer[(Pointer[GLdouble]), ()];
    LoadMatrixf: GLCodePointer[(Pointer[GLfloat]), ()];
    LoadName: GLCodePointer[(GLuint), ()];
    LoadTransposeMatrixd: GLCodePointer[(GLdouble), ()];
    LoadTransposeMatrixf: GLCodePointer[(GLfloat), ()];
    LogicOp: GLCodePointer[(GLenum), ()];
    Map1d: GLCodePointer[(GLenum, GLdouble, GLdouble, GLint, GLint, Pointer[GLdouble]), ()];
    Map1f: GLCodePointer[(GLenum, GLfloat, GLfloat, GLint, GLint, Pointer[GLfloat]), ()];
    Map2d: GLCodePointer[(GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, Pointer[GLdouble]), ()];
    Map2f: GLCodePointer[(GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, Pointer[GLfloat]), ()];
    MapBuffer: GLCodePointer[(GLenum, GLenum), Pointer[GLvoid]];
    MapBufferRange: GLCodePointer[(GLenum, GLintptr, GLsizeiptr, GLbitfield), Pointer[GLvoid]];
    MapGrid1d: GLCodePointer[(GLint, GLdouble, GLdouble), ()];
    MapGrid1f: GLCodePointer[(GLint, GLfloat, GLfloat), ()];
    MapGrid2d: GLCodePointer[(GLint, GLdouble, GLdouble, GLint, GLdouble, GLdouble), ()];
    MapGrid2f: GLCodePointer[(GLint, GLfloat, GLfloat, GLint, GLfloat, GLfloat), ()];
    Materialf: GLCodePointer[(GLenum, GLenum, GLfloat), ()];
    Materialfv: GLCodePointer[(GLenum, GLenum, Pointer[GLfloat]), ()];
    Materiali: GLCodePointer[(GLenum, GLenum, GLint), ()];
    Materialiv: GLCodePointer[(GLenum, GLenum, Pointer[GLint]), ()];
    MatrixMode: GLCodePointer[(GLenum), ()];
    MultMatrixd: GLCodePointer[(Pointer[GLdouble]), ()];
    MultMatrixf: GLCodePointer[(Pointer[GLfloat]), ()];
    MultTransposeMatrixd: GLCodePointer[(GLdouble), ()];
    MultTransposeMatrixf: GLCodePointer[(GLfloat), ()];
    MultiDrawArrays: GLCodePointer[(GLenum, Pointer[GLint], Pointer[GLsizei], GLsizei), ()];
    MultiDrawElements: GLCodePointer[(GLenum, Pointer[GLsizei], GLenum, Pointer[Pointer[GLvoid]], GLsizei), ()];
    MultiTexCoord1d: GLCodePointer[(GLenum, GLdouble), ()];
    MultiTexCoord1dv: GLCodePointer[(GLenum, Pointer[GLdouble]), ()];
    MultiTexCoord1f: GLCodePointer[(GLenum, GLfloat), ()];
    MultiTexCoord1fv: GLCodePointer[(GLenum, Pointer[GLfloat]), ()];
    MultiTexCoord1i: GLCodePointer[(GLenum, GLint), ()];
    MultiTexCoord1iv: GLCodePointer[(GLenum, Pointer[GLint]), ()];
    MultiTexCoord1s: GLCodePointer[(GLenum, GLshort), ()];
    MultiTexCoord1sv: GLCodePointer[(GLenum, Pointer[GLshort]), ()];
    MultiTexCoord2d: GLCodePointer[(GLenum, GLdouble, GLdouble), ()];
    MultiTexCoord2dv: GLCodePointer[(GLenum, Pointer[GLdouble]), ()];
    MultiTexCoord2f: GLCodePointer[(GLenum, GLfloat, GLfloat), ()];
    MultiTexCoord2fv: GLCodePointer[(GLenum, Pointer[GLfloat]), ()];
    MultiTexCoord2i: GLCodePointer[(GLenum, GLint, GLint), ()];
    MultiTexCoord2iv: GLCodePointer[(GLenum, Pointer[GLint]), ()];
    MultiTexCoord2s: GLCodePointer[(GLenum, GLshort, GLshort), ()];
    MultiTexCoord2sv: GLCodePointer[(GLenum, Pointer[GLshort]), ()];
    MultiTexCoord3d: GLCodePointer[(GLenum, GLdouble, GLdouble, GLdouble), ()];
    MultiTexCoord3dv: GLCodePointer[(GLenum, Pointer[GLdouble]), ()];
    MultiTexCoord3f: GLCodePointer[(GLenum, GLfloat, GLfloat, GLfloat), ()];
    MultiTexCoord3fv: GLCodePointer[(GLenum, Pointer[GLfloat]), ()];
    MultiTexCoord3i: GLCodePointer[(GLenum, GLint, GLint, GLint), ()];
    MultiTexCoord3iv: GLCodePointer[(GLenum, Pointer[GLint]), ()];
    MultiTexCoord3s: GLCodePointer[(GLenum, GLshort, GLshort, GLshort), ()];
    MultiTexCoord3sv: GLCodePointer[(GLenum, Pointer[GLshort]), ()];
    MultiTexCoord4d: GLCodePointer[(GLenum, GLdouble, GLdouble, GLdouble, GLdouble), ()];
    MultiTexCoord4dv: GLCodePointer[(GLenum, Pointer[GLdouble]), ()];
    MultiTexCoord4f: GLCodePointer[(GLenum, GLfloat, GLfloat, GLfloat, GLfloat), ()];
    MultiTexCoord4fv: GLCodePointer[(GLenum, Pointer[GLfloat]), ()];
    MultiTexCoord4i: GLCodePointer[(GLenum, GLint, GLint, GLint, GLint), ()];
    MultiTexCoord4iv: GLCodePointer[(GLenum, Pointer[GLint]), ()];
    MultiTexCoord4s: GLCodePointer[(GLenum, GLshort, GLshort, GLshort, GLshort), ()];
    MultiTexCoord4sv: GLCodePointer[(GLenum, Pointer[GLshort]), ()];
    MultiTexCoordP1ui: GLCodePointer[(GLenum, GLenum, GLuint), ()];
    MultiTexCoordP1uiv: GLCodePointer[(GLenum, GLenum, Pointer[GLuint]), ()];
    MultiTexCoordP2ui: GLCodePointer[(GLenum, GLenum, GLuint), ()];
    MultiTexCoordP2uiv: GLCodePointer[(GLenum, GLenum, Pointer[GLuint]), ()];
    MultiTexCoordP3ui: GLCodePointer[(GLenum, GLenum, GLuint), ()];
    MultiTexCoordP3uiv: GLCodePointer[(GLenum, GLenum, Pointer[GLuint]), ()];
    MultiTexCoordP4ui: GLCodePointer[(GLenum, GLenum, GLuint), ()];
    MultiTexCoordP4uiv: GLCodePointer[(GLenum, GLenum, Pointer[GLuint]), ()];
    NewList: GLCodePointer[(GLuint, GLenum), ()];
    Normal3b: GLCodePointer[(GLbyte, GLbyte, GLbyte), ()];
    Normal3bv: GLCodePointer[(Pointer[GLbyte]), ()];
    Normal3d: GLCodePointer[(GLdouble, GLdouble, GLdouble), ()];
    Normal3dv: GLCodePointer[(Pointer[GLdouble]), ()];
    Normal3f: GLCodePointer[(GLfloat, GLfloat, GLfloat), ()];
    Normal3fv: GLCodePointer[(Pointer[GLfloat]), ()];
    Normal3i: GLCodePointer[(GLint, GLint, GLint), ()];
    Normal3iv: GLCodePointer[(Pointer[GLint]), ()];
    Normal3s: GLCodePointer[(GLshort, GLshort, GLshort), ()];
    Normal3sv: GLCodePointer[(Pointer[GLshort]), ()];
    NormalP3ui: GLCodePointer[(GLenum, GLuint), ()];
    NormalP3uiv: GLCodePointer[(GLenum, Pointer[GLuint]), ()];
    NormalPointer: GLCodePointer[(GLenum, GLsizei, Pointer[GLvoid]), ()];
    Ortho: GLCodePointer[(GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble), ()];
    PassThrough: GLCodePointer[(GLfloat), ()];
    PatchParameterfv: GLCodePointer[(GLenum, Pointer[GLfloat]), ()];
    PatchParameteri: GLCodePointer[(GLenum, GLint), ()];
    PauseTransformFeedback: GLCodePointer[(), ()];
    PixelMapfv: GLCodePointer[(GLenum, GLsizei, Pointer[GLfloat]), ()];
    PixelMapuiv: GLCodePointer[(GLenum, GLsizei, Pointer[GLuint]), ()];
    PixelMapusv: GLCodePointer[(GLenum, GLsizei, Pointer[GLushort]), ()];
    PixelStoref: GLCodePointer[(GLenum, GLfloat), ()];
    PixelStorei: GLCodePointer[(GLenum, GLint), ()];
    PixelTransferf: GLCodePointer[(GLenum, GLfloat), ()];
    PixelTransferi: GLCodePointer[(GLenum, GLint), ()];
    PixelZoom: GLCodePointer[(GLfloat, GLfloat), ()];
    PointParameterf: GLCodePointer[(GLenum, GLfloat), ()];
    PointParameterfv: GLCodePointer[(GLenum, Pointer[GLfloat]), ()];
    PointParameteri: GLCodePointer[(GLenum, GLint), ()];
    PointParameteriv: GLCodePointer[(GLenum, Pointer[GLint]), ()];
    PointSize: GLCodePointer[(GLfloat), ()];
    PolygonMode: GLCodePointer[(GLenum, GLenum), ()];
    PolygonOffset: GLCodePointer[(GLfloat, GLfloat), ()];
    PolygonStipple: GLCodePointer[(Pointer[GLubyte]), ()];
    PopAttrib: GLCodePointer[(), ()];
    PopClientAttrib: GLCodePointer[(), ()];
    PopMatrix: GLCodePointer[(), ()];
    PopName: GLCodePointer[(), ()];
    PrimitiveRestartIndex: GLCodePointer[(GLuint), ()];
    PrioritizeTextures: GLCodePointer[(GLsizei, Pointer[GLuint], Pointer[GLclampf]), ()];
    ProgramParameteriARB: GLCodePointer[(GLuint, GLenum, GLint), ()];
    ProgramUniform1d: GLCodePointer[(GLuint, GLint, GLdouble), ()];
    ProgramUniform1dv: GLCodePointer[(GLuint, GLint, GLsizei, Pointer[GLdouble]), ()];
    ProgramUniform2d: GLCodePointer[(GLuint, GLint, GLdouble, GLdouble), ()];
    ProgramUniform2dv: GLCodePointer[(GLuint, GLint, GLsizei, Pointer[GLdouble]), ()];
    ProgramUniform3d: GLCodePointer[(GLuint, GLint, GLdouble, GLdouble, GLdouble), ()];
    ProgramUniform3dv: GLCodePointer[(GLuint, GLint, GLsizei, Pointer[GLdouble]), ()];
    ProgramUniform4d: GLCodePointer[(GLuint, GLint, GLdouble, GLdouble, GLdouble, GLdouble), ()];
    ProgramUniform4dv: GLCodePointer[(GLuint, GLint, GLsizei, Pointer[GLdouble]), ()];
    ProgramUniformMatrix2dv: GLCodePointer[(GLuint, GLint, GLsizei, GLboolean, Pointer[GLdouble]), ()];
    ProgramUniformMatrix2x3dv: GLCodePointer[(GLuint, GLint, GLsizei, GLboolean, Pointer[GLdouble]), ()];
    ProgramUniformMatrix2x4dv: GLCodePointer[(GLuint, GLint, GLsizei, GLboolean, Pointer[GLdouble]), ()];
    ProgramUniformMatrix3dv: GLCodePointer[(GLuint, GLint, GLsizei, GLboolean, Pointer[GLdouble]), ()];
    ProgramUniformMatrix3x2dv: GLCodePointer[(GLuint, GLint, GLsizei, GLboolean, Pointer[GLdouble]), ()];
    ProgramUniformMatrix3x4dv: GLCodePointer[(GLuint, GLint, GLsizei, GLboolean, Pointer[GLdouble]), ()];
    ProgramUniformMatrix4dv: GLCodePointer[(GLuint, GLint, GLsizei, GLboolean, Pointer[GLdouble]), ()];
    ProgramUniformMatrix4x2dv: GLCodePointer[(GLuint, GLint, GLsizei, GLboolean, Pointer[GLdouble]), ()];
    ProgramUniformMatrix4x3dv: GLCodePointer[(GLuint, GLint, GLsizei, GLboolean, Pointer[GLdouble]), ()];
    ProvokingVertex: GLCodePointer[(GLenum), ()];
    PushAttrib: GLCodePointer[(GLbitfield), ()];
    PushClientAttrib: GLCodePointer[(GLbitfield), ()];
    PushMatrix: GLCodePointer[(), ()];
    PushName: GLCodePointer[(GLuint), ()];
    QueryCounter: GLCodePointer[(GLuint, GLenum), ()];
    RasterPos2d: GLCodePointer[(GLdouble, GLdouble), ()];
    RasterPos2dv: GLCodePointer[(Pointer[GLdouble]), ()];
    RasterPos2f: GLCodePointer[(GLfloat, GLfloat), ()];
    RasterPos2fv: GLCodePointer[(Pointer[GLfloat]), ()];
    RasterPos2i: GLCodePointer[(GLint, GLint), ()];
    RasterPos2iv: GLCodePointer[(Pointer[GLint]), ()];
    RasterPos2s: GLCodePointer[(GLshort, GLshort), ()];
    RasterPos2sv: GLCodePointer[(Pointer[GLshort]), ()];
    RasterPos3d: GLCodePointer[(GLdouble, GLdouble, GLdouble), ()];
    RasterPos3dv: GLCodePointer[(Pointer[GLdouble]), ()];
    RasterPos3f: GLCodePointer[(GLfloat, GLfloat, GLfloat), ()];
    RasterPos3fv: GLCodePointer[(Pointer[GLfloat]), ()];
    RasterPos3i: GLCodePointer[(GLint, GLint, GLint), ()];
    RasterPos3iv: GLCodePointer[(Pointer[GLint]), ()];
    RasterPos3s: GLCodePointer[(GLshort, GLshort, GLshort), ()];
    RasterPos3sv: GLCodePointer[(Pointer[GLshort]), ()];
    RasterPos4d: GLCodePointer[(GLdouble, GLdouble, GLdouble, GLdouble), ()];
    RasterPos4dv: GLCodePointer[(Pointer[GLdouble]), ()];
    RasterPos4f: GLCodePointer[(GLfloat, GLfloat, GLfloat, GLfloat), ()];
    RasterPos4fv: GLCodePointer[(Pointer[GLfloat]), ()];
    RasterPos4i: GLCodePointer[(GLint, GLint, GLint, GLint), ()];
    RasterPos4iv: GLCodePointer[(Pointer[GLint]), ()];
    RasterPos4s: GLCodePointer[(GLshort, GLshort, GLshort, GLshort), ()];
    RasterPos4sv: GLCodePointer[(Pointer[GLshort]), ()];
    ReadBuffer: GLCodePointer[(GLenum), ()];
    ReadPixels: GLCodePointer[(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, Pointer[GLvoid]), ()];
    Rectd: GLCodePointer[(GLdouble, GLdouble, GLdouble, GLdouble), ()];
    Rectdv: GLCodePointer[(Pointer[GLdouble], Pointer[GLdouble]), ()];
    Rectf: GLCodePointer[(GLfloat, GLfloat, GLfloat, GLfloat), ()];
    Rectfv: GLCodePointer[(Pointer[GLfloat], Pointer[GLfloat]), ()];
    Recti: GLCodePointer[(GLint, GLint, GLint, GLint), ()];
    Rectiv: GLCodePointer[(Pointer[GLint], Pointer[GLint]), ()];
    Rects: GLCodePointer[(GLshort, GLshort, GLshort, GLshort), ()];
    Rectsv: GLCodePointer[(Pointer[GLshort], Pointer[GLshort]), ()];
    RenderMode: GLCodePointer[(GLenum), GLint];
    RenderbufferStorage: GLCodePointer[(GLenum, GLenum, GLsizei, GLsizei), ()];
    RenderbufferStorageMultisample: GLCodePointer[(GLenum, GLsizei, GLenum, GLsizei, GLsizei), ()];
    ResumeTransformFeedback: GLCodePointer[(), ()];
    Rotated: GLCodePointer[(GLdouble, GLdouble, GLdouble, GLdouble), ()];
    Rotatef: GLCodePointer[(GLfloat, GLfloat, GLfloat, GLfloat), ()];
    SampleCoverage: GLCodePointer[(GLclampf, GLboolean), ()];
    SampleMaski: GLCodePointer[(GLuint, GLbitfield), ()];
    SamplerParameterIiv: GLCodePointer[(GLuint, GLenum, Pointer[GLint]), ()];
    SamplerParameterIuiv: GLCodePointer[(GLuint, GLenum, Pointer[GLuint]), ()];
    SamplerParameterf: GLCodePointer[(GLuint, GLenum, GLfloat), ()];
    SamplerParameterfv: GLCodePointer[(GLuint, GLenum, Pointer[GLfloat]), ()];
    SamplerParameteri: GLCodePointer[(GLuint, GLenum, GLint), ()];
    SamplerParameteriv: GLCodePointer[(GLuint, GLenum, Pointer[GLint]), ()];
    Scaled: GLCodePointer[(GLdouble, GLdouble, GLdouble), ()];
    Scalef: GLCodePointer[(GLfloat, GLfloat, GLfloat), ()];
    Scissor: GLCodePointer[(GLint, GLint, GLsizei, GLsizei), ()];
    SecondaryColor3b: GLCodePointer[(GLbyte, GLbyte, GLbyte), ()];
    SecondaryColor3bv: GLCodePointer[(Pointer[GLbyte]), ()];
    SecondaryColor3d: GLCodePointer[(GLdouble, GLdouble, GLdouble), ()];
    SecondaryColor3dv: GLCodePointer[(Pointer[GLdouble]), ()];
    SecondaryColor3f: GLCodePointer[(GLfloat, GLfloat, GLfloat), ()];
    SecondaryColor3fv: GLCodePointer[(Pointer[GLfloat]), ()];
    SecondaryColor3i: GLCodePointer[(GLint, GLint, GLint), ()];
    SecondaryColor3iv: GLCodePointer[(Pointer[GLint]), ()];
    SecondaryColor3s: GLCodePointer[(GLshort, GLshort, GLshort), ()];
    SecondaryColor3sv: GLCodePointer[(Pointer[GLshort]), ()];
    SecondaryColor3ub: GLCodePointer[(GLubyte, GLubyte, GLubyte), ()];
    SecondaryColor3ubv: GLCodePointer[(Pointer[GLubyte]), ()];
    SecondaryColor3ui: GLCodePointer[(GLuint, GLuint, GLuint), ()];
    SecondaryColor3uiv: GLCodePointer[(Pointer[GLuint]), ()];
    SecondaryColor3us: GLCodePointer[(GLushort, GLushort, GLushort), ()];
    SecondaryColor3usv: GLCodePointer[(Pointer[GLushort]), ()];
    SecondaryColorP3ui: GLCodePointer[(GLenum, GLuint), ()];
    SecondaryColorP3uiv: GLCodePointer[(GLenum, Pointer[GLuint]), ()];
    SecondaryColorPointer: GLCodePointer[(GLint, GLenum, GLsizei, Pointer[GLvoid]), ()];
    SelectBuffer: GLCodePointer[(GLsizei, Pointer[GLuint]), ()];
    ShadeModel: GLCodePointer[(GLenum), ()];
    ShaderSource: GLCodePointer[(GLuint, GLsizei, Pointer[GLstring], Pointer[GLint]), ()];
    StencilFunc: GLCodePointer[(GLenum, GLint, GLuint), ()];
    StencilFuncSeparate: GLCodePointer[(GLenum, GLenum, GLint, GLuint), ()];
    StencilMask: GLCodePointer[(GLuint), ()];
    StencilMaskSeparate: GLCodePointer[(GLenum, GLuint), ()];
    StencilOp: GLCodePointer[(GLenum, GLenum, GLenum), ()];
    StencilOpSeparate: GLCodePointer[(GLenum, GLenum, GLenum, GLenum), ()];
    TexBuffer: GLCodePointer[(GLenum, GLenum, GLuint), ()];
    TexCoord1d: GLCodePointer[(GLdouble), ()];
    TexCoord1dv: GLCodePointer[(Pointer[GLdouble]), ()];
    TexCoord1f: GLCodePointer[(GLfloat), ()];
    TexCoord1fv: GLCodePointer[(Pointer[GLfloat]), ()];
    TexCoord1i: GLCodePointer[(GLint), ()];
    TexCoord1iv: GLCodePointer[(Pointer[GLint]), ()];
    TexCoord1s: GLCodePointer[(GLshort), ()];
    TexCoord1sv: GLCodePointer[(Pointer[GLshort]), ()];
    TexCoord2d: GLCodePointer[(GLdouble, GLdouble), ()];
    TexCoord2dv: GLCodePointer[(Pointer[GLdouble]), ()];
    TexCoord2f: GLCodePointer[(GLfloat, GLfloat), ()];
    TexCoord2fv: GLCodePointer[(Pointer[GLfloat]), ()];
    TexCoord2i: GLCodePointer[(GLint, GLint), ()];
    TexCoord2iv: GLCodePointer[(Pointer[GLint]), ()];
    TexCoord2s: GLCodePointer[(GLshort, GLshort), ()];
    TexCoord2sv: GLCodePointer[(Pointer[GLshort]), ()];
    TexCoord3d: GLCodePointer[(GLdouble, GLdouble, GLdouble), ()];
    TexCoord3dv: GLCodePointer[(Pointer[GLdouble]), ()];
    TexCoord3f: GLCodePointer[(GLfloat, GLfloat, GLfloat), ()];
    TexCoord3fv: GLCodePointer[(Pointer[GLfloat]), ()];
    TexCoord3i: GLCodePointer[(GLint, GLint, GLint), ()];
    TexCoord3iv: GLCodePointer[(Pointer[GLint]), ()];
    TexCoord3s: GLCodePointer[(GLshort, GLshort, GLshort), ()];
    TexCoord3sv: GLCodePointer[(Pointer[GLshort]), ()];
    TexCoord4d: GLCodePointer[(GLdouble, GLdouble, GLdouble, GLdouble), ()];
    TexCoord4dv: GLCodePointer[(Pointer[GLdouble]), ()];
    TexCoord4f: GLCodePointer[(GLfloat, GLfloat, GLfloat, GLfloat), ()];
    TexCoord4fv: GLCodePointer[(Pointer[GLfloat]), ()];
    TexCoord4i: GLCodePointer[(GLint, GLint, GLint, GLint), ()];
    TexCoord4iv: GLCodePointer[(Pointer[GLint]), ()];
    TexCoord4s: GLCodePointer[(GLshort, GLshort, GLshort, GLshort), ()];
    TexCoord4sv: GLCodePointer[(Pointer[GLshort]), ()];
    TexCoordP1ui: GLCodePointer[(GLenum, GLuint), ()];
    TexCoordP1uiv: GLCodePointer[(GLenum, Pointer[GLuint]), ()];
    TexCoordP2ui: GLCodePointer[(GLenum, GLuint), ()];
    TexCoordP2uiv: GLCodePointer[(GLenum, Pointer[GLuint]), ()];
    TexCoordP3ui: GLCodePointer[(GLenum, GLuint), ()];
    TexCoordP3uiv: GLCodePointer[(GLenum, Pointer[GLuint]), ()];
    TexCoordP4ui: GLCodePointer[(GLenum, GLuint), ()];
    TexCoordP4uiv: GLCodePointer[(GLenum, Pointer[GLuint]), ()];
    TexCoordPointer: GLCodePointer[(GLint, GLenum, GLsizei, Pointer[GLvoid]), ()];
    TexEnvf: GLCodePointer[(GLenum, GLenum, GLfloat), ()];
    TexEnvfv: GLCodePointer[(GLenum, GLenum, Pointer[GLfloat]), ()];
    TexEnvi: GLCodePointer[(GLenum, GLenum, GLint), ()];
    TexEnviv: GLCodePointer[(GLenum, GLenum, Pointer[GLint]), ()];
    TexGend: GLCodePointer[(GLenum, GLenum, GLdouble), ()];
    TexGendv: GLCodePointer[(GLenum, GLenum, Pointer[GLdouble]), ()];
    TexGenf: GLCodePointer[(GLenum, GLenum, GLfloat), ()];
    TexGenfv: GLCodePointer[(GLenum, GLenum, Pointer[GLfloat]), ()];
    TexGeni: GLCodePointer[(GLenum, GLenum, GLint), ()];
    TexGeniv: GLCodePointer[(GLenum, GLenum, Pointer[GLint]), ()];
    TexImage1D: GLCodePointer[(GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, Pointer[GLvoid]), ()];
    TexImage2D: GLCodePointer[(GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, Pointer[GLvoid]), ()];
    TexImage2DMultisample: GLCodePointer[(GLenum, GLsizei, GLint, GLsizei, GLsizei, GLboolean), ()];
    TexImage3D: GLCodePointer[(GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, Pointer[GLvoid]), ()];
    TexImage3DMultisample: GLCodePointer[(GLenum, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean), ()];
    TexParameterIiv: GLCodePointer[(GLenum, GLenum, Pointer[GLint]), ()];
    TexParameterIuiv: GLCodePointer[(GLenum, GLenum, Pointer[GLuint]), ()];
    TexParameterf: GLCodePointer[(GLenum, GLenum, GLfloat), ()];
    TexParameterfv: GLCodePointer[(GLenum, GLenum, Pointer[GLfloat]), ()];
    TexParameteri: GLCodePointer[(GLenum, GLenum, GLint), ()];
    TexParameteriv: GLCodePointer[(GLenum, GLenum, Pointer[GLint]), ()];
    TexSubImage1D: GLCodePointer[(GLenum, GLint, GLint, GLsizei, GLenum, GLenum, Pointer[GLvoid]), ()];
    TexSubImage2D: GLCodePointer[(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, Pointer[GLvoid]), ()];
    TexSubImage3D: GLCodePointer[(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, Pointer[GLvoid]), ()];
    TransformFeedbackVaryings: GLCodePointer[(GLuint, GLsizei, Pointer[GLstring], GLenum), ()];
    Translated: GLCodePointer[(GLdouble, GLdouble, GLdouble), ()];
    Translatef: GLCodePointer[(GLfloat, GLfloat, GLfloat), ()];
    Uniform1d: GLCodePointer[(GLint, GLdouble), ()];
    Uniform1dv: GLCodePointer[(GLint, GLsizei, Pointer[GLdouble]), ()];
    Uniform1f: GLCodePointer[(GLint, GLfloat), ()];
    Uniform1fv: GLCodePointer[(GLint, GLsizei, Pointer[GLfloat]), ()];
    Uniform1i: GLCodePointer[(GLint, GLint), ()];
    Uniform1iv: GLCodePointer[(GLint, GLsizei, Pointer[GLint]), ()];
    Uniform1ui: GLCodePointer[(GLint, GLuint), ()];
    Uniform1uiv: GLCodePointer[(GLint, GLsizei, Pointer[GLuint]), ()];
    Uniform2d: GLCodePointer[(GLint, GLdouble, GLdouble), ()];
    Uniform2dv: GLCodePointer[(GLint, GLsizei, Pointer[GLdouble]), ()];
    Uniform2f: GLCodePointer[(GLint, GLfloat, GLfloat), ()];
    Uniform2fv: GLCodePointer[(GLint, GLsizei, Pointer[GLfloat]), ()];
    Uniform2i: GLCodePointer[(GLint, GLint, GLint), ()];
    Uniform2iv: GLCodePointer[(GLint, GLsizei, Pointer[GLint]), ()];
    Uniform2ui: GLCodePointer[(GLint, GLuint, GLuint), ()];
    Uniform2uiv: GLCodePointer[(GLint, GLsizei, Pointer[GLuint]), ()];
    Uniform3d: GLCodePointer[(GLint, GLdouble, GLdouble, GLdouble), ()];
    Uniform3dv: GLCodePointer[(GLint, GLsizei, Pointer[GLdouble]), ()];
    Uniform3f: GLCodePointer[(GLint, GLfloat, GLfloat, GLfloat), ()];
    Uniform3fv: GLCodePointer[(GLint, GLsizei, Pointer[GLfloat]), ()];
    Uniform3i: GLCodePointer[(GLint, GLint, GLint, GLint), ()];
    Uniform3iv: GLCodePointer[(GLint, GLsizei, Pointer[GLint]), ()];
    Uniform3ui: GLCodePointer[(GLint, GLuint, GLuint, GLuint), ()];
    Uniform3uiv: GLCodePointer[(GLint, GLsizei, Pointer[GLuint]), ()];
    Uniform4d: GLCodePointer[(GLint, GLdouble, GLdouble, GLdouble, GLdouble), ()];
    Uniform4dv: GLCodePointer[(GLint, GLsizei, Pointer[GLdouble]), ()];
    Uniform4f: GLCodePointer[(GLint, GLfloat, GLfloat, GLfloat, GLfloat), ()];
    Uniform4fv: GLCodePointer[(GLint, GLsizei, Pointer[GLfloat]), ()];
    Uniform4i: GLCodePointer[(GLint, GLint, GLint, GLint, GLint), ()];
    Uniform4iv: GLCodePointer[(GLint, GLsizei, Pointer[GLint]), ()];
    Uniform4ui: GLCodePointer[(GLint, GLuint, GLuint, GLuint, GLuint), ()];
    Uniform4uiv: GLCodePointer[(GLint, GLsizei, Pointer[GLuint]), ()];
    UniformBlockBinding: GLCodePointer[(GLuint, GLuint, GLuint), ()];
    UniformMatrix2dv: GLCodePointer[(GLint, GLsizei, GLboolean, Pointer[GLdouble]), ()];
    UniformMatrix2fv: GLCodePointer[(GLint, GLsizei, GLboolean, Pointer[GLfloat]), ()];
    UniformMatrix2x3dv: GLCodePointer[(GLint, GLsizei, GLboolean, Pointer[GLdouble]), ()];
    UniformMatrix2x3fv: GLCodePointer[(GLint, GLsizei, GLboolean, Pointer[GLfloat]), ()];
    UniformMatrix2x4dv: GLCodePointer[(GLint, GLsizei, GLboolean, Pointer[GLdouble]), ()];
    UniformMatrix2x4fv: GLCodePointer[(GLint, GLsizei, GLboolean, Pointer[GLfloat]), ()];
    UniformMatrix3dv: GLCodePointer[(GLint, GLsizei, GLboolean, Pointer[GLdouble]), ()];
    UniformMatrix3fv: GLCodePointer[(GLint, GLsizei, GLboolean, Pointer[GLfloat]), ()];
    UniformMatrix3x2dv: GLCodePointer[(GLint, GLsizei, GLboolean, Pointer[GLdouble]), ()];
    UniformMatrix3x2fv: GLCodePointer[(GLint, GLsizei, GLboolean, Pointer[GLfloat]), ()];
    UniformMatrix3x4dv: GLCodePointer[(GLint, GLsizei, GLboolean, Pointer[GLdouble]), ()];
    UniformMatrix3x4fv: GLCodePointer[(GLint, GLsizei, GLboolean, Pointer[GLfloat]), ()];
    UniformMatrix4dv: GLCodePointer[(GLint, GLsizei, GLboolean, Pointer[GLdouble]), ()];
    UniformMatrix4fv: GLCodePointer[(GLint, GLsizei, GLboolean, Pointer[GLfloat]), ()];
    UniformMatrix4x2dv: GLCodePointer[(GLint, GLsizei, GLboolean, Pointer[GLdouble]), ()];
    UniformMatrix4x2fv: GLCodePointer[(GLint, GLsizei, GLboolean, Pointer[GLfloat]), ()];
    UniformMatrix4x3dv: GLCodePointer[(GLint, GLsizei, GLboolean, Pointer[GLdouble]), ()];
    UniformMatrix4x3fv: GLCodePointer[(GLint, GLsizei, GLboolean, Pointer[GLfloat]), ()];
    UniformSubroutinesuiv: GLCodePointer[(GLenum, GLsizei, Pointer[GLuint]), ()];
    UnmapBuffer: GLCodePointer[(GLenum), GLboolean];
    UseProgram: GLCodePointer[(GLuint), ()];
    ValidateProgram: GLCodePointer[(GLuint), ()];
    Vertex2d: GLCodePointer[(GLdouble, GLdouble), ()];
    Vertex2dv: GLCodePointer[(Pointer[GLdouble]), ()];
    Vertex2f: GLCodePointer[(GLfloat, GLfloat), ()];
    Vertex2fv: GLCodePointer[(Pointer[GLfloat]), ()];
    Vertex2i: GLCodePointer[(GLint, GLint), ()];
    Vertex2iv: GLCodePointer[(Pointer[GLint]), ()];
    Vertex2s: GLCodePointer[(GLshort, GLshort), ()];
    Vertex2sv: GLCodePointer[(Pointer[GLshort]), ()];
    Vertex3d: GLCodePointer[(GLdouble, GLdouble, GLdouble), ()];
    Vertex3dv: GLCodePointer[(Pointer[GLdouble]), ()];
    Vertex3f: GLCodePointer[(GLfloat, GLfloat, GLfloat), ()];
    Vertex3fv: GLCodePointer[(Pointer[GLfloat]), ()];
    Vertex3i: GLCodePointer[(GLint, GLint, GLint), ()];
    Vertex3iv: GLCodePointer[(Pointer[GLint]), ()];
    Vertex3s: GLCodePointer[(GLshort, GLshort, GLshort), ()];
    Vertex3sv: GLCodePointer[(Pointer[GLshort]), ()];
    Vertex4d: GLCodePointer[(GLdouble, GLdouble, GLdouble, GLdouble), ()];
    Vertex4dv: GLCodePointer[(Pointer[GLdouble]), ()];
    Vertex4f: GLCodePointer[(GLfloat, GLfloat, GLfloat, GLfloat), ()];
    Vertex4fv: GLCodePointer[(Pointer[GLfloat]), ()];
    Vertex4i: GLCodePointer[(GLint, GLint, GLint, GLint), ()];
    Vertex4iv: GLCodePointer[(Pointer[GLint]), ()];
    Vertex4s: GLCodePointer[(GLshort, GLshort, GLshort, GLshort), ()];
    Vertex4sv: GLCodePointer[(Pointer[GLshort]), ()];
    VertexAttrib1d: GLCodePointer[(GLuint, GLdouble), ()];
    VertexAttrib1dv: GLCodePointer[(GLuint, Pointer[GLdouble]), ()];
    VertexAttrib1f: GLCodePointer[(GLuint, GLfloat), ()];
    VertexAttrib1fv: GLCodePointer[(GLuint, Pointer[GLfloat]), ()];
    VertexAttrib1s: GLCodePointer[(GLuint, GLshort), ()];
    VertexAttrib1sv: GLCodePointer[(GLuint, Pointer[GLshort]), ()];
    VertexAttrib2d: GLCodePointer[(GLuint, GLdouble, GLdouble), ()];
    VertexAttrib2dv: GLCodePointer[(GLuint, Pointer[GLdouble]), ()];
    VertexAttrib2f: GLCodePointer[(GLuint, GLfloat, GLfloat), ()];
    VertexAttrib2fv: GLCodePointer[(GLuint, Pointer[GLfloat]), ()];
    VertexAttrib2s: GLCodePointer[(GLuint, GLshort, GLshort), ()];
    VertexAttrib2sv: GLCodePointer[(GLuint, Pointer[GLshort]), ()];
    VertexAttrib3d: GLCodePointer[(GLuint, GLdouble, GLdouble, GLdouble), ()];
    VertexAttrib3dv: GLCodePointer[(GLuint, Pointer[GLdouble]), ()];
    VertexAttrib3f: GLCodePointer[(GLuint, GLfloat, GLfloat, GLfloat), ()];
    VertexAttrib3fv: GLCodePointer[(GLuint, Pointer[GLfloat]), ()];
    VertexAttrib3s: GLCodePointer[(GLuint, GLshort, GLshort, GLshort), ()];
    VertexAttrib3sv: GLCodePointer[(GLuint, Pointer[GLshort]), ()];
    VertexAttrib4Nbv: GLCodePointer[(GLuint, Pointer[GLbyte]), ()];
    VertexAttrib4Niv: GLCodePointer[(GLuint, Pointer[GLint]), ()];
    VertexAttrib4Nsv: GLCodePointer[(GLuint, Pointer[GLshort]), ()];
    VertexAttrib4Nub: GLCodePointer[(GLuint, GLubyte, GLubyte, GLubyte, GLubyte), ()];
    VertexAttrib4Nubv: GLCodePointer[(GLuint, Pointer[GLubyte]), ()];
    VertexAttrib4Nuiv: GLCodePointer[(GLuint, Pointer[GLuint]), ()];
    VertexAttrib4Nusv: GLCodePointer[(GLuint, Pointer[GLushort]), ()];
    VertexAttrib4bv: GLCodePointer[(GLuint, Pointer[GLbyte]), ()];
    VertexAttrib4d: GLCodePointer[(GLuint, GLdouble, GLdouble, GLdouble, GLdouble), ()];
    VertexAttrib4dv: GLCodePointer[(GLuint, Pointer[GLdouble]), ()];
    VertexAttrib4f: GLCodePointer[(GLuint, GLfloat, GLfloat, GLfloat, GLfloat), ()];
    VertexAttrib4fv: GLCodePointer[(GLuint, Pointer[GLfloat]), ()];
    VertexAttrib4iv: GLCodePointer[(GLuint, Pointer[GLint]), ()];
    VertexAttrib4s: GLCodePointer[(GLuint, GLshort, GLshort, GLshort, GLshort), ()];
    VertexAttrib4sv: GLCodePointer[(GLuint, Pointer[GLshort]), ()];
    VertexAttrib4ubv: GLCodePointer[(GLuint, Pointer[GLubyte]), ()];
    VertexAttrib4uiv: GLCodePointer[(GLuint, Pointer[GLuint]), ()];
    VertexAttrib4usv: GLCodePointer[(GLuint, Pointer[GLushort]), ()];
    VertexAttribIPointer: GLCodePointer[(GLuint, GLint, GLenum, GLsizei, Pointer[GLvoid]), ()];
    VertexAttribP1ui: GLCodePointer[(GLuint, GLenum, GLboolean, GLuint), ()];
    VertexAttribP1uiv: GLCodePointer[(GLuint, GLenum, GLboolean, Pointer[GLuint]), ()];
    VertexAttribP2ui: GLCodePointer[(GLuint, GLenum, GLboolean, GLuint), ()];
    VertexAttribP2uiv: GLCodePointer[(GLuint, GLenum, GLboolean, Pointer[GLuint]), ()];
    VertexAttribP3ui: GLCodePointer[(GLuint, GLenum, GLboolean, GLuint), ()];
    VertexAttribP3uiv: GLCodePointer[(GLuint, GLenum, GLboolean, Pointer[GLuint]), ()];
    VertexAttribP4ui: GLCodePointer[(GLuint, GLenum, GLboolean, GLuint), ()];
    VertexAttribP4uiv: GLCodePointer[(GLuint, GLenum, GLboolean, Pointer[GLuint]), ()];
    VertexAttribPointer: GLCodePointer[(GLuint, GLint, GLenum, GLboolean, GLsizei, Pointer[GLvoid]), ()];
    VertexP2ui: GLCodePointer[(GLenum, GLuint), ()];
    VertexP2uiv: GLCodePointer[(GLenum, Pointer[GLuint]), ()];
    VertexP3ui: GLCodePointer[(GLenum, GLuint), ()];
    VertexP3uiv: GLCodePointer[(GLenum, Pointer[GLuint]), ()];
    VertexP4ui: GLCodePointer[(GLenum, GLuint), ()];
    VertexP4uiv: GLCodePointer[(GLenum, Pointer[GLuint]), ()];
    VertexPointer: GLCodePointer[(GLint, GLenum, GLsizei, Pointer[GLvoid]), ()];
    Viewport: GLCodePointer[(GLint, GLint, GLsizei, GLsizei), ()];
    WaitSync: GLCodePointer[(GLsync, GLbitfield, GLuint64), ()];
    WindowPos2d: GLCodePointer[(GLdouble, GLdouble), ()];
    WindowPos2dv: GLCodePointer[(Pointer[GLdouble]), ()];
    WindowPos2f: GLCodePointer[(GLfloat, GLfloat), ()];
    WindowPos2fv: GLCodePointer[(Pointer[GLfloat]), ()];
    WindowPos2i: GLCodePointer[(GLint, GLint), ()];
    WindowPos2iv: GLCodePointer[(Pointer[GLint]), ()];
    WindowPos2s: GLCodePointer[(GLshort, GLshort), ()];
    WindowPos2sv: GLCodePointer[(Pointer[GLshort]), ()];
    WindowPos3d: GLCodePointer[(GLdouble, GLdouble, GLdouble), ()];
    WindowPos3dv: GLCodePointer[(Pointer[GLdouble]), ()];
    WindowPos3f: GLCodePointer[(GLfloat, GLfloat, GLfloat), ()];
    WindowPos3fv: GLCodePointer[(Pointer[GLfloat]), ()];
    WindowPos3i: GLCodePointer[(GLint, GLint, GLint), ()];
    WindowPos3iv: GLCodePointer[(Pointer[GLint]), ()];
    WindowPos3s: GLCodePointer[(GLshort, GLshort, GLshort), ()];
    WindowPos3sv: GLCodePointer[(Pointer[GLshort]), ()];
}

overload GLFunctions() gl: GLFunctions { }
overload destroy(gl: GLFunctions) { }

initGLFunctions(gl: GLFunctions) {
    gl.Accum = findGLFunction((GLenum, GLfloat), (), "glAccum");
    gl.ActiveTexture = findGLFunction((GLenum), (), "glActiveTexture", "glActiveTextureARB");
    gl.AlphaFunc = findGLFunction((GLenum, GLclampf), (), "glAlphaFunc");
    gl.AreTexturesResident = findGLFunction((GLsizei, Pointer[GLuint], Pointer[GLboolean]), GLboolean, "glAreTexturesResident");
    gl.ArrayElement = findGLFunction((GLint), (), "glArrayElement");
    gl.AttachShader = findGLFunction((GLuint, GLuint), (), "glAttachShader", "glAttachObjectARB");
    gl.Begin = findGLFunction((GLenum), (), "glBegin");
    gl.BeginConditionalRender = findGLFunction((GLuint, GLenum), (), "glBeginConditionalRender", "glBeginConditionalRenderNV");
    gl.BeginQuery = findGLFunction((GLenum, GLuint), (), "glBeginQuery", "glBeginQueryARB");
    gl.BeginQueryIndexed = findGLFunction((GLenum, GLuint, GLuint), (), "glBeginQueryIndexed");
    gl.BeginTransformFeedback = findGLFunction((GLenum), (), "glBeginTransformFeedback", "glBeginTransformFeedbackEXT");
    gl.BindAttribLocation = findGLFunction((GLuint, GLuint, GLstring), (), "glBindAttribLocation", "glBindAttribLocationARB");
    gl.BindBuffer = findGLFunction((GLenum, GLuint), (), "glBindBuffer", "glBindBufferARB");
    gl.BindBufferBase = findGLFunction((GLenum, GLuint, GLuint), (), "glBindBufferBase", "glBindBufferBaseEXT");
    gl.BindBufferRange = findGLFunction((GLenum, GLuint, GLuint, GLintptr, GLsizeiptr), (), "glBindBufferRange", "glBindBufferRangeEXT");
    gl.BindFragDataLocation = findGLFunction((GLuint, GLuint, GLstring), (), "glBindFragDataLocation", "glBindFragDataLocationEXT");
    gl.BindFragDataLocationIndexed = findGLFunction((GLuint, GLuint, GLuint, GLstring), (), "glBindFragDataLocationIndexed");
    gl.BindFramebuffer = findGLFunction((GLenum, GLuint), (), "glBindFramebuffer", "glBindFramebufferEXT");
    gl.BindRenderbuffer = findGLFunction((GLenum, GLuint), (), "glBindRenderbuffer", "glBindRenderbufferEXT");
    gl.BindSampler = findGLFunction((GLenum, GLuint), (), "glBindSampler");
    gl.BindTexture = findGLFunction((GLenum, GLuint), (), "glBindTexture");
    gl.BindTransformFeedback = findGLFunction((GLenum, GLuint), (), "glBindTransformFeedback");
    gl.BindVertexArray = findGLFunction((GLuint), (), "glBindVertexArray", "glBindVertexArrayAPPLE");
    gl.Bitmap = findGLFunction((GLsizei, GLsizei, GLfloat, GLfloat, GLfloat, GLfloat, Pointer[GLubyte]), (), "glBitmap");
    gl.BlendColor = findGLFunction((GLclampf, GLclampf, GLclampf, GLclampf), (), "glBlendColor", "glBlendColorEXT");
    gl.BlendEquation = findGLFunction((GLenum), (), "glBlendEquation", "glBlendEquationEXT");
    gl.BlendEquationSeparate = findGLFunction((GLenum, GLenum), (), "glBlendEquationSeparate", "glBlendEquationSeparateEXT");
    gl.BlendFunc = findGLFunction((GLenum, GLenum), (), "glBlendFunc");
    gl.BlendFuncSeparate = findGLFunction((GLenum, GLenum, GLenum, GLenum), (), "glBlendFuncSeparate", "glBlendFuncSeparateEXT");
    gl.BlitFramebuffer = findGLFunction((GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum), (), "glBlitFramebuffer", "glBlitFramebufferEXT");
    gl.BufferData = findGLFunction((GLenum, GLsizeiptr, Pointer[GLvoid], GLenum), (), "glBufferData", "glBufferDataARB");
    gl.BufferSubData = findGLFunction((GLenum, GLintptr, GLsizeiptr, Pointer[GLvoid]), (), "glBufferSubData", "glBufferSubDataARB");
    gl.CallList = findGLFunction((GLuint), (), "glCallList");
    gl.CallLists = findGLFunction((GLsizei, GLenum, Pointer[GLvoid]), (), "glCallLists");
    gl.CheckFramebufferStatus = findGLFunction((GLenum), GLenum, "glCheckFramebufferStatus", "glCheckFramebufferStatusEXT");
    gl.ClampColor = findGLFunction((GLenum, GLenum), (), "glClampColor", "glClampColorARB");
    gl.Clear = findGLFunction((GLbitfield), (), "glClear");
    gl.ClearAccum = findGLFunction((GLfloat, GLfloat, GLfloat, GLfloat), (), "glClearAccum");
    gl.ClearBufferfi = findGLFunction((GLenum, GLint, GLfloat, GLint), (), "glClearBufferfi");
    gl.ClearBufferfv = findGLFunction((GLenum, GLint, Pointer[GLfloat]), (), "glClearBufferfv");
    gl.ClearBufferiv = findGLFunction((GLenum, GLint, Pointer[GLint]), (), "glClearBufferiv");
    gl.ClearBufferuiv = findGLFunction((GLenum, GLint, Pointer[GLuint]), (), "glClearBufferuiv");
    gl.ClearColor = findGLFunction((GLclampf, GLclampf, GLclampf, GLclampf), (), "glClearColor");
    gl.ClearColorIiEXT = findGLFunction((GLint, GLint, GLint, GLint), (), "glClearColorIiEXT");
    gl.ClearColorIuiEXT = findGLFunction((GLuint, GLuint, GLuint, GLuint), (), "glClearColorIuiEXT");
    gl.ClearDepth = findGLFunction((GLclampd), (), "glClearDepth");
    gl.ClearIndex = findGLFunction((GLfloat), (), "glClearIndex");
    gl.ClearStencil = findGLFunction((GLint), (), "glClearStencil");
    gl.ClientActiveTexture = findGLFunction((GLenum), (), "glClientActiveTexture", "glClientActiveTextureARB");
    gl.ClientWaitSync = findGLFunction((GLsync, GLbitfield, GLuint64), GLenum, "glClientWaitSync");
    gl.ClipPlane = findGLFunction((GLenum, Pointer[GLdouble]), (), "glClipPlane");
    gl.Color3b = findGLFunction((GLbyte, GLbyte, GLbyte), (), "glColor3b");
    gl.Color3bv = findGLFunction((Pointer[GLbyte]), (), "glColor3bv");
    gl.Color3d = findGLFunction((GLdouble, GLdouble, GLdouble), (), "glColor3d");
    gl.Color3dv = findGLFunction((Pointer[GLdouble]), (), "glColor3dv");
    gl.Color3f = findGLFunction((GLfloat, GLfloat, GLfloat), (), "glColor3f");
    gl.Color3fv = findGLFunction((Pointer[GLfloat]), (), "glColor3fv");
    gl.Color3i = findGLFunction((GLint, GLint, GLint), (), "glColor3i");
    gl.Color3iv = findGLFunction((Pointer[GLint]), (), "glColor3iv");
    gl.Color3s = findGLFunction((GLshort, GLshort, GLshort), (), "glColor3s");
    gl.Color3sv = findGLFunction((Pointer[GLshort]), (), "glColor3sv");
    gl.Color3ub = findGLFunction((GLubyte, GLubyte, GLubyte), (), "glColor3ub");
    gl.Color3ubv = findGLFunction((Pointer[GLubyte]), (), "glColor3ubv");
    gl.Color3ui = findGLFunction((GLuint, GLuint, GLuint), (), "glColor3ui");
    gl.Color3uiv = findGLFunction((Pointer[GLuint]), (), "glColor3uiv");
    gl.Color3us = findGLFunction((GLushort, GLushort, GLushort), (), "glColor3us");
    gl.Color3usv = findGLFunction((Pointer[GLushort]), (), "glColor3usv");
    gl.Color4b = findGLFunction((GLbyte, GLbyte, GLbyte, GLbyte), (), "glColor4b");
    gl.Color4bv = findGLFunction((Pointer[GLbyte]), (), "glColor4bv");
    gl.Color4d = findGLFunction((GLdouble, GLdouble, GLdouble, GLdouble), (), "glColor4d");
    gl.Color4dv = findGLFunction((Pointer[GLdouble]), (), "glColor4dv");
    gl.Color4f = findGLFunction((GLfloat, GLfloat, GLfloat, GLfloat), (), "glColor4f");
    gl.Color4fv = findGLFunction((Pointer[GLfloat]), (), "glColor4fv");
    gl.Color4i = findGLFunction((GLint, GLint, GLint, GLint), (), "glColor4i");
    gl.Color4iv = findGLFunction((Pointer[GLint]), (), "glColor4iv");
    gl.Color4s = findGLFunction((GLshort, GLshort, GLshort, GLshort), (), "glColor4s");
    gl.Color4sv = findGLFunction((Pointer[GLshort]), (), "glColor4sv");
    gl.Color4ub = findGLFunction((GLubyte, GLubyte, GLubyte, GLubyte), (), "glColor4ub");
    gl.Color4ubv = findGLFunction((Pointer[GLubyte]), (), "glColor4ubv");
    gl.Color4ui = findGLFunction((GLuint, GLuint, GLuint, GLuint), (), "glColor4ui");
    gl.Color4uiv = findGLFunction((Pointer[GLuint]), (), "glColor4uiv");
    gl.Color4us = findGLFunction((GLushort, GLushort, GLushort, GLushort), (), "glColor4us");
    gl.Color4usv = findGLFunction((Pointer[GLushort]), (), "glColor4usv");
    gl.ColorMask = findGLFunction((GLboolean, GLboolean, GLboolean, GLboolean), (), "glColorMask");
    gl.ColorMaski = findGLFunction((GLuint, GLboolean, GLboolean, GLboolean, GLboolean), (), "glColorMaski", "glColorMaskIndexedEXT");
    gl.ColorMaterial = findGLFunction((GLenum, GLenum), (), "glColorMaterial");
    gl.ColorP3ui = findGLFunction((GLenum, GLuint), (), "glColorP3ui");
    gl.ColorP3uiv = findGLFunction((GLenum, Pointer[GLuint]), (), "glColorP3uiv");
    gl.ColorP4ui = findGLFunction((GLenum, GLuint), (), "glColorP4ui");
    gl.ColorP4uiv = findGLFunction((GLenum, Pointer[GLuint]), (), "glColorP4uiv");
    gl.ColorPointer = findGLFunction((GLint, GLenum, GLsizei, Pointer[GLvoid]), (), "glColorPointer");
    gl.CompileShader = findGLFunction((GLuint), (), "glCompileShader", "glCompileShaderARB");
    gl.CompressedTexImage1D = findGLFunction((GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, Pointer[GLvoid]), (), "glCompressedTexImage1D", "glCompressedTexImage1DARB");
    gl.CompressedTexImage2D = findGLFunction((GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, Pointer[GLvoid]), (), "glCompressedTexImage2D", "glCompressedTexImage2DARB");
    gl.CompressedTexImage3D = findGLFunction((GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, Pointer[GLvoid]), (), "glCompressedTexImage3D", "glCompressedTexImage2DARB");
    gl.CompressedTexSubImage1D = findGLFunction((GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, Pointer[GLvoid]), (), "glCompressedTexSubImage1D", "glCompressedTexSubImage1DARB");
    gl.CompressedTexSubImage2D = findGLFunction((GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, Pointer[GLvoid]), (), "glCompressedTexSubImage2D", "glCompressedTexSubImage2DARB");
    gl.CompressedTexSubImage3D = findGLFunction((GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, Pointer[GLvoid]), (), "glCompressedTexSubImage3D", "glCompressedTexSubImage3DARB");
    gl.CopyBufferSubData = findGLFunction((GLenum, GLenum, GLintptr, GLintptr, GLsizeiptr), (), "glCopyBufferSubData", "glCopyBufferSubDataEXT");
    gl.CopyPixels = findGLFunction((GLint, GLint, GLsizei, GLsizei, GLenum), (), "glCopyPixels");
    gl.CopyTexImage1D = findGLFunction((GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint), (), "glCopyTexImage1D");
    gl.CopyTexImage2D = findGLFunction((GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint), (), "glCopyTexImage2D");
    gl.CopyTexSubImage1D = findGLFunction((GLenum, GLint, GLint, GLint, GLint, GLsizei), (), "glCopyTexSubImage1D");
    gl.CopyTexSubImage2D = findGLFunction((GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei), (), "glCopyTexSubImage2D");
    gl.CopyTexSubImage3D = findGLFunction((GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei), (), "glCopyTexSubImage3D", "glCopyTexSubImage3DEXT");
    gl.CreateProgram = findGLFunction((), GLuint, "glCreateProgram", "glCreateProgramObjectARB");
    gl.CreateShader = findGLFunction((GLenum), GLuint, "glCreateShader", "glCreateShaderObjectARB");
    gl.CullFace = findGLFunction((GLenum), (), "glCullFace");
    gl.DeleteBuffers = findGLFunction((GLsizei, Pointer[GLuint]), (), "glDeleteBuffers", "glDeleteBuffersARB");
    gl.DeleteFramebuffers = findGLFunction((GLsizei, Pointer[GLuint]), (), "glDeleteFramebuffers", "glDeleteFramebuffersEXT");
    gl.DeleteLists = findGLFunction((GLuint, GLsizei), (), "glDeleteLists");
    gl.DeleteProgram = findGLFunction((GLuint), (), "glDeleteProgram", "glDeleteObjectARB");
    gl.DeleteQueries = findGLFunction((GLsizei, Pointer[GLuint]), (), "glDeleteQueries", "glDeleteQueriesARB");
    gl.DeleteRenderbuffers = findGLFunction((GLsizei, Pointer[GLuint]), (), "glDeleteRenderbuffers", "glDeleteRenderbuffersEXT");
    gl.DeleteSamplers = findGLFunction((GLsizei, Pointer[GLuint]), (), "glDeleteSamplers");
    gl.DeleteShader = findGLFunction((GLuint), (), "glDeleteShader", "glDeleteObjectARB");
    gl.DeleteSync = findGLFunction((GLsync), (), "glDeleteSync");
    gl.DeleteTextures = findGLFunction((GLsizei, Pointer[GLuint]), (), "glDeleteTextures");
    gl.DeleteTransformFeedbacks = findGLFunction((GLsizei, Pointer[GLuint]), (), "glDeleteTransformFeedbacks");
    gl.DeleteVertexArrays = findGLFunction((GLsizei, Pointer[GLuint]), (), "glDeleteVertexArrays", "glDeleteVertexArraysAPPLE");
    gl.DepthFunc = findGLFunction((GLenum), (), "glDepthFunc");
    gl.DepthMask = findGLFunction((GLboolean), (), "glDepthMask");
    gl.DepthRange = findGLFunction((GLclampd, GLclampd), (), "glDepthRange");
    gl.DetachShader = findGLFunction((GLuint, GLuint), (), "glDetachShader", "glDetachObjectARB");
    gl.Disable = findGLFunction((GLenum), (), "glDisable");
    gl.DisableClientState = findGLFunction((GLenum), (), "glDisableClientState");
    gl.DisableVertexAttribArray = findGLFunction((GLuint), (), "glDisableVertexAttribArray", "glDisableVertexAttribArrayARB");
    gl.Disablei = findGLFunction((GLenum, GLuint), (), "glDisablei", "glDisableIndexedEXT");
    gl.DrawArrays = findGLFunction((GLenum, GLint, GLsizei), (), "glDrawArrays");
    gl.DrawArraysInstanced = findGLFunction((GLenum, GLint, GLsizei, GLsizei), (), "glDrawArraysInstanced", "glDrawArraysInstancedARB");
    gl.DrawBuffer = findGLFunction((GLenum), (), "glDrawBuffer");
    gl.DrawBuffers = findGLFunction((GLsizei, Pointer[GLenum]), (), "glDrawBuffers", "glDrawBuffersARB", "glDrawBuffersATI");
    gl.DrawElements = findGLFunction((GLenum, GLsizei, GLenum, Pointer[GLvoid]), (), "glDrawElements");
    gl.DrawElementsInstanced = findGLFunction((GLenum, GLsizei, GLenum, Pointer[GLvoid], GLsizei), (), "glDrawElementsInstanced", "glDrawElementsInstancedARB");
    gl.DrawPixels = findGLFunction((GLsizei, GLsizei, GLenum, GLenum, Pointer[GLvoid]), (), "glDrawPixels");
    gl.DrawRangeElements = findGLFunction((GLenum, GLuint, GLuint, GLsizei, GLenum, Pointer[GLvoid]), (), "glDrawRangeElements", "glDrawRangeElementsEXT");
    gl.DrawTransformFeedback = findGLFunction((GLenum, GLuint), (), "glDrawTransformFeedback");
    gl.DrawTransformFeedbackStream = findGLFunction((GLenum, GLuint, GLuint), (), "glDrawTransformFeedbackStream");
    gl.EdgeFlag = findGLFunction((GLboolean), (), "glEdgeFlag");
    gl.EdgeFlagPointer = findGLFunction((GLsizei, Pointer[GLvoid]), (), "glEdgeFlagPointer");
    gl.EdgeFlagv = findGLFunction((Pointer[GLboolean]), (), "glEdgeFlagv");
    gl.Enable = findGLFunction((GLenum), (), "glEnable");
    gl.EnableClientState = findGLFunction((GLenum), (), "glEnableClientState");
    gl.EnableVertexAttribArray = findGLFunction((GLuint), (), "glEnableVertexAttribArray", "glEnableVertexAttribArrayARB");
    gl.Enablei = findGLFunction((GLenum, GLuint), (), "glEnablei", "glEnableIndexedEXT");
    gl.End = findGLFunction((), (), "glEnd");
    gl.EndConditionalRender = findGLFunction((), (), "glEndConditionalRender", "glEndConditionalRenderNV");
    gl.EndList = findGLFunction((), (), "glEndList");
    gl.EndQuery = findGLFunction((GLenum), (), "glEndQuery", "glEndQueryARB");
    gl.EndQueryIndexed = findGLFunction((GLenum, GLuint), (), "glEndQueryIndexed");
    gl.EndTransformFeedback = findGLFunction((), (), "glEndTransformFeedback", "glEndTransformFeedbackEXT");
    gl.EvalCoord1d = findGLFunction((GLdouble), (), "glEvalCoord1d");
    gl.EvalCoord1dv = findGLFunction((Pointer[GLdouble]), (), "glEvalCoord1dv");
    gl.EvalCoord1f = findGLFunction((GLfloat), (), "glEvalCoord1f");
    gl.EvalCoord1fv = findGLFunction((Pointer[GLfloat]), (), "glEvalCoord1fv");
    gl.EvalCoord2d = findGLFunction((GLdouble, GLdouble), (), "glEvalCoord2d");
    gl.EvalCoord2dv = findGLFunction((Pointer[GLdouble]), (), "glEvalCoord2dv");
    gl.EvalCoord2f = findGLFunction((GLfloat, GLfloat), (), "glEvalCoord2f");
    gl.EvalCoord2fv = findGLFunction((Pointer[GLfloat]), (), "glEvalCoord2fv");
    gl.EvalMesh1 = findGLFunction((GLenum, GLint, GLint), (), "glEvalMesh1");
    gl.EvalMesh2 = findGLFunction((GLenum, GLint, GLint, GLint, GLint), (), "glEvalMesh2");
    gl.EvalPoint1 = findGLFunction((GLint), (), "glEvalPoint1");
    gl.EvalPoint2 = findGLFunction((GLint, GLint), (), "glEvalPoint2");
    gl.FeedbackBuffer = findGLFunction((GLsizei, GLenum, Pointer[GLfloat]), (), "glFeedbackBuffer");
    gl.FenceSync = findGLFunction((GLenum, GLbitfield), GLsync, "glFenceSync");
    gl.Finish = findGLFunction((), (), "glFinish");
    gl.Flush = findGLFunction((), (), "glFlush");
    gl.FlushMappedBufferRange = findGLFunction((GLenum, GLintptr, GLsizeiptr), (), "glFlushMappedBufferRange", "glFlushMappedBufferRangeAPPLE");
    gl.FogCoordPointer = findGLFunction((GLenum, GLsizei, Pointer[GLvoid]), (), "glFogCoordPointer", "glFogCoordPointerEXT");
    gl.FogCoordd = findGLFunction((GLdouble), (), "glFogCoordd", "glFogCoorddEXT");
    gl.FogCoorddv = findGLFunction((Pointer[GLdouble]), (), "glFogCoorddv", "glFogCoorddvEXT");
    gl.FogCoordf = findGLFunction((GLfloat), (), "glFogCoordf", "glFogCoordfEXT");
    gl.FogCoordfv = findGLFunction((Pointer[GLfloat]), (), "glFogCoordfv", "glFogCoordfvEXT");
    gl.Fogf = findGLFunction((GLenum, GLfloat), (), "glFogf");
    gl.Fogfv = findGLFunction((GLenum, Pointer[GLfloat]), (), "glFogfv");
    gl.Fogi = findGLFunction((GLenum, GLint), (), "glFogi");
    gl.Fogiv = findGLFunction((GLenum, Pointer[GLint]), (), "glFogiv");
    gl.FramebufferRenderbuffer = findGLFunction((GLenum, GLenum, GLenum, GLuint), (), "glFramebufferRenderbuffer", "glFramebufferRenderbufferEXT");
    gl.FramebufferTexture = findGLFunction((GLenum, GLenum, GLuint, GLint), (), "glFramebufferTexture", "glFramebufferTextureARB", "glFramebufferTextureEXT");
    gl.FramebufferTexture1D = findGLFunction((GLenum, GLenum, GLenum, GLuint, GLint), (), "glFramebufferTexture1D", "glFramebufferTexture1DEXT");
    gl.FramebufferTexture2D = findGLFunction((GLenum, GLenum, GLenum, GLuint, GLint), (), "glFramebufferTexture2D", "glFramebufferTexture2DEXT");
    gl.FramebufferTexture3D = findGLFunction((GLenum, GLenum, GLenum, GLuint, GLint, GLint), (), "glFramebufferTexture3D", "glFramebufferTexture3DEXT");
    gl.FramebufferTextureFaceARB = findGLFunction((GLenum, GLenum, GLuint, GLint, GLenum), (), "glFramebufferTextureFaceARB", "glFramebufferTextureFaceEXT");
    gl.FramebufferTextureLayer = findGLFunction((GLenum, GLenum, GLuint, GLint, GLint), (), "glFramebufferTextureLayer", "glFramebufferTextureLayerEXT");
    gl.FramebufferTextureLayerARB = findGLFunction((GLenum, GLenum, GLuint, GLint, GLint), (), "glFramebufferTextureLayerARB", "glFramebufferTextureLayerEXT");
    gl.FrontFace = findGLFunction((GLenum), (), "glFrontFace");
    gl.Frustum = findGLFunction((GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble), (), "glFrustum");
    gl.GenBuffers = findGLFunction((GLsizei, Pointer[GLuint]), (), "glGenBuffers", "glGenBuffersARB");
    gl.GenFramebuffers = findGLFunction((GLsizei, Pointer[GLuint]), (), "glGenFramebuffers", "glGenFramebuffersEXT");
    gl.GenLists = findGLFunction((GLsizei), GLuint, "glGenLists");
    gl.GenQueries = findGLFunction((GLsizei, Pointer[GLuint]), (), "glGenQueries", "glGenQueriesARB");
    gl.GenRenderbuffers = findGLFunction((GLsizei, Pointer[GLuint]), (), "glGenRenderbuffers", "glGenRenderbuffersEXT");
    gl.GenSamplers = findGLFunction((GLsizei, Pointer[GLuint]), (), "glGenSamplers");
    gl.GenTextures = findGLFunction((GLsizei, Pointer[GLuint]), (), "glGenTextures");
    gl.GenTransformFeedbacks = findGLFunction((GLsizei, Pointer[GLuint]), (), "glGenTransformFeedbacks");
    gl.GenVertexArrays = findGLFunction((GLsizei, Pointer[GLuint]), (), "glGenVertexArrays", "glGenVertexArraysAPPLE");
    gl.GenerateMipmap = findGLFunction((GLenum), (), "glGenerateMipmap", "glGenerateMipmapEXT");
    gl.GetActiveAttrib = findGLFunction((GLuint, GLuint, GLsizei, Pointer[GLsizei], Pointer[GLint], Pointer[GLenum], GLstring), (), "glGetActiveAttrib", "glGetActiveAttribARB");
    gl.GetActiveSubroutineName = findGLFunction((GLuint, GLenum, GLuint, GLsizei, Pointer[GLsizei], GLstring), (), "glGetActiveSubroutineName");
    gl.GetActiveSubroutineUniformName = findGLFunction((GLuint, GLenum, GLuint, GLsizei, Pointer[GLsizei], GLstring), (), "glGetActiveSubroutineUniformName");
    gl.GetActiveSubroutineUniformiv = findGLFunction((GLuint, GLenum, GLuint, GLenum, Pointer[GLint]), (), "glGetActiveSubroutineUniformiv");
    gl.GetActiveUniform = findGLFunction((GLuint, GLuint, GLsizei, Pointer[GLsizei], Pointer[GLint], Pointer[GLenum], GLstring), (), "glGetActiveUniform", "glGetActiveUniformARB");
    gl.GetActiveUniformBlockName = findGLFunction((GLuint, GLuint, GLsizei, Pointer[GLsizei], GLstring), (), "glGetActiveUniformBlockName");
    gl.GetActiveUniformBlockiv = findGLFunction((GLuint, GLuint, GLenum, Pointer[GLint]), (), "glGetActiveUniformBlockiv");
    gl.GetActiveUniformName = findGLFunction((GLuint, GLuint, GLsizei, Pointer[GLsizei], GLstring), (), "glGetActiveUniformName");
    gl.GetActiveUniformsiv = findGLFunction((GLuint, GLsizei, Pointer[GLuint], GLenum, Pointer[GLint]), (), "glGetActiveUniformsiv");
    gl.GetAttachedShaders = findGLFunction((GLuint, GLsizei, Pointer[GLsizei], Pointer[GLuint]), (), "glGetAttachedShaders", "glGetAttachedObjectsARB");
    gl.GetAttribLocation = findGLFunction((GLuint, GLstring), GLint, "glGetAttribLocation", "glGetAttribLocationARB");
    gl.GetBooleani_v = findGLFunction((GLenum, GLuint, Pointer[GLboolean]), (), "glGetBooleani_v", "glGetBooleanIndexedvEXT");
    gl.GetBooleanv = findGLFunction((GLenum, Pointer[GLboolean]), (), "glGetBooleanv");
    gl.GetBufferParameteri64v = findGLFunction((GLenum, GLenum, Pointer[GLint64]), (), "glGetBufferParameteri64v");
    gl.GetBufferParameteriv = findGLFunction((GLenum, GLenum, Pointer[GLint]), (), "glGetBufferParameteriv", "glGetBufferParameterivARB");
    gl.GetBufferPointerv = findGLFunction((GLenum, GLenum, Pointer[Pointer[GLvoid]]), (), "glGetBufferPointerv", "glGetBufferPointervARB");
    gl.GetBufferSubData = findGLFunction((GLenum, GLintptr, GLsizeiptr, Pointer[GLvoid]), (), "glGetBufferSubData", "glGetBufferSubDataARB");
    gl.GetClipPlane = findGLFunction((GLenum, Pointer[GLdouble]), (), "glGetClipPlane");
    gl.GetCompressedTexImage = findGLFunction((GLenum, GLint, Pointer[GLvoid]), (), "glGetCompressedTexImage", "glGetCompressedTexImageARB");
    gl.GetDoublev = findGLFunction((GLenum, Pointer[GLdouble]), (), "glGetDoublev");
    gl.GetError = findGLFunction((), GLenum, "glGetError");
    gl.GetFloatv = findGLFunction((GLenum, Pointer[GLfloat]), (), "glGetFloatv");
    gl.GetFragDataIndex = findGLFunction((GLuint, GLstring), GLint, "glGetFragDataIndex");
    gl.GetFragDataLocation = findGLFunction((GLuint, GLstring), GLint, "glGetFragDataLocation", "glGetFragDataLocationEXT");
    gl.GetFramebufferAttachmentParameteriv = findGLFunction((GLenum, GLenum, GLenum, Pointer[GLint]), (), "glGetFramebufferAttachmentParameteriv", "glGetFramebufferAttachmentParameterivEXT");
    gl.GetInteger64i_v = findGLFunction((GLenum, GLuint, Pointer[GLint64]), (), "glGetInteger64i_v");
    gl.GetInteger64v = findGLFunction((GLenum, Pointer[GLint64]), (), "glGetInteger64v");
    gl.GetIntegeri_v = findGLFunction((GLenum, GLuint, Pointer[GLint]), (), "glGetIntegeri_v", "glGetIntegerIndexedvEXT");
    gl.GetIntegerv = findGLFunction((GLenum, Pointer[GLint]), (), "glGetIntegerv");
    gl.GetLightfv = findGLFunction((GLenum, GLenum, Pointer[GLfloat]), (), "glGetLightfv");
    gl.GetLightiv = findGLFunction((GLenum, GLenum, Pointer[GLint]), (), "glGetLightiv");
    gl.GetMapdv = findGLFunction((GLenum, GLenum, Pointer[GLdouble]), (), "glGetMapdv");
    gl.GetMapfv = findGLFunction((GLenum, GLenum, Pointer[GLfloat]), (), "glGetMapfv");
    gl.GetMapiv = findGLFunction((GLenum, GLenum, Pointer[GLint]), (), "glGetMapiv");
    gl.GetMaterialfv = findGLFunction((GLenum, GLenum, Pointer[GLfloat]), (), "glGetMaterialfv");
    gl.GetMaterialiv = findGLFunction((GLenum, GLenum, Pointer[GLint]), (), "glGetMaterialiv");
    gl.GetMultisamplefv = findGLFunction((GLenum, GLuint, Pointer[GLfloat]), (), "glGetMultisamplefv");
    gl.GetPixelMapfv = findGLFunction((GLenum, Pointer[GLfloat]), (), "glGetPixelMapfv");
    gl.GetPixelMapuiv = findGLFunction((GLenum, Pointer[GLuint]), (), "glGetPixelMapuiv");
    gl.GetPixelMapusv = findGLFunction((GLenum, Pointer[GLushort]), (), "glGetPixelMapusv");
    gl.GetPointerv = findGLFunction((GLenum, Pointer[Pointer[GLvoid]]), (), "glGetPointerv");
    gl.GetPolygonStipple = findGLFunction((Pointer[GLubyte]), (), "glGetPolygonStipple");
    gl.GetProgramInfoLog = findGLFunction((GLuint, GLsizei, Pointer[GLsizei], GLstring), (), "glGetProgramInfoLog", "glGetInfoLogARB");
    gl.GetProgramStageiv = findGLFunction((GLuint, GLenum, GLenum, Pointer[GLint]), (), "glGetProgramStageiv");
    gl.GetProgramiv = findGLFunction((GLuint, GLenum, Pointer[GLint]), (), "glGetProgramiv", "glGetObjectParameterivARB");
    gl.GetQueryIndexediv = findGLFunction((GLenum, GLuint, GLenum, Pointer[GLint]), (), "glGetQueryIndexediv");
    gl.GetQueryObjecti64v = findGLFunction((GLuint, GLenum, Pointer[GLint64]), (), "glGetQueryObjecti64v");
    gl.GetQueryObjectiv = findGLFunction((GLuint, GLenum, Pointer[GLint]), (), "glGetQueryObjectiv", "glGetQueryObjectivARB");
    gl.GetQueryObjectui64v = findGLFunction((GLuint, GLenum, Pointer[GLuint64]), (), "glGetQueryObjectui64v");
    gl.GetQueryObjectuiv = findGLFunction((GLuint, GLenum, Pointer[GLuint]), (), "glGetQueryObjectuiv", "glGetQueryObjectuivARB");
    gl.GetQueryiv = findGLFunction((GLenum, GLenum, Pointer[GLint]), (), "glGetQueryiv", "glGetQueryivARB");
    gl.GetRenderbufferParameteriv = findGLFunction((GLenum, GLenum, Pointer[GLint]), (), "glGetRenderbufferParameteriv", "glGetRenderbufferParameterivEXT");
    gl.GetSamplerParameterIfv = findGLFunction((GLuint, GLenum, Pointer[GLfloat]), (), "glGetSamplerParameterIfv");
    gl.GetSamplerParameterIiv = findGLFunction((GLuint, GLenum, Pointer[GLint]), (), "glGetSamplerParameterIiv");
    gl.GetSamplerParameterfv = findGLFunction((GLuint, GLenum, Pointer[GLfloat]), (), "glGetSamplerParameterfv");
    gl.GetSamplerParameteriv = findGLFunction((GLuint, GLenum, Pointer[GLint]), (), "glGetSamplerParameteriv");
    gl.GetShaderInfoLog = findGLFunction((GLuint, GLsizei, Pointer[GLsizei], GLstring), (), "glGetShaderInfoLog", "glGetInfoLogARB");
    gl.GetShaderSource = findGLFunction((GLint, GLsizei, Pointer[GLsizei], GLstring), (), "glGetShaderSource", "glGetShaderSourceARB");
    gl.GetShaderiv = findGLFunction((GLuint, GLenum, Pointer[GLint]), (), "glGetShaderiv", "glGetObjectParameterivARB");
    gl.GetString = findGLFunction((GLenum), GLstring, "glGetString");
    gl.GetStringi = findGLFunction((GLenum, GLuint), Pointer[GLubyte], "glGetStringi");
    gl.GetSubroutineIndex = findGLFunction((GLuint, GLenum, GLstring), GLuint, "glGetSubroutineIndex");
    gl.GetSubroutineUniformLocation = findGLFunction((GLuint, GLenum, GLstring), GLint, "glGetSubroutineUniformLocation");
    gl.GetSynciv = findGLFunction((GLsync, GLenum, GLsizei, Pointer[GLsizei], Pointer[GLint]), (), "glGetSynciv");
    gl.GetTexEnvfv = findGLFunction((GLenum, GLenum, Pointer[GLfloat]), (), "glGetTexEnvfv");
    gl.GetTexEnviv = findGLFunction((GLenum, GLenum, Pointer[GLint]), (), "glGetTexEnviv");
    gl.GetTexGendv = findGLFunction((GLenum, GLenum, Pointer[GLdouble]), (), "glGetTexGendv");
    gl.GetTexGenfv = findGLFunction((GLenum, GLenum, Pointer[GLfloat]), (), "glGetTexGenfv");
    gl.GetTexGeniv = findGLFunction((GLenum, GLenum, Pointer[GLint]), (), "glGetTexGeniv");
    gl.GetTexImage = findGLFunction((GLenum, GLint, GLenum, GLenum, Pointer[GLvoid]), (), "glGetTexImage");
    gl.GetTexLevelParameterfv = findGLFunction((GLenum, GLint, GLenum, Pointer[GLfloat]), (), "glGetTexLevelParameterfv");
    gl.GetTexLevelParameteriv = findGLFunction((GLenum, GLint, GLenum, Pointer[GLint]), (), "glGetTexLevelParameteriv");
    gl.GetTexParameterIiv = findGLFunction((GLenum, GLenum, Pointer[GLint]), (), "glGetTexParameterIiv", "glGetTexParameterIivEXT");
    gl.GetTexParameterIuiv = findGLFunction((GLenum, GLenum, Pointer[GLuint]), (), "glGetTexParameterIuiv", "glGetTexParameterIuivEXT");
    gl.GetTexParameterfv = findGLFunction((GLenum, GLenum, Pointer[GLfloat]), (), "glGetTexParameterfv");
    gl.GetTexParameteriv = findGLFunction((GLenum, GLenum, Pointer[GLint]), (), "glGetTexParameteriv");
    gl.GetTransformFeedbackVarying = findGLFunction((GLuint, GLuint, GLsizei, Pointer[GLsizei], Pointer[GLsizei], Pointer[GLenum], GLstring), (), "glGetTransformFeedbackVarying", "glGetTransformFeedbackVaryingEXT");
    gl.GetUniformBlockIndex = findGLFunction((GLuint, GLstring), GLuint, "glGetUniformBlockIndex");
    gl.GetUniformIndices = findGLFunction((GLuint, GLsizei, Pointer[GLstring], Pointer[GLuint]), (), "glGetUniformIndices");
    gl.GetUniformLocation = findGLFunction((GLint, GLstring), GLint, "glGetUniformLocation", "glGetUniformLocationARB");
    gl.GetUniformSubroutineuiv = findGLFunction((GLenum, GLint, Pointer[GLuint]), (), "glGetUniformSubroutineuiv");
    gl.GetUniformdv = findGLFunction((GLuint, GLint, Pointer[GLdouble]), (), "glGetUniformdv");
    gl.GetUniformfv = findGLFunction((GLuint, GLint, Pointer[GLfloat]), (), "glGetUniformfv", "glGetUniformfvARB");
    gl.GetUniformiv = findGLFunction((GLuint, GLint, Pointer[GLint]), (), "glGetUniformiv", "glGetUniformivARB");
    gl.GetUniformuiv = findGLFunction((GLuint, GLint, Pointer[GLuint]), (), "glGetUniformuiv", "glGetUniformuivEXT");
    gl.GetVertexAttribIiv = findGLFunction((GLuint, GLenum, Pointer[GLint]), (), "glGetVertexAttribIiv", "glGetVertexAttribIivEXT");
    gl.GetVertexAttribIuiv = findGLFunction((GLuint, GLenum, Pointer[GLuint]), (), "glGetVertexAttribIuiv", "glGetVertexAttribIuivEXT");
    gl.GetVertexAttribPointerv = findGLFunction((GLuint, GLenum, Pointer[Pointer[GLvoid]]), (), "glGetVertexAttribPointerv", "glGetVertexAttribPointervARB");
    gl.GetVertexAttribdv = findGLFunction((GLuint, GLenum, Pointer[GLdouble]), (), "glGetVertexAttribdv", "glGetVertexAttribdvARB");
    gl.GetVertexAttribfv = findGLFunction((GLuint, GLenum, Pointer[GLfloat]), (), "glGetVertexAttribfv", "glGetVertexAttribfvARB");
    gl.GetVertexAttribiv = findGLFunction((GLuint, GLenum, Pointer[GLint]), (), "glGetVertexAttribiv", "glGetVertexAttribivARB");
    gl.Hint = findGLFunction((GLenum, GLenum), (), "glHint");
    gl.IndexMask = findGLFunction((GLuint), (), "glIndexMask");
    gl.IndexPointer = findGLFunction((GLenum, GLsizei, Pointer[GLvoid]), (), "glIndexPointer");
    gl.Indexd = findGLFunction((GLdouble), (), "glIndexd");
    gl.Indexdv = findGLFunction((Pointer[GLdouble]), (), "glIndexdv");
    gl.Indexf = findGLFunction((GLfloat), (), "glIndexf");
    gl.Indexfv = findGLFunction((Pointer[GLfloat]), (), "glIndexfv");
    gl.Indexi = findGLFunction((GLint), (), "glIndexi");
    gl.Indexiv = findGLFunction((Pointer[GLint]), (), "glIndexiv");
    gl.Indexs = findGLFunction((GLshort), (), "glIndexs");
    gl.Indexsv = findGLFunction((Pointer[GLshort]), (), "glIndexsv");
    gl.Indexub = findGLFunction((GLubyte), (), "glIndexub");
    gl.Indexubv = findGLFunction((Pointer[GLubyte]), (), "glIndexubv");
    gl.InitNames = findGLFunction((), (), "glInitNames");
    gl.InterleavedArrays = findGLFunction((GLenum, GLsizei, Pointer[GLvoid]), (), "glInterleavedArrays");
    gl.IsBuffer = findGLFunction((GLuint), GLboolean, "glIsBuffer", "glIsBufferARB");
    gl.IsEnabled = findGLFunction((GLenum), GLboolean, "glIsEnabled");
    gl.IsEnabledi = findGLFunction((GLenum, GLuint), GLboolean, "glIsEnabledi", "glIsEnabledIndexedEXT");
    gl.IsFramebuffer = findGLFunction((GLuint), GLboolean, "glIsFramebuffer", "glIsFramebufferEXT");
    gl.IsList = findGLFunction((GLuint), GLboolean, "glIsList");
    gl.IsProgram = findGLFunction((GLuint), GLboolean, "glIsProgram", "glIsProgramARB");
    gl.IsQuery = findGLFunction((GLuint), GLboolean, "glIsQuery", "glIsQueryARB");
    gl.IsRenderbuffer = findGLFunction((GLuint), GLboolean, "glIsRenderbuffer", "glIsRenderbufferEXT");
    gl.IsSampler = findGLFunction((GLuint), GLboolean, "glIsSampler");
    gl.IsShader = findGLFunction((GLuint), GLboolean, "glIsShader", "glIsShaderARB");
    gl.IsSync = findGLFunction((GLsync), GLboolean, "glIsSync");
    gl.IsTexture = findGLFunction((GLuint), GLboolean, "glIsTexture");
    gl.IsTransformFeedback = findGLFunction((GLuint), GLboolean, "glIsTransformFeedback");
    gl.IsVertexArray = findGLFunction((GLuint), GLboolean, "glIsVertexArray", "glIsVertexArrayAPPLE");
    gl.LightModelf = findGLFunction((GLenum, GLfloat), (), "glLightModelf");
    gl.LightModelfv = findGLFunction((GLenum, Pointer[GLfloat]), (), "glLightModelfv");
    gl.LightModeli = findGLFunction((GLenum, GLint), (), "glLightModeli");
    gl.LightModeliv = findGLFunction((GLenum, Pointer[GLint]), (), "glLightModeliv");
    gl.Lightf = findGLFunction((GLenum, GLenum, GLfloat), (), "glLightf");
    gl.Lightfv = findGLFunction((GLenum, GLenum, Pointer[GLfloat]), (), "glLightfv");
    gl.Lighti = findGLFunction((GLenum, GLenum, GLint), (), "glLighti");
    gl.Lightiv = findGLFunction((GLenum, GLenum, Pointer[GLint]), (), "glLightiv");
    gl.LineStipple = findGLFunction((GLint, GLushort), (), "glLineStipple");
    gl.LineWidth = findGLFunction((GLfloat), (), "glLineWidth");
    gl.LinkProgram = findGLFunction((GLuint), (), "glLinkProgram", "glLinkProgramARB");
    gl.ListBase = findGLFunction((GLuint), (), "glListBase");
    gl.LoadIdentity = findGLFunction((), (), "glLoadIdentity");
    gl.LoadMatrixd = findGLFunction((Pointer[GLdouble]), (), "glLoadMatrixd");
    gl.LoadMatrixf = findGLFunction((Pointer[GLfloat]), (), "glLoadMatrixf");
    gl.LoadName = findGLFunction((GLuint), (), "glLoadName");
    gl.LoadTransposeMatrixd = findGLFunction((GLdouble), (), "glLoadTransposeMatrixd", "glLoadTransposeMatrixdARB");
    gl.LoadTransposeMatrixf = findGLFunction((GLfloat), (), "glLoadTransposeMatrixf", "glLoadTransposeMatrixfARB");
    gl.LogicOp = findGLFunction((GLenum), (), "glLogicOp");
    gl.Map1d = findGLFunction((GLenum, GLdouble, GLdouble, GLint, GLint, Pointer[GLdouble]), (), "glMap1d");
    gl.Map1f = findGLFunction((GLenum, GLfloat, GLfloat, GLint, GLint, Pointer[GLfloat]), (), "glMap1f");
    gl.Map2d = findGLFunction((GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, Pointer[GLdouble]), (), "glMap2d");
    gl.Map2f = findGLFunction((GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, Pointer[GLfloat]), (), "glMap2f");
    gl.MapBuffer = findGLFunction((GLenum, GLenum), Pointer[GLvoid], "glMapBuffer", "glMapBufferARB");
    gl.MapBufferRange = findGLFunction((GLenum, GLintptr, GLsizeiptr, GLbitfield), Pointer[GLvoid], "glMapBufferRange");
    gl.MapGrid1d = findGLFunction((GLint, GLdouble, GLdouble), (), "glMapGrid1d");
    gl.MapGrid1f = findGLFunction((GLint, GLfloat, GLfloat), (), "glMapGrid1f");
    gl.MapGrid2d = findGLFunction((GLint, GLdouble, GLdouble, GLint, GLdouble, GLdouble), (), "glMapGrid2d");
    gl.MapGrid2f = findGLFunction((GLint, GLfloat, GLfloat, GLint, GLfloat, GLfloat), (), "glMapGrid2f");
    gl.Materialf = findGLFunction((GLenum, GLenum, GLfloat), (), "glMaterialf");
    gl.Materialfv = findGLFunction((GLenum, GLenum, Pointer[GLfloat]), (), "glMaterialfv");
    gl.Materiali = findGLFunction((GLenum, GLenum, GLint), (), "glMateriali");
    gl.Materialiv = findGLFunction((GLenum, GLenum, Pointer[GLint]), (), "glMaterialiv");
    gl.MatrixMode = findGLFunction((GLenum), (), "glMatrixMode");
    gl.MultMatrixd = findGLFunction((Pointer[GLdouble]), (), "glMultMatrixd");
    gl.MultMatrixf = findGLFunction((Pointer[GLfloat]), (), "glMultMatrixf");
    gl.MultTransposeMatrixd = findGLFunction((GLdouble), (), "glMultTransposeMatrixd", "glMultTransposeMatrixdARB");
    gl.MultTransposeMatrixf = findGLFunction((GLfloat), (), "glMultTransposeMatrixf", "glMultTransposeMatrixfARB");
    gl.MultiDrawArrays = findGLFunction((GLenum, Pointer[GLint], Pointer[GLsizei], GLsizei), (), "glMultiDrawArrays", "glMultiDrawArraysEXT");
    gl.MultiDrawElements = findGLFunction((GLenum, Pointer[GLsizei], GLenum, Pointer[Pointer[GLvoid]], GLsizei), (), "glMultiDrawElements", "glMultiDrawElementsEXT");
    gl.MultiTexCoord1d = findGLFunction((GLenum, GLdouble), (), "glMultiTexCoord1d", "glMultiTexCoord1dARB");
    gl.MultiTexCoord1dv = findGLFunction((GLenum, Pointer[GLdouble]), (), "glMultiTexCoord1dv", "glMultiTexCoord1dvARB");
    gl.MultiTexCoord1f = findGLFunction((GLenum, GLfloat), (), "glMultiTexCoord1f", "glMultiTexCoord1fARB");
    gl.MultiTexCoord1fv = findGLFunction((GLenum, Pointer[GLfloat]), (), "glMultiTexCoord1fv", "glMultiTexCoord1fvARB");
    gl.MultiTexCoord1i = findGLFunction((GLenum, GLint), (), "glMultiTexCoord1i", "glMultiTexCoord1iARB");
    gl.MultiTexCoord1iv = findGLFunction((GLenum, Pointer[GLint]), (), "glMultiTexCoord1iv", "glMultiTexCoord1ivARB");
    gl.MultiTexCoord1s = findGLFunction((GLenum, GLshort), (), "glMultiTexCoord1s", "glMultiTexCoord1sARB");
    gl.MultiTexCoord1sv = findGLFunction((GLenum, Pointer[GLshort]), (), "glMultiTexCoord1sv", "glMultiTexCoord1svARB");
    gl.MultiTexCoord2d = findGLFunction((GLenum, GLdouble, GLdouble), (), "glMultiTexCoord2d", "glMultiTexCoord2dARB");
    gl.MultiTexCoord2dv = findGLFunction((GLenum, Pointer[GLdouble]), (), "glMultiTexCoord2dv", "glMultiTexCoord2dvARB");
    gl.MultiTexCoord2f = findGLFunction((GLenum, GLfloat, GLfloat), (), "glMultiTexCoord2f", "glMultiTexCoord2fARB");
    gl.MultiTexCoord2fv = findGLFunction((GLenum, Pointer[GLfloat]), (), "glMultiTexCoord2fv", "glMultiTexCoord2fvARB");
    gl.MultiTexCoord2i = findGLFunction((GLenum, GLint, GLint), (), "glMultiTexCoord2i", "glMultiTexCoord2iARB");
    gl.MultiTexCoord2iv = findGLFunction((GLenum, Pointer[GLint]), (), "glMultiTexCoord2iv", "glMultiTexCoord2ivARB");
    gl.MultiTexCoord2s = findGLFunction((GLenum, GLshort, GLshort), (), "glMultiTexCoord2s", "glMultiTexCoord2sARB");
    gl.MultiTexCoord2sv = findGLFunction((GLenum, Pointer[GLshort]), (), "glMultiTexCoord2sv", "glMultiTexCoord2svARB");
    gl.MultiTexCoord3d = findGLFunction((GLenum, GLdouble, GLdouble, GLdouble), (), "glMultiTexCoord3d", "glMultiTexCoord3dARB");
    gl.MultiTexCoord3dv = findGLFunction((GLenum, Pointer[GLdouble]), (), "glMultiTexCoord3dv", "glMultiTexCoord3dvARB");
    gl.MultiTexCoord3f = findGLFunction((GLenum, GLfloat, GLfloat, GLfloat), (), "glMultiTexCoord3f", "glMultiTexCoord3fARB");
    gl.MultiTexCoord3fv = findGLFunction((GLenum, Pointer[GLfloat]), (), "glMultiTexCoord3fv", "glMultiTexCoord3fvARB");
    gl.MultiTexCoord3i = findGLFunction((GLenum, GLint, GLint, GLint), (), "glMultiTexCoord3i", "glMultiTexCoord3iARB");
    gl.MultiTexCoord3iv = findGLFunction((GLenum, Pointer[GLint]), (), "glMultiTexCoord3iv", "glMultiTexCoord3ivARB");
    gl.MultiTexCoord3s = findGLFunction((GLenum, GLshort, GLshort, GLshort), (), "glMultiTexCoord3s", "glMultiTexCoord3sARB");
    gl.MultiTexCoord3sv = findGLFunction((GLenum, Pointer[GLshort]), (), "glMultiTexCoord3sv", "glMultiTexCoord3svARB");
    gl.MultiTexCoord4d = findGLFunction((GLenum, GLdouble, GLdouble, GLdouble, GLdouble), (), "glMultiTexCoord4d", "glMultiTexCoord4dARB");
    gl.MultiTexCoord4dv = findGLFunction((GLenum, Pointer[GLdouble]), (), "glMultiTexCoord4dv", "glMultiTexCoord4dvARB");
    gl.MultiTexCoord4f = findGLFunction((GLenum, GLfloat, GLfloat, GLfloat, GLfloat), (), "glMultiTexCoord4f", "glMultiTexCoord4fARB");
    gl.MultiTexCoord4fv = findGLFunction((GLenum, Pointer[GLfloat]), (), "glMultiTexCoord4fv", "glMultiTexCoord4fvARB");
    gl.MultiTexCoord4i = findGLFunction((GLenum, GLint, GLint, GLint, GLint), (), "glMultiTexCoord4i", "glMultiTexCoord4iARB");
    gl.MultiTexCoord4iv = findGLFunction((GLenum, Pointer[GLint]), (), "glMultiTexCoord4iv", "glMultiTexCoord4ivARB");
    gl.MultiTexCoord4s = findGLFunction((GLenum, GLshort, GLshort, GLshort, GLshort), (), "glMultiTexCoord4s", "glMultiTexCoord4sARB");
    gl.MultiTexCoord4sv = findGLFunction((GLenum, Pointer[GLshort]), (), "glMultiTexCoord4sv", "glMultiTexCoord4svARB");
    gl.MultiTexCoordP1ui = findGLFunction((GLenum, GLenum, GLuint), (), "glMultiTexCoordP1ui");
    gl.MultiTexCoordP1uiv = findGLFunction((GLenum, GLenum, Pointer[GLuint]), (), "glMultiTexCoordP1uiv");
    gl.MultiTexCoordP2ui = findGLFunction((GLenum, GLenum, GLuint), (), "glMultiTexCoordP2ui");
    gl.MultiTexCoordP2uiv = findGLFunction((GLenum, GLenum, Pointer[GLuint]), (), "glMultiTexCoordP2uiv");
    gl.MultiTexCoordP3ui = findGLFunction((GLenum, GLenum, GLuint), (), "glMultiTexCoordP3ui");
    gl.MultiTexCoordP3uiv = findGLFunction((GLenum, GLenum, Pointer[GLuint]), (), "glMultiTexCoordP3uiv");
    gl.MultiTexCoordP4ui = findGLFunction((GLenum, GLenum, GLuint), (), "glMultiTexCoordP4ui");
    gl.MultiTexCoordP4uiv = findGLFunction((GLenum, GLenum, Pointer[GLuint]), (), "glMultiTexCoordP4uiv");
    gl.NewList = findGLFunction((GLuint, GLenum), (), "glNewList");
    gl.Normal3b = findGLFunction((GLbyte, GLbyte, GLbyte), (), "glNormal3b");
    gl.Normal3bv = findGLFunction((Pointer[GLbyte]), (), "glNormal3bv");
    gl.Normal3d = findGLFunction((GLdouble, GLdouble, GLdouble), (), "glNormal3d");
    gl.Normal3dv = findGLFunction((Pointer[GLdouble]), (), "glNormal3dv");
    gl.Normal3f = findGLFunction((GLfloat, GLfloat, GLfloat), (), "glNormal3f");
    gl.Normal3fv = findGLFunction((Pointer[GLfloat]), (), "glNormal3fv");
    gl.Normal3i = findGLFunction((GLint, GLint, GLint), (), "glNormal3i");
    gl.Normal3iv = findGLFunction((Pointer[GLint]), (), "glNormal3iv");
    gl.Normal3s = findGLFunction((GLshort, GLshort, GLshort), (), "glNormal3s");
    gl.Normal3sv = findGLFunction((Pointer[GLshort]), (), "glNormal3sv");
    gl.NormalP3ui = findGLFunction((GLenum, GLuint), (), "glNormalP3ui");
    gl.NormalP3uiv = findGLFunction((GLenum, Pointer[GLuint]), (), "glNormalP3uiv");
    gl.NormalPointer = findGLFunction((GLenum, GLsizei, Pointer[GLvoid]), (), "glNormalPointer");
    gl.Ortho = findGLFunction((GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble), (), "glOrtho");
    gl.PassThrough = findGLFunction((GLfloat), (), "glPassThrough");
    gl.PatchParameterfv = findGLFunction((GLenum, Pointer[GLfloat]), (), "glPatchParameterfv");
    gl.PatchParameteri = findGLFunction((GLenum, GLint), (), "glPatchParameteri");
    gl.PauseTransformFeedback = findGLFunction((), (), "glPauseTransformFeedback");
    gl.PixelMapfv = findGLFunction((GLenum, GLsizei, Pointer[GLfloat]), (), "glPixelMapfv");
    gl.PixelMapuiv = findGLFunction((GLenum, GLsizei, Pointer[GLuint]), (), "glPixelMapuiv");
    gl.PixelMapusv = findGLFunction((GLenum, GLsizei, Pointer[GLushort]), (), "glPixelMapusv");
    gl.PixelStoref = findGLFunction((GLenum, GLfloat), (), "glPixelStoref");
    gl.PixelStorei = findGLFunction((GLenum, GLint), (), "glPixelStorei");
    gl.PixelTransferf = findGLFunction((GLenum, GLfloat), (), "glPixelTransferf");
    gl.PixelTransferi = findGLFunction((GLenum, GLint), (), "glPixelTransferi");
    gl.PixelZoom = findGLFunction((GLfloat, GLfloat), (), "glPixelZoom");
    gl.PointParameterf = findGLFunction((GLenum, GLfloat), (), "glPointParameterf", "glPointParameterfARB");
    gl.PointParameterfv = findGLFunction((GLenum, Pointer[GLfloat]), (), "glPointParameterfv", "glPointParameterfvARB");
    gl.PointParameteri = findGLFunction((GLenum, GLint), (), "glPointParameteri", "glPointParameteriARB");
    gl.PointParameteriv = findGLFunction((GLenum, Pointer[GLint]), (), "glPointParameteriv", "glPointParameterivARB");
    gl.PointSize = findGLFunction((GLfloat), (), "glPointSize");
    gl.PolygonMode = findGLFunction((GLenum, GLenum), (), "glPolygonMode");
    gl.PolygonOffset = findGLFunction((GLfloat, GLfloat), (), "glPolygonOffset");
    gl.PolygonStipple = findGLFunction((Pointer[GLubyte]), (), "glPolygonStipple");
    gl.PopAttrib = findGLFunction((), (), "glPopAttrib");
    gl.PopClientAttrib = findGLFunction((), (), "glPopClientAttrib");
    gl.PopMatrix = findGLFunction((), (), "glPopMatrix");
    gl.PopName = findGLFunction((), (), "glPopName");
    gl.PrimitiveRestartIndex = findGLFunction((GLuint), (), "glPrimitiveRestartIndex");
    gl.PrioritizeTextures = findGLFunction((GLsizei, Pointer[GLuint], Pointer[GLclampf]), (), "glPrioritizeTextures");
    gl.ProgramParameteriARB = findGLFunction((GLuint, GLenum, GLint), (), "glProgramParameteriARB", "glProgramParameteriEXT");
    gl.ProgramUniform1d = findGLFunction((GLuint, GLint, GLdouble), (), "glProgramUniform1d", "glProgramUniform1dEXT");
    gl.ProgramUniform1dv = findGLFunction((GLuint, GLint, GLsizei, Pointer[GLdouble]), (), "glProgramUniform1dv", "glProgramUniform1dvEXT");
    gl.ProgramUniform2d = findGLFunction((GLuint, GLint, GLdouble, GLdouble), (), "glProgramUniform2d", "glProgramUniform2dEXT");
    gl.ProgramUniform2dv = findGLFunction((GLuint, GLint, GLsizei, Pointer[GLdouble]), (), "glProgramUniform2dv", "glProgramUniform2dvEXT");
    gl.ProgramUniform3d = findGLFunction((GLuint, GLint, GLdouble, GLdouble, GLdouble), (), "glProgramUniform3d", "glProgramUniform3dEXT");
    gl.ProgramUniform3dv = findGLFunction((GLuint, GLint, GLsizei, Pointer[GLdouble]), (), "glProgramUniform3dv", "glProgramUniform3dvEXT");
    gl.ProgramUniform4d = findGLFunction((GLuint, GLint, GLdouble, GLdouble, GLdouble, GLdouble), (), "glProgramUniform4d", "glProgramUniform4dEXT");
    gl.ProgramUniform4dv = findGLFunction((GLuint, GLint, GLsizei, Pointer[GLdouble]), (), "glProgramUniform4dv", "glProgramUniform4dvEXT");
    gl.ProgramUniformMatrix2dv = findGLFunction((GLuint, GLint, GLsizei, GLboolean, Pointer[GLdouble]), (), "glProgramUniformMatrix2dv", "glProgramUniformMatrix2dvEXT");
    gl.ProgramUniformMatrix2x3dv = findGLFunction((GLuint, GLint, GLsizei, GLboolean, Pointer[GLdouble]), (), "glProgramUniformMatrix2x3dv", "glProgramUniformMatrix2x3dvEXT");
    gl.ProgramUniformMatrix2x4dv = findGLFunction((GLuint, GLint, GLsizei, GLboolean, Pointer[GLdouble]), (), "glProgramUniformMatrix2x4dv", "glProgramUniformMatrix2x4dvEXT");
    gl.ProgramUniformMatrix3dv = findGLFunction((GLuint, GLint, GLsizei, GLboolean, Pointer[GLdouble]), (), "glProgramUniformMatrix3dv", "glProgramUniformMatrix3dvEXT");
    gl.ProgramUniformMatrix3x2dv = findGLFunction((GLuint, GLint, GLsizei, GLboolean, Pointer[GLdouble]), (), "glProgramUniformMatrix3x2dv", "glProgramUniformMatrix3x2dvEXT");
    gl.ProgramUniformMatrix3x4dv = findGLFunction((GLuint, GLint, GLsizei, GLboolean, Pointer[GLdouble]), (), "glProgramUniformMatrix3x4dv", "glProgramUniformMatrix3x4dvEXT");
    gl.ProgramUniformMatrix4dv = findGLFunction((GLuint, GLint, GLsizei, GLboolean, Pointer[GLdouble]), (), "glProgramUniformMatrix4dv", "glProgramUniformMatrix4dvEXT");
    gl.ProgramUniformMatrix4x2dv = findGLFunction((GLuint, GLint, GLsizei, GLboolean, Pointer[GLdouble]), (), "glProgramUniformMatrix4x2dv", "glProgramUniformMatrix4x2dvEXT");
    gl.ProgramUniformMatrix4x3dv = findGLFunction((GLuint, GLint, GLsizei, GLboolean, Pointer[GLdouble]), (), "glProgramUniformMatrix4x3dv", "glProgramUniformMatrix4x3dvEXT");
    gl.ProvokingVertex = findGLFunction((GLenum), (), "glProvokingVertex");
    gl.PushAttrib = findGLFunction((GLbitfield), (), "glPushAttrib");
    gl.PushClientAttrib = findGLFunction((GLbitfield), (), "glPushClientAttrib");
    gl.PushMatrix = findGLFunction((), (), "glPushMatrix");
    gl.PushName = findGLFunction((GLuint), (), "glPushName");
    gl.QueryCounter = findGLFunction((GLuint, GLenum), (), "glQueryCounter");
    gl.RasterPos2d = findGLFunction((GLdouble, GLdouble), (), "glRasterPos2d");
    gl.RasterPos2dv = findGLFunction((Pointer[GLdouble]), (), "glRasterPos2dv");
    gl.RasterPos2f = findGLFunction((GLfloat, GLfloat), (), "glRasterPos2f");
    gl.RasterPos2fv = findGLFunction((Pointer[GLfloat]), (), "glRasterPos2fv");
    gl.RasterPos2i = findGLFunction((GLint, GLint), (), "glRasterPos2i");
    gl.RasterPos2iv = findGLFunction((Pointer[GLint]), (), "glRasterPos2iv");
    gl.RasterPos2s = findGLFunction((GLshort, GLshort), (), "glRasterPos2s");
    gl.RasterPos2sv = findGLFunction((Pointer[GLshort]), (), "glRasterPos2sv");
    gl.RasterPos3d = findGLFunction((GLdouble, GLdouble, GLdouble), (), "glRasterPos3d");
    gl.RasterPos3dv = findGLFunction((Pointer[GLdouble]), (), "glRasterPos3dv");
    gl.RasterPos3f = findGLFunction((GLfloat, GLfloat, GLfloat), (), "glRasterPos3f");
    gl.RasterPos3fv = findGLFunction((Pointer[GLfloat]), (), "glRasterPos3fv");
    gl.RasterPos3i = findGLFunction((GLint, GLint, GLint), (), "glRasterPos3i");
    gl.RasterPos3iv = findGLFunction((Pointer[GLint]), (), "glRasterPos3iv");
    gl.RasterPos3s = findGLFunction((GLshort, GLshort, GLshort), (), "glRasterPos3s");
    gl.RasterPos3sv = findGLFunction((Pointer[GLshort]), (), "glRasterPos3sv");
    gl.RasterPos4d = findGLFunction((GLdouble, GLdouble, GLdouble, GLdouble), (), "glRasterPos4d");
    gl.RasterPos4dv = findGLFunction((Pointer[GLdouble]), (), "glRasterPos4dv");
    gl.RasterPos4f = findGLFunction((GLfloat, GLfloat, GLfloat, GLfloat), (), "glRasterPos4f");
    gl.RasterPos4fv = findGLFunction((Pointer[GLfloat]), (), "glRasterPos4fv");
    gl.RasterPos4i = findGLFunction((GLint, GLint, GLint, GLint), (), "glRasterPos4i");
    gl.RasterPos4iv = findGLFunction((Pointer[GLint]), (), "glRasterPos4iv");
    gl.RasterPos4s = findGLFunction((GLshort, GLshort, GLshort, GLshort), (), "glRasterPos4s");
    gl.RasterPos4sv = findGLFunction((Pointer[GLshort]), (), "glRasterPos4sv");
    gl.ReadBuffer = findGLFunction((GLenum), (), "glReadBuffer");
    gl.ReadPixels = findGLFunction((GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, Pointer[GLvoid]), (), "glReadPixels");
    gl.Rectd = findGLFunction((GLdouble, GLdouble, GLdouble, GLdouble), (), "glRectd");
    gl.Rectdv = findGLFunction((Pointer[GLdouble], Pointer[GLdouble]), (), "glRectdv");
    gl.Rectf = findGLFunction((GLfloat, GLfloat, GLfloat, GLfloat), (), "glRectf");
    gl.Rectfv = findGLFunction((Pointer[GLfloat], Pointer[GLfloat]), (), "glRectfv");
    gl.Recti = findGLFunction((GLint, GLint, GLint, GLint), (), "glRecti");
    gl.Rectiv = findGLFunction((Pointer[GLint], Pointer[GLint]), (), "glRectiv");
    gl.Rects = findGLFunction((GLshort, GLshort, GLshort, GLshort), (), "glRects");
    gl.Rectsv = findGLFunction((Pointer[GLshort], Pointer[GLshort]), (), "glRectsv");
    gl.RenderMode = findGLFunction((GLenum), GLint, "glRenderMode");
    gl.RenderbufferStorage = findGLFunction((GLenum, GLenum, GLsizei, GLsizei), (), "glRenderbufferStorage", "glRenderbufferStorageEXT");
    gl.RenderbufferStorageMultisample = findGLFunction((GLenum, GLsizei, GLenum, GLsizei, GLsizei), (), "glRenderbufferStorageMultisample", "glRenderbufferStorageMultisampleEXT");
    gl.ResumeTransformFeedback = findGLFunction((), (), "glResumeTransformFeedback");
    gl.Rotated = findGLFunction((GLdouble, GLdouble, GLdouble, GLdouble), (), "glRotated");
    gl.Rotatef = findGLFunction((GLfloat, GLfloat, GLfloat, GLfloat), (), "glRotatef");
    gl.SampleCoverage = findGLFunction((GLclampf, GLboolean), (), "glSampleCoverage", "glSampleCoverageARB");
    gl.SampleMaski = findGLFunction((GLuint, GLbitfield), (), "glSampleMaski");
    gl.SamplerParameterIiv = findGLFunction((GLuint, GLenum, Pointer[GLint]), (), "glSamplerParameterIiv");
    gl.SamplerParameterIuiv = findGLFunction((GLuint, GLenum, Pointer[GLuint]), (), "glSamplerParameterIuiv");
    gl.SamplerParameterf = findGLFunction((GLuint, GLenum, GLfloat), (), "glSamplerParameterf");
    gl.SamplerParameterfv = findGLFunction((GLuint, GLenum, Pointer[GLfloat]), (), "glSamplerParameterfv");
    gl.SamplerParameteri = findGLFunction((GLuint, GLenum, GLint), (), "glSamplerParameteri");
    gl.SamplerParameteriv = findGLFunction((GLuint, GLenum, Pointer[GLint]), (), "glSamplerParameteriv");
    gl.Scaled = findGLFunction((GLdouble, GLdouble, GLdouble), (), "glScaled");
    gl.Scalef = findGLFunction((GLfloat, GLfloat, GLfloat), (), "glScalef");
    gl.Scissor = findGLFunction((GLint, GLint, GLsizei, GLsizei), (), "glScissor");
    gl.SecondaryColor3b = findGLFunction((GLbyte, GLbyte, GLbyte), (), "glSecondaryColor3b", "glSecondaryColor3bEXT");
    gl.SecondaryColor3bv = findGLFunction((Pointer[GLbyte]), (), "glSecondaryColor3bv", "glSecondaryColor3bvEXT");
    gl.SecondaryColor3d = findGLFunction((GLdouble, GLdouble, GLdouble), (), "glSecondaryColor3d", "glSecondaryColor3dEXT");
    gl.SecondaryColor3dv = findGLFunction((Pointer[GLdouble]), (), "glSecondaryColor3dv", "glSecondaryColor3dvEXT");
    gl.SecondaryColor3f = findGLFunction((GLfloat, GLfloat, GLfloat), (), "glSecondaryColor3f", "glSecondaryColor3fEXT");
    gl.SecondaryColor3fv = findGLFunction((Pointer[GLfloat]), (), "glSecondaryColor3fv", "glSecondaryColor3fvEXT");
    gl.SecondaryColor3i = findGLFunction((GLint, GLint, GLint), (), "glSecondaryColor3i", "glSecondaryColor3iEXT");
    gl.SecondaryColor3iv = findGLFunction((Pointer[GLint]), (), "glSecondaryColor3iv", "glSecondaryColor3ivEXT");
    gl.SecondaryColor3s = findGLFunction((GLshort, GLshort, GLshort), (), "glSecondaryColor3s", "glSecondaryColor3sEXT");
    gl.SecondaryColor3sv = findGLFunction((Pointer[GLshort]), (), "glSecondaryColor3sv", "glSecondaryColor3svEXT");
    gl.SecondaryColor3ub = findGLFunction((GLubyte, GLubyte, GLubyte), (), "glSecondaryColor3ub", "glSecondaryColor3ubEXT");
    gl.SecondaryColor3ubv = findGLFunction((Pointer[GLubyte]), (), "glSecondaryColor3ubv", "glSecondaryColor3ubvEXT");
    gl.SecondaryColor3ui = findGLFunction((GLuint, GLuint, GLuint), (), "glSecondaryColor3ui", "glSecondaryColor3uiEXT");
    gl.SecondaryColor3uiv = findGLFunction((Pointer[GLuint]), (), "glSecondaryColor3uiv", "glSecondaryColor3uivEXT");
    gl.SecondaryColor3us = findGLFunction((GLushort, GLushort, GLushort), (), "glSecondaryColor3us", "glSecondaryColor3usEXT");
    gl.SecondaryColor3usv = findGLFunction((Pointer[GLushort]), (), "glSecondaryColor3usv", "glSecondaryColor3usvEXT");
    gl.SecondaryColorP3ui = findGLFunction((GLenum, GLuint), (), "glSecondaryColorP3ui");
    gl.SecondaryColorP3uiv = findGLFunction((GLenum, Pointer[GLuint]), (), "glSecondaryColorP3uiv");
    gl.SecondaryColorPointer = findGLFunction((GLint, GLenum, GLsizei, Pointer[GLvoid]), (), "glSecondaryColorPointer", "glSecondaryColorPointerEXT");
    gl.SelectBuffer = findGLFunction((GLsizei, Pointer[GLuint]), (), "glSelectBuffer");
    gl.ShadeModel = findGLFunction((GLenum), (), "glShadeModel");
    gl.ShaderSource = findGLFunction((GLuint, GLsizei, Pointer[GLstring], Pointer[GLint]), (), "glShaderSource", "glShaderSourceARB");
    gl.StencilFunc = findGLFunction((GLenum, GLint, GLuint), (), "glStencilFunc");
    gl.StencilFuncSeparate = findGLFunction((GLenum, GLenum, GLint, GLuint), (), "glStencilFuncSeparate", "glStencilFuncSeparateATI");
    gl.StencilMask = findGLFunction((GLuint), (), "glStencilMask");
    gl.StencilMaskSeparate = findGLFunction((GLenum, GLuint), (), "glStencilMaskSeparate");
    gl.StencilOp = findGLFunction((GLenum, GLenum, GLenum), (), "glStencilOp");
    gl.StencilOpSeparate = findGLFunction((GLenum, GLenum, GLenum, GLenum), (), "glStencilOpSeparate", "glStencilOpSeparateATI");
    gl.TexBuffer = findGLFunction((GLenum, GLenum, GLuint), (), "glTexBuffer", "glTexBufferEXT");
    gl.TexCoord1d = findGLFunction((GLdouble), (), "glTexCoord1d");
    gl.TexCoord1dv = findGLFunction((Pointer[GLdouble]), (), "glTexCoord1dv");
    gl.TexCoord1f = findGLFunction((GLfloat), (), "glTexCoord1f");
    gl.TexCoord1fv = findGLFunction((Pointer[GLfloat]), (), "glTexCoord1fv");
    gl.TexCoord1i = findGLFunction((GLint), (), "glTexCoord1i");
    gl.TexCoord1iv = findGLFunction((Pointer[GLint]), (), "glTexCoord1iv");
    gl.TexCoord1s = findGLFunction((GLshort), (), "glTexCoord1s");
    gl.TexCoord1sv = findGLFunction((Pointer[GLshort]), (), "glTexCoord1sv");
    gl.TexCoord2d = findGLFunction((GLdouble, GLdouble), (), "glTexCoord2d");
    gl.TexCoord2dv = findGLFunction((Pointer[GLdouble]), (), "glTexCoord2dv");
    gl.TexCoord2f = findGLFunction((GLfloat, GLfloat), (), "glTexCoord2f");
    gl.TexCoord2fv = findGLFunction((Pointer[GLfloat]), (), "glTexCoord2fv");
    gl.TexCoord2i = findGLFunction((GLint, GLint), (), "glTexCoord2i");
    gl.TexCoord2iv = findGLFunction((Pointer[GLint]), (), "glTexCoord2iv");
    gl.TexCoord2s = findGLFunction((GLshort, GLshort), (), "glTexCoord2s");
    gl.TexCoord2sv = findGLFunction((Pointer[GLshort]), (), "glTexCoord2sv");
    gl.TexCoord3d = findGLFunction((GLdouble, GLdouble, GLdouble), (), "glTexCoord3d");
    gl.TexCoord3dv = findGLFunction((Pointer[GLdouble]), (), "glTexCoord3dv");
    gl.TexCoord3f = findGLFunction((GLfloat, GLfloat, GLfloat), (), "glTexCoord3f");
    gl.TexCoord3fv = findGLFunction((Pointer[GLfloat]), (), "glTexCoord3fv");
    gl.TexCoord3i = findGLFunction((GLint, GLint, GLint), (), "glTexCoord3i");
    gl.TexCoord3iv = findGLFunction((Pointer[GLint]), (), "glTexCoord3iv");
    gl.TexCoord3s = findGLFunction((GLshort, GLshort, GLshort), (), "glTexCoord3s");
    gl.TexCoord3sv = findGLFunction((Pointer[GLshort]), (), "glTexCoord3sv");
    gl.TexCoord4d = findGLFunction((GLdouble, GLdouble, GLdouble, GLdouble), (), "glTexCoord4d");
    gl.TexCoord4dv = findGLFunction((Pointer[GLdouble]), (), "glTexCoord4dv");
    gl.TexCoord4f = findGLFunction((GLfloat, GLfloat, GLfloat, GLfloat), (), "glTexCoord4f");
    gl.TexCoord4fv = findGLFunction((Pointer[GLfloat]), (), "glTexCoord4fv");
    gl.TexCoord4i = findGLFunction((GLint, GLint, GLint, GLint), (), "glTexCoord4i");
    gl.TexCoord4iv = findGLFunction((Pointer[GLint]), (), "glTexCoord4iv");
    gl.TexCoord4s = findGLFunction((GLshort, GLshort, GLshort, GLshort), (), "glTexCoord4s");
    gl.TexCoord4sv = findGLFunction((Pointer[GLshort]), (), "glTexCoord4sv");
    gl.TexCoordP1ui = findGLFunction((GLenum, GLuint), (), "glTexCoordP1ui");
    gl.TexCoordP1uiv = findGLFunction((GLenum, Pointer[GLuint]), (), "glTexCoordP1uiv");
    gl.TexCoordP2ui = findGLFunction((GLenum, GLuint), (), "glTexCoordP2ui");
    gl.TexCoordP2uiv = findGLFunction((GLenum, Pointer[GLuint]), (), "glTexCoordP2uiv");
    gl.TexCoordP3ui = findGLFunction((GLenum, GLuint), (), "glTexCoordP3ui");
    gl.TexCoordP3uiv = findGLFunction((GLenum, Pointer[GLuint]), (), "glTexCoordP3uiv");
    gl.TexCoordP4ui = findGLFunction((GLenum, GLuint), (), "glTexCoordP4ui");
    gl.TexCoordP4uiv = findGLFunction((GLenum, Pointer[GLuint]), (), "glTexCoordP4uiv");
    gl.TexCoordPointer = findGLFunction((GLint, GLenum, GLsizei, Pointer[GLvoid]), (), "glTexCoordPointer");
    gl.TexEnvf = findGLFunction((GLenum, GLenum, GLfloat), (), "glTexEnvf");
    gl.TexEnvfv = findGLFunction((GLenum, GLenum, Pointer[GLfloat]), (), "glTexEnvfv");
    gl.TexEnvi = findGLFunction((GLenum, GLenum, GLint), (), "glTexEnvi");
    gl.TexEnviv = findGLFunction((GLenum, GLenum, Pointer[GLint]), (), "glTexEnviv");
    gl.TexGend = findGLFunction((GLenum, GLenum, GLdouble), (), "glTexGend");
    gl.TexGendv = findGLFunction((GLenum, GLenum, Pointer[GLdouble]), (), "glTexGendv");
    gl.TexGenf = findGLFunction((GLenum, GLenum, GLfloat), (), "glTexGenf");
    gl.TexGenfv = findGLFunction((GLenum, GLenum, Pointer[GLfloat]), (), "glTexGenfv");
    gl.TexGeni = findGLFunction((GLenum, GLenum, GLint), (), "glTexGeni");
    gl.TexGeniv = findGLFunction((GLenum, GLenum, Pointer[GLint]), (), "glTexGeniv");
    gl.TexImage1D = findGLFunction((GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, Pointer[GLvoid]), (), "glTexImage1D");
    gl.TexImage2D = findGLFunction((GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, Pointer[GLvoid]), (), "glTexImage2D");
    gl.TexImage2DMultisample = findGLFunction((GLenum, GLsizei, GLint, GLsizei, GLsizei, GLboolean), (), "glTexImage2DMultisample");
    gl.TexImage3D = findGLFunction((GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, Pointer[GLvoid]), (), "glTexImage3D", "glTexImage3DEXT");
    gl.TexImage3DMultisample = findGLFunction((GLenum, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean), (), "glTexImage3DMultisample");
    gl.TexParameterIiv = findGLFunction((GLenum, GLenum, Pointer[GLint]), (), "glTexParameterIiv", "glTexParameterIivEXT");
    gl.TexParameterIuiv = findGLFunction((GLenum, GLenum, Pointer[GLuint]), (), "glTexParameterIuiv", "glTexParameterIuivEXT");
    gl.TexParameterf = findGLFunction((GLenum, GLenum, GLfloat), (), "glTexParameterf");
    gl.TexParameterfv = findGLFunction((GLenum, GLenum, Pointer[GLfloat]), (), "glTexParameterfv");
    gl.TexParameteri = findGLFunction((GLenum, GLenum, GLint), (), "glTexParameteri");
    gl.TexParameteriv = findGLFunction((GLenum, GLenum, Pointer[GLint]), (), "glTexParameteriv");
    gl.TexSubImage1D = findGLFunction((GLenum, GLint, GLint, GLsizei, GLenum, GLenum, Pointer[GLvoid]), (), "glTexSubImage1D");
    gl.TexSubImage2D = findGLFunction((GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, Pointer[GLvoid]), (), "glTexSubImage2D");
    gl.TexSubImage3D = findGLFunction((GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, Pointer[GLvoid]), (), "glTexSubImage3D", "glTexSubImage3DEXT");
    gl.TransformFeedbackVaryings = findGLFunction((GLuint, GLsizei, Pointer[GLstring], GLenum), (), "glTransformFeedbackVaryings", "glTransformFeedbackVaryingsEXT");
    gl.Translated = findGLFunction((GLdouble, GLdouble, GLdouble), (), "glTranslated");
    gl.Translatef = findGLFunction((GLfloat, GLfloat, GLfloat), (), "glTranslatef");
    gl.Uniform1d = findGLFunction((GLint, GLdouble), (), "glUniform1d");
    gl.Uniform1dv = findGLFunction((GLint, GLsizei, Pointer[GLdouble]), (), "glUniform1dv");
    gl.Uniform1f = findGLFunction((GLint, GLfloat), (), "glUniform1f", "glUniform1fARB");
    gl.Uniform1fv = findGLFunction((GLint, GLsizei, Pointer[GLfloat]), (), "glUniform1fv", "glUniform1fvARB");
    gl.Uniform1i = findGLFunction((GLint, GLint), (), "glUniform1i", "glUniform1iARB");
    gl.Uniform1iv = findGLFunction((GLint, GLsizei, Pointer[GLint]), (), "glUniform1iv", "glUniform1ivARB");
    gl.Uniform1ui = findGLFunction((GLint, GLuint), (), "glUniform1ui", "glUniform1uiEXT");
    gl.Uniform1uiv = findGLFunction((GLint, GLsizei, Pointer[GLuint]), (), "glUniform1uiv", "glUniform1uivEXT");
    gl.Uniform2d = findGLFunction((GLint, GLdouble, GLdouble), (), "glUniform2d");
    gl.Uniform2dv = findGLFunction((GLint, GLsizei, Pointer[GLdouble]), (), "glUniform2dv");
    gl.Uniform2f = findGLFunction((GLint, GLfloat, GLfloat), (), "glUniform2f", "glUniform2fARB");
    gl.Uniform2fv = findGLFunction((GLint, GLsizei, Pointer[GLfloat]), (), "glUniform2fv", "glUniform2fvARB");
    gl.Uniform2i = findGLFunction((GLint, GLint, GLint), (), "glUniform2i", "glUniform2iARB");
    gl.Uniform2iv = findGLFunction((GLint, GLsizei, Pointer[GLint]), (), "glUniform2iv", "glUniform2ivARB");
    gl.Uniform2ui = findGLFunction((GLint, GLuint, GLuint), (), "glUniform2ui", "glUniform2uiEXT");
    gl.Uniform2uiv = findGLFunction((GLint, GLsizei, Pointer[GLuint]), (), "glUniform2uiv", "glUniform2uivEXT");
    gl.Uniform3d = findGLFunction((GLint, GLdouble, GLdouble, GLdouble), (), "glUniform3d");
    gl.Uniform3dv = findGLFunction((GLint, GLsizei, Pointer[GLdouble]), (), "glUniform3dv");
    gl.Uniform3f = findGLFunction((GLint, GLfloat, GLfloat, GLfloat), (), "glUniform3f", "glUniform3fARB");
    gl.Uniform3fv = findGLFunction((GLint, GLsizei, Pointer[GLfloat]), (), "glUniform3fv", "glUniform3fvARB");
    gl.Uniform3i = findGLFunction((GLint, GLint, GLint, GLint), (), "glUniform3i", "glUniform3iARB");
    gl.Uniform3iv = findGLFunction((GLint, GLsizei, Pointer[GLint]), (), "glUniform3iv", "glUniform3ivARB");
    gl.Uniform3ui = findGLFunction((GLint, GLuint, GLuint, GLuint), (), "glUniform3ui", "glUniform3uiEXT");
    gl.Uniform3uiv = findGLFunction((GLint, GLsizei, Pointer[GLuint]), (), "glUniform3uiv", "glUniform3uivEXT");
    gl.Uniform4d = findGLFunction((GLint, GLdouble, GLdouble, GLdouble, GLdouble), (), "glUniform4d");
    gl.Uniform4dv = findGLFunction((GLint, GLsizei, Pointer[GLdouble]), (), "glUniform4dv");
    gl.Uniform4f = findGLFunction((GLint, GLfloat, GLfloat, GLfloat, GLfloat), (), "glUniform4f", "glUniform4fARB");
    gl.Uniform4fv = findGLFunction((GLint, GLsizei, Pointer[GLfloat]), (), "glUniform4fv", "glUniform4fvARB");
    gl.Uniform4i = findGLFunction((GLint, GLint, GLint, GLint, GLint), (), "glUniform4i", "glUniform4iARB");
    gl.Uniform4iv = findGLFunction((GLint, GLsizei, Pointer[GLint]), (), "glUniform4iv", "glUniform4ivARB");
    gl.Uniform4ui = findGLFunction((GLint, GLuint, GLuint, GLuint, GLuint), (), "glUniform4ui", "glUniform4uiEXT");
    gl.Uniform4uiv = findGLFunction((GLint, GLsizei, Pointer[GLuint]), (), "glUniform4uiv", "glUniform4uivEXT");
    gl.UniformBlockBinding = findGLFunction((GLuint, GLuint, GLuint), (), "glUniformBlockBinding");
    gl.UniformMatrix2dv = findGLFunction((GLint, GLsizei, GLboolean, Pointer[GLdouble]), (), "glUniformMatrix2dv");
    gl.UniformMatrix2fv = findGLFunction((GLint, GLsizei, GLboolean, Pointer[GLfloat]), (), "glUniformMatrix2fv", "glUniformMatrix2fvARB");
    gl.UniformMatrix2x3dv = findGLFunction((GLint, GLsizei, GLboolean, Pointer[GLdouble]), (), "glUniformMatrix2x3dv");
    gl.UniformMatrix2x3fv = findGLFunction((GLint, GLsizei, GLboolean, Pointer[GLfloat]), (), "glUniformMatrix2x3fv");
    gl.UniformMatrix2x4dv = findGLFunction((GLint, GLsizei, GLboolean, Pointer[GLdouble]), (), "glUniformMatrix2x4dv");
    gl.UniformMatrix2x4fv = findGLFunction((GLint, GLsizei, GLboolean, Pointer[GLfloat]), (), "glUniformMatrix2x4fv");
    gl.UniformMatrix3dv = findGLFunction((GLint, GLsizei, GLboolean, Pointer[GLdouble]), (), "glUniformMatrix3dv");
    gl.UniformMatrix3fv = findGLFunction((GLint, GLsizei, GLboolean, Pointer[GLfloat]), (), "glUniformMatrix3fv", "glUniformMatrix3fvARB");
    gl.UniformMatrix3x2dv = findGLFunction((GLint, GLsizei, GLboolean, Pointer[GLdouble]), (), "glUniformMatrix3x2dv");
    gl.UniformMatrix3x2fv = findGLFunction((GLint, GLsizei, GLboolean, Pointer[GLfloat]), (), "glUniformMatrix3x2fv");
    gl.UniformMatrix3x4dv = findGLFunction((GLint, GLsizei, GLboolean, Pointer[GLdouble]), (), "glUniformMatrix3x4dv");
    gl.UniformMatrix3x4fv = findGLFunction((GLint, GLsizei, GLboolean, Pointer[GLfloat]), (), "glUniformMatrix3x4fv");
    gl.UniformMatrix4dv = findGLFunction((GLint, GLsizei, GLboolean, Pointer[GLdouble]), (), "glUniformMatrix4dv");
    gl.UniformMatrix4fv = findGLFunction((GLint, GLsizei, GLboolean, Pointer[GLfloat]), (), "glUniformMatrix4fv", "glUniformMatrix4fvARB");
    gl.UniformMatrix4x2dv = findGLFunction((GLint, GLsizei, GLboolean, Pointer[GLdouble]), (), "glUniformMatrix4x2dv");
    gl.UniformMatrix4x2fv = findGLFunction((GLint, GLsizei, GLboolean, Pointer[GLfloat]), (), "glUniformMatrix4x2fv");
    gl.UniformMatrix4x3dv = findGLFunction((GLint, GLsizei, GLboolean, Pointer[GLdouble]), (), "glUniformMatrix4x3dv");
    gl.UniformMatrix4x3fv = findGLFunction((GLint, GLsizei, GLboolean, Pointer[GLfloat]), (), "glUniformMatrix4x3fv");
    gl.UniformSubroutinesuiv = findGLFunction((GLenum, GLsizei, Pointer[GLuint]), (), "glUniformSubroutinesuiv");
    gl.UnmapBuffer = findGLFunction((GLenum), GLboolean, "glUnmapBuffer", "glUnmapBufferARB");
    gl.UseProgram = findGLFunction((GLuint), (), "glUseProgram", "glUseProgramObjectARB");
    gl.ValidateProgram = findGLFunction((GLuint), (), "glValidateProgram", "glValidateProgramARB");
    gl.Vertex2d = findGLFunction((GLdouble, GLdouble), (), "glVertex2d");
    gl.Vertex2dv = findGLFunction((Pointer[GLdouble]), (), "glVertex2dv");
    gl.Vertex2f = findGLFunction((GLfloat, GLfloat), (), "glVertex2f");
    gl.Vertex2fv = findGLFunction((Pointer[GLfloat]), (), "glVertex2fv");
    gl.Vertex2i = findGLFunction((GLint, GLint), (), "glVertex2i");
    gl.Vertex2iv = findGLFunction((Pointer[GLint]), (), "glVertex2iv");
    gl.Vertex2s = findGLFunction((GLshort, GLshort), (), "glVertex2s");
    gl.Vertex2sv = findGLFunction((Pointer[GLshort]), (), "glVertex2sv");
    gl.Vertex3d = findGLFunction((GLdouble, GLdouble, GLdouble), (), "glVertex3d");
    gl.Vertex3dv = findGLFunction((Pointer[GLdouble]), (), "glVertex3dv");
    gl.Vertex3f = findGLFunction((GLfloat, GLfloat, GLfloat), (), "glVertex3f");
    gl.Vertex3fv = findGLFunction((Pointer[GLfloat]), (), "glVertex3fv");
    gl.Vertex3i = findGLFunction((GLint, GLint, GLint), (), "glVertex3i");
    gl.Vertex3iv = findGLFunction((Pointer[GLint]), (), "glVertex3iv");
    gl.Vertex3s = findGLFunction((GLshort, GLshort, GLshort), (), "glVertex3s");
    gl.Vertex3sv = findGLFunction((Pointer[GLshort]), (), "glVertex3sv");
    gl.Vertex4d = findGLFunction((GLdouble, GLdouble, GLdouble, GLdouble), (), "glVertex4d");
    gl.Vertex4dv = findGLFunction((Pointer[GLdouble]), (), "glVertex4dv");
    gl.Vertex4f = findGLFunction((GLfloat, GLfloat, GLfloat, GLfloat), (), "glVertex4f");
    gl.Vertex4fv = findGLFunction((Pointer[GLfloat]), (), "glVertex4fv");
    gl.Vertex4i = findGLFunction((GLint, GLint, GLint, GLint), (), "glVertex4i");
    gl.Vertex4iv = findGLFunction((Pointer[GLint]), (), "glVertex4iv");
    gl.Vertex4s = findGLFunction((GLshort, GLshort, GLshort, GLshort), (), "glVertex4s");
    gl.Vertex4sv = findGLFunction((Pointer[GLshort]), (), "glVertex4sv");
    gl.VertexAttrib1d = findGLFunction((GLuint, GLdouble), (), "glVertexAttrib1d", "glVertexAttrib1dARB");
    gl.VertexAttrib1dv = findGLFunction((GLuint, Pointer[GLdouble]), (), "glVertexAttrib1dv", "glVertexAttrib1dvARB");
    gl.VertexAttrib1f = findGLFunction((GLuint, GLfloat), (), "glVertexAttrib1f", "glVertexAttrib1fARB");
    gl.VertexAttrib1fv = findGLFunction((GLuint, Pointer[GLfloat]), (), "glVertexAttrib1fv", "glVertexAttrib1fvARB");
    gl.VertexAttrib1s = findGLFunction((GLuint, GLshort), (), "glVertexAttrib1s", "glVertexAttrib1sARB");
    gl.VertexAttrib1sv = findGLFunction((GLuint, Pointer[GLshort]), (), "glVertexAttrib1sv", "glVertexAttrib1svARB");
    gl.VertexAttrib2d = findGLFunction((GLuint, GLdouble, GLdouble), (), "glVertexAttrib2d", "glVertexAttrib2dARB");
    gl.VertexAttrib2dv = findGLFunction((GLuint, Pointer[GLdouble]), (), "glVertexAttrib2dv", "glVertexAttrib2dvARB");
    gl.VertexAttrib2f = findGLFunction((GLuint, GLfloat, GLfloat), (), "glVertexAttrib2f", "glVertexAttrib2fARB");
    gl.VertexAttrib2fv = findGLFunction((GLuint, Pointer[GLfloat]), (), "glVertexAttrib2fv", "glVertexAttrib2fvARB");
    gl.VertexAttrib2s = findGLFunction((GLuint, GLshort, GLshort), (), "glVertexAttrib2s", "glVertexAttrib2sARB");
    gl.VertexAttrib2sv = findGLFunction((GLuint, Pointer[GLshort]), (), "glVertexAttrib2sv", "glVertexAttrib2svARB");
    gl.VertexAttrib3d = findGLFunction((GLuint, GLdouble, GLdouble, GLdouble), (), "glVertexAttrib3d", "glVertexAttrib3dARB");
    gl.VertexAttrib3dv = findGLFunction((GLuint, Pointer[GLdouble]), (), "glVertexAttrib3dv", "glVertexAttrib3dvARB");
    gl.VertexAttrib3f = findGLFunction((GLuint, GLfloat, GLfloat, GLfloat), (), "glVertexAttrib3f", "glVertexAttrib3fARB");
    gl.VertexAttrib3fv = findGLFunction((GLuint, Pointer[GLfloat]), (), "glVertexAttrib3fv", "glVertexAttrib3fvARB");
    gl.VertexAttrib3s = findGLFunction((GLuint, GLshort, GLshort, GLshort), (), "glVertexAttrib3s", "glVertexAttrib3sARB");
    gl.VertexAttrib3sv = findGLFunction((GLuint, Pointer[GLshort]), (), "glVertexAttrib3sv", "glVertexAttrib3svARB");
    gl.VertexAttrib4Nbv = findGLFunction((GLuint, Pointer[GLbyte]), (), "glVertexAttrib4Nbv", "glVertexAttrib4NbvARB");
    gl.VertexAttrib4Niv = findGLFunction((GLuint, Pointer[GLint]), (), "glVertexAttrib4Niv", "glVertexAttrib4NivARB");
    gl.VertexAttrib4Nsv = findGLFunction((GLuint, Pointer[GLshort]), (), "glVertexAttrib4Nsv", "glVertexAttrib4NsvARB");
    gl.VertexAttrib4Nub = findGLFunction((GLuint, GLubyte, GLubyte, GLubyte, GLubyte), (), "glVertexAttrib4Nub", "glVertexAttrib4NubARB");
    gl.VertexAttrib4Nubv = findGLFunction((GLuint, Pointer[GLubyte]), (), "glVertexAttrib4Nubv", "glVertexAttrib4NubvARB");
    gl.VertexAttrib4Nuiv = findGLFunction((GLuint, Pointer[GLuint]), (), "glVertexAttrib4Nuiv", "glVertexAttrib4NuivARB");
    gl.VertexAttrib4Nusv = findGLFunction((GLuint, Pointer[GLushort]), (), "glVertexAttrib4Nusv", "glVertexAttrib4NusvARB");
    gl.VertexAttrib4bv = findGLFunction((GLuint, Pointer[GLbyte]), (), "glVertexAttrib4bv", "glVertexAttrib4bvARB");
    gl.VertexAttrib4d = findGLFunction((GLuint, GLdouble, GLdouble, GLdouble, GLdouble), (), "glVertexAttrib4d", "glVertexAttrib4dARB");
    gl.VertexAttrib4dv = findGLFunction((GLuint, Pointer[GLdouble]), (), "glVertexAttrib4dv", "glVertexAttrib4dvARB");
    gl.VertexAttrib4f = findGLFunction((GLuint, GLfloat, GLfloat, GLfloat, GLfloat), (), "glVertexAttrib4f", "glVertexAttrib4fARB");
    gl.VertexAttrib4fv = findGLFunction((GLuint, Pointer[GLfloat]), (), "glVertexAttrib4fv", "glVertexAttrib4fvARB");
    gl.VertexAttrib4iv = findGLFunction((GLuint, Pointer[GLint]), (), "glVertexAttrib4iv", "glVertexAttrib4ivARB");
    gl.VertexAttrib4s = findGLFunction((GLuint, GLshort, GLshort, GLshort, GLshort), (), "glVertexAttrib4s", "glVertexAttrib4sARB");
    gl.VertexAttrib4sv = findGLFunction((GLuint, Pointer[GLshort]), (), "glVertexAttrib4sv", "glVertexAttrib4svARB");
    gl.VertexAttrib4ubv = findGLFunction((GLuint, Pointer[GLubyte]), (), "glVertexAttrib4ubv", "glVertexAttrib4ubvARB");
    gl.VertexAttrib4uiv = findGLFunction((GLuint, Pointer[GLuint]), (), "glVertexAttrib4uiv", "glVertexAttrib4uivARB");
    gl.VertexAttrib4usv = findGLFunction((GLuint, Pointer[GLushort]), (), "glVertexAttrib4usv", "glVertexAttrib4usvARB");
    gl.VertexAttribIPointer = findGLFunction((GLuint, GLint, GLenum, GLsizei, Pointer[GLvoid]), (), "glVertexAttribIPointer", "glVertexAttribIPointerEXT");
    gl.VertexAttribP1ui = findGLFunction((GLuint, GLenum, GLboolean, GLuint), (), "glVertexAttribP1ui");
    gl.VertexAttribP1uiv = findGLFunction((GLuint, GLenum, GLboolean, Pointer[GLuint]), (), "glVertexAttribP1uiv");
    gl.VertexAttribP2ui = findGLFunction((GLuint, GLenum, GLboolean, GLuint), (), "glVertexAttribP2ui");
    gl.VertexAttribP2uiv = findGLFunction((GLuint, GLenum, GLboolean, Pointer[GLuint]), (), "glVertexAttribP2uiv");
    gl.VertexAttribP3ui = findGLFunction((GLuint, GLenum, GLboolean, GLuint), (), "glVertexAttribP3ui");
    gl.VertexAttribP3uiv = findGLFunction((GLuint, GLenum, GLboolean, Pointer[GLuint]), (), "glVertexAttribP3uiv");
    gl.VertexAttribP4ui = findGLFunction((GLuint, GLenum, GLboolean, GLuint), (), "glVertexAttribP4ui");
    gl.VertexAttribP4uiv = findGLFunction((GLuint, GLenum, GLboolean, Pointer[GLuint]), (), "glVertexAttribP4uiv");
    gl.VertexAttribPointer = findGLFunction((GLuint, GLint, GLenum, GLboolean, GLsizei, Pointer[GLvoid]), (), "glVertexAttribPointer", "glVertexAttribPointerARB");
    gl.VertexP2ui = findGLFunction((GLenum, GLuint), (), "glVertexP2ui");
    gl.VertexP2uiv = findGLFunction((GLenum, Pointer[GLuint]), (), "glVertexP2uiv");
    gl.VertexP3ui = findGLFunction((GLenum, GLuint), (), "glVertexP3ui");
    gl.VertexP3uiv = findGLFunction((GLenum, Pointer[GLuint]), (), "glVertexP3uiv");
    gl.VertexP4ui = findGLFunction((GLenum, GLuint), (), "glVertexP4ui");
    gl.VertexP4uiv = findGLFunction((GLenum, Pointer[GLuint]), (), "glVertexP4uiv");
    gl.VertexPointer = findGLFunction((GLint, GLenum, GLsizei, Pointer[GLvoid]), (), "glVertexPointer");
    gl.Viewport = findGLFunction((GLint, GLint, GLsizei, GLsizei), (), "glViewport");
    gl.WaitSync = findGLFunction((GLsync, GLbitfield, GLuint64), (), "glWaitSync");
    gl.WindowPos2d = findGLFunction((GLdouble, GLdouble), (), "glWindowPos2d", "glWindowPos2dARB");
    gl.WindowPos2dv = findGLFunction((Pointer[GLdouble]), (), "glWindowPos2dv", "glWindowPos2dvARB");
    gl.WindowPos2f = findGLFunction((GLfloat, GLfloat), (), "glWindowPos2f", "glWindowPos2fARB");
    gl.WindowPos2fv = findGLFunction((Pointer[GLfloat]), (), "glWindowPos2fv", "glWindowPos2fvARB");
    gl.WindowPos2i = findGLFunction((GLint, GLint), (), "glWindowPos2i", "glWindowPos2iARB");
    gl.WindowPos2iv = findGLFunction((Pointer[GLint]), (), "glWindowPos2iv", "glWindowPos2ivARB");
    gl.WindowPos2s = findGLFunction((GLshort, GLshort), (), "glWindowPos2s", "glWindowPos2sARB");
    gl.WindowPos2sv = findGLFunction((Pointer[GLshort]), (), "glWindowPos2sv", "glWindowPos2svARB");
    gl.WindowPos3d = findGLFunction((GLdouble, GLdouble, GLdouble), (), "glWindowPos3d", "glWindowPos3dARB");
    gl.WindowPos3dv = findGLFunction((Pointer[GLdouble]), (), "glWindowPos3dv", "glWindowPos3dvARB");
    gl.WindowPos3f = findGLFunction((GLfloat, GLfloat, GLfloat), (), "glWindowPos3f", "glWindowPos3fARB");
    gl.WindowPos3fv = findGLFunction((Pointer[GLfloat]), (), "glWindowPos3fv", "glWindowPos3fvARB");
    gl.WindowPos3i = findGLFunction((GLint, GLint, GLint), (), "glWindowPos3i", "glWindowPos3iARB");
    gl.WindowPos3iv = findGLFunction((Pointer[GLint]), (), "glWindowPos3iv", "glWindowPos3ivARB");
    gl.WindowPos3s = findGLFunction((GLshort, GLshort, GLshort), (), "glWindowPos3s", "glWindowPos3sARB");
    gl.WindowPos3sv = findGLFunction((Pointer[GLshort]), (), "glWindowPos3sv", "glWindowPos3svARB");
}

