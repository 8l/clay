import unix;


//
// FileMapping
//

record FileMapping {
    address : Pointer[Byte];
    length : SizeT;
}



//
// constructors, destroy
//

enum MappingMode {
    MAP_READ,
    MAP_READ_WRITE,
    MAP_COPY_ON_WRITE
}

private modeProtection(mode) {
    if (mode == MAP_READ)
        return unix.PROT_READ;
    if (mode == MAP_READ_WRITE)
        return bitwiseOr(unix.PROT_READ, unix.PROT_WRITE);
    if (mode == MAP_COPY_ON_WRITE)
        return bitwiseOr(unix.PROT_READ, unix.PROT_WRITE);
    assert(false);
}

private modeFlags(mode) {
    if (mode == MAP_READ)
        return unix.MAP_SHARED;
    if (mode == MAP_READ_WRITE)
        return unix.MAP_SHARED;
    if (mode == MAP_COPY_ON_WRITE)
        return unix.MAP_PRIVATE;
    assert(false);
}

[A,B | Integer?(A,B)]
overload FileMapping(f:File, mode:MappingMode, offset:A, length:B) {
    var protection = modeProtection(mode);
    var flags = modeFlags(mode);
    var address = unix.syscall(unix.mmap,
                               RawPointer(0),
                               SizeT(length),
                               Int(protection),
                               Int(flags),
                               f.handle,
                               Int64(offset));
    return FileMapping(address, SizeT(length));
}

overload FileMapping(f:File, mode:MappingMode) =
    FileMapping(f, mode, 0, fileSize(f));

overload destroy(fm:FileMapping) {
    unix.syscall(unix.munmap, fm.address, fm.length);
}


// disable default constructor, copy constructor, assignment
overload FileMapping();
overload FileMapping(x:FileMapping);
overload assign(dest:FileMapping, src:FileMapping);



//
// flushMapping
//

flushMapping(fm:FileMapping) {
    unix.syscall(unix.msync, fm.address, fm.length, unix.MS_SYNC);
}
