import base.*;
import files.*;
import unix;

record FileMapping {
    address : Pointer[Byte];
    length : SizeT;
}

overload FileMapping(f:File, offset, length, protection, flags) {
    var address = unix.syscall(unix.mmap,
                               RawPointer(0),
                               SizeT(length),
                               Int(protection),
                               Int(flags),
                               f.handle,
                               Int64(offset));
    return FileMapping(address, SizeT(length));
}

[A,B | Integer?(A,B)]
overload FileMapping(f:File, offset:A, length:B) {
    var protection = bitwiseOr(unix.PROT_READ, unix.PROT_WRITE);
    var flags = unix.MAP_SHARED;
    return FileMapping(f, offset, length, protection, flags);
}

overload FileMapping(f:File) = FileMapping(f, 0, fileSize(f));

overload destroy(fm:FileMapping) {
    unix.syscall(unix.munmap, fm.address, fm.length);
}

// disable default constructor, copy constructor, assignment
overload FileMapping() = unsupported();
overload FileMapping(x:FileMapping) = unsupported();
overload assign(dest:FileMapping, src:FileMapping) = unsupported();
