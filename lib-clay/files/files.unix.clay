import unix;



//
// File
//

private record InnerFile {
    handle : Int;
    owned : Bool;
}

overload SafeRecord?(static InnerFile) = false;

record File {
    inner : SharedPointer[InnerFile];
}



//
// stdin, stdout, stderr
//

var stdin  = File(new InnerFile(0, false));
var stdout = File(new InnerFile(1, false));
var stderr = File(new InnerFile(2, false));



//
// constructors, destroy
//

enum OpenMode {
    READ,
    READ_WRITE,
    CREATE,
    APPEND
}

private openFlags(mode) {
    if (mode == READ)
        return unix.O_RDONLY;
    if (mode == READ_WRITE)
        return unix.O_RDWR;
    if (mode == CREATE)
        return bitwiseOr(unix.O_RDWR, unix.O_CREAT, unix.O_TRUNC);
    if (mode == APPEND)
        return bitwiseOr(unix.O_WRONLY, unix.O_CREAT, unix.O_APPEND);
    assert(false);
}

overload File(path:String, mode:OpenMode) {
    var flags = openFlags(mode);
    var handle = Int();
    if (bitwiseAnd(flags, unix.O_CREAT) != 0)
        handle = unix.open(cstring(path), flags, 0644);
    else
        handle = unix.open(cstring(path), flags);
    if (handle == -1)
        error(unix.errorMessage(), ": ", path);
    return File(new InnerFile(handle, true));
}

overload File(path:String) = File(path, READ);

overload destroy(x:InnerFile) {
    if (x.owned)
        unix.syscall(unix.close, x.handle);
}

// disable default constructor, copy constructor, assignment
overload InnerFile();
overload InnerFile(x:InnerFile);
overload assign(dest:InnerFile, src:InnerFile);



//
// fileHandle
//

fileHandle(f:File) = f.inner^.handle;



//
// read, write, flush
//

[I | Integer?(I)]
overload read(f:File, buffer:Pointer[Byte], n:I) SizeT {
    var result = unix.syscall(unix.read, f.inner^.handle, buffer, SizeT(n));
    return SizeT(result);
}

[I | Integer?(I)]
overload write(f:File, buffer:Pointer[Byte], n:I) {
    unix.syscall(unix.write, f.inner^.handle, buffer, SizeT(n));
}

overload flush(f:File) {
}



//
// fileExists?, fileSize, seek
//

fileExists?(p) {
    var statBuf = unix.Struct_stat();
    var result = unix.lstat(cstring(p), &statBuf);
    return result == 0;
}

fileSize(f:File) {
    var statBuf = unix.Struct_stat();
    unix.syscall(unix.fstat, f.inner^.handle, &statBuf);
    return Int64(statBuf.st_size);
}

enum SeekOrigin {
    SEEK_SET,
    SEEK_CUR,
    SEEK_END
}

private seekWhence(x) {
    if (x == SEEK_SET) return unix.SEEK_SET;
    if (x == SEEK_CUR) return unix.SEEK_CUR;
    if (x == SEEK_END) return unix.SEEK_END;
    assert(false);
}

seek(f:File, offset, whence) {
    return unix.syscall(unix.lseek,
                        f.inner^.handle,
                        Int64(offset),
                        seekWhence(whence));
}

overload seek(f:File, offset) = seek(f, offset, SEEK_SET);
