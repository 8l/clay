
overloadable lines;

overload lines(lvalue f:File) = LineSequenceRef(&f);

inlined overload lines(rvalue f:File) = LineSequenceVal(f);


// LineSequenceRef

private record LineSequenceRef {
    f : Pointer[File];
}

static overload Sequence?(LineSequenceRef) = true;
static overload SequenceElementType(LineSequenceRef) = String;

overload iterator(x:LineSequenceRef) = LineIterator(x.f, false, String());


// LineSequenceVal

private record LineSequenceVal {
    f : File;
}

static overload Sequence?(LineSequenceVal) = true;
static overload SequenceElementType(LineSequenceVal) = String;

overload iterator(x:LineSequenceVal) = LineIterator(&x.f, false, String());


// LineIterator

private record LineIterator {
    file : Pointer[File];
    queued? : Bool;
    string : String;
}

overload hasNext?(x:LineIterator) {
    if (not x.queued?) {
        x.queued? = true;
        x.string = readLine(x.file^);
    }
    return size(x.string) > 0;
}

overload next(x:LineIterator) {
    assert(x.queued?, "next(LineIterator)");
    x.queued? = false;
    return move(x.string);
}
