import base.*;
import streams.*;
import libc;

record File {
    handle : Pointer[libc.FILE];
    owned : Bool;
}

var stdin = File(libc.stdin, false);
var stdout = File(libc.stdout, false);
var stderr = File(libc.stderr, false);

enum OpenMode {
    READ,
    READ_WRITE,
    WRITE,
    WRITE_READ,
    APPEND,
    APPEND_READ
}

private modeString(mode) {
    if (mode == READ)
        return "rb";
    if (mode == READ_WRITE)
        return "r+b";
    if (mode == WRITE)
        return "wb";
    if (mode == WRITE_READ)
        return "w+b";
    if (mode == APPEND)
        return "ab";
    if (mode == APPEND_READ)
        return "a+b";
    assert(false);
}

overload File(path:String, mode:OpenMode) {
    var f = libc.fopen(cstring(path), cstring(modeString(mode)));
    if (isNull(f))
        error("unable to open file: ", path);
    return File(f, true);
}

overload File(path:String) = File(path, READ);

// disable copy constructor
overload File(f:File) = unsupported();

// disable assignment
overload assign(dest:File, src:File) = unsupported();

overload destroy(f:File) {
    if (f.owned)
        libc.fclose(f.handle);
}


// implement byte stream operations

overload read(f:File, buffer:Pointer[Byte], n:SizeT) : SizeT {
    return libc.fread(buffer, SizeT(1), n, f.handle);
}

overload write(f:File, buffer:Pointer[Byte], n:SizeT) {
    libc.fwrite(buffer, SizeT(1), n, f.handle);
}

overload flush(f:File) {
    libc.fflush(f.handle);
}
