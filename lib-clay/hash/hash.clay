
import vectors.generic.*;



//
// booleans, integers, floats, pointers, characters
//

inline overload hash(x:Bool) = SizeT(x);

[T | Integer?(T)]
inline overload hash(x:T) = SizeT(x);

[T | Float?(T)]
inline overload hash(x:T) = SizeT(PtrInt(x*10000));

[T]
inline overload hash(x:Pointer[T]) = SizeT(x);

inline overload hash(x:Char) = SizeT(x);



//
// arrays
//

[T,n]
inline overload hash(a:Array[T,n]) = hashSequence(a);



//
// tuples
//

inline hashValues(..values) {
    var h = SizeT(0);
    static for (x in ..values)
        h = 7*h + 13*hash(x);
    return h;
}
inline overload hashValues(value) = hash(value);

[..T]
inline overload hash(x:Tuple[..T]) = hashValues(..tupleElements(x));


//
// records
//

[T | Record?(T)]
inline overload hash(x:T) = hashValues(..recordFields(x));



//
// enumerations
//

[T | Enum?(T)]
inline overload hash(x:T) = SizeT(x);



//
// shared pointers
//

[T]
inline overload hash(x:SharedPointer[T]) = hash(x.ptr);



//
// strings
//

inline overload hash(a:String) = hashSequence(a);
inline overload hash(a:StringConstant) = hashSequence(a);



//
// vectors
//

[T]
inline overload hash(a:Vector[T]) = hashSequence(a);



//
// hashSequence
//

hashSequence(a) {
    var h = SizeT(0);
    var f = SizeT(11);
    for (x in a) {
        h += f * hashValues(x);
        f = 2*f - 1;
    }
    return h;
}



//
// variants
//

[T | Variant?(T)]
overload hash(x:T) = 23*variantTag(x) + hash(*x);



//
// reference types
//

[T | ReferenceType?(T)]
overload hash(x:T) = hash(referencePtr(x));
