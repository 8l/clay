

//
// RecordFieldType, RecordFieldTypes
//

[T,i | Record?(T)]
RecordFieldType(static T, static i) = Type(recordFieldRef(null(T)^, static SizeT(i)));

[T | Record?(T)]
RecordFieldTypes(static T) = ...RecordFieldTypes2(T, static SizeT(0));

[T,i]
private RecordFieldTypes2(static T, static i) =
    RecordFieldType(T, static i), ...RecordFieldTypes2(T, static i+1);

[T,i | i == RecordFieldCount(T)]
overload RecordFieldTypes2(static T, static i) = ;



//
// RegularRecord?
//
// true if record's value semantics is defined in terms of it's fields
//

[T]
RegularRecord?(static T) = false;

[T | Record?(T)]
overload RegularRecord?(static T) = true;



//
// recordFields
//

[T | Record?(T)]
recordFields(a:T) = ref ...recordFields2(a, static SizeT(0));

[i]
private recordFields2(a, static i) =
    ref recordFieldRef(a, static i), ...recordFields2(a, static i+1);

[T,i | i == RecordFieldCount(T)]
overload recordFields2(a:T, static i) = ;



//
// basic constructor
//

[T, ...A | Record?(T) and (Tuple[...RecordFieldTypes(T)] == Tuple[...A])]
inlined overload T(...args:A) returned:T {
    ...recordFields(returned) <-- ...args;
}



//
// default constructor
//

[T | RegularRecord?(T)]
overload T() returned:T {
    initRecordFields(returned, static SizeT(0));
}

[i]
private initRecordFields(a, static i) {
    initialize(recordFieldRef(a, static i));
    initRecordFields(a, static i+1);
}

[T,i | (i == RecordFieldCount(T))]
overload initRecordFields(a:T, static i) {
}



//
// copy constructor
//

[T | RegularRecord?(T)]
overload T(src:T) returned:T {
    copyRecordFields(returned, src, static SizeT(0));
}

[T,i]
private copyRecordFields(dest:T, src:T, static i) {
    recordFieldRef(dest, static i) <-- recordFieldRef(src, static i);
    copyRecordFields(dest, src, static i+1);
}

[T,i | (i == RecordFieldCount(T))]
overload copyRecordFields(dest:T, src:T, static i) {
}



//
// move constructor
//

[T | RegularRecord?(T)]
overload move(src:T) returned:T {
    moveRecordFields(returned, src, static SizeT(0));
}

[T,i]
private moveRecordFields(dest:T, src:T, static i) {
    recordFieldRef(dest, static i) <-- move(recordFieldRef(src, static i));
    moveRecordFields(dest, src, static i+1);
}

[T,i | (i == RecordFieldCount(T))]
overload moveRecordFields(dest:T, src:T, static i) {
}



//
// destroy
//

[T | RegularRecord?(T)]
overload destroy(a:T) {
    destroyRecordFields(a, static SizeT(0));
}

[i]
private destroyRecordFields(a, static i) {
    destroyRecordFields(a, static i+1);
    destroy(recordFieldRef(a, static i));
}

[T,i | (i == RecordFieldCount(T))]
overload destroyRecordFields (a:T, static i) {
}



//
// assign
//

[T | RegularRecord?(T)]
overload assign(dest:T, src:T) {
    assignRecordFields(dest, src, static SizeT(0));
}

[T,i]
private assignRecordFields(dest:T, src:T, static i) {
    assign(recordFieldRef(dest, static i), recordFieldRef(src, static i));
    assignRecordFields(dest, src, static i+1);
}

[T,i | (i == RecordFieldCount(T))]
overload assignRecordFields(dest:T, src:T, static i) {
}



//
// equals?
//

[T | RegularRecord?(T)]
overload equals?(a:T, b:T) {
    return equalRecordFields?(a, b, static SizeT(0));
}

[T,i]
private equalRecordFields?(a:T, b:T, static i) {
    if (not equals?(recordFieldRef(a, static i), recordFieldRef(b, static i)))
        return false;
    return equalRecordFields?(a, b, static i+1);
}

[T,i |(i == RecordFieldCount(T))]
overload equalRecordFields?(a:T, b:T, static i) {
    return true;
}



//
// lesser?
//

[T | RegularRecord?(T)]
overload lesser?(a:T, b:T) {
    return lesserRecordFields?(a, b, static SizeT(0));
}

[T,i]
private lesserRecordFields?(a:T, b:T, static i) {
    ref af = recordFieldRef(a, static i);
    ref bf = recordFieldRef(b, static i);
    if (lesser?(af, bf))
        return true;
    if (lesser?(bf, af))
        return false;
    return lesserRecordFields?(a, b, static i+1);
}

[T,i |(i == RecordFieldCount(T))]
overload lesserRecordFields?(a:T, b:T, static i) {
    return false;
}



//
// fieldRef, staticIndex
//

[T, FIELD | Record?(T)]
overload fieldRef(x:T, static FIELD) {
    return ref recordFieldRefByName(x, static FIELD);
}

[T, i | Record?(T)]
overload staticIndex(x:T, static i) =
    ref recordFieldRef(x, static i);