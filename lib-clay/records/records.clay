


//
// fieldRef, staticIndex
//

[T, FIELD | Record?(T)]
overload fieldRef(x:T, static FIELD) {
    return ref recordFieldRefByName(x, static FIELD);
}

[T, i | Record?(T)]
overload staticIndex(x:T, static i) =
    ref recordFieldRef(x, static SizeT(i));



//
// RecordFieldType, RecordFieldTypes
//

[T,i | Record?(T)]
RecordFieldType(static T, static i) = Type(staticIndex(null(T)^, static i));

[T | Record?(T)]
RecordFieldTypes(static T) = ...RecordFieldTypes2(T, static 0);

[T,i]
private RecordFieldTypes2(static T, static i) =
    RecordFieldType(T, static i), ...RecordFieldTypes2(T, static i+1);

[T,i | i == RecordFieldCount(T)]
overload RecordFieldTypes2(static T, static i) = ;



//
// RegularRecord?
//
// true if record's value semantics is defined in terms of it's fields
//

[T]
RegularRecord?(static T) = false;

[T | Record?(T)]
overload RegularRecord?(static T) = true;



//
// basic constructor
//

[T, ...A | Record?(T) and (Tuple[...RecordFieldTypes(T)] == Tuple[...A])]
inlined overload T(...args:A) returned:T {
    ...recordFields(returned) <-- ...args;
}



//
// default constructor
//

[T | RegularRecord?(T)]
overload T() returned:T {
    static for (x in ...recordFields(returned))
        initialize(x);
}



//
// copy constructor
//

[T | RegularRecord?(T)]
overload T(src:T) returned:T {
    alias n = RecordFieldCount(T);
    static for (i in ...staticIntegers(static n))
        staticIndex(returned, i) <-- staticIndex(src, i);
}



//
// move constructor
//

[T | RegularRecord?(T)]
overload move(src:T) returned:T {
    alias n = RecordFieldCount(T);
    static for (i in ...staticIntegers(static n))
        staticIndex(returned, i) <-- move(staticIndex(src, i));
}



//
// destroy
//

[T | RegularRecord?(T)]
overload destroy(a:T) {
    static for (x in ...recordFields(a))
        destroy(x);
}



//
// assign
//

[T | RegularRecord?(T)]
overload assign(dest:T, src:T) {
    alias n = RecordFieldCount(T);
    static for (i in ...staticIntegers(static n))
        assign(staticIndex(dest, i), staticIndex(src, i));
}



//
// equals?
//

[T | RegularRecord?(T)]
overload equals?(a:T, b:T) {
    alias n = RecordFieldCount(T);
    static for (i in ...staticIntegers(static n)) {
        if (not equals?(staticIndex(a, i), staticIndex(b, i)))
            return false;
    }
    return true;
}



//
// lesser?
//

[T | RegularRecord?(T)]
overload lesser?(a:T, b:T) {
    alias n = RecordFieldCount(T);
    static for (i in ...staticIntegers(static n)) {
        ref av = staticIndex(a, i);
        ref bv = staticIndex(b, i);
        if (lesser?(av, bv))
            return true;
        if (lesser?(bv, av))
            return false;
    }
    return false;
}
