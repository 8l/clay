
// default constructor

[T|Record?(T)]
overload T() : T {
    initRecordFields(returned, SizeT(0));
}

private overloadable initRecordFields;

[i]
overload initRecordFields(a, static i) {
    initialize(recordFieldRef(a, i));
    initRecordFields(a, i+1);
}

[T,i | (i == RecordFieldCount(T))]
overload initRecordFields(a:T, static i) {
}


// copy constructor

[T|Record?(T)]
overload T(src:T) : T {
    copyRecordFields(returned, src, SizeT(0));
}

private overloadable copyRecordFields;

[T,i]
overload copyRecordFields(dest:T, src:T, static i) {
    recordFieldRef(dest, i) <-- recordFieldRef(src, i);
    copyRecordFields(dest, src, i+1);
}

[T,i | (i == RecordFieldCount(T))]
overload copyRecordFields(dest:T, src:T, static i) {
}


// move constructor

[T|Record?(T)]
overload move(src:T) : T {
    moveRecordFields(returned, src, SizeT(0));
}

private overloadable moveRecordFields;

[T,i]
overload moveRecordFields(dest:T, src:T, static i) {
    recordFieldRef(dest, i) <-- move(recordFieldRef(src, i));
    moveRecordFields(dest, src, i+1);
}

[T,i | (i == RecordFieldCount(T))]
overload moveRecordFields(dest:T, src:T, static i) {
}


// destroy

[T|Record?(T)]
overload destroy(a:T) {
    destroyRecordFields(a, SizeT(0));
}

private overloadable destroyRecordFields;

[i]
overload destroyRecordFields(a, static i) {
    destroy(recordFieldRef(a, i));
    destroyRecordFields(a, i+1);
}

[T, i |(i == RecordFieldCount(T))]
overload destroyRecordFields (a:T, static i) {
}


// assign

[T|Record?(T)]
overload assign(dest:T, src:T) {
    assignRecordFields(dest, src, SizeT(0));
}

private overloadable assignRecordFields;

[T,i]
overload assignRecordFields(dest:T, src:T, static i) {
    assign(recordFieldRef(dest, i), recordFieldRef(src, i));
    assignRecordFields(dest, src, i+1);
}

[T,i | (i == RecordFieldCount(T))]
overload assignRecordFields(dest:T, src:T, static i) {
}


// equals?

[T|Record?(T)]
overload equals?(a:T, b:T) {
    return equalRecordFields?(a, b, SizeT(0));
}

private overloadable equalRecordFields?;

[T,i]
overload equalRecordFields?(a:T, b:T, static i) {
    if (not equals?(recordFieldRef(a, i), recordFieldRef(b, i)))
        return false;
    return equalRecordFields?(a, b, i+1);
}

[T,i |(i == RecordFieldCount(T))]
overload equalRecordFields?(a:T, b:T, static i) {
    return true;
}


// lesser?

[T|Record?(T)]
overload lesser?(a:T, b:T) {
    return lesserRecordFields?(a, b, SizeT(0));
}

private overloadable lesserRecordFields?;

[T,i]
overload lesserRecordFields?(a:T, b:T, static i) {
    ref af = recordFieldRef(a, i);
    ref bf = recordFieldRef(b, i);
    if (lesser?(af, bf))
        return true;
    if (lesser?(bf, af))
        return false;
    return lesserRecordFields?(a, b, i+1);
}

[T,i |(i == RecordFieldCount(T))]
overload lesserRecordFields?(a:T, b:T, static i) {
    return false;
}
