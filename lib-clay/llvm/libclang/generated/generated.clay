/* automatically generated by clay-bindgen */
import libc.*;

alias CXIndex = OpaquePointer;

alias Struct_CXTranslationUnitImpl = Opaque;

alias CXTranslationUnit = Pointer[Struct_CXTranslationUnitImpl];

alias CXClientData = OpaquePointer;

record Struct_CXUnsavedFile (
    Filename : Pointer[CChar],
    Contents : Pointer[CChar],
    Length : CULong,
);

alias Enum_CXAvailabilityKind = UInt;
alias CXAvailability_Available = UInt(0);
alias CXAvailability_Deprecated = UInt(1);
alias CXAvailability_NotAvailable = UInt(2);
alias CXAvailability_NotAccessible = UInt(3);

record Struct_Unnamed1 (
    data : OpaquePointer,
    private_flags : UInt,
);

alias CXString = Struct_Unnamed1;

external (cdecl) clang_getCString(arg0:CXString) : Pointer[CChar];

external (cdecl) clang_disposeString(arg0:CXString) : ;

external (cdecl) clang_createIndex(arg0:Int, arg1:Int) : CXIndex;

external (cdecl) clang_disposeIndex(arg0:CXIndex) : ;

alias Enum_Unnamed2 = UInt;
alias CXGlobalOpt_None = UInt(0);
alias CXGlobalOpt_ThreadBackgroundPriorityForIndexing = UInt(1);
alias CXGlobalOpt_ThreadBackgroundPriorityForEditing = UInt(2);
alias CXGlobalOpt_ThreadBackgroundPriorityForAll = UInt(3);

alias CXGlobalOptFlags = Enum_Unnamed2;

external (cdecl) clang_CXIndex_setGlobalOptions(arg0:CXIndex, arg1:UInt) : ;

external (cdecl) clang_CXIndex_getGlobalOptions(arg0:CXIndex) : UInt;

alias CXFile = OpaquePointer;

external (cdecl) clang_getFileName(arg0:CXFile) : CXString;

external (cdecl) clang_getFileTime(arg0:CXFile) : time_t;

external (cdecl) clang_isFileMultipleIncludeGuarded(arg0:CXTranslationUnit, arg1:CXFile) : UInt;

external (cdecl) clang_getFile(arg0:CXTranslationUnit, arg1:Pointer[CChar]) : CXFile;

record Struct_Unnamed3 (
    ptr_data : Array[OpaquePointer, 2],
    int_data : UInt,
);

alias CXSourceLocation = Struct_Unnamed3;

record Struct_Unnamed4 (
    ptr_data : Array[OpaquePointer, 2],
    begin_int_data : UInt,
    end_int_data : UInt,
);

alias CXSourceRange = Struct_Unnamed4;

external (cdecl) clang_getNullLocation(..) : CXSourceLocation;

external (cdecl) clang_equalLocations(arg0:CXSourceLocation, arg1:CXSourceLocation) : UInt;

external (cdecl) clang_getLocation(arg0:CXTranslationUnit, arg1:CXFile, arg2:UInt, arg3:UInt) : CXSourceLocation;

external (cdecl) clang_getLocationForOffset(arg0:CXTranslationUnit, arg1:CXFile, arg2:UInt) : CXSourceLocation;

external (cdecl) clang_getNullRange(..) : CXSourceRange;

external (cdecl) clang_getRange(arg0:CXSourceLocation, arg1:CXSourceLocation) : CXSourceRange;

external (cdecl) clang_equalRanges(arg0:CXSourceRange, arg1:CXSourceRange) : UInt;

external (cdecl) clang_Range_isNull(arg0:CXSourceRange) : Int;

external (cdecl) clang_getExpansionLocation(arg0:CXSourceLocation, arg1:Pointer[CXFile], arg2:Pointer[UInt], arg3:Pointer[UInt], arg4:Pointer[UInt]) : ;

external (cdecl) clang_getPresumedLocation(arg0:CXSourceLocation, arg1:Pointer[CXString], arg2:Pointer[UInt], arg3:Pointer[UInt]) : ;

external (cdecl) clang_getInstantiationLocation(arg0:CXSourceLocation, arg1:Pointer[CXFile], arg2:Pointer[UInt], arg3:Pointer[UInt], arg4:Pointer[UInt]) : ;

external (cdecl) clang_getSpellingLocation(arg0:CXSourceLocation, arg1:Pointer[CXFile], arg2:Pointer[UInt], arg3:Pointer[UInt], arg4:Pointer[UInt]) : ;

external (cdecl) clang_getRangeStart(arg0:CXSourceRange) : CXSourceLocation;

external (cdecl) clang_getRangeEnd(arg0:CXSourceRange) : CXSourceLocation;

alias Enum_CXDiagnosticSeverity = UInt;
alias CXDiagnostic_Ignored = UInt(0);
alias CXDiagnostic_Note = UInt(1);
alias CXDiagnostic_Warning = UInt(2);
alias CXDiagnostic_Error = UInt(3);
alias CXDiagnostic_Fatal = UInt(4);

alias CXDiagnostic = OpaquePointer;

alias CXDiagnosticSet = OpaquePointer;

external (cdecl) clang_getNumDiagnosticsInSet(arg0:CXDiagnosticSet) : UInt;

external (cdecl) clang_getDiagnosticInSet(arg0:CXDiagnosticSet, arg1:UInt) : CXDiagnostic;

alias Enum_CXLoadDiag_Error = UInt;
alias CXLoadDiag_None = UInt(0);
alias CXLoadDiag_Unknown = UInt(1);
alias CXLoadDiag_CannotLoad = UInt(2);
alias CXLoadDiag_InvalidFile = UInt(3);

external (cdecl) clang_loadDiagnostics(arg0:Pointer[CChar], arg1:Pointer[Enum_CXLoadDiag_Error], arg2:Pointer[CXString]) : CXDiagnosticSet;

external (cdecl) clang_disposeDiagnosticSet(arg0:CXDiagnosticSet) : ;

external (cdecl) clang_getChildDiagnostics(arg0:CXDiagnostic) : CXDiagnosticSet;

external (cdecl) clang_getNumDiagnostics(arg0:CXTranslationUnit) : UInt;

external (cdecl) clang_getDiagnostic(arg0:CXTranslationUnit, arg1:UInt) : CXDiagnostic;

external (cdecl) clang_getDiagnosticSetFromTU(arg0:CXTranslationUnit) : CXDiagnosticSet;

external (cdecl) clang_disposeDiagnostic(arg0:CXDiagnostic) : ;

alias Enum_CXDiagnosticDisplayOptions = UInt;
alias CXDiagnostic_DisplaySourceLocation = UInt(1);
alias CXDiagnostic_DisplayColumn = UInt(2);
alias CXDiagnostic_DisplaySourceRanges = UInt(4);
alias CXDiagnostic_DisplayOption = UInt(8);
alias CXDiagnostic_DisplayCategoryId = UInt(16);
alias CXDiagnostic_DisplayCategoryName = UInt(32);

external (cdecl) clang_formatDiagnostic(arg0:CXDiagnostic, arg1:UInt) : CXString;

external (cdecl) clang_defaultDiagnosticDisplayOptions() : UInt;

external (cdecl) clang_getDiagnosticSeverity(arg0:CXDiagnostic) : Enum_CXDiagnosticSeverity;

external (cdecl) clang_getDiagnosticLocation(arg0:CXDiagnostic) : CXSourceLocation;

external (cdecl) clang_getDiagnosticSpelling(arg0:CXDiagnostic) : CXString;

external (cdecl) clang_getDiagnosticOption(arg0:CXDiagnostic, arg1:Pointer[CXString]) : CXString;

external (cdecl) clang_getDiagnosticCategory(arg0:CXDiagnostic) : UInt;

external (cdecl) clang_getDiagnosticCategoryName(arg0:UInt) : CXString;

external (cdecl) clang_getDiagnosticNumRanges(arg0:CXDiagnostic) : UInt;

external (cdecl) clang_getDiagnosticRange(arg0:CXDiagnostic, arg1:UInt) : CXSourceRange;

external (cdecl) clang_getDiagnosticNumFixIts(arg0:CXDiagnostic) : UInt;

external (cdecl) clang_getDiagnosticFixIt(arg0:CXDiagnostic, arg1:UInt, arg2:Pointer[CXSourceRange]) : CXString;

external (cdecl) clang_getTranslationUnitSpelling(arg0:CXTranslationUnit) : CXString;

external (cdecl) clang_createTranslationUnitFromSourceFile(arg0:CXIndex, arg1:Pointer[CChar], arg2:Int, arg3:Pointer[Pointer[CChar]], arg4:UInt, arg5:Pointer[Struct_CXUnsavedFile]) : CXTranslationUnit;

external (cdecl) clang_createTranslationUnit(arg0:CXIndex, arg1:Pointer[CChar]) : CXTranslationUnit;

alias Enum_CXTranslationUnit_Flags = UInt;
alias CXTranslationUnit_None = UInt(0);
alias CXTranslationUnit_DetailedPreprocessingRecord = UInt(1);
alias CXTranslationUnit_Incomplete = UInt(2);
alias CXTranslationUnit_PrecompiledPreamble = UInt(4);
alias CXTranslationUnit_CacheCompletionResults = UInt(8);
alias CXTranslationUnit_CXXPrecompiledPreamble = UInt(16);
alias CXTranslationUnit_CXXChainedPCH = UInt(32);

external (cdecl) clang_defaultEditingTranslationUnitOptions() : UInt;

external (cdecl) clang_parseTranslationUnit(arg0:CXIndex, arg1:Pointer[CChar], arg2:Pointer[Pointer[CChar]], arg3:Int, arg4:Pointer[Struct_CXUnsavedFile], arg5:UInt, arg6:UInt) : CXTranslationUnit;

alias Enum_CXSaveTranslationUnit_Flags = UInt;
alias CXSaveTranslationUnit_None = UInt(0);

external (cdecl) clang_defaultSaveOptions(arg0:CXTranslationUnit) : UInt;

alias Enum_CXSaveError = UInt;
alias CXSaveError_None = UInt(0);
alias CXSaveError_Unknown = UInt(1);
alias CXSaveError_TranslationErrors = UInt(2);
alias CXSaveError_InvalidTU = UInt(3);

external (cdecl) clang_saveTranslationUnit(arg0:CXTranslationUnit, arg1:Pointer[CChar], arg2:UInt) : Int;

external (cdecl) clang_disposeTranslationUnit(arg0:CXTranslationUnit) : ;

alias Enum_CXReparse_Flags = UInt;
alias CXReparse_None = UInt(0);

external (cdecl) clang_defaultReparseOptions(arg0:CXTranslationUnit) : UInt;

external (cdecl) clang_reparseTranslationUnit(arg0:CXTranslationUnit, arg1:UInt, arg2:Pointer[Struct_CXUnsavedFile], arg3:UInt) : Int;

alias Enum_CXTUResourceUsageKind = UInt;
alias CXTUResourceUsage_AST = UInt(1);
alias CXTUResourceUsage_Identifiers = UInt(2);
alias CXTUResourceUsage_Selectors = UInt(3);
alias CXTUResourceUsage_GlobalCompletionResults = UInt(4);
alias CXTUResourceUsage_SourceManagerContentCache = UInt(5);
alias CXTUResourceUsage_AST_SideTables = UInt(6);
alias CXTUResourceUsage_SourceManager_Membuffer_Malloc = UInt(7);
alias CXTUResourceUsage_SourceManager_Membuffer_MMap = UInt(8);
alias CXTUResourceUsage_ExternalASTSource_Membuffer_Malloc = UInt(9);
alias CXTUResourceUsage_ExternalASTSource_Membuffer_MMap = UInt(10);
alias CXTUResourceUsage_Preprocessor = UInt(11);
alias CXTUResourceUsage_PreprocessingRecord = UInt(12);
alias CXTUResourceUsage_SourceManager_DataStructures = UInt(13);
alias CXTUResourceUsage_Preprocessor_HeaderSearch = UInt(14);
alias CXTUResourceUsage_MEMORY_IN_BYTES_BEGIN = UInt(1);
alias CXTUResourceUsage_MEMORY_IN_BYTES_END = UInt(14);
alias CXTUResourceUsage_First = UInt(1);
alias CXTUResourceUsage_Last = UInt(14);

external (cdecl) clang_getTUResourceUsageName(arg0:Enum_CXTUResourceUsageKind) : Pointer[CChar];

record Struct_CXTUResourceUsageEntry (
    kind : Enum_CXTUResourceUsageKind,
    amount : CULong,
);

alias CXTUResourceUsageEntry = Struct_CXTUResourceUsageEntry;

record Struct_CXTUResourceUsage (
    data : OpaquePointer,
    numEntries : UInt,
    entries : Pointer[CXTUResourceUsageEntry],
);

alias CXTUResourceUsage = Struct_CXTUResourceUsage;

external (cdecl) clang_getCXTUResourceUsage(arg0:CXTranslationUnit) : CXTUResourceUsage;

external (cdecl) clang_disposeCXTUResourceUsage(arg0:CXTUResourceUsage) : ;

alias Enum_CXCursorKind = UInt;
alias CXCursor_UnexposedDecl = UInt(1);
alias CXCursor_StructDecl = UInt(2);
alias CXCursor_UnionDecl = UInt(3);
alias CXCursor_ClassDecl = UInt(4);
alias CXCursor_EnumDecl = UInt(5);
alias CXCursor_FieldDecl = UInt(6);
alias CXCursor_EnumConstantDecl = UInt(7);
alias CXCursor_FunctionDecl = UInt(8);
alias CXCursor_VarDecl = UInt(9);
alias CXCursor_ParmDecl = UInt(10);
alias CXCursor_ObjCInterfaceDecl = UInt(11);
alias CXCursor_ObjCCategoryDecl = UInt(12);
alias CXCursor_ObjCProtocolDecl = UInt(13);
alias CXCursor_ObjCPropertyDecl = UInt(14);
alias CXCursor_ObjCIvarDecl = UInt(15);
alias CXCursor_ObjCInstanceMethodDecl = UInt(16);
alias CXCursor_ObjCClassMethodDecl = UInt(17);
alias CXCursor_ObjCImplementationDecl = UInt(18);
alias CXCursor_ObjCCategoryImplDecl = UInt(19);
alias CXCursor_TypedefDecl = UInt(20);
alias CXCursor_CXXMethod = UInt(21);
alias CXCursor_Namespace = UInt(22);
alias CXCursor_LinkageSpec = UInt(23);
alias CXCursor_Constructor = UInt(24);
alias CXCursor_Destructor = UInt(25);
alias CXCursor_ConversionFunction = UInt(26);
alias CXCursor_TemplateTypeParameter = UInt(27);
alias CXCursor_NonTypeTemplateParameter = UInt(28);
alias CXCursor_TemplateTemplateParameter = UInt(29);
alias CXCursor_FunctionTemplate = UInt(30);
alias CXCursor_ClassTemplate = UInt(31);
alias CXCursor_ClassTemplatePartialSpecialization = UInt(32);
alias CXCursor_NamespaceAlias = UInt(33);
alias CXCursor_UsingDirective = UInt(34);
alias CXCursor_UsingDeclaration = UInt(35);
alias CXCursor_TypeAliasDecl = UInt(36);
alias CXCursor_ObjCSynthesizeDecl = UInt(37);
alias CXCursor_ObjCDynamicDecl = UInt(38);
alias CXCursor_CXXAccessSpecifier = UInt(39);
alias CXCursor_FirstDecl = UInt(1);
alias CXCursor_LastDecl = UInt(39);
alias CXCursor_FirstRef = UInt(40);
alias CXCursor_ObjCSuperClassRef = UInt(40);
alias CXCursor_ObjCProtocolRef = UInt(41);
alias CXCursor_ObjCClassRef = UInt(42);
alias CXCursor_TypeRef = UInt(43);
alias CXCursor_CXXBaseSpecifier = UInt(44);
alias CXCursor_TemplateRef = UInt(45);
alias CXCursor_NamespaceRef = UInt(46);
alias CXCursor_MemberRef = UInt(47);
alias CXCursor_LabelRef = UInt(48);
alias CXCursor_OverloadedDeclRef = UInt(49);
alias CXCursor_VariableRef = UInt(50);
alias CXCursor_LastRef = UInt(50);
alias CXCursor_FirstInvalid = UInt(70);
alias CXCursor_InvalidFile = UInt(70);
alias CXCursor_NoDeclFound = UInt(71);
alias CXCursor_NotImplemented = UInt(72);
alias CXCursor_InvalidCode = UInt(73);
alias CXCursor_LastInvalid = UInt(73);
alias CXCursor_FirstExpr = UInt(100);
alias CXCursor_UnexposedExpr = UInt(100);
alias CXCursor_DeclRefExpr = UInt(101);
alias CXCursor_MemberRefExpr = UInt(102);
alias CXCursor_CallExpr = UInt(103);
alias CXCursor_ObjCMessageExpr = UInt(104);
alias CXCursor_BlockExpr = UInt(105);
alias CXCursor_IntegerLiteral = UInt(106);
alias CXCursor_FloatingLiteral = UInt(107);
alias CXCursor_ImaginaryLiteral = UInt(108);
alias CXCursor_StringLiteral = UInt(109);
alias CXCursor_CharacterLiteral = UInt(110);
alias CXCursor_ParenExpr = UInt(111);
alias CXCursor_UnaryOperator = UInt(112);
alias CXCursor_ArraySubscriptExpr = UInt(113);
alias CXCursor_BinaryOperator = UInt(114);
alias CXCursor_CompoundAssignOperator = UInt(115);
alias CXCursor_ConditionalOperator = UInt(116);
alias CXCursor_CStyleCastExpr = UInt(117);
alias CXCursor_CompoundLiteralExpr = UInt(118);
alias CXCursor_InitListExpr = UInt(119);
alias CXCursor_AddrLabelExpr = UInt(120);
alias CXCursor_StmtExpr = UInt(121);
alias CXCursor_GenericSelectionExpr = UInt(122);
alias CXCursor_GNUNullExpr = UInt(123);
alias CXCursor_CXXStaticCastExpr = UInt(124);
alias CXCursor_CXXDynamicCastExpr = UInt(125);
alias CXCursor_CXXReinterpretCastExpr = UInt(126);
alias CXCursor_CXXConstCastExpr = UInt(127);
alias CXCursor_CXXFunctionalCastExpr = UInt(128);
alias CXCursor_CXXTypeidExpr = UInt(129);
alias CXCursor_CXXBoolLiteralExpr = UInt(130);
alias CXCursor_CXXNullPtrLiteralExpr = UInt(131);
alias CXCursor_CXXThisExpr = UInt(132);
alias CXCursor_CXXThrowExpr = UInt(133);
alias CXCursor_CXXNewExpr = UInt(134);
alias CXCursor_CXXDeleteExpr = UInt(135);
alias CXCursor_UnaryExpr = UInt(136);
alias CXCursor_ObjCStringLiteral = UInt(137);
alias CXCursor_ObjCEncodeExpr = UInt(138);
alias CXCursor_ObjCSelectorExpr = UInt(139);
alias CXCursor_ObjCProtocolExpr = UInt(140);
alias CXCursor_ObjCBridgedCastExpr = UInt(141);
alias CXCursor_PackExpansionExpr = UInt(142);
alias CXCursor_SizeOfPackExpr = UInt(143);
alias CXCursor_LambdaExpr = UInt(144);
alias CXCursor_ObjCBoolLiteralExpr = UInt(145);
alias CXCursor_LastExpr = UInt(145);
alias CXCursor_FirstStmt = UInt(200);
alias CXCursor_UnexposedStmt = UInt(200);
alias CXCursor_LabelStmt = UInt(201);
alias CXCursor_CompoundStmt = UInt(202);
alias CXCursor_CaseStmt = UInt(203);
alias CXCursor_DefaultStmt = UInt(204);
alias CXCursor_IfStmt = UInt(205);
alias CXCursor_SwitchStmt = UInt(206);
alias CXCursor_WhileStmt = UInt(207);
alias CXCursor_DoStmt = UInt(208);
alias CXCursor_ForStmt = UInt(209);
alias CXCursor_GotoStmt = UInt(210);
alias CXCursor_IndirectGotoStmt = UInt(211);
alias CXCursor_ContinueStmt = UInt(212);
alias CXCursor_BreakStmt = UInt(213);
alias CXCursor_ReturnStmt = UInt(214);
alias CXCursor_AsmStmt = UInt(215);
alias CXCursor_ObjCAtTryStmt = UInt(216);
alias CXCursor_ObjCAtCatchStmt = UInt(217);
alias CXCursor_ObjCAtFinallyStmt = UInt(218);
alias CXCursor_ObjCAtThrowStmt = UInt(219);
alias CXCursor_ObjCAtSynchronizedStmt = UInt(220);
alias CXCursor_ObjCAutoreleasePoolStmt = UInt(221);
alias CXCursor_ObjCForCollectionStmt = UInt(222);
alias CXCursor_CXXCatchStmt = UInt(223);
alias CXCursor_CXXTryStmt = UInt(224);
alias CXCursor_CXXForRangeStmt = UInt(225);
alias CXCursor_SEHTryStmt = UInt(226);
alias CXCursor_SEHExceptStmt = UInt(227);
alias CXCursor_SEHFinallyStmt = UInt(228);
alias CXCursor_NullStmt = UInt(230);
alias CXCursor_DeclStmt = UInt(231);
alias CXCursor_LastStmt = UInt(231);
alias CXCursor_TranslationUnit = UInt(300);
alias CXCursor_FirstAttr = UInt(400);
alias CXCursor_UnexposedAttr = UInt(400);
alias CXCursor_IBActionAttr = UInt(401);
alias CXCursor_IBOutletAttr = UInt(402);
alias CXCursor_IBOutletCollectionAttr = UInt(403);
alias CXCursor_CXXFinalAttr = UInt(404);
alias CXCursor_CXXOverrideAttr = UInt(405);
alias CXCursor_AnnotateAttr = UInt(406);
alias CXCursor_AsmLabelAttr = UInt(407);
alias CXCursor_LastAttr = UInt(407);
alias CXCursor_PreprocessingDirective = UInt(500);
alias CXCursor_MacroDefinition = UInt(501);
alias CXCursor_MacroExpansion = UInt(502);
alias CXCursor_MacroInstantiation = UInt(502);
alias CXCursor_InclusionDirective = UInt(503);
alias CXCursor_FirstPreprocessing = UInt(500);
alias CXCursor_LastPreprocessing = UInt(503);

record Struct_Unnamed5 (
    kind : Enum_CXCursorKind,
    xdata : Int,
    data : Array[OpaquePointer, 3],
);

alias CXCursor = Struct_Unnamed5;

external (cdecl) clang_getNullCursor() : CXCursor;

external (cdecl) clang_getTranslationUnitCursor(arg0:CXTranslationUnit) : CXCursor;

external (cdecl) clang_equalCursors(arg0:CXCursor, arg1:CXCursor) : UInt;

external (cdecl) clang_Cursor_isNull(arg0:CXCursor) : Int;

external (cdecl) clang_hashCursor(arg0:CXCursor) : UInt;

external (cdecl) clang_getCursorKind(arg0:CXCursor) : Enum_CXCursorKind;

external (cdecl) clang_isDeclaration(arg0:Enum_CXCursorKind) : UInt;

external (cdecl) clang_isReference(arg0:Enum_CXCursorKind) : UInt;

external (cdecl) clang_isExpression(arg0:Enum_CXCursorKind) : UInt;

external (cdecl) clang_isStatement(arg0:Enum_CXCursorKind) : UInt;

external (cdecl) clang_isAttribute(arg0:Enum_CXCursorKind) : UInt;

external (cdecl) clang_isInvalid(arg0:Enum_CXCursorKind) : UInt;

external (cdecl) clang_isTranslationUnit(arg0:Enum_CXCursorKind) : UInt;

external (cdecl) clang_isPreprocessing(arg0:Enum_CXCursorKind) : UInt;

external (cdecl) clang_isUnexposed(arg0:Enum_CXCursorKind) : UInt;

alias Enum_CXLinkageKind = UInt;
alias CXLinkage_Invalid = UInt(0);
alias CXLinkage_NoLinkage = UInt(1);
alias CXLinkage_Internal = UInt(2);
alias CXLinkage_UniqueExternal = UInt(3);
alias CXLinkage_External = UInt(4);

external (cdecl) clang_getCursorLinkage(arg0:CXCursor) : Enum_CXLinkageKind;

external (cdecl) clang_getCursorAvailability(arg0:CXCursor) : Enum_CXAvailabilityKind;

alias Enum_CXLanguageKind = UInt;
alias CXLanguage_Invalid = UInt(0);
alias CXLanguage_C = UInt(1);
alias CXLanguage_ObjC = UInt(2);
alias CXLanguage_CPlusPlus = UInt(3);

external (cdecl) clang_getCursorLanguage(arg0:CXCursor) : Enum_CXLanguageKind;

external (cdecl) clang_Cursor_getTranslationUnit(arg0:CXCursor) : CXTranslationUnit;

alias Struct_CXCursorSetImpl = Opaque;

alias CXCursorSet = Pointer[Struct_CXCursorSetImpl];

external (cdecl) clang_createCXCursorSet(..) : CXCursorSet;

external (cdecl) clang_disposeCXCursorSet(arg0:CXCursorSet) : ;

external (cdecl) clang_CXCursorSet_contains(arg0:CXCursorSet, arg1:CXCursor) : UInt;

external (cdecl) clang_CXCursorSet_insert(arg0:CXCursorSet, arg1:CXCursor) : UInt;

external (cdecl) clang_getCursorSemanticParent(arg0:CXCursor) : CXCursor;

external (cdecl) clang_getCursorLexicalParent(arg0:CXCursor) : CXCursor;

external (cdecl) clang_getOverriddenCursors(arg0:CXCursor, arg1:Pointer[Pointer[CXCursor]], arg2:Pointer[UInt]) : ;

external (cdecl) clang_disposeOverriddenCursors(arg0:Pointer[CXCursor]) : ;

external (cdecl) clang_getIncludedFile(arg0:CXCursor) : CXFile;

external (cdecl) clang_getCursor(arg0:CXTranslationUnit, arg1:CXSourceLocation) : CXCursor;

external (cdecl) clang_getCursorLocation(arg0:CXCursor) : CXSourceLocation;

external (cdecl) clang_getCursorExtent(arg0:CXCursor) : CXSourceRange;

alias Enum_CXTypeKind = UInt;
alias CXType_Invalid = UInt(0);
alias CXType_Unexposed = UInt(1);
alias CXType_Void = UInt(2);
alias CXType_Bool = UInt(3);
alias CXType_Char_U = UInt(4);
alias CXType_UChar = UInt(5);
alias CXType_Char16 = UInt(6);
alias CXType_Char32 = UInt(7);
alias CXType_UShort = UInt(8);
alias CXType_UInt = UInt(9);
alias CXType_ULong = UInt(10);
alias CXType_ULongLong = UInt(11);
alias CXType_UInt128 = UInt(12);
alias CXType_Char_S = UInt(13);
alias CXType_SChar = UInt(14);
alias CXType_WChar = UInt(15);
alias CXType_Short = UInt(16);
alias CXType_Int = UInt(17);
alias CXType_Long = UInt(18);
alias CXType_LongLong = UInt(19);
alias CXType_Int128 = UInt(20);
alias CXType_Float = UInt(21);
alias CXType_Double = UInt(22);
alias CXType_LongDouble = UInt(23);
alias CXType_NullPtr = UInt(24);
alias CXType_Overload = UInt(25);
alias CXType_Dependent = UInt(26);
alias CXType_ObjCId = UInt(27);
alias CXType_ObjCClass = UInt(28);
alias CXType_ObjCSel = UInt(29);
alias CXType_FirstBuiltin = UInt(2);
alias CXType_LastBuiltin = UInt(29);
alias CXType_Complex = UInt(100);
alias CXType_Pointer = UInt(101);
alias CXType_BlockPointer = UInt(102);
alias CXType_LValueReference = UInt(103);
alias CXType_RValueReference = UInt(104);
alias CXType_Record = UInt(105);
alias CXType_Enum = UInt(106);
alias CXType_Typedef = UInt(107);
alias CXType_ObjCInterface = UInt(108);
alias CXType_ObjCObjectPointer = UInt(109);
alias CXType_FunctionNoProto = UInt(110);
alias CXType_FunctionProto = UInt(111);
alias CXType_ConstantArray = UInt(112);
alias CXType_Vector = UInt(113);

alias Enum_CXCallingConv = UInt;
alias CXCallingConv_Default = UInt(0);
alias CXCallingConv_C = UInt(1);
alias CXCallingConv_X86StdCall = UInt(2);
alias CXCallingConv_X86FastCall = UInt(3);
alias CXCallingConv_X86ThisCall = UInt(4);
alias CXCallingConv_X86Pascal = UInt(5);
alias CXCallingConv_AAPCS = UInt(6);
alias CXCallingConv_AAPCS_VFP = UInt(7);
alias CXCallingConv_Invalid = UInt(100);
alias CXCallingConv_Unexposed = UInt(200);

record Struct_Unnamed6 (
    kind : Enum_CXTypeKind,
    data : Array[OpaquePointer, 2],
);

alias CXType = Struct_Unnamed6;

external (cdecl) clang_getCursorType(arg0:CXCursor) : CXType;

external (cdecl) clang_getTypedefDeclUnderlyingType(arg0:CXCursor) : CXType;

external (cdecl) clang_getEnumDeclIntegerType(arg0:CXCursor) : CXType;

external (cdecl) clang_getEnumConstantDeclValue(arg0:CXCursor) : Int64;

external (cdecl) clang_getEnumConstantDeclUnsignedValue(arg0:CXCursor) : UInt64;

external (cdecl) clang_equalTypes(arg0:CXType, arg1:CXType) : UInt;

external (cdecl) clang_getCanonicalType(arg0:CXType) : CXType;

external (cdecl) clang_isConstQualifiedType(arg0:CXType) : UInt;

external (cdecl) clang_isVolatileQualifiedType(arg0:CXType) : UInt;

external (cdecl) clang_isRestrictQualifiedType(arg0:CXType) : UInt;

external (cdecl) clang_getPointeeType(arg0:CXType) : CXType;

external (cdecl) clang_getTypeDeclaration(arg0:CXType) : CXCursor;

external (cdecl) clang_getDeclObjCTypeEncoding(arg0:CXCursor) : CXString;

external (cdecl) clang_getTypeKindSpelling(arg0:Enum_CXTypeKind) : CXString;

external (cdecl) clang_getFunctionTypeCallingConv(arg0:CXType) : Enum_CXCallingConv;

external (cdecl) clang_getResultType(arg0:CXType) : CXType;

external (cdecl) clang_getNumArgTypes(arg0:CXType) : UInt;

external (cdecl) clang_getArgType(arg0:CXType, arg1:UInt) : CXType;

external (cdecl) clang_isFunctionTypeVariadic(arg0:CXType) : UInt;

external (cdecl) clang_getCursorResultType(arg0:CXCursor) : CXType;

external (cdecl) clang_isPODType(arg0:CXType) : UInt;

external (cdecl) clang_getElementType(arg0:CXType) : CXType;

external (cdecl) clang_getNumElements(arg0:CXType) : Int64;

external (cdecl) clang_getArrayElementType(arg0:CXType) : CXType;

external (cdecl) clang_getArraySize(arg0:CXType) : Int64;

external (cdecl) clang_isVirtualBase(arg0:CXCursor) : UInt;

alias Enum_CX_CXXAccessSpecifier = UInt;
alias CX_CXXInvalidAccessSpecifier = UInt(0);
alias CX_CXXPublic = UInt(1);
alias CX_CXXProtected = UInt(2);
alias CX_CXXPrivate = UInt(3);

external (cdecl) clang_getCXXAccessSpecifier(arg0:CXCursor) : Enum_CX_CXXAccessSpecifier;

external (cdecl) clang_getNumOverloadedDecls(arg0:CXCursor) : UInt;

external (cdecl) clang_getOverloadedDecl(arg0:CXCursor, arg1:UInt) : CXCursor;

external (cdecl) clang_getIBOutletCollectionType(arg0:CXCursor) : CXType;

alias Enum_CXChildVisitResult = UInt;
alias CXChildVisit_Break = UInt(0);
alias CXChildVisit_Continue = UInt(1);
alias CXChildVisit_Recurse = UInt(2);

alias CXCursorVisitor = CCodePointer[[CXCursor, CXCursor, CXClientData],[Enum_CXChildVisitResult]];

external (cdecl) clang_visitChildren(arg0:CXCursor, arg1:CXCursorVisitor, arg2:CXClientData) : UInt;

alias CXCursorVisitorBlock = /* unknown kind BlockPointer */ Opaque;

external (cdecl) clang_visitChildrenWithBlock(arg0:CXCursor, arg1:CXCursorVisitorBlock) : UInt;

external (cdecl) clang_getCursorUSR(arg0:CXCursor) : CXString;

external (cdecl) clang_constructUSR_ObjCClass(arg0:Pointer[CChar]) : CXString;

external (cdecl) clang_constructUSR_ObjCCategory(arg0:Pointer[CChar], arg1:Pointer[CChar]) : CXString;

external (cdecl) clang_constructUSR_ObjCProtocol(arg0:Pointer[CChar]) : CXString;

external (cdecl) clang_constructUSR_ObjCIvar(arg0:Pointer[CChar], arg1:CXString) : CXString;

external (cdecl) clang_constructUSR_ObjCMethod(arg0:Pointer[CChar], arg1:UInt, arg2:CXString) : CXString;

external (cdecl) clang_constructUSR_ObjCProperty(arg0:Pointer[CChar], arg1:CXString) : CXString;

external (cdecl) clang_getCursorSpelling(arg0:CXCursor) : CXString;

external (cdecl) clang_Cursor_getSpellingNameRange(arg0:CXCursor, arg1:UInt, arg2:UInt) : CXSourceRange;

external (cdecl) clang_getCursorDisplayName(arg0:CXCursor) : CXString;

external (cdecl) clang_getCursorReferenced(arg0:CXCursor) : CXCursor;

external (cdecl) clang_getCursorDefinition(arg0:CXCursor) : CXCursor;

external (cdecl) clang_isCursorDefinition(arg0:CXCursor) : UInt;

external (cdecl) clang_getCanonicalCursor(arg0:CXCursor) : CXCursor;

external (cdecl) clang_Cursor_getObjCSelectorIndex(arg0:CXCursor) : Int;

external (cdecl) clang_CXXMethod_isStatic(arg0:CXCursor) : UInt;

external (cdecl) clang_CXXMethod_isVirtual(arg0:CXCursor) : UInt;

external (cdecl) clang_getTemplateCursorKind(arg0:CXCursor) : Enum_CXCursorKind;

external (cdecl) clang_getSpecializedCursorTemplate(arg0:CXCursor) : CXCursor;

external (cdecl) clang_getCursorReferenceNameRange(arg0:CXCursor, arg1:UInt, arg2:UInt) : CXSourceRange;

alias Enum_CXNameRefFlags = UInt;
alias CXNameRange_WantQualifier = UInt(1);
alias CXNameRange_WantTemplateArgs = UInt(2);
alias CXNameRange_WantSinglePiece = UInt(4);

alias Enum_CXTokenKind = UInt;
alias CXToken_Punctuation = UInt(0);
alias CXToken_Keyword = UInt(1);
alias CXToken_Identifier = UInt(2);
alias CXToken_Literal = UInt(3);
alias CXToken_Comment = UInt(4);

alias CXTokenKind = Enum_CXTokenKind;

record Struct_Unnamed7 (
    int_data : Array[UInt, 4],
    ptr_data : OpaquePointer,
);

alias CXToken = Struct_Unnamed7;

external (cdecl) clang_getTokenKind(arg0:CXToken) : CXTokenKind;

external (cdecl) clang_getTokenSpelling(arg0:CXTranslationUnit, arg1:CXToken) : CXString;

external (cdecl) clang_getTokenLocation(arg0:CXTranslationUnit, arg1:CXToken) : CXSourceLocation;

external (cdecl) clang_getTokenExtent(arg0:CXTranslationUnit, arg1:CXToken) : CXSourceRange;

external (cdecl) clang_tokenize(arg0:CXTranslationUnit, arg1:CXSourceRange, arg2:Pointer[Pointer[CXToken]], arg3:Pointer[UInt]) : ;

external (cdecl) clang_annotateTokens(arg0:CXTranslationUnit, arg1:Pointer[CXToken], arg2:UInt, arg3:Pointer[CXCursor]) : ;

external (cdecl) clang_disposeTokens(arg0:CXTranslationUnit, arg1:Pointer[CXToken], arg2:UInt) : ;

external (cdecl) clang_isMacroFunctionLike(arg0:CXCursor) : Int;

alias Enum_CXMacroVarargsKind = UInt;
alias CXMacroVarargs_NotVariadic = UInt(0);
alias CXMacroVarargs_C99 = UInt(1);
alias CXMacroVarargs_GNU = UInt(2);

alias CXMacroVarargsKind = Enum_CXMacroVarargsKind;

external (cdecl) clang_getMacroVarargsKind(arg0:CXCursor) : CXMacroVarargsKind;

external (cdecl) clang_isMacroBuiltin(arg0:CXCursor) : Int;

external (cdecl) clang_getNumMacroArgs(arg0:CXCursor) : UInt;

external (cdecl) clang_getMacroArgName(arg0:CXCursor, arg1:UInt) : CXString;

external (cdecl) clang_getMacroReplacementTokens(arg0:CXCursor, arg1:Pointer[Pointer[CXToken]], arg2:Pointer[UInt]) : ;

external (cdecl) clang_getCursorKindSpelling(arg0:Enum_CXCursorKind) : CXString;

external (cdecl) clang_getDefinitionSpellingAndExtent(arg0:CXCursor, arg1:Pointer[Pointer[CChar]], arg2:Pointer[Pointer[CChar]], arg3:Pointer[UInt], arg4:Pointer[UInt], arg5:Pointer[UInt], arg6:Pointer[UInt]) : ;

external (cdecl) clang_enableStackTraces() : ;

external (cdecl) clang_executeOnThread(arg0:CCodePointer[[OpaquePointer],[]], arg1:OpaquePointer, arg2:UInt) : ;

alias CXCompletionString = OpaquePointer;

record Struct_Unnamed8 (
    CursorKind : Enum_CXCursorKind,
    CompletionString : CXCompletionString,
);

alias CXCompletionResult = Struct_Unnamed8;

alias Enum_CXCompletionChunkKind = UInt;
alias CXCompletionChunk_Optional = UInt(0);
alias CXCompletionChunk_TypedText = UInt(1);
alias CXCompletionChunk_Text = UInt(2);
alias CXCompletionChunk_Placeholder = UInt(3);
alias CXCompletionChunk_Informative = UInt(4);
alias CXCompletionChunk_CurrentParameter = UInt(5);
alias CXCompletionChunk_LeftParen = UInt(6);
alias CXCompletionChunk_RightParen = UInt(7);
alias CXCompletionChunk_LeftBracket = UInt(8);
alias CXCompletionChunk_RightBracket = UInt(9);
alias CXCompletionChunk_LeftBrace = UInt(10);
alias CXCompletionChunk_RightBrace = UInt(11);
alias CXCompletionChunk_LeftAngle = UInt(12);
alias CXCompletionChunk_RightAngle = UInt(13);
alias CXCompletionChunk_Comma = UInt(14);
alias CXCompletionChunk_ResultType = UInt(15);
alias CXCompletionChunk_Colon = UInt(16);
alias CXCompletionChunk_SemiColon = UInt(17);
alias CXCompletionChunk_Equal = UInt(18);
alias CXCompletionChunk_HorizontalSpace = UInt(19);
alias CXCompletionChunk_VerticalSpace = UInt(20);

external (cdecl) clang_getCompletionChunkKind(arg0:CXCompletionString, arg1:UInt) : Enum_CXCompletionChunkKind;

external (cdecl) clang_getCompletionChunkText(arg0:CXCompletionString, arg1:UInt) : CXString;

external (cdecl) clang_getCompletionChunkCompletionString(arg0:CXCompletionString, arg1:UInt) : CXCompletionString;

external (cdecl) clang_getNumCompletionChunks(arg0:CXCompletionString) : UInt;

external (cdecl) clang_getCompletionPriority(arg0:CXCompletionString) : UInt;

external (cdecl) clang_getCompletionAvailability(arg0:CXCompletionString) : Enum_CXAvailabilityKind;

external (cdecl) clang_getCompletionNumAnnotations(arg0:CXCompletionString) : UInt;

external (cdecl) clang_getCompletionAnnotation(arg0:CXCompletionString, arg1:UInt) : CXString;

external (cdecl) clang_getCompletionParent(arg0:CXCompletionString, arg1:Pointer[Enum_CXCursorKind]) : CXString;

external (cdecl) clang_getCursorCompletionString(arg0:CXCursor) : CXCompletionString;

record Struct_Unnamed9 (
    Results : Pointer[CXCompletionResult],
    NumResults : UInt,
);

alias CXCodeCompleteResults = Struct_Unnamed9;

alias Enum_CXCodeComplete_Flags = UInt;
alias CXCodeComplete_IncludeMacros = UInt(1);
alias CXCodeComplete_IncludeCodePatterns = UInt(2);

alias Enum_CXCompletionContext = UInt;
alias CXCompletionContext_Unexposed = UInt(0);
alias CXCompletionContext_AnyType = UInt(1);
alias CXCompletionContext_AnyValue = UInt(2);
alias CXCompletionContext_ObjCObjectValue = UInt(4);
alias CXCompletionContext_ObjCSelectorValue = UInt(8);
alias CXCompletionContext_CXXClassTypeValue = UInt(16);
alias CXCompletionContext_DotMemberAccess = UInt(32);
alias CXCompletionContext_ArrowMemberAccess = UInt(64);
alias CXCompletionContext_ObjCPropertyAccess = UInt(128);
alias CXCompletionContext_EnumTag = UInt(256);
alias CXCompletionContext_UnionTag = UInt(512);
alias CXCompletionContext_StructTag = UInt(1024);
alias CXCompletionContext_ClassTag = UInt(2048);
alias CXCompletionContext_Namespace = UInt(4096);
alias CXCompletionContext_NestedNameSpecifier = UInt(8192);
alias CXCompletionContext_ObjCInterface = UInt(16384);
alias CXCompletionContext_ObjCProtocol = UInt(32768);
alias CXCompletionContext_ObjCCategory = UInt(65536);
alias CXCompletionContext_ObjCInstanceMessage = UInt(131072);
alias CXCompletionContext_ObjCClassMessage = UInt(262144);
alias CXCompletionContext_ObjCSelectorName = UInt(524288);
alias CXCompletionContext_MacroName = UInt(1048576);
alias CXCompletionContext_NaturalLanguage = UInt(2097152);
alias CXCompletionContext_Unknown = UInt(4194303);

external (cdecl) clang_defaultCodeCompleteOptions() : UInt;

external (cdecl) clang_codeCompleteAt(arg0:CXTranslationUnit, arg1:Pointer[CChar], arg2:UInt, arg3:UInt, arg4:Pointer[Struct_CXUnsavedFile], arg5:UInt, arg6:UInt) : Pointer[CXCodeCompleteResults];

external (cdecl) clang_sortCodeCompletionResults(arg0:Pointer[CXCompletionResult], arg1:UInt) : ;

external (cdecl) clang_disposeCodeCompleteResults(arg0:Pointer[CXCodeCompleteResults]) : ;

external (cdecl) clang_codeCompleteGetNumDiagnostics(arg0:Pointer[CXCodeCompleteResults]) : UInt;

external (cdecl) clang_codeCompleteGetDiagnostic(arg0:Pointer[CXCodeCompleteResults], arg1:UInt) : CXDiagnostic;

external (cdecl) clang_codeCompleteGetContexts(arg0:Pointer[CXCodeCompleteResults]) : UInt64;

external (cdecl) clang_codeCompleteGetContainerKind(arg0:Pointer[CXCodeCompleteResults], arg1:Pointer[UInt]) : Enum_CXCursorKind;

external (cdecl) clang_codeCompleteGetContainerUSR(arg0:Pointer[CXCodeCompleteResults]) : CXString;

external (cdecl) clang_codeCompleteGetObjCSelector(arg0:Pointer[CXCodeCompleteResults]) : CXString;

external (cdecl) clang_getClangVersion(..) : CXString;

external (cdecl) clang_toggleCrashRecovery(arg0:UInt) : ;

alias CXInclusionVisitor = CCodePointer[[CXFile, Pointer[CXSourceLocation], UInt, CXClientData],[]];

external (cdecl) clang_getInclusions(arg0:CXTranslationUnit, arg1:CXInclusionVisitor, arg2:CXClientData) : ;

alias CXRemapping = OpaquePointer;

external (cdecl) clang_getRemappings(arg0:Pointer[CChar]) : CXRemapping;

external (cdecl) clang_getRemappingsFromFileList(arg0:Pointer[Pointer[CChar]], arg1:UInt) : CXRemapping;

external (cdecl) clang_remap_getNumFiles(arg0:CXRemapping) : UInt;

external (cdecl) clang_remap_getFilenames(arg0:CXRemapping, arg1:UInt, arg2:Pointer[CXString], arg3:Pointer[CXString]) : ;

external (cdecl) clang_remap_dispose(arg0:CXRemapping) : ;

alias Enum_CXVisitorResult = UInt;
alias CXVisit_Break = UInt(0);
alias CXVisit_Continue = UInt(1);

record Struct_Unnamed10 (
    context : OpaquePointer,
    visit : CCodePointer[[OpaquePointer, CXCursor, CXSourceRange],[Enum_CXVisitorResult]],
);

alias CXCursorAndRangeVisitor = Struct_Unnamed10;

external (cdecl) clang_findReferencesInFile(arg0:CXCursor, arg1:CXFile, arg2:CXCursorAndRangeVisitor) : ;

alias CXCursorAndRangeVisitorBlock = /* unknown kind BlockPointer */ Opaque;

external (cdecl) clang_findReferencesInFileWithBlock(arg0:CXCursor, arg1:CXFile, arg2:CXCursorAndRangeVisitorBlock) : ;

alias CXIdxClientFile = OpaquePointer;

alias CXIdxClientEntity = OpaquePointer;

alias CXIdxClientContainer = OpaquePointer;

alias CXIdxClientASTFile = OpaquePointer;

record Struct_Unnamed11 (
    ptr_data : Array[OpaquePointer, 2],
    int_data : UInt,
);

alias CXIdxLoc = Struct_Unnamed11;

record Struct_Unnamed12 (
    hashLoc : CXIdxLoc,
    filename : Pointer[CChar],
    file : CXFile,
    isImport : Int,
    isAngled : Int,
);

alias CXIdxIncludedFileInfo = Struct_Unnamed12;

record Struct_Unnamed13 (
    file : CXFile,
    loc : CXIdxLoc,
    isModule : Int,
);

alias CXIdxImportedASTFileInfo = Struct_Unnamed13;

alias Enum_Unnamed14 = UInt;
alias CXIdxEntity_Unexposed = UInt(0);
alias CXIdxEntity_Typedef = UInt(1);
alias CXIdxEntity_Function = UInt(2);
alias CXIdxEntity_Variable = UInt(3);
alias CXIdxEntity_Field = UInt(4);
alias CXIdxEntity_EnumConstant = UInt(5);
alias CXIdxEntity_ObjCClass = UInt(6);
alias CXIdxEntity_ObjCProtocol = UInt(7);
alias CXIdxEntity_ObjCCategory = UInt(8);
alias CXIdxEntity_ObjCInstanceMethod = UInt(9);
alias CXIdxEntity_ObjCClassMethod = UInt(10);
alias CXIdxEntity_ObjCProperty = UInt(11);
alias CXIdxEntity_ObjCIvar = UInt(12);
alias CXIdxEntity_Enum = UInt(13);
alias CXIdxEntity_Struct = UInt(14);
alias CXIdxEntity_Union = UInt(15);
alias CXIdxEntity_CXXClass = UInt(16);
alias CXIdxEntity_CXXNamespace = UInt(17);
alias CXIdxEntity_CXXNamespaceAlias = UInt(18);
alias CXIdxEntity_CXXStaticVariable = UInt(19);
alias CXIdxEntity_CXXStaticMethod = UInt(20);
alias CXIdxEntity_CXXInstanceMethod = UInt(21);
alias CXIdxEntity_CXXConstructor = UInt(22);
alias CXIdxEntity_CXXDestructor = UInt(23);
alias CXIdxEntity_CXXConversionFunction = UInt(24);
alias CXIdxEntity_CXXTypeAlias = UInt(25);

alias CXIdxEntityKind = Enum_Unnamed14;

alias Enum_Unnamed15 = UInt;
alias CXIdxEntityLang_None = UInt(0);
alias CXIdxEntityLang_C = UInt(1);
alias CXIdxEntityLang_ObjC = UInt(2);
alias CXIdxEntityLang_CXX = UInt(3);

alias CXIdxEntityLanguage = Enum_Unnamed15;

alias Enum_Unnamed16 = UInt;
alias CXIdxEntity_NonTemplate = UInt(0);
alias CXIdxEntity_Template = UInt(1);
alias CXIdxEntity_TemplatePartialSpecialization = UInt(2);
alias CXIdxEntity_TemplateSpecialization = UInt(3);

alias CXIdxEntityCXXTemplateKind = Enum_Unnamed16;

alias Enum_Unnamed17 = UInt;
alias CXIdxAttr_Unexposed = UInt(0);
alias CXIdxAttr_IBAction = UInt(1);
alias CXIdxAttr_IBOutlet = UInt(2);
alias CXIdxAttr_IBOutletCollection = UInt(3);

alias CXIdxAttrKind = Enum_Unnamed17;

record Struct_Unnamed18 (
    kind : CXIdxAttrKind,
    cursor : CXCursor,
    loc : CXIdxLoc,
);

alias CXIdxAttrInfo = Struct_Unnamed18;

record Struct_Unnamed19 (
    kind : CXIdxEntityKind,
    templateKind : CXIdxEntityCXXTemplateKind,
    lang : CXIdxEntityLanguage,
    name : Pointer[CChar],
    USR : Pointer[CChar],
    cursor : CXCursor,
    attributes : Pointer[Pointer[CXIdxAttrInfo]],
    numAttributes : UInt,
);

alias CXIdxEntityInfo = Struct_Unnamed19;

record Struct_Unnamed20 (
    cursor : CXCursor,
);

alias CXIdxContainerInfo = Struct_Unnamed20;

record Struct_Unnamed21 (
    attrInfo : Pointer[CXIdxAttrInfo],
    objcClass : Pointer[CXIdxEntityInfo],
    classCursor : CXCursor,
    classLoc : CXIdxLoc,
);

alias CXIdxIBOutletCollectionAttrInfo = Struct_Unnamed21;

record Struct_Unnamed22 (
    entityInfo : Pointer[CXIdxEntityInfo],
    cursor : CXCursor,
    loc : CXIdxLoc,
    semanticContainer : Pointer[CXIdxContainerInfo],
    lexicalContainer : Pointer[CXIdxContainerInfo],
    isRedeclaration : Int,
    isDefinition : Int,
    isContainer : Int,
    declAsContainer : Pointer[CXIdxContainerInfo],
    isImplicit : Int,
    attributes : Pointer[Pointer[CXIdxAttrInfo]],
    numAttributes : UInt,
);

alias CXIdxDeclInfo = Struct_Unnamed22;

alias Enum_Unnamed23 = UInt;
alias CXIdxObjCContainer_ForwardRef = UInt(0);
alias CXIdxObjCContainer_Interface = UInt(1);
alias CXIdxObjCContainer_Implementation = UInt(2);

alias CXIdxObjCContainerKind = Enum_Unnamed23;

record Struct_Unnamed24 (
    declInfo : Pointer[CXIdxDeclInfo],
    kind : CXIdxObjCContainerKind,
);

alias CXIdxObjCContainerDeclInfo = Struct_Unnamed24;

record Struct_Unnamed25 (
    base : Pointer[CXIdxEntityInfo],
    cursor : CXCursor,
    loc : CXIdxLoc,
);

alias CXIdxBaseClassInfo = Struct_Unnamed25;

record Struct_Unnamed26 (
    protocol : Pointer[CXIdxEntityInfo],
    cursor : CXCursor,
    loc : CXIdxLoc,
);

alias CXIdxObjCProtocolRefInfo = Struct_Unnamed26;

record Struct_Unnamed27 (
    protocols : Pointer[Pointer[CXIdxObjCProtocolRefInfo]],
    numProtocols : UInt,
);

alias CXIdxObjCProtocolRefListInfo = Struct_Unnamed27;

record Struct_Unnamed28 (
    containerInfo : Pointer[CXIdxObjCContainerDeclInfo],
    superInfo : Pointer[CXIdxBaseClassInfo],
    protocols : Pointer[CXIdxObjCProtocolRefListInfo],
);

alias CXIdxObjCInterfaceDeclInfo = Struct_Unnamed28;

record Struct_Unnamed29 (
    containerInfo : Pointer[CXIdxObjCContainerDeclInfo],
    objcClass : Pointer[CXIdxEntityInfo],
    classCursor : CXCursor,
    classLoc : CXIdxLoc,
    protocols : Pointer[CXIdxObjCProtocolRefListInfo],
);

alias CXIdxObjCCategoryDeclInfo = Struct_Unnamed29;

record Struct_Unnamed30 (
    declInfo : Pointer[CXIdxDeclInfo],
    getter : Pointer[CXIdxEntityInfo],
    setter : Pointer[CXIdxEntityInfo],
);

alias CXIdxObjCPropertyDeclInfo = Struct_Unnamed30;

record Struct_Unnamed31 (
    declInfo : Pointer[CXIdxDeclInfo],
    bases : Pointer[Pointer[CXIdxBaseClassInfo]],
    numBases : UInt,
);

alias CXIdxCXXClassDeclInfo = Struct_Unnamed31;

alias Enum_Unnamed32 = UInt;
alias CXIdxEntityRef_Direct = UInt(1);
alias CXIdxEntityRef_Implicit = UInt(2);

alias CXIdxEntityRefKind = Enum_Unnamed32;

record Struct_Unnamed33 (
    kind : CXIdxEntityRefKind,
    cursor : CXCursor,
    loc : CXIdxLoc,
    referencedEntity : Pointer[CXIdxEntityInfo],
    parentEntity : Pointer[CXIdxEntityInfo],
    container : Pointer[CXIdxContainerInfo],
);

alias CXIdxEntityRefInfo = Struct_Unnamed33;

record Struct_Unnamed34 (
    abortQuery : CCodePointer[[CXClientData, OpaquePointer],[Int]],
    diagnostic : CCodePointer[[CXClientData, CXDiagnosticSet, OpaquePointer],[]],
    enteredMainFile : CCodePointer[[CXClientData, CXFile, OpaquePointer],[CXIdxClientFile]],
    ppIncludedFile : CCodePointer[[CXClientData, Pointer[CXIdxIncludedFileInfo]],[CXIdxClientFile]],
    importedASTFile : CCodePointer[[CXClientData, Pointer[CXIdxImportedASTFileInfo]],[CXIdxClientASTFile]],
    startedTranslationUnit : CCodePointer[[CXClientData, OpaquePointer],[CXIdxClientContainer]],
    indexDeclaration : CCodePointer[[CXClientData, Pointer[CXIdxDeclInfo]],[]],
    indexEntityReference : CCodePointer[[CXClientData, Pointer[CXIdxEntityRefInfo]],[]],
);

alias IndexerCallbacks = Struct_Unnamed34;

external (cdecl) clang_index_isEntityObjCContainerKind(arg0:CXIdxEntityKind) : Int;

external (cdecl) clang_index_getObjCContainerDeclInfo(arg0:Pointer[CXIdxDeclInfo]) : Pointer[CXIdxObjCContainerDeclInfo];

external (cdecl) clang_index_getObjCInterfaceDeclInfo(arg0:Pointer[CXIdxDeclInfo]) : Pointer[CXIdxObjCInterfaceDeclInfo];

external (cdecl) clang_index_getObjCCategoryDeclInfo(arg0:Pointer[CXIdxDeclInfo]) : Pointer[CXIdxObjCCategoryDeclInfo];

external (cdecl) clang_index_getObjCProtocolRefListInfo(arg0:Pointer[CXIdxDeclInfo]) : Pointer[CXIdxObjCProtocolRefListInfo];

external (cdecl) clang_index_getObjCPropertyDeclInfo(arg0:Pointer[CXIdxDeclInfo]) : Pointer[CXIdxObjCPropertyDeclInfo];

external (cdecl) clang_index_getIBOutletCollectionAttrInfo(arg0:Pointer[CXIdxAttrInfo]) : Pointer[CXIdxIBOutletCollectionAttrInfo];

external (cdecl) clang_index_getCXXClassDeclInfo(arg0:Pointer[CXIdxDeclInfo]) : Pointer[CXIdxCXXClassDeclInfo];

external (cdecl) clang_index_getClientContainer(arg0:Pointer[CXIdxContainerInfo]) : CXIdxClientContainer;

external (cdecl) clang_index_setClientContainer(arg0:Pointer[CXIdxContainerInfo], arg1:CXIdxClientContainer) : ;

external (cdecl) clang_index_getClientEntity(arg0:Pointer[CXIdxEntityInfo]) : CXIdxClientEntity;

external (cdecl) clang_index_setClientEntity(arg0:Pointer[CXIdxEntityInfo], arg1:CXIdxClientEntity) : ;

alias CXIndexAction = OpaquePointer;

external (cdecl) clang_IndexAction_create(arg0:CXIndex) : CXIndexAction;

external (cdecl) clang_IndexAction_dispose(arg0:CXIndexAction) : ;

alias Enum_Unnamed35 = UInt;
alias CXIndexOpt_None = UInt(0);
alias CXIndexOpt_SuppressRedundantRefs = UInt(1);
alias CXIndexOpt_IndexFunctionLocalSymbols = UInt(2);
alias CXIndexOpt_IndexImplicitTemplateInstantiations = UInt(4);
alias CXIndexOpt_SuppressWarnings = UInt(8);

alias CXIndexOptFlags = Enum_Unnamed35;

external (cdecl) clang_indexSourceFile(arg0:CXIndexAction, arg1:CXClientData, arg2:Pointer[IndexerCallbacks], arg3:UInt, arg4:UInt, arg5:Pointer[CChar], arg6:Pointer[Pointer[CChar]], arg7:Int, arg8:Pointer[Struct_CXUnsavedFile], arg9:UInt, arg10:Pointer[CXTranslationUnit], arg11:UInt) : Int;

external (cdecl) clang_indexTranslationUnit(arg0:CXIndexAction, arg1:CXClientData, arg2:Pointer[IndexerCallbacks], arg3:UInt, arg4:UInt, arg5:CXTranslationUnit) : Int;

external (cdecl) clang_indexLoc_getFileLocation(arg0:CXIdxLoc, arg1:Pointer[CXIdxClientFile], arg2:Pointer[CXFile], arg3:Pointer[UInt], arg4:Pointer[UInt], arg5:Pointer[UInt]) : ;

external (cdecl) clang_indexLoc_getCXSourceLocation(arg0:CXIdxLoc) : CXSourceLocation;

