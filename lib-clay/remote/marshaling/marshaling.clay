
//
// marshaling object protocol
//

// [T] marshaledSize(x: T) SizeT -- should not throw
procedure marshaledSize;
// [T] marshalTo(buffer: Pointer[Byte], x: T) Pointer[Byte] -- should not throw
procedure marshalTo;
// [T] unmarshalFrom(begin: Pointer[Byte], end: Pointer[Byte], static T)
//     T, Pointer[Byte]
// -- may throw
// -- must throw UnmarshalUnexpectedEOF if unmarshal code would have to read past end
procedure unmarshalFrom;

record UnmarshalUnexpectedEOF ();
instance Exception = UnmarshalUnexpectedEOF;

Marshalable?(T)
    =     CallDefined?(marshaledSize, T)
      and CallDefined?(marshalTo, Pointer[Byte], T)
      and CallDefined?(unmarshalFrom, Pointer[Byte], Pointer[Byte], Static[T]);



//
// copy-marshalable implementation
//
CopyMarshalable?(T) = false;

[T | CopyMarshalable?(T)]
overload marshaledSize(x: T) = TypeSize(T);

[T | CopyMarshalable?(T)]
overload marshalTo(buffer: Pointer[Byte], x: T) {
    Pointer[T](buffer)^ <-- x;
    return buffer + TypeSize(T);
}

[T | CopyMarshalable?(T)]
overload unmarshalFrom(begin: Pointer[Byte], end: Pointer[Byte], static T)
    returned: T, newBegin: Pointer[Byte]
{
    var newBegin_ = begin + TypeSize(T);
    if (newBegin_ > end)
        throw UnmarshalUnexpectedEOF();
    returned <-- Pointer[T](begin)^;
    newBegin <-- newBegin_;
}

[C | Character?(C)] overload CopyMarshalable?(static C) = true;
[I | Integer?(I)] overload CopyMarshalable?(static I) = true;
[F | Float?(F)] overload CopyMarshalable?(static F) = true;
[R | RegularRecord?(R) and allValues?(CopyMarshalable?, ...RecordFieldTypes(R))]
overload CopyMarshalable?(static R) = true;
[...TupleMembers | allValues?(CopyMarshalable?, ...TupleMembers)]
overload CopyMarshalable?(static Tuple[...TupleMembers]) = true;
[...UnionMembers | allValues?(CopyMarshalable?, ...UnionMembers)]
overload CopyMarshalable?(static Union[...UnionMembers]) = true;

[T, n | CopyMarshalable?(T)] overload CopyMarshalable?(static Array[T, n]) = true;



//
// memberwise record marshaling
//
private RecordMarshalable?(R) = allValues?(Marshalable?, ...RecordFieldTypes(R));
private RecordMemberwiseMarshalable?(R)
    = RecordMarshalable?(R) and not CopyMarshalable?(R);

[R | Record?(R) and RecordMemberwiseMarshalable?(R)]
overload marshaledSize(r: R)
    = ...foldValues(add, ...mapValues(marshaledSize, ...recordFields(r)));

[R | Record?(R) and RecordMemberwiseMarshalable?(R)]
overload marshalTo(buffer_: Pointer[Byte], forward r: R) buffer: Pointer[Byte] {
    buffer <-- buffer_;
    static for (x in ...recordFields(r))
        buffer = marshalTo(buffer, x);
}

[FieldT]
private unmarshalMemberwise(
    begin: Pointer[Byte],
    end: Pointer[Byte],
    field: FieldT,
    ...fields
) {
    field, begin <-- ...unmarshalFrom(begin, end, FieldT);
    try {
        unmarshalMemberwise(begin, end, ...fields);
    } catch (ex) {
        destroy(field);
        throw ex;
    }
}

overload unmarshalMemberwise(begin: Pointer[Byte], end: Pointer[Byte]) {}

[R | Record?(R) and RecordMemberwiseMarshalable?(R)]
overload unmarshalFrom(begin_: Pointer[Byte], end: Pointer[Byte], static R)
    returned: R, begin: Pointer[Byte]
{
    begin <-- begin_;
    unmarshalMemberwise(begin, end, ...recordFields(returned));
}



//
// memberwise tuple marshaling
//
[...T] private TupleMarshalable?(static Tuple[...T]) = allValues?(Marshalable?, ...T);
[T] private TupleMemberwiseMarshalable?(static T)
    = TupleMarshalable?(T) and not CopyMarshalable?(T);

[T | Tuple?(T) and TupleMemberwiseMarshalable?(T)]
overload marshaledSize(t: T)
    = ...foldValues(add, ...mapValues(marshaledSize, ...unpack(t)));

[T | Tuple?(T) and TupleMemberwiseMarshalable?(T)]
overload marshalTo(buffer_: Pointer[Byte], forward t: T) buffer: Pointer[Byte] {
    buffer <-- buffer_;
    static for (x in ...unpack(t))
        buffer = marshalTo(buffer, x);
}

[T | Tuple?(T) and TupleMemberwiseMarshalable?(T)]
overload unmarshalFrom(begin_: Pointer[Byte], end: Pointer[Byte], static T)
    returned: T, begin: Pointer[Byte]
{
    begin <-- begin_;
    unmarshalMemberwise(begin, end, ...unpackRef(returned));
}



//
// memberwise variant marshaling
//
private VariantMarshalable?(V) = allValues?(Marshalable?, ...VariantMembers(V));
private VariantMemberwiseMarshalable?(V)
    = VariantMarshalable?(V) and not CopyMarshalable?(V);

[V | Variant?(V) and VariantMemberwiseMarshalable?(V)]
overload marshaledSize(v: V)
    = TypeSize(Int) + marshaledSize(*v);

[V | Variant?(V) and VariantMemberwiseMarshalable?(V)]
overload marshalTo(buffer_: Pointer[Byte], v: V) buffer: Pointer[Byte] {
    buffer <-- buffer_;
    buffer = marshalTo(buffer, variantTag(v));
    buffer = marshalTo(buffer, *v);
}

record UnmarshalInvalidVariantTag (tag: Int);
instance Exception = UnmarshalInvalidVariantTag;

[...T, n]
private unmarshalVariantMember(
    begin: Pointer[Byte],
    end: Pointer[Byte],
    repr: VariantRepr[...T],
    static n
) {
    throw UnmarshalInvalidVariantTag(repr.tag);
}

[...T, n | n < countValues(...T)]
overload unmarshalVariantMember(
    begin: Pointer[Byte],
    end: Pointer[Byte],
    repr: VariantRepr[...T],
    static n
) {
    if (repr.tag == Int(n))
        staticIndex(repr.data, static n), begin
            <-- ...unmarshalFrom(begin, end, Type(staticIndex(repr.data, static n)));
    else
        unmarshalVariantMember(begin, end, repr, static n+1);
}


[V | Variant?(V) and VariantMemberwiseMarshalable?(V)]
overload unmarshalFrom(begin_: Pointer[Byte], end: Pointer[Byte], static V)
    returned: V, begin: Pointer[Byte]
{
    begin <-- begin_;
    ref repr = variantRepr(returned);
    repr.tag, begin <-- ...unmarshalFrom(begin, end, Int);

    unmarshalVariantMember(begin, end, repr, static SizeT(0));
}



//
// general sequence marshaling
//
private ItemwiseMarshalableSequence?(S)
    = Sequence?(S) and Marshalable?(SequenceElementType(S))
      and CallDefined?(push, S, SequenceElementType(S));

private sequenceMarshaledSize(seq)
    = TypeSize(SizeT) + reduce(add, SizeT(0), map(marshaledSize, seq));

[S | ItemwiseMarshalableSequence?(S)]
overload marshaledSize(seq: S) = sequenceMarshaledSize(seq);

[S | ItemwiseMarshalableSequence?(S)]
overload marshalTo(buffer_: Pointer[Byte], forward seq: S) buffer: Pointer[Byte] {
    buffer <-- buffer_;
    var sizeBuffer = buffer;
    buffer += TypeSize(SizeT);
    var n = SizeT(0);
    for (x in seq) {
        inc(n);
        buffer = marshalTo(buffer, x);
    }
    marshalTo(sizeBuffer, n);
}

[S | ItemwiseMarshalableSequence?(S) and SizedSequence?(S)]
overload marshalTo(buffer_: Pointer[Byte], forward seq: S) buffer: Pointer[Byte] {
    buffer <-- marshalTo(buffer_, SizeT(size(seq)));
    for (x in seq)
        buffer = marshalTo(buffer, x);
}

[S | ItemwiseMarshalableSequence?(S)]
overload unmarshalFrom(begin_: Pointer[Byte], end: Pointer[Byte], static S) {
    var n, begin = ...unmarshalFrom(begin_, end, SizeT);
    var s = S();

    for (x in range(n)) {
        var n, begin2 = ...unmarshalFrom(begin, end, SequenceElementType(S));
        push(s, move(n));
        begin = begin2;
    }
    return move(s), begin;
}



//
// null marshaling of static values
//
[x] overload marshaledSize(static x) = SizeT(0);
[x] overload marshalTo(buffer: Pointer[Byte], static x) = buffer;
[x] overload unmarshalFrom(begin: Pointer[Byte], end: Pointer[Byte], static Static[x])
    = static x, begin;



//
// high-level interface
//
marshal(forward ...values) returned: Vector[Byte] {
    var sz = foldValues(add, ...mapValues(marshaledSize, ...values));
    returned <-- Vector[Byte]();
    resize(returned, sz);

    var buffer = begin(returned);
    static for (value in ...values) {
        buffer = marshalTo(buffer, value);
    }
    assert(buffer == end(returned));
}

overload marshal() = Vector[Byte]();

unmarshal(data: Vector[Byte], ...Types) {
    var b = begin(data);
    var e = end(data);

    return ...mapValues(T => {
        var n, b2 = ...unmarshalFrom(b, e, T);
        b = b2;
        return move(n);
    }, ...Types);
}
