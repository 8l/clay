

//
// constructors, move, destory
//

[E | Enum?(E)]
overload E() returned:E {
}

[E | Enum?(E)]
overload E(src:E) returned:E {
    primitiveCopy(returned, src);
}

[E | Enum?(E)]
overload move(src:E) returned:E {
    primitiveCopy(returned, src);
}

[E | Enum?(E)]
overload destroy(x:E) {
}



//
// convert to/from integers
//

[E,I | Enum?(E) and Integer?(I)]
overload I(a:E) = I(enumToInt(a));

[E | Enum?(E)]
overload Int(a:E) = enumToInt(a);

[E,I | Enum?(E) and Integer?(I)]
overload E(a:I) = intToEnum(E, Int(a));

[E | Enum?(E)]
overload E(a:Int) = intToEnum(E, a);



//
// equals?, lesser?
//

[E | Enum?(E)]
overload equals?(a:E, b:E) = (enumToInt(a) == enumToInt(b));

[E | Enum?(E)]
overload lesser?(a:E, b:E) = (enumToInt(a) < enumToInt(b));
