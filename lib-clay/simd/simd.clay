
import simd.primitives as prims;


//
// Vec type inferring constructor
//

[...A | (countArgs(...A) > 0) and AllEqual?(...A)]
overload Vec(...args:A) {
    alias n = static countArgs(...A);
    alias T = firstArg(...A);
    return Vec[T, n](...args);
}

private AllEqual?(a, b, ...rest) = (a == b) and AllEqual?(b, ...rest);
overload AllEqual?(a) = true;

private countArgs(x, ...rest) = 1 + countArgs(...rest);
overload countArgs() = 0;

private firstArg(a, ...b) = a;



//
// Vec basic constructor
//

[T,n,...A | Tuple[...Times(T,static n)] == Tuple[...A]]
overload Vec[T,n](...args:A) {
    return insertElements(Vec[T,n](), static 0, ...args);
}

[n]
private Times(a, static n) = a, ...Times(a, static n-1);
overload Times(a, static 0) = ;

private procedure insertElements;

[T,n,i]
overload insertElements(a:Vec[T,n], static i, first, ...rest) {
    var b = prims.insertElement(a, i, first);
    return insertElements(b, static i+1, ...rest);
}

[T,n]
overload insertElements(a:Vec[T,n], static n) {
    return a;
}



//
// Vec other constructors, destructor
//

[T,n]
overload Vec[T,n]() returned:Vec[T,n] {
}

[T,n]
overload Vec[T,n](src:Vec[T,n]) returned:Vec[T,n] __llvm__{
    %1 = load $Vec[T,n] * %src
    store $Vec[T,n] %1, $Vec[T,n] * %returned
    ret i32 0
}

[T,n]
overload destroy(a:Vec[T,n]) {
}



//
// unpack
//

[T,n]
overload unpack(a:Vec[T,n]) = ...unpackVec(a, static 0);

private procedure unpackVec;

[T,n,i]
overload unpackVec(a:Vec[T,n], static i) =
    prims.extractElement(a, i), ...unpackVec(a, static i+1);

[T,n]
overload unpackVec(a:Vec[T,n], static n) = ;



//
// numeric ops
//

[T,n]
overload add(a:Vec[T,n], b:Vec[T,n]) = prims.add(a, b);

[T,n]
overload subtract(a:Vec[T,n], b:Vec[T,n]) = prims.subtract(a, b);

[T,n]
overload multiply(a:Vec[T,n], b:Vec[T,n]) = prims.multiply(a, b);

[T,n]
overload divide(a:Vec[T,n], b:Vec[T,n]) = prims.divide(a, b);

[T,n]
overload remainder(a:Vec[T,n], b:Vec[T,n]) = prims.remainder(a, b);



//
// bitwise ops
//

[T,n]
overload shiftLeft(a:Vec[T,n], b:Vec[T,n]) = prims.shiftLeft(a, b);

[T,n]
overload shiftRight(a:Vec[T,n], b:Vec[T,n]) = prims.shiftRight(a, b);

[T,n]
overload bitwiseAnd(a:Vec[T,n], b:Vec[T,n]) = prims.bitwiseAnd(a, b);

[T,n]
overload bitwiseOr(a:Vec[T,n], b:Vec[T,n]) = prims.bitwiseOr(a, b);

[T,n]
overload bitwiseXor(a:Vec[T,n], b:Vec[T,n]) = prims.bitwiseXor(a, b);
