
import simd.primitives as prims;


//
// index
//

[T,n,I | Integer?(I)]
overload index(a:Vec[T,n], i:I) = ref prims.vecElementRef(a, Int(i));



//
// type inferring constructor
//

[...A | (countValues(...A) > 0) and equalValues?(...A)]
overload Vec(...args:A) {
    alias n = static countValues(...A);
    alias T = firstValue(...A);
    return Vec[T, n](...args);
}



//
// basic constructor
//

[T,n,...A | Tuple[...replicateValue(T,static n)] == Tuple[...A]]
overload Vec[T,n](...args:A) {
    var a = Vec[T,n]();
    var i = 0;
    static for (x in ...args) {
        a[i] = x;
        i += 1;
    }
    return a;
}



//
// single element replicating constructor
//

[T,n]
overload Vec[T,n](x:T) {
    var a = Vec[T,n]();
    for (i in range(n))
        a[i] = x;
    return a;
}



//
// other constructors, moveUnsafe, resetUnsafe, assign, destroy
//

[T,n]
overload Vec[T,n]() returned:Vec[T,n] {
}

[T,n]
overload Vec[T,n](src:Vec[T,n]) returned:Vec[T,n] __llvm__{
    %1 = load $Vec[T,n] * %src
    store $Vec[T,n] %1, $Vec[T,n] * %returned
    ret i32 0
}

[T,n]
overload moveUnsafe(src:Vec[T,n]) returned:Vec[T,n] {
    returned <-- src;
}

[T,n]
overload resetUnsafe(src:Vec[T,n]) {
}

[T,n]
overload assign(dest:Vec[T,n], src:Vec[T,n]) {
    dest <-- src;
}

[T,n]
overload destroy(a:Vec[T,n]) {
}



//
// unpackVec
//

[T,n]
unpackVec(a:Vec[T,n]) = ...unpackElements(a, static 0);

private procedure unpackElements;

[T,n,i]
overload unpackElements(a:Vec[T,n], static i) =
    a[i], ...unpackElements(a, static i+1);

[T,n,i | i == n]
overload unpackElements(a:Vec[T,n], static i) = ;



//
// numeric ops
//

[T,n]
overload add(a:Vec[T,n], b:Vec[T,n]) = prims.add(a, b);

[T,n,X | Numeric?(X)]
overload add(a:Vec[T,n], x:X) = a + Vec[T,n](T(x));

[T,n,X | Numeric?(X)]
overload add(x:X, a:Vec[T,n]) = Vec[T,n](T(x)) + a;


[T,n]
overload subtract(a:Vec[T,n], b:Vec[T,n]) = prims.subtract(a, b);

[T,n,X | Numeric?(X)]
overload subtract(a:Vec[T,n], x:X) = a - Vec[T,n](T(x));

[T,n,X | Numeric?(X)]
overload subtract(x:X, a:Vec[T,n]) = Vec[T,n](T(x)) - a;


[T,n]
overload multiply(a:Vec[T,n], b:Vec[T,n]) = prims.multiply(a, b);

[T,n,X | Numeric?(X)]
overload multiply(a:Vec[T,n], x:X) = a * Vec[T,n](T(x));

[T,n,X | Numeric?(X)]
overload multiply(x:X, a:Vec[T,n]) = Vec[T,n](T(x)) * a;


[T,n]
overload divide(a:Vec[T,n], b:Vec[T,n]) = prims.divide(a, b);

[T,n,X | Numeric?(X)]
overload divide(a:Vec[T,n], x:X) = a / Vec[T,n](T(x));

[T,n,X | Numeric?(X)]
overload divide(x:X, a:Vec[T,n]) = Vec[T,n](T(x)) / a;


[T,n]
overload remainder(a:Vec[T,n], b:Vec[T,n]) = prims.remainder(a, b);

[T,n,X | Numeric?(X)]
overload remainder(a:Vec[T,n], x:X) = a % Vec[T,n](T(x));

[T,n,X | Numeric?(X)]
overload remainder(x:X, a:Vec[T,n]) = Vec[T,n](T(x)) % a;



//
// bitwise ops
//

[T,n]
overload shiftLeft(a:Vec[T,n], b:Vec[T,n]) = prims.shiftLeft(a, b);

[T,n,X | Numeric?(X)]
overload shiftLeft(a:Vec[T,n], x:X) = shiftLeft(a, Vec[T,n](T(x)));

[T,n,X | Numeric?(X)]
overload shiftLeft(x:X, a:Vec[T,n]) = shiftLeft(Vec[T,n](T(x)),  a);


[T,n]
overload shiftRight(a:Vec[T,n], b:Vec[T,n]) = prims.shiftRight(a, b);

[T,n,X | Numeric?(X)]
overload shiftRight(a:Vec[T,n], x:X) = shiftRight(a, Vec[T,n](T(x)));

[T,n,X | Numeric?(X)]
overload shiftRight(x:X, a:Vec[T,n]) = shiftRight(Vec[T,n](T(x)),  a);


[T,n]
overload bitwiseAnd(a:Vec[T,n], b:Vec[T,n]) = prims.bitwiseAnd(a, b);

[T,n,X | Numeric?(X)]
overload bitwiseAnd(a:Vec[T,n], x:X) = bitwiseAnd(a, Vec[T,n](T(x)));

[T,n,X | Numeric?(X)]
overload bitwiseAnd(x:X, a:Vec[T,n]) = bitwiseAnd(Vec[T,n](T(x)),  a);


[T,n]
overload bitwiseOr(a:Vec[T,n], b:Vec[T,n]) = prims.bitwiseOr(a, b);

[T,n,X | Numeric?(X)]
overload bitwiseOr(a:Vec[T,n], x:X) = bitwiseOr(a, Vec[T,n](T(x)));

[T,n,X | Numeric?(X)]
overload bitwiseOr(x:X, a:Vec[T,n]) = bitwiseOr(Vec[T,n](T(x)),  a);


[T,n]
overload bitwiseXor(a:Vec[T,n], b:Vec[T,n]) = prims.bitwiseXor(a, b);

[T,n,X | Numeric?(X)]
overload bitwiseXor(a:Vec[T,n], x:X) = bitwiseXor(a, Vec[T,n](T(x)));

[T,n,X | Numeric?(X)]
overload bitwiseXor(x:X, a:Vec[T,n]) = bitwiseXor(Vec[T,n](T(x)),  a);
