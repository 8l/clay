import _core;
import _numeric;

//
// Range
//

record Range[T](first:T, last:T);

overload iterator[T](r:Range[T]) = r;

overload hasNext?[T](r:Range[T]) = r.first < r.last;

overload next[T](r:Range[T]) {
    var x = r.first;
    inc(r.first);
    return x;
}

overloadable range;

overload range(first, last) = Range(first, last);
overload range[I](last:I) if (Integer?(I)) = Range(zero(I), last);


//
// CoordinateRange
//

record CoordinateRange[T](first:T, last:T);

overload iterator[T](r:CoordinateRange[T]) = r;

overload hasNext?[T](r:CoordinateRange[T]) = r.first < r.last;

overload next[T](r:CoordinateRange[T]) ref {
    ref obj = at(r.first);
    inc(r.first);
    return obj;
}
