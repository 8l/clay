

//
// core operations
//

overloadable destroy;
overloadable move;
overloadable assign;

overloadable equals?;
overloadable lesser?;
overloadable lesserEquals?;
overloadable greater?;
overloadable greaterEquals?;

overloadable plus;
overloadable minus;

overloadable add;
overloadable subtract;
overloadable multiply;
overloadable divide;
overloadable remainder;

overloadable addAssign;
overloadable subtractAssign;
overloadable multiplyAssign;
overloadable divideAssign;
overloadable remainderAssign;

overloadable inc;
overloadable dec;

overloadable shiftLeft;
overloadable shiftRight;
overloadable bitwiseAnd;
overloadable bitwiseOr;
overloadable bitwiseXor;
overloadable bitwiseNot;

overloadable dereference;

overloadable call;

overloadable unsupported; // used for triggering compile time errors



//
// LValue?, RValue?
//

overloadable LValue?;
inlined overload LValue?(lvalue a) = true;
inlined overload LValue?(rvalue a) = false;

inlined RValue?(x) = not LValue?(x);



//
// defaults
//

initialize(a) {
    a <-- Type(a)();
}

[T]
overload move(a:T) returned:T {
    returned <-- a;
    destroy(a);
    a <-- T();
}

[T]
overload assign(dest:T, src:T) {
    if (&dest == &src) return;
    destroy(dest);
    dest <-- src;
}

[T]
overload assign(dest:T, rvalue src:T) {
    destroy(dest);
    dest <-- move(src);
}

notEquals?(a, b) = not equals?(a, b);

overload lesserEquals?(a, b) = not lesser?(b, a);

overload greater?(a, b) = lesser?(b, a);

overload greaterEquals?(a, b) = not lesser?(a, b);

overload addAssign(a, b)       { a = a + b; }
overload subtractAssign(a, b)  { a = a - b; }
overload multiplyAssign(a, b)  { a = a * b; }
overload divideAssign(a, b)    { a = a / b; }
overload remainderAssign(a, b) { a = a % b; }

overload bitwiseAnd(a, b, c, ...) = bitwiseAnd(bitwiseAnd(a,b), c, ...);
overload bitwiseOr(a, b, c, ...) = bitwiseOr(bitwiseOr(a,b), c, ...);
overload bitwiseXor(a, b, c, ...) = bitwiseXor(bitwiseXor(a,b), c, ...);



//
// swap
//

swap(a, b) {
    var temp = move(a);
    a = move(b);
    b = move(temp);
}
