
public import __primitives__.(Void, TypeOf, Type?, TypeSize);

public import __primitives__.(Tuple?, Tuple, TupleElementCount,
                              TupleElementOffset, tuple, tupleRef);

public import __primitives__.(Record?, RecordFieldCount,
                              RecordFieldOffset, RecordFieldIndex,
                              recordFieldRef, recordFieldRefByName);

public import __primitives__.(Enum?, enumToInt, intToEnum);

public import __primitives__.(StaticObject);

import __primitives__.(primitiveCopy);
import types.*;

overloadable destroy;
overloadable move;
overloadable assign;

overloadable equals?;
overloadable lesser?;
overloadable lesserEquals?;
overloadable greater?;
overloadable greaterEquals?;

overloadable plus;
overloadable minus;

overloadable add;
overloadable subtract;
overloadable multiply;
overloadable divide;
overloadable remainder;

overloadable addAssign;
overloadable subtractAssign;
overloadable multiplyAssign;
overloadable divideAssign;
overloadable remainderAssign;

overloadable inc;
overloadable dec;

overloadable dereference;

overloadable call;

overloadable unsupported; // used for triggering compile time errors



//
// LValue?, RValue?
//

overloadable LValue?;
inlined overload LValue?(lvalue a) = true;
inlined overload LValue?(rvalue a) = false;

inlined RValue?(x) = not LValue?(x);



//
// defaults
//

[T]
overload T() : T {
}

initialize(a) {
    a <-- TypeOf(a)();
}

[T]
overload destroy(a:T) {
}

[T]
overload move(a:T) : T {
    returned <-- a;
    destroy(a);
    a <-- T();
}

[T]
overload assign(dest:T, src:T) {
    if (equals?(&dest, &src)) return;
    destroy(dest);
    dest <-- src;
}

[T]
overload assign(dest:T, rvalue src:T) {
    if (equals?(&dest, &src)) return;
    destroy(dest);
    dest <-- move(src);
}

notEquals?(a, b) = not equals?(a, b);

overload lesserEquals?(a, b) = not lesser?(b, a);

overload greater?(a, b) = lesser?(b, a);

overload greaterEquals?(a, b) = not lesser?(a, b);

overload addAssign(a, b)       { a = a + b; }
overload subtractAssign(a, b)  { a = a - b; }
overload multiplyAssign(a, b)  { a = a * b; }
overload divideAssign(a, b)    { a = a / b; }
overload remainderAssign(a, b) { a = a % b; }


//
// swap
//

swap(a, b) {
    var temp = move(a);
    a = move(b);
    b = move(temp);
}



//
// Tuple
//

// default constructor

[T|Tuple?(T)]
overload T() : T {
    initTupleElements(returned, SizeT(0));
}

private overloadable initTupleElements;

[i]
overload initTupleElements(a, static i) {
    initialize(tupleRef(a, i));
    initTupleElements(a, i+1);
}

[T, i | (i == TupleElementCount(T))]
overload initTupleElements(a:T, static i) {
}


// copy constructor

[T|Tuple?(T)]
overload T(src:T) : T {
    copyTupleElements(returned, src, SizeT(0));
}

private overloadable copyTupleElements;

[T,i]
overload copyTupleElements(dest:T, src:T, static i)
{
    tupleRef(dest, i) <-- tupleRef(src, i);
    copyTupleElements(dest, src, i+1);
}

[T,i | (i == TupleElementCount(T))]
overload copyTupleElements(dest:T, src:T, static i) {
}


// move constructor

[T|Tuple?(T)]
overload move(src:T) : T {
    moveTupleElements(returned, src, SizeT(0));
}

private overloadable moveTupleElements;

[T,i]
overload moveTupleElements(dest:T, src:T, static i)
{
    tupleRef(dest, i) <-- move(tupleRef(src, i));
    moveTupleElements(dest, src, i+1);
}

[T,i | (i == TupleElementCount(T))]
overload moveTupleElements(dest:T, src:T, static i) {
}


// destroy

[T|Tuple?(T)]
overload destroy(a:T) {
    destroyTupleElements(a, SizeT(0));
}

private overloadable destroyTupleElements;

[i]
overload destroyTupleElements(a, static i) {
    destroy(tupleRef(a, i));
    destroyTupleElements(a, i+1);
}

[T, i |(i == TupleElementCount(T))]
overload destroyTupleElements(a:T, static i) {
}


// assign

[T|Tuple?(T)]
overload assign(dest:T, src:T) {
    assignTupleElements(dest, src, SizeT(0));
}

private overloadable assignTupleElements;

[T,i]
overload assignTupleElements(dest:T, src:T, static i) {
    assign(tupleRef(dest, i), tupleRef(src, i));
    assignTupleElements(dest, src, i+1);
}

[T,i | (i == TupleElementCount(T))]
overload assignTupleElements(dest:T, src:T, static i) {
}


// equals?


[T|Tuple?(T)]
overload equals?(a:T, b:T) {
    return equalTupleElements?(a, b, SizeT(0));
}

private overloadable equalTupleElements?;

[T,i]
overload equalTupleElements?(a:T, b:T, static i) {
    if (not equals?(tupleRef(a, i), tupleRef(b, i)))
        return false;
    return equalTupleElements(a, b, i+1);
}

[T,i |(i == TupleElementCount(T))]
overload equalTupleElements?(a:T, b:T, static i) {
    return true;
}


// lesser?

[T|Tuple?(T)]
overload lesser?(a:T, b:T) {
    return lesserTupleElements?(a, b, SizeT(0));
}

private overloadable lesserTupleElements?;

[T,i]
overload lesserTupleElements?(a:T, b:T, static i) {
    ref av = tupleRef(a, i);
    ref bv = tupleRef(b, i);
    if (lesser?(av, bv))
        return true;
    if (lesser?(bv, av))
        return false;
    return lesserTupleElements(a, b, i+1);
}

[T,i |(i == TupleElementCount(T))]
overload lesserTupleElements?(a:T, b:T, static i) {
    return false;
}



//
// records
//

// default constructor

[T|Record?(T)]
overload T() : T {
    initRecordFields(returned, SizeT(0));
}

private overloadable initRecordFields;

[i]
overload initRecordFields(a, static i) {
    initialize(recordFieldRef(a, i));
    initRecordFields(a, i+1);
}

[T,i | (i == RecordFieldCount(T))]
overload initRecordFields(a:T, static i) {
}


// copy constructor

[T|Record?(T)]
overload T(src:T) : T {
    copyRecordFields(returned, src, SizeT(0));
}

private overloadable copyRecordFields;

[T,i]
overload copyRecordFields(dest:T, src:T, static i) {
    recordFieldRef(dest, i) <-- recordFieldRef(src, i);
    copyRecordFields(dest, src, i+1);
}

[T,i | (i == RecordFieldCount(T))]
overload copyRecordFields(dest:T, src:T, static i) {
}


// move constructor

[T|Record?(T)]
overload move(src:T) : T {
    moveRecordFields(returned, src, SizeT(0));
}

private overloadable moveRecordFields;

[T,i]
overload moveRecordFields(dest:T, src:T, static i) {
    recordFieldRef(dest, i) <-- move(recordFieldRef(src, i));
    moveRecordFields(dest, src, i+1);
}

[T,i | (i == RecordFieldCount(T))]
overload moveRecordFields(dest:T, src:T, static i) {
}


// destroy

[T|Record?(T)]
overload destroy(a:T) {
    destroyRecordFields(a, SizeT(0));
}

private overloadable destroyRecordFields;

[i]
overload destroyRecordFields(a, static i) {
    destroy(recordFieldRef(a, i));
    destroyRecordFields(a, i+1);
}

[T, i |(i == RecordFieldCount(T))]
overload destroyRecordFields (a:T, static i) {
}


// assign

[T|Record?(T)]
overload assign(dest:T, src:T) {
    assignRecordFields(dest, src, SizeT(0));
}

private overloadable assignRecordFields;

[T,i]
overload assignRecordFields(dest:T, src:T, static i) {
    assign(recordFieldRef(dest, i), recordFieldRef(src, i));
    assignRecordFields(dest, src, i+1);
}

[T,i | (i == RecordFieldCount(T))]
overload assignRecordFields(dest:T, src:T, static i) {
}


// equals?

[T|Record?(T)]
overload equals?(a:T, b:T) {
    return equalRecordFields?(a, b, SizeT(0));
}

private overloadable equalRecordFields?;

[T,i]
overload equalRecordFields?(a:T, b:T, static i) {
    if (not equals?(recordFieldRef(a, i), recordFieldRef(b, i)))
        return false;
    return equalRecordFields?(a, b, i+1);
}

[T,i |(i == RecordFieldCount(T))]
overload equalRecordFields?(a:T, b:T, static i) {
    return true;
}


// lesser?

[T|Record?(T)]
overload lesser?(a:T, b:T) {
    return lesserRecordFields?(a, b, SizeT(0));
}

private overloadable lesserRecordFields?;

[T,i]
overload lesserRecordFields?(a:T, b:T, static i) {
    ref af = recordFieldRef(a, i);
    ref bf = recordFieldRef(b, i);
    if (lesser?(af, bf))
        return true;
    if (lesser?(bf, af))
        return false;
    return lesserRecordFields?(a, b, i+1);
}

[T,i |(i == RecordFieldCount(T))]
overload lesserRecordFields?(a:T, b:T, static i) {
    return false;
}



//
// StaticObject
//

[A]
overload StaticObject[A](src:StaticObject[A]) : StaticObject[A] {
}

[A, B]
overload equals?(a:StaticObject[A], b:StaticObject[B]) = false;

[A]
overload equals?(a:StaticObject[A], b:StaticObject[A]) = true;

[A]
overload lesser?(a:StaticObject[A], b:StaticObject[A]) = false;
