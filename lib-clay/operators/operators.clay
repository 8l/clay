

//
// core operations
//

procedure destroy;
procedure moveUnsafe;
procedure resetUnsafe;
procedure assign;

procedure equals?;
procedure lesser?;
procedure lesserEquals?;
procedure greater?;
procedure greaterEquals?;

procedure plus;
procedure minus;

procedure add;
procedure subtract;
procedure multiply;
procedure divide;
procedure remainder;

procedure addAssign;
procedure subtractAssign;
procedure multiplyAssign;
procedure divideAssign;
procedure remainderAssign;

procedure inc;
procedure dec;

procedure shiftLeft;
procedure shiftRight;
procedure bitwiseAnd;
procedure bitwiseOr;
procedure bitwiseXor;
procedure bitwiseNot;

procedure dereference;
procedure call;
procedure fieldRef;
procedure staticIndex;



//
// coordinate type predicates
//

Coordinate?(T) = CallDefined?(dereference, T);
CoordinateTargetType(T) = Type(dereference(typeToLValue(T)));

RandomAccessCoordinate?(T) =
    Coordinate?(T) and
    CallDefined?(add, T, Int) and
    CallDefined?(subtract, T, Int) and
    CallDefined?(subtract, T, T);

LValueCoordinate?(T) =
    Coordinate?(T) and
    LValue?(dereference(typeToLValue(T)));

// true if adjacent coordinates point to adjacent locations in memory
ContiguousCoordinate?(T) = false;



//
// iterator type predicates
//

Iterator?(T) = CallDefined?(hasNext?, T) and CallDefined?(next, T);
IteratorTargetType(T) = Type(next(typeToLValue(T)));



//
// iteration protocol
//

procedure iterator; // create iterator

procedure hasNext?; // iterator operation
procedure next;     // iterator operation



//
// reverse iteration
//

procedure reverseIterator;



//
// sequence protocol
//

procedure size;
procedure index;

procedure begin; 
procedure end;

procedure front;
procedure back;

procedure push;
procedure pop;
procedure clear;
procedure insert;
procedure remove;
procedure reserve;
procedure resize;
procedure resizeUnsafe;

procedure pushFront;
procedure popFront;

// defined for statically sized sequences like Array[T,n]
procedure StaticSize;



//
// sequence type predicates
//

Sequence?(T) = CallDefined?(iterator, T);
SequenceElementType(T) = Type(next(iterator(typeToLValue(T))));
SizedSequence?(T) = Sequence?(T) and CallDefined?(size, T);
StaticSizedSequence?(T) = Sequence?(T) and CallDefined?(StaticSize, Static[T]);
RandomAccessSequence?(T) = Sequence?(T) and CallDefined?(index, T, Int);
LValueSequence?(T) = Sequence?(T) and LValue?(next(iterator(typeToLValue(T))));

CoordinateSequence?(T) = Sequence?(T) and CallDefined?(begin, T) and CallDefined?(end, T);
SequenceCoordinateType(T) = Type(begin(typeToLValue(T)));

SequenceIteratorType(T) = Type(iterator(typeToLValue(T)));

// true if sequence elements are stored contiguously in memory
ContiguousSequence?(T) = false;

// true if copying the sequence is efficient
LightweightSequence?(T) = false;

// true for sequences which have value semantics.
SequenceContainer?(T) = false;

// true if sequence is not single-valued (0 valued sequences are included).
MultiValuedSequence?(T) =
    Sequence?(T) and multiValued?(...Type(...next(iterator(typeToLValue(T)))));

private multiValued?(...x) = true;
overload multiValued?(x) = false;



//
// hashing
//

procedure hash;



//
// mapping protocol
//

// 'index' and 'size' are available for mappings
// 'remove' is available

procedure lookup; // get pointer to element, null if not available
procedure put;
procedure items; // iterate over all items

inline contains?(map, key) = not null?(lookup(map, key));



//
// LValue?, RValue?
//

procedure LValue?;
callbyname overload LValue?(lvalue a) = true;
callbyname overload LValue?(rvalue a) = false;

callbyname RValue?(x) = not LValue?(x);



//
// defaults
//

inline initialize(a) {
    a <-- Type(a)();
}

[T]
inline copy(a:T) = T(a);

[T]
inline move(src:T) returned:T {
    returned <-- moveUnsafe(src);
    resetUnsafe(src);
}

[T]
inline overload assign(dest:T, rvalue src:T) {
    destroy(dest);
    dest <-- move(src);
}

inline notEquals?(a, b) = not equals?(a, b);

inline ordered?(a, b) = (a <= b) or (b <= a);

inline overload lesserEquals?(a, b) = not lesser?(b, a);

inline overload greater?(a, b) = lesser?(b, a);

inline overload greaterEquals?(a, b) = not lesser?(a, b);

inline overload addAssign(a, b)       { a = a + b; }
inline overload subtractAssign(a, b)  { a = a - b; }
inline overload multiplyAssign(a, b)  { a = a * b; }
inline overload divideAssign(a, b)    { a = a / b; }
inline overload remainderAssign(a, b) { a = a % b; }

inline overload bitwiseAnd(a, b, c, ...rest) =
    bitwiseAnd(bitwiseAnd(a,b), c, ...rest);

inline overload bitwiseOr(a, b, c, ...rest) =
    bitwiseOr(bitwiseOr(a,b), c, ...rest);

inline overload bitwiseXor(a, b, c, ...rest) =
    bitwiseXor(bitwiseXor(a,b), c, ...rest);



//
// swap
//

inline swap(a, b) {
    var temp = move(a);
    a = move(b);
    b = move(temp);
}



//
// min, max
//

inline min(a, b) {
    if (a <= b)
        return a;
    else
        return b;
}

inline overload min(lvalue a, lvalue b) {
    if (a <= b)
        return ref a;
    else
        return ref b;
}

inline max(a, b) {
    if (a > b)
        return a;
    else
        return b;
}

inline overload max(lvalue a, lvalue b) {
    if (a > b)
        return ref a;
    else
        return ref b;
}



//
// empty?
//

[T | SizedSequence?(T)]
inline empty?(a:T) = (size(a) == 0);



//
// ifExpression
//

procedure ifExpression;

[T]
callbyname overload ifExpression(condition, consequent:T, alternate:T) {
    if (condition)
        return consequent;
    else
        return alternate;
}

[T]
callbyname overload ifExpression(condition, lvalue consequent:T, lvalue alternate:T) {
    if (condition)
        return ref consequent;
    else
        return ref alternate;
}



//
// bitwiseCast, bitwiseAndc, bitwiseBlend
//

[T, U | TypeSize(T) >= TypeSize(U)]
inline bitwiseCast(x: T, static U) = ref Pointer[U](&x)^;

inline bitwiseAndc(a, b) = bitwiseAnd(a, bitwiseNot(b));
inline bitwiseBlend(mask, ones, zeros)
    = bitwiseOr(bitwiseAnd(ones, mask), bitwiseAndc(zeros, mask));



//
// PODType?
//

PODType?(X) = false;

overload PODType?(static Bool) = true;
overload PODType?(static Int8) = true;
overload PODType?(static Int16) = true;
overload PODType?(static Int32) = true;
overload PODType?(static Int64) = true;
overload PODType?(static UInt8) = true;
overload PODType?(static UInt16) = true;
overload PODType?(static UInt32) = true;
overload PODType?(static UInt64) = true;
overload PODType?(static Float32) = true;
overload PODType?(static Float64) = true;
[T] overload PODType?(static Pointer[T]) = true;
[I, O] overload PODType?(static CodePointer[I, O]) = true;
[I, O] overload PODType?(static CCodePointer[I, O]) = true;
[I, O] overload PODType?(static VarArgsCCodePointer[I, O]) = true;
[I, O] overload PODType?(static StdCallCodePointer[I, O]) = true;
[I, O] overload PODType?(static FastCallCodePointer[I, O]) = true;
[T] overload PODType?(static Static[T]) = true;
[T,n] overload PODType?(static Array[T,n]) = PODType?(T);
[T,n] overload PODType?(static Vec[T,n]) = true;
[...T] overload PODType?(static Tuple[...T]) = allValues?(PODType?, ...T);
[...T] overload PODType?(static Union[...T]) = allValues?(PODType?, ...T);

[R | RegularRecord?(R)] overload PODType?(static R)
    = allValues?(PODType?, ...RecordFieldTypes(R));

[V | Variant?(V)] overload PODType?(static V)
    = allValues?(PODType?, ...VariantMembers(V));
