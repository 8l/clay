

//
// core operations
//

procedure destroy;
procedure move;
procedure assign;

procedure equals?;
procedure lesser?;
procedure lesserEquals?;
procedure greater?;
procedure greaterEquals?;

procedure plus;
procedure minus;

procedure add;
procedure subtract;
procedure multiply;
procedure divide;
procedure remainder;

procedure addAssign;
procedure subtractAssign;
procedure multiplyAssign;
procedure divideAssign;
procedure remainderAssign;

procedure inc;
procedure dec;

procedure shiftLeft;
procedure shiftRight;
procedure bitwiseAnd;
procedure bitwiseOr;
procedure bitwiseXor;
procedure bitwiseNot;

procedure dereference;
procedure call;
procedure fieldRef;



//
// Type
//

[T]
inlined Type(x:T) = T;



//
// LValue?, RValue?
//

procedure LValue?;
inlined overload LValue?(lvalue a) = true;
inlined overload LValue?(rvalue a) = false;

inlined RValue?(x) = not LValue?(x);



//
// defaults
//

initialize(a) {
    a <-- Type(a)();
}

[T]
copy(a:T) = T(a);

[T]
overload move(a:T) returned:T {
    returned <-- a;
    destroy(a);
    a <-- T();
}

[T]
overload assign(dest:T, src:T) {
    if (&dest == &src) return;
    destroy(dest);
    dest <-- src;
}

[T]
overload assign(dest:T, rvalue src:T) {
    destroy(dest);
    dest <-- move(src);
}

notEquals?(a, b) = not equals?(a, b);

overload lesserEquals?(a, b) = not lesser?(b, a);

overload greater?(a, b) = lesser?(b, a);

overload greaterEquals?(a, b) = not lesser?(a, b);

overload addAssign(a, b)       { a = a + b; }
overload subtractAssign(a, b)  { a = a - b; }
overload multiplyAssign(a, b)  { a = a * b; }
overload divideAssign(a, b)    { a = a / b; }
overload remainderAssign(a, b) { a = a % b; }

overload bitwiseAnd(a, b, c, ...rest) = bitwiseAnd(bitwiseAnd(a,b), c, ...rest);
overload bitwiseOr(a, b, c, ...rest) = bitwiseOr(bitwiseOr(a,b), c, ...rest);
overload bitwiseXor(a, b, c, ...rest) = bitwiseXor(bitwiseXor(a,b), c, ...rest);



//
// swap
//

swap(a, b) {
    var temp = move(a);
    a = move(b);
    b = move(temp);
}



//
// ReturnType
//
// return the return type given the callable and arg types.
// return 'BadReturnType' if the call is not defined.
//

private typesToValues(a, ...b) = ref null(a)^, ...typesToValues(...b);
overload typesToValues() = ;

record BadReturnType {}

[T]
ReturnType(callable:T, ...argTypes) =
    ReturnType(call, T, ...argTypes);

[F, ...A]
overload ReturnType(static F, ...argTypes:A) =
    BadReturnType;

[F, ...A | CallDefined?(F, ...typesToValues(...A))]
overload ReturnType(static F, ...argTypes:A) =
    Type(F(...typesToValues(...argTypes)));
