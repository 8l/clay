
public import __primitives__.(Int8, Int16, Int32, Int64,
                              UInt8, UInt16, UInt32, UInt64,
                              Float32, Float64,
                              numericEquals?, numericLesser?,
                              numericAdd, numericSubtract, numericMultiply,
                              numericDivide, numericNegate,
                              integerRemainder,
                              integerShiftLeft, integerShiftRight,
                              integerBitwiseAnd, integerBitwiseOr,
                              integerBitwiseXor, integerBitwiseNot,
                              numericConvert);

import operators.*;
import __primitives__.(primitiveCopy);


// numeric type predicates

static overloadable SignedIntegerType?;

[T]
static overload SignedIntegerType?(T) = false;

static overload SignedIntegerType?(Int8) = true;
static overload SignedIntegerType?(Int16) = true;
static overload SignedIntegerType?(Int32) = true;
static overload SignedIntegerType?(Int64) = true;


static overloadable UnsignedIntegerType?;

[T]
static overload UnsignedIntegerType?(T) = false;

static overload UnsignedIntegerType?(UInt8) = true;
static overload UnsignedIntegerType?(UInt16) = true;
static overload UnsignedIntegerType?(UInt32) = true;
static overload UnsignedIntegerType?(UInt64) = true;


static overloadable IntegerType?;

[T]
static overload IntegerType?(T) =
    SignedIntegerType?(T) or UnsignedIntegerType?(T);

[A, B]
static overload IntegerType?(A, B) =
    IntegerType?(A) and IntegerType?(B);


static overloadable FloatType?;

[T]
static overload FloatType?(T) = false;

static overload FloatType?(Float32) = true;
static overload FloatType?(Float64) = true;

[A, B]
static overload FloatType?(A, B) =
    FloatType?(A) and FloatType?(B);


static overloadable NumericType?;

[T]
static overload NumericType?(T) = IntegerType?(T) or FloatType?(T);

[A, B]
static overload NumericType?(A, B) =
    NumericType?(A) and NumericType?(B);


// BiggerIntegerType?, BiggerFloatType?, BiggerNumericType?

[A,B | IntegerType?(A,B)]
private static BiggerIntegerType?(A, B) =
    (TypeSize(A) > TypeSize(B)) or ((TypeSize(A) == TypeSize(B)) and
                                    UnsignedIntegerType?(A) and
                                    SignedIntegerType?(B));

[A,B | FloatType?(A,B)]
private static BiggerFloatType?(A, B) = TypeSize(A) > TypeSize(B);


private static overloadable BiggerNumericType?;

// FIXME: this default overload shouldn't be required.
[A,B]
static overload BiggerNumericType?(A, B) = false;

[A,B | FloatType?(A) and IntegerType?(B)]
static overload BiggerNumericType?(A, B) = true;

[A,B | IntegerType?(A) and FloatType?(B)]
static overload BiggerNumericType?(A, B) = false;

[A,B | IntegerType?(A,B)]
static overload BiggerNumericType?(A, B) = BiggerIntegerType?(A,B);

[A,B | FloatType?(A,B)]
static overload BiggerNumericType?(A, B) = BiggerFloatType?(A,B);


// toBiggerNumericType

private overloadable toBiggerNumericType;

[A | NumericType?(A)]
overload toBiggerNumericType(static A, static A, v) = v;

[A,B | NumericType?(A,B) and BiggerNumericType?(A,B)]
overload toBiggerNumericType(static A, static B, v) = A(v);

[A,B | NumericType?(A,B) and BiggerNumericType?(B,A)]
overload toBiggerNumericType(static A, static B, v) = B(v);


// constructors

[T1,T2 | NumericType?(T1,T2)]
overload T1(src:T2) = numericConvert(T1, src);

[T | NumericType?(T)]
overload T(src:T) : T {
    primitiveCopy(returned, src);
}


// assign

[A, B | NumericType?(A,B) and BiggerNumericType?(A,B)]
overload assign(dest:A, src:B) {
    primitiveCopy(dest, A(src));
}

[A, B | IntegerType?(A,B) and (TypeSize(A) == TypeSize(B))]
overload assign(dest:A, src:B) {
    primitiveCopy(dest, A(src));
}

[T | NumericType?(T)]
overload assign(dest:T, src:T) {
    primitiveCopy(dest, src);
}


// equals?, lesser?

[A,B | NumericType?(A,B)]
overload equals?(a:A, b:B) = numericEquals?(toBiggerNumericType(A, B, a),
                                            toBiggerNumericType(A, B, b));
[A | NumericType?(A)]
overload equals?(a:A, b:A) = numericEquals?(a, b);

[A,B | NumericType?(A,B)]
overload lesser?(a:A, b:B) = numericLesser?(toBiggerNumericType(A, B, a),
                                            toBiggerNumericType(A, B, b));
[A | NumericType?(A)]
overload lesser?(a:A, b:A) = numericLesser?(a, b);


// binary ops

[A,B | NumericType?(A,B)]
overload add(a:A, b:B) = numericAdd(toBiggerNumericType(A, B, a),
                                    toBiggerNumericType(A, B, b));
[A | NumericType?(A)]
overload add(a:A, b:A) = numericAdd(a, b);


[A,B | NumericType?(A,B)]
overload subtract(a:A, b:B) = numericSubtract(toBiggerNumericType(A, B, a),
                                              toBiggerNumericType(A, B, b));
[A | NumericType?(A)]
overload subtract(a:A, b:A) = numericSubtract(a, b);


[A,B | NumericType?(A,B)]
overload multiply(a:A, b:B) = numericMultiply(toBiggerNumericType(A, B, a),
                                              toBiggerNumericType(A, B, b));
[A | NumericType?(A)]
overload multiply(a:A, b:A) = numericMultiply(a, b);


[A,B | NumericType?(A,B)]
overload divide(a:A, b:B) = numericDivide(toBiggerNumericType(A, B, a),
                                          toBiggerNumericType(A, B, b));
[A | NumericType?(A)]
overload divide(a:A, b:A) = numericDivide(a, b);


[A,B | NumericType?(A,B)]
overload remainder(a:A, b:B) = numericRemainder(toBiggerNumericType(A, B, a),
                                                toBiggerNumericType(A, B, b));
[A | NumericType?(A)]
overload remainder(a:A, b:A) = numericRemainder(a, b);


// unary ops

[A | NumericType?(A)]
overload plus(a:A) = a;

[A | NumericType?(A)]
overload minus(a:A) = numericNegate(a);


// inc, dec

[A | NumericType?(A)]
overload inc(a:A) {
    a += A(1);
}

[A | NumericType?(A)]
overload dec(a:A) {
    a -= A(1);
}
