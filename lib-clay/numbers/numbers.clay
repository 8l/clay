import numbers.parser.*;
import numbers.floats.*;


//
// numeric type predicates
//

[T] SignedInteger?(static T) = false;
overload SignedInteger?(static Int8) = true;
overload SignedInteger?(static Int16) = true;
overload SignedInteger?(static Int32) = true;
overload SignedInteger?(static Int64) = true;


[T] UnsignedInteger?(static T) = false;
overload UnsignedInteger?(static UInt8) = true;
overload UnsignedInteger?(static UInt16) = true;
overload UnsignedInteger?(static UInt32) = true;
overload UnsignedInteger?(static UInt64) = true;


[T] Integer?(static T) = SignedInteger?(T) or UnsignedInteger?(T);
[A, B] overload Integer?(static A, static B) = Integer?(A) and Integer?(B);


[T] ByteSizedInteger?(static T) = false;
overload ByteSizedInteger?(static Int8) = true;
overload ByteSizedInteger?(static UInt8) = true;


[T] Float?(static T) = false;
overload Float?(static Float32) = true;
overload Float?(static Float64) = true;
[A, B] overload Float?(static A, static B) = Float?(A) and Float?(B);


[T] Numeric?(static T) = Integer?(T) or Float?(T);
[A, B] overload Numeric?(static A, static B) = Numeric?(A) and Numeric?(B);



//
// BiggerInteger?, BiggerFloat?, BiggerNumeric?
//

[A,B | Integer?(A,B)]
private BiggerInteger?(static A, static B) =
    (TypeSize(A) > TypeSize(B)) or ((TypeSize(A) == TypeSize(B)) and
                                    UnsignedInteger?(A) and
                                    SignedInteger?(B));

[A,B | Float?(A,B)]
private BiggerFloat?(static A, static B) = TypeSize(A) > TypeSize(B);


private procedure BiggerNumeric?;

[A,B | Float?(A) and Integer?(B)]
overload BiggerNumeric?(static A, static B) = true;

[A,B | Integer?(A) and Float?(B)]
overload BiggerNumeric?(static A, static B) = false;

[A,B | Integer?(A,B)]
overload BiggerNumeric?(static A, static B) = BiggerInteger?(A,B);

[A,B | Float?(A,B)]
overload BiggerNumeric?(static A, static B) = BiggerFloat?(A,B);



//
// toBiggerNumericType
//

procedure toBiggerNumericType;

[A | Numeric?(A)]
inline overload toBiggerNumericType(static A, static A, v) = v;

[A,B | Numeric?(A,B) and BiggerNumeric?(A,B)]
inline overload toBiggerNumericType(static A, static B, v) = A(v);

[A,B | Numeric?(A,B) and BiggerNumeric?(B,A)]
inline overload toBiggerNumericType(static A, static B, v) = B(v);



//
// constructors
//

[T | Numeric?(T)]
inline overload T() returned:T { }

[T1,T2 | Numeric?(T1,T2)]
inline overload T1(src:T2) = numericConvert(T1, src);



//
// assign
//

[A, B | Numeric?(A,B) and BiggerNumeric?(A,B)]
inline overload assign(dest:A, src:B) {
    primitiveCopy(dest, A(src));
}

[A, B | Integer?(A,B) and (TypeSize(A) == TypeSize(B))]
inline overload assign(dest:A, src:B) {
    primitiveCopy(dest, A(src));
}



//
// equals?, notEquals?, lesser?, lesserEquals?, greater?, greaterEquals?
//

[A,B | Numeric?(A,B)]
inline overload equals?(a:A, b:B) =
    equals?(toBiggerNumericType(A, B, a),
            toBiggerNumericType(A, B, b));

[A | Numeric?(A)]
inline overload equals?(a:A, b:A) = numericEquals?(a, b);

[A | Float?(A)]
inline overload equals?(a:A, b:A) = floatOrderedAndEquals?(a, b);


[A, B | Numeric?(A, B)]
inline overload notEquals?(a:A, b:B) =
    notEquals?(toBiggerNumericType(A, B, a),
               toBiggerNumericType(A, B, b));

[A | Numeric?(A)]
inline overload notEquals?(a:A, b:A) = not equals?(a, b);

[A | Float?(A)]
inline overload notEquals?(a:A, b:A) = floatUnorderedOrNotEquals?(a, b);


[A,B | Numeric?(A,B)]
inline overload lesser?(a:A, b:B) =
    lesser?(toBiggerNumericType(A, B, a),
            toBiggerNumericType(A, B, b));

[A | Numeric?(A)]
inline overload lesser?(a:A, b:A) = numericLesser?(a, b);

[A | Float?(A)]
inline overload lesser?(a:A, b:A) = floatOrderedAndLesser?(a, b);


[A, B | Numeric?(A, B)]
inline overload lesserEquals?(a:A, b:B) =
    lesserEquals?(toBiggerNumericType(A, B, a),
                  toBiggerNumericType(A, B, b));

[A | Numeric?(A)]
inline overload lesserEquals?(a:A, b:A) = not lesser?(b, a);

[A | Float?(A)]
inline overload lesserEquals?(a:A, b:A) = floatOrderedAndLesserEquals?(a, b);


[A,B | Numeric?(A,B)]
inline overload greater?(a:A, b:B) =
    greater?(toBiggerNumericType(A, B, a),
             toBiggerNumericType(A, B, b));

[A | Numeric?(A)]
inline overload greater?(a:A, b:A) = lesser?(b, a);

[A | Float?(A)]
inline overload greater?(a:A, b:A) = floatOrderedAndGreater?(a, b);


[A, B | Numeric?(A, B)]
inline overload greaterEquals?(a:A, b:B) =
    greaterEquals?(toBiggerNumericType(A, B, a),
                   toBiggerNumericType(A, B, b));

[A | Numeric?(A)]
inline overload greaterEquals?(a:A, b:A) = not lesser?(a, b);

[A | Float?(A)]
inline overload greaterEquals?(a:A, b:A) = floatOrderedAndGreaterEquals?(a, b);



//
// binary ops
//

[A,B | Numeric?(A,B)]
inline overload add(a:A, b:B) =
    numericAdd(toBiggerNumericType(A, B, a),
               toBiggerNumericType(A, B, b));

[A | Numeric?(A)]
inline overload add(a:A, b:A) = numericAdd(a, b);


[A,B | Numeric?(A,B)]
inline overload subtract(a:A, b:B) =
    numericSubtract(toBiggerNumericType(A, B, a),
                    toBiggerNumericType(A, B, b));

[A | Numeric?(A)]
inline overload subtract(a:A, b:A) = numericSubtract(a, b);


[A,B | Numeric?(A,B)]
inline overload multiply(a:A, b:B) =
    numericMultiply(toBiggerNumericType(A, B, a),
                    toBiggerNumericType(A, B, b));

[A | Numeric?(A)]
inline overload multiply(a:A, b:A) = numericMultiply(a, b);


[A,B | Numeric?(A,B)]
inline overload divide(a:A, b:B) =
    numericDivide(toBiggerNumericType(A, B, a),
                  toBiggerNumericType(A, B, b));

[A | Numeric?(A)]
inline overload divide(a:A, b:A) = numericDivide(a, b);


[A,B | Integer?(A,B)]
inline overload remainder(a:A, b:B) =
    integerRemainder(toBiggerNumericType(A, B, a),
                     toBiggerNumericType(A, B, b));

[A | Integer?(A)]
inline overload remainder(a:A, b:A) = integerRemainder(a, b);



//
// unary ops
//

[A | Numeric?(A)]
inline overload plus(a:A) = a;

[A | Numeric?(A)]
inline overload minus(a:A) = numericNegate(a);



//
// inc, dec
//

[A | Numeric?(A)]
inline overload inc(a:A) {
    a += A(1);
}

[A | Numeric?(A)]
inline overload dec(a:A) {
    a -= A(1);
}



//
// bitwise ops
//

[A,B | Integer?(A,B)]
inline overload shiftLeft(a:A, b:B) = integerShiftLeft(a, A(b));

[A,B | Integer?(A,B)]
inline overload shiftRight(a:A, b:B) = integerShiftRight(a, A(b));

[A,B | Integer?(A,B)]
inline overload bitwiseAnd(a:A, b:B) =
    integerBitwiseAnd(toBiggerNumericType(A, B, a),
                      toBiggerNumericType(A, B, b));

[A | Integer?(A)]
inline overload bitwiseAnd(a:A, b:A) = integerBitwiseAnd(a, b);

[A,B | Integer?(A,B)]
inline overload bitwiseOr(a:A, b:B) =
    integerBitwiseOr(toBiggerNumericType(A, B, a),
                     toBiggerNumericType(A, B, b));

[A | Integer?(A)]
inline overload bitwiseOr(a:A, b:A) = integerBitwiseOr(a, b);

[A,B | Integer?(A,B)]
inline overload bitwiseXor(a:A, b:B) =
    integerBitwiseXor(toBiggerNumericType(A, B, a),
                      toBiggerNumericType(A, B, b));

[A | Integer?(A)]
inline overload bitwiseXor(a:A, b:A) = integerBitwiseXor(a, b);

[A | Integer?(A)]
inline overload bitwiseNot(a:A) = integerBitwiseNot(a);



//
// parse numbers from strings
//

[S | String?(S)]
inline overload Int8(s:S)  = parseInt8(s);

[S | String?(S)]
inline overload Int16(s:S) = parseInt16(s);

[S | String?(S)]
inline overload Int32(s:S) = parseInt32(s);

[S | String?(S)]
inline overload Int64(s:S) = parseInt64(s);

[S | String?(S)]
inline overload UInt8(s:S)  = parseUInt8(s);

[S | String?(S)]
inline overload UInt16(s:S) = parseUInt16(s);

[S | String?(S)]
inline overload UInt32(s:S) = parseUInt32(s);

[S | String?(S)]
inline overload UInt64(s:S) = parseUInt64(s);

[S | String?(S)]
inline overload Float32(s:S) = parseFloat32(s);

[S | String?(S)]
inline overload Float64(s:S) = parseFloat64(s);
