import numbers.parser.*;


//
// numeric type predicates
//

overloadable SignedInteger?;

[T] overload SignedInteger?(static T) = false;
overload SignedInteger?(static Int8) = true;
overload SignedInteger?(static Int16) = true;
overload SignedInteger?(static Int32) = true;
overload SignedInteger?(static Int64) = true;


overloadable UnsignedInteger?;

[T] overload UnsignedInteger?(static T) = false;
overload UnsignedInteger?(static UInt8) = true;
overload UnsignedInteger?(static UInt16) = true;
overload UnsignedInteger?(static UInt32) = true;
overload UnsignedInteger?(static UInt64) = true;


overloadable Integer?;

[T] overload Integer?(static T) = SignedInteger?(T) or UnsignedInteger?(T);
[A, B] overload Integer?(static A, static B) = Integer?(A) and Integer?(B);


overloadable ByteSizedInteger?;

[T] overload ByteSizedInteger?(static T) = false;
overload ByteSizedInteger?(static Int8) = true;
overload ByteSizedInteger?(static UInt8) = true;


overloadable Float?;

[T] overload Float?(static T) = false;
overload Float?(static Float32) = true;
overload Float?(static Float64) = true;
[A, B] overload Float?(static A, static B) = Float?(A) and Float?(B);


overloadable Numeric?;

[T] overload Numeric?(static T) = Integer?(T) or Float?(T);
[A, B] overload Numeric?(static A, static B) = Numeric?(A) and Numeric?(B);



//
// BiggerInteger?, BiggerFloat?, BiggerNumeric?
//

[A,B | Integer?(A,B)]
private BiggerInteger?(static A, static B) =
    (TypeSize(A) > TypeSize(B)) or ((TypeSize(A) == TypeSize(B)) and
                                    UnsignedInteger?(A) and
                                    SignedInteger?(B));

[A,B | Float?(A,B)]
private BiggerFloat?(static A, static B) = TypeSize(A) > TypeSize(B);


private overloadable BiggerNumeric?;

[A,B | Float?(A) and Integer?(B)]
overload BiggerNumeric?(static A, static B) = true;

[A,B | Integer?(A) and Float?(B)]
overload BiggerNumeric?(static A, static B) = false;

[A,B | Integer?(A,B)]
overload BiggerNumeric?(static A, static B) = BiggerInteger?(A,B);

[A,B | Float?(A,B)]
overload BiggerNumeric?(static A, static B) = BiggerFloat?(A,B);



//
// toBiggerNumericType
//

overloadable toBiggerNumericType;

[A | Numeric?(A)]
overload toBiggerNumericType(static A, static A, v) = v;

[A,B | Numeric?(A,B) and BiggerNumeric?(A,B)]
overload toBiggerNumericType(static A, static B, v) = A(v);

[A,B | Numeric?(A,B) and BiggerNumeric?(B,A)]
overload toBiggerNumericType(static A, static B, v) = B(v);



//
// constructors, destroy
//

[T | Numeric?(T)]
overload T() : T {
}

[T1,T2 | Numeric?(T1,T2)]
overload T1(src:T2) = numericConvert(T1, src);

[T | Numeric?(T)]
overload T(src:T) : T {
    primitiveCopy(returned, src);
}

[T | Numeric?(T)]
overload destroy(x:T) {
}



//
// assign
//

[A, B | Numeric?(A,B) and BiggerNumeric?(A,B)]
overload assign(dest:A, src:B) {
    primitiveCopy(dest, A(src));
}

[A, B | Integer?(A,B) and (TypeSize(A) == TypeSize(B))]
overload assign(dest:A, src:B) {
    primitiveCopy(dest, A(src));
}

[T | Numeric?(T)]
overload assign(dest:T, src:T) {
    primitiveCopy(dest, src);
}



//
// equals?, lesser?
//

[A,B | Numeric?(A,B)]
overload equals?(a:A, b:B) = numericEquals?(toBiggerNumericType(A, B, a),
                                            toBiggerNumericType(A, B, b));
[A | Numeric?(A)]
overload equals?(a:A, b:A) = numericEquals?(a, b);

[A,B | Numeric?(A,B)]
overload lesser?(a:A, b:B) = numericLesser?(toBiggerNumericType(A, B, a),
                                            toBiggerNumericType(A, B, b));
[A | Numeric?(A)]
overload lesser?(a:A, b:A) = numericLesser?(a, b);



//
// binary ops
//

[A,B | Numeric?(A,B)]
overload add(a:A, b:B) = numericAdd(toBiggerNumericType(A, B, a),
                                    toBiggerNumericType(A, B, b));
[A | Numeric?(A)]
overload add(a:A, b:A) = numericAdd(a, b);


[A,B | Numeric?(A,B)]
overload subtract(a:A, b:B) = numericSubtract(toBiggerNumericType(A, B, a),
                                              toBiggerNumericType(A, B, b));
[A | Numeric?(A)]
overload subtract(a:A, b:A) = numericSubtract(a, b);


[A,B | Numeric?(A,B)]
overload multiply(a:A, b:B) = numericMultiply(toBiggerNumericType(A, B, a),
                                              toBiggerNumericType(A, B, b));
[A | Numeric?(A)]
overload multiply(a:A, b:A) = numericMultiply(a, b);


[A,B | Numeric?(A,B)]
overload divide(a:A, b:B) = numericDivide(toBiggerNumericType(A, B, a),
                                          toBiggerNumericType(A, B, b));
[A | Numeric?(A)]
overload divide(a:A, b:A) = numericDivide(a, b);


[A,B | Integer?(A,B)]
overload remainder(a:A, b:B) = integerRemainder(toBiggerNumericType(A, B, a),
                                                toBiggerNumericType(A, B, b));
[A | Integer?(A)]
overload remainder(a:A, b:A) = integerRemainder(a, b);



//
// unary ops
//

[A | Numeric?(A)]
overload plus(a:A) = a;

[A | Numeric?(A)]
overload minus(a:A) = numericNegate(a);



//
// inc, dec
//

[A | Numeric?(A)]
overload inc(a:A) {
    a += A(1);
}

[A | Numeric?(A)]
overload dec(a:A) {
    a -= A(1);
}



//
// bitwise ops
//

[A,B | Integer?(A,B)]
overload shiftLeft(a:A, b:B) = integerShiftLeft(a, A(b));

[A,B | Integer?(A,B)]
overload shiftRight(a:A, b:B) = integerShiftRight(a, A(b));

[A,B | Integer?(A,B)]
overload bitwiseAnd(a:A, b:B) = integerBitwiseAnd(toBiggerNumericType(A, B, a),
                                                  toBiggerNumericType(A, B, b));
[A | Integer?(A)]
overload bitwiseAnd(a:A, b:A) = integerBitwiseAnd(a, b);

[A,B | Integer?(A,B)]
overload bitwiseOr(a:A, b:B) = integerBitwiseOr(toBiggerNumericType(A, B, a),
                                                toBiggerNumericType(A, B, b));
[A | Integer?(A)]
overload bitwiseOr(a:A, b:A) = integerBitwiseOr(a, b);

[A,B | Integer?(A,B)]
overload bitwiseXor(a:A, b:B) = integerBitwiseXor(toBiggerNumericType(A, B, a),
                                                  toBiggerNumericType(A, B, b));
[A | Integer?(A)]
overload bitwiseXor(a:A, b:A) = integerBitwiseXor(a, b);

[A | Integer?(A)]
overload bitwiseNot(a:A) = integerBitwiseNot(a);



//
// parse numbers from strings
//

[I,S | Integer?(I) and String?(S)]
overload I(s:S) = I(String(s));

overload Int8(s:String)  = parseInt8(s);
overload Int16(s:String) = parseInt16(s);
overload Int32(s:String) = parseInt32(s);
overload Int64(s:String) = parseInt64(s);

overload UInt8(s:String)  = parseUInt8(s);
overload UInt16(s:String) = parseUInt16(s);
overload UInt32(s:String) = parseUInt32(s);
overload UInt64(s:String) = parseUInt64(s);


[F,S | Float?(F) and String?(S)]
overload F(s:S) = F(String(s));

overload Float32(s:String) = parseFloat32(s);
overload Float64(s:String) = parseFloat64(s);
