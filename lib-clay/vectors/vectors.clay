

//
// Vector[T]
//

record Vector[T] {
    size:SizeT;
    capacity:SizeT;
    data:Pointer[T];
}



//
// predicates
//

[T] overload SizedSequence?(static Vector[T]) = true;
[T] overload RandomAccessSequence?(static Vector[T]) = true;
[T] overload LValueSequence?(static Vector[T]) = true;
[T] overload ContiguousSequence?(static Vector[T]) = true;
[T] overload SequenceElementType(static Vector[T]) = T;



//
// constructors
//

[T]
overload Vector[T]() = Vector[T](SizeT(0), SizeT(0), null(T));

[T,A | Sequence?(A) and (T == SequenceElementType(A))]
overload Vector[T](a:A) {
    var v = Vector[T]();
    for (x in a)
        push(v, x);
    return move(v);
}

[T,A | SizedSequence?(A) and (T == SequenceElementType(A))]
overload Vector[T](a:A) {
    var v = Vector[T]();
    reserve(v, size(a));
    for (x in a)
        push(v, x);
    return move(v);
}

[A | Sequence?(A)]
overload Vector(a:A) {
    static T = SequenceElementType(A);
    return Vector[T](a);
}



//
// varargs constructor
//

[T]
overload Vector[T](x:T, ...) {
    var v = Vector[T]();
    reserve(v, countArgs(x, ...));
    pushAll(v, x, ...);
    return move(v);
}

private countArgs(x, ...) = 1 + countArgs(...);
overload countArgs() = 0;

private pushAll(a, x, ...) { push(a, x); pushAll(a, ...); }
overload pushAll(a) {}


// re-implement builtin constructor to avoid clash with varargs constructor
// in the case where the element type is SizeT

[T]
overload Vector[T](size:SizeT, capacity:SizeT, data:Pointer[T]) returned:Vector[T] {
    returned.size = size;
    returned.capacity = capacity;
    returned.data = data;
}



//
// destroy, move
//

[T]
overload destroy(a:Vector[T]) {
    for (x in a)
        destroy(x);
    freeMemory(a.data);
}

[T]
overload move(a:Vector[T]) returned:Vector[T] {
    returned <-- Vector[T](a.size, a.capacity, a.data);
    a <-- Vector[T]();
}



//
// size, index
//

[T]
overload size(a:Vector[T]) = a.size;

[T,I | Integer?(I)]
overload index(a:Vector[T], i:I) = ref (a.data + SizeT(i))^;



//
// vector coordinates
//

[T]
overload begin(a:Vector[T]) = VectorCoordinate[T](a.data);

[T]
overload end(a:Vector[T]) = VectorCoordinate[T](a.data + a.size);

record VectorCoordinate[T] {
    ptr : Pointer[T];
}

[T]
overload dereference(x:VectorCoordinate[T]) = ref x.ptr^;

[T,I|Integer?(I)]
overload add(c:VectorCoordinate[T], i:I) = VectorCoordinate(c.ptr + i);

[T,I|Integer?(I)]
overload subtract(c:VectorCoordinate[T], i:I) = VectorCoordinate(c.ptr - i);

[T]
overload subtract(c1:VectorCoordinate[T], c2:VectorCoordinate[T])
    = c1.ptr - c2.ptr;

[T]
overload inc(c:VectorCoordinate[T]) {
    inc(c.ptr);
}

[T]
overload dec(c:VectorCoordinate[T]) {
    dec(c.ptr);
}



//
// vector iteration
//

[T]
overload iterator(a:Vector[T]) = CoordinateRange(begin(a), end(a));



//
// equals?, lesser?
//

[T]
overload equals?(a:Vector[T], b:Vector[T]) {
    if (size(a) != size(b))
        return false;
    var i = iterator(a);
    var j = iterator(b);
    while (hasNext?(i)) {
        if (next(i) != next(j))
            return false;
    }
    return true;
}

[T]
overload lesser?(a:Vector[T], b:Vector[T]) {
    var i = iterator(a);
    var j = iterator(b);
    while (hasNext?(i) and hasNext?(j)) {
        ref x = next(i);
        ref y = next(j);
        if (x != y)
            return x < y;
    }
    return hasNext?(j);
}



//
// front, back, push, pop
//

[T]
overload front(a:Vector[T]) = ref a[0];

[T]
overload back(a:Vector[T]) = ref a[size(a)-1];

[T]
overload push(a:Vector[T], x:T) {
    insert(a, size(a), x);
}

[T]
overload push(a:Vector[T], rvalue x:T) {
    insert(a, size(a), move(x));
}

[T]
overload pop(a:Vector[T]) returned:T {
    returned <-- move(back(a));
    removeLocation(a, end(a)-1);
}



//
// reserve
//

[T]
private setCapacity(a:Vector[T], capacity:SizeT) {
    var data = allocateMemory(T, capacity);
    var ptr = data;
    for (x in a) {
        ptr^ <-- move(x);
        inc(ptr);
    }
    freeMemory(a.data);
    a.data = data;
    a.capacity = capacity;
}

[T, I | Integer?(I)]
overload reserve(a:Vector[T], n:I) {
    if (a.capacity < SizeT(n))
        setCapacity(a, SizeT(n));
}



//
// clear, insert, remove
//

[T]
overload clear(a:Vector[T]) {
    destroy(a);
    initialize(a);
}

[T]
private ensureSpace(a:Vector[T], space:SizeT) {
    if (a.size + space > a.capacity)
        setCapacity(a, 2*(a.size + space));
}

[T,I | Integer?(I)]
private insertLocation(a:Vector[T], pos:I) {
    ensureSpace(a, SizeT(1));
    var i = begin(a) + pos;
    var j = end(a);
    while (i < j) {
        j^ <-- move((j-1)^);
        dec(j);
    }
    inc(a.size);
    return ref i^;
}

[T,I|Integer?(I)]
overload insert(a:Vector[T], i:I, x) {
    insertLocation(a, i) <-- x;
}

[T]
overload insert(a:Vector[T], i:VectorCoordinate[T], x:T) {
    insertLocation(a, i-begin(a)) <-- x;
}

[T]
overload insert(a:Vector[T], i:VectorCoordinate[T], rvalue x:T) {
    insertLocation(a, i-begin(a)) <-- move(x);
}

[T]
private removeLocation(a:Vector[T], i:VectorCoordinate[T]) {
    var j = end(a);
    while (i+1 != j) {
        i^ <-- move((i+1)^);
        inc(i);
    }
    dec(a.size);
    if (a.capacity > 3*(a.size+1))
        setCapacity(a, 2*(a.size + 1));
}

[T]
overload remove(a:Vector[T], i:VectorCoordinate[T]) {
    destroy(i^);
    removeLocation(a, i);
}

[T,I|Integer?(I)]
overload remove(a:Vector[T], i:I) {
    remove(a, begin(a)+i);
}
