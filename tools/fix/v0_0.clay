import clay.common.(
    SourceFile,
    readSource,
    ClayError,
    displayError,
);

import clay.v0_0.ast.*;
import clay.v0_0.lexer.(
    tokenize,
    SourceTokens,
    STRING_LITERAL,
    CHAR_LITERAL,
    PUNCTUATION,
    KEYWORD,
    IDENTIFIER,
    LLVM,
    punctuationIndex,
    keywordIndex,
);
import clay.v0_0.parser.(parse);
import printer.formatter.(
    rightAlignedWith,
    hex,
);

import maybe.*;


private record FixState (
    tokens:SourceTokens,
    outputFile:File,
    printedToken:SizeT,
    printedIndex:SizeT,
);
overload FixState(tokens:SourceTokens, outputFile:File)
    = FixState(tokens, outputFile, SizeT(0), SizeT(0));


//
// token-level fixup
//

octalValue(c:Char) = Int(c) - Int('0');

fixOneToken(tokenNumber:SizeT, state:FixState) {
    assert(tokenNumber == state.printedToken);
    ref token = state.tokens.vector[tokenNumber];
    ref fileData = state.tokens.file.data;
    assert(token.range.begin >= state.printedIndex, "token begins at ", token.range.begin, " but we already printed to ", state.printedIndex);
    if (token.range.begin > state.printedIndex)
        printTo(state.outputFile, sliced(fileData, state.printedIndex, token.range.begin));

    var name = sliced(fileData, token.range.begin, token.range.end);

    var printDefault = () -> {
        printTo(state.outputFile, name);
    };

    var printInstead = (..s) -> {
        printTo(state.outputFile, ..s);
    };

    switch (token.kind)
    case (STRING_LITERAL, CHAR_LITERAL) {
        var iter = iterator(name);
        var fixed? = false;
        var fixed = String();
        while (hasNext?(iter)) {
            var c = next(iter);
            if (c == '\\') {
                assert(hasNext?(iter));
                var escape = next(iter);
                switch (escape)
                case ('a') {
                    fixed? = true;
                    push(fixed, "\\x07");
                }
                case ('b') {
                    fixed? = true;
                    push(fixed, "\\x08");
                }
                case ('v') {
                    fixed? = true;
                    push(fixed, "\\x0B");
                }
                case ('0', '1', '2', '3') {
                    fixed? = true;
                    assert(hasNext?(iter));
                    var e1 = next(iter);
                    assert(e1 >= '0' and e1 <= '7');
                    assert(hasNext?(iter));
                    var e2 = next(iter);
                    assert(e2 >= '0' and e2 <= '7');
                    var ascii = octalValue(escape)*64
                        + octalValue(e1)*8
                        + octalValue(e2);
                    if (ascii == 0)
                        push(fixed, "\\0");
                    else {
                        var asHex = str("\\x", rightAlignedWith(2, '0', hex(ascii)));
                        push(fixed, asHex);
                    }
                }
                else {
                    push(fixed, c, escape);
                }
            } else
                push(fixed, c);
        }
        if (fixed?)
            printInstead(fixed);
        else
            printDefault();
    }
    case (KEYWORD) {
        switch (token.subKind)
        case (keywordIndex("procedure"))
            printInstead("define");
        case (keywordIndex("callbyname"))
            printInstead("alias");
        case (keywordIndex("lvalue"))
            printInstead("ref");
        else
            printDefault();
    }
    case (IDENTIFIER) {
        switch (name)
        case ("shiftLeft")
            printInstead("bitshl");
        case ("shiftRight")
            printInstead("bitshr");
        case ("rotateLeft")
            printInstead("bitrol");
        case ("rotateRight")
            printInstead("bitror");
        case ("bitwiseAnd")
            printInstead("bitand");
        case ("bitwiseOr")
            printInstead("bitor");
        case ("bitwiseXor")
            printInstead("bitxor");
        case ("bitwiseNot")
            printInstead("bitnot");
        case ("bitwiseAndc")
            printInstead("bitandc");
        case ("bitwiseBlend")
            printInstead("bitblend");
        case ("bitwiseCast")
            printInstead("bitcast");
        case ("allocateShared")
            printInstead("newShared");
        case ("allocateUnique")
            printInstead("newUnique");
        case ("INT_MIN")
            printInstead("Least(Int)");
        case ("INT_MAX")
            printInstead("Greatest(Int)");
        case ("UINT_MAX")
            printInstead("Greatest(UInt)");
        case ("LONG_MIN")
            printInstead("Least(Long)");
        case ("LONG_MAX")
            printInstead("Greatest(Long)");
        case ("ULONG_MAX")
            printInstead("Greatest(ULong)");
        case ("INT8_MIN")
            printInstead("Least(Int8)");
        case ("INT8_MAX")
            printInstead("Greatest(Int8)");
        case ("UINT8_MAX")
            printInstead("Greatest(UInt8)");
        case ("INT16_MIN")
            printInstead("Least(Int16)");
        case ("INT16_MAX")
            printInstead("Greatest(Int16)");
        case ("UINT16_MAX")
            printInstead("Greatest(UInt16)");
        case ("INT32_MIN")
            printInstead("Least(Int32)");
        case ("INT32_MAX")
            printInstead("Greatest(Int32)");
        case ("UINT32_MAX")
            printInstead("Greatest(UInt32)");
        case ("INT64_MIN")
            printInstead("Least(Int64)");
        case ("INT64_MAX")
            printInstead("Greatest(Int64)");
        case ("UINT64_MAX")
            printInstead("Greatest(UInt64)");
        case ("PTRINT_MIN")
            printInstead("Least(PtrInt)");
        case ("PTRINT_MAX")
            printInstead("Greatest(PtrInt)");
        case ("UPTRINT_MAX")
            printInstead("Greatest(UPtrInt)");
        case ("SSIZET_MIN")
            printInstead("Least(SSizeT)");
        case ("SSIZET_MAX")
            printInstead("Greatest(SSizeT)");
        case ("SIZET_MAX")
            printInstead("Greatest(SizeT)");
        case ("printString")
            printInstead("str");
        case ("printReprValuesTo")
            printInstead("printReprArgumentsTo");
        case ("arrayLiteral")
            printInstead("array");
        case ("match")
            printInstead("matchByType");
        else {
            printTo(state.outputFile, name);
            if (beginsWith?(name, "finally")
                or beginsWith?(name, "onerror")
                or beginsWith?(name, "define")
                or beginsWith?(name, "eval"))

                printTo(state.outputFile, "_");
        }
    }
    case (PUNCTUATION) {
        if (token.subKind == punctuationIndex("..."))
            printInstead("..");
        else
            printDefault();
    }
    else
        printDefault();

    state.printedToken = tokenNumber + 1;
    state.printedIndex = token.range.end;
}

fixToken(tokenNumber:SizeT, state:FixState) {
    assert(tokenNumber < size(state.tokens.vector));
    while (state.printedToken <= tokenNumber)
        fixOneToken(state.printedToken, state);
}


//
// utilities
//

private writeUptoToken(token:SizeT, state:FixState) : {
    ref tokens = state.tokens.vector;
    assert(token < size(tokens));

    var toIndex = state.tokens.vector[token].range.begin;
    assert(toIndex >= state.printedIndex);

    if (token == 0) return;
    fixToken(token - 1, state);
    if (toIndex > state.printedIndex) {
        printTo(state.outputFile, sliced(state.tokens.file.data, state.printedIndex, toIndex));
        state.printedIndex = toIndex;
    }
    //DEBUGTAGS printTo(state.outputFile, "$upto$");
}

private replaceUptoToken(token:SizeT, state:FixState) : {
    ref tokens = state.tokens.vector;
    assert(token < size(tokens));

    var toIndex = state.tokens.vector[token].range.begin;
    assert(toIndex >= state.printedIndex);

    state.printedToken = token;
    state.printedIndex = toIndex;
    //DEBUGTAGS printTo(state.outputFile, "$replaced$");
}

private replaceToken(token:SizeT, state:FixState) : {
    ref tokens = state.tokens.vector;
    assert(token < size(tokens));

    var toIndex = state.tokens.vector[token].range.end;
    assert(toIndex >= state.printedIndex);

    state.printedToken = token + 1;
    state.printedIndex = toIndex;
    //DEBUGTAGS printTo(state.outputFile, "$replaced$");
}

private writeToken(token:SizeT, state:FixState) : {

    ref tokens = state.tokens.vector;
    assert(token < size(tokens));

    var toIndex = state.tokens.vector[token].range.end;
    assert(toIndex >= state.printedIndex);

    fixToken(token, state);
    //DEBUGTAGS printTo(state.outputFile, "$token$");
}

private writeTokenPrefixed(token:SizeT, prefix, state:FixState) : {
    writeUptoToken(token, state);
    printTo(state.outputFile, prefix);
    writeToken(token, state);
}

private writeTokenSuffixed(token:SizeT, suffix, state:FixState) : {
    writeToken(token, state);
    printTo(state.outputFile, suffix);
}

private finishFix(state:FixState) : {
    fixToken(size(state.tokens.vector) - 1, state);
    // printTo(state.outputFile, slicedFrom(state.tokens.file.data, state.printedIndex));
    //DEBUGTAGS printTo(state.outputFile, "$end$");
}


//
// AST-level fixup
//

private define fixAst;
private define fixAstNode;


//
// default AST-walking logic
//

[A] overload fixAstNode(ast:A, state:FixState) : {
    //LOGGING println("skipping ", A);
}
overload fixAstNode(ast:SourceAST, state:FixState) : {
    fixAst(ast.imports, state);
    fixAst(ast.topLevelItems, state);
}
[A | ASTNode?(A)]
overload fixAstNode(ast:A, state:FixState) : {
    //LOGGING println("walking ", A);
    ..for (field in astFields(ast))
        fixAst(field, state);
}
[V | Variant?(V)]
overload fixAstNode(ast:V, state:FixState) : {
    fixAst(*ast, state);
}
[A] overload fixAstNode(asts:Vector[A], state:FixState) : {
    for (ast in asts)
        fixAst(ast, state);
}
[A] overload fixAstNode(?ast:Maybe[A], state:FixState) : {
    maybe(?ast): ast -> {
        fixAst(ast, state);
    }
}
[A] overload fixAstNode(asts:VariadicList[A], state:FixState) : {
    fixAst(asts.items, state);
    fixAst(asts.variadicItem, state);
}

overload fixAst(ast, state) : {
    fixAstNode(ast, state);
}


//
// fixer logic
//

// Convert variant syntax.
// 0.0: variant Foo = A | B;
// 0.1: variant Foo (A, B);
overload fixAst(ast:Variant, state:FixState) : {
    fixAst(ast.visibility, state);
    fixAst(ast.name, state);
    fixAst(ast.params, state);
    if (not empty?(ast.defaultInstances)) {
        // replace "=" with "("
        var firstInstance = astTokens(ast.defaultInstances[0]).begin;
        writeUptoToken(firstInstance - 1, state);
        printTo(state.outputFile, "(");

        // replace "|" with "," between instances
        for (i, inst in enumerated(ast.defaultInstances)) {
            var tokenRange = astTokens(inst);
            replaceUptoToken(tokenRange.begin, state);
            fixAst(inst, state);
            if (i != size(ast.defaultInstances) - 1 )
                writeTokenSuffixed(tokenRange.end - 1, ",", state);
            // preserve whitespace before |
            writeUptoToken(tokenRange.end, state);
        }

        // close with ) before semicolon
        var lastInstance = astTokens(back(ast.defaultInstances)).end;
        writeTokenPrefixed(lastInstance, ")", state);
    }
}

// Convert instance syntax.
// 0.0: instance Foo = C;
// 0.1: instance Foo (C);
overload fixAst(ast:Instance, state:FixState) : {
    fixAst(ast.patternVars, state);
    fixAst(ast.predicate, state);
    fixAst(ast.target, state);
    writeToken(astTokens(ast.target).end - 1, state);
    printTo(state.outputFile, " (");
    replaceUptoToken(astTokens(ast.member).begin, state);
    fixAst(ast.member, state);
    writeTokenPrefixed(astTokens(ast.member).end, ")", state);
}

// Convert enum syntax.
// 0.0: enum Foo { A, B, C }
// 0.1: enum Foo (A, B, C);
overload fixAst(ast:Enum, state:FixState) : {
    fixAst(ast.visibility, state);
    fixAst(ast.name, state);
    writeToken(ast.name.tokens.end - 1, state);
    if (empty?(ast.members)) {
        printTo(state.outputFile, " ();");
    } else {
        printTo(state.outputFile, " (");
        replaceUptoToken(ast.members[0].tokens.begin, state);
        fixAst(ast.members, state);
        writeTokenSuffixed(back(ast.members).tokens.end - 1, ");", state);
    }
    replaceToken(ast.tokens.end - 1, state);
}

// Convert return type syntax.
// 0.0:
//   foo() Int {} // return types
//   foo() returned:Int {} // named return values
// 0.1:
//   foo() : Int {} // return types
//   foo() --> returned:Int {} // named return values
overload fixAst(ast:Code, state:FixState) : {
    fixAst(ast.patternVars, state);
    fixAst(ast.predicate, state);
    fixAst(ast.args, state);

    fixCodeReturns(ast, state);

    fixAst(ast.body, state);
}

private fixCodeReturns(ast:Code, state:FixState) : {
    if (not empty?(ast.returns)) {
        // We should ensure that named and unnamed returns aren't mixed here.
        if (nothing?(ast.returns[0].name))
            writeTokenPrefixed(astTokens(ast.returns[0]).begin, ": ", state);
        else
            writeTokenPrefixed(astTokens(ast.returns[0]).begin, "--> ", state);
        fixAst(ast.returns, state);
    }
}

// Convert external return type syntax.
// 0.0:
//   external foo() Int;
// 0.1:
//   external foo() : Int;
overload fixAst(ast:ExternalProcedure, state:FixState) : {
    fixAst(ast.attributes, state);
    fixAst(ast.args, state);

    maybe(ast.returnType): returnType -> {
        writeTokenPrefixed(astTokens(returnType).begin, ": ", state);
    }

    fixAst(ast.returnType, state);
    fixAst(ast.body, state);
}

// Convert array literal expressions to use the array() function.
// 0.0: [...]
// 0.1: array(...)
overload fixAst(ast:ArrayExpr, state:FixState) : {
    writeUptoToken(ast.tokens.begin, state);
    printTo(state.outputFile, "array(");
    replaceToken(ast.tokens.begin, state);
    fixAst(ast.args, state);
    writeUptoToken(ast.tokens.end - 1, state);
    printTo(state.outputFile, ")");
    replaceToken(ast.tokens.end - 1, state);
}

// Convert tuple literal expressions.
// 0.0: (...)
// 0.1: [...]
overload fixAst(ast:TupleExpr, state:FixState) : {
    // If there's a single non-unpack expression, leave it alone, because it's just parens
    if (size(ast.args) == 1 and not variantIs?(ast.args[0], Unpack)) {
        fixAst(ast.args, state);
    } else {
        writeUptoToken(ast.tokens.begin, state);
        printTo(state.outputFile, "[");
        replaceToken(ast.tokens.begin, state);
        fixAst(ast.args, state);
        writeUptoToken(ast.tokens.end - 1, state);
        printTo(state.outputFile, "]");
        replaceToken(ast.tokens.end - 1, state);
    }
}

// Convert CodePointer types to always tuple their arguments.
private codeType?(s) : Bool {
    switch (s)
    case (
        "CodePointer",
        "CCodePointer",
        "VarArgsCCodePointer",
        "FastCallCodePointer",
        "StdCallCodePointer",
        "Lambda",
        "GLCodePointer",
        "WinApiCodePointer",
    )
        return true;
    else
        return false;
}
private codeTypeIndexee?(expr:Expr) : Bool {
    return match(expr,
        (nameref:NameRef) -> codeType?(nameref.name.str),
        _ -> false,
    );
}

private fixCodeTypeArgument(arg:Expr, state:FixState) : {
    match(arg): (tup:TupleExpr) -> {
        fixTuple(tup, state);
    } :: _ -> {
        writeUptoToken(astTokens(arg).begin, state);
        printTo(state.outputFile, "[");
        fixAst(arg, state);
        writeToken(astTokens(arg).end - 1, state);
        printTo(state.outputFile, "]");
    }
}

overload fixAst(ast:Indexing, state:FixState) : {
    fixAst(ast.expr, state);
    if (codeTypeIndexee?(ast.expr)) {
        if (size(ast.args) == 2) {
            fixCodeTypeArgument(ast.args[0], state);
            fixCodeTypeArgument(ast.args[1], state);
        }
    } else {
        fixAst(ast.args, state);
    }
}

private fixTuple(ast:TupleExpr, state:FixState) : {
    writeUptoToken(ast.tokens.begin, state);
    printTo(state.outputFile, "[");
    replaceToken(ast.tokens.begin, state);
    fixAst(ast.args, state);
    writeUptoToken(ast.tokens.end - 1, state);
    printTo(state.outputFile, "]");
    replaceToken(ast.tokens.end - 1, state);
}

overload fixAst(ast:TupleExpr, state:FixState) : {
    // If there's a single non-unpack expression, leave it alone, because it's just parens
    if (size(ast.args) == 1 and not variantIs?(ast.args[0], Unpack)) {
        fixAst(ast.args, state);
    } else {
        fixTuple(ast, state);
    }
}

// Fix multi-value paren expressions
// 0.0: ...(...)
// 0.1: (...)
overload fixAst(ast:Unpack, state:FixState) : {
    match(ast.expr): (tup:TupleExpr) -> {
        writeUptoToken(ast.tokens.begin, state);
        replaceToken(ast.tokens.begin, state);
        fixAst(tup.args, state);
    } :: _ -> {
        fixAst(ast.expr, state);
    }
}

// Convert new operator expressions to use the new() function.
// 0.0: new X
// 0.1: new(X)
overload fixAst(ast:New, state:FixState) : {
    writeUptoToken(ast.tokens.begin, state);
    printTo(state.outputFile, "new(");
    replaceUptoToken(astTokens(ast.expr).begin, state);
    fixAst(ast.expr, state);
    writeTokenSuffixed(astTokens(ast.expr).end - 1, ")", state);
    replaceToken(ast.tokens.end - 1, state);
}

isPunctuationToken(token, punc)
    = token.kind == PUNCTUATION and token.subKind == punctuationIndex(punc);
isKeywordToken(token, kwd)
    = token.kind == KEYWORD and token.subKind == keywordIndex(kwd);

// Convert octal integer literals to use the octal() function.
// 0.0: 0777
// 0.1: octal(#"777")
// Convert integer literal suffixes.
// 0.0: 0i8, 0i16, 0i32, 0i64, 0u8,  0u16, 0u32, 0u64, 0f32, 0f64
// 0.1: 0ss, 0s,   0i,   0l,   0uss, 0us,  0u,   0ul,  0f,   0ff
overload fixAst(ast:IntLiteral, state:FixState) : {
    if (size(ast.value) >= 2
        and ast.value[0] == '0'
        and not (ast.value[1] == 'x' or ast.value[1] == 'X'))
        fixOctal(ast, state);
    else
        fixLiteralSuffix(ast, state);
}

// Convert float literal suffixes.
// 0.0: 0.0f32, 0.0f64
// 0.1: 0.0f,   0.0ff
overload fixAst(ast:FloatLiteral, state:FixState) : {
    fixLiteralSuffix(ast, state);
}

[T | inValues?(T, IntLiteral, FloatLiteral)]
fixLiteralSuffix(ast:T, state:FixState) : {
    writeUptoToken(astTokens(ast).begin, state);
    replaceToken(astTokens(ast).end - 1, state);
    printTo(state.outputFile, ast.value);
    maybe(ast.suffix): suffix -> {
        switch (suffix)
        case ("i8")
            printTo(state.outputFile, "ss");
        case ("i16")
            printTo(state.outputFile, "s");
        case ("i32")
            printTo(state.outputFile, "i");
        case ("i64")
            printTo(state.outputFile, "l");
        case ("u8")
            printTo(state.outputFile, "uss");
        case ("u16")
            printTo(state.outputFile, "us");
        case ("u32")
            printTo(state.outputFile, "u");
        case ("u64")
            printTo(state.outputFile, "ul");
        case ("f32")
            printTo(state.outputFile, "f");
        case ("f64")
            printTo(state.outputFile, "ff");
        else
            printTo(state.outputFile, suffix);
    }
}

fixOctal(ast:IntLiteral, state:FixState) : {
    var iter = iterator(ast.value);
    next(iter);
    while (hasNext?(iter)) {
        var c = next(iter);
        if (c >= '0' and c <= '9') {
            writeUptoToken(astTokens(ast).begin, state);
            replaceToken(astTokens(ast).end - 1, state);
            switch (ast.suffix)
            case (nothing(String))
                printTo(state.outputFile, "octal(#\"", ast.value, "\")");
            case (Maybe(String("i")))
                printTo(state.outputFile, "octal(Int, #\"", ast.value, "\")");
            case (Maybe(String("u")))
                printTo(state.outputFile, "octal(UInt, #\"", ast.value, "\")");
            case (Maybe(String("i8")))
                printTo(state.outputFile, "octal(Int8, #\"", ast.value, "\")");
            case (Maybe(String("i16")))
                printTo(state.outputFile, "octal(Int16, #\"", ast.value, "\")");
            case (Maybe(String("i32")))
                printTo(state.outputFile, "octal(Int32, #\"", ast.value, "\")");
            case (Maybe(String("i64")))
                printTo(state.outputFile, "octal(Int64, #\"", ast.value, "\")");
            case (Maybe(String("u8")))
                printTo(state.outputFile, "octal(UInt8, #\"", ast.value, "\")");
            case (Maybe(String("u16")))
                printTo(state.outputFile, "octal(UInt16, #\"", ast.value, "\")");
            case (Maybe(String("u32")))
                printTo(state.outputFile, "octal(UInt32, #\"", ast.value, "\")");
            case (Maybe(String("u64")))
                printTo(state.outputFile, "octal(UInt64, #\"", ast.value, "\")");
            else
                assert(false);
            break;
        }
        assert(c == '_');
    }
}

// Convert capture-by-reference lambda syntax.
// 0.0: (...args) ref=> { ... }
// 0.1: (...args) -> { ... }
overload fixAst(ast:LambdaExpr, state:FixState) : {
    fixAst(ast.formalArgs, state);
    if (ast.captureByRef) {
        var firstStatementToken = astTokens(ast.body).begin;
        ref tokens = state.tokens.vector;
        assert(firstStatementToken >= 1);
        if (isPunctuationToken(tokens[firstStatementToken - 1], "=>")) {
            assert(firstStatementToken != 1
                and isKeywordToken(tokens[firstStatementToken - 2], "ref"));
            writeUptoToken(firstStatementToken - 2, state);
            printTo(state.outputFile, "->");
            replaceToken(firstStatementToken - 1, state);
        }
    }
    fixAst(ast.body, state);
}

// Convert switch syntax.
// 0.0:
//  switch (input) {
//  case A:
//      a();
//      break;
//  case B:
//      b1();
//      b2();
//      break;
//  case C:
//  case D:
//      cd();
//      break;
//
//  default:
//      z();
//      break;
//  }
//
// 0.1:
//  switch (input)
//  case (A)
//      a();
//  case (B) {
//      b1();
//      b2();
//  }
//  case (C, D) {
//      cd();
//  }
//  else {
//      z();
//  }
overload fixAst(ast:Switch, state:FixState) : {
    fixAst(ast.expr, state);
    var tokenAfterValue = astTokens(ast.expr).end;
    ref tokens = state.tokens.vector;

    assert(isPunctuationToken(tokens[tokenAfterValue], ")"));
    assert(isPunctuationToken(tokens[tokenAfterValue+1], "{"));

    writeToken(tokenAfterValue, state);
    replaceToken(tokenAfterValue+1, state);

    fixAst(ast.caseBlocks, state);
    maybe(ast.defaultCase): defaultCase -> {
        var defaultToken = astTokens(defaultCase).begin;
        assert(isKeywordToken(tokens[defaultToken - 2], "default")
            and isPunctuationToken(tokens[defaultToken - 1], ":"));
        writeUptoToken(defaultToken - 2, state);
        printTo(state.outputFile, "else {");
        replaceToken(defaultToken - 1, state);
        fixAst(defaultCase, state);
        writeUptoToken(astTokens(ast).end - 1, state);
        printTo(state.outputFile, "}");
    }
    replaceToken(astTokens(ast).end - 1, state);
}

overload fixAst(ast:CaseBlock, state:FixState) : {
    ref tokens = state.tokens.vector;

    writeTokenSuffixed(astTokens(ast).begin, " (", state);
    interleave(ast.caseLabels,
        () -> { printTo(state.outputFile, ", "); },
        label -> {
            replaceUptoToken(astTokens(label).begin, state);
            fixAst(label, state);
            writeToken(astTokens(label).end - 1, state);
        },
    );
    printTo(state.outputFile, ") {");
    assert(not empty?(ast.caseLabels));
    assert(isPunctuationToken(tokens[astTokens(back(ast.caseLabels)).end], ":"));
    replaceToken(astTokens(back(ast.caseLabels)).end, state);
    fixAst(ast.body, state);
    writeUptoToken(astTokens(ast.body).end, state);
    printTo(state.outputFile, "} ");
}

// We need to check if there are breaks within a case body and transform those
// into gotos.
overload fixAst(ast:CaseBody, state:FixState) : {
    fixCaseBodyStatements(ast.statements, state);
    replaceToken(astTokens(ast).end - 1, state);
}

private fixCaseBodyStatements(statements:Vector[Statement], state:FixState) : {
    var statementCount = size(statements);
    if (statementCount >= 1 and variantIs?(back(statements), Break))
        dec(statementCount);
    if (statementCount == 1) {
        if (fixSingleCaseBodyStatement(statements[0], state))
            return;
    }

    for (stmt in slicedUpto(statements, statementCount)) {
        fixAst(stmt, state);
        writeToken(astTokens(stmt).end - 1, state);
    }
}

fixSingleCaseBodyStatement(stmt:Statement, state:FixState) : Bool {
    return match(stmt): (block:Block) -> {
        // Since the switch fixing adds a set of braces for us, if
        // the only statement is a block, we can eliminate the braces.
        var blockStatementCount = size(block.statements);
        if (blockStatementCount > 1 and variantIs?(back(block.statements), Break))
            dec(blockStatementCount);
        replaceToken(astTokens(block).begin, state);
        for (stmt in slicedUpto(block.statements, blockStatementCount))
            fixAst(stmt, state);
        writeUptoToken(astTokens(block).end - 1, state);
        replaceToken(astTokens(block).end - 1, state);
        return true;
    } :: _ -> false;
}


// Convert multi-value for loop syntax.
// 0.0: static for (x in ...xs) { }
// 0.1: ..for (x in ..xs) { }
overload fixAst(ast:StaticFor, state:FixState) : {
    ref tokens = state.tokens.vector;

    assert(size(ast.tokens) >= 2);
    assert(isKeywordToken(tokens[ast.tokens.begin], "static"));
    assert(isKeywordToken(tokens[ast.tokens.begin + 1], "for"));

    writeUptoToken(ast.tokens.begin, state);
    printTo(state.outputFile, "..");
    replaceUptoToken(ast.tokens.begin + 1, state);
    fixAst(ast.variable, state);
    fixAst(ast.values, state);
    fixAst(ast.body, state);
}


// Convert "ref" bindings to "forward" bindings.
// 0.0: ref x = y;
// 0.1: forward x = y;
overload fixAst(ast:Binding, state:FixState) : {
    ref tokens = state.tokens.vector;
    if (ast.kind == REF) {
        assert(size(ast.tokens) >= 1);
        assert(isKeywordToken(tokens[ast.tokens.begin], "ref"));
        writeUptoToken(ast.tokens.begin, state);
        printTo(state.outputFile, "forward");
        replaceToken(ast.tokens.begin, state);
    }
    fixAst(ast.names, state);
    fixAst(ast.values, state);
}


// Remove 'procedure' (if present) from procedure definitions with bodies.
// 0.0: procedure foo() { }
// 0.1: foo() { }
overload fixAst(ast:Procedure, state:FixState) : {
    maybe(ast.code): code -> {
        fixAst(code.patternVars, state);
        fixAst(code.predicate, state);
        fixAst(ast.visibility, state);

        ref tokens = state.tokens.vector;
        if (ast.name.tokens.begin > 0
            and isKeywordToken(tokens[ast.name.tokens.begin - 1], "procedure"))
        {
            writeUptoToken(ast.name.tokens.begin - 1, state);
            replaceUptoToken(ast.name.tokens.begin, state);
        }

        fixAst(ast.name, state);
        fixAst(code.args, state);
        fixCodeReturns(code, state);
        fixAst(code.body, state);
    }
}


//
// Update inline LLVM bodies containing explicit 'ret i32 0' code sequences.
// 0.0: __llvm__ { ret i32 0 }
// 0.1: __llvm__ { ret i8* null }
overload fixAst(ast:LLVMBody, state:FixState) : {
    ref tokens = state.tokens.vector;
    assert(size(ast.tokens) == 1);
    ref llvmToken = tokens[ast.tokens.begin];
    assert(llvmToken.kind == LLVM);

    writeUptoToken(ast.tokens.begin, state);
    replaceToken(ast.tokens.begin, state);

    ref fileData = state.tokens.file.data;
    var tokenData = CoordinateRange(
        begin(fileData) + llvmToken.range.begin,
        begin(fileData) + llvmToken.range.end,
    );

    var openBrace = find(tokenData, '{');
    assert(openBrace != end(tokenData));
    var closeBrace = reverseFind(tokenData, '}');
    assert(closeBrace != begin(tokenData));
    assert(closeBrace - openBrace > 2);

    var search = CoordinateRange(openBrace + 1, closeBrace - 1);

    while (not empty?(search)) {
        var newline = find(search, '\n');
        var line = CoordinateRange(begin(search), newline);
        var textBegin = findIf(line, c -> not space?(c));
        var textEnd = reverseFindIf(line, c -> not space?(c));
        if (CoordinateRange(textBegin, textEnd) == "ret i32 0") {
            printTo(state.outputFile,
                CoordinateRange(tokenData.begin, textBegin),
                "ret i8* null",
                CoordinateRange(textEnd, line.end));
            tokenData.begin = line.end;
        }
        search.begin = min(newline + 1, search.end);
    }
    printTo(state.outputFile, tokenData);
}


//
// entry point
//

fix(source:SourceFile, outputFile:File) : {
    var tokens = tokenize(source);
    var ast = parse(tokens);

    var state = FixState(tokens, outputFile);
    fixAst(ast, state);
    finishFix(state);
}

