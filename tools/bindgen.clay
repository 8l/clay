import llvm.libclang.*;
import printer.formatter.(repr);

var g_declNames = HashMap[CXCursor, String]();
var g_unnamedIndex = 0;

overload printTo(stream, s:CXString) : {
    printTo(stream, CStringRef(clang_getCString(s)));
}

unnamedName() : String {
    inc(g_unnamedIndex);
    return str("Unnamed",g_unnamedIndex);
}

nameForDeclaration(cursor:CXCursor) : String
{
    var namep = lookup(g_declNames, cursor);
    if (null?(namep)) {
        var spelling = str(clang_getCursorSpelling(cursor));
        var prefix = String();

        switch (cursor.kind)
        case (CXCursor_StructDecl)
            prefix = String("Struct_");
        case (CXCursor_UnionDecl)
            prefix = String("Union_");
        case (CXCursor_EnumDecl)
            prefix = String("Enum_");
        else
            prefix = String("Other_");

        var name = String();
        if (empty?(spelling))
            name = prefix + unnamedName();
        else
            name = prefix + spelling;
        g_declNames[cursor] = name;
        return move(name);
    } else
        return namep^;
}

convertPointerType(type:CXType, refCursor:CXCursor) : String {
    switch (type.kind)
    case (CXType_Void)
        return str("OpaquePointer");
    case (CXType_Unexposed, CXType_FunctionProto, CXType_FunctionNoProto) {
        // XXX Function pointer types inside fields or parms show up as "unexposed"
        // but we can still extract the return type and visit parms
        // XXX Pointers to forward-declared structs also show up as "unexposed"
        // XXX calling convention
        var returnType = clang_getResultType(type);
        var decl = clang_getTypeDeclaration(type);
        if (returnType.kind != CXType_Invalid) {
            var name = String();
            var varargs = clang_isFunctionTypeVariadic(type) != 0;

            switch (clang_getFunctionTypeCallingConv(type))
            case (CXCallingConv_X86StdCall)
                printTo(name, "StdCallCodePointer");
            case (CXCallingConv_X86FastCall)
                printTo(name, "FastCallCodePointer");
            else if (varargs)
                printTo(name, "VarArgsCCodePointer");
            else
                printTo(name, "CCodePointer");

            printTo(name, "[[");

            for (arg in range(clang_getNumArgTypes(type))) {
                if (arg > 0)
                    printTo(name, ", ");
                printTo(name, convertType(clang_getArgType(type, arg), refCursor));
            }

            printTo(name,
                "],[",
                if (returnType.kind == CXType_Void) str("") else convertType(returnType, refCursor),
                "]]");
            return move(name);
        } else if (decl.kind != CXCursor_NoDeclFound) {
            return str("Pointer[", convertTypeFromDeclaration(decl), "]");
        } else {
            return str("OpaquePointer /* unknown ",
                clang_getTypeKindSpelling(type.kind),
                " referenced by ",
                clang_getCursorKindSpelling(refCursor.kind),
                " ",
                clang_getCursorSpelling(refCursor),
                " */");
        }
    }
    else
        return str("Pointer[", convertType(type, refCursor), "]");
}

convertTypeFromDeclaration(declaration:CXCursor) : String {
    switch (declaration.kind)
    case (CXCursor_StructDecl, CXCursor_UnionDecl)
        return nameForDeclaration(declaration);
    case (CXCursor_TypedefDecl)
        return str(clang_getCursorSpelling(declaration));
    else
        return str("Opaque /* unknown ",
            clang_getCursorKindSpelling(clang_getCursorKind(declaration)), " ",
            clang_getCursorSpelling(declaration), " */");
}

convertType(type:CXType, refCursor:CXCursor) : String {
    switch (type.kind)
    case (CXType_Bool)
        return str("Bool");
    case (CXType_SChar, CXType_Char_S)
        return str("CChar");
    case (CXType_UChar, CXType_Char_U)
        return str("CUChar");
    case (CXType_UShort)
        return str("UShort");
    case (CXType_UInt)
        return str("UInt");
    case (CXType_ULong)
        return str("CULong");
    case (CXType_ULongLong)
        return str("UInt64");
    case (CXType_Short)
        return str("Short");
    case (CXType_Int)
        return str("Int");
    case (CXType_Long)
        return str("CLong");
    case (CXType_LongLong)
        return str("Int64");
    case (CXType_Float)
        return str("Float");
    case (CXType_Double)
        return str("Double");
    case (CXType_LongDouble)
        return str("LongDouble");
    case (CXType_Complex) {
        var elementType = clang_getElementType(type);
        switch (elementType.kind)
        case (CXType_Float)
            return str("Complex32");
        case (CXType_LongDouble)
            return str("ComplexLongDouble");
        case (CXType_Double)
            return str("Complex64");
        else
            return str("Opaque /* unsupported complex type ",
                clang_getTypeKindSpelling(elementType.kind), " */");
    }
    case (CXType_Pointer)
        return convertPointerType(clang_getPointeeType(type), refCursor);
    case (CXType_Record, CXType_Typedef, CXType_Unexposed) {
        var typeCursor = clang_getTypeDeclaration(type);
        return convertTypeFromDeclaration(typeCursor);
    }
    case (CXType_ConstantArray) {
        return str("Array[",
            convertType(clang_getArrayElementType(type), refCursor),
            ", ",
            clang_getArraySize(type),
            "]",
        );
    }
    case (CXType_Vector) {
        return str("Vec[",
            convertType(clang_getElementType(type), refCursor),
            ", ",
            clang_getNumElements(type),
            "]",
        );
    }
    else
        return str("/* unknown kind ",
            clang_getTypeKindSpelling(type.kind), " */ Opaque");

}

visitStruct(cursor:CXCursor, parent:CXCursor, data:CXClientData) : Int
{
    assert(clang_getCursorKind(parent) == CXCursor_StructDecl);
    var kind = clang_getCursorKind(cursor);
    switch (kind)
    case (CXCursor_FieldDecl) {
        var type = clang_getCursorType(cursor);
        println("    ", clang_getCursorSpelling(cursor), ": ", convertType(type, cursor), ",");
    }
    else {}

    return CXChildVisit_Continue;
}

visitUnion(cursor:CXCursor, parent:CXCursor, data:CXClientData) : Int
{
    assert(clang_getCursorKind(parent) == CXCursor_UnionDecl);
    var kind = clang_getCursorKind(cursor);
    switch (kind)
    case (CXCursor_FieldDecl) {
        var type = clang_getCursorType(cursor);
        println("    /* ", clang_getCursorSpelling(cursor), " */ ", convertType(type, cursor), ",");
    }
    else {}

    return CXChildVisit_Continue;
}

record FunctionDeclAttributes (asmLabel:String);

visitFunctionAttr(cursor:CXCursor, parent:CXCursor, data:CXClientData) : Int
{
    ref attributes = Pointer[FunctionDeclAttributes](data)^;
    switch (cursor.kind)
    case (CXCursor_AsmLabelAttr)
        attributes.asmLabel = str(clang_getCursorSpelling(cursor));
    return CXChildVisit_Continue;
}

visitEnum(cursor:CXCursor, parent:CXCursor, data:CXClientData) : Int
{
    switch (cursor.kind)
    case (CXCursor_EnumConstantDecl) {
        println("alias ", clang_getCursorSpelling(cursor), " = ",
            clang_getEnumConstantDeclValue(cursor), ";");
    }
    else {
    }
    return CXChildVisit_Continue;
}

withForwardDecl(cursor:CXCursor, f) {
    var definition = clang_getCursorDefinition(cursor);
    if (cursor == definition)
        f();
    else {
        if (inValues?(definition.kind, CXCursor_NoDeclFound, CXCursor_InvalidFile))
            println("alias ", nameForDeclaration(cursor), " = Opaque;");
    }
}

visitToplevel(cursor:CXCursor, parent:CXCursor, data:CXClientData) : Int
{
    var kind = clang_getCursorKind(cursor);
    switch (kind)
    case (CXCursor_StructDecl) {
        withForwardDecl(cursor, () -> {
            println("record ", nameForDeclaration(cursor), " (");
            clang_visitChildren(cursor, CXCursorVisitor(visitStruct), data);
            println(");");
        });
        return CXChildVisit_Continue;
    }
    case (CXCursor_UnionDecl) {
        withForwardDecl(cursor, () -> {
            println("alias ", nameForDeclaration(cursor), " = Union[");
            clang_visitChildren(cursor, CXCursorVisitor(visitUnion), data);
            println("];");
        });
        return CXChildVisit_Continue;
    }
    case (CXCursor_EnumDecl) {
        withForwardDecl(cursor, () -> {
            println("alias ", nameForDeclaration(cursor), " = ",
                convertType(clang_getEnumDeclIntegerType(cursor), cursor), ";");
            clang_visitChildren(cursor, CXCursorVisitor(visitEnum), data);
        });
        return CXChildVisit_Continue;
    }
    case (CXCursor_FunctionDecl) {
        // XXX __asm__ name
        // XXX calling convention
        // XXX dllimport/dllexport
        // XXX separate return function pointer type params
        var attributes = FunctionDeclAttributes();
        clang_visitChildren(cursor, CXCursorVisitor(visitFunctionAttr),
            CXClientData(&attributes));

        var type = clang_getCursorType(cursor);

        print("external (");
        switch (clang_getFunctionTypeCallingConv(type))
        case (CXCallingConv_X86StdCall)
            print("stdcall");
        case (CXCallingConv_X86FastCall)
            print("fastcall");
        else
            print("cdecl");

        if (not empty?(attributes.asmLabel))
            print(", ", repr(attributes.asmLabel));

        print(") ", clang_getCursorSpelling(cursor), "(");
        for (arg in range(clang_getNumArgTypes(type))) {
            if (arg > 0)
                print(", ");
            print("arg", arg, ":", convertType(clang_getArgType(type, arg), cursor));
        }
        print(") : ");
        var returnType = clang_getCursorResultType(cursor);
        if (returnType.kind != CXType_Void)
            print(convertType(returnType, cursor));
        println(";");
        return CXChildVisit_Continue;
    }
    case (CXCursor_TypedefDecl) {
        // XXX get typedef type instead of going all the way to the canonical type
        // XXX if the typedef is an untagged struct or union, eliminate the intermediate
        // and use the typedef name as the record name
        println("alias ", clang_getCursorSpelling(cursor), " = ",
            convertType(clang_getTypedefDeclUnderlyingType(cursor), cursor), ";");
        return CXChildVisit_Continue;
    }
    return CXChildVisit_Recurse;
}

main(argc, argv)
{
    var index = clang_createIndex(0, 1);
    if (null?(index)) {
        println("clang failed to create index");
        return 1;
    }
    finally clang_disposeIndex(index);

    var unit = clang_parseTranslationUnit(
        index,
        null(CChar),
        argv,
        argc,
        null(Struct_CXUnsavedFile),
        0u,
        0u,
    );
    if (null?(unit)) {
        println("clang failed to create translation unit");
        return 1;
    }
    finally clang_disposeTranslationUnit(unit);

    var error? = false;
    for (i in range(0u, clang_getNumDiagnostics(unit))) {
         var diag = clang_getDiagnostic(unit, i);
         var diagStr = clang_formatDiagnostic(diag,
            clang_defaultDiagnosticDisplayOptions());
         finally clang_disposeString(diagStr);

         println(CStringRef(clang_getCString(diagStr)));
         if (clang_getDiagnosticSeverity(diag) >= CXDiagnostic_Error)
            error? = true;
    }
    if (error?)
        return 1;

    var cursor = clang_getTranslationUnitCursor(unit);

    clang_visitChildren(cursor, CXCursorVisitor(visitToplevel), CXClientData(777));
    return 0;
}
