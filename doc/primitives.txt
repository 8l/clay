Primitive Values

Bool, Int8, Int16, Int32, Int64, UInt8, UInt16, UInt32, UInt64,
Float32, Float64, Void

true, false : Bool

Primitive Operations

[T] Type?(static T):Bool
[T] TypeSize(static T):SizeT
[T] TypeAlignment(static T):SizeT
[F, A1, ..., An] CallDefined?(static F, static A1, ..., static An) Bool;

[T] primitiveCopy(dest:T, src:T):Void

boolNot(a:Bool):Bool

[N|Numeric?(N)] numericEquals?(a:N, b:N): Bool
[N|Numeric?(N)] numericLesser?(a:N, b:N): Bool
[N|Numeric?(N)] numericAdd(a:N, b:N): N
[N|Numeric?(N)] numericSubtract(a:N, b:N): N
[N|Numeric?(N)] numericMultiply(a:N, b:N): N
[N|Numeric?(N)] numericDivide(a:N, b:N): N
[N|Numeric?(N)] numericNegate(a:N): N

[I|Integer?(I)] integerRemainder(a:I, b:I): I
[I|Integer?(I)] integerShiftLeft(a:I, b:I): I
[I|Integer?(I)] integerShiftRight(a:I, b:I): I
[I|Integer?(I)] integerBitwiseAnd(a:I, b:I): I
[I|Integer?(I)] integerBitwiseOr(a:I, b:I): I
[I|Integer?(I)] integerBitwiseXor(a:I, b:I): I
[I|Integer?(I)] integerBitwiseNot(a:I): I

[DEST,SRC | Numeric?(DEST) and Numeric?(SRC)]
numericConvert(static DEST, a:SRC): DEST

Pointer[T]

[T] addressOf(a:T) : Pointer[T]
[T] pointerDereference(a:Pointer[T]) ref : T
[T] pointerEquals?(a:Pointer[T], b:Pointer[T]) : Bool
[T] pointerLesser?(a:Pointer[T], b:Pointer[T]) : Bool
[T,I] pointerOffset(a:Pointer[T], i:I) : Pointer[T]
[T,I|Integer?(I)] pointerToInt(static I, a:Pointer[T]) : I
[I,T|Integer?(I)] intToPointer(static T, a:I) : Pointer[T]

CodePointer[(A1, ..., An), (R1, ...,Rn)]
[F, A1, ..., An] makeCodePointer(static F, static A1, ..., static An)

AttributeStdCall
AttributeFastCall
AttributeCCall
AttributeDLLImport
AttributeDLLExport

[T] CCodePointer?(static T):Bool
CCodePointer[(A1, ..., An), (RT?)]
VarArgsCCodePointer[(A1, ..., An), (RT?)]
StdCallCodePointer[(A1, ..., An), (RT?)]
FastCallCodePointer[(A1, ..., An), (RT?)]
[F, A1, ..., An] makeCCodePointer(static F, static A1, ..., static An)

[T1,T2] pointerCast(static T2, a:Pointer[T1]): T2

Array[T,n]
[T,n] arrayRef(a:Array[T,n], i:SizeT) ref : T

Vec[T,n]

Tuple[T1, ..., Tn]
[T] TupleElementCount(static T): SizeT
[T|Tuple?(T)] tupleRef(a:T, static i)
[...T] tupleElements(a:Tuple[...T]) ...

Union[T1, ..., Tn]
[T] UnionMemberCount(static T) : SizeT

[R] Record?(static R):Bool
[R] RecordFieldCount(static R):SizeT
[R,i] RecordFieldName(static R, static i): name
[R,i] recordFieldRef(a:R, static i)
[R,name] recordFieldRefByName(a:R, static name)
[R] recordFields(a:R) ...

[T] Variant?(static T) Bool
[T,M] VariantMemberIndex(static T, static M) SizeT
[T] VariantMemberCount(static T) SizeT
[T] variantRepr(x:T) ref VariantRepr[Int, Union[...]]

Static[A]
StaticName
[n] staticIntegers(static n) ...

[E] Enum?(static E):Bool
[E|Enum?(E)] enumToInt(x:E):Int
[E|Enum?(E)] intToEnum(static E, x:Int):E

IdentifierSize(ident) : SizeT
IdentifierConcat(ident1, ident2) : ident
IdentifierSlice(ident1, start, end) : ident
