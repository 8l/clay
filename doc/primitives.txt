Primitive Types:
Bool, Char, Int, Void

Primitive Values:
true, false, CharLiteral, IntLiteral

Primitive Type Constructors:
(Type,...) : tuple type constructor
Array[T] : array reference type constructor
ArrayValue[T,n] : array value type constructor
record [T,..]? { (Name:Type;)* } : record type definition
struct [T,..]? { (Name:Type;)* } : struct type definition
Ref[T] : simple pointer

Primitive Value
(Value,...) : tuple constructor
[Value,...] : array constructor
T(Value,...) : record constructor if IsRecord(T)
T(Value,...) : record constructor if IsStruct(T)

Primitive Operations:

default[T](type T):T

e:T => &e:Ref[T]
e:Ref[T] => e^:T
e:Ref[T],i:Int => e+i:Ref[T], e-i:Ref[T]
e1:Ref[T],e2:Ref[T] -> e1-e2:Int

v_1:T_1, ..., v_n:T_n => (v_1, ..., v_n) : (T_1, ..., T_n)
e:(T_1, ..., T_n) => e.i : T_i

v_1:T, ..., v_n:T => [v_1, ... ,v_n] : Array[T]
T:Type => array(type T):Array[T]
T:Type,n:Int => array(type T, n):Array[T]
n:Int, v:T => array(n, v):Array[T]
a:Array[T] => arraySize(a):Int
a:Array[T], i:Int => a[i]:T

T:Type, n:IntLiteral => arrayValue(type T, n):ArrayValue[T,n]
n:IntLiteral, v:T => arrayValue(n, v):ArrayValue[T, n]
a:ArrayValue[T,n], i:Int => a[i]:T

R:Record => R(v_1, ..., v_n):RecordType
a:RecordType => a.field:FieldType

S:Struct => S(v_1, ..., v_n):StructType
a:StructType => a.field:FieldType

boolNot(x:Bool):Bool

charToInt(c:Char):Int
intToChar(i:Int):Char
charEquals, charLesser, charLesserEquals,
charGreater, charGreaterEquals

intAdd, intSubtract, intMultiply, inDivide,
intModulus, intNegate,
intEquals, intLesser, intLesserEquals,
intGreater, intGreaterEquals
