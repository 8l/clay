Primitive Types:
Bool,
Int8, Int16, Int32, Int64
UInt8, UInt16, UInt32, UInt64
Float32, Float64

Primitive Values:
true, false, IntLiteral, FloatLiteral

Derived Types:
Tuple[T1, ..., Tn] : tuple type constructor
Array[T, n] : array type constructor
Pointer[T] : pointer type

User defined types:
records

Primitive Operations:

typeSize[T](static T):Int32

primitiveCopy[T](dest:T, src:T): Void

addressOf[T](a:T) : Pointer[T]
pointerDereference[T](a:Pointer[T]) ref : T
pointerToInt[T,I](a:Pointer[T], static I) : I
intToPointer[I,T](a:I, static T) : Pointer[T]
pointerCast[T1,T2](static T2, a:Pointer[T1]): Pointer[T2]
allocateMemory[T](static T, n:Int32): Pointer[T]
freeMemory[T](p:Pointer[T]): Void

TupleType[T](static T): Bool
tuple(v1, ..., vn): TupleType
tupleFieldCount[T](static T): Int32
tupleFieldRef[T,i](a:T, static i) ref : FieldType

array(v1, ..., vn): Array[T, n]
arrayRef[T,n](a:Array[T,n], i:Int32) ref : T

RecordType[T](static T): Bool
recordFieldCount[R](static R) : Int32
recordFieldRef[R,i](a:R, static i) ref : FieldType

numericEquals[N](a:N, b:N): Bool
numericLesser[N](a:N, b:N): Bool
numericAdd[N](a:N, b:N): N
numericSubtract[N](a:N, b:N): N
numericMultiply[N](a:N, b:N): N
numericDivide[N](a:N, b:N): N
numericRemainder[N](a:N, b:N): N
numericNegate[N](a:N): N
numericConvert[Dest,Src](static Dest, a:Src): Dest

shiftLeft[I](a:I, n:I): I
shiftRight[I](a:I, n:I): I
bitwiseAnd[I](a:I, b:I): I
bitwiseOr[I](a:I, b:I): I
bitwiseXor[I](a:I, b:I): I
