Primitive Values

Bool, Int8, Int16, Int32, Int64, UInt8, UInt16, UInt32, UInt64,
Float32, Float64, Void, CompilerObject, Any : CompilerObject

true, false : Bool
void : Void

Primitive Operations

Type?[T](static T):Bool
TypeSize[T](static T):Int32

primitiveInit[T](a:T):Void
primitiveDestroy[T](a:T):Void
primitiveCopy[T](dest:T, src:T):Void
primitiveAssign[T](dest:T, src:T):Void

boolNot(a:Bool):Bool
boolTruth(a:Bool):Bool

numericEquals?[N](a:N, b:N): Bool if (NumericType?(N))
numericLesser?[N](a:N, b:N): Bool if (NumericType?(N))
numericAdd[N](a:N, b:N): N if (NumericType?(N))
numericSubtract[N](a:N, b:N): N if (NumericType?(N))
numericMultiply[N](a:N, b:N): N if (NumericType?(N))
numericDivide[N](a:N, b:N): N if (NumericType?(N))
numericNegate[N](a:N): N if (NumericType?(N))

integerRemainder[N](a:N, b:N): N if (IntegerType?(N))
integerShiftLeft[I](a:I, n:I): I if (IntegerType?(I))
integerShiftRight[I](a:I, n:I): I if (IntegerType?(I))
integerBitwiseAnd[I](a:I, b:I): I if (IntegerType?(I))
integerBitwiseOr[I](a:I, b:I): I if (IntegerType?(I))
integerBitwiseXor[I](a:I, b:I): I if (IntegerType?(I))
integerBitwiseNot[I](a:I): I if (IntegerType?(I))

numericConvert[Dest,Src](static Dest, a:Src): Dest
    if (NumericType?(Dest) and NumericType?(Src))

box[T](x:T):Any
boxRef[T](x:T):Any
unbox[T](static T, x:Any):T
unboxRef[T](static T, x:Any) ref :T

Pointer[T]

addressOf[T](a:T) : Pointer[T]
pointerDereference[T](a:Pointer[T]) ref : T
pointerToInt[T,I](static I, a:Pointer[T]) : I if IntegerType?(I)
intToPointer[I,T](static T, a:I) : Pointer[T] if IntegerType?(I)
allocateMemory[T](static T, n:Int32): Pointer[T]
freeMemory[T](p:Pointer[T]): Void

FunctionPointerType?[T](static T):Bool
FunctionPointer[A1, ..., An, RT]
makeFunctionPointer[F, A1, ..., An](static F, static A1, ..., static An)

pointerCast[T1,T2](static T2, a:Pointer[T1]): T2

Array[T,n]
array(v1, ..., vn): Array[T,n]
arrayRef[T,n](a:Array[T,n], i:Int32) ref : T

TupleType?[T](static T):Bool
Tuple[T1, ..., Tn]
TupleElementCount[T](static T): Int32
TupleElementOffset[T,i](static T, static i): Int32
tuple(v1, ...,vn): tuple type
tupleRef [T|TupleType?(T)] (a:T, static i)

RecordType?[R](static R):Bool
RecordFieldCount[R](static R):Int32
RecordFieldOffset[R,i](static R, static i): Int32
RecordFieldIndex[R,name](static R, static name): Int32
recordFieldRef[R,i](a:R, static i)
recordFieldRefByName[R,name](a:R, static name)
