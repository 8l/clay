Primitive Types:
Bool, Byte, Char, Int, Type, Void

Primitive Values:
true, false, ByteLiteral, CharLiteral, IntLiteral, void

Primitive Type Constructors:
(Type,...) : tuple type constructor
Array[T] : array reference type constructor
ArrayValue[T,n] : array value type constructor
record [T,..]? { (Name:Type;)* } : record type definition
struct [T,..]? { (Name:Type;)* } : struct type definition
RCRef[T] : refcounted pointer
Ref[T] : simple pointer

Primitive Value
(Value,...) : tuple constructor
[Value,...] : array constructor
T(Value,...) : record constructor if IsRecord(T)
T(Value,...) : record constructor if IsStruct(T)

Primitive Operations:

default[T](type T):T

rcref_to_ref[T](a:RCRef[T]): Ref[T]

ref_get[T](a:Ref[T]): T
ref_set[T](a:Ref[T], x:T): Void
ref_offset[T](a:Ref[T], offset:Int): Ref[T]
ref_diff[T](a:Ref[T], b:Ref[T]): Int

(v1, ..., vn) : tuple constructor
tuple_ref(a:Ref[T], i:IntLiteral): Ref[T2]

[v1, ... ,vn] : Array[T]
new_array[T](type T):Array[T]
new_array[T](type T, n:Int):Array[T]
new_array[T](n:Int, v:T):Array[T]
array_size[T](a:Array[T]):Int
array_ref[T](a:Array[T], i:Int): Ref[T]

array_value[T](type T, n:IntLiteral, x:T): ArrayValue[T,n]
array_value_ref[T](a:Ref[ArrayValue[T,n]], i:Int): Ref[T]

T(v1, v2, ...): record constructor
record_ref(a:T, field:StringLiteral): Ref[T2]

T(v1, v2, ...): struct constructor
struct_ref(a:Ref[T], field:StringLiteral): Ref[T2]

not(x:Bool):Bool

char_to_int(c:Char):Int
int_to_char(i:Int):Char
char_equals, char_lesser, char_lesser_equals,
char_greater, char_greater_equals

int_add, int_subtract, int_multiply, int_divide
int_modulus, int_negate,
int_equals, int_lesser, int_lesser_equals,
int_greater, int_greater_equals
