Primitive Values

Bool, Int8, Int16, Int32, Int64, UInt8, UInt16, UInt32, UInt64,
Float32, Float64, Void

true, false : Bool

Primitive Operations

static TypeOf(a) = Type or VoidType

[T] Type?(static T):Bool
[T] TypeSize(static T):Int32

[T] primitiveCopy(dest:T, src:T):Void

boolNot(a:Bool):Bool

[N|NumericType?(N)] numericEquals?(a:N, b:N): Bool
[N|NumericType?(N)] numericLesser?(a:N, b:N): Bool
[N|NumericType?(N)] numericAdd(a:N, b:N): N
[N|NumericType?(N)] numericSubtract(a:N, b:N): N
[N|NumericType?(N)] numericMultiply(a:N, b:N): N
[N|NumericType?(N)] numericDivide(a:N, b:N): N
[N|NumericType?(N)] numericNegate(a:N): N

[I|IntegerType?(I)] integerRemainder(a:I, b:I): I
[I|IntegerType?(I)] integerShiftLeft(a:I, b:I): I
[I|IntegerType?(I)] integerShiftRight(a:I, b:I): I
[I|IntegerType?(I)] integerBitwiseAnd(a:I, b:I): I
[I|IntegerType?(I)] integerBitwiseOr(a:I, b:I): I
[I|IntegerType?(I)] integerBitwiseXor(a:I, b:I): I
[I|IntegerType?(I)] integerBitwiseNot(a:I): I

[DEST,SRC | NumericType?(DEST) and NumericType?(SRC)]
numericConvert(static DEST, a:SRC): DEST

Pointer[T]

[T] addressOf(a:T) : Pointer[T]
[T] pointerDereference(a:Pointer[T]) ref : T
[T,I|IntegerType?(I)] pointerToInt(static I, a:Pointer[T]) : I
[I,T|IntegerType?(I)] intToPointer(static T, a:I) : Pointer[T]

[T] CodePointerType?(static T):Bool
CodePointer[A1, ..., An, RT]
RefCodePointer[A1, ..., An, RT]
[F, A1, ..., An] makeCodePointer(static F, static A1, ..., static An)

[T] CCodePointerType?(static T):Bool
CCodePointer[A1, ..., An, RT]
[F, A1, ..., An] makeCCodePointer(static F, static A1, ..., static An)

[T1,T2] pointerCast(static T2, a:Pointer[T1]): T2

Array[T,n]
array(v1, ..., vn): Array[T,n]
[T,n] arrayRef(a:Array[T,n], i:Int32) ref : T

[T] TupleType?(static T):Bool
Tuple[T1, ..., Tn]
[T] TupleElementCount(static T): Int32
[T,i] TupleElementOffset(static T, static i): Int32
tuple(v1, ...,vn): tuple type
[T|TupleType?(T)] tupleRef(a:T, static i)

[R] RecordType?(static R):Bool
[R] RecordFieldCount(static R):Int32
[R,i] RecordFieldOffset(static R, static i): Int32
[R,name] RecordFieldIndex(static R, static name): Int32
[R,i] recordFieldRef(a:R, static i)
[R,name] recordFieldRefByName(a:R, static name)

[E] EnumType?(static E):Bool
[E|EnumType?(E)] enumToInt(x:E):Int32
[E|EnumType?(E)] intToEnum(static E, x:Int32):E
