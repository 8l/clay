Program -> TopLevelItem* ;

TopLevelItem -> PredicateDef | InstanceDef | RecordDef | StructDef
              | VariableDef | ProcedureDef | OverloadableDef | OverloadDef ;

PredicateDef -> "predicate" Name ;
InstanceDef -> "instance" TypeVars? Name "(" comma_list(TypeExpr) ")"
               TypeConditions? ";" ;

TypeVars -> "[" comma_list(Name) "]" ;
TypeConditions -> "if" comma_list(TypeCondition) ;
TypeCondition -> Name "(" comma_list(TypeExpr) ")" ;

RecordDef -> "record" Name TypeVars? "{" FieldDef+ "}" ;
StructDef -> "struct" Name TypeVars? "{" FieldDef+ "}" ;
FieldDef -> Name ":" TypeExpr ";" ;

TypeSpec -> ":" TypeExpr ;

VariableDef -> "var" Name TypeSpec? "=" Expression ";" ;

ProcedureDef -> "def" Name TypeVars? "(" comma_list(Argument)? ")"
                TypeSpec? TypeConditions? Block ;
Argument -> Name TypeSpec?
          | "type" Expression
          ;

OverloadableDef -> "overloadable" Name ";" ;

OverloadDef -> "overload" Name TypeVars? "(" comma_list(Argument)? ")"
               TypeSpec? TypeConditions? Block ;

Block -> "{" Statement+ "}" ;

Statement -> Block
           | LocalVariableDef
           | Assignment
           | IfStatement
           | ReturnStatement
           | Expression
           ;

LocalVariableDef -> "var" Name TypeSpec? "=" Expression ";" ;

Assignment -> Name "=" Expression ";" ;

IfStatement -> "if" "(" Expression ")" Statement
               ("else" Statement)? ;

ReturnStatement -> "return" Expression? ";" ;

TypeExpr -> Expression ;

Expression -> SuffixExpr ;

SuffixExpr -> AtomicExpr Suffix* ;
Suffix -> IndexSuffix
        | CallSuffix
        | FieldRefSuffix
        ;
IndexSuffix -> "[" comma_list(Expression) "]" ;
CallSuffix -> "(" comma_list(Expression) ")" ;
FieldRefSuffix -> "." Name ;

AtomicExpr -> ArrayExpr
            | TupleExpr
            | NameRef
            | Literal
            ;

ArrayExpr -> "[" comma_list(Expression) "]" ;
TupleExpr -> "(" comma_list(Expression) ")" ;

NameRef -> Name ;

Literal -> BoolLiteral
         | IntLiteral
         | CharLiteral
         | StringLiteral
         ;

BoolLiteral -> "true" | "false" ;
