Module -> Import* Export* TopLevelItem*

Import -> "import" DottedName ";"
Export -> "export" DottedName ";"

DottedName -> Identifier ("." Identifier)*


TopLevelItem -> Record | Procedure | Overloadable | Overload
              | Enumeration | GlobalVariable
              | ExternalProcedure | ExternalVariable
              | StaticGlobal
              | StaticProcedure | StaticOverloadable | StaticOverload

Record -> "record" Identifier PatternVars? "{" RecordField+ "}"
PatternVars -> "[" comma_list(Identifier) "]"
RecordField -> Identifier TypeSpec ";"
TypeSpec -> ":" Pattern

Procedure -> PatternVarsWithCond? "inlined"? Identifier Arguments ReturnSpec? Body

PatternVarsWithCond -> "[" comma_list(Identifier) Predicate? "]"
Predicate -> "|" Expression

Arguments -> "(" comma_list(Argument) ")"

Argument -> ValueArgument
          | StaticArgument

ValueArgument -> ("rvalue" | "lvalue")? Identifier TypeSpec?
StaticArgument -> "static" Expression

ReturnSpec -> "ref"? TypeSpec

Body -> "=" Expression ";"
      | "=" "ref" Expression ";"
      | Block

Overloadable -> "overloadable" Identifier ";"

Overload -> PatternVarsWithCond? "inlined"? "overload" Pattern Arguments ReturnSpec? Body

Enumeration -> "enum" Identifier "{" comma_list(Identifier) "}"

GlobalVariable -> "var" Identifier "=" Expression ";"

ExternalProcedure -> "external" Identifier "(" ExternalArgs ")"
                     TypeSpec (ExternalBody | ";")
ExternalArgs -> comma_list(ExternalArg) ("," "...")?
              | ("...")?
ExternalArg -> Identifier TypeSpec
ExternalBody -> "=" Expression ";"
              | Block

ExternalVariable -> "external" Identifier TypeSpec ";"

StaticGlobal -> "static" Identifier "=" Expression ";"

StaticProcedure -> PatternVarsWithCond? "static" Identifier
                   "(" comma_list(Expression) ")" "=" Expression ";"

StaticOverloadable -> "static" "overloadable" Identifier ";"

StaticOverload -> PatternVarsWithCond? "static" "overload" Pattern
                  "(" comma_list(Expression) ")" "=" Expression ";"


//
// Statement
//

Block -> "{" Statement+ "}"

Statement -> Block
           | LabelDef
           | VarBinding
           | RefBinding
           | StaticBinding
           | Assignment
           | InitAssignment
           | UpdateAssignment
           | IfStatement
           | GotoStatement
           | ReturnStatement
           | ExpressionStatement
           | WhileStatement
           | BreakStatement
           | ContinueStatement
           | ForStatement

LabelDef -> Identifier ":"

VarBinding -> "var" Identifier "=" Expression ";"
RefBinding -> "ref" Identifier "=" Expression ";"
StaticBinding -> "static" Identifier "=" Expression ";"

Assignment -> Expression "=" Expression ";"

InitAssignment -> Expression "<--" Expression ";"

UpdateAssignment -> Expression UpdateOp Expression ";"
UpdateOp -> "+=" | "-=" | "*=" | "/=" | "%="

IfStatement -> "if" "(" Expression ")" Statement
               ("else" Statement)?

GotoStatement -> "goto" Identifier ";"

ReturnStatement -> "return" Expression? ";"

ExpressionStatement -> Expression ";"

WhileStatement -> "while" "(" Expression ")" Statement
BreakStatement -> "break" ";"
ContinueStatement -> "continue" ";"

ForStatement -> "for" "(" Identifier "in" Expression ")" Statement


//
// Pattern
//

Pattern -> AtomicPattern PatternSuffix?
AtomicPattern -> IntLiteral
               | NameRef
PatternSuffix -> "[" comma_list(Pattern) "]"


//
// Expression
//

Expression -> OrExpr
            | Lambda

OrExpr -> AndExpr ("or" AndExpr)*
AndExpr -> NotExpr ("and" NotExpr)*
NotExpr -> "not"? CompareExpr

CompareExpr -> AddSubExpr (CompareOp AddSubExpr)?
CompareOp -> "==" | "!=" | "<" | "<=" | ">" | ">="

AddSubExpr -> MulDivExpr (("+" | "-") MulDivExpr)*
MulDivExpr -> PrefixExpr (("*" | "/" | "%") PrefixExpr)*

PrefixExpr -> SignExpr
            | AddressOfExpr
            | SuffixExpr

SignExpr -> ("+" | "-") SuffixExpr
AddressOfExpr -> "&" SuffixExpr
SuffixExpr -> AtomicExpr Suffix*
Suffix -> IndexSuffix
        | CallSuffix
        | FieldRefSuffix
        | TupleRefSuffix
        | DereferenceSuffix

IndexSuffix -> "[" comma_list(Expression) "]"
CallSuffix -> "(" comma_list(Expression) ")"
FieldRefSuffix -> "." Identifier
TupleRefSuffix -> "." IntLiteral
DereferenceSuffix -> "^"

AtomicExpr -> ArrayExpr
            | TupleExpr
            | Returned
            | NameRef
            | Literal

ArrayExpr -> "[" comma_list(Expression) "]"
TupleExpr -> "(" comma_list(Expression) ")"

Returned -> "returned"

NameRef -> DottedName

Literal -> BoolLiteral
         | IntLiteral
         | CharLiteral
         | StringLiteral

BoolLiteral -> "true" | "false"

Lambda -> "lambda" "(" comma_list(Identifier) ")" Block
