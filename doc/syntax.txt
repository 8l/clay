Module -> Import* TopLevelItem*

Import -> "import" DottedName ("as" Identifier)? ";"
        | "import" DottedName "." "*" ";"
        | "import" DottedName "." "(" comma_list(ImportedItem) ")" ";"

DottedName -> Identifier ("." Identifier)*

ImportedItem -> Identifier ("as" Identifier)?


TopLevelItem -> Record | Variant | Instance
              | Procedure | Overload
              | Enumeration | GlobalVariable
              | ExternalProcedure | ExternalVariable
              | GlobalAlias

Record -> "record" Identifier PatternVars? RecordBody

RecordBody -> NormalRecordBody
            | ComputedRecordBody

NormalRecordBody -> "(" comma_list(RecordField) ")" ";"
ComputedRecordBody -> "=" comma_list(Expression) ";"

PatternVars -> "[" comma_list(Identifier) "]"
RecordField -> Identifier TypeSpec
TypeSpec -> ":" Pattern

Variant -> "variant" Identifier PatternVars? ("=" DefaultInstances)? ";"

DefaultInstances -> Type ("|" Type)*

Instance -> PatternVarsWithCond? "instance" Pattern "=" Type ";"

Procedure -> PatternVarsWithCond? "callbyname"? "procedure"? Identifier Arguments
             ReturnSpec? VarReturnSpec? Body
           | "procedure" Identifier ";"

PatternVarsWithCond -> "[" comma_list(Identifier) Predicate? "]"
Predicate -> "|" Expression

Arguments -> "(" ArgumentList ")"

ArgumentList -> comma_list(Argument), ("," "..." Identifier)?
              | ("..." Identifier)?

Argument -> ValueArgument
          | StaticArgument

ValueArgument -> ("rvalue" | "lvalue" | "forward")? Identifier TypeSpec?
StaticArgument -> "static" Expression

ReturnSpec -> comma_list(ReturnSpecOne)
ReturnSpecOne -> (Identifier ":")? Type
VarReturnSpec -> "..." (Identifier ":")? Expr

Type -> Expression

Body -> "=" ReturnExpression ";"
      | Block

Overload -> PatternVarsWithCond? "callbyname"? "overload" Pattern Arguments
            ReturnSpec? VarReturnSpec? Body

Enumeration -> "enum" Identifier "{" comma_list(Identifier) "}"

GlobalVariable -> "var" Identifier PatternVars? "=" Expression ";"

ExternalProcedure -> "external" Identifier "(" ExternalArgs ")"
                     Type? (ExternalBody | ";")
ExternalArgs -> comma_list(ExternalArg) ("," "...")?
              | ("...")?
ExternalArg -> Identifier TypeSpec
ExternalBody -> "=" Expression ";"
              | Block

ExternalVariable -> "external" Identifier TypeSpec ";"

GlobalAlias -> "alias" Identifier PatternVars? "=" Expression ";"


//
// Statement
//

Block -> "{" Statement+ "}"

Statement -> Block
           | LabelDef
           | VarBinding
           | RefBinding
           | AliasBinding
           | Assignment
           | InitAssignment
           | UpdateAssignment
           | IfStatement
           | GotoStatement
           | SwitchStatement
           | ReturnStatement
           | ExpressionStatement
           | WhileStatement
           | BreakStatement
           | ContinueStatement
           | ForStatement
           | TryStatement
           | ThrowStatement
           | StaticForStatement

LabelDef -> Identifier ":"

VarBinding -> "var" comma_list(Identifier) "=" Expression ";"
RefBinding -> "ref" comma_list(Identifier) "=" Expression ";"
AliasBinding -> "alias" Identifier "=" Expression ";"

Assignment -> Expression "=" Expression ";"

InitAssignment -> Expression "<--" Expression ";"

UpdateAssignment -> Expression UpdateOp Expression ";"
UpdateOp -> "+=" | "-=" | "*=" | "/=" | "%="

IfStatement -> "if" "(" Expression ")" Statement
               ("else" Statement)?

GotoStatement -> "goto" Identifier ";"

SwitchStatement -> "switch" "(" Expression ")" "{" CaseBlock* DefaultBlock? "}"
CaseBlock -> CaseLabel+ CaseBody
CaseLabel -> "case" Expression ":"
DefaultBlock -> "default" ":" CaseBody
CaseBody -> Statement+

ReturnStatement -> "return" ReturnExpression? ";"
ReturnExpression -> comma_list("ref"? Expression)

ExpressionStatement -> Expression ";"

WhileStatement -> "while" "(" Expression ")" Statement
BreakStatement -> "break" ";"
ContinueStatement -> "continue" ";"

ForStatement -> "for" "(" Identifier "in" Expression ")" Statement

TryStatement -> "try" Block "catch" Block
ThrowStatement -> "throw" Expression? ";"

StaticForStatement -> "static" "for" "(" Identifier "in" Expression ")"
                      Statement


//
// Pattern
//

Pattern -> AtomicPattern PatternSuffix?
AtomicPattern -> IntLiteral
               | NameRef
PatternSuffix -> "[" comma_list(Pattern) "]"


//
// Expression
//

Expression -> OrExpr
            | IfExpr
            | Lambda
            | Unpack
            | New
            | StaticExpr

OrExpr -> AndExpr ("or" AndExpr)*
AndExpr -> NotExpr ("and" NotExpr)*
NotExpr -> "not"? CompareExpr

CompareExpr -> AddSubExpr (CompareOp AddSubExpr)?
CompareOp -> "==" | "!=" | "<" | "<=" | ">" | ">="

AddSubExpr -> MulDivExpr (("+" | "-") MulDivExpr)*
MulDivExpr -> PrefixExpr (("*" | "/" | "%") PrefixExpr)*

PrefixExpr -> SignExpr
            | AddressOfExpr
            | DispatchExpr
            | SuffixExpr

SignExpr -> ("+" | "-") SuffixExpr
AddressOfExpr -> "&" SuffixExpr
DispatchExpr -> "*" SuffixExpr
SuffixExpr -> AtomicExpr Suffix*
Suffix -> IndexSuffix
        | CallSuffix
        | FieldRefSuffix
        | TupleRefSuffix
        | DereferenceSuffix

IndexSuffix -> "[" comma_list(Expression) "]"
CallSuffix -> "(" comma_list(Expression)? ")"
FieldRefSuffix -> "." Identifier
TupleRefSuffix -> "." IntLiteral
DereferenceSuffix -> "^"

AtomicExpr -> ArrayExpr
            | TupleExpr
            | NameRef
            | Literal

ArrayExpr -> "[" comma_list(Expression) "]"
TupleExpr -> "(" comma_list(Expression)? ")"

NameRef -> DottedName

Literal -> BoolLiteral
         | IntLiteral
         | CharLiteral
         | StringLiteral
         | IdentifierLiteral

BoolLiteral -> "true" | "false"

IdentifierLiteral -> "#" Identifier

IfExpr -> "if" "(" Expression ")" Expression
          "else" Expression

Lambda -> LambdaArgs "ref"? "=>" (Expression | Block)
LambdaArgs -> Identifier
            | "(" comma_list(Identifier) ")"

Unpack -> "..." Expression

New -> "new" Expression

StaticExpr -> "static" Expression
