Module -> Import* Export* TopLevelItem*

Import -> "import" DottedName ";"
Export -> "export" DottedName ";"

DottedName -> Identifier ("." Identifier)*


TopLevelItem -> RecordDef | GlobalBinding | ProcedureDef
              | OverloadableDef | OverloadDef

RecordDef -> "record" Identifier TypeVars? "{" FieldDef+ "}"
FieldDef -> Identifier TypeSpec ";"

TypeVars -> "[" comma_list(Identifier) "]"
TypeSpec -> ":" TypeExpr

GlobalBinding -> "let" Variable "=" Expression ";"

Variable -> Identifier TypeSpec?

ProcedureDef -> "def" Identifier Procedure

Procedure -> TypeVars? "(" comma_list(Argument)? ")"
             "ref"? TypeSpec? TypeConditions? Block

Argument -> Variable
          | "static" Expression

TypeConditions -> "if" comma_list(TypeCondition)
TypeCondition -> Identifier "(" comma_list(TypeExpr) ")"

OverloadableDef -> "overloadable" Identifier ";"

OverloadDef -> "overload" DottedName Procedure

Block -> "{" Statement+ "}"

Statement -> Block
           | LabelDef
           | LocalBinding
           | Assignment
           | IfStatement
           | GotoStatement
           | ReturnStatement
           | ExpressionStatement
           | WhileStatement
           | BreakStatement
           | ContinueStatement
           | ForStatement

LabelDef -> Identifier ":"

LocalBinding -> "let" Variable "=" Expression ";"

Assignment -> Expression "=" Expression ";"

IfStatement -> "if" "(" Expression ")" Statement
               ("else" Statement)?

GotoStatement -> "goto" Identifier ";"

ReturnStatement -> "return" Expression? ";"

ExpressionStatement -> Expression ";"

WhileStatement -> "while" "(" Expression ")" Statement
BreakStatement -> "break" ";"
ContinueStatement -> "continue" ";"

ForStatement -> "for" "(" Identifier "in" Expression ")" Statement

TypeExpr -> Expression

Expression -> StaticExpr
            | OrExpr

StaticExpr -> "static" OrExpr

OrExpr -> AndExpr ("or" AndExpr)*
AndExpr -> NotExpr ("and" NotExpr)*
NotExpr -> "not"? CompareExpr

CompareExpr -> AddSubExpr (CompareOp AddSubExpr)?
CompareOp -> "==" | "!=" | "<" | "<=" | ">" | ">="

AddSubExpr -> MulDivExpr (("+" | "-") MulDivExpr)*
MulDivExpr -> PrefixExpr (("*" | "/" | "%") PrefixExpr)*

PrefixExpr -> SignExpr
            | AddressOfExpr
            | SuffixExpr

SignExpr -> ("+" | "-") SuffixExpr
AddressOfExpr -> "&" SuffixExpr
SuffixExpr -> AtomicExpr Suffix*
Suffix -> IndexSuffix
        | CallSuffix
        | FieldRefSuffix
        | TupleRefSuffix
        | DereferenceSuffix

IndexSuffix -> "[" comma_list(Expression) "]"
CallSuffix -> "(" comma_list(Expression) ")"
FieldRefSuffix -> "." Identifier
TupleRefSuffix -> "." IntLiteral
DereferenceSuffix -> "^"

AtomicExpr -> ArrayExpr
            | TupleExpr
            | NameRef
            | Literal

ArrayExpr -> "[" comma_list(Expression) "]"
TupleExpr -> "(" comma_list(Expression) ")"

NameRef -> DottedName

Literal -> BoolLiteral
         | IntLiteral
         | CharLiteral
         | StringLiteral

BoolLiteral -> "true" | "false"
