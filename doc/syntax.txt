Module -> Import* Export* TopLevelItem*

Import -> "import" DottedName ";"
Export -> "export" DottedName ";"

DottedName -> Identifier ("." Identifier)*


TopLevelItem -> Record | Procedure | Overloadable | Overload
              | ExternalProcedure

Record -> "record" Identifier PatternVars? "("
          comma_list(RecordArg)? ")" ";"

RecordArg -> ValueRecordArg
           | StaticRecordArg

ValueRecordArg -> Identifier TypeSpec
StaticRecordArg -> "static" Expression

PatternVars -> "[" comma_list(Identifier) "]"
TypeSpec -> ":" TypeExpr

Procedure -> Identifier Code

Code -> PatternVarsWithCond? "(" comma_list(Argument)? ")" Body

PatternVarsWithCond -> "[" comma_list(Identifier) Predicate? "]"
Predicate -> "|" Expression

Argument -> ValueArgument
          | StaticArgument

ValueArgument -> Identifier TypeSpec?
StaticArgument -> "static" Expression

Body -> "=" Expression ";"
      | "=" "ref" Expression ";"
      | Block

Overloadable -> "overloadable" Identifier ";"

Overload -> "overload" DottedName Code

ExternalProcedure -> "external" Identifier "(" comma_list(ExternalArg)? ")"
                     TypeSpec ";"
ExternalArg -> Identifier TypeSpec

Block -> "{" Statement+ "}"

Statement -> Block
           | LabelDef
           | VarBinding
           | RefBinding
           | StaticBinding
           | Assignment
           | IfStatement
           | GotoStatement
           | ReturnStatement
           | ExpressionStatement
           | WhileStatement
           | BreakStatement
           | ContinueStatement
           | ForStatement

LabelDef -> Identifier ":"

VarBinding -> "var" Identifier "=" Expression ";"
RefBinding -> "ref" Identifier "=" Expression ";"
StaticBinding -> "static" Identifier "=" Expression ";"

Assignment -> Expression "=" Expression ";"

IfStatement -> "if" "(" Expression ")" Statement
               ("else" Statement)?

GotoStatement -> "goto" Identifier ";"

ReturnStatement -> "return" Expression? ";"

ExpressionStatement -> Expression ";"

WhileStatement -> "while" "(" Expression ")" Statement
BreakStatement -> "break" ";"
ContinueStatement -> "continue" ";"

ForStatement -> "for" "(" Identifier "in" Expression ")" Statement

TypeExpr -> Expression

Expression -> StaticExpr
            | OrExpr

StaticExpr -> "static" OrExpr

OrExpr -> AndExpr ("or" AndExpr)*
AndExpr -> NotExpr ("and" NotExpr)*
NotExpr -> "not"? CompareExpr

CompareExpr -> AddSubExpr (CompareOp AddSubExpr)?
CompareOp -> "==" | "!=" | "<" | "<=" | ">" | ">="

AddSubExpr -> MulDivExpr (("+" | "-") MulDivExpr)*
MulDivExpr -> PrefixExpr (("*" | "/" | "%") PrefixExpr)*

PrefixExpr -> SignExpr
            | AddressOfExpr
            | SuffixExpr

SignExpr -> ("+" | "-") SuffixExpr
AddressOfExpr -> "&" SuffixExpr
SuffixExpr -> AtomicExpr Suffix*
Suffix -> IndexSuffix
        | CallSuffix
        | FieldRefSuffix
        | TupleRefSuffix
        | DereferenceSuffix

IndexSuffix -> "[" comma_list(Expression) "]"
CallSuffix -> "(" comma_list(Expression) ")"
FieldRefSuffix -> "." Identifier
TupleRefSuffix -> "." IntLiteral
DereferenceSuffix -> "^"

AtomicExpr -> ArrayExpr
            | TupleExpr
            | NameRef
            | Literal

ArrayExpr -> "[" comma_list(Expression) "]"
TupleExpr -> "(" comma_list(Expression) ")"

NameRef -> DottedName

Literal -> BoolLiteral
         | IntLiteral
         | CharLiteral
         | StringLiteral

BoolLiteral -> "true" | "false"
