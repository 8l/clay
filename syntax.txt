#
# binding pattern
#

BindingPattern -> TypeVarsWithConditions? "(" comma_list(Binder) ")" ;
TypeVarsWithConditions -> "[" comma_list(Name)
                              ("|" comma_list(TypeCondition))? "]" ;
TypeCondition -> Name "(" comma_list(TypeExpr) ")" ;
Binder -> Name ":" TypeExpr
        | TypeExpr ":" "Type"
        ;

TypeVars -> "[" comma_list(Name) "]" ;


#
# type expressions
#

TypeExpr -> ProcedureType ;
ProcedureType -> AtomicType ("->" AtomicType)? ;
AtomicType -> Name ("[" comma_list(TypeExpr) "]")?
            | "(" comma_list(TypeExpr) ")"
            ;


#
# top level items
#

Program -> TopLevelItem* ;

TopLevelItem -> TypeAliasDef | RecordDef | VariableDef
              | ProcedureDef | OverloadableDef | OverloadDef
              | PredicateDef | PredicateInstanceDef ;

TypeAliasDef -> "type" Name TypeVars? "=" TypeExpr ";" ;

RecordDef -> "record" Name TypeVars? "{" Field+ "}" ;
Field -> comma_list(Name) ":" TypeExpr ";" ;

VariableDef -> "var" BindingPattern "=" comma_list(Expression) ";" ;

ProcedureDef -> "def" Name BindingPattern ":" TypeExpr Block ;

OverloadableDef -> "overloadable" Name ";" ;
OverloadDef -> "overload" Name BindingPattern ":" TypeExpr Block ;

PredicateDef -> "predicate" Name ";" ;
PredicateInstanceDef -> "instance" Name TypeVarsWithConditions?
                        "(" comma_list(TypeExpr)? ")" ";" ;


#
# statements
#

Statement -> VariableDef
           | Assignment
           | BreakStatement
           | ContinueStatement
           | ReturnStatement
           | CompoundStatement
           | Block
           | Expression
           ;

Assignment -> comma_list(Expression) "=" comma_list(Expression) ";" ;
BreakStatement -> "break" ";" ;
ContinueStatement -> "continue" ";" ;
ReturnStatement -> "return" comma_list(Expression) ";" ;

CompoundStatement -> IfStatement
                   | WhileStatement
                   | ForStatement
                   | TypeCaseStatement
                   ;

IfStatement -> "if" "(" Expression ")" Statement ("else" Statement)? ;
WhileStatement -> "while" "(" Expression ")" Statement ;
ForStatement -> "for" "(" "var" comma_list(Name) "in" Expression ")"
                Statement ;

TypeCaseStatement -> "typecase" "(" comma_list(Expression) ")" "{"
                     CaseBlock* DefaultBlock? "}"
CaseBlock -> "case" BindingPattern Block ;
DefaultBlock -> "default" Block ;

Block -> "{" Statement+ "}" ;


#
# expressions
#

Expression -> Conditional | ArrowExpr | OrExpr ;
Conditional -> "if" "(" Expression ")" Expression "else" Expression ;
ArrowExpr -> OrExpr "->" OrExpr ;
OrExpr -> BitOrExpr ("or" BitOrExpr)* ;
BitOrExpr -> BitXorExpr ("bitor" BitXorExpr)* ;
BitXorExpr -> AndExpr ("bitxor" AndExpr)* ;
AndExpr -> BitAndExpr ("and" BitAndExpr)* ;
BitAndExpr -> NotExpr ("bitand" NotExpr)* ;
NotExpr -> "not" NotExpr
         | "bitnot" NoExpr
         | Comparison
         ;
Comparison -> BitShiftExpr (CompOp BitShiftExpr)? ;
CompOp -> "<" | ">" | "==" | "<=" | ">=" | "<>" | "!=" ;
BitShiftExpr -> AddSubExpr ((">>" | "<<") AddSubExpr)* ;
AddSubExpr ->  MulDivExpr (("+" | "-") MulDivExpr)* ;
MulDivExpr -> UnaryExpr (("*" | "/" | "%") UnaryExpr)* ;
UnaryExpr -> ("+" | "-" | "&")* SuffixExpr ;
SuffixExpr -> Atom Trailer* ;
Trailer -> "(" comma_list(Expression) ")"
         | "[" comma_list(Expression) "]"
         | "." Name
         | "." IntLiteral
         | "^"
         ;
Atom -> "(" comma_list(Expression) ")"
      | "[" comma_list(Expression) "]"
      | Variable
      | Literal
      ;
Variable -> Name ;
Literal -> BoolLiteral
         | IntLiteral
         | CharLiteral
         | StringLiteral
         ;
