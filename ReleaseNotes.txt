Clay 0.1.2
==========

This is a maintenance release. All Clay 0.1.x source code should be backward-
and forward-compatible. The following people contributed to this release:

T.R. Shyam Sundar (trssnd@gmail.com)
Philipp Br√ºschweilder (blei42@gmail.com)
Scott Olson (scott@scott-olson.org)
Jyun-Yan You (jyyou@cs.nctu.edu.tw)

Changes in 0.1.2
----------------
- Clay now uses LLVM and Clang 3.1.
- Bug fixes:
  - #231 floatBits() now works with Float80 values on FreeBSD x86-32.
  - #232 Single-precision variants of libc math functions are now supported on
    Win32.
  - #234 LLVM 3.1 fixes a codegen bug involving SIMD vector types.
  - #254 External functions now show up in compiler error message backtraces.
  - #280 nthValue() now correctly forwards the lvalue-ness of the selected
    value.
  - #282 The twohash module now compiles correctly.
  - Spurious errors from the close() system call no longer cause an assertion
    failure when destroying File objects on Unix systems.

Platform support
----------------
Linux, MacOS X, Win32, Win64, FreeBSD hosts and targets should work out of the
box, with some expected test failures for Win64 and FreeBSD.
Windows with the MSVC toolchain is known to work, but Mingw, and Cygwin targets
are untested.

Known issues
------------
#17 - emacs clay-mode does not properly indent braces.
#36 - A single static value can still match a tuple pattern.
#60 - Assertions and unhandled exception errors do not support backtrace display
    on Windows.
#117 - The compiler does not prevent unsupported types, such as Int128 on 32-bit
    platforms or Float80 on non-x86 platforms, from being instantiated, leaving
    LLVM to fail hard when these types are used.
#123 - Parse time is excessively slow on Windows XP due to bad memory allocation
    behavior.
#144 - LLVM does not 16-byte-align the stack for FreeBSD targets, causing
    external functions that pass vector arguments by value to crash.
#153, #178 - The `math` module is still a work in progress and largely
    untested.
#156 - The compile-time evaluator is not endian-agnostic when cross building.
#164 - Lack of runtime support on Win32 causes overflow-checking multiplication
    and Int128 operations to fail on Windows targets.

