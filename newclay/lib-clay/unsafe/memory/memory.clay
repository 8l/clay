import libc.(malloc, free, realloc);
import unsafe.coordinates.(ContiguousCoordinate);

requiredMalloc(count) = required(malloc(count));

requiredRealloc(ptr, count) = required(realloc(ptr, count));

// XXX alignment

allocateUninitializedValues(#'T, count:'I) | Type?('T) and IntegerType?('I)
    = ContiguousCoordinate['T](requiredMalloc(typeSize('T) * UInt(count)));

allocateUninitializedValue(#'T) | Type?('T)
    = Pointer['T](requiredMalloc(typeSize('T)));

reallocateUninitializedValues(values:ContiguousCoordinate['T], count:'I) | Type?('T)
    = ContiguousCoordinate['T](
        requiredRealloc(OpaquePointer(values), typeSize('T) * UInt(count))
    );

freeUninitializedValues(values:ContiguousCoordinate['T]) { free(OpaquePointer(values)); }
freeUninitializedValue(value:Pointer['T]) { free(OpaquePointer(value)); }

