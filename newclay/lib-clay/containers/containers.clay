import values.(countValues, allValues?);

#Container?('T) = false;

symbol push;
symbol pop;
symbol pushFront;
symbol popFront;

symbol reserve;
symbol resize;
symbol resizeUnsafe;

symbol insert;
symbol remove;
symbol clear;

#Pushable?('T) =
    Sequence?('T)
    and callDefined?(push, Ref['T], sequenceElementType('T));
#FrontPushable?('T) =
    Sequence?('T)
    and callDefined?(pushFront, Ref['T], sequenceElementType('T));

#Reservable?('T) =
    Sequence?('T)
    and callDefined?(reserve, Ref['T], UInt);
#Resizable?('T) =
    Sequence?('T)
    and callDefined?(resize, Ref['T], UInt);
#Insertable?('T) =
    Sequence?('T)
    and callDefined?(insert, Ref['T], UInt, sequenceElementType('T));
#Removable?('T) =
    Sequence?('T)
    and callDefined?(remove, Ref['T], UInt);


//
// default extensions
//

overload push(ref c:'C, forward ..elements:'TT) inline
    | Pushable?('C)
      and countValues(..'TT) != 1
      and allValues?([#'U -> callDefined?(push, Ref['C], 'U)], ..'TT)
{
    static for (forward e in ..elements)
        push(c, e);
}

