// XXX to avoid dealing with crazy macro magic that tends to be in stdio,
// we just #include <stdio.h> and use __c__ functions to bind the functions
// instead of external declarations

import ctypes.*;

symbol FILE = NewType(OpaquePointer);

__c__ """#include <stdio.h>""";

stdin() inline --> returned:FILE
    __c__ """$returned = stdin;""";
stdout() inline --> returned:FILE
    __c__ """$returned = stdout;""";
stderr() inline --> returned:FILE
    __c__ """$returned = stderr;""";

putc(c:CInt, stream:FILE) inline --> returned:CInt
    __c__ """$returned = putc($c, $stream);""";
getc(stream:FILE) inline --> returned:CInt
    __c__ """$returned = getc($stream);""";

fopen(name:CString, mode:CString) inline --> returned:Maybe[FILE]
    __c__ """$returned = fopen($name, $mode);""";
fclose(stream:FILE) inline --> returned:CInt
    __c__ """$returned = fclose($stream);""";
fread(ptr:OpaquePointer, size:CSizeT, nitems:CSizeT, stream:FILE) inline --> returned:CSizeT
    __c__ """$returned = fread($ptr, $size, $nitems, $stream);""";
fwrite(ptr:OpaquePointer, size:CSizeT, nitems:CSizeT, stream:FILE) inline --> returned:CSizeT
    __c__ """$returned = fwrite($ptr, $size, $nitems, $stream);""";
fseek(stream:FILE, offset:CLong, whence:CInt) inline --> returned:CInt
    __c__ """$returned = fseek($stream, $offset, $whence);""";
ftell(stream:FILE) inline --> returned:CLong
    __c__ """$returned = ftell($stream);""";
feof(stream:FILE) inline --> returned:CInt
    __c__ """$returned = feof($stream);""";
ferror(stream:FILE) inline --> returned:CInt
    __c__ """$returned = ferror($stream);""";
fflush(stream:FILE) inline --> returned:CInt
    __c__ """$returned = fflush($stream);""";

const SEEK_SET = CInt(0);
const SEEK_CUR = CInt(1);
const SEEK_END = CInt(2);

