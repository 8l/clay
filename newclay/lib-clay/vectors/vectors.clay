import memory.*;
import values.*;

symbol Vector['T] = CompositeType(
    size:UInt,
    capacity:UInt,
    data:ContiguousCoordinate['T],
);


//
// constructors
//

overload Vector['T]() = initializeRecord(Vector['T],
    0u,
    0u,
    // XXX MaybeCC (or allow null CCs)
    bitcast(ContiguousCoordinate['T], 0u),
);

overload #InitializeDoesNotThrowType?(Vector['T]) = true;
overload #BitwiseZeroInitializedType?(Vector['T]) = true;

inline overload Vector['T](forward s:'S) returned:Vector['T]
    | SequenceType?('S) and SequenceElementType('S) == 'T
{
    returned <-- Vector['T]();
    // XXX lambdas
    try {
        push(returned, s);
    } catch (ex) {
        destroyUnsafe(returned);
        throw ex;
    }
}

inline overload Vector(forward s:'S)
    | SequenceType?('S)
    = Vector[SequenceElementType('S)](s);

inline overload Vector['T](forward ..elements:'TT) returned:Vector['T]
    | not emptyValues?(..'TT) and equalValues?('T, ..'TT)
{
    returned <-- Vector['T]();
    try {
        push(returned, ..elements);
    } catch (ex) {
        destroyUnsafe(returned);
        throw ex;
    }
}


//
// value semantics
//

overload #BitwiseMovedType?(Vector['T]) = true;

inline overload copyAssign(ref to:Vector['T], from:Vector['U])
    | AssignableTypes?('T, 'U)
{
    resizeUnsafe(to, size(from));
    assignRange(begin(to), begin(from), end(from));
}

inline overload destroyUnsafe(ref a:Vector['T]) {
    destroyRangeUnsafe(begin(a), end(a));
    freeRawValues(a.data);
}

inline overload copy(a:Vector['T]) = Vector['T](a);


//
// sequence operations
//

inline overload size(v:Vector['T]) = v.size;
inline overload index(/*not rvalue*/ forward v:Vector['T], i:'I)
    | IntegerType?('I)
    = forward v.data[i];

inline overload index(rvalue v:Vector['T], i:'I) {
    var w = v;
    return w.data[i];
}

inline overload begin(v:Vector['T]) = v.data;
inline overload end(v:Vector['T]) = v.data + v.size;


//
// vector mutation operations
//

inline push(ref v:Vector['T], forward ..elements:'TT)
    | countValues(..'TT) != 1
      and allValues?(U -> CallDefined?(push, Ref[Vector['T]], U), ..'TT)
{
    reserve(v, countValues(..'TT));
    static for (/*forward*/ e in ..elements)
        push(v, e);
}

inline overload push(ref v:Vector['T], forward seq:'S)
    | SequenceType?('S) and SequenceElementType('S) == 'T
{
    insert(v, size(v), seq);
}

inline overload push(ref v:Vector['T], forward elt:'T) {
    insert(v, size(v), elt);
}

inline pop(ref v:Vector['T]) returned:'T {
    returned <-- moveUnsafe(back(v));
    removeLocations(v, end(v) - 1, end(v));
}

inline reserve(ref v:Vector['T], n:'I) | IntegerType?('I) {
    if (v.capacity < UInt(n))
        requestCapacity(v, UInt(n));
}

inline resize(ref v:Vector['T], n:'I) | IntegerType?('I) {
    resizeInternal(v, UInt(n), initializeRange);
}

inline resizeUnsafe(ref v:Vector['T], n:'I) | IntegerType?('I) {
    resizeInternal(v, UInt(n), resetRangeUnsafe);
}

// insert

insert(ref v:Vector['T], i:'I, seq:'S)
    | IntegerType?('I) and SequenceType?('S) and SequenceElementType('S) == 'T
{
    var pos = UInt(i);
    var iter = iterator(seq);
    while (hasNext?(iter)) {
        insert(v, pos, next(iter));
        pos += 1u;
    }
}

overload insert(ref v:Vector['T], i:'I, seq:'S)
    | IntegerType?('I) and SizedSequenceType?('S) and SequenceElementType('S) == 'T
{
    var first, last = ..insertLocations(v, UInt(i), size(seq));
    try {
        var iter = iterator(seq);
        while (hasNext?(iter)) {
            first^ <-- next(iter);
            inc(first);
        }
    } catch (ex) {
        resetRangeUnsafe(first, last);
        throw ex;
    }
}

// XXX insert(rvalue sequence) optimizations

overload insert(ref v:Vector['T], i:'I, x:'T) | IntegerType?('I) {
    var first, last = ..insertLocations(v, UInt(i), 1u);
    try {
        first^ <-- x;
    } catch (ex) {
        resetUnsafe(first^);
        throw ex;
    }
}

overload insert(ref v:Vector['T], i:'I, rvalue x:'T) | IntegerType?('I) {
    var first, last = ..insertLocations(v, UInt(i), 1u);
    first^ <-- x;
}

overload insert(ref v:Vector['T], i:ContiguousCoordinate['T], forward seq:'S)
    | SequenceType?('S) and SequenceElementType('S) == 'T
{
    insert(v, i - begin(v), seq);
}

overload insert(ref v:Vector['T], i:ContiguousCoordinate['T], x:'T) {
    insert(v, i - begin(v), x);
}

// remove

inline clear(ref v:Vector['T]) {
    remove(v, begin(v), end(v));
}

inline remove(ref v:Vector['T], i:ContiguousCoordinate['T], j:ContiguousCoordinate['T]) {
    destroyRangeUnsafe(i, j);
    removeLocations(v, i, j);
}

inline overload remove(ref v:Vector['T], i:ContiguousCoordinate['T]) {
    remove(v, i, i+1);
}

inline overload remove(ref v:Vector['T], i:'I) | IntegerType?('I) {
    remove(v, begin(v) + i);
}

inline overload remove(ref v:Vector['T], i:'I, j:'J)
    | IntegerType?('I) and IntegerType?('J)
{
    remove(v, begin(v) + i, begin(v) + j);
}


//
// internal operations
//

private requestCapacity(ref v:Vector['T], capacity:UInt) {
    assert(capacity >= v.size);
    if (capacity < v.capacity)
        return;
    var n = max(capacity, 16u);
    n = max(n, 2u*v.capacity);
    reallocVector(v, n);
}

private reallocVector(ref v:Vector['T], capacity:UInt) {
    var data = allocateRawValues('T, capacity);
    moveNonoverlappingRangeUnsafe(data, v.data, v.data + v.size);
    freeRawValues(v.data);
    v.data = data;
    v.capacity = capacity;
}
overload reallocVector(ref v:Vector['T], capacity:UInt) | BitwiseMovedType?('T) {
    v.data = reallocateRawValues(v.data, capacity);
    v.capacity = capacity;
}

private resizeInternal(ref v:Vector['T], n:UInt, initializer) {
    if (v.size < n) {
        reserve(v, n);
        initializer(end(v), begin(v) + n);
    } else if (v.size > n) {
        destroyRangeUnsafe(begin(v) + n, end(v));
    }
    v.size = n;
}

private inline ensureSpace(ref v, space) { reserve(v, v.size + space); }

private insertLocations(ref v:Vector['T], pos:UInt, n:UInt) {
    ensureSpace(v, n);
    var first = begin(v) + pos;
    moveRangeUnsafe(first + n, first, end(v));
    v.size += n;
    return first, first+n;
}

private removeLocations(
    ref v:Vector['T],
    from:ContiguousCoordinate['T],
    to:ContiguousCoordinate['T]
) {
    var n = end(v) - to;
    moveRangeUnsafe(from, to, end(v));
    v.size -= UInt(to - from);
}

