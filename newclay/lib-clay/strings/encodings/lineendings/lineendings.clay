symbol WindowsLineEndingDecoder['I] = NewType('I);

overload WindowsLineEndingDecoder(forward s:'S) inline
    | Sequence?('S) and sequenceElementType('S) == Char
    = WindowsLineEndingDecoder[sequenceIteratorType('S)](iterator(s));

overload read(ref s:WindowsLineEndingDecoder['I]) {
    ref iter = *s;
    if (hasFront?(iter)) {
        if (front(iter) == '\r') {
            incFront(iter);
            if (hasFront?(iter) and front(iter) == '\n') {
                incFront(iter);
                return just('\n');
            } else
                return just('\r');
        } else {
            var c = front(iter);
            incFront(iter);
            return just(c);
        }
    } else
        return nothing(Char);
}

symbol WindowsLineEndingEncoder['I] = NewType('I);

overload WindowsLineEndingEncoder(forward s:'S) inline
    | Sink?('S, Char)
    = WindowsLineEndingEncoder['S](s);

overload hasFront?(s:WindowsLineEndingEncoder['S]) = hasFront?(*s);
overload write(ref s:WindowsLineEndingEncoder['S], c:Char) {
    ref sink = *s;

    if (c == '\n') {
        write(sink, '\r');
        write(sink, '\n');
    } else
        write(sink, c);
}
