import __primitives__.(StaticString?);
import prelude.types.(Bool);

// TODO
// A lot of this is more tightly coupled with the C codegen implementation than it ought to be.

// Array types are codegenned as a struct to avoid array decay. The array is in
// a field named "array"
inline cIndex(#'T, const array, index) const returned:'T
    __c__ """$returned = &$array.array[$index];""";
inline overload cIndex(#'T, rvalue array, index) rvalue returned:'T
    __c__ """$returned = &$array.array[$index];""";
inline overload cIndex(#'T, ref array, index) ref returned:'T
    __c__ """$returned = &$array.array[$index];""";

inline cFieldRef(#'T, const aggregate, #'field) const returned:'T
    | StaticString?('field)
    __c__ """$returned = &$aggregate.$'field;""";
inline overload cFieldRef(#'T, rvalue aggregate, #'field) rvalue returned:'T
    | StaticString?('field)
    __c__ """$returned = &$aggregate.$'field;""";
inline overload cFieldRef(#'T, ref aggregate, #'field) ref returned:'T
    | StaticString?('field)
    __c__ """$returned = &$aggregate.$'field;""";

inline cDereference(#'T, const ptr) const returned:'T
    __c__ """$returned = $ptr;""";
inline overload cDereference(#'T, rvalue ptr) rvalue returned:'T
    __c__ """$returned = $ptr;""";
inline overload cDereference(#'T, ref ptr) ref returned:'T
    __c__ """$returned = $ptr;""";


inline cMinus(#'T, a) returned:'T
    __c__ """$returned = -$a;""";

inline cBitnot(#'T, a) returned:'T
    __c__ """$returned = ~$a;""";

inline cMultiply(#'T, a, b) returned:'T
    __c__ """$returned = $a * $b;""";

inline cDivide(#'T, a, b) returned:'T
    __c__ """$returned = $a / $b;""";

inline cRemainder(#'T, a, b) returned:'T
    __c__ """$returned = $a % $b;""";

inline cAdd(#'T, a, b) returned:'T
    __c__ """$returned = $a + $b;""";

inline cSubtract(#'T, a, b) returned:'T
    __c__ """$returned = $a - $b;""";

inline cBitand(#'T, a, b) returned:'T
    __c__ """$returned = $a & $b;""";

inline cBitor(#'T, a, b) returned:'T
    __c__ """$returned = $a | $b;""";

inline cBitxor(#'T, a, b) returned:'T
    __c__ """$returned = $a ^ $b;""";


inline cLesser?(a, b) returned:Bool
    __c__ """$returned = $a < $b;""";

inline cLesserEquals?(a, b) returned:Bool
    __c__ """$returned = $a <= $b;""";

inline cGreater?(a, b) returned:Bool
    __c__ """$returned = $a > $b;""";

inline cGreaterEquals?(a, b) returned:Bool
    __c__ """$returned = $a >= $b;""";

inline cEquals?(a, b) returned:Bool
    __c__ """$returned = $a == $b;""";

inline cNotEquals?(a, b) returned:Bool
    __c__ """$returned = $a != $b;""";

inline cAssign(ref a, forward b)
    __c__ """$a = $b;""";

inline cExternalCall(callable:ExternalCodePointer['A,'V,'I,'O], ...args) returned:'O
    | Type?('O)
    __c__ """$returned = $callable($...args);""";
inline overload cExternalCall(callable:ExternalCodePointer['A,'V,'I,'O], ...args)
    | 'O == ()
    __c__ """$callable($...args);""";
