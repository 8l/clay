import __primitives__.(StaticString?);
import prelude.types.(Bool);

// TODO
// A lot of this is more tightly coupled with the C codegen implementation than it ought to be.
// Also, all of these functions should be inlined once the compiler supports inlining.

// Array types are codegenned as a struct to avoid array decay. The array is in
// a field named "array"
primitiveIndex(#'T, const array, index) const returned:'T
    __c__ """$returned = &$array.array[$index];""";
overload primitiveIndex(#'T, rvalue array, index) rvalue returned:'T
    __c__ """$returned = &$array.array[$index];""";
overload primitiveIndex(#'T, ref array, index) ref returned:'T
    __c__ """$returned = &$array.array[$index];""";

primitiveFieldRef(#'T, const aggregate, #'field) const returned:'T
    | StaticString?('field)
    __c__ """$returned = &$aggregate.$'field;""";
overload primitiveFieldRef(#'T, rvalue aggregate, #'field) rvalue returned:'T
    | StaticString?('field)
    __c__ """$returned = &$aggregate.$'field;""";
overload primitiveFieldRef(#'T, ref aggregate, #'field) ref returned:'T
    | StaticString?('field)
    __c__ """$returned = &$aggregate.$'field;""";

primitiveDereference(#'T, const ptr) const returned:'T
    __c__ """$returned = $ptr;""";
overload primitiveDereference(#'T, rvalue ptr) rvalue returned:'T
    __c__ """$returned = $ptr;""";
overload primitiveDereference(#'T, ref ptr) ref returned:'T
    __c__ """$returned = $ptr;""";


primitiveMinus(#'T, a) returned:'T
    __c__ """$returned = -$a;""";

primitiveBitnot(#'T, a) returned:'T
    __c__ """$returned = ~$a;""";

primitiveMultiply(#'T, a, b) returned:'T
    __c__ """$returned = $a * $b;""";

primitiveDivide(#'T, a, b) returned:'T
    __c__ """$returned = $a / $b;""";

primitiveRemainder(#'T, a, b) returned:'T
    __c__ """$returned = $a % $b;""";

primitiveAdd(#'T, a, b) returned:'T
    __c__ """$returned = $a + $b;""";

primitiveSubtract(#'T, a, b) returned:'T
    __c__ """$returned = $a - $b;""";

primitiveBitand(#'T, a, b) returned:'T
    __c__ """$returned = $a & $b;""";

primitiveBitor(#'T, a, b) returned:'T
    __c__ """$returned = $a | $b;""";

primitiveBitxor(#'T, a, b) returned:'T
    __c__ """$returned = $a ^ $b;""";


primitiveLesser?(a, b) returned:Bool
    __c__ """$returned = $a < $b;""";

primitiveLesserEquals?(a, b) returned:Bool
    __c__ """$returned = $a <= $b;""";

primitiveGreater?(a, b) returned:Bool
    __c__ """$returned = $a > $b;""";

primitiveGreaterEquals?(a, b) returned:Bool
    __c__ """$returned = $a >= $b;""";

primitiveEquals?(a, b) returned:Bool
    __c__ """$returned = $a == $b;""";

primitiveNotEquals?(a, b) returned:Bool
    __c__ """$returned = $a != $b;""";

primitiveAssign(ref a, forward b)
    __c__ """$a = $b;""";

primitiveExternalCall(callable:ExternalCodePointer['A,'V,'I,'O], ...args) returned:'O
    | Type?('O)
    __c__ """$returned = $callable($...args);""";
overload primitiveExternalCall(callable:ExternalCodePointer['A,'V,'I,'O], ...args)
    | 'O == ()
    __c__ """$callable($...args);""";
