import __primitives__.(CallDefinedForSymbol?, makeCodePointer, callCodePointer);
import meta.symbols.(SymbolWithTag?, Symbol?, private SymbolBodyWithTag?);
import values.(mapValues);

public import __primitives__.(StaticCallDefined?);

symbol CallDefined?;
overload #CallDefined?('fn, ..'T) = CallDefinedForSymbol?('fn, ..'T);
overload CallDefined?(/*alias*/ fn:'F, ..#'T) = *#CallDefinedForSymbol?(call, 'F, ..'T);
overload CallDefined?(#'fn, ..#'T) = *#CallDefinedForSymbol?('fn, ..'T);

#CallDefinedForType?('F, ..'T) = CallDefinedForSymbol?(call, 'F, ..'T);


//
// procedure tags
//

// VariadicBinaryOperatorProcedure -- define variadic version of procedure
// as left fold of the binary procedure
#VariadicBinaryOperatorProcedure() = (VariadicBinaryOperatorProcedure,);

inline overload 'fn(forward x:'X, forward y:'Y, forward z:'Z, forward ..w:'W)
    | VariadicBinaryOperatorProcedure?('fn)
      and CallDefined?('fn, 'X, 'Y)
      and CallDefined?('fn, Type(['fn(x, y)]), 'Z, ..'W)
    = forward 'fn('fn(x, y), z, ..w);

inline overload 'fn(forward x)
    | VariadicBinaryOperatorProcedure?('fn)
    = forward x;

overload #'fn('x, 'y, 'z, ..'w)
    | VariadicBinaryOperatorProcedure?('fn)
      and StaticCallDefined?('fn, 'x, 'y)
    = 'fn('fn('x, 'y), 'z, ..'w);

overload #'fn('x)
    | VariadicBinaryOperatorProcedure?('fn)
    = 'x;

#VariadicBinaryOperatorProcedure?('fn)
    = SymbolWithTag?('fn, VariadicBinaryOperatorProcedure);


// RuntimeStaticProcedure -- make a static function callable as a runtime procedure

#RuntimeStaticProcedure() = (RuntimeStaticProcedure,);
#RuntimeStaticProcedure?('fn) = SymbolWithTag?('fn, RuntimeStaticProcedure);
inline overload 'fn(..#'xs)
    | RuntimeStaticProcedure?('fn)
      and StaticCallDefined?('fn, ..'xs)
    = ..unpack(..#'fn(..'xs));


//
// code pointers
//

inline overload CodePointer[(..'I), (..'O)](#'f)
    | DefinedWithType?([forward ..'f(..arg(..'I))], ..'O)
    = makeCodePointer(#'f, ..'I);

inline overload call(c:CodePointer[(..'I), (..'O)], forward ..args)
    | Defined?([callCodePointer(c, ..args);])
    = forward ..callCodePointer(c, ..args);

