import values.*;
import libc.*;
import meta.symbols.*;
import meta.statics.*;
import meta.lltypes.*;
import unsafe.casts.(bitcast);
import unsafe.valuesemantics.*;


//
// Union[..T]
//

symbol Union[..'T];
overload #POD?(Union[..'T]) = true;
overload #llType(Union[..'T])
    | allValues?(type?, ..'T)
    = llUnionType[..'T];


//
// indexing
//

overload index(forward t:Union[..'T], #'n) inline
    | validStaticIndex?('n, ..'T)
    = forward bitcast(#nthValue('n, ..'T), t);

overload index(forward t:Union[..'T], #'U) inline
    | inValues?('U, ..'T)
    = forward bitcast('U, t);


//
// default initialization
//

overload #BitwiseZeroInitialized?(Union[..'T]) | type?(Union[..'T]) = true;

overload Union[..'T]() inline --> returned:Union[..'T] {
    memset(OpaquePointer(&returned), 0_i32, typeSize(Union[..'T]));
}


//
// initialization from member type
//

overload Union[..'T](forward x:'U) inline --> returned:Union[..'T]
    | inValues?('U, ..'T)
{
    returned['U] <-- x;
}


//
// equality
//

overload equals?(a:Union[..'T], b:Union[..'T]) inline
    = memcmp(OpaquePointer(&a), OpaquePointer(&b), typeSize(Union[..'T])) == 0;


//
// named union type
//

#NamedUnionType(..'fields) | validFields?(..'fields) = (NamedUnionType, ..'fields);
#NamedUnionType?('T) = symbolWithTag?('T, NamedUnionType);

overload #fields('T) | NamedUnionType?('T) = ..symbolTagBody('T, NamedUnionType);

overload #llType('T) | NamedUnionType?('T) = llUnionType[..fields('T)];
overload #POD?('T) | NamedUnionType?('T) = true;

overload index(forward x:'T, #'field) inline
    | NamedUnionType?('T) and field?('T, 'field)
    = forward bitcast(#fieldType('T, 'field), x);

overload #BitwiseZeroInitialized?('T) | NamedUnionType?('T) = true;

overload 'T() inline --> returned:'T
    | NamedUnionType?('T)
{
    memset(OpaquePointer(&returned), 0_i32, typeSize('T));
}

overload 'T(forward x:'U) inline --> returned:'T
    | NamedUnionType?('T) and inValues?('U, ..fieldTypes('T))
{
    bitcast('U, returned) <-- x;
}

overload equals?(a:'T, b:'T) inline
    | NamedUnionType?('T)
    = memcmp(OpaquePointer(&a), OpaquePointer(&b), typeSize('T)) == 0;

