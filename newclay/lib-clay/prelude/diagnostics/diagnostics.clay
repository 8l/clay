public import __primitives__.(
    StaticObserve,
    StaticError,
    StaticAssert,
);
import libc.(abort, puts, printf);
import ctypes.(CUInt, CString);
import meta.lambdas.(LambdaString, LambdaLocation);

private assertLocation(file, line, column) = CString(file), CUInt(line), CUInt(column);

#AssertionsEnabled?() = true; // XXX use -DNDEBUG or something like that

symbol assert;
overload assert(f, ..msg) inline | not AssertionsEnabled?() {}
overload assert(f, ..msg) inline
    | DefinedWithType?([f()], Bool) and AssertionsEnabled?()
{
    if (not f()) {
        // XXX show message
        printf(CString("assertion %s failed at %s(%u,%u)\n"),
            CString(LambdaString(f)),
            ..assertLocation(..LambdaLocation(f))
        );
        abort();
        __unreachable__; // XXX not needed when external noreturns are implemented
    }
}

symbol assertUnreachable;
overload assertUnreachable(f, ..msg) noreturn inline | not AssertionsEnabled?() {
    __unreachable__;
}
overload assertUnreachable(f, ..msg) inline | AssertionsEnabled?() {
    // XXX show message
    printf(CString("unreachable code reached at %s(%u,%u)\n"),
        ..assertLocation(..LambdaLocation(f))
    );
    abort();
    __unreachable__; // XXX not needed when external noreturns are implemented
}

