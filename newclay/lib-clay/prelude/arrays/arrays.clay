import prelude.operators.c.*;
import prelude.sequences.*;
import meta.lltypes.*;
import values.*;
import libc.*;


//
// size
//

overload size(x:Array['T, 'n]) inline = UInt('n);


//
// begin, end
//

overload begin(x:Array['T, 'n]) inline = ContiguousCoordinate['T](&x);
overload end(x:Array['T, 'n]) inline = ContiguousCoordinate['T](&x) + 'n;


//
// indexing
//

overload index(forward a:Array['T, 'n], i:'I) inline | IntegerType?('I)
    = forward cIndex('T, a, i);
overload index(rvalue a:Array['T, 'n], i:'I) inline --> returned:'T
    | IntegerType?('I) and not DestroyDoesNothingType?('T)
{
    ref ra = rvalueToRefUnsafe(a);
    returned <-- refToRvalueUnsafe(cIndex('T, ra, i));
    var n = 0u;
    for (ref elt in ra) {
        if (n != i)
            destroyUnsafe(elt);
        inc(n);
    }
}



//
// default initialization
//

overload #BitwiseZeroInitializedType?(Array['T, 'n])
    = BitwiseZeroInitializedType?('T);

overload Array['T, 'n]() inline --> returned:Array['T, 'n]
    | DefaultInitializableType?('T)
{
    for (ref r in returned)
        r <-- 'T();
}

overload Array['T, 'n]() inline --> returned:Array['T, 'n]
    | BitwiseZeroInitializedType?('T)
{
    memset(OpaquePointer(&returned), 0_i32, TypeSize(Array['T, 'n]));
}


//
// memberwise initialization
//

overload Array['T, 'n](forward ..xs:'TT) inline --> returned:Array['T, 'n]
    | countValues(..'TT) == 'n
      and allValues?([t -> t == 'T], ..'TT)
{
    var i = begin(returned);
    static for (forward x in ..xs) {
        i^ <-- x;
        inc(i);
    }
}


//
// unsafe iterator for consuming rvalue sequences
//
private symbol RvalueCoordinateRangeUnsafe['C] = RecordType(begin:'C, end:'C);

overload hasNext?(i:RvalueCoordinateRangeUnsafe['C]) inline = i.begin < i.end;
overload next(ref i:RvalueCoordinateRangeUnsafe['C]) inline {
    var p = i.begin;
    inc(i.begin);
    return rvalue refToRvalueUnsafe(p^);
}

private rvalueIteratorUnsafe(rvalue x:Array['T, 'n]) {
    ref rx = rvalueToRefUnsafe(x);
    return RvalueCoordinateRangeUnsafe(begin(rx), end(rx));
}

private symbol forwardIteratorUnsafe;
overload forwardIteratorUnsafe(x:Array['T, 'n]) inline = iterator(x);
overload forwardIteratorUnsafe(rvalue x:Array['T, 'n]) inline = rvalueIteratorUnsafe(x);


//
// iterator
//

overload iterator(x:Array['T, 'n]) = CoordinateRange(begin(x), end(x));


//
// value semantics
//

overload destroyUnsafe(ref x:Array['T, 'n]) inline
    | not DestroyDoesNothingType?('T)
{
    for (ref y in x)
        destroyUnsafe(y);
}

overload resetUnsafe(ref x:Array['T, 'n]) inline
    | not ResetDoesNothingType?('T)
{
    for (ref y in x)
        resetUnsafe(y);
}

overload moveUnsafe(forward x:Array['T, 'n]) inline --> returned:Array['T, 'n]
    | not BitwiseMovedType?('T) and MovableType?('T)
{
    var ri = iterator(returned), xi = forwardIteratorUnsafe(x);
    while (hasNext?(ri)) {
        next(ri) <-- moveUnsafe(next(xi));
    }
}

overload copy(x:Array['T, 'n]) inline --> returned:Array['T, 'n]
    | not BitwiseCopiedType?('T) and CopyableType?('T)
{
    var ri = iterator(returned), xi = iterator(x);
    while (hasNext?(ri)) {
        next(ri) <-- next(xi);
    }
}

overload copyAssign(ref to:Array['T, 'n], from:Array['U, 'n]) inline
    | not ('T == 'U and BitwiseAssignedType?('T))
      and CallDefined?(assign, Ref['T], 'U)
{
    var ti = iterator(to), fi = iterator(from);
    while (hasNext?(ti)) {
        next(ti) = next(fi);
    }
}


//
// comparison
//

equalSequence?(x, y) inline {
    var xi = iterator(x), yi = iterator(y);
    var xnext? = hasNext?(xi), ynext? = hasNext?(yi);
    while (xnext? and ynext?) {
        if (next(xi) != next(yi))
            return false;
        xnext? = hasNext?(xi);
        ynext? = hasNext?(yi);
    }
    return xnext? == ynext?;
}

lesserSequence?(x, y) inline {
    var xi = iterator(x), yi = iterator(y);
    var xnext? = hasNext?(xi), ynext? = hasNext?(yi);
    while (xnext? and ynext?) {
        const xe = next(xi), ye = next(yi);
        if (xe < ye)
            return true;
        if (ye < xe)
            return false;
        xnext? = hasNext?(xi);
        ynext? = hasNext?(yi);
    }
    return xnext? < ynext?;
}

overload equals?(x:Array['T, 'n], y:Array['U, 'n]) inline
    | CallDefined?(equals?, 'T, 'U)
{
    var xi = iterator(x), yi = iterator(y);
    while (hasNext?(xi))
        if (next(xi) != next(yi))
            return false;
    return true;
}

overload lesser?(x:Array['T, 'n], y:Array['U, 'n]) inline
    | CallDefined?(lesser?, 'T, 'U)
{
    var xi = iterator(x), yi = iterator(y);
    while (hasNext?(xi)) {
        const xe = next(xi), ye = next(yi);
        if (xe < ye)
            return true;
        if (ye < xe)
            return false;
    }
    return false;
}


//
// StringConstant as sequence
//

overload begin(s:StringConstant) = s.begin;
overload end(s:StringConstant) = s.end;
