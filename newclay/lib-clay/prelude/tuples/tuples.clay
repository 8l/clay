import values.*;
import libc.*;
import meta.statics.*;
import prelude.operators.c.*;
import meta.lltypes.*;


//
// indexing
//

overload index(forward t:Tuple[..'T], #'n) inline
    | ValidStaticIndex?('n, ..'T)
    = forward cFieldRef(#nthValue('n, ..'T), t, #LLTupleFieldName('n));

overload index(rvalue t:Tuple[..'T], #'n) inline
    --> rvalue returned:nthValue('n, ..'T)
    | ValidStaticIndex?('n, ..'T) and not DestroyDoesNothingType?(Tuple[..'T])
{
    ref rt = rvalueToRefUnsafe(t);
    returned = &cFieldRef(#nthValue('n, ..'T), rt, #LLTupleFieldName('n));

    static for (#'m in ..#exceptValue('n, ..intValues('n)))
        destroyUnsafe(rt[#'m]);
}


//
// unpack
//

overload unpack(forward x:Tuple[..'T]) inline
    = forward ..unpackFields(x, ..#intValues(countValues(..'T)));

private symbol unpackFields;
// permanent values
overload unpackFields(forward x, #'field, ..#'fields) inline
    = forward x[#'field], forward ..unpackFields(x, ..#'fields);
overload unpackFields(forward x) inline
    = ;
// rvalues
overload unpackFields(rvalue x, #'field, ..#'fields) inline {
    ref refx = rvalueToRefUnsafe(x);
    return rvalue refToRvalueUnsafe(refx[#'field]),
           rvalue ..unpackFields(refToRvalueUnsafe(refx), ..#'fields);
}
overload unpackFields(rvalue x) inline {
    // prevent destruction of x; it should have been entirely picked apart
    rvalueToRefUnsafe(x);
}


//
// default initialization
//

overload #BitwiseZeroInitializedType?(Tuple[..'T])
    = allValues?(BitwiseZeroInitializedType?, ..'T);

overload Tuple[..'T]() inline --> returned:Tuple[..'T]
    | allValues?(DefaultInitializableType?, ..'T)
{
    ..*returned <-- ..mapValues(call, ..'T);
}

overload Tuple[..'T]() inline --> returned:Tuple[..'T]
    | allValues?(BitwiseZeroInitializedType?, ..'T)
{
    memset(OpaquePointer(&returned), 0_i32, TypeSize(Tuple[..'T]));
}


//
// memberwise initialization
//

overload Tuple[..'T](forward ..x:'T) inline --> returned:Tuple[..'T] {
    ..*returned <-- ..x;
}

overload Tuple(forward ..x:'T) inline = Tuple[..'T](..x);


//
// value semantics
//

overload destroyUnsafe(ref x:Tuple[..'T]) inline
    | not DestroyDoesNothingType?(Tuple[..'T])
{
    static for (ref f in ..*x)
        destroyUnsafe(f);
}

overload resetUnsafe(ref x:Tuple[..'T]) inline
    | not ResetDoesNothingType?(Tuple[..'T])
{
    static for (ref f in ..*x)
        resetUnsafe(f);
}

overload moveUnsafe(forward x:Tuple[..'T]) inline
    | not BitwiseMovedType?(Tuple[..'T]) and allValues?(MovableType?, ..'T)
    = Tuple[..'T](..mapValues(moveUnsafe, ..*x));

overload copy(x:Tuple[..'T]) inline
    | not BitwiseCopiedType?(Tuple[..'T]) and allValues?(CopyableType?, ..'T)
    = Tuple[..'T](..mapValues(copy, ..*x));

#CompatibleTupleTypes?('fn, (..'T), (..'U))
    = countValues(..'T) == countValues(..'U)
      and CompatibleTupleTypes2?('fn, (..'T), (..'U));

private #CompatibleTupleTypes2?('fn, ('T, ..'TT), ('U, ..'UU))
    = CallDefined?('fn, 'T, 'U) and CompatibleTupleTypes2?('fn, (..'TT), (..'UU));
overload #CompatibleTupleTypes2?('fn, (), ()) = true;

overload copyAssign(ref to:Tuple[..'T], from:Tuple[..'U]) inline
    | not ((..'T) == (..'U) and BitwiseAssignedType?(Tuple[..'T]))
      and CompatibleTupleTypes?(assign, (..'T), (..'U))
{
    static for (#'n in ..#intValues(countValues(..'T)))
        to[#'n] = from[#'n];
}


//
// comparison
//

overload equals?(x:Tuple[..'T], y:Tuple[..'U]) inline
    | CompatibleTupleTypes?(equals?, (..'T), (..'U))
{
    static for (#'n in ..#intValues(countValues(..'T)))
        if (x[#'n] != y[#'n])
            return false;
    return true;
}

overload lesser?(x:Tuple[..'T], y:Tuple[..'U]) inline
    | CompatibleTupleTypes?(lesser?, (..'T), (..'U))
{
    static for (#'n in ..#intValues(countValues(..'T))) {
        if (x[#'n] < y[#'n])
            return true;
        if (y[#'n] < x[#'n])
            return false;
    }
    return false;
}
