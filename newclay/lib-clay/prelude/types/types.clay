import meta.platform.*;
import meta.statics.*;
import meta.symbols.*;
import values.(allValues?);
import prelude.types.lowlevel.*;

public import __primitives__.(
    ExpressionReturns?       as Returns?,
    ExpressionRefType        as RefType,
    ExpressionType           as Type,
    StaticExpressionDefined? as StaticDefined?,
    ExpressionDefined?       as Defined?,
);


//
// TypeSize, TypeAlign
//

symbol TypeSize  = RuntimeStaticProcedure();
symbol TypeAlign = RuntimeStaticProcedure();

overload #TypeSize ('T) | Type?('T) = LLTypeSize (ToLowLevelType('T));
overload #TypeAlign('T) | Type?('T) = LLTypeAlign(ToLowLevelType('T));


//
// basic type predicates
//

#Type?('x) = false;
#PODType?('T) = false;
#BitwiseCopiedType?('T) = PODType?('T);
#BitwiseMovedType?('T) = PODType?('T);
#NotDestroyedType?('T) = PODType?('T);
#NotResetType?('T) = PODType?('T);
#CopyDoesNotThrowType?('T) = PODType?('T);
#AssignDoesNotThrowType?('T) = PODType?('T);
#BitwiseAssignedType?('T) = BitwiseCopiedType?('T) and NotDestroyedType?('T);
#BitwiseMoveAssignedType?('T) = BitwiseMovedType?('T) and NotDestroyedType?('T);

#InheritableTypePredicate?('X) = false;
overload #InheritableTypePredicate?(PODType?) = true;
overload #InheritableTypePredicate?(BitwiseCopiedType?) = true;
overload #InheritableTypePredicate?(BitwiseMovedType?) = true;
overload #InheritableTypePredicate?(NotDestroyedType?) = true;
overload #InheritableTypePredicate?(NotResetType?) = true;
overload #InheritableTypePredicate?(CopyDoesNotThrowType?) = true;
overload #InheritableTypePredicate?(AssignDoesNotThrowType?) = true;
overload #InheritableTypePredicate?(BitwiseAssignedType?) = true;
overload #InheritableTypePredicate?(BitwiseMoveAssignedType?) = true;



//
// reference kinds
//

symbol Ref['T];
symbol Rvalue['T];
symbol Const['T];

#ReferenceKindTemplate?('x) = false;
overload #ReferenceKindTemplate?(Ref) = true;
overload #ReferenceKindTemplate?(Rvalue) = true;
overload #ReferenceKindTemplate?(Const) = true;



//
// external ABIs
//

symbol CdeclABI;
symbol StdcallABI;

#ABI?('x) = false;
overload #ABI?(CdeclABI) = true;
overload #ABI?(StdcallABI) = true;

#ABISupportsVariadics?('x) = false;
overload #ABISupportsVariadics?(CdeclABI) = true;



//
// primitive types
//

private #PrimitiveType('LLType) = (PrimitiveType, 'LLType);

#PrimitiveType?('T) = SymbolWithTag?('T, PrimitiveType);

overload #Type?('T) | PrimitiveType?('T) = true;
overload #PODType?('T) | PrimitiveType?('T) = true;

overload #ToLowLevelType('T) | PrimitiveType?('T) = SymbolBody('T).1;

symbol Bool = PrimitiveType(LLBoolType);

symbol Int   = PrimitiveType(LLIntegerType[LLSigned,   PlatformCPUPointerSize()]);
symbol UInt  = PrimitiveType(LLIntegerType[LLUnsigned, PlatformCPUPointerSize()]);

symbol Int8  = PrimitiveType(LLIntegerType[LLSigned,  8]);
symbol Int16 = PrimitiveType(LLIntegerType[LLSigned, 16]);
symbol Int32 = PrimitiveType(LLIntegerType[LLSigned, 32]);
symbol Int64 = PrimitiveType(LLIntegerType[LLSigned, 64]);

symbol UInt8  = PrimitiveType(LLIntegerType[LLUnsigned,  8]);
symbol UInt16 = PrimitiveType(LLIntegerType[LLUnsigned, 16]);
symbol UInt32 = PrimitiveType(LLIntegerType[LLUnsigned, 32]);
symbol UInt64 = PrimitiveType(LLIntegerType[LLUnsigned, 64]);

symbol Float32 = PrimitiveType(LLFloatType[32]);
symbol Float64 = PrimitiveType(LLFloatType[64]);

symbol Char   = PrimitiveType(LLIntegerType[LLUnsigned,  8]);
symbol Char16 = PrimitiveType(LLIntegerType[LLUnsigned, 16]);
symbol Char32 = PrimitiveType(LLIntegerType[LLUnsigned, 32]);

#IntegerType?('x) = false;
overload #IntegerType?(Int   ) = true;
overload #IntegerType?(Int8  ) = true;
overload #IntegerType?(Int16 ) = true;
overload #IntegerType?(Int32 ) = true;
overload #IntegerType?(Int64 ) = true;
overload #IntegerType?(UInt  ) = true;
overload #IntegerType?(UInt8 ) = true;
overload #IntegerType?(UInt16) = true;
overload #IntegerType?(UInt32) = true;
overload #IntegerType?(UInt64) = true;

#SignedIntegerType?('x) = false;
overload #SignedIntegerType?(Int  ) = true;
overload #SignedIntegerType?(Int8 ) = true;
overload #SignedIntegerType?(Int16) = true;
overload #SignedIntegerType?(Int32) = true;
overload #SignedIntegerType?(Int64) = true;

#UnsignedIntegerType?('x) = false;
overload #UnsignedIntegerType?(UInt  ) = true;
overload #UnsignedIntegerType?(UInt8 ) = true;
overload #UnsignedIntegerType?(UInt16) = true;
overload #UnsignedIntegerType?(UInt32) = true;
overload #UnsignedIntegerType?(UInt64) = true;

#FloatType?('x) = false;
overload #FloatType?(Float32) = true;
overload #FloatType?(Float64) = true;

#NumberType?('T) = IntegerType?('T) or FloatType?('T);



//
// StringConstant
// XXX should be a Record once records are implemented
//

symbol StringConstant;
overload #Type?(StringConstant) = true;
overload #PODType?(StringConstant) = true;
overload #ToLowLevelType(StringConstant)
    = LLTupleType[begin:Pointer[Char], end:Pointer[Char]];



//
// Static[T]
//

symbol Static['x] = PrimitiveType(LLTupleType[]);

#StaticType?('X) = false;
overload #StaticType?(Static['x]) = true;



//
// Pointer[T]
//

symbol Pointer['T] = PrimitiveType(LLPointerType['T]);

#PointerType?('X) = false;
overload #PointerType?(Pointer['T]) | Type?('T) = true;



//
// OpaquePointer
//

symbol OpaquePointer = PrimitiveType(LLPointerType[UInt8]);

overload #PointerType?(OpaquePointer) | Type?('T) = true;



//
// ContiguousCoordinate
//

symbol ContiguousCoordinate['T] = PrimitiveType(LLPointerType['T]);

overload #PointerType?(ContiguousCoordinate['T]) | Type?('T) = true;



//
// ExternalCodePointer[ABI, Inputs, Outputs]
//

#RequireExternalPODType?('x) = PODType?('x)
    or StaticError("external code pointer argument is not a POD type: ", 'x);

private #ValidExternalCodePointerOutput?('O)
    = (StaticTuple?('O) and StaticTupleSize('O) == 0) or RequireExternalPODType?('O);

symbol ExternalCodePointer['ABI, 'Variadic?, 'Inputs, 'Outputs];
overload #Type?(ExternalCodePointer['A, 'V, 'I, 'O])
    | ABI?('A)
      and StaticBool?('V)
      and allValues?(RequireExternalPODType?, ...StaticTupleElements('I))
      and ValidExternalCodePointerOutput?('O)
    = true;
overload #PODType?(ExternalCodePointer['A,'V,'I,'O])
    | Type?(ExternalCodePointer['A,'V,'I,'O]) = true;
overload #ToLowLevelType(ExternalCodePointer['A, 'V, 'I, 'O])
    = LLCodePointerType['A, 'V, 'I, 'O];

#ExternalCodePointerType?('X) = false;
overload #ExternalCodePointerType?(ExternalCodePointer['A,'V,'I,'O])
    | Type?(ExternalCodePointer['A,'V,'I,'O]) = true;

#ExternalOutputTypes('T) | Type?('T) = 'T;
overload #ExternalOutputTypes(()) = ;

alias CCodePointer['I, 'O] = ExternalCodePointer[CdeclABI, false, 'I, 'O];
alias VariadicCCodePointer['I, 'O] = ExternalCodePointer[CdeclABI, true, 'I, 'O];
alias StdcallCodePointer['I, 'O] = ExternalCodePointer[StdcallABI, false, 'I, 'O];


//
// Array[T,n]
//

symbol Array['T, 'n];
overload #Type?(Array['T, 'n]) | Type?('T) and StaticInt?('n) = true;
overload #'XType?(Array['T, 'n]) | InheritableTypePredicate?('XType?) = 'XType?('T);
overload #ToLowLevelType(Array['T, 'n]) = LLArrayType['T, 'n];

#ArrayType?('X) = false;
overload #ArrayType?(Array['T, 'n]) | Type?(Array['T, 'n]) = true;



//
// Tuple[...T]
//

symbol Tuple[...'T];
overload #Type?(Tuple[...'T]) | allValues?(Type?, ...'T) = true;
overload #'XType?(Tuple[...'T])
    | InheritableTypePredicate?('XType?) and allValues?('XType?, ...'T)
    = true;
overload #ToLowLevelType(Tuple[...'T]) = LLTupleType[...'T];

#TupleType?('X) = false;
overload #TupleType?(Tuple[...'T]) | Type?(Tuple[...'T]) = true;



//
// Union[...T]
//

symbol Union[...'T];
overload #Type?(Union[...'T]) | allValues?(Type?, ...'T) = true;
overload #'XType?(Union[...'T])
    | InheritableTypePredicate?('XType?) and allValues?(Type?, ...'T)
    = true;
overload #ToLowLevelType(Union[...'T]) = LLUnionType[...'T];

#UnionType?('X) = false;
overload #UnionType?(Union[...'T]) | Type?(Union[...'T]) = true;



//
// Predicates for primitive types
//

#ArithmeticCompatiblePrimitiveIntTypes?('A, 'B)
    = (SignedIntegerType?('A) and SignedIntegerType?('B))
      or (UnsignedIntegerType?('A) and UnsignedIntegerType?('B));
#ArithmeticCompatiblePrimitiveFloatTypes?('A, 'B)
      = (FloatType?('A) and FloatType?('B));
#ArithmeticCompatiblePrimitiveTypes?('A, 'B)
    = ArithmeticCompatiblePrimitiveIntTypes?('A, 'B)
      or ArithmeticCompatiblePrimitiveFloatTypes?('A, 'B);
#BitwiseCompatiblePrimitiveTypes?('A, 'B)
    = IntegerType?('A) and IntegerType?('B);
#ComparablePrimitiveTypes?('A, 'B)
    = ArithmeticCompatiblePrimitiveTypes?('A, 'B)
      or ('A == Char and 'B == Char)
      or ('A == Bool and 'B == Bool);
#EqualityComparablePrimitiveTypes?('A, 'B)
    = ArithmeticCompatiblePrimitiveTypes?('A, 'B)
      or ('A == Char and 'B == Char)
      or ('A == Bool and 'B == Bool);

#AssignablePrimitiveTypes?('A, 'B)
    = ArithmeticCompatiblePrimitiveTypes?('A, 'B) and 'A == BiggerNumericType('A, 'B);

#BiggerNumericType('A, 'B) = BiggerNumericType('B, 'A);
overload #BiggerNumericType('T, 'T) = 'T;
overload #BiggerNumericType( Int8 ,  Int16) =  Int16;
overload #BiggerNumericType( Int8 ,  Int32) =  Int32;
overload #BiggerNumericType( Int8 ,  Int64) =  Int64;
overload #BiggerNumericType( Int8 , UInt8 ) = UInt8 ;
overload #BiggerNumericType( Int8 , UInt16) = UInt16;
overload #BiggerNumericType( Int8 , UInt32) = UInt32;
overload #BiggerNumericType( Int8 , UInt64) = UInt64;
overload #BiggerNumericType( Int16,  Int32) =  Int32;
overload #BiggerNumericType( Int16,  Int64) =  Int64;
overload #BiggerNumericType( Int16, UInt8 ) =  Int16;
overload #BiggerNumericType( Int16, UInt16) = UInt16;
overload #BiggerNumericType( Int16, UInt32) = UInt32;
overload #BiggerNumericType( Int16, UInt64) = UInt64;
overload #BiggerNumericType( Int32,  Int64) =  Int64;
overload #BiggerNumericType( Int32, UInt8 ) =  Int32;
overload #BiggerNumericType( Int32, UInt16) =  Int32;
overload #BiggerNumericType( Int32, UInt32) = UInt32;
overload #BiggerNumericType( Int32, UInt64) = UInt64;
overload #BiggerNumericType( Int64, UInt8 ) =  Int64;
overload #BiggerNumericType( Int64, UInt16) =  Int64;
overload #BiggerNumericType( Int64, UInt32) =  Int64;
overload #BiggerNumericType( Int64, UInt64) = UInt64;

overload #BiggerNumericType(UInt8 , UInt16) = UInt16;
overload #BiggerNumericType(UInt8 , UInt32) = UInt32;
overload #BiggerNumericType(UInt8 , UInt64) = UInt64;
overload #BiggerNumericType(UInt16, UInt32) = UInt32;
overload #BiggerNumericType(UInt16, UInt64) = UInt64;
overload #BiggerNumericType(UInt32, UInt64) = UInt64;

overload #BiggerNumericType(Float32, Float64) = Float64;
