import meta.platform.*;
import meta.statics.*;
import meta.symbols.*;
import values.(allValues?, countValues);
import prelude.types.lowlevel.*;

public import __primitives__.(
    ExpressionReturns?       as Returns?,
    ExpressionRefType        as RefType,
    ExpressionType           as Type,
    StaticExpressionDefined? as StaticDefined?,
    ExpressionDefined?       as Defined?,
);


//
// TypeSize, TypeAlign
//

symbol TypeSize  = RuntimeStaticProcedure();
symbol TypeAlign = RuntimeStaticProcedure();

overload #TypeSize ('T) | Type?('T) = LLTypeSize (LLType('T));
overload #TypeAlign('T) | Type?('T) = LLTypeAlign(LLType('T));


//
// basic type predicates
//

#Type?('x) = StaticCallDefined?(LLType, 'x);
#PODType?('T) = false;
#BitwiseCopiedType?('T) = PODType?('T);
#BitwiseMovedType?('T) = PODType?('T);
#NotDestroyedType?('T) = PODType?('T);
#NotResetType?('T) = PODType?('T);
#CopyDoesNotThrowType?('T) = PODType?('T);
#AssignDoesNotThrowType?('T) = PODType?('T);
#BitwiseAssignedType?('T) = BitwiseCopiedType?('T) and NotDestroyedType?('T);
#BitwiseMoveAssignedType?('T) = BitwiseMovedType?('T) and NotDestroyedType?('T);

#BitwiseZeroInitializedType?('T) = false;
overload #BitwiseZeroInitializedType?(Bool) = true;
overload #BitwiseZeroInitializedType?('T) | NumberType?('T) = true;
overload #BitwiseZeroInitializedType?('T) | CharType?('T) = true;

#DefaultInitializableType?('T) = CallDefined?('T);
#CopyableType?('T) = CallDefined?(copy, 'T);
#MovableType?('T) = CallDefined?(move, 'T);
#AssignableType?('T) = CallDefined?(assign, Ref['T], 'T);
#MoveAssignableType?('T) = CallDefined?(assign, Ref['T], Rvalue['T]);
#AssignableTypes?('T, 'U) = CallDefined?(assign, Ref['T], 'U);

#InheritableTypePredicate?('X) = false;
overload #InheritableTypePredicate?(PODType?) = true;
overload #InheritableTypePredicate?(BitwiseCopiedType?) = true;
overload #InheritableTypePredicate?(BitwiseMovedType?) = true;
overload #InheritableTypePredicate?(NotDestroyedType?) = true;
overload #InheritableTypePredicate?(NotResetType?) = true;
overload #InheritableTypePredicate?(CopyDoesNotThrowType?) = true;
overload #InheritableTypePredicate?(AssignDoesNotThrowType?) = true;
overload #InheritableTypePredicate?(BitwiseAssignedType?) = true;
overload #InheritableTypePredicate?(BitwiseMoveAssignedType?) = true;



//
// reference kinds
//

symbol Ref['T];
symbol Rvalue['T];
symbol Const['T];

#ReferenceKindTemplate?('x) = false;
overload #ReferenceKindTemplate?(Ref) = true;
overload #ReferenceKindTemplate?(Rvalue) = true;
overload #ReferenceKindTemplate?(Const) = true;



//
// external ABIs
//

symbol CdeclABI;
symbol StdcallABI;

#ABI?('x) = false;
overload #ABI?(CdeclABI) = true;
overload #ABI?(StdcallABI) = true;

#ABISupportsVariadics?('x) = false;
overload #ABISupportsVariadics?(CdeclABI) = true;



//
// primitive types
//

private #PrimitiveType('LLT) = (PrimitiveType, 'LLT);

#PrimitiveType?('T) = SymbolWithTag?('T, PrimitiveType);

overload #PODType?('T) | PrimitiveType?('T) = true;

overload #LLType('T) | PrimitiveType?('T) = SymbolBody('T).1;

symbol Bool = PrimitiveType(LLBoolType);

symbol Int   = PrimitiveType(LLIntegerType[LLSigned,   PlatformCPUPointerBits()]);
symbol UInt  = PrimitiveType(LLIntegerType[LLUnsigned, PlatformCPUPointerBits()]);

symbol Int8  = PrimitiveType(LLIntegerType[LLSigned,  8]);
symbol Int16 = PrimitiveType(LLIntegerType[LLSigned, 16]);
symbol Int32 = PrimitiveType(LLIntegerType[LLSigned, 32]);
symbol Int64 = PrimitiveType(LLIntegerType[LLSigned, 64]);

symbol UInt8  = PrimitiveType(LLIntegerType[LLUnsigned,  8]);
symbol UInt16 = PrimitiveType(LLIntegerType[LLUnsigned, 16]);
symbol UInt32 = PrimitiveType(LLIntegerType[LLUnsigned, 32]);
symbol UInt64 = PrimitiveType(LLIntegerType[LLUnsigned, 64]);

symbol Float32 = PrimitiveType(LLFloatType[32]);
symbol Float64 = PrimitiveType(LLFloatType[64]);

symbol Char   = PrimitiveType(LLIntegerType[LLUnsigned,  8]);
symbol Char16 = PrimitiveType(LLIntegerType[LLUnsigned, 16]);
symbol Char32 = PrimitiveType(LLIntegerType[LLUnsigned, 32]);

#IntegerType?('x) = false;
overload #IntegerType?(Int   ) = true;
overload #IntegerType?(Int8  ) = true;
overload #IntegerType?(Int16 ) = true;
overload #IntegerType?(Int32 ) = true;
overload #IntegerType?(Int64 ) = true;
overload #IntegerType?(UInt  ) = true;
overload #IntegerType?(UInt8 ) = true;
overload #IntegerType?(UInt16) = true;
overload #IntegerType?(UInt32) = true;
overload #IntegerType?(UInt64) = true;

#SignedIntegerType?('x) = false;
overload #SignedIntegerType?(Int  ) = true;
overload #SignedIntegerType?(Int8 ) = true;
overload #SignedIntegerType?(Int16) = true;
overload #SignedIntegerType?(Int32) = true;
overload #SignedIntegerType?(Int64) = true;

#UnsignedIntegerType?('x) = false;
overload #UnsignedIntegerType?(UInt  ) = true;
overload #UnsignedIntegerType?(UInt8 ) = true;
overload #UnsignedIntegerType?(UInt16) = true;
overload #UnsignedIntegerType?(UInt32) = true;
overload #UnsignedIntegerType?(UInt64) = true;

#FloatType?('x) = false;
overload #FloatType?(Float32) = true;
overload #FloatType?(Float64) = true;

#NumberType?('T) = IntegerType?('T) or FloatType?('T);

#CharType?('x) = false;
overload #CharType?(Char  ) = true;
overload #CharType?(Char16) = true;
overload #CharType?(Char32) = true;


//
// StringConstant
//

symbol StringConstant = RecordType(
    begin:ContiguousCoordinate[Char],
    end:ContiguousCoordinate[Char],
);



//
// Static[T]
//

symbol Static['x] = PrimitiveType(LLTupleType[]);

#StaticType?('X) = false;
overload #StaticType?(Static['x]) = true;



//
// Pointer[T]
//

symbol Pointer['T];

#PointerType?('X) = false;
overload #PointerType?(Pointer['T]) | Type?('T) = true;
overload #PODType?(Pointer['T]) | Type?('T) = true;

symbol PointerReferencedType;
overload #PointerReferencedType(Pointer['T]) = 'T;

overload #LLType(Pointer['T])
    | Type?('T)
    = LLPointerType['T];


//
// OpaquePointer
//

symbol OpaquePointer = PrimitiveType(LLPointerType[UInt8]);

overload #PointerType?(OpaquePointer) = true;



//
// ContiguousCoordinate
//

symbol ContiguousCoordinate['T];

overload #PointerType?(ContiguousCoordinate['T]) | Type?('T) = true;
overload #PODType?(ContiguousCoordinate['T]) | Type?('T) = true;

overload #PointerReferencedType(ContiguousCoordinate['T]) = 'T;

#DereferenceablePointerType?('T)
    = PointerType?('T) and StaticCallDefined?(PointerReferencedType, 'T);

overload #LLType(ContiguousCoordinate['T])
    | Type?('T)
    = LLPointerType['T];


#ArithmeticPointerType?('x) = false;
overload #ArithmeticPointerType?(ContiguousCoordinate['T]) | Type?('T) = true;



//
// ExternalCodePointer[ABI, Inputs, Outputs]
//

#RequireExternalPODType?('x) = PODType?('x);
    //or StaticError("external code pointer argument is not a POD type: ", 'x);

private #ValidExternalCodePointerOutput?('O)
    = 'O == () or PODType?('O);//RequireExternalPODType?('O);

symbol ExternalCodePointer['ABI, 'Variadic?, 'Inputs, 'Outputs];
overload #PODType?(ExternalCodePointer['A,'V,'I,'O])
    | Type?(ExternalCodePointer['A,'V,'I,'O]) = true;
overload #LLType(ExternalCodePointer['A, 'V, 'I, 'O])
    | ABI?('A)
      and StaticBool?('V)
      and StaticTuple?('I)
      and allValues?(RequireExternalPODType?, ..StaticTupleElements('I))
      and ValidExternalCodePointerOutput?('O)
    = LLCodePointerType['A, 'V, 'I, 'O];

#ExternalCodePointerType?('X) = false;
overload #ExternalCodePointerType?(ExternalCodePointer['A,'V,'I,'O])
    | Type?(ExternalCodePointer['A,'V,'I,'O]) = true;

overload #PointerType?(ExternalCodePointer['A,'V,'I,'O])
    | Type?(ExternalCodePointer['A,'V,'I,'O]) = true;

#ExternalOutputTypes('T) | Type?('T) = 'T;
overload #ExternalOutputTypes(()) = ;

alias CCodePointer['I, 'O] = ExternalCodePointer[CdeclABI, false, 'I, 'O];
alias VariadicCCodePointer['I, 'O] = ExternalCodePointer[CdeclABI, true, 'I, 'O];
alias StdcallCodePointer['I, 'O] = ExternalCodePointer[StdcallABI, false, 'I, 'O];


//
// Array[T,n]
//

symbol Array['T, 'n];
overload #'XType?(Array['T, 'n]) | InheritableTypePredicate?('XType?) = 'XType?('T);
overload #LLType(Array['T, 'n])
    | Type?('T) and StaticInt?('n) and 'n >= 0
    = LLArrayType['T, 'n];

#ArrayType?('X) = false;
overload #ArrayType?(Array['T, 'n]) | Type?(Array['T, 'n]) = true;



//
// Tuple[..T]
//

symbol Tuple[..'T];
overload #'XType?(Tuple[..'T])
    | InheritableTypePredicate?('XType?) and allValues?('XType?, ..'T)
    = true;
overload #LLType(Tuple[..'T])
    | allValues?(Type?, ..'T)
    = LLTupleType[..'T];

#TupleType?('X) = false;
overload #TupleType?(Tuple[..'T]) | Type?(Tuple[..'T]) = true;



//
// Union[..T]
//

symbol Union[..'T];
overload #'XType?(Union[..'T])
    | InheritableTypePredicate?('XType?) and allValues?(Type?, ..'T)
    = true;
overload #LLType(Union[..'T])
    | allValues?(Type?, ..'T)
    = LLUnionType[..'T];

#UnionType?('X) = false;
overload #UnionType?(Union[..'T]) | Type?(Union[..'T]) = true;


//
// ValidStaticIndex? for unions or tuples
//

#ValidStaticIndex?('n, ..'T) = StaticInt?('n) and 'n >= 0 and 'n < countValues(..'T);



//
// Predicates for primitive types
//

#ArithmeticCompatiblePrimitiveIntTypes?('A, 'B)
    = (SignedIntegerType?('A) and SignedIntegerType?('B))
      or (UnsignedIntegerType?('A) and UnsignedIntegerType?('B));
#ArithmeticCompatiblePrimitiveFloatTypes?('A, 'B)
      = (FloatType?('A) and FloatType?('B));
#ArithmeticCompatiblePrimitiveTypes?('A, 'B)
    = ArithmeticCompatiblePrimitiveIntTypes?('A, 'B)
      or ArithmeticCompatiblePrimitiveFloatTypes?('A, 'B);
#BitwiseCompatiblePrimitiveTypes?('A, 'B)
    = IntegerType?('A) and IntegerType?('B);
#ComparablePrimitiveTypes?('A, 'B)
    = ArithmeticCompatiblePrimitiveTypes?('A, 'B)
      or ComparablePointerTypes?('A, 'B)
      or (CharType?('A) and CharType?('B))
      or ('A == Bool and 'B == Bool);
#EqualityComparablePrimitiveTypes?('A, 'B)
    = ComparablePrimitiveTypes?('A, 'B)
      or EqualityComparablePointerTypes?('A, 'B);

#ComparablePointerTypes?('A, 'B) = false;
overload #ComparablePointerTypes?('A, 'A) = ArithmeticPointerType?('A);

#EqualityComparablePointerTypes?('A, 'B) = false;
overload #EqualityComparablePointerTypes?('A, 'A) = PointerType?('A);

#AssignablePrimitiveTypes?('A, 'B)
    = ComparablePrimitiveTypes?('A, 'B) and 'A == BiggerNumberType('A, 'B);

private #ConvertibleScalarType?('A)
    = NumberType?('A) or CharType?('A);

#ConvertiblePrimitiveTypes?('A, 'B)
    = (ConvertibleScalarType?('A) and ConvertibleScalarType?('B))
      or (PointerType?('A) and PointerType?('B));

symbol BiggerNumberType;
overload #BiggerNumberType('A, 'B) | TypeSize('A) > TypeSize('B) = 'A;
overload #BiggerNumberType('A, 'B) | TypeSize('B) > TypeSize('A) = 'B;
overload #BiggerNumberType('A, 'B)
    | TypeSize('A) == TypeSize('B) and UnsignedIntegerType?('A)
    = 'A;
overload #BiggerNumberType('A, 'B)
    | TypeSize('A) == TypeSize('B) and UnsignedIntegerType?('B)
    = 'B;
overload #BiggerNumberType('T, Int) = 'T;
overload #BiggerNumberType(Int, 'T) = 'T;
overload #BiggerNumberType('T, UInt) = 'T;
overload #BiggerNumberType(UInt, 'T) = 'T;
overload #BiggerNumberType('T, 'T) = 'T;
overload #BiggerNumberType(Int, UInt) = UInt;
overload #BiggerNumberType(UInt, Int) = UInt;


//
// sequence-related predicates
//

#SequenceType?('S) = CallDefined?(iterator, 'S);
#IteratorType?('I) = CallDefined?(hasNext?, 'I) and CallDefined?(next, 'I);
// XXX proper definition of CoordinateType?
#CoordinateType?('C) = CallDefined?(dereference, 'C) and CallDefined?(inc, Ref['C]);

#SizedSequenceType?('S) = SequenceType?('S) and CallDefined?(size, 'S);
