import meta.lambdas.*;
import values.(captureValues, capturedRefs);

symbol Lambda['L, 'C] = NewType('C);

overload Lambda(#'L, captures:'C) = Lambda['L, 'C](captures);

symbol captureLambda;
symbol lambdaCaptures;

overload captureLambda(#'L, forward ..captures)
    | LambdaSymbol?('L) and LambdaCapturesByReference?('L)
    = Lambda(#'L, captureValues(..captures));
overload lambdaCaptures(l:Lambda['L, 'C])
    | LambdaSymbol?('L) and LambdaCapturesByReference?('L)
    = forward ..capturedRefs(*l);

overload captureLambda(#'L, forward ..captures)
    | LambdaSymbol?('L) and LambdaCapturesByValue?('L)
    = Lambda(#'L, (..captures));
overload lambdaCaptures(forward l:Lambda['L, 'C])
    | LambdaSymbol?('L) and LambdaCapturesByValue?('L)
    = forward ..unpack(*l);

overload call(forward l:Lambda['L, 'C], forward ..args)
    | LambdaSymbol?('L) and Defined?(['L(..lambdaCaptures(l), ..args);])
    = forward ..'L(..lambdaCaptures(l), ..args);

#LambdaType?('T) = false;
overload #LambdaType?(Static['L]) | LambdaSymbol?('L) and LambdaStateless?('L) = true;
overload #LambdaType?(Lambda['L, 'C]) | LambdaSymbol?('L) and Type?('C) = true;
