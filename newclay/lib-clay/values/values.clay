import __primitives__.(StaticCountValues, StaticIntegers);
import meta.statics.(StaticInt?);

symbol allValues?;
overload #allValues?('f) = true;
overload #allValues?('f, 'x, ..'xs) = 'f('x) and allValues?('f, ..'xs);
inline overload allValues?(f) = true;
inline overload allValues?(f, forward x, forward ..xs)
    = f(x) and allValues?(f, ..xs);

symbol equalValues?;
overload #equalValues?('x0) = true;
overload #equalValues?('x0, 'x1, ..'xs) = 'x0 == 'x1 and equalValues?('x0, ..'xs);
inline overload equalValues?(x0) = true;
inline overload equalValues?(x0, forward x1, forward ..xs)
    = x0 == x1 and equalValues?(x0, ..xs);

symbol inValues?;
overload #inValues?('x) = false;
overload #inValues?('x, 'x, ..'ys) = true;
overload #inValues?('x, 'y, ..'ys) | 'x != 'y = inValues?('x, ..'ys);
inline overload inValues?(x, forward ..ys) {
    static for (/*forward*/ y in ..ys)
        if (x == y)
            return true;
    return false;
}

symbol countValues;
overload #countValues(..'xs) = StaticCountValues(..'xs);
inline overload countValues(..xs:'T) = *#StaticCountValues(..'T);

symbol emptyValues?;
overload #emptyValues?(..'xs) = false;
overload #emptyValues?() = true;
inline overload emptyValues?(..xs) = false;
inline overload emptyValues?() = true;

symbol takeValues;
overload #takeValues('n) | StaticInt?('n) = ;
overload #takeValues(0, ..'xs) = ;
overload #takeValues('n, 'x, ..'xs)
    | StaticInt?('n) and 'n > 0
    = 'x, ..takeValues('n - 1, ..'xs);
inline overload takeValues(#'n) | StaticInt?('n) = ;
inline overload takeValues(#0, forward ..xs) = ;
inline overload takeValues(#'n, forward x, forward ..xs)
    | StaticInt?('n) and 'n > 0
    = forward x, forward ..takeValues(#('n - 1), ..xs);

symbol dropValues;
overload #dropValues('n) | StaticInt?('n) = ;
overload #dropValues(0, ..'xs) = ..'xs;
overload #dropValues('n, 'x, ..'xs)
    | StaticInt?('n) and 'n > 0
    = ..dropValues('n - 1, ..'xs);
inline overload dropValues(#'n) | StaticInt?('n) = ;
inline overload dropValues(#0, forward ..xs) = forward ..xs;
inline overload dropValues(#'n, forward x, forward ..xs)
    | StaticInt?('n) and 'n > 0
    = forward ..dropValues(#('n - 1), ..xs);

symbol mapValues;
overload #mapValues('f) = ;
overload #mapValues('f, 'x, ..'xs) = ..'f('x), ..mapValues('f, ..'xs);
inline overload mapValues(fn) = ;
inline overload mapValues(fn, forward x:'T, forward ..xs:'TT)
    = forward ..fn(x), forward ..mapValues(fn, ..xs);

symbol intValues = RuntimeStaticProcedure();
overload #intValues('n) = ..StaticIntegers('n);

symbol nthValue;
overload #nthValue(0, 'x, ..'xs) = 'x;
overload #nthValue('n, 'x, ..'xs)
    | StaticInt?('n) and 'n > 0
    = nthValue('n - 1, ..'xs);

inline overload nthValue(#0, forward x, forward ..xs) = forward x;
inline overload nthValue(#'n, forward x, forward ..xs)
    | StaticInt?('n) and 'n > 0
    = forward nthValue(#('n - 1), ..xs);

symbol assocValue;
overload #assocValue('key, 'kv, ..'kvs) = assocValue('key, ..'kvs);
overload #assocValue('key, ('key, 'value), ..'kvs) = 'value;

inline overload assocValue(#'key, forward kv, forward ..kvs)
    = forward assocValue(#'key, ..kvs);
inline overload assocValue(#'key, forward kv:Tuple[Static['key], 'V], forward ..kvs)
    = forward kv[#1];

symbol assocValue?;
overload #assocValue?('key, 'kv, ..'kvs) = assocValue?('key, ..'kvs);
overload #assocValue?('key, ('key, 'value), ..'kvs) = true;
overload #assocValue?('key) = false;

inline overload assocValue?(#'key, forward kv, forward ..kvs)
    = assocValue?(#'key, ..kvs);
inline overload assocValue?(#'key, forward kv:Tuple[Static['key], 'V], forward ..kvs)
    = true;
inline overload assocValue?(#'key)
    = false;

symbol exceptValue = RuntimeStaticProcedure();
overload #exceptValue('v) = ;
overload #exceptValue('v, 'w, ..'vs) = 'w, ..exceptValue('v, ..'vs);
overload #exceptValue('v, 'v, ..'vs) = ..exceptValue('v, ..'vs);

private symbol CapturedValue['T] = NewType('T);
private symbol CapturedRef['T] = NewType(Pointer['T]);
private symbol CapturedConst['T] = NewType(Pointer['T]);

private #CapturedType?('x) = false;
overload #CapturedType?(CapturedValue['T]) = true;
overload #CapturedType?(CapturedRef['T]) = true;
overload #CapturedType?(CapturedConst['T]) = true;

symbol captureValue;
inline overload captureValue(const x:'T) = CapturedConst['T](&x);
inline overload captureValue(ref x:'T) = CapturedRef['T](&x);
inline overload captureValue(rvalue x:'T) = CapturedValue['T](x);

symbol forwardValue;
inline overload forwardValue(x:CapturedConst['T]) = const (*x)^;
inline overload forwardValue(x:CapturedRef['T]) = ref (*x)^;
inline overload forwardValue(ref x:CapturedValue['T]) = rvalue refToRvalueUnsafe(*x);

symbol capturedRef;
inline overload capturedRef(x:CapturedConst['T]) = const (*x)^;
inline overload capturedRef(x:CapturedRef['T]) = ref (*x)^;
inline overload capturedRef(x:CapturedValue['T]) = const *x;

inline captureValues(forward ..x) = (..mapValues(captureValue, ..x));
inline forwardValues(ref x:Tuple[..'T])
    | allValues?(CapturedType?, ..'T)
    = forward ..mapValues(forwardValue, ..*x);
inline capturedRefs(x:Tuple[..'T])
    | allValues?(CapturedType?, ..'T)
    = forward ..mapValues(capturedRef, ..*x);

