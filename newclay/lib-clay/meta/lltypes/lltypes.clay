import meta.platform.*;
import meta.statics.*;
import values.*;

public import __primitives__.(llMangle);

symbol llSigned;
symbol llUnsigned;

symbol llBoolType;
symbol llIntegerType['Signed, 'Bits];
symbol llFloatType['Bits];
symbol llPointerType['T];
symbol llCodePointerType['ABI, 'Variadic?, 'Inputs, 'Outputs];
symbol llArrayType['T, 'n];
symbol llTupleType[..'T];
symbol llUnionType[..'T];
symbol llLiteralCType[..'Parts];

#llIntegerType?('L) = false;
overload #llIntegerType?(llIntegerType['S, 'B]) = true;

#llFloatType?('L) = false;
overload #llFloatType?(llFloatType['B]) = true;

#llPointerType?('L) = false;
overload #llPointerType?(llPointerType['T]) = true;

#llCodePointerType?('L) = false;
overload #llCodePointerType?(llCodePointerType['A,'V,'I,'O]) = true;

#llArrayType?('L) = false;
overload #llArrayType?(llArrayType['T, 'n]) = true;

#llTupleType?('L) = false;
overload #llTupleType?(llTupleType[..'T]) = true;

#llUnionType?('L) = false;
overload #llUnionType?(llUnionType[..'T]) = true;

#llLiteralCType?('L) = false;
overload #llLiteralCType?(llLiteralCType[..'T]) = true;

symbol llType;

symbol llMemberType;
overload #llMemberType('T) | not staticTuple?('T) = 'T;
overload #llMemberType(('name, 'T)) = 'T;

#llMemberTypes(..'T) = ..mapValues(llMemberType, ..'T);

private #PointerSize() = UInt(platformCPUPointerSize());

symbol llTypeSize;
overload #llTypeSize(llBoolType) = 1u;
overload #llTypeSize(llIntegerType['S, 'Bits]) = 'Bits div 8u;
overload #llTypeSize(llFloatType['Bits]) = 'Bits div 8u;
overload #llTypeSize(llPointerType['T]) = PointerSize();
overload #llTypeSize(llCodePointerType[..'x]) = PointerSize();
overload #llTypeSize(llArrayType['T, 'n]) = typeSize('T) * UInt('n);
overload #llTypeSize(llTupleType[..'T]) = llTupleSize(..llMemberTypes(..'T));
overload #llTypeSize(llUnionType[..'T]) = llUnionSize(..llMemberTypes(..'T));

private #align('n, 'alignment) = ('n + 'alignment - 1u) div 'alignment * 'alignment;

private #llTupleSize(..'TT) = align(llTupleSize2(0u, ..'TT), llAggAlign(..'TT));
private symbol llTupleSize2;
overload #llTupleSize2('size, 'T, ..'TT)
    = llTupleSize2(align('size, typeAlign('T)) + typeSize('T), ..'TT);
overload #llTupleSize2('size) = 'size;

private #llUnionSize(..'TT) = align(llUnionSize2(0u, ..'TT), llAggAlign(..'TT));
private symbol llUnionSize2;
overload #llUnionSize2('size, 'T, ..'TT)
    = llUnionSize2(max(align('size, typeAlign('T)), typeSize('T)), ..'TT);
overload #llUnionSize2('size) = 'size;

private #llAggAlign(..'T) = max(..mapValues(typeAlign, ..'T));
overload #llAggAlign() = 1u;

// XXX platform-specific
#maxIntegerAlign() = 8u;
#maxFloatAlign() = 8u;

symbol llTypeAlign;
overload #llTypeAlign(llBoolType) = 1u;
overload #llTypeAlign(llIntegerType['S, 'Bits]) = min('Bits div 8u, maxIntegerAlign());
overload #llTypeAlign(llFloatType['Bits]) = min('Bits div 8u, maxFloatAlign());
overload #llTypeAlign(llPointerType['T]) = PointerSize();
overload #llTypeAlign(llCodePointerType[..'x]) = PointerSize();
overload #llTypeAlign(llArrayType['T, 'n]) = typeAlign('T);
overload #llTypeAlign(llTupleType[..'T])
    = max(..mapValues(typeAlign, ..llMemberTypes(..'T)));
overload #llTypeAlign(llUnionType[..'T])
    = max(..mapValues(typeAlign, ..llMemberTypes(..'T)));
overload #llTypeAlign(llTupleType[]) = 1u;
overload #llTypeAlign(llUnionType[]) = 1u;

// A bit of improper coupling with the C codegen implementation: tuple elements
// are generated as struct fields named "fieldn" for 0 <= n < tupleSize in a struct
#llTupleFieldName('n) = staticStringConcat("field", staticName('n));

