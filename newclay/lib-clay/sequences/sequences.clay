import values.*;


//
// zipped
//
private symbol Zipped[..'S] = NewType(Tuple[..'S]);
overload Zipped(/*alias*/ forward x:Tuple[..'S]) = Zipped[..'S](x);

private symbol ZippedIterator[..'S] = NewType(Tuple[..'S]);
overload ZippedIterator(/*alias*/ forward x:Tuple[..'S]) = ZippedIterator[..'S](x);

zipped(forward ..seqs:'S) | allValues?(SequenceType?, ..'S)
    = Zipped(captureValues(..seqs));

iterator(s:Zipped[..'S]) = ZippedIterator((..mapValues(iterator, ..capturedRefs(*s))));
hasNext?(s:ZippedIterator[..'S]) = allValues?(hasNext?, ..**s);
next(ref s:ZippedIterator[..'S]) = forward ..mapValues(next, ..**s);

enumerated(forward ..seqs:'S) | allValues?(SequenceType?, ..'S)
    = zipped(range(UInt(0), UInt(-1)), ..seqs);
