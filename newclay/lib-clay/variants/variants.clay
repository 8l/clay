import values.*;
import meta.lltypes.*;
import meta.symbols.*;
import variants.representation.*;
import libc.(memset);


//
// VariantType
//

#VariantType(..'members) = (VariantType, ..'members);
#VariantType?('T) = SymbolWithTag?('T, VariantType);

#VariantMemberTypes('T) | VariantType?('T) = ..SymbolTagBody('T, VariantType);
#VariantMemberType?('T, 'M) | VariantType?('T)
    = inValues?('M, ..VariantMemberTypes('T));

#WithReprType('R) = (WithReprType, 'R);
#WithReprType?('V) = VariantType?('V) and SymbolWithTag?('V, WithReprType);

#VariantReprType('T) | VariantType?('T) and not WithReprType?('T)
    = TaggedUnionRepr[..VariantMemberTypes('T)];
overload #VariantReprType('T) | VariantType?('T) and WithReprType?('T)
    and ReprAcceptsMemberTypes?(SymbolTagBody('T, WithReprType)[..VariantMemberTypes('T)])
    = SymbolTagBody('T, WithReprType)[..VariantMemberTypes('T)];
overload #VariantReprType('T) | VariantType?('T) and WithReprType?('T)
    and not ReprAcceptsMemberTypes?(SymbolTagBody('T, WithReprType)[..VariantMemberTypes('T)])
    = StaticError("variant ", 'T, " representation ", SymbolTagBody('T, WithReprType),
        " does not accept member types ", (..VariantMemberTypes('T))
    );

#WithDefaultMemberType('T) = (WithDefaultMemberType, 'T);
#WithDefaultMemberType?('V) = VariantType?('V) and SymbolWithTag?('V, WithDefaultMemberType);

#VariantDefaultMemberType('T)
    | VariantType?('T) and WithDefaultMemberType?('T)
      and VariantMemberType?('T, SymbolTagBody('T, WithDefaultMemberType))
    = SymbolTagBody('T, WithDefaultMemberType);

overload #VariantDefaultMemberType('T)
    | VariantType?('T) and WithDefaultMemberType?('T)
      and not VariantMemberType?('T, SymbolTagBody('T, WithDefaultMemberType))
    = StaticError("variant ", 'T, " default member type ",
        SymbolTagBody('T, WithDefaultMemberType),
        " is not one of its member types ", (..VariantMemberTypes('T))
    );

overload #BitwiseZeroInitializedType?('V)
    | VariantType?('V) and WithDefaultMemberType?('V)
    = ReprZeroInitializedWithMemberType?(VariantReprType('V), VariantDefaultMemberType('V));

private repr(forward v:'T) | VariantType?('T) = forward bitcast(#VariantReprType('T), v);

overload #LLType('T) | VariantType?('T) = LLType(VariantReprType('T));

overload #InheritsPredicatesFromTypes('T) | VariantType?('T)
    = true, ..VariantMemberTypes('T);

overload 'T() returned:'T
    | VariantType?('T) and WithDefaultMemberType?('T)
{
    initializeRepr(repr(returned), (#VariantDefaultMemberType('T))());
}

overload 'T() returned:'T
    | VariantType?('T) and WithDefaultMemberType?('T) and BitwiseZeroInitializedType?('T)
{
    memset(OpaquePointer(&returned), 0_i32, TypeSize('T));
}

overload 'T(forward m:'M) returned:'T
    | VariantType?('T) and VariantMemberType?('T, 'M)
{
    initializeRepr(repr(returned), m);
}

overload dispatch(forward v:'T, forward fn) | VariantType?('T)
    = forward ..dispatchRepr(repr(v), fn);

overload destroyUnsafe(ref v:'T) | VariantType?('T) and not NotDestroyedType?('T) {
    dispatchRepr(repr(v), destroyUnsafe);
}

overload resetUnsafe(ref v:'T) | VariantType?('T) and not NotResetType?('T) {
    dispatchRepr(repr(v), resetUnsafe);
}

overload copy(v:'T) returned:'T | VariantType?('T) and not BitwiseCopiedType?('T) {
    copyRepr(repr(returned), repr(v));
}

overload moveUnsafe(ref v:'T) returned:'T | VariantType?('T) and not BitwiseMovedType?('T) {
    moveRepr(repr(returned), repr(v));
}
