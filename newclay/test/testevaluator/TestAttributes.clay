import __primitives__.*;


//
// MapValues
//

symbol MapValues = ();
static overload MapValues('f, 'first, ...'rest) = 'f('first), ...MapValues('f, ...'rest);
static overload MapValues('f) = ;



//
// clay types as symbols
//

symbol Bool = ();
symbol Int = ();
symbol Array['T, 'n] = ();
symbol Tuple[...'T] = ();

symbol String = ();


symbol TupleWithTag? = ();
static overload TupleWithTag?('x, 'tag) =
    StaticTuple?('x)
    and StaticLesser?(0, StaticTupleSize('x))
    and StaticEquals?(StaticTupleElement('x, 0), 'tag);



//
// record types
//

symbol RecordTag = ();

symbol RecordType = ();
static overload RecordType(...'fields) =
    (RecordTag, FieldNames(...'fields), FieldTypes(...'fields));

symbol FieldNames = ();
static overload FieldNames(...'fields) =
    (...MapValues(f => StaticTupleElement(f, 0), ...'fields));

symbol FieldTypes = ();
static overload FieldTypes(...'fields) =
    (...MapValues(f => StaticTupleElement(f, 1), ...'fields));

symbol Record? = ();
static overload Record?('t) =
    StaticSymbol?('t)
    and TupleWithTag?(StaticSymbolBody('t), RecordTag);

symbol RecordFieldCount = ();
static overload RecordFieldCount('t) | Record?('t) =
    StaticTupleSize(StaticTupleElement(StaticSymbolBody('t), 1));

symbol RecordFieldNames = ();
static overload RecordFieldNames('t) | Record?('t) =
    StaticTupleElement(StaticSymbolBody('t), 1);

symbol RecordFieldTypes = ();
static overload RecordFieldTypes('t) | Record?('t) =
    StaticTupleElement(StaticSymbolBody('t), 2);



//
// variant types
//

symbol VariantTag = ();

symbol VariantType = ();
static overload VariantType(...'members) = (VariantTag, (...'members));

symbol Variant? = ();
static overload Variant?('t) = 
    StaticSymbol?('t)
    and TupleWithTag?(StaticSymbolBody('t), VariantTag);

symbol VariantMembers = ();
static overload VariantMembers('t) | Variant?('t) = (
    ...StaticTupleElements(StaticTupleElement(StaticSymbolBody('t), 1)),
    ...StaticTupleElements(StaticSymbolAttributes('t)),
);



//
// testing
//

symbol GenericError = RecordType(
    ("msg", String),
);

symbol Exception = VariantType(GenericError);

symbol AssertionError = RecordType(
    ("condition", String),
    ("msg", String),
);

attribute Exception = AssertionError;

symbol Main = ();
static overload Main() = (
    Variant?(String),
    Variant?(Exception),
    VariantMembers(Exception)
);
