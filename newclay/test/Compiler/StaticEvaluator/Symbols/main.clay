import show.(show);
import __primitives__.*;


//
// MapValues
//

symbol MapValues;
overload #MapValues('f, 'first, ..'rest) = 'f('first), ..MapValues('f, ..'rest);
overload #MapValues('f) = ;



//
// clay types as symbols
//

private  #_SymbolBody() = ();
overload #_SymbolBody('x, ..'y) = 'x;

#SymbolBody('t) = _SymbolBody(..staticSymbolBody('t));

symbol Bool;
symbol Int;
symbol Array['T, 'n];
symbol Tuple[..'T];

symbol RecordTag;

symbol RecordType;
overload #RecordType(..'fields) = (RecordTag, FieldNames(..'fields), FieldTypes(..'fields));

symbol FieldNames;
overload #FieldNames(..'fields) = (..MapValues([f => staticTupleElement(f, 0)], ..'fields));

symbol FieldTypes;
overload #FieldTypes(..'fields) = (..MapValues([f => staticTupleElement(f, 1)], ..'fields));

symbol Record?;
overload #Record?('t) =
    staticSymbol?('t)
    and TupleWithTag?(SymbolBody('t), RecordTag);

symbol TupleWithTag?;
overload #TupleWithTag?('x, 'tag) =
    staticTuple?('x)
    and staticLesser?(0, staticTupleSize('x))
    and staticEquals?(staticTupleElement('x, 0), 'tag);

symbol RecordFieldCount;
overload #RecordFieldCount('t) | Record?('t) =
    staticTupleSize(staticTupleElement(SymbolBody('t), 1));

symbol RecordFieldNames;
overload #RecordFieldNames('t) | Record?('t) =
    staticTupleElement(SymbolBody('t), 1);

symbol RecordFieldTypes;
overload #RecordFieldTypes('t) | Record?('t) =
    staticTupleElement(SymbolBody('t), 2);


symbol Point['T] = RecordType(
    ("x", 'T),
    ("y", 'T),
);

symbol RecordInfo;
overload #RecordInfo('t) | Record?('t) =
    ('t, RecordFieldNames('t), RecordFieldTypes('t));

symbol Main;
overload #Main() = RecordInfo(Point[Int]);

main() { show(..#Main()); }
