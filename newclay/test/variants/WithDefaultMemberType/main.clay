import variants.*;
import show.*;
import unsafe.valuesemantics.(BitwiseZeroInitialized?);

symbol Foo = VariantType(Int, Char), WithDefaultMemberType(Int);
symbol Bar = VariantType(Char, Int), WithDefaultMemberType(Int);

symbol Nint = NewType(Int);
overload Nint() = Nint(22);
overload show(x:Nint) { show("Nint", *x); }

symbol Bas = VariantType(Nint, Char), WithDefaultMemberType(Nint);

main() {
    show(#BitwiseZeroInitialized?(Foo)); ////true
    show(#BitwiseZeroInitialized?(Bar)); ////false
    show(#BitwiseZeroInitialized?(Bas)); ////false

    var foo = Foo();
    var bar = Bar();
    var bas = Bas();

    dispatch(foo, show); ////0
    dispatch(bar, show); ////0
    ////Nint
    ////22
    dispatch(bas, show);
}
