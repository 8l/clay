import __primitives__.*;
import __main__.(main);


//
// NewStaticFunction, StaticFunction?
//

symbol StaticFunctionTag = ();
symbol NewStaticFunction = NewStaticFunction();
static overload NewStaticFunction() = (StaticFunctionTag,);

symbol StaticFunction? = NewStaticFunction();
static overload StaticFunction?('x) =
    StaticSymbol?('x)
    and TupleWithTag?(StaticSymbolBody('x), StaticFunctionTag);



//
// TypeTemplate?, Type?
//

symbol TypeTemplate? = NewStaticFunction();
static overload TypeTemplate?('x) = false;

symbol Type? = NewStaticFunction();
static overload Type?('x) = false;



//
// ToLowLevelType
//

symbol ToLowLevelType = NewStaticFunction();

symbol LLSigned = ();
symbol LLUnsigned = ();

symbol LLBoolType = ();
symbol LLIntegerType['Signed, 'Bits] = ();
symbol LLFloatType['Bits] = ();
symbol LLPointerType['T] = ();
symbol LLArrayType['T, 'n] = ();
symbol LLTupleType[...'T] = ();
symbol LLUnionType[...'T] = ();


//
// PODType?
//

static PODType?('T) = true;


//
// NewPrimitiveType, PrimitiveType?

symbol PrimitiveTypeTag = ();
symbol NewPrimitiveType = NewStaticFunction();
static overload NewPrimitiveType() = (PrimitiveTypeTag,);

symbol PrimitiveType? = NewStaticFunction();
static overload PrimitiveType?('x) =
    StaticSymbol?('x)
    and TupleWithTag?(StaticSymbolBody('x), PrimitiveTypeTag);

static overload Type?('x) | PrimitiveType?('x) = true;



//
// Bool, Char, *Int32*, Float*
//

symbol Bool = NewPrimitiveType();
symbol Char  = NewPrimitiveType();
symbol Int8  = NewPrimitiveType();
symbol Int16 = NewPrimitiveType();
symbol Int32 = NewPrimitiveType();
symbol Int64 = NewPrimitiveType();
symbol UInt8  = NewPrimitiveType();
symbol UInt16 = NewPrimitiveType();
symbol UInt32 = NewPrimitiveType();
symbol UInt64 = NewPrimitiveType();
symbol Float32 = NewPrimitiveType();
symbol Float64 = NewPrimitiveType();

static overload ToLowLevelType(Bool) = LLBoolType;
static overload ToLowLevelType(Char) = LLIntegerType[LLUnsigned, 8];
static overload ToLowLevelType(Int8 ) = LLIntegerType[LLSigned,  8];
static overload ToLowLevelType(Int16) = LLIntegerType[LLSigned, 16];
static overload ToLowLevelType(Int32) = LLIntegerType[LLSigned, 32];
static overload ToLowLevelType(Int64) = LLIntegerType[LLSigned, 64];
static overload ToLowLevelType(UInt8 ) = LLIntegerType[LLUnsigned,  8];
static overload ToLowLevelType(UInt16) = LLIntegerType[LLUnsigned, 16];
static overload ToLowLevelType(UInt32) = LLIntegerType[LLUnsigned, 32];
static overload ToLowLevelType(UInt64) = LLIntegerType[LLUnsigned, 64];
static overload ToLowLevelType(Float32) = LLFloatType[32];
static overload ToLowLevelType(Float64) = LLFloatType[64];


//
// StringConstant
//

symbol StringConstant = ();
static overload Type?(StringConstant) = true;
static overload ToLowLevelType(StringConstant)
    = LLTupleType[("begin", Pointer[Char]), ("end", Pointer[Char])];


//
// Static[T]
//

symbol Static['T] = ();
static overload TypeTemplate?(Static) = true;
static overload Type?(Static['T]) = true;
static overload ToLowLevelType(Static['T]) = LLTupleType[];



//
// Pointer[T]
//

symbol Pointer['T] = ();
static overload TypeTemplate?(Pointer) = true;
static overload Type?(Pointer['T]) = true;
static overload ToLowLevelType(Pointer['T]) = LLPointerType['T];


//
// NewProcedure, Procedure?
//

symbol ProcedureTag = ();
symbol NewProcedure = NewStaticFunction();
static overload NewProcedure() = (ProcedureTag,);

symbol Procedure? = NewStaticFunction();
static overload Procedure?('x) =
    StaticSymbol?('x)
    and TupleWithTag?(StaticSymbolBody('x), ProcedureTag);



//
// TupleWithTag?
//

symbol TupleWithTag? = NewStaticFunction();
static overload TupleWithTag?('x, 'tag) =
    StaticTuple?('x)
    and StaticLesser?(0, StaticTupleSize('x))
    and StaticEquals?(StaticTupleElement('x, 0), 'tag);



//
// operators
//


plus(a:Int32) = a;

minus(a:Int32) returned:Int32 __c__ """
    *returned_ = -*a_;
""";

dereference(a:Pointer['T]) ref returned:'T __c__ """
    *returned_ = *a_;
""";

multiply(a:Int32, b:Int32) returned:Int32 __c__ """
    *returned_ = *a_ * *b_;
""";

divide(a:Int32, b:Int32) returned:Int32 __c__ """
    *returned_ = *a_ / *b_;
""";

remainder(a:Int32, b:Int32) returned:Int32 __c__ """
    *returned_ = *a_ % *b_;
""";

add(a:Int32, b:Int32) returned:Int32 __c__ """
    *returned_ = *a_ + *b_;
""";

subtract(a:Int32, b:Int32) returned:Int32 __c__ """
    *returned_ = *a_ - *b_;
""";

lesser?(a:Int32, b:Int32) returned:Bool __c__ """
    *returned_ = *a_ < *b_;
""";

lesserEquals?(a:Int32, b:Int32) returned:Bool __c__ """
    *returned_ = *a_ <= *b_;
""";

greater?(a:Int32, b:Int32) returned:Bool __c__ """
    *returned_ = *a_ > *b_;
""";

greaterEquals?(a:Int32, b:Int32) returned:Bool __c__ """
    *returned_ = *a_ >= *b_;
""";

equals?(a:Int32, b:Int32) returned:Bool __c__ """
    *returned_ = *a_ == *b_;
""";

notEquals?(a:Int32, b:Int32) returned:Bool __c__ """
    *returned_ = *a_ != *b_;
""";

assign(ref a, b)                  { a <-- b; }
addAssign(ref a:Int32, b:Int32)       { a <-- add(a, b); }
subtractAssign(ref a:Int32, b:Int32)  { a <-- subtract(a, b); }
multiplyAssign(ref a:Int32, b:Int32)  { a <-- multiply(a, b); }
divideAssign(ref a:Int32, b:Int32)    { a <-- divide(a, b); }
remainderAssign(ref a:Int32, b:Int32) { a <-- remainder(a, b); }

//
// destroyUnsafe, initializeFromUnsafe
//

primitiveCopy(ref y, x) __c__ """*y_ = *x_;""";

initializeFromUnsafe(ref y, x) { primitiveCopy(y, x); }
destroyUnsafe(ref x) {}

//
// callMain
//

callMain() Int32 { main(); return 0; }
