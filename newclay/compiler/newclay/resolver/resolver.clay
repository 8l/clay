import newclay.ast as ast;
import newclay.core.*;
import maybe.*;

procedure resolveAST;

alias DummyValue = Value(BoolValue(false));

private record ResolveASTVisitor(env:EnvParent);

[E | VariantMember?(EnvParent, E)]
overload ResolveASTVisitor(e:E) = ResolveASTVisitor(EnvParent(e));

private newVisitor(parent:ResolveASTVisitor) = ResolveASTVisitor(newEnv(parent.env));

private addArgument(env, arg:ast.StaticArgument) {
}
overload addArgument(env, arg:ast.BoundArgument) {
    envAdd(env, arg.name, DummyValue);
}

private bindArgumentList(env:Env, argList) {
    for (arg in argList.items)
        addArgument(env, *arg);
    maybe(argList.variadicItem, arg ref=> {
        addArgument(env, *arg);
    });
}

private addBindingName(r, subenv:Env, bindingName) {
    visitAST(r, bindingName.type);
    envAdd(subenv, bindingName.name, DummyValue);
}

private addBindingList(r, subenv:Env, bindingList:ast.SingleBindingList) {
    for (binding in bindingList) {
        visitAST(r, binding.value);
        addBindingName(r, subenv, binding.name);
    }
}

overload addBindingList(r, subenv:Env, bindingList:ast.MultipleBindingList) {
    visitAST(r, bindingList.values);
    for (bindingName in bindingList.names.items)
        addBindingName(r, subenv, bindingName);
    maybe(bindingList.names.variadicItem, bindingName ref=> {
        addBindingName(r, subenv, bindingName);
    });
}

overload visitASTNode(r:ResolveASTVisitor, lambda:ast.LambdaExpr) {
    visitAST(r, lambda.predicate);
    visitAST(r, lambda.args);

    var subenv = newEnv(r.env);
    bindArgumentList(subenv, lambda.args);

    var subr = ResolveASTVisitor(subenv);
    visitAST(subr, lambda.body);
}

overload visitASTNode(r:ResolveASTVisitor, oload:ast.Overload) {
    visitAST(r, oload.definition.predicate);
    visitAST(r, oload.target);
    visitAST(r, oload.definition.args);

    var subenv = newEnv(r.env);
    bindArgumentList(subenv, oload.definition.args);

    maybe(oload.definition.returnedNames, returnedNames ref=> {
        for (ret in returnedNames)
            envAdd(subenv, ret, DummyValue);
    });

    var subr = ResolveASTVisitor(subenv);

    visitAST(subr, oload.definition.returns);
    visitAST(subr, oload.definition.body);
}

overload visitASTNode(r:ResolveASTVisitor, nameRef:ast.NameRef) {
    if (variantIs?(nameRef.env, ast.UnresolvedEnvRef))
        nameRef.env = match(privateLookup(r.env, nameRef.name),
            Value, v => match(v,
                SymbolHead,   h => ast.EnvRef(ast.ModuleEnvRef(h.module.name, h.astName.name.str)),
                Symbol,       s => ast.EnvRef(ast.ModuleEnvRef(s.head.module.name, s.head.astName.name.str)),
                Primitive,    p => ast.EnvRef(ast.ModuleEnvRef(primitivesModuleName, primitiveName(p))),
                ModuleValue,  m => maybe(m.module,
                    module => ast.EnvRef(ast.ModuleAliasRef(module.name)),
                    () => ast.EnvRef(ast.ModulePathRef(nameRef.name)),
                ),
                MatchDefault, x => ast.EnvRef(ast.LocalEnvRef()),
            ),
            MatchDefault, x => ast.EnvRef(ast.LocalEnvRef()),
        );
}

overload visitASTNode(r:ResolveASTVisitor, nameRef:ast.SimpleNameRef) {
    if (variantIs?(nameRef.env, ast.UnresolvedEnvRef))
        nameRef.env = match(privateLookup(r.env, nameRef.name),
            Value, v => match(v,
                SymbolHead,   h => ast.EnvRef(ast.ModuleEnvRef(h.module.name, h.astName.name.str)),
                Symbol,       s => ast.EnvRef(ast.ModuleEnvRef(s.head.module.name, s.head.astName.name.str)),
                Primitive,    p => ast.EnvRef(ast.ModuleEnvRef(primitivesModuleName, primitiveName(p))),
                ModuleValue,  m => maybe(m.module,
                    module => ast.EnvRef(ast.ModuleAliasRef(module.name)),
                    () => ast.EnvRef(ast.ModulePathRef(Vector[ast.Identifier](nameRef.name))),
                ),
                MatchDefault, x => ast.EnvRef(ast.LocalEnvRef()),
            ),
            MatchDefault, x => ast.EnvRef(ast.LocalEnvRef()),
        );
}

overload visitASTNode(r:ResolveASTVisitor, block:ast.Block) {
    var subenv = newEnv(r.env);
    maybe(block.label, label ref=> {
        envAdd(subenv, label.name, DummyValue);
    });

    visitAST(ResolveASTVisitor(subenv), block.statements);
}

overload visitASTNode(r:ResolveASTVisitor, stmt:ast.IfStatement) {
    visitAST(r, stmt.condition);
    visitAST(newVisitor(r), stmt.thenBody);
    maybe(stmt.elseBody, elseBody ref=> { visitAST(newVisitor(r), elseBody); });
}

overload visitASTNode(r:ResolveASTVisitor, stmt:ast.SwitchStatement) {
    visitAST(r, stmt.value);
    for (caseBlock in stmt.caseBlocks) {
        visitAST(r, caseBlock.values);
        visitAST(newVisitor(r), caseBlock.body);
    }
    maybe(stmt.defaultBlock, defaultBlock ref=> { visitAST(newVisitor(r), defaultBlock); });
}

overload visitASTNode(r:ResolveASTVisitor, stmt:ast.WhileStatement) {
    visitAST(r, stmt.condition);

    var subenv = newEnv(r.env);
    maybe(stmt.label, label ref=> {
        envAdd(subenv, label.name, DummyValue);
    });
    visitAST(ResolveASTVisitor(subenv), stmt.body);
}

overload visitASTNode(r:ResolveASTVisitor, stmt:ast.ForStatement) {
    visitAST(r, stmt.sequenceValue);

    var subenv = newEnv(r.env);
    maybe(stmt.label, label ref=> {
        envAdd(subenv, label.name, DummyValue);
    });
    bindArgumentList(subenv, stmt.bodyBindings);

    visitAST(ResolveASTVisitor(subenv), stmt.body);
}

overload visitASTNode(r:ResolveASTVisitor, stmt:ast.StaticForStatement) {
    visitAST(r, stmt.values);

    var subenv = newEnv(r.env);
    maybe(stmt.label, label ref=> {
        envAdd(subenv, label.name, DummyValue);
    });
    envAdd(subenv, stmt.bodyBinding, DummyValue);

    visitAST(ResolveASTVisitor(subenv), stmt.body);
}

overload visitASTNode(r:ResolveASTVisitor, block:ast.CatchBlock) {
    var subenv = newEnv(r.env);
    addBindingName(r, subenv, block.binding);
    visitAST(ResolveASTVisitor(subenv), block.body);
}

overload visitASTNode(r:ResolveASTVisitor, stmt:ast.BindingStatement) {
    addBindingList(r, variantAs(r.env, Env), *stmt.bindings);
}

overload resolveAST(e:EnvParent, a) {
    visitAST(ResolveASTVisitor(e), a);
}
