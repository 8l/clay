import __primitives__.*;


//
// NewStaticFunction, StaticFunction?
//

symbol StaticFunctionTag = ();
symbol NewStaticFunction = NewStaticFunction();
overload #NewStaticFunction() = (StaticFunctionTag,);

symbol StaticFunction? = NewStaticFunction();
overload #StaticFunction?('x) =
    StaticSymbol?('x)
    and TupleWithTag?(StaticSymbolBody('x), StaticFunctionTag);



//
// TypeTemplate?, Type?
//

symbol TypeTemplate? = NewStaticFunction();
overload #TypeTemplate?('x) = false;

symbol Type? = NewStaticFunction();
overload #Type?('x) = false;



//
// LLType
//

symbol LLType = NewStaticFunction();

symbol LLSigned = ();
symbol LLUnsigned = ();

symbol LLBoolType = ();
symbol LLIntegerType['Signed, 'Bits] = ();
symbol LLFloatType['Bits] = ();
symbol LLPointerType['T] = ();
symbol LLArrayType['T, 'n] = ();
symbol LLTupleType[..'T] = ();
symbol LLUnionType[..'T] = ();



//
// NewPrimitiveType, PrimitiveType?

symbol PrimitiveTypeTag = ();
symbol NewPrimitiveType = NewStaticFunction();
overload #NewPrimitiveType() = (PrimitiveTypeTag,);

symbol PrimitiveType? = NewStaticFunction();
overload #PrimitiveType?('x) =
    StaticSymbol?('x)
    and TupleWithTag?(StaticSymbolBody('x), PrimitiveTypeTag);

overload #Type?('x) | PrimitiveType?('x) = true;



//
// Bool, Int
//

symbol Bool = NewPrimitiveType();
symbol Int = NewPrimitiveType();

overload #LLType(Bool) = LLBoolType;
overload #LLType(Int) = LLIntegerType[LLSigned, 32];



//
// Static[T]
//

symbol Static['T] = ();
overload #TypeTemplate?(Static) = true;
overload #Type?(Static['T]) = true;
overload #LLType(Static['T]) = LLTupleType[];



//
// Pointer[T]
//

symbol Pointer['T] = ();
overload #TypeTemplate?(Pointer) = true;
overload #Type?(Pointer['T]) = true;
overload #LLType(Pointer['T]) = LLPointerType['T];



//
// NewProcedure, Procedure?
//

symbol ProcedureTag = ();
symbol NewProcedure = NewStaticFunction();
overload #NewProcedure() = (ProcedureTag,);

symbol Procedure? = NewStaticFunction();
overload #Procedure?('x) =
    StaticSymbol?('x)
    and TupleWithTag?(StaticSymbolBody('x), ProcedureTag);



//
// TupleWithTag?
//

symbol TupleWithTag? = NewStaticFunction();
overload #TupleWithTag?('x, 'tag) =
    StaticTuple?('x)
    and StaticLesser?(0, StaticTupleSize('x))
    and StaticEquals?(StaticTupleElement('x, 0), 'tag);



//
// lesser?, subtract, multiply
//


symbol lesser? = NewProcedure();
overload lesser?(a:Int, b:Int) returned:Bool __c__ """
    *returned = *a < *b;
""";

symbol subtract = NewProcedure();
overload subtract(a:Int, b:Int) returned:Int __c__ """
    *returned = *a - *b;
""";

symbol multiply = NewProcedure();
overload multiply(a:Int, b:Int) returned:Int __c__ """
    *returned = *a * *b;
""";



