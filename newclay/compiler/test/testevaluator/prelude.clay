import __primitives__.*;

symbol Bar = "prelude";

#type?('x) = false;
overload #type?(Static['x]) = true;
#POD?('x) = false;

symbol typeAlign;

symbol llType;
symbol llTypeAlign;
symbol llSigned;
symbol llUnsigned;
symbol llBoolType;
symbol llIntegerType;
symbol llFloatType;
symbol llPointerType;
symbol llCodePointerType;
symbol llArrayType;
symbol llTupleType;
symbol llUnionType;
symbol llLiteralCType;

symbol Bool;
symbol Char;
symbol Int;
symbol Int8;
symbol Int16;
symbol Int32;
symbol Int64;
symbol UInt;
symbol UInt8;
symbol UInt16;
symbol UInt32;
symbol UInt64;
symbol Float32;
symbol Float64;
symbol Static['x];
symbol Pointer;
symbol CodePointer;
symbol ExternalCodePointer;
symbol StringConstant;

symbol Ref;
symbol Const;
symbol Rvalue;

symbol CdeclABI;
symbol StdcallABI;
symbol ABI?;
symbol ABISupportsVariadics?;

#plus('x) = staticPlus('x);
#minus('x) = staticMinus('x);
#call('f, ..'x) = 'f(..'x);
#index('a, ..'x) = 'a[..'x];
#staticIndex('a, 'x) = 'a['x];
#fieldRef('a, 'x) = staticModuleMember('a, 'x);
#unpack('a) = ..staticTupleElements('a);
symbol dereference;
#multiply('a, 'b) = staticMultiply('a, 'b);
symbol divide;
#quotient('a, 'b) = staticQuotient('a, 'b);
#remainder('a, 'b) = staticRemainder('a, 'b);
#add('a, 'b) = staticAdd('a, 'b);
#subtract('a, 'b) = staticSubtract('a, 'b);
#lesser?('a, 'b) = staticLesser?('a, 'b);
#lesserEquals?('a, 'b) = staticLesserEquals?('a, 'b);
#greater?('a, 'b) = staticGreater?('a, 'b);
#greaterEquals?('a, 'b) = staticGreaterEquals?('a, 'b);
#equals?('a, 'b) = staticEquals?('a, 'b);
#notEquals?('a, 'b) = staticNotEquals?('a, 'b);

symbol case?;

symbol iterator;
symbol hasFront?;
symbol front;
symbol incFront;

#tupleLiteral(..'x) = (..'x);

symbol assign;
symbol callAssign;
symbol updateAssign;
symbol updateCallAssign;

initializeFrom(..x) {}
destroy(..x) {}

symbol captureLambda;
symbol lambdaCaptures;

symbol callMain;

