

//
// top level
//

GlobalSymbol -> "symbol" Identifier SymbolParams? "=" Expr ";"
SymbolParams -> "[" variadic_list(PatternNameRef, PatternNameRef) "]"
SymbolAttribute -> "attribute" TargetPattern Predicate? "=" Expr ";"
StaticOverload -> "static" "overload" TargetPattern "(" ListPattern? ")"
                   Predicate? "=" ExprList ";"
Predicate -> "|" Expr



//
// patterns
//

ListPattern -> variadic_list(Pattern, PatternNameRef)
Pattern -> BoolLiteral
         | IntLiteral
         | StringLiteral
         | IndexingPattern
         | Identifier
         | PatternNameRef

IndexingPattern -> Identifier "[" ListPattern "]"

TargetPattern -> IndexingPattern
               | Identifier
               | PatternNameRef



//
// expressions
//

ExprList -> comma_list(ExprListItem)
ExprListItem -> "..." "(" ExprList ")"
              | "..." Expr
              | Expr

LiteralExpr -> BoolLiteral
             | IntLiteral
             | StringLiteral

AtomicExpr -> NameRef
            | PatternNameRef
            | BracketedExpr
            | TupleExpr

NameRef -> Identifier
PatternNameRef -> "'" Identifier
BracketedExpr -> "(" Expr ")"
TupleExpr -> "(" ExprList? ")"

SuffixExpr -> AtomicExpr Suffix*
Suffix -> IndexingSuffix
        | CallSuffix

IndexingSuffix -> "[" ExprList? "]"
CallSuffix -> "(" ExprList? "]"

AndExpr -> SuffixExpr ("and" SuffixExpr)*

OrExpr -> AndExpr ("or" AndExpr)*

LambdaExpr -> LambdaArgs "=>" ExprListItem
LambdaArgs -> Identifier
            | "(" variadic_list(Identifier, Identifier)? ")"

IfExpr -> "if" "(" Expr ")" Expr "else" Expr

Expr -> IfExpr
      | LambdaExpr
      | OrExpr



//
// misc
//

variadic_list(Head, Tail) -> "..." Tail
                           | comma_list(Head) ("," "..." Tail)?
