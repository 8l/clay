

//
// top level
//

TopLevelItem -> GlobalSymbol
              | SymbolAttribute
              | StaticOverload
              | Overload
              | Import
              | Procedure
              | StaticFunction
              | ExternalProcedure
              | GlobalBinding
              | GlobalLiteralCodeBody

Visibility -> "public" | "private"

NamePath -> Identifier ("." Identifier)*

Import -> Visibility? "import" NamePath ImportSpec? ";"
ImportSpec -> "as" Identifier
            | "." "*"
            | "." "(" comma_list(SpecificImportSpec) ")"
SpecificImportSpec -> Visibility? Identifier ("as" Identifier)?

SymbolName -> Identifier SymbolParams?

GlobalSymbol -> Visibility? "symbol" SymbolName "=" Expr ";"
SymbolParams -> "[" variadic_list(PatternNameRef, PatternNameRef) "]"
SymbolAttribute -> "attribute" TargetPattern Predicate? "=" Expr ";"

StaticOverloadDefinition -> "(" ListPattern? ")" Predicate? "=" ExprList ";"

StaticOverload -> "overload" "#" TargetPattern StaticOverloadDefinition

OverloadDefinition -> "(" ArgumentList? ")" ReturnList?
                      Predicate? CodeBody

OverloadAttributes -> "inline"?

Overload -> OverloadAttributes "overload" TargetPattern OverloadDefinition

StaticFunction -> Visibility? "#" SymbolName StaticOverloadDefinition

Procedure -> Visibility? OverloadAttributes SymbolName OverloadDefinition

ExternalProcedure -> Visibility? "external" ExternalAttributes? Identifier
                     ExternalArgumentList Expr? CodeBody

ExternalAttributes -> "(" ExprList ")"

ExternalArgumentList -> "(" variadic_list(Argument, ()) ")"

GlobalBinding -> Visibility? BindingKind SymbolName (":" Expr)? ("=" Expr)? ";"

GlobalLiteralCodeBody -> LiteralCodeBodyKind LiteralCodeBody ";"

Predicate -> "|" Expr

ArgumentList -> variadic_list2(Argument, MultiArgument)
Argument -> BoundArgument
          | StaticArgument;
BoundArgument -> ArgumentKind? Identifier (":" Pattern)?
StaticArgument -> "#" Pattern
MultiArgument -> ArgumentKind? ".." Identifier (":" PatternNameRef)?
ArgumentKind -> "const" | "ref" | "rvalue" | "forward" | "alias"

ReturnList -> NamedReturnList | UnnamedReturnList

NamedReturnList -> (NamedReturnSpec | NamedVariadicReturnSpec)+
NamedReturnSpec -> ReturnKind? Identifier ":" Expr
NamedVariadicReturnSpec -> ReturnKind? ".." Identifier ":" Expr

UnnamedReturnList -> (UnnamedReturnSpec | UnnamedVariadicReturnSpec)+
UnnamedReturnSpec -> ReturnKind? Expr
UnnamedVariadicReturnSpec -> ReturnKind? ".." Expr

ReturnKind -> "const" | "ref" | "rvalue"

CodeBody -> "=" ReturnExprList ";"
          | Block
          | LiteralCodeBodyKind LiteralCodeBody ";"
          | ";"

LiteralCodeBodyKind = "__c__" | "__asm__" | "__llvm__"

LiteralCodeBody -> """.*"""

ReturnExprList -> comma_list(ReturnExprListItem)
ReturnExprListItem -> ReturnExprKind? ExprListItem
ReturnExprKind -> "const" | "ref" | "rvalue" | "forward"



//
// patterns
//

ListPattern -> variadic_list(Pattern, PatternNameRef)
Pattern -> BoolLiteral
         | CharLiteral
         | IntLiteral
         | StringLiteral
         | IndexingPattern
         | TuplePattern
         | Identifier
         | PatternNameRef

IndexingPattern -> Identifier "[" ListPattern "]"

TuplePattern -> "(" ListPattern ")"

TargetPattern -> IndexingPattern
               | Identifier
               | PatternNameRef



//
// expressions
//

ExprList -> comma_list(ExprListItem)
ExprListItem -> ".." "(" ExprList ")"
              | ".." Expr
              | Expr

LiteralExpr -> BoolLiteral
             | CharLiteral
             | IntLiteral
             | FloatLiteral
             | StringLiteral

AtomicExpr -> LiteralExpr
            | SimpleNameRef
            | PatternNameRef
            | BracketedExpr
            | TupleExpr

NameRef -> NamePath
SimpleNameRef -> Identifier
PatternNameRef -> "'" Identifier
BracketedExpr -> "(" Expr ")"
TupleExpr -> "(" ExprList? ")"

PrefixExpr -> SignExpr
            | UnpackExpr
            | AddressOfExpr
            | SuffixExpr
            | StaticExpr

SignExpr -> ("+" | "-") PrefixExpr
UnpackExpr -> "*" PrefixExpr
AddressOfExpr -> "&" PrefixExpr
StaticExpr -> "#" PrefixExpr

SuffixExpr -> AtomicExpr Suffix*
Suffix -> IndexingSuffix
        | StaticIndexingSuffix
        | FieldRefSuffix
        | CallSuffix
        | DereferenceSuffix

IndexingSuffix -> "[" ExprList? "]"
StaticIndexingSuffix -> "." IntLiteral
FieldRefSuffix -> "." Identifier
CallSuffix -> "(" ExprList? ")"
DereferenceSuffix -> "^"

MulDivExpr -> PrefixExpr (("*" | "/" | "div" | "mod") PrefixExpr)*

AddSubExpr -> MulDivExpr (("+" | "-") MulDivExpr)*

CompareExpr -> AddSubExpr (("<" | "<=" | ">=" | ">") AddSubExpr)?

EqualityExpr -> CompareExpr (("==" | "!=") CompareExpr)?

NotExpr -> "not"? EqualityExpr

AndExpr -> NotExpr ("and" NotExpr)*

OrExpr -> AndExpr ("or" AndExpr)*

LambdaCodeBody -> ExprListItem
                | Block

LambdaExpr -> LambdaArgs ("=>" | "->") LambdaCodeBody
LambdaArgs -> Identifier
            | "(" ArgumentList ")"

IfExpr -> "if" "(" Expr ")" Expr "else" Expr

PairExpr -> identifier ":" Expr

ThrowExpr -> "throw" Expr

Expr -> PairExpr
      | IfExpr
      | LambdaExpr
      | OrExpr
      | ThrowExpr


//
// statements
//

Block -> LabelDef? "{" Statement* "}"

Statement -> Block
           | BindingStatement
           | Assignment
           | GotoStatement
           | ReturnStatement
           | BreakStatement
           | ContinueStatement
           | IfStatement
           | ForStatement
           | StaticForStatement
           | WhileStatement
           | SwitchStatement
           | TryStatement
           | ExprStatement

LabelDef -> "@" Identifier

BindingStatement -> BindingKind BindingList ";"

Assignment -> ExprList AssignmentOp ExprList ";"
AssignmentOp -> "<--" | "=" | "+=" | "-=" | "*=" | "/=" | "div" "=" | "mod" "="

GotoStatement -> "goto" Identifier ";"

ReturnStatement -> "return" ReturnExprList? ";"

BreakStatement -> "break" ("@" Identifier)? ";"

ContinueStatement -> "continue" ("@" Identifier)? ";"

IfStatement -> "if" "(" Expr ")" Statement
               ("else" Statement)?

ForStatement -> LabelDef? "for" "(" ArgumentList "in" Expr ")" Statement

StaticForStatement -> LabelDef? "static" "for" "(" Identifier "in" ExprList ")" Statement

WhileStatement -> LabelDef? "while" "(" Expr ")" Statement

SwitchStatement -> "switch" "(" Expr ")"
                   ("case" "(" ExprList ")" Statement)+
                   ("else" Statement)?

TryStatement -> "try" Block ("catch" "(" BindingName ")" Block)+

ExprStatement -> Expr ";"


//
// variable binding
//

BindingKind -> "var" | "const" | "ref" | "rvalue" | "forward" | "alias"

BindingName -> Identifier (":" Expr)?

SingleBinding -> BindingName "=" Expr

BindingList -> comma_list(SingleBinding)
             | variadic_list(BindingName, Identifier) ("=" ExprList)?


//
// interactor input

InteractorInput -> InteractorImport
                 | ExprList

InteractorImport -> "import" NamePath ImportSpec? ";"


//
// misc
//

variadic_list(Head, Tail) -> variadic_list2(Head, ".." Tail)

variadic_list2(Head, Tail) -> Tail
                            | comma_list(Head) ("," Tail)?
