
import maybe.*;
import newclay.common.*;
import newclay.lexer.(SourceTokens);
import newclay.ast as ast;
import newclay.diagnostics.*;
import newclay.ir as ir;



//
// Program
//

alias ModuleMap = HashMap[String, Module];

record Program = referenceType(
    modules: ModuleMap,
    allAttributes: Vector[Attribute],
    allStaticOverloads: Vector[StaticOverload],
    allOverloads: Vector[Overload],
    hooks: ClayHooks,
    lowLevelProgram: ir.Program,
    lowLevelNames: NameAllocator,
);

overload Program() = Program(
    ModuleMap(), Vector[Attribute](),
    Vector[StaticOverload](), Vector[Overload](),
    ClayHooks(),
    ir.newProgram(),
    NameAllocator(),
);

mainModule(program:Program) = ref program.modules[String("__main__")];
primitivesModule(program:Program) = ref program.modules[String("__primitives__")];

record ClayHooks (
    TypeTemplate?: Value,
    Type?: Value,

    ToLowLevelType: Value,
    LLSigned: Value,
    LLUnsigned: Value,
    LLBoolType: Value,
    LLIntegerType: Value,
    LLFloatType: Value,
    LLPointerType: Value,
    LLArrayType: Value,
    LLTupleType: Value,
    LLUnionType: Value,

    Bool: Value,
    Int: Value,
    Static: Value,
    Pointer: Value,

    Procedure?: Value,
);



//
// Module
//

record Module = referenceType(
    program: Program,
    name: String,
    ast: ast.SourceAST,
    globals: Env,
);

overload Module(program:Program, name:String) =
    Module(program, name, ast.SourceAST(), Env());



//
// top-level item entries
//

record SymbolHead = referenceType(
    ast: ast.Symbol,
    module: Module,
    symbols: HashMap[ValueList, Symbol],
    typeTemplate?: TriState[Bool],
    invokeTable: InvokeTable,
);

overload SymbolHead(x:ast.Symbol, module:Module) =
    SymbolHead(
        x, module, HashMap[ValueList, Symbol](),
        TriState[Bool](), InvokeTable(),
    );

symbolHeadHasParams?(x:SymbolHead) {
    ref p = x.ast.params;
    return not (empty?(p.items) and nothing?(p.variadicItem));
}

record Symbol = referenceType(
    head: SymbolHead,
    params: ValueList,
    env: Env,
    body: TriState[Value],
    attributes: TriState[Value],
    type?: TriState[Bool],
    procedure?: TriState[Bool],
    invokeTable: InvokeTable,
    lowLevelType: Maybe[ir.Type],
);

overload Symbol(head:SymbolHead, params:ValueList, env:Env) =
    Symbol(
        head, params, env,
        TriState[Value](), TriState[Value](),
        TriState[Bool](), TriState[Bool](),
        InvokeTable(),
        nothing(ir.Type),
    );

record PatternVars = referenceType(
    vars: Vector[ast.Identifier],
    variadicVars: Vector[ast.Identifier],
);

record Attribute = referenceType(
    ast: ast.Attribute,
    module: Module,
    patternVars: Maybe[PatternVars],
);

overload Attribute(x:ast.Attribute, module:Module) =
    Attribute(x, module, nothing(PatternVars));

record StaticOverload = referenceType(
    ast: ast.StaticOverload,
    module: Module,
    patternVars: Maybe[PatternVars],
);

overload StaticOverload(x:ast.StaticOverload, module:Module) =
    StaticOverload(x, module, nothing(PatternVars));

record Overload = referenceType(
    ast: ast.Overload,
    module: Module,
    patternVars: Maybe[PatternVars],
);

overload Overload(x:ast.Overload, module:Module) =
    Overload(x, module, nothing(PatternVars));



//
// primitives
//

enum PrimitiveKind {
    PRIM_StaticInt?,
    PRIM_StaticAdd,
    PRIM_StaticSubtract,
    PRIM_StaticMultiply,
    PRIM_StaticDivide,
    PRIM_StaticRemainder,
    PRIM_StaticIntegers,

    PRIM_StaticBool?,
    PRIM_StaticEquals?,
    PRIM_StaticLesser?,

    PRIM_StaticString?,
    PRIM_StaticStringSize,
    PRIM_StaticStringSlice,
    PRIM_StaticStringConcat,

    PRIM_StaticTuple?,
    PRIM_StaticTuple,
    PRIM_StaticTupleSize,
    PRIM_StaticTupleElement,
    PRIM_StaticTupleElements,

    PRIM_StaticSymbol?,
    PRIM_StaticSymbolBody,
    PRIM_StaticSymbolAttributes,
}

record Primitive = referenceType(
    kind: PrimitiveKind,
);

primitiveName(kind) {
    var s = printString(kind);
    assert(beginsWith?(s, "PRIM_"));
    return sliceFrom(s, size("PRIM_"));
}



//
// environment
//

variant EnvEntry = Value
                 | ValueList
                 | PatternCell
                 | ListPatternCell
                 | RTVariable
                 | RTListVariable
                 ;
 
overload EnvEntry() = EnvEntry(Value());

variant EnvParent = EnvRoot | Env;

record AmbiguousEntry (modules: Vector[Tuple[Module, EnvEntry]]);
instance Exception = AmbiguousEntry;

variant EnvRootEntry = EnvEntry | AmbiguousEntry;
overload EnvRootEntry() = EnvRootEntry(AmbiguousEntry());

record EnvRoot (
    generalImports: Vector[Module],
    specificImports: HashMap[String, EnvEntry],
    entries: Maybe[HashMap[String, EnvRootEntry]],
);

private addGeneralEnvRootEntry(entries, entryName, entryList) {
    switch (size(entryList)) {
    case 0:
        return;
    case 1:
        entries[entryName] = EnvRootEntry(entryList[0].1);
        return;
    default:
        entries[entryName] = EnvRootEntry(AmbiguousEntry(entryList));
        return;
    }
}

private addGeneralEnvRootEntries(entries, generalImports) {
    var generalEntries = HashMap[String, Vector[Tuple[Module, EnvEntry]]]();
    for (module in generalImports)
        for (entryName, entry in items(module.globals.entries))
            push(generalEntries[entryName], (module, entry));

    for (entryName, entryList in items(generalEntries))
        addGeneralEnvRootEntry(entries, entryName, entryList);
}

private addSpecificEnvRootEntries(entries, specificImports) {
    for (entryName, entry in items(specificImports))
        entries[entryName] = EnvRootEntry(entry);
}

envRootEntries(envRoot: EnvRoot) = maybe(envRoot.entries,
    entries ref=> ref entries,
    () ref=> {
        envRoot.entries = Maybe(HashMap[String, EnvRootEntry]());
        ref entries = just(envRoot.entries);
        addGeneralEnvRootEntries(entries, envRoot.generalImports);
        addSpecificEnvRootEntries(entries, envRoot.specificImports);
        return ref entries;
    },
);

record Env = referenceType(
    parent: EnvParent,
    entries: HashMap[String, EnvEntry],
);

overload Env(parent:EnvParent) =
    Env(parent, HashMap[String, EnvEntry]());

newEnv(parent:Env) = Env(EnvParent(parent));
overload newEnv(root: EnvRoot) = Env(EnvParent(root));
overload newEnv() = Env(EnvParent(EnvRoot()));



//
// envAdd, envLookup
//

envAdd(env, name, forward entry) {
    if (contains?(env.entries, name.str))
        genericError("name redefinition: ", name.str);
    env.entries[name.str] = EnvEntry(entry);
}

procedure envLookup;

overload envLookup(env:Env, name:String) {
    var ptr = lookup(env.entries, name);
    if (null?(ptr))
        return ref envLookup(env.parent, name);
    return ref ptr^;
}

[T] private pretendToReturnRef(static T, f) { if (true) f(); else return ref typeToLValue(T); }

private envRootEntryLookup(entry:EnvEntry) = ref entry;
overload envRootEntryLookup(entry:AmbiguousEntry) {
    pretendToReturnRef(EnvEntry, () => { throw entry; });
}

overload envLookup(envRoot:EnvRoot, name:String) {
    ref entries = envRootEntries(envRoot);
    var ptr = lookup(entries, name);
    if (null?(ptr))
        throw GenericError(printString("name not found: ", name));
    else
        return ref envRootEntryLookup(*ptr^);
}

overload envLookup(envParent:EnvParent, name:String) = ref envLookup(*envParent, name);

overload envLookup(env, name:ast.Identifier) {
    return ref envLookup(env, name.str);
}
overload envLookup(env, name:StringConstant) {
    return ref envLookup(env, String(name));
}



//
// ValueList
//

record ValueList(
    data: SharedPointer[Vector[Value]],
);

overload ValueList() = ValueList(new Vector[Value]());

[A | Sequence?(A) and (SequenceElementType(A) == Value)]
overload ValueList(forward a:A) = ValueList(new Vector[Value](a));

[...A | equalValues?(Value, ...A)]
callbyname overload ValueList(...elements:A) =
    ValueList(new Vector[Value](...elements));

[T | VariantMember?(Value, T)]
overload ValueList(forward x:T) = ValueList(Value(x));

overload size(x:ValueList) = size(x.data^);
overload index(x:ValueList, i) = ref index(x.data^, i);
overload begin(x:ValueList) = begin(x.data^);
overload end(x:ValueList) = end(x.data^);
overload iterator(x:ValueList) = iterator(x.data^);
overload push(x:ValueList, forward ...a) { push(x.data^, ...a); }
overload hash(x:ValueList) = hash(x.data^);
overload equals?(a:ValueList, b:ValueList) = equals?(a.data^, b.data^);
overload printTo(stream, x:ValueList) {
    printTo(stream, x.data^);
}



//
// Value
//

variant Value = BoolValue
              | IntValue
              | StringValue
              | TupleValue
              | LambdaValue

              | SymbolHead
              | Symbol
              | Primitive
              ;

overload Value() = Value(BoolValue());

record BoolValue(value: Bool);
record IntValue(value: Int);
record StringValue(value: String);
record TupleValue(elements: ValueList);
record LambdaValue(value: ast.LambdaExpr, env: Env);



//
// print Value
//

overload printTo(stream, x:Value) {
    printTo(stream, *x);
}
overload printTo(stream, x:BoolValue) {
    printTo(stream, x.value);
}
overload printTo(stream, x:IntValue) {
    printTo(stream, x.value);
}
overload printTo(stream, x:StringValue) {
    printReprTo(stream, x.value);
}
overload printTo(stream, x:TupleValue) {
    printTo(stream, "(");
    var commaOut = CommaListPrinter(&stream);
    for (element in x.elements)
        newItem(commaOut, element);
    printTo(stream, ")");
}
overload printTo(stream, x:LambdaValue) {
    printTo(stream, "<lambda>");
}
overload printTo(stream, x:SymbolHead) {
    printTo(stream, x.ast.name.str);
}
overload printTo(stream, x:Symbol) {
    printTo(stream, x.head.ast.name.str);
    if (not empty?(x.params))
        printTo(stream, x.params);
}
overload printTo(stream, x:Primitive) {
    printTo(stream, primitiveName(x.kind));
}

[T | VariantMember?(Value, T)]
overload printReprTo(stream, x:T) {
    printTo(stream, x);
}

overload printReprTo(stream, x:Value) {
    printReprTo(stream, *x);
}



//
// Pattern
//

variant Pattern = Value
                | PatternCell
                | SymbolPattern
                ;
         
record PatternCell = referenceType(
    value: Maybe[Value]
);

record SymbolPattern = referenceType(
    head: SymbolHead,
    params: ListPattern,
);

overload Pattern() = Pattern(Value());



//
// ListPattern
//

record ListPattern = referenceType(
    patterns: Vector[Pattern],
    variadicPattern: ListPatternCell,
);

record ListPatternCell = referenceType(
    values: Maybe[ValueList],
);



//
// RTVariable, RTListVariable
//

enum RTVariableKind {
    RT_VARIABLE_CONST,
    RT_VARIABLE_REF,
    RT_VARIABLE_RVALUE,
}

record RTVariable = referenceType(
    kind: RTVariableKind,
    type: Value,
    lowLevelLocal: ir.Local,
);

overload RTVariable(kind:RTVariableKind, type:Value) =
    RTVariable(kind, type, ir.Local());

record RTListVariable = referenceType(
    kinds: Vector[RTVariableKind],
    types: ValueList,
    lowLevelLocals: Vector[ir.Local],
);

overload RTListVariable(forward kinds:Vector[RTVariableKind], forward types:ValueList) =
    RTListVariable(kinds, types, Vector[ir.Local]());



//
// RTResult, RTResultList
//

enum RTResultKind {
    RT_RESULT_CONST,
    RT_RESULT_REF,
    RT_RESULT_RVALUE,
    RT_RESULT_VALUE,
}

record RTResult (
    kind: RTResultKind,
    type: Value,
);

alias RTResultList = Vector[RTResult];

rtResultKindString(x:RTResultKind) {
    switch (x) {
    case RT_RESULT_CONST: return "const";
    case RT_RESULT_REF: return "ref";
    case RT_RESULT_RVALUE: return "rvalue";
    case RT_RESULT_VALUE: return "value";
    default : assert(false); return "";
    }
}

overload printReprTo(stream, x:RTResult) {
    printTo(stream, rtResultKindString(x.kind));
    printTo(stream, " ");
    printReprTo(stream, x.type);
}



//
// Specialization, InvokeTable
//

variant NamedReturn = RTVariable
                    | RTListVariable
                    ;

record Specialization = referenceType(
    matchedOverload: Overload,
    callable: Value,
    args: RTResultList,
    internalArgs: Vector[RTVariable],
    internalVariadicArg: Maybe[RTListVariable],
    bodyEnv: Env,
    namedReturns: Vector[NamedReturn],
    returns: RTResultList,
    lowLevelProc: Maybe[ir.Procedure],
);

overload Specialization(matchedOverload:Overload, callable:Value) {
    var s = allocateRef(Specialization);
    s.matchedOverload = matchedOverload;
    s.callable = callable;
    return move(s);
}

record InvokeEntry(
    specialization: Maybe[Specialization],
);

alias InvokeTable = HashMap[RTResultList, InvokeEntry];



//
// safeInitialize
//

[T]
safeInitialize(x:TriState[T], initializer) {
    return triStateInitialize(x, initializer, () => {
        genericError("recursion during initialization");
    });
}



//
// program stack
//

private var _programStack = Stack[Program]();

withProgram(program:Program, f) =
    forward ...withStackValue(_programStack, program, f);

getProgram() = ref stackTop(_programStack);
getProgramMainModule() = ref mainModule(getProgram());
getHooks() = ref getProgram().hooks;



//
// location stack
//

record LocationEntry (
    tokens: SourceTokens,
    where: SizeT,
);

private var _locationStack = Stack[LocationEntry]();

withLocation(node, f) {
    var x = ast.getLocation(node);
    if (null?(x.tokens) or empty?(x.tokenRange))
        return forward ...f();
    var entry = LocationEntry(x.tokens, x.mainToken);
    return forward ...withStackValue(_locationStack, entry, f);
}



//
// compilation stack
//

variant CompilationEntry = StaticCallEntry
                         | CallAnalysisEntry
                         | CallCompilationEntry
                         ;

record StaticCallEntry (
    callable: Value,
    args: ValueList,
);

record CallAnalysisEntry (
    callable: Value,
    args: RTResultList,
);

record CallCompilationEntry (
    callable: Value,
    args: RTResultList,
);

overload printTo(stream, x:StaticCallEntry) {
    printTo(stream, "eval: ");
    printReprTo(stream, x.callable);
    printTo(stream, "(");
    printReprElementsTo(stream, x.args);
    printTo(stream, ")");
}

overload printTo(stream, x:CallAnalysisEntry) {
    printTo(stream, "analyze: ");
    printReprTo(stream, x.callable);
    printTo(stream, "(");
    printReprElementsTo(stream, x.args);
    printTo(stream, ")");
}

overload printTo(stream, x:CallCompilationEntry) {
    printTo(stream, "compile: ");
    printReprTo(stream, x.callable);
    printTo(stream, "(");
    printReprElementsTo(stream, x.args);
    printTo(stream, ")");
}

private var _compilationStack = Stack[CompilationEntry]();

withCompilationEntry(forward entry:CompilationEntry, f) =
    forward ...withStackValue(_compilationStack, entry, f);

withStaticCall(callable:Value, args:ValueList, f) {
    var entry = CompilationEntry(StaticCallEntry(callable, args));
    return forward ...withCompilationEntry(move(entry), f);
}

withCallAnalysis(callable:Value, args:RTResultList, f) {
    var entry = CompilationEntry(CallAnalysisEntry(callable, args));
    return forward ...withCompilationEntry(move(entry), f);
}

withCallCompilation(callable:Value, args:RTResultList, f) {
    var entry = CompilationEntry(CallCompilationEntry(callable, args));
    return forward ...withCompilationEntry(move(entry), f);
}



//
// semantic errors
//

[T]
private SemanticError?(static T) = false;

private semanticError(...fields) = recordWithPredicate(
    SemanticError?,
    locationStack: Stack[LocationEntry],
    compilationStack: Stack[CompilationEntry],
    ...fields
);

[T, ...A | Record?(T)
           and SemanticError?(T)
           and (Tuple[...RecordFieldTypes(T)] ==
                Tuple[Stack[LocationEntry], Stack[CompilationEntry], ...A])]
callbyname overload T(...args:A) =
    T(_locationStack, _compilationStack, ...args);

variant SemanticError;

instance ClayError = SemanticError;

[T | VariantMember?(SemanticError, T)]
overload Exception(forward e:T) =
    Exception(SemanticError(e));

overload displayError(e:SemanticError) {
    displayError(*e);
}

displaySemanticError(locationStack, compilationStack, ...message) {
    if (stackEmpty?(locationStack)) {
        println(...message);
        return;
    }
    var location = stackTop(locationStack);
    var tokens = location.tokens;
    var offset = tokens.vector[location.where].range.begin;
    errorWithLocation(tokens.file, offset, ...message);
    println("context stack: ");
    for (entry in compilationStack)
        println("    ", entry);
}



//
// semantic error instances
//

record GenericError = semanticError(
    msg: String,
);

instance SemanticError = GenericError;

overload displayError(e:GenericError) {
    displaySemanticError(e.locationStack, e.compilationStack, e.msg);
}


record RecursiveAnalysisError = semanticError(
);

instance SemanticError = RecursiveAnalysisError;

overload displayError(e:RecursiveAnalysisError) {
    var msg = "recursion during type propagation";
    displaySemanticError(e.locationStack, e.compilationStack, msg);
}



//
// error reporting helpers
//

genericError(...msg) {
    throw GenericError(printString(...msg));
}

recursiveAnalysisError() {
    throw RecursiveAnalysisError();
}

private valuesStr(n) =
    if (n == 1) "value" else "values";

arityError(expected, received) {
    genericError(
        "expected ", expected, " ", valuesStr(expected),
        ", but received ", received
    );
}

arityError2(minExpected, received) {
    genericError(
        "expected atleast ", minExpected, " ", valuesStr(minExpected),
        ", but received ", received
    );
}

ensureArity(expected, received) {
    if (expected != received)
        arityError(expected, received);
}

ensureArity2(minExpected, received) {
    if (minExpected > received)
        arityError2(minExpected, received);
}

typeError(expected, received) {
    genericError("expected type ", expected, ", but received ", received);
}
