
import maybe.*;
import newclay.common.*;
import newclay.ast as ast;
import newclay.diagnostics.*;



//
// Module, Program
//

record Module = referenceType(
    program: Program,
    name: String,
    ast: ast.SourceAST,
    globals: Env,
);

overload Module(program:Program, name:String) =
    Module(program, name, ast.SourceAST(), Env());

record Program = referenceType(
    mainModule: Module,
    allAttributes: Vector[Attribute],
    allOverloads: Vector[Overload],
);

overload Program(module:Module) =
    Program(module, Vector[Attribute](), Vector[Overload]());



//
// top-level item entries
//

record SymbolHead = referenceType(
    ast: ast.Symbol,
    module: Module,
    symbols: HashMap[ValueList, Symbol],
);

overload SymbolHead(x:ast.Symbol, module:Module) =
    SymbolHead(x, module, HashMap[ValueList, Symbol]());

record Symbol = referenceType(
    head: SymbolHead,
    params: ValueList,
    env: Env,
    body: Maybe[Value],
    attributes: Maybe[Value],
);

overload Symbol(head:SymbolHead, params:ValueList, env:Env) =
    Symbol(head, params, env, nothing(Value), nothing(Value));

record Attribute = referenceType(
    ast: ast.Attribute,
    module: Module,
    patternVarsInitialized?: Bool,
    patternVars: Vector[ast.Identifier],
    variadicPatternVars: Vector[ast.Identifier],
);

overload Attribute(x:ast.Attribute, module:Module) =
    Attribute(
        x, module, false,
        Vector[ast.Identifier](),
        Vector[ast.Identifier](),
    );

record Overload = referenceType(
    ast: ast.Overload,
    module: Module,
    patternVarsInitialized?: Bool,
    patternVars: Vector[ast.Identifier],
    variadicPatternVars: Vector[ast.Identifier],
);

overload Overload(x:ast.Overload, module:Module) =
    Overload(
        x, module, false,
        Vector[ast.Identifier](),
        Vector[ast.Identifier](),
    );



//
// primitives
//

enum PrimitiveKind {
    PRIM_int?,
    PRIM_add,
    PRIM_subtract,
    PRIM_multiply,
    PRIM_divide,
    PRIM_remainder,
    PRIM_integers,

    PRIM_bool?,
    PRIM_equals?,
    PRIM_lesser?,

    PRIM_string?,
    PRIM_stringSize,
    PRIM_stringSlice,
    PRIM_stringConcat,
    PRIM_stringChars,

    PRIM_tuple?,
    PRIM_tuple,
    PRIM_tupleSize,
    PRIM_tupleElement,
    PRIM_tupleElements,

    PRIM_symbol?,
    PRIM_symbolBody,
    PRIM_symbolAttributes,
}

record Primitive = referenceType(
    kind: PrimitiveKind,
);

primitiveName(kind) {
    var s = printString(kind);
    assert(beginsWith?(s, "PRIM_"));
    return sliceFrom(s, size("PRIM_"));
}



//
// environment
//

variant EnvEntry = SymbolHead
                 | Primitive
                 | Value
                 | PatternCell
                 | ValueList
                 | ListPatternCell
                 ;
 
overload EnvEntry() = EnvEntry(SymbolHead());

record Env = referenceType(
    parent: Maybe[Env],
    entries: HashMap[String, EnvEntry],
);

overload Env(parent:Maybe[Env]) =
    Env(parent, HashMap[String, EnvEntry]());

newEnv(parent:Env) = Env(Maybe(parent));
overload newEnv() = Env(nothing(Env));



//
// envAdd, envLookup
//

envAdd(env, name, forward entry) {
    if (contains?(env.entries, name.str))
        genericError("name redefinition: ", name.str);
    env.entries[name.str] = EnvEntry(entry);
}

envLookup(env, name) {
    var ptr = lookup(env.entries, name.str);
    if (null?(ptr)) {
        if (nothing?(env.parent))
            genericError("name not found: ", name);
        return ref envLookup(require(env.parent), name);
    }
    return ref ptr^;
}



//
// ValueList
//

record ValueList(
    data: SharedPointer[Vector[Value]],
);

overload ValueList() = ValueList(new Vector[Value]());

[A | Sequence?(A) and (SequenceElementType(A) == Value)]
overload ValueList(forward a:A) = ValueList(new Vector[Value](a));

[...A | equalValues?(Value, ...A)]
callbyname overload ValueList(...elements:A) =
    ValueList(new Vector[Value](...elements));

[T | VariantMember?(Value, T)]
overload ValueList(forward x:T) = ValueList(Value(x));

overload size(x:ValueList) = size(x.data^);
overload index(x:ValueList, i) = ref index(x.data^, i);
overload begin(x:ValueList) = begin(x.data^);
overload end(x:ValueList) = end(x.data^);
overload iterator(x:ValueList) = iterator(x.data^);
overload push(x:ValueList, forward ...a) { push(x.data^, ...a); }
overload hash(x:ValueList) = hash(x.data^);
overload equals?(a:ValueList, b:ValueList) = equals?(a.data^, b.data^);
overload printTo(stream, x:ValueList) {
    printTo(stream, x.data^);
}



//
// Value
//

variant Value = BoolValue
              | IntValue
              | StringValue
              | TupleValue
              | LambdaValue

              | SymbolHead
              | Symbol
              | Primitive
              ;

overload Value() = Value(BoolValue());

record BoolValue(value: Bool);
record IntValue(value: Int);
record StringValue(value: String);
record TupleValue(elements: ValueList);
record LambdaValue(value: ast.LambdaExpr, env: Env);



//
// print Value
//

overload printTo(stream, x:Value) {
    printTo(stream, *x);
}
overload printTo(stream, x:BoolValue) {
    printTo(stream, x.value);
}
overload printTo(stream, x:IntValue) {
    printTo(stream, x.value);
}
overload printTo(stream, x:StringValue) {
    printReprTo(stream, x.value);
}
overload printTo(stream, x:TupleValue) {
    printTo(stream, "(");
    var first = true;
    for (element in x.elements) {
        if (first)
            first = false;
        else
            printTo(stream, ", ");
        printTo(stream, element);
    }
    printTo(stream, ")");
}
overload printTo(stream, x:LambdaValue) {
    printTo(stream, "<lambda>");
}
overload printTo(stream, x:SymbolHead) {
    printTo(stream, x.ast.name.str);
}
overload printTo(stream, x:Symbol) {
    printTo(stream, x.head.ast.name.str);
    if (not empty?(x.params))
        printTo(stream, x.params);
}
overload printTo(stream, x:Primitive) {
    printTo(stream, primitiveName(x.kind));
}

[T | VariantMember?(Value, T)]
overload printReprTo(stream, x:T) {
    printTo(stream, x);
}

overload printReprTo(stream, x:Value) {
    printReprTo(stream, *x);
}



//
// Pattern
//

variant Pattern = Value
                | PatternCell
                | SymbolPattern
                ;
         
record PatternCell = referenceType(
    value: Maybe[Value]
);

record SymbolPattern = referenceType(
    head: SymbolHead,
    params: ListPattern,
);

overload Pattern() = Pattern(Value());



//
// ListPattern
//

record ListPattern = referenceType(
    patterns: Vector[Pattern],
    variadicPattern: ListPatternCell,
);

record ListPatternCell = referenceType(
    values: Maybe[ValueList],
);



//
// execution context info
//

record ListNode[T] = referenceType(
    value: T,
    next: ListNode[T],
);

[T]
listEmpty?(root:ListNode[T]) = null?(root);

[T]
listTop(root:ListNode[T]) = ref root.value;

[T]
listPush(root:ListNode[T], forward x:T) {
    root = ListNode[T](x, root);
}

[T]
listPop(root:ListNode[T]) {
    root = root.next;
}

record CallStackEntry (
    callable: Value,
    args: ValueList,
);

record LocationContext (
    modules: ListNode[Module],
    calls: ListNode[CallStackEntry],
    mainTokens: ListNode[SizeT],
);

private var _locationContext = LocationContext();

withCurrentModule(module:Module, f) {
    listPush(_locationContext.modules, module);
    try {
        var x = captureValues(...f());
        listPop(_locationContext.modules);
        return forward ...forwardValues(x);
    }
    catch (e) {
        listPop(_locationContext.modules);
        throw e;
    }
}

withCurrentCall(callable:Value, args:ValueList, f) {
    listPush(_locationContext.calls, CallStackEntry(callable, args));
    try {
        var x = captureValues(...f());
        listPop(_locationContext.calls);
        return forward ...forwardValues(x);
    }
    catch (e) {
        listPop(_locationContext.calls);
        throw e;
    }
}

[T | ast.ASTNode?(T)]
withCurrentLocation(ast:T, f) {
    if (empty?(ast.tokens))
        return forward ...f();
    listPush(_locationContext.mainTokens, ast.mainToken);
    try {
        var x = captureValues(...f());
        listPop(_locationContext.mainTokens);
        return forward ...forwardValues(x);
    }
    catch (e) {
        listPop(_locationContext.mainTokens);
        throw e;
    }
}



//
// semantic errors
//

[T]
private SemanticError?(static T) = false;

private semanticError(...fields) = recordWithPredicate(
    SemanticError?,
    locationContext: LocationContext,
    ...fields
);

[T, ...A | Record?(T)
           and SemanticError?(T)
           and (Tuple[...RecordFieldTypes(T)] ==
                Tuple[LocationContext, ...A])]
callbyname overload T(...args:A) =
    T(_locationContext, ...args);

variant SemanticError;

instance ClayError = SemanticError;

[T | VariantMember?(SemanticError, T)]
overload Exception(forward e:T) =
    Exception(SemanticError(e));

overload displayError(e:SemanticError) {
    displayError(*e);
}

displaySemanticError(locationContext:LocationContext, ...message) {
    if (listEmpty?(locationContext.modules)
        or listEmpty?(locationContext.mainTokens)) {
        println(...message);
        return;
    }
    var module = listTop(locationContext.modules);
    var mainToken = listTop(locationContext.mainTokens);
    var tokens = module.ast.tokens;
    var offset = tokens.vector[mainToken].range.begin;

    errorWithLocation(tokens.file, offset, ...message);

    println("call stack: ");
    var callEntry = locationContext.calls;
    while (not null?(callEntry)) {
        ref call = callEntry.value;
        print("    ", call.callable, "(");
        var first = true;
        for (arg in call.args) {
            if (first)
                first = false;
            else
                print(", ");
            print(arg);
        }
        println(")");
        callEntry = callEntry.next;
    }
}



//
// semantic error instances
//

record GenericError = semanticError(
    msg: String,
);

instance SemanticError = GenericError;

overload displayError(e:GenericError) {
    displaySemanticError(e.locationContext, e.msg);
}

genericError(...msg) {
    throw GenericError(printString(...msg));
}
