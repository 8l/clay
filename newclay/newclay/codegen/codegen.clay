
import maybe.*;
import newclay.common.*;
import newclay.core.*;
import newclay.hooks.*;
import newclay.ir.*;
import newclay.compiler.*;



//
// CodegenContext
//

private record CodegenContext = referenceType (
    typeDefs: String,
    typeBodies: String,
    prototypes: String,
    procedures: String,
    typeMap: HashMap[Type, String],
    codeMap: HashMap[Procedure, String],
    cNames: NameAllocator,
);

private newCodegenContext() = allocateRef(CodegenContext);

private var _codegenContextStack = Stack[CodegenContext]();

private withNewCodegenContext(f) {
    var ctx = newCodegenContext();
    withStackValue(_codegenContextStack, ctx, f);
    return move(ctx);
}

private context() = ref stackTop(_codegenContextStack);

private newCName(baseName) {
    return allocateName(context().cNames, baseName);
}



//
// sanitizeName
//

private letter?(x) =
    ((x >= 'a') and (x <= 'z')) or ((x >= 'A') and (x <= 'Z'));

private digit?(x) = ((x >= '0') and (x <= '9'));

private sanitizeChar(x) {
    if (letter?(x) or digit?(x))
        return x;
    return '_';
}

private sanitizeFirstChar(x) {
    if (letter?(x))
        return x;
    return '_';
}

private sanitizeName(name) {
    var result = name;
    for (x in result)
        x = sanitizeChar(x);
    if (empty?(result))
        return String("x");
    result[0] = sanitizeFirstChar(result[0]);
    return move(result);
}



//
// codegenType
//

private cBoolType() {
    return "char";
}

private cIntegerType(x:IntegerTag) {
    if (x.kind == SIGNED_INTEGER) {
        switch (x.bits) {
        case 8 : return "char";
        case 16 : return "short";
        case 32 : return "int";
        case 64 : return "long long";
        default : assert(false); return "";
        }
    }
    else if (x.kind == UNSIGNED_INTEGER) {
        switch (x.bits) {
        case 8 : return "unsigned char";
        case 16 : return "unsigned short";
        case 32 : return "unsigned int";
        case 64 : return "unsigned long long";
        default : assert(false); return "";
        }
    }
    else {
        assert(false);
        return "";
    }
}

private cFloatType(x:FloatTag) {
    switch (x.bits) {
    case 32 : return "float";
    case 64 : return "double";
    default : assert(false); return "";
    }
}

private procedure codegenTypeInternal;

overload codegenTypeInternal(x:TypeTag, name) {
    codegenTypeInternal(*x, name);
}
overload codegenTypeInternal(x:BoolTag, name) {
    printlnTo(context().typeDefs, "typedef ", cBoolType(), " ", name, ";");
}
overload codegenTypeInternal(x:IntegerTag, name) {
    printlnTo(
        context().typeDefs, "typedef ", cIntegerType(x), " ", name, ";"
    );
}
overload codegenTypeInternal(x:FloatTag, name) {
    printlnTo(
        context().typeDefs, "typedef ", cFloatType(x), " ", name, ";"
    );
}
overload codegenTypeInternal(x:PointerTag, name) {
    ref targetName = codegenType(x.target);
    printlnTo(
        context().typeDefs, "typedef ", targetName, "* ", name, ";"
    );
}
overload codegenTypeInternal(x:ArrayTag, name) {
    ref elementName = codegenType(x.element);
    printlnTo(
        context().typeDefs, "typedef ",
        elementName, " ", name, "[", x.size, "];"
    );
}
overload codegenTypeInternal(x:TupleTag, name) {
    var auxName = newCName(name + "_s");
    ref ctx = context();
    printlnTo(ctx.typeDefs, "typedef struct ", auxName, " ", name, ";");

    // make sure internal types are generated
    for (element in x.elements)
        codegenType(element);

    ref bodies = ctx.typeBodies;
    printlnTo(bodies, "struct ", auxName, " {");
    for (i, element in enumerated(x.elements)) {
        printlnTo(bodies, "    ", codegenType(element), " f", i, ";");
    }
    printlnTo(bodies, "};");
}
overload codegenTypeInternal(x:UnionTag, name) {
    var auxName = newCName(name + "_u");
    ref ctx = context();
    printlnTo(ctx.typeDefs, "typedef union ", auxName, " ", name, ";");

    // make sure internal types are generated
    for (member in x.members)
        codegenType(member);

    ref bodies = ctx.typeBodies;
    printlnTo(bodies, "union ", auxName, " {");
    for (i, member in enumerated(x.members)) {
        printlnTo(bodies, "    ", codegenType(member), " m", i, ";");
    }
    printlnTo(bodies, "};");
}

codegenType(x:Type) ByRef[String] {
    var ctx = context();
    var ptr = lookup(ctx.typeMap, x);
    if (not null?(ptr))
        return ref ptr^;
    var typeName = newCName(sanitizeName(printString(x.symbol)));
    ctx.typeMap[x] = typeName;
    codegenTypeInternal(x.tag, typeName);
    return ref ctx.typeMap[x];
}



//
// ProcedureContext
//

private record ProcedureContext = referenceType(
    proc: Procedure,
    name: String,
    proto: String,
    code: String,
    localNames: HashMap[Local, String],
    returnValueLocals: HashMap[Local, Int],
    indentLevel: Int,
);

overload ProcedureContext(proc:Procedure, name:String) {
    var x = allocateRef(ProcedureContext);
    x.proc = proc;
    x.name = name;
    x.indentLevel = 0;
    return move(x);
}

private var _procedureContextStack = Stack[ProcedureContext]();

private withNewProcedureContext(proc, name, f) {
    var pctx = ProcedureContext(proc, name);
    withStackValue(_procedureContextStack, pctx, f);
    return move(pctx);
}

private pcontext() = ref stackTop(_procedureContextStack);

private localName(x:Local) ByRef[String] {
    ref names = pcontext().localNames;
    var ptr = lookup(names, x);
    if (not null?(ptr))
        return ref ptr^;
    ref name = names[x];
    name = newCName(x.name);
    return ref name;
}

private returnValueLocal?(x:Local) {
    return contains?(pcontext().returnValueLocals, x);
}

private beginLine(...args) {
    ref pctx = pcontext();
    ref out = pctx.code;
    printlnTo(out);
    for (i in range(pctx.indentLevel))
        printTo(out, "    ");
    printTo(out, ...args);
}

private continueLine(...args) {
    printTo(pcontext().code, ...args);
}



//
// codegenProcedurePrototype
//

private inlineCCode?() {
    return variantIs?(pcontext().proc.code, CCodeBody);
}

private inputName(x:Input) {
    if (inlineCCode?())
        return ref x.local.name;
    else
        return ref localName(x.local);
}

private outputName(x:Output) {
    if (inlineCCode?())
        return ref x.local.name;
    else
        return ref localName(x.local);
}

private codegenProcedurePrototype() {
    var pctx = pcontext();
    var out = String();
    printTo(out, "void ", pctx.name, "(");
    var commaOut = CommaListPrinter(&out);
    for (x in pctx.proc.inputs)
        newItem(commaOut, codegenType(x.type), "* ", inputName(x));
    for (x in pctx.proc.outputs) {
        newItem(commaOut, codegenType(x.type), "*");
        if (x.kind != OUTPUT_VALUE)
            continueItem(commaOut, "*");
        continueItem(commaOut, " ", outputName(x));
        pctx.returnValueLocals[x.local] = 1;
    }
    printTo(out, ")");
    return move(out);
}



//
// codegenProcedure
//

private parseCCode(x:String) {
    var b, e = begin(x), end(x);
    var delim = "\"\"\"";
    var p = find(b, e, delim);
    assert(p != e);
    b = p + size(delim);
    p = find(b, e, delim);
    assert(p != e);
    e = p;
    return CoordinateRange(b, e);
}

private codegenProcedure2() {
    var pctx = pcontext();
    var proto = codegenProcedurePrototype();
    printTo(pctx.proto, proto, ";");
    printTo(pctx.code, proto, " ");
    match(pctx.proc.code,
        Block, x => { codegenStatement(x); },
        CCodeBody, x => {
            printTo(pctx.code, "{");
            printTo(pctx.code, parseCCode(x.code));
            printTo(pctx.code, "}");
        },
    );
}

codegenProcedure(x:Procedure) ByRef[String] {
    var ctx = context();
    var ptr = lookup(ctx.codeMap, x);
    if (not null?(ptr))
        return ref ptr^;
    var name = newCName(sanitizeName(x.name));
    ctx.codeMap[x] = name;
    var pctx = withNewProcedureContext(x, name, () ref=> {
        codegenProcedure2();
    });
    printlnTo(ctx.prototypes, pctx.proto);
    printlnTo(ctx.procedures, pctx.code);
    return ref ctx.codeMap[x];
}



//
// codegenStatement
//

procedure codegenStatement;

overload codegenStatement(x:Statement) {
    codegenStatement(*x);
}
overload codegenStatement(x:Block) {
    ref pctx = pcontext();
    continueLine("{");
    pctx.indentLevel += 1;
    for (y in x.statements)
        codegenStatement(y);
    pctx.indentLevel -= 1;
    beginLine("}");
}
overload codegenStatement(x:LocalDef) {
    for (y in x.locals) {
        beginLine(codegenType(y.type));
        if (not y.value?)
            continueLine("*");
        continueLine(" ", localName(y), ";");
    }
    maybe(x.expr,
        expr ref=> { codegenInitialize(expr, x.locals); },
        () => {},
    );
}
overload codegenStatement(x:Initialize) {
    codegenInitialize(x.expr, x.locals);
}
overload codegenStatement(x:If) {
    beginLine("if (", codegenAtomicAsValue(x.condition), ") ");
    codegenStatement(x.thenPart);
    beginLine("else ");
    codegenStatement(x.elsePart);
}
overload codegenStatement(x:Return) {
    beginLine("return;");
}



//
// codegenInitialize, codegenInitializeAtomic, codegenCall
//

codegenInitialize(x:Expr, out:Vector[Local]) {
    match(x,
        AtomicExpr, y ref=> {
            ensureArity(1, size(out));
            codegenInitializeAtomic(y, out[0]);
        },
        CallExpr, y ref=> {
            codegenCall(y, out);
        },
    );
}

private localAsLHS(x:Local) {
    if (returnValueLocal?(x))
        return printString("*", localName(x));
    return localName(x);
}

private localAsLHSPtr(x:Local) {
    if (returnValueLocal?(x))
        return localName(x);
    return printString("&", localName(x));
}

codegenInitializeAtomic(x:AtomicExpr, out:Local) {
    beginLine(
        localAsLHS(out), " = ", codegenAtomicAsValue(x), ";"
    );
}

codegenCall(x:CallExpr, out:Vector[Local]) {
    var args = String();
    var argsBuf = CommaListPrinter(&args);
    for (y in x.args)
        newItem(argsBuf, codegenAtomicAsPtr(y));
    for (y in out)
        newItem(argsBuf, localAsLHSPtr(y));
    beginLine(codegenProcedure(x.callable), "(", args, ");");
}



//
// localAsPtr, localAsValue
//

private localAsPtr(x:Local) {
    if (x.value? and (not returnValueLocal?(x)))
        return printString("&", localName(x));
    else
        return localName(x);
}

private localAsValue(x:Local) {
    if (x.value? and (not returnValueLocal?(x)))
        return localName(x);
    else
        return printString("*", localName(x));
}



//
// codegenAtomicAsValue
//

procedure codegenAtomicAsValue;

overload codegenAtomicAsValue(x:AtomicExpr) {
    return codegenAtomicAsValue(*x);
}
overload codegenAtomicAsValue(x:BoolLiteral) {
    if (x.value)
        return String("1");
    else
        return String("0");
}
overload codegenAtomicAsValue(x:IntLiteral) {
    return printString(x.value);
}   
overload codegenAtomicAsValue(x:StaticLiteral) {
    var temp = newCName("temp");
    var type = codegenType(valueToType(staticType(x.value)));
    beginLine(type, " ", temp, ";");
    return move(temp);
}   
overload codegenAtomicAsValue(x:LocalRef) {
    return localAsValue(x.local);
}   
overload codegenAtomicAsValue(x:LocalAddressOf) {
    return localAsPtr(x.local);
}   



//
// codegenAtomicAsPtr
//

procedure codegenAtomicAsPtr;

overload codegenAtomicAsPtr(x:AtomicExpr) {
    return codegenAtomicAsPtr(*x);
}
overload codegenAtomicAsPtr(x:BoolLiteral) {
    var temp = newCName("temp");
    var type = codegenType(valueToType(boolType()));
    beginLine(type, " ", temp, " = ", codegenAtomicAsValue(x), ";");
    return printString("&", temp);
}
overload codegenAtomicAsPtr(x:IntLiteral) {
    var temp = newCName("temp");
    var type = codegenType(valueToType(intType()));
    beginLine(type, " ", temp, " = ", codegenAtomicAsValue(x), ";");
    return printString("&", temp);
}   
overload codegenAtomicAsPtr(x:StaticLiteral) {
    var temp = newCName("temp");
    var type = codegenType(valueToType(staticType(x.value)));
    beginLine(type, " ", temp, ";");
    return printString("&", temp);
}   
overload codegenAtomicAsPtr(x:LocalRef) {
    return localAsPtr(x.local);
}   
overload codegenAtomicAsPtr(x:LocalAddressOf) {
    var temp = newCName("temp");
    beginLine(
        codegenType(x.local.type), "* ", temp,
        " = ", localAsPtr(x.local), ";"
    );
    return printString("&", temp);
}



//
// codegenMain
//

private headerIncludes() {
    var buf = String();
    printlnTo(buf, "#include <stdio.h>");
    printlnTo(buf, "#include <stdlib.h>");
    return move(buf);
}

private mainWrapper() {
    var buf = String();
    printlnTo(buf, "int main() {");
    printlnTo(buf, "    Int result;");
    printlnTo(buf, "    clay_main(&result);");
    printlnTo(buf, "    printf(\"result = %d\\n\", result);");
    printlnTo(buf, "    return 0;");
    printlnTo(buf, "}");
    return move(buf);
}

codegenMain(proc) {
    var ctx = withNewCodegenContext(() ref=> {
        codegenProcedure(proc);
    });
    return printString(
        headerIncludes(),
        ctx.typeDefs,
        ctx.typeBodies,
        ctx.prototypes,
        ctx.procedures,
        mainWrapper(),
    );
}
