
import io.paths.*;
import maybe.*;
import newclay.common.*;
import newclay.lexer.*;
import newclay.ast as ast;
import newclay.ast.transforms.*;
import newclay.parser.*;
import newclay.core.*;
import newclay.resolver.*;

private loadPrimitivesModule(program:Program) {
    var module = Module(program, primitivesModuleName);
    module.privateEnv = newEnv();
    module.publicEnv = newEnv();
    for (i in range(EnumMemberCount(PrimitiveKind))) {
        var kind = PrimitiveKind(i);
        var name = ast.Identifier(primitiveName(kind));
        var entry = Primitive(kind);
        envAdd(module.publicEnv, name, Value(entry));
    }
    return module;
}

private addImportItem(module, envRoot, importItem) {
    withLocation(importItem, () ref=> {
        var moduleName = ModuleName(importItem.name);
        var importedModule = programModule(module.program, moduleName);
        match(importItem.spec,
            ast.GeneralImportSpec,   genSpec ref=> {
                envRootAddGeneral(envRoot, importedModule);
            },
            ast.SpecificImportSpecs, specSpecs ref=> {
                for (spec in specSpecs) {
                    var asName = just(spec.asName, spec.name).str;
                    envRootAddSpecific(
                        envRoot,
                        asName,
                        EnvImport(spec.visibility, importedModule, spec.name.str)
                    );
                }
            },
            ast.QualifiedImportSpec, qualSpec ref=> {
                addQualifiedModuleValue(envRoot, importedModule, moduleName);
            },
            ast.AliasedImportSpec, aliasSpec ref=> {
                envRootAddSpecific(envRoot, aliasSpec.asName.str, ModuleValue(importedModule));
            },
        );
    });
}

private addSymbolItem(module, env, symbolItem) {
    withLocation(symbolItem, () ref=> {
        var name = symbolItem.name.name;
        if (not null?(lookup(module.publicEnv.entries, name.str))
            or not null?(lookup(module.privateEnv.entries, name.str)))
            genericError("symbol redefinition: ", name.str);

        var head = SymbolHead(symbolItem, module);

        push(module.program.allSymbolHeads, head);

        if (symbolHeadHasParams?(head)) {
            envAdd(env, name, Value(head));
        } else {
            var sym = Symbol(head, ValueList(), module);
            head.symbols[ValueList()] = sym;
            envAdd(env, name, Value(sym));
        }
    });
}

private initializeGlobals(module) {
    module.publicEnv  = newEnv();
    module.privateEnv = newEnv();
    ref publicRoot  = envRoot(module.publicEnv);
    ref privateRoot = envRoot(module.privateEnv);

    envRootAddGeneral(privateRoot, programModule(module.program, preludeModuleName));

    for (item in module.ast.topLevelItems) {
        match(item,
            ast.Import, importItem ref=> {
                addImportItem(
                    module,
                    if (importItem.visibility == ast.VIS_PUBLIC) publicRoot else privateRoot,
                    importItem
                );
            },
            ast.Symbol, symbolItem ref=> {
                addSymbolItem(
                    module,
                    if (symbolItem.visibility == ast.VIS_PUBLIC) module.publicEnv else module.privateEnv,
                    symbolItem
                );
            },
            MatchDefault, x => { },
        );
    }
}

private initializeAttributesAndOverloads(module) {
    for (item in module.ast.topLevelItems) {
        match(item,
            ast.Attribute, x => {
                var y = Attribute(x, module);
                push(module.program.allAttributes, y);
            },
            ast.StaticOverload, x => {
                var y = StaticOverload(x, module);
                push(module.program.allStaticOverloads, y);
            },
            ast.Overload, x => {
                var y = Overload(x, module);
                push(module.program.allOverloads, y);
            },
            MatchDefault, x => { },
        );
    }
}

private initializeModule(module) {
    module.ast = transformAST(module.originalAST);
    initializeGlobals(module);
    initializeAttributesAndOverloads(module);
}

private moduleSourcePath(root, name) = joinPath(root, joinPath(name.path));

private findModuleSource(searchPath, name) {
    var path = String();
    var basename = name.path[size(name.path) - 1];
    for (root in searchPath) {
        path = moduleSourcePath(root, name);
        for (tryName in [
            path + ".clay",
            joinPath(path, basename + ".clay"),
        ])
            if (pathExists?(tryName))
                return move(tryName);
    }

    throw GenericError(printString(
        "could not find source file for module ", moduleNameString(name)
    ));
}

private loadModule(program, name) {
    ref module = program.modules[name];
    module = Module(program, name);
    module.originalAST = parse(tokenize(readSource(findModuleSource(program.moduleSearchPath, name))));
    initializeModule(module);
}

programModule(program:Program, name:ModuleName) {
    var ptr = lookup(program.modules, name);
    if (null?(ptr)) {
        loadModule(program, name);
        return ref program.modules[name];
    } else
        return ref ptr^;
}

private loadMainModule(program, mainFilename) {
    var module = Module(program, mainModuleName);
    module.originalAST = parse(tokenize(readSource(mainFilename)));
    initializeModule(module);
    return module;
}

private resolveProgram(program:Program) {
    for (name, module in items(program.modules))
        resolveAST(EnvParent(module), module.ast);
}

loadProgram(mainFilename:String, searchPath:Vector[String]) {
    var program = Program();
    program.moduleSearchPath = searchPath;
    primitivesModule(program) = loadPrimitivesModule(program);
    mainModule(program) = loadMainModule(program, mainFilename);
    resolveProgram(program);
    return program;
}

overload loadProgram(mainFilename) {
    var mainFilenameStr = String(mainFilename);
    return loadProgram(mainFilenameStr, Vector[String](pathDirname(mainFilenameStr)));
}
