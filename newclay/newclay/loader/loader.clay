
import maybe.*;
import newclay.common.*;
import newclay.lexer.*;
import newclay.ast as ast;
import newclay.parser.*;
import newclay.core.*;

private loadPrimitives(program:Program) {
    var module = Module(program, String("__primitives__"));
    module.globals = newEnv();
    for (i in range(EnumMemberCount(PrimitiveKind))) {
        var kind = PrimitiveKind(i);
        var name = ast.Identifier(primitiveName(kind));
        var entry = Primitive(kind);
        envAdd(module.globals, name, Value(entry));
    }
    return module;
}

private initializeGlobals(module) {
    var envroot = EnvRoot();

    // XXX proper implicit import of "prelude"
    push(envroot.generalImports, primitivesModule(module.program));

    var env = newEnv(envroot);
    for (item in module.ast.topLevelItems) {
        match(item,
            ast.Symbol, x => {
                var head = SymbolHead(x, module);
                if (symbolHeadHasParams?(head)) {
                    envAdd(env, x.name, Value(head));
                }
                else {
                    var sym = Symbol(head, ValueList(), env);
                    head.symbols[ValueList()] = sym;
                    envAdd(env, x.name, Value(sym));
                }
            },
            MatchDefault, x => { },
        );
    }
    module.globals = env;
}

private initializeAttributesAndOverloads(module) {
    for (item in module.ast.topLevelItems) {
        match(item,
            ast.Attribute, x => {
                var y = Attribute(x, module);
                push(module.program.allAttributes, y);
            },
            ast.StaticOverload, x => {
                var y = StaticOverload(x, module);
                push(module.program.allStaticOverloads, y);
            },
            ast.Overload, x => {
                var y = Overload(x, module);
                push(module.program.allOverloads, y);
            },
            MatchDefault, x => { },
        );
    }
}

private loadModule(program, path) {
    var module = Module(program, String("__main__"));
    module.ast = parse(tokenize(readSource(path)));
    initializeGlobals(module);
    initializeAttributesAndOverloads(module);
    return module;
}

loadProgram(path) {
    var program = Program();
    primitivesModule(program) = loadPrimitives(program);
    mainModule(program) = loadModule(program, path);
    return program;
}
