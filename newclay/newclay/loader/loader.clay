
import maybe.*;
import newclay.common.*;
import newclay.lexer.*;
import newclay.ast as ast;
import newclay.parser.*;
import newclay.core.*;

private primitivesEnv() {
    var env = newEnv();
    for (i in range(EnumMemberCount(PrimitiveKind))) {
        var kind = PrimitiveKind(i);
        var name = ast.Identifier(primitiveName(kind));
        var entry = Primitive(kind);
        envAdd(env, name, entry);
    }
    return env;
}

private initializeGlobals(module) {
    var env = newEnv(primitivesEnv());
    for (item in module.ast.topLevelItems) {
        match(item,
            ast.Symbol, x => {
                envAdd(env, x.name, SymbolHead(x, module));
            },
            ast.Attribute, x => {
            },
            ast.StaticOverload, x => {
            },
            ast.Overload, x => {
            }
        );
    }
    module.globals = env;
}

private initializeAttributesAndOverloads(module) {
    for (item in module.ast.topLevelItems) {
        match(item,
            ast.Symbol, x => {},
            ast.Attribute, x => {
                var y = Attribute(x, module);
                push(module.program.allAttributes, y);
            },
            ast.StaticOverload, x => {
                var y = StaticOverload(x, module);
                push(module.program.allStaticOverloads, y);
            },
            ast.Overload, x => {
                assert(false);
            },
        );
    }
}

private loadModule(program, path) {
    var module = Module(program, String("__main__"));
    module.ast = parse(tokenize(readSource(path)));
    withCurrentModule(module, () => {
        initializeGlobals(module);
        initializeAttributesAndOverloads(module);
    });
    return module;
}

loadProgram(path) {
    var program = Program(Module());
    program.mainModule = loadModule(program, path);
    return program;
}
