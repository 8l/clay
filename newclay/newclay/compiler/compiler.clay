
import maybe.*;
import newclay.common.*;
import newclay.ast as ast;
import newclay.core.*;
import newclay.evaluator.*;
import newclay.hooks.*;
import newclay.analyzer.*;
import newclay.ir as ir;



//
// valueToType, symbolToType
//

valueToType(x:Value) {
    return match(x,
        Symbol, y => symbolToType(y),
        MatchDefault, y => {
            genericError("invalid type: ", y);
            return ir.Type();
        },
    );
}

symbolToType(x:Symbol) ir.Type {
    if (not symbolType?(x))
        genericError("invalid type: ", x);
    return maybe(x.lowLevelType,
        y => y,
        () ref=> {
            var irType = ir.Type(ir.TypeTag(), x);
            x.lowLevelType = Maybe(irType);
            try {
                irType.tag = valueToTypeTag(evaluateCallWithOneResult(
                    getHooks().ToLowLevelType, ValueList(x),
                ));
                return irType;
            }
            catch (e) {
                x.lowLevelType = nothing(ir.Type);
                throw e;
            }
        },
    );
}

valueToTypeTag(x:Value) {
    ref hooks = getHooks();
    if (x == hooks.LLBoolType)
        return ir.TypeTag(ir.BoolTag());
    if (not variantIs?(x, Symbol))
        genericError("invalid symbolic type: ", x);
    ref y = variantAs(x, Symbol);
    switch (Value(y.head)) {
    case hooks.LLIntegerType :
        return symbolToIntegerTag(y);
    case hooks.LLFloatType :
        return symbolToFloatTag(y);
    case hooks.LLPointerType :
        return symbolToPointerTag(y);
    case hooks.LLArrayType :
        return symbolToArrayTag(y);
    case hooks.LLTupleType :
        return symbolToTupleTag(y);
    case hooks.LLUnionType :
        return symbolToUnionTag(y);
    default :
        genericError("invalid symbolic type: ", x);
        return ir.TypeTag();
    }
}

symbolToIntegerTag(x:Symbol) {
    var a, b = ...unpackValueList(static 2, x.params);
    var kind = valueToIntegerKind(a);
    var bits = valueToIntegerBitSize(b);
    return ir.TypeTag(ir.IntegerTag(kind, bits));
}

valueToIntegerKind(x:Value) {
    ref hooks = getHooks();
    if (x == hooks.LLSigned)
        return ir.SIGNED_INTEGER;
    else if (x == hooks.LLUnsigned)
        return ir.UNSIGNED_INTEGER;
    genericError("invalid symbolic integer kind: ", x);
    return ir.IntegerKind();
}

valueToIntegerBitSize(x:Value) {
    var a = valueToInt(x);
    if ((a != 8) and (a != 16) and (a != 32) and (a != 64))
        genericError("invalid integer bit size: ", a);
    return a;
}

symbolToFloatTag(x:Symbol) {
    var a = ...unpackValueList(static 1, x.params);
    var bits = valueToFloatBitSize(a);
    return ir.TypeTag(ir.FloatTag(bits));
}

valueToFloatBitSize(x:Value) {
    var a = valueToInt(x);
    if ((a != 32) and (a != 64))
        genericError("invalid float bit size: ", a);
    return a;
}

symbolToPointerTag(x:Symbol) {
    var a = ...unpackValueList(static 1, x.params);
    var target = valueToType(a);
    return ir.TypeTag(ir.PointerTag(target));
}

symbolToArrayTag(x:Symbol) {
    var a, b = ...unpackValueList(static 2, x.params);
    var element = valueToType(a);
    var size = valueToArraySize(b);
    return ir.TypeTag(ir.ArrayTag(element, size));
}

valueToArraySize(x:Value) {
    var a = valueToInt(x);
    if (a < 0)
        genericError("invalid array size: ", a);
    return a;
}

symbolToTupleTag(x:Symbol) {
    var elements = map(valueToType, x.params);
    return ir.TypeTag(ir.TupleTag(move(elements)));
}

symbolToUnionTag(x:Symbol) {
    var members = map(valueToType, x.params);
    return ir.TypeTag(ir.UnionTag(move(members)));
}

[n]
unpackValueList(static n, x:ValueList) {
    ensureArity(n, size(x));
    return ...sequenceValues(x, static n);
}

valueToInt(x:Value) {
    if (not variantIs?(x, IntValue))
        genericError("invalid integer: ", x);
    return variantAs(x, IntValue).value;
}



//
// CompileContext
//

private record CompileContext (
    specialization: Specialization,
    irProcedure: ir.Procedure,
    names: NameAllocator,
);

overload CompileContext(specialization:Specialization, irProcedure:ir.Procedure) =
    CompileContext(
        specialization, irProcedure, NameAllocator(),
    );

private var _compileContextStack = Stack[CompileContext]();

private withNewCompileContext(x:Specialization, y:ir.Procedure, f) {
    return forward ...withCallCompilation(x.callable, x.args, () ref=> {
        return forward ...withStackValue(
            _compileContextStack, CompileContext(x, y), f
        );
    });
}

private context() = ref stackTop(_compileContextStack);
private irProcedure() = ref context().irProcedure;

private newLocalName(baseName) {
    return allocateName(context().names, baseName);
}



//
// compileSpecialization
//

private newIRProcedureName(callable:Value) {
    var baseName = printString("clay_", callable);
    return allocateName(getProgram().lowLevelNames, baseName);
}

private inputKind(kind:RTResultKind, astKind: Maybe[ast.ArgumentKind]) ir.InputKind {
    switch (kind) {
    case RT_RESULT_CONST : return ir.INPUT_CONST;
    case RT_RESULT_REF : return ir.INPUT_REF;
    case RT_RESULT_RVALUE : return maybe(astKind,
        x => if (x == ast.ARG_FORWARD) ir.INPUT_MOVABLE_RVALUE else ir.INPUT_RVALUE,
        () => ir.INPUT_RVALUE,
    );
    default :
        assert(false, kind);
        return ir.InputKind();
    }
}

private inputAccessKind(x:ir.InputKind) ir.AccessKind {
    switch (x) {
    case ir.INPUT_CONST: return ir.ACCESS_CONST;
    case ir.INPUT_REF: return ir.ACCESS_REF;
    case ir.INPUT_RVALUE: return ir.ACCESS_REF;
    case ir.INPUT_MOVABLE_RVALUE: return ir.ACCESS_RVALUE;
    default :
        assert(false);
        return ir.AccessKind();
    }
}

private compileInput(arg:RTResult, astArg:ast.Argument) {
    var ikind = inputKind(arg.kind, astArg.kind);
    var accessKind = inputAccessKind(ikind);
    var type = valueToType(arg.type);
    var name = newLocalName(astArg.name.str);
    var local = ir.Local(move(name), false, type, accessKind);
    push(irProcedure().inputs, ir.Input(ikind, type, local));
    return local;
}

private compileInputs() {
    var s = context().specialization;
    ref astArgs = s.matchedOverload.ast.args;
    for (internalArg, arg, astArg in zipped(s.internalArgs, s.args, astArgs.items))
        internalArg.lowLevelLocal = compileInput(arg, astArg);
    maybe(astArgs.variadicItem,
        astArg ref=> {
            ref internalVarArg = just(s.internalVariadicArg);
            clear(internalVarArg.lowLevelLocals);
            for (arg in slicedFrom(s.args, size(astArgs.items))) {
                var local = compileInput(arg, astArg);
                push(internalVarArg.lowLevelLocals, local);
            }
        },
        () => {},
    );
}

private outputKind(x:RTResultKind) ir.OutputKind {
    switch (x) {
    case RT_RESULT_CONST : return ir.OUTPUT_CONST;
    case RT_RESULT_REF : return ir.OUTPUT_REF;
    case RT_RESULT_RVALUE : return ir.OUTPUT_RVALUE;
    case RT_RESULT_VALUE : return ir.OUTPUT_VALUE;
    default :
        assert(false);
        return ir.OutputKind();
    }
}

private outputLocal(forward name, outputKind, type) {
    var localType = type;
    if (outputKind != ir.OUTPUT_VALUE)
        localType = valueToType(pointerType(Value(localType.symbol)));
    return ir.Local(name, true, localType, ir.ACCESS_REF);
}

private compileOutput(result:RTResult, baseName:String) {
    var name = newLocalName(baseName);
    var okind = outputKind(result.kind);
    var type = valueToType(result.type);
    var local = outputLocal(move(name), okind, type);
    var output = ir.Output(okind, type, local);
    push(irProcedure().outputs, output);
    return output;
}

private compileNamedOutputs(names) {
    var s = context().specialization;
    maybe(s.returns,
        returns ref=> {
            var resultsIter = iterator(returns);
            for (name, namedReturn in zipped(names, s.namedReturns)) {
                match(namedReturn,
                    RTVariable, x ref=> {
                        var output = compileOutput(next(resultsIter), name.str);
                        x.lowLevelLocal = output.local;
                    },
                    RTListVariable, x ref=> {
                        clear(x.lowLevelLocals);
                        for (i in range(size(x.types))) {
                            var output = compileOutput(next(resultsIter), name.str);
                            push(x.lowLevelLocals, output.local);
                        }
                    },
                );
            }
            assert(not hasNext?(resultsIter));
        },
        () ref=> { assert(false, "non-terminating function with named returns"); },
    );
}

private compileUnnamedOutputs() {
    var s = context().specialization;
    var baseName = String("returned");
    maybe(s.returns, returns => {
        for (result in returns)
            compileOutput(result, baseName);
    });
}

private compileOutputs() {
    var x = context().specialization.matchedOverload.ast;
    maybe(x.returnedNames,
        names ref=> { compileNamedOutputs(names); },
        () ref=> { compileUnnamedOutputs(); },
    );
}

private compileCodeBody() {
    var s = context().specialization;
    irProcedure().code = match(s.matchedOverload.ast.body,
        ast.CCodeBody, x ref=> {
            return ir.CodeBody(ir.CCodeBody(x.cCode));
        },
        ast.ExprCodeBody, x ref=> {
            if (not empty?(s.namedReturns)) {
                genericError(
                    "procedures with named return ",
                    "cannot return with an expression"
                );
            }
            var block = withNewBlock(() ref=> {
                var out = map(x => x.local, irProcedure().outputs);
                compileReturnExprListInto(x.exprs, s.bodyEnv, out);
            });
            return ir.CodeBody(block);
        },
        ast.Block, x ref=> {
            return ir.CodeBody(withNewBlock(() ref=> {
                var out = map(x => x.local, irProcedure().outputs);
                compileBlockInto(x, s.bodyEnv, out);
            }));
        }
    );
}

private compileSpecialization2() {
    compileInputs();
    compileOutputs();
    compileCodeBody();
}

compileSpecialization(x:Specialization) ir.Procedure {
    return maybe(x.lowLevelProc,
        y => y,
        () ref=> {
            var proc = ir.Procedure(newIRProcedureName(x.callable));
            x.lowLevelProc = Maybe(proc);
            try {
                withNewCompileContext(x, proc, compileSpecialization2);
                return proc;
            }
            catch (e) {
                x.lowLevelProc = nothing(ir.Procedure);
                throw e;
            }
        },
    );
}



//
// CompiledExpr
//

record CompiledExpr (
    irExpr: ir.AtomicExpr,
    info: Maybe[RTResult],
);



//
// helpers for generating statements
//

private var _blocks = Stack[ir.Block]();

private withNewBlock(f) {
    var block = ir.Block(Vector[ir.Statement]());
    withStackValue(_blocks, block, f);
    return move(block);
}

currentBlock() = ref stackTop(_blocks);

procedure emitStatement;
overload emitStatement(x) {
    emitStatement(ir.Statement(x));
}
overload emitStatement(x:ir.Statement) {
    push(currentBlock().statements, x);
}

procedure emitInitialize;
overload emitInitialize(out:ir.Local, expr:ir.Expr) {
    emitInitialize([out], expr);
}
overload emitInitialize(out:ir.Local, expr:ir.AtomicExpr) {
    emitInitialize([out], ir.Expr(expr));
}
[A | ir.LocalSequence?(A)]
overload emitInitialize(out:A, expr:ir.Expr) {
    emitStatement(ir.Initialize(Vector(out), expr));
}
[A | ir.LocalSequence?(A)]
overload emitInitialize(out:A, expr:ir.AtomicExpr) {
    emitStatement(ir.Initialize(Vector(out), ir.Expr(expr)));
}
overload emitInitialize(out:ir.Local, result:CompiledExpr) {
    ensureCompatibleLocal(out, result.info);
    emitInitialize(out, result.irExpr);
}
[A | ir.LocalSequence?(A)]
overload emitInitialize(out:A, result:Vector[CompiledExpr]) {
    ensureCompatibleLocals(out, compiledExprListInfo(result));
    for (x, y in zipped(out, result))
        emitInitialize(x, y.irExpr);
}

procedure emitLocalDef;
overload emitLocalDef(local:ir.Local) {
    emitLocalDef([local]);
}
overload emitLocalDef(local:ir.Local, expr:ir.Expr) {
    emitLocalDef([local], expr);
}
[A | ir.LocalSequence?(A)]
overload emitLocalDef(locals:A) {
    emitStatement(ir.LocalDef(Vector(locals), nothing(ir.Expr)));
}
[A | ir.LocalSequence?(A)]
overload emitLocalDef(locals:A, expr:ir.Expr) {
    emitStatement(ir.LocalDef(Vector(locals), Maybe(expr)));
}

private tempAccessKind(x:RTResultKind) ir.AccessKind {
    switch (x) {
    case RT_RESULT_CONST: return ir.ACCESS_CONST;
    case RT_RESULT_REF: return ir.ACCESS_REF;
    case RT_RESULT_RVALUE: return ir.ACCESS_RVALUE;
    case RT_RESULT_VALUE: return ir.ACCESS_RVALUE;
    default :
        assert(false);
        return ir.AccessKind();
    }
}

private newTemp(maybeX:Maybe[RTResult]) ir.Local {
    // XXX return nothing when input is nothing
    return require(maybeX, x => newTemp(x));
}

overload newTemp(x:RTResult) ir.Local {
    var name = newLocalName("temp");
    return ir.Local(
        move(name), (x.kind == RT_RESULT_VALUE),
        valueToType(x.type), tempAccessKind(x.kind),
    );
}



//
// local compatibility
//

private localTypeMatches?(x:ir.Local, y:RTResult) {
    return Value(x.type.symbol) == y.type;
}

private localKindCompatible?(x:ir.Local, y:RTResult) {
    if (x.value?)
        return true;
    switch (x.access) {
    case ir.ACCESS_CONST: return true;
    case ir.ACCESS_REF: return y.kind == RT_RESULT_REF;
    case ir.ACCESS_RVALUE: return y.kind == RT_RESULT_RVALUE;
    }
    assert(false);
    return false;
}

private ensureCompatibleLocal(x:ir.Local, maybeY:Maybe[RTResult]) {
    maybe(maybeY, y ref=> {
        if (not localTypeMatches?(x, y))
            typeError(x.type.symbol, y.type);
        if (not localKindCompatible?(x, y)) {
            genericError(
                "expected reference kind ", ir.accessKindString(x.access),
                ", but received ", rtResultKindString(y.kind),
            );
        }
    });
}

[A, B | ir.LocalSequence?(A) and SizedSequence?(B)
        and SequenceElementType(B) == RTResult]
private ensureCompatibleLocals(x:A, maybeY:Maybe[B]) {
    maybe(maybeY, y ref=> {
        ensureArity(size(x), size(y));
        for (a, b in zipped(x, y))
            ensureCompatibleLocal(a, Maybe(b));
    });
}



//
// compileBlockInto, compileStatementInto
//

[A | ir.LocalSequence?(A)]
compileBlockInto(block:ast.Block, env, out:A) Bool {
    return withLocation(block, () ref=> {
        for (stmt in block.statements)
            if (compileStatementInto(stmt, env, out))
                return true;
        return false;
    });
}

[A | ir.LocalSequence?(A)]
compileStatementInto(stmt:ast.Statement, env, out:A) Bool {
    return withLocation(*stmt, () ref=> compileStatementInto(*stmt, env, out));
}

[S | VariantMember?(ast.Statement, S)]
overload compileStatementInto(stmt:S, env, out) {
    genericError("compiling this statement is not yet supported");
    return false;
}

overload compileStatementInto(stmt:ast.ReturnStatement, env, out) {
    compileReturnExprListInto(stmt.values, env, out);
    emitStatement(ir.Return());
    return true;
}

overload compileStatementInto(stmt:ast.ExprStatement, env, out) {
    compileMultiExpr(stmt.expr, env); // XXX nontermination
    return false;
}

overload compileStatementInto(stmt:ast.IfStatement, env, out) {
    var cond = compileBoolExpr(stmt.condition, env); // XXX nontermination
    var thenReturns?, elseReturns? = false, false;

    var thenPart = withNewBlock(() ref=> {
        thenReturns? = compileStatementInto(stmt.thenBody, newEnv(env), out);
    });
    var elsePart = maybe(stmt.elseBody,
        elseBody ref=> Maybe(withNewBlock(() ref=> {
            elseReturns? = compileStatementInto(elseBody, newEnv(env), out);
        })),
    );

    emitStatement(ir.If(cond.irExpr, thenPart, elsePart));
    return thenReturns? and elseReturns?;
}

overload compileStatementInto(stmt:ast.WhileStatement, env, out) {
    var cond = compileBoolExpr(stmt.condition, env); // XXX nontermination
    var bodyPart = withNewBlock(() ref=> {
        compileStatementInto(stmt.body, newEnv(env), out);
    });

    emitStatement(ir.While(cond.irExpr, bodyPart));
    return false;
}

overload compileStatementInto(stmt:ast.BreakStatement, env, out) {
    emitStatement(ir.Break());
    return false;
}

overload compileStatementInto(stmt:ast.ContinueStatement, env, out) {
    emitStatement(ir.Continue());
    return false;
}

overload compileStatementInto(block:ast.Block, env, out) {
    var returned? = false;
    emitStatement(withNewBlock(() ref=> {
        returned? = compileBlockInto(block, newEnv(env), out);
    }));
    return returned?;
}


//
// compileReturnExprListInto
//

[A | ir.LocalSequence?(A)]
compileReturnExprListInto(x:ast.ReturnExprList, env, out:A) {
    maybe(analyzeReturnExprList(x, env),
        exprResults ref=> {
            ensureArity(size(out), size(exprResults));
            var i = SizeT(0);
            for (item in x) {
                var itemResults = just(analyzeReturnExprListItem(item, env));
                var outSlice = sliced(out, i, i+size(itemResults));
                compileReturnExprListItemInto(item, env, itemResults, outSlice);
                i += size(itemResults);
            }
        },
    );
}

[A | ir.LocalSequence?(A)]
compileReturnExprListItemInto(x:ast.ReturnExprListItem, env, results:RTResultList, out:A) {
    withLocation(x.item, () ref=> {
        ensureArity(size(out), size(results));
        var out2 = Vector[ir.Local]();
        var refTemps = Vector[ir.Local]();
        for (result, outLocal in zipped(results, out)) {
            if (result.kind == RT_RESULT_VALUE)
                push(out2, outLocal);
            else {
                var refTemp = newTemp(result);
                push(out2, refTemp);
                push(refTemps, refTemp);
            }
        }
        if (not empty?(refTemps))
            emitLocalDef(refTemps);
        compileExprListItemInto(x.item, env, out2);
        if (not empty?(refTemps)) {
            for (result, outLocal, outLocal2 in zipped(results, out, out2)) {
                if (result.kind != RT_RESULT_VALUE) {
                    var addr = ir.AtomicExpr(ir.LocalAddressOf(outLocal2));
                    emitInitialize(out, addr);
                }
            }
        }
    });
}



//
// compileExprInto
//

procedure compileExprInto;

overload compileExprInto(x:ast.Expr, env, out:ir.Local) {
    withLocation(x, () ref=> { compileExprInto(*x, env, out); });
}
overload compileExprInto(x:ast.BoolLiteral, env, out) {
    emitInitialize(out, compileExpr(x, env));
}
overload compileExprInto(x:ast.IntLiteral, env, out) {
    emitInitialize(out, compileExpr(x, env));
}
overload compileExprInto(x:ast.StringLiteral, env, out) {
    genericError("strings are not yet supported");
}
overload compileExprInto(x:ast.NameRef, env, out) {
    emitInitialize(out, compileExpr(x, env));
}
overload compileExprInto(x:ast.PatternNameRef, env, out) {
    compileValueInto(derefPattern(env, x.name), out);
}
overload compileExprInto(x:ast.TupleExpr, env, out) {
    genericError("tuples are not yet supported");
}
overload compileExprInto(x:ast.Call, env, out) {
    var callable = evaluateExpr(x.expr, env);
    if (runtimeCallable?(callable)) {
        var args = compileExprList(x.args, env);
        compileCallWithOneResultInto(callable, args, out);
    }
    else {
        var args = evaluateExprList(x.args, env);
        var result = evaluateCallWithOneResult(callable, args);
        compileValueInto(result, out);
    }
}
overload compileExprInto(x:ast.Indexing, env, out) {
    compileValueInto(evaluateExpr(x, env), out);
}
overload compileExprInto(x:ast.AndExpr, env, out) {
    var cond = compileBoolExpr(x.expr1, env);
    var thenPart = withNewBlock(() ref=> {
        compileExprInto(x.expr2, env, out);
    });
    var elsePart = withNewBlock(() ref=> {
        emitInitialize(out, cond);
    });
    emitStatement(ir.If(cond.irExpr, thenPart, elsePart));
}
overload compileExprInto(x:ast.OrExpr, env, out) {
    var cond = compileBoolExpr(x.expr1, env);
    var thenPart = withNewBlock(() ref=> {
        emitInitialize(out, cond);
    });
    var elsePart = withNewBlock(() ref=> {
        compileExprInto(x.expr2, env, out);
    });
    emitStatement(ir.If(cond.irExpr, thenPart, elsePart));
}
overload compileExprInto(x:ast.LambdaExpr, env, out) {
    genericError("lambda expressions are not yet supported");
}
overload compileExprInto(x:ast.IfExpr, env, out) {
    var cond = compileBoolExpr(x.condition, env);
    var thenPart = withNewBlock(() ref=> {
        compileExprInto(x.thenPart, env, out);
    });
    var elsePart = withNewBlock(() ref=> {
        compileExprInto(x.elsePart, env, out);
    });
    emitStatement(ir.If(cond.irExpr, thenPart, elsePart));
}



//
// compileExprListInto
//

[A | ir.LocalSequence?(A)]
compileExprListInto(x:ast.ExprList, env, out:A) {
    ensureArity(size(out), size(analyzeExprList(x, env)));
    var i = SizeT(0);
    for (item in x) {
        var results = analyzeExprListItem(item, env);
        compileExprListItemInto(item, env, sliced(out, i, i+size(results)));
        i += size(results);
    }
}

[A | ir.LocalSequence?(A)]
compileExprListItemInto(x:ast.ExprListItem, env, out:A) {
    match(x,
        ast.UnpackExpr, y ref=> {
            compileMultiExprInto(y.expr, env, out);
        },
        ast.Expr, y ref=> {
            assert(size(out) == 1);
            compileExprInto(y, env, out[0]);
        },
    );
}



//
// compileMultiExprInto
//

procedure compileMultiExprInto;

[A | ir.LocalSequence?(A)]
overload compileMultiExprInto(x, env, out:A) {
    genericError("single valued expression used in multi-value context");
}
[A | ir.LocalSequence?(A)]
overload compileMultiExprInto(x:ast.Expr, env, out:A) {
    withLocation(x, () ref=> { compileMultiExprInto(*x, env, out); });
}
[A | ir.LocalSequence?(A)]
overload compileMultiExprInto(x:ast.NameRef, env, out:A) {
    emitInitialize(out, compileMultiExpr(x, env));
}
[A | ir.LocalSequence?(A)]
overload compileMultiExprInto(x:ast.PatternNameRef, env, out:A) {
    compileValueListInto(derefListPattern(env, x.name), out);
}
[A | ir.LocalSequence?(A)]
overload compileMultiExprInto(x:ast.Call, env, out:A) {
    var callable = evaluateExpr(x.expr, env);
    if (runtimeCallable?(callable)) {
        var args = compileExprList(x.args, env);
        compileCallInto(callable, args, out);
    }
    else {
        var args = evaluateExprList(x.args, env);
        var results = evaluateCall(callable, args);
        compileValueListInto(results, out);
    }
}



//
// compileValueInto
//

compileValueInto(x:Value, out:ir.Local) {
    match(x,
        StringValue, y => {
            genericError("string are not yet supported");
        },
        TupleValue, y => {
            genericError("tuples are not yet supported");
        },
        MatchDefault, y => {
            emitInitialize(out, compileValue(x));
        },
    );
}



//
// compileValueListInto
//

[A | ir.LocalSequence?(A)]
compileValueListInto(x:ValueList, out:A) {
    ensureArity(size(out), size(x));
    for (a, b in zipped(x, out))
        compileValueInto(a, b);
}



//
// compileBoolExpr
//

compileBoolExpr(x:ast.Expr, env) CompiledExpr {
    return withLocation(x, () ref=> {
        var result = compileExpr(x, env);
        maybe(result.info, info ref=> {
            if (info.type != boolType())
                typeError(boolType(), info.type);
        });
        return move(result);
    });
}



//
// compileExpr
//

procedure compileExpr;

overload compileExpr(x:ast.Expr, env) CompiledExpr {
    return withLocation(x, () ref=> compileExpr(*x, env));
}
overload compileExpr(x:ast.BoolLiteral, env) {
    return CompiledExpr(
        ir.AtomicExpr(ir.BoolLiteral(x.value)),
        analyzeExpr(x, env),
    );
}
overload compileExpr(x:ast.IntLiteral, env) {
    return CompiledExpr(
        ir.AtomicExpr(ir.IntLiteral(Int(x.value))),
        analyzeExpr(x, env),
    );
}
overload compileExpr(x:ast.StringLiteral, env) {
    genericError("strings are not yet supported");
    return CompiledExpr();
}
overload compileExpr(x:ast.NameRef, env) {
    return compileEnvEntry(privateLookup(env, x.name));
}
overload compileExpr(x:ast.PatternNameRef, env) {
    return compileValue(derefPattern(env, x.name));
}
overload compileExpr(x:ast.TupleExpr, env) {
    genericError("tuples are not yet supported");
    return CompiledExpr();
}
overload compileExpr(x:ast.Call, env) {
    var callable = evaluateExpr(x.expr, env);
    if (runtimeCallable?(callable)) {
        var args = compileExprList(x.args, env);
        return compileCallWithOneResult(callable, args);
    }
    else {
        var args = evaluateExprList(x.args, env);
        var result = evaluateCallWithOneResult(callable, args);
        return compileValue(result);
    }
}
overload compileExpr(x:ast.Indexing, env) {
    return compileValue(evaluateExpr(x, env));
}
overload compileExpr(x:ast.AndExpr, env) {
    return compileExprIntoNewTemp(ast.Expr(x), env);
}
overload compileExpr(x:ast.OrExpr, env) {
    return compileExprIntoNewTemp(ast.Expr(x), env);
}
overload compileExpr(x:ast.LambdaExpr, env) {
    genericError("lambda expressions are not yet supported");
    return CompiledExpr();
}
overload compileExpr(x:ast.IfExpr, env) {
    return compileExprIntoNewTemp(ast.Expr(x), env);
}

private compileExprIntoNewTemp(expr:ast.Expr, env) {
    var analysis = analyzeExpr(expr, env);
    var temp = newTemp(analysis);
    emitLocalDef(temp);
    compileExprInto(expr, env, temp);
    return CompiledExpr(ir.AtomicExpr(ir.LocalRef(temp)), analysis);
}



//
// compileEnvEntry
//

compileEnvEntry(entry:EnvEntry) CompiledExpr {
    return match(entry,
        Value, x => compileValue(x),
        ValueList, x => {
            genericError("multi-value used in single value context");
            return CompiledExpr();
        },
        PatternCell, x => {
            genericError("pattern variable cannot be used in non-pattern expression");
            return CompiledExpr();
        },
        ListPatternCell, x => {
            genericError("pattern variable cannot be used in non-pattern expression");
            return CompiledExpr();
        },
        RTVariable, x => {
            assert(not null?(x.lowLevelLocal), "null?(RTVariable.lowLevelLocal)");
            return CompiledExpr(
                ir.AtomicExpr(ir.LocalRef(x.lowLevelLocal)),
                rtVariableToRTResult(x),
            );
        },
        RTListVariable, x => {
            genericError("multi-value used in single value context");
            return CompiledExpr();
        },
        RTLabel, x => {
            genericError("cannot use label as value");
            return CompiledExpr();
        }
    );
}



//
// compileExprList
//

compileExprList(x:ast.ExprList, env) Vector[CompiledExpr] {
    var results = Vector[CompiledExpr]();
    for (item in x)
        push(results, compileExprListItem(item, env));
    return move(results);
}

compileExprListItem(x:ast.ExprListItem, env) Vector[CompiledExpr] {
    return match(x,
        ast.UnpackExpr, y ref=> compileMultiExpr(y.expr, env),
        ast.Expr, y ref=> Vector([compileExpr(y, env)]),
    );
}



//
// compileMultiExpr
//

procedure compileMultiExpr;

overload compileMultiExpr(x, env) {
    genericError("single valued expression used in multi-value context");
    return Vector[CompiledExpr]();
}
overload compileMultiExpr(x:ast.Expr, env) Vector[CompiledExpr] {
    return withLocation(x, () ref=> compileMultiExpr(*x, env));
}
overload compileMultiExpr(x:ast.NameRef, env) {
    return compileEnvEntryMulti(privateLookup(env, x.name));
}
overload compileMultiExpr(x:ast.PatternNameRef, env) {
    return compileValueList(derefListPattern(env, x.name));
}
overload compileMultiExpr(x:ast.Call, env) {
    var callable = evaluateExpr(x.expr, env);
    if (runtimeCallable?(callable)) {
        var args = compileExprList(x.args, env);
        return compileCall(callable, args);
    }
    else {
        var args = evaluateExprList(x.args, env);
        var results = evaluateCall(callable, args);
        return compileValueList(results);
    }
}



//
// compileEnvEntryMulti
//

procedure compileEnvEntryMulti;

overload compileEnvEntryMulti(entry:EnvEntry) {
    return compileEnvEntryMulti(*entry);
}
overload compileEnvEntryMulti(x:Value) {
    genericError("single value used in multi-valued context");
    return Vector[CompiledExpr]();
}
overload compileEnvEntryMulti(x:ValueList) {
    return compileValueList(x);
}
overload compileEnvEntryMulti(x:PatternCell) {
    genericError("pattern variable cannot be used in non-pattern expression");
    return Vector[CompiledExpr]();
}
overload compileEnvEntryMulti(x:ListPatternCell) {
    genericError("pattern variable cannot be used in non-pattern expression");
    return Vector[CompiledExpr]();
}
overload compileEnvEntryMulti(x:RTVariable) {
    genericError("single value used in multi-valued context");
    return Vector[CompiledExpr]();
}
overload compileEnvEntryMulti(x:RTListVariable) {
    assert(size(x.lowLevelLocals) == size(x.types));
    return maybe(envEntryToRTResultList(x),
        results ref=> {
            assert(size(results) == size(x.lowLevelLocals));
            return map(
                (a, b) => CompiledExpr(ir.AtomicExpr(ir.LocalRef(a)), Maybe(b)), 
                x.lowLevelLocals,
                results,
            );
        },
        () ref=> Vector[CompiledExpr](),
    );
}
overload compileEnvEntryMulti(x:RTLabel) {
    genericError("label cannot be used as value");
    return Vector[CompiledExpr]();
}



//
// compileValue
//

compileValue(x:Value) CompiledExpr {
    return match(x,
        BoolValue, y ref=> CompiledExpr(
            ir.AtomicExpr(ir.BoolLiteral(y.value)),
            valueToRTResult(x),
        ),
        IntValue, y ref=> CompiledExpr(
            ir.AtomicExpr(ir.IntLiteral(y.value)),
            valueToRTResult(x),
        ),
        StringValue, y ref=> {
            genericError("string are not yet supported");
            return CompiledExpr();
        },
        TupleValue, y ref=> {
            genericError("tuples are not yet supported");
            return CompiledExpr();
        },
        MatchDefault, y ref=> CompiledExpr(
            ir.AtomicExpr(ir.StaticLiteral(x)),
            valueToRTResult(x),
        ),
    );
}



//
// compileValueList
//

compileValueList(x:ValueList) Vector[CompiledExpr] {
    return map(compileValue, x);
}



//
// compileCallWithOneResult, compileCall
//

compiledExprListInfo(exprs:Vector[CompiledExpr]) = maybeRTResultList(mapped(x => ref x.info, exprs));

compileCallWithOneResult(x:Value, args:Vector[CompiledExpr]) CompiledExpr {
    var results = compileCall(x, args);
    // XXX nonterminating return should succeed, no-value return should fail here
    ensureArity(1, size(results));
    return move(results[0]);
}

compileCall(f:Value, args:Vector[CompiledExpr]) Vector[CompiledExpr] {
    return maybe(analyzeCallable(f, compiledExprListInfo(args)),
        specialization ref=> {
            var irProc = compileSpecialization(specialization);
            var callExpr = ir.Expr(ir.CallExpr(irProc, map(x => x.irExpr, args)));
            var locals = maybe(specialization.returns,
                returns ref=> map(newTemp, returns),
                ()      ref=> Vector[ir.Local](),
            );
            emitLocalDef(locals, callExpr);
            return maybe(specialization.returns,
                returns ref=> map(
                    (local, info) => CompiledExpr(ir.AtomicExpr(ir.LocalRef(local)), Maybe(info)),
                    locals, returns,
                ),
                () ref=> Vector[CompiledExpr](),
            );
        },
        () ref=> Vector[CompiledExpr](),
    );
}


//
// compileCallWithOneResultInto, compileCallInto
//

compileCallWithOneResultInto(x:Value, args:Vector[CompiledExpr], out:ir.Local) {
    compileCallInto(x, args, [out]);
}

[A | ir.LocalSequence?(A)]
compileCallInto(f:Value, args:Vector[CompiledExpr], out:A) {
    // XXX mark "out" as nonterminating somehow
    maybe(analyzeCallable(f, compiledExprListInfo(args)), specialization => {
        ensureCompatibleLocals(out, specialization.returns);
        var irProc = compileSpecialization(specialization);
        var callExpr = ir.Expr(ir.CallExpr(irProc, map(x => x.irExpr, args)));
        emitInitialize(out, callExpr);
    });
}
