
import maybe.*;
import newclay.core.(Symbol, Value);



//
// types
//

record Type = referenceType(
    tag: TypeTag,
    symbol: Symbol,
);

variant TypeTag = BoolTag
                | IntegerTag
                | FloatTag
                | PointerTag
                | ArrayTag
                | TupleTag
                | UnionTag
                ;

overload TypeTag() = TypeTag(BoolTag());

record BoolTag();

enum IntegerKind {
    SIGNED_INTEGER,
    UNSIGNED_INTEGER,
}

record IntegerTag(
    kind: IntegerKind,
    bits: Int,
);

record FloatTag(
    bits: Int,
);

record PointerTag(
    target: Type,
);

record ArrayTag(
    element: Type,
    size: Int,
);

record TupleTag(
    elements: Vector[Type],
);

record UnionTag(
    members: Vector[Type],
);


overload printReprTo(stream, x:Type) { printReprTo(stream, x.symbol); }
overload printTo(stream, x:Type) { printReprTo(stream, x); }



//
// Local, LocalSequence?
//

enum AccessKind {
    ACCESS_CONST,
    ACCESS_REF,
    ACCESS_RVALUE,
}

record Local = referenceType(
    name: String,
    value?: Bool,
    type: Type,
    access: AccessKind,
);

accessKindString(x:AccessKind) {
    switch (x) {
    case ACCESS_CONST : return "const";
    case ACCESS_REF : return "ref";
    case ACCESS_RVALUE : return "rvalue";
    default: assert(false); return "";
    }
}

overload printReprTo(stream, x:AccessKind) {
    printReprTo(stream, accessKindString(x));
}
overload printTo(stream, x:AccessKind) {
    printReprTo(stream, x);
}

overload printReprTo(stream, x:Local) {
    printTo(stream, Local);
    var kind = if (x.value?) "value" else "reference";
    printReprValuesTo(stream, x.name, kind, x.type, x.access);
}
overload printTo(stream, x:Local) { printReprTo(stream, x); }


[A]
LocalSequence?(static A) =
    SizedSequence?(A) and (SequenceElementType(A) == Local);



//
// Program, Procedure
//

record Program = referenceType(
    procedures: Vector[Procedure],
);

newProgram() = Program(Vector[Procedure]());

record Procedure = referenceType(
    name: String,
    inputs: Vector[Input],
    outputs: Vector[Output],
    code: CodeBody,
);

overload Procedure(forward name:String) =
    Procedure(name, Vector[Input](), Vector[Output](), CodeBody());

enum InputKind {
    INPUT_CONST,
    INPUT_REF,
    INPUT_RVALUE,
    INPUT_MOVABLE_RVALUE,
}

record Input = referenceType(
    kind: InputKind,
    type: Type,
    local: Local,
);

enum OutputKind {
    OUTPUT_CONST,
    OUTPUT_REF,
    OUTPUT_RVALUE,
    OUTPUT_VALUE,
}

record Output = referenceType(
    kind: OutputKind,
    type: Type,
    local: Local,
);

variant CodeBody = Block
                 | CCodeBody
                 ;

overload CodeBody() = CodeBody(Block());

record CCodeBody = referenceType(
    code: String,
);


overload printReprTo(stream, x:InputKind) {
    switch (x) {
    case INPUT_CONST: printTo(stream, "const"); break;
    case INPUT_REF: printTo(stream, "ref"); break;
    case INPUT_RVALUE: printTo(stream, "rvalue"); break;
    case INPUT_MOVABLE_RVALUE: printTo(stream, "forward rvalue"); break;
    }
}
overload printTo(stream, x:InputKind) { printReprTo(stream, x); }

overload printReprTo(stream, x:OutputKind) {
    switch (x) {
    case OUTPUT_CONST: printTo(stream, "const"); break;
    case OUTPUT_REF: printTo(stream, "ref"); break;
    case OUTPUT_RVALUE: printTo(stream, "rvalue"); break;
    case OUTPUT_VALUE: printTo(stream, "value"); break;
    }
}
overload printTo(stream, x:OutputKind) { printReprTo(stream, x); }



//
// Expr
//

variant AtomicExpr = BoolLiteral
                   | IntLiteral
                   | StaticLiteral
                   | LocalRef
                   | LocalAddressOf
                   ;

overload AtomicExpr() = AtomicExpr(BoolLiteral());

record BoolLiteral(
    value: Bool,
);

record IntLiteral(
    value: Int,
);

record StaticLiteral(
    value: Value,
);

record LocalRef = referenceType(
    local: Local,
);

record LocalAddressOf = referenceType(
    local: Local,
);

variant Expr = AtomicExpr
             | CallExpr
             ;

record CallExpr = referenceType(
    callable: Procedure,
    args: Vector[AtomicExpr],
);


overload printReprTo(stream, x:LocalRef) {
    printTo(stream, LocalRef);
    printReprValuesTo(stream, x.local.name);
}
overload printTo(stream, x:LocalRef) { printReprTo(stream, x); }

overload printReprTo(stream, x:CallExpr) {
    printTo(stream, CallExpr);
    printReprValuesTo(stream, x.callable.name, x.args);
}
overload printTo(stream, x:CallExpr) { printReprTo(stream, x); }



//
// Statement
//

variant Statement = Block
                  | LocalDef
                  | Initialize
                  | If
                  | While
                  | Return
                  | Break
                  | Continue
                  ;

overload Statement() = Statement(Block());

record Block = referenceType(
    statements: Vector[Statement],
);

record LocalDef = referenceType(
    locals: Vector[Local],
    expr: Maybe[Expr],
);

record Initialize = referenceType(
    locals: Vector[Local],
    expr: Expr,
);

record If = referenceType(
    condition: AtomicExpr,
    thenPart: Block,
    elsePart: Maybe[Block],
);

overload If(condition:AtomicExpr, thenPart:Block)
    = If(condition, thenPart, nothing(Block));

overload If(condition:AtomicExpr, thenPart:Block, elsePart:Block)
    = If(condition, thenPart, Maybe(elsePart));

record While = referenceType(
    condition: AtomicExpr,
    bodyPart: Block,
);

record Return();
record Break();
record Continue();

overload printReprTo(stream, x:Initialize) {
    printTo(stream, Initialize);
    printReprValuesTo(stream, map(y => y.name, x.locals), x.expr);
}
overload printTo(stream, x:Initialize) { printReprTo(stream, x); }
