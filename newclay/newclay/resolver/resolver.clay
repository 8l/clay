import newclay.ast as ast;
import newclay.ast.(visitAST);
import newclay.core.*;
import maybe.*;

procedure resolveAST;

alias DummyValue = Value(BoolValue(false));

private record ResolveASTVisitor(env:EnvParent);

overload visitAST(r:ResolveASTVisitor, lambda:ast.LambdaExpr) {
    visitAST(r, lambda.predicate);
    visitAST(r, lambda.formalArgs);

    var subenv = newEnv(r.env);

    for (arg in lambda.formalArgs.items)
        envAdd(subenv, arg, DummyValue);
    maybe(lambda.formalArgs.variadicItem, arg ref=> {
        envAdd(subenv, arg, DummyValue);
    });

    var subr = ResolveASTVisitor(EnvParent(subenv));

    visitAST(subr, lambda.body);
}

overload visitAST(r:ResolveASTVisitor, oload:ast.Overload) {
    visitAST(r, oload.predicate);
    visitAST(r, oload.target);
    visitAST(r, oload.args);

    var subenv = newEnv(r.env);

    for (arg in oload.args.items)
        envAdd(subenv, arg.name, DummyValue);
    maybe(oload.args.variadicItem, arg ref=> {
        envAdd(subenv, arg.name, DummyValue);
    });

    maybe(oload.returnedNames, returnedNames ref=> {
        for (ret in returnedNames)
            envAdd(subenv, ret, DummyValue);
    });

    var subr = ResolveASTVisitor(EnvParent(subenv));

    visitAST(subr, oload.returns);
    visitAST(subr, oload.body);
}

overload visitAST(r:ResolveASTVisitor, nameRef:ast.NameRef) {
    nameRef.env = match(privateLookup(r.env, nameRef.name),
        Value, v => match(v,
            SymbolHead,   h => ast.EnvRef(ast.ModuleEnvRef(h.module.name)),
            Symbol,       s => ast.EnvRef(ast.ModuleEnvRef(s.head.module.name)),
            Primitive,    p => ast.EnvRef(ast.ModuleEnvRef(primitivesModuleName)),
            ModuleValue,  m => maybe(m.module,
                module => ast.EnvRef(ast.ModuleAliasRef(module.name)),
                () => ast.EnvRef(ast.ModulePathRef(nameRef.name.str)),
            ),
            MatchDefault, x => ast.EnvRef(ast.LocalEnvRef()),
        ),
        MatchDefault, x => ast.EnvRef(ast.LocalEnvRef()),
    );
}

overload resolveAST(e:EnvParent, a) {
    visitAST(ResolveASTVisitor(e), a);
}
