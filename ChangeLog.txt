0.0 -> 0.1
----------
Changes made:
* Keywords that do similar things have been combined:
    'callbyname' is now 'alias'
    'lvalue' is now 'ref'
* Two-dot ellipsis '..' can now be used interchangeably with three-dot ellipsis '...'.
* The 'procedure' keyword has been changed to 'define'.

Planned changes:
* A "clayfix" program is provided to update code written for Clay 0.0 to
  compile in 0.1.
* Keywords that do similar things have been combined:
    The 'static' keyword in expressions and argument lists is now the '#' operator.
    Identifiers now lower to StringConstants, and must always be quoted:
        static 9 => #9
        static foo => #foo
        static #foo => #"foo"
        #foo => #"foo"
* Return type syntax has been changed.
    // 0.0
    foo(x:Int, y:Int) Int = x + y; // anonymous returns
    foo(x:Int, y:Int) z:Int        // named returns
    {
        z <-- x + y;
    }

    // 0.1
    foo(x:Int, y:Int) : Int = x + y; // anonymous returns
    foo(x:Int, y:Int) --> z:Int      // named returns
    {
        z <-- x + y;
    }
* A top-level 'module' declaration may be included in source files, immediately
  after any 'import' definitions.
    import foo.*;
    import bar.*;

    module bas;

  It is currently ignored, but will be used in the future to provide module-specific
  build flags and module-level parameters.

* The 'new' keyword has been removed. 'sharedpointers.allocateShared'
  and 'uniquepointers.allocateUnique' have been both renamed to 'new' in their
  respective modules:
    // 0.0
    foo = new Foo(1); // always called allocateShared

    // 0.1
    import sharedpointers.*;
    foo = new(Foo(1));
    // -- or to allocate unique --
    import uniquepointers.*;
    foo = new(Foo(1));
* 'record' has been renamed to 'struct', and library functions with 'record' or
  'Record' in the name have been renamed to 'struct'/'Struct'.
* enum and variant syntax has been changed to be more congruent with record syntax:
    // define enum type Foo with values ZIM, ZANG, ZUNG
    enum Foo(ZIM, ZANG, ZUNG);

    // define variant type Foo over Zim, Zang, Zung:
    variant Foo(Zim, Zang, Zung);

    // add Zippity,Doo,Dah to variant Foo
    instance Foo(Zippity, Doo, Dah);

* Universe overloads have been unrestricted. '[F|Foo?(F)] F() {}' will now overload
  all symbols matching Foo?(F) instead of just types. Universe overloads also now have
  lower precedence than specific overloads.
* The mapping of types to LLVM representation is exposed. A type is a symbol for which
  llvmRepresentation(#T) is overloaded. llvmRepresentation(#T) should return an
  identifier containing the LLVM IR description of the type. For example:
    define Int;
    overload llvmRepresentation(#Int) = #"i32";

    define Vec[T,n];
    [T,n | Type?(T)] overload llvmRepresentation(#Vec[T,n])
        = cat(
            #"<",
            LLVMRepresentation(T), #" * ", StaticName(n),
            #">"
        );
  "struct", "variant", and "enum" syntax is still provided, but they now desugar
  into symbol forms.
* 'union' syntax is provided for defining named union types. Example:
    union FloatBits32(bits:Int32, float:Float32);
* 'newtype' syntax is provided for strong typedefs. A newtype shares the exact
  low-level representation and ABI of the original type, but its type is distinct.
  The type can be defined to delegate its overloads to the original type by default,
  or to provide access to the original type representation by field reference.
  Examples:
    newtype PositionToken = Int; // delegate to Int
    newtype PositionToken(value:Int); // use "token.value" to access Int
* All structs are now "RegularRecord" (which is gone now), and structs should not
  provide custom value semantics. A new syntax '<bikeshed>' is provided for types
  with custom value semantics.
    <bikeshed> Vector[T](buffer:Pointer[T], size:SizeT, capacity:SizeT);
  In addition to custom value semantics, <bikeshed> types also have unspecified
  memory layouts and are not necessarily ABI-compatible with equivalent C structs.

* The prelude has been shrunk to only include a minimum set of libraries by default.
  Those prelude modules have been moved to core/*, and the default prelude
  imports core.*.
  The following modules must now be imported if used:
    <to be filled in>
  The convenience module prelude_0_0 imports all the above modules. You can also
  provide your own prelude.clay in a module search path to override the default
  prelude.
* Dispatch is now overloadable. The dispatch overload desugars as follows:
    foo(*a,  b) ==> dispatch(foo, #(0,), a, b)
    foo( a, *b) ==> dispatch(foo, #(1,), a, b)
    foo(*a, *b) ==> dispatch(foo, #(0,1), a, b)
  The prelude provides a default implementation for variants that works as in Clay 0.0,
  as well as a default implementation for multiple dispatch that decomposes into
  cascading single dispatch.
* Variant representation is now overloadable. In addition to the default tagged-union
  representation, the prelude also provides a nullable pointer representation, which
  is used for Maybe[Pointer[T]], Maybe[SharedPointer[T]], and Maybe[UniquePointer[T]].
  Pointer types should now be considered non-nullable and Maybe[] used for
  nullable pointers.
* 'and' and 'or' are now overloadable, and can take a lambda on the right hand side.
  They desugar as follows:
    a and b         ==> andThen(a, () -> b)
    a and x -> b(x) ==> andThen(a, x -> b(x))
    a or  b         ==> orElse(a, () -> b)
    a or  x -> b(x) ==> orElse(a, x -> b(x))
  Overloads are provided in the standard library that behave as usual for Bool, and
  that apply monadically to Maybe[T]:
    var a = just(3), b = nothing(Int);
    println(a or 5); // prints 3, right-hand side not evaluated
    println(b or 5); // prints 5
    println(a and x -> x+1); // prints just(4)
    println(b and x -> x+1); // prints nothing(Int), right-hand side not evaluated
* Standard containers now implement bounds checking in index(). A new operator
  indexUnsafe(a, ..b) (with operator syntax a<[..b]>) is provided for unchecked
  indexing.
* External functions now have Clay linkage by default. External C functions must be
  declared with the C ABI (or stdcall or fastcall):
    // 0.0
    external foo(x:Int) Int;
    // 0.1
    external (C) foo(x:Int):Int;
  Clay-linkage externals may return multiple values and throw exceptions.
  cdecl/stdcall/fastcall externals will now throw an error if they are declared to
  use non-POD types as arguments or return values, or if they are declared as returning
  multiple return values.
* External declarations may now be parameterized. For example, the libc family of
  "sqrt" functions may be bound as follows:
    define LibcMathLetter;
    overload LibcMathLetter(#Float) = #"f";
    overload LibcMathLetter(#Double) = #"";
    overload LibcMathLetter(#LongDouble) = #"l";

    [T|T == Float or T == Double or T == LongDouble]
    external (C, cat(#"sqrt", LibcMathLetter(T))) sqrt(n:T):T;

  External definitions may also be parameterized, but must be given a set of types
  for which to be instantiated using new [... in ...] syntax. For example, the
  following will declare C-linkage functions "quadrootf", "quadroot", "quadrootl"
  in terms of the above sqrt declaration:

    [T in Float, Double, LongDouble]
    external (C, cat(#"quadroot", LibcMathLetter(T)))
    quadroot(n:T):T = sqrt(sqrt(n));

* A new external ABI "llvmIntrinsic" is provided to simplify interfacing with LLVM
  intrinsics. Function arguments map one-to-one to LLVM intrinsic arguments except for
  static integer or boolean arguments, which are expanded into literal arguments,
  allowing Clay to interface with intrinsics that expect literal arguments.
  The external symbol name is unmangled. Example:
    [align,volatile? | Int?(align) and Bool?(volatile?)]
    external (llvmIntrinsic, "llvm.memcpy.p0i8.p0i8.i32") llvm_memcpy32(
        Pointer[UInt8] dst,
        Pointer[UInt8] src,
        Int32 len,
        #align,
        #volatile?
    );

