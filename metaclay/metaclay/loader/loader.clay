
import maybe.*;
import metaclay.common.*;
import metaclay.lexer.*;
import metaclay.ast as ast;
import metaclay.parser.*;
import metaclay.core.*;

private primitiveName(kind) {
    var s = printString(kind);
    assert(beginsWith?(s, "PRIM_"));
    return sliceFrom(s, size("PRIM_"));
}

private primitivesEnv() {
    var env = newEnv(Env());
    for (i in range(EnumMemberCount(PrimitiveKind))) {
        var kind = PrimitiveKind(i);
        var name = ast.Identifier(primitiveName(kind));
        var entry = Primitive(kind);
        envAdd(env, name, entry);
    }
    return env;
}

private initializeGlobals(module) {
    var env = newEnv(primitivesEnv());
    for (item in module.ast.topLevelItems) {
        match(item,
            ast.Symbol, x => {
                envAdd(env, x.name, SymbolHead(x, env));
            },
            ast.Function, x => {
                var y = Function(x, env);
                maybe(x.body,
                    z => { push(y.overloads, Overload(z, env)); },
                    () => {},
                );
                envAdd(env, x.name, y);
            },
            ast.Overload, x => {
            }
        );
    }
    module.globals = env;
}

private envLookupFunction(env, name) {
    var entry = envLookup(env, name);
    if (not variantIs?(entry, Function))
        error("expecting a function '", name, "' name, but received: ", entry);
    return variantAs(entry, Function);
}

private initializeOverloads(module) {
    for (item in module.ast.topLevelItems) {
        match(item,
            ast.Symbol, x => {},
            ast.Function, x => {},
            ast.Overload, x => {
                var func = envLookupFunction(module.globals, x.target);
                push(func.overloads, Overload(x, module.globals));
            },
        );
    }
}

loadProgram(path) {
    var module = Module(String("__main__"));
    module.ast = parse(tokenize(readSource(path)));
    initializeGlobals(module);
    initializeOverloads(module);
    return module;
}
