
import maybe.*;
import metaclay.lexer.*;



//
// TokenRange
//

alias TokenRange = Range[SizeT];



//
// AST nodes
//

private ast(...fields) = referenceTypeWithPredicate(
    ASTNode?,
    tokens: TokenRange,
    mainToken: SizeT,
    ...fields,
);

procedure ASTNode?;
overload ASTNode?(x) = false;

[T, ...A | ASTNode?(T)
           and (Tuple[...ReferenceTypeFieldTypes(T)] ==
                Tuple[TokenRange, SizeT, ...A])]
callbyname overload T(...args:A) {
    alias tokens = TokenRange(SizeT(0), SizeT(0));
    return T(tokens, SizeT(0), ...args);
}

[T | ASTNode?(T)]
overload printReprTo(stream, x:T) {
    printTo(stream, T);
    printReprValuesTo(stream, ...dropValues(static 2, ...referenceTypeFields(x)));
}



//
// VariadicList
//

record VariadicList[T] (
    items: Vector[T],
    variadicItem: Maybe[T],
);



//
// Identifier
//

record Identifier = ast(
    str: String,
);

[S | String?(S) and (S != String)]
overload Identifier(x:S) = Identifier(String(x));



//
// ExprList
//

alias ExprList = Vector[ExprListItem];

variant ExprListItem = UnpackExpr
                     | Expr
                     ;

record UnpackExpr = ast(
    expr: Expr,
);



//
// Expr
//

variant Expr = BoolLiteral
             | IntLiteral
             | StringLiteral
             | NameRef
             | PatternNameRef
             | TupleExpr
             | Call
             | Indexing
             | AndExpr
             | OrExpr
             | LambdaExpr
             | IfExpr
             ;

overload Expr() = Expr(BoolLiteral());

record BoolLiteral = ast(
    value: Bool,
);

record IntLiteral = ast(
    value: String,
);

record StringLiteral = ast(
    value: String,
);

record NameRef = ast(
    name: Identifier,
);

record PatternNameRef = ast(
    name: Identifier,
);

record TupleExpr = ast(
    args: ExprList,
);

record Call = ast(
    expr: Expr,
    args: ExprList,
);

record Indexing = ast(
    expr: Expr,
    args: ExprList,
);

record AndExpr = ast(
    expr1: Expr,
    expr2: Expr,
);

record OrExpr = ast(
    expr1: Expr,
    expr2: Expr,
);

record LambdaExpr = ast(
    formalArgs: VariadicList[Identifier],
    body: ExprList,
);

record IfExpr = ast(
    condition: Expr,
    thenPart: Expr,
    elsePart: Expr,
);



//
// ListPattern
//

alias ListPattern = VariadicList[Pattern];

variant Pattern = BoolLiteral
                | IntLiteral
                | StringLiteral
                | NameRef
                | PatternNameRef
                | IndexingPattern
                ;

record IndexingPattern = ast(
    base: Expr,
    args: ListPattern,
);



//
// TopLevelItem
//

variant TopLevelItem = Symbol
                     | Function
                     | Overload
                     ;

record Symbol = ast(
    name: Identifier,
    params: VariadicList[Identifier],
    expr: Expr,
);

record Function = ast(
    name: Identifier,
    body: Maybe[Overload],
);

record Overload = ast(
    target: Identifier,
    argsPattern: ListPattern,
    predicate: Maybe[Expr],
    body: ExprList,
);



//
// SourceAST
//

record SourceAST = referenceType(
    tokens: SourceTokens,
    topLevelItems: Vector[TopLevelItem],
);
