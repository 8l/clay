import base.*;
import libc;

insertionSortWithPointers(begin, end) {
    var i = begin + 1;
    while (i < end) {
        var x = i^;
        var j = i;
        while ((j-1)^ > x) {
            j^ = (j-1)^;
            j -= 1;
            if (j == begin) break;
        }
        j^ = x;
        i += 1;
    }
}

insertionSort(a) {
    var p = &a[0];
    insertionSortWithPointers(p, p + size(a));
}

// insertionSort(a) {
//     var i = begin(a) + 1;
//     while (i < end(a)) {
//         var x = i^;
//         var j = i;
//         while ((j-1)^ > x) {
//             j^ = (j-1)^;
//             j -= 1;
//             if (j == begin(a)) break;
//         }
//         j^ = x;
//         i += 1;
//     }
// }

reverse(a) {
    var n = size(a);
    for (i in range(n / 2))
        swap(a[i], a[n-i-1]);
}

main() {
    var a = Array[Int, 1000]();
    for (i in range(size(a)))
        a[i] = Int(i*2);
    for (i in range(1000)) {
        insertionSort(a);
        reverse(a);
    }
    libc.printf(cstring("a[0] = %d\n"), a[0]);
    return 0;
}
