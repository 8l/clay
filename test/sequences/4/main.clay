
printList(a) {
    var first = true;
    for (x in a) {
        if (not first)
            print(", ");
        first = false;
        print(x);
    }
    println();
}

testFind(x, a) {
    var i = find(x, a);
    if (i == end(a))
        println("not found ", x);
    else
        println("found ", x, " at ", (i - begin(a)));
}

testBinarySearch(x, a) {
    var lower, upper = ...binarySearch(x, a);
    if (lower == upper)
        print("not ");
    println("found ", x, ", range = [",
            lower-begin(a), ", ", upper-begin(a), "]");
}

record Cons[T] (car: T, cdr: SharedPointer[List[T]]);
record Nil();
variant List[T] = Cons[T] | Nil;

[T]
cons(l: SharedPointer[List[T]], forward value: T) = new List[T](Cons[T](value, l));

[T]
overload printTo(s, c: Cons[T]) {
    printTo(s, c.car, "::", c.cdr^);
}

even?(x) = x % 2 == 0;

main() {
    {
        // test enumerate
        var a = Vector([10, 20, 40, 80, 160]);
        for (i, x in enumerate(a))
            println(i, ") ", x);
    }

    {
        // test map, range, reduce
        var a = map(x => x+1, range(10));
        var s = reduce(add, 0, a);
        println(s);
    }

    {
        // test fully general reduce
        var l = reduce(cons, new List[Int](Nil()), range(5));
        println(l^);
    }

    {
        // test reduceBy
        var s = reduceBy(even?, add, 0, range(20));
        println("evens: ", s[true]);
        println("odds:  ", s[false]);
    }

    {
        // test sum, product, min, max
        var a = Vector(range(1, 11));
        println(sum(a));
        println(product(a));
        swap(min(a), max(a));
        printList(a);
    }

    {
        // test find, binarySearch
        var a = Vector([1, 1, 2, 4, 7, 7, 7, 9, 15, 15, 19]);
        printList(a);
        testFind(10, a);
        testFind(1, a);
        testFind(19, a);
        testBinarySearch(10, a);
        testBinarySearch(1, a);
        testBinarySearch(19, a);
    }
}
