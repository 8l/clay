import base.*;
import libc;

external qsort(base:RawPointer, n:SizeT, width:SizeT,
               compare:CCodePointer[RawPointer, RawPointer, Int]): Void;

compare(pa, pb) {
    if (pa^ < pb^) return -1;
    if (pa^ > pb^) return 1;
    return 0;
}

main() {
    var a = Array[Int, 100]();
    var x = Int(size(a));
    for (e in a) {
        e = 2*x;
        x -= 1;
    }

    libc.printf(cstring("a[0], a[2] = %d, %d\n"), a[0], a[2]);

    var fp = makeCCodePointer(compare, Pointer[Int], Pointer[Int]);

    libc.printf(cstring("compare test = %d\n"), fp(&a[0], &a[2]));
    libc.printf(cstring("compare test = %d\n"), fp(&a[0], &a[0]));
    libc.printf(cstring("compare test = %d\n"), fp(&a[2], &a[0]));

    var fp2 = CCodePointer[RawPointer, RawPointer, Int](fp);

    qsort(Pointer[Int8](&a[0]),
          size(a),
          TypeSize(Int),
          fp2);

    libc.printf(cstring("a[0], a[2] = %d, %d\n"), a[0], a[2]);
    return 0;
}
