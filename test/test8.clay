import kernel.*;
import libc.*;

external qsort(base:Pointer[Int8], n:Int32, width:Int32,
               compare:FunctionPointer[Pointer[Int8], Pointer[Int8], Int32]): Void;

compare(pa, pb) {
    if (pa^ < pb^) return -1;
    if (pa^ > pb^) return 1;
    return 0;
}

main() {
    var a = Array[Int32, 100]();
    var x = size(a);
    for (e in a) {
        e = 2*x;
        x = x - 1;
    }

    printf(cstring("item[0], item[2] = %d, %d\n"), item(a, 0), item(a, 2));

    var fp = makeFunctionPointer(compare, Pointer[Int32], Pointer[Int32]);

    printf(cstring("compare test = %d\n"), fp(&item(a,0), &item(a,2)));
    printf(cstring("compare test = %d\n"), fp(&item(a,0), &item(a,0)));
    printf(cstring("compare test = %d\n"), fp(&item(a,2), &item(a,0)));

    var fp2 = to(
        FunctionPointer[Pointer[Int8], Pointer[Int8], Int32],
        fp);

    qsort(to(Pointer[Int8], &item(a, 0)),
          size(a),
          TypeSize(Int32),
          fp2);

    printf(cstring("item[0], item[2] = %d, %d\n"), item(a, 0), item(a, 2));
    return 0;
}
