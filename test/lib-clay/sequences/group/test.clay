import test.*;
import sequences.*;
import strings.encodings.utf8.*;
import strings.*;

main() = testMain(
    TestSuite("lazy grouped sequences", array(
        TestCase("iterator-only sequences", -> {
            var ustr = grouped(UTF8("abc123!!!"), 3);
            var iter = iterator(ustr);

            var v = nextValue(iter);

            expectTrue(hasValue?(v));
            expectSequence(getValue(v),
                UniChar('a'), UniChar('b'), UniChar('c')
            );

            v = nextValue(iter);

            expectTrue(hasValue?(v));
            expectSequence(getValue(v),
                UniChar('1'), UniChar('2'), UniChar('3')
            );

            v = nextValue(iter);

            expectTrue(hasValue?(v));
            expectSequence(getValue(v),
                UniChar('!'), UniChar('!'), UniChar('!')
            );

            v = nextValue(iter);

            expectFalse(hasValue?(v));
        }),
        TestCase("random access coordinate sequences", -> {
            var str = grouped(String("abc123!!!"), 3);
            var iter = iterator(str);

            var v = nextValue(iter);

            expectTrue(hasValue?(v));
            expectSequence(getValue(v),
                'a', 'b', 'c'
            );

            v = nextValue(iter);

            expectTrue(hasValue?(v));
            expectSequence(getValue(v),
                '1', '2', '3'
            );

            v = nextValue(iter);

            expectTrue(hasValue?(v));
            expectSequence(getValue(v),
                '!', '!', '!'
            );

            v = nextValue(iter);

            expectFalse(hasValue?(v));

            expectSequence(str[0],
                'a', 'b', 'c'
            );
            expectSequence(str[1],
                '1', '2', '3'
            );
            expectSequence(str[2],
                '!', '!', '!'
            );

            str[2][1] = '?';

            expectSequence(str[2],
                '!', '?', '!'
            );

            expectTrue(
                begin(str) + size(str) == end(str)
            );
            expectTrue(
                end(str) - begin(str) == size(str)
            );
            expectTrue(end(str) > begin(str));
            expectFalse(end(str) < begin(str));
            expectFalse(end(str) == begin(str));
            expectFalse(begin(str) > begin(str));
            expectFalse(begin(str) < begin(str));
            expectTrue(begin(str) == begin(str));
        }),
    )),
);
