import test.*;
import comparators.*;

main() = testMain(
  TestSuite("Natural comparators", array(
    TestCase("should do the same thing as the base operations", -> {
      var c = natural();
    
      expectEqual(1 == 2, equals?(c, 1, 2)); 
      expectEqual(1 == 1, equals?(c, 1, 1)); 
      expectEqual(1 != 1, notEquals?(c, 1, 1)); 
      expectEqual(1 == 1, lesser?(c, 1, 2)); 
    })
  )),
  TestSuite("Reverse comparators", array(
    TestCase("should do the same thing as the base operations for equality", -> {
      var c = reversed();
    
      expectEqual(1 == 2, equals?(c, 1, 2)); 
      expectEqual(1 == 1, equals?(c, 1, 1)); 
      expectEqual(1 != 1, notEquals?(c, 1, 1)); 
    }),
    TestCase("should do the opposite to the base operations for ordering", -> {
      var c = reversed();

      expectEqual(false, lesser?(c, 1, 2));
      expectEqual(true, lesserEquals?(c, 1, 1));
      expectEqual(false, lesser?(c, 1, 1));
    })
  )),
  TestSuite("Mapped comparators", array(
    TestCase("should use the provided function for all operations", -> {
      var c = comparing(size);

      expectEqual(true, equals?(c, "foo", "bar"));
      expectEqual(true, notEquals?(c, "foo", "bars"));
      expectEqual(true, notEquals?(c, "foo", "bars"));
    })
  ))
);
