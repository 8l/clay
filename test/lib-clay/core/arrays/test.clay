import test.*;

record NonCopyable (
);

overload resetUnsafe(x:NonCopyable) {}
overload destroy(x:NonCopyable) {}

overload RegularRecord?(#NonCopyable) = false;
overload BitwiseMovedType?(#NonCopyable) = true;

staticassert (     Movable?(NonCopyable));
staticassert (not Copyable?(NonCopyable));

main() = testMain(
    TestSuite("core.arrays", array(
        TestCase("arrayElements", -> {
            var a = array(3, 5, 8);

            expectEqual([], [..arrayElements(Array[UInt, 0]())]);
            expectEqual([true], [..arrayElements(array(true))]);
            expectEqual([3, 5, 8], [..arrayElements(a)]);
        }),
        TestCase("ArrayRef", -> {
            var a = array(3, 5, 8);
            expectEqual(ArrayRef(a), a);
        }),
        TestCase("indexing", -> {
            var b = array(..integers(#256));
            expectEqual(224, b[224_uss]);
        }),
        TestCase("array from single non-copyable", -> {
            array(NonCopyable());
        }),
    )));
