import test.*;
import random.*;
import printer.(str);

// WARNING: This test suite may fail generately. Care is taken to assure that the probability of it doing so 
// is relatively low in the case that there is a genuine failure (<= 2^-64 is the general goal).
// Failures in this test suite that do not occur again on rerunning are troubling but not necessarily a major problem. 
main() = testMain(
  TestSuite("Random number generation", array(
    TestCase("consecutive runs from the same RNG", -> {
      var rng = XORShiftRNG();

      expectNotEqual(generate(rng, UInt64), generate(rng, UInt64)); 
    }),

    TestCase("Independent runs from a copy", -> {
      var rng = XORShiftRNG();
      var rng2 = rng;

      expectEqual(generate(rng, UInt64), generate(rng2, UInt64));
    }),

    TestCase("runs from two RNGs created consecutively", -> {
      var rng = XORShiftRNG();
      var rng2 = XORShiftRNG();

      expectNotEqual(generate(rng, UInt64), generate(rng2, UInt64)); 
    }),
   
    TestCase("uniform integers should be in range", -> {
      var rng = XORShiftRNG();

      for(i in range(5)){
        var x = uniform(rng, 1, 10);
        expectTrue(x >= 1);
        expectTrue(x < 10);
      }
    }),
    TestCase("uniform integers should cover the whole range", -> {
      var rng = XORShiftRNG();
      var results = Array[Bool, 5]();

      for(i in range(200)){
        results[uniform(rng, 0, 5)] = true; 
      }

      for(i in range(5)){
        expectTrue(results[i]);
      }
    }),
    TestCase("uniform doubles should be in range", -> {
      var rng = XORShiftRNG();

      for(i in range(100)){
        var x = uniform(rng, 1.0, 3.0);
        expectTrue(x >= 1.0);
        expectTrue(x < 3.0);
      }
    }),
  ))
);
