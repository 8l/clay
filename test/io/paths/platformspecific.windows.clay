
import test.*;
import io.paths.*;

expectSplitPath(test, path, expected) {
    expectEqual(test,
        "[...splitPath(\"" + path + "\")]",
        expected,
        [...splitPath(path)],
    );
}

expectPathComponents(test, path, expected) {
    expectEqual(test,
        "pathComponents(\"" + path + "\")",
        expected,
        pathComponents(path),
    );
}

expectJoinPath(test, parts, expected) {
    var argumentsStr = String();
    printTo(argumentsStr, Vector(parts));
    expectEqual(test,
        "joinPath(" + argumentsStr + ")",
        expected,
        joinPath(parts),
    );
}

testSuite() =
    TestSuite("path test suite", Tuple(
        TestCase("splitPath test cases", test => {
            expectSplitPath(test, "", ["", ""]);
            expectSplitPath(test, "\\", ["\\", ""]);
            expectSplitPath(test, "foo", ["", "foo"]);
            expectSplitPath(test, "foo\\", ["", "foo"]);
            expectSplitPath(test, "\\foo", ["\\", "foo"]);
            expectSplitPath(test, "\\foo\\", ["\\", "foo"]);
            expectSplitPath(test, "\\foo\\bar", ["\\foo", "bar"]);
            expectSplitPath(test, "\\foo\\bar\\", ["\\foo", "bar"]);
            expectSplitPath(test, "z:\\foo\\bar\\", ["z:\\foo", "bar"]);
            expectSplitPath(test, "z:foo\\bar", ["z:foo", "bar"]);
            expectSplitPath(test, "z:foo\\", ["z:", "foo"]);
            expectSplitPath(test, "z:\\", ["z:\\", ""]);
            expectSplitPath(test, "z:", ["z:", ""]);
            expectSplitPath(test, "\\\\woof\\foo\\bar\\", ["\\\\woof\\foo\\", "bar"]);
            expectSplitPath(test, "\\\\woof\\foo\\bar", ["\\\\woof\\foo\\", "bar"]);
            expectSplitPath(test, "\\\\woof\\foo\\", ["\\\\woof\\foo\\", ""]);
            expectSplitPath(test, "\\\\woof\\foo", ["\\\\woof\\foo", ""]);
        }),
        TestCase("pathComponents test cases", test => {
            expectPathComponents(test, "", Vector[String]());
            expectPathComponents(test, "\\", ["\\"]);
            expectPathComponents(test, "foo", ["foo"]);
            expectPathComponents(test, "foo\\", ["foo"]);
            expectPathComponents(test, "\\foo", ["\\", "foo"]);
            expectPathComponents(test, "\\foo\\", ["\\", "foo"]);
            expectPathComponents(test, "\\foo\\bar", ["\\", "foo", "bar"]);
            expectPathComponents(test, "\\foo\\bar\\", ["\\", "foo", "bar"]);
            expectPathComponents(test, "\\foo\\bar\\baz\\", ["\\", "foo", "bar", "baz"]);
            expectPathComponents(test, "z:\\foo\\bar\\baz\\", ["z:", "\\", "foo", "bar", "baz"]);
            expectPathComponents(test, "z:foo\\bar\\baz\\", ["z:", "foo", "bar", "baz"]);
            expectPathComponents(test, "\\\\woof\\foo\\bar\\baz\\", ["\\\\woof\\foo", "\\", "bar", "baz"]);
        }),
        TestCase("joinPath test cases", test => {
            expectJoinPath(test, Vector[String](), "");
            expectJoinPath(test, [""], "");
            expectJoinPath(test, ["", ""], "");
            expectJoinPath(test, ["", "\\"], "\\");
            expectJoinPath(test, ["foo", "\\"], "\\");
            expectJoinPath(test, ["foo\\bar", "baz\\"], "foo\\bar\\baz");
            expectJoinPath(test, ["foo\\bar\\", "baz"], "foo\\bar\\baz");
            expectJoinPath(test, ["foo\\bar\\", "baz\\"], "foo\\bar\\baz");
            expectJoinPath(test, ["foo\\bar\\", "x:baz\\"], "x:baz");
            expectJoinPath(test, ["foo\\bar\\", "x:baz\\", "\\boo\\hoo\\"], "x:\\boo\\hoo");
            expectJoinPath(test, ["foo\\bar\\", "\\baz\\"], "\\baz");
            expectJoinPath(test, ["foo\\bar\\", "\\\\glop\\blop\\feep\\foop", "\\baz"], "\\\\glop\\blop\\baz");
        }),
    ));

main() = testMain(testSuite());
