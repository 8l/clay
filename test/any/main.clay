


//
// typeId[T]
//

private var _nextTypeId = 0;

nextTypeId() {
    var x = _nextTypeId;
    _nextTypeId += 1;
    return x;
}

var typeId[T] = nextTypeId();



//
// Any
//

record Any (
    id : Int,
    ptr : Pointer[Byte],
    size : SizeT,
    alignment : SizeT,
    copyConstructor : CodePointer[Opaque, Opaque],
    destructor : CodePointer[Opaque, ()],
);

// disable default value semantics
overload RegularRecord?(static Any) = false;

overload Any() {
    return Any(
        -1,
        null(Byte),
        SizeT(0),
        SizeT(0),
        CodePointer[Opaque,Opaque](0),
        CodePointer[Opaque,()](0)
    );
}

overload Any(x:Any) {
    var ptr = allocateRawMemoryAligned(Byte, x.size, x.alignment);
    ptr^ <-- x.copyConstructor(x.ptr^);
    return Any(
        x.id,
        ptr,
        x.size,
        x.alignment,
        x.copyConstructor,
        x.destructor
    );
}

overload moveUnsafe(src:Any) returned:Any {
    returned <-- Any(
        src.id,
        src.ptr,
        src.size,
        src.alignment,
        src.copyConstructor,
        src.destructor
    );
}

overload resetUnsafe(x:Any) {
    x <-- Any();
}

overload destroy(x:Any) {
    if (not null?(x.ptr)) {
        x.destructor(x.ptr^);
        freeRawMemoryAligned(x.ptr);
    }
}

[T]
box(x:T) {
    var ptr = allocateRawMemoryAligned(Byte, TypeSize(T), TypeAlignment(T));
    Pointer[T](ptr)^ <-- x;
    var copyConstructor = makeCodePointer(T, T);
    var destructor = makeCodePointer(destroy, T);
    return Any(
        typeId[T],
        Pointer[Byte](ptr),
        TypeSize(T),
        TypeAlignment(T),
        CodePointer[Opaque,Opaque](copyConstructor),
        CodePointer[Opaque,()](destructor)
    );
}

[T]
anyIs?(x:Any, static T) = (x.id == typeId[T]);

[T]
unbox(x:Any, static T) {
    assert(x.id == typeId[T]);
    return ref Pointer[T](x.ptr)^;
}



//
// testing code
//

main() {
    var a = Vector[Any]();

    push(a, box(true));
    push(a, box(10));
    push(a, box(a));

    for (x in a) {
        if (anyIs?(x, Bool)) {
            var boolValue = unbox(x, Bool);
            println("Bool ", boolValue);
        }
        else if (anyIs?(x, Int)) {
            var intValue = unbox(x, Int);
            println("Int ", intValue);
        }
        else {
            println("Other");
        }
    }
}
