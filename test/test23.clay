import base.*;
import libc;

record _Unwind_Exception {
    exception_class: Int32;
    exception_cleanup: CodePointer[Int32, Pointer[_Unwind_Exception], Void];    
    private_1: Int32;
    private_2: Int32;
}

external _Unwind_RaiseException(p:Pointer[_Unwind_Exception]):Int32;

throw() {
    var exception = allocateMemory(_Unwind_Exception, SizeT(1));
    libc.printf(cstring("Throwing\n"));
    _Unwind_RaiseException(exception); 
}

record Test {
    x: Int32;
}

overload Test() = Test(-1);

overload Test(x:Int32) : Test {
    libc.printf(cstring("Created %d\n"), x);
    returned.x = x;
}

overload Test(other:Test) : Test {
    libc.printf(cstring("Copied %d\n"), x);
    returned.x = other.x;
}

overload destroy(t:Test) {
    libc.printf(cstring("Destroyed %d\n"), t.x);
}

main () {
    try {
        var a = Test(1);
        throw();
        var b = Test(2);
    }
    catch {
        libc.printf(cstring("Caught!\n"));
    }
}
