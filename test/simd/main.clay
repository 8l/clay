
main() {
    var v1 = Vec[Int,2](11, 21);

    var v2 = Vec(2, 3); // type will be inferred as Vec[Int,2]

    display("v1",  v1);
    display("v2",  v2);
    display("add", v1 + v2);
    display("sub", v1 - v2);
    display("mul", v1 * v2);
    display("div", v1 / v2);
    display("rem", v1 % v2);
    display("shl", shiftLeft(v1, v2));
    display("shr", shiftRight(v1, v2));
    display("and", bitwiseAnd(v1, v2));
    display("or",  bitwiseOr(v1, v2));
    display("xor", bitwiseXor(v1, v2));
    println();
    display("v1",  v1);
    display("v2",  v2);
    display("add", v1 + v2 + 3);
    display("sub", v1 - v2 - 3);
    display("mul", v1 * v2 * 3);
    display("div", v1 / v2 / 3);
    display("rem", v1 % v2 % 3);
    display("shl", shiftLeft(shiftLeft(v1, v2), 3));
    display("shr", shiftRight(shiftRight(v1, v2), 3));
    display("and", bitwiseAnd(bitwiseAnd(v1, v2), 3));
    display("or",  bitwiseOr(bitwiseOr(v1, v2), 3));
    display("xor", bitwiseXor(bitwiseXor(v1, v2), 3));
}


display(label, v) {
    println(label, ": ", simd.get(v, 0), ", ", simd.get(v, 1));
}
