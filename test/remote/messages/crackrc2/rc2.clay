import libc.(sprintf);
import commandline.dispatch.*;
import maybe.*;
import io.sockets.*;
import remote.messages.*;

var rc2Permute = [
        217u8,120u8,249u8,196u8, 25u8,221u8,181u8,237u8, 40u8,233u8,253u8,121u8, 74u8,160u8,216u8,157u8, 
        198u8,126u8, 55u8,131u8, 43u8,118u8, 83u8,142u8, 98u8, 76u8,100u8,136u8, 68u8,139u8,251u8,162u8, 
         23u8,154u8, 89u8,245u8,135u8,179u8, 79u8, 19u8, 97u8, 69u8,109u8,141u8,  9u8,129u8,125u8, 50u8, 
        189u8,143u8, 64u8,235u8,134u8,183u8,123u8, 11u8,240u8,149u8, 33u8, 34u8, 92u8,107u8, 78u8,130u8, 
         84u8,214u8,101u8,147u8,206u8, 96u8,178u8, 28u8,115u8, 86u8,192u8, 20u8,167u8,140u8,241u8,220u8, 
         18u8,117u8,202u8, 31u8, 59u8,190u8,228u8,209u8, 66u8, 61u8,212u8, 48u8,163u8, 60u8,182u8, 38u8, 
        111u8,191u8, 14u8,218u8, 70u8,105u8,  7u8, 87u8, 39u8,242u8, 29u8,155u8,188u8,148u8, 67u8,  3u8, 
        248u8, 17u8,199u8,246u8,144u8,239u8, 62u8,231u8,  6u8,195u8,213u8, 47u8,200u8,102u8, 30u8,215u8, 
          8u8,232u8,234u8,222u8,128u8, 82u8,238u8,247u8,132u8,170u8,114u8,172u8, 53u8, 77u8,106u8, 42u8, 
        150u8, 26u8,210u8,113u8, 90u8, 21u8, 73u8,116u8, 75u8,159u8,208u8, 94u8,  4u8, 24u8,164u8,236u8, 
        194u8,224u8, 65u8,110u8, 15u8, 81u8,203u8,204u8, 36u8,145u8,175u8, 80u8,161u8,244u8,112u8, 57u8, 
        153u8,124u8, 58u8,133u8, 35u8,184u8,180u8,122u8,252u8,  2u8, 54u8, 91u8, 37u8, 85u8,151u8, 49u8, 
         45u8, 93u8,250u8,152u8,227u8,138u8,146u8,174u8,  5u8,223u8, 41u8, 16u8,103u8,108u8,186u8,201u8, 
        211u8,  0u8,230u8,207u8,225u8,158u8,168u8, 44u8, 99u8, 22u8,  1u8, 63u8, 88u8,226u8,137u8,169u8, 
         13u8, 56u8, 52u8, 27u8,171u8, 51u8,255u8,176u8,187u8, 72u8, 12u8, 95u8,185u8,177u8,205u8, 46u8, 
        197u8,243u8,219u8, 71u8,229u8,165u8,156u8,119u8, 10u8,166u8, 32u8,104u8,254u8,127u8,193u8,173u8 
];

alias XKey = Array[UInt16, 64];

[K | ContiguousSequence?(K) and (
    SequenceElementType(K) == UInt8
    or SequenceElementType(K) == Int8
    or SequenceElementType(K) == Char
)]
rc2KeySchedule(key: K) xkey: XKey
{
        var len = size(key);
        assert(len > 0u8 and len <= 128u8);

        var xkeyb = Pointer[UInt8](begin(xkey));
        for (i in range(len))
            xkeyb[i] = UInt8(key[i]);

        if (len < 128) { 
                var x = xkeyb[len-1]; 
                for (i in range(128u8 - len)) {
                        x = rc2Permute[bitwiseAnd(x + xkeyb[i], 255)]; 
                        xkeyb[len+i] = x; 
                }
        }

        xkeyb[0] = rc2Permute[xkeyb[0]];

        for (i in reverseRange(64))
            xkey[i] = UInt16(xkeyb[2*i]) + shiftLeft(UInt16(xkeyb[2*i+1]), 8);
}

rc2Encrypt(xkey: XKey, plaintext: Array[UInt8, 8]) cipher: Array[UInt8, 8]
{
        var x76 = shiftLeft(UInt32(plaintext[7]), 8) + UInt32(plaintext[6]); 
        var x54 = shiftLeft(UInt32(plaintext[5]), 8) + UInt32(plaintext[4]); 
        var x32 = shiftLeft(UInt32(plaintext[3]), 8) + UInt32(plaintext[2]); 
        var x10 = shiftLeft(UInt32(plaintext[1]), 8) + UInt32(plaintext[0]); 
        for (i in range(16u32)) {
                x10 += bitwiseAnd(x32, bitwiseNot(x76))
                    + bitwiseAnd(x54, x76)
                    + xkey[4*i+0]; 
                x10 = shiftLeft(x10, 1) + bitwiseAnd(shiftRight(x10, 15), 1u32); 

                x32 += bitwiseAnd(x54, bitwiseNot(x10))
                    + bitwiseAnd(x76, x10)
                    + xkey[4*i+1]; 
                x32 = shiftLeft(x32, 2) + bitwiseAnd(shiftRight(x32, 14), 3u32); 

                x54 += bitwiseAnd(x76, bitwiseNot(x32))
                    + bitwiseAnd(x10, x32)
                    + xkey[4*i+2]; 
                x54 = shiftLeft(x54, 3) + bitwiseAnd(shiftRight(x54, 13), 7u32); 

                x76 += bitwiseAnd(x10, bitwiseNot(x54))
                    + bitwiseAnd(x32, x54)
                    + xkey[4*i+3]; 
                x76 = shiftLeft(x76, 5) + bitwiseAnd(shiftRight(x76, 11), 31u32); 

                if (i == 4 or i == 10) { 
                        x10 += xkey[bitwiseAnd(x76, 63u32)]; 
                        x32 += xkey[bitwiseAnd(x10, 63u32)]; 
                        x54 += xkey[bitwiseAnd(x32, 63u32)]; 
                        x76 += xkey[bitwiseAnd(x54, 63u32)]; 
                } 
        } 
        cipher[0] = UInt8(x10); 
        cipher[1] = UInt8(shiftRight(x10, 8)); 
        cipher[2] = UInt8(x32); 
        cipher[3] = UInt8(shiftRight(x32, 8)); 
        cipher[4] = UInt8(x54); 
        cipher[5] = UInt8(shiftRight(x54, 8)); 
        cipher[6] = UInt8(x76); 
        cipher[7] = UInt8(shiftRight(x76, 8)); 
}

rc2Decrypt(xkey: XKey, cipher: Array[UInt8, 8]) plaintext: Array[UInt8, 8]
{
        var x76 = shiftLeft(UInt32(cipher[7]), 8) + UInt32(cipher[6]); 
        var x54 = shiftLeft(UInt32(cipher[5]), 8) + UInt32(cipher[4]); 
        var x32 = shiftLeft(UInt32(cipher[3]), 8) + UInt32(cipher[2]); 
        var x10 = shiftLeft(UInt32(cipher[1]), 8) + UInt32(cipher[0]); 
        for (i in reverseRange(16u32)) {
                x76 = bitwiseAnd(x76, 65535u32);
                x76 = shiftLeft(x76, 11) + shiftRight(x76, 5); 
                x76 -= bitwiseAnd(x10, bitwiseNot(x54)) + bitwiseAnd(x32, x54) + xkey[4*i+3]; 
                x54 = bitwiseAnd(x54, 65535u32);
                x54 = shiftLeft(x54, 13) + shiftRight(x54, 3); 
                x54 -= bitwiseAnd(x76, bitwiseNot(x32)) + bitwiseAnd(x10, x32) + xkey[4*i+2]; 
                x32 = bitwiseAnd(x32, 65535u32);
                x32 = shiftLeft(x32, 14) + shiftRight(x32, 2); 
                x32 -= bitwiseAnd(x54, bitwiseNot(x10)) + bitwiseAnd(x76, x10) + xkey[4*i+1]; 
                x10 = bitwiseAnd(x10, 65535u32);
                x10 = shiftLeft(x10, 15) + shiftRight(x10, 1); 
                x10 -= bitwiseAnd(x32, bitwiseNot(x76)) + bitwiseAnd(x54, x76) + xkey[4*i+0]; 
                if (i == 5 or i == 11) { 
                        x76 -= xkey[bitwiseAnd(x54, 63u32)]; 
                        x54 -= xkey[bitwiseAnd(x32, 63u32)]; 
                        x32 -= xkey[bitwiseAnd(x10, 63u32)]; 
                        x10 -= xkey[bitwiseAnd(x76, 63u32)]; 
                } 
        }
        plaintext[0] = UInt8(x10); 
        plaintext[1] = UInt8(shiftRight(x10, 8)); 
        plaintext[2] = UInt8(x32); 
        plaintext[3] = UInt8(shiftRight(x32, 8)); 
        plaintext[4] = UInt8(x54); 
        plaintext[5] = UInt8(shiftRight(x54, 8)); 
        plaintext[6] = UInt8(x76); 
        plaintext[7] = UInt8(shiftRight(x76, 8)); 
}

readPlaintext(str) --> plaintext: Array[UInt8, 8] {
    for (i in range(min(size(str), SizeT(8))))
        plaintext[i] = UInt8(str[i]);
    if (size(str) < 8)
        for (i in range(size(str), SizeT(8)))
            plaintext[i] = UInt8(' ');
}

showPlaintext(plaintext) = String(mapped(Char, plaintext));

record BadHexDigit();
instance Exception (BadHexDigit);
badHexDigit(c) UInt8 { throw BadHexDigit(); }
hexDigit(c) = if (c >= '0' and c <= '9') UInt8(c) - UInt8('0')
         else if (c >= 'A' and c <= 'F') UInt8(c) - UInt8('A') + 10u8
         else if (c >= 'a' and c <= 'f') UInt8(c) - UInt8('a') + 10u8
         else badHexDigit(c);
hexByte(str) = shiftLeft(hexDigit(str[0]), 4) + hexDigit(str[1]);

record BadCipher();
instance Exception (BadCipher);

readCipher(str) --> cipher: Array[UInt8, 8] {
    if (size(str) != 16) throw BadCipher();
    var hexBytes = mapped(hexByte, grouped(str, 2));
    for (i in range(size(hexBytes)))
        cipher[i] = hexBytes[i];
}

showCipher(cipher) {
    var s = String();
    resize(s, 16);
    sprintf(cstring(s), cstring("%02X%02X%02X%02X%02X%02X%02X%02X"),
        ..sequenceValues(cipher, static 8)
    );
    return s;
}

main() = dispatchMain(
    (encrypt,     "key plaintext => cipher"),
    (decrypt,     "key cipher => plaintext"),
    (crack,       "plaintext cipher => key (single process, assumes alphanumeric key)"),
    (crackNode,   "port => listen for crack jobs from crackServer"),
    (crackRun,    "plaintext cipher host:port.. => distribute crack jobs to crackNodes"),
);

encrypt(args) {
    if (size(args) < 2) {
        println("Usage: ", commandLine()[0], " encrypt key plaintext");
        return 2;
    }

    var xkey = rc2KeySchedule(args[0]);
    var plaintext = readPlaintext(args[1]);
    println(showCipher(rc2Encrypt(xkey, plaintext)));
    return 0;
}

decrypt(args) {
    if (size(args) < 2) {
        println("Usage: ", commandLine()[0], " decrypt key cipher");
        return 2;
    }

    var xkey = rc2KeySchedule(args[0]);
    var cipher = readCipher(args[1]);
    println(showPlaintext(rc2Decrypt(xkey, cipher)));
    return 0;
}

record AlnumKeySpace (key: String, stride: Int);

overload AlnumKeySpace(start, stride) --> ks: AlnumKeySpace {
    ks.key <-- String(start);
    ks.stride <-- Int(stride);
}

overload iterator(ks: AlnumKeySpace) = ks;
overload hasNext?(ks: AlnumKeySpace) = size(ks.key) <= 128;
overload next(ks: AlnumKeySpace) {
    var ret = ks.key;
    for (i in range(ks.stride))
        incKey(ks.key, 0);
    return ret;
}

record InvalidAlnumKey();
instance Exception (InvalidAlnumKey);

private incKeyChar(char) {
    if (char >= '0' and char < '9'
        or char >= 'A' and char < 'Z'
        or char >= 'a' and char < 'z')
        return Char(UInt8(char) + 1);
    else if (char == '9')
        return 'A';
    else if (char == 'Z')
        return 'a';
    else
        throw InvalidAlnumKey();
}

private incKey(str, n) {
    if (n == size(str))
        push(str, '0');
    else if (str[n] == 'z') {
        str[n] = '0';
        return ..incKey(str, n+1);
    } else
        str[n] = incKeyChar(str[n]);
}

private addKey(s, count) {
    var key = String(s);
    for (i in range(count))
        incKey(key, 0);
    return move(key);
}

crackKey(plaintext, cipher, from, stride) {
    var xkey = XKey();
    for (key in AlnumKeySpace(from, stride)) {
        println("trying key ", key); //XXX
        xkey <-- rc2KeySchedule(key);
        if (rc2Encrypt(xkey, plaintext) == cipher)
            return Maybe(key);
    }
    
    return nothing(String);
}

crack(args) {
    if (size(args) < 2) {
        println("Usage: ", commandLine()[0], " crack plaintext cipher");
        return 2;
    }
    var plaintext = readPlaintext(args[0]);
    var cipher = readCipher(args[1]);

    var maybeKey = crackKey(plaintext, cipher, "0", 1);
    return maybe(maybeKey,
        key => { println("Key found! ", key); return 0; },
        () => { println("Key not found"); return 1; }
    );
}

crackNode(args) {
    if (size(args) < 1) {
        println("Usage: ", commandLine()[0], " crackNode port");
    }

    var port = Int(args[0]);

    var listener = ListenSocket(Inet(INADDR_ANY, port), 0);
    var conn, remoteAddress = ..accept(listener);

    answerRemoteMessage(conn);
}

record InvalidNodeAddress (address: String);
instance Exception (InvalidNodeAddress);

connectNode(name) {
    var hostport = split(name, ':');
    if (size(hostport) != 2)
        throw InvalidNodeAddress(name);
    var host = hostport[0];
    var port = Int(hostport[1]);

    return StreamSocket(Inet(host, port));
}

crackRun(args) {
    if (size(args) < 3) {
        println("Usage: ", commandLine()[0], " crackRun plaintext cipher host:port..");
    }

    var plaintext = readPlaintext(args[0]);
    var cipher    = readCipher(args[1]);
    var nodes     = Vector[StreamSocket](map(connectNode, sliced(args, 2)));
    var nodeCount = size(nodes);
    
    for (i, node in zipped(range(nodeCount), nodes)) {
        remoteMessage(node, () => {
            crackKey(plaintext, cipher, addKey("0", i), nodeCount);
        });
    }
}
