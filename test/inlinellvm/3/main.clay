


//
// insertElement, extractElement, packAdd
[T,n]
insertElement(a:ValArray[T,n], i:Int, x:T) returned:ValArray[T,n] __llvm__{
    %1 = load $ValArray[T,n] * %a
    %2 = load $Int * %i
    %3 = load $T * %x
    %4 = insertelement $ValArray[T,n] %1, $T %3, $Int %2
    store $ValArray[T,n] %4, $ValArray[T,n] * %returned
    ret i32 0
}

[T,n]
extractElement(a:ValArray[T,n], i:Int) returned:T __llvm__{
    %1 = load $ValArray[T,n] * %a
    %2 = load $Int * %i
    %3 = extractelement $ValArray[T,n] %1, $Int %2
    store $T %3, $T * %returned
    ret i32 0
}

procedure packAdd;

[T,n | Integer?(T)]
overload packAdd(a:ValArray[T,n], b:ValArray[T,n]) returned:ValArray[T,n] __llvm__{
    %1 = load $ValArray[T,n] * %a
    %2 = load $ValArray[T,n] * %b
    %3 = add $ValArray[T,n] %1, %2
    store $ValArray[T,n] %3, $ValArray[T,n] * %returned
    ret i32 0
}

[T,n | Float?(T)]
overload packAdd(a:ValArray[T,n], b:ValArray[T,n]) returned:ValArray[T,n] __llvm__{
    %1 = load $ValArray[T,n] * %a
    %2 = load $ValArray[T,n] * %b
    %3 = fadd $ValArray[T,n] %1, %2
    store $ValArray[T,n] %3, $ValArray[T,n] * %returned
    ret i32 0
}



//
// ValArray constructors, destroy
//

[T,n,...A | Tuple[...Times(T,static n)] == Tuple[...A]]
overload ValArray[T,n](...args:A) {
    return insertElements(ValArray[T,n](), static 0, ...args);
}

[n]
private Times(a, static n) = a, ...Times(a, static n-1);
overload Times(a, static 0) = ;

private procedure insertElements;

[T,n,i]
overload insertElements(a:ValArray[T,n], static i, first, ...rest) {
    var b = insertElement(a, i, first);
    return insertElements(b, static i+1, ...rest);
}

[T,n]
overload insertElements(a:ValArray[T,n], static n) {
    return a;
}

[T,n]
overload ValArray[T,n]() returned:ValArray[T,n] {
}

[T,n]
overload ValArray[T,n](src:ValArray[T,n]) returned:ValArray[T,n] __llvm__{
    %1 = load $ValArray[T,n] * %src
    store $ValArray[T,n] %1, $ValArray[T,n] * %returned
    ret i32 0
}

[T,n]
overload destroy(a:ValArray[T,n]) {
}



//
// makeValArray
//

[...A | (countArgs(...A) > 0) and AllEqual?(...A)]
inlined makeValArray(...args:A) {
    alias n = static countArgs(...A);
    alias T = firstArg(...A);
    return ValArray[T, n](...args);
}

private AllEqual?(a, b, ...rest) = (a == b) and AllEqual?(b, ...rest);
overload AllEqual?(a) = true;

private countArgs(x, ...rest) = 1 + countArgs(...rest);
overload countArgs() = 0;

private firstArg(a, ...b) = a;



//
// main
//

main() {
    var v1 = makeValArray(10, 20);
    var v2 = makeValArray(11, 21);
    var v3 = packAdd(v1, v2);
    var x = extractElement(v3, 0);
    var y = extractElement(v3, 1);
    println(x, ", ", y);
}
