import test.*;
import algorithms.*;

record Unordered[T](value : T);

main() = testMain(
  TestSuite("sorting", [
    TestCase("In ascending order", test => {
      var baseSequence = [10, 9, 8, 1, 2, 7, 6, 2, 3, 4];
      var sortedSequence = [1, 2, 2, 3, 4, 6, 7, 8, 9, 10];

      sort(baseSequence);
      expectEqual(test, "the sorted sequence", sortedSequence, baseSequence);
    }),
    TestCase("In descending order", test => {
      var baseSequence = [10, 9, 8, 1, 2, 7, 6, 2, 3, 4];
      var sortedSequence =  [10, 9, 8, 7, 6, 4, 3, 2, 2, 1];

      sort(baseSequence, greater?);
      expectEqual(test, "the sorted sequence", sortedSequence, baseSequence);
    }),
    TestCase("for something not naturally orderable", test => {
      var sequence = Vector[Unordered[Int]]();

      for(i in range(10)){
        push(sequence, Unordered(i));
      }

      sort(sequence, (x, y) => x.value > y.value);

      for(i in range(10)){
        expectEqual(test, printString("sequence[", i, "].0"), 9 - i, sequence[i].value);
      }
    })
  ])
);
